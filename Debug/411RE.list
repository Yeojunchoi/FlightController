
411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002cc58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001af8  0802cdf8  0802cdf8  0003cdf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e8f0  0802e8f0  0004085c  2**0
                  CONTENTS
  4 .ARM          00000008  0802e8f0  0802e8f0  0003e8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802e8f8  0802e8f8  0004085c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000024  0802e8f8  0802e8f8  0003e8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802e91c  0802e91c  0003e91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000085c  20000000  0802e920  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012984  20000860  0802f17c  00040860  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200131e4  0802f17c  000431e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004085c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00065611  00000000  00000000  0004088c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000c262  00000000  00000000  000a5e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002c60  00000000  00000000  000b2100  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002830  00000000  00000000  000b4d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000276e7  00000000  00000000  000b7590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000332ad  00000000  00000000  000dec77  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b3240  00000000  00000000  00111f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c5164  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d33c  00000000  00000000  001c51e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000860 	.word	0x20000860
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0802cde0 	.word	0x0802cde0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000864 	.word	0x20000864
 80001dc:	0802cde0 	.word	0x0802cde0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_frsub>:
 8000c98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	e002      	b.n	8000ca4 <__addsf3>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fsub>:
 8000ca0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ca4 <__addsf3>:
 8000ca4:	0042      	lsls	r2, r0, #1
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cac:	ea92 0f03 	teqne	r2, r3
 8000cb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb8:	d06a      	beq.n	8000d90 <__addsf3+0xec>
 8000cba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cc2:	bfc1      	itttt	gt
 8000cc4:	18d2      	addgt	r2, r2, r3
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	4048      	eorgt	r0, r1
 8000cca:	4041      	eorgt	r1, r0
 8000ccc:	bfb8      	it	lt
 8000cce:	425b      	neglt	r3, r3
 8000cd0:	2b19      	cmp	r3, #25
 8000cd2:	bf88      	it	hi
 8000cd4:	4770      	bxhi	lr
 8000cd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4249      	negne	r1, r1
 8000cf6:	ea92 0f03 	teq	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <__addsf3+0xd8>
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	fa41 fc03 	asr.w	ip, r1, r3
 8000d04:	eb10 000c 	adds.w	r0, r0, ip
 8000d08:	f1c3 0320 	rsb	r3, r3, #32
 8000d0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__addsf3+0x78>
 8000d16:	4249      	negs	r1, r1
 8000d18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d20:	d313      	bcc.n	8000d4a <__addsf3+0xa6>
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d26:	d306      	bcc.n	8000d36 <__addsf3+0x92>
 8000d28:	0840      	lsrs	r0, r0, #1
 8000d2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2e:	f102 0201 	add.w	r2, r2, #1
 8000d32:	2afe      	cmp	r2, #254	; 0xfe
 8000d34:	d251      	bcs.n	8000dda <__addsf3+0x136>
 8000d36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	ea40 0003 	orr.w	r0, r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	eb40 0000 	adc.w	r0, r0, r0
 8000d50:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d54:	f1a2 0201 	sub.w	r2, r2, #1
 8000d58:	d1ed      	bne.n	8000d36 <__addsf3+0x92>
 8000d5a:	fab0 fc80 	clz	ip, r0
 8000d5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d62:	ebb2 020c 	subs.w	r2, r2, ip
 8000d66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d6a:	bfaa      	itet	ge
 8000d6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d70:	4252      	neglt	r2, r2
 8000d72:	4318      	orrge	r0, r3
 8000d74:	bfbc      	itt	lt
 8000d76:	40d0      	lsrlt	r0, r2
 8000d78:	4318      	orrlt	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	f092 0f00 	teq	r2, #0
 8000d80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d84:	bf06      	itte	eq
 8000d86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d8a:	3201      	addeq	r2, #1
 8000d8c:	3b01      	subne	r3, #1
 8000d8e:	e7b5      	b.n	8000cfc <__addsf3+0x58>
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d021      	beq.n	8000de4 <__addsf3+0x140>
 8000da0:	ea92 0f03 	teq	r2, r3
 8000da4:	d004      	beq.n	8000db0 <__addsf3+0x10c>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	bf08      	it	eq
 8000dac:	4608      	moveq	r0, r1
 8000dae:	4770      	bx	lr
 8000db0:	ea90 0f01 	teq	r0, r1
 8000db4:	bf1c      	itt	ne
 8000db6:	2000      	movne	r0, #0
 8000db8:	4770      	bxne	lr
 8000dba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dbe:	d104      	bne.n	8000dca <__addsf3+0x126>
 8000dc0:	0040      	lsls	r0, r0, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dce:	bf3c      	itt	cc
 8000dd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dd4:	4770      	bxcc	lr
 8000dd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de2:	4770      	bx	lr
 8000de4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de8:	bf16      	itet	ne
 8000dea:	4608      	movne	r0, r1
 8000dec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df0:	4601      	movne	r1, r0
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	bf06      	itte	eq
 8000df6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dfa:	ea90 0f01 	teqeq	r0, r1
 8000dfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ui2f>:
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e004      	b.n	8000e14 <__aeabi_i2f+0x8>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_i2f>:
 8000e0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e10:	bf48      	it	mi
 8000e12:	4240      	negmi	r0, r0
 8000e14:	ea5f 0c00 	movs.w	ip, r0
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e20:	4601      	mov	r1, r0
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	e01c      	b.n	8000e62 <__aeabi_l2f+0x2a>

08000e28 <__aeabi_ul2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e00a      	b.n	8000e4c <__aeabi_l2f+0x14>
 8000e36:	bf00      	nop

08000e38 <__aeabi_l2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e44:	d502      	bpl.n	8000e4c <__aeabi_l2f+0x14>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	ea5f 0c01 	movs.w	ip, r1
 8000e50:	bf02      	ittt	eq
 8000e52:	4684      	moveq	ip, r0
 8000e54:	4601      	moveq	r1, r0
 8000e56:	2000      	moveq	r0, #0
 8000e58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e5c:	bf08      	it	eq
 8000e5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e66:	fabc f28c 	clz	r2, ip
 8000e6a:	3a08      	subs	r2, #8
 8000e6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e70:	db10      	blt.n	8000e94 <__aeabi_l2f+0x5c>
 8000e72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e84:	fa20 f202 	lsr.w	r2, r0, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f102 0220 	add.w	r2, r2, #32
 8000e98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_ldivmod>:
 8000eb4:	b97b      	cbnz	r3, 8000ed6 <__aeabi_ldivmod+0x22>
 8000eb6:	b972      	cbnz	r2, 8000ed6 <__aeabi_ldivmod+0x22>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	bfbe      	ittt	lt
 8000ebc:	2000      	movlt	r0, #0
 8000ebe:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ec2:	e006      	blt.n	8000ed2 <__aeabi_ldivmod+0x1e>
 8000ec4:	bf08      	it	eq
 8000ec6:	2800      	cmpeq	r0, #0
 8000ec8:	bf1c      	itt	ne
 8000eca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ece:	f04f 30ff 	movne.w	r0, #4294967295
 8000ed2:	f000 b9bd 	b.w	8001250 <__aeabi_idiv0>
 8000ed6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eda:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ede:	2900      	cmp	r1, #0
 8000ee0:	db09      	blt.n	8000ef6 <__aeabi_ldivmod+0x42>
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	db1a      	blt.n	8000f1c <__aeabi_ldivmod+0x68>
 8000ee6:	f000 f84d 	bl	8000f84 <__udivmoddi4>
 8000eea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ef2:	b004      	add	sp, #16
 8000ef4:	4770      	bx	lr
 8000ef6:	4240      	negs	r0, r0
 8000ef8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db1b      	blt.n	8000f38 <__aeabi_ldivmod+0x84>
 8000f00:	f000 f840 	bl	8000f84 <__udivmoddi4>
 8000f04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f0c:	b004      	add	sp, #16
 8000f0e:	4240      	negs	r0, r0
 8000f10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f14:	4252      	negs	r2, r2
 8000f16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f1a:	4770      	bx	lr
 8000f1c:	4252      	negs	r2, r2
 8000f1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f22:	f000 f82f 	bl	8000f84 <__udivmoddi4>
 8000f26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f2e:	b004      	add	sp, #16
 8000f30:	4240      	negs	r0, r0
 8000f32:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f36:	4770      	bx	lr
 8000f38:	4252      	negs	r2, r2
 8000f3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f3e:	f000 f821 	bl	8000f84 <__udivmoddi4>
 8000f42:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f4a:	b004      	add	sp, #16
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	4770      	bx	lr

08000f54 <__aeabi_uldivmod>:
 8000f54:	b953      	cbnz	r3, 8000f6c <__aeabi_uldivmod+0x18>
 8000f56:	b94a      	cbnz	r2, 8000f6c <__aeabi_uldivmod+0x18>
 8000f58:	2900      	cmp	r1, #0
 8000f5a:	bf08      	it	eq
 8000f5c:	2800      	cmpeq	r0, #0
 8000f5e:	bf1c      	itt	ne
 8000f60:	f04f 31ff 	movne.w	r1, #4294967295
 8000f64:	f04f 30ff 	movne.w	r0, #4294967295
 8000f68:	f000 b972 	b.w	8001250 <__aeabi_idiv0>
 8000f6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f74:	f000 f806 	bl	8000f84 <__udivmoddi4>
 8000f78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f80:	b004      	add	sp, #16
 8000f82:	4770      	bx	lr

08000f84 <__udivmoddi4>:
 8000f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f88:	9e08      	ldr	r6, [sp, #32]
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	4688      	mov	r8, r1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d14b      	bne.n	800102a <__udivmoddi4+0xa6>
 8000f92:	428a      	cmp	r2, r1
 8000f94:	4615      	mov	r5, r2
 8000f96:	d967      	bls.n	8001068 <__udivmoddi4+0xe4>
 8000f98:	fab2 f282 	clz	r2, r2
 8000f9c:	b14a      	cbz	r2, 8000fb2 <__udivmoddi4+0x2e>
 8000f9e:	f1c2 0720 	rsb	r7, r2, #32
 8000fa2:	fa01 f302 	lsl.w	r3, r1, r2
 8000fa6:	fa20 f707 	lsr.w	r7, r0, r7
 8000faa:	4095      	lsls	r5, r2
 8000fac:	ea47 0803 	orr.w	r8, r7, r3
 8000fb0:	4094      	lsls	r4, r2
 8000fb2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fb6:	0c23      	lsrs	r3, r4, #16
 8000fb8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000fbc:	fa1f fc85 	uxth.w	ip, r5
 8000fc0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000fc4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fc8:	fb07 f10c 	mul.w	r1, r7, ip
 8000fcc:	4299      	cmp	r1, r3
 8000fce:	d909      	bls.n	8000fe4 <__udivmoddi4+0x60>
 8000fd0:	18eb      	adds	r3, r5, r3
 8000fd2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000fd6:	f080 811b 	bcs.w	8001210 <__udivmoddi4+0x28c>
 8000fda:	4299      	cmp	r1, r3
 8000fdc:	f240 8118 	bls.w	8001210 <__udivmoddi4+0x28c>
 8000fe0:	3f02      	subs	r7, #2
 8000fe2:	442b      	add	r3, r5
 8000fe4:	1a5b      	subs	r3, r3, r1
 8000fe6:	b2a4      	uxth	r4, r4
 8000fe8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ff0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ff8:	45a4      	cmp	ip, r4
 8000ffa:	d909      	bls.n	8001010 <__udivmoddi4+0x8c>
 8000ffc:	192c      	adds	r4, r5, r4
 8000ffe:	f100 33ff 	add.w	r3, r0, #4294967295
 8001002:	f080 8107 	bcs.w	8001214 <__udivmoddi4+0x290>
 8001006:	45a4      	cmp	ip, r4
 8001008:	f240 8104 	bls.w	8001214 <__udivmoddi4+0x290>
 800100c:	3802      	subs	r0, #2
 800100e:	442c      	add	r4, r5
 8001010:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001014:	eba4 040c 	sub.w	r4, r4, ip
 8001018:	2700      	movs	r7, #0
 800101a:	b11e      	cbz	r6, 8001024 <__udivmoddi4+0xa0>
 800101c:	40d4      	lsrs	r4, r2
 800101e:	2300      	movs	r3, #0
 8001020:	e9c6 4300 	strd	r4, r3, [r6]
 8001024:	4639      	mov	r1, r7
 8001026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800102a:	428b      	cmp	r3, r1
 800102c:	d909      	bls.n	8001042 <__udivmoddi4+0xbe>
 800102e:	2e00      	cmp	r6, #0
 8001030:	f000 80eb 	beq.w	800120a <__udivmoddi4+0x286>
 8001034:	2700      	movs	r7, #0
 8001036:	e9c6 0100 	strd	r0, r1, [r6]
 800103a:	4638      	mov	r0, r7
 800103c:	4639      	mov	r1, r7
 800103e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001042:	fab3 f783 	clz	r7, r3
 8001046:	2f00      	cmp	r7, #0
 8001048:	d147      	bne.n	80010da <__udivmoddi4+0x156>
 800104a:	428b      	cmp	r3, r1
 800104c:	d302      	bcc.n	8001054 <__udivmoddi4+0xd0>
 800104e:	4282      	cmp	r2, r0
 8001050:	f200 80fa 	bhi.w	8001248 <__udivmoddi4+0x2c4>
 8001054:	1a84      	subs	r4, r0, r2
 8001056:	eb61 0303 	sbc.w	r3, r1, r3
 800105a:	2001      	movs	r0, #1
 800105c:	4698      	mov	r8, r3
 800105e:	2e00      	cmp	r6, #0
 8001060:	d0e0      	beq.n	8001024 <__udivmoddi4+0xa0>
 8001062:	e9c6 4800 	strd	r4, r8, [r6]
 8001066:	e7dd      	b.n	8001024 <__udivmoddi4+0xa0>
 8001068:	b902      	cbnz	r2, 800106c <__udivmoddi4+0xe8>
 800106a:	deff      	udf	#255	; 0xff
 800106c:	fab2 f282 	clz	r2, r2
 8001070:	2a00      	cmp	r2, #0
 8001072:	f040 808f 	bne.w	8001194 <__udivmoddi4+0x210>
 8001076:	1b49      	subs	r1, r1, r5
 8001078:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800107c:	fa1f f885 	uxth.w	r8, r5
 8001080:	2701      	movs	r7, #1
 8001082:	fbb1 fcfe 	udiv	ip, r1, lr
 8001086:	0c23      	lsrs	r3, r4, #16
 8001088:	fb0e 111c 	mls	r1, lr, ip, r1
 800108c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001090:	fb08 f10c 	mul.w	r1, r8, ip
 8001094:	4299      	cmp	r1, r3
 8001096:	d907      	bls.n	80010a8 <__udivmoddi4+0x124>
 8001098:	18eb      	adds	r3, r5, r3
 800109a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800109e:	d202      	bcs.n	80010a6 <__udivmoddi4+0x122>
 80010a0:	4299      	cmp	r1, r3
 80010a2:	f200 80cd 	bhi.w	8001240 <__udivmoddi4+0x2bc>
 80010a6:	4684      	mov	ip, r0
 80010a8:	1a59      	subs	r1, r3, r1
 80010aa:	b2a3      	uxth	r3, r4
 80010ac:	fbb1 f0fe 	udiv	r0, r1, lr
 80010b0:	fb0e 1410 	mls	r4, lr, r0, r1
 80010b4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80010b8:	fb08 f800 	mul.w	r8, r8, r0
 80010bc:	45a0      	cmp	r8, r4
 80010be:	d907      	bls.n	80010d0 <__udivmoddi4+0x14c>
 80010c0:	192c      	adds	r4, r5, r4
 80010c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80010c6:	d202      	bcs.n	80010ce <__udivmoddi4+0x14a>
 80010c8:	45a0      	cmp	r8, r4
 80010ca:	f200 80b6 	bhi.w	800123a <__udivmoddi4+0x2b6>
 80010ce:	4618      	mov	r0, r3
 80010d0:	eba4 0408 	sub.w	r4, r4, r8
 80010d4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010d8:	e79f      	b.n	800101a <__udivmoddi4+0x96>
 80010da:	f1c7 0c20 	rsb	ip, r7, #32
 80010de:	40bb      	lsls	r3, r7
 80010e0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80010e4:	ea4e 0e03 	orr.w	lr, lr, r3
 80010e8:	fa01 f407 	lsl.w	r4, r1, r7
 80010ec:	fa20 f50c 	lsr.w	r5, r0, ip
 80010f0:	fa21 f30c 	lsr.w	r3, r1, ip
 80010f4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80010f8:	4325      	orrs	r5, r4
 80010fa:	fbb3 f9f8 	udiv	r9, r3, r8
 80010fe:	0c2c      	lsrs	r4, r5, #16
 8001100:	fb08 3319 	mls	r3, r8, r9, r3
 8001104:	fa1f fa8e 	uxth.w	sl, lr
 8001108:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800110c:	fb09 f40a 	mul.w	r4, r9, sl
 8001110:	429c      	cmp	r4, r3
 8001112:	fa02 f207 	lsl.w	r2, r2, r7
 8001116:	fa00 f107 	lsl.w	r1, r0, r7
 800111a:	d90b      	bls.n	8001134 <__udivmoddi4+0x1b0>
 800111c:	eb1e 0303 	adds.w	r3, lr, r3
 8001120:	f109 30ff 	add.w	r0, r9, #4294967295
 8001124:	f080 8087 	bcs.w	8001236 <__udivmoddi4+0x2b2>
 8001128:	429c      	cmp	r4, r3
 800112a:	f240 8084 	bls.w	8001236 <__udivmoddi4+0x2b2>
 800112e:	f1a9 0902 	sub.w	r9, r9, #2
 8001132:	4473      	add	r3, lr
 8001134:	1b1b      	subs	r3, r3, r4
 8001136:	b2ad      	uxth	r5, r5
 8001138:	fbb3 f0f8 	udiv	r0, r3, r8
 800113c:	fb08 3310 	mls	r3, r8, r0, r3
 8001140:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8001144:	fb00 fa0a 	mul.w	sl, r0, sl
 8001148:	45a2      	cmp	sl, r4
 800114a:	d908      	bls.n	800115e <__udivmoddi4+0x1da>
 800114c:	eb1e 0404 	adds.w	r4, lr, r4
 8001150:	f100 33ff 	add.w	r3, r0, #4294967295
 8001154:	d26b      	bcs.n	800122e <__udivmoddi4+0x2aa>
 8001156:	45a2      	cmp	sl, r4
 8001158:	d969      	bls.n	800122e <__udivmoddi4+0x2aa>
 800115a:	3802      	subs	r0, #2
 800115c:	4474      	add	r4, lr
 800115e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001162:	fba0 8902 	umull	r8, r9, r0, r2
 8001166:	eba4 040a 	sub.w	r4, r4, sl
 800116a:	454c      	cmp	r4, r9
 800116c:	46c2      	mov	sl, r8
 800116e:	464b      	mov	r3, r9
 8001170:	d354      	bcc.n	800121c <__udivmoddi4+0x298>
 8001172:	d051      	beq.n	8001218 <__udivmoddi4+0x294>
 8001174:	2e00      	cmp	r6, #0
 8001176:	d069      	beq.n	800124c <__udivmoddi4+0x2c8>
 8001178:	ebb1 050a 	subs.w	r5, r1, sl
 800117c:	eb64 0403 	sbc.w	r4, r4, r3
 8001180:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001184:	40fd      	lsrs	r5, r7
 8001186:	40fc      	lsrs	r4, r7
 8001188:	ea4c 0505 	orr.w	r5, ip, r5
 800118c:	e9c6 5400 	strd	r5, r4, [r6]
 8001190:	2700      	movs	r7, #0
 8001192:	e747      	b.n	8001024 <__udivmoddi4+0xa0>
 8001194:	f1c2 0320 	rsb	r3, r2, #32
 8001198:	fa20 f703 	lsr.w	r7, r0, r3
 800119c:	4095      	lsls	r5, r2
 800119e:	fa01 f002 	lsl.w	r0, r1, r2
 80011a2:	fa21 f303 	lsr.w	r3, r1, r3
 80011a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011aa:	4338      	orrs	r0, r7
 80011ac:	0c01      	lsrs	r1, r0, #16
 80011ae:	fbb3 f7fe 	udiv	r7, r3, lr
 80011b2:	fa1f f885 	uxth.w	r8, r5
 80011b6:	fb0e 3317 	mls	r3, lr, r7, r3
 80011ba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011be:	fb07 f308 	mul.w	r3, r7, r8
 80011c2:	428b      	cmp	r3, r1
 80011c4:	fa04 f402 	lsl.w	r4, r4, r2
 80011c8:	d907      	bls.n	80011da <__udivmoddi4+0x256>
 80011ca:	1869      	adds	r1, r5, r1
 80011cc:	f107 3cff 	add.w	ip, r7, #4294967295
 80011d0:	d22f      	bcs.n	8001232 <__udivmoddi4+0x2ae>
 80011d2:	428b      	cmp	r3, r1
 80011d4:	d92d      	bls.n	8001232 <__udivmoddi4+0x2ae>
 80011d6:	3f02      	subs	r7, #2
 80011d8:	4429      	add	r1, r5
 80011da:	1acb      	subs	r3, r1, r3
 80011dc:	b281      	uxth	r1, r0
 80011de:	fbb3 f0fe 	udiv	r0, r3, lr
 80011e2:	fb0e 3310 	mls	r3, lr, r0, r3
 80011e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011ea:	fb00 f308 	mul.w	r3, r0, r8
 80011ee:	428b      	cmp	r3, r1
 80011f0:	d907      	bls.n	8001202 <__udivmoddi4+0x27e>
 80011f2:	1869      	adds	r1, r5, r1
 80011f4:	f100 3cff 	add.w	ip, r0, #4294967295
 80011f8:	d217      	bcs.n	800122a <__udivmoddi4+0x2a6>
 80011fa:	428b      	cmp	r3, r1
 80011fc:	d915      	bls.n	800122a <__udivmoddi4+0x2a6>
 80011fe:	3802      	subs	r0, #2
 8001200:	4429      	add	r1, r5
 8001202:	1ac9      	subs	r1, r1, r3
 8001204:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001208:	e73b      	b.n	8001082 <__udivmoddi4+0xfe>
 800120a:	4637      	mov	r7, r6
 800120c:	4630      	mov	r0, r6
 800120e:	e709      	b.n	8001024 <__udivmoddi4+0xa0>
 8001210:	4607      	mov	r7, r0
 8001212:	e6e7      	b.n	8000fe4 <__udivmoddi4+0x60>
 8001214:	4618      	mov	r0, r3
 8001216:	e6fb      	b.n	8001010 <__udivmoddi4+0x8c>
 8001218:	4541      	cmp	r1, r8
 800121a:	d2ab      	bcs.n	8001174 <__udivmoddi4+0x1f0>
 800121c:	ebb8 0a02 	subs.w	sl, r8, r2
 8001220:	eb69 020e 	sbc.w	r2, r9, lr
 8001224:	3801      	subs	r0, #1
 8001226:	4613      	mov	r3, r2
 8001228:	e7a4      	b.n	8001174 <__udivmoddi4+0x1f0>
 800122a:	4660      	mov	r0, ip
 800122c:	e7e9      	b.n	8001202 <__udivmoddi4+0x27e>
 800122e:	4618      	mov	r0, r3
 8001230:	e795      	b.n	800115e <__udivmoddi4+0x1da>
 8001232:	4667      	mov	r7, ip
 8001234:	e7d1      	b.n	80011da <__udivmoddi4+0x256>
 8001236:	4681      	mov	r9, r0
 8001238:	e77c      	b.n	8001134 <__udivmoddi4+0x1b0>
 800123a:	3802      	subs	r0, #2
 800123c:	442c      	add	r4, r5
 800123e:	e747      	b.n	80010d0 <__udivmoddi4+0x14c>
 8001240:	f1ac 0c02 	sub.w	ip, ip, #2
 8001244:	442b      	add	r3, r5
 8001246:	e72f      	b.n	80010a8 <__udivmoddi4+0x124>
 8001248:	4638      	mov	r0, r7
 800124a:	e708      	b.n	800105e <__udivmoddi4+0xda>
 800124c:	4637      	mov	r7, r6
 800124e:	e6e9      	b.n	8001024 <__udivmoddi4+0xa0>

08001250 <__aeabi_idiv0>:
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop

08001254 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>:
Motor m3(&htim3, TIM_CHANNEL_2);
Motor m4(&htim5, TIM_CHANNEL_1);
Motor m5(&htim5, TIM_CHANNEL_2);
Motor m6(&htim3, TIM_CHANNEL_3);

Motor::Motor(TIM_HandleTypeDef *htim, uint32_t Channel)
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	: htim(htim)
	, Channel(Channel)
	, pwm(1000)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001272:	811a      	strh	r2, [r3, #8]
{ }
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4618      	mov	r0, r3
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <_ZN2FC5Motor5startEv>:

void Motor::start(){
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(htim, Channel);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4619      	mov	r1, r3
 8001294:	4610      	mov	r0, r2
 8001296:	f019 fad9 	bl	801a84c <HAL_TIM_PWM_Start>
	setPWM(1000);
 800129a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 f804 	bl	80012ac <_ZN2FC5Motor6setPWMEt>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_ZN2FC5Motor6setPWMEt>:

void Motor::stop(){
	HAL_TIMEx_PWMN_Stop(htim, Channel);
}

void Motor::setPWM(uint16_t pwm){
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]
	if(pwm < MIN_PWM) 			pwm = MIN_PWM;
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012be:	d203      	bcs.n	80012c8 <_ZN2FC5Motor6setPWMEt+0x1c>
 80012c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c4:	807b      	strh	r3, [r7, #2]
 80012c6:	e006      	b.n	80012d6 <_ZN2FC5Motor6setPWMEt+0x2a>
	else if(pwm > MAX_PWM)		pwm = MAX_PWM;
 80012c8:	887b      	ldrh	r3, [r7, #2]
 80012ca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012ce:	d902      	bls.n	80012d6 <_ZN2FC5Motor6setPWMEt+0x2a>
 80012d0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012d4:	807b      	strh	r3, [r7, #2]

	this->pwm = pwm;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	887a      	ldrh	r2, [r7, #2]
 80012da:	811a      	strh	r2, [r3, #8]

	/*
	 *  pwm(1000 ~ 2000) scale to CCR register value(10500 ~ 21000);
	 */
	uint16_t output = (pwm - MIN_PWM) * ((MAX_CCR - MIN_CCR) / (MAX_PWM - MIN_PWM)) + MIN_CCR;
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	461a      	mov	r2, r3
 80012e0:	0092      	lsls	r2, r2, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d105      	bne.n	80012fe <_ZN2FC5Motor6setPWMEt+0x52>
 80012f2:	89fa      	ldrh	r2, [r7, #14]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012fc:	e018      	b.n	8001330 <_ZN2FC5Motor6setPWMEt+0x84>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b04      	cmp	r3, #4
 8001304:	d105      	bne.n	8001312 <_ZN2FC5Motor6setPWMEt+0x66>
 8001306:	89fa      	ldrh	r2, [r7, #14]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001310:	e00e      	b.n	8001330 <_ZN2FC5Motor6setPWMEt+0x84>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b08      	cmp	r3, #8
 8001318:	d105      	bne.n	8001326 <_ZN2FC5Motor6setPWMEt+0x7a>
 800131a:	89fa      	ldrh	r2, [r7, #14]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001324:	e004      	b.n	8001330 <_ZN2FC5Motor6setPWMEt+0x84>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8001326:	89fa      	ldrh	r2, [r7, #14]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <_Z41__static_initialization_and_destruction_0ii>:

} /* namespace FC */
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d122      	bne.n	8001392 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001352:	4293      	cmp	r3, r2
 8001354:	d11d      	bne.n	8001392 <_Z41__static_initialization_and_destruction_0ii+0x56>
Motor m1(&htim3, TIM_CHANNEL_4);
 8001356:	220c      	movs	r2, #12
 8001358:	4910      	ldr	r1, [pc, #64]	; (800139c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800135a:	4811      	ldr	r0, [pc, #68]	; (80013a0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800135c:	f7ff ff7a 	bl	8001254 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m2(&htim3, TIM_CHANNEL_1);
 8001360:	2200      	movs	r2, #0
 8001362:	490e      	ldr	r1, [pc, #56]	; (800139c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001364:	480f      	ldr	r0, [pc, #60]	; (80013a4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001366:	f7ff ff75 	bl	8001254 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m3(&htim3, TIM_CHANNEL_2);
 800136a:	2204      	movs	r2, #4
 800136c:	490b      	ldr	r1, [pc, #44]	; (800139c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800136e:	480e      	ldr	r0, [pc, #56]	; (80013a8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001370:	f7ff ff70 	bl	8001254 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m4(&htim5, TIM_CHANNEL_1);
 8001374:	2200      	movs	r2, #0
 8001376:	490d      	ldr	r1, [pc, #52]	; (80013ac <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800137a:	f7ff ff6b 	bl	8001254 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m5(&htim5, TIM_CHANNEL_2);
 800137e:	2204      	movs	r2, #4
 8001380:	490a      	ldr	r1, [pc, #40]	; (80013ac <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001382:	480c      	ldr	r0, [pc, #48]	; (80013b4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001384:	f7ff ff66 	bl	8001254 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m6(&htim3, TIM_CHANNEL_3);
 8001388:	2208      	movs	r2, #8
 800138a:	4904      	ldr	r1, [pc, #16]	; (800139c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800138c:	480a      	ldr	r0, [pc, #40]	; (80013b8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800138e:	f7ff ff61 	bl	8001254 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
} /* namespace FC */
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20010ee8 	.word	0x20010ee8
 80013a0:	2000087c 	.word	0x2000087c
 80013a4:	20000888 	.word	0x20000888
 80013a8:	20000894 	.word	0x20000894
 80013ac:	20010ea8 	.word	0x20010ea8
 80013b0:	200008a0 	.word	0x200008a0
 80013b4:	200008ac 	.word	0x200008ac
 80013b8:	200008b8 	.word	0x200008b8

080013bc <_GLOBAL__sub_I__ZN2FC2m1E>:
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
 80013c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013c4:	2001      	movs	r0, #1
 80013c6:	f7ff ffb9 	bl	800133c <_Z41__static_initialization_and_destruction_0ii>
 80013ca:	bd80      	pop	{r7, pc}

080013cc <IST8310>:
#define IST8310_MAX_VAL_XY ((1600 / IST8310_RESOLUTION) + 1)
#define IST8310_MIN_VAL_XY (-IST8310_MAX_VAL_XY)
#define IST8310_MAX_VAL_Z ((2500 / IST8310_RESOLUTION) + 1)
#define IST8310_MIN_VAL_Z (-IST8310_MAX_VAL_Z)

void IST8310(I2C_HandleTypeDef *hi2c){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	IST8310_I2C = hi2c;
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <IST8310+0x24>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
	IST8310_reset();
 80013da:	f000 f8f5 	bl	80015c8 <IST8310_reset>
	IST8310_write_reg(IST8310_ADDR_CTRL1, IST8310_CTRL1_MODE_CONT_200HZ);
 80013de:	210b      	movs	r1, #11
 80013e0:	200a      	movs	r0, #10
 80013e2:	f000 f8df 	bl	80015a4 <IST8310_write_reg>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20001468 	.word	0x20001468
 80013f4:	00000000 	.word	0x00000000

080013f8 <IST8310_i2cRxCpltCallback>:

	HAL_I2C_Mem_Read_IT(IST8310_I2C, IST8310_BUS_I2C_ADDR, IST8310_ADDR_DATA_OUT_X_LSB, 1, (uint8_t*)&ist8310.buf, sizeof(ist8310.buf));
	bm_i2cFlag = bm_i2cIST8310;

}
uint8_t IST8310_i2cRxCpltCallback(){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	if(bm_i2cFlag != bm_i2cIST8310) return 0;
 80013fc:	4b58      	ldr	r3, [pc, #352]	; (8001560 <IST8310_i2cRxCpltCallback+0x168>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d001      	beq.n	8001408 <IST8310_i2cRxCpltCallback+0x10>
 8001404:	2300      	movs	r3, #0
 8001406:	e098      	b.n	800153a <IST8310_i2cRxCpltCallback+0x142>

	bm_i2cFlag = bm_i2cIdle;
 8001408:	4b55      	ldr	r3, [pc, #340]	; (8001560 <IST8310_i2cRxCpltCallback+0x168>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]

	/* swap the data we just received */
	ist8310.count.x = (((int16_t)ist8310.buf.x[1]) << 8) | (int16_t)ist8310.buf.x[0];
 800140e:	4b55      	ldr	r3, [pc, #340]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 8001410:	795b      	ldrb	r3, [r3, #5]
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	b21a      	sxth	r2, r3
 8001416:	4b53      	ldr	r3, [pc, #332]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 8001418:	791b      	ldrb	r3, [r3, #4]
 800141a:	b21b      	sxth	r3, r3
 800141c:	4313      	orrs	r3, r2
 800141e:	b21a      	sxth	r2, r3
 8001420:	4b50      	ldr	r3, [pc, #320]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 8001422:	815a      	strh	r2, [r3, #10]
	ist8310.count.y = (((int16_t)ist8310.buf.y[1]) << 8) | (int16_t)ist8310.buf.y[0];
 8001424:	4b4f      	ldr	r3, [pc, #316]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 8001426:	79db      	ldrb	r3, [r3, #7]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	b21a      	sxth	r2, r3
 800142c:	4b4d      	ldr	r3, [pc, #308]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 800142e:	799b      	ldrb	r3, [r3, #6]
 8001430:	b21b      	sxth	r3, r3
 8001432:	4313      	orrs	r3, r2
 8001434:	b21a      	sxth	r2, r3
 8001436:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 8001438:	819a      	strh	r2, [r3, #12]
	ist8310.count.z = (((int16_t)ist8310.buf.z[1]) << 8) | (int16_t)ist8310.buf.z[0];
 800143a:	4b4a      	ldr	r3, [pc, #296]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 800143c:	7a5b      	ldrb	r3, [r3, #9]
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	b21a      	sxth	r2, r3
 8001442:	4b48      	ldr	r3, [pc, #288]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 8001444:	7a1b      	ldrb	r3, [r3, #8]
 8001446:	b21b      	sxth	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	b21a      	sxth	r2, r3
 800144c:	4b45      	ldr	r3, [pc, #276]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 800144e:	81da      	strh	r2, [r3, #14]

	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 8001450:	4b44      	ldr	r3, [pc, #272]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 8001452:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f86c 	bl	8000534 <__aeabi_i2d>
 800145c:	a338      	add	r3, pc, #224	; (adr r3, 8001540 <IST8310_i2cRxCpltCallback+0x148>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	f7ff fb61 	bl	8000b28 <__aeabi_dcmpgt>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d145      	bne.n	80014f8 <IST8310_i2cRxCpltCallback+0x100>
 800146c:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 800146e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff f85e 	bl	8000534 <__aeabi_i2d>
 8001478:	a333      	add	r3, pc, #204	; (adr r3, 8001548 <IST8310_i2cRxCpltCallback+0x150>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	f7ff fb35 	bl	8000aec <__aeabi_dcmplt>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d137      	bne.n	80014f8 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 8001488:	4b36      	ldr	r3, [pc, #216]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 800148a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f850 	bl	8000534 <__aeabi_i2d>
	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 8001494:	a32a      	add	r3, pc, #168	; (adr r3, 8001540 <IST8310_i2cRxCpltCallback+0x148>)
 8001496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149a:	f7ff fb45 	bl	8000b28 <__aeabi_dcmpgt>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d129      	bne.n	80014f8 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 80014a4:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 80014a6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f842 	bl	8000534 <__aeabi_i2d>
 80014b0:	a325      	add	r3, pc, #148	; (adr r3, 8001548 <IST8310_i2cRxCpltCallback+0x150>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7ff fb19 	bl	8000aec <__aeabi_dcmplt>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d11b      	bne.n	80014f8 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z)
 80014c0:	4b28      	ldr	r3, [pc, #160]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 80014c2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f834 	bl	8000534 <__aeabi_i2d>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 80014cc:	a320      	add	r3, pc, #128	; (adr r3, 8001550 <IST8310_i2cRxCpltCallback+0x158>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff fb29 	bl	8000b28 <__aeabi_dcmpgt>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10d      	bne.n	80014f8 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z)
 80014dc:	4b21      	ldr	r3, [pc, #132]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 80014de:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f826 	bl	8000534 <__aeabi_i2d>
 80014e8:	a31b      	add	r3, pc, #108	; (adr r3, 8001558 <IST8310_i2cRxCpltCallback+0x160>)
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	f7ff fafd 	bl	8000aec <__aeabi_dcmplt>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <IST8310_i2cRxCpltCallback+0x104>
	{
		return 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	e01e      	b.n	800153a <IST8310_i2cRxCpltCallback+0x142>
	 * raw outputs
	 *
	 * Sensor doesn't follow right hand rule, swap x and y to make it obey
	 * it.
	 */
	ist8310.raw[0] = (float)(ist8310.count.y);
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 80014fe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 800150c:	edc3 7a04 	vstr	s15, [r3, #16]
	ist8310.raw[1] = (float)(ist8310.count.x);
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 8001512:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001516:	ee07 3a90 	vmov	s15, r3
 800151a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 8001520:	edc3 7a05 	vstr	s15, [r3, #20]
	ist8310.raw[2] = (float)(ist8310.count.z);
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 8001526:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <IST8310_i2cRxCpltCallback+0x16c>)
 8001534:	edc3 7a06 	vstr	s15, [r3, #24]
	return 1;
 8001538:	2301      	movs	r3, #1
}
 800153a:	4618      	mov	r0, r3
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	55555556 	.word	0x55555556
 8001544:	40b4d655 	.word	0x40b4d655
 8001548:	55555556 	.word	0x55555556
 800154c:	c0b4d655 	.word	0xc0b4d655
 8001550:	aaaaaaab 	.word	0xaaaaaaab
 8001554:	40c0472a 	.word	0x40c0472a
 8001558:	aaaaaaab 	.word	0xaaaaaaab
 800155c:	c0c0472a 	.word	0xc0c0472a
 8001560:	20001484 	.word	0x20001484
 8001564:	20001468 	.word	0x20001468

08001568 <IST8310_write>:

void IST8310_write(uint8_t address, uint8_t *data, uint8_t count){
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af04      	add	r7, sp, #16
 800156e:	4603      	mov	r3, r0
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	71fb      	strb	r3, [r7, #7]
 8001574:	4613      	mov	r3, r2
 8001576:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(IST8310_I2C, IST8310_BUS_I2C_ADDR, address, 1, data, count, IST8310_DEFAULT_TIMEOUT);
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <IST8310_write+0x38>)
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	b299      	uxth	r1, r3
 8001580:	79bb      	ldrb	r3, [r7, #6]
 8001582:	b29b      	uxth	r3, r3
 8001584:	2264      	movs	r2, #100	; 0x64
 8001586:	9202      	str	r2, [sp, #8]
 8001588:	9301      	str	r3, [sp, #4]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	2301      	movs	r3, #1
 8001590:	460a      	mov	r2, r1
 8001592:	211c      	movs	r1, #28
 8001594:	f014 fbb4 	bl	8015d00 <HAL_I2C_Mem_Write>
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20001468 	.word	0x20001468

080015a4 <IST8310_write_reg>:

void IST8310_write_reg(uint8_t reg, uint8_t val){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	460a      	mov	r2, r1
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	4613      	mov	r3, r2
 80015b2:	71bb      	strb	r3, [r7, #6]
	IST8310_write(reg, &val, 1);
 80015b4:	1db9      	adds	r1, r7, #6
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ffd4 	bl	8001568 <IST8310_write>
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <IST8310_reset>:

void IST8310_read_reg(uint8_t reg, uint8_t* val){
	IST8310_read(reg, val, 1);
}

void IST8310_reset(){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	/* software reset */
	IST8310_write_reg(IST8310_ADDR_CTRL2, IST8310_CTRL2_SRST);
 80015cc:	2101      	movs	r1, #1
 80015ce:	200b      	movs	r0, #11
 80015d0:	f7ff ffe8 	bl	80015a4 <IST8310_write_reg>

	/* configure control register 3 */
	IST8310_write_reg(IST8310_ADDR_CTRL3, IST8310_CTRL3_SAMPLEAVG_16);
 80015d4:	2124      	movs	r1, #36	; 0x24
 80015d6:	2041      	movs	r0, #65	; 0x41
 80015d8:	f7ff ffe4 	bl	80015a4 <IST8310_write_reg>

	/* configure control register 4 */
	IST8310_write_reg(IST8310_ADDR_CTRL4, IST8310_CTRL4_SRPD);
 80015dc:	21c0      	movs	r1, #192	; 0xc0
 80015de:	2042      	movs	r0, #66	; 0x42
 80015e0:	f7ff ffe0 	bl	80015a4 <IST8310_write_reg>
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <Lidar1D_CaptureCallback>:
	if(HAL_TIM_IC_Start_IT(lidar1D.htim, lidar1D.indirectChannel) != HAL_OK) Error_Handler();
	return HAL_OK;
}


void Lidar1D_CaptureCallback(TIM_HandleTypeDef *htim){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance != lidar1D.htim->Instance) return;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <Lidar1D_CaptureCallback+0x4c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d116      	bne.n	800162c <Lidar1D_CaptureCallback+0x44>

	if(htim->Channel == lidar1D.activeChannel1){
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	7f1a      	ldrb	r2, [r3, #28]
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <Lidar1D_CaptureCallback+0x4c>)
 8001604:	7b1b      	ldrb	r3, [r3, #12]
 8001606:	429a      	cmp	r2, r3
 8001608:	d102      	bne.n	8001610 <Lidar1D_CaptureCallback+0x28>
//		IC1Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
		TIM9->CNT = 0;
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <Lidar1D_CaptureCallback+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if(htim->Channel == lidar1D.activeChannel2){
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7f1a      	ldrb	r2, [r3, #28]
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <Lidar1D_CaptureCallback+0x4c>)
 8001616:	7b5b      	ldrb	r3, [r3, #13]
 8001618:	429a      	cmp	r2, r3
 800161a:	d108      	bne.n	800162e <Lidar1D_CaptureCallback+0x46>
		lidar1D.distance_mm = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800161c:	2104      	movs	r1, #4
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f019 fcea 	bl	801aff8 <HAL_TIM_ReadCapturedValue>
 8001624:	4602      	mov	r2, r0
 8001626:	4b03      	ldr	r3, [pc, #12]	; (8001634 <Lidar1D_CaptureCallback+0x4c>)
 8001628:	611a      	str	r2, [r3, #16]
 800162a:	e000      	b.n	800162e <Lidar1D_CaptureCallback+0x46>
	if(htim->Instance != lidar1D.htim->Instance) return;
 800162c:	bf00      	nop
	}
}
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	200008c4 	.word	0x200008c4
 8001638:	40014000 	.word	0x40014000

0800163c <MPU9250>:
#include "stdio.h"
#include "i2c.h"
#include "cmsis_os.h"
#include "math.h"

void MPU9250(I2C_HandleTypeDef *hi2c){
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	//configuration
	mpu9250.hi2c = hi2c;
 8001644:	4a38      	ldr	r2, [pc, #224]	; (8001728 <MPU9250+0xec>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6013      	str	r3, [r2, #0]
	mpu9250.Ascale = MPU9250_AFS_8G;
 800164a:	4b37      	ldr	r3, [pc, #220]	; (8001728 <MPU9250+0xec>)
 800164c:	2202      	movs	r2, #2
 800164e:	711a      	strb	r2, [r3, #4]
	mpu9250.Gscale = MPU9250_GFS_2000DPS;
 8001650:	4b35      	ldr	r3, [pc, #212]	; (8001728 <MPU9250+0xec>)
 8001652:	2203      	movs	r2, #3
 8001654:	715a      	strb	r2, [r3, #5]
	mpu9250.Mscale = MPU9250_MFS_14BITS;
 8001656:	4b34      	ldr	r3, [pc, #208]	; (8001728 <MPU9250+0xec>)
 8001658:	2200      	movs	r2, #0
 800165a:	719a      	strb	r2, [r3, #6]
	mpu9250.Mmode = MPU9250_M_100HZ;
 800165c:	4b32      	ldr	r3, [pc, #200]	; (8001728 <MPU9250+0xec>)
 800165e:	2206      	movs	r2, #6
 8001660:	71da      	strb	r2, [r3, #7]

	// set to 0
	mpu9250.aRes = 0; mpu9250.gRes = 0; mpu9250.mRes = 0;
 8001662:	4b31      	ldr	r3, [pc, #196]	; (8001728 <MPU9250+0xec>)
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <MPU9250+0xec>)
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <MPU9250+0xec>)
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
	memset(mpu9250.accelCount, 0, sizeof(mpu9250.accelCount));
 800167a:	2206      	movs	r2, #6
 800167c:	2100      	movs	r1, #0
 800167e:	482b      	ldr	r0, [pc, #172]	; (800172c <MPU9250+0xf0>)
 8001680:	f027 f875 	bl	802876e <memset>
	memset(mpu9250.gyroCount, 0, sizeof(mpu9250.gyroCount));
 8001684:	2206      	movs	r2, #6
 8001686:	2100      	movs	r1, #0
 8001688:	4829      	ldr	r0, [pc, #164]	; (8001730 <MPU9250+0xf4>)
 800168a:	f027 f870 	bl	802876e <memset>
	memset(mpu9250.magCount, 0, sizeof(mpu9250.magCount));
 800168e:	2206      	movs	r2, #6
 8001690:	2100      	movs	r1, #0
 8001692:	4828      	ldr	r0, [pc, #160]	; (8001734 <MPU9250+0xf8>)
 8001694:	f027 f86b 	bl	802876e <memset>
	mpu9250.tmpCount = 0;
 8001698:	4b23      	ldr	r3, [pc, #140]	; (8001728 <MPU9250+0xec>)
 800169a:	2200      	movs	r2, #0
 800169c:	84da      	strh	r2, [r3, #38]	; 0x26
	memset(mpu9250.magBias, 0, sizeof(mpu9250.magBias));
 800169e:	220c      	movs	r2, #12
 80016a0:	2100      	movs	r1, #0
 80016a2:	4825      	ldr	r0, [pc, #148]	; (8001738 <MPU9250+0xfc>)
 80016a4:	f027 f863 	bl	802876e <memset>
	memset(mpu9250.accel, 0, sizeof(mpu9250.accel));
 80016a8:	220c      	movs	r2, #12
 80016aa:	2100      	movs	r1, #0
 80016ac:	4823      	ldr	r0, [pc, #140]	; (800173c <MPU9250+0x100>)
 80016ae:	f027 f85e 	bl	802876e <memset>
	memset(mpu9250.gyro, 0, sizeof(mpu9250.gyro));
 80016b2:	220c      	movs	r2, #12
 80016b4:	2100      	movs	r1, #0
 80016b6:	4822      	ldr	r0, [pc, #136]	; (8001740 <MPU9250+0x104>)
 80016b8:	f027 f859 	bl	802876e <memset>
	memset(mpu9250.mag, 0, sizeof(mpu9250.mag));
 80016bc:	220c      	movs	r2, #12
 80016be:	2100      	movs	r1, #0
 80016c0:	4820      	ldr	r0, [pc, #128]	; (8001744 <MPU9250+0x108>)
 80016c2:	f027 f854 	bl	802876e <memset>
	mpu9250.tmp = 0;
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <MPU9250+0xec>)
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	665a      	str	r2, [r3, #100]	; 0x64
	memset(mpu9250.MPU9250_buffer, 0, sizeof(mpu9250.MPU9250_buffer));
 80016ce:	220e      	movs	r2, #14
 80016d0:	2100      	movs	r1, #0
 80016d2:	481d      	ldr	r0, [pc, #116]	; (8001748 <MPU9250+0x10c>)
 80016d4:	f027 f84b 	bl	802876e <memset>
	memset(mpu9250.AK8963_buffer, 0, sizeof(mpu9250.AK8963_buffer));
 80016d8:	2207      	movs	r2, #7
 80016da:	2100      	movs	r1, #0
 80016dc:	481b      	ldr	r0, [pc, #108]	; (800174c <MPU9250+0x110>)
 80016de:	f027 f846 	bl	802876e <memset>
	mpu9250.AK8963_lastUpdate = 0;
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <MPU9250+0xec>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	mpu9250.dmaFlag = MPU9250_dmaIdle;
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <MPU9250+0xec>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	mpu9250.magBias[0] = 280.0f;
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <MPU9250+0xec>)
 80016f4:	4a16      	ldr	r2, [pc, #88]	; (8001750 <MPU9250+0x114>)
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28
	mpu9250.magBias[1] = 285.0f;
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <MPU9250+0xec>)
 80016fa:	4a16      	ldr	r2, [pc, #88]	; (8001754 <MPU9250+0x118>)
 80016fc:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu9250.magBias[2] = 330.0f;
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <MPU9250+0xec>)
 8001700:	4a15      	ldr	r2, [pc, #84]	; (8001758 <MPU9250+0x11c>)
 8001702:	631a      	str	r2, [r3, #48]	; 0x30

	MPU9250_getMres();
 8001704:	f000 fa22 	bl	8001b4c <MPU9250_getMres>
	MPU9250_getGres();
 8001708:	f000 fa3c 	bl	8001b84 <MPU9250_getGres>
	MPU9250_getAres();
 800170c:	f000 fa6c 	bl	8001be8 <MPU9250_getAres>

	MPU9250_resetMPU9250();
 8001710:	f000 fa98 	bl	8001c44 <MPU9250_resetMPU9250>
	MPU9250_calibrateMPU9250();
 8001714:	f000 fb84 	bl	8001e20 <MPU9250_calibrateMPU9250>

	MPU9250_initMPU9250();	// calculate ay, ac bias
 8001718:	f000 fb0e 	bl	8001d38 <MPU9250_initMPU9250>
	MPU9250_initAK8963();	//
 800171c:	f000 fa9e 	bl	8001c5c <MPU9250_initAK8963>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200010ec 	.word	0x200010ec
 800172c:	20001100 	.word	0x20001100
 8001730:	20001106 	.word	0x20001106
 8001734:	2000110c 	.word	0x2000110c
 8001738:	20001114 	.word	0x20001114
 800173c:	2000112c 	.word	0x2000112c
 8001740:	20001138 	.word	0x20001138
 8001744:	20001144 	.word	0x20001144
 8001748:	20001154 	.word	0x20001154
 800174c:	20001162 	.word	0x20001162
 8001750:	438c0000 	.word	0x438c0000
 8001754:	438e8000 	.word	0x438e8000
 8001758:	43a50000 	.word	0x43a50000

0800175c <MPU9250_updateDMA>:

void MPU9250_updateDMA(){
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af02      	add	r7, sp, #8
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <MPU9250_updateDMA+0x38>)
 8001764:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10f      	bne.n	800178c <MPU9250_updateDMA+0x30>
	mpu9250.dmaFlag = MPU9250_dmaMPU9250;
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <MPU9250_updateDMA+0x38>)
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	HAL_I2C_Mem_Read_DMA(mpu9250.hi2c, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, mpu9250.MPU9250_buffer, 14);
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <MPU9250_updateDMA+0x38>)
 8001776:	6818      	ldr	r0, [r3, #0]
 8001778:	230e      	movs	r3, #14
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MPU9250_updateDMA+0x3c>)
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	2301      	movs	r3, #1
 8001782:	223b      	movs	r2, #59	; 0x3b
 8001784:	21d0      	movs	r1, #208	; 0xd0
 8001786:	f014 fe99 	bl	80164bc <HAL_I2C_Mem_Read_DMA>
 800178a:	e000      	b.n	800178e <MPU9250_updateDMA+0x32>
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 800178c:	bf00      	nop
}
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200010ec 	.word	0x200010ec
 8001798:	20001154 	.word	0x20001154

0800179c <MPU9250_i2cRxCpltCallback>:

uint8_t MPU9250_i2cRxCpltCallback(){
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af02      	add	r7, sp, #8
	static uint8_t res = 0;
	if(mpu9250.dmaFlag == MPU9250_dmaMPU9250){
 80017a2:	4b24      	ldr	r3, [pc, #144]	; (8001834 <MPU9250_i2cRxCpltCallback+0x98>)
 80017a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d12a      	bne.n	8001802 <MPU9250_i2cRxCpltCallback+0x66>
		if(MPU9250_calRawData() != MPU9250_Fail){
 80017ac:	f000 f848 	bl	8001840 <MPU9250_calRawData>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d004      	beq.n	80017c0 <MPU9250_i2cRxCpltCallback+0x24>
			MPU9250_calCalibValue();
 80017b6:	f000 f8c5 	bl	8001944 <MPU9250_calCalibValue>
			res = 1;
 80017ba:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <MPU9250_i2cRxCpltCallback+0x9c>)
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
		}
		if(xTaskGetTickCount() - mpu9250.AK8963_lastUpdate > AK8963_UPDATE_TICK){
 80017c0:	f021 fc64 	bl	802308c <xTaskGetTickCount>
 80017c4:	4602      	mov	r2, r0
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <MPU9250_i2cRxCpltCallback+0x98>)
 80017c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b0a      	cmp	r3, #10
 80017d0:	d926      	bls.n	8001820 <MPU9250_i2cRxCpltCallback+0x84>
			mpu9250.dmaFlag = MPU9250_dmaAK8963;
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <MPU9250_i2cRxCpltCallback+0x98>)
 80017d4:	2202      	movs	r2, #2
 80017d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			HAL_I2C_Mem_Read_DMA(mpu9250.hi2c, AK8963_ADDRESS, AK8963_XOUT_L, 1, mpu9250.AK8963_buffer, 7);
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <MPU9250_i2cRxCpltCallback+0x98>)
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	2307      	movs	r3, #7
 80017e0:	9301      	str	r3, [sp, #4]
 80017e2:	4b16      	ldr	r3, [pc, #88]	; (800183c <MPU9250_i2cRxCpltCallback+0xa0>)
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	2301      	movs	r3, #1
 80017e8:	2203      	movs	r2, #3
 80017ea:	2118      	movs	r1, #24
 80017ec:	f014 fe66 	bl	80164bc <HAL_I2C_Mem_Read_DMA>
			mpu9250.AK8963_lastUpdate = xTaskGetTickCount();
 80017f0:	f021 fc4c 	bl	802308c <xTaskGetTickCount>
 80017f4:	4602      	mov	r2, r0
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MPU9250_i2cRxCpltCallback+0x98>)
 80017f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			return res;
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <MPU9250_i2cRxCpltCallback+0x9c>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	e014      	b.n	800182c <MPU9250_i2cRxCpltCallback+0x90>
		}
	}
	else if(mpu9250.dmaFlag == MPU9250_dmaAK8963){
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MPU9250_i2cRxCpltCallback+0x98>)
 8001804:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001808:	2b02      	cmp	r3, #2
 800180a:	d109      	bne.n	8001820 <MPU9250_i2cRxCpltCallback+0x84>
		if(AK8963_calRawData() == MPU9250_Success){
 800180c:	f000 f90c 	bl	8001a28 <AK8963_calRawData>
 8001810:	4603      	mov	r3, r0
 8001812:	2b01      	cmp	r3, #1
 8001814:	d104      	bne.n	8001820 <MPU9250_i2cRxCpltCallback+0x84>
			AK8963_calCalibValue();
 8001816:	f000 f945 	bl	8001aa4 <AK8963_calCalibValue>
			res = 2;
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <MPU9250_i2cRxCpltCallback+0x9c>)
 800181c:	2202      	movs	r2, #2
 800181e:	701a      	strb	r2, [r3, #0]
		}
	}
	mpu9250.dmaFlag = MPU9250_dmaIdle;
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <MPU9250_i2cRxCpltCallback+0x98>)
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	return res;
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <MPU9250_i2cRxCpltCallback+0x9c>)
 800182a:	781b      	ldrb	r3, [r3, #0]
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200010ec 	.word	0x200010ec
 8001838:	200008d8 	.word	0x200008d8
 800183c:	20001162 	.word	0x20001162

08001840 <MPU9250_calRawData>:

MPU9250_Result_t MPU9250_calRawData(){
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
	// accel axis reverse
	mpu9250.accelCount[0] = -((((int16_t)mpu9250.MPU9250_buffer[0]) << 8) | mpu9250.MPU9250_buffer[1]);
 8001844:	4b3e      	ldr	r3, [pc, #248]	; (8001940 <MPU9250_calRawData+0x100>)
 8001846:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	b21a      	sxth	r2, r3
 800184e:	4b3c      	ldr	r3, [pc, #240]	; (8001940 <MPU9250_calRawData+0x100>)
 8001850:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001854:	b21b      	sxth	r3, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	b21b      	sxth	r3, r3
 800185a:	b29b      	uxth	r3, r3
 800185c:	425b      	negs	r3, r3
 800185e:	b29b      	uxth	r3, r3
 8001860:	b21a      	sxth	r2, r3
 8001862:	4b37      	ldr	r3, [pc, #220]	; (8001940 <MPU9250_calRawData+0x100>)
 8001864:	829a      	strh	r2, [r3, #20]
	mpu9250.accelCount[1] = -((((int16_t)mpu9250.MPU9250_buffer[2]) << 8) | mpu9250.MPU9250_buffer[3]);
 8001866:	4b36      	ldr	r3, [pc, #216]	; (8001940 <MPU9250_calRawData+0x100>)
 8001868:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	b21a      	sxth	r2, r3
 8001870:	4b33      	ldr	r3, [pc, #204]	; (8001940 <MPU9250_calRawData+0x100>)
 8001872:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001876:	b21b      	sxth	r3, r3
 8001878:	4313      	orrs	r3, r2
 800187a:	b21b      	sxth	r3, r3
 800187c:	b29b      	uxth	r3, r3
 800187e:	425b      	negs	r3, r3
 8001880:	b29b      	uxth	r3, r3
 8001882:	b21a      	sxth	r2, r3
 8001884:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <MPU9250_calRawData+0x100>)
 8001886:	82da      	strh	r2, [r3, #22]
	mpu9250.accelCount[2] = -((((int16_t)mpu9250.MPU9250_buffer[4]) << 8) | mpu9250.MPU9250_buffer[5]);
 8001888:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <MPU9250_calRawData+0x100>)
 800188a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	b21a      	sxth	r2, r3
 8001892:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <MPU9250_calRawData+0x100>)
 8001894:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8001898:	b21b      	sxth	r3, r3
 800189a:	4313      	orrs	r3, r2
 800189c:	b21b      	sxth	r3, r3
 800189e:	b29b      	uxth	r3, r3
 80018a0:	425b      	negs	r3, r3
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	b21a      	sxth	r2, r3
 80018a6:	4b26      	ldr	r3, [pc, #152]	; (8001940 <MPU9250_calRawData+0x100>)
 80018a8:	831a      	strh	r2, [r3, #24]
	mpu9250.tmpCount = (int16_t) (mpu9250.MPU9250_buffer[6] << 8 | mpu9250.MPU9250_buffer[7]);
 80018aa:	4b25      	ldr	r3, [pc, #148]	; (8001940 <MPU9250_calRawData+0x100>)
 80018ac:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	b21a      	sxth	r2, r3
 80018b4:	4b22      	ldr	r3, [pc, #136]	; (8001940 <MPU9250_calRawData+0x100>)
 80018b6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	4313      	orrs	r3, r2
 80018be:	b21a      	sxth	r2, r3
 80018c0:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <MPU9250_calRawData+0x100>)
 80018c2:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu9250.gyroCount[0] = (((int16_t)mpu9250.MPU9250_buffer[8]) << 8) | mpu9250.MPU9250_buffer[9];
 80018c4:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <MPU9250_calRawData+0x100>)
 80018c6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	b21a      	sxth	r2, r3
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <MPU9250_calRawData+0x100>)
 80018d0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	4313      	orrs	r3, r2
 80018d8:	b21a      	sxth	r2, r3
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <MPU9250_calRawData+0x100>)
 80018dc:	835a      	strh	r2, [r3, #26]
	mpu9250.gyroCount[1] = (((int16_t)mpu9250.MPU9250_buffer[10]) << 8) | mpu9250.MPU9250_buffer[11];
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <MPU9250_calRawData+0x100>)
 80018e0:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	b21a      	sxth	r2, r3
 80018e8:	4b15      	ldr	r3, [pc, #84]	; (8001940 <MPU9250_calRawData+0x100>)
 80018ea:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b21a      	sxth	r2, r3
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <MPU9250_calRawData+0x100>)
 80018f6:	839a      	strh	r2, [r3, #28]
	mpu9250.gyroCount[2] = (((int16_t)mpu9250.MPU9250_buffer[12]) << 8) | mpu9250.MPU9250_buffer[13];
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <MPU9250_calRawData+0x100>)
 80018fa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	b21a      	sxth	r2, r3
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <MPU9250_calRawData+0x100>)
 8001904:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001908:	b21b      	sxth	r3, r3
 800190a:	4313      	orrs	r3, r2
 800190c:	b21a      	sxth	r2, r3
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MPU9250_calRawData+0x100>)
 8001910:	83da      	strh	r2, [r3, #30]

	if(mpu9250.accelCount[0] == 0 && mpu9250.accelCount[1] == 0 && mpu9250.accelCount[2] == 0) return MPU9250_Fail;
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <MPU9250_calRawData+0x100>)
 8001914:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10b      	bne.n	8001934 <MPU9250_calRawData+0xf4>
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <MPU9250_calRawData+0x100>)
 800191e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d106      	bne.n	8001934 <MPU9250_calRawData+0xf4>
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <MPU9250_calRawData+0x100>)
 8001928:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <MPU9250_calRawData+0xf4>
 8001930:	2300      	movs	r3, #0
 8001932:	e000      	b.n	8001936 <MPU9250_calRawData+0xf6>

	return MPU9250_Success;
 8001934:	2301      	movs	r3, #1
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	200010ec 	.word	0x200010ec

08001944 <MPU9250_calCalibValue>:

void MPU9250_calCalibValue(){
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
//	// Calculate the gyro value into actual degrees per second
//	MPU9250_g[0] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[0]*MPU9250_gRes - MPU9250_gyroBias[0]);  // get actual gyro value, this depends on scale being set
//	MPU9250_g[1] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[1]*MPU9250_gRes - MPU9250_gyroBias[1]);
//	MPU9250_g[2] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[2]*MPU9250_gRes - MPU9250_gyroBias[2]);

	mpu9250.accel[0] = ((float)mpu9250.accelCount[0]*mpu9250.aRes);  // get actual g value, this depends on scale being set
 8001948:	4b35      	ldr	r3, [pc, #212]	; (8001a20 <MPU9250_calCalibValue+0xdc>)
 800194a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800194e:	ee07 3a90 	vmov	s15, r3
 8001952:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001956:	4b32      	ldr	r3, [pc, #200]	; (8001a20 <MPU9250_calCalibValue+0xdc>)
 8001958:	edd3 7a02 	vldr	s15, [r3, #8]
 800195c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001960:	4b2f      	ldr	r3, [pc, #188]	; (8001a20 <MPU9250_calCalibValue+0xdc>)
 8001962:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	mpu9250.accel[1] = ((float)mpu9250.accelCount[1]*mpu9250.aRes);
 8001966:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <MPU9250_calCalibValue+0xdc>)
 8001968:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001974:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <MPU9250_calCalibValue+0xdc>)
 8001976:	edd3 7a02 	vldr	s15, [r3, #8]
 800197a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197e:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <MPU9250_calCalibValue+0xdc>)
 8001980:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	mpu9250.accel[2] = ((float)mpu9250.accelCount[2]*mpu9250.aRes);
 8001984:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <MPU9250_calCalibValue+0xdc>)
 8001986:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800198a:	ee07 3a90 	vmov	s15, r3
 800198e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001992:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <MPU9250_calCalibValue+0xdc>)
 8001994:	edd3 7a02 	vldr	s15, [r3, #8]
 8001998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199c:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <MPU9250_calCalibValue+0xdc>)
 800199e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	// Calculate the gyro value into actual degrees per second
	mpu9250.gyro[0] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[0]*mpu9250.gRes);  // get actual gyro value, this depends on scale being set
 80019a2:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <MPU9250_calCalibValue+0xdc>)
 80019a4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80019a8:	ee07 3a90 	vmov	s15, r3
 80019ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <MPU9250_calCalibValue+0xdc>)
 80019b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80019b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ba:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001a24 <MPU9250_calCalibValue+0xe0>
 80019be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MPU9250_calCalibValue+0xdc>)
 80019c4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	mpu9250.gyro[1] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[1]*mpu9250.gRes);
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <MPU9250_calCalibValue+0xdc>)
 80019ca:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MPU9250_calCalibValue+0xdc>)
 80019d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80019dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001a24 <MPU9250_calCalibValue+0xe0>
 80019e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <MPU9250_calCalibValue+0xdc>)
 80019ea:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu9250.gyro[2] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[2]*mpu9250.gRes);
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MPU9250_calCalibValue+0xdc>)
 80019f0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019f4:	ee07 3a90 	vmov	s15, r3
 80019f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <MPU9250_calCalibValue+0xdc>)
 80019fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a06:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001a24 <MPU9250_calCalibValue+0xe0>
 8001a0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a0e:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <MPU9250_calCalibValue+0xdc>)
 8001a10:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	200010ec 	.word	0x200010ec
 8001a24:	3c8efa35 	.word	0x3c8efa35

08001a28 <AK8963_calRawData>:

MPU9250_Result_t AK8963_calRawData(){
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
	if(mpu9250.AK8963_buffer[6] & 0x08) return MPU9250_Fail; // Check if magnetic sensor overflow set, if not then report data
 8001a2c:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <AK8963_calRawData+0x78>)
 8001a2e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <AK8963_calRawData+0x16>
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e02b      	b.n	8001a96 <AK8963_calRawData+0x6e>

	mpu9250.magCount[1] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[1] << 8) | mpu9250.AK8963_buffer[0]);  // Turn the MSB and LSB into a signed 16-bit value
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <AK8963_calRawData+0x78>)
 8001a40:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	b21a      	sxth	r2, r3
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <AK8963_calRawData+0x78>)
 8001a4a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	4313      	orrs	r3, r2
 8001a52:	b21a      	sxth	r2, r3
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <AK8963_calRawData+0x78>)
 8001a56:	845a      	strh	r2, [r3, #34]	; 0x22
	mpu9250.magCount[0] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[3] << 8) | mpu9250.AK8963_buffer[2]);  // Data stored as little Endian
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <AK8963_calRawData+0x78>)
 8001a5a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001a5e:	021b      	lsls	r3, r3, #8
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <AK8963_calRawData+0x78>)
 8001a64:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <AK8963_calRawData+0x78>)
 8001a70:	841a      	strh	r2, [r3, #32]
	mpu9250.magCount[2] = -(int16_t)(((int16_t)mpu9250.AK8963_buffer[5] << 8) | mpu9250.AK8963_buffer[4]);
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <AK8963_calRawData+0x78>)
 8001a74:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	b21a      	sxth	r2, r3
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <AK8963_calRawData+0x78>)
 8001a7e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	4313      	orrs	r3, r2
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	425b      	negs	r3, r3
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	b21a      	sxth	r2, r3
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <AK8963_calRawData+0x78>)
 8001a92:	849a      	strh	r2, [r3, #36]	; 0x24
	return MPU9250_Success;
 8001a94:	2301      	movs	r3, #1
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	200010ec 	.word	0x200010ec

08001aa4 <AK8963_calCalibValue>:

void AK8963_calCalibValue(){
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
	// mag have different axis with acc, gyr -> ax = my, ay = mx, az = -mz
    mpu9250.mag[0] = (float)mpu9250.magCount[0]*mpu9250.mRes*mpu9250.magCalibration[0] - mpu9250.magBias[1];  // get actual magnetometer value, this depends on scale being set
 8001aa8:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <AK8963_calCalibValue+0xa4>)
 8001aaa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <AK8963_calCalibValue+0xa4>)
 8001ab8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001abc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <AK8963_calCalibValue+0xa4>)
 8001ac2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001ac6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aca:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <AK8963_calCalibValue+0xa4>)
 8001acc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001ad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <AK8963_calCalibValue+0xa4>)
 8001ad6:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    mpu9250.mag[1] = (float)mpu9250.magCount[1]*mpu9250.mRes*mpu9250.magCalibration[1] - mpu9250.magBias[0];
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <AK8963_calCalibValue+0xa4>)
 8001adc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <AK8963_calCalibValue+0xa4>)
 8001aea:	edd3 7a04 	vldr	s15, [r3, #16]
 8001aee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <AK8963_calCalibValue+0xa4>)
 8001af4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001af8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <AK8963_calCalibValue+0xa4>)
 8001afe:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <AK8963_calCalibValue+0xa4>)
 8001b08:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    mpu9250.mag[2] = ((float)mpu9250.magCount[2]*mpu9250.mRes*mpu9250.magCalibration[2] - mpu9250.magBias[2]);
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <AK8963_calCalibValue+0xa4>)
 8001b0e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001b12:	ee07 3a90 	vmov	s15, r3
 8001b16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <AK8963_calCalibValue+0xa4>)
 8001b1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <AK8963_calCalibValue+0xa4>)
 8001b26:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001b2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <AK8963_calCalibValue+0xa4>)
 8001b30:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <AK8963_calCalibValue+0xa4>)
 8001b3a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	200010ec 	.word	0x200010ec

08001b4c <MPU9250_getMres>:

void MPU9250_getMres() {
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
	switch (mpu9250.Mscale)
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MPU9250_getMres+0x2c>)
 8001b52:	799b      	ldrb	r3, [r3, #6]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <MPU9250_getMres+0x12>
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d004      	beq.n	8001b66 <MPU9250_getMres+0x1a>
		  break;
	case MPU9250_MFS_16BITS:
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
		  break;
	}
}
 8001b5c:	e007      	b.n	8001b6e <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MPU9250_getMres+0x2c>)
 8001b60:	4a06      	ldr	r2, [pc, #24]	; (8001b7c <MPU9250_getMres+0x30>)
 8001b62:	611a      	str	r2, [r3, #16]
		  break;
 8001b64:	e003      	b.n	8001b6e <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 8001b66:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <MPU9250_getMres+0x2c>)
 8001b68:	4a05      	ldr	r2, [pc, #20]	; (8001b80 <MPU9250_getMres+0x34>)
 8001b6a:	611a      	str	r2, [r3, #16]
		  break;
 8001b6c:	bf00      	nop
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	200010ec 	.word	0x200010ec
 8001b7c:	40bfebff 	.word	0x40bfebff
 8001b80:	3fbfebff 	.word	0x3fbfebff

08001b84 <MPU9250_getGres>:

void MPU9250_getGres() {
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  switch (mpu9250.Gscale)
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <MPU9250_getGres+0x50>)
 8001b8a:	795b      	ldrb	r3, [r3, #5]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d81b      	bhi.n	8001bc8 <MPU9250_getGres+0x44>
 8001b90:	a201      	add	r2, pc, #4	; (adr r2, 8001b98 <MPU9250_getGres+0x14>)
 8001b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b96:	bf00      	nop
 8001b98:	08001ba9 	.word	0x08001ba9
 8001b9c:	08001bb1 	.word	0x08001bb1
 8001ba0:	08001bb9 	.word	0x08001bb9
 8001ba4:	08001bc1 	.word	0x08001bc1
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_GFS_250DPS:
    	  mpu9250.gRes = 250.0/32768.0;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <MPU9250_getGres+0x50>)
 8001baa:	4a0b      	ldr	r2, [pc, #44]	; (8001bd8 <MPU9250_getGres+0x54>)
 8001bac:	60da      	str	r2, [r3, #12]
          break;
 8001bae:	e00b      	b.n	8001bc8 <MPU9250_getGres+0x44>
    case MPU9250_GFS_500DPS:
    	  mpu9250.gRes = 500.0/32768.0;
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <MPU9250_getGres+0x50>)
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <MPU9250_getGres+0x58>)
 8001bb4:	60da      	str	r2, [r3, #12]
          break;
 8001bb6:	e007      	b.n	8001bc8 <MPU9250_getGres+0x44>
    case MPU9250_GFS_1000DPS:
    	  mpu9250.gRes = 1000.0/32768.0;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <MPU9250_getGres+0x50>)
 8001bba:	4a09      	ldr	r2, [pc, #36]	; (8001be0 <MPU9250_getGres+0x5c>)
 8001bbc:	60da      	str	r2, [r3, #12]
          break;
 8001bbe:	e003      	b.n	8001bc8 <MPU9250_getGres+0x44>
    case MPU9250_GFS_2000DPS:
    	  mpu9250.gRes = 2000.0/32768.0;
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <MPU9250_getGres+0x50>)
 8001bc2:	4a08      	ldr	r2, [pc, #32]	; (8001be4 <MPU9250_getGres+0x60>)
 8001bc4:	60da      	str	r2, [r3, #12]
          break;
 8001bc6:	bf00      	nop
  }
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	200010ec 	.word	0x200010ec
 8001bd8:	3bfa0000 	.word	0x3bfa0000
 8001bdc:	3c7a0000 	.word	0x3c7a0000
 8001be0:	3cfa0000 	.word	0x3cfa0000
 8001be4:	3d7a0000 	.word	0x3d7a0000

08001be8 <MPU9250_getAres>:


void MPU9250_getAres() {
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  switch (mpu9250.Ascale)
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <MPU9250_getAres+0x58>)
 8001bee:	791b      	ldrb	r3, [r3, #4]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d81f      	bhi.n	8001c34 <MPU9250_getAres+0x4c>
 8001bf4:	a201      	add	r2, pc, #4	; (adr r2, 8001bfc <MPU9250_getAres+0x14>)
 8001bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfa:	bf00      	nop
 8001bfc:	08001c0d 	.word	0x08001c0d
 8001c00:	08001c17 	.word	0x08001c17
 8001c04:	08001c21 	.word	0x08001c21
 8001c08:	08001c2b 	.word	0x08001c2b
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_AFS_2G:
    	  mpu9250.aRes = 2.0/32768.0;
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <MPU9250_getAres+0x58>)
 8001c0e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001c12:	609a      	str	r2, [r3, #8]
          break;
 8001c14:	e00e      	b.n	8001c34 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_4G:
    	  mpu9250.aRes = 4.0/32768.0;
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <MPU9250_getAres+0x58>)
 8001c18:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001c1c:	609a      	str	r2, [r3, #8]
          break;
 8001c1e:	e009      	b.n	8001c34 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_8G:
    	  mpu9250.aRes = 8.0/32768.0;
 8001c20:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <MPU9250_getAres+0x58>)
 8001c22:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001c26:	609a      	str	r2, [r3, #8]
          break;
 8001c28:	e004      	b.n	8001c34 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_16G:
    	  mpu9250.aRes = 16.0/32768.0;
 8001c2a:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <MPU9250_getAres+0x58>)
 8001c2c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001c30:	609a      	str	r2, [r3, #8]
          break;
 8001c32:	bf00      	nop
  }
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	200010ec 	.word	0x200010ec

08001c44 <MPU9250_resetMPU9250>:
  mpu9250.tmpCount = (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]) ;  // Turn the MSB and LSB into a 16-bit value
  return mpu9250.tmpCount;
}


void MPU9250_resetMPU9250() {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
    // reset device
    MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001c48:	2280      	movs	r2, #128	; 0x80
 8001c4a:	216b      	movs	r1, #107	; 0x6b
 8001c4c:	20d0      	movs	r0, #208	; 0xd0
 8001c4e:	f000 fb3f 	bl	80022d0 <MPU9250_writeByte>
    HAL_Delay(10);
 8001c52:	200a      	movs	r0, #10
 8001c54:	f013 f8ba 	bl	8014dcc <HAL_Delay>
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <MPU9250_initAK8963>:

void MPU9250_initAK8963()
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001c62:	2200      	movs	r2, #0
 8001c64:	210a      	movs	r1, #10
 8001c66:	2018      	movs	r0, #24
 8001c68:	f000 fb32 	bl	80022d0 <MPU9250_writeByte>
	HAL_Delay(10);
 8001c6c:	200a      	movs	r0, #10
 8001c6e:	f013 f8ad 	bl	8014dcc <HAL_Delay>
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8001c72:	220f      	movs	r2, #15
 8001c74:	210a      	movs	r1, #10
 8001c76:	2018      	movs	r0, #24
 8001c78:	f000 fb2a 	bl	80022d0 <MPU9250_writeByte>
	HAL_Delay(10);
 8001c7c:	200a      	movs	r0, #10
 8001c7e:	f013 f8a5 	bl	8014dcc <HAL_Delay>
	MPU9250_readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	2203      	movs	r2, #3
 8001c86:	2110      	movs	r1, #16
 8001c88:	2018      	movs	r0, #24
 8001c8a:	f000 fb3f 	bl	800230c <MPU9250_readBytes>

	// set axis to accel axis
	mpu9250.magCalibration[1] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8001c8e:	793b      	ldrb	r3, [r7, #4]
 8001c90:	3b80      	subs	r3, #128	; 0x80
 8001c92:	ee07 3a90 	vmov	s15, r3
 8001c96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c9a:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001d30 <MPU9250_initAK8963+0xd4>
 8001c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ca6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001caa:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <MPU9250_initAK8963+0xd8>)
 8001cac:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	mpu9250.magCalibration[0] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8001cb0:	797b      	ldrb	r3, [r7, #5]
 8001cb2:	3b80      	subs	r3, #128	; 0x80
 8001cb4:	ee07 3a90 	vmov	s15, r3
 8001cb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cbc:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001d30 <MPU9250_initAK8963+0xd4>
 8001cc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <MPU9250_initAK8963+0xd8>)
 8001cce:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	mpu9250.magCalibration[2] =  ((float)(rawData[2] - 128)/256.0f + 1.0f);
 8001cd2:	79bb      	ldrb	r3, [r7, #6]
 8001cd4:	3b80      	subs	r3, #128	; 0x80
 8001cd6:	ee07 3a90 	vmov	s15, r3
 8001cda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cde:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001d30 <MPU9250_initAK8963+0xd4>
 8001ce2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ce6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <MPU9250_initAK8963+0xd8>)
 8001cf0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	210a      	movs	r1, #10
 8001cf8:	2018      	movs	r0, #24
 8001cfa:	f000 fae9 	bl	80022d0 <MPU9250_writeByte>
	HAL_Delay(10);
 8001cfe:	200a      	movs	r0, #10
 8001d00:	f013 f864 	bl	8014dcc <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, mpu9250.Mscale << 4 | mpu9250.Mmode); // Set magnetometer data resolution and sample ODR
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <MPU9250_initAK8963+0xd8>)
 8001d06:	799b      	ldrb	r3, [r3, #6]
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	b25a      	sxtb	r2, r3
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <MPU9250_initAK8963+0xd8>)
 8001d0e:	79db      	ldrb	r3, [r3, #7]
 8001d10:	b25b      	sxtb	r3, r3
 8001d12:	4313      	orrs	r3, r2
 8001d14:	b25b      	sxtb	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	210a      	movs	r1, #10
 8001d1c:	2018      	movs	r0, #24
 8001d1e:	f000 fad7 	bl	80022d0 <MPU9250_writeByte>
	HAL_Delay(10);
 8001d22:	200a      	movs	r0, #10
 8001d24:	f013 f852 	bl	8014dcc <HAL_Delay>
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	43800000 	.word	0x43800000
 8001d34:	200010ec 	.word	0x200010ec

08001d38 <MPU9250_initMPU9250>:


void MPU9250_initMPU9250()
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 // Initialize MPU9250 device
 // wake up device
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 8001d3e:	2200      	movs	r2, #0
 8001d40:	216b      	movs	r1, #107	; 0x6b
 8001d42:	20d0      	movs	r0, #208	; 0xd0
 8001d44:	f000 fac4 	bl	80022d0 <MPU9250_writeByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8001d48:	2064      	movs	r0, #100	; 0x64
 8001d4a:	f013 f83f 	bl	8014dcc <HAL_Delay>

 // get stable time source
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8001d4e:	2201      	movs	r2, #1
 8001d50:	216b      	movs	r1, #107	; 0x6b
 8001d52:	20d0      	movs	r0, #208	; 0xd0
 8001d54:	f000 fabc 	bl	80022d0 <MPU9250_writeByte>

 // Configure Gyro and Accelerometer
 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 8001d58:	2203      	movs	r2, #3
 8001d5a:	211a      	movs	r1, #26
 8001d5c:	20d0      	movs	r0, #208	; 0xd0
 8001d5e:	f000 fab7 	bl	80022d0 <MPU9250_writeByte>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8001d62:	2204      	movs	r2, #4
 8001d64:	2119      	movs	r1, #25
 8001d66:	20d0      	movs	r0, #208	; 0xd0
 8001d68:	f000 fab2 	bl	80022d0 <MPU9250_writeByte>

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c = MPU9250_readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 8001d6c:	211b      	movs	r1, #27
 8001d6e:	20d0      	movs	r0, #208	; 0xd0
 8001d70:	f000 faee 	bl	8002350 <MPU9250_readByte>
 8001d74:	4603      	mov	r3, r0
 8001d76:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f023 0302 	bic.w	r3, r3, #2
 8001d7e:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x18; // Clear AFS bits [4:3]
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	f023 0318 	bic.w	r3, r3, #24
 8001d86:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Gscale << 3; // Set full scale range for the gyro
 8001d88:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <MPU9250_initMPU9250+0xe4>)
 8001d8a:	795b      	ldrb	r3, [r3, #5]
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	b25a      	sxtb	r2, r3
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	b25b      	sxtb	r3, r3
 8001d98:	71fb      	strb	r3, [r7, #7]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing i
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to regts inverse to bits 1:0 of GYRO_CONFIGister
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	211b      	movs	r1, #27
 8001da0:	20d0      	movs	r0, #208	; 0xd0
 8001da2:	f000 fa95 	bl	80022d0 <MPU9250_writeByte>

 // Set accelerometer full-scale range configuration
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 8001da6:	211c      	movs	r1, #28
 8001da8:	20d0      	movs	r0, #208	; 0xd0
 8001daa:	f000 fad1 	bl	8002350 <MPU9250_readByte>
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	f023 0318 	bic.w	r3, r3, #24
 8001db8:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Ascale << 3; // Set full scale range for the accelerometer
 8001dba:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <MPU9250_initMPU9250+0xe4>)
 8001dbc:	791b      	ldrb	r3, [r3, #4]
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	b25a      	sxtb	r2, r3
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	b25b      	sxtb	r3, r3
 8001dca:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	211c      	movs	r1, #28
 8001dd2:	20d0      	movs	r0, #208	; 0xd0
 8001dd4:	f000 fa7c 	bl	80022d0 <MPU9250_writeByte>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 8001dd8:	211d      	movs	r1, #29
 8001dda:	20d0      	movs	r0, #208	; 0xd0
 8001ddc:	f000 fab8 	bl	8002350 <MPU9250_readByte>
 8001de0:	4603      	mov	r3, r0
 8001de2:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	f023 030f 	bic.w	r3, r3, #15
 8001dea:	71fb      	strb	r3, [r7, #7]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	f043 0303 	orr.w	r3, r3, #3
 8001df2:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	461a      	mov	r2, r3
 8001df8:	211d      	movs	r1, #29
 8001dfa:	20d0      	movs	r0, #208	; 0xd0
 8001dfc:	f000 fa68 	bl	80022d0 <MPU9250_writeByte>
 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
  MPU9250_writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 8001e00:	2222      	movs	r2, #34	; 0x22
 8001e02:	2137      	movs	r1, #55	; 0x37
 8001e04:	20d0      	movs	r0, #208	; 0xd0
 8001e06:	f000 fa63 	bl	80022d0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	2138      	movs	r1, #56	; 0x38
 8001e0e:	20d0      	movs	r0, #208	; 0xd0
 8001e10:	f000 fa5e 	bl	80022d0 <MPU9250_writeByte>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	200010ec 	.word	0x200010ec

08001e20 <MPU9250_calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250_calibrateMPU9250()
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b094      	sub	sp, #80	; 0x50
 8001e24:	af00      	add	r7, sp, #0
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8001e26:	2300      	movs	r3, #0
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e2e:	2300      	movs	r3, #0
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28

// reset device, reset all registers, clear gyro and accelerometer bias registers
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001e3e:	2280      	movs	r2, #128	; 0x80
 8001e40:	216b      	movs	r1, #107	; 0x6b
 8001e42:	20d0      	movs	r0, #208	; 0xd0
 8001e44:	f000 fa44 	bl	80022d0 <MPU9250_writeByte>
  HAL_Delay(100);
 8001e48:	2064      	movs	r0, #100	; 0x64
 8001e4a:	f012 ffbf 	bl	8014dcc <HAL_Delay>

// get stable time source
// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8001e4e:	2201      	movs	r2, #1
 8001e50:	216b      	movs	r1, #107	; 0x6b
 8001e52:	20d0      	movs	r0, #208	; 0xd0
 8001e54:	f000 fa3c 	bl	80022d0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	216c      	movs	r1, #108	; 0x6c
 8001e5c:	20d0      	movs	r0, #208	; 0xd0
 8001e5e:	f000 fa37 	bl	80022d0 <MPU9250_writeByte>
  HAL_Delay(200);
 8001e62:	20c8      	movs	r0, #200	; 0xc8
 8001e64:	f012 ffb2 	bl	8014dcc <HAL_Delay>

// Configure device for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2138      	movs	r1, #56	; 0x38
 8001e6c:	20d0      	movs	r0, #208	; 0xd0
 8001e6e:	f000 fa2f 	bl	80022d0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 8001e72:	2200      	movs	r2, #0
 8001e74:	2123      	movs	r1, #35	; 0x23
 8001e76:	20d0      	movs	r0, #208	; 0xd0
 8001e78:	f000 fa2a 	bl	80022d0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	216b      	movs	r1, #107	; 0x6b
 8001e80:	20d0      	movs	r0, #208	; 0xd0
 8001e82:	f000 fa25 	bl	80022d0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8001e86:	2200      	movs	r2, #0
 8001e88:	2124      	movs	r1, #36	; 0x24
 8001e8a:	20d0      	movs	r0, #208	; 0xd0
 8001e8c:	f000 fa20 	bl	80022d0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8001e90:	2200      	movs	r2, #0
 8001e92:	216a      	movs	r1, #106	; 0x6a
 8001e94:	20d0      	movs	r0, #208	; 0xd0
 8001e96:	f000 fa1b 	bl	80022d0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	216a      	movs	r1, #106	; 0x6a
 8001e9e:	20d0      	movs	r0, #208	; 0xd0
 8001ea0:	f000 fa16 	bl	80022d0 <MPU9250_writeByte>
  HAL_Delay(15);
 8001ea4:	200f      	movs	r0, #15
 8001ea6:	f012 ff91 	bl	8014dcc <HAL_Delay>

// Configure MPU9250 gyro and accelerometer for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8001eaa:	2201      	movs	r2, #1
 8001eac:	211a      	movs	r1, #26
 8001eae:	20d0      	movs	r0, #208	; 0xd0
 8001eb0:	f000 fa0e 	bl	80022d0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2119      	movs	r1, #25
 8001eb8:	20d0      	movs	r0, #208	; 0xd0
 8001eba:	f000 fa09 	bl	80022d0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	211b      	movs	r1, #27
 8001ec2:	20d0      	movs	r0, #208	; 0xd0
 8001ec4:	f000 fa04 	bl	80022d0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001ec8:	2200      	movs	r2, #0
 8001eca:	211c      	movs	r1, #28
 8001ecc:	20d0      	movs	r0, #208	; 0xd0
 8001ece:	f000 f9ff 	bl	80022d0 <MPU9250_writeByte>

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 8001ed2:	2240      	movs	r2, #64	; 0x40
 8001ed4:	216a      	movs	r1, #106	; 0x6a
 8001ed6:	20d0      	movs	r0, #208	; 0xd0
 8001ed8:	f000 f9fa 	bl	80022d0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8001edc:	2278      	movs	r2, #120	; 0x78
 8001ede:	2123      	movs	r1, #35	; 0x23
 8001ee0:	20d0      	movs	r0, #208	; 0xd0
 8001ee2:	f000 f9f5 	bl	80022d0 <MPU9250_writeByte>
  HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8001ee6:	2028      	movs	r0, #40	; 0x28
 8001ee8:	f012 ff70 	bl	8014dcc <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8001eec:	2200      	movs	r2, #0
 8001eee:	2123      	movs	r1, #35	; 0x23
 8001ef0:	20d0      	movs	r0, #208	; 0xd0
 8001ef2:	f000 f9ed 	bl	80022d0 <MPU9250_writeByte>
  MPU9250_readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8001ef6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001efa:	2202      	movs	r2, #2
 8001efc:	2172      	movs	r1, #114	; 0x72
 8001efe:	20d0      	movs	r0, #208	; 0xd0
 8001f00:	f000 fa04 	bl	800230c <MPU9250_readBytes>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8001f04:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	b21a      	sxth	r2, r3
 8001f0c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001f10:	b21b      	sxth	r3, r3
 8001f12:	4313      	orrs	r3, r2
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8001f1a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001f1e:	4ab3      	ldr	r2, [pc, #716]	; (80021ec <MPU9250_calibrateMPU9250+0x3cc>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	08db      	lsrs	r3, r3, #3
 8001f26:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

  for (ii = 0; ii < packet_count; ii++) {
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001f30:	e071      	b.n	8002016 <MPU9250_calibrateMPU9250+0x1f6>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8001f32:	2300      	movs	r3, #0
 8001f34:	813b      	strh	r3, [r7, #8]
 8001f36:	2300      	movs	r3, #0
 8001f38:	817b      	strh	r3, [r7, #10]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	81bb      	strh	r3, [r7, #12]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	803b      	strh	r3, [r7, #0]
 8001f42:	2300      	movs	r3, #0
 8001f44:	807b      	strh	r3, [r7, #2]
 8001f46:	2300      	movs	r3, #0
 8001f48:	80bb      	strh	r3, [r7, #4]
    MPU9250_readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 8001f4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f4e:	220c      	movs	r2, #12
 8001f50:	2174      	movs	r1, #116	; 0x74
 8001f52:	20d0      	movs	r0, #208	; 0xd0
 8001f54:	f000 f9da 	bl	800230c <MPU9250_readBytes>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8001f58:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	b21a      	sxth	r2, r3
 8001f60:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	4313      	orrs	r3, r2
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	813b      	strh	r3, [r7, #8]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8001f6c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	b21a      	sxth	r2, r3
 8001f74:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	b21b      	sxth	r3, r3
 8001f7e:	817b      	strh	r3, [r7, #10]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8001f80:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	b21a      	sxth	r2, r3
 8001f88:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	b21b      	sxth	r3, r3
 8001f92:	81bb      	strh	r3, [r7, #12]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8001f94:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001f98:	021b      	lsls	r3, r3, #8
 8001f9a:	b21a      	sxth	r2, r3
 8001f9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	803b      	strh	r3, [r7, #0]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8001fa8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	b21a      	sxth	r2, r3
 8001fb0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001fb4:	b21b      	sxth	r3, r3
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	807b      	strh	r3, [r7, #2]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001fbc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	b21a      	sxth	r2, r3
 8001fc4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001fc8:	b21b      	sxth	r3, r3
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	80bb      	strh	r3, [r7, #4]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	623b      	str	r3, [r7, #32]
    accel_bias[1] += (int32_t) accel_temp[1];
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] += (int32_t) accel_temp[2];
 8001fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 8001fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff0:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 8001ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001ffe:	4413      	add	r3, r2
 8002000:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8002002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002004:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	637b      	str	r3, [r7, #52]	; 0x34
  for (ii = 0; ii < packet_count; ii++) {
 800200c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002010:	3301      	adds	r3, #1
 8002012:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002016:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800201a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800201e:	429a      	cmp	r2, r3
 8002020:	d387      	bcc.n	8001f32 <MPU9250_calibrateMPU9250+0x112>

  }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8002022:	6a3a      	ldr	r2, [r7, #32]
 8002024:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002028:	fb92 f3f3 	sdiv	r3, r2, r3
 800202c:	623b      	str	r3, [r7, #32]
    accel_bias[1] /= (int32_t) packet_count;
 800202e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002030:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002034:	fb92 f3f3 	sdiv	r3, r2, r3
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] /= (int32_t) packet_count;
 800203a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800203c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002040:	fb92 f3f3 	sdiv	r3, r2, r3
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  /= (int32_t) packet_count;
 8002046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002048:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800204c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  /= (int32_t) packet_count;
 8002052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002054:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002058:	fb92 f3f3 	sdiv	r3, r2, r3
 800205c:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  /= (int32_t) packet_count;
 800205e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002060:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002064:	fb92 f3f3 	sdiv	r3, r2, r3
 8002068:	637b      	str	r3, [r7, #52]	; 0x34

    uint16_t accelsensitivity = (uint16_t)(1/mpu9250.aRes);
 800206a:	4b61      	ldr	r3, [pc, #388]	; (80021f0 <MPU9250_calibrateMPU9250+0x3d0>)
 800206c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002070:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800207c:	ee17 3a90 	vmov	r3, s15
 8002080:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
//    uint16_t gyrosensitivity = (uint16_t)(1/mpu9250.gRes);
//    printf("%u, %u", accelsensitivity, gyrosensitivity);

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8002084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002086:	2b00      	cmp	r3, #0
 8002088:	dd05      	ble.n	8002096 <MPU9250_calibrateMPU9250+0x276>
 800208a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800208c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
 8002094:	e004      	b.n	80020a0 <MPU9250_calibrateMPU9250+0x280>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 8002096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002098:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800209c:	4413      	add	r3, r2
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80020a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a2:	425b      	negs	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	da00      	bge.n	80020aa <MPU9250_calibrateMPU9250+0x28a>
 80020a8:	3303      	adds	r3, #3
 80020aa:	109b      	asrs	r3, r3, #2
 80020ac:	121b      	asrs	r3, r3, #8
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 80020b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b6:	425b      	negs	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	da00      	bge.n	80020be <MPU9250_calibrateMPU9250+0x29e>
 80020bc:	3303      	adds	r3, #3
 80020be:	109b      	asrs	r3, r3, #2
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 80020c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c8:	425b      	negs	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	da00      	bge.n	80020d0 <MPU9250_calibrateMPU9250+0x2b0>
 80020ce:	3303      	adds	r3, #3
 80020d0:	109b      	asrs	r3, r3, #2
 80020d2:	121b      	asrs	r3, r3, #8
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 80020da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020dc:	425b      	negs	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	da00      	bge.n	80020e4 <MPU9250_calibrateMPU9250+0x2c4>
 80020e2:	3303      	adds	r3, #3
 80020e4:	109b      	asrs	r3, r3, #2
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 80020ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ee:	425b      	negs	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	da00      	bge.n	80020f6 <MPU9250_calibrateMPU9250+0x2d6>
 80020f4:	3303      	adds	r3, #3
 80020f6:	109b      	asrs	r3, r3, #2
 80020f8:	121b      	asrs	r3, r3, #8
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002102:	425b      	negs	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	da00      	bge.n	800210a <MPU9250_calibrateMPU9250+0x2ea>
 8002108:	3303      	adds	r3, #3
 800210a:	109b      	asrs	r3, r3, #2
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

/// Push gyro biases to hardware registers
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 8002112:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002116:	461a      	mov	r2, r3
 8002118:	2113      	movs	r1, #19
 800211a:	20d0      	movs	r0, #208	; 0xd0
 800211c:	f000 f8d8 	bl	80022d0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 8002120:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002124:	461a      	mov	r2, r3
 8002126:	2114      	movs	r1, #20
 8002128:	20d0      	movs	r0, #208	; 0xd0
 800212a:	f000 f8d1 	bl	80022d0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 800212e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002132:	461a      	mov	r2, r3
 8002134:	2115      	movs	r1, #21
 8002136:	20d0      	movs	r0, #208	; 0xd0
 8002138:	f000 f8ca 	bl	80022d0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 800213c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002140:	461a      	mov	r2, r3
 8002142:	2116      	movs	r1, #22
 8002144:	20d0      	movs	r0, #208	; 0xd0
 8002146:	f000 f8c3 	bl	80022d0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 800214a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800214e:	461a      	mov	r2, r3
 8002150:	2117      	movs	r1, #23
 8002152:	20d0      	movs	r0, #208	; 0xd0
 8002154:	f000 f8bc 	bl	80022d0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 8002158:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800215c:	461a      	mov	r2, r3
 800215e:	2118      	movs	r1, #24
 8002160:	20d0      	movs	r0, #208	; 0xd0
 8002162:	f000 f8b5 	bl	80022d0 <MPU9250_writeByte>
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
  MPU9250_readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 8002172:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002176:	2202      	movs	r2, #2
 8002178:	2177      	movs	r1, #119	; 0x77
 800217a:	20d0      	movs	r0, #208	; 0xd0
 800217c:	f000 f8c6 	bl	800230c <MPU9250_readBytes>
  accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8002180:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	b21b      	sxth	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800218e:	4313      	orrs	r3, r2
 8002190:	617b      	str	r3, [r7, #20]
  MPU9250_readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 8002192:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002196:	2202      	movs	r2, #2
 8002198:	217a      	movs	r1, #122	; 0x7a
 800219a:	20d0      	movs	r0, #208	; 0xd0
 800219c:	f000 f8b6 	bl	800230c <MPU9250_readBytes>
  accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 80021a0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80021a4:	021b      	lsls	r3, r3, #8
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
  MPU9250_readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 80021b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021b6:	2202      	movs	r2, #2
 80021b8:	217d      	movs	r1, #125	; 0x7d
 80021ba:	20d0      	movs	r0, #208	; 0xd0
 80021bc:	f000 f8a6 	bl	800230c <MPU9250_readBytes>
  accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 80021c0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	b21b      	sxth	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61fb      	str	r3, [r7, #28]

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 80021d2:	2301      	movs	r3, #1
 80021d4:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 80021d6:	2300      	movs	r3, #0
 80021d8:	743b      	strb	r3, [r7, #16]
 80021da:	2300      	movs	r3, #0
 80021dc:	747b      	strb	r3, [r7, #17]
 80021de:	2300      	movs	r3, #0
 80021e0:	74bb      	strb	r3, [r7, #18]

  for(ii = 0; ii < 3; ii++) {
 80021e2:	2300      	movs	r3, #0
 80021e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80021e8:	e01e      	b.n	8002228 <MPU9250_calibrateMPU9250+0x408>
 80021ea:	bf00      	nop
 80021ec:	aaaaaaab 	.word	0xaaaaaaab
 80021f0:	200010ec 	.word	0x200010ec
    if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 80021f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80021fe:	4413      	add	r3, r2
 8002200:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002204:	461a      	mov	r2, r3
 8002206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002208:	4013      	ands	r3, r2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d007      	beq.n	800221e <MPU9250_calibrateMPU9250+0x3fe>
 800220e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002212:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002216:	4413      	add	r3, r2
 8002218:	2201      	movs	r2, #1
 800221a:	f803 2c40 	strb.w	r2, [r3, #-64]
  for(ii = 0; ii < 3; ii++) {
 800221e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002222:	3301      	adds	r3, #1
 8002224:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002228:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800222c:	2b02      	cmp	r3, #2
 800222e:	d9e1      	bls.n	80021f4 <MPU9250_calibrateMPU9250+0x3d4>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	2b00      	cmp	r3, #0
 8002236:	da00      	bge.n	800223a <MPU9250_calibrateMPU9250+0x41a>
 8002238:	3307      	adds	r3, #7
 800223a:	10db      	asrs	r3, r3, #3
 800223c:	425b      	negs	r3, r3
 800223e:	4413      	add	r3, r2
 8002240:	617b      	str	r3, [r7, #20]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	2b00      	cmp	r3, #0
 8002248:	da00      	bge.n	800224c <MPU9250_calibrateMPU9250+0x42c>
 800224a:	3307      	adds	r3, #7
 800224c:	10db      	asrs	r3, r3, #3
 800224e:	425b      	negs	r3, r3
 8002250:	4413      	add	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
  accel_bias_reg[2] -= (accel_bias[2]/8);
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002258:	2b00      	cmp	r3, #0
 800225a:	da00      	bge.n	800225e <MPU9250_calibrateMPU9250+0x43e>
 800225c:	3307      	adds	r3, #7
 800225e:	10db      	asrs	r3, r3, #3
 8002260:	425b      	negs	r3, r3
 8002262:	4413      	add	r3, r2
 8002264:	61fb      	str	r3, [r7, #28]

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	121b      	asrs	r3, r3, #8
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (accel_bias_reg[0])      & 0xFF;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002278:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800227c:	7c3b      	ldrb	r3, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	b2db      	uxtb	r3, r3
 8002282:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	121b      	asrs	r3, r3, #8
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (accel_bias_reg[1])      & 0xFF;
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002298:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800229c:	7c7b      	ldrb	r3, [r7, #17]
 800229e:	4313      	orrs	r3, r2
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	121b      	asrs	r3, r3, #8
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (accel_bias_reg[2])      & 0xFF;
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80022b8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80022bc:	7cbb      	ldrb	r3, [r7, #18]
 80022be:	4313      	orrs	r3, r2
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

// Output scaled accelerometer biases for manual subtraction in the main program
//    MPU9250_accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
//    MPU9250_accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
//    MPU9250_accelBias[2] = (float)accel_bias[2]/(float)accelsensitivity;
}
 80022c6:	bf00      	nop
 80022c8:	3750      	adds	r7, #80	; 0x50
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop

080022d0 <MPU9250_writeByte>:
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
   }
}

void MPU9250_writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af04      	add	r7, sp, #16
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
 80022da:	460b      	mov	r3, r1
 80022dc:	71bb      	strb	r3, [r7, #6]
 80022de:	4613      	mov	r3, r2
 80022e0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(mpu9250.hi2c, address, subAddress, 1, &data, 1, MPU9250_DEFAULT_TIMEOUT);
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <MPU9250_writeByte+0x38>)
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	b299      	uxth	r1, r3
 80022ea:	79bb      	ldrb	r3, [r7, #6]
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	2364      	movs	r3, #100	; 0x64
 80022f0:	9302      	str	r3, [sp, #8]
 80022f2:	2301      	movs	r3, #1
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	1d7b      	adds	r3, r7, #5
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	2301      	movs	r3, #1
 80022fc:	f013 fd00 	bl	8015d00 <HAL_I2C_Mem_Write>
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	200010ec 	.word	0x200010ec

0800230c <MPU9250_readBytes>:

void MPU9250_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b087      	sub	sp, #28
 8002310:	af04      	add	r7, sp, #16
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	4603      	mov	r3, r0
 8002316:	71fb      	strb	r3, [r7, #7]
 8002318:	460b      	mov	r3, r1
 800231a:	71bb      	strb	r3, [r7, #6]
 800231c:	4613      	mov	r3, r2
 800231e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(mpu9250.hi2c, address, subAddress, 1, (uint8_t*)dest, count, MPU9250_DEFAULT_TIMEOUT);
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <MPU9250_readBytes+0x40>)
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	b299      	uxth	r1, r3
 8002328:	79bb      	ldrb	r3, [r7, #6]
 800232a:	b29c      	uxth	r4, r3
 800232c:	797b      	ldrb	r3, [r7, #5]
 800232e:	b29b      	uxth	r3, r3
 8002330:	2264      	movs	r2, #100	; 0x64
 8002332:	9202      	str	r2, [sp, #8]
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2301      	movs	r3, #1
 800233c:	4622      	mov	r2, r4
 800233e:	f013 fdd9 	bl	8015ef4 <HAL_I2C_Mem_Read>
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bd90      	pop	{r4, r7, pc}
 800234a:	bf00      	nop
 800234c:	200010ec 	.word	0x200010ec

08002350 <MPU9250_readByte>:

char MPU9250_readByte(uint8_t address, uint8_t subAddress)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	460a      	mov	r2, r1
 800235a:	71fb      	strb	r3, [r7, #7]
 800235c:	4613      	mov	r3, r2
 800235e:	71bb      	strb	r3, [r7, #6]
	char data; // `data` will store the register data
	MPU9250_readBytes(address, subAddress, 1, (uint8_t*)&data);
 8002360:	f107 030f 	add.w	r3, r7, #15
 8002364:	79b9      	ldrb	r1, [r7, #6]
 8002366:	79f8      	ldrb	r0, [r7, #7]
 8002368:	2201      	movs	r2, #1
 800236a:	f7ff ffcf 	bl	800230c <MPU9250_readBytes>
	return data;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <BME280_init>:
#include "bme280.h"
#include "math.h"

BME280_t bme280 = {0,};

void BME280_init(I2C_HandleTypeDef *hi2c, uint8_t Posr, uint8_t Hosr, uint8_t Tosr, uint8_t Mode, uint8_t IIRFilter, uint8_t SBy){
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	4608      	mov	r0, r1
 8002382:	4611      	mov	r1, r2
 8002384:	461a      	mov	r2, r3
 8002386:	4603      	mov	r3, r0
 8002388:	70fb      	strb	r3, [r7, #3]
 800238a:	460b      	mov	r3, r1
 800238c:	70bb      	strb	r3, [r7, #2]
 800238e:	4613      	mov	r3, r2
 8002390:	707b      	strb	r3, [r7, #1]
	bme280.hi2c = hi2c;
 8002392:	4a74      	ldr	r2, [pc, #464]	; (8002564 <BME280_init+0x1ec>)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6013      	str	r3, [r2, #0]
	BME280_reset();
 8002398:	f000 f966 	bl	8002668 <BME280_reset>
	// Configure the BME280
	// Set H oversampling rate
	BME280_writeByte(BME280_ADDRESS, BME280_CTRL_HUM, 0x07 & Hosr);
 800239c:	78bb      	ldrb	r3, [r7, #2]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	21f2      	movs	r1, #242	; 0xf2
 80023a8:	20ec      	movs	r0, #236	; 0xec
 80023aa:	f000 fb91 	bl	8002ad0 <BME280_writeByte>
	// Set T and P oversampling rates and sensor mode
	BME280_writeByte(BME280_ADDRESS, BME280_CTRL_MEAS, Tosr << 5 | Posr << 2 | Mode);
 80023ae:	787b      	ldrb	r3, [r7, #1]
 80023b0:	015b      	lsls	r3, r3, #5
 80023b2:	b25a      	sxtb	r2, r3
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	b25b      	sxtb	r3, r3
 80023ba:	4313      	orrs	r3, r2
 80023bc:	b25a      	sxtb	r2, r3
 80023be:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 80023c2:	4313      	orrs	r3, r2
 80023c4:	b25b      	sxtb	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	21f4      	movs	r1, #244	; 0xf4
 80023cc:	20ec      	movs	r0, #236	; 0xec
 80023ce:	f000 fb7f 	bl	8002ad0 <BME280_writeByte>
	// Set standby time interval in normal mode and bandwidth
	BME280_writeByte(BME280_ADDRESS, BME280_CONFIG, SBy << 5 | IIRFilter << 2);
 80023d2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80023d6:	015b      	lsls	r3, r3, #5
 80023d8:	b25a      	sxtb	r2, r3
 80023da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	b25b      	sxtb	r3, r3
 80023e2:	4313      	orrs	r3, r2
 80023e4:	b25b      	sxtb	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	21f5      	movs	r1, #245	; 0xf5
 80023ec:	20ec      	movs	r0, #236	; 0xec
 80023ee:	f000 fb6f 	bl	8002ad0 <BME280_writeByte>

	//wait.
	HAL_Delay(50);
 80023f2:	2032      	movs	r0, #50	; 0x32
 80023f4:	f012 fcea 	bl	8014dcc <HAL_Delay>
	uint8_t calib[26];
	BME280_readBytes(BME280_ADDRESS, BME280_CALIB00, 26, &calib[0]);
 80023f8:	f107 0308 	add.w	r3, r7, #8
 80023fc:	221a      	movs	r2, #26
 80023fe:	2188      	movs	r1, #136	; 0x88
 8002400:	20ec      	movs	r0, #236	; 0xec
 8002402:	f000 fb83 	bl	8002b0c <BME280_readBytes>
	bme280._dig_T1 = (uint16_t)(((uint16_t) calib[1] << 8) | calib[0]);
 8002406:	7a7b      	ldrb	r3, [r7, #9]
 8002408:	021b      	lsls	r3, r3, #8
 800240a:	b21a      	sxth	r2, r3
 800240c:	7a3b      	ldrb	r3, [r7, #8]
 800240e:	b21b      	sxth	r3, r3
 8002410:	4313      	orrs	r3, r2
 8002412:	b21b      	sxth	r3, r3
 8002414:	b29a      	uxth	r2, r3
 8002416:	4b53      	ldr	r3, [pc, #332]	; (8002564 <BME280_init+0x1ec>)
 8002418:	821a      	strh	r2, [r3, #16]
	bme280._dig_T2 = ( int16_t)((( int16_t) calib[3] << 8) | calib[2]);
 800241a:	7afb      	ldrb	r3, [r7, #11]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	b21a      	sxth	r2, r3
 8002420:	7abb      	ldrb	r3, [r7, #10]
 8002422:	b21b      	sxth	r3, r3
 8002424:	4313      	orrs	r3, r2
 8002426:	b21a      	sxth	r2, r3
 8002428:	4b4e      	ldr	r3, [pc, #312]	; (8002564 <BME280_init+0x1ec>)
 800242a:	831a      	strh	r2, [r3, #24]
	bme280._dig_T3 = ( int16_t)((( int16_t) calib[5] << 8) | calib[4]);
 800242c:	7b7b      	ldrb	r3, [r7, #13]
 800242e:	021b      	lsls	r3, r3, #8
 8002430:	b21a      	sxth	r2, r3
 8002432:	7b3b      	ldrb	r3, [r7, #12]
 8002434:	b21b      	sxth	r3, r3
 8002436:	4313      	orrs	r3, r2
 8002438:	b21a      	sxth	r2, r3
 800243a:	4b4a      	ldr	r3, [pc, #296]	; (8002564 <BME280_init+0x1ec>)
 800243c:	835a      	strh	r2, [r3, #26]
	bme280._dig_P1 = (uint16_t)(((uint16_t) calib[7] << 8) | calib[6]);
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	b21a      	sxth	r2, r3
 8002444:	7bbb      	ldrb	r3, [r7, #14]
 8002446:	b21b      	sxth	r3, r3
 8002448:	4313      	orrs	r3, r2
 800244a:	b21b      	sxth	r3, r3
 800244c:	b29a      	uxth	r2, r3
 800244e:	4b45      	ldr	r3, [pc, #276]	; (8002564 <BME280_init+0x1ec>)
 8002450:	825a      	strh	r2, [r3, #18]
	bme280._dig_P2 = ( int16_t)((( int16_t) calib[9] << 8) | calib[8]);
 8002452:	7c7b      	ldrb	r3, [r7, #17]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	b21a      	sxth	r2, r3
 8002458:	7c3b      	ldrb	r3, [r7, #16]
 800245a:	b21b      	sxth	r3, r3
 800245c:	4313      	orrs	r3, r2
 800245e:	b21a      	sxth	r2, r3
 8002460:	4b40      	ldr	r3, [pc, #256]	; (8002564 <BME280_init+0x1ec>)
 8002462:	839a      	strh	r2, [r3, #28]
	bme280._dig_P3 = ( int16_t)((( int16_t) calib[11] << 8) | calib[10]);
 8002464:	7cfb      	ldrb	r3, [r7, #19]
 8002466:	021b      	lsls	r3, r3, #8
 8002468:	b21a      	sxth	r2, r3
 800246a:	7cbb      	ldrb	r3, [r7, #18]
 800246c:	b21b      	sxth	r3, r3
 800246e:	4313      	orrs	r3, r2
 8002470:	b21a      	sxth	r2, r3
 8002472:	4b3c      	ldr	r3, [pc, #240]	; (8002564 <BME280_init+0x1ec>)
 8002474:	83da      	strh	r2, [r3, #30]
	bme280._dig_P4 = ( int16_t)((( int16_t) calib[13] << 8) | calib[12]);
 8002476:	7d7b      	ldrb	r3, [r7, #21]
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	b21a      	sxth	r2, r3
 800247c:	7d3b      	ldrb	r3, [r7, #20]
 800247e:	b21b      	sxth	r3, r3
 8002480:	4313      	orrs	r3, r2
 8002482:	b21a      	sxth	r2, r3
 8002484:	4b37      	ldr	r3, [pc, #220]	; (8002564 <BME280_init+0x1ec>)
 8002486:	841a      	strh	r2, [r3, #32]
	bme280._dig_P5 = ( int16_t)((( int16_t) calib[15] << 8) | calib[14]);
 8002488:	7dfb      	ldrb	r3, [r7, #23]
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	b21a      	sxth	r2, r3
 800248e:	7dbb      	ldrb	r3, [r7, #22]
 8002490:	b21b      	sxth	r3, r3
 8002492:	4313      	orrs	r3, r2
 8002494:	b21a      	sxth	r2, r3
 8002496:	4b33      	ldr	r3, [pc, #204]	; (8002564 <BME280_init+0x1ec>)
 8002498:	845a      	strh	r2, [r3, #34]	; 0x22
	bme280._dig_P6 = ( int16_t)((( int16_t) calib[17] << 8) | calib[16]);
 800249a:	7e7b      	ldrb	r3, [r7, #25]
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	b21a      	sxth	r2, r3
 80024a0:	7e3b      	ldrb	r3, [r7, #24]
 80024a2:	b21b      	sxth	r3, r3
 80024a4:	4313      	orrs	r3, r2
 80024a6:	b21a      	sxth	r2, r3
 80024a8:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <BME280_init+0x1ec>)
 80024aa:	849a      	strh	r2, [r3, #36]	; 0x24
	bme280._dig_P7 = ( int16_t)((( int16_t) calib[19] << 8) | calib[18]);
 80024ac:	7efb      	ldrb	r3, [r7, #27]
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	b21a      	sxth	r2, r3
 80024b2:	7ebb      	ldrb	r3, [r7, #26]
 80024b4:	b21b      	sxth	r3, r3
 80024b6:	4313      	orrs	r3, r2
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <BME280_init+0x1ec>)
 80024bc:	84da      	strh	r2, [r3, #38]	; 0x26
	bme280._dig_P8 = ( int16_t)((( int16_t) calib[21] << 8) | calib[20]);
 80024be:	7f7b      	ldrb	r3, [r7, #29]
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	b21a      	sxth	r2, r3
 80024c4:	7f3b      	ldrb	r3, [r7, #28]
 80024c6:	b21b      	sxth	r3, r3
 80024c8:	4313      	orrs	r3, r2
 80024ca:	b21a      	sxth	r2, r3
 80024cc:	4b25      	ldr	r3, [pc, #148]	; (8002564 <BME280_init+0x1ec>)
 80024ce:	851a      	strh	r2, [r3, #40]	; 0x28
	bme280._dig_P9 = ( int16_t)((( int16_t) calib[23] << 8) | calib[22]);
 80024d0:	7ffb      	ldrb	r3, [r7, #31]
 80024d2:	021b      	lsls	r3, r3, #8
 80024d4:	b21a      	sxth	r2, r3
 80024d6:	7fbb      	ldrb	r3, [r7, #30]
 80024d8:	b21b      	sxth	r3, r3
 80024da:	4313      	orrs	r3, r2
 80024dc:	b21a      	sxth	r2, r3
 80024de:	4b21      	ldr	r3, [pc, #132]	; (8002564 <BME280_init+0x1ec>)
 80024e0:	855a      	strh	r2, [r3, #42]	; 0x2a
	bme280._dig_H1 = calib[25];
 80024e2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80024e6:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <BME280_init+0x1ec>)
 80024e8:	735a      	strb	r2, [r3, #13]
	BME280_readBytes(BME280_ADDRESS, BME280_CALIB26, 7, &calib[0]);
 80024ea:	f107 0308 	add.w	r3, r7, #8
 80024ee:	2207      	movs	r2, #7
 80024f0:	21e1      	movs	r1, #225	; 0xe1
 80024f2:	20ec      	movs	r0, #236	; 0xec
 80024f4:	f000 fb0a 	bl	8002b0c <BME280_readBytes>
	bme280._dig_H2 = ( int16_t)((( int16_t) calib[1] << 8) | calib[0]);
 80024f8:	7a7b      	ldrb	r3, [r7, #9]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	b21a      	sxth	r2, r3
 80024fe:	7a3b      	ldrb	r3, [r7, #8]
 8002500:	b21b      	sxth	r3, r3
 8002502:	4313      	orrs	r3, r2
 8002504:	b21a      	sxth	r2, r3
 8002506:	4b17      	ldr	r3, [pc, #92]	; (8002564 <BME280_init+0x1ec>)
 8002508:	859a      	strh	r2, [r3, #44]	; 0x2c
	bme280._dig_H3 = calib[2];
 800250a:	7aba      	ldrb	r2, [r7, #10]
 800250c:	4b15      	ldr	r3, [pc, #84]	; (8002564 <BME280_init+0x1ec>)
 800250e:	739a      	strb	r2, [r3, #14]
	bme280._dig_H4 = ( int16_t)(((( int16_t) calib[3] << 8) | (0x0F & calib[4]) << 4) >> 4);
 8002510:	7afb      	ldrb	r3, [r7, #11]
 8002512:	021a      	lsls	r2, r3, #8
 8002514:	7b3b      	ldrb	r3, [r7, #12]
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	b2db      	uxtb	r3, r3
 800251a:	4313      	orrs	r3, r2
 800251c:	111b      	asrs	r3, r3, #4
 800251e:	b29a      	uxth	r2, r3
 8002520:	4b10      	ldr	r3, [pc, #64]	; (8002564 <BME280_init+0x1ec>)
 8002522:	829a      	strh	r2, [r3, #20]
	bme280._dig_H5 = ( int16_t)(((( int16_t) calib[5] << 8) | (0xF0 & calib[4]) ) >> 4 );
 8002524:	7b7b      	ldrb	r3, [r7, #13]
 8002526:	021a      	lsls	r2, r3, #8
 8002528:	7b3b      	ldrb	r3, [r7, #12]
 800252a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800252e:	4313      	orrs	r3, r2
 8002530:	111b      	asrs	r3, r3, #4
 8002532:	b29a      	uxth	r2, r3
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <BME280_init+0x1ec>)
 8002536:	82da      	strh	r2, [r3, #22]
	bme280._dig_H6 = calib[6];
 8002538:	7bba      	ldrb	r2, [r7, #14]
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <BME280_init+0x1ec>)
 800253c:	73da      	strb	r2, [r3, #15]

	/* dump trash value */
	for(int i=0; i<10; i++){
 800253e:	2300      	movs	r3, #0
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
 8002542:	e008      	b.n	8002556 <BME280_init+0x1de>
		BME280_readTemperature();
 8002544:	f000 f899 	bl	800267a <BME280_readTemperature>
		BME280_readPressure();
 8002548:	f000 f8ad 	bl	80026a6 <BME280_readPressure>
		BME280_readHumidity();
 800254c:	f000 f8c1 	bl	80026d2 <BME280_readHumidity>
	for(int i=0; i<10; i++){
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	3301      	adds	r3, #1
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	2b09      	cmp	r3, #9
 800255a:	ddf3      	ble.n	8002544 <BME280_init+0x1cc>
	}
}
 800255c:	bf00      	nop
 800255e:	3728      	adds	r7, #40	; 0x28
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	200008dc 	.word	0x200008dc

08002568 <BME280_readIT>:

void BME280_readIT(){
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af02      	add	r7, sp, #8
	if(bm_i2cFlag == bm_i2cIdle){
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <BME280_readIT+0x30>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10e      	bne.n	8002594 <BME280_readIT+0x2c>
		HAL_I2C_Mem_Read_IT(bme280.hi2c, BME280_ADDRESS, BME280_PRESS_MSB, 1, bme280.buf, 6);
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <BME280_readIT+0x34>)
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	2306      	movs	r3, #6
 800257c:	9301      	str	r3, [sp, #4]
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <BME280_readIT+0x38>)
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	2301      	movs	r3, #1
 8002584:	22f7      	movs	r2, #247	; 0xf7
 8002586:	21ec      	movs	r1, #236	; 0xec
 8002588:	f013 feda 	bl	8016340 <HAL_I2C_Mem_Read_IT>
		bm_i2cFlag = bm_i2cBME280;
 800258c:	4b02      	ldr	r3, [pc, #8]	; (8002598 <BME280_readIT+0x30>)
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
		return;
 8002592:	bf00      	nop
	}
}
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20001484 	.word	0x20001484
 800259c:	200008dc 	.word	0x200008dc
 80025a0:	200008e0 	.word	0x200008e0

080025a4 <BME280_i2cRxCpltCallback>:

uint8_t BME280_i2cRxCpltCallback(){
 80025a4:	b598      	push	{r3, r4, r7, lr}
 80025a6:	af00      	add	r7, sp, #0
	if(bm_i2cFlag != bm_i2cBME280) return 0;
 80025a8:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <BME280_i2cRxCpltCallback+0xb4>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d001      	beq.n	80025b4 <BME280_i2cRxCpltCallback+0x10>
 80025b0:	2300      	movs	r3, #0
 80025b2:	e04e      	b.n	8002652 <BME280_i2cRxCpltCallback+0xae>
    bme280.countP = (int32_t) (((int32_t) bme280.buf[0] << 24 | (int32_t) bme280.buf[1] << 16 | (int32_t) bme280.buf[2] << 8) >> 12);
 80025b4:	4b29      	ldr	r3, [pc, #164]	; (800265c <BME280_i2cRxCpltCallback+0xb8>)
 80025b6:	791b      	ldrb	r3, [r3, #4]
 80025b8:	061a      	lsls	r2, r3, #24
 80025ba:	4b28      	ldr	r3, [pc, #160]	; (800265c <BME280_i2cRxCpltCallback+0xb8>)
 80025bc:	795b      	ldrb	r3, [r3, #5]
 80025be:	041b      	lsls	r3, r3, #16
 80025c0:	431a      	orrs	r2, r3
 80025c2:	4b26      	ldr	r3, [pc, #152]	; (800265c <BME280_i2cRxCpltCallback+0xb8>)
 80025c4:	799b      	ldrb	r3, [r3, #6]
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	4313      	orrs	r3, r2
 80025ca:	131b      	asrs	r3, r3, #12
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b23      	ldr	r3, [pc, #140]	; (800265c <BME280_i2cRxCpltCallback+0xb8>)
 80025d0:	639a      	str	r2, [r3, #56]	; 0x38
    bme280.countT = (int32_t) (((int32_t) bme280.buf[3] << 24 | (int32_t) bme280.buf[4] << 16 | (int32_t) bme280.buf[5] << 8) >> 12);
 80025d2:	4b22      	ldr	r3, [pc, #136]	; (800265c <BME280_i2cRxCpltCallback+0xb8>)
 80025d4:	79db      	ldrb	r3, [r3, #7]
 80025d6:	061a      	lsls	r2, r3, #24
 80025d8:	4b20      	ldr	r3, [pc, #128]	; (800265c <BME280_i2cRxCpltCallback+0xb8>)
 80025da:	7a1b      	ldrb	r3, [r3, #8]
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	431a      	orrs	r2, r3
 80025e0:	4b1e      	ldr	r3, [pc, #120]	; (800265c <BME280_i2cRxCpltCallback+0xb8>)
 80025e2:	7a5b      	ldrb	r3, [r3, #9]
 80025e4:	021b      	lsls	r3, r3, #8
 80025e6:	4313      	orrs	r3, r2
 80025e8:	131b      	asrs	r3, r3, #12
 80025ea:	4a1c      	ldr	r2, [pc, #112]	; (800265c <BME280_i2cRxCpltCallback+0xb8>)
 80025ec:	6353      	str	r3, [r2, #52]	; 0x34

    // change to hPa
    bme280.P = BME280_compensate_P(bme280.countP)/25600.0;	/*[hPa]*/
 80025ee:	4b1b      	ldr	r3, [pc, #108]	; (800265c <BME280_i2cRxCpltCallback+0xb8>)
 80025f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f8be 	bl	8002774 <BME280_compensate_P>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fd ff8a 	bl	8000514 <__aeabi_ui2d>
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	4b16      	ldr	r3, [pc, #88]	; (8002660 <BME280_i2cRxCpltCallback+0xbc>)
 8002606:	f7fe f929 	bl	800085c <__aeabi_ddiv>
 800260a:	4603      	mov	r3, r0
 800260c:	460c      	mov	r4, r1
 800260e:	4618      	mov	r0, r3
 8002610:	4621      	mov	r1, r4
 8002612:	f7fe faf1 	bl	8000bf8 <__aeabi_d2f>
 8002616:	4602      	mov	r2, r0
 8002618:	4b10      	ldr	r3, [pc, #64]	; (800265c <BME280_i2cRxCpltCallback+0xb8>)
 800261a:	645a      	str	r2, [r3, #68]	; 0x44
    bme280.T = BME280_compensate_T(bme280.countT)/100.0;	/*[degC]*/
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <BME280_i2cRxCpltCallback+0xb8>)
 800261e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002620:	4618      	mov	r0, r3
 8002622:	f000 f86b 	bl	80026fc <BME280_compensate_T>
 8002626:	4603      	mov	r3, r0
 8002628:	4618      	mov	r0, r3
 800262a:	f7fd ff83 	bl	8000534 <__aeabi_i2d>
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <BME280_i2cRxCpltCallback+0xc0>)
 8002634:	f7fe f912 	bl	800085c <__aeabi_ddiv>
 8002638:	4603      	mov	r3, r0
 800263a:	460c      	mov	r4, r1
 800263c:	4618      	mov	r0, r3
 800263e:	4621      	mov	r1, r4
 8002640:	f7fe fada 	bl	8000bf8 <__aeabi_d2f>
 8002644:	4602      	mov	r2, r0
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <BME280_i2cRxCpltCallback+0xb8>)
 8002648:	641a      	str	r2, [r3, #64]	; 0x40

    bm_i2cFlag = bm_i2cIdle;
 800264a:	4b03      	ldr	r3, [pc, #12]	; (8002658 <BME280_i2cRxCpltCallback+0xb4>)
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
    return 1;
 8002650:	2301      	movs	r3, #1
}
 8002652:	4618      	mov	r0, r3
 8002654:	bd98      	pop	{r3, r4, r7, pc}
 8002656:	bf00      	nop
 8002658:	20001484 	.word	0x20001484
 800265c:	200008dc 	.word	0x200008dc
 8002660:	40d90000 	.word	0x40d90000
 8002664:	40590000 	.word	0x40590000

08002668 <BME280_reset>:

uint8_t BME280_getChipID(){
	  uint8_t c = BME280_readByte(BME280_ADDRESS, BME280_ID);
	  return c;
}
void BME280_reset(){
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
	BME280_writeByte(BME280_ADDRESS, BME280_RESET, 0xB6);
 800266c:	22b6      	movs	r2, #182	; 0xb6
 800266e:	21e0      	movs	r1, #224	; 0xe0
 8002670:	20ec      	movs	r0, #236	; 0xec
 8002672:	f000 fa2d 	bl	8002ad0 <BME280_writeByte>
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}

0800267a <BME280_readTemperature>:

int32_t BME280_readTemperature(){
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_TEMP_MSB, 3, &rawData[0]);
 8002680:	1d3b      	adds	r3, r7, #4
 8002682:	2203      	movs	r2, #3
 8002684:	21fa      	movs	r1, #250	; 0xfa
 8002686:	20ec      	movs	r0, #236	; 0xec
 8002688:	f000 fa40 	bl	8002b0c <BME280_readBytes>
	  return (int32_t) (((int32_t) rawData[0] << 24 | (int32_t) rawData[1] << 16 | (int32_t) rawData[2] << 8) >> 12);
 800268c:	793b      	ldrb	r3, [r7, #4]
 800268e:	061a      	lsls	r2, r3, #24
 8002690:	797b      	ldrb	r3, [r7, #5]
 8002692:	041b      	lsls	r3, r3, #16
 8002694:	431a      	orrs	r2, r3
 8002696:	79bb      	ldrb	r3, [r7, #6]
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	4313      	orrs	r3, r2
 800269c:	131b      	asrs	r3, r3, #12
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <BME280_readPressure>:

int32_t BME280_readPressure(){
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_PRESS_MSB, 3, &rawData[0]);
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	2203      	movs	r2, #3
 80026b0:	21f7      	movs	r1, #247	; 0xf7
 80026b2:	20ec      	movs	r0, #236	; 0xec
 80026b4:	f000 fa2a 	bl	8002b0c <BME280_readBytes>
	  return (int32_t) (((int32_t) rawData[0] << 24 | (int32_t) rawData[1] << 16 | (int32_t) rawData[2] << 8) >> 12);
 80026b8:	793b      	ldrb	r3, [r7, #4]
 80026ba:	061a      	lsls	r2, r3, #24
 80026bc:	797b      	ldrb	r3, [r7, #5]
 80026be:	041b      	lsls	r3, r3, #16
 80026c0:	431a      	orrs	r2, r3
 80026c2:	79bb      	ldrb	r3, [r7, #6]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	4313      	orrs	r3, r2
 80026c8:	131b      	asrs	r3, r3, #12
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <BME280_readHumidity>:
int16_t BME280_readHumidity(){
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_HUM_MSB, 2, &rawData[0]);
 80026d8:	1d3b      	adds	r3, r7, #4
 80026da:	2202      	movs	r2, #2
 80026dc:	21fd      	movs	r1, #253	; 0xfd
 80026de:	20ec      	movs	r0, #236	; 0xec
 80026e0:	f000 fa14 	bl	8002b0c <BME280_readBytes>
	  return (int16_t) (((int16_t) rawData[0] << 8 | rawData[1]) );
 80026e4:	793b      	ldrb	r3, [r7, #4]
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	b21a      	sxth	r2, r3
 80026ea:	797b      	ldrb	r3, [r7, #5]
 80026ec:	b21b      	sxth	r3, r3
 80026ee:	4313      	orrs	r3, r2
 80026f0:	b21b      	sxth	r3, r3
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <BME280_compensate_T>:



// Returns temperature in DegC, resolution is 0.01 DegC. Output value of
// “5123” equals 51.23 DegC.
int32_t BME280_compensate_T(int32_t adc_T){
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
	  int32_t var1, var2, T;
	  var1 = ((((adc_T >> 3) - ((int32_t)bme280._dig_T1 << 1))) * ((int32_t)bme280._dig_T2)) >> 11;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	10da      	asrs	r2, r3, #3
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <BME280_compensate_T+0x74>)
 800270a:	8a1b      	ldrh	r3, [r3, #16]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	4a17      	ldr	r2, [pc, #92]	; (8002770 <BME280_compensate_T+0x74>)
 8002712:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 8002716:	fb02 f303 	mul.w	r3, r2, r3
 800271a:	12db      	asrs	r3, r3, #11
 800271c:	617b      	str	r3, [r7, #20]
	  var2 = (((((adc_T >> 4) - ((int32_t)bme280._dig_T1)) * ((adc_T >> 4) - ((int32_t)bme280._dig_T1))) >> 12) * ((int32_t)bme280._dig_T3)) >> 14;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	111b      	asrs	r3, r3, #4
 8002722:	4a13      	ldr	r2, [pc, #76]	; (8002770 <BME280_compensate_T+0x74>)
 8002724:	8a12      	ldrh	r2, [r2, #16]
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	1112      	asrs	r2, r2, #4
 800272c:	4910      	ldr	r1, [pc, #64]	; (8002770 <BME280_compensate_T+0x74>)
 800272e:	8a09      	ldrh	r1, [r1, #16]
 8002730:	1a52      	subs	r2, r2, r1
 8002732:	fb02 f303 	mul.w	r3, r2, r3
 8002736:	131b      	asrs	r3, r3, #12
 8002738:	4a0d      	ldr	r2, [pc, #52]	; (8002770 <BME280_compensate_T+0x74>)
 800273a:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 800273e:	fb02 f303 	mul.w	r3, r2, r3
 8002742:	139b      	asrs	r3, r3, #14
 8002744:	613b      	str	r3, [r7, #16]
	  bme280._t_fine = var1 + var2;
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	4a08      	ldr	r2, [pc, #32]	; (8002770 <BME280_compensate_T+0x74>)
 800274e:	6313      	str	r3, [r2, #48]	; 0x30
	  T = (bme280._t_fine * 5 + 128) >> 8;
 8002750:	4b07      	ldr	r3, [pc, #28]	; (8002770 <BME280_compensate_T+0x74>)
 8002752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	3380      	adds	r3, #128	; 0x80
 800275c:	121b      	asrs	r3, r3, #8
 800275e:	60fb      	str	r3, [r7, #12]
	  return T;
 8002760:	68fb      	ldr	r3, [r7, #12]
}
 8002762:	4618      	mov	r0, r3
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	200008dc 	.word	0x200008dc

08002774 <BME280_compensate_P>:

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8
//fractional bits).
//Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t BME280_compensate_P(int32_t adc_P){
 8002774:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8002778:	b088      	sub	sp, #32
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
	  int64_t var1, var2, p;
	  var1 = ((int64_t)bme280._t_fine) - 128000;
 800277e:	4b65      	ldr	r3, [pc, #404]	; (8002914 <BME280_compensate_P+0x1a0>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4619      	mov	r1, r3
 8002784:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002788:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 800278c:	f142 34ff 	adc.w	r4, r2, #4294967295
 8002790:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = var1 * var1 * (int64_t)bme280._dig_P6;
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	fb02 f203 	mul.w	r2, r2, r3
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	69b9      	ldr	r1, [r7, #24]
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	441a      	add	r2, r3
 80027a6:	69b9      	ldr	r1, [r7, #24]
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	fba1 3403 	umull	r3, r4, r1, r3
 80027ae:	4422      	add	r2, r4
 80027b0:	4614      	mov	r4, r2
 80027b2:	4a58      	ldr	r2, [pc, #352]	; (8002914 <BME280_compensate_P+0x1a0>)
 80027b4:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 80027b8:	b211      	sxth	r1, r2
 80027ba:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80027be:	fb01 f504 	mul.w	r5, r1, r4
 80027c2:	fb03 f002 	mul.w	r0, r3, r2
 80027c6:	4428      	add	r0, r5
 80027c8:	fba3 3401 	umull	r3, r4, r3, r1
 80027cc:	1902      	adds	r2, r0, r4
 80027ce:	4614      	mov	r4, r2
 80027d0:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80027d4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + ((var1*(int64_t)bme280._dig_P5)<<17);
 80027d8:	4b4e      	ldr	r3, [pc, #312]	; (8002914 <BME280_compensate_P+0x1a0>)
 80027da:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80027de:	b21b      	sxth	r3, r3
 80027e0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	fb04 f102 	mul.w	r1, r4, r2
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	fb03 f202 	mul.w	r2, r3, r2
 80027f0:	1888      	adds	r0, r1, r2
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	fba2 1203 	umull	r1, r2, r2, r3
 80027f8:	1883      	adds	r3, r0, r2
 80027fa:	461a      	mov	r2, r3
 80027fc:	f04f 0500 	mov.w	r5, #0
 8002800:	f04f 0600 	mov.w	r6, #0
 8002804:	0456      	lsls	r6, r2, #17
 8002806:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 800280a:	044d      	lsls	r5, r1, #17
 800280c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002810:	186b      	adds	r3, r5, r1
 8002812:	eb46 0402 	adc.w	r4, r6, r2
 8002816:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + (((int64_t)bme280._dig_P4)<<35);
 800281a:	4b3e      	ldr	r3, [pc, #248]	; (8002914 <BME280_compensate_P+0x1a0>)
 800281c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002820:	b219      	sxth	r1, r3
 8002822:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002826:	f04f 0500 	mov.w	r5, #0
 800282a:	f04f 0600 	mov.w	r6, #0
 800282e:	00ce      	lsls	r6, r1, #3
 8002830:	2500      	movs	r5, #0
 8002832:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002836:	186b      	adds	r3, r5, r1
 8002838:	eb46 0402 	adc.w	r4, r6, r2
 800283c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var1 = ((var1 * var1 * (int64_t)bme280._dig_P3)>>8) + ((var1 * (int64_t)bme280._dig_P2)<<12);
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	fb02 f203 	mul.w	r2, r2, r3
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	69b9      	ldr	r1, [r7, #24]
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	441a      	add	r2, r3
 8002852:	69b9      	ldr	r1, [r7, #24]
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	fba1 3403 	umull	r3, r4, r1, r3
 800285a:	4422      	add	r2, r4
 800285c:	4614      	mov	r4, r2
 800285e:	4a2d      	ldr	r2, [pc, #180]	; (8002914 <BME280_compensate_P+0x1a0>)
 8002860:	f9b2 201e 	ldrsh.w	r2, [r2, #30]
 8002864:	b211      	sxth	r1, r2
 8002866:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800286a:	fb01 f504 	mul.w	r5, r1, r4
 800286e:	fb03 f002 	mul.w	r0, r3, r2
 8002872:	4428      	add	r0, r5
 8002874:	fba3 3401 	umull	r3, r4, r3, r1
 8002878:	1902      	adds	r2, r0, r4
 800287a:	4614      	mov	r4, r2
 800287c:	f04f 0100 	mov.w	r1, #0
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	0a19      	lsrs	r1, r3, #8
 8002886:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800288a:	1222      	asrs	r2, r4, #8
 800288c:	4b21      	ldr	r3, [pc, #132]	; (8002914 <BME280_compensate_P+0x1a0>)
 800288e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002892:	b21b      	sxth	r3, r3
 8002894:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002898:	69b8      	ldr	r0, [r7, #24]
 800289a:	fb04 f500 	mul.w	r5, r4, r0
 800289e:	69f8      	ldr	r0, [r7, #28]
 80028a0:	fb03 f000 	mul.w	r0, r3, r0
 80028a4:	4428      	add	r0, r5
 80028a6:	69bd      	ldr	r5, [r7, #24]
 80028a8:	fba5 5603 	umull	r5, r6, r5, r3
 80028ac:	1983      	adds	r3, r0, r6
 80028ae:	461e      	mov	r6, r3
 80028b0:	f04f 0b00 	mov.w	fp, #0
 80028b4:	f04f 0c00 	mov.w	ip, #0
 80028b8:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 80028bc:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 80028c0:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 80028c4:	eb1b 0301 	adds.w	r3, fp, r1
 80028c8:	eb4c 0402 	adc.w	r4, ip, r2
 80028cc:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)bme280._dig_P1)>>33;
 80028d0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80028d4:	1c19      	adds	r1, r3, #0
 80028d6:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <BME280_compensate_P+0x1a0>)
 80028dc:	8a5b      	ldrh	r3, [r3, #18]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	f04f 0400 	mov.w	r4, #0
 80028e4:	fb03 f502 	mul.w	r5, r3, r2
 80028e8:	fb01 f004 	mul.w	r0, r1, r4
 80028ec:	4428      	add	r0, r5
 80028ee:	fba1 3403 	umull	r3, r4, r1, r3
 80028f2:	1902      	adds	r2, r0, r4
 80028f4:	4614      	mov	r4, r2
 80028f6:	f04f 0100 	mov.w	r1, #0
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	1061      	asrs	r1, r4, #1
 8002900:	17e2      	asrs	r2, r4, #31
 8002902:	e9c7 1206 	strd	r1, r2, [r7, #24]
	  if(var1 == 0)
 8002906:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800290a:	4323      	orrs	r3, r4
 800290c:	d104      	bne.n	8002918 <BME280_compensate_P+0x1a4>
	  {
	    return 0;
 800290e:	2300      	movs	r3, #0
 8002910:	e0d7      	b.n	8002ac2 <BME280_compensate_P+0x34e>
 8002912:	bf00      	nop
 8002914:	200008dc 	.word	0x200008dc
	    // avoid exception caused by division by zero
	  }
	  p = 1048576 - adc_P;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800291e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002922:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  p = (((p<<31) - var2)*3125)/var1;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	ea4f 0963 	mov.w	r9, r3, asr #1
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8002932:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002936:	4645      	mov	r5, r8
 8002938:	464e      	mov	r6, r9
 800293a:	1aed      	subs	r5, r5, r3
 800293c:	eb66 0604 	sbc.w	r6, r6, r4
 8002940:	46a8      	mov	r8, r5
 8002942:	46b1      	mov	r9, r6
 8002944:	eb18 0308 	adds.w	r3, r8, r8
 8002948:	eb49 0409 	adc.w	r4, r9, r9
 800294c:	4698      	mov	r8, r3
 800294e:	46a1      	mov	r9, r4
 8002950:	eb18 0805 	adds.w	r8, r8, r5
 8002954:	eb49 0906 	adc.w	r9, r9, r6
 8002958:	f04f 0100 	mov.w	r1, #0
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8002964:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8002968:	ea4f 1188 	mov.w	r1, r8, lsl #6
 800296c:	eb18 0801 	adds.w	r8, r8, r1
 8002970:	eb49 0902 	adc.w	r9, r9, r2
 8002974:	f04f 0100 	mov.w	r1, #0
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002980:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8002984:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002988:	4688      	mov	r8, r1
 800298a:	4691      	mov	r9, r2
 800298c:	eb18 0805 	adds.w	r8, r8, r5
 8002990:	eb49 0906 	adc.w	r9, r9, r6
 8002994:	f04f 0100 	mov.w	r1, #0
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80029a0:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80029a4:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80029a8:	4688      	mov	r8, r1
 80029aa:	4691      	mov	r9, r2
 80029ac:	eb18 0005 	adds.w	r0, r8, r5
 80029b0:	eb49 0106 	adc.w	r1, r9, r6
 80029b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029b8:	f7fe fa7c 	bl	8000eb4 <__aeabi_ldivmod>
 80029bc:	4603      	mov	r3, r0
 80029be:	460c      	mov	r4, r1
 80029c0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  var1 = (((int64_t)bme280._dig_P9) * (p>>13) * (p>>13)) >> 25;
 80029c4:	4b41      	ldr	r3, [pc, #260]	; (8002acc <BME280_compensate_P+0x358>)
 80029c6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80029ca:	b219      	sxth	r1, r3
 80029cc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80029d0:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	f04f 0400 	mov.w	r4, #0
 80029dc:	0b6b      	lsrs	r3, r5, #13
 80029de:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80029e2:	1374      	asrs	r4, r6, #13
 80029e4:	fb03 f502 	mul.w	r5, r3, r2
 80029e8:	fb01 f004 	mul.w	r0, r1, r4
 80029ec:	4428      	add	r0, r5
 80029ee:	fba1 1203 	umull	r1, r2, r1, r3
 80029f2:	1883      	adds	r3, r0, r2
 80029f4:	461a      	mov	r2, r3
 80029f6:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	f04f 0400 	mov.w	r4, #0
 8002a02:	0b6b      	lsrs	r3, r5, #13
 8002a04:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8002a08:	1374      	asrs	r4, r6, #13
 8002a0a:	fb03 f502 	mul.w	r5, r3, r2
 8002a0e:	fb01 f004 	mul.w	r0, r1, r4
 8002a12:	4428      	add	r0, r5
 8002a14:	fba1 1203 	umull	r1, r2, r1, r3
 8002a18:	1883      	adds	r3, r0, r2
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	f04f 0400 	mov.w	r4, #0
 8002a24:	0e4b      	lsrs	r3, r1, #25
 8002a26:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8002a2a:	1654      	asrs	r4, r2, #25
 8002a2c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = (((int64_t)bme280._dig_P8) * p)>> 19;
 8002a30:	4b26      	ldr	r3, [pc, #152]	; (8002acc <BME280_compensate_P+0x358>)
 8002a32:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002a36:	b21b      	sxth	r3, r3
 8002a38:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	fb04 f102 	mul.w	r1, r4, r2
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	fb03 f202 	mul.w	r2, r3, r2
 8002a48:	1888      	adds	r0, r1, r2
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	fba2 1203 	umull	r1, r2, r2, r3
 8002a50:	1883      	adds	r3, r0, r2
 8002a52:	461a      	mov	r2, r3
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	f04f 0400 	mov.w	r4, #0
 8002a5c:	0ccb      	lsrs	r3, r1, #19
 8002a5e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002a62:	14d4      	asrs	r4, r2, #19
 8002a64:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  p = ((p + var1 + var2) >> 8) + (((int64_t)bme280._dig_P7)<<4);
 8002a68:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002a6c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002a70:	eb11 0803 	adds.w	r8, r1, r3
 8002a74:	eb42 0904 	adc.w	r9, r2, r4
 8002a78:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002a7c:	eb13 0508 	adds.w	r5, r3, r8
 8002a80:	eb44 0609 	adc.w	r6, r4, r9
 8002a84:	f04f 0100 	mov.w	r1, #0
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	0a29      	lsrs	r1, r5, #8
 8002a8e:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8002a92:	1232      	asrs	r2, r6, #8
 8002a94:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <BME280_compensate_P+0x358>)
 8002a96:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002a9a:	b21d      	sxth	r5, r3
 8002a9c:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8002aa0:	f04f 0800 	mov.w	r8, #0
 8002aa4:	f04f 0900 	mov.w	r9, #0
 8002aa8:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8002aac:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8002ab0:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8002ab4:	eb18 0301 	adds.w	r3, r8, r1
 8002ab8:	eb49 0402 	adc.w	r4, r9, r2
 8002abc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  return (uint32_t)p;
 8002ac0:	68bb      	ldr	r3, [r7, #8]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3720      	adds	r7, #32
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8002acc:	200008dc 	.word	0x200008dc

08002ad0 <BME280_writeByte>:
	var = (var < 0 ? 0 : var);
	var = (var > 419430400 ? 419430400 : var);
	return(uint32_t)(var >> 12);
}

void BME280_writeByte(uint8_t address, uint8_t subAddress, uint8_t data){
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af04      	add	r7, sp, #16
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
 8002ada:	460b      	mov	r3, r1
 8002adc:	71bb      	strb	r3, [r7, #6]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(bme280.hi2c, address, subAddress, 1, &data, 1, BME_DEFAULT_TIMEOUT);
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <BME280_writeByte+0x38>)
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	b299      	uxth	r1, r3
 8002aea:	79bb      	ldrb	r3, [r7, #6]
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	2364      	movs	r3, #100	; 0x64
 8002af0:	9302      	str	r3, [sp, #8]
 8002af2:	2301      	movs	r3, #1
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	1d7b      	adds	r3, r7, #5
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	2301      	movs	r3, #1
 8002afc:	f013 f900 	bl	8015d00 <HAL_I2C_Mem_Write>
}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	200008dc 	.word	0x200008dc

08002b0c <BME280_readBytes>:
void BME280_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest){
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af04      	add	r7, sp, #16
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	4603      	mov	r3, r0
 8002b16:	71fb      	strb	r3, [r7, #7]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	71bb      	strb	r3, [r7, #6]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(bme280.hi2c, address, subAddress, 1, (uint8_t*)dest, count, BME_DEFAULT_TIMEOUT);
 8002b20:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <BME280_readBytes+0x40>)
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	b299      	uxth	r1, r3
 8002b28:	79bb      	ldrb	r3, [r7, #6]
 8002b2a:	b29c      	uxth	r4, r3
 8002b2c:	797b      	ldrb	r3, [r7, #5]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2264      	movs	r2, #100	; 0x64
 8002b32:	9202      	str	r2, [sp, #8]
 8002b34:	9301      	str	r3, [sp, #4]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	4622      	mov	r2, r4
 8002b3e:	f013 f9d9 	bl	8015ef4 <HAL_I2C_Mem_Read>
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd90      	pop	{r4, r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	200008dc 	.word	0x200008dc

08002b50 <TM_GPS_Init>:
#define TM_GPS_INT_Add2CRC(c)                            (TM_GPS_CRC ^= c)
#define TM_GPS_INT_ReturnWithStatus(GPS_Data, status)    (GPS_Data)->Status = status; return status;
#define TM_GPS_INT_SetFlag(flag)                         (GPS_Flags |= (flag))

/* Public */
void TM_GPS_Init(UART_HandleTypeDef* huart) {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	/* Initialize USART */
	TM_GPS_FirstTime = 1;
 8002b58:	4b46      	ldr	r3, [pc, #280]	; (8002c74 <TM_GPS_Init+0x124>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]
	
	/* Reset everything */
	gpsUart.gpsData.CustomStatementsCount = 0;
 8002b5e:	4b46      	ldr	r3, [pc, #280]	; (8002c78 <TM_GPS_Init+0x128>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	
	/* Clear all flags */
	TM_GPS_INT_ClearFlags(&gpsUart.gpsData);
 8002b66:	4844      	ldr	r0, [pc, #272]	; (8002c78 <TM_GPS_Init+0x128>)
 8002b68:	f001 f9f6 	bl	8003f58 <TM_GPS_INT_ClearFlags>
	
	/* Set flags used */
#ifndef GPS_DISABLE_GPGGA
	GPS_Flags_OK |= GPS_FLAG_LATITUDE;
 8002b6c:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	4a41      	ldr	r2, [pc, #260]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002b76:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_NS;
 8002b78:	4b40      	ldr	r3, [pc, #256]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b80:	4a3e      	ldr	r2, [pc, #248]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002b82:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_LONGITUDE;
 8002b84:	4b3d      	ldr	r3, [pc, #244]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f043 0302 	orr.w	r3, r3, #2
 8002b8c:	4a3b      	ldr	r2, [pc, #236]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002b8e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_EW;
 8002b90:	4b3a      	ldr	r3, [pc, #232]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f043 0320 	orr.w	r3, r3, #32
 8002b98:	4a38      	ldr	r2, [pc, #224]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002b9a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS;
 8002b9c:	4b37      	ldr	r3, [pc, #220]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f043 0304 	orr.w	r3, r3, #4
 8002ba4:	4a35      	ldr	r2, [pc, #212]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002ba6:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIX;
 8002ba8:	4b34      	ldr	r3, [pc, #208]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f043 0308 	orr.w	r3, r3, #8
 8002bb0:	4a32      	ldr	r2, [pc, #200]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002bb2:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_ALTITUDE;
 8002bb4:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f043 0310 	orr.w	r3, r3, #16
 8002bbc:	4a2f      	ldr	r2, [pc, #188]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002bbe:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_TIME;
 8002bc0:	4b2e      	ldr	r3, [pc, #184]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc8:	4a2c      	ldr	r2, [pc, #176]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002bca:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPRMC
	GPS_Flags_OK |= GPS_FLAG_SPEED;
 8002bcc:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd4:	4a29      	ldr	r2, [pc, #164]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002bd6:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DATE;
 8002bd8:	4b28      	ldr	r3, [pc, #160]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be0:	4a26      	ldr	r2, [pc, #152]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002be2:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VALIDITY;
 8002be4:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bec:	4a23      	ldr	r2, [pc, #140]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002bee:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DIRECTION;
 8002bf0:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bf8:	4a20      	ldr	r2, [pc, #128]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002bfa:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSA
	GPS_Flags_OK |= GPS_FLAG_HDOP;
 8002bfc:	4b1f      	ldr	r3, [pc, #124]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c04:	4a1d      	ldr	r2, [pc, #116]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002c06:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VDOP;
 8002c08:	4b1c      	ldr	r3, [pc, #112]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c10:	4a1a      	ldr	r2, [pc, #104]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002c12:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_PDOP;
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c1c:	4a17      	ldr	r2, [pc, #92]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002c1e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIXMODE;
 8002c20:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c28:	4a14      	ldr	r2, [pc, #80]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002c2a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS1_12;
 8002c2c:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c34:	4a11      	ldr	r2, [pc, #68]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002c36:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSV	
	GPS_Flags_OK |= GPS_FLAG_SATSINVIEW;
 8002c38:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	4a0e      	ldr	r2, [pc, #56]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002c42:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATSDESC;
 8002c44:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c4c:	4a0b      	ldr	r2, [pc, #44]	; (8002c7c <TM_GPS_Init+0x12c>)
 8002c4e:	6013      	str	r3, [r2, #0]
#endif
	gpsUart.huart = huart;
 8002c50:	4a09      	ldr	r2, [pc, #36]	; (8002c78 <TM_GPS_Init+0x128>)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
	HAL_UART_Receive_DMA(gpsUart.huart, gpsUart.GPS_DmaBuf, GPS_DMA_BUF_SIZE);
 8002c58:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <TM_GPS_Init+0x128>)
 8002c5a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8002c5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c62:	4907      	ldr	r1, [pc, #28]	; (8002c80 <TM_GPS_Init+0x130>)
 8002c64:	4618      	mov	r0, r3
 8002c66:	f018 ff7b 	bl	801bb60 <HAL_UART_Receive_DMA>
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000a70 	.word	0x20000a70
 8002c78:	20001210 	.word	0x20001210
 8002c7c:	20000940 	.word	0x20000940
 8002c80:	2000133c 	.word	0x2000133c

08002c84 <TM_GPS_Update>:

TM_GPS_Result_t TM_GPS_Update() {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0

	TM_GPS_Result_t result = TM_GPS_Result_OldData;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	71fb      	strb	r3, [r7, #7]
//	HAL_UART_Transmit(&huart3, GPS_DmaBuf, GPS_DMA_BUF_SIZE, 100);
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 8002c8e:	2300      	movs	r3, #0
 8002c90:	603b      	str	r3, [r7, #0]
 8002c92:	e013      	b.n	8002cbc <TM_GPS_Update+0x38>
		TM_GPS_INT_Do(&gpsUart.gpsData, (char)gpsUart.GPS_DmaBuf[i]);
 8002c94:	4a13      	ldr	r2, [pc, #76]	; (8002ce4 <TM_GPS_Update+0x60>)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4810      	ldr	r0, [pc, #64]	; (8002ce4 <TM_GPS_Update+0x60>)
 8002ca4:	f000 f8da 	bl	8002e5c <TM_GPS_INT_Do>
		if (gpsUart.gpsData.Status == TM_GPS_Result_NewData) {
 8002ca8:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <TM_GPS_Update+0x60>)
 8002caa:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <TM_GPS_Update+0x32>
//			return gps.Status;
//			gps->Status = TM_GPS_Result_OldData;
			result = TM_GPS_Result_NewData;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002cc2:	dbe7      	blt.n	8002c94 <TM_GPS_Update+0x10>
		}
	}
//	}
	
	if (TM_GPS_FirstTime) {
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <TM_GPS_Update+0x64>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <TM_GPS_Update+0x54>
		/* No any valid data, return First Data Waiting */
		/* Returning only after power up and calling when no all data is received */
		TM_GPS_INT_ReturnWithStatus(&gpsUart.gpsData, TM_GPS_Result_FirstDataWaiting);
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <TM_GPS_Update+0x60>)
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e000      	b.n	8002cda <TM_GPS_Update+0x56>
	}
	
	/* We have old data */
//	TM_GPS_INT_ReturnWithStatus(&gpsUart.gpsData, TM_GPS_Result_OldData);

	return result;
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20001210 	.word	0x20001210
 8002ce8:	20000a70 	.word	0x20000a70

08002cec <TM_GPS_ConvertSpeed>:
	
	return temp;										/* Return pointer */
}
#endif

float TM_GPS_ConvertSpeed(float SpeedInKnots, TM_GPS_Speed_t toSpeed) {
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	ed87 0a01 	vstr	s0, [r7, #4]
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	70fb      	strb	r3, [r7, #3]
	switch ((uint8_t)toSpeed) {
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	2b0e      	cmp	r3, #14
 8002cfe:	f200 8086 	bhi.w	8002e0e <TM_GPS_ConvertSpeed+0x122>
 8002d02:	a201      	add	r2, pc, #4	; (adr r2, 8002d08 <TM_GPS_ConvertSpeed+0x1c>)
 8002d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d08:	08002d45 	.word	0x08002d45
 8002d0c:	08002d53 	.word	0x08002d53
 8002d10:	08002d61 	.word	0x08002d61
 8002d14:	08002d6f 	.word	0x08002d6f
 8002d18:	08002d7d 	.word	0x08002d7d
 8002d1c:	08002d8b 	.word	0x08002d8b
 8002d20:	08002d99 	.word	0x08002d99
 8002d24:	08002da7 	.word	0x08002da7
 8002d28:	08002db5 	.word	0x08002db5
 8002d2c:	08002dc3 	.word	0x08002dc3
 8002d30:	08002dd1 	.word	0x08002dd1
 8002d34:	08002ddf 	.word	0x08002ddf
 8002d38:	08002ded 	.word	0x08002ded
 8002d3c:	08002dfb 	.word	0x08002dfb
 8002d40:	08002e09 	.word	0x08002e09
		/* Metric */
		case TM_GPS_Speed_KilometerPerSecond:	return SpeedInKnots * 0.000514f;
 8002d44:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d48:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002e20 <TM_GPS_ConvertSpeed+0x134>
 8002d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d50:	e05f      	b.n	8002e12 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MeterPerSecond: 		return SpeedInKnots * 0.5144f;
 8002d52:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d56:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002e24 <TM_GPS_ConvertSpeed+0x138>
 8002d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d5e:	e058      	b.n	8002e12 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_KilometerPerHour:	 	return SpeedInKnots * 1.852f;
 8002d60:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d64:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002e28 <TM_GPS_ConvertSpeed+0x13c>
 8002d68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d6c:	e051      	b.n	8002e12 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MeterPerMinute: 		return SpeedInKnots * 30.87f;
 8002d6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d72:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002e2c <TM_GPS_ConvertSpeed+0x140>
 8002d76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d7a:	e04a      	b.n	8002e12 <TM_GPS_ConvertSpeed+0x126>
		
		/* Imperial */
		case TM_GPS_Speed_MilePerSecond: 		return SpeedInKnots * 0.0003197f;
 8002d7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d80:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002e30 <TM_GPS_ConvertSpeed+0x144>
 8002d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d88:	e043      	b.n	8002e12 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MilePerHour: 			return SpeedInKnots * 1.151f;
 8002d8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d8e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002e34 <TM_GPS_ConvertSpeed+0x148>
 8002d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d96:	e03c      	b.n	8002e12 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_FootPerSecond: 		return SpeedInKnots * 1.688f;
 8002d98:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d9c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002e38 <TM_GPS_ConvertSpeed+0x14c>
 8002da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002da4:	e035      	b.n	8002e12 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_FootPerMinute: 		return SpeedInKnots * 101.3f;
 8002da6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002daa:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002e3c <TM_GPS_ConvertSpeed+0x150>
 8002dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002db2:	e02e      	b.n	8002e12 <TM_GPS_ConvertSpeed+0x126>
		
		/* For Runners and Joggers */
		case TM_GPS_Speed_MinutePerKilometer: 	return SpeedInKnots * 32.4f;
 8002db4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002db8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002e40 <TM_GPS_ConvertSpeed+0x154>
 8002dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dc0:	e027      	b.n	8002e12 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPerKilometer: 	return SpeedInKnots * 1944.0f;
 8002dc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dc6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002e44 <TM_GPS_ConvertSpeed+0x158>
 8002dca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dce:	e020      	b.n	8002e12 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPer100Meters: 	return SpeedInKnots * 194.4f;
 8002dd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dd4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002e48 <TM_GPS_ConvertSpeed+0x15c>
 8002dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ddc:	e019      	b.n	8002e12 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MinutePerMile: 		return SpeedInKnots * 52.14f;
 8002dde:	edd7 7a01 	vldr	s15, [r7, #4]
 8002de2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002e4c <TM_GPS_ConvertSpeed+0x160>
 8002de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dea:	e012      	b.n	8002e12 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPerMile: 		return SpeedInKnots * 3128.0f;
 8002dec:	edd7 7a01 	vldr	s15, [r7, #4]
 8002df0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002e50 <TM_GPS_ConvertSpeed+0x164>
 8002df4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002df8:	e00b      	b.n	8002e12 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPer100Yards: 	return SpeedInKnots * 177.7f;
 8002dfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dfe:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002e54 <TM_GPS_ConvertSpeed+0x168>
 8002e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e06:	e004      	b.n	8002e12 <TM_GPS_ConvertSpeed+0x126>
		
		/* Nautical */
		case TM_GPS_Speed_SeaMilePerHour: 		return SpeedInKnots * 1.0f;
 8002e08:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e0c:	e001      	b.n	8002e12 <TM_GPS_ConvertSpeed+0x126>
		default:
			return 0;
 8002e0e:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002e58 <TM_GPS_ConvertSpeed+0x16c>
	}
}
 8002e12:	eeb0 0a67 	vmov.f32	s0, s15
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	3a06bdf5 	.word	0x3a06bdf5
 8002e24:	3f03afb8 	.word	0x3f03afb8
 8002e28:	3fed0e56 	.word	0x3fed0e56
 8002e2c:	41f6f5c3 	.word	0x41f6f5c3
 8002e30:	39a79d68 	.word	0x39a79d68
 8002e34:	3f9353f8 	.word	0x3f9353f8
 8002e38:	3fd81062 	.word	0x3fd81062
 8002e3c:	42ca999a 	.word	0x42ca999a
 8002e40:	4201999a 	.word	0x4201999a
 8002e44:	44f30000 	.word	0x44f30000
 8002e48:	43426666 	.word	0x43426666
 8002e4c:	42508f5c 	.word	0x42508f5c
 8002e50:	45438000 	.word	0x45438000
 8002e54:	4331b333 	.word	0x4331b333
 8002e58:	00000000 	.word	0x00000000

08002e5c <TM_GPS_INT_Do>:
		Distance_Data->Bearing += 360;
	}
}

/* Private */
TM_GPS_Result_t TM_GPS_INT_Do(TM_GPS_t* GPS_Data, char c) {
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	70fb      	strb	r3, [r7, #3]
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f001 f847 	bl	8003efc <TM_GPS_INT_FlagsOk>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d006      	beq.n	8002e82 <TM_GPS_INT_Do+0x26>
		TM_GPS_INT_ClearFlags(GPS_Data);				/* Data were valid before, new data are coming, not new anymore */
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f001 f86f 	bl	8003f58 <TM_GPS_INT_ClearFlags>
		GPS_Data->Status = TM_GPS_Result_OldData;		/* Data were "new" on last call, now are only "Old data", no NEW data */
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	}
	if (c == '$') {										/* Start of string detected */
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	2b24      	cmp	r3, #36	; 0x24
 8002e86:	d116      	bne.n	8002eb6 <TM_GPS_INT_Do+0x5a>
		TM_GPS_Star = 0;								/* Star detection reset */
 8002e88:	4b5d      	ldr	r3, [pc, #372]	; (8003000 <TM_GPS_INT_Do+0x1a4>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
		TM_GPS_CRC = 0;									/* Reset CRC */
 8002e8e:	4b5d      	ldr	r3, [pc, #372]	; (8003004 <TM_GPS_INT_Do+0x1a8>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
		GPS_Term_Number = 0;							/* First term in new statement */
 8002e94:	4b5c      	ldr	r3, [pc, #368]	; (8003008 <TM_GPS_INT_Do+0x1ac>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002e9a:	4b5c      	ldr	r3, [pc, #368]	; (800300c <TM_GPS_INT_Do+0x1b0>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = c;					/* Add character to first term */
 8002ea0:	4b5a      	ldr	r3, [pc, #360]	; (800300c <TM_GPS_INT_Do+0x1b0>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	b2d1      	uxtb	r1, r2
 8002ea8:	4a58      	ldr	r2, [pc, #352]	; (800300c <TM_GPS_INT_Do+0x1b0>)
 8002eaa:	7011      	strb	r1, [r2, #0]
 8002eac:	4619      	mov	r1, r3
 8002eae:	4a58      	ldr	r2, [pc, #352]	; (8003010 <TM_GPS_INT_Do+0x1b4>)
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	5453      	strb	r3, [r2, r1]
 8002eb4:	e09b      	b.n	8002fee <TM_GPS_INT_Do+0x192>
	} else if (c == ',') {
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	2b2c      	cmp	r3, #44	; 0x2c
 8002eba:	d120      	bne.n	8002efe <TM_GPS_INT_Do+0xa2>
		TM_GPS_INT_Add2CRC(c);							/* Add to parity */
 8002ebc:	4b51      	ldr	r3, [pc, #324]	; (8003004 <TM_GPS_INT_Do+0x1a8>)
 8002ebe:	781a      	ldrb	r2, [r3, #0]
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	4053      	eors	r3, r2
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	4b4f      	ldr	r3, [pc, #316]	; (8003004 <TM_GPS_INT_Do+0x1a8>)
 8002ec8:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of term */
 8002eca:	4b50      	ldr	r3, [pc, #320]	; (800300c <TM_GPS_INT_Do+0x1b0>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	b2d1      	uxtb	r1, r2
 8002ed2:	4a4e      	ldr	r2, [pc, #312]	; (800300c <TM_GPS_INT_Do+0x1b0>)
 8002ed4:	7011      	strb	r1, [r2, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4b4d      	ldr	r3, [pc, #308]	; (8003010 <TM_GPS_INT_Do+0x1b4>)
 8002eda:	2100      	movs	r1, #0
 8002edc:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check if term is empty */
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f001 f85e 	bl	8003fa0 <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f89f 	bl	8003028 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 8002eea:	4b47      	ldr	r3, [pc, #284]	; (8003008 <TM_GPS_INT_Do+0x1ac>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	4b45      	ldr	r3, [pc, #276]	; (8003008 <TM_GPS_INT_Do+0x1ac>)
 8002ef4:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002ef6:	4b45      	ldr	r3, [pc, #276]	; (800300c <TM_GPS_INT_Do+0x1b0>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	e077      	b.n	8002fee <TM_GPS_INT_Do+0x192>
	} else if (c == '\n') {
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	2b0a      	cmp	r3, #10
 8002f02:	d113      	bne.n	8002f2c <TM_GPS_INT_Do+0xd0>
		GPS_Term_Number = 0;							/* Reset term number */
 8002f04:	4b40      	ldr	r3, [pc, #256]	; (8003008 <TM_GPS_INT_Do+0x1ac>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]
#ifndef GPS_DISABLE_GPGSV
		/* Check for GPGSV statement */
		if (TM_GPS_Statement == GPS_GPGSV && GPGSV_StatementsCount == GPSGV_StatementNumber) {
 8002f0a:	4b42      	ldr	r3, [pc, #264]	; (8003014 <TM_GPS_INT_Do+0x1b8>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	d16d      	bne.n	8002fee <TM_GPS_INT_Do+0x192>
 8002f12:	4b41      	ldr	r3, [pc, #260]	; (8003018 <TM_GPS_INT_Do+0x1bc>)
 8002f14:	781a      	ldrb	r2, [r3, #0]
 8002f16:	4b41      	ldr	r3, [pc, #260]	; (800301c <TM_GPS_INT_Do+0x1c0>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d167      	bne.n	8002fee <TM_GPS_INT_Do+0x192>
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSDESC);		/* Set flag */
 8002f1e:	4b40      	ldr	r3, [pc, #256]	; (8003020 <TM_GPS_INT_Do+0x1c4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f26:	4a3e      	ldr	r2, [pc, #248]	; (8003020 <TM_GPS_INT_Do+0x1c4>)
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e060      	b.n	8002fee <TM_GPS_INT_Do+0x192>
		}
#endif
	} else if (c == '\r') {
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	2b0d      	cmp	r3, #13
 8002f30:	d128      	bne.n	8002f84 <TM_GPS_INT_Do+0x128>
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of character string */
 8002f32:	4b36      	ldr	r3, [pc, #216]	; (800300c <TM_GPS_INT_Do+0x1b0>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	b2d1      	uxtb	r1, r2
 8002f3a:	4a34      	ldr	r2, [pc, #208]	; (800300c <TM_GPS_INT_Do+0x1b0>)
 8002f3c:	7011      	strb	r1, [r2, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4b33      	ldr	r3, [pc, #204]	; (8003010 <TM_GPS_INT_Do+0x1b4>)
 8002f42:	2100      	movs	r1, #0
 8002f44:	5499      	strb	r1, [r3, r2]
		TM_GPS_CRC_Received = TM_GPS_INT_Hex2Dec(GPS_Term[0]) * 16 + TM_GPS_INT_Hex2Dec(GPS_Term[1]);	/* Between * and \r are 2 characters of Checksum */
 8002f46:	4b32      	ldr	r3, [pc, #200]	; (8003010 <TM_GPS_INT_Do+0x1b4>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 ffac 	bl	8003ea8 <TM_GPS_INT_Hex2Dec>
 8002f50:	4603      	mov	r3, r0
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	b2dc      	uxtb	r4, r3
 8002f56:	4b2e      	ldr	r3, [pc, #184]	; (8003010 <TM_GPS_INT_Do+0x1b4>)
 8002f58:	785b      	ldrb	r3, [r3, #1]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 ffa4 	bl	8003ea8 <TM_GPS_INT_Hex2Dec>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4423      	add	r3, r4
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	4b2f      	ldr	r3, [pc, #188]	; (8003024 <TM_GPS_INT_Do+0x1c8>)
 8002f68:	701a      	strb	r2, [r3, #0]
		if (TM_GPS_CRC_Received != TM_GPS_CRC) {		/* CRC is not OK, data failed somewhere */			
 8002f6a:	4b2e      	ldr	r3, [pc, #184]	; (8003024 <TM_GPS_INT_Do+0x1c8>)
 8002f6c:	781a      	ldrb	r2, [r3, #0]
 8002f6e:	4b25      	ldr	r3, [pc, #148]	; (8003004 <TM_GPS_INT_Do+0x1a8>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d002      	beq.n	8002f7c <TM_GPS_INT_Do+0x120>
			TM_GPS_INT_ClearFlags(GPS_Data);			/* Clear all flags */
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 ffee 	bl	8003f58 <TM_GPS_INT_ClearFlags>
		}
		GPS_Term_Number = 0;							/* Reset term number */
 8002f7c:	4b22      	ldr	r3, [pc, #136]	; (8003008 <TM_GPS_INT_Do+0x1ac>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	701a      	strb	r2, [r3, #0]
 8002f82:	e034      	b.n	8002fee <TM_GPS_INT_Do+0x192>
	} else if (c == '*') {
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	2b2a      	cmp	r3, #42	; 0x2a
 8002f88:	d11c      	bne.n	8002fc4 <TM_GPS_INT_Do+0x168>
		TM_GPS_Star = 1;								/* Star detected */
 8002f8a:	4b1d      	ldr	r3, [pc, #116]	; (8003000 <TM_GPS_INT_Do+0x1a4>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* Add 0 at the end */
 8002f90:	4b1e      	ldr	r3, [pc, #120]	; (800300c <TM_GPS_INT_Do+0x1b0>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	b2d1      	uxtb	r1, r2
 8002f98:	4a1c      	ldr	r2, [pc, #112]	; (800300c <TM_GPS_INT_Do+0x1b0>)
 8002f9a:	7011      	strb	r1, [r2, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <TM_GPS_INT_Do+0x1b4>)
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check empty */
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fffb 	bl	8003fa0 <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */		
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f83c 	bl	8003028 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 8002fb0:	4b15      	ldr	r3, [pc, #84]	; (8003008 <TM_GPS_INT_Do+0x1ac>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <TM_GPS_INT_Do+0x1ac>)
 8002fba:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002fbc:	4b13      	ldr	r3, [pc, #76]	; (800300c <TM_GPS_INT_Do+0x1b0>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	e014      	b.n	8002fee <TM_GPS_INT_Do+0x192>
	} else {
		/* Other characters detected */
		if (!TM_GPS_Star) {								/* If star is not detected yet */
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <TM_GPS_INT_Do+0x1a4>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d106      	bne.n	8002fda <TM_GPS_INT_Do+0x17e>
			TM_GPS_INT_Add2CRC(c);						/* Add to parity */
 8002fcc:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <TM_GPS_INT_Do+0x1a8>)
 8002fce:	781a      	ldrb	r2, [r3, #0]
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	4053      	eors	r3, r2
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <TM_GPS_INT_Do+0x1a8>)
 8002fd8:	701a      	strb	r2, [r3, #0]
		}
		GPS_Term[GPS_Term_Pos++] = c;					/* Add to term */
 8002fda:	4b0c      	ldr	r3, [pc, #48]	; (800300c <TM_GPS_INT_Do+0x1b0>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	b2d1      	uxtb	r1, r2
 8002fe2:	4a0a      	ldr	r2, [pc, #40]	; (800300c <TM_GPS_INT_Do+0x1b0>)
 8002fe4:	7011      	strb	r1, [r2, #0]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4a09      	ldr	r2, [pc, #36]	; (8003010 <TM_GPS_INT_Do+0x1b4>)
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	5453      	strb	r3, [r2, r1]
	}
	return TM_GPS_INT_Return(GPS_Data);					/* Return current GPS status */
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fe44 	bl	8003c7c <TM_GPS_INT_Return>
 8002ff4:	4603      	mov	r3, r0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd90      	pop	{r4, r7, pc}
 8002ffe:	bf00      	nop
 8003000:	2000093b 	.word	0x2000093b
 8003004:	20000939 	.word	0x20000939
 8003008:	20000937 	.word	0x20000937
 800300c:	20000938 	.word	0x20000938
 8003010:	20000928 	.word	0x20000928
 8003014:	20000000 	.word	0x20000000
 8003018:	20000a7b 	.word	0x20000a7b
 800301c:	20000a7c 	.word	0x20000a7c
 8003020:	2000093c 	.word	0x2000093c
 8003024:	2000093a 	.word	0x2000093a

08003028 <TM_GPS_INT_CheckTerm>:

void TM_GPS_INT_CheckTerm(TM_GPS_t* GPS_Data) {
 8003028:	b5b0      	push	{r4, r5, r7, lr}
 800302a:	ed2d 8b02 	vpush	{d8}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
	uint32_t temp;
#ifndef GPS_DISABLE_GPGSA
	static uint8_t ids_count = 0;
#endif
	uint8_t count, i;
	if (GPS_Term_Number == 0) {
 8003034:	48cb      	ldr	r0, [pc, #812]	; (8003364 <TM_GPS_INT_CheckTerm+0x33c>)
 8003036:	7800      	ldrb	r0, [r0, #0]
 8003038:	2800      	cmp	r0, #0
 800303a:	d134      	bne.n	80030a6 <TM_GPS_INT_CheckTerm+0x7e>
		/* Statement indicator */
		if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGGA")) {
 800303c:	49ca      	ldr	r1, [pc, #808]	; (8003368 <TM_GPS_INT_CheckTerm+0x340>)
 800303e:	48cb      	ldr	r0, [pc, #812]	; (800336c <TM_GPS_INT_CheckTerm+0x344>)
 8003040:	f000 fecc 	bl	8003ddc <TM_GPS_INT_StringStartsWith>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <TM_GPS_INT_CheckTerm+0x2a>
			TM_GPS_Statement = GPS_GPGGA;
 800304a:	4bc9      	ldr	r3, [pc, #804]	; (8003370 <TM_GPS_INT_CheckTerm+0x348>)
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
 8003050:	e023      	b.n	800309a <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPRMC")) {
 8003052:	49c8      	ldr	r1, [pc, #800]	; (8003374 <TM_GPS_INT_CheckTerm+0x34c>)
 8003054:	48c5      	ldr	r0, [pc, #788]	; (800336c <TM_GPS_INT_CheckTerm+0x344>)
 8003056:	f000 fec1 	bl	8003ddc <TM_GPS_INT_StringStartsWith>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <TM_GPS_INT_CheckTerm+0x40>
			TM_GPS_Statement = GPS_GPRMC;
 8003060:	4bc3      	ldr	r3, [pc, #780]	; (8003370 <TM_GPS_INT_CheckTerm+0x348>)
 8003062:	2201      	movs	r2, #1
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	e018      	b.n	800309a <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSA")) {
 8003068:	49c3      	ldr	r1, [pc, #780]	; (8003378 <TM_GPS_INT_CheckTerm+0x350>)
 800306a:	48c0      	ldr	r0, [pc, #768]	; (800336c <TM_GPS_INT_CheckTerm+0x344>)
 800306c:	f000 feb6 	bl	8003ddc <TM_GPS_INT_StringStartsWith>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <TM_GPS_INT_CheckTerm+0x56>
			TM_GPS_Statement = GPS_GPGSA;
 8003076:	4bbe      	ldr	r3, [pc, #760]	; (8003370 <TM_GPS_INT_CheckTerm+0x348>)
 8003078:	2202      	movs	r2, #2
 800307a:	701a      	strb	r2, [r3, #0]
 800307c:	e00d      	b.n	800309a <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSV")) {
 800307e:	49bf      	ldr	r1, [pc, #764]	; (800337c <TM_GPS_INT_CheckTerm+0x354>)
 8003080:	48ba      	ldr	r0, [pc, #744]	; (800336c <TM_GPS_INT_CheckTerm+0x344>)
 8003082:	f000 feab 	bl	8003ddc <TM_GPS_INT_StringStartsWith>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <TM_GPS_INT_CheckTerm+0x6c>
			TM_GPS_Statement = GPS_GPGSV;
 800308c:	4bb8      	ldr	r3, [pc, #736]	; (8003370 <TM_GPS_INT_CheckTerm+0x348>)
 800308e:	2203      	movs	r2, #3
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	e002      	b.n	800309a <TM_GPS_INT_CheckTerm+0x72>
		} else {
			TM_GPS_Statement = GPS_ERR;
 8003094:	4bb6      	ldr	r3, [pc, #728]	; (8003370 <TM_GPS_INT_CheckTerm+0x348>)
 8003096:	2204      	movs	r2, #4
 8003098:	701a      	strb	r2, [r3, #0]
		}
		
		strcpy(GPS_Statement_Name, GPS_Term);			/* Copy term to variable */
 800309a:	49b4      	ldr	r1, [pc, #720]	; (800336c <TM_GPS_INT_CheckTerm+0x344>)
 800309c:	48b8      	ldr	r0, [pc, #736]	; (8003380 <TM_GPS_INT_CheckTerm+0x358>)
 800309e:	f026 fc3b 	bl	8029918 <strcpy>
 80030a2:	f000 bdd1 	b.w	8003c48 <TM_GPS_INT_CheckTerm+0xc20>
			}
		}
	}
#endif
	
	switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 80030a6:	48b2      	ldr	r0, [pc, #712]	; (8003370 <TM_GPS_INT_CheckTerm+0x348>)
 80030a8:	7800      	ldrb	r0, [r0, #0]
 80030aa:	0140      	lsls	r0, r0, #5
 80030ac:	4dad      	ldr	r5, [pc, #692]	; (8003364 <TM_GPS_INT_CheckTerm+0x33c>)
 80030ae:	782d      	ldrb	r5, [r5, #0]
 80030b0:	4328      	orrs	r0, r5
 80030b2:	3801      	subs	r0, #1
 80030b4:	2862      	cmp	r0, #98	; 0x62
 80030b6:	f200 852f 	bhi.w	8003b18 <TM_GPS_INT_CheckTerm+0xaf0>
 80030ba:	a501      	add	r5, pc, #4	; (adr r5, 80030c0 <TM_GPS_INT_CheckTerm+0x98>)
 80030bc:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 80030c0:	08003669 	.word	0x08003669
 80030c4:	0800324d 	.word	0x0800324d
 80030c8:	0800333b 	.word	0x0800333b
 80030cc:	08003399 	.word	0x08003399
 80030d0:	08003487 	.word	0x08003487
 80030d4:	080034d1 	.word	0x080034d1
 80030d8:	080034af 	.word	0x080034af
 80030dc:	08003b19 	.word	0x08003b19
 80030e0:	080034f3 	.word	0x080034f3
 80030e4:	08003b19 	.word	0x08003b19
 80030e8:	08003b19 	.word	0x08003b19
 80030ec:	08003b19 	.word	0x08003b19
 80030f0:	08003b19 	.word	0x08003b19
 80030f4:	08003b19 	.word	0x08003b19
 80030f8:	08003b19 	.word	0x08003b19
 80030fc:	08003b19 	.word	0x08003b19
 8003100:	08003b19 	.word	0x08003b19
 8003104:	08003b19 	.word	0x08003b19
 8003108:	08003b19 	.word	0x08003b19
 800310c:	08003b19 	.word	0x08003b19
 8003110:	08003b19 	.word	0x08003b19
 8003114:	08003b19 	.word	0x08003b19
 8003118:	08003b19 	.word	0x08003b19
 800311c:	08003b19 	.word	0x08003b19
 8003120:	08003b19 	.word	0x08003b19
 8003124:	08003b19 	.word	0x08003b19
 8003128:	08003b19 	.word	0x08003b19
 800312c:	08003b19 	.word	0x08003b19
 8003130:	08003b19 	.word	0x08003b19
 8003134:	08003b19 	.word	0x08003b19
 8003138:	08003b19 	.word	0x08003b19
 800313c:	08003b19 	.word	0x08003b19
 8003140:	08003b19 	.word	0x08003b19
 8003144:	0800385f 	.word	0x0800385f
 8003148:	08003b19 	.word	0x08003b19
 800314c:	08003b19 	.word	0x08003b19
 8003150:	08003b19 	.word	0x08003b19
 8003154:	08003b19 	.word	0x08003b19
 8003158:	08003727 	.word	0x08003727
 800315c:	08003883 	.word	0x08003883
 8003160:	080037c5 	.word	0x080037c5
 8003164:	08003b19 	.word	0x08003b19
 8003168:	08003b19 	.word	0x08003b19
 800316c:	08003b19 	.word	0x08003b19
 8003170:	08003b19 	.word	0x08003b19
 8003174:	08003b19 	.word	0x08003b19
 8003178:	08003b19 	.word	0x08003b19
 800317c:	08003b19 	.word	0x08003b19
 8003180:	08003b19 	.word	0x08003b19
 8003184:	08003b19 	.word	0x08003b19
 8003188:	08003b19 	.word	0x08003b19
 800318c:	08003b19 	.word	0x08003b19
 8003190:	08003b19 	.word	0x08003b19
 8003194:	08003b19 	.word	0x08003b19
 8003198:	08003b19 	.word	0x08003b19
 800319c:	08003b19 	.word	0x08003b19
 80031a0:	08003b19 	.word	0x08003b19
 80031a4:	08003b19 	.word	0x08003b19
 80031a8:	08003b19 	.word	0x08003b19
 80031ac:	08003b19 	.word	0x08003b19
 80031b0:	08003b19 	.word	0x08003b19
 80031b4:	08003b19 	.word	0x08003b19
 80031b8:	08003b19 	.word	0x08003b19
 80031bc:	08003b19 	.word	0x08003b19
 80031c0:	08003b19 	.word	0x08003b19
 80031c4:	08003a85 	.word	0x08003a85
 80031c8:	08003aa9 	.word	0x08003aa9
 80031cc:	08003aa9 	.word	0x08003aa9
 80031d0:	08003aa9 	.word	0x08003aa9
 80031d4:	08003aa9 	.word	0x08003aa9
 80031d8:	08003aa9 	.word	0x08003aa9
 80031dc:	08003aa9 	.word	0x08003aa9
 80031e0:	08003aa9 	.word	0x08003aa9
 80031e4:	08003aa9 	.word	0x08003aa9
 80031e8:	08003aa9 	.word	0x08003aa9
 80031ec:	08003aa9 	.word	0x08003aa9
 80031f0:	08003aa9 	.word	0x08003aa9
 80031f4:	08003aa9 	.word	0x08003aa9
 80031f8:	08003991 	.word	0x08003991
 80031fc:	080038fd 	.word	0x080038fd
 8003200:	08003a0b 	.word	0x08003a0b
 8003204:	08003b19 	.word	0x08003b19
 8003208:	08003b19 	.word	0x08003b19
 800320c:	08003b19 	.word	0x08003b19
 8003210:	08003b19 	.word	0x08003b19
 8003214:	08003b19 	.word	0x08003b19
 8003218:	08003b19 	.word	0x08003b19
 800321c:	08003b19 	.word	0x08003b19
 8003220:	08003b19 	.word	0x08003b19
 8003224:	08003b19 	.word	0x08003b19
 8003228:	08003b19 	.word	0x08003b19
 800322c:	08003b19 	.word	0x08003b19
 8003230:	08003b19 	.word	0x08003b19
 8003234:	08003b19 	.word	0x08003b19
 8003238:	08003b19 	.word	0x08003b19
 800323c:	08003b19 	.word	0x08003b19
 8003240:	08003b19 	.word	0x08003b19
 8003244:	08003b19 	.word	0x08003b19
 8003248:	08003af5 	.word	0x08003af5
#ifndef GPS_DISABLE_GPGGA
		case GPS_POS_LATITUDE:	/* GPGGA */
			/* Convert latitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800324c:	f107 0308 	add.w	r3, r7, #8
 8003250:	4619      	mov	r1, r3
 8003252:	4846      	ldr	r0, [pc, #280]	; (800336c <TM_GPS_INT_CheckTerm+0x344>)
 8003254:	f000 fddf 	bl	8003e16 <TM_GPS_INT_Atoi>
 8003258:	4603      	mov	r3, r0
 800325a:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude = temp / 100;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4a49      	ldr	r2, [pc, #292]	; (8003384 <TM_GPS_INT_CheckTerm+0x35c>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd f954 	bl	8000514 <__aeabi_ui2d>
 800326c:	4603      	mov	r3, r0
 800326e:	460c      	mov	r4, r1
 8003270:	4a45      	ldr	r2, [pc, #276]	; (8003388 <TM_GPS_INT_CheckTerm+0x360>)
 8003272:	e9c2 3400 	strd	r3, r4, [r2]
			TM_GPS_INT_Data.Latitude += (float)(temp % 100) / (float)60;
 8003276:	4b44      	ldr	r3, [pc, #272]	; (8003388 <TM_GPS_INT_CheckTerm+0x360>)
 8003278:	e9d3 4500 	ldrd	r4, r5, [r3]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	4b41      	ldr	r3, [pc, #260]	; (8003384 <TM_GPS_INT_CheckTerm+0x35c>)
 8003280:	fba3 1302 	umull	r1, r3, r3, r2
 8003284:	095b      	lsrs	r3, r3, #5
 8003286:	2164      	movs	r1, #100	; 0x64
 8003288:	fb01 f303 	mul.w	r3, r1, r3
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003296:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800338c <TM_GPS_INT_CheckTerm+0x364>
 800329a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800329e:	ee16 0a90 	vmov	r0, s13
 80032a2:	f7fd f959 	bl	8000558 <__aeabi_f2d>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4620      	mov	r0, r4
 80032ac:	4629      	mov	r1, r5
 80032ae:	f7fc fff5 	bl	800029c <__adddf3>
 80032b2:	4603      	mov	r3, r0
 80032b4:	460c      	mov	r4, r1
 80032b6:	4a34      	ldr	r2, [pc, #208]	; (8003388 <TM_GPS_INT_CheckTerm+0x360>)
 80032b8:	e9c2 3400 	strd	r3, r4, [r2]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	3301      	adds	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	4a29      	ldr	r2, [pc, #164]	; (800336c <TM_GPS_INT_CheckTerm+0x344>)
 80032c6:	4413      	add	r3, r2
 80032c8:	f107 0208 	add.w	r2, r7, #8
 80032cc:	4611      	mov	r1, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fda1 	bl	8003e16 <TM_GPS_INT_Atoi>
 80032d4:	4603      	mov	r3, r0
 80032d6:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd f91a 	bl	8000514 <__aeabi_ui2d>
 80032e0:	4604      	mov	r4, r0
 80032e2:	460d      	mov	r5, r1
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	4619      	mov	r1, r3
 80032e8:	200a      	movs	r0, #10
 80032ea:	f000 fdc1 	bl	8003e70 <TM_GPS_INT_Pow>
 80032ee:	4603      	mov	r3, r0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fd f90f 	bl	8000514 <__aeabi_ui2d>
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	4b25      	ldr	r3, [pc, #148]	; (8003390 <TM_GPS_INT_CheckTerm+0x368>)
 80032fc:	f7fd f984 	bl	8000608 <__aeabi_dmul>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4620      	mov	r0, r4
 8003306:	4629      	mov	r1, r5
 8003308:	f7fd faa8 	bl	800085c <__aeabi_ddiv>
 800330c:	4603      	mov	r3, r0
 800330e:	460c      	mov	r4, r1
 8003310:	4618      	mov	r0, r3
 8003312:	4621      	mov	r1, r4
 8003314:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <TM_GPS_INT_CheckTerm+0x360>)
 8003316:	e9d3 3400 	ldrd	r3, r4, [r3]
 800331a:	461a      	mov	r2, r3
 800331c:	4623      	mov	r3, r4
 800331e:	f7fc ffbd 	bl	800029c <__adddf3>
 8003322:	4603      	mov	r3, r0
 8003324:	460c      	mov	r4, r1
 8003326:	4a18      	ldr	r2, [pc, #96]	; (8003388 <TM_GPS_INT_CheckTerm+0x360>)
 8003328:	e9c2 3400 	strd	r3, r4, [r2]
			TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE);
 800332c:	4b19      	ldr	r3, [pc, #100]	; (8003394 <TM_GPS_INT_CheckTerm+0x36c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	4a17      	ldr	r2, [pc, #92]	; (8003394 <TM_GPS_INT_CheckTerm+0x36c>)
 8003336:	6013      	str	r3, [r2, #0]
			break;
 8003338:	e3f1      	b.n	8003b1e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_NS: /* GPGGA */
			if (GPS_Term[0] == 'S') {
 800333a:	4b0c      	ldr	r3, [pc, #48]	; (800336c <TM_GPS_INT_CheckTerm+0x344>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b53      	cmp	r3, #83	; 0x53
 8003340:	d108      	bne.n	8003354 <TM_GPS_INT_CheckTerm+0x32c>
				TM_GPS_INT_Data.Latitude = -TM_GPS_INT_Data.Latitude;	/* South has negative coordinate */
 8003342:	4b11      	ldr	r3, [pc, #68]	; (8003388 <TM_GPS_INT_CheckTerm+0x360>)
 8003344:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003348:	4619      	mov	r1, r3
 800334a:	f084 4200 	eor.w	r2, r4, #2147483648	; 0x80000000
 800334e:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <TM_GPS_INT_CheckTerm+0x360>)
 8003350:	e9c3 1200 	strd	r1, r2, [r3]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_NS);
 8003354:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <TM_GPS_INT_CheckTerm+0x36c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800335c:	4a0d      	ldr	r2, [pc, #52]	; (8003394 <TM_GPS_INT_CheckTerm+0x36c>)
 800335e:	6013      	str	r3, [r2, #0]
			break;
 8003360:	e3dd      	b.n	8003b1e <TM_GPS_INT_CheckTerm+0xaf6>
 8003362:	bf00      	nop
 8003364:	20000937 	.word	0x20000937
 8003368:	0802cdf8 	.word	0x0802cdf8
 800336c:	20000928 	.word	0x20000928
 8003370:	20000000 	.word	0x20000000
 8003374:	0802ce00 	.word	0x0802ce00
 8003378:	0802ce08 	.word	0x0802ce08
 800337c:	0802ce10 	.word	0x0802ce10
 8003380:	20000a74 	.word	0x20000a74
 8003384:	51eb851f 	.word	0x51eb851f
 8003388:	20000948 	.word	0x20000948
 800338c:	42700000 	.word	0x42700000
 8003390:	404e0000 	.word	0x404e0000
 8003394:	2000093c 	.word	0x2000093c
		case GPS_POS_LONGITUDE: /* GPGGA */
			/* Convert longitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003398:	f107 0308 	add.w	r3, r7, #8
 800339c:	4619      	mov	r1, r3
 800339e:	48ab      	ldr	r0, [pc, #684]	; (800364c <TM_GPS_INT_CheckTerm+0x624>)
 80033a0:	f000 fd39 	bl	8003e16 <TM_GPS_INT_Atoi>
 80033a4:	4603      	mov	r3, r0
 80033a6:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude = temp / 100; /* Degrees */
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4aa9      	ldr	r2, [pc, #676]	; (8003650 <TM_GPS_INT_CheckTerm+0x628>)
 80033ac:	fba2 2303 	umull	r2, r3, r2, r3
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd f8ae 	bl	8000514 <__aeabi_ui2d>
 80033b8:	4603      	mov	r3, r0
 80033ba:	460c      	mov	r4, r1
 80033bc:	4aa5      	ldr	r2, [pc, #660]	; (8003654 <TM_GPS_INT_CheckTerm+0x62c>)
 80033be:	e9c2 3402 	strd	r3, r4, [r2, #8]
			TM_GPS_INT_Data.Longitude += (float)(temp % 100) / (float)60;
 80033c2:	4ba4      	ldr	r3, [pc, #656]	; (8003654 <TM_GPS_INT_CheckTerm+0x62c>)
 80033c4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	4ba1      	ldr	r3, [pc, #644]	; (8003650 <TM_GPS_INT_CheckTerm+0x628>)
 80033cc:	fba3 1302 	umull	r1, r3, r3, r2
 80033d0:	095b      	lsrs	r3, r3, #5
 80033d2:	2164      	movs	r1, #100	; 0x64
 80033d4:	fb01 f303 	mul.w	r3, r1, r3
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e2:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8003658 <TM_GPS_INT_CheckTerm+0x630>
 80033e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80033ea:	ee16 0a90 	vmov	r0, s13
 80033ee:	f7fd f8b3 	bl	8000558 <__aeabi_f2d>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4620      	mov	r0, r4
 80033f8:	4629      	mov	r1, r5
 80033fa:	f7fc ff4f 	bl	800029c <__adddf3>
 80033fe:	4603      	mov	r3, r0
 8003400:	460c      	mov	r4, r1
 8003402:	4a94      	ldr	r2, [pc, #592]	; (8003654 <TM_GPS_INT_CheckTerm+0x62c>)
 8003404:	e9c2 3402 	strd	r3, r4, [r2, #8]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	3301      	adds	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	4a8e      	ldr	r2, [pc, #568]	; (800364c <TM_GPS_INT_CheckTerm+0x624>)
 8003412:	4413      	add	r3, r2
 8003414:	f107 0208 	add.w	r2, r7, #8
 8003418:	4611      	mov	r1, r2
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fcfb 	bl	8003e16 <TM_GPS_INT_Atoi>
 8003420:	4603      	mov	r3, r0
 8003422:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4618      	mov	r0, r3
 8003428:	f7fd f874 	bl	8000514 <__aeabi_ui2d>
 800342c:	4604      	mov	r4, r0
 800342e:	460d      	mov	r5, r1
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	4619      	mov	r1, r3
 8003434:	200a      	movs	r0, #10
 8003436:	f000 fd1b 	bl	8003e70 <TM_GPS_INT_Pow>
 800343a:	4603      	mov	r3, r0
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd f869 	bl	8000514 <__aeabi_ui2d>
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	4b85      	ldr	r3, [pc, #532]	; (800365c <TM_GPS_INT_CheckTerm+0x634>)
 8003448:	f7fd f8de 	bl	8000608 <__aeabi_dmul>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4620      	mov	r0, r4
 8003452:	4629      	mov	r1, r5
 8003454:	f7fd fa02 	bl	800085c <__aeabi_ddiv>
 8003458:	4603      	mov	r3, r0
 800345a:	460c      	mov	r4, r1
 800345c:	4618      	mov	r0, r3
 800345e:	4621      	mov	r1, r4
 8003460:	4b7c      	ldr	r3, [pc, #496]	; (8003654 <TM_GPS_INT_CheckTerm+0x62c>)
 8003462:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003466:	461a      	mov	r2, r3
 8003468:	4623      	mov	r3, r4
 800346a:	f7fc ff17 	bl	800029c <__adddf3>
 800346e:	4603      	mov	r3, r0
 8003470:	460c      	mov	r4, r1
 8003472:	4a78      	ldr	r2, [pc, #480]	; (8003654 <TM_GPS_INT_CheckTerm+0x62c>)
 8003474:	e9c2 3402 	strd	r3, r4, [r2, #8]
			TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE);
 8003478:	4b79      	ldr	r3, [pc, #484]	; (8003660 <TM_GPS_INT_CheckTerm+0x638>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f043 0302 	orr.w	r3, r3, #2
 8003480:	4a77      	ldr	r2, [pc, #476]	; (8003660 <TM_GPS_INT_CheckTerm+0x638>)
 8003482:	6013      	str	r3, [r2, #0]
			break;
 8003484:	e34b      	b.n	8003b1e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_EW: /* GPGGA */
			if (GPS_Term[0] == 'W') {
 8003486:	4a71      	ldr	r2, [pc, #452]	; (800364c <TM_GPS_INT_CheckTerm+0x624>)
 8003488:	7812      	ldrb	r2, [r2, #0]
 800348a:	2a57      	cmp	r2, #87	; 0x57
 800348c:	d108      	bne.n	80034a0 <TM_GPS_INT_CheckTerm+0x478>
				TM_GPS_INT_Data.Longitude = -TM_GPS_INT_Data.Longitude;	/* West has negative coordinate */
 800348e:	4a71      	ldr	r2, [pc, #452]	; (8003654 <TM_GPS_INT_CheckTerm+0x62c>)
 8003490:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 8003494:	460b      	mov	r3, r1
 8003496:	f082 4400 	eor.w	r4, r2, #2147483648	; 0x80000000
 800349a:	4a6e      	ldr	r2, [pc, #440]	; (8003654 <TM_GPS_INT_CheckTerm+0x62c>)
 800349c:	e9c2 3402 	strd	r3, r4, [r2, #8]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_EW);
 80034a0:	4b6f      	ldr	r3, [pc, #444]	; (8003660 <TM_GPS_INT_CheckTerm+0x638>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f043 0320 	orr.w	r3, r3, #32
 80034a8:	4a6d      	ldr	r2, [pc, #436]	; (8003660 <TM_GPS_INT_CheckTerm+0x638>)
 80034aa:	6013      	str	r3, [r2, #0]
			break;
 80034ac:	e337      	b.n	8003b1e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_SATS: /* GPGGA */
			/* Satellites in use */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 80034ae:	f107 0308 	add.w	r3, r7, #8
 80034b2:	4619      	mov	r1, r3
 80034b4:	4865      	ldr	r0, [pc, #404]	; (800364c <TM_GPS_INT_CheckTerm+0x624>)
 80034b6:	f000 fcae 	bl	8003e16 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Satellites = temp;
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4b65      	ldr	r3, [pc, #404]	; (8003654 <TM_GPS_INT_CheckTerm+0x62c>)
 80034c0:	751a      	strb	r2, [r3, #20]
			TM_GPS_INT_SetFlag(GPS_FLAG_SATS);
 80034c2:	4b67      	ldr	r3, [pc, #412]	; (8003660 <TM_GPS_INT_CheckTerm+0x638>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f043 0304 	orr.w	r3, r3, #4
 80034ca:	4a65      	ldr	r2, [pc, #404]	; (8003660 <TM_GPS_INT_CheckTerm+0x638>)
 80034cc:	6013      	str	r3, [r2, #0]
			break;
 80034ce:	e326      	b.n	8003b1e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_FIX: /* GPGGA */
			/* GPS Fix */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 80034d0:	f107 0308 	add.w	r3, r7, #8
 80034d4:	4619      	mov	r1, r3
 80034d6:	485d      	ldr	r0, [pc, #372]	; (800364c <TM_GPS_INT_CheckTerm+0x624>)
 80034d8:	f000 fc9d 	bl	8003e16 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Fix = temp;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	4b5c      	ldr	r3, [pc, #368]	; (8003654 <TM_GPS_INT_CheckTerm+0x62c>)
 80034e2:	755a      	strb	r2, [r3, #21]
			TM_GPS_INT_SetFlag(GPS_FLAG_FIX);
 80034e4:	4b5e      	ldr	r3, [pc, #376]	; (8003660 <TM_GPS_INT_CheckTerm+0x638>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f043 0308 	orr.w	r3, r3, #8
 80034ec:	4a5c      	ldr	r2, [pc, #368]	; (8003660 <TM_GPS_INT_CheckTerm+0x638>)
 80034ee:	6013      	str	r3, [r2, #0]
			break;
 80034f0:	e315      	b.n	8003b1e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_ALTITUDE: /* GPGGA */
			/* Convert altitude above sea */
			if (GPS_Term[0] == '-') {
 80034f2:	4b56      	ldr	r3, [pc, #344]	; (800364c <TM_GPS_INT_CheckTerm+0x624>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b2d      	cmp	r3, #45	; 0x2d
 80034f8:	d156      	bne.n	80035a8 <TM_GPS_INT_CheckTerm+0x580>
				count = TM_GPS_INT_Atoi(&GPS_Term[1], &temp);
 80034fa:	f107 0308 	add.w	r3, r7, #8
 80034fe:	4619      	mov	r1, r3
 8003500:	4858      	ldr	r0, [pc, #352]	; (8003664 <TM_GPS_INT_CheckTerm+0x63c>)
 8003502:	f000 fc88 	bl	8003e16 <TM_GPS_INT_Atoi>
 8003506:	4603      	mov	r3, r0
 8003508:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	ee07 3a90 	vmov	s15, r3
 8003510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003514:	4b4f      	ldr	r3, [pc, #316]	; (8003654 <TM_GPS_INT_CheckTerm+0x62c>)
 8003516:	edc3 7a04 	vstr	s15, [r3, #16]
				
				count++;
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	3301      	adds	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	3301      	adds	r3, #1
 8003524:	73fb      	strb	r3, [r7, #15]
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	4a48      	ldr	r2, [pc, #288]	; (800364c <TM_GPS_INT_CheckTerm+0x624>)
 800352a:	4413      	add	r3, r2
 800352c:	f107 0208 	add.w	r2, r7, #8
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f000 fc6f 	bl	8003e16 <TM_GPS_INT_Atoi>
 8003538:	4603      	mov	r3, r0
 800353a:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fc ffe8 	bl	8000514 <__aeabi_ui2d>
 8003544:	4604      	mov	r4, r0
 8003546:	460d      	mov	r5, r1
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	4619      	mov	r1, r3
 800354c:	200a      	movs	r0, #10
 800354e:	f000 fc8f 	bl	8003e70 <TM_GPS_INT_Pow>
 8003552:	4603      	mov	r3, r0
 8003554:	4618      	mov	r0, r3
 8003556:	f7fc ffdd 	bl	8000514 <__aeabi_ui2d>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4620      	mov	r0, r4
 8003560:	4629      	mov	r1, r5
 8003562:	f7fd f97b 	bl	800085c <__aeabi_ddiv>
 8003566:	4603      	mov	r3, r0
 8003568:	460c      	mov	r4, r1
 800356a:	4625      	mov	r5, r4
 800356c:	461c      	mov	r4, r3
 800356e:	4b39      	ldr	r3, [pc, #228]	; (8003654 <TM_GPS_INT_CheckTerm+0x62c>)
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fc fff0 	bl	8000558 <__aeabi_f2d>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4620      	mov	r0, r4
 800357e:	4629      	mov	r1, r5
 8003580:	f7fc fe8c 	bl	800029c <__adddf3>
 8003584:	4603      	mov	r3, r0
 8003586:	460c      	mov	r4, r1
 8003588:	4618      	mov	r0, r3
 800358a:	4621      	mov	r1, r4
 800358c:	f7fd fb34 	bl	8000bf8 <__aeabi_d2f>
 8003590:	4602      	mov	r2, r0
 8003592:	4b30      	ldr	r3, [pc, #192]	; (8003654 <TM_GPS_INT_CheckTerm+0x62c>)
 8003594:	611a      	str	r2, [r3, #16]
				
				TM_GPS_INT_Data.Altitude = -TM_GPS_INT_Data.Altitude;
 8003596:	4b2f      	ldr	r3, [pc, #188]	; (8003654 <TM_GPS_INT_CheckTerm+0x62c>)
 8003598:	edd3 7a04 	vldr	s15, [r3, #16]
 800359c:	eef1 7a67 	vneg.f32	s15, s15
 80035a0:	4b2c      	ldr	r3, [pc, #176]	; (8003654 <TM_GPS_INT_CheckTerm+0x62c>)
 80035a2:	edc3 7a04 	vstr	s15, [r3, #16]
 80035a6:	e04a      	b.n	800363e <TM_GPS_INT_CheckTerm+0x616>
			} else {
				count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80035a8:	f107 0308 	add.w	r3, r7, #8
 80035ac:	4619      	mov	r1, r3
 80035ae:	4827      	ldr	r0, [pc, #156]	; (800364c <TM_GPS_INT_CheckTerm+0x624>)
 80035b0:	f000 fc31 	bl	8003e16 <TM_GPS_INT_Atoi>
 80035b4:	4603      	mov	r3, r0
 80035b6:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	ee07 3a90 	vmov	s15, r3
 80035be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035c2:	4b24      	ldr	r3, [pc, #144]	; (8003654 <TM_GPS_INT_CheckTerm+0x62c>)
 80035c4:	edc3 7a04 	vstr	s15, [r3, #16]
		
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	3301      	adds	r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	4a1e      	ldr	r2, [pc, #120]	; (800364c <TM_GPS_INT_CheckTerm+0x624>)
 80035d2:	4413      	add	r3, r2
 80035d4:	f107 0208 	add.w	r2, r7, #8
 80035d8:	4611      	mov	r1, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fc1b 	bl	8003e16 <TM_GPS_INT_Atoi>
 80035e0:	4603      	mov	r3, r0
 80035e2:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fc ff94 	bl	8000514 <__aeabi_ui2d>
 80035ec:	4604      	mov	r4, r0
 80035ee:	460d      	mov	r5, r1
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	4619      	mov	r1, r3
 80035f4:	200a      	movs	r0, #10
 80035f6:	f000 fc3b 	bl	8003e70 <TM_GPS_INT_Pow>
 80035fa:	4603      	mov	r3, r0
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fc ff89 	bl	8000514 <__aeabi_ui2d>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4620      	mov	r0, r4
 8003608:	4629      	mov	r1, r5
 800360a:	f7fd f927 	bl	800085c <__aeabi_ddiv>
 800360e:	4603      	mov	r3, r0
 8003610:	460c      	mov	r4, r1
 8003612:	4625      	mov	r5, r4
 8003614:	461c      	mov	r4, r3
 8003616:	4b0f      	ldr	r3, [pc, #60]	; (8003654 <TM_GPS_INT_CheckTerm+0x62c>)
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fc ff9c 	bl	8000558 <__aeabi_f2d>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4620      	mov	r0, r4
 8003626:	4629      	mov	r1, r5
 8003628:	f7fc fe38 	bl	800029c <__adddf3>
 800362c:	4603      	mov	r3, r0
 800362e:	460c      	mov	r4, r1
 8003630:	4618      	mov	r0, r3
 8003632:	4621      	mov	r1, r4
 8003634:	f7fd fae0 	bl	8000bf8 <__aeabi_d2f>
 8003638:	4602      	mov	r2, r0
 800363a:	4b06      	ldr	r3, [pc, #24]	; (8003654 <TM_GPS_INT_CheckTerm+0x62c>)
 800363c:	611a      	str	r2, [r3, #16]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE);
 800363e:	4b08      	ldr	r3, [pc, #32]	; (8003660 <TM_GPS_INT_CheckTerm+0x638>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f043 0310 	orr.w	r3, r3, #16
 8003646:	4a06      	ldr	r2, [pc, #24]	; (8003660 <TM_GPS_INT_CheckTerm+0x638>)
 8003648:	6013      	str	r3, [r2, #0]
			break;
 800364a:	e268      	b.n	8003b1e <TM_GPS_INT_CheckTerm+0xaf6>
 800364c:	20000928 	.word	0x20000928
 8003650:	51eb851f 	.word	0x51eb851f
 8003654:	20000948 	.word	0x20000948
 8003658:	42700000 	.word	0x42700000
 800365c:	404e0000 	.word	0x404e0000
 8003660:	2000093c 	.word	0x2000093c
 8003664:	20000929 	.word	0x20000929
		case GPS_POS_TIME: /* GPGGA */
			/* Set time */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003668:	f107 0308 	add.w	r3, r7, #8
 800366c:	4619      	mov	r1, r3
 800366e:	48c2      	ldr	r0, [pc, #776]	; (8003978 <TM_GPS_INT_CheckTerm+0x950>)
 8003670:	f000 fbd1 	bl	8003e16 <TM_GPS_INT_Atoi>
 8003674:	4603      	mov	r3, r0
 8003676:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Time.Seconds = temp % 100;
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	4bc0      	ldr	r3, [pc, #768]	; (800397c <TM_GPS_INT_CheckTerm+0x954>)
 800367c:	fba3 1302 	umull	r1, r3, r3, r2
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	2164      	movs	r1, #100	; 0x64
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	b2da      	uxtb	r2, r3
 800368c:	4bbc      	ldr	r3, [pc, #752]	; (8003980 <TM_GPS_INT_CheckTerm+0x958>)
 800368e:	761a      	strb	r2, [r3, #24]
			TM_GPS_INT_Data.Time.Minutes = (int)(temp * (float) 0.01) % 100;
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369a:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8003984 <TM_GPS_INT_CheckTerm+0x95c>
 800369e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036a6:	ee17 2a90 	vmov	r2, s15
 80036aa:	4bb4      	ldr	r3, [pc, #720]	; (800397c <TM_GPS_INT_CheckTerm+0x954>)
 80036ac:	fb83 1302 	smull	r1, r3, r3, r2
 80036b0:	1159      	asrs	r1, r3, #5
 80036b2:	17d3      	asrs	r3, r2, #31
 80036b4:	1acb      	subs	r3, r1, r3
 80036b6:	2164      	movs	r1, #100	; 0x64
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	4baf      	ldr	r3, [pc, #700]	; (8003980 <TM_GPS_INT_CheckTerm+0x958>)
 80036c2:	75da      	strb	r2, [r3, #23]
			TM_GPS_INT_Data.Time.Hours = (int)(temp * (float)0.0001) % 100;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	ee07 3a90 	vmov	s15, r3
 80036ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ce:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8003988 <TM_GPS_INT_CheckTerm+0x960>
 80036d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036da:	ee17 2a90 	vmov	r2, s15
 80036de:	4ba7      	ldr	r3, [pc, #668]	; (800397c <TM_GPS_INT_CheckTerm+0x954>)
 80036e0:	fb83 1302 	smull	r1, r3, r3, r2
 80036e4:	1159      	asrs	r1, r3, #5
 80036e6:	17d3      	asrs	r3, r2, #31
 80036e8:	1acb      	subs	r3, r1, r3
 80036ea:	2164      	movs	r1, #100	; 0x64
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	4ba2      	ldr	r3, [pc, #648]	; (8003980 <TM_GPS_INT_CheckTerm+0x958>)
 80036f6:	759a      	strb	r2, [r3, #22]
			/* Hundredths */
			TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	3301      	adds	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	4a9d      	ldr	r2, [pc, #628]	; (8003978 <TM_GPS_INT_CheckTerm+0x950>)
 8003702:	4413      	add	r3, r2
 8003704:	f107 0208 	add.w	r2, r7, #8
 8003708:	4611      	mov	r1, r2
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fb83 	bl	8003e16 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Time.Hundredths = temp;
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	b29a      	uxth	r2, r3
 8003714:	4b9a      	ldr	r3, [pc, #616]	; (8003980 <TM_GPS_INT_CheckTerm+0x958>)
 8003716:	835a      	strh	r2, [r3, #26]
			TM_GPS_INT_SetFlag(GPS_FLAG_TIME);
 8003718:	4b9c      	ldr	r3, [pc, #624]	; (800398c <TM_GPS_INT_CheckTerm+0x964>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003720:	4a9a      	ldr	r2, [pc, #616]	; (800398c <TM_GPS_INT_CheckTerm+0x964>)
 8003722:	6013      	str	r3, [r2, #0]
			break;
 8003724:	e1fb      	b.n	8003b1e <TM_GPS_INT_CheckTerm+0xaf6>
#endif
#ifndef GPS_DISABLE_GPRMC
		case GPS_POS_SPEED:	/* GPRMC */	
			/* Convert speed */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003726:	f107 0308 	add.w	r3, r7, #8
 800372a:	4619      	mov	r1, r3
 800372c:	4892      	ldr	r0, [pc, #584]	; (8003978 <TM_GPS_INT_CheckTerm+0x950>)
 800372e:	f000 fb72 	bl	8003e16 <TM_GPS_INT_Atoi>
 8003732:	4603      	mov	r3, r0
 8003734:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed = (float)temp;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	ee07 3a90 	vmov	s15, r3
 800373c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003740:	4b8f      	ldr	r3, [pc, #572]	; (8003980 <TM_GPS_INT_CheckTerm+0x958>)
 8003742:	edc3 7a08 	vstr	s15, [r3, #32]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	3301      	adds	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	4a8a      	ldr	r2, [pc, #552]	; (8003978 <TM_GPS_INT_CheckTerm+0x950>)
 8003750:	4413      	add	r3, r2
 8003752:	f107 0208 	add.w	r2, r7, #8
 8003756:	4611      	mov	r1, r2
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fb5c 	bl	8003e16 <TM_GPS_INT_Atoi>
 800375e:	4603      	mov	r3, r0
 8003760:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0));
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	ee07 3a90 	vmov	s15, r3
 8003768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376c:	ee17 0a90 	vmov	r0, s15
 8003770:	f7fc fef2 	bl	8000558 <__aeabi_f2d>
 8003774:	4604      	mov	r4, r0
 8003776:	460d      	mov	r5, r1
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	4619      	mov	r1, r3
 800377c:	200a      	movs	r0, #10
 800377e:	f000 fb77 	bl	8003e70 <TM_GPS_INT_Pow>
 8003782:	4603      	mov	r3, r0
 8003784:	4618      	mov	r0, r3
 8003786:	f7fc fec5 	bl	8000514 <__aeabi_ui2d>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4620      	mov	r0, r4
 8003790:	4629      	mov	r1, r5
 8003792:	f7fd f863 	bl	800085c <__aeabi_ddiv>
 8003796:	4603      	mov	r3, r0
 8003798:	460c      	mov	r4, r1
 800379a:	4618      	mov	r0, r3
 800379c:	4621      	mov	r1, r4
 800379e:	f7fd fa2b 	bl	8000bf8 <__aeabi_d2f>
 80037a2:	ee07 0a10 	vmov	s14, r0
 80037a6:	4b76      	ldr	r3, [pc, #472]	; (8003980 <TM_GPS_INT_CheckTerm+0x958>)
 80037a8:	edd3 7a08 	vldr	s15, [r3, #32]
 80037ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b0:	4b73      	ldr	r3, [pc, #460]	; (8003980 <TM_GPS_INT_CheckTerm+0x958>)
 80037b2:	edc3 7a08 	vstr	s15, [r3, #32]
		
			/* Set flag */
			TM_GPS_INT_SetFlag(GPS_FLAG_SPEED);
 80037b6:	4b75      	ldr	r3, [pc, #468]	; (800398c <TM_GPS_INT_CheckTerm+0x964>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037be:	4a73      	ldr	r2, [pc, #460]	; (800398c <TM_GPS_INT_CheckTerm+0x964>)
 80037c0:	6013      	str	r3, [r2, #0]
			break;
 80037c2:	e1ac      	b.n	8003b1e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_DATE: /* GPRMC */	
			/* Set date */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 80037c4:	f107 0308 	add.w	r3, r7, #8
 80037c8:	4619      	mov	r1, r3
 80037ca:	486b      	ldr	r0, [pc, #428]	; (8003978 <TM_GPS_INT_CheckTerm+0x950>)
 80037cc:	f000 fb23 	bl	8003e16 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Date.Year = temp % 100;
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	4b6a      	ldr	r3, [pc, #424]	; (800397c <TM_GPS_INT_CheckTerm+0x954>)
 80037d4:	fba3 1302 	umull	r1, r3, r3, r2
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	2164      	movs	r1, #100	; 0x64
 80037dc:	fb01 f303 	mul.w	r3, r1, r3
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	4b66      	ldr	r3, [pc, #408]	; (8003980 <TM_GPS_INT_CheckTerm+0x958>)
 80037e6:	779a      	strb	r2, [r3, #30]
			TM_GPS_INT_Data.Date.Month = (int)(temp * 0.01f) % 100;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	ee07 3a90 	vmov	s15, r3
 80037ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f2:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8003984 <TM_GPS_INT_CheckTerm+0x95c>
 80037f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037fe:	ee17 2a90 	vmov	r2, s15
 8003802:	4b5e      	ldr	r3, [pc, #376]	; (800397c <TM_GPS_INT_CheckTerm+0x954>)
 8003804:	fb83 1302 	smull	r1, r3, r3, r2
 8003808:	1159      	asrs	r1, r3, #5
 800380a:	17d3      	asrs	r3, r2, #31
 800380c:	1acb      	subs	r3, r1, r3
 800380e:	2164      	movs	r1, #100	; 0x64
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	b2da      	uxtb	r2, r3
 8003818:	4b59      	ldr	r3, [pc, #356]	; (8003980 <TM_GPS_INT_CheckTerm+0x958>)
 800381a:	775a      	strb	r2, [r3, #29]
			TM_GPS_INT_Data.Date.Date = (int)(temp * 0.0001f) % 100;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003826:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003988 <TM_GPS_INT_CheckTerm+0x960>
 800382a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800382e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003832:	ee17 2a90 	vmov	r2, s15
 8003836:	4b51      	ldr	r3, [pc, #324]	; (800397c <TM_GPS_INT_CheckTerm+0x954>)
 8003838:	fb83 1302 	smull	r1, r3, r3, r2
 800383c:	1159      	asrs	r1, r3, #5
 800383e:	17d3      	asrs	r3, r2, #31
 8003840:	1acb      	subs	r3, r1, r3
 8003842:	2164      	movs	r1, #100	; 0x64
 8003844:	fb01 f303 	mul.w	r3, r1, r3
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	b2da      	uxtb	r2, r3
 800384c:	4b4c      	ldr	r3, [pc, #304]	; (8003980 <TM_GPS_INT_CheckTerm+0x958>)
 800384e:	771a      	strb	r2, [r3, #28]
			TM_GPS_INT_SetFlag(GPS_FLAG_DATE);
 8003850:	4b4e      	ldr	r3, [pc, #312]	; (800398c <TM_GPS_INT_CheckTerm+0x964>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003858:	4a4c      	ldr	r2, [pc, #304]	; (800398c <TM_GPS_INT_CheckTerm+0x964>)
 800385a:	6013      	str	r3, [r2, #0]
			break;
 800385c:	e15f      	b.n	8003b1e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_VALIDITY: /* GPRMC */	
			/* GPS valid status */
			TM_GPS_INT_Data.Validity = GPS_Term[0] == 'A';
 800385e:	4b46      	ldr	r3, [pc, #280]	; (8003978 <TM_GPS_INT_CheckTerm+0x950>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b41      	cmp	r3, #65	; 0x41
 8003864:	bf0c      	ite	eq
 8003866:	2301      	moveq	r3, #1
 8003868:	2300      	movne	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	461a      	mov	r2, r3
 800386e:	4b44      	ldr	r3, [pc, #272]	; (8003980 <TM_GPS_INT_CheckTerm+0x958>)
 8003870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY);
 8003874:	4b45      	ldr	r3, [pc, #276]	; (800398c <TM_GPS_INT_CheckTerm+0x964>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800387c:	4a43      	ldr	r2, [pc, #268]	; (800398c <TM_GPS_INT_CheckTerm+0x964>)
 800387e:	6013      	str	r3, [r2, #0]
			break;
 8003880:	e14d      	b.n	8003b1e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_DIRECTION: /* GPRMC */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003882:	f107 0308 	add.w	r3, r7, #8
 8003886:	4619      	mov	r1, r3
 8003888:	483b      	ldr	r0, [pc, #236]	; (8003978 <TM_GPS_INT_CheckTerm+0x950>)
 800388a:	f000 fac4 	bl	8003e16 <TM_GPS_INT_Atoi>
 800388e:	4603      	mov	r3, r0
 8003890:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction = (float)temp;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	ee07 3a90 	vmov	s15, r3
 8003898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389c:	4b38      	ldr	r3, [pc, #224]	; (8003980 <TM_GPS_INT_CheckTerm+0x958>)
 800389e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	3301      	adds	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	4a33      	ldr	r2, [pc, #204]	; (8003978 <TM_GPS_INT_CheckTerm+0x950>)
 80038ac:	4413      	add	r3, r2
 80038ae:	f107 0208 	add.w	r2, r7, #8
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 faae 	bl	8003e16 <TM_GPS_INT_Atoi>
 80038ba:	4603      	mov	r3, r0
 80038bc:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	ee07 3a90 	vmov	s15, r3
 80038c4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	4619      	mov	r1, r3
 80038cc:	200a      	movs	r0, #10
 80038ce:	f000 facf 	bl	8003e70 <TM_GPS_INT_Pow>
 80038d2:	ee07 0a90 	vmov	s15, r0
 80038d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038da:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80038de:	4b28      	ldr	r3, [pc, #160]	; (8003980 <TM_GPS_INT_CheckTerm+0x958>)
 80038e0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80038e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038e8:	4b25      	ldr	r3, [pc, #148]	; (8003980 <TM_GPS_INT_CheckTerm+0x958>)
 80038ea:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION);
 80038ee:	4b27      	ldr	r3, [pc, #156]	; (800398c <TM_GPS_INT_CheckTerm+0x964>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038f6:	4a25      	ldr	r2, [pc, #148]	; (800398c <TM_GPS_INT_CheckTerm+0x964>)
 80038f8:	6013      	str	r3, [r2, #0]
			break;
 80038fa:	e110      	b.n	8003b1e <TM_GPS_INT_CheckTerm+0xaf6>
#endif
#ifndef GPS_DISABLE_GPGSA
		case GPS_POS_HDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80038fc:	f107 0308 	add.w	r3, r7, #8
 8003900:	4619      	mov	r1, r3
 8003902:	481d      	ldr	r0, [pc, #116]	; (8003978 <TM_GPS_INT_CheckTerm+0x950>)
 8003904:	f000 fa87 	bl	8003e16 <TM_GPS_INT_Atoi>
 8003908:	4603      	mov	r3, r0
 800390a:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP = (float)temp;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003916:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <TM_GPS_INT_CheckTerm+0x958>)
 8003918:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	3301      	adds	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	4a14      	ldr	r2, [pc, #80]	; (8003978 <TM_GPS_INT_CheckTerm+0x950>)
 8003926:	4413      	add	r3, r2
 8003928:	f107 0208 	add.w	r2, r7, #8
 800392c:	4611      	mov	r1, r2
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fa71 	bl	8003e16 <TM_GPS_INT_Atoi>
 8003934:	4603      	mov	r3, r0
 8003936:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003942:	7bfb      	ldrb	r3, [r7, #15]
 8003944:	4619      	mov	r1, r3
 8003946:	200a      	movs	r0, #10
 8003948:	f000 fa92 	bl	8003e70 <TM_GPS_INT_Pow>
 800394c:	ee07 0a90 	vmov	s15, r0
 8003950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003954:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003958:	4b09      	ldr	r3, [pc, #36]	; (8003980 <TM_GPS_INT_CheckTerm+0x958>)
 800395a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800395e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003962:	4b07      	ldr	r3, [pc, #28]	; (8003980 <TM_GPS_INT_CheckTerm+0x958>)
 8003964:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			TM_GPS_INT_SetFlag(GPS_FLAG_HDOP);
 8003968:	4b08      	ldr	r3, [pc, #32]	; (800398c <TM_GPS_INT_CheckTerm+0x964>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003970:	4a06      	ldr	r2, [pc, #24]	; (800398c <TM_GPS_INT_CheckTerm+0x964>)
 8003972:	6013      	str	r3, [r2, #0]
			break;
 8003974:	e0d3      	b.n	8003b1e <TM_GPS_INT_CheckTerm+0xaf6>
 8003976:	bf00      	nop
 8003978:	20000928 	.word	0x20000928
 800397c:	51eb851f 	.word	0x51eb851f
 8003980:	20000948 	.word	0x20000948
 8003984:	3c23d70a 	.word	0x3c23d70a
 8003988:	38d1b717 	.word	0x38d1b717
 800398c:	2000093c 	.word	0x2000093c
		case GPS_POS_PDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003990:	f107 0308 	add.w	r3, r7, #8
 8003994:	4619      	mov	r1, r3
 8003996:	48af      	ldr	r0, [pc, #700]	; (8003c54 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003998:	f000 fa3d 	bl	8003e16 <TM_GPS_INT_Atoi>
 800399c:	4603      	mov	r3, r0
 800399e:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP = (float)temp;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039aa:	4bab      	ldr	r3, [pc, #684]	; (8003c58 <TM_GPS_INT_CheckTerm+0xc30>)
 80039ac:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	3301      	adds	r3, #1
 80039b4:	73fb      	strb	r3, [r7, #15]
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	4aa6      	ldr	r2, [pc, #664]	; (8003c54 <TM_GPS_INT_CheckTerm+0xc2c>)
 80039ba:	4413      	add	r3, r2
 80039bc:	f107 0208 	add.w	r2, r7, #8
 80039c0:	4611      	mov	r1, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fa27 	bl	8003e16 <TM_GPS_INT_Atoi>
 80039c8:	4603      	mov	r3, r0
 80039ca:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	4619      	mov	r1, r3
 80039da:	200a      	movs	r0, #10
 80039dc:	f000 fa48 	bl	8003e70 <TM_GPS_INT_Pow>
 80039e0:	ee07 0a90 	vmov	s15, r0
 80039e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e8:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80039ec:	4b9a      	ldr	r3, [pc, #616]	; (8003c58 <TM_GPS_INT_CheckTerm+0xc30>)
 80039ee:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80039f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f6:	4b98      	ldr	r3, [pc, #608]	; (8003c58 <TM_GPS_INT_CheckTerm+0xc30>)
 80039f8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			TM_GPS_INT_SetFlag(GPS_FLAG_PDOP);
 80039fc:	4b97      	ldr	r3, [pc, #604]	; (8003c5c <TM_GPS_INT_CheckTerm+0xc34>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a04:	4a95      	ldr	r2, [pc, #596]	; (8003c5c <TM_GPS_INT_CheckTerm+0xc34>)
 8003a06:	6013      	str	r3, [r2, #0]
			break;
 8003a08:	e089      	b.n	8003b1e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_VDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003a0a:	f107 0308 	add.w	r3, r7, #8
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4890      	ldr	r0, [pc, #576]	; (8003c54 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003a12:	f000 fa00 	bl	8003e16 <TM_GPS_INT_Atoi>
 8003a16:	4603      	mov	r3, r0
 8003a18:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP = (float)temp;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	ee07 3a90 	vmov	s15, r3
 8003a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a24:	4b8c      	ldr	r3, [pc, #560]	; (8003c58 <TM_GPS_INT_CheckTerm+0xc30>)
 8003a26:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	4a88      	ldr	r2, [pc, #544]	; (8003c54 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003a34:	4413      	add	r3, r2
 8003a36:	f107 0208 	add.w	r2, r7, #8
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 f9ea 	bl	8003e16 <TM_GPS_INT_Atoi>
 8003a42:	4603      	mov	r3, r0
 8003a44:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	ee07 3a90 	vmov	s15, r3
 8003a4c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	4619      	mov	r1, r3
 8003a54:	200a      	movs	r0, #10
 8003a56:	f000 fa0b 	bl	8003e70 <TM_GPS_INT_Pow>
 8003a5a:	ee07 0a90 	vmov	s15, r0
 8003a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a62:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003a66:	4b7c      	ldr	r3, [pc, #496]	; (8003c58 <TM_GPS_INT_CheckTerm+0xc30>)
 8003a68:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a70:	4b79      	ldr	r3, [pc, #484]	; (8003c58 <TM_GPS_INT_CheckTerm+0xc30>)
 8003a72:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			TM_GPS_INT_SetFlag(GPS_FLAG_VDOP);
 8003a76:	4b79      	ldr	r3, [pc, #484]	; (8003c5c <TM_GPS_INT_CheckTerm+0xc34>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a7e:	4a77      	ldr	r2, [pc, #476]	; (8003c5c <TM_GPS_INT_CheckTerm+0xc34>)
 8003a80:	6013      	str	r3, [r2, #0]
			break;
 8003a82:	e04c      	b.n	8003b1e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_FIXMODE: /* GPGSA */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003a84:	f107 0308 	add.w	r3, r7, #8
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4872      	ldr	r0, [pc, #456]	; (8003c54 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003a8c:	f000 f9c3 	bl	8003e16 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.FixMode = temp;
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	4b70      	ldr	r3, [pc, #448]	; (8003c58 <TM_GPS_INT_CheckTerm+0xc30>)
 8003a96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE);
 8003a9a:	4b70      	ldr	r3, [pc, #448]	; (8003c5c <TM_GPS_INT_CheckTerm+0xc34>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa2:	4a6e      	ldr	r2, [pc, #440]	; (8003c5c <TM_GPS_INT_CheckTerm+0xc34>)
 8003aa4:	6013      	str	r3, [r2, #0]
			break;
 8003aa6:	e03a      	b.n	8003b1e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_SAT9:
		case GPS_POS_SAT10:
		case GPS_POS_SAT11:
		case GPS_POS_SAT12:
			/* Satellite numbers */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003aa8:	f107 0308 	add.w	r3, r7, #8
 8003aac:	4619      	mov	r1, r3
 8003aae:	4869      	ldr	r0, [pc, #420]	; (8003c54 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003ab0:	f000 f9b1 	bl	8003e16 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatelliteIDs[GPS_Term_Number - 3] = temp;
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	4b6a      	ldr	r3, [pc, #424]	; (8003c60 <TM_GPS_INT_CheckTerm+0xc38>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	3b03      	subs	r3, #3
 8003abc:	b2d1      	uxtb	r1, r2
 8003abe:	4a66      	ldr	r2, [pc, #408]	; (8003c58 <TM_GPS_INT_CheckTerm+0xc30>)
 8003ac0:	4413      	add	r3, r2
 8003ac2:	460a      	mov	r2, r1
 8003ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			ids_count++;							/* Increase number of satellites found */
 8003ac8:	4b66      	ldr	r3, [pc, #408]	; (8003c64 <TM_GPS_INT_CheckTerm+0xc3c>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	3301      	adds	r3, #1
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	4b64      	ldr	r3, [pc, #400]	; (8003c64 <TM_GPS_INT_CheckTerm+0xc3c>)
 8003ad2:	701a      	strb	r2, [r3, #0]
		
			if (ids_count == TM_GPS_INT_Data.Satellites) {
 8003ad4:	4b60      	ldr	r3, [pc, #384]	; (8003c58 <TM_GPS_INT_CheckTerm+0xc30>)
 8003ad6:	7d1a      	ldrb	r2, [r3, #20]
 8003ad8:	4b62      	ldr	r3, [pc, #392]	; (8003c64 <TM_GPS_INT_CheckTerm+0xc3c>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d11d      	bne.n	8003b1c <TM_GPS_INT_CheckTerm+0xaf4>
				ids_count = 0;						/* Reset count, we have all statements */
 8003ae0:	4b60      	ldr	r3, [pc, #384]	; (8003c64 <TM_GPS_INT_CheckTerm+0xc3c>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 8003ae6:	4b5d      	ldr	r3, [pc, #372]	; (8003c5c <TM_GPS_INT_CheckTerm+0xc34>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aee:	4a5b      	ldr	r2, [pc, #364]	; (8003c5c <TM_GPS_INT_CheckTerm+0xc34>)
 8003af0:	6013      	str	r3, [r2, #0]
			}
			break;
 8003af2:	e013      	b.n	8003b1c <TM_GPS_INT_CheckTerm+0xaf4>
#endif
#ifndef GPS_DISABLE_GPGSV
		case GPS_POS_SATSINVIEW: /* GPGSV */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003af4:	f107 0308 	add.w	r3, r7, #8
 8003af8:	4619      	mov	r1, r3
 8003afa:	4856      	ldr	r0, [pc, #344]	; (8003c54 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003afc:	f000 f98b 	bl	8003e16 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatellitesInView = temp;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	4b54      	ldr	r3, [pc, #336]	; (8003c58 <TM_GPS_INT_CheckTerm+0xc30>)
 8003b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW);
 8003b0a:	4b54      	ldr	r3, [pc, #336]	; (8003c5c <TM_GPS_INT_CheckTerm+0xc34>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b12:	4a52      	ldr	r2, [pc, #328]	; (8003c5c <TM_GPS_INT_CheckTerm+0xc34>)
 8003b14:	6013      	str	r3, [r2, #0]
			break;
 8003b16:	e002      	b.n	8003b1e <TM_GPS_INT_CheckTerm+0xaf6>
#endif
		default: 
			break;
 8003b18:	bf00      	nop
 8003b1a:	e000      	b.n	8003b1e <TM_GPS_INT_CheckTerm+0xaf6>
			break;
 8003b1c:	bf00      	nop
	}
	
#ifndef GPS_DISABLE_GPGSV
	/* Check for GPGSV statement separatelly */
	if (TM_GPS_Statement == GPS_GPGSV) {	
 8003b1e:	4b52      	ldr	r3, [pc, #328]	; (8003c68 <TM_GPS_INT_CheckTerm+0xc40>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	f040 8090 	bne.w	8003c48 <TM_GPS_INT_CheckTerm+0xc20>
		if (GPS_Term_Number == 1) {
 8003b28:	4b4d      	ldr	r3, [pc, #308]	; (8003c60 <TM_GPS_INT_CheckTerm+0xc38>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d109      	bne.n	8003b44 <TM_GPS_INT_CheckTerm+0xb1c>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save number of GPGSV statements */
 8003b30:	f107 0308 	add.w	r3, r7, #8
 8003b34:	4619      	mov	r1, r3
 8003b36:	4847      	ldr	r0, [pc, #284]	; (8003c54 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003b38:	f000 f96d 	bl	8003e16 <TM_GPS_INT_Atoi>
			GPGSV_StatementsCount = temp;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	4b4a      	ldr	r3, [pc, #296]	; (8003c6c <TM_GPS_INT_CheckTerm+0xc44>)
 8003b42:	701a      	strb	r2, [r3, #0]
		}
		if (GPS_Term_Number == 2) {
 8003b44:	4b46      	ldr	r3, [pc, #280]	; (8003c60 <TM_GPS_INT_CheckTerm+0xc38>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d109      	bne.n	8003b60 <TM_GPS_INT_CheckTerm+0xb38>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save current of GPGSV statement number */
 8003b4c:	f107 0308 	add.w	r3, r7, #8
 8003b50:	4619      	mov	r1, r3
 8003b52:	4840      	ldr	r0, [pc, #256]	; (8003c54 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003b54:	f000 f95f 	bl	8003e16 <TM_GPS_INT_Atoi>
			GPSGV_StatementNumber = temp;
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	4b44      	ldr	r3, [pc, #272]	; (8003c70 <TM_GPS_INT_CheckTerm+0xc48>)
 8003b5e:	701a      	strb	r2, [r3, #0]
		}
		
		/* Data */
		if (GPS_Term_Number >= 4) {
 8003b60:	4b3f      	ldr	r3, [pc, #252]	; (8003c60 <TM_GPS_INT_CheckTerm+0xc38>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b03      	cmp	r3, #3
 8003b66:	d96f      	bls.n	8003c48 <TM_GPS_INT_CheckTerm+0xc20>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Convert to number */
 8003b68:	f107 0308 	add.w	r3, r7, #8
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4839      	ldr	r0, [pc, #228]	; (8003c54 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003b70:	f000 f951 	bl	8003e16 <TM_GPS_INT_Atoi>
			
			GPGSV_Term_Number = GPS_Term_Number - 4;	/* Get proper value */
 8003b74:	4b3a      	ldr	r3, [pc, #232]	; (8003c60 <TM_GPS_INT_CheckTerm+0xc38>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	3b04      	subs	r3, #4
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	4b3d      	ldr	r3, [pc, #244]	; (8003c74 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003b7e:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Mod = GPGSV_Term_Number % 4;
 8003b80:	4b3c      	ldr	r3, [pc, #240]	; (8003c74 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	4b3b      	ldr	r3, [pc, #236]	; (8003c78 <TM_GPS_INT_CheckTerm+0xc50>)
 8003b8c:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Number = (GPSGV_StatementNumber - 1) * 4 + (GPGSV_Term_Number / 4);
 8003b8e:	4b38      	ldr	r3, [pc, #224]	; (8003c70 <TM_GPS_INT_CheckTerm+0xc48>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	333f      	adds	r3, #63	; 0x3f
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	4b36      	ldr	r3, [pc, #216]	; (8003c74 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	4b33      	ldr	r3, [pc, #204]	; (8003c74 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003ba8:	701a      	strb	r2, [r3, #0]
			
			if (GPGSV_Term_Number < GPS_MAX_SATS_IN_VIEW) {	/* If still memory available */
 8003baa:	4b32      	ldr	r3, [pc, #200]	; (8003c74 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b17      	cmp	r3, #23
 8003bb0:	d84a      	bhi.n	8003c48 <TM_GPS_INT_CheckTerm+0xc20>
				/* Check offset from 4 */
				if (GPGSV_Term_Mod == 0) {
 8003bb2:	4b31      	ldr	r3, [pc, #196]	; (8003c78 <TM_GPS_INT_CheckTerm+0xc50>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10e      	bne.n	8003bd8 <TM_GPS_INT_CheckTerm+0xbb0>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].ID = temp;
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	4b2d      	ldr	r3, [pc, #180]	; (8003c74 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	b2d0      	uxtb	r0, r2
 8003bc4:	4a24      	ldr	r2, [pc, #144]	; (8003c58 <TM_GPS_INT_CheckTerm+0xc30>)
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	440b      	add	r3, r1
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	4413      	add	r3, r2
 8003bd0:	3346      	adds	r3, #70	; 0x46
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	e037      	b.n	8003c48 <TM_GPS_INT_CheckTerm+0xc20>
				} else if (GPGSV_Term_Mod == 1) {
 8003bd8:	4b27      	ldr	r3, [pc, #156]	; (8003c78 <TM_GPS_INT_CheckTerm+0xc50>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d10e      	bne.n	8003bfe <TM_GPS_INT_CheckTerm+0xbd6>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Elevation = temp;
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	4619      	mov	r1, r3
 8003be8:	b2d0      	uxtb	r0, r2
 8003bea:	4a1b      	ldr	r2, [pc, #108]	; (8003c58 <TM_GPS_INT_CheckTerm+0xc30>)
 8003bec:	460b      	mov	r3, r1
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	440b      	add	r3, r1
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3347      	adds	r3, #71	; 0x47
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	701a      	strb	r2, [r3, #0]
 8003bfc:	e024      	b.n	8003c48 <TM_GPS_INT_CheckTerm+0xc20>
				} else if (GPGSV_Term_Mod == 2) {
 8003bfe:	4b1e      	ldr	r3, [pc, #120]	; (8003c78 <TM_GPS_INT_CheckTerm+0xc50>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d10e      	bne.n	8003c24 <TM_GPS_INT_CheckTerm+0xbfc>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Azimuth = temp;
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	4b1a      	ldr	r3, [pc, #104]	; (8003c74 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	b290      	uxth	r0, r2
 8003c10:	4a11      	ldr	r2, [pc, #68]	; (8003c58 <TM_GPS_INT_CheckTerm+0xc30>)
 8003c12:	460b      	mov	r3, r1
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	440b      	add	r3, r1
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3348      	adds	r3, #72	; 0x48
 8003c1e:	4602      	mov	r2, r0
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	e011      	b.n	8003c48 <TM_GPS_INT_CheckTerm+0xc20>
				} else if (GPGSV_Term_Mod == 3) {
 8003c24:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <TM_GPS_INT_CheckTerm+0xc50>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d10d      	bne.n	8003c48 <TM_GPS_INT_CheckTerm+0xc20>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].SNR = temp;
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	4619      	mov	r1, r3
 8003c34:	b2d0      	uxtb	r0, r2
 8003c36:	4a08      	ldr	r2, [pc, #32]	; (8003c58 <TM_GPS_INT_CheckTerm+0xc30>)
 8003c38:	460b      	mov	r3, r1
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	440b      	add	r3, r1
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	4413      	add	r3, r2
 8003c42:	334a      	adds	r3, #74	; 0x4a
 8003c44:	4602      	mov	r2, r0
 8003c46:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	ecbd 8b02 	vpop	{d8}
 8003c50:	bdb0      	pop	{r4, r5, r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000928 	.word	0x20000928
 8003c58:	20000948 	.word	0x20000948
 8003c5c:	2000093c 	.word	0x2000093c
 8003c60:	20000937 	.word	0x20000937
 8003c64:	20000a7f 	.word	0x20000a7f
 8003c68:	20000000 	.word	0x20000000
 8003c6c:	20000a7b 	.word	0x20000a7b
 8003c70:	20000a7c 	.word	0x20000a7c
 8003c74:	20000a7d 	.word	0x20000a7d
 8003c78:	20000a7e 	.word	0x20000a7e

08003c7c <TM_GPS_INT_Return>:

TM_GPS_Result_t TM_GPS_INT_Return(TM_GPS_t* GPS_Data) {
 8003c7c:	b590      	push	{r4, r7, lr}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f939 	bl	8003efc <TM_GPS_INT_FlagsOk>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 808d 	beq.w	8003dac <TM_GPS_INT_Return+0x130>
		TM_GPS_FirstTime = 0;							/* Clear first time */
 8003c92:	4b50      	ldr	r3, [pc, #320]	; (8003dd4 <TM_GPS_INT_Return+0x158>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
		
		/* Set data */
#ifndef GPS_DISABLE_GPGGA
		GPS_Data->Latitude = TM_GPS_INT_Data.Latitude;
 8003c98:	4b4f      	ldr	r3, [pc, #316]	; (8003dd8 <TM_GPS_INT_Return+0x15c>)
 8003c9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	e9c2 3400 	strd	r3, r4, [r2]
		GPS_Data->Longitude = TM_GPS_INT_Data.Longitude;
 8003ca4:	4b4c      	ldr	r3, [pc, #304]	; (8003dd8 <TM_GPS_INT_Return+0x15c>)
 8003ca6:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	e9c2 3402 	strd	r3, r4, [r2, #8]
		GPS_Data->Satellites = TM_GPS_INT_Data.Satellites;
 8003cb0:	4b49      	ldr	r3, [pc, #292]	; (8003dd8 <TM_GPS_INT_Return+0x15c>)
 8003cb2:	7d1a      	ldrb	r2, [r3, #20]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	751a      	strb	r2, [r3, #20]
		GPS_Data->Fix = TM_GPS_INT_Data.Fix;
 8003cb8:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <TM_GPS_INT_Return+0x15c>)
 8003cba:	7d5a      	ldrb	r2, [r3, #21]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	755a      	strb	r2, [r3, #21]
		GPS_Data->Altitude = TM_GPS_INT_Data.Altitude;
 8003cc0:	4b45      	ldr	r3, [pc, #276]	; (8003dd8 <TM_GPS_INT_Return+0x15c>)
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	611a      	str	r2, [r3, #16]
		GPS_Data->Time = TM_GPS_INT_Data.Time;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a43      	ldr	r2, [pc, #268]	; (8003dd8 <TM_GPS_INT_Return+0x15c>)
 8003ccc:	3316      	adds	r3, #22
 8003cce:	3216      	adds	r2, #22
 8003cd0:	6811      	ldr	r1, [r2, #0]
 8003cd2:	6019      	str	r1, [r3, #0]
 8003cd4:	8892      	ldrh	r2, [r2, #4]
 8003cd6:	809a      	strh	r2, [r3, #4]
#endif
#ifndef GPS_DISABLE_GPRMC
		GPS_Data->Speed = TM_GPS_INT_Data.Speed;
 8003cd8:	4b3f      	ldr	r3, [pc, #252]	; (8003dd8 <TM_GPS_INT_Return+0x15c>)
 8003cda:	6a1a      	ldr	r2, [r3, #32]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	621a      	str	r2, [r3, #32]
		GPS_Data->Date = TM_GPS_INT_Data.Date;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a3d      	ldr	r2, [pc, #244]	; (8003dd8 <TM_GPS_INT_Return+0x15c>)
 8003ce4:	331c      	adds	r3, #28
 8003ce6:	321c      	adds	r2, #28
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	4611      	mov	r1, r2
 8003cec:	8019      	strh	r1, [r3, #0]
 8003cee:	3302      	adds	r3, #2
 8003cf0:	0c12      	lsrs	r2, r2, #16
 8003cf2:	701a      	strb	r2, [r3, #0]
		GPS_Data->Validity = TM_GPS_INT_Data.Validity;
 8003cf4:	4b38      	ldr	r3, [pc, #224]	; (8003dd8 <TM_GPS_INT_Return+0x15c>)
 8003cf6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		GPS_Data->Direction = TM_GPS_INT_Data.Direction;
 8003d00:	4b35      	ldr	r3, [pc, #212]	; (8003dd8 <TM_GPS_INT_Return+0x15c>)
 8003d02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#ifndef GPS_DISABLE_GPGSA
		GPS_Data->HDOP = TM_GPS_INT_Data.HDOP;
 8003d08:	4b33      	ldr	r3, [pc, #204]	; (8003dd8 <TM_GPS_INT_Return+0x15c>)
 8003d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	62da      	str	r2, [r3, #44]	; 0x2c
		GPS_Data->VDOP = TM_GPS_INT_Data.VDOP;
 8003d10:	4b31      	ldr	r3, [pc, #196]	; (8003dd8 <TM_GPS_INT_Return+0x15c>)
 8003d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	635a      	str	r2, [r3, #52]	; 0x34
		GPS_Data->PDOP = TM_GPS_INT_Data.PDOP;
 8003d18:	4b2f      	ldr	r3, [pc, #188]	; (8003dd8 <TM_GPS_INT_Return+0x15c>)
 8003d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30
		GPS_Data->FixMode = TM_GPS_INT_Data.FixMode;
 8003d20:	4b2d      	ldr	r3, [pc, #180]	; (8003dd8 <TM_GPS_INT_Return+0x15c>)
 8003d22:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		for (i = 0; i < 12; i++) {
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	73fb      	strb	r3, [r7, #15]
 8003d30:	e00d      	b.n	8003d4e <TM_GPS_INT_Return+0xd2>
			GPS_Data->SatelliteIDs[i] = TM_GPS_INT_Data.SatelliteIDs[i];
 8003d32:	7bfa      	ldrb	r2, [r7, #15]
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	4928      	ldr	r1, [pc, #160]	; (8003dd8 <TM_GPS_INT_Return+0x15c>)
 8003d38:	440a      	add	r2, r1
 8003d3a:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	4413      	add	r3, r2
 8003d42:	460a      	mov	r2, r1
 8003d44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		for (i = 0; i < 12; i++) {
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	73fb      	strb	r3, [r7, #15]
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	2b0b      	cmp	r3, #11
 8003d52:	d9ee      	bls.n	8003d32 <TM_GPS_INT_Return+0xb6>
		}
#endif
#ifndef GPS_DISABLE_GPGSV
		GPS_Data->SatellitesInView = TM_GPS_INT_Data.SatellitesInView;
 8003d54:	4b20      	ldr	r3, [pc, #128]	; (8003dd8 <TM_GPS_INT_Return+0x15c>)
 8003d56:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 8003d60:	2300      	movs	r3, #0
 8003d62:	73fb      	strb	r3, [r7, #15]
 8003d64:	e019      	b.n	8003d9a <TM_GPS_INT_Return+0x11e>
			GPS_Data->SatDesc[i] = TM_GPS_INT_Data.SatDesc[i];
 8003d66:	7bfa      	ldrb	r2, [r7, #15]
 8003d68:	7bf9      	ldrb	r1, [r7, #15]
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	440b      	add	r3, r1
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	4403      	add	r3, r0
 8003d76:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8003d7a:	4917      	ldr	r1, [pc, #92]	; (8003dd8 <TM_GPS_INT_Return+0x15c>)
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	4413      	add	r3, r2
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	440b      	add	r3, r1
 8003d86:	f103 0246 	add.w	r2, r3, #70	; 0x46
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	6811      	ldr	r1, [r2, #0]
 8003d8e:	6019      	str	r1, [r3, #0]
 8003d90:	8892      	ldrh	r2, [r2, #4]
 8003d92:	809a      	strh	r2, [r3, #4]
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	3301      	adds	r3, #1
 8003d98:	73fb      	strb	r3, [r7, #15]
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
 8003d9c:	2b17      	cmp	r3, #23
 8003d9e:	d9e2      	bls.n	8003d66 <TM_GPS_INT_Return+0xea>
		}
#endif
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_NewData);	/* Return new data */
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003da8:	2300      	movs	r3, #0
 8003daa:	e00e      	b.n	8003dca <TM_GPS_INT_Return+0x14e>
	}
	
	if (TM_GPS_FirstTime) {
 8003dac:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <TM_GPS_INT_Return+0x158>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <TM_GPS_INT_Return+0x144>
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_FirstDataWaiting);	/* We are first time */
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e004      	b.n	8003dca <TM_GPS_INT_Return+0x14e>
	}
	TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_OldData);	/* Return old data */
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003dc8:	2301      	movs	r3, #1
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd90      	pop	{r4, r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000a70 	.word	0x20000a70
 8003dd8:	20000948 	.word	0x20000948

08003ddc <TM_GPS_INT_StringStartsWith>:

uint8_t TM_GPS_INT_StringStartsWith(char* string, const char* str) {
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
	while (*str) {
 8003de6:	e00b      	b.n	8003e00 <TM_GPS_INT_StringStartsWith+0x24>
		if (*str++ != *string++) {
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	603a      	str	r2, [r7, #0]
 8003dee:	781a      	ldrb	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	1c59      	adds	r1, r3, #1
 8003df4:	6079      	str	r1, [r7, #4]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d001      	beq.n	8003e00 <TM_GPS_INT_StringStartsWith+0x24>
			return 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	e004      	b.n	8003e0a <TM_GPS_INT_StringStartsWith+0x2e>
	while (*str) {
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1ef      	bne.n	8003de8 <TM_GPS_INT_StringStartsWith+0xc>
		}
	}
	return 1;
 8003e08:	2301      	movs	r3, #1
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <TM_GPS_INT_Atoi>:

uint8_t TM_GPS_INT_Atoi(char* str, uint32_t* val) {
 8003e16:	b480      	push	{r7}
 8003e18:	b085      	sub	sp, #20
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]
	uint8_t count = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	73fb      	strb	r3, [r7, #15]
	*val = 0;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
	while (GPS_IS_DIGIT(*str)) {
 8003e2a:	e012      	b.n	8003e52 <TM_GPS_INT_Atoi+0x3c>
		*val = *val * 10 + GPS_C2N(*str++);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	4619      	mov	r1, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	440b      	add	r3, r1
 8003e44:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	601a      	str	r2, [r3, #0]
		count++;
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	73fb      	strb	r3, [r7, #15]
	while (GPS_IS_DIGIT(*str)) {
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b2f      	cmp	r3, #47	; 0x2f
 8003e58:	d903      	bls.n	8003e62 <TM_GPS_INT_Atoi+0x4c>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b39      	cmp	r3, #57	; 0x39
 8003e60:	d9e4      	bls.n	8003e2c <TM_GPS_INT_Atoi+0x16>
	}
	return count;
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <TM_GPS_INT_Pow>:

uint32_t TM_GPS_INT_Pow(uint8_t x, uint8_t y) {
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	460a      	mov	r2, r1
 8003e7a:	71fb      	strb	r3, [r7, #7]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	71bb      	strb	r3, [r7, #6]
	uint32_t ret = 1;
 8003e80:	2301      	movs	r3, #1
 8003e82:	60fb      	str	r3, [r7, #12]
	while (y--) {
 8003e84:	e004      	b.n	8003e90 <TM_GPS_INT_Pow+0x20>
		ret *= x;
 8003e86:	79fa      	ldrb	r2, [r7, #7]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	60fb      	str	r3, [r7, #12]
	while (y--) {
 8003e90:	79bb      	ldrb	r3, [r7, #6]
 8003e92:	1e5a      	subs	r2, r3, #1
 8003e94:	71ba      	strb	r2, [r7, #6]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f5      	bne.n	8003e86 <TM_GPS_INT_Pow+0x16>
	}
	return ret;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <TM_GPS_INT_Hex2Dec>:

uint8_t TM_GPS_INT_Hex2Dec(char c) {
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9') {
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	2b2f      	cmp	r3, #47	; 0x2f
 8003eb6:	d906      	bls.n	8003ec6 <TM_GPS_INT_Hex2Dec+0x1e>
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	2b39      	cmp	r3, #57	; 0x39
 8003ebc:	d803      	bhi.n	8003ec6 <TM_GPS_INT_Hex2Dec+0x1e>
		return c - '0';									/* 0 - 9 */
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	3b30      	subs	r3, #48	; 0x30
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	e014      	b.n	8003ef0 <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'A' && c <= 'F') {
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	d906      	bls.n	8003eda <TM_GPS_INT_Hex2Dec+0x32>
 8003ecc:	79fb      	ldrb	r3, [r7, #7]
 8003ece:	2b46      	cmp	r3, #70	; 0x46
 8003ed0:	d803      	bhi.n	8003eda <TM_GPS_INT_Hex2Dec+0x32>
		return c - 'A' + 10; 							/* 10 - 15 */
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	3b37      	subs	r3, #55	; 0x37
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	e00a      	b.n	8003ef0 <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'a' && c <= 'f') {
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	2b60      	cmp	r3, #96	; 0x60
 8003ede:	d906      	bls.n	8003eee <TM_GPS_INT_Hex2Dec+0x46>
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	2b66      	cmp	r3, #102	; 0x66
 8003ee4:	d803      	bhi.n	8003eee <TM_GPS_INT_Hex2Dec+0x46>
		return c - 'a' + 10; 							/* 10 - 15 */
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	3b57      	subs	r3, #87	; 0x57
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	e000      	b.n	8003ef0 <TM_GPS_INT_Hex2Dec+0x48>
	}
	return 0;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <TM_GPS_INT_FlagsOk>:

uint8_t TM_GPS_INT_FlagsOk(TM_GPS_t* GPS_Data) {
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
	if (GPS_Flags == GPS_Flags_OK) {					/* Check main flags */
 8003f04:	4b12      	ldr	r3, [pc, #72]	; (8003f50 <TM_GPS_INT_FlagsOk+0x54>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <TM_GPS_INT_FlagsOk+0x58>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d118      	bne.n	8003f42 <TM_GPS_INT_FlagsOk+0x46>
		uint8_t i;
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 8003f10:	2300      	movs	r3, #0
 8003f12:	73fb      	strb	r3, [r7, #15]
 8003f14:	e00d      	b.n	8003f32 <TM_GPS_INT_FlagsOk+0x36>
			if (GPS_Data->CustomStatements[i]->Updated == 0) {	/* If not flag set */
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	333e      	adds	r3, #62	; 0x3e
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	7ddb      	ldrb	r3, [r3, #23]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <TM_GPS_INT_FlagsOk+0x30>
				return 0;								/* Return, flags not OK */
 8003f28:	2300      	movs	r3, #0
 8003f2a:	e00b      	b.n	8003f44 <TM_GPS_INT_FlagsOk+0x48>
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	73fb      	strb	r3, [r7, #15]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003f38:	7bfa      	ldrb	r2, [r7, #15]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d3eb      	bcc.n	8003f16 <TM_GPS_INT_FlagsOk+0x1a>
			}
		}
		return 1;										/* Flags valid */
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <TM_GPS_INT_FlagsOk+0x48>
	}
	return 0;											/* Not valid */
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	2000093c 	.word	0x2000093c
 8003f54:	20000940 	.word	0x20000940

08003f58 <TM_GPS_INT_ClearFlags>:

void TM_GPS_INT_ClearFlags(TM_GPS_t* GPS_Data) {
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	GPS_Flags = 0;						/* Reset main flags */
 8003f60:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <TM_GPS_INT_ClearFlags+0x44>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 8003f66:	2300      	movs	r3, #0
 8003f68:	73fb      	strb	r3, [r7, #15]
 8003f6a:	e00a      	b.n	8003f82 <TM_GPS_INT_ClearFlags+0x2a>
		GPS_Data->CustomStatements[i]->Updated = 0;		/* If not flag set */
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	333e      	adds	r3, #62	; 0x3e
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	75da      	strb	r2, [r3, #23]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	73fb      	strb	r3, [r7, #15]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003f88:	7bfa      	ldrb	r2, [r7, #15]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d3ee      	bcc.n	8003f6c <TM_GPS_INT_ClearFlags+0x14>
	}
}
 8003f8e:	bf00      	nop
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	2000093c 	.word	0x2000093c

08003fa0 <TM_GPS_INT_CheckEmpty>:

void TM_GPS_INT_CheckEmpty(TM_GPS_t* GPS_Data) {
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
	if (GPS_Term_Pos == 1) {
 8003fa8:	4baf      	ldr	r3, [pc, #700]	; (8004268 <TM_GPS_INT_CheckEmpty+0x2c8>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	f040 8151 	bne.w	8004254 <TM_GPS_INT_CheckEmpty+0x2b4>
		switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 8003fb2:	4bae      	ldr	r3, [pc, #696]	; (800426c <TM_GPS_INT_CheckEmpty+0x2cc>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	015b      	lsls	r3, r3, #5
 8003fb8:	4aad      	ldr	r2, [pc, #692]	; (8004270 <TM_GPS_INT_CheckEmpty+0x2d0>)
 8003fba:	7812      	ldrb	r2, [r2, #0]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	2b62      	cmp	r3, #98	; 0x62
 8003fc2:	f200 8149 	bhi.w	8004258 <TM_GPS_INT_CheckEmpty+0x2b8>
 8003fc6:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <TM_GPS_INT_CheckEmpty+0x2c>)
 8003fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fcc:	080041bb 	.word	0x080041bb
 8003fd0:	08004159 	.word	0x08004159
 8003fd4:	08004167 	.word	0x08004167
 8003fd8:	08004175 	.word	0x08004175
 8003fdc:	08004183 	.word	0x08004183
 8003fe0:	0800419f 	.word	0x0800419f
 8003fe4:	08004191 	.word	0x08004191
 8003fe8:	08004259 	.word	0x08004259
 8003fec:	080041ad 	.word	0x080041ad
 8003ff0:	08004259 	.word	0x08004259
 8003ff4:	08004259 	.word	0x08004259
 8003ff8:	08004259 	.word	0x08004259
 8003ffc:	08004259 	.word	0x08004259
 8004000:	08004259 	.word	0x08004259
 8004004:	08004259 	.word	0x08004259
 8004008:	08004259 	.word	0x08004259
 800400c:	08004259 	.word	0x08004259
 8004010:	08004259 	.word	0x08004259
 8004014:	08004259 	.word	0x08004259
 8004018:	08004259 	.word	0x08004259
 800401c:	08004259 	.word	0x08004259
 8004020:	08004259 	.word	0x08004259
 8004024:	08004259 	.word	0x08004259
 8004028:	08004259 	.word	0x08004259
 800402c:	08004259 	.word	0x08004259
 8004030:	08004259 	.word	0x08004259
 8004034:	08004259 	.word	0x08004259
 8004038:	08004259 	.word	0x08004259
 800403c:	08004259 	.word	0x08004259
 8004040:	08004259 	.word	0x08004259
 8004044:	08004259 	.word	0x08004259
 8004048:	08004259 	.word	0x08004259
 800404c:	08004259 	.word	0x08004259
 8004050:	080041e5 	.word	0x080041e5
 8004054:	08004259 	.word	0x08004259
 8004058:	08004259 	.word	0x08004259
 800405c:	08004259 	.word	0x08004259
 8004060:	08004259 	.word	0x08004259
 8004064:	080041c9 	.word	0x080041c9
 8004068:	080041f3 	.word	0x080041f3
 800406c:	080041d7 	.word	0x080041d7
 8004070:	08004259 	.word	0x08004259
 8004074:	08004259 	.word	0x08004259
 8004078:	08004259 	.word	0x08004259
 800407c:	08004259 	.word	0x08004259
 8004080:	08004259 	.word	0x08004259
 8004084:	08004259 	.word	0x08004259
 8004088:	08004259 	.word	0x08004259
 800408c:	08004259 	.word	0x08004259
 8004090:	08004259 	.word	0x08004259
 8004094:	08004259 	.word	0x08004259
 8004098:	08004259 	.word	0x08004259
 800409c:	08004259 	.word	0x08004259
 80040a0:	08004259 	.word	0x08004259
 80040a4:	08004259 	.word	0x08004259
 80040a8:	08004259 	.word	0x08004259
 80040ac:	08004259 	.word	0x08004259
 80040b0:	08004259 	.word	0x08004259
 80040b4:	08004259 	.word	0x08004259
 80040b8:	08004259 	.word	0x08004259
 80040bc:	08004259 	.word	0x08004259
 80040c0:	08004259 	.word	0x08004259
 80040c4:	08004259 	.word	0x08004259
 80040c8:	08004259 	.word	0x08004259
 80040cc:	08004259 	.word	0x08004259
 80040d0:	0800422b 	.word	0x0800422b
 80040d4:	08004239 	.word	0x08004239
 80040d8:	08004239 	.word	0x08004239
 80040dc:	08004239 	.word	0x08004239
 80040e0:	08004239 	.word	0x08004239
 80040e4:	08004239 	.word	0x08004239
 80040e8:	08004239 	.word	0x08004239
 80040ec:	08004239 	.word	0x08004239
 80040f0:	08004239 	.word	0x08004239
 80040f4:	08004239 	.word	0x08004239
 80040f8:	08004239 	.word	0x08004239
 80040fc:	08004239 	.word	0x08004239
 8004100:	08004239 	.word	0x08004239
 8004104:	0800420f 	.word	0x0800420f
 8004108:	08004201 	.word	0x08004201
 800410c:	0800421d 	.word	0x0800421d
 8004110:	08004259 	.word	0x08004259
 8004114:	08004259 	.word	0x08004259
 8004118:	08004259 	.word	0x08004259
 800411c:	08004259 	.word	0x08004259
 8004120:	08004259 	.word	0x08004259
 8004124:	08004259 	.word	0x08004259
 8004128:	08004259 	.word	0x08004259
 800412c:	08004259 	.word	0x08004259
 8004130:	08004259 	.word	0x08004259
 8004134:	08004259 	.word	0x08004259
 8004138:	08004259 	.word	0x08004259
 800413c:	08004259 	.word	0x08004259
 8004140:	08004259 	.word	0x08004259
 8004144:	08004259 	.word	0x08004259
 8004148:	08004259 	.word	0x08004259
 800414c:	08004259 	.word	0x08004259
 8004150:	08004259 	.word	0x08004259
 8004154:	08004247 	.word	0x08004247
#ifndef GPS_DISABLE_GPGGA
			case GPS_POS_LATITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE); break;
 8004158:	4b46      	ldr	r3, [pc, #280]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f043 0301 	orr.w	r3, r3, #1
 8004160:	4a44      	ldr	r2, [pc, #272]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	e079      	b.n	800425a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_NS: 		TM_GPS_INT_SetFlag(GPS_FLAG_NS); break;
 8004166:	4b43      	ldr	r3, [pc, #268]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800416e:	4a41      	ldr	r2, [pc, #260]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	e072      	b.n	800425a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_LONGITUDE: TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE); break;
 8004174:	4b3f      	ldr	r3, [pc, #252]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f043 0302 	orr.w	r3, r3, #2
 800417c:	4a3d      	ldr	r2, [pc, #244]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	e06b      	b.n	800425a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_EW: 		TM_GPS_INT_SetFlag(GPS_FLAG_EW); break;
 8004182:	4b3c      	ldr	r3, [pc, #240]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f043 0320 	orr.w	r3, r3, #32
 800418a:	4a3a      	ldr	r2, [pc, #232]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	e064      	b.n	800425a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SATS:		TM_GPS_INT_SetFlag(GPS_FLAG_SATS); break;
 8004190:	4b38      	ldr	r3, [pc, #224]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f043 0304 	orr.w	r3, r3, #4
 8004198:	4a36      	ldr	r2, [pc, #216]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	e05d      	b.n	800425a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIX: 		TM_GPS_INT_SetFlag(GPS_FLAG_FIX); break;
 800419e:	4b35      	ldr	r3, [pc, #212]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f043 0308 	orr.w	r3, r3, #8
 80041a6:	4a33      	ldr	r2, [pc, #204]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	e056      	b.n	800425a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_ALTITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE); break;
 80041ac:	4b31      	ldr	r3, [pc, #196]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f043 0310 	orr.w	r3, r3, #16
 80041b4:	4a2f      	ldr	r2, [pc, #188]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	e04f      	b.n	800425a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_TIME: 		TM_GPS_INT_SetFlag(GPS_FLAG_TIME); break;
 80041ba:	4b2e      	ldr	r3, [pc, #184]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c2:	4a2c      	ldr	r2, [pc, #176]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	e048      	b.n	800425a <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPRMC
			case GPS_POS_SPEED: 	TM_GPS_INT_SetFlag(GPS_FLAG_SPEED); break;
 80041c8:	4b2a      	ldr	r3, [pc, #168]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d0:	4a28      	ldr	r2, [pc, #160]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	e041      	b.n	800425a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DATE: 		TM_GPS_INT_SetFlag(GPS_FLAG_DATE); break;
 80041d6:	4b27      	ldr	r3, [pc, #156]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041de:	4a25      	ldr	r2, [pc, #148]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	e03a      	b.n	800425a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VALIDITY: 	TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY); break;
 80041e4:	4b23      	ldr	r3, [pc, #140]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041ec:	4a21      	ldr	r2, [pc, #132]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	e033      	b.n	800425a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DIRECTION: TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION); break;
 80041f2:	4b20      	ldr	r3, [pc, #128]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041fa:	4a1e      	ldr	r2, [pc, #120]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	e02c      	b.n	800425a <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSA
			case GPS_POS_HDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_HDOP); break;
 8004200:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004208:	4a1a      	ldr	r2, [pc, #104]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	e025      	b.n	800425a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_PDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_PDOP); break;
 800420e:	4b19      	ldr	r3, [pc, #100]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004216:	4a17      	ldr	r2, [pc, #92]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e01e      	b.n	800425a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_VDOP); break;
 800421c:	4b15      	ldr	r3, [pc, #84]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004224:	4a13      	ldr	r2, [pc, #76]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	e017      	b.n	800425a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIXMODE: 	TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE); break;
 800422a:	4b12      	ldr	r3, [pc, #72]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004232:	4a10      	ldr	r2, [pc, #64]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e010      	b.n	800425a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SAT8:
			case GPS_POS_SAT9:
			case GPS_POS_SAT10:
			case GPS_POS_SAT11:
			case GPS_POS_SAT12:
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 8004238:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004240:	4a0c      	ldr	r2, [pc, #48]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004242:	6013      	str	r3, [r2, #0]
				break;
 8004244:	e009      	b.n	800425a <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSV
			case GPS_POS_SATSINVIEW: TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW); break;
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424e:	4a09      	ldr	r2, [pc, #36]	; (8004274 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	e002      	b.n	800425a <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
			default: 
				break;
		}
	}
 8004254:	bf00      	nop
 8004256:	e000      	b.n	800425a <TM_GPS_INT_CheckEmpty+0x2ba>
				break;
 8004258:	bf00      	nop
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	20000938 	.word	0x20000938
 800426c:	20000000 	.word	0x20000000
 8004270:	20000937 	.word	0x20000937
 8004274:	2000093c 	.word	0x2000093c

08004278 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004282:	edd7 7a01 	vldr	s15, [r7, #4]
 8004286:	eef0 7ae7 	vabs.f32	s15, s15
 800428a:	eeb0 0a67 	vmov.f32	s0, s15
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	ed87 0a01 	vstr	s0, [r7, #4]
 80042a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80042a6:	f020 fe6b 	bl	8024f80 <ceilf>
 80042aa:	eef0 7a40 	vmov.f32	s15, s0
 80042ae:	eeb0 0a67 	vmov.f32	s0, s15
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	ed87 0a01 	vstr	s0, [r7, #4]
 80042c2:	ed97 0a01 	vldr	s0, [r7, #4]
 80042c6:	f020 fedb 	bl	8025080 <floorf>
 80042ca:	eef0 7a40 	vmov.f32	s15, s0
 80042ce:	eeb0 0a67 	vmov.f32	s0, s15
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <_Z13rt_roundf_snff>:
//
#include <MatlabAttitudeController/Second_att_control_codeblock_fly.h>
#include <MatlabAttitudeController/Second_att_control_codeblock_fly_private.h>

real32_T rt_roundf_snf(real32_T u)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	ed87 0a01 	vstr	s0, [r7, #4]
  real32_T y;
  if (std::abs(u) < 8.388608E+6F) {
 80042e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80042e6:	f7ff ffc7 	bl	8004278 <_ZSt3absf>
 80042ea:	eeb0 7a40 	vmov.f32	s14, s0
 80042ee:	eddf 7a25 	vldr	s15, [pc, #148]	; 8004384 <_Z13rt_roundf_snff+0xac>
 80042f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fa:	bf4c      	ite	mi
 80042fc:	2301      	movmi	r3, #1
 80042fe:	2300      	movpl	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d034      	beq.n	8004370 <_Z13rt_roundf_snff+0x98>
    if (u >= 0.5F) {
 8004306:	edd7 7a01 	vldr	s15, [r7, #4]
 800430a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800430e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004316:	db0c      	blt.n	8004332 <_Z13rt_roundf_snff+0x5a>
      y = std::floor(u + 0.5F);
 8004318:	edd7 7a01 	vldr	s15, [r7, #4]
 800431c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004320:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004324:	eeb0 0a67 	vmov.f32	s0, s15
 8004328:	f7ff ffc6 	bl	80042b8 <_ZSt5floorf>
 800432c:	ed87 0a03 	vstr	s0, [r7, #12]
 8004330:	e020      	b.n	8004374 <_Z13rt_roundf_snff+0x9c>
    } else if (u > -0.5F) {
 8004332:	edd7 7a01 	vldr	s15, [r7, #4]
 8004336:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800433a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800433e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004342:	dd08      	ble.n	8004356 <_Z13rt_roundf_snff+0x7e>
      y = u * 0.0F;
 8004344:	edd7 7a01 	vldr	s15, [r7, #4]
 8004348:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004388 <_Z13rt_roundf_snff+0xb0>
 800434c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004350:	edc7 7a03 	vstr	s15, [r7, #12]
 8004354:	e00e      	b.n	8004374 <_Z13rt_roundf_snff+0x9c>
    } else {
      y = std::ceil(u - 0.5F);
 8004356:	edd7 7a01 	vldr	s15, [r7, #4]
 800435a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800435e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004362:	eeb0 0a67 	vmov.f32	s0, s15
 8004366:	f7ff ff97 	bl	8004298 <_ZSt4ceilf>
 800436a:	ed87 0a03 	vstr	s0, [r7, #12]
 800436e:	e001      	b.n	8004374 <_Z13rt_roundf_snff+0x9c>
    }
  } else {
    y = u;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	60fb      	str	r3, [r7, #12]
  }

  return y;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	ee07 3a90 	vmov	s15, r3
}
 800437a:	eeb0 0a67 	vmov.f32	s0, s15
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	4b000000 	.word	0x4b000000
 8004388:	00000000 	.word	0x00000000

0800438c <_ZN23px4_AlgorithmModelClass4stepEv>:

// Model step function
void px4_AlgorithmModelClass::step()
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  // Gain: '<S1>/Max_angle_coef' incorporates:
  //   Inport: '<Root>/set_pitch'
  //   Inport: '<Root>/set_roll'

  Second_att_control_codeblock__B.Max_angle_coef[0] =
    Second_att_control_codeblock__P.Max_angle_coef_Gain *
 8004394:	4bbb      	ldr	r3, [pc, #748]	; (8004684 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f8>)
 8004396:	ed93 7a05 	vldr	s14, [r3, #20]
    Second_att_control_codeblock__U.set_roll;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
    Second_att_control_codeblock__P.Max_angle_coef_Gain *
 80043a0:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Max_angle_coef[0] =
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	edc3 7a00 	vstr	s15, [r3]
  Second_att_control_codeblock__B.Max_angle_coef[1] =
    Second_att_control_codeblock__P.Max_angle_coef_Gain *
 80043aa:	4bb6      	ldr	r3, [pc, #728]	; (8004684 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f8>)
 80043ac:	ed93 7a05 	vldr	s14, [r3, #20]
    Second_att_control_codeblock__U.set_pitch;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
    Second_att_control_codeblock__P.Max_angle_coef_Gain *
 80043b6:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Max_angle_coef[1] =
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	edc3 7a01 	vstr	s15, [r3, #4]

  // Sum: '<S4>/Sum' incorporates:
  //   Inport: '<Root>/Roll'

  Second_att_control_codeblock__B.pitchrollerror =
    Second_att_control_codeblock__B.Max_angle_coef[0] -
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	ed93 7a00 	vldr	s14, [r3]
    Second_att_control_codeblock__U.Roll;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
    Second_att_control_codeblock__B.Max_angle_coef[0] -
 80043cc:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror =
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	edc3 7a02 	vstr	s15, [r3, #8]

  // Gain: '<S4>/P_pr'
  Second_att_control_codeblock__B.P_pr =
    Second_att_control_codeblock__P.P_pr_Gain *
 80043d6:	4bab      	ldr	r3, [pc, #684]	; (8004684 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f8>)
 80043d8:	ed93 7a06 	vldr	s14, [r3, #24]
    Second_att_control_codeblock__B.pitchrollerror;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	edd3 7a02 	vldr	s15, [r3, #8]
    Second_att_control_codeblock__P.P_pr_Gain *
 80043e2:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr =
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	edc3 7a03 	vstr	s15, [r3, #12]

  // DiscreteIntegrator: '<S4>/Discrete-Time Integrator'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
  Second_att_control_codeblock__B.DiscreteTimeIntegrator =
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	611a      	str	r2, [r3, #16]

  // Gain: '<S4>/I_pr'
  Second_att_control_codeblock__B.I_pr =
    Second_att_control_codeblock__P.I_pr_Gain *
 80043f6:	4ba3      	ldr	r3, [pc, #652]	; (8004684 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f8>)
 80043f8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
    Second_att_control_codeblock__B.DiscreteTimeIntegrator;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	edd3 7a04 	vldr	s15, [r3, #16]
    Second_att_control_codeblock__P.I_pr_Gain *
 8004402:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.I_pr =
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	edc3 7a05 	vstr	s15, [r3, #20]

  // Sum: '<S4>/Sum16'
  Second_att_control_codeblock__B.P_pr_m = Second_att_control_codeblock__B.P_pr
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	ed93 7a03 	vldr	s14, [r3, #12]
    + Second_att_control_codeblock__B.I_pr;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	edd3 7a05 	vldr	s15, [r3, #20]
 8004418:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_m = Second_att_control_codeblock__B.P_pr
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	edc3 7a06 	vstr	s15, [r3, #24]

  // Sum: '<S5>/Sum' incorporates:
  //   Inport: '<Root>/p'

  Second_att_control_codeblock__B.pitchrollerror_b =
    Second_att_control_codeblock__B.P_pr_m - Second_att_control_codeblock__U.p;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	ed93 7a06 	vldr	s14, [r3, #24]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 800442e:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_b =
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	edc3 7a07 	vstr	s15, [r3, #28]

  // Gain: '<S5>/P_pr'
  Second_att_control_codeblock__B.P_pr_b =
    Second_att_control_codeblock__P.P_pr_Gain_a *
 8004438:	4b92      	ldr	r3, [pc, #584]	; (8004684 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f8>)
 800443a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
    Second_att_control_codeblock__B.pitchrollerror_b;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	edd3 7a07 	vldr	s15, [r3, #28]
    Second_att_control_codeblock__P.P_pr_Gain_a *
 8004444:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_b =
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	edc3 7a08 	vstr	s15, [r3, #32]

  // DiscreteIntegrator: '<S5>/Discrete-Time Integrator'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator_h =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
  Second_att_control_codeblock__B.DiscreteTimeIntegrator_h =
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	625a      	str	r2, [r3, #36]	; 0x24

  // Gain: '<S5>/I_pr'
  Second_att_control_codeblock__B.I_pr_d =
    Second_att_control_codeblock__P.I_pr_Gain_d *
 8004458:	4b8a      	ldr	r3, [pc, #552]	; (8004684 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f8>)
 800445a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
    Second_att_control_codeblock__B.DiscreteTimeIntegrator_h;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    Second_att_control_codeblock__P.I_pr_Gain_d *
 8004464:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.I_pr_d =
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  //
  //  About '<S7>/TSamp':
  //   y = u * K where K = 1 / ( w * Ts )

  Second_att_control_codeblock__B.TSamp =
    Second_att_control_codeblock__B.pitchrollerror_b *
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	ed93 7a07 	vldr	s14, [r3, #28]
    Second_att_control_codeblock__P.TSamp_WtEt;
 8004474:	4b83      	ldr	r3, [pc, #524]	; (8004684 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f8>)
 8004476:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
    Second_att_control_codeblock__B.pitchrollerror_b *
 800447a:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.TSamp =
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  //  Block description for '<S7>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock__B.Uk1 =
    Second_att_control_codeblock_DW.UD_DSTATE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
  Second_att_control_codeblock__B.Uk1 =
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	631a      	str	r2, [r3, #48]	; 0x30
  //
  //  Block description for '<S7>/Diff':
  //
  //   Add in CPU

  Second_att_control_codeblock__B.Diff = Second_att_control_codeblock__B.TSamp -
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
    Second_att_control_codeblock__B.Uk1;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
  Second_att_control_codeblock__B.Diff = Second_att_control_codeblock__B.TSamp -
 800449a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

  // Gain: '<S5>/D_pr'
  Second_att_control_codeblock__B.D_pr =
    Second_att_control_codeblock__P.D_pr_Gain *
 80044a4:	4b77      	ldr	r3, [pc, #476]	; (8004684 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f8>)
 80044a6:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
    Second_att_control_codeblock__B.Diff;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    Second_att_control_codeblock__P.D_pr_Gain *
 80044b0:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.D_pr =
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

  // Sum: '<S5>/Sum16'
  Second_att_control_codeblock__B.P_pr_d =
    (Second_att_control_codeblock__B.P_pr_b +
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	ed93 7a08 	vldr	s14, [r3, #32]
     Second_att_control_codeblock__B.I_pr_d) +
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    (Second_att_control_codeblock__B.P_pr_b +
 80044c6:	ee37 7a27 	vadd.f32	s14, s14, s15
    Second_att_control_codeblock__B.D_pr;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
     Second_att_control_codeblock__B.I_pr_d) +
 80044d0:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_d =
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

  // Saturate: '<S5>/Saturation'
  u0 = Second_att_control_codeblock__B.P_pr_d;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044de:	617b      	str	r3, [r7, #20]
  u1 = Second_att_control_codeblock__P.Saturation_LowerSat;
 80044e0:	4b68      	ldr	r3, [pc, #416]	; (8004684 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f8>)
 80044e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e4:	613b      	str	r3, [r7, #16]
  u2 = Second_att_control_codeblock__P.Saturation_UpperSat;
 80044e6:	4b67      	ldr	r3, [pc, #412]	; (8004684 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f8>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	60fb      	str	r3, [r7, #12]
  if (u0 > u2) {
 80044ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80044f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80044f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044fc:	dd03      	ble.n	8004506 <_ZN23px4_AlgorithmModelClass4stepEv+0x17a>
    Second_att_control_codeblock__B.Saturation = u2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	641a      	str	r2, [r3, #64]	; 0x40
 8004504:	e00f      	b.n	8004526 <_ZN23px4_AlgorithmModelClass4stepEv+0x19a>
  } else if (u0 < u1) {
 8004506:	ed97 7a05 	vldr	s14, [r7, #20]
 800450a:	edd7 7a04 	vldr	s15, [r7, #16]
 800450e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004516:	d503      	bpl.n	8004520 <_ZN23px4_AlgorithmModelClass4stepEv+0x194>
    Second_att_control_codeblock__B.Saturation = u1;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	641a      	str	r2, [r3, #64]	; 0x40
 800451e:	e002      	b.n	8004526 <_ZN23px4_AlgorithmModelClass4stepEv+0x19a>
  } else {
    Second_att_control_codeblock__B.Saturation = u0;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	641a      	str	r2, [r3, #64]	; 0x40

  // End of Saturate: '<S5>/Saturation'

  // Gain: '<S5>/Gain'
  Second_att_control_codeblock__B.Gain =
    Second_att_control_codeblock__P.Gain_Gain *
 8004526:	4b57      	ldr	r3, [pc, #348]	; (8004684 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f8>)
 8004528:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
    Second_att_control_codeblock__B.Saturation;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    Second_att_control_codeblock__P.Gain_Gain *
 8004532:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain =
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

  // Sum: '<S4>/Sum2' incorporates:
  //   Inport: '<Root>/Pitch'

  Second_att_control_codeblock__B.pitchrollerror_m =
    Second_att_control_codeblock__B.Max_angle_coef[1] -
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	ed93 7a01 	vldr	s14, [r3, #4]
    Second_att_control_codeblock__U.Pitch;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
    Second_att_control_codeblock__B.Max_angle_coef[1] -
 8004548:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_m =
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

  // Gain: '<S4>/P_pr1'
  Second_att_control_codeblock__B.P_pr1 =
    Second_att_control_codeblock__P.P_pr1_Gain *
 8004552:	4b4c      	ldr	r3, [pc, #304]	; (8004684 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f8>)
 8004554:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
    Second_att_control_codeblock__B.pitchrollerror_m;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
    Second_att_control_codeblock__P.P_pr1_Gain *
 800455e:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr1 =
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

  // DiscreteIntegrator: '<S4>/Discrete-Time Integrator1'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1 =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1 =
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	651a      	str	r2, [r3, #80]	; 0x50

  // Gain: '<S4>/I_pr1'
  Second_att_control_codeblock__B.I_pr1 =
    Second_att_control_codeblock__P.I_pr1_Gain *
 8004572:	4b44      	ldr	r3, [pc, #272]	; (8004684 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f8>)
 8004574:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
    Second_att_control_codeblock__P.I_pr1_Gain *
 800457e:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.I_pr1 =
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  // Sum: '<S4>/Sum1'
  Second_att_control_codeblock__B.P_pr_o = Second_att_control_codeblock__B.P_pr1
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
    + Second_att_control_codeblock__B.I_pr1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004594:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_o = Second_att_control_codeblock__B.P_pr1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  // Sum: '<S5>/Sum1' incorporates:
  //   Inport: '<Root>/q'

  Second_att_control_codeblock__B.pitchrollerror_i =
    Second_att_control_codeblock__B.P_pr_o - Second_att_control_codeblock__U.q;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80045aa:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_i =
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

  // Gain: '<S5>/P_pr1'
  Second_att_control_codeblock__B.P_pr1_p =
    Second_att_control_codeblock__P.P_pr1_Gain_n *
 80045b4:	4b33      	ldr	r3, [pc, #204]	; (8004684 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f8>)
 80045b6:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
    Second_att_control_codeblock__B.pitchrollerror_i;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
    Second_att_control_codeblock__P.P_pr1_Gain_n *
 80045c0:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr1_p =
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

  // DiscreteIntegrator: '<S5>/Discrete-Time Integrator1'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p =
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	665a      	str	r2, [r3, #100]	; 0x64

  // Gain: '<S5>/I_pr1'
  Second_att_control_codeblock__B.I_pr1_j =
    Second_att_control_codeblock__P.I_pr1_Gain_g *
 80045d4:	4b2b      	ldr	r3, [pc, #172]	; (8004684 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f8>)
 80045d6:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
    Second_att_control_codeblock__P.I_pr1_Gain_g *
 80045e0:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.I_pr1_j =
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
  //
  //  About '<S8>/TSamp':
  //   y = u * K where K = 1 / ( w * Ts )

  Second_att_control_codeblock__B.TSamp_h =
    Second_att_control_codeblock__B.pitchrollerror_i *
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
    Second_att_control_codeblock__P.TSamp_WtEt_l;
 80045f0:	4b24      	ldr	r3, [pc, #144]	; (8004684 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f8>)
 80045f2:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
    Second_att_control_codeblock__B.pitchrollerror_i *
 80045f6:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.TSamp_h =
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock__B.Uk1_i =
    Second_att_control_codeblock_DW.UD_DSTATE_e;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
  Second_att_control_codeblock__B.Uk1_i =
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	671a      	str	r2, [r3, #112]	; 0x70
  //  Block description for '<S8>/Diff':
  //
  //   Add in CPU

  Second_att_control_codeblock__B.Diff_l =
    Second_att_control_codeblock__B.TSamp_h -
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
    Second_att_control_codeblock__B.Uk1_i;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
    Second_att_control_codeblock__B.TSamp_h -
 8004616:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Diff_l =
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

  // Gain: '<S5>/D_pr1'
  Second_att_control_codeblock__B.D_pr1 =
    Second_att_control_codeblock__P.D_pr1_Gain *
 8004620:	4b18      	ldr	r3, [pc, #96]	; (8004684 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f8>)
 8004622:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
    Second_att_control_codeblock__B.Diff_l;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
    Second_att_control_codeblock__P.D_pr1_Gain *
 800462c:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.D_pr1 =
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

  // Sum: '<S5>/Sum2'
  Second_att_control_codeblock__B.P_pr_j =
    (Second_att_control_codeblock__B.P_pr1_p +
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
     Second_att_control_codeblock__B.I_pr1_j) +
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
    (Second_att_control_codeblock__B.P_pr1_p +
 8004642:	ee37 7a27 	vadd.f32	s14, s14, s15
    Second_att_control_codeblock__B.D_pr1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
     Second_att_control_codeblock__B.I_pr1_j) +
 800464c:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_j =
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

  // Saturate: '<S5>/Saturation1'
  u0 = Second_att_control_codeblock__B.P_pr_j;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800465a:	617b      	str	r3, [r7, #20]
  u1 = Second_att_control_codeblock__P.Saturation1_LowerSat;
 800465c:	4b09      	ldr	r3, [pc, #36]	; (8004684 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f8>)
 800465e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004660:	613b      	str	r3, [r7, #16]
  u2 = Second_att_control_codeblock__P.Saturation1_UpperSat;
 8004662:	4b08      	ldr	r3, [pc, #32]	; (8004684 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f8>)
 8004664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004666:	60fb      	str	r3, [r7, #12]
  if (u0 > u2) {
 8004668:	ed97 7a05 	vldr	s14, [r7, #20]
 800466c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004670:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004678:	dd06      	ble.n	8004688 <_ZN23px4_AlgorithmModelClass4stepEv+0x2fc>
    Second_att_control_codeblock__B.Saturation1 = u2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004682:	e013      	b.n	80046ac <_ZN23px4_AlgorithmModelClass4stepEv+0x320>
 8004684:	20000004 	.word	0x20000004
  } else if (u0 < u1) {
 8004688:	ed97 7a05 	vldr	s14, [r7, #20]
 800468c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004698:	d504      	bpl.n	80046a4 <_ZN23px4_AlgorithmModelClass4stepEv+0x318>
    Second_att_control_codeblock__B.Saturation1 = u1;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80046a2:	e003      	b.n	80046ac <_ZN23px4_AlgorithmModelClass4stepEv+0x320>
  } else {
    Second_att_control_codeblock__B.Saturation1 = u0;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  // End of Saturate: '<S5>/Saturation1'

  // Gain: '<S5>/Gain1'
  Second_att_control_codeblock__B.Gain1 =
    Second_att_control_codeblock__P.Gain1_Gain *
 80046ac:	4bbb      	ldr	r3, [pc, #748]	; (800499c <_ZN23px4_AlgorithmModelClass4stepEv+0x610>)
 80046ae:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
    Second_att_control_codeblock__B.Saturation1;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
    Second_att_control_codeblock__P.Gain1_Gain *
 80046b8:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain1 =
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

  // Sum: '<S6>/Sum' incorporates:
  //   Inport: '<Root>/r'
  //   Inport: '<Root>/set_yaw'

  Second_att_control_codeblock__B.Sum = Second_att_control_codeblock__U.set_yaw
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
    - Second_att_control_codeblock__U.r;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 80046ce:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Sum = Second_att_control_codeblock__U.set_yaw
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

  // Gain: '<S6>/Gain'
  Second_att_control_codeblock__B.Gain_f =
    Second_att_control_codeblock__P.Gain_Gain_j *
 80046d8:	4bb0      	ldr	r3, [pc, #704]	; (800499c <_ZN23px4_AlgorithmModelClass4stepEv+0x610>)
 80046da:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
    Second_att_control_codeblock__B.Sum;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
    Second_att_control_codeblock__P.Gain_Gain_j *
 80046e4:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain_f =
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

  // Gain: '<S46>/Proportional Gain'
  Second_att_control_codeblock__B.ProportionalGain =
    Second_att_control_codeblock__P.DiscretePIDController_P *
 80046ee:	4bab      	ldr	r3, [pc, #684]	; (800499c <_ZN23px4_AlgorithmModelClass4stepEv+0x610>)
 80046f0:	ed93 7a04 	vldr	s14, [r3, #16]
    Second_att_control_codeblock__B.Gain_f;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
    Second_att_control_codeblock__P.DiscretePIDController_P *
 80046fa:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.ProportionalGain =
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

  // DiscreteIntegrator: '<S41>/Integrator'
  Second_att_control_codeblock__B.Integrator =
    Second_att_control_codeblock_DW.Integrator_DSTATE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
  Second_att_control_codeblock__B.Integrator =
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  // Sum: '<S50>/Sum'
  Second_att_control_codeblock__B.Sum_f =
    Second_att_control_codeblock__B.ProportionalGain +
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
    Second_att_control_codeblock__B.Integrator;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
    Second_att_control_codeblock__B.ProportionalGain +
 800471c:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.Sum_f =
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

  // MATLAB Function: '<S1>/pwm_out1' incorporates:
  //   Inport: '<Root>/set_thrust'

  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain -
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800472c:	eeb1 7a67 	vneg.f32	s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain -
 8004736:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 8004740:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004744:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004748:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004752:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain -
 8004756:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80049a0 <_ZN23px4_AlgorithmModelClass4stepEv+0x614>
 800475a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800475e:	eeb0 0a67 	vmov.f32	s0, s15
 8004762:	f7ff fdb9 	bl	80042d8 <_Z13rt_roundf_snff>
 8004766:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 800476a:	edd7 7a05 	vldr	s15, [r7, #20]
 800476e:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80049a4 <_ZN23px4_AlgorithmModelClass4stepEv+0x618>
 8004772:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477a:	d511      	bpl.n	80047a0 <_ZN23px4_AlgorithmModelClass4stepEv+0x414>
    if (u0 >= 0.0F) {
 800477c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004780:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004788:	db07      	blt.n	800479a <_ZN23px4_AlgorithmModelClass4stepEv+0x40e>
      y = static_cast<uint16_T>(u0);
 800478a:	edd7 7a05 	vldr	s15, [r7, #20]
 800478e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004792:	ee17 3a90 	vmov	r3, s15
 8004796:	837b      	strh	r3, [r7, #26]
 8004798:	e005      	b.n	80047a6 <_ZN23px4_AlgorithmModelClass4stepEv+0x41a>
    } else {
      y = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	837b      	strh	r3, [r7, #26]
 800479e:	e002      	b.n	80047a6 <_ZN23px4_AlgorithmModelClass4stepEv+0x41a>
    }
  } else {
    y = MAX_uint16_T;
 80047a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047a4:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 80047a6:	8b7b      	ldrh	r3, [r7, #26]
 80047a8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80047ac:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b4:	d302      	bcc.n	80047bc <_ZN23px4_AlgorithmModelClass4stepEv+0x430>
    tmp = 65535U;
 80047b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047ba:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M1 = static_cast<uint16_T>(tmp);
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	b29a      	uxth	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain +
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
                       Second_att_control_codeblock__B.Sum_f) *
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain +
 80047d2:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 80047dc:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80047e0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80047e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80047ee:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain +
 80047f2:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80049a0 <_ZN23px4_AlgorithmModelClass4stepEv+0x614>
 80047f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047fa:	eeb0 0a67 	vmov.f32	s0, s15
 80047fe:	f7ff fd6b 	bl	80042d8 <_Z13rt_roundf_snff>
 8004802:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 8004806:	edd7 7a05 	vldr	s15, [r7, #20]
 800480a:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80049a4 <_ZN23px4_AlgorithmModelClass4stepEv+0x618>
 800480e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004816:	d511      	bpl.n	800483c <_ZN23px4_AlgorithmModelClass4stepEv+0x4b0>
    if (u0 >= 0.0F) {
 8004818:	edd7 7a05 	vldr	s15, [r7, #20]
 800481c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004824:	db07      	blt.n	8004836 <_ZN23px4_AlgorithmModelClass4stepEv+0x4aa>
      y = static_cast<uint16_T>(u0);
 8004826:	edd7 7a05 	vldr	s15, [r7, #20]
 800482a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800482e:	ee17 3a90 	vmov	r3, s15
 8004832:	837b      	strh	r3, [r7, #26]
 8004834:	e005      	b.n	8004842 <_ZN23px4_AlgorithmModelClass4stepEv+0x4b6>
    } else {
      y = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	837b      	strh	r3, [r7, #26]
 800483a:	e002      	b.n	8004842 <_ZN23px4_AlgorithmModelClass4stepEv+0x4b6>
    }
  } else {
    y = MAX_uint16_T;
 800483c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004840:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 8004842:	8b7b      	ldrh	r3, [r7, #26]
 8004844:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004848:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004850:	d302      	bcc.n	8004858 <_ZN23px4_AlgorithmModelClass4stepEv+0x4cc>
    tmp = 65535U;
 8004852:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004856:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M2 = static_cast<uint16_T>(tmp);
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	b29a      	uxth	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004868:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800486c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                        Second_att_control_codeblock__B.Gain1) -
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 8004876:	ee37 7a27 	vadd.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
                        Second_att_control_codeblock__B.Gain1) -
 8004880:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 800488a:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 800488e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004892:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 800489c:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 80048a0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80049a0 <_ZN23px4_AlgorithmModelClass4stepEv+0x614>
 80048a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048a8:	eeb0 0a67 	vmov.f32	s0, s15
 80048ac:	f7ff fd14 	bl	80042d8 <_Z13rt_roundf_snff>
 80048b0:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 80048b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80048b8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80049a4 <_ZN23px4_AlgorithmModelClass4stepEv+0x618>
 80048bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c4:	d511      	bpl.n	80048ea <_ZN23px4_AlgorithmModelClass4stepEv+0x55e>
    if (u0 >= 0.0F) {
 80048c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80048ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d2:	db07      	blt.n	80048e4 <_ZN23px4_AlgorithmModelClass4stepEv+0x558>
      y = static_cast<uint16_T>(u0);
 80048d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80048d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048dc:	ee17 3a90 	vmov	r3, s15
 80048e0:	837b      	strh	r3, [r7, #26]
 80048e2:	e005      	b.n	80048f0 <_ZN23px4_AlgorithmModelClass4stepEv+0x564>
    } else {
      y = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	837b      	strh	r3, [r7, #26]
 80048e8:	e002      	b.n	80048f0 <_ZN23px4_AlgorithmModelClass4stepEv+0x564>
    }
  } else {
    y = MAX_uint16_T;
 80048ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048ee:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 80048f0:	8b7b      	ldrh	r3, [r7, #26]
 80048f2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80048f6:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fe:	d302      	bcc.n	8004906 <_ZN23px4_AlgorithmModelClass4stepEv+0x57a>
    tmp = 65535U;
 8004900:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004904:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M3 = static_cast<uint16_T>(tmp);
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	b29a      	uxth	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004916:	eeb1 7a67 	vneg.f32	s14, s15
                        Second_att_control_codeblock__B.Gain / 2.0F) +
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8004920:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8004924:	eec6 7a86 	vdiv.f32	s15, s13, s12
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 8004928:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
                        Second_att_control_codeblock__B.Gain / 2.0F) +
 8004932:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 800493c:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004940:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004944:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 800494e:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 8004952:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80049a0 <_ZN23px4_AlgorithmModelClass4stepEv+0x614>
 8004956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800495a:	eeb0 0a67 	vmov.f32	s0, s15
 800495e:	f7ff fcbb 	bl	80042d8 <_Z13rt_roundf_snff>
 8004962:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 8004966:	edd7 7a05 	vldr	s15, [r7, #20]
 800496a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80049a4 <_ZN23px4_AlgorithmModelClass4stepEv+0x618>
 800496e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004976:	d517      	bpl.n	80049a8 <_ZN23px4_AlgorithmModelClass4stepEv+0x61c>
    if (u0 >= 0.0F) {
 8004978:	edd7 7a05 	vldr	s15, [r7, #20]
 800497c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004984:	db07      	blt.n	8004996 <_ZN23px4_AlgorithmModelClass4stepEv+0x60a>
      y = static_cast<uint16_T>(u0);
 8004986:	edd7 7a05 	vldr	s15, [r7, #20]
 800498a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800498e:	ee17 3a90 	vmov	r3, s15
 8004992:	837b      	strh	r3, [r7, #26]
 8004994:	e00b      	b.n	80049ae <_ZN23px4_AlgorithmModelClass4stepEv+0x622>
    } else {
      y = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	837b      	strh	r3, [r7, #26]
 800499a:	e008      	b.n	80049ae <_ZN23px4_AlgorithmModelClass4stepEv+0x622>
 800499c:	20000004 	.word	0x20000004
 80049a0:	447a0000 	.word	0x447a0000
 80049a4:	47800000 	.word	0x47800000
    }
  } else {
    y = MAX_uint16_T;
 80049a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049ac:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 80049ae:	8b7b      	ldrh	r3, [r7, #26]
 80049b0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80049b4:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049bc:	d302      	bcc.n	80049c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x638>
    tmp = 65535U;
 80049be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049c2:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M4 = static_cast<uint16_T>(tmp);
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
                        Second_att_control_codeblock__B.Gain / 2.0F) +
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 80049da:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80049de:	eec6 7a86 	vdiv.f32	s15, s13, s12
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 80049e2:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
                        Second_att_control_codeblock__B.Gain / 2.0F) +
 80049ec:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 80049f6:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80049fa:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80049fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004a08:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 8004a0c:	ed1f 7a1c 	vldr	s14, [pc, #-112]	; 80049a0 <_ZN23px4_AlgorithmModelClass4stepEv+0x614>
 8004a10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a14:	eeb0 0a67 	vmov.f32	s0, s15
 8004a18:	f7ff fc5e 	bl	80042d8 <_Z13rt_roundf_snff>
 8004a1c:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 8004a20:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a24:	ed1f 7a21 	vldr	s14, [pc, #-132]	; 80049a4 <_ZN23px4_AlgorithmModelClass4stepEv+0x618>
 8004a28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a30:	d511      	bpl.n	8004a56 <_ZN23px4_AlgorithmModelClass4stepEv+0x6ca>
    if (u0 >= 0.0F) {
 8004a32:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3e:	db07      	blt.n	8004a50 <_ZN23px4_AlgorithmModelClass4stepEv+0x6c4>
      y = static_cast<uint16_T>(u0);
 8004a40:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a48:	ee17 3a90 	vmov	r3, s15
 8004a4c:	837b      	strh	r3, [r7, #26]
 8004a4e:	e005      	b.n	8004a5c <_ZN23px4_AlgorithmModelClass4stepEv+0x6d0>
    } else {
      y = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	837b      	strh	r3, [r7, #26]
 8004a54:	e002      	b.n	8004a5c <_ZN23px4_AlgorithmModelClass4stepEv+0x6d0>
    }
  } else {
    y = MAX_uint16_T;
 8004a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a5a:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 8004a5c:	8b7b      	ldrh	r3, [r7, #26]
 8004a5e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004a62:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a6a:	d302      	bcc.n	8004a72 <_ZN23px4_AlgorithmModelClass4stepEv+0x6e6>
    tmp = 65535U;
 8004a6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a70:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M5 = static_cast<uint16_T>(tmp);
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004a82:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004a86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                        -Second_att_control_codeblock__B.Gain1) -
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 8004a90:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
                        -Second_att_control_codeblock__B.Gain1) -
 8004a9a:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 8004aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004aa8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004aac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 8004aba:	ed1f 7a47 	vldr	s14, [pc, #-284]	; 80049a0 <_ZN23px4_AlgorithmModelClass4stepEv+0x614>
 8004abe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac6:	f7ff fc07 	bl	80042d8 <_Z13rt_roundf_snff>
 8004aca:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 8004ace:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ad2:	ed1f 7a4c 	vldr	s14, [pc, #-304]	; 80049a4 <_ZN23px4_AlgorithmModelClass4stepEv+0x618>
 8004ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ade:	d511      	bpl.n	8004b04 <_ZN23px4_AlgorithmModelClass4stepEv+0x778>
    if (u0 >= 0.0F) {
 8004ae0:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ae4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aec:	db07      	blt.n	8004afe <_ZN23px4_AlgorithmModelClass4stepEv+0x772>
      y = static_cast<uint16_T>(u0);
 8004aee:	edd7 7a05 	vldr	s15, [r7, #20]
 8004af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004af6:	ee17 3a90 	vmov	r3, s15
 8004afa:	837b      	strh	r3, [r7, #26]
 8004afc:	e005      	b.n	8004b0a <_ZN23px4_AlgorithmModelClass4stepEv+0x77e>
    } else {
      y = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	837b      	strh	r3, [r7, #26]
 8004b02:	e002      	b.n	8004b0a <_ZN23px4_AlgorithmModelClass4stepEv+0x77e>
    }
  } else {
    y = MAX_uint16_T;
 8004b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b08:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 8004b0a:	8b7b      	ldrh	r3, [r7, #26]
 8004b0c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004b10:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b18:	d302      	bcc.n	8004b20 <_ZN23px4_AlgorithmModelClass4stepEv+0x794>
    tmp = 65535U;
 8004b1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b1e:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M6 = static_cast<uint16_T>(tmp);
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2

  // End of MATLAB Function: '<S1>/pwm_out1'

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M1 >
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8b3 20b8 	ldrh.w	r2, [r3, #184]	; 0xb8
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004b30:	4b60      	ldr	r3, [pc, #384]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004b32:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
  if (Second_att_control_codeblock__B.M1 >
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d904      	bls.n	8004b44 <_ZN23px4_AlgorithmModelClass4stepEv+0x7b8>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004b3a:	4b5e      	ldr	r3, [pc, #376]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004b3c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8004b40:	837b      	strh	r3, [r7, #26]
 8004b42:	e010      	b.n	8004b66 <_ZN23px4_AlgorithmModelClass4stepEv+0x7da>
  } else if (Second_att_control_codeblock__B.M1 <
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8b3 20b8 	ldrh.w	r2, [r3, #184]	; 0xb8
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004b4a:	4b5a      	ldr	r3, [pc, #360]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004b4c:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
  } else if (Second_att_control_codeblock__B.M1 <
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d204      	bcs.n	8004b5e <_ZN23px4_AlgorithmModelClass4stepEv+0x7d2>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004b54:	4b57      	ldr	r3, [pc, #348]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004b56:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8004b5a:	837b      	strh	r3, [r7, #26]
 8004b5c:	e003      	b.n	8004b66 <_ZN23px4_AlgorithmModelClass4stepEv+0x7da>
  } else {
    y = Second_att_control_codeblock__B.M1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8004b64:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[0] = y;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	8b7a      	ldrh	r2, [r7, #26]
 8004b6a:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M2 >
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004b74:	4b4f      	ldr	r3, [pc, #316]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004b76:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
  if (Second_att_control_codeblock__B.M2 >
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d904      	bls.n	8004b88 <_ZN23px4_AlgorithmModelClass4stepEv+0x7fc>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004b7e:	4b4d      	ldr	r3, [pc, #308]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004b80:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8004b84:	837b      	strh	r3, [r7, #26]
 8004b86:	e010      	b.n	8004baa <_ZN23px4_AlgorithmModelClass4stepEv+0x81e>
  } else if (Second_att_control_codeblock__B.M2 <
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004b8e:	4b49      	ldr	r3, [pc, #292]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004b90:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
  } else if (Second_att_control_codeblock__B.M2 <
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d204      	bcs.n	8004ba2 <_ZN23px4_AlgorithmModelClass4stepEv+0x816>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004b98:	4b46      	ldr	r3, [pc, #280]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004b9a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8004b9e:	837b      	strh	r3, [r7, #26]
 8004ba0:	e003      	b.n	8004baa <_ZN23px4_AlgorithmModelClass4stepEv+0x81e>
  } else {
    y = Second_att_control_codeblock__B.M2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8004ba8:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[1] = y;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	8b7a      	ldrh	r2, [r7, #26]
 8004bae:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M3 >
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004bb8:	4b3e      	ldr	r3, [pc, #248]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004bba:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
  if (Second_att_control_codeblock__B.M3 >
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d904      	bls.n	8004bcc <_ZN23px4_AlgorithmModelClass4stepEv+0x840>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004bc2:	4b3c      	ldr	r3, [pc, #240]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004bc4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8004bc8:	837b      	strh	r3, [r7, #26]
 8004bca:	e010      	b.n	8004bee <_ZN23px4_AlgorithmModelClass4stepEv+0x862>
  } else if (Second_att_control_codeblock__B.M3 <
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004bd2:	4b38      	ldr	r3, [pc, #224]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004bd4:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
  } else if (Second_att_control_codeblock__B.M3 <
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d204      	bcs.n	8004be6 <_ZN23px4_AlgorithmModelClass4stepEv+0x85a>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004bdc:	4b35      	ldr	r3, [pc, #212]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004bde:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8004be2:	837b      	strh	r3, [r7, #26]
 8004be4:	e003      	b.n	8004bee <_ZN23px4_AlgorithmModelClass4stepEv+0x862>
  } else {
    y = Second_att_control_codeblock__B.M3;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8004bec:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[2] = y;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	8b7a      	ldrh	r2, [r7, #26]
 8004bf2:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M4 >
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8b3 20be 	ldrh.w	r2, [r3, #190]	; 0xbe
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004bfc:	4b2d      	ldr	r3, [pc, #180]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004bfe:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
  if (Second_att_control_codeblock__B.M4 >
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d904      	bls.n	8004c10 <_ZN23px4_AlgorithmModelClass4stepEv+0x884>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004c06:	4b2b      	ldr	r3, [pc, #172]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004c08:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8004c0c:	837b      	strh	r3, [r7, #26]
 8004c0e:	e010      	b.n	8004c32 <_ZN23px4_AlgorithmModelClass4stepEv+0x8a6>
  } else if (Second_att_control_codeblock__B.M4 <
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8b3 20be 	ldrh.w	r2, [r3, #190]	; 0xbe
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004c16:	4b27      	ldr	r3, [pc, #156]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004c18:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
  } else if (Second_att_control_codeblock__B.M4 <
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d204      	bcs.n	8004c2a <_ZN23px4_AlgorithmModelClass4stepEv+0x89e>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004c20:	4b24      	ldr	r3, [pc, #144]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004c22:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8004c26:	837b      	strh	r3, [r7, #26]
 8004c28:	e003      	b.n	8004c32 <_ZN23px4_AlgorithmModelClass4stepEv+0x8a6>
  } else {
    y = Second_att_control_codeblock__B.M4;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8004c30:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[3] = y;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	8b7a      	ldrh	r2, [r7, #26]
 8004c36:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M5 >
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004c40:	4b1c      	ldr	r3, [pc, #112]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004c42:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
  if (Second_att_control_codeblock__B.M5 >
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d904      	bls.n	8004c54 <_ZN23px4_AlgorithmModelClass4stepEv+0x8c8>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004c4a:	4b1a      	ldr	r3, [pc, #104]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004c4c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8004c50:	837b      	strh	r3, [r7, #26]
 8004c52:	e010      	b.n	8004c76 <_ZN23px4_AlgorithmModelClass4stepEv+0x8ea>
  } else if (Second_att_control_codeblock__B.M5 <
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004c5a:	4b16      	ldr	r3, [pc, #88]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004c5c:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
  } else if (Second_att_control_codeblock__B.M5 <
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d204      	bcs.n	8004c6e <_ZN23px4_AlgorithmModelClass4stepEv+0x8e2>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004c64:	4b13      	ldr	r3, [pc, #76]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004c66:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8004c6a:	837b      	strh	r3, [r7, #26]
 8004c6c:	e003      	b.n	8004c76 <_ZN23px4_AlgorithmModelClass4stepEv+0x8ea>
  } else {
    y = Second_att_control_codeblock__B.M5;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004c74:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[4] = y;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	8b7a      	ldrh	r2, [r7, #26]
 8004c7a:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M6 >
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004c86:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
  if (Second_att_control_codeblock__B.M6 >
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d904      	bls.n	8004c98 <_ZN23px4_AlgorithmModelClass4stepEv+0x90c>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004c90:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8004c94:	837b      	strh	r3, [r7, #26]
 8004c96:	e013      	b.n	8004cc0 <_ZN23px4_AlgorithmModelClass4stepEv+0x934>
  } else if (Second_att_control_codeblock__B.M6 <
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004c9e:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004ca0:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
  } else if (Second_att_control_codeblock__B.M6 <
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d207      	bcs.n	8004cb8 <_ZN23px4_AlgorithmModelClass4stepEv+0x92c>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004ca8:	4b02      	ldr	r3, [pc, #8]	; (8004cb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x928>)
 8004caa:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8004cae:	837b      	strh	r3, [r7, #26]
 8004cb0:	e006      	b.n	8004cc0 <_ZN23px4_AlgorithmModelClass4stepEv+0x934>
 8004cb2:	bf00      	nop
 8004cb4:	20000004 	.word	0x20000004
  } else {
    y = Second_att_control_codeblock__B.M6;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004cbe:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[5] = y;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	8b7a      	ldrh	r2, [r7, #26]
 8004cc4:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

  // Delay: '<S5>/Delay'
  Second_att_control_codeblock__B.Delay =
    Second_att_control_codeblock_DW.Delay_DSTATE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  Second_att_control_codeblock__B.Delay =
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  // Gain: '<S5>/antiWU_Gain'
  Second_att_control_codeblock__B.antiWU_Gain =
    Second_att_control_codeblock__P.antiWU_Gain_Gain *
 8004cd4:	4b52      	ldr	r3, [pc, #328]	; (8004e20 <_ZN23px4_AlgorithmModelClass4stepEv+0xa94>)
 8004cd6:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
    Second_att_control_codeblock__B.Delay;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
    Second_att_control_codeblock__P.antiWU_Gain_Gain *
 8004ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.antiWU_Gain =
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

  // Sum: '<S5>/Add'
  Second_att_control_codeblock__B.Add =
    Second_att_control_codeblock__B.pitchrollerror_b -
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	ed93 7a07 	vldr	s14, [r3, #28]
    Second_att_control_codeblock__B.antiWU_Gain;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
    Second_att_control_codeblock__B.pitchrollerror_b -
 8004cf6:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Add =
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

  // Delay: '<S5>/Delay1'
  Second_att_control_codeblock__B.Delay1 =
    Second_att_control_codeblock_DW.Delay1_DSTATE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
  Second_att_control_codeblock__B.Delay1 =
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  // Gain: '<S5>/antiWU_Gain1'
  Second_att_control_codeblock__B.antiWU_Gain1 =
    Second_att_control_codeblock__P.antiWU_Gain1_Gain *
 8004d0c:	4b44      	ldr	r3, [pc, #272]	; (8004e20 <_ZN23px4_AlgorithmModelClass4stepEv+0xa94>)
 8004d0e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
    Second_att_control_codeblock__B.Delay1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
    Second_att_control_codeblock__P.antiWU_Gain1_Gain *
 8004d18:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.antiWU_Gain1 =
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac

  // Sum: '<S5>/Add1'
  Second_att_control_codeblock__B.Add1 =
    Second_att_control_codeblock__B.pitchrollerror_i -
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
    Second_att_control_codeblock__B.antiWU_Gain1;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
    Second_att_control_codeblock__B.pitchrollerror_i -
 8004d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Add1 =
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0

  // Gain: '<S38>/Integral Gain'
  Second_att_control_codeblock__B.IntegralGain =
    Second_att_control_codeblock__P.DiscretePIDController_I *
 8004d38:	4b39      	ldr	r3, [pc, #228]	; (8004e20 <_ZN23px4_AlgorithmModelClass4stepEv+0xa94>)
 8004d3a:	ed93 7a00 	vldr	s14, [r3]
    Second_att_control_codeblock__B.Gain_f;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
    Second_att_control_codeblock__P.DiscretePIDController_I *
 8004d44:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.IntegralGain =
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

  // Update for DiscreteIntegrator: '<S4>/Discrete-Time Integrator'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE +=
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainval *
 8004d54:	4b32      	ldr	r3, [pc, #200]	; (8004e20 <_ZN23px4_AlgorithmModelClass4stepEv+0xa94>)
 8004d56:	edd3 6a07 	vldr	s13, [r3, #28]
    Second_att_control_codeblock__B.pitchrollerror;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	edd3 7a02 	vldr	s15, [r3, #8]
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainval *
 8004d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE +=
 8004d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

  // Update for DiscreteIntegrator: '<S5>/Discrete-Time Integrator'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k +=
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainva_l *
 8004d74:	4b2a      	ldr	r3, [pc, #168]	; (8004e20 <_ZN23px4_AlgorithmModelClass4stepEv+0xa94>)
 8004d76:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
    Second_att_control_codeblock__B.Add;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainva_l *
 8004d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k +=
 8004d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
  //  Block description for '<S7>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE =
    Second_att_control_codeblock__B.TSamp;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  Second_att_control_codeblock_DW.UD_DSTATE =
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

  // Update for DiscreteIntegrator: '<S4>/Discrete-Time Integrator1'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE +=
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainval *
 8004d9e:	4b20      	ldr	r3, [pc, #128]	; (8004e20 <_ZN23px4_AlgorithmModelClass4stepEv+0xa94>)
 8004da0:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
    Second_att_control_codeblock__B.pitchrollerror_m;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainval *
 8004daa:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE +=
 8004dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

  // Update for DiscreteIntegrator: '<S5>/Discrete-Time Integrator1'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d +=
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainv_k *
 8004dbe:	4b18      	ldr	r3, [pc, #96]	; (8004e20 <_ZN23px4_AlgorithmModelClass4stepEv+0xa94>)
 8004dc0:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
    Second_att_control_codeblock__B.Add1;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainv_k *
 8004dca:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d +=
 8004dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE_e =
    Second_att_control_codeblock__B.TSamp_h;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  Second_att_control_codeblock_DW.UD_DSTATE_e =
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  // Update for DiscreteIntegrator: '<S41>/Integrator'
  Second_att_control_codeblock_DW.Integrator_DSTATE +=
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
    Second_att_control_codeblock__P.Integrator_gainval *
 8004de8:	4b0d      	ldr	r3, [pc, #52]	; (8004e20 <_ZN23px4_AlgorithmModelClass4stepEv+0xa94>)
 8004dea:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
    Second_att_control_codeblock__B.IntegralGain;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
    Second_att_control_codeblock__P.Integrator_gainval *
 8004df4:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.Integrator_DSTATE +=
 8004df8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc

  // Update for Delay: '<S5>/Delay'
  Second_att_control_codeblock_DW.Delay_DSTATE =
    Second_att_control_codeblock__B.DiscreteTimeIntegrator_h;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  Second_att_control_codeblock_DW.Delay_DSTATE =
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

  // Update for Delay: '<S5>/Delay1'
  Second_att_control_codeblock_DW.Delay1_DSTATE =
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  Second_att_control_codeblock_DW.Delay1_DSTATE =
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
 8004e16:	bf00      	nop
 8004e18:	3720      	adds	r7, #32
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20000004 	.word	0x20000004

08004e24 <_ZN23px4_AlgorithmModelClass10initializeEv>:

// Model initialize function
void px4_AlgorithmModelClass::initialize()
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  // InitializeConditions for DiscreteIntegrator: '<S4>/Discrete-Time Integrator' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_IC;
 8004e2c:	4b1a      	ldr	r3, [pc, #104]	; (8004e98 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 8004e2e:	6a1a      	ldr	r2, [r3, #32]
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE =
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

  // InitializeConditions for DiscreteIntegrator: '<S5>/Discrete-Time Integrator' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_IC_k;
 8004e36:	4b18      	ldr	r3, [pc, #96]	; (8004e98 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 8004e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k =
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  //  Block description for '<S7>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE =
    Second_att_control_codeblock__P.DiscreteDerivative_ICPrevScaled;
 8004e40:	4b15      	ldr	r3, [pc, #84]	; (8004e98 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 8004e42:	685a      	ldr	r2, [r3, #4]
  Second_att_control_codeblock_DW.UD_DSTATE =
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

  // InitializeConditions for DiscreteIntegrator: '<S4>/Discrete-Time Integrator1' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_IC;
 8004e4a:	4b13      	ldr	r3, [pc, #76]	; (8004e98 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 8004e4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE =
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

  // InitializeConditions for DiscreteIntegrator: '<S5>/Discrete-Time Integrator1' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_IC_j;
 8004e54:	4b10      	ldr	r3, [pc, #64]	; (8004e98 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 8004e56:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d =
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE_e =
    Second_att_control_codeblock__P.DiscreteDerivative1_ICPrevScale;
 8004e5e:	4b0e      	ldr	r3, [pc, #56]	; (8004e98 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 8004e60:	689a      	ldr	r2, [r3, #8]
  Second_att_control_codeblock_DW.UD_DSTATE_e =
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  // InitializeConditions for DiscreteIntegrator: '<S41>/Integrator'
  Second_att_control_codeblock_DW.Integrator_DSTATE =
    Second_att_control_codeblock__P.DiscretePIDController_InitialCo;
 8004e68:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 8004e6a:	68da      	ldr	r2, [r3, #12]
  Second_att_control_codeblock_DW.Integrator_DSTATE =
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  // InitializeConditions for Delay: '<S5>/Delay'
  Second_att_control_codeblock_DW.Delay_DSTATE =
    Second_att_control_codeblock__P.Delay_InitialCondition;
 8004e72:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 8004e74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
  Second_att_control_codeblock_DW.Delay_DSTATE =
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

  // InitializeConditions for Delay: '<S5>/Delay1'
  Second_att_control_codeblock_DW.Delay1_DSTATE =
    Second_att_control_codeblock__P.Delay1_InitialCondition;
 8004e7e:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 8004e80:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  Second_att_control_codeblock_DW.Delay1_DSTATE =
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	20000004 	.word	0x20000004

08004e9c <_ZN23px4_AlgorithmModelClassC1Ev>:
{
  // (no terminate code required)
}

// Constructor
px4_AlgorithmModelClass::px4_AlgorithmModelClass():
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  Second_att_control_codeblock__B()
  ,Second_att_control_codeblock_DW()
  ,Second_att_control_codeblock__U()
  ,Second_att_control_codeblock__Y()
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	23c4      	movs	r3, #196	; 0xc4
 8004eaa:	461a      	mov	r2, r3
 8004eac:	2100      	movs	r1, #0
 8004eae:	f023 fc5e 	bl	802876e <memset>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	33c4      	adds	r3, #196	; 0xc4
 8004eb6:	2224      	movs	r2, #36	; 0x24
 8004eb8:	2100      	movs	r1, #0
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f023 fc57 	bl	802876e <memset>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	33e8      	adds	r3, #232	; 0xe8
 8004ec4:	2224      	movs	r2, #36	; 0x24
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f023 fc50 	bl	802876e <memset>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	605a      	str	r2, [r3, #4]
 8004eda:	609a      	str	r2, [r3, #8]
{
  // Currently there is no constructor body generated.
}
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <_ZN25positionControlModelClass4stepEv>:
                                          //  Referenced by: '<S189>/Proportional Gain'


// Model step function
void positionControlModelClass::step()
{
 8004ee8:	b5b0      	push	{r4, r5, r7, lr}
 8004eea:	b08e      	sub	sp, #56	; 0x38
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  real_T u2;

  // DataTypeConversion: '<S1>/Data Type Conversion' incorporates:
  //   Inport: '<Root>/estim_yaw'

  positionControl_B.DataTypeConversion = positionControl_U.estim_yaw;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fb fb2e 	bl	8000558 <__aeabi_f2d>
 8004efc:	4603      	mov	r3, r0
 8004efe:	460c      	mov	r4, r1
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	e9c2 3400 	strd	r3, r4, [r2]

  // Trigonometry: '<S8>/Trigonometric Function'
  cosOut = positionControl_B.DataTypeConversion;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f0c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = std::sin(cosOut);
 8004f10:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8004f14:	f01f ffec 	bl	8024ef0 <sin>
 8004f18:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
  cosOut = std::cos(cosOut);
 8004f1c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8004f20:	f01f ff1e 	bl	8024d60 <cos>
 8004f24:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
  positionControl_B.TrigonometricFunction_o1 = sinOut;
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004f2e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  positionControl_B.TrigonometricFunction_o2 = cosOut;
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004f38:	e9c2 3404 	strd	r3, r4, [r2, #16]

  // SignalConversion generated from: '<S8>/Vector Concatenate'
  positionControl_B.MatrixConcatenate[0] =
    positionControl_B.TrigonometricFunction_o2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
  positionControl_B.MatrixConcatenate[0] =
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	e9c2 3406 	strd	r3, r4, [r2, #24]

  // Gain: '<S8>/Gain'
  positionControl_B.MatrixConcatenate[1] = positionControl_P.Gain_Gain *
 8004f48:	4b5c      	ldr	r3, [pc, #368]	; (80050bc <_ZN25positionControlModelClass4stepEv+0x1d4>)
 8004f4a:	e9d3 0142 	ldrd	r0, r1, [r3, #264]	; 0x108
    positionControl_B.TrigonometricFunction_o1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
  positionControl_B.MatrixConcatenate[1] = positionControl_P.Gain_Gain *
 8004f54:	461a      	mov	r2, r3
 8004f56:	4623      	mov	r3, r4
 8004f58:	f7fb fb56 	bl	8000608 <__aeabi_dmul>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	460c      	mov	r4, r1
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	e9c2 3408 	strd	r3, r4, [r2, #32]

  // SignalConversion generated from: '<S8>/Vector Concatenate1'
  positionControl_B.MatrixConcatenate[2] =
    positionControl_B.TrigonometricFunction_o1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
  positionControl_B.MatrixConcatenate[2] =
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

  // SignalConversion generated from: '<S8>/Vector Concatenate1'
  positionControl_B.MatrixConcatenate[3] =
    positionControl_B.TrigonometricFunction_o2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
  positionControl_B.MatrixConcatenate[3] =
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

  // Sum: '<S1>/Add' incorporates:
  //   Inport: '<Root>/estim_x'
  //   Inport: '<Root>/set_x'

  positionControl_B.x_error = positionControl_U.set_x -
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	e9d3 01b8 	ldrd	r0, r1, [r3, #736]	; 0x2e0
    positionControl_U.estim_x;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	e9d3 34be 	ldrd	r3, r4, [r3, #760]	; 0x2f8
  positionControl_B.x_error = positionControl_U.set_x -
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	4623      	mov	r3, r4
 8004f8e:	f7fb f983 	bl	8000298 <__aeabi_dsub>
 8004f92:	4603      	mov	r3, r0
 8004f94:	460c      	mov	r4, r1
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

  // Gain: '<S45>/Proportional Gain'
  positionControl_B.ProportionalGain = pos_x_P * positionControl_B.x_error;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004fa2:	4b47      	ldr	r3, [pc, #284]	; (80050c0 <_ZN25positionControlModelClass4stepEv+0x1d8>)
 8004fa4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	4623      	mov	r3, r4
 8004fac:	f7fb fb2c 	bl	8000608 <__aeabi_dmul>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	460c      	mov	r4, r1
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

  // DiscreteIntegrator: '<S40>/Integrator'
  positionControl_B.Integrator = positionControl_DW.Integrator_DSTATE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	e9d3 349c 	ldrd	r3, r4, [r3, #624]	; 0x270
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

  // Gain: '<S34>/Derivative Gain'
  positionControl_B.DerivativeGain = pos_x_D * positionControl_B.x_error;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004fcc:	4b3d      	ldr	r3, [pc, #244]	; (80050c4 <_ZN25positionControlModelClass4stepEv+0x1dc>)
 8004fce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	4623      	mov	r3, r4
 8004fd6:	f7fb fb17 	bl	8000608 <__aeabi_dmul>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	460c      	mov	r4, r1
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50

  // DiscreteIntegrator: '<S35>/Filter'
  positionControl_B.Filter = positionControl_DW.Filter_DSTATE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	e9d3 349e 	ldrd	r3, r4, [r3, #632]	; 0x278
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58

  // Sum: '<S35>/SumD'
  positionControl_B.SumD = positionControl_B.DerivativeGain -
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
    positionControl_B.Filter;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
  positionControl_B.SumD = positionControl_B.DerivativeGain -
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4623      	mov	r3, r4
 8005000:	f7fb f94a 	bl	8000298 <__aeabi_dsub>
 8005004:	4603      	mov	r3, r0
 8005006:	460c      	mov	r4, r1
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

  // Gain: '<S43>/Filter Coefficient'
  positionControl_B.FilterCoefficient = positionControl_P.PIDController_N *
 800500e:	4b2b      	ldr	r3, [pc, #172]	; (80050bc <_ZN25positionControlModelClass4stepEv+0x1d4>)
 8005010:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
    positionControl_B.SumD;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
  positionControl_B.FilterCoefficient = positionControl_P.PIDController_N *
 800501a:	461a      	mov	r2, r3
 800501c:	4623      	mov	r3, r4
 800501e:	f7fb faf3 	bl	8000608 <__aeabi_dmul>
 8005022:	4603      	mov	r3, r0
 8005024:	460c      	mov	r4, r1
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

  // Sum: '<S49>/Sum'
  positionControl_B.Sum = (positionControl_B.ProportionalGain +
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
    positionControl_B.Integrator) + positionControl_B.FilterCoefficient;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
  positionControl_B.Sum = (positionControl_B.ProportionalGain +
 8005038:	461a      	mov	r2, r3
 800503a:	4623      	mov	r3, r4
 800503c:	f7fb f92e 	bl	800029c <__adddf3>
 8005040:	4603      	mov	r3, r0
 8005042:	460c      	mov	r4, r1
 8005044:	4618      	mov	r0, r3
 8005046:	4621      	mov	r1, r4
    positionControl_B.Integrator) + positionControl_B.FilterCoefficient;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 800504e:	461a      	mov	r2, r3
 8005050:	4623      	mov	r3, r4
 8005052:	f7fb f923 	bl	800029c <__adddf3>
 8005056:	4603      	mov	r3, r0
 8005058:	460c      	mov	r4, r1
  positionControl_B.Sum = (positionControl_B.ProportionalGain +
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

  // Saturate: '<S47>/Saturation'
  cosOut = positionControl_B.Sum;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8005066:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController_LowerSaturationLi;
 800506a:	4b14      	ldr	r3, [pc, #80]	; (80050bc <_ZN25positionControlModelClass4stepEv+0x1d4>)
 800506c:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8005070:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController_UpperSaturationLi;
 8005074:	4b11      	ldr	r3, [pc, #68]	; (80050bc <_ZN25positionControlModelClass4stepEv+0x1d4>)
 8005076:	e9d3 3436 	ldrd	r3, r4, [r3, #216]	; 0xd8
 800507a:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 800507e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005082:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005086:	f7fb fd4f 	bl	8000b28 <__aeabi_dcmpgt>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <_ZN25positionControlModelClass4stepEv+0x1b4>
    positionControl_B.Saturation = u2;
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005096:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 800509a:	e01a      	b.n	80050d2 <_ZN25positionControlModelClass4stepEv+0x1ea>
  } else if (cosOut < sinOut) {
 800509c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050a0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80050a4:	f7fb fd22 	bl	8000aec <__aeabi_dcmplt>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00c      	beq.n	80050c8 <_ZN25positionControlModelClass4stepEv+0x1e0>
    positionControl_B.Saturation = sinOut;
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80050b4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80050b8:	e00b      	b.n	80050d2 <_ZN25positionControlModelClass4stepEv+0x1ea>
 80050ba:	bf00      	nop
 80050bc:	20000118 	.word	0x20000118
 80050c0:	200000b0 	.word	0x200000b0
 80050c4:	200000a8 	.word	0x200000a8
  } else {
    positionControl_B.Saturation = cosOut;
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80050ce:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

  // Sum: '<S1>/Add4' incorporates:
  //   Inport: '<Root>/estim_y'
  //   Inport: '<Root>/set_y'

  positionControl_B.y_error = positionControl_U.set_y -
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	e9d3 01ba 	ldrd	r0, r1, [r3, #744]	; 0x2e8
    positionControl_U.estim_y;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	e9d3 34c0 	ldrd	r3, r4, [r3, #768]	; 0x300
  positionControl_B.y_error = positionControl_U.set_y -
 80050de:	461a      	mov	r2, r3
 80050e0:	4623      	mov	r3, r4
 80050e2:	f7fb f8d9 	bl	8000298 <__aeabi_dsub>
 80050e6:	4603      	mov	r3, r0
 80050e8:	460c      	mov	r4, r1
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

  // Gain: '<S237>/Proportional Gain'
  positionControl_B.ProportionalGain_p = pos_y_P * positionControl_B.y_error;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 80050f6:	4b46      	ldr	r3, [pc, #280]	; (8005210 <_ZN25positionControlModelClass4stepEv+0x328>)
 80050f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050fc:	461a      	mov	r2, r3
 80050fe:	4623      	mov	r3, r4
 8005100:	f7fb fa82 	bl	8000608 <__aeabi_dmul>
 8005104:	4603      	mov	r3, r0
 8005106:	460c      	mov	r4, r1
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

  // DiscreteIntegrator: '<S232>/Integrator'
  positionControl_B.Integrator_f = positionControl_DW.Integrator_DSTATE_k;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	e9d3 34a0 	ldrd	r3, r4, [r3, #640]	; 0x280
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90

  // Gain: '<S226>/Derivative Gain'
  positionControl_B.DerivativeGain_n = positionControl_P.pos_y_D *
 800511a:	4b3e      	ldr	r3, [pc, #248]	; (8005214 <_ZN25positionControlModelClass4stepEv+0x32c>)
 800511c:	e9d3 0100 	ldrd	r0, r1, [r3]
    positionControl_B.y_error;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
  positionControl_B.DerivativeGain_n = positionControl_P.pos_y_D *
 8005126:	461a      	mov	r2, r3
 8005128:	4623      	mov	r3, r4
 800512a:	f7fb fa6d 	bl	8000608 <__aeabi_dmul>
 800512e:	4603      	mov	r3, r0
 8005130:	460c      	mov	r4, r1
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98

  // DiscreteIntegrator: '<S227>/Filter'
  positionControl_B.Filter_p = positionControl_DW.Filter_DSTATE_m;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	e9d3 34a2 	ldrd	r3, r4, [r3, #648]	; 0x288
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

  // Sum: '<S227>/SumD'
  positionControl_B.SumD_k = positionControl_B.DerivativeGain_n -
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
    positionControl_B.Filter_p;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
  positionControl_B.SumD_k = positionControl_B.DerivativeGain_n -
 8005150:	461a      	mov	r2, r3
 8005152:	4623      	mov	r3, r4
 8005154:	f7fb f8a0 	bl	8000298 <__aeabi_dsub>
 8005158:	4603      	mov	r3, r0
 800515a:	460c      	mov	r4, r1
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8

  // Gain: '<S235>/Filter Coefficient'
  positionControl_B.FilterCoefficient_n = positionControl_P.PIDController4_N *
 8005162:	4b2c      	ldr	r3, [pc, #176]	; (8005214 <_ZN25positionControlModelClass4stepEv+0x32c>)
 8005164:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
    positionControl_B.SumD_k;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
  positionControl_B.FilterCoefficient_n = positionControl_P.PIDController4_N *
 800516e:	461a      	mov	r2, r3
 8005170:	4623      	mov	r3, r4
 8005172:	f7fb fa49 	bl	8000608 <__aeabi_dmul>
 8005176:	4603      	mov	r3, r0
 8005178:	460c      	mov	r4, r1
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

  // Sum: '<S241>/Sum'
  positionControl_B.Sum_k = (positionControl_B.ProportionalGain_p +
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
    positionControl_B.Integrator_f) + positionControl_B.FilterCoefficient_n;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
  positionControl_B.Sum_k = (positionControl_B.ProportionalGain_p +
 800518c:	461a      	mov	r2, r3
 800518e:	4623      	mov	r3, r4
 8005190:	f7fb f884 	bl	800029c <__adddf3>
 8005194:	4603      	mov	r3, r0
 8005196:	460c      	mov	r4, r1
 8005198:	4618      	mov	r0, r3
 800519a:	4621      	mov	r1, r4
    positionControl_B.Integrator_f) + positionControl_B.FilterCoefficient_n;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 80051a2:	461a      	mov	r2, r3
 80051a4:	4623      	mov	r3, r4
 80051a6:	f7fb f879 	bl	800029c <__adddf3>
 80051aa:	4603      	mov	r3, r0
 80051ac:	460c      	mov	r4, r1
  positionControl_B.Sum_k = (positionControl_B.ProportionalGain_p +
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8

  // Saturate: '<S239>/Saturation'
  cosOut = positionControl_B.Sum_k;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	e9d3 342e 	ldrd	r3, r4, [r3, #184]	; 0xb8
 80051ba:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController4_LowerSaturationL;
 80051be:	4b15      	ldr	r3, [pc, #84]	; (8005214 <_ZN25positionControlModelClass4stepEv+0x32c>)
 80051c0:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80051c4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController4_UpperSaturationL;
 80051c8:	4b12      	ldr	r3, [pc, #72]	; (8005214 <_ZN25positionControlModelClass4stepEv+0x32c>)
 80051ca:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 80051ce:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 80051d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80051da:	f7fb fca5 	bl	8000b28 <__aeabi_dcmpgt>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <_ZN25positionControlModelClass4stepEv+0x308>
    positionControl_B.Saturation_o = u2;
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80051ea:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
 80051ee:	e018      	b.n	8005222 <_ZN25positionControlModelClass4stepEv+0x33a>
  } else if (cosOut < sinOut) {
 80051f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80051f8:	f7fb fc78 	bl	8000aec <__aeabi_dcmplt>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <_ZN25positionControlModelClass4stepEv+0x330>
    positionControl_B.Saturation_o = sinOut;
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8005208:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
 800520c:	e009      	b.n	8005222 <_ZN25positionControlModelClass4stepEv+0x33a>
 800520e:	bf00      	nop
 8005210:	200000c8 	.word	0x200000c8
 8005214:	20000118 	.word	0x20000118
  } else {
    positionControl_B.Saturation_o = cosOut;
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800521e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0

  // Sum: '<S1>/Add1' incorporates:
  //   Inport: '<Root>/estim_dx'
  //   Inport: '<Root>/estim_dy'

  positionControl_B.Add1[0] = positionControl_U.estim_dx -
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	e9d3 01c4 	ldrd	r0, r1, [r3, #784]	; 0x310
    positionControl_B.Saturation;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
  positionControl_B.Add1[0] = positionControl_U.estim_dx -
 800522e:	461a      	mov	r2, r3
 8005230:	4623      	mov	r3, r4
 8005232:	f7fb f831 	bl	8000298 <__aeabi_dsub>
 8005236:	4603      	mov	r3, r0
 8005238:	460c      	mov	r4, r1
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
  positionControl_B.Add1[1] = positionControl_U.estim_dy -
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	e9d3 01c6 	ldrd	r0, r1, [r3, #792]	; 0x318
    positionControl_B.Saturation_o;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	e9d3 3430 	ldrd	r3, r4, [r3, #192]	; 0xc0
  positionControl_B.Add1[1] = positionControl_U.estim_dy -
 800524c:	461a      	mov	r2, r3
 800524e:	4623      	mov	r3, r4
 8005250:	f7fb f822 	bl	8000298 <__aeabi_dsub>
 8005254:	4603      	mov	r3, r0
 8005256:	460c      	mov	r4, r1
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0

  // Product: '<S1>/Matrix Multiply'
  cosOut = positionControl_B.MatrixConcatenate[0];
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8005264:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_B.MatrixConcatenate[1];
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800526e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_B.MatrixConcatenate[2];
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8005278:	e9c7 3408 	strd	r3, r4, [r7, #32]
  tmp = positionControl_B.MatrixConcatenate[3];
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005282:	e9c7 3406 	strd	r3, r4, [r7, #24]
  tmp_0 = positionControl_B.Add1[0];
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 800528c:	e9c7 3404 	strd	r3, r4, [r7, #16]
  tmp_1 = positionControl_B.Add1[1];
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	e9d3 3434 	ldrd	r3, r4, [r3, #208]	; 0xd0
 8005296:	e9c7 3402 	strd	r3, r4, [r7, #8]
  cosOut *= tmp_0;
 800529a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800529e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80052a2:	f7fb f9b1 	bl	8000608 <__aeabi_dmul>
 80052a6:	4603      	mov	r3, r0
 80052a8:	460c      	mov	r4, r1
 80052aa:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  cosOut += u2 * tmp_1;
 80052ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80052b6:	f7fb f9a7 	bl	8000608 <__aeabi_dmul>
 80052ba:	4603      	mov	r3, r0
 80052bc:	460c      	mov	r4, r1
 80052be:	461a      	mov	r2, r3
 80052c0:	4623      	mov	r3, r4
 80052c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80052c6:	f7fa ffe9 	bl	800029c <__adddf3>
 80052ca:	4603      	mov	r3, r0
 80052cc:	460c      	mov	r4, r1
 80052ce:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  positionControl_B.vel_error[0] = cosOut;
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80052d8:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
  sinOut *= tmp_0;
 80052dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80052e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80052e4:	f7fb f990 	bl	8000608 <__aeabi_dmul>
 80052e8:	4603      	mov	r3, r0
 80052ea:	460c      	mov	r4, r1
 80052ec:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  sinOut += tmp * tmp_1;
 80052f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80052f8:	f7fb f986 	bl	8000608 <__aeabi_dmul>
 80052fc:	4603      	mov	r3, r0
 80052fe:	460c      	mov	r4, r1
 8005300:	461a      	mov	r2, r3
 8005302:	4623      	mov	r3, r4
 8005304:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005308:	f7fa ffc8 	bl	800029c <__adddf3>
 800530c:	4603      	mov	r3, r0
 800530e:	460c      	mov	r4, r1
 8005310:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  positionControl_B.vel_error[1] = sinOut;
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800531a:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0

  // Gain: '<S285>/Proportional Gain'
  positionControl_B.ProportionalGain_m = pos_y_vel_P *
    positionControl_B.vel_error[1];
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
  positionControl_B.ProportionalGain_m = pos_y_vel_P *
 8005324:	4b95      	ldr	r3, [pc, #596]	; (800557c <_ZN25positionControlModelClass4stepEv+0x694>)
 8005326:	e9d3 3400 	ldrd	r3, r4, [r3]
 800532a:	461a      	mov	r2, r3
 800532c:	4623      	mov	r3, r4
 800532e:	f7fb f96b 	bl	8000608 <__aeabi_dmul>
 8005332:	4603      	mov	r3, r0
 8005334:	460c      	mov	r4, r1
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8

  // DiscreteIntegrator: '<S280>/Integrator'
  positionControl_B.Integrator_h = positionControl_DW.Integrator_DSTATE_f;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	e9d3 34a4 	ldrd	r3, r4, [r3, #656]	; 0x290
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

  // Gain: '<S274>/Derivative Gain'
  positionControl_B.DerivativeGain_c = pos_y_vel_D *
    positionControl_B.vel_error[1];
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
  positionControl_B.DerivativeGain_c = pos_y_vel_D *
 800534e:	4b8c      	ldr	r3, [pc, #560]	; (8005580 <_ZN25positionControlModelClass4stepEv+0x698>)
 8005350:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005354:	461a      	mov	r2, r3
 8005356:	4623      	mov	r3, r4
 8005358:	f7fb f956 	bl	8000608 <__aeabi_dmul>
 800535c:	4603      	mov	r3, r0
 800535e:	460c      	mov	r4, r1
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	e9c2 343e 	strd	r3, r4, [r2, #248]	; 0xf8

  // DiscreteIntegrator: '<S275>/Filter'
  positionControl_B.Filter_g = positionControl_DW.Filter_DSTATE_j;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	e9d3 34a6 	ldrd	r3, r4, [r3, #664]	; 0x298
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100

  // Sum: '<S275>/SumD'
  positionControl_B.SumD_f = positionControl_B.DerivativeGain_c -
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	; 0xf8
    positionControl_B.Filter_g;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
  positionControl_B.SumD_f = positionControl_B.DerivativeGain_c -
 800537e:	461a      	mov	r2, r3
 8005380:	4623      	mov	r3, r4
 8005382:	f7fa ff89 	bl	8000298 <__aeabi_dsub>
 8005386:	4603      	mov	r3, r0
 8005388:	460c      	mov	r4, r1
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	e9c2 3442 	strd	r3, r4, [r2, #264]	; 0x108

  // Gain: '<S283>/Filter Coefficient'
  positionControl_B.FilterCoefficient_e = positionControl_P.PIDController5_N *
 8005390:	4b7c      	ldr	r3, [pc, #496]	; (8005584 <_ZN25positionControlModelClass4stepEv+0x69c>)
 8005392:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
    positionControl_B.SumD_f;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
  positionControl_B.FilterCoefficient_e = positionControl_P.PIDController5_N *
 800539c:	461a      	mov	r2, r3
 800539e:	4623      	mov	r3, r4
 80053a0:	f7fb f932 	bl	8000608 <__aeabi_dmul>
 80053a4:	4603      	mov	r3, r0
 80053a6:	460c      	mov	r4, r1
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	e9c2 3444 	strd	r3, r4, [r2, #272]	; 0x110

  // Sum: '<S289>/Sum'
  positionControl_B.Sum_m = (positionControl_B.ProportionalGain_m +
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
    positionControl_B.Integrator_h) + positionControl_B.FilterCoefficient_e;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	e9d3 343c 	ldrd	r3, r4, [r3, #240]	; 0xf0
  positionControl_B.Sum_m = (positionControl_B.ProportionalGain_m +
 80053ba:	461a      	mov	r2, r3
 80053bc:	4623      	mov	r3, r4
 80053be:	f7fa ff6d 	bl	800029c <__adddf3>
 80053c2:	4603      	mov	r3, r0
 80053c4:	460c      	mov	r4, r1
 80053c6:	4618      	mov	r0, r3
 80053c8:	4621      	mov	r1, r4
    positionControl_B.Integrator_h) + positionControl_B.FilterCoefficient_e;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	e9d3 3444 	ldrd	r3, r4, [r3, #272]	; 0x110
 80053d0:	461a      	mov	r2, r3
 80053d2:	4623      	mov	r3, r4
 80053d4:	f7fa ff62 	bl	800029c <__adddf3>
 80053d8:	4603      	mov	r3, r0
 80053da:	460c      	mov	r4, r1
  positionControl_B.Sum_m = (positionControl_B.ProportionalGain_m +
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	e9c2 3446 	strd	r3, r4, [r2, #280]	; 0x118

  // Saturate: '<S287>/Saturation'
  cosOut = positionControl_B.Sum_m;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	e9d3 3446 	ldrd	r3, r4, [r3, #280]	; 0x118
 80053e8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController5_LowerSaturationL;
 80053ec:	4b65      	ldr	r3, [pc, #404]	; (8005584 <_ZN25positionControlModelClass4stepEv+0x69c>)
 80053ee:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 80053f2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController5_UpperSaturationL;
 80053f6:	4b63      	ldr	r3, [pc, #396]	; (8005584 <_ZN25positionControlModelClass4stepEv+0x69c>)
 80053f8:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 80053fc:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 8005400:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005404:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005408:	f7fb fb8e 	bl	8000b28 <__aeabi_dcmpgt>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <_ZN25positionControlModelClass4stepEv+0x536>
    positionControl_B.Saturation_l = u2;
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005418:	e9c2 3448 	strd	r3, r4, [r2, #288]	; 0x120
 800541c:	e013      	b.n	8005446 <_ZN25positionControlModelClass4stepEv+0x55e>
  } else if (cosOut < sinOut) {
 800541e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005422:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005426:	f7fb fb61 	bl	8000aec <__aeabi_dcmplt>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d005      	beq.n	800543c <_ZN25positionControlModelClass4stepEv+0x554>
    positionControl_B.Saturation_l = sinOut;
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8005436:	e9c2 3448 	strd	r3, r4, [r2, #288]	; 0x120
 800543a:	e004      	b.n	8005446 <_ZN25positionControlModelClass4stepEv+0x55e>
  } else {
    positionControl_B.Saturation_l = cosOut;
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005442:	e9c2 3448 	strd	r3, r4, [r2, #288]	; 0x120
  }

  // End of Saturate: '<S287>/Saturation'

  // Gain: '<S1>/Gain1'
  positionControl_B.Gain1 = positionControl_P.Gain1_Gain *
 8005446:	4b4f      	ldr	r3, [pc, #316]	; (8005584 <_ZN25positionControlModelClass4stepEv+0x69c>)
 8005448:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
    positionControl_B.Saturation_l;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	e9d3 3448 	ldrd	r3, r4, [r3, #288]	; 0x120
  positionControl_B.Gain1 = positionControl_P.Gain1_Gain *
 8005452:	461a      	mov	r2, r3
 8005454:	4623      	mov	r3, r4
 8005456:	f7fb f8d7 	bl	8000608 <__aeabi_dmul>
 800545a:	4603      	mov	r3, r0
 800545c:	460c      	mov	r4, r1
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	e9c2 344a 	strd	r3, r4, [r2, #296]	; 0x128

  // Outport: '<Root>/des_roll' incorporates:
  //   DataTypeConversion: '<S1>/Data Type Conversion3'

  positionControl_Y.des_roll = static_cast<real32_T>(positionControl_B.Gain1);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	e9d3 344a 	ldrd	r3, r4, [r3, #296]	; 0x128
 800546a:	4618      	mov	r0, r3
 800546c:	4621      	mov	r1, r4
 800546e:	f7fb fbc3 	bl	8000bf8 <__aeabi_d2f>
 8005472:	4602      	mov	r2, r0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

  // Gain: '<S93>/Proportional Gain'
  positionControl_B.ProportionalGain_h = pos_x_vel_P *
    positionControl_B.vel_error[0];
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
  positionControl_B.ProportionalGain_h = pos_x_vel_P *
 8005480:	4b41      	ldr	r3, [pc, #260]	; (8005588 <_ZN25positionControlModelClass4stepEv+0x6a0>)
 8005482:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005486:	461a      	mov	r2, r3
 8005488:	4623      	mov	r3, r4
 800548a:	f7fb f8bd 	bl	8000608 <__aeabi_dmul>
 800548e:	4603      	mov	r3, r0
 8005490:	460c      	mov	r4, r1
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	e9c2 344c 	strd	r3, r4, [r2, #304]	; 0x130

  // DiscreteIntegrator: '<S88>/Integrator'
  positionControl_B.Integrator_c = positionControl_DW.Integrator_DSTATE_m;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	e9d3 34a8 	ldrd	r3, r4, [r3, #672]	; 0x2a0
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	e9c2 344e 	strd	r3, r4, [r2, #312]	; 0x138

  // Gain: '<S82>/Derivative Gain'
  positionControl_B.DerivativeGain_p = pos_x_vel_D *
    positionControl_B.vel_error[0];
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
  positionControl_B.DerivativeGain_p = pos_x_vel_D *
 80054aa:	4b38      	ldr	r3, [pc, #224]	; (800558c <_ZN25positionControlModelClass4stepEv+0x6a4>)
 80054ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054b0:	461a      	mov	r2, r3
 80054b2:	4623      	mov	r3, r4
 80054b4:	f7fb f8a8 	bl	8000608 <__aeabi_dmul>
 80054b8:	4603      	mov	r3, r0
 80054ba:	460c      	mov	r4, r1
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	e9c2 3450 	strd	r3, r4, [r2, #320]	; 0x140

  // DiscreteIntegrator: '<S83>/Filter'
  positionControl_B.Filter_i = positionControl_DW.Filter_DSTATE_d;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	e9d3 34aa 	ldrd	r3, r4, [r3, #680]	; 0x2a8
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	e9c2 3452 	strd	r3, r4, [r2, #328]	; 0x148

  // Sum: '<S83>/SumD'
  positionControl_B.SumD_h = positionControl_B.DerivativeGain_p -
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
    positionControl_B.Filter_i;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	e9d3 3452 	ldrd	r3, r4, [r3, #328]	; 0x148
  positionControl_B.SumD_h = positionControl_B.DerivativeGain_p -
 80054da:	461a      	mov	r2, r3
 80054dc:	4623      	mov	r3, r4
 80054de:	f7fa fedb 	bl	8000298 <__aeabi_dsub>
 80054e2:	4603      	mov	r3, r0
 80054e4:	460c      	mov	r4, r1
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	e9c2 3454 	strd	r3, r4, [r2, #336]	; 0x150

  // Gain: '<S91>/Filter Coefficient'
  positionControl_B.FilterCoefficient_f = positionControl_P.PIDController1_N *
 80054ec:	4b25      	ldr	r3, [pc, #148]	; (8005584 <_ZN25positionControlModelClass4stepEv+0x69c>)
 80054ee:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
    positionControl_B.SumD_h;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	e9d3 3454 	ldrd	r3, r4, [r3, #336]	; 0x150
  positionControl_B.FilterCoefficient_f = positionControl_P.PIDController1_N *
 80054f8:	461a      	mov	r2, r3
 80054fa:	4623      	mov	r3, r4
 80054fc:	f7fb f884 	bl	8000608 <__aeabi_dmul>
 8005500:	4603      	mov	r3, r0
 8005502:	460c      	mov	r4, r1
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	e9c2 3456 	strd	r3, r4, [r2, #344]	; 0x158

  // Sum: '<S97>/Sum'
  positionControl_B.Sum_o = (positionControl_B.ProportionalGain_h +
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	e9d3 014c 	ldrd	r0, r1, [r3, #304]	; 0x130
    positionControl_B.Integrator_c) + positionControl_B.FilterCoefficient_f;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	e9d3 344e 	ldrd	r3, r4, [r3, #312]	; 0x138
  positionControl_B.Sum_o = (positionControl_B.ProportionalGain_h +
 8005516:	461a      	mov	r2, r3
 8005518:	4623      	mov	r3, r4
 800551a:	f7fa febf 	bl	800029c <__adddf3>
 800551e:	4603      	mov	r3, r0
 8005520:	460c      	mov	r4, r1
 8005522:	4618      	mov	r0, r3
 8005524:	4621      	mov	r1, r4
    positionControl_B.Integrator_c) + positionControl_B.FilterCoefficient_f;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	e9d3 3456 	ldrd	r3, r4, [r3, #344]	; 0x158
 800552c:	461a      	mov	r2, r3
 800552e:	4623      	mov	r3, r4
 8005530:	f7fa feb4 	bl	800029c <__adddf3>
 8005534:	4603      	mov	r3, r0
 8005536:	460c      	mov	r4, r1
  positionControl_B.Sum_o = (positionControl_B.ProportionalGain_h +
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	e9c2 3458 	strd	r3, r4, [r2, #352]	; 0x160

  // Saturate: '<S95>/Saturation'
  cosOut = positionControl_B.Sum_o;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	e9d3 3458 	ldrd	r3, r4, [r3, #352]	; 0x160
 8005544:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController1_LowerSaturationL;
 8005548:	4b0e      	ldr	r3, [pc, #56]	; (8005584 <_ZN25positionControlModelClass4stepEv+0x69c>)
 800554a:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 800554e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController1_UpperSaturationL;
 8005552:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <_ZN25positionControlModelClass4stepEv+0x69c>)
 8005554:	e9d3 343c 	ldrd	r3, r4, [r3, #240]	; 0xf0
 8005558:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 800555c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005560:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005564:	f7fb fae0 	bl	8000b28 <__aeabi_dcmpgt>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d010      	beq.n	8005590 <_ZN25positionControlModelClass4stepEv+0x6a8>
    positionControl_B.Saturation_j = u2;
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005574:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
 8005578:	e01e      	b.n	80055b8 <_ZN25positionControlModelClass4stepEv+0x6d0>
 800557a:	bf00      	nop
 800557c:	200000e0 	.word	0x200000e0
 8005580:	200000d0 	.word	0x200000d0
 8005584:	20000118 	.word	0x20000118
 8005588:	200000c0 	.word	0x200000c0
 800558c:	200000b8 	.word	0x200000b8
  } else if (cosOut < sinOut) {
 8005590:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005594:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005598:	f7fb faa8 	bl	8000aec <__aeabi_dcmplt>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d005      	beq.n	80055ae <_ZN25positionControlModelClass4stepEv+0x6c6>
    positionControl_B.Saturation_j = sinOut;
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80055a8:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
 80055ac:	e004      	b.n	80055b8 <_ZN25positionControlModelClass4stepEv+0x6d0>
  } else {
    positionControl_B.Saturation_j = cosOut;
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80055b4:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168

  // Outport: '<Root>/des_pitch' incorporates:
  //   DataTypeConversion: '<S1>/Data Type Conversion2'

  positionControl_Y.des_pitch = static_cast<real32_T>
    (positionControl_B.Saturation_j);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
  positionControl_Y.des_pitch = static_cast<real32_T>
 80055be:	4618      	mov	r0, r3
 80055c0:	4621      	mov	r1, r4
 80055c2:	f7fb fb19 	bl	8000bf8 <__aeabi_d2f>
 80055c6:	4602      	mov	r2, r0
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c

  // Sum: '<S1>/Sum' incorporates:
  //   Inport: '<Root>/set_yaw'

  positionControl_B.Sum_my = positionControl_U.set_yaw -
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	e9d3 01b6 	ldrd	r0, r1, [r3, #728]	; 0x2d8
    positionControl_B.DataTypeConversion;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	e9d3 3400 	ldrd	r3, r4, [r3]
  positionControl_B.Sum_my = positionControl_U.set_yaw -
 80055da:	461a      	mov	r2, r3
 80055dc:	4623      	mov	r3, r4
 80055de:	f7fa fe5b 	bl	8000298 <__aeabi_dsub>
 80055e2:	4603      	mov	r3, r0
 80055e4:	460c      	mov	r4, r1
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	e9c2 345c 	strd	r3, r4, [r2, #368]	; 0x170

  // Gain: '<S1>/Gain'
  positionControl_B.Gain = Yaw_angleToRate_P * positionControl_B.Sum_my;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	e9d3 015c 	ldrd	r0, r1, [r3, #368]	; 0x170
 80055f2:	4b5a      	ldr	r3, [pc, #360]	; (800575c <_ZN25positionControlModelClass4stepEv+0x874>)
 80055f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055f8:	461a      	mov	r2, r3
 80055fa:	4623      	mov	r3, r4
 80055fc:	f7fb f804 	bl	8000608 <__aeabi_dmul>
 8005600:	4603      	mov	r3, r0
 8005602:	460c      	mov	r4, r1
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	e9c2 345e 	strd	r3, r4, [r2, #376]	; 0x178

  // Outport: '<Root>/des_yaw_rate' incorporates:
  //   DataTypeConversion: '<S1>/Data Type Conversion1'

  positionControl_Y.des_yaw_rate = static_cast<real32_T>(positionControl_B.Gain);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	e9d3 345e 	ldrd	r3, r4, [r3, #376]	; 0x178
 8005610:	4618      	mov	r0, r3
 8005612:	4621      	mov	r1, r4
 8005614:	f7fb faf0 	bl	8000bf8 <__aeabi_d2f>
 8005618:	4602      	mov	r2, r0
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330

  // Sum: '<S1>/Add2' incorporates:
  //   Inport: '<Root>/estim_z'
  //   Inport: '<Root>/set_z'

  positionControl_B.alt_error = positionControl_U.set_z -
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	e9d3 01bc 	ldrd	r0, r1, [r3, #752]	; 0x2f0
    positionControl_U.estim_z;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	e9d3 34c2 	ldrd	r3, r4, [r3, #776]	; 0x308
  positionControl_B.alt_error = positionControl_U.set_z -
 800562c:	461a      	mov	r2, r3
 800562e:	4623      	mov	r3, r4
 8005630:	f7fa fe32 	bl	8000298 <__aeabi_dsub>
 8005634:	4603      	mov	r3, r0
 8005636:	460c      	mov	r4, r1
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	e9c2 3460 	strd	r3, r4, [r2, #384]	; 0x180

  // Gain: '<S141>/Proportional Gain'
  positionControl_B.ProportionalGain_p4 = pos_z_P * positionControl_B.alt_error;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	e9d3 0160 	ldrd	r0, r1, [r3, #384]	; 0x180
 8005644:	4b46      	ldr	r3, [pc, #280]	; (8005760 <_ZN25positionControlModelClass4stepEv+0x878>)
 8005646:	e9d3 3400 	ldrd	r3, r4, [r3]
 800564a:	461a      	mov	r2, r3
 800564c:	4623      	mov	r3, r4
 800564e:	f7fa ffdb 	bl	8000608 <__aeabi_dmul>
 8005652:	4603      	mov	r3, r0
 8005654:	460c      	mov	r4, r1
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	e9c2 3462 	strd	r3, r4, [r2, #392]	; 0x188

  // DiscreteIntegrator: '<S136>/Integrator'
  positionControl_B.Integrator_b = positionControl_DW.Integrator_DSTATE_j;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	e9d3 34ac 	ldrd	r3, r4, [r3, #688]	; 0x2b0
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	e9c2 3464 	strd	r3, r4, [r2, #400]	; 0x190

  // Gain: '<S130>/Derivative Gain'
  positionControl_B.DerivativeGain_b = pos_z_D * positionControl_B.alt_error;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	e9d3 0160 	ldrd	r0, r1, [r3, #384]	; 0x180
 800566e:	4b3d      	ldr	r3, [pc, #244]	; (8005764 <_ZN25positionControlModelClass4stepEv+0x87c>)
 8005670:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005674:	461a      	mov	r2, r3
 8005676:	4623      	mov	r3, r4
 8005678:	f7fa ffc6 	bl	8000608 <__aeabi_dmul>
 800567c:	4603      	mov	r3, r0
 800567e:	460c      	mov	r4, r1
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198

  // DiscreteIntegrator: '<S131>/Filter'
  positionControl_B.Filter_o = positionControl_DW.Filter_DSTATE_mf;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	e9d3 34ae 	ldrd	r3, r4, [r3, #696]	; 0x2b8
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

  // Sum: '<S131>/SumD'
  positionControl_B.SumD_m = positionControl_B.DerivativeGain_b -
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	e9d3 0166 	ldrd	r0, r1, [r3, #408]	; 0x198
    positionControl_B.Filter_o;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	e9d3 3468 	ldrd	r3, r4, [r3, #416]	; 0x1a0
  positionControl_B.SumD_m = positionControl_B.DerivativeGain_b -
 800569e:	461a      	mov	r2, r3
 80056a0:	4623      	mov	r3, r4
 80056a2:	f7fa fdf9 	bl	8000298 <__aeabi_dsub>
 80056a6:	4603      	mov	r3, r0
 80056a8:	460c      	mov	r4, r1
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8

  // Gain: '<S139>/Filter Coefficient'
  positionControl_B.FilterCoefficient_d = positionControl_P.PIDController2_N *
 80056b0:	4b2d      	ldr	r3, [pc, #180]	; (8005768 <_ZN25positionControlModelClass4stepEv+0x880>)
 80056b2:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
    positionControl_B.SumD_m;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	e9d3 346a 	ldrd	r3, r4, [r3, #424]	; 0x1a8
  positionControl_B.FilterCoefficient_d = positionControl_P.PIDController2_N *
 80056bc:	461a      	mov	r2, r3
 80056be:	4623      	mov	r3, r4
 80056c0:	f7fa ffa2 	bl	8000608 <__aeabi_dmul>
 80056c4:	4603      	mov	r3, r0
 80056c6:	460c      	mov	r4, r1
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0

  // Sum: '<S145>/Sum'
  positionControl_B.Sum_f = (positionControl_B.ProportionalGain_p4 +
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	e9d3 0162 	ldrd	r0, r1, [r3, #392]	; 0x188
    positionControl_B.Integrator_b) + positionControl_B.FilterCoefficient_d;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
  positionControl_B.Sum_f = (positionControl_B.ProportionalGain_p4 +
 80056da:	461a      	mov	r2, r3
 80056dc:	4623      	mov	r3, r4
 80056de:	f7fa fddd 	bl	800029c <__adddf3>
 80056e2:	4603      	mov	r3, r0
 80056e4:	460c      	mov	r4, r1
 80056e6:	4618      	mov	r0, r3
 80056e8:	4621      	mov	r1, r4
    positionControl_B.Integrator_b) + positionControl_B.FilterCoefficient_d;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	e9d3 346c 	ldrd	r3, r4, [r3, #432]	; 0x1b0
 80056f0:	461a      	mov	r2, r3
 80056f2:	4623      	mov	r3, r4
 80056f4:	f7fa fdd2 	bl	800029c <__adddf3>
 80056f8:	4603      	mov	r3, r0
 80056fa:	460c      	mov	r4, r1
  positionControl_B.Sum_f = (positionControl_B.ProportionalGain_p4 +
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	e9c2 346e 	strd	r3, r4, [r2, #440]	; 0x1b8

  // Saturate: '<S143>/Saturation'
  cosOut = positionControl_B.Sum_f;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	e9d3 346e 	ldrd	r3, r4, [r3, #440]	; 0x1b8
 8005708:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController2_LowerSaturationL;
 800570c:	4b16      	ldr	r3, [pc, #88]	; (8005768 <_ZN25positionControlModelClass4stepEv+0x880>)
 800570e:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 8005712:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController2_UpperSaturationL;
 8005716:	4b14      	ldr	r3, [pc, #80]	; (8005768 <_ZN25positionControlModelClass4stepEv+0x880>)
 8005718:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 800571c:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 8005720:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005724:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005728:	f7fb f9fe 	bl	8000b28 <__aeabi_dcmpgt>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d005      	beq.n	800573e <_ZN25positionControlModelClass4stepEv+0x856>
    positionControl_B.Saturation_m = u2;
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005738:	e9c2 3470 	strd	r3, r4, [r2, #448]	; 0x1c0
 800573c:	e01b      	b.n	8005776 <_ZN25positionControlModelClass4stepEv+0x88e>
  } else if (cosOut < sinOut) {
 800573e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005742:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005746:	f7fb f9d1 	bl	8000aec <__aeabi_dcmplt>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00d      	beq.n	800576c <_ZN25positionControlModelClass4stepEv+0x884>
    positionControl_B.Saturation_m = sinOut;
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8005756:	e9c2 3470 	strd	r3, r4, [r2, #448]	; 0x1c0
 800575a:	e00c      	b.n	8005776 <_ZN25positionControlModelClass4stepEv+0x88e>
 800575c:	200000a0 	.word	0x200000a0
 8005760:	200000f8 	.word	0x200000f8
 8005764:	200000e8 	.word	0x200000e8
 8005768:	20000118 	.word	0x20000118
  } else {
    positionControl_B.Saturation_m = cosOut;
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005772:	e9c2 3470 	strd	r3, r4, [r2, #448]	; 0x1c0
  // End of Saturate: '<S143>/Saturation'

  // Sum: '<S1>/Add3' incorporates:
  //   Inport: '<Root>/estim_dz'

  positionControl_B.vz_error = positionControl_B.Saturation_m -
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	e9d3 0170 	ldrd	r0, r1, [r3, #448]	; 0x1c0
    positionControl_U.estim_dz;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	e9d3 34c8 	ldrd	r3, r4, [r3, #800]	; 0x320
  positionControl_B.vz_error = positionControl_B.Saturation_m -
 8005782:	461a      	mov	r2, r3
 8005784:	4623      	mov	r3, r4
 8005786:	f7fa fd87 	bl	8000298 <__aeabi_dsub>
 800578a:	4603      	mov	r3, r0
 800578c:	460c      	mov	r4, r1
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	e9c2 3472 	strd	r3, r4, [r2, #456]	; 0x1c8

  // Gain: '<S189>/Proportional Gain'
  positionControl_B.ProportionalGain_k = pos_z_vel_P *
    positionControl_B.vz_error;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	e9d3 0172 	ldrd	r0, r1, [r3, #456]	; 0x1c8
  positionControl_B.ProportionalGain_k = pos_z_vel_P *
 800579a:	4b46      	ldr	r3, [pc, #280]	; (80058b4 <_ZN25positionControlModelClass4stepEv+0x9cc>)
 800579c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80057a0:	461a      	mov	r2, r3
 80057a2:	4623      	mov	r3, r4
 80057a4:	f7fa ff30 	bl	8000608 <__aeabi_dmul>
 80057a8:	4603      	mov	r3, r0
 80057aa:	460c      	mov	r4, r1
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	e9c2 3474 	strd	r3, r4, [r2, #464]	; 0x1d0

  // DiscreteIntegrator: '<S184>/Integrator'
  positionControl_B.Integrator_p = positionControl_DW.Integrator_DSTATE_b;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	e9c2 3476 	strd	r3, r4, [r2, #472]	; 0x1d8

  // Gain: '<S178>/Derivative Gain'
  positionControl_B.DerivativeGain_pu = pos_z_vel_D * positionControl_B.vz_error;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	e9d3 0172 	ldrd	r0, r1, [r3, #456]	; 0x1c8
 80057c4:	4b3c      	ldr	r3, [pc, #240]	; (80058b8 <_ZN25positionControlModelClass4stepEv+0x9d0>)
 80057c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80057ca:	461a      	mov	r2, r3
 80057cc:	4623      	mov	r3, r4
 80057ce:	f7fa ff1b 	bl	8000608 <__aeabi_dmul>
 80057d2:	4603      	mov	r3, r0
 80057d4:	460c      	mov	r4, r1
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	e9c2 3478 	strd	r3, r4, [r2, #480]	; 0x1e0

  // DiscreteIntegrator: '<S179>/Filter'
  positionControl_B.Filter_m = positionControl_DW.Filter_DSTATE_e;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	e9d3 34b2 	ldrd	r3, r4, [r3, #712]	; 0x2c8
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	e9c2 347a 	strd	r3, r4, [r2, #488]	; 0x1e8

  // Sum: '<S179>/SumD'
  positionControl_B.SumD_b = positionControl_B.DerivativeGain_pu -
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	e9d3 0178 	ldrd	r0, r1, [r3, #480]	; 0x1e0
    positionControl_B.Filter_m;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	e9d3 347a 	ldrd	r3, r4, [r3, #488]	; 0x1e8
  positionControl_B.SumD_b = positionControl_B.DerivativeGain_pu -
 80057f4:	461a      	mov	r2, r3
 80057f6:	4623      	mov	r3, r4
 80057f8:	f7fa fd4e 	bl	8000298 <__aeabi_dsub>
 80057fc:	4603      	mov	r3, r0
 80057fe:	460c      	mov	r4, r1
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	e9c2 347c 	strd	r3, r4, [r2, #496]	; 0x1f0

  // Gain: '<S187>/Filter Coefficient'
  positionControl_B.FilterCoefficient_a = positionControl_P.PIDController3_N *
 8005806:	4b2d      	ldr	r3, [pc, #180]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x9d4>)
 8005808:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	; 0xd0
    positionControl_B.SumD_b;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	e9d3 347c 	ldrd	r3, r4, [r3, #496]	; 0x1f0
  positionControl_B.FilterCoefficient_a = positionControl_P.PIDController3_N *
 8005812:	461a      	mov	r2, r3
 8005814:	4623      	mov	r3, r4
 8005816:	f7fa fef7 	bl	8000608 <__aeabi_dmul>
 800581a:	4603      	mov	r3, r0
 800581c:	460c      	mov	r4, r1
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8

  // Sum: '<S193>/Sum'
  positionControl_B.Sum_c = (positionControl_B.ProportionalGain_k +
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	e9d3 0174 	ldrd	r0, r1, [r3, #464]	; 0x1d0
    positionControl_B.Integrator_p) + positionControl_B.FilterCoefficient_a;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	e9d3 3476 	ldrd	r3, r4, [r3, #472]	; 0x1d8
  positionControl_B.Sum_c = (positionControl_B.ProportionalGain_k +
 8005830:	461a      	mov	r2, r3
 8005832:	4623      	mov	r3, r4
 8005834:	f7fa fd32 	bl	800029c <__adddf3>
 8005838:	4603      	mov	r3, r0
 800583a:	460c      	mov	r4, r1
 800583c:	4618      	mov	r0, r3
 800583e:	4621      	mov	r1, r4
    positionControl_B.Integrator_p) + positionControl_B.FilterCoefficient_a;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8005846:	461a      	mov	r2, r3
 8005848:	4623      	mov	r3, r4
 800584a:	f7fa fd27 	bl	800029c <__adddf3>
 800584e:	4603      	mov	r3, r0
 8005850:	460c      	mov	r4, r1
  positionControl_B.Sum_c = (positionControl_B.ProportionalGain_k +
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	e9c2 3480 	strd	r3, r4, [r2, #512]	; 0x200

  // Saturate: '<S191>/Saturation'
  cosOut = positionControl_B.Sum_c;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	e9d3 3480 	ldrd	r3, r4, [r3, #512]	; 0x200
 800585e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController3_LowerSaturationL;
 8005862:	4b16      	ldr	r3, [pc, #88]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x9d4>)
 8005864:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 8005868:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController3_UpperSaturationL;
 800586c:	4b13      	ldr	r3, [pc, #76]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x9d4>)
 800586e:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 8005872:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 8005876:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800587a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800587e:	f7fb f953 	bl	8000b28 <__aeabi_dcmpgt>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d005      	beq.n	8005894 <_ZN25positionControlModelClass4stepEv+0x9ac>
    positionControl_B.Saturation_li = u2;
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800588e:	e9c2 3482 	strd	r3, r4, [r2, #520]	; 0x208
 8005892:	e01a      	b.n	80058ca <_ZN25positionControlModelClass4stepEv+0x9e2>
  } else if (cosOut < sinOut) {
 8005894:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005898:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800589c:	f7fb f926 	bl	8000aec <__aeabi_dcmplt>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00c      	beq.n	80058c0 <_ZN25positionControlModelClass4stepEv+0x9d8>
    positionControl_B.Saturation_li = sinOut;
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80058ac:	e9c2 3482 	strd	r3, r4, [r2, #520]	; 0x208
 80058b0:	e00b      	b.n	80058ca <_ZN25positionControlModelClass4stepEv+0x9e2>
 80058b2:	bf00      	nop
 80058b4:	20000110 	.word	0x20000110
 80058b8:	20000100 	.word	0x20000100
 80058bc:	20000118 	.word	0x20000118
  } else {
    positionControl_B.Saturation_li = cosOut;
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80058c6:	e9c2 3482 	strd	r3, r4, [r2, #520]	; 0x208

  // Outport: '<Root>/des_Thrust' incorporates:
  //   DataTypeConversion: '<S1>/Data Type Conversion4'

  positionControl_Y.des_Thrust = static_cast<real32_T>
    (positionControl_B.Saturation_li);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	e9d3 3482 	ldrd	r3, r4, [r3, #520]	; 0x208
  positionControl_Y.des_Thrust = static_cast<real32_T>
 80058d0:	4618      	mov	r0, r3
 80058d2:	4621      	mov	r1, r4
 80058d4:	f7fb f990 	bl	8000bf8 <__aeabi_d2f>
 80058d8:	4602      	mov	r2, r0
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334

  // Gain: '<S37>/Integral Gain'
  positionControl_B.IntegralGain = pos_x_I * positionControl_B.x_error;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80058e6:	4ba1      	ldr	r3, [pc, #644]	; (8005b6c <_ZN25positionControlModelClass4stepEv+0xc84>)
 80058e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80058ec:	461a      	mov	r2, r3
 80058ee:	4623      	mov	r3, r4
 80058f0:	f7fa fe8a 	bl	8000608 <__aeabi_dmul>
 80058f4:	4603      	mov	r3, r0
 80058f6:	460c      	mov	r4, r1
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	e9c2 3484 	strd	r3, r4, [r2, #528]	; 0x210

  // Sum: '<S81>/SumI2'
  positionControl_B.SumI2 = positionControl_B.Saturation_j -
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
    positionControl_B.Sum_o;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	e9d3 3458 	ldrd	r3, r4, [r3, #352]	; 0x160
  positionControl_B.SumI2 = positionControl_B.Saturation_j -
 800590a:	461a      	mov	r2, r3
 800590c:	4623      	mov	r3, r4
 800590e:	f7fa fcc3 	bl	8000298 <__aeabi_dsub>
 8005912:	4603      	mov	r3, r0
 8005914:	460c      	mov	r4, r1
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	e9c2 3486 	strd	r3, r4, [r2, #536]	; 0x218

  // Gain: '<S81>/Kb'
  positionControl_B.Kb = positionControl_P.PIDController1_Kb *
 800591c:	4b94      	ldr	r3, [pc, #592]	; (8005b70 <_ZN25positionControlModelClass4stepEv+0xc88>)
 800591e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
    positionControl_B.SumI2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	e9d3 3486 	ldrd	r3, r4, [r3, #536]	; 0x218
  positionControl_B.Kb = positionControl_P.PIDController1_Kb *
 8005928:	461a      	mov	r2, r3
 800592a:	4623      	mov	r3, r4
 800592c:	f7fa fe6c 	bl	8000608 <__aeabi_dmul>
 8005930:	4603      	mov	r3, r0
 8005932:	460c      	mov	r4, r1
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	e9c2 3488 	strd	r3, r4, [r2, #544]	; 0x220

  // Gain: '<S85>/Integral Gain'
  positionControl_B.IntegralGain_k = pos_x_vel_I * positionControl_B.vel_error[0];
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 8005940:	4b8c      	ldr	r3, [pc, #560]	; (8005b74 <_ZN25positionControlModelClass4stepEv+0xc8c>)
 8005942:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005946:	461a      	mov	r2, r3
 8005948:	4623      	mov	r3, r4
 800594a:	f7fa fe5d 	bl	8000608 <__aeabi_dmul>
 800594e:	4603      	mov	r3, r0
 8005950:	460c      	mov	r4, r1
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	e9c2 348a 	strd	r3, r4, [r2, #552]	; 0x228

  // Sum: '<S81>/SumI4'
  positionControl_B.SumI4 = positionControl_B.Kb +
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	e9d3 0188 	ldrd	r0, r1, [r3, #544]	; 0x220
    positionControl_B.IntegralGain_k;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	e9d3 348a 	ldrd	r3, r4, [r3, #552]	; 0x228
  positionControl_B.SumI4 = positionControl_B.Kb +
 8005964:	461a      	mov	r2, r3
 8005966:	4623      	mov	r3, r4
 8005968:	f7fa fc98 	bl	800029c <__adddf3>
 800596c:	4603      	mov	r3, r0
 800596e:	460c      	mov	r4, r1
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	e9c2 348c 	strd	r3, r4, [r2, #560]	; 0x230

  // Gain: '<S229>/Integral Gain'
  positionControl_B.IntegralGain_o = pos_y_I * positionControl_B.y_error;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 800597c:	4b7e      	ldr	r3, [pc, #504]	; (8005b78 <_ZN25positionControlModelClass4stepEv+0xc90>)
 800597e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005982:	461a      	mov	r2, r3
 8005984:	4623      	mov	r3, r4
 8005986:	f7fa fe3f 	bl	8000608 <__aeabi_dmul>
 800598a:	4603      	mov	r3, r0
 800598c:	460c      	mov	r4, r1
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	e9c2 348e 	strd	r3, r4, [r2, #568]	; 0x238

  // Sum: '<S273>/SumI2'
  positionControl_B.SumI2_n = positionControl_B.Saturation_l -
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
    positionControl_B.Sum_m;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	e9d3 3446 	ldrd	r3, r4, [r3, #280]	; 0x118
  positionControl_B.SumI2_n = positionControl_B.Saturation_l -
 80059a0:	461a      	mov	r2, r3
 80059a2:	4623      	mov	r3, r4
 80059a4:	f7fa fc78 	bl	8000298 <__aeabi_dsub>
 80059a8:	4603      	mov	r3, r0
 80059aa:	460c      	mov	r4, r1
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	e9c2 3490 	strd	r3, r4, [r2, #576]	; 0x240

  // Gain: '<S273>/Kb'
  positionControl_B.Kb_e = positionControl_P.PIDController5_Kb *
 80059b2:	4b6f      	ldr	r3, [pc, #444]	; (8005b70 <_ZN25positionControlModelClass4stepEv+0xc88>)
 80059b4:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
    positionControl_B.SumI2_n;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	e9d3 3490 	ldrd	r3, r4, [r3, #576]	; 0x240
  positionControl_B.Kb_e = positionControl_P.PIDController5_Kb *
 80059be:	461a      	mov	r2, r3
 80059c0:	4623      	mov	r3, r4
 80059c2:	f7fa fe21 	bl	8000608 <__aeabi_dmul>
 80059c6:	4603      	mov	r3, r0
 80059c8:	460c      	mov	r4, r1
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	e9c2 3492 	strd	r3, r4, [r2, #584]	; 0x248

  // Gain: '<S277>/Integral Gain'
  positionControl_B.IntegralGain_b = pos_y_vel_I * positionControl_B.vel_error[1];
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 80059d6:	4b69      	ldr	r3, [pc, #420]	; (8005b7c <_ZN25positionControlModelClass4stepEv+0xc94>)
 80059d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059dc:	461a      	mov	r2, r3
 80059de:	4623      	mov	r3, r4
 80059e0:	f7fa fe12 	bl	8000608 <__aeabi_dmul>
 80059e4:	4603      	mov	r3, r0
 80059e6:	460c      	mov	r4, r1
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	e9c2 3494 	strd	r3, r4, [r2, #592]	; 0x250

  // Sum: '<S273>/SumI4'
  positionControl_B.SumI4_c = positionControl_B.Kb_e +
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	e9d3 0192 	ldrd	r0, r1, [r3, #584]	; 0x248
    positionControl_B.IntegralGain_b;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	e9d3 3494 	ldrd	r3, r4, [r3, #592]	; 0x250
  positionControl_B.SumI4_c = positionControl_B.Kb_e +
 80059fa:	461a      	mov	r2, r3
 80059fc:	4623      	mov	r3, r4
 80059fe:	f7fa fc4d 	bl	800029c <__adddf3>
 8005a02:	4603      	mov	r3, r0
 8005a04:	460c      	mov	r4, r1
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	e9c2 3496 	strd	r3, r4, [r2, #600]	; 0x258

  // Gain: '<S133>/Integral Gain'
  positionControl_B.IntegralGain_f = pos_z_I * positionControl_B.alt_error;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	e9d3 0160 	ldrd	r0, r1, [r3, #384]	; 0x180
 8005a12:	4b5b      	ldr	r3, [pc, #364]	; (8005b80 <_ZN25positionControlModelClass4stepEv+0xc98>)
 8005a14:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	4623      	mov	r3, r4
 8005a1c:	f7fa fdf4 	bl	8000608 <__aeabi_dmul>
 8005a20:	4603      	mov	r3, r0
 8005a22:	460c      	mov	r4, r1
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	e9c2 3498 	strd	r3, r4, [r2, #608]	; 0x260

  // Gain: '<S181>/Integral Gain'
  positionControl_B.IntegralGain_l = pos_z_vel_I * positionControl_B.vz_error;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	e9d3 0172 	ldrd	r0, r1, [r3, #456]	; 0x1c8
 8005a30:	4b54      	ldr	r3, [pc, #336]	; (8005b84 <_ZN25positionControlModelClass4stepEv+0xc9c>)
 8005a32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a36:	461a      	mov	r2, r3
 8005a38:	4623      	mov	r3, r4
 8005a3a:	f7fa fde5 	bl	8000608 <__aeabi_dmul>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	460c      	mov	r4, r1
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	e9c2 349a 	strd	r3, r4, [r2, #616]	; 0x268

  // Update for DiscreteIntegrator: '<S40>/Integrator'
  positionControl_DW.Integrator_DSTATE += positionControl_P.Integrator_gainval *
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	e9d3 459c 	ldrd	r4, r5, [r3, #624]	; 0x270
 8005a4e:	4b48      	ldr	r3, [pc, #288]	; (8005b70 <_ZN25positionControlModelClass4stepEv+0xc88>)
 8005a50:	e9d3 0144 	ldrd	r0, r1, [r3, #272]	; 0x110
    positionControl_B.IntegralGain;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	; 0x210
  positionControl_DW.Integrator_DSTATE += positionControl_P.Integrator_gainval *
 8005a5a:	f7fa fdd5 	bl	8000608 <__aeabi_dmul>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	4620      	mov	r0, r4
 8005a64:	4629      	mov	r1, r5
 8005a66:	f7fa fc19 	bl	800029c <__adddf3>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	460c      	mov	r4, r1
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	e9c2 349c 	strd	r3, r4, [r2, #624]	; 0x270

  // Update for DiscreteIntegrator: '<S35>/Filter'
  positionControl_DW.Filter_DSTATE += positionControl_P.Filter_gainval *
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	e9d3 459e 	ldrd	r4, r5, [r3, #632]	; 0x278
 8005a7a:	4b3d      	ldr	r3, [pc, #244]	; (8005b70 <_ZN25positionControlModelClass4stepEv+0xc88>)
 8005a7c:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
    positionControl_B.FilterCoefficient;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
  positionControl_DW.Filter_DSTATE += positionControl_P.Filter_gainval *
 8005a86:	f7fa fdbf 	bl	8000608 <__aeabi_dmul>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4620      	mov	r0, r4
 8005a90:	4629      	mov	r1, r5
 8005a92:	f7fa fc03 	bl	800029c <__adddf3>
 8005a96:	4603      	mov	r3, r0
 8005a98:	460c      	mov	r4, r1
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	e9c2 349e 	strd	r3, r4, [r2, #632]	; 0x278

  // Update for DiscreteIntegrator: '<S232>/Integrator'
  positionControl_DW.Integrator_DSTATE_k +=
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	e9d3 45a0 	ldrd	r4, r5, [r3, #640]	; 0x280
    positionControl_P.Integrator_gainval_l * positionControl_B.IntegralGain_o;
 8005aa6:	4b32      	ldr	r3, [pc, #200]	; (8005b70 <_ZN25positionControlModelClass4stepEv+0xc88>)
 8005aa8:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	e9d3 238e 	ldrd	r2, r3, [r3, #568]	; 0x238
 8005ab2:	f7fa fda9 	bl	8000608 <__aeabi_dmul>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
  positionControl_DW.Integrator_DSTATE_k +=
 8005aba:	4620      	mov	r0, r4
 8005abc:	4629      	mov	r1, r5
 8005abe:	f7fa fbed 	bl	800029c <__adddf3>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	e9c2 34a0 	strd	r3, r4, [r2, #640]	; 0x280

  // Update for DiscreteIntegrator: '<S227>/Filter'
  positionControl_DW.Filter_DSTATE_m += positionControl_P.Filter_gainval_l *
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	e9d3 45a2 	ldrd	r4, r5, [r3, #648]	; 0x288
 8005ad2:	4b27      	ldr	r3, [pc, #156]	; (8005b70 <_ZN25positionControlModelClass4stepEv+0xc88>)
 8005ad4:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	; 0x128
    positionControl_B.FilterCoefficient_n;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
  positionControl_DW.Filter_DSTATE_m += positionControl_P.Filter_gainval_l *
 8005ade:	f7fa fd93 	bl	8000608 <__aeabi_dmul>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	4629      	mov	r1, r5
 8005aea:	f7fa fbd7 	bl	800029c <__adddf3>
 8005aee:	4603      	mov	r3, r0
 8005af0:	460c      	mov	r4, r1
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	e9c2 34a2 	strd	r3, r4, [r2, #648]	; 0x288

  // Update for DiscreteIntegrator: '<S280>/Integrator'
  positionControl_DW.Integrator_DSTATE_f +=
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	e9d3 45a4 	ldrd	r4, r5, [r3, #656]	; 0x290
    positionControl_P.Integrator_gainval_k * positionControl_B.SumI4_c;
 8005afe:	4b1c      	ldr	r3, [pc, #112]	; (8005b70 <_ZN25positionControlModelClass4stepEv+0xc88>)
 8005b00:	e9d3 014c 	ldrd	r0, r1, [r3, #304]	; 0x130
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	e9d3 2396 	ldrd	r2, r3, [r3, #600]	; 0x258
 8005b0a:	f7fa fd7d 	bl	8000608 <__aeabi_dmul>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
  positionControl_DW.Integrator_DSTATE_f +=
 8005b12:	4620      	mov	r0, r4
 8005b14:	4629      	mov	r1, r5
 8005b16:	f7fa fbc1 	bl	800029c <__adddf3>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	460c      	mov	r4, r1
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	e9c2 34a4 	strd	r3, r4, [r2, #656]	; 0x290

  // Update for DiscreteIntegrator: '<S275>/Filter'
  positionControl_DW.Filter_DSTATE_j += positionControl_P.Filter_gainval_i *
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	e9d3 45a6 	ldrd	r4, r5, [r3, #664]	; 0x298
 8005b2a:	4b11      	ldr	r3, [pc, #68]	; (8005b70 <_ZN25positionControlModelClass4stepEv+0xc88>)
 8005b2c:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	; 0x138
    positionControl_B.FilterCoefficient_e;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	; 0x110
  positionControl_DW.Filter_DSTATE_j += positionControl_P.Filter_gainval_i *
 8005b36:	f7fa fd67 	bl	8000608 <__aeabi_dmul>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	4620      	mov	r0, r4
 8005b40:	4629      	mov	r1, r5
 8005b42:	f7fa fbab 	bl	800029c <__adddf3>
 8005b46:	4603      	mov	r3, r0
 8005b48:	460c      	mov	r4, r1
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	e9c2 34a6 	strd	r3, r4, [r2, #664]	; 0x298

  // Update for DiscreteIntegrator: '<S88>/Integrator'
  positionControl_DW.Integrator_DSTATE_m +=
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	e9d3 45a8 	ldrd	r4, r5, [r3, #672]	; 0x2a0
    positionControl_P.Integrator_gainval_lc * positionControl_B.SumI4;
 8005b56:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <_ZN25positionControlModelClass4stepEv+0xc88>)
 8005b58:	e9d3 0152 	ldrd	r0, r1, [r3, #328]	; 0x148
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	e9d3 238c 	ldrd	r2, r3, [r3, #560]	; 0x230
 8005b62:	f7fa fd51 	bl	8000608 <__aeabi_dmul>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	e00d      	b.n	8005b88 <_ZN25positionControlModelClass4stepEv+0xca0>
 8005b6c:	20000a80 	.word	0x20000a80
 8005b70:	20000118 	.word	0x20000118
 8005b74:	20000a88 	.word	0x20000a88
 8005b78:	20000a90 	.word	0x20000a90
 8005b7c:	200000d8 	.word	0x200000d8
 8005b80:	200000f0 	.word	0x200000f0
 8005b84:	20000108 	.word	0x20000108
  positionControl_DW.Integrator_DSTATE_m +=
 8005b88:	4620      	mov	r0, r4
 8005b8a:	4629      	mov	r1, r5
 8005b8c:	f7fa fb86 	bl	800029c <__adddf3>
 8005b90:	4603      	mov	r3, r0
 8005b92:	460c      	mov	r4, r1
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	e9c2 34a8 	strd	r3, r4, [r2, #672]	; 0x2a0

  // Update for DiscreteIntegrator: '<S83>/Filter'
  positionControl_DW.Filter_DSTATE_d += positionControl_P.Filter_gainval_l5 *
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	e9d3 45aa 	ldrd	r4, r5, [r3, #680]	; 0x2a8
 8005ba0:	4b37      	ldr	r3, [pc, #220]	; (8005c80 <_ZN25positionControlModelClass4stepEv+0xd98>)
 8005ba2:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
    positionControl_B.FilterCoefficient_f;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	; 0x158
  positionControl_DW.Filter_DSTATE_d += positionControl_P.Filter_gainval_l5 *
 8005bac:	f7fa fd2c 	bl	8000608 <__aeabi_dmul>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	f7fa fb70 	bl	800029c <__adddf3>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	e9c2 34aa 	strd	r3, r4, [r2, #680]	; 0x2a8

  // Update for DiscreteIntegrator: '<S136>/Integrator'
  positionControl_DW.Integrator_DSTATE_j +=
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	e9d3 45ac 	ldrd	r4, r5, [r3, #688]	; 0x2b0
    positionControl_P.Integrator_gainval_o * positionControl_B.IntegralGain_f;
 8005bcc:	4b2c      	ldr	r3, [pc, #176]	; (8005c80 <_ZN25positionControlModelClass4stepEv+0xd98>)
 8005bce:	e9d3 0156 	ldrd	r0, r1, [r3, #344]	; 0x158
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 8005bd8:	f7fa fd16 	bl	8000608 <__aeabi_dmul>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
  positionControl_DW.Integrator_DSTATE_j +=
 8005be0:	4620      	mov	r0, r4
 8005be2:	4629      	mov	r1, r5
 8005be4:	f7fa fb5a 	bl	800029c <__adddf3>
 8005be8:	4603      	mov	r3, r0
 8005bea:	460c      	mov	r4, r1
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	e9c2 34ac 	strd	r3, r4, [r2, #688]	; 0x2b0

  // Update for DiscreteIntegrator: '<S131>/Filter'
  positionControl_DW.Filter_DSTATE_mf += positionControl_P.Filter_gainval_f *
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	e9d3 45ae 	ldrd	r4, r5, [r3, #696]	; 0x2b8
 8005bf8:	4b21      	ldr	r3, [pc, #132]	; (8005c80 <_ZN25positionControlModelClass4stepEv+0xd98>)
 8005bfa:	e9d3 0158 	ldrd	r0, r1, [r3, #352]	; 0x160
    positionControl_B.FilterCoefficient_d;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
  positionControl_DW.Filter_DSTATE_mf += positionControl_P.Filter_gainval_f *
 8005c04:	f7fa fd00 	bl	8000608 <__aeabi_dmul>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	4629      	mov	r1, r5
 8005c10:	f7fa fb44 	bl	800029c <__adddf3>
 8005c14:	4603      	mov	r3, r0
 8005c16:	460c      	mov	r4, r1
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	e9c2 34ae 	strd	r3, r4, [r2, #696]	; 0x2b8

  // Update for DiscreteIntegrator: '<S184>/Integrator'
  positionControl_DW.Integrator_DSTATE_b +=
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	e9d3 45b0 	ldrd	r4, r5, [r3, #704]	; 0x2c0
    positionControl_P.Integrator_gainval_a * positionControl_B.IntegralGain_l;
 8005c24:	4b16      	ldr	r3, [pc, #88]	; (8005c80 <_ZN25positionControlModelClass4stepEv+0xd98>)
 8005c26:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	e9d3 239a 	ldrd	r2, r3, [r3, #616]	; 0x268
 8005c30:	f7fa fcea 	bl	8000608 <__aeabi_dmul>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
  positionControl_DW.Integrator_DSTATE_b +=
 8005c38:	4620      	mov	r0, r4
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	f7fa fb2e 	bl	800029c <__adddf3>
 8005c40:	4603      	mov	r3, r0
 8005c42:	460c      	mov	r4, r1
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0

  // Update for DiscreteIntegrator: '<S179>/Filter'
  positionControl_DW.Filter_DSTATE_e += positionControl_P.Filter_gainval_g *
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	e9d3 45b2 	ldrd	r4, r5, [r3, #712]	; 0x2c8
 8005c50:	4b0b      	ldr	r3, [pc, #44]	; (8005c80 <_ZN25positionControlModelClass4stepEv+0xd98>)
 8005c52:	e9d3 015c 	ldrd	r0, r1, [r3, #368]	; 0x170
    positionControl_B.FilterCoefficient_a;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
  positionControl_DW.Filter_DSTATE_e += positionControl_P.Filter_gainval_g *
 8005c5c:	f7fa fcd4 	bl	8000608 <__aeabi_dmul>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4620      	mov	r0, r4
 8005c66:	4629      	mov	r1, r5
 8005c68:	f7fa fb18 	bl	800029c <__adddf3>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	460c      	mov	r4, r1
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	e9c2 34b2 	strd	r3, r4, [r2, #712]	; 0x2c8
}
 8005c76:	bf00      	nop
 8005c78:	3738      	adds	r7, #56	; 0x38
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20000118 	.word	0x20000118

08005c84 <_ZN25positionControlModelClass10initializeEv>:

// Model initialize function
void positionControlModelClass::initialize()
{
 8005c84:	b490      	push	{r4, r7}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  // InitializeConditions for DiscreteIntegrator: '<S40>/Integrator'
  positionControl_DW.Integrator_DSTATE =
    positionControl_P.PIDController_InitialConditio_c;
 8005c8c:	4b26      	ldr	r3, [pc, #152]	; (8005d28 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8005c8e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
  positionControl_DW.Integrator_DSTATE =
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	e9c2 349c 	strd	r3, r4, [r2, #624]	; 0x270

  // InitializeConditions for DiscreteIntegrator: '<S35>/Filter'
  positionControl_DW.Filter_DSTATE =
    positionControl_P.PIDController_InitialConditionF;
 8005c98:	4b23      	ldr	r3, [pc, #140]	; (8005d28 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8005c9a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
  positionControl_DW.Filter_DSTATE =
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	e9c2 349e 	strd	r3, r4, [r2, #632]	; 0x278

  // InitializeConditions for DiscreteIntegrator: '<S232>/Integrator'
  positionControl_DW.Integrator_DSTATE_k =
    positionControl_P.PIDController4_InitialConditi_i;
 8005ca4:	4b20      	ldr	r3, [pc, #128]	; (8005d28 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8005ca6:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
  positionControl_DW.Integrator_DSTATE_k =
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	e9c2 34a0 	strd	r3, r4, [r2, #640]	; 0x280

  // InitializeConditions for DiscreteIntegrator: '<S227>/Filter'
  positionControl_DW.Filter_DSTATE_m =
    positionControl_P.PIDController4_InitialCondition;
 8005cb0:	4b1d      	ldr	r3, [pc, #116]	; (8005d28 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8005cb2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
  positionControl_DW.Filter_DSTATE_m =
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	e9c2 34a2 	strd	r3, r4, [r2, #648]	; 0x288

  // InitializeConditions for DiscreteIntegrator: '<S280>/Integrator'
  positionControl_DW.Integrator_DSTATE_f =
    positionControl_P.PIDController5_InitialConditi_c;
 8005cbc:	4b1a      	ldr	r3, [pc, #104]	; (8005d28 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8005cbe:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
  positionControl_DW.Integrator_DSTATE_f =
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	e9c2 34a4 	strd	r3, r4, [r2, #656]	; 0x290

  // InitializeConditions for DiscreteIntegrator: '<S275>/Filter'
  positionControl_DW.Filter_DSTATE_j =
    positionControl_P.PIDController5_InitialCondition;
 8005cc8:	4b17      	ldr	r3, [pc, #92]	; (8005d28 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8005cca:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
  positionControl_DW.Filter_DSTATE_j =
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	e9c2 34a6 	strd	r3, r4, [r2, #664]	; 0x298

  // InitializeConditions for DiscreteIntegrator: '<S88>/Integrator'
  positionControl_DW.Integrator_DSTATE_m =
    positionControl_P.PIDController1_InitialConditi_a;
 8005cd4:	4b14      	ldr	r3, [pc, #80]	; (8005d28 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8005cd6:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
  positionControl_DW.Integrator_DSTATE_m =
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	e9c2 34a8 	strd	r3, r4, [r2, #672]	; 0x2a0

  // InitializeConditions for DiscreteIntegrator: '<S83>/Filter'
  positionControl_DW.Filter_DSTATE_d =
    positionControl_P.PIDController1_InitialCondition;
 8005ce0:	4b11      	ldr	r3, [pc, #68]	; (8005d28 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8005ce2:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
  positionControl_DW.Filter_DSTATE_d =
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	e9c2 34aa 	strd	r3, r4, [r2, #680]	; 0x2a8

  // InitializeConditions for DiscreteIntegrator: '<S136>/Integrator'
  positionControl_DW.Integrator_DSTATE_j =
    positionControl_P.PIDController2_InitialConditi_n;
 8005cec:	4b0e      	ldr	r3, [pc, #56]	; (8005d28 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8005cee:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
  positionControl_DW.Integrator_DSTATE_j =
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	e9c2 34ac 	strd	r3, r4, [r2, #688]	; 0x2b0

  // InitializeConditions for DiscreteIntegrator: '<S131>/Filter'
  positionControl_DW.Filter_DSTATE_mf =
    positionControl_P.PIDController2_InitialCondition;
 8005cf8:	4b0b      	ldr	r3, [pc, #44]	; (8005d28 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8005cfa:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
  positionControl_DW.Filter_DSTATE_mf =
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	e9c2 34ae 	strd	r3, r4, [r2, #696]	; 0x2b8

  // InitializeConditions for DiscreteIntegrator: '<S184>/Integrator'
  positionControl_DW.Integrator_DSTATE_b =
    positionControl_P.PIDController3_InitialConditi_d;
 8005d04:	4b08      	ldr	r3, [pc, #32]	; (8005d28 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8005d06:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
  positionControl_DW.Integrator_DSTATE_b =
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0

  // InitializeConditions for DiscreteIntegrator: '<S179>/Filter'
  positionControl_DW.Filter_DSTATE_e =
    positionControl_P.PIDController3_InitialCondition;
 8005d10:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8005d12:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
  positionControl_DW.Filter_DSTATE_e =
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	e9c2 34b2 	strd	r3, r4, [r2, #712]	; 0x2c8
}
 8005d1c:	bf00      	nop
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bc90      	pop	{r4, r7}
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	20000118 	.word	0x20000118

08005d2c <_ZN25positionControlModelClassC1Ev>:
{
  // (no terminate code required)
}

// Constructor
positionControlModelClass::positionControlModelClass():
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  positionControl_B()
  ,positionControl_DW()
  ,positionControl_U()
  ,positionControl_Y()
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f44f 731c 	mov.w	r3, #624	; 0x270
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	2100      	movs	r1, #0
 8005d40:	f022 fd15 	bl	802876e <memset>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8005d4a:	2260      	movs	r2, #96	; 0x60
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f022 fd0d 	bl	802876e <memset>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8005d5a:	2258      	movs	r2, #88	; 0x58
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f022 fd05 	bl	802876e <memset>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	605a      	str	r2, [r3, #4]
 8005d70:	609a      	str	r2, [r3, #8]
 8005d72:	60da      	str	r2, [r3, #12]
{
  // Currently there is no constructor body generated.
}
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 8005d7e:	b490      	push	{r4, r7}
 8005d80:	b082      	sub	sp, #8
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	ed87 0b00 	vstr	d0, [r7]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	f022 4400 	bic.w	r4, r2, #2147483648	; 0x80000000
 8005d90:	ec44 3b17 	vmov	d7, r3, r4
 8005d94:	eeb0 0a47 	vmov.f32	s0, s14
 8005d98:	eef0 0a67 	vmov.f32	s1, s15
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bc90      	pop	{r4, r7}
 8005da2:	4770      	bx	lr

08005da4 <rtGetNaN>:
  //
  // Initialize rtNaN needed by the generated code.
  // NaN is initialized as non-signaling. Assumes IEEE.
  //
  static real_T rtGetNaN(void)
  {
 8005da4:	b590      	push	{r4, r7, lr}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8005daa:	2340      	movs	r3, #64	; 0x40
 8005dac:	60fb      	str	r3, [r7, #12]
    real_T nan = 0.0;
 8005dae:	f04f 0300 	mov.w	r3, #0
 8005db2:	f04f 0400 	mov.w	r4, #0
 8005db6:	e9c7 3404 	strd	r3, r4, [r7, #16]
    if (bitsPerReal == 32U) {
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	d10b      	bne.n	8005dd8 <rtGetNaN+0x34>
      nan = rtGetNaNF();
 8005dc0:	f000 f820 	bl	8005e04 <rtGetNaNF>
 8005dc4:	ee10 3a10 	vmov	r3, s0
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fa fbc5 	bl	8000558 <__aeabi_f2d>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	460c      	mov	r4, r1
 8005dd2:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8005dd6:	e007      	b.n	8005de8 <rtGetNaN+0x44>
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.bitVal.words.wordH = 0xFFF80000U;
 8005dd8:	4b09      	ldr	r3, [pc, #36]	; (8005e00 <rtGetNaN+0x5c>)
 8005dda:	607b      	str	r3, [r7, #4]
      tmpVal.bitVal.words.wordL = 0x00000000U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	603b      	str	r3, [r7, #0]
      nan = tmpVal.fltVal;
 8005de0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005de4:	e9c7 3404 	strd	r3, r4, [r7, #16]
    }

    return nan;
 8005de8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005dec:	ec44 3b17 	vmov	d7, r3, r4
  }
 8005df0:	eeb0 0a47 	vmov.f32	s0, s14
 8005df4:	eef0 0a67 	vmov.f32	s1, s15
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd90      	pop	{r4, r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	fff80000 	.word	0xfff80000

08005e04 <rtGetNaNF>:
  //
  // Initialize rtNaNF needed by the generated code.
  // NaN is initialized as non-signaling. Assumes IEEE.
  //
  static real32_T rtGetNaNF(void)
  {
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
    IEEESingle nanF = { { 0 } };
 8005e0a:	f04f 0300 	mov.w	r3, #0
 8005e0e:	607b      	str	r3, [r7, #4]

    nanF.wordL.wordLuint = 0xFFC00000U;
 8005e10:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <rtGetNaNF+0x24>)
 8005e12:	607b      	str	r3, [r7, #4]
    return nanF.wordL.wordLreal;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	ee07 3a90 	vmov	s15, r3
  }
 8005e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	ffc00000 	.word	0xffc00000

08005e2c <rt_InitInfAndNaN>:
  //
  // Initialize the rtInf, rtMinusInf, and rtNaN needed by the
  // generated code. NaN is initialized as non-signaling. Assumes IEEE.
  //
  static void rt_InitInfAndNaN(size_t realSize)
  {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
    (void) (realSize);
    rtNaN = rtGetNaN();
 8005e34:	f7ff ffb6 	bl	8005da4 <rtGetNaN>
 8005e38:	eeb0 7a40 	vmov.f32	s14, s0
 8005e3c:	eef0 7a60 	vmov.f32	s15, s1
 8005e40:	4b16      	ldr	r3, [pc, #88]	; (8005e9c <rt_InitInfAndNaN+0x70>)
 8005e42:	ed83 7b00 	vstr	d7, [r3]
    rtNaNF = rtGetNaNF();
 8005e46:	f7ff ffdd 	bl	8005e04 <rtGetNaNF>
 8005e4a:	eef0 7a40 	vmov.f32	s15, s0
 8005e4e:	4b14      	ldr	r3, [pc, #80]	; (8005ea0 <rt_InitInfAndNaN+0x74>)
 8005e50:	edc3 7a00 	vstr	s15, [r3]
    rtInf = rtGetInf();
 8005e54:	f000 f8a8 	bl	8005fa8 <rtGetInf>
 8005e58:	eeb0 7a40 	vmov.f32	s14, s0
 8005e5c:	eef0 7a60 	vmov.f32	s15, s1
 8005e60:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <rt_InitInfAndNaN+0x78>)
 8005e62:	ed83 7b00 	vstr	d7, [r3]
    rtInfF = rtGetInfF();
 8005e66:	f000 f8cf 	bl	8006008 <rtGetInfF>
 8005e6a:	eef0 7a40 	vmov.f32	s15, s0
 8005e6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ea8 <rt_InitInfAndNaN+0x7c>)
 8005e70:	edc3 7a00 	vstr	s15, [r3]
    rtMinusInf = rtGetMinusInf();
 8005e74:	f000 f8d8 	bl	8006028 <rtGetMinusInf>
 8005e78:	eeb0 7a40 	vmov.f32	s14, s0
 8005e7c:	eef0 7a60 	vmov.f32	s15, s1
 8005e80:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <rt_InitInfAndNaN+0x80>)
 8005e82:	ed83 7b00 	vstr	d7, [r3]
    rtMinusInfF = rtGetMinusInfF();
 8005e86:	f000 f8ff 	bl	8006088 <rtGetMinusInfF>
 8005e8a:	eef0 7a40 	vmov.f32	s15, s0
 8005e8e:	4b08      	ldr	r3, [pc, #32]	; (8005eb0 <rt_InitInfAndNaN+0x84>)
 8005e90:	edc3 7a00 	vstr	s15, [r3]
  }
 8005e94:	bf00      	nop
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20000aa8 	.word	0x20000aa8
 8005ea0:	20000ab8 	.word	0x20000ab8
 8005ea4:	20000a98 	.word	0x20000a98
 8005ea8:	20000ab0 	.word	0x20000ab0
 8005eac:	20000aa0 	.word	0x20000aa0
 8005eb0:	20000ab4 	.word	0x20000ab4

08005eb4 <rtIsInf>:

  // Test if value is infinite
  static boolean_T rtIsInf(real_T value)
  {
 8005eb4:	b590      	push	{r4, r7, lr}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	ed87 0b00 	vstr	d0, [r7]
    return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 8005ebe:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <rtIsInf+0x48>)
 8005ec0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	4623      	mov	r3, r4
 8005ec8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ecc:	f7fa fe04 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10b      	bne.n	8005eee <rtIsInf+0x3a>
 8005ed6:	4b0a      	ldr	r3, [pc, #40]	; (8005f00 <rtIsInf+0x4c>)
 8005ed8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005edc:	461a      	mov	r2, r3
 8005ede:	4623      	mov	r3, r4
 8005ee0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ee4:	f7fa fdf8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <rtIsInf+0x3e>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <rtIsInf+0x40>
 8005ef2:	2300      	movs	r3, #0
  }
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd90      	pop	{r4, r7, pc}
 8005efc:	20000a98 	.word	0x20000a98
 8005f00:	20000aa0 	.word	0x20000aa0

08005f04 <rtIsNaN>:
    return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
  }

  // Test if value is not a number
  static boolean_T rtIsNaN(real_T value)
  {
 8005f04:	b590      	push	{r4, r7, lr}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	ed87 0b00 	vstr	d0, [r7]
    boolean_T result = (boolean_T) 0;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	75fb      	strb	r3, [r7, #23]
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8005f12:	2340      	movs	r3, #64	; 0x40
 8005f14:	613b      	str	r3, [r7, #16]
    if (bitsPerReal == 32U) {
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	d10b      	bne.n	8005f34 <rtIsNaN+0x30>
      result = rtIsNaNF((real32_T)value);
 8005f1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f20:	f7fa fe6a 	bl	8000bf8 <__aeabi_d2f>
 8005f24:	4603      	mov	r3, r0
 8005f26:	ee00 3a10 	vmov	s0, r3
 8005f2a:	f000 f821 	bl	8005f70 <rtIsNaNF>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	75fb      	strb	r3, [r7, #23]
 8005f32:	e015      	b.n	8005f60 <rtIsNaN+0x5c>
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.fltVal = value;
 8005f34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005f38:	e9c7 3402 	strd	r3, r4, [r7, #8]
      result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <rtIsNaN+0x68>)
 8005f40:	4013      	ands	r3, r2
                           0x7FF00000 &&
 8005f42:	4a0a      	ldr	r2, [pc, #40]	; (8005f6c <rtIsNaN+0x68>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d109      	bne.n	8005f5c <rtIsNaN+0x58>
                           ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
                           0x7FF00000 &&
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d102      	bne.n	8005f58 <rtIsNaN+0x54>
                            (tmpVal.bitVal.words.wordL != 0) ));
 8005f52:	68bb      	ldr	r3, [r7, #8]
                           ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <rtIsNaN+0x58>
                           0x7FF00000 &&
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e000      	b.n	8005f5e <rtIsNaN+0x5a>
 8005f5c:	2300      	movs	r3, #0
      result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8005f5e:	75fb      	strb	r3, [r7, #23]
    }

    return result;
 8005f60:	7dfb      	ldrb	r3, [r7, #23]
  }
 8005f62:	4618      	mov	r0, r3
 8005f64:	371c      	adds	r7, #28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd90      	pop	{r4, r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	7ff00000 	.word	0x7ff00000

08005f70 <rtIsNaNF>:

  // Test if single-precision value is not a number
  static boolean_T rtIsNaNF(real32_T value)
  {
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	ed87 0a01 	vstr	s0, [r7, #4]
    IEEESingle tmp;
    tmp.wordL.wordLreal = value;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	60fb      	str	r3, [r7, #12]
    return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 8005f84:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005f88:	d106      	bne.n	8005f98 <rtIsNaNF+0x28>
                       (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f3c3 0316 	ubfx	r3, r3, #0, #23
    return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <rtIsNaNF+0x28>
 8005f94:	2301      	movs	r3, #1
 8005f96:	e000      	b.n	8005f9a <rtIsNaNF+0x2a>
 8005f98:	2300      	movs	r3, #0
  }
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
	...

08005fa8 <rtGetInf>:
  //
  // Initialize rtInf needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real_T rtGetInf(void)
  {
 8005fa8:	b590      	push	{r4, r7, lr}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8005fae:	2340      	movs	r3, #64	; 0x40
 8005fb0:	60fb      	str	r3, [r7, #12]
    real_T inf = 0.0;
 8005fb2:	f04f 0300 	mov.w	r3, #0
 8005fb6:	f04f 0400 	mov.w	r4, #0
 8005fba:	e9c7 3404 	strd	r3, r4, [r7, #16]
    if (bitsPerReal == 32U) {
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	d10b      	bne.n	8005fdc <rtGetInf+0x34>
      inf = rtGetInfF();
 8005fc4:	f000 f820 	bl	8006008 <rtGetInfF>
 8005fc8:	ee10 3a10 	vmov	r3, s0
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fa fac3 	bl	8000558 <__aeabi_f2d>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	460c      	mov	r4, r1
 8005fd6:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8005fda:	e007      	b.n	8005fec <rtGetInf+0x44>
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8005fdc:	4b09      	ldr	r3, [pc, #36]	; (8006004 <rtGetInf+0x5c>)
 8005fde:	607b      	str	r3, [r7, #4]
      tmpVal.bitVal.words.wordL = 0x00000000U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	603b      	str	r3, [r7, #0]
      inf = tmpVal.fltVal;
 8005fe4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005fe8:	e9c7 3404 	strd	r3, r4, [r7, #16]
    }

    return inf;
 8005fec:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005ff0:	ec44 3b17 	vmov	d7, r3, r4
  }
 8005ff4:	eeb0 0a47 	vmov.f32	s0, s14
 8005ff8:	eef0 0a67 	vmov.f32	s1, s15
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd90      	pop	{r4, r7, pc}
 8006002:	bf00      	nop
 8006004:	7ff00000 	.word	0x7ff00000

08006008 <rtGetInfF>:
  //
  // Initialize rtInfF needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real32_T rtGetInfF(void)
  {
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
    IEEESingle infF;
    infF.wordL.wordLuint = 0x7F800000U;
 800600e:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8006012:	607b      	str	r3, [r7, #4]
    return infF.wordL.wordLreal;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	ee07 3a90 	vmov	s15, r3
  }
 800601a:	eeb0 0a67 	vmov.f32	s0, s15
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <rtGetMinusInf>:
  //
  // Initialize rtMinusInf needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real_T rtGetMinusInf(void)
  {
 8006028:	b590      	push	{r4, r7, lr}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800602e:	2340      	movs	r3, #64	; 0x40
 8006030:	60fb      	str	r3, [r7, #12]
    real_T minf = 0.0;
 8006032:	f04f 0300 	mov.w	r3, #0
 8006036:	f04f 0400 	mov.w	r4, #0
 800603a:	e9c7 3404 	strd	r3, r4, [r7, #16]
    if (bitsPerReal == 32U) {
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b20      	cmp	r3, #32
 8006042:	d10b      	bne.n	800605c <rtGetMinusInf+0x34>
      minf = rtGetMinusInfF();
 8006044:	f000 f820 	bl	8006088 <rtGetMinusInfF>
 8006048:	ee10 3a10 	vmov	r3, s0
 800604c:	4618      	mov	r0, r3
 800604e:	f7fa fa83 	bl	8000558 <__aeabi_f2d>
 8006052:	4603      	mov	r3, r0
 8006054:	460c      	mov	r4, r1
 8006056:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800605a:	e007      	b.n	800606c <rtGetMinusInf+0x44>
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.bitVal.words.wordH = 0xFFF00000U;
 800605c:	4b09      	ldr	r3, [pc, #36]	; (8006084 <rtGetMinusInf+0x5c>)
 800605e:	607b      	str	r3, [r7, #4]
      tmpVal.bitVal.words.wordL = 0x00000000U;
 8006060:	2300      	movs	r3, #0
 8006062:	603b      	str	r3, [r7, #0]
      minf = tmpVal.fltVal;
 8006064:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006068:	e9c7 3404 	strd	r3, r4, [r7, #16]
    }

    return minf;
 800606c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006070:	ec44 3b17 	vmov	d7, r3, r4
  }
 8006074:	eeb0 0a47 	vmov.f32	s0, s14
 8006078:	eef0 0a67 	vmov.f32	s1, s15
 800607c:	371c      	adds	r7, #28
 800607e:	46bd      	mov	sp, r7
 8006080:	bd90      	pop	{r4, r7, pc}
 8006082:	bf00      	nop
 8006084:	fff00000 	.word	0xfff00000

08006088 <rtGetMinusInfF>:
  //
  // Initialize rtMinusInfF needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real32_T rtGetMinusInfF(void)
  {
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
    IEEESingle minfF;
    minfF.wordL.wordLuint = 0xFF800000U;
 800608e:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <rtGetMinusInfF+0x20>)
 8006090:	607b      	str	r3, [r7, #4]
    return minfF.wordL.wordLreal;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	ee07 3a90 	vmov	s15, r3
  }
 8006098:	eeb0 0a67 	vmov.f32	s0, s15
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	ff800000 	.word	0xff800000

080060ac <_Z11rt_modd_snfdd>:
}

real_T rt_modd_snf(real_T u0, real_T u1)
{
 80060ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ae:	b08b      	sub	sp, #44	; 0x2c
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	ed87 0b02 	vstr	d0, [r7, #8]
 80060b6:	ed87 1b00 	vstr	d1, [r7]
  real_T y;
  boolean_T yEq;
  real_T q;
  y = u0;
 80060ba:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80060be:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (u1 == 0.0) {
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	f04f 0300 	mov.w	r3, #0
 80060ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060ce:	f7fa fd03 	bl	8000ad8 <__aeabi_dcmpeq>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d010      	beq.n	80060fa <_Z11rt_modd_snfdd+0x4e>
    if (u0 == 0.0) {
 80060d8:	f04f 0200 	mov.w	r2, #0
 80060dc:	f04f 0300 	mov.w	r3, #0
 80060e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060e4:	f7fa fcf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 8130 	beq.w	8006350 <_Z11rt_modd_snfdd+0x2a4>
      y = u1;
 80060f0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80060f4:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80060f8:	e12a      	b.n	8006350 <_Z11rt_modd_snfdd+0x2a4>
    }
  } else if (rtIsNaN(u0) || rtIsNaN(u1) || rtIsInf(u0)) {
 80060fa:	ed97 0b02 	vldr	d0, [r7, #8]
 80060fe:	f7ff ff01 	bl	8005f04 <rtIsNaN>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10d      	bne.n	8006124 <_Z11rt_modd_snfdd+0x78>
 8006108:	ed97 0b00 	vldr	d0, [r7]
 800610c:	f7ff fefa 	bl	8005f04 <rtIsNaN>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d106      	bne.n	8006124 <_Z11rt_modd_snfdd+0x78>
 8006116:	ed97 0b02 	vldr	d0, [r7, #8]
 800611a:	f7ff fecb 	bl	8005eb4 <rtIsInf>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <_Z11rt_modd_snfdd+0x7c>
 8006124:	2301      	movs	r3, #1
 8006126:	e000      	b.n	800612a <_Z11rt_modd_snfdd+0x7e>
 8006128:	2300      	movs	r3, #0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d005      	beq.n	800613a <_Z11rt_modd_snfdd+0x8e>
    y = (rtNaN);
 800612e:	4b8e      	ldr	r3, [pc, #568]	; (8006368 <_Z11rt_modd_snfdd+0x2bc>)
 8006130:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006134:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8006138:	e10a      	b.n	8006350 <_Z11rt_modd_snfdd+0x2a4>
  } else if (u0 == 0.0) {
 800613a:	f04f 0200 	mov.w	r2, #0
 800613e:	f04f 0300 	mov.w	r3, #0
 8006142:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006146:	f7fa fcc7 	bl	8000ad8 <__aeabi_dcmpeq>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00c      	beq.n	800616a <_Z11rt_modd_snfdd+0xbe>
    y = 0.0 / u1;
 8006150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006154:	f04f 0000 	mov.w	r0, #0
 8006158:	f04f 0100 	mov.w	r1, #0
 800615c:	f7fa fb7e 	bl	800085c <__aeabi_ddiv>
 8006160:	4603      	mov	r3, r0
 8006162:	460c      	mov	r4, r1
 8006164:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8006168:	e0f2      	b.n	8006350 <_Z11rt_modd_snfdd+0x2a4>
  } else if (rtIsInf(u1)) {
 800616a:	ed97 0b00 	vldr	d0, [r7]
 800616e:	f7ff fea1 	bl	8005eb4 <rtIsInf>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	bf14      	ite	ne
 8006178:	2301      	movne	r3, #1
 800617a:	2300      	moveq	r3, #0
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d029      	beq.n	80061d6 <_Z11rt_modd_snfdd+0x12a>
    if ((u1 < 0.0) != (u0 < 0.0)) {
 8006182:	2301      	movs	r3, #1
 8006184:	461c      	mov	r4, r3
 8006186:	f04f 0200 	mov.w	r2, #0
 800618a:	f04f 0300 	mov.w	r3, #0
 800618e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006192:	f7fa fcab 	bl	8000aec <__aeabi_dcmplt>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <_Z11rt_modd_snfdd+0xf4>
 800619c:	2300      	movs	r3, #0
 800619e:	461c      	mov	r4, r3
 80061a0:	b2e4      	uxtb	r4, r4
 80061a2:	2301      	movs	r3, #1
 80061a4:	461d      	mov	r5, r3
 80061a6:	f04f 0200 	mov.w	r2, #0
 80061aa:	f04f 0300 	mov.w	r3, #0
 80061ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80061b2:	f7fa fc9b 	bl	8000aec <__aeabi_dcmplt>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <_Z11rt_modd_snfdd+0x114>
 80061bc:	2300      	movs	r3, #0
 80061be:	461d      	mov	r5, r3
 80061c0:	b2eb      	uxtb	r3, r5
 80061c2:	4063      	eors	r3, r4
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 80c2 	beq.w	8006350 <_Z11rt_modd_snfdd+0x2a4>
      y = u1;
 80061cc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80061d0:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80061d4:	e0bc      	b.n	8006350 <_Z11rt_modd_snfdd+0x2a4>
    }
  } else {
    y = std::fmod(u0, u1);
 80061d6:	ed97 1b00 	vldr	d1, [r7]
 80061da:	ed97 0b02 	vldr	d0, [r7, #8]
 80061de:	f01f f82d 	bl	802523c <fmod>
 80061e2:	ed87 0b08 	vstr	d0, [r7, #32]
    yEq = (y == 0.0);
 80061e6:	2301      	movs	r3, #1
 80061e8:	461c      	mov	r4, r3
 80061ea:	f04f 0200 	mov.w	r2, #0
 80061ee:	f04f 0300 	mov.w	r3, #0
 80061f2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80061f6:	f7fa fc6f 	bl	8000ad8 <__aeabi_dcmpeq>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <_Z11rt_modd_snfdd+0x158>
 8006200:	2300      	movs	r3, #0
 8006202:	461c      	mov	r4, r3
 8006204:	b2e3      	uxtb	r3, r4
 8006206:	77fb      	strb	r3, [r7, #31]
    if ((!yEq) && (u1 > std::floor(u1))) {
 8006208:	7ffb      	ldrb	r3, [r7, #31]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d162      	bne.n	80062d4 <_Z11rt_modd_snfdd+0x228>
 800620e:	ed97 0b00 	vldr	d0, [r7]
 8006212:	f01e fde9 	bl	8024de8 <floor>
 8006216:	ec54 3b10 	vmov	r3, r4, d0
 800621a:	461a      	mov	r2, r3
 800621c:	4623      	mov	r3, r4
 800621e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006222:	f7fa fc81 	bl	8000b28 <__aeabi_dcmpgt>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d053      	beq.n	80062d4 <_Z11rt_modd_snfdd+0x228>
      q = std::abs(u0 / u1);
 800622c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006230:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006234:	f7fa fb12 	bl	800085c <__aeabi_ddiv>
 8006238:	4603      	mov	r3, r0
 800623a:	460c      	mov	r4, r1
 800623c:	ec44 3b17 	vmov	d7, r3, r4
 8006240:	eeb0 0a47 	vmov.f32	s0, s14
 8006244:	eef0 0a67 	vmov.f32	s1, s15
 8006248:	f7ff fd99 	bl	8005d7e <_ZSt3absd>
 800624c:	ed87 0b04 	vstr	d0, [r7, #16]
      yEq = !(std::abs(q - std::floor(q + 0.5)) > DBL_EPSILON * q);
 8006250:	f04f 0200 	mov.w	r2, #0
 8006254:	4b45      	ldr	r3, [pc, #276]	; (800636c <_Z11rt_modd_snfdd+0x2c0>)
 8006256:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800625a:	f7fa f81f 	bl	800029c <__adddf3>
 800625e:	4603      	mov	r3, r0
 8006260:	460c      	mov	r4, r1
 8006262:	ec44 3b17 	vmov	d7, r3, r4
 8006266:	eeb0 0a47 	vmov.f32	s0, s14
 800626a:	eef0 0a67 	vmov.f32	s1, s15
 800626e:	f01e fdbb 	bl	8024de8 <floor>
 8006272:	ec54 3b10 	vmov	r3, r4, d0
 8006276:	461a      	mov	r2, r3
 8006278:	4623      	mov	r3, r4
 800627a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800627e:	f7fa f80b 	bl	8000298 <__aeabi_dsub>
 8006282:	4603      	mov	r3, r0
 8006284:	460c      	mov	r4, r1
 8006286:	ec44 3b17 	vmov	d7, r3, r4
 800628a:	eeb0 0a47 	vmov.f32	s0, s14
 800628e:	eef0 0a67 	vmov.f32	s1, s15
 8006292:	f7ff fd74 	bl	8005d7e <_ZSt3absd>
 8006296:	ec56 5b10 	vmov	r5, r6, d0
 800629a:	f04f 0200 	mov.w	r2, #0
 800629e:	4b34      	ldr	r3, [pc, #208]	; (8006370 <_Z11rt_modd_snfdd+0x2c4>)
 80062a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80062a4:	f7fa f9b0 	bl	8000608 <__aeabi_dmul>
 80062a8:	4603      	mov	r3, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	4619      	mov	r1, r3
 80062ae:	4622      	mov	r2, r4
 80062b0:	2301      	movs	r3, #1
 80062b2:	461c      	mov	r4, r3
 80062b4:	4613      	mov	r3, r2
 80062b6:	460a      	mov	r2, r1
 80062b8:	4628      	mov	r0, r5
 80062ba:	4631      	mov	r1, r6
 80062bc:	f7fa fc34 	bl	8000b28 <__aeabi_dcmpgt>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <_Z11rt_modd_snfdd+0x21e>
 80062c6:	2300      	movs	r3, #0
 80062c8:	461c      	mov	r4, r3
 80062ca:	b2e3      	uxtb	r3, r4
 80062cc:	f083 0301 	eor.w	r3, r3, #1
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	77fb      	strb	r3, [r7, #31]
    }

    if (yEq) {
 80062d4:	7ffb      	ldrb	r3, [r7, #31]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00c      	beq.n	80062f4 <_Z11rt_modd_snfdd+0x248>
      y = u1 * 0.0;
 80062da:	f04f 0200 	mov.w	r2, #0
 80062de:	f04f 0300 	mov.w	r3, #0
 80062e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062e6:	f7fa f98f 	bl	8000608 <__aeabi_dmul>
 80062ea:	4603      	mov	r3, r0
 80062ec:	460c      	mov	r4, r1
 80062ee:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80062f2:	e02d      	b.n	8006350 <_Z11rt_modd_snfdd+0x2a4>
    } else {
      if ((u0 < 0.0) != (u1 < 0.0)) {
 80062f4:	2301      	movs	r3, #1
 80062f6:	461c      	mov	r4, r3
 80062f8:	f04f 0200 	mov.w	r2, #0
 80062fc:	f04f 0300 	mov.w	r3, #0
 8006300:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006304:	f7fa fbf2 	bl	8000aec <__aeabi_dcmplt>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <_Z11rt_modd_snfdd+0x266>
 800630e:	2300      	movs	r3, #0
 8006310:	461c      	mov	r4, r3
 8006312:	b2e4      	uxtb	r4, r4
 8006314:	2301      	movs	r3, #1
 8006316:	461d      	mov	r5, r3
 8006318:	f04f 0200 	mov.w	r2, #0
 800631c:	f04f 0300 	mov.w	r3, #0
 8006320:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006324:	f7fa fbe2 	bl	8000aec <__aeabi_dcmplt>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <_Z11rt_modd_snfdd+0x286>
 800632e:	2300      	movs	r3, #0
 8006330:	461d      	mov	r5, r3
 8006332:	b2eb      	uxtb	r3, r5
 8006334:	4063      	eors	r3, r4
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	d009      	beq.n	8006350 <_Z11rt_modd_snfdd+0x2a4>
        y += u1;
 800633c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006340:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006344:	f7f9 ffaa 	bl	800029c <__adddf3>
 8006348:	4603      	mov	r3, r0
 800634a:	460c      	mov	r4, r1
 800634c:	e9c7 3408 	strd	r3, r4, [r7, #32]
      }
    }
  }

  return y;
 8006350:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006354:	ec44 3b17 	vmov	d7, r3, r4
}
 8006358:	eeb0 0a47 	vmov.f32	s0, s14
 800635c:	eef0 0a67 	vmov.f32	s1, s15
 8006360:	372c      	adds	r7, #44	; 0x2c
 8006362:	46bd      	mov	sp, r7
 8006364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006366:	bf00      	nop
 8006368:	20000aa8 	.word	0x20000aa8
 800636c:	3fe00000 	.word	0x3fe00000
 8006370:	3cb00000 	.word	0x3cb00000
 8006374:	00000000 	.word	0x00000000

08006378 <_Z13rt_atan2d_snfdd>:

real_T rt_atan2d_snf(real_T u0, real_T u1)
{
 8006378:	b5b0      	push	{r4, r5, r7, lr}
 800637a:	b088      	sub	sp, #32
 800637c:	af00      	add	r7, sp, #0
 800637e:	ed87 0b02 	vstr	d0, [r7, #8]
 8006382:	ed87 1b00 	vstr	d1, [r7]
  real_T y;
  int32_T tmp;
  int32_T tmp_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 8006386:	ed97 0b02 	vldr	d0, [r7, #8]
 800638a:	f7ff fdbb 	bl	8005f04 <rtIsNaN>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d106      	bne.n	80063a2 <_Z13rt_atan2d_snfdd+0x2a>
 8006394:	ed97 0b00 	vldr	d0, [r7]
 8006398:	f7ff fdb4 	bl	8005f04 <rtIsNaN>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <_Z13rt_atan2d_snfdd+0x2e>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e000      	b.n	80063a8 <_Z13rt_atan2d_snfdd+0x30>
 80063a6:	2300      	movs	r3, #0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d005      	beq.n	80063b8 <_Z13rt_atan2d_snfdd+0x40>
    y = (rtNaN);
 80063ac:	4b4e      	ldr	r3, [pc, #312]	; (80064e8 <_Z13rt_atan2d_snfdd+0x170>)
 80063ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063b2:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80063b6:	e083      	b.n	80064c0 <_Z13rt_atan2d_snfdd+0x148>
  } else if (rtIsInf(u0) && rtIsInf(u1)) {
 80063b8:	ed97 0b02 	vldr	d0, [r7, #8]
 80063bc:	f7ff fd7a 	bl	8005eb4 <rtIsInf>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d008      	beq.n	80063d8 <_Z13rt_atan2d_snfdd+0x60>
 80063c6:	ed97 0b00 	vldr	d0, [r7]
 80063ca:	f7ff fd73 	bl	8005eb4 <rtIsInf>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <_Z13rt_atan2d_snfdd+0x60>
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <_Z13rt_atan2d_snfdd+0x62>
 80063d8:	2300      	movs	r3, #0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d034      	beq.n	8006448 <_Z13rt_atan2d_snfdd+0xd0>
    if (u1 > 0.0) {
 80063de:	f04f 0200 	mov.w	r2, #0
 80063e2:	f04f 0300 	mov.w	r3, #0
 80063e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063ea:	f7fa fb9d 	bl	8000b28 <__aeabi_dcmpgt>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <_Z13rt_atan2d_snfdd+0x82>
      tmp = 1;
 80063f4:	2301      	movs	r3, #1
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	e002      	b.n	8006400 <_Z13rt_atan2d_snfdd+0x88>
    } else {
      tmp = -1;
 80063fa:	f04f 33ff 	mov.w	r3, #4294967295
 80063fe:	617b      	str	r3, [r7, #20]
    }

    if (u0 > 0.0) {
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800640c:	f7fa fb8c 	bl	8000b28 <__aeabi_dcmpgt>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <_Z13rt_atan2d_snfdd+0xa4>
      tmp_0 = 1;
 8006416:	2301      	movs	r3, #1
 8006418:	613b      	str	r3, [r7, #16]
 800641a:	e002      	b.n	8006422 <_Z13rt_atan2d_snfdd+0xaa>
    } else {
      tmp_0 = -1;
 800641c:	f04f 33ff 	mov.w	r3, #4294967295
 8006420:	613b      	str	r3, [r7, #16]
    }

    y = atan2(static_cast<real_T>(tmp_0), static_cast<real_T>(tmp));
 8006422:	6938      	ldr	r0, [r7, #16]
 8006424:	f7fa f886 	bl	8000534 <__aeabi_i2d>
 8006428:	4604      	mov	r4, r0
 800642a:	460d      	mov	r5, r1
 800642c:	6978      	ldr	r0, [r7, #20]
 800642e:	f7fa f881 	bl	8000534 <__aeabi_i2d>
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	ec43 2b11 	vmov	d1, r2, r3
 800643a:	ec45 4b10 	vmov	d0, r4, r5
 800643e:	f01e fefb 	bl	8025238 <atan2>
 8006442:	ed87 0b06 	vstr	d0, [r7, #24]
 8006446:	e03b      	b.n	80064c0 <_Z13rt_atan2d_snfdd+0x148>
  } else if (u1 == 0.0) {
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006454:	f7fa fb40 	bl	8000ad8 <__aeabi_dcmpeq>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d028      	beq.n	80064b0 <_Z13rt_atan2d_snfdd+0x138>
    if (u0 > 0.0) {
 800645e:	f04f 0200 	mov.w	r2, #0
 8006462:	f04f 0300 	mov.w	r3, #0
 8006466:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800646a:	f7fa fb5d 	bl	8000b28 <__aeabi_dcmpgt>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d005      	beq.n	8006480 <_Z13rt_atan2d_snfdd+0x108>
      y = RT_PI / 2.0;
 8006474:	a418      	add	r4, pc, #96	; (adr r4, 80064d8 <_Z13rt_atan2d_snfdd+0x160>)
 8006476:	e9d4 3400 	ldrd	r3, r4, [r4]
 800647a:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800647e:	e01f      	b.n	80064c0 <_Z13rt_atan2d_snfdd+0x148>
    } else if (u0 < 0.0) {
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	f04f 0300 	mov.w	r3, #0
 8006488:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800648c:	f7fa fb2e 	bl	8000aec <__aeabi_dcmplt>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d005      	beq.n	80064a2 <_Z13rt_atan2d_snfdd+0x12a>
      y = -(RT_PI / 2.0);
 8006496:	a412      	add	r4, pc, #72	; (adr r4, 80064e0 <_Z13rt_atan2d_snfdd+0x168>)
 8006498:	e9d4 3400 	ldrd	r3, r4, [r4]
 800649c:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80064a0:	e00e      	b.n	80064c0 <_Z13rt_atan2d_snfdd+0x148>
    } else {
      y = 0.0;
 80064a2:	f04f 0300 	mov.w	r3, #0
 80064a6:	f04f 0400 	mov.w	r4, #0
 80064aa:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80064ae:	e007      	b.n	80064c0 <_Z13rt_atan2d_snfdd+0x148>
    }
  } else {
    y = atan2(u0, u1);
 80064b0:	ed97 1b00 	vldr	d1, [r7]
 80064b4:	ed97 0b02 	vldr	d0, [r7, #8]
 80064b8:	f01e febe 	bl	8025238 <atan2>
 80064bc:	ed87 0b06 	vstr	d0, [r7, #24]
  }

  return y;
 80064c0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80064c4:	ec44 3b17 	vmov	d7, r3, r4
}
 80064c8:	eeb0 0a47 	vmov.f32	s0, s14
 80064cc:	eef0 0a67 	vmov.f32	s1, s15
 80064d0:	3720      	adds	r7, #32
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bdb0      	pop	{r4, r5, r7, pc}
 80064d6:	bf00      	nop
 80064d8:	54442d18 	.word	0x54442d18
 80064dc:	3ff921fb 	.word	0x3ff921fb
 80064e0:	54442d18 	.word	0x54442d18
 80064e4:	bff921fb 	.word	0xbff921fb
 80064e8:	20000aa8 	.word	0x20000aa8

080064ec <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_>:

// Function for MATLAB Function: '<S14>/Correct'
void positionEstimatorModelClass::EKFCorrector_correctStateAndCov(real_T x[6],
  real_T P_0[36], const real_T y[4], const real_T Pxy[24], const real_T Pyy[16],
  const real_T dHdx[24])
{
 80064ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ee:	f5ad 7d75 	sub.w	sp, sp, #980	; 0x3d4
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	f107 040c 	add.w	r4, r7, #12
 80064f8:	6020      	str	r0, [r4, #0]
 80064fa:	f107 0008 	add.w	r0, r7, #8
 80064fe:	6001      	str	r1, [r0, #0]
 8006500:	1d39      	adds	r1, r7, #4
 8006502:	600a      	str	r2, [r1, #0]
 8006504:	463a      	mov	r2, r7
 8006506:	6013      	str	r3, [r2, #0]
  int32_T d;
  int32_T ijA;
  real_T X_1[36];
  real_T P_1[36];
  int8_T ipiv_0;
  for (b_j = 0; b_j < 16; b_j++) {
 8006508:	2300      	movs	r3, #0
 800650a:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800650e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006512:	2b0f      	cmp	r3, #15
 8006514:	dc15      	bgt.n	8006542 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x56>
    A[b_j] = Pyy[b_j];
 8006516:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8006520:	4413      	add	r3, r2
 8006522:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006526:	f507 7116 	add.w	r1, r7, #600	; 0x258
 800652a:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 800652e:	00d2      	lsls	r2, r2, #3
 8006530:	440a      	add	r2, r1
 8006532:	e9c2 3400 	strd	r3, r4, [r2]
  for (b_j = 0; b_j < 16; b_j++) {
 8006536:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800653a:	3301      	adds	r3, #1
 800653c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006540:	e7e5      	b.n	800650e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x22>
  }

  ipiv[0] = 1;
 8006542:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8006546:	2201      	movs	r2, #1
 8006548:	701a      	strb	r2, [r3, #0]
  ipiv[1] = 2;
 800654a:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800654e:	2202      	movs	r2, #2
 8006550:	705a      	strb	r2, [r3, #1]
  ipiv[2] = 3;
 8006552:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8006556:	2203      	movs	r2, #3
 8006558:	709a      	strb	r2, [r3, #2]
  ipiv[3] = 4;
 800655a:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800655e:	2204      	movs	r2, #4
 8006560:	70da      	strb	r2, [r3, #3]
  for (b_j = 0; b_j < 3; b_j++) {
 8006562:	2300      	movs	r3, #0
 8006564:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006568:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800656c:	2b02      	cmp	r3, #2
 800656e:	f300 8203 	bgt.w	8006978 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x48c>
    c = b_j * 5;
 8006572:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
    jA = 0;
 8006580:	2300      	movs	r3, #0
 8006582:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    ix = c;
 8006586:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800658a:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    smax = std::abs(A[c]);
 800658e:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006592:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	4413      	add	r3, r2
 800659a:	ed93 7b00 	vldr	d7, [r3]
 800659e:	eeb0 0a47 	vmov.f32	s0, s14
 80065a2:	eef0 0a67 	vmov.f32	s1, s15
 80065a6:	f7ff fbea 	bl	8005d7e <_ZSt3absd>
 80065aa:	ed87 0bee 	vstr	d0, [r7, #952]	; 0x3b8
    for (iy = 2; iy <= 4 - b_j; iy++) {
 80065ae:	2302      	movs	r3, #2
 80065b0:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80065b4:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80065b8:	f1c3 0304 	rsb	r3, r3, #4
 80065bc:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80065c0:	429a      	cmp	r2, r3
 80065c2:	dc2c      	bgt.n	800661e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x132>
      ix++;
 80065c4:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80065c8:	3301      	adds	r3, #1
 80065ca:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
      b_y = std::abs(A[ix]);
 80065ce:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80065d2:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80065d6:	00db      	lsls	r3, r3, #3
 80065d8:	4413      	add	r3, r2
 80065da:	ed93 7b00 	vldr	d7, [r3]
 80065de:	eeb0 0a47 	vmov.f32	s0, s14
 80065e2:	eef0 0a67 	vmov.f32	s1, s15
 80065e6:	f7ff fbca 	bl	8005d7e <_ZSt3absd>
 80065ea:	ed87 0be8 	vstr	d0, [r7, #928]	; 0x3a0
      if (b_y > smax) {
 80065ee:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 80065f2:	e9d7 01e8 	ldrd	r0, r1, [r7, #928]	; 0x3a0
 80065f6:	f7fa fa97 	bl	8000b28 <__aeabi_dcmpgt>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d008      	beq.n	8006612 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x126>
        jA = iy - 1;
 8006600:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006604:	3b01      	subs	r3, #1
 8006606:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
        smax = b_y;
 800660a:	e9d7 34e8 	ldrd	r3, r4, [r7, #928]	; 0x3a0
 800660e:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    for (iy = 2; iy <= 4 - b_j; iy++) {
 8006612:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006616:	3301      	adds	r3, #1
 8006618:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800661c:	e7ca      	b.n	80065b4 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc8>
      }
    }

    if (A[c + jA] != 0.0) {
 800661e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006622:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006626:	4413      	add	r3, r2
 8006628:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800662c:	00db      	lsls	r3, r3, #3
 800662e:	4413      	add	r3, r2
 8006630:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006634:	f04f 0200 	mov.w	r2, #0
 8006638:	f04f 0300 	mov.w	r3, #0
 800663c:	f7fa fa4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	f040 8107 	bne.w	8006856 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x36a>
      if (jA != 0) {
 8006648:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 80cb 	beq.w	80067e8 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x2fc>
        ipiv[b_j] = static_cast<int8_T>((b_j + jA) + 1);
 8006652:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006656:	b2da      	uxtb	r2, r3
 8006658:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800665c:	b2db      	uxtb	r3, r3
 800665e:	4413      	add	r3, r2
 8006660:	b2db      	uxtb	r3, r3
 8006662:	3301      	adds	r3, #1
 8006664:	b2db      	uxtb	r3, r3
 8006666:	b259      	sxtb	r1, r3
 8006668:	f507 7215 	add.w	r2, r7, #596	; 0x254
 800666c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006670:	4413      	add	r3, r2
 8006672:	460a      	mov	r2, r1
 8006674:	701a      	strb	r2, [r3, #0]
        ix = b_j;
 8006676:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800667a:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        iy = b_j + jA;
 800667e:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8006682:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006686:	4413      	add	r3, r2
 8006688:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        smax = A[ix];
 800668c:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006690:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006694:	00db      	lsls	r3, r3, #3
 8006696:	4413      	add	r3, r2
 8006698:	e9d3 3400 	ldrd	r3, r4, [r3]
 800669c:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        A[ix] = A[iy];
 80066a0:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80066a4:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80066a8:	00db      	lsls	r3, r3, #3
 80066aa:	4413      	add	r3, r2
 80066ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066b0:	f507 7116 	add.w	r1, r7, #600	; 0x258
 80066b4:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 80066b8:	00d2      	lsls	r2, r2, #3
 80066ba:	440a      	add	r2, r1
 80066bc:	e9c2 3400 	strd	r3, r4, [r2]
        A[iy] = smax;
 80066c0:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80066c4:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80066c8:	00db      	lsls	r3, r3, #3
 80066ca:	441a      	add	r2, r3
 80066cc:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 80066d0:	e9c2 3400 	strd	r3, r4, [r2]
        ix += 4;
 80066d4:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80066d8:	3304      	adds	r3, #4
 80066da:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        iy += 4;
 80066de:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80066e2:	3304      	adds	r3, #4
 80066e4:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        smax = A[ix];
 80066e8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80066ec:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	4413      	add	r3, r2
 80066f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066f8:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        A[ix] = A[iy];
 80066fc:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006700:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006704:	00db      	lsls	r3, r3, #3
 8006706:	4413      	add	r3, r2
 8006708:	e9d3 3400 	ldrd	r3, r4, [r3]
 800670c:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8006710:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8006714:	00d2      	lsls	r2, r2, #3
 8006716:	440a      	add	r2, r1
 8006718:	e9c2 3400 	strd	r3, r4, [r2]
        A[iy] = smax;
 800671c:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006720:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006724:	00db      	lsls	r3, r3, #3
 8006726:	441a      	add	r2, r3
 8006728:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 800672c:	e9c2 3400 	strd	r3, r4, [r2]
        ix += 4;
 8006730:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006734:	3304      	adds	r3, #4
 8006736:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        iy += 4;
 800673a:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800673e:	3304      	adds	r3, #4
 8006740:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        smax = A[ix];
 8006744:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006748:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	4413      	add	r3, r2
 8006750:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006754:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        A[ix] = A[iy];
 8006758:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800675c:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006760:	00db      	lsls	r3, r3, #3
 8006762:	4413      	add	r3, r2
 8006764:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006768:	f507 7116 	add.w	r1, r7, #600	; 0x258
 800676c:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8006770:	00d2      	lsls	r2, r2, #3
 8006772:	440a      	add	r2, r1
 8006774:	e9c2 3400 	strd	r3, r4, [r2]
        A[iy] = smax;
 8006778:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800677c:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006780:	00db      	lsls	r3, r3, #3
 8006782:	441a      	add	r2, r3
 8006784:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006788:	e9c2 3400 	strd	r3, r4, [r2]
        ix += 4;
 800678c:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006790:	3304      	adds	r3, #4
 8006792:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        iy += 4;
 8006796:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800679a:	3304      	adds	r3, #4
 800679c:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        smax = A[ix];
 80067a0:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80067a4:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80067a8:	00db      	lsls	r3, r3, #3
 80067aa:	4413      	add	r3, r2
 80067ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80067b0:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        A[ix] = A[iy];
 80067b4:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80067b8:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	4413      	add	r3, r2
 80067c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80067c4:	f507 7116 	add.w	r1, r7, #600	; 0x258
 80067c8:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 80067cc:	00d2      	lsls	r2, r2, #3
 80067ce:	440a      	add	r2, r1
 80067d0:	e9c2 3400 	strd	r3, r4, [r2]
        A[iy] = smax;
 80067d4:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80067d8:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80067dc:	00db      	lsls	r3, r3, #3
 80067de:	441a      	add	r2, r3
 80067e0:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 80067e4:	e9c2 3400 	strd	r3, r4, [r2]
      }

      jA = (c - b_j) + 4;
 80067e8:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80067ec:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	3304      	adds	r3, #4
 80067f4:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
      for (ix = c + 1; ix < jA; ix++) {
 80067f8:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80067fc:	3301      	adds	r3, #1
 80067fe:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8006802:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8006806:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800680a:	429a      	cmp	r2, r3
 800680c:	da23      	bge.n	8006856 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x36a>
        A[ix] /= A[c];
 800680e:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006812:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	4413      	add	r3, r2
 800681a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800681e:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006822:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	4413      	add	r3, r2
 800682a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800682e:	461a      	mov	r2, r3
 8006830:	4623      	mov	r3, r4
 8006832:	f7fa f813 	bl	800085c <__aeabi_ddiv>
 8006836:	4603      	mov	r3, r0
 8006838:	460c      	mov	r4, r1
 800683a:	f507 7116 	add.w	r1, r7, #600	; 0x258
 800683e:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8006842:	00d2      	lsls	r2, r2, #3
 8006844:	440a      	add	r2, r1
 8006846:	e9c2 3400 	strd	r3, r4, [r2]
      for (ix = c + 1; ix < jA; ix++) {
 800684a:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800684e:	3301      	adds	r3, #1
 8006850:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8006854:	e7d5      	b.n	8006802 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x316>
      }
    }

    jA = c;
 8006856:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800685a:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    ix = c + 4;
 800685e:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006862:	3304      	adds	r3, #4
 8006864:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    for (iy = 0; iy <= 2 - b_j; iy++) {
 8006868:	2300      	movs	r3, #0
 800686a:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800686e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006872:	f1c3 0302 	rsb	r3, r3, #2
 8006876:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 800687a:	429a      	cmp	r2, r3
 800687c:	dc76      	bgt.n	800696c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x480>
      if (A[ix] != 0.0) {
 800687e:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006882:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006886:	00db      	lsls	r3, r3, #3
 8006888:	4413      	add	r3, r2
 800688a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800688e:	f04f 0200 	mov.w	r2, #0
 8006892:	f04f 0300 	mov.w	r3, #0
 8006896:	f7fa f91f 	bl	8000ad8 <__aeabi_dcmpeq>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d155      	bne.n	800694c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x460>
        smax = -A[ix];
 80068a0:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80068a4:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	4413      	add	r3, r2
 80068ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068b0:	461a      	mov	r2, r3
 80068b2:	f8c7 23b8 	str.w	r2, [r7, #952]	; 0x3b8
 80068b6:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 80068ba:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
        c_ix = c + 1;
 80068be:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80068c2:	3301      	adds	r3, #1
 80068c4:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
        d = (jA - b_j) + 8;
 80068c8:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80068cc:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	3308      	adds	r3, #8
 80068d4:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
        for (ijA = jA + 5; ijA < d; ijA++) {
 80068d8:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 80068dc:	3305      	adds	r3, #5
 80068de:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 80068e2:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 80068e6:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80068ea:	429a      	cmp	r2, r3
 80068ec:	da2e      	bge.n	800694c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x460>
          A[ijA] += A[c_ix] * smax;
 80068ee:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80068f2:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80068f6:	00db      	lsls	r3, r3, #3
 80068f8:	4413      	add	r3, r2
 80068fa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80068fe:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006902:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	4413      	add	r3, r2
 800690a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800690e:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8006912:	f7f9 fe79 	bl	8000608 <__aeabi_dmul>
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	4620      	mov	r0, r4
 800691c:	4629      	mov	r1, r5
 800691e:	f7f9 fcbd 	bl	800029c <__adddf3>
 8006922:	4603      	mov	r3, r0
 8006924:	460c      	mov	r4, r1
 8006926:	f507 7116 	add.w	r1, r7, #600	; 0x258
 800692a:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 800692e:	00d2      	lsls	r2, r2, #3
 8006930:	440a      	add	r2, r1
 8006932:	e9c2 3400 	strd	r3, r4, [r2]
          c_ix++;
 8006936:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800693a:	3301      	adds	r3, #1
 800693c:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
        for (ijA = jA + 5; ijA < d; ijA++) {
 8006940:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8006944:	3301      	adds	r3, #1
 8006946:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 800694a:	e7ca      	b.n	80068e2 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x3f6>
        }
      }

      ix += 4;
 800694c:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006950:	3304      	adds	r3, #4
 8006952:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
      jA += 4;
 8006956:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800695a:	3304      	adds	r3, #4
 800695c:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    for (iy = 0; iy <= 2 - b_j; iy++) {
 8006960:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006964:	3301      	adds	r3, #1
 8006966:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800696a:	e780      	b.n	800686e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x382>
  for (b_j = 0; b_j < 3; b_j++) {
 800696c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006970:	3301      	adds	r3, #1
 8006972:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006976:	e5f7      	b.n	8006568 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x7c>
    }
  }

  for (b_j = 0; b_j < 24; b_j++) {
 8006978:	2300      	movs	r3, #0
 800697a:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800697e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006982:	2b17      	cmp	r3, #23
 8006984:	dc16      	bgt.n	80069b4 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x4c8>
    X_0[b_j] = Pxy[b_j];
 8006986:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800698a:	00db      	lsls	r3, r3, #3
 800698c:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8006990:	4413      	add	r3, r2
 8006992:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006996:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 800699a:	00d2      	lsls	r2, r2, #3
 800699c:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 80069a0:	440a      	add	r2, r1
 80069a2:	3af8      	subs	r2, #248	; 0xf8
 80069a4:	e9c2 3400 	strd	r3, r4, [r2]
  for (b_j = 0; b_j < 24; b_j++) {
 80069a8:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80069ac:	3301      	adds	r3, #1
 80069ae:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80069b2:	e7e4      	b.n	800697e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x492>
  }

  for (b_j = 0; b_j < 4; b_j++) {
 80069b4:	2300      	movs	r3, #0
 80069b6:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80069ba:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80069be:	2b03      	cmp	r3, #3
 80069c0:	f300 80c9 	bgt.w	8006b56 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x66a>
    jA = 6 * b_j;
 80069c4:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80069c8:	4613      	mov	r3, r2
 80069ca:	005b      	lsls	r3, r3, #1
 80069cc:	4413      	add	r3, r2
 80069ce:	005b      	lsls	r3, r3, #1
 80069d0:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    ix = b_j << 2;
 80069d4:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    for (iy = 0; iy < b_j; iy++) {
 80069de:	2300      	movs	r3, #0
 80069e0:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80069e4:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80069e8:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80069ec:	429a      	cmp	r2, r3
 80069ee:	da6b      	bge.n	8006ac8 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x5dc>
      c_ix = 6 * iy;
 80069f0:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80069f4:	4613      	mov	r3, r2
 80069f6:	005b      	lsls	r3, r3, #1
 80069f8:	4413      	add	r3, r2
 80069fa:	005b      	lsls	r3, r3, #1
 80069fc:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
      if (A[iy + ix] != 0.0) {
 8006a00:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8006a04:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006a08:	4413      	add	r3, r2
 8006a0a:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	4413      	add	r3, r2
 8006a12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a16:	f04f 0200 	mov.w	r2, #0
 8006a1a:	f04f 0300 	mov.w	r3, #0
 8006a1e:	f7fa f85b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d149      	bne.n	8006abc <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x5d0>
        for (c = 0; c < 6; c++) {
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006a2e:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006a32:	2b05      	cmp	r3, #5
 8006a34:	dc42      	bgt.n	8006abc <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x5d0>
          X_0[c + jA] -= A[iy + ix] * X_0[c + c_ix];
 8006a36:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006a3a:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006a3e:	4413      	add	r3, r2
 8006a40:	00db      	lsls	r3, r3, #3
 8006a42:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006a46:	4413      	add	r3, r2
 8006a48:	3bf8      	subs	r3, #248	; 0xf8
 8006a4a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006a4e:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8006a52:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006a56:	4413      	add	r3, r2
 8006a58:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006a5c:	00db      	lsls	r3, r3, #3
 8006a5e:	4413      	add	r3, r2
 8006a60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a64:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006a68:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8006a6c:	4413      	add	r3, r2
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006a74:	4413      	add	r3, r2
 8006a76:	3bf8      	subs	r3, #248	; 0xf8
 8006a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7c:	f7f9 fdc4 	bl	8000608 <__aeabi_dmul>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4610      	mov	r0, r2
 8006a86:	4619      	mov	r1, r3
 8006a88:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006a8c:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006a90:	18d6      	adds	r6, r2, r3
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4620      	mov	r0, r4
 8006a98:	4629      	mov	r1, r5
 8006a9a:	f7f9 fbfd 	bl	8000298 <__aeabi_dsub>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	00f2      	lsls	r2, r6, #3
 8006aa4:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 8006aa8:	440a      	add	r2, r1
 8006aaa:	3af8      	subs	r2, #248	; 0xf8
 8006aac:	e9c2 3400 	strd	r3, r4, [r2]
        for (c = 0; c < 6; c++) {
 8006ab0:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006aba:	e7b8      	b.n	8006a2e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x542>
    for (iy = 0; iy < b_j; iy++) {
 8006abc:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8006ac6:	e78d      	b.n	80069e4 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x4f8>
        }
      }
    }

    smax = 1.0 / A[b_j + ix];
 8006ac8:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8006acc:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006ad6:	00db      	lsls	r3, r3, #3
 8006ad8:	4413      	add	r3, r2
 8006ada:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	4623      	mov	r3, r4
 8006ae2:	f04f 0000 	mov.w	r0, #0
 8006ae6:	49a0      	ldr	r1, [pc, #640]	; (8006d68 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x87c>)
 8006ae8:	f7f9 feb8 	bl	800085c <__aeabi_ddiv>
 8006aec:	4603      	mov	r3, r0
 8006aee:	460c      	mov	r4, r1
 8006af0:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    for (c = 0; c < 6; c++) {
 8006af4:	2300      	movs	r3, #0
 8006af6:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006afa:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006afe:	2b05      	cmp	r3, #5
 8006b00:	dc23      	bgt.n	8006b4a <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x65e>
      X_0[c + jA] *= smax;
 8006b02:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006b06:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006b0a:	4413      	add	r3, r2
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006b12:	4413      	add	r3, r2
 8006b14:	3bf8      	subs	r3, #248	; 0xf8
 8006b16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b1a:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006b1e:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006b22:	18d5      	adds	r5, r2, r3
 8006b24:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8006b28:	f7f9 fd6e 	bl	8000608 <__aeabi_dmul>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	460c      	mov	r4, r1
 8006b30:	00ea      	lsls	r2, r5, #3
 8006b32:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 8006b36:	440a      	add	r2, r1
 8006b38:	3af8      	subs	r2, #248	; 0xf8
 8006b3a:	e9c2 3400 	strd	r3, r4, [r2]
    for (c = 0; c < 6; c++) {
 8006b3e:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006b42:	3301      	adds	r3, #1
 8006b44:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006b48:	e7d7      	b.n	8006afa <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x60e>
  for (b_j = 0; b_j < 4; b_j++) {
 8006b4a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006b4e:	3301      	adds	r3, #1
 8006b50:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006b54:	e731      	b.n	80069ba <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x4ce>
    }
  }

  for (b_j = 3; b_j >= 0; b_j--) {
 8006b56:	2303      	movs	r3, #3
 8006b58:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006b5c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f2c0 808a 	blt.w	8006c7a <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x78e>
    jA = 6 * b_j;
 8006b66:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	005b      	lsls	r3, r3, #1
 8006b6e:	4413      	add	r3, r2
 8006b70:	005b      	lsls	r3, r3, #1
 8006b72:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    ix = (b_j << 2) - 1;
 8006b76:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    for (iy = b_j + 2; iy < 5; iy++) {
 8006b82:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006b86:	3302      	adds	r3, #2
 8006b88:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8006b8c:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	dc6c      	bgt.n	8006c6e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x782>
      c_ix = (iy - 1) * 6;
 8006b94:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006b98:	1e5a      	subs	r2, r3, #1
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	4413      	add	r3, r2
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
      if (A[iy + ix] != 0.0) {
 8006ba6:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8006baa:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006bae:	4413      	add	r3, r2
 8006bb0:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006bb4:	00db      	lsls	r3, r3, #3
 8006bb6:	4413      	add	r3, r2
 8006bb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006bbc:	f04f 0200 	mov.w	r2, #0
 8006bc0:	f04f 0300 	mov.w	r3, #0
 8006bc4:	f7f9 ff88 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d149      	bne.n	8006c62 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x776>
        for (c = 0; c < 6; c++) {
 8006bce:	2300      	movs	r3, #0
 8006bd0:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006bd4:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006bd8:	2b05      	cmp	r3, #5
 8006bda:	dc42      	bgt.n	8006c62 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x776>
          X_0[c + jA] -= A[iy + ix] * X_0[c + c_ix];
 8006bdc:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006be0:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006be4:	4413      	add	r3, r2
 8006be6:	00db      	lsls	r3, r3, #3
 8006be8:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006bec:	4413      	add	r3, r2
 8006bee:	3bf8      	subs	r3, #248	; 0xf8
 8006bf0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006bf4:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8006bf8:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	4413      	add	r3, r2
 8006c06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c0a:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006c0e:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8006c12:	4413      	add	r3, r2
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006c1a:	4413      	add	r3, r2
 8006c1c:	3bf8      	subs	r3, #248	; 0xf8
 8006c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c22:	f7f9 fcf1 	bl	8000608 <__aeabi_dmul>
 8006c26:	4602      	mov	r2, r0
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006c32:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006c36:	18d6      	adds	r6, r2, r3
 8006c38:	4602      	mov	r2, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	4629      	mov	r1, r5
 8006c40:	f7f9 fb2a 	bl	8000298 <__aeabi_dsub>
 8006c44:	4603      	mov	r3, r0
 8006c46:	460c      	mov	r4, r1
 8006c48:	00f2      	lsls	r2, r6, #3
 8006c4a:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 8006c4e:	440a      	add	r2, r1
 8006c50:	3af8      	subs	r2, #248	; 0xf8
 8006c52:	e9c2 3400 	strd	r3, r4, [r2]
        for (c = 0; c < 6; c++) {
 8006c56:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006c60:	e7b8      	b.n	8006bd4 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x6e8>
    for (iy = b_j + 2; iy < 5; iy++) {
 8006c62:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006c66:	3301      	adds	r3, #1
 8006c68:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8006c6c:	e78e      	b.n	8006b8c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x6a0>
  for (b_j = 3; b_j >= 0; b_j--) {
 8006c6e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c72:	3b01      	subs	r3, #1
 8006c74:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006c78:	e770      	b.n	8006b5c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x670>
        }
      }
    }
  }

  for (b_j = 2; b_j >= 0; b_j--) {
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006c80:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	db71      	blt.n	8006d6c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x880>
    ipiv_0 = ipiv[b_j];
 8006c88:	f507 7215 	add.w	r2, r7, #596	; 0x254
 8006c8c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c90:	4413      	add	r3, r2
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	f887 339b 	strb.w	r3, [r7, #923]	; 0x39b
    if (b_j + 1 != ipiv_0) {
 8006c98:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	f997 339b 	ldrsb.w	r3, [r7, #923]	; 0x39b
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d05a      	beq.n	8006d5c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x870>
      jA = ipiv_0 - 1;
 8006ca6:	f997 339b 	ldrsb.w	r3, [r7, #923]	; 0x39b
 8006caa:	3b01      	subs	r3, #1
 8006cac:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
      for (c = 0; c < 6; c++) {
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006cb6:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006cba:	2b05      	cmp	r3, #5
 8006cbc:	dc4e      	bgt.n	8006d5c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x870>
        smax = X_0[6 * b_j + c];
 8006cbe:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	4413      	add	r3, r2
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	461a      	mov	r2, r3
 8006ccc:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006cd0:	4413      	add	r3, r2
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006cd8:	4413      	add	r3, r2
 8006cda:	3bf8      	subs	r3, #248	; 0xf8
 8006cdc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ce0:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        X_0[c + 6 * b_j] = X_0[6 * jA + c];
 8006ce4:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 8006ce8:	4613      	mov	r3, r2
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	4413      	add	r3, r2
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006cf6:	18d1      	adds	r1, r2, r3
 8006cf8:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	005b      	lsls	r3, r3, #1
 8006d00:	4413      	add	r3, r2
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	461a      	mov	r2, r3
 8006d06:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006d0a:	441a      	add	r2, r3
 8006d0c:	00cb      	lsls	r3, r1, #3
 8006d0e:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 8006d12:	440b      	add	r3, r1
 8006d14:	3bf8      	subs	r3, #248	; 0xf8
 8006d16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d1a:	00d2      	lsls	r2, r2, #3
 8006d1c:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 8006d20:	440a      	add	r2, r1
 8006d22:	3af8      	subs	r2, #248	; 0xf8
 8006d24:	e9c2 3400 	strd	r3, r4, [r2]
        X_0[c + 6 * jA] = smax;
 8006d28:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	005b      	lsls	r3, r3, #1
 8006d30:	4413      	add	r3, r2
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	461a      	mov	r2, r3
 8006d36:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006d3a:	4413      	add	r3, r2
 8006d3c:	00db      	lsls	r3, r3, #3
 8006d3e:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006d42:	4413      	add	r3, r2
 8006d44:	f1a3 02f8 	sub.w	r2, r3, #248	; 0xf8
 8006d48:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006d4c:	e9c2 3400 	strd	r3, r4, [r2]
      for (c = 0; c < 6; c++) {
 8006d50:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006d54:	3301      	adds	r3, #1
 8006d56:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006d5a:	e7ac      	b.n	8006cb6 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x7ca>
  for (b_j = 2; b_j >= 0; b_j--) {
 8006d5c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006d60:	3b01      	subs	r3, #1
 8006d62:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006d66:	e78b      	b.n	8006c80 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x794>
 8006d68:	3ff00000 	.word	0x3ff00000
      }
    }
  }

  for (b_j = 0; b_j < 6; b_j++) {
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006d72:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006d76:	2b05      	cmp	r3, #5
 8006d78:	f300 8246 	bgt.w	8007208 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xd1c>
    smax = X_0[b_j] * y[0];
 8006d7c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006d86:	4413      	add	r3, r2
 8006d88:	3bf8      	subs	r3, #248	; 0xf8
 8006d8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d8e:	463b      	mov	r3, r7
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d96:	461a      	mov	r2, r3
 8006d98:	4623      	mov	r3, r4
 8006d9a:	f7f9 fc35 	bl	8000608 <__aeabi_dmul>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	460c      	mov	r4, r1
 8006da2:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    smax += X_0[b_j + 6] * y[1];
 8006da6:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006daa:	3306      	adds	r3, #6
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006db2:	4413      	add	r3, r2
 8006db4:	3bf8      	subs	r3, #248	; 0xf8
 8006db6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006dba:	463b      	mov	r3, r7
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3308      	adds	r3, #8
 8006dc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	4623      	mov	r3, r4
 8006dc8:	f7f9 fc1e 	bl	8000608 <__aeabi_dmul>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	460c      	mov	r4, r1
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	4623      	mov	r3, r4
 8006dd4:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 8006dd8:	f7f9 fa60 	bl	800029c <__adddf3>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	460c      	mov	r4, r1
 8006de0:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    smax += X_0[b_j + 12] * y[2];
 8006de4:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006de8:	330c      	adds	r3, #12
 8006dea:	00db      	lsls	r3, r3, #3
 8006dec:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006df0:	4413      	add	r3, r2
 8006df2:	3bf8      	subs	r3, #248	; 0xf8
 8006df4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006df8:	463b      	mov	r3, r7
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3310      	adds	r3, #16
 8006dfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e02:	461a      	mov	r2, r3
 8006e04:	4623      	mov	r3, r4
 8006e06:	f7f9 fbff 	bl	8000608 <__aeabi_dmul>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	461a      	mov	r2, r3
 8006e10:	4623      	mov	r3, r4
 8006e12:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 8006e16:	f7f9 fa41 	bl	800029c <__adddf3>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	460c      	mov	r4, r1
 8006e1e:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    smax += X_0[b_j + 18] * y[3];
 8006e22:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006e26:	3312      	adds	r3, #18
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006e2e:	4413      	add	r3, r2
 8006e30:	3bf8      	subs	r3, #248	; 0xf8
 8006e32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e36:	463b      	mov	r3, r7
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3318      	adds	r3, #24
 8006e3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e40:	461a      	mov	r2, r3
 8006e42:	4623      	mov	r3, r4
 8006e44:	f7f9 fbe0 	bl	8000608 <__aeabi_dmul>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	4623      	mov	r3, r4
 8006e50:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 8006e54:	f7f9 fa22 	bl	800029c <__adddf3>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    x[b_j] += smax;
 8006e60:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	f107 0208 	add.w	r2, r7, #8
 8006e6a:	6812      	ldr	r2, [r2, #0]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e72:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006e76:	00db      	lsls	r3, r3, #3
 8006e78:	f107 0208 	add.w	r2, r7, #8
 8006e7c:	6812      	ldr	r2, [r2, #0]
 8006e7e:	18d5      	adds	r5, r2, r3
 8006e80:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8006e84:	f7f9 fa0a 	bl	800029c <__adddf3>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	e9c5 3400 	strd	r3, r4, [r5]
    for (c = 0; c < 6; c++) {
 8006e90:	2300      	movs	r3, #0
 8006e92:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006e96:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006e9a:	2b05      	cmp	r3, #5
 8006e9c:	f300 8138 	bgt.w	8007110 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc24>
      X_1[b_j + 6 * c] = 0.0;
 8006ea0:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	4413      	add	r3, r2
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	461a      	mov	r2, r3
 8006eae:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006eb8:	00db      	lsls	r3, r3, #3
 8006eba:	441a      	add	r2, r3
 8006ebc:	f04f 0300 	mov.w	r3, #0
 8006ec0:	f04f 0400 	mov.w	r4, #0
 8006ec4:	e9c2 3400 	strd	r3, r4, [r2]
      smax = X_1[6 * c + b_j];
 8006ec8:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006ecc:	4613      	mov	r3, r2
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	4413      	add	r3, r2
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006eda:	4413      	add	r3, r2
 8006edc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ee0:	00db      	lsls	r3, r3, #3
 8006ee2:	4413      	add	r3, r2
 8006ee4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ee8:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      smax += dHdx[c << 2] * X_0[b_j];
 8006eec:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8006ef8:	4413      	add	r3, r2
 8006efa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006efe:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006f02:	00db      	lsls	r3, r3, #3
 8006f04:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006f08:	4413      	add	r3, r2
 8006f0a:	3bf8      	subs	r3, #248	; 0xf8
 8006f0c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f10:	461a      	mov	r2, r3
 8006f12:	4623      	mov	r3, r4
 8006f14:	f7f9 fb78 	bl	8000608 <__aeabi_dmul>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	4623      	mov	r3, r4
 8006f20:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 8006f24:	f7f9 f9ba 	bl	800029c <__adddf3>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      X_1[b_j + 6 * c] = smax;
 8006f30:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006f34:	4613      	mov	r3, r2
 8006f36:	005b      	lsls	r3, r3, #1
 8006f38:	4413      	add	r3, r2
 8006f3a:	005b      	lsls	r3, r3, #1
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006f42:	4413      	add	r3, r2
 8006f44:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f48:	00db      	lsls	r3, r3, #3
 8006f4a:	441a      	add	r2, r3
 8006f4c:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006f50:	e9c2 3400 	strd	r3, r4, [r2]
      smax = X_1[6 * c + b_j];
 8006f54:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006f58:	4613      	mov	r3, r2
 8006f5a:	005b      	lsls	r3, r3, #1
 8006f5c:	4413      	add	r3, r2
 8006f5e:	005b      	lsls	r3, r3, #1
 8006f60:	461a      	mov	r2, r3
 8006f62:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006f66:	4413      	add	r3, r2
 8006f68:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f6c:	00db      	lsls	r3, r3, #3
 8006f6e:	4413      	add	r3, r2
 8006f70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f74:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      smax += dHdx[(c << 2) + 1] * X_0[b_j + 6];
 8006f78:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	3301      	adds	r3, #1
 8006f80:	00db      	lsls	r3, r3, #3
 8006f82:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8006f86:	4413      	add	r3, r2
 8006f88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f8c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006f90:	3306      	adds	r3, #6
 8006f92:	00db      	lsls	r3, r3, #3
 8006f94:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006f98:	4413      	add	r3, r2
 8006f9a:	3bf8      	subs	r3, #248	; 0xf8
 8006f9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	4623      	mov	r3, r4
 8006fa4:	f7f9 fb30 	bl	8000608 <__aeabi_dmul>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	460c      	mov	r4, r1
 8006fac:	461a      	mov	r2, r3
 8006fae:	4623      	mov	r3, r4
 8006fb0:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 8006fb4:	f7f9 f972 	bl	800029c <__adddf3>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	460c      	mov	r4, r1
 8006fbc:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      X_1[b_j + 6 * c] = smax;
 8006fc0:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	005b      	lsls	r3, r3, #1
 8006fc8:	4413      	add	r3, r2
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	461a      	mov	r2, r3
 8006fce:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fd8:	00db      	lsls	r3, r3, #3
 8006fda:	441a      	add	r2, r3
 8006fdc:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006fe0:	e9c2 3400 	strd	r3, r4, [r2]
      smax = X_1[6 * c + b_j];
 8006fe4:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006fe8:	4613      	mov	r3, r2
 8006fea:	005b      	lsls	r3, r3, #1
 8006fec:	4413      	add	r3, r2
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ffc:	00db      	lsls	r3, r3, #3
 8006ffe:	4413      	add	r3, r2
 8007000:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007004:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      smax += dHdx[(c << 2) + 2] * X_0[b_j + 12];
 8007008:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	3302      	adds	r3, #2
 8007010:	00db      	lsls	r3, r3, #3
 8007012:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8007016:	4413      	add	r3, r2
 8007018:	e9d3 0100 	ldrd	r0, r1, [r3]
 800701c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007020:	330c      	adds	r3, #12
 8007022:	00db      	lsls	r3, r3, #3
 8007024:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8007028:	4413      	add	r3, r2
 800702a:	3bf8      	subs	r3, #248	; 0xf8
 800702c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007030:	461a      	mov	r2, r3
 8007032:	4623      	mov	r3, r4
 8007034:	f7f9 fae8 	bl	8000608 <__aeabi_dmul>
 8007038:	4603      	mov	r3, r0
 800703a:	460c      	mov	r4, r1
 800703c:	461a      	mov	r2, r3
 800703e:	4623      	mov	r3, r4
 8007040:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 8007044:	f7f9 f92a 	bl	800029c <__adddf3>
 8007048:	4603      	mov	r3, r0
 800704a:	460c      	mov	r4, r1
 800704c:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      X_1[b_j + 6 * c] = smax;
 8007050:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8007054:	4613      	mov	r3, r2
 8007056:	005b      	lsls	r3, r3, #1
 8007058:	4413      	add	r3, r2
 800705a:	005b      	lsls	r3, r3, #1
 800705c:	461a      	mov	r2, r3
 800705e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007062:	4413      	add	r3, r2
 8007064:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	441a      	add	r2, r3
 800706c:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8007070:	e9c2 3400 	strd	r3, r4, [r2]
      smax = X_1[6 * c + b_j];
 8007074:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8007078:	4613      	mov	r3, r2
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	4413      	add	r3, r2
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	461a      	mov	r2, r3
 8007082:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007086:	4413      	add	r3, r2
 8007088:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800708c:	00db      	lsls	r3, r3, #3
 800708e:	4413      	add	r3, r2
 8007090:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007094:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      smax += dHdx[(c << 2) + 3] * X_0[b_j + 18];
 8007098:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	3303      	adds	r3, #3
 80070a0:	00db      	lsls	r3, r3, #3
 80070a2:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 80070a6:	4413      	add	r3, r2
 80070a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80070ac:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80070b0:	3312      	adds	r3, #18
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80070b8:	4413      	add	r3, r2
 80070ba:	3bf8      	subs	r3, #248	; 0xf8
 80070bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80070c0:	461a      	mov	r2, r3
 80070c2:	4623      	mov	r3, r4
 80070c4:	f7f9 faa0 	bl	8000608 <__aeabi_dmul>
 80070c8:	4603      	mov	r3, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	461a      	mov	r2, r3
 80070ce:	4623      	mov	r3, r4
 80070d0:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 80070d4:	f7f9 f8e2 	bl	800029c <__adddf3>
 80070d8:	4603      	mov	r3, r0
 80070da:	460c      	mov	r4, r1
 80070dc:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      X_1[b_j + 6 * c] = smax;
 80070e0:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80070e4:	4613      	mov	r3, r2
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	4413      	add	r3, r2
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	461a      	mov	r2, r3
 80070ee:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80070f2:	4413      	add	r3, r2
 80070f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070f8:	00db      	lsls	r3, r3, #3
 80070fa:	441a      	add	r2, r3
 80070fc:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8007100:	e9c2 3400 	strd	r3, r4, [r2]
    for (c = 0; c < 6; c++) {
 8007104:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8007108:	3301      	adds	r3, #1
 800710a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 800710e:	e6c2      	b.n	8006e96 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x9aa>
    }

    for (c = 0; c < 6; c++) {
 8007110:	2300      	movs	r3, #0
 8007112:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8007116:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800711a:	2b05      	cmp	r3, #5
 800711c:	dc6e      	bgt.n	80071fc <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xd10>
      smax = 0.0;
 800711e:	f04f 0300 	mov.w	r3, #0
 8007122:	f04f 0400 	mov.w	r4, #0
 8007126:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      for (jA = 0; jA < 6; jA++) {
 800712a:	2300      	movs	r3, #0
 800712c:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8007130:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8007134:	2b05      	cmp	r3, #5
 8007136:	dc35      	bgt.n	80071a4 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xcb8>
        smax += X_1[6 * jA + b_j] * P_0[6 * c + jA];
 8007138:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 800713c:	4613      	mov	r3, r2
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	4413      	add	r3, r2
 8007142:	005b      	lsls	r3, r3, #1
 8007144:	461a      	mov	r2, r3
 8007146:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800714a:	4413      	add	r3, r2
 800714c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007150:	00db      	lsls	r3, r3, #3
 8007152:	4413      	add	r3, r2
 8007154:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007158:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 800715c:	4613      	mov	r3, r2
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	4413      	add	r3, r2
 8007162:	005b      	lsls	r3, r3, #1
 8007164:	461a      	mov	r2, r3
 8007166:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800716a:	4413      	add	r3, r2
 800716c:	00db      	lsls	r3, r3, #3
 800716e:	1d3a      	adds	r2, r7, #4
 8007170:	6812      	ldr	r2, [r2, #0]
 8007172:	4413      	add	r3, r2
 8007174:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007178:	461a      	mov	r2, r3
 800717a:	4623      	mov	r3, r4
 800717c:	f7f9 fa44 	bl	8000608 <__aeabi_dmul>
 8007180:	4603      	mov	r3, r0
 8007182:	460c      	mov	r4, r1
 8007184:	461a      	mov	r2, r3
 8007186:	4623      	mov	r3, r4
 8007188:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 800718c:	f7f9 f886 	bl	800029c <__adddf3>
 8007190:	4603      	mov	r3, r0
 8007192:	460c      	mov	r4, r1
 8007194:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      for (jA = 0; jA < 6; jA++) {
 8007198:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800719c:	3301      	adds	r3, #1
 800719e:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 80071a2:	e7c5      	b.n	8007130 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc44>
      }

      P_1[b_j + 6 * c] = P_0[6 * c + b_j] - smax;
 80071a4:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80071a8:	4613      	mov	r3, r2
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	4413      	add	r3, r2
 80071ae:	005b      	lsls	r3, r3, #1
 80071b0:	461a      	mov	r2, r3
 80071b2:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80071b6:	4413      	add	r3, r2
 80071b8:	00db      	lsls	r3, r3, #3
 80071ba:	1d3a      	adds	r2, r7, #4
 80071bc:	6812      	ldr	r2, [r2, #0]
 80071be:	4413      	add	r3, r2
 80071c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80071c4:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80071c8:	4613      	mov	r3, r2
 80071ca:	005b      	lsls	r3, r3, #1
 80071cc:	4413      	add	r3, r2
 80071ce:	005b      	lsls	r3, r3, #1
 80071d0:	461a      	mov	r2, r3
 80071d2:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80071d6:	18d5      	adds	r5, r2, r3
 80071d8:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 80071dc:	f7f9 f85c 	bl	8000298 <__aeabi_dsub>
 80071e0:	4603      	mov	r3, r0
 80071e2:	460c      	mov	r4, r1
 80071e4:	f107 0110 	add.w	r1, r7, #16
 80071e8:	00ea      	lsls	r2, r5, #3
 80071ea:	440a      	add	r2, r1
 80071ec:	e9c2 3400 	strd	r3, r4, [r2]
    for (c = 0; c < 6; c++) {
 80071f0:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80071f4:	3301      	adds	r3, #1
 80071f6:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80071fa:	e78c      	b.n	8007116 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc2a>
  for (b_j = 0; b_j < 6; b_j++) {
 80071fc:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007200:	3301      	adds	r3, #1
 8007202:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8007206:	e5b4      	b.n	8006d72 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x886>
    }
  }

  for (b_j = 0; b_j < 36; b_j++) {
 8007208:	2300      	movs	r3, #0
 800720a:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800720e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007212:	2b23      	cmp	r3, #35	; 0x23
 8007214:	dc15      	bgt.n	8007242 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xd56>
    P_0[b_j] = P_1[b_j];
 8007216:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	1d3a      	adds	r2, r7, #4
 800721e:	6812      	ldr	r2, [r2, #0]
 8007220:	441a      	add	r2, r3
 8007222:	f107 0110 	add.w	r1, r7, #16
 8007226:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800722a:	00db      	lsls	r3, r3, #3
 800722c:	440b      	add	r3, r1
 800722e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007232:	e9c2 3400 	strd	r3, r4, [r2]
  for (b_j = 0; b_j < 36; b_j++) {
 8007236:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800723a:	3301      	adds	r3, #1
 800723c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8007240:	e7e5      	b.n	800720e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xd22>
  }
}
 8007242:	bf00      	nop
 8007244:	f507 7775 	add.w	r7, r7, #980	; 0x3d4
 8007248:	46bd      	mov	sp, r7
 800724a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800724c:	0000      	movs	r0, r0
	...

08007250 <_ZN27positionEstimatorModelClass4stepEv>:

// Model step function
void positionEstimatorModelClass::step()
{
 8007250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007254:	f6ad 0de4 	subw	sp, sp, #2276	; 0x8e4
 8007258:	af04      	add	r7, sp, #16
 800725a:	1d3b      	adds	r3, r7, #4
 800725c:	6018      	str	r0, [r3, #0]
    0.0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  // Abs: '<S34>/Abs' incorporates:
  //   Inport: '<Root>/HOME_lla'

  rtDW.Abs = std::abs(rtU.HOME_lla[0]);
 800725e:	1d3b      	adds	r3, r7, #4
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f503 634b 	add.w	r3, r3, #3248	; 0xcb0
 8007266:	ed93 7b00 	vldr	d7, [r3]
 800726a:	eeb0 0a47 	vmov.f32	s0, s14
 800726e:	eef0 0a67 	vmov.f32	s1, s15
 8007272:	f7fe fd84 	bl	8005d7e <_ZSt3absd>
 8007276:	eeb0 7a40 	vmov.f32	s14, s0
 800727a:	eef0 7a60 	vmov.f32	s15, s1
 800727e:	1d3b      	adds	r3, r7, #4
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f503 6321 	add.w	r3, r3, #2576	; 0xa10
 8007286:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S35>/Compare' incorporates:
  //   Constant: '<S35>/Constant'

  rtDW.Compare = (rtDW.Abs > rtP.CompareToConstant_const);
 800728a:	1d3b      	adds	r3, r7, #4
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f503 6321 	add.w	r3, r3, #2576	; 0xa10
 8007292:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007296:	4bb2      	ldr	r3, [pc, #712]	; (8007560 <_ZN27positionEstimatorModelClass4stepEv+0x310>)
 8007298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729c:	2601      	movs	r6, #1
 800729e:	f7f9 fc43 	bl	8000b28 <__aeabi_dcmpgt>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <_ZN27positionEstimatorModelClass4stepEv+0x5c>
 80072a8:	2300      	movs	r3, #0
 80072aa:	461e      	mov	r6, r3
 80072ac:	b2f3      	uxtb	r3, r6
 80072ae:	461a      	mov	r2, r3
 80072b0:	1d3b      	adds	r3, r7, #4
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f883 2c38 	strb.w	r2, [r3, #3128]	; 0xc38

  // Switch: '<S34>/Switch' incorporates:
  //   Inport: '<Root>/HOME_lla'

  if (rtDW.Compare) {
 80072b8:	1d3b      	adds	r3, r7, #4
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f893 3c38 	ldrb.w	r3, [r3, #3128]	; 0xc38
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d04f      	beq.n	8007364 <_ZN27positionEstimatorModelClass4stepEv+0x114>
    // Bias: '<S34>/Bias' incorporates:
    //   Inport: '<Root>/HOME_lla'

    rtDW.Bias_m = rtU.HOME_lla[0] + rtP.Bias_Bias_al;
 80072c4:	1d3b      	adds	r3, r7, #4
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f503 634b 	add.w	r3, r3, #3248	; 0xcb0
 80072cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80072d0:	4ba3      	ldr	r3, [pc, #652]	; (8007560 <_ZN27positionEstimatorModelClass4stepEv+0x310>)
 80072d2:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80072d6:	f7f8 ffe1 	bl	800029c <__adddf3>
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	1d39      	adds	r1, r7, #4
 80072e0:	6809      	ldr	r1, [r1, #0]
 80072e2:	f501 613a 	add.w	r1, r1, #2976	; 0xba0
 80072e6:	e9c1 2300 	strd	r2, r3, [r1]

    // Math: '<S34>/Math Function1' incorporates:
    //   Constant: '<S34>/Constant2'

    rtDW.MathFunction1_i = rt_modd_snf(rtDW.Bias_m, rtP.Constant2_Value_j);
 80072ea:	1d3b      	adds	r3, r7, #4
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 80072f2:	ed93 7b00 	vldr	d7, [r3]
 80072f6:	4b9a      	ldr	r3, [pc, #616]	; (8007560 <_ZN27positionEstimatorModelClass4stepEv+0x310>)
 80072f8:	ed93 6b2c 	vldr	d6, [r3, #176]	; 0xb0
 80072fc:	eeb0 1a46 	vmov.f32	s2, s12
 8007300:	eef0 1a66 	vmov.f32	s3, s13
 8007304:	eeb0 0a47 	vmov.f32	s0, s14
 8007308:	eef0 0a67 	vmov.f32	s1, s15
 800730c:	f7fe fece 	bl	80060ac <_Z11rt_modd_snfdd>
 8007310:	eeb0 7a40 	vmov.f32	s14, s0
 8007314:	eef0 7a60 	vmov.f32	s15, s1
 8007318:	1d3b      	adds	r3, r7, #4
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 8007320:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S34>/Bias1'
    rtDW.Bias1_k = rtDW.MathFunction1_i + rtP.Bias1_Bias_k;
 8007324:	1d3b      	adds	r3, r7, #4
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 800732c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007330:	4b8b      	ldr	r3, [pc, #556]	; (8007560 <_ZN27positionEstimatorModelClass4stepEv+0x310>)
 8007332:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8007336:	f7f8 ffb1 	bl	800029c <__adddf3>
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	1d39      	adds	r1, r7, #4
 8007340:	6809      	ldr	r1, [r1, #0]
 8007342:	f501 613b 	add.w	r1, r1, #2992	; 0xbb0
 8007346:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.Switch = rtDW.Bias1_k;
 800734a:	1d3b      	adds	r3, r7, #4
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f503 633b 	add.w	r3, r3, #2992	; 0xbb0
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	1d39      	adds	r1, r7, #4
 8007358:	6809      	ldr	r1, [r1, #0]
 800735a:	f601 2118 	addw	r1, r1, #2584	; 0xa18
 800735e:	e9c1 2300 	strd	r2, r3, [r1]
 8007362:	e00b      	b.n	800737c <_ZN27positionEstimatorModelClass4stepEv+0x12c>
  } else {
    rtDW.Switch = rtU.HOME_lla[0];
 8007364:	1d3b      	adds	r3, r7, #4
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f503 634b 	add.w	r3, r3, #3248	; 0xcb0
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	1d39      	adds	r1, r7, #4
 8007372:	6809      	ldr	r1, [r1, #0]
 8007374:	f601 2118 	addw	r1, r1, #2584	; 0xa18
 8007378:	e9c1 2300 	strd	r2, r3, [r1]
  }

  // End of Switch: '<S34>/Switch'

  // Abs: '<S31>/Abs1'
  rtDW.Abs1 = std::abs(rtDW.Switch);
 800737c:	1d3b      	adds	r3, r7, #4
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8007384:	ed93 7b00 	vldr	d7, [r3]
 8007388:	eeb0 0a47 	vmov.f32	s0, s14
 800738c:	eef0 0a67 	vmov.f32	s1, s15
 8007390:	f7fe fcf5 	bl	8005d7e <_ZSt3absd>
 8007394:	eeb0 7a40 	vmov.f32	s14, s0
 8007398:	eef0 7a60 	vmov.f32	s15, s1
 800739c:	1d3b      	adds	r3, r7, #4
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80073a4:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S33>/Compare' incorporates:
  //   Constant: '<S33>/Constant'

  rtDW.Compare_c = (rtDW.Abs1 > rtP.CompareToConstant_const_d);
 80073a8:	1d3b      	adds	r3, r7, #4
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80073b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073b4:	4b6a      	ldr	r3, [pc, #424]	; (8007560 <_ZN27positionEstimatorModelClass4stepEv+0x310>)
 80073b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80073ba:	2601      	movs	r6, #1
 80073bc:	f7f9 fbb4 	bl	8000b28 <__aeabi_dcmpgt>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <_ZN27positionEstimatorModelClass4stepEv+0x17a>
 80073c6:	2300      	movs	r3, #0
 80073c8:	461e      	mov	r6, r3
 80073ca:	b2f3      	uxtb	r3, r6
 80073cc:	461a      	mov	r2, r3
 80073ce:	1d3b      	adds	r3, r7, #4
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f883 2c39 	strb.w	r2, [r3, #3129]	; 0xc39
  // Switch: '<S31>/Switch' incorporates:
  //   Constant: '<S22>/Constant'
  //   Constant: '<S22>/Constant1'
  //   Switch: '<S22>/Switch1'

  if (rtDW.Compare_c) {
 80073d6:	1d3b      	adds	r3, r7, #4
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f893 3c39 	ldrb.w	r3, [r3, #3129]	; 0xc39
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f000 80c6 	beq.w	8007570 <_ZN27positionEstimatorModelClass4stepEv+0x320>
    // Bias: '<S31>/Bias'
    rtDW.Bias_d = rtDW.Abs1 + rtP.Bias_Bias_e;
 80073e4:	1d3b      	adds	r3, r7, #4
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80073ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073f0:	4b5b      	ldr	r3, [pc, #364]	; (8007560 <_ZN27positionEstimatorModelClass4stepEv+0x310>)
 80073f2:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80073f6:	f7f8 ff51 	bl	800029c <__adddf3>
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	1d39      	adds	r1, r7, #4
 8007400:	6809      	ldr	r1, [r1, #0]
 8007402:	f601 31b8 	addw	r1, r1, #3000	; 0xbb8
 8007406:	e9c1 2300 	strd	r2, r3, [r1]

    // Gain: '<S31>/Gain'
    rtDW.Gain = rtP.Gain_Gain_n * rtDW.Bias_d;
 800740a:	4b55      	ldr	r3, [pc, #340]	; (8007560 <_ZN27positionEstimatorModelClass4stepEv+0x310>)
 800740c:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8007410:	1d3b      	adds	r3, r7, #4
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8007418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741c:	f7f9 f8f4 	bl	8000608 <__aeabi_dmul>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	1d39      	adds	r1, r7, #4
 8007426:	6809      	ldr	r1, [r1, #0]
 8007428:	f501 613c 	add.w	r1, r1, #3008	; 0xbc0
 800742c:	e9c1 2300 	strd	r2, r3, [r1]

    // Bias: '<S31>/Bias1'
    rtDW.Bias1_o = rtDW.Gain + rtP.Bias1_Bias_c;
 8007430:	1d3b      	adds	r3, r7, #4
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f503 633c 	add.w	r3, r3, #3008	; 0xbc0
 8007438:	e9d3 0100 	ldrd	r0, r1, [r3]
 800743c:	4b48      	ldr	r3, [pc, #288]	; (8007560 <_ZN27positionEstimatorModelClass4stepEv+0x310>)
 800743e:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8007442:	f7f8 ff2b 	bl	800029c <__adddf3>
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	1d39      	adds	r1, r7, #4
 800744c:	6809      	ldr	r1, [r1, #0]
 800744e:	f601 31c8 	addw	r1, r1, #3016	; 0xbc8
 8007452:	e9c1 2300 	strd	r2, r3, [r1]

    // Signum: '<S31>/Sign1'
    u = rtDW.Switch;
 8007456:	1d3b      	adds	r3, r7, #4
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8007466:	e9c1 2300 	strd	r2, r3, [r1]
    if (u < 0.0) {
 800746a:	f04f 0200 	mov.w	r2, #0
 800746e:	f04f 0300 	mov.w	r3, #0
 8007472:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8007476:	e9d1 0100 	ldrd	r0, r1, [r1]
 800747a:	f7f9 fb37 	bl	8000aec <__aeabi_dcmplt>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d009      	beq.n	8007498 <_ZN27positionEstimatorModelClass4stepEv+0x248>
      rtDW.Sign1 = -1.0;
 8007484:	1d3b      	adds	r3, r7, #4
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f503 613d 	add.w	r1, r3, #3024	; 0xbd0
 800748c:	f04f 0200 	mov.w	r2, #0
 8007490:	4b34      	ldr	r3, [pc, #208]	; (8007564 <_ZN27positionEstimatorModelClass4stepEv+0x314>)
 8007492:	e9c1 2300 	strd	r2, r3, [r1]
 8007496:	e037      	b.n	8007508 <_ZN27positionEstimatorModelClass4stepEv+0x2b8>
    } else if (u > 0.0) {
 8007498:	f04f 0200 	mov.w	r2, #0
 800749c:	f04f 0300 	mov.w	r3, #0
 80074a0:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80074a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074a8:	f7f9 fb3e 	bl	8000b28 <__aeabi_dcmpgt>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d009      	beq.n	80074c6 <_ZN27positionEstimatorModelClass4stepEv+0x276>
      rtDW.Sign1 = 1.0;
 80074b2:	1d3b      	adds	r3, r7, #4
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f503 613d 	add.w	r1, r3, #3024	; 0xbd0
 80074ba:	f04f 0200 	mov.w	r2, #0
 80074be:	4b2a      	ldr	r3, [pc, #168]	; (8007568 <_ZN27positionEstimatorModelClass4stepEv+0x318>)
 80074c0:	e9c1 2300 	strd	r2, r3, [r1]
 80074c4:	e020      	b.n	8007508 <_ZN27positionEstimatorModelClass4stepEv+0x2b8>
    } else if (u == 0.0) {
 80074c6:	f04f 0200 	mov.w	r2, #0
 80074ca:	f04f 0300 	mov.w	r3, #0
 80074ce:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80074d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074d6:	f7f9 faff 	bl	8000ad8 <__aeabi_dcmpeq>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00a      	beq.n	80074f6 <_ZN27positionEstimatorModelClass4stepEv+0x2a6>
      rtDW.Sign1 = 0.0;
 80074e0:	1d3b      	adds	r3, r7, #4
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f503 613d 	add.w	r1, r3, #3024	; 0xbd0
 80074e8:	f04f 0200 	mov.w	r2, #0
 80074ec:	f04f 0300 	mov.w	r3, #0
 80074f0:	e9c1 2300 	strd	r2, r3, [r1]
 80074f4:	e008      	b.n	8007508 <_ZN27positionEstimatorModelClass4stepEv+0x2b8>
    } else {
      rtDW.Sign1 = (rtNaN);
 80074f6:	4b1d      	ldr	r3, [pc, #116]	; (800756c <_ZN27positionEstimatorModelClass4stepEv+0x31c>)
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	1d39      	adds	r1, r7, #4
 80074fe:	6809      	ldr	r1, [r1, #0]
 8007500:	f501 613d 	add.w	r1, r1, #3024	; 0xbd0
 8007504:	e9c1 2300 	strd	r2, r3, [r1]
    }

    // End of Signum: '<S31>/Sign1'

    // Product: '<S31>/Divide1'
    rtDW.Divide1 = rtDW.Sign1 * rtDW.Bias1_o;
 8007508:	1d3b      	adds	r3, r7, #4
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f503 633d 	add.w	r3, r3, #3024	; 0xbd0
 8007510:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007514:	1d3b      	adds	r3, r7, #4
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 800751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007520:	f7f9 f872 	bl	8000608 <__aeabi_dmul>
 8007524:	4602      	mov	r2, r0
 8007526:	460b      	mov	r3, r1
 8007528:	1d39      	adds	r1, r7, #4
 800752a:	6809      	ldr	r1, [r1, #0]
 800752c:	f601 31d8 	addw	r1, r1, #3032	; 0xbd8
 8007530:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.Switch_b = rtDW.Divide1;
 8007534:	1d3b      	adds	r3, r7, #4
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 800753c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007540:	1d39      	adds	r1, r7, #4
 8007542:	6809      	ldr	r1, [r1, #0]
 8007544:	f601 2128 	addw	r1, r1, #2600	; 0xa28
 8007548:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.Switch1 = rtP.Constant_Value_m;
 800754c:	4b04      	ldr	r3, [pc, #16]	; (8007560 <_ZN27positionEstimatorModelClass4stepEv+0x310>)
 800754e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8007552:	1d39      	adds	r1, r7, #4
 8007554:	6809      	ldr	r1, [r1, #0]
 8007556:	f501 6123 	add.w	r1, r1, #2608	; 0xa30
 800755a:	e9c1 2300 	strd	r2, r3, [r1]
 800755e:	e01c      	b.n	800759a <_ZN27positionEstimatorModelClass4stepEv+0x34a>
 8007560:	20000290 	.word	0x20000290
 8007564:	bff00000 	.word	0xbff00000
 8007568:	3ff00000 	.word	0x3ff00000
 800756c:	20000aa8 	.word	0x20000aa8
  } else {
    rtDW.Switch_b = rtDW.Switch;
 8007570:	1d3b      	adds	r3, r7, #4
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	1d39      	adds	r1, r7, #4
 800757e:	6809      	ldr	r1, [r1, #0]
 8007580:	f601 2128 	addw	r1, r1, #2600	; 0xa28
 8007584:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.Switch1 = rtP.Constant1_Value_f;
 8007588:	4baa      	ldr	r3, [pc, #680]	; (8007834 <_ZN27positionEstimatorModelClass4stepEv+0x5e4>)
 800758a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800758e:	1d39      	adds	r1, r7, #4
 8007590:	6809      	ldr	r1, [r1, #0]
 8007592:	f501 6123 	add.w	r1, r1, #2608	; 0xa30
 8007596:	e9c1 2300 	strd	r2, r3, [r1]
  // End of Switch: '<S31>/Switch'

  // Sum: '<S22>/Sum' incorporates:
  //   Inport: '<Root>/HOME_lla'

  rtDW.Sum = rtDW.Switch1 + rtU.HOME_lla[1];
 800759a:	1d3b      	adds	r3, r7, #4
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 80075a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075a6:	1d3b      	adds	r3, r7, #4
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80075ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b2:	f7f8 fe73 	bl	800029c <__adddf3>
 80075b6:	4602      	mov	r2, r0
 80075b8:	460b      	mov	r3, r1
 80075ba:	1d39      	adds	r1, r7, #4
 80075bc:	6809      	ldr	r1, [r1, #0]
 80075be:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80075c2:	e9c1 2300 	strd	r2, r3, [r1]

  // Abs: '<S32>/Abs'
  rtDW.Abs_i = std::abs(rtDW.Sum);
 80075c6:	1d3b      	adds	r3, r7, #4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80075ce:	ed93 7b00 	vldr	d7, [r3]
 80075d2:	eeb0 0a47 	vmov.f32	s0, s14
 80075d6:	eef0 0a67 	vmov.f32	s1, s15
 80075da:	f7fe fbd0 	bl	8005d7e <_ZSt3absd>
 80075de:	eeb0 7a40 	vmov.f32	s14, s0
 80075e2:	eef0 7a60 	vmov.f32	s15, s1
 80075e6:	1d3b      	adds	r3, r7, #4
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 80075ee:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S36>/Compare' incorporates:
  //   Constant: '<S36>/Constant'

  rtDW.Compare_d = (rtDW.Abs_i > rtP.CompareToConstant_const_j);
 80075f2:	1d3b      	adds	r3, r7, #4
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 80075fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075fe:	4b8d      	ldr	r3, [pc, #564]	; (8007834 <_ZN27positionEstimatorModelClass4stepEv+0x5e4>)
 8007600:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007604:	2601      	movs	r6, #1
 8007606:	f7f9 fa8f 	bl	8000b28 <__aeabi_dcmpgt>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d101      	bne.n	8007614 <_ZN27positionEstimatorModelClass4stepEv+0x3c4>
 8007610:	2300      	movs	r3, #0
 8007612:	461e      	mov	r6, r3
 8007614:	b2f3      	uxtb	r3, r6
 8007616:	461a      	mov	r2, r3
 8007618:	1d3b      	adds	r3, r7, #4
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f883 2c3a 	strb.w	r2, [r3, #3130]	; 0xc3a

  // Switch: '<S32>/Switch'
  if (rtDW.Compare_d) {
 8007620:	1d3b      	adds	r3, r7, #4
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f893 3c3a 	ldrb.w	r3, [r3, #3130]	; 0xc3a
 8007628:	2b00      	cmp	r3, #0
 800762a:	d04f      	beq.n	80076cc <_ZN27positionEstimatorModelClass4stepEv+0x47c>
    // Bias: '<S32>/Bias'
    rtDW.Bias = rtDW.Sum + rtP.Bias_Bias_d;
 800762c:	1d3b      	adds	r3, r7, #4
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007634:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007638:	4b7e      	ldr	r3, [pc, #504]	; (8007834 <_ZN27positionEstimatorModelClass4stepEv+0x5e4>)
 800763a:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800763e:	f7f8 fe2d 	bl	800029c <__adddf3>
 8007642:	4602      	mov	r2, r0
 8007644:	460b      	mov	r3, r1
 8007646:	1d39      	adds	r1, r7, #4
 8007648:	6809      	ldr	r1, [r1, #0]
 800764a:	f601 3188 	addw	r1, r1, #2952	; 0xb88
 800764e:	e9c1 2300 	strd	r2, r3, [r1]

    // Math: '<S32>/Math Function1' incorporates:
    //   Constant: '<S32>/Constant2'

    rtDW.MathFunction1 = rt_modd_snf(rtDW.Bias, rtP.Constant2_Value_k);
 8007652:	1d3b      	adds	r3, r7, #4
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f603 3388 	addw	r3, r3, #2952	; 0xb88
 800765a:	ed93 7b00 	vldr	d7, [r3]
 800765e:	4b75      	ldr	r3, [pc, #468]	; (8007834 <_ZN27positionEstimatorModelClass4stepEv+0x5e4>)
 8007660:	ed93 6b32 	vldr	d6, [r3, #200]	; 0xc8
 8007664:	eeb0 1a46 	vmov.f32	s2, s12
 8007668:	eef0 1a66 	vmov.f32	s3, s13
 800766c:	eeb0 0a47 	vmov.f32	s0, s14
 8007670:	eef0 0a67 	vmov.f32	s1, s15
 8007674:	f7fe fd1a 	bl	80060ac <_Z11rt_modd_snfdd>
 8007678:	eeb0 7a40 	vmov.f32	s14, s0
 800767c:	eef0 7a60 	vmov.f32	s15, s1
 8007680:	1d3b      	adds	r3, r7, #4
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8007688:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S32>/Bias1'
    rtDW.Bias1 = rtDW.MathFunction1 + rtP.Bias1_Bias_cz;
 800768c:	1d3b      	adds	r3, r7, #4
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8007694:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007698:	4b66      	ldr	r3, [pc, #408]	; (8007834 <_ZN27positionEstimatorModelClass4stepEv+0x5e4>)
 800769a:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 800769e:	f7f8 fdfd 	bl	800029c <__adddf3>
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	1d39      	adds	r1, r7, #4
 80076a8:	6809      	ldr	r1, [r1, #0]
 80076aa:	f601 3198 	addw	r1, r1, #2968	; 0xb98
 80076ae:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.Switch_h = rtDW.Bias1;
 80076b2:	1d3b      	adds	r3, r7, #4
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 80076ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076be:	1d39      	adds	r1, r7, #4
 80076c0:	6809      	ldr	r1, [r1, #0]
 80076c2:	f601 2148 	addw	r1, r1, #2632	; 0xa48
 80076c6:	e9c1 2300 	strd	r2, r3, [r1]
 80076ca:	e00b      	b.n	80076e4 <_ZN27positionEstimatorModelClass4stepEv+0x494>
  } else {
    rtDW.Switch_h = rtDW.Sum;
 80076cc:	1d3b      	adds	r3, r7, #4
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80076d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d8:	1d39      	adds	r1, r7, #4
 80076da:	6809      	ldr	r1, [r1, #0]
 80076dc:	f601 2148 	addw	r1, r1, #2632	; 0xa48
 80076e0:	e9c1 2300 	strd	r2, r3, [r1]

  // Sum: '<S20>/Sum1' incorporates:
  //   Inport: '<Root>/lat'
  //   Inport: '<Root>/lon'

  rtDW.Sum1[0] = rtU.lat - rtDW.Switch_b;
 80076e4:	1d3b      	adds	r3, r7, #4
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f603 4378 	addw	r3, r3, #3192	; 0xc78
 80076ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076f0:	1d3b      	adds	r3, r7, #4
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	f7f8 fdcc 	bl	8000298 <__aeabi_dsub>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	1d39      	adds	r1, r7, #4
 8007706:	6809      	ldr	r1, [r1, #0]
 8007708:	e9c1 2300 	strd	r2, r3, [r1]
  rtDW.Sum1[1] = rtU.lon - rtDW.Switch_h;
 800770c:	1d3b      	adds	r3, r7, #4
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8007714:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007718:	1d3b      	adds	r3, r7, #4
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f603 2348 	addw	r3, r3, #2632	; 0xa48
 8007720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007724:	f7f8 fdb8 	bl	8000298 <__aeabi_dsub>
 8007728:	4602      	mov	r2, r0
 800772a:	460b      	mov	r3, r1
 800772c:	1d39      	adds	r1, r7, #4
 800772e:	6809      	ldr	r1, [r1, #0]
 8007730:	e9c1 2302 	strd	r2, r3, [r1, #8]

  // Abs: '<S28>/Abs'
  rtDW.Abs_b = std::abs(rtDW.Sum1[0]);
 8007734:	1d3b      	adds	r3, r7, #4
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	ed93 7b00 	vldr	d7, [r3]
 800773c:	eeb0 0a47 	vmov.f32	s0, s14
 8007740:	eef0 0a67 	vmov.f32	s1, s15
 8007744:	f7fe fb1b 	bl	8005d7e <_ZSt3absd>
 8007748:	eeb0 7a40 	vmov.f32	s14, s0
 800774c:	eef0 7a60 	vmov.f32	s15, s1
 8007750:	1d3b      	adds	r3, r7, #4
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f503 6325 	add.w	r3, r3, #2640	; 0xa50
 8007758:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S29>/Compare' incorporates:
  //   Constant: '<S29>/Constant'

  rtDW.Compare_ds = (rtDW.Abs_b > rtP.CompareToConstant_const_n);
 800775c:	1d3b      	adds	r3, r7, #4
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f503 6325 	add.w	r3, r3, #2640	; 0xa50
 8007764:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007768:	4b32      	ldr	r3, [pc, #200]	; (8007834 <_ZN27positionEstimatorModelClass4stepEv+0x5e4>)
 800776a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800776e:	2601      	movs	r6, #1
 8007770:	f7f9 f9da 	bl	8000b28 <__aeabi_dcmpgt>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <_ZN27positionEstimatorModelClass4stepEv+0x52e>
 800777a:	2300      	movs	r3, #0
 800777c:	461e      	mov	r6, r3
 800777e:	b2f3      	uxtb	r3, r6
 8007780:	461a      	mov	r2, r3
 8007782:	1d3b      	adds	r3, r7, #4
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f883 2c3b 	strb.w	r2, [r3, #3131]	; 0xc3b

  // Switch: '<S28>/Switch'
  if (rtDW.Compare_ds) {
 800778a:	1d3b      	adds	r3, r7, #4
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f893 3c3b 	ldrb.w	r3, [r3, #3131]	; 0xc3b
 8007792:	2b00      	cmp	r3, #0
 8007794:	d050      	beq.n	8007838 <_ZN27positionEstimatorModelClass4stepEv+0x5e8>
    // Bias: '<S28>/Bias'
    rtDW.Bias_e = rtDW.Sum1[0] + rtP.Bias_Bias_b;
 8007796:	1d3b      	adds	r3, r7, #4
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800779e:	4b25      	ldr	r3, [pc, #148]	; (8007834 <_ZN27positionEstimatorModelClass4stepEv+0x5e4>)
 80077a0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80077a4:	f7f8 fd7a 	bl	800029c <__adddf3>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	1d39      	adds	r1, r7, #4
 80077ae:	6809      	ldr	r1, [r1, #0]
 80077b0:	f601 31f8 	addw	r1, r1, #3064	; 0xbf8
 80077b4:	e9c1 2300 	strd	r2, r3, [r1]

    // Math: '<S28>/Math Function1' incorporates:
    //   Constant: '<S28>/Constant2'

    rtDW.MathFunction1_o = rt_modd_snf(rtDW.Bias_e, rtP.Constant2_Value);
 80077b8:	1d3b      	adds	r3, r7, #4
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 80077c0:	ed93 7b00 	vldr	d7, [r3]
 80077c4:	4b1b      	ldr	r3, [pc, #108]	; (8007834 <_ZN27positionEstimatorModelClass4stepEv+0x5e4>)
 80077c6:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80077ca:	eeb0 1a46 	vmov.f32	s2, s12
 80077ce:	eef0 1a66 	vmov.f32	s3, s13
 80077d2:	eeb0 0a47 	vmov.f32	s0, s14
 80077d6:	eef0 0a67 	vmov.f32	s1, s15
 80077da:	f7fe fc67 	bl	80060ac <_Z11rt_modd_snfdd>
 80077de:	eeb0 7a40 	vmov.f32	s14, s0
 80077e2:	eef0 7a60 	vmov.f32	s15, s1
 80077e6:	1d3b      	adds	r3, r7, #4
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80077ee:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S28>/Bias1'
    rtDW.Bias1_oh = rtDW.MathFunction1_o + rtP.Bias1_Bias_p;
 80077f2:	1d3b      	adds	r3, r7, #4
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80077fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80077fe:	4b0d      	ldr	r3, [pc, #52]	; (8007834 <_ZN27positionEstimatorModelClass4stepEv+0x5e4>)
 8007800:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007804:	f7f8 fd4a 	bl	800029c <__adddf3>
 8007808:	4602      	mov	r2, r0
 800780a:	460b      	mov	r3, r1
 800780c:	1d39      	adds	r1, r7, #4
 800780e:	6809      	ldr	r1, [r1, #0]
 8007810:	f601 4108 	addw	r1, r1, #3080	; 0xc08
 8007814:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.Switch_f = rtDW.Bias1_oh;
 8007818:	1d3b      	adds	r3, r7, #4
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 8007820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007824:	1d39      	adds	r1, r7, #4
 8007826:	6809      	ldr	r1, [r1, #0]
 8007828:	f601 2158 	addw	r1, r1, #2648	; 0xa58
 800782c:	e9c1 2300 	strd	r2, r3, [r1]
 8007830:	e00c      	b.n	800784c <_ZN27positionEstimatorModelClass4stepEv+0x5fc>
 8007832:	bf00      	nop
 8007834:	20000290 	.word	0x20000290
  } else {
    rtDW.Switch_f = rtDW.Sum1[0];
 8007838:	1d3b      	adds	r3, r7, #4
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	1d39      	adds	r1, r7, #4
 8007842:	6809      	ldr	r1, [r1, #0]
 8007844:	f601 2158 	addw	r1, r1, #2648	; 0xa58
 8007848:	e9c1 2300 	strd	r2, r3, [r1]
  }

  // End of Switch: '<S28>/Switch'

  // Abs: '<S25>/Abs1'
  rtDW.Abs1_j = std::abs(rtDW.Switch_f);
 800784c:	1d3b      	adds	r3, r7, #4
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 8007854:	ed93 7b00 	vldr	d7, [r3]
 8007858:	eeb0 0a47 	vmov.f32	s0, s14
 800785c:	eef0 0a67 	vmov.f32	s1, s15
 8007860:	f7fe fa8d 	bl	8005d7e <_ZSt3absd>
 8007864:	eeb0 7a40 	vmov.f32	s14, s0
 8007868:	eef0 7a60 	vmov.f32	s15, s1
 800786c:	1d3b      	adds	r3, r7, #4
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 8007874:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S27>/Compare' incorporates:
  //   Constant: '<S27>/Constant'

  rtDW.Compare_m = (rtDW.Abs1_j > rtP.CompareToConstant_const_e);
 8007878:	1d3b      	adds	r3, r7, #4
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 8007880:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007884:	4b6a      	ldr	r3, [pc, #424]	; (8007a30 <_ZN27positionEstimatorModelClass4stepEv+0x7e0>)
 8007886:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800788a:	2601      	movs	r6, #1
 800788c:	f7f9 f94c 	bl	8000b28 <__aeabi_dcmpgt>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <_ZN27positionEstimatorModelClass4stepEv+0x64a>
 8007896:	2300      	movs	r3, #0
 8007898:	461e      	mov	r6, r3
 800789a:	b2f3      	uxtb	r3, r6
 800789c:	461a      	mov	r2, r3
 800789e:	1d3b      	adds	r3, r7, #4
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f883 2c3c 	strb.w	r2, [r3, #3132]	; 0xc3c
  // Switch: '<S25>/Switch' incorporates:
  //   Constant: '<S21>/Constant'
  //   Constant: '<S21>/Constant1'
  //   Switch: '<S21>/Switch1'

  if (rtDW.Compare_m) {
 80078a6:	1d3b      	adds	r3, r7, #4
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f893 3c3c 	ldrb.w	r3, [r3, #3132]	; 0xc3c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f000 80c6 	beq.w	8007a40 <_ZN27positionEstimatorModelClass4stepEv+0x7f0>
    // Bias: '<S25>/Bias'
    rtDW.Bias_mj = rtDW.Abs1_j + rtP.Bias_Bias;
 80078b4:	1d3b      	adds	r3, r7, #4
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 80078bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078c0:	4b5b      	ldr	r3, [pc, #364]	; (8007a30 <_ZN27positionEstimatorModelClass4stepEv+0x7e0>)
 80078c2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80078c6:	f7f8 fce9 	bl	800029c <__adddf3>
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	1d39      	adds	r1, r7, #4
 80078d0:	6809      	ldr	r1, [r1, #0]
 80078d2:	f501 6141 	add.w	r1, r1, #3088	; 0xc10
 80078d6:	e9c1 2300 	strd	r2, r3, [r1]

    // Gain: '<S25>/Gain'
    rtDW.Gain_c = rtP.Gain_Gain * rtDW.Bias_mj;
 80078da:	4b55      	ldr	r3, [pc, #340]	; (8007a30 <_ZN27positionEstimatorModelClass4stepEv+0x7e0>)
 80078dc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80078e0:	1d3b      	adds	r3, r7, #4
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 80078e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ec:	f7f8 fe8c 	bl	8000608 <__aeabi_dmul>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	1d39      	adds	r1, r7, #4
 80078f6:	6809      	ldr	r1, [r1, #0]
 80078f8:	f601 4118 	addw	r1, r1, #3096	; 0xc18
 80078fc:	e9c1 2300 	strd	r2, r3, [r1]

    // Bias: '<S25>/Bias1'
    rtDW.Bias1_n = rtDW.Gain_c + rtP.Bias1_Bias;
 8007900:	1d3b      	adds	r3, r7, #4
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f603 4318 	addw	r3, r3, #3096	; 0xc18
 8007908:	e9d3 0100 	ldrd	r0, r1, [r3]
 800790c:	4b48      	ldr	r3, [pc, #288]	; (8007a30 <_ZN27positionEstimatorModelClass4stepEv+0x7e0>)
 800790e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007912:	f7f8 fcc3 	bl	800029c <__adddf3>
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	1d39      	adds	r1, r7, #4
 800791c:	6809      	ldr	r1, [r1, #0]
 800791e:	f501 6142 	add.w	r1, r1, #3104	; 0xc20
 8007922:	e9c1 2300 	strd	r2, r3, [r1]

    // Signum: '<S25>/Sign1'
    u = rtDW.Switch_f;
 8007926:	1d3b      	adds	r3, r7, #4
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8007936:	e9c1 2300 	strd	r2, r3, [r1]
    if (u < 0.0) {
 800793a:	f04f 0200 	mov.w	r2, #0
 800793e:	f04f 0300 	mov.w	r3, #0
 8007942:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8007946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800794a:	f7f9 f8cf 	bl	8000aec <__aeabi_dcmplt>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d009      	beq.n	8007968 <_ZN27positionEstimatorModelClass4stepEv+0x718>
      rtDW.Sign1_g = -1.0;
 8007954:	1d3b      	adds	r3, r7, #4
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f603 4128 	addw	r1, r3, #3112	; 0xc28
 800795c:	f04f 0200 	mov.w	r2, #0
 8007960:	4b34      	ldr	r3, [pc, #208]	; (8007a34 <_ZN27positionEstimatorModelClass4stepEv+0x7e4>)
 8007962:	e9c1 2300 	strd	r2, r3, [r1]
 8007966:	e037      	b.n	80079d8 <_ZN27positionEstimatorModelClass4stepEv+0x788>
    } else if (u > 0.0) {
 8007968:	f04f 0200 	mov.w	r2, #0
 800796c:	f04f 0300 	mov.w	r3, #0
 8007970:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8007974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007978:	f7f9 f8d6 	bl	8000b28 <__aeabi_dcmpgt>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d009      	beq.n	8007996 <_ZN27positionEstimatorModelClass4stepEv+0x746>
      rtDW.Sign1_g = 1.0;
 8007982:	1d3b      	adds	r3, r7, #4
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f603 4128 	addw	r1, r3, #3112	; 0xc28
 800798a:	f04f 0200 	mov.w	r2, #0
 800798e:	4b2a      	ldr	r3, [pc, #168]	; (8007a38 <_ZN27positionEstimatorModelClass4stepEv+0x7e8>)
 8007990:	e9c1 2300 	strd	r2, r3, [r1]
 8007994:	e020      	b.n	80079d8 <_ZN27positionEstimatorModelClass4stepEv+0x788>
    } else if (u == 0.0) {
 8007996:	f04f 0200 	mov.w	r2, #0
 800799a:	f04f 0300 	mov.w	r3, #0
 800799e:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80079a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079a6:	f7f9 f897 	bl	8000ad8 <__aeabi_dcmpeq>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00a      	beq.n	80079c6 <_ZN27positionEstimatorModelClass4stepEv+0x776>
      rtDW.Sign1_g = 0.0;
 80079b0:	1d3b      	adds	r3, r7, #4
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f603 4128 	addw	r1, r3, #3112	; 0xc28
 80079b8:	f04f 0200 	mov.w	r2, #0
 80079bc:	f04f 0300 	mov.w	r3, #0
 80079c0:	e9c1 2300 	strd	r2, r3, [r1]
 80079c4:	e008      	b.n	80079d8 <_ZN27positionEstimatorModelClass4stepEv+0x788>
    } else {
      rtDW.Sign1_g = (rtNaN);
 80079c6:	4b1d      	ldr	r3, [pc, #116]	; (8007a3c <_ZN27positionEstimatorModelClass4stepEv+0x7ec>)
 80079c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079cc:	1d39      	adds	r1, r7, #4
 80079ce:	6809      	ldr	r1, [r1, #0]
 80079d0:	f601 4128 	addw	r1, r1, #3112	; 0xc28
 80079d4:	e9c1 2300 	strd	r2, r3, [r1]
    }

    // End of Signum: '<S25>/Sign1'

    // Product: '<S25>/Divide1'
    rtDW.Divide1_h = rtDW.Sign1_g * rtDW.Bias1_n;
 80079d8:	1d3b      	adds	r3, r7, #4
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 80079e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079e4:	1d3b      	adds	r3, r7, #4
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	f7f8 fe0a 	bl	8000608 <__aeabi_dmul>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	1d39      	adds	r1, r7, #4
 80079fa:	6809      	ldr	r1, [r1, #0]
 80079fc:	f501 6143 	add.w	r1, r1, #3120	; 0xc30
 8007a00:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.Switch_j = rtDW.Divide1_h;
 8007a04:	1d3b      	adds	r3, r7, #4
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8007a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a10:	1d39      	adds	r1, r7, #4
 8007a12:	6809      	ldr	r1, [r1, #0]
 8007a14:	f601 2168 	addw	r1, r1, #2664	; 0xa68
 8007a18:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.Switch1_b = rtP.Constant_Value;
 8007a1c:	4b04      	ldr	r3, [pc, #16]	; (8007a30 <_ZN27positionEstimatorModelClass4stepEv+0x7e0>)
 8007a1e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007a22:	1d39      	adds	r1, r7, #4
 8007a24:	6809      	ldr	r1, [r1, #0]
 8007a26:	f501 6127 	add.w	r1, r1, #2672	; 0xa70
 8007a2a:	e9c1 2300 	strd	r2, r3, [r1]
 8007a2e:	e01c      	b.n	8007a6a <_ZN27positionEstimatorModelClass4stepEv+0x81a>
 8007a30:	20000290 	.word	0x20000290
 8007a34:	bff00000 	.word	0xbff00000
 8007a38:	3ff00000 	.word	0x3ff00000
 8007a3c:	20000aa8 	.word	0x20000aa8
  } else {
    rtDW.Switch_j = rtDW.Switch_f;
 8007a40:	1d3b      	adds	r3, r7, #4
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	1d39      	adds	r1, r7, #4
 8007a4e:	6809      	ldr	r1, [r1, #0]
 8007a50:	f601 2168 	addw	r1, r1, #2664	; 0xa68
 8007a54:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.Switch1_b = rtP.Constant1_Value;
 8007a58:	4b4f      	ldr	r3, [pc, #316]	; (8007b98 <_ZN27positionEstimatorModelClass4stepEv+0x948>)
 8007a5a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007a5e:	1d39      	adds	r1, r7, #4
 8007a60:	6809      	ldr	r1, [r1, #0]
 8007a62:	f501 6127 	add.w	r1, r1, #2672	; 0xa70
 8007a66:	e9c1 2300 	strd	r2, r3, [r1]
  }

  // End of Switch: '<S25>/Switch'

  // Sum: '<S21>/Sum'
  rtDW.Sum_j = rtDW.Switch1_b + rtDW.Sum1[1];
 8007a6a:	1d3b      	adds	r3, r7, #4
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f503 6327 	add.w	r3, r3, #2672	; 0xa70
 8007a72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a76:	1d3b      	adds	r3, r7, #4
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007a7e:	f7f8 fc0d 	bl	800029c <__adddf3>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	1d39      	adds	r1, r7, #4
 8007a88:	6809      	ldr	r1, [r1, #0]
 8007a8a:	f601 2178 	addw	r1, r1, #2680	; 0xa78
 8007a8e:	e9c1 2300 	strd	r2, r3, [r1]

  // Abs: '<S26>/Abs'
  rtDW.Abs_b0 = std::abs(rtDW.Sum_j);
 8007a92:	1d3b      	adds	r3, r7, #4
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 8007a9a:	ed93 7b00 	vldr	d7, [r3]
 8007a9e:	eeb0 0a47 	vmov.f32	s0, s14
 8007aa2:	eef0 0a67 	vmov.f32	s1, s15
 8007aa6:	f7fe f96a 	bl	8005d7e <_ZSt3absd>
 8007aaa:	eeb0 7a40 	vmov.f32	s14, s0
 8007aae:	eef0 7a60 	vmov.f32	s15, s1
 8007ab2:	1d3b      	adds	r3, r7, #4
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 8007aba:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S30>/Compare' incorporates:
  //   Constant: '<S30>/Constant'

  rtDW.Compare_k = (rtDW.Abs_b0 > rtP.CompareToConstant_const_ei);
 8007abe:	1d3b      	adds	r3, r7, #4
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 8007ac6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007aca:	4b33      	ldr	r3, [pc, #204]	; (8007b98 <_ZN27positionEstimatorModelClass4stepEv+0x948>)
 8007acc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007ad0:	2601      	movs	r6, #1
 8007ad2:	f7f9 f829 	bl	8000b28 <__aeabi_dcmpgt>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <_ZN27positionEstimatorModelClass4stepEv+0x890>
 8007adc:	2300      	movs	r3, #0
 8007ade:	461e      	mov	r6, r3
 8007ae0:	b2f3      	uxtb	r3, r6
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	1d3b      	adds	r3, r7, #4
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f883 2c3d 	strb.w	r2, [r3, #3133]	; 0xc3d

  // Switch: '<S26>/Switch'
  if (rtDW.Compare_k) {
 8007aec:	1d3b      	adds	r3, r7, #4
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f893 3c3d 	ldrb.w	r3, [r3, #3133]	; 0xc3d
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d051      	beq.n	8007b9c <_ZN27positionEstimatorModelClass4stepEv+0x94c>
    // Bias: '<S26>/Bias'
    rtDW.Bias_j = rtDW.Sum_j + rtP.Bias_Bias_a;
 8007af8:	1d3b      	adds	r3, r7, #4
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 8007b00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b04:	4b24      	ldr	r3, [pc, #144]	; (8007b98 <_ZN27positionEstimatorModelClass4stepEv+0x948>)
 8007b06:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8007b0a:	f7f8 fbc7 	bl	800029c <__adddf3>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	460b      	mov	r3, r1
 8007b12:	1d39      	adds	r1, r7, #4
 8007b14:	6809      	ldr	r1, [r1, #0]
 8007b16:	f501 613e 	add.w	r1, r1, #3040	; 0xbe0
 8007b1a:	e9c1 2300 	strd	r2, r3, [r1]

    // Math: '<S26>/Math Function1' incorporates:
    //   Constant: '<S26>/Constant2'

    rtDW.MathFunction1_h = rt_modd_snf(rtDW.Bias_j, rtP.Constant2_Value_g);
 8007b1e:	1d3b      	adds	r3, r7, #4
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 8007b26:	ed93 7b00 	vldr	d7, [r3]
 8007b2a:	4b1b      	ldr	r3, [pc, #108]	; (8007b98 <_ZN27positionEstimatorModelClass4stepEv+0x948>)
 8007b2c:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 8007b30:	eeb0 1a46 	vmov.f32	s2, s12
 8007b34:	eef0 1a66 	vmov.f32	s3, s13
 8007b38:	eeb0 0a47 	vmov.f32	s0, s14
 8007b3c:	eef0 0a67 	vmov.f32	s1, s15
 8007b40:	f7fe fab4 	bl	80060ac <_Z11rt_modd_snfdd>
 8007b44:	eeb0 7a40 	vmov.f32	s14, s0
 8007b48:	eef0 7a60 	vmov.f32	s15, s1
 8007b4c:	1d3b      	adds	r3, r7, #4
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f603 33e8 	addw	r3, r3, #3048	; 0xbe8
 8007b54:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S26>/Bias1'
    rtDW.Bias1_p = rtDW.MathFunction1_h + rtP.Bias1_Bias_l;
 8007b58:	1d3b      	adds	r3, r7, #4
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f603 33e8 	addw	r3, r3, #3048	; 0xbe8
 8007b60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b64:	4b0c      	ldr	r3, [pc, #48]	; (8007b98 <_ZN27positionEstimatorModelClass4stepEv+0x948>)
 8007b66:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8007b6a:	f7f8 fb97 	bl	800029c <__adddf3>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	460b      	mov	r3, r1
 8007b72:	1d39      	adds	r1, r7, #4
 8007b74:	6809      	ldr	r1, [r1, #0]
 8007b76:	f501 613f 	add.w	r1, r1, #3056	; 0xbf0
 8007b7a:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.Switch_m = rtDW.Bias1_p;
 8007b7e:	1d3b      	adds	r3, r7, #4
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 8007b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8a:	1d39      	adds	r1, r7, #4
 8007b8c:	6809      	ldr	r1, [r1, #0]
 8007b8e:	f601 2188 	addw	r1, r1, #2696	; 0xa88
 8007b92:	e9c1 2300 	strd	r2, r3, [r1]
 8007b96:	e00d      	b.n	8007bb4 <_ZN27positionEstimatorModelClass4stepEv+0x964>
 8007b98:	20000290 	.word	0x20000290
  } else {
    rtDW.Switch_m = rtDW.Sum_j;
 8007b9c:	1d3b      	adds	r3, r7, #4
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 8007ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba8:	1d39      	adds	r1, r7, #4
 8007baa:	6809      	ldr	r1, [r1, #0]
 8007bac:	f601 2188 	addw	r1, r1, #2696	; 0xa88
 8007bb0:	e9c1 2300 	strd	r2, r3, [r1]
  // End of Switch: '<S26>/Switch'

  // UnitConversion: '<S24>/Unit Conversion'
  // Unit Conversion - from: deg to: rad
  // Expression: output = (0.0174533*input) + (0)
  rtDW.UnitConversion[0] = 0.017453292519943295 * rtDW.Switch_j;
 8007bb4:	1d3b      	adds	r3, r7, #4
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f603 2368 	addw	r3, r3, #2664	; 0xa68
 8007bbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007bc0:	a3c9      	add	r3, pc, #804	; (adr r3, 8007ee8 <_ZN27positionEstimatorModelClass4stepEv+0xc98>)
 8007bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc6:	f7f8 fd1f 	bl	8000608 <__aeabi_dmul>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	1d39      	adds	r1, r7, #4
 8007bd0:	6809      	ldr	r1, [r1, #0]
 8007bd2:	e9c1 2304 	strd	r2, r3, [r1, #16]
  rtDW.UnitConversion[1] = 0.017453292519943295 * rtDW.Switch_m;
 8007bd6:	1d3b      	adds	r3, r7, #4
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8007bde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007be2:	a3c1      	add	r3, pc, #772	; (adr r3, 8007ee8 <_ZN27positionEstimatorModelClass4stepEv+0xc98>)
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	f7f8 fd0e 	bl	8000608 <__aeabi_dmul>
 8007bec:	4602      	mov	r2, r0
 8007bee:	460b      	mov	r3, r1
 8007bf0:	1d39      	adds	r1, r7, #4
 8007bf2:	6809      	ldr	r1, [r1, #0]
 8007bf4:	e9c1 2306 	strd	r2, r3, [r1, #24]

  // Sum: '<S41>/Sum' incorporates:
  //   Constant: '<S41>/Constant'
  //   Constant: '<S41>/f'

  rtDW.Sum_a = rtP.f_Value - rtP.Constant_Value_c;
 8007bf8:	4bbd      	ldr	r3, [pc, #756]	; (8007ef0 <_ZN27positionEstimatorModelClass4stepEv+0xca0>)
 8007bfa:	e9d3 0142 	ldrd	r0, r1, [r3, #264]	; 0x108
 8007bfe:	4bbc      	ldr	r3, [pc, #752]	; (8007ef0 <_ZN27positionEstimatorModelClass4stepEv+0xca0>)
 8007c00:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 8007c04:	f7f8 fb48 	bl	8000298 <__aeabi_dsub>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	1d39      	adds	r1, r7, #4
 8007c0e:	6809      	ldr	r1, [r1, #0]
 8007c10:	f501 6129 	add.w	r1, r1, #2704	; 0xa90
 8007c14:	e9c1 2300 	strd	r2, r3, [r1]

  // Product: '<S42>/Product1'
  rtDW.Product1 = rtDW.Sum_a * rtDW.Sum_a;
 8007c18:	1d3b      	adds	r3, r7, #4
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f503 6329 	add.w	r3, r3, #2704	; 0xa90
 8007c20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c24:	1d3b      	adds	r3, r7, #4
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f503 6329 	add.w	r3, r3, #2704	; 0xa90
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	f7f8 fcea 	bl	8000608 <__aeabi_dmul>
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	1d39      	adds	r1, r7, #4
 8007c3a:	6809      	ldr	r1, [r1, #0]
 8007c3c:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007c40:	e9c1 2300 	strd	r2, r3, [r1]

  // Sum: '<S42>/Sum1' incorporates:
  //   Constant: '<S42>/Constant'

  rtDW.Sum1_e = rtP.Constant_Value_a - rtDW.Product1;
 8007c44:	4baa      	ldr	r3, [pc, #680]	; (8007ef0 <_ZN27positionEstimatorModelClass4stepEv+0xca0>)
 8007c46:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	; 0xf8
 8007c4a:	1d3b      	adds	r3, r7, #4
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f603 2398 	addw	r3, r3, #2712	; 0xa98
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	f7f8 fb1f 	bl	8000298 <__aeabi_dsub>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	1d39      	adds	r1, r7, #4
 8007c60:	6809      	ldr	r1, [r1, #0]
 8007c62:	f501 612a 	add.w	r1, r1, #2720	; 0xaa0
 8007c66:	e9c1 2300 	strd	r2, r3, [r1]

  // Sqrt: '<S42>/sqrt'
  rtDW.sqrt_c = std::sqrt(rtDW.Sum1_e);
 8007c6a:	1d3b      	adds	r3, r7, #4
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f503 632a 	add.w	r3, r3, #2720	; 0xaa0
 8007c72:	ed93 7b00 	vldr	d7, [r3]
 8007c76:	eeb0 0a47 	vmov.f32	s0, s14
 8007c7a:	eef0 0a67 	vmov.f32	s1, s15
 8007c7e:	f01d fcb1 	bl	80255e4 <sqrt>
 8007c82:	eeb0 7a40 	vmov.f32	s14, s0
 8007c86:	eef0 7a60 	vmov.f32	s15, s1
 8007c8a:	1d3b      	adds	r3, r7, #4
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f603 23a8 	addw	r3, r3, #2728	; 0xaa8
 8007c92:	ed83 7b00 	vstr	d7, [r3]

  // UnitConversion: '<S39>/Unit Conversion'
  // Unit Conversion - from: deg to: rad
  // Expression: output = (0.0174533*input) + (0)
  rtDW.UnitConversion_m = 0.017453292519943295 * rtDW.Switch_b;
 8007c96:	1d3b      	adds	r3, r7, #4
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8007c9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ca2:	a391      	add	r3, pc, #580	; (adr r3, 8007ee8 <_ZN27positionEstimatorModelClass4stepEv+0xc98>)
 8007ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca8:	f7f8 fcae 	bl	8000608 <__aeabi_dmul>
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	1d39      	adds	r1, r7, #4
 8007cb2:	6809      	ldr	r1, [r1, #0]
 8007cb4:	f501 612b 	add.w	r1, r1, #2736	; 0xab0
 8007cb8:	e9c1 2300 	strd	r2, r3, [r1]

  // Trigonometry: '<S40>/Trigonometric Function1'
  rtDW.TrigonometricFunction1 = std::sin(rtDW.UnitConversion_m);
 8007cbc:	1d3b      	adds	r3, r7, #4
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f503 632b 	add.w	r3, r3, #2736	; 0xab0
 8007cc4:	ed93 7b00 	vldr	d7, [r3]
 8007cc8:	eeb0 0a47 	vmov.f32	s0, s14
 8007ccc:	eef0 0a67 	vmov.f32	s1, s15
 8007cd0:	f01d f90e 	bl	8024ef0 <sin>
 8007cd4:	eeb0 7a40 	vmov.f32	s14, s0
 8007cd8:	eef0 7a60 	vmov.f32	s15, s1
 8007cdc:	1d3b      	adds	r3, r7, #4
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 8007ce4:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S40>/Product1'
  rtDW.Product1_n = rtDW.sqrt_c * rtDW.sqrt_c * rtDW.TrigonometricFunction1 *
 8007ce8:	1d3b      	adds	r3, r7, #4
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f603 23a8 	addw	r3, r3, #2728	; 0xaa8
 8007cf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cf4:	1d3b      	adds	r3, r7, #4
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f603 23a8 	addw	r3, r3, #2728	; 0xaa8
 8007cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d00:	f7f8 fc82 	bl	8000608 <__aeabi_dmul>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	1d3b      	adds	r3, r7, #4
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	f7f8 fc76 	bl	8000608 <__aeabi_dmul>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	4610      	mov	r0, r2
 8007d22:	4619      	mov	r1, r3
    rtDW.TrigonometricFunction1;
 8007d24:	1d3b      	adds	r3, r7, #4
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 8007d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtDW.Product1_n = rtDW.sqrt_c * rtDW.sqrt_c * rtDW.TrigonometricFunction1 *
 8007d30:	f7f8 fc6a 	bl	8000608 <__aeabi_dmul>
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	1d39      	adds	r1, r7, #4
 8007d3a:	6809      	ldr	r1, [r1, #0]
 8007d3c:	f501 612c 	add.w	r1, r1, #2752	; 0xac0
 8007d40:	e9c1 2300 	strd	r2, r3, [r1]

  // Sum: '<S40>/Sum1' incorporates:
  //   Constant: '<S40>/Constant'

  rtDW.Sum1_c = rtP.Constant_Value_f - rtDW.Product1_n;
 8007d44:	4b6a      	ldr	r3, [pc, #424]	; (8007ef0 <_ZN27positionEstimatorModelClass4stepEv+0xca0>)
 8007d46:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8007d4a:	1d3b      	adds	r3, r7, #4
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8007d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d56:	f7f8 fa9f 	bl	8000298 <__aeabi_dsub>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	1d39      	adds	r1, r7, #4
 8007d60:	6809      	ldr	r1, [r1, #0]
 8007d62:	f601 21c8 	addw	r1, r1, #2760	; 0xac8
 8007d66:	e9c1 2300 	strd	r2, r3, [r1]

  // Sqrt: '<S38>/sqrt'
  rtDW.sqrt_d = std::sqrt(rtDW.Sum1_c);
 8007d6a:	1d3b      	adds	r3, r7, #4
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 8007d72:	ed93 7b00 	vldr	d7, [r3]
 8007d76:	eeb0 0a47 	vmov.f32	s0, s14
 8007d7a:	eef0 0a67 	vmov.f32	s1, s15
 8007d7e:	f01d fc31 	bl	80255e4 <sqrt>
 8007d82:	eeb0 7a40 	vmov.f32	s14, s0
 8007d86:	eef0 7a60 	vmov.f32	s15, s1
 8007d8a:	1d3b      	adds	r3, r7, #4
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f503 632d 	add.w	r3, r3, #2768	; 0xad0
 8007d92:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S38>/Product1' incorporates:
  //   Constant: '<S38>/Constant1'

  rtDW.Rn = rtP.Constant1_Value_d / rtDW.sqrt_d;
 8007d96:	4b56      	ldr	r3, [pc, #344]	; (8007ef0 <_ZN27positionEstimatorModelClass4stepEv+0xca0>)
 8007d98:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8007d9c:	1d3b      	adds	r3, r7, #4
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f503 632d 	add.w	r3, r3, #2768	; 0xad0
 8007da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da8:	f7f8 fd58 	bl	800085c <__aeabi_ddiv>
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	1d39      	adds	r1, r7, #4
 8007db2:	6809      	ldr	r1, [r1, #0]
 8007db4:	f601 21d8 	addw	r1, r1, #2776	; 0xad8
 8007db8:	e9c1 2300 	strd	r2, r3, [r1]

  // Product: '<S38>/Product2'
  rtDW.Product2 = rtDW.sqrt_c * rtDW.sqrt_c;
 8007dbc:	1d3b      	adds	r3, r7, #4
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f603 23a8 	addw	r3, r3, #2728	; 0xaa8
 8007dc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007dc8:	1d3b      	adds	r3, r7, #4
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f603 23a8 	addw	r3, r3, #2728	; 0xaa8
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	f7f8 fc18 	bl	8000608 <__aeabi_dmul>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	1d39      	adds	r1, r7, #4
 8007dde:	6809      	ldr	r1, [r1, #0]
 8007de0:	f501 612e 	add.w	r1, r1, #2784	; 0xae0
 8007de4:	e9c1 2300 	strd	r2, r3, [r1]

  // Sum: '<S38>/Sum1' incorporates:
  //   Constant: '<S38>/Constant'

  rtDW.Sum1_g = rtP.Constant_Value_ch - rtDW.Product2;
 8007de8:	4b41      	ldr	r3, [pc, #260]	; (8007ef0 <_ZN27positionEstimatorModelClass4stepEv+0xca0>)
 8007dea:	e9d3 0144 	ldrd	r0, r1, [r3, #272]	; 0x110
 8007dee:	1d3b      	adds	r3, r7, #4
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f503 632e 	add.w	r3, r3, #2784	; 0xae0
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	f7f8 fa4d 	bl	8000298 <__aeabi_dsub>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	1d39      	adds	r1, r7, #4
 8007e04:	6809      	ldr	r1, [r1, #0]
 8007e06:	f601 21e8 	addw	r1, r1, #2792	; 0xae8
 8007e0a:	e9c1 2300 	strd	r2, r3, [r1]

  // Product: '<S38>/Product3'
  rtDW.Rm = rtDW.Rn * rtDW.Sum1_g / rtDW.Sum1_c;
 8007e0e:	1d3b      	adds	r3, r7, #4
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f603 23d8 	addw	r3, r3, #2776	; 0xad8
 8007e16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e1a:	1d3b      	adds	r3, r7, #4
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f603 23e8 	addw	r3, r3, #2792	; 0xae8
 8007e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e26:	f7f8 fbef 	bl	8000608 <__aeabi_dmul>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	4610      	mov	r0, r2
 8007e30:	4619      	mov	r1, r3
 8007e32:	1d3b      	adds	r3, r7, #4
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 8007e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3e:	f7f8 fd0d 	bl	800085c <__aeabi_ddiv>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	1d39      	adds	r1, r7, #4
 8007e48:	6809      	ldr	r1, [r1, #0]
 8007e4a:	f501 612f 	add.w	r1, r1, #2800	; 0xaf0
 8007e4e:	e9c1 2300 	strd	r2, r3, [r1]

  // Trigonometry: '<S38>/Trigonometric Function1' incorporates:
  //   Constant: '<S38>/Constant2'

  rtDW.TrigonometricFunction1_l = rt_atan2d_snf(rtP.Constant2_Value_h, rtDW.Rm);
 8007e52:	4b27      	ldr	r3, [pc, #156]	; (8007ef0 <_ZN27positionEstimatorModelClass4stepEv+0xca0>)
 8007e54:	ed93 7b38 	vldr	d7, [r3, #224]	; 0xe0
 8007e58:	1d3b      	adds	r3, r7, #4
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 8007e60:	ed93 6b00 	vldr	d6, [r3]
 8007e64:	eeb0 1a46 	vmov.f32	s2, s12
 8007e68:	eef0 1a66 	vmov.f32	s3, s13
 8007e6c:	eeb0 0a47 	vmov.f32	s0, s14
 8007e70:	eef0 0a67 	vmov.f32	s1, s15
 8007e74:	f7fe fa80 	bl	8006378 <_Z13rt_atan2d_snfdd>
 8007e78:	eeb0 7a40 	vmov.f32	s14, s0
 8007e7c:	eef0 7a60 	vmov.f32	s15, s1
 8007e80:	1d3b      	adds	r3, r7, #4
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8007e88:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S23>/dNorth'
  rtDW.dNorth = rtDW.UnitConversion[0] / rtDW.TrigonometricFunction1_l;
 8007e8c:	1d3b      	adds	r3, r7, #4
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007e94:	1d3b      	adds	r3, r7, #4
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	f7f8 fcdc 	bl	800085c <__aeabi_ddiv>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	1d39      	adds	r1, r7, #4
 8007eaa:	6809      	ldr	r1, [r1, #0]
 8007eac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007eb0:	e9c1 2300 	strd	r2, r3, [r1]
  // UnitConversion: '<S37>/Unit Conversion' incorporates:
  //   Constant: '<S3>/flat-x_from_N'

  // Unit Conversion - from: deg to: rad
  // Expression: output = (0.0174533*input) + (0)
  rtDW.UnitConversion_p = 0.017453292519943295 * rtP.flatx_from_N_Value;
 8007eb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ef0 <_ZN27positionEstimatorModelClass4stepEv+0xca0>)
 8007eb6:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 8007eba:	a30b      	add	r3, pc, #44	; (adr r3, 8007ee8 <_ZN27positionEstimatorModelClass4stepEv+0xc98>)
 8007ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec0:	f7f8 fba2 	bl	8000608 <__aeabi_dmul>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	1d39      	adds	r1, r7, #4
 8007eca:	6809      	ldr	r1, [r1, #0]
 8007ecc:	f601 3108 	addw	r1, r1, #2824	; 0xb08
 8007ed0:	e9c1 2300 	strd	r2, r3, [r1]

  // Trigonometry: '<S23>/SinCos'
  a22 = rtDW.UnitConversion_p;
 8007ed4:	1d3b      	adds	r3, r7, #4
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 8007ee4:	e006      	b.n	8007ef4 <_ZN27positionEstimatorModelClass4stepEv+0xca4>
 8007ee6:	bf00      	nop
 8007ee8:	a2529d39 	.word	0xa2529d39
 8007eec:	3f91df46 	.word	0x3f91df46
 8007ef0:	20000290 	.word	0x20000290
 8007ef4:	e9c1 2300 	strd	r2, r3, [r1]
  epsilon = std::sin(a22);
 8007ef8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8007efc:	ed93 0b00 	vldr	d0, [r3]
 8007f00:	f01c fff6 	bl	8024ef0 <sin>
 8007f04:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8007f08:	ed83 0b00 	vstr	d0, [r3]
  a22 = std::cos(a22);
 8007f0c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8007f10:	ed93 0b00 	vldr	d0, [r3]
 8007f14:	f01c ff24 	bl	8024d60 <cos>
 8007f18:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8007f1c:	ed83 0b00 	vstr	d0, [r3]
  rtDW.SinCos_o1 = epsilon;
 8007f20:	1d3b      	adds	r3, r7, #4
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f503 6131 	add.w	r1, r3, #2832	; 0xb10
 8007f28:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	e9c1 2300 	strd	r2, r3, [r1]
  rtDW.SinCos_o2 = a22;
 8007f34:	1d3b      	adds	r3, r7, #4
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f603 3118 	addw	r1, r3, #2840	; 0xb18
 8007f3c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8007f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f44:	e9c1 2300 	strd	r2, r3, [r1]

  // Product: '<S23>/x*cos'
  rtDW.xcos = rtDW.dNorth * rtDW.SinCos_o2;
 8007f48:	1d3b      	adds	r3, r7, #4
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f54:	1d3b      	adds	r3, r7, #4
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f603 3318 	addw	r3, r3, #2840	; 0xb18
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	f7f8 fb52 	bl	8000608 <__aeabi_dmul>
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	1d39      	adds	r1, r7, #4
 8007f6a:	6809      	ldr	r1, [r1, #0]
 8007f6c:	f501 6132 	add.w	r1, r1, #2848	; 0xb20
 8007f70:	e9c1 2300 	strd	r2, r3, [r1]

  // Trigonometry: '<S38>/Trigonometric Function'
  rtDW.TrigonometricFunction = std::cos(rtDW.UnitConversion_m);
 8007f74:	1d3b      	adds	r3, r7, #4
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f503 632b 	add.w	r3, r3, #2736	; 0xab0
 8007f7c:	ed93 7b00 	vldr	d7, [r3]
 8007f80:	eeb0 0a47 	vmov.f32	s0, s14
 8007f84:	eef0 0a67 	vmov.f32	s1, s15
 8007f88:	f01c feea 	bl	8024d60 <cos>
 8007f8c:	eeb0 7a40 	vmov.f32	s14, s0
 8007f90:	eef0 7a60 	vmov.f32	s15, s1
 8007f94:	1d3b      	adds	r3, r7, #4
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 8007f9c:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S38>/Product4'
  rtDW.Product4 = rtDW.Rn * rtDW.TrigonometricFunction;
 8007fa0:	1d3b      	adds	r3, r7, #4
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f603 23d8 	addw	r3, r3, #2776	; 0xad8
 8007fa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fac:	1d3b      	adds	r3, r7, #4
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	f7f8 fb26 	bl	8000608 <__aeabi_dmul>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	1d39      	adds	r1, r7, #4
 8007fc2:	6809      	ldr	r1, [r1, #0]
 8007fc4:	f501 6133 	add.w	r1, r1, #2864	; 0xb30
 8007fc8:	e9c1 2300 	strd	r2, r3, [r1]

  // Trigonometry: '<S38>/Trigonometric Function2' incorporates:
  //   Constant: '<S38>/Constant3'

  rtDW.TrigonometricFunction2 = rt_atan2d_snf(rtP.Constant3_Value, rtDW.Product4);
 8007fcc:	4bb9      	ldr	r3, [pc, #740]	; (80082b4 <_ZN27positionEstimatorModelClass4stepEv+0x1064>)
 8007fce:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8007fd2:	1d3b      	adds	r3, r7, #4
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
 8007fda:	ed93 6b00 	vldr	d6, [r3]
 8007fde:	eeb0 1a46 	vmov.f32	s2, s12
 8007fe2:	eef0 1a66 	vmov.f32	s3, s13
 8007fe6:	eeb0 0a47 	vmov.f32	s0, s14
 8007fea:	eef0 0a67 	vmov.f32	s1, s15
 8007fee:	f7fe f9c3 	bl	8006378 <_Z13rt_atan2d_snfdd>
 8007ff2:	eeb0 7a40 	vmov.f32	s14, s0
 8007ff6:	eef0 7a60 	vmov.f32	s15, s1
 8007ffa:	1d3b      	adds	r3, r7, #4
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 8008002:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S23>/dEast'
  rtDW.dEast = 1.0 / rtDW.TrigonometricFunction2 * rtDW.UnitConversion[1];
 8008006:	1d3b      	adds	r3, r7, #4
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 800800e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008012:	f04f 0000 	mov.w	r0, #0
 8008016:	49a8      	ldr	r1, [pc, #672]	; (80082b8 <_ZN27positionEstimatorModelClass4stepEv+0x1068>)
 8008018:	f7f8 fc20 	bl	800085c <__aeabi_ddiv>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	4610      	mov	r0, r2
 8008022:	4619      	mov	r1, r3
 8008024:	1d3b      	adds	r3, r7, #4
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800802c:	f7f8 faec 	bl	8000608 <__aeabi_dmul>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	1d39      	adds	r1, r7, #4
 8008036:	6809      	ldr	r1, [r1, #0]
 8008038:	f501 6134 	add.w	r1, r1, #2880	; 0xb40
 800803c:	e9c1 2300 	strd	r2, r3, [r1]

  // Product: '<S23>/y*sin'
  rtDW.ysin = rtDW.dEast * rtDW.SinCos_o1;
 8008040:	1d3b      	adds	r3, r7, #4
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8008048:	e9d3 0100 	ldrd	r0, r1, [r3]
 800804c:	1d3b      	adds	r3, r7, #4
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 8008054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008058:	f7f8 fad6 	bl	8000608 <__aeabi_dmul>
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	1d39      	adds	r1, r7, #4
 8008062:	6809      	ldr	r1, [r1, #0]
 8008064:	f601 3148 	addw	r1, r1, #2888	; 0xb48
 8008068:	e9c1 2300 	strd	r2, r3, [r1]

  // Sum: '<S23>/Sum2'
  rtDW.Px = rtDW.xcos + rtDW.ysin;
 800806c:	1d3b      	adds	r3, r7, #4
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8008074:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008078:	1d3b      	adds	r3, r7, #4
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f603 3348 	addw	r3, r3, #2888	; 0xb48
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	f7f8 f90a 	bl	800029c <__adddf3>
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	1d39      	adds	r1, r7, #4
 800808e:	6809      	ldr	r1, [r1, #0]
 8008090:	f501 6135 	add.w	r1, r1, #2896	; 0xb50
 8008094:	e9c1 2300 	strd	r2, r3, [r1]

  // Product: '<S23>/x*sin'
  rtDW.xsin = rtDW.dNorth * rtDW.SinCos_o1;
 8008098:	1d3b      	adds	r3, r7, #4
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80080a4:	1d3b      	adds	r3, r7, #4
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 80080ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b0:	f7f8 faaa 	bl	8000608 <__aeabi_dmul>
 80080b4:	4602      	mov	r2, r0
 80080b6:	460b      	mov	r3, r1
 80080b8:	1d39      	adds	r1, r7, #4
 80080ba:	6809      	ldr	r1, [r1, #0]
 80080bc:	f601 3158 	addw	r1, r1, #2904	; 0xb58
 80080c0:	e9c1 2300 	strd	r2, r3, [r1]

  // Product: '<S23>/y*cos'
  rtDW.ycos = rtDW.dEast * rtDW.SinCos_o2;
 80080c4:	1d3b      	adds	r3, r7, #4
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80080cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80080d0:	1d3b      	adds	r3, r7, #4
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f603 3318 	addw	r3, r3, #2840	; 0xb18
 80080d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080dc:	f7f8 fa94 	bl	8000608 <__aeabi_dmul>
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	1d39      	adds	r1, r7, #4
 80080e6:	6809      	ldr	r1, [r1, #0]
 80080e8:	f501 6136 	add.w	r1, r1, #2912	; 0xb60
 80080ec:	e9c1 2300 	strd	r2, r3, [r1]

  // Sum: '<S23>/Sum3'
  rtDW.Py = rtDW.ycos - rtDW.xsin;
 80080f0:	1d3b      	adds	r3, r7, #4
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f503 6336 	add.w	r3, r3, #2912	; 0xb60
 80080f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80080fc:	1d3b      	adds	r3, r7, #4
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 8008104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008108:	f7f8 f8c6 	bl	8000298 <__aeabi_dsub>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	1d39      	adds	r1, r7, #4
 8008112:	6809      	ldr	r1, [r1, #0]
 8008114:	f601 3168 	addw	r1, r1, #2920	; 0xb68
 8008118:	e9c1 2300 	strd	r2, r3, [r1]

  // DataTypeConversion: '<S2>/DataTypeConversion_Enable1' incorporates:
  //   Inport: '<Root>/AhrsFlag'

  rtDW.DataTypeConversion_Enable1 = (rtU.AhrsFlag != 0.0);
 800811c:	1d3b      	adds	r3, r7, #4
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 8008124:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008128:	2301      	movs	r3, #1
 800812a:	461e      	mov	r6, r3
 800812c:	f04f 0200 	mov.w	r2, #0
 8008130:	f04f 0300 	mov.w	r3, #0
 8008134:	f7f8 fcd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <_ZN27positionEstimatorModelClass4stepEv+0xef2>
 800813e:	2300      	movs	r3, #0
 8008140:	461e      	mov	r6, r3
 8008142:	b2f3      	uxtb	r3, r6
 8008144:	461a      	mov	r2, r3
 8008146:	1d3b      	adds	r3, r7, #4
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f883 2c3e 	strb.w	r2, [r3, #3134]	; 0xc3e

  // Outputs for Enabled SubSystem: '<S2>/Correct1' incorporates:
  //   EnablePort: '<S13>/Enable'

  if (rtDW.DataTypeConversion_Enable1) {
 800814e:	1d3b      	adds	r3, r7, #4
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f893 3c3e 	ldrb.w	r3, [r3, #3134]	; 0xc3e
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 8614 	beq.w	8008d84 <_ZN27positionEstimatorModelClass4stepEv+0x1b34>
    // DataStoreRead: '<S13>/Data Store ReadX'
    for (i = 0; i < 6; i++) {
 800815c:	2300      	movs	r3, #0
 800815e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008162:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008166:	2b05      	cmp	r3, #5
 8008168:	dc18      	bgt.n	800819c <_ZN27positionEstimatorModelClass4stepEv+0xf4c>
      rtDW.DataStoreReadX_p[i] = rtDW.x_p[i];
 800816a:	1d3b      	adds	r3, r7, #4
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008172:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008176:	00db      	lsls	r3, r3, #3
 8008178:	4413      	add	r3, r2
 800817a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817e:	1d39      	adds	r1, r7, #4
 8008180:	6808      	ldr	r0, [r1, #0]
 8008182:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 8008186:	3192      	adds	r1, #146	; 0x92
 8008188:	00c9      	lsls	r1, r1, #3
 800818a:	4401      	add	r1, r0
 800818c:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 6; i++) {
 8008190:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008194:	3301      	adds	r3, #1
 8008196:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800819a:	e7e2      	b.n	8008162 <_ZN27positionEstimatorModelClass4stepEv+0xf12>
    // SignalConversion generated from: '<S17>/ SFunction ' incorporates:
    //   Inport: '<Root>/ax'
    //   Inport: '<Root>/ay'
    //   MATLAB Function: '<S13>/Correct'

    rtDW.TmpSignalConversionAtSFunctio_i[0] = rtU.ax;
 800819c:	1d3b      	adds	r3, r7, #4
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f603 4358 	addw	r3, r3, #3160	; 0xc58
 80081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a8:	1d39      	adds	r1, r7, #4
 80081aa:	6809      	ldr	r1, [r1, #0]
 80081ac:	f501 6198 	add.w	r1, r1, #1216	; 0x4c0
 80081b0:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.TmpSignalConversionAtSFunctio_i[1] = rtU.ay;
 80081b4:	1d3b      	adds	r3, r7, #4
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 80081bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c0:	1d39      	adds	r1, r7, #4
 80081c2:	6809      	ldr	r1, [r1, #0]
 80081c4:	f501 6199 	add.w	r1, r1, #1224	; 0x4c8
 80081c8:	e9c1 2300 	strd	r2, r3, [r1]

    // MATLAB Function: '<S13>/Correct' incorporates:
    //   Constant: '<S2>/BlockOrdering'

    rtDW.blockOrdering_f = rtP.BlockOrdering_Value;
 80081cc:	4b39      	ldr	r3, [pc, #228]	; (80082b4 <_ZN27positionEstimatorModelClass4stepEv+0x1064>)
 80081ce:	f893 23e5 	ldrb.w	r2, [r3, #997]	; 0x3e5
 80081d2:	1d3b      	adds	r3, r7, #4
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44
    blockOrdering = rtDW.blockOrdering_f;
 80081da:	1d3b      	adds	r3, r7, #4
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f893 3c44 	ldrb.w	r3, [r3, #3140]	; 0xc44
 80081e2:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering_f = blockOrdering;
 80081e6:	1d3b      	adds	r3, r7, #4
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 80081ee:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44
    for (i = 0; i < 36; i++) {
 80081f2:	2300      	movs	r3, #0
 80081f4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80081f8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80081fc:	2b23      	cmp	r3, #35	; 0x23
 80081fe:	dc32      	bgt.n	8008266 <_ZN27positionEstimatorModelClass4stepEv+0x1016>
      // DataStoreRead: '<S13>/Data Store ReadP'
      rtDW.P_k[i] = rtDW.P_n_c[i];
 8008200:	1d3b      	adds	r3, r7, #4
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008208:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800820c:	00db      	lsls	r3, r3, #3
 800820e:	4413      	add	r3, r2
 8008210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008214:	1d39      	adds	r1, r7, #4
 8008216:	6808      	ldr	r0, [r1, #0]
 8008218:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 800821c:	31a0      	adds	r1, #160	; 0xa0
 800821e:	00c9      	lsls	r1, r1, #3
 8008220:	4401      	add	r1, r0
 8008222:	e9c1 2300 	strd	r2, r3, [r1]

      // MATLAB Function: '<S13>/Correct'
      u = rtDW.P_k[i];
 8008226:	1d3b      	adds	r3, r7, #4
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800822e:	33a0      	adds	r3, #160	; 0xa0
 8008230:	00db      	lsls	r3, r3, #3
 8008232:	4413      	add	r3, r2
 8008234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008238:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800823c:	e9c1 2300 	strd	r2, r3, [r1]
      rtDW.P_k[i] = u;
 8008240:	1d3b      	adds	r3, r7, #4
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008248:	33a0      	adds	r3, #160	; 0xa0
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	18d1      	adds	r1, r2, r3
 800824e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008256:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 36; i++) {
 800825a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800825e:	3301      	adds	r3, #1
 8008260:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008264:	e7c8      	b.n	80081f8 <_ZN27positionEstimatorModelClass4stepEv+0xfa8>
    }

    // MATLAB Function: '<S13>/Correct' incorporates:
    //   Constant: '<S2>/R1'

    for (r1 = 0; r1 < 6; r1++) {
 8008266:	2300      	movs	r3, #0
 8008268:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800826c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008270:	2b05      	cmp	r3, #5
 8008272:	f300 80c2 	bgt.w	80083fa <_ZN27positionEstimatorModelClass4stepEv+0x11aa>
      for (i = 0; i < 6; i++) {
 8008276:	2300      	movs	r3, #0
 8008278:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800827c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008280:	2b05      	cmp	r3, #5
 8008282:	dc1b      	bgt.n	80082bc <_ZN27positionEstimatorModelClass4stepEv+0x106c>
        imvec[i] = rtDW.DataStoreReadX_p[i];
 8008284:	1d3b      	adds	r3, r7, #4
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800828c:	3392      	adds	r3, #146	; 0x92
 800828e:	00db      	lsls	r3, r3, #3
 8008290:	4413      	add	r3, r2
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	f507 60e6 	add.w	r0, r7, #1840	; 0x730
 800829a:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 800829e:	00c9      	lsls	r1, r1, #3
 80082a0:	4401      	add	r1, r0
 80082a2:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = 0; i < 6; i++) {
 80082a6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80082aa:	3301      	adds	r3, #1
 80082ac:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80082b0:	e7e4      	b.n	800827c <_ZN27positionEstimatorModelClass4stepEv+0x102c>
 80082b2:	bf00      	nop
 80082b4:	20000290 	.word	0x20000290
 80082b8:	3ff00000 	.word	0x3ff00000
      }

      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_p[r1]);
 80082bc:	1d3b      	adds	r3, r7, #4
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80082c4:	3392      	adds	r3, #146	; 0x92
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	4413      	add	r3, r2
 80082ca:	ed93 7b00 	vldr	d7, [r3]
 80082ce:	eeb0 0a47 	vmov.f32	s0, s14
 80082d2:	eef0 0a67 	vmov.f32	s1, s15
 80082d6:	f7fd fd52 	bl	8005d7e <_ZSt3absd>
 80082da:	ec51 0b10 	vmov	r0, r1, d0
 80082de:	f04f 0200 	mov.w	r2, #0
 80082e2:	4bd1      	ldr	r3, [pc, #836]	; (8008628 <_ZN27positionEstimatorModelClass4stepEv+0x13d8>)
 80082e4:	f7f8 f990 	bl	8000608 <__aeabi_dmul>
 80082e8:	4602      	mov	r2, r0
 80082ea:	460b      	mov	r3, r1
 80082ec:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 80082f0:	e9c1 2300 	strd	r2, r3, [r1]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 80082f4:	f04f 0200 	mov.w	r2, #0
 80082f8:	4bcb      	ldr	r3, [pc, #812]	; (8008628 <_ZN27positionEstimatorModelClass4stepEv+0x13d8>)
 80082fa:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 80082fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008302:	f7f8 fbf3 	bl	8000aec <__aeabi_dcmplt>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d108      	bne.n	800831e <_ZN27positionEstimatorModelClass4stepEv+0x10ce>
 800830c:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008310:	ed93 0b00 	vldr	d0, [r3]
 8008314:	f7fd fdf6 	bl	8005f04 <rtIsNaN>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <_ZN27positionEstimatorModelClass4stepEv+0x10d2>
 800831e:	2301      	movs	r3, #1
 8008320:	e000      	b.n	8008324 <_ZN27positionEstimatorModelClass4stepEv+0x10d4>
 8008322:	2300      	movs	r3, #0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d006      	beq.n	8008336 <_ZN27positionEstimatorModelClass4stepEv+0x10e6>
        epsilon = 1.4901161193847656E-8;
 8008328:	f04f 0200 	mov.w	r2, #0
 800832c:	4bbe      	ldr	r3, [pc, #760]	; (8008628 <_ZN27positionEstimatorModelClass4stepEv+0x13d8>)
 800832e:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8008332:	e9c1 2300 	strd	r2, r3, [r1]
      }

      imvec[r1] = rtDW.DataStoreReadX_p[r1] + epsilon;
 8008336:	1d3b      	adds	r3, r7, #4
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800833e:	3392      	adds	r3, #146	; 0x92
 8008340:	00db      	lsls	r3, r3, #3
 8008342:	4413      	add	r3, r2
 8008344:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008348:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	f7f7 ffa4 	bl	800029c <__adddf3>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	f507 60e6 	add.w	r0, r7, #1840	; 0x730
 800835c:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	; 0x8c4
 8008360:	00c9      	lsls	r1, r1, #3
 8008362:	4401      	add	r1, r0
 8008364:	e9c1 2300 	strd	r2, r3, [r1]
      dHdx[r1 << 1] = (imvec[4] - rtDW.DataStoreReadX_p[4]) / epsilon;
 8008368:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800836c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8008370:	1d3b      	adds	r3, r7, #4
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8008378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837c:	f7f7 ff8c 	bl	8000298 <__aeabi_dsub>
 8008380:	4602      	mov	r2, r0
 8008382:	460b      	mov	r3, r1
 8008384:	4610      	mov	r0, r2
 8008386:	4619      	mov	r1, r3
 8008388:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800838c:	005e      	lsls	r6, r3, #1
 800838e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008396:	f7f8 fa61 	bl	800085c <__aeabi_ddiv>
 800839a:	4602      	mov	r2, r0
 800839c:	460b      	mov	r3, r1
 800839e:	f507 60f8 	add.w	r0, r7, #1984	; 0x7c0
 80083a2:	00f1      	lsls	r1, r6, #3
 80083a4:	4401      	add	r1, r0
 80083a6:	e9c1 2300 	strd	r2, r3, [r1]
      dHdx[(r1 << 1) + 1] = (imvec[5] - rtDW.DataStoreReadX_p[5]) / epsilon;
 80083aa:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 80083ae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80083b2:	1d3b      	adds	r3, r7, #4
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 80083ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083be:	f7f7 ff6b 	bl	8000298 <__aeabi_dsub>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4610      	mov	r0, r2
 80083c8:	4619      	mov	r1, r3
 80083ca:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	1c5e      	adds	r6, r3, #1
 80083d2:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80083d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083da:	f7f8 fa3f 	bl	800085c <__aeabi_ddiv>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	f507 60f8 	add.w	r0, r7, #1984	; 0x7c0
 80083e6:	00f1      	lsls	r1, r6, #3
 80083e8:	4401      	add	r1, r0
 80083ea:	e9c1 2300 	strd	r2, r3, [r1]
    for (r1 = 0; r1 < 6; r1++) {
 80083ee:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80083f2:	3301      	adds	r3, #1
 80083f4:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80083f8:	e738      	b.n	800826c <_ZN27positionEstimatorModelClass4stepEv+0x101c>
    }

    for (r1 = 0; r1 < 6; r1++) {
 80083fa:	2300      	movs	r3, #0
 80083fc:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008400:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008404:	2b05      	cmp	r3, #5
 8008406:	f300 808f 	bgt.w	8008528 <_ZN27positionEstimatorModelClass4stepEv+0x12d8>
      for (i = 0; i < 2; i++) {
 800840a:	2300      	movs	r3, #0
 800840c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008410:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008414:	2b01      	cmp	r3, #1
 8008416:	f300 8081 	bgt.w	800851c <_ZN27positionEstimatorModelClass4stepEv+0x12cc>
        Pxy[r1 + 6 * i] = 0.0;
 800841a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800841e:	4613      	mov	r3, r2
 8008420:	005b      	lsls	r3, r3, #1
 8008422:	4413      	add	r3, r2
 8008424:	005b      	lsls	r3, r3, #1
 8008426:	461a      	mov	r2, r3
 8008428:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800842c:	4413      	add	r3, r2
 800842e:	00db      	lsls	r3, r3, #3
 8008430:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008434:	4413      	add	r3, r2
 8008436:	f1a3 0190 	sub.w	r1, r3, #144	; 0x90
 800843a:	f04f 0200 	mov.w	r2, #0
 800843e:	f04f 0300 	mov.w	r3, #0
 8008442:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 8008446:	2300      	movs	r3, #0
 8008448:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800844c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008450:	2b05      	cmp	r3, #5
 8008452:	dc5d      	bgt.n	8008510 <_ZN27positionEstimatorModelClass4stepEv+0x12c0>
          u = Pxy[6 * i + r1];
 8008454:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008458:	4613      	mov	r3, r2
 800845a:	005b      	lsls	r3, r3, #1
 800845c:	4413      	add	r3, r2
 800845e:	005b      	lsls	r3, r3, #1
 8008460:	461a      	mov	r2, r3
 8008462:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008466:	4413      	add	r3, r2
 8008468:	00db      	lsls	r3, r3, #3
 800846a:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 800846e:	4413      	add	r3, r2
 8008470:	3b90      	subs	r3, #144	; 0x90
 8008472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008476:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800847a:	e9c1 2300 	strd	r2, r3, [r1]
          u += rtDW.P_k[6 * k + r1] * dHdx[(k << 1) + i];
 800847e:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8008482:	4613      	mov	r3, r2
 8008484:	005b      	lsls	r3, r3, #1
 8008486:	4413      	add	r3, r2
 8008488:	005b      	lsls	r3, r3, #1
 800848a:	461a      	mov	r2, r3
 800848c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008490:	4413      	add	r3, r2
 8008492:	1d3a      	adds	r2, r7, #4
 8008494:	6812      	ldr	r2, [r2, #0]
 8008496:	33a0      	adds	r3, #160	; 0xa0
 8008498:	00db      	lsls	r3, r3, #3
 800849a:	4413      	add	r3, r2
 800849c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084a0:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80084a4:	005a      	lsls	r2, r3, #1
 80084a6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80084aa:	4413      	add	r3, r2
 80084ac:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 80084b0:	00db      	lsls	r3, r3, #3
 80084b2:	4413      	add	r3, r2
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	f7f8 f8a6 	bl	8000608 <__aeabi_dmul>
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80084c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084c8:	f7f7 fee8 	bl	800029c <__adddf3>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80084d4:	e9c1 2300 	strd	r2, r3, [r1]
          Pxy[r1 + 6 * i] = u;
 80084d8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80084dc:	4613      	mov	r3, r2
 80084de:	005b      	lsls	r3, r3, #1
 80084e0:	4413      	add	r3, r2
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	461a      	mov	r2, r3
 80084e6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80084ea:	4413      	add	r3, r2
 80084ec:	00db      	lsls	r3, r3, #3
 80084ee:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 80084f2:	4413      	add	r3, r2
 80084f4:	f1a3 0190 	sub.w	r1, r3, #144	; 0x90
 80084f8:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80084fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008500:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 8008504:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008508:	3301      	adds	r3, #1
 800850a:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800850e:	e79d      	b.n	800844c <_ZN27positionEstimatorModelClass4stepEv+0x11fc>
      for (i = 0; i < 2; i++) {
 8008510:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008514:	3301      	adds	r3, #1
 8008516:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800851a:	e779      	b.n	8008410 <_ZN27positionEstimatorModelClass4stepEv+0x11c0>
    for (r1 = 0; r1 < 6; r1++) {
 800851c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008520:	3301      	adds	r3, #1
 8008522:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008526:	e76b      	b.n	8008400 <_ZN27positionEstimatorModelClass4stepEv+0x11b0>
        }
      }
    }

    for (r1 = 0; r1 < 2; r1++) {
 8008528:	2300      	movs	r3, #0
 800852a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800852e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008532:	2b01      	cmp	r3, #1
 8008534:	f300 80eb 	bgt.w	800870e <_ZN27positionEstimatorModelClass4stepEv+0x14be>
      for (i = 0; i < 6; i++) {
 8008538:	2300      	movs	r3, #0
 800853a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800853e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008542:	2b05      	cmp	r3, #5
 8008544:	dc72      	bgt.n	800862c <_ZN27positionEstimatorModelClass4stepEv+0x13dc>
        gain[r1 + (i << 1)] = 0.0;
 8008546:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800854a:	005a      	lsls	r2, r3, #1
 800854c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008550:	4413      	add	r3, r2
 8008552:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008556:	00db      	lsls	r3, r3, #3
 8008558:	18d1      	adds	r1, r2, r3
 800855a:	f04f 0200 	mov.w	r2, #0
 800855e:	f04f 0300 	mov.w	r3, #0
 8008562:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 8008566:	2300      	movs	r3, #0
 8008568:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800856c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008570:	2b05      	cmp	r3, #5
 8008572:	dc52      	bgt.n	800861a <_ZN27positionEstimatorModelClass4stepEv+0x13ca>
          u = gain[(i << 1) + r1];
 8008574:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008578:	005a      	lsls	r2, r3, #1
 800857a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800857e:	4413      	add	r3, r2
 8008580:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008584:	00db      	lsls	r3, r3, #3
 8008586:	4413      	add	r3, r2
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008590:	e9c1 2300 	strd	r2, r3, [r1]
          u += dHdx[(k << 1) + r1] * rtDW.P_k[6 * i + k];
 8008594:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008598:	005a      	lsls	r2, r3, #1
 800859a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800859e:	4413      	add	r3, r2
 80085a0:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 80085a4:	00db      	lsls	r3, r3, #3
 80085a6:	4413      	add	r3, r2
 80085a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085ac:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80085b0:	4613      	mov	r3, r2
 80085b2:	005b      	lsls	r3, r3, #1
 80085b4:	4413      	add	r3, r2
 80085b6:	005b      	lsls	r3, r3, #1
 80085b8:	461a      	mov	r2, r3
 80085ba:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80085be:	4413      	add	r3, r2
 80085c0:	1d3a      	adds	r2, r7, #4
 80085c2:	6812      	ldr	r2, [r2, #0]
 80085c4:	33a0      	adds	r3, #160	; 0xa0
 80085c6:	00db      	lsls	r3, r3, #3
 80085c8:	4413      	add	r3, r2
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	f7f8 f81b 	bl	8000608 <__aeabi_dmul>
 80085d2:	4602      	mov	r2, r0
 80085d4:	460b      	mov	r3, r1
 80085d6:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80085da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085de:	f7f7 fe5d 	bl	800029c <__adddf3>
 80085e2:	4602      	mov	r2, r0
 80085e4:	460b      	mov	r3, r1
 80085e6:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80085ea:	e9c1 2300 	strd	r2, r3, [r1]
          gain[r1 + (i << 1)] = u;
 80085ee:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80085f2:	005a      	lsls	r2, r3, #1
 80085f4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80085f8:	4413      	add	r3, r2
 80085fa:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	18d1      	adds	r1, r2, r3
 8008602:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860a:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 800860e:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008612:	3301      	adds	r3, #1
 8008614:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008618:	e7a8      	b.n	800856c <_ZN27positionEstimatorModelClass4stepEv+0x131c>
      for (i = 0; i < 6; i++) {
 800861a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800861e:	3301      	adds	r3, #1
 8008620:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008624:	e78b      	b.n	800853e <_ZN27positionEstimatorModelClass4stepEv+0x12ee>
 8008626:	bf00      	nop
 8008628:	3e500000 	.word	0x3e500000
        }
      }

      for (i = 0; i < 2; i++) {
 800862c:	2300      	movs	r3, #0
 800862e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008632:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008636:	2b01      	cmp	r3, #1
 8008638:	dc63      	bgt.n	8008702 <_ZN27positionEstimatorModelClass4stepEv+0x14b2>
        u = 0.0;
 800863a:	f04f 0200 	mov.w	r2, #0
 800863e:	f04f 0300 	mov.w	r3, #0
 8008642:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008646:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 800864a:	2300      	movs	r3, #0
 800864c:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008650:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008654:	2b05      	cmp	r3, #5
 8008656:	dc2d      	bgt.n	80086b4 <_ZN27positionEstimatorModelClass4stepEv+0x1464>
          u += gain[(k << 1) + r1] * dHdx[(k << 1) + i];
 8008658:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800865c:	005a      	lsls	r2, r3, #1
 800865e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008662:	4413      	add	r3, r2
 8008664:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008668:	00db      	lsls	r3, r3, #3
 800866a:	4413      	add	r3, r2
 800866c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008670:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008674:	005a      	lsls	r2, r3, #1
 8008676:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800867a:	4413      	add	r3, r2
 800867c:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8008680:	00db      	lsls	r3, r3, #3
 8008682:	4413      	add	r3, r2
 8008684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008688:	f7f7 ffbe 	bl	8000608 <__aeabi_dmul>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008694:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008698:	f7f7 fe00 	bl	800029c <__adddf3>
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80086a4:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 80086a8:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80086ac:	3301      	adds	r3, #1
 80086ae:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 80086b2:	e7cd      	b.n	8008650 <_ZN27positionEstimatorModelClass4stepEv+0x1400>
        }

        Pyy[r1 + (i << 1)] = rtP.R1_Value[(i << 1) + r1] + u;
 80086b4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80086b8:	005a      	lsls	r2, r3, #1
 80086ba:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80086be:	4413      	add	r3, r2
 80086c0:	4aad      	ldr	r2, [pc, #692]	; (8008978 <_ZN27positionEstimatorModelClass4stepEv+0x1728>)
 80086c2:	3336      	adds	r3, #54	; 0x36
 80086c4:	00db      	lsls	r3, r3, #3
 80086c6:	4413      	add	r3, r2
 80086c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086cc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80086d0:	005a      	lsls	r2, r3, #1
 80086d2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80086d6:	18d6      	adds	r6, r2, r3
 80086d8:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f7f7 fddc 	bl	800029c <__adddf3>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	00f1      	lsls	r1, r6, #3
 80086ea:	f507 600d 	add.w	r0, r7, #2256	; 0x8d0
 80086ee:	4401      	add	r1, r0
 80086f0:	39b0      	subs	r1, #176	; 0xb0
 80086f2:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = 0; i < 2; i++) {
 80086f6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80086fa:	3301      	adds	r3, #1
 80086fc:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008700:	e797      	b.n	8008632 <_ZN27positionEstimatorModelClass4stepEv+0x13e2>
    for (r1 = 0; r1 < 2; r1++) {
 8008702:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008706:	3301      	adds	r3, #1
 8008708:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800870c:	e70f      	b.n	800852e <_ZN27positionEstimatorModelClass4stepEv+0x12de>
      }
    }

    if (std::abs(Pyy[1]) > std::abs(Pyy[0])) {
 800870e:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8008712:	ed93 7b00 	vldr	d7, [r3]
 8008716:	eeb0 0a47 	vmov.f32	s0, s14
 800871a:	eef0 0a67 	vmov.f32	s1, s15
 800871e:	f7fd fb2e 	bl	8005d7e <_ZSt3absd>
 8008722:	ec59 8b10 	vmov	r8, r9, d0
 8008726:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800872a:	ed93 7b00 	vldr	d7, [r3]
 800872e:	eeb0 0a47 	vmov.f32	s0, s14
 8008732:	eef0 0a67 	vmov.f32	s1, s15
 8008736:	f7fd fb22 	bl	8005d7e <_ZSt3absd>
 800873a:	ec52 1b10 	vmov	r1, r2, d0
 800873e:	2301      	movs	r3, #1
 8008740:	461e      	mov	r6, r3
 8008742:	4613      	mov	r3, r2
 8008744:	460a      	mov	r2, r1
 8008746:	4640      	mov	r0, r8
 8008748:	4649      	mov	r1, r9
 800874a:	f7f8 f9ed 	bl	8000b28 <__aeabi_dcmpgt>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <_ZN27positionEstimatorModelClass4stepEv+0x1508>
 8008754:	2300      	movs	r3, #0
 8008756:	461e      	mov	r6, r3
 8008758:	b2f3      	uxtb	r3, r6
 800875a:	2b00      	cmp	r3, #0
 800875c:	d006      	beq.n	800876c <_ZN27positionEstimatorModelClass4stepEv+0x151c>
      r1 = 1;
 800875e:	2301      	movs	r3, #1
 8008760:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
      i = 0;
 8008764:	2300      	movs	r3, #0
 8008766:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800876a:	e005      	b.n	8008778 <_ZN27positionEstimatorModelClass4stepEv+0x1528>
    } else {
      r1 = 0;
 800876c:	2300      	movs	r3, #0
 800876e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
      i = 1;
 8008772:	2301      	movs	r3, #1
 8008774:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    }

    epsilon = Pyy[i] / Pyy[r1];
 8008778:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800877c:	00db      	lsls	r3, r3, #3
 800877e:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008782:	4413      	add	r3, r2
 8008784:	3bb0      	subs	r3, #176	; 0xb0
 8008786:	e9d3 0100 	ldrd	r0, r1, [r3]
 800878a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800878e:	00db      	lsls	r3, r3, #3
 8008790:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008794:	4413      	add	r3, r2
 8008796:	3bb0      	subs	r3, #176	; 0xb0
 8008798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879c:	f7f8 f85e 	bl	800085c <__aeabi_ddiv>
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 80087a8:	e9c1 2300 	strd	r2, r3, [r1]
    a22 = Pyy[i + 2] - Pyy[r1 + 2] * epsilon;
 80087ac:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80087b0:	3302      	adds	r3, #2
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 80087b8:	4413      	add	r3, r2
 80087ba:	3bb0      	subs	r3, #176	; 0xb0
 80087bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087c0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80087c4:	3302      	adds	r3, #2
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 80087cc:	4413      	add	r3, r2
 80087ce:	3bb0      	subs	r3, #176	; 0xb0
 80087d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087d4:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80087d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087dc:	f7f7 ff14 	bl	8000608 <__aeabi_dmul>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	4640      	mov	r0, r8
 80087e6:	4649      	mov	r1, r9
 80087e8:	f7f7 fd56 	bl	8000298 <__aeabi_dsub>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 80087f4:	e9c1 2300 	strd	r2, r3, [r1]
    for (k = 0; k < 6; k++) {
 80087f8:	2300      	movs	r3, #0
 80087fa:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 80087fe:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008802:	2b05      	cmp	r3, #5
 8008804:	f300 80ba 	bgt.w	800897c <_ZN27positionEstimatorModelClass4stepEv+0x172c>
      gain[k + 6 * r1] = Pxy[k] / Pyy[r1];
 8008808:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800880c:	00db      	lsls	r3, r3, #3
 800880e:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008812:	4413      	add	r3, r2
 8008814:	3b90      	subs	r3, #144	; 0x90
 8008816:	e9d3 0100 	ldrd	r0, r1, [r3]
 800881a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800881e:	00db      	lsls	r3, r3, #3
 8008820:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008824:	4413      	add	r3, r2
 8008826:	3bb0      	subs	r3, #176	; 0xb0
 8008828:	e9d3 8900 	ldrd	r8, r9, [r3]
 800882c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8008830:	4613      	mov	r3, r2
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	4413      	add	r3, r2
 8008836:	005b      	lsls	r3, r3, #1
 8008838:	461a      	mov	r2, r3
 800883a:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800883e:	18d6      	adds	r6, r2, r3
 8008840:	4642      	mov	r2, r8
 8008842:	464b      	mov	r3, r9
 8008844:	f7f8 f80a 	bl	800085c <__aeabi_ddiv>
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	f507 60ec 	add.w	r0, r7, #1888	; 0x760
 8008850:	00f1      	lsls	r1, r6, #3
 8008852:	4401      	add	r1, r0
 8008854:	e9c1 2300 	strd	r2, r3, [r1]
      gain[k + 6 * i] = (Pxy[k + 6] - gain[6 * r1 + k] * Pyy[r1 + 2]) / a22;
 8008858:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800885c:	3306      	adds	r3, #6
 800885e:	00db      	lsls	r3, r3, #3
 8008860:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008864:	4413      	add	r3, r2
 8008866:	3b90      	subs	r3, #144	; 0x90
 8008868:	e9d3 8900 	ldrd	r8, r9, [r3]
 800886c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8008870:	4613      	mov	r3, r2
 8008872:	005b      	lsls	r3, r3, #1
 8008874:	4413      	add	r3, r2
 8008876:	005b      	lsls	r3, r3, #1
 8008878:	461a      	mov	r2, r3
 800887a:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800887e:	4413      	add	r3, r2
 8008880:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	4413      	add	r3, r2
 8008888:	e9d3 0100 	ldrd	r0, r1, [r3]
 800888c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008890:	3302      	adds	r3, #2
 8008892:	00db      	lsls	r3, r3, #3
 8008894:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008898:	4413      	add	r3, r2
 800889a:	3bb0      	subs	r3, #176	; 0xb0
 800889c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a0:	f7f7 feb2 	bl	8000608 <__aeabi_dmul>
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	4640      	mov	r0, r8
 80088aa:	4649      	mov	r1, r9
 80088ac:	f7f7 fcf4 	bl	8000298 <__aeabi_dsub>
 80088b0:	4602      	mov	r2, r0
 80088b2:	460b      	mov	r3, r1
 80088b4:	4610      	mov	r0, r2
 80088b6:	4619      	mov	r1, r3
 80088b8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80088bc:	4613      	mov	r3, r2
 80088be:	005b      	lsls	r3, r3, #1
 80088c0:	4413      	add	r3, r2
 80088c2:	005b      	lsls	r3, r3, #1
 80088c4:	461a      	mov	r2, r3
 80088c6:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80088ca:	18d6      	adds	r6, r2, r3
 80088cc:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80088d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d4:	f7f7 ffc2 	bl	800085c <__aeabi_ddiv>
 80088d8:	4602      	mov	r2, r0
 80088da:	460b      	mov	r3, r1
 80088dc:	f507 60ec 	add.w	r0, r7, #1888	; 0x760
 80088e0:	00f1      	lsls	r1, r6, #3
 80088e2:	4401      	add	r1, r0
 80088e4:	e9c1 2300 	strd	r2, r3, [r1]
      gain[k + 6 * r1] -= gain[6 * i + k] * epsilon;
 80088e8:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80088ec:	4613      	mov	r3, r2
 80088ee:	005b      	lsls	r3, r3, #1
 80088f0:	4413      	add	r3, r2
 80088f2:	005b      	lsls	r3, r3, #1
 80088f4:	461a      	mov	r2, r3
 80088f6:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80088fa:	4413      	add	r3, r2
 80088fc:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008900:	00db      	lsls	r3, r3, #3
 8008902:	4413      	add	r3, r2
 8008904:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008908:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800890c:	4613      	mov	r3, r2
 800890e:	005b      	lsls	r3, r3, #1
 8008910:	4413      	add	r3, r2
 8008912:	005b      	lsls	r3, r3, #1
 8008914:	461a      	mov	r2, r3
 8008916:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800891a:	4413      	add	r3, r2
 800891c:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008920:	00db      	lsls	r3, r3, #3
 8008922:	4413      	add	r3, r2
 8008924:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008928:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800892c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008930:	f7f7 fe6a 	bl	8000608 <__aeabi_dmul>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	4610      	mov	r0, r2
 800893a:	4619      	mov	r1, r3
 800893c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8008940:	4613      	mov	r3, r2
 8008942:	005b      	lsls	r3, r3, #1
 8008944:	4413      	add	r3, r2
 8008946:	005b      	lsls	r3, r3, #1
 8008948:	461a      	mov	r2, r3
 800894a:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800894e:	18d6      	adds	r6, r2, r3
 8008950:	4602      	mov	r2, r0
 8008952:	460b      	mov	r3, r1
 8008954:	4640      	mov	r0, r8
 8008956:	4649      	mov	r1, r9
 8008958:	f7f7 fc9e 	bl	8000298 <__aeabi_dsub>
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	f507 60ec 	add.w	r0, r7, #1888	; 0x760
 8008964:	00f1      	lsls	r1, r6, #3
 8008966:	4401      	add	r1, r0
 8008968:	e9c1 2300 	strd	r2, r3, [r1]
    for (k = 0; k < 6; k++) {
 800896c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008970:	3301      	adds	r3, #1
 8008972:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008976:	e742      	b.n	80087fe <_ZN27positionEstimatorModelClass4stepEv+0x15ae>
 8008978:	20000290 	.word	0x20000290
    }

    a22 = rtDW.TmpSignalConversionAtSFunctio_i[0] - rtDW.DataStoreReadX_p[4];
 800897c:	1d3b      	adds	r3, r7, #4
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008984:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008988:	1d3b      	adds	r3, r7, #4
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8008990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008994:	f7f7 fc80 	bl	8000298 <__aeabi_dsub>
 8008998:	4602      	mov	r2, r0
 800899a:	460b      	mov	r3, r1
 800899c:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 80089a0:	e9c1 2300 	strd	r2, r3, [r1]
    epsilon = rtDW.TmpSignalConversionAtSFunctio_i[1] - rtDW.DataStoreReadX_p[5];
 80089a4:	1d3b      	adds	r3, r7, #4
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80089ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089b0:	1d3b      	adds	r3, r7, #4
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 80089b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089bc:	f7f7 fc6c 	bl	8000298 <__aeabi_dsub>
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 80089c8:	e9c1 2300 	strd	r2, r3, [r1]
    for (r1 = 0; r1 < 6; r1++) {
 80089cc:	2300      	movs	r3, #0
 80089ce:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80089d2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80089d6:	2b05      	cmp	r3, #5
 80089d8:	f300 8183 	bgt.w	8008ce2 <_ZN27positionEstimatorModelClass4stepEv+0x1a92>
      u = gain[r1] * a22;
 80089dc:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80089e0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80089e4:	00db      	lsls	r3, r3, #3
 80089e6:	4413      	add	r3, r2
 80089e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ec:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 80089f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089f4:	f7f7 fe08 	bl	8000608 <__aeabi_dmul>
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008a00:	e9c1 2300 	strd	r2, r3, [r1]
      u += gain[r1 + 6] * epsilon;
 8008a04:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008a08:	3306      	adds	r3, #6
 8008a0a:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008a0e:	00db      	lsls	r3, r3, #3
 8008a10:	4413      	add	r3, r2
 8008a12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a16:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1e:	f7f7 fdf3 	bl	8000608 <__aeabi_dmul>
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
 8008a26:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008a2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a2e:	f7f7 fc35 	bl	800029c <__adddf3>
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008a3a:	e9c1 2300 	strd	r2, r3, [r1]
      rtDW.xNew_n[r1] = rtDW.DataStoreReadX_p[r1] + u;
 8008a3e:	1d3b      	adds	r3, r7, #4
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008a46:	3392      	adds	r3, #146	; 0x92
 8008a48:	00db      	lsls	r3, r3, #3
 8008a4a:	4413      	add	r3, r2
 8008a4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a50:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a58:	f7f7 fc20 	bl	800029c <__adddf3>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	1d39      	adds	r1, r7, #4
 8008a62:	6808      	ldr	r0, [r1, #0]
 8008a64:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	; 0x8c4
 8008a68:	319a      	adds	r1, #154	; 0x9a
 8008a6a:	00c9      	lsls	r1, r1, #3
 8008a6c:	4401      	add	r1, r0
 8008a6e:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = 0; i < 6; i++) {
 8008a72:	2300      	movs	r3, #0
 8008a74:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008a78:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008a7c:	2b05      	cmp	r3, #5
 8008a7e:	f300 80ae 	bgt.w	8008bde <_ZN27positionEstimatorModelClass4stepEv+0x198e>
        gain_0[r1 + 6 * i] = 0.0;
 8008a82:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008a86:	4613      	mov	r3, r2
 8008a88:	005b      	lsls	r3, r3, #1
 8008a8a:	4413      	add	r3, r2
 8008a8c:	005b      	lsls	r3, r3, #1
 8008a8e:	461a      	mov	r2, r3
 8008a90:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008a94:	4413      	add	r3, r2
 8008a96:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008a9a:	00db      	lsls	r3, r3, #3
 8008a9c:	18d1      	adds	r1, r2, r3
 8008a9e:	f04f 0200 	mov.w	r2, #0
 8008aa2:	f04f 0300 	mov.w	r3, #0
 8008aa6:	e9c1 2300 	strd	r2, r3, [r1]
        u = gain_0[6 * i + r1];
 8008aaa:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008aae:	4613      	mov	r3, r2
 8008ab0:	005b      	lsls	r3, r3, #1
 8008ab2:	4413      	add	r3, r2
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008abc:	4413      	add	r3, r2
 8008abe:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008ac2:	00db      	lsls	r3, r3, #3
 8008ac4:	4413      	add	r3, r2
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008ace:	e9c1 2300 	strd	r2, r3, [r1]
        u += dHdx[i << 1] * gain[r1];
 8008ad2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8008adc:	00db      	lsls	r3, r3, #3
 8008ade:	4413      	add	r3, r2
 8008ae0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ae4:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008ae8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008aec:	00db      	lsls	r3, r3, #3
 8008aee:	4413      	add	r3, r2
 8008af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af4:	f7f7 fd88 	bl	8000608 <__aeabi_dmul>
 8008af8:	4602      	mov	r2, r0
 8008afa:	460b      	mov	r3, r1
 8008afc:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b04:	f7f7 fbca 	bl	800029c <__adddf3>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008b10:	e9c1 2300 	strd	r2, r3, [r1]
        gain_0[r1 + 6 * i] = u;
 8008b14:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008b18:	4613      	mov	r3, r2
 8008b1a:	005b      	lsls	r3, r3, #1
 8008b1c:	4413      	add	r3, r2
 8008b1e:	005b      	lsls	r3, r3, #1
 8008b20:	461a      	mov	r2, r3
 8008b22:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008b26:	4413      	add	r3, r2
 8008b28:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008b2c:	00db      	lsls	r3, r3, #3
 8008b2e:	18d1      	adds	r1, r2, r3
 8008b30:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	e9c1 2300 	strd	r2, r3, [r1]
        u = gain_0[6 * i + r1];
 8008b3c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008b40:	4613      	mov	r3, r2
 8008b42:	005b      	lsls	r3, r3, #1
 8008b44:	4413      	add	r3, r2
 8008b46:	005b      	lsls	r3, r3, #1
 8008b48:	461a      	mov	r2, r3
 8008b4a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008b4e:	4413      	add	r3, r2
 8008b50:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008b54:	00db      	lsls	r3, r3, #3
 8008b56:	4413      	add	r3, r2
 8008b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5c:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008b60:	e9c1 2300 	strd	r2, r3, [r1]
        u += dHdx[(i << 1) + 1] * gain[r1 + 6];
 8008b64:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008b68:	005b      	lsls	r3, r3, #1
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8008b70:	00db      	lsls	r3, r3, #3
 8008b72:	4413      	add	r3, r2
 8008b74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b78:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008b7c:	3306      	adds	r3, #6
 8008b7e:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008b82:	00db      	lsls	r3, r3, #3
 8008b84:	4413      	add	r3, r2
 8008b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8a:	f7f7 fd3d 	bl	8000608 <__aeabi_dmul>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	460b      	mov	r3, r1
 8008b92:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008b96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b9a:	f7f7 fb7f 	bl	800029c <__adddf3>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008ba6:	e9c1 2300 	strd	r2, r3, [r1]
        gain_0[r1 + 6 * i] = u;
 8008baa:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008bae:	4613      	mov	r3, r2
 8008bb0:	005b      	lsls	r3, r3, #1
 8008bb2:	4413      	add	r3, r2
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008bc2:	00db      	lsls	r3, r3, #3
 8008bc4:	18d1      	adds	r1, r2, r3
 8008bc6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bce:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = 0; i < 6; i++) {
 8008bd2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008bdc:	e74c      	b.n	8008a78 <_ZN27positionEstimatorModelClass4stepEv+0x1828>
      }

      for (i = 0; i < 6; i++) {
 8008bde:	2300      	movs	r3, #0
 8008be0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008be4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008be8:	2b05      	cmp	r3, #5
 8008bea:	dc74      	bgt.n	8008cd6 <_ZN27positionEstimatorModelClass4stepEv+0x1a86>
        u = 0.0;
 8008bec:	f04f 0200 	mov.w	r2, #0
 8008bf0:	f04f 0300 	mov.w	r3, #0
 8008bf4:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008bf8:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008c02:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008c06:	2b05      	cmp	r3, #5
 8008c08:	dc36      	bgt.n	8008c78 <_ZN27positionEstimatorModelClass4stepEv+0x1a28>
          u += gain_0[6 * k + r1] * rtDW.P_k[6 * i + k];
 8008c0a:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8008c0e:	4613      	mov	r3, r2
 8008c10:	005b      	lsls	r3, r3, #1
 8008c12:	4413      	add	r3, r2
 8008c14:	005b      	lsls	r3, r3, #1
 8008c16:	461a      	mov	r2, r3
 8008c18:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008c22:	00db      	lsls	r3, r3, #3
 8008c24:	4413      	add	r3, r2
 8008c26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c2a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008c2e:	4613      	mov	r3, r2
 8008c30:	005b      	lsls	r3, r3, #1
 8008c32:	4413      	add	r3, r2
 8008c34:	005b      	lsls	r3, r3, #1
 8008c36:	461a      	mov	r2, r3
 8008c38:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008c3c:	4413      	add	r3, r2
 8008c3e:	1d3a      	adds	r2, r7, #4
 8008c40:	6812      	ldr	r2, [r2, #0]
 8008c42:	33a0      	adds	r3, #160	; 0xa0
 8008c44:	00db      	lsls	r3, r3, #3
 8008c46:	4413      	add	r3, r2
 8008c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4c:	f7f7 fcdc 	bl	8000608 <__aeabi_dmul>
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008c58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c5c:	f7f7 fb1e 	bl	800029c <__adddf3>
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008c68:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 8008c6c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008c70:	3301      	adds	r3, #1
 8008c72:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008c76:	e7c4      	b.n	8008c02 <_ZN27positionEstimatorModelClass4stepEv+0x19b2>
        }

        a_0[r1 + 6 * i] = rtDW.P_k[6 * i + r1] - u;
 8008c78:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	005b      	lsls	r3, r3, #1
 8008c80:	4413      	add	r3, r2
 8008c82:	005b      	lsls	r3, r3, #1
 8008c84:	461a      	mov	r2, r3
 8008c86:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008c8a:	4413      	add	r3, r2
 8008c8c:	1d3a      	adds	r2, r7, #4
 8008c8e:	6812      	ldr	r2, [r2, #0]
 8008c90:	33a0      	adds	r3, #160	; 0xa0
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	4413      	add	r3, r2
 8008c96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c9a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	005b      	lsls	r3, r3, #1
 8008ca2:	4413      	add	r3, r2
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008cac:	18d6      	adds	r6, r2, r3
 8008cae:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb6:	f7f7 faef 	bl	8000298 <__aeabi_dsub>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8008cc2:	00f1      	lsls	r1, r6, #3
 8008cc4:	4401      	add	r1, r0
 8008cc6:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = 0; i < 6; i++) {
 8008cca:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008cce:	3301      	adds	r3, #1
 8008cd0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008cd4:	e786      	b.n	8008be4 <_ZN27positionEstimatorModelClass4stepEv+0x1994>
    for (r1 = 0; r1 < 6; r1++) {
 8008cd6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008cda:	3301      	adds	r3, #1
 8008cdc:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008ce0:	e677      	b.n	80089d2 <_ZN27positionEstimatorModelClass4stepEv+0x1782>
      }
    }

    for (i = 0; i < 36; i++) {
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008ce8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008cec:	2b23      	cmp	r3, #35	; 0x23
 8008cee:	dc29      	bgt.n	8008d44 <_ZN27positionEstimatorModelClass4stepEv+0x1af4>
      rtDW.P_k[i] = a_0[i];
 8008cf0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008cf4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008cf8:	00db      	lsls	r3, r3, #3
 8008cfa:	4413      	add	r3, r2
 8008cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d00:	1d39      	adds	r1, r7, #4
 8008d02:	6808      	ldr	r0, [r1, #0]
 8008d04:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 8008d08:	31a0      	adds	r1, #160	; 0xa0
 8008d0a:	00c9      	lsls	r1, r1, #3
 8008d0c:	4401      	add	r1, r0
 8008d0e:	e9c1 2300 	strd	r2, r3, [r1]

      // DataStoreWrite: '<S13>/Data Store WriteP'
      rtDW.P_n_c[i] = rtDW.P_k[i];
 8008d12:	1d3b      	adds	r3, r7, #4
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d1a:	33a0      	adds	r3, #160	; 0xa0
 8008d1c:	00db      	lsls	r3, r3, #3
 8008d1e:	4413      	add	r3, r2
 8008d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d24:	1d39      	adds	r1, r7, #4
 8008d26:	6808      	ldr	r0, [r1, #0]
 8008d28:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 8008d2c:	f501 718c 	add.w	r1, r1, #280	; 0x118
 8008d30:	00c9      	lsls	r1, r1, #3
 8008d32:	4401      	add	r1, r0
 8008d34:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 36; i++) {
 8008d38:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008d42:	e7d1      	b.n	8008ce8 <_ZN27positionEstimatorModelClass4stepEv+0x1a98>
    }

    // DataStoreWrite: '<S13>/Data Store WriteX'
    for (i = 0; i < 6; i++) {
 8008d44:	2300      	movs	r3, #0
 8008d46:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008d4a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d4e:	2b05      	cmp	r3, #5
 8008d50:	dc18      	bgt.n	8008d84 <_ZN27positionEstimatorModelClass4stepEv+0x1b34>
      rtDW.x_p[i] = rtDW.xNew_n[i];
 8008d52:	1d3b      	adds	r3, r7, #4
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d5a:	339a      	adds	r3, #154	; 0x9a
 8008d5c:	00db      	lsls	r3, r3, #3
 8008d5e:	4413      	add	r3, r2
 8008d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d64:	1d39      	adds	r1, r7, #4
 8008d66:	6808      	ldr	r0, [r1, #0]
 8008d68:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 8008d6c:	f501 719e 	add.w	r1, r1, #316	; 0x13c
 8008d70:	00c9      	lsls	r1, r1, #3
 8008d72:	4401      	add	r1, r0
 8008d74:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 6; i++) {
 8008d78:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008d82:	e7e2      	b.n	8008d4a <_ZN27positionEstimatorModelClass4stepEv+0x1afa>

  // Logic: '<Root>/Logical Operator' incorporates:
  //   Inport: '<Root>/GPS_switch'
  //   Inport: '<Root>/GpsFlag'

  rtDW.LogicalOperator = ((rtU.GPS_switch != 0.0) && (rtU.GpsFlag != 0.0));
 8008d84:	1d3b      	adds	r3, r7, #4
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8008d8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d90:	f04f 0200 	mov.w	r2, #0
 8008d94:	f04f 0300 	mov.w	r3, #0
 8008d98:	f7f7 fe9e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d110      	bne.n	8008dc4 <_ZN27positionEstimatorModelClass4stepEv+0x1b74>
 8008da2:	1d3b      	adds	r3, r7, #4
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
 8008daa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008dae:	f04f 0200 	mov.w	r2, #0
 8008db2:	f04f 0300 	mov.w	r3, #0
 8008db6:	f7f7 fe8f 	bl	8000ad8 <__aeabi_dcmpeq>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d101      	bne.n	8008dc4 <_ZN27positionEstimatorModelClass4stepEv+0x1b74>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e000      	b.n	8008dc6 <_ZN27positionEstimatorModelClass4stepEv+0x1b76>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	1d3b      	adds	r3, r7, #4
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f883 2c3f 	strb.w	r2, [r3, #3135]	; 0xc3f

  // Outputs for Enabled SubSystem: '<S2>/Correct2' incorporates:
  //   EnablePort: '<S14>/Enable'

  if (rtDW.LogicalOperator) {
 8008dd0:	1d3b      	adds	r3, r7, #4
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f893 3c3f 	ldrb.w	r3, [r3, #3135]	; 0xc3f
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f000 83d7 	beq.w	800958c <_ZN27positionEstimatorModelClass4stepEv+0x233c>
    // DataStoreRead: '<S14>/Data Store ReadX'
    for (i = 0; i < 6; i++) {
 8008dde:	2300      	movs	r3, #0
 8008de0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008de4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008de8:	2b05      	cmp	r3, #5
 8008dea:	dc18      	bgt.n	8008e1e <_ZN27positionEstimatorModelClass4stepEv+0x1bce>
      rtDW.DataStoreReadX_j[i] = rtDW.x_p[i];
 8008dec:	1d3b      	adds	r3, r7, #4
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008df4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008df8:	00db      	lsls	r3, r3, #3
 8008dfa:	4413      	add	r3, r2
 8008dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e00:	1d39      	adds	r1, r7, #4
 8008e02:	6808      	ldr	r0, [r1, #0]
 8008e04:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 8008e08:	315e      	adds	r1, #94	; 0x5e
 8008e0a:	00c9      	lsls	r1, r1, #3
 8008e0c:	4401      	add	r1, r0
 8008e0e:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 6; i++) {
 8008e12:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008e16:	3301      	adds	r3, #1
 8008e18:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008e1c:	e7e2      	b.n	8008de4 <_ZN27positionEstimatorModelClass4stepEv+0x1b94>
    // SignalConversion generated from: '<S18>/ SFunction ' incorporates:
    //   Inport: '<Root>/vx'
    //   Inport: '<Root>/vy'
    //   MATLAB Function: '<S14>/Correct'

    rtDW.TmpSignalConversionAtSFunctionI[0] = rtDW.Px;
 8008e1e:	1d3b      	adds	r3, r7, #4
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
 8008e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2a:	1d39      	adds	r1, r7, #4
 8008e2c:	6809      	ldr	r1, [r1, #0]
 8008e2e:	e9c1 23c8 	strd	r2, r3, [r1, #800]	; 0x320
    rtDW.TmpSignalConversionAtSFunctionI[1] = rtDW.Py;
 8008e32:	1d3b      	adds	r3, r7, #4
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 8008e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3e:	1d39      	adds	r1, r7, #4
 8008e40:	6809      	ldr	r1, [r1, #0]
 8008e42:	e9c1 23ca 	strd	r2, r3, [r1, #808]	; 0x328
    rtDW.TmpSignalConversionAtSFunctionI[2] = rtU.vx;
 8008e46:	1d3b      	adds	r3, r7, #4
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f503 6349 	add.w	r3, r3, #3216	; 0xc90
 8008e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e52:	1d39      	adds	r1, r7, #4
 8008e54:	6809      	ldr	r1, [r1, #0]
 8008e56:	e9c1 23cc 	strd	r2, r3, [r1, #816]	; 0x330
    rtDW.TmpSignalConversionAtSFunctionI[3] = rtU.vy;
 8008e5a:	1d3b      	adds	r3, r7, #4
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f603 4398 	addw	r3, r3, #3224	; 0xc98
 8008e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e66:	1d39      	adds	r1, r7, #4
 8008e68:	6809      	ldr	r1, [r1, #0]
 8008e6a:	e9c1 23ce 	strd	r2, r3, [r1, #824]	; 0x338

    // MATLAB Function: '<S14>/Correct'
    rtDW.blockOrdering = rtDW.blockOrdering_f;
 8008e6e:	1d3b      	adds	r3, r7, #4
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f893 2c44 	ldrb.w	r2, [r3, #3140]	; 0xc44
 8008e76:	1d3b      	adds	r3, r7, #4
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f883 2c43 	strb.w	r2, [r3, #3139]	; 0xc43
    blockOrdering = rtDW.blockOrdering;
 8008e7e:	1d3b      	adds	r3, r7, #4
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f893 3c43 	ldrb.w	r3, [r3, #3139]	; 0xc43
 8008e86:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering = blockOrdering;
 8008e8a:	1d3b      	adds	r3, r7, #4
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 8008e92:	f883 2c43 	strb.w	r2, [r3, #3139]	; 0xc43
    for (i = 0; i < 36; i++) {
 8008e96:	2300      	movs	r3, #0
 8008e98:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008e9c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008ea0:	2b23      	cmp	r3, #35	; 0x23
 8008ea2:	dc32      	bgt.n	8008f0a <_ZN27positionEstimatorModelClass4stepEv+0x1cba>
      // DataStoreRead: '<S14>/Data Store ReadP'
      rtDW.P_f[i] = rtDW.P_n_c[i];
 8008ea4:	1d3b      	adds	r3, r7, #4
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008eac:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8008eb0:	00db      	lsls	r3, r3, #3
 8008eb2:	4413      	add	r3, r2
 8008eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb8:	1d39      	adds	r1, r7, #4
 8008eba:	6808      	ldr	r0, [r1, #0]
 8008ebc:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 8008ec0:	316e      	adds	r1, #110	; 0x6e
 8008ec2:	00c9      	lsls	r1, r1, #3
 8008ec4:	4401      	add	r1, r0
 8008ec6:	e9c1 2300 	strd	r2, r3, [r1]

      // MATLAB Function: '<S14>/Correct'
      u = rtDW.P_f[i];
 8008eca:	1d3b      	adds	r3, r7, #4
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008ed2:	336e      	adds	r3, #110	; 0x6e
 8008ed4:	00db      	lsls	r3, r3, #3
 8008ed6:	4413      	add	r3, r2
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008ee0:	e9c1 2300 	strd	r2, r3, [r1]
      rtDW.P_f[i] = u;
 8008ee4:	1d3b      	adds	r3, r7, #4
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008eec:	336e      	adds	r3, #110	; 0x6e
 8008eee:	00db      	lsls	r3, r3, #3
 8008ef0:	18d1      	adds	r1, r2, r3
 8008ef2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efa:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 36; i++) {
 8008efe:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008f02:	3301      	adds	r3, #1
 8008f04:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008f08:	e7c8      	b.n	8008e9c <_ZN27positionEstimatorModelClass4stepEv+0x1c4c>
    }

    // MATLAB Function: '<S14>/Correct' incorporates:
    //   Constant: '<S2>/R2'

    for (r1 = 0; r1 < 6; r1++) {
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008f10:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008f14:	2b05      	cmp	r3, #5
 8008f16:	f300 80f9 	bgt.w	800910c <_ZN27positionEstimatorModelClass4stepEv+0x1ebc>
      for (i = 0; i < 6; i++) {
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008f20:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008f24:	2b05      	cmp	r3, #5
 8008f26:	dc16      	bgt.n	8008f56 <_ZN27positionEstimatorModelClass4stepEv+0x1d06>
        imvec[i] = rtDW.DataStoreReadX_j[i];
 8008f28:	1d3b      	adds	r3, r7, #4
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008f30:	335e      	adds	r3, #94	; 0x5e
 8008f32:	00db      	lsls	r3, r3, #3
 8008f34:	4413      	add	r3, r2
 8008f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3a:	f507 60e6 	add.w	r0, r7, #1840	; 0x730
 8008f3e:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 8008f42:	00c9      	lsls	r1, r1, #3
 8008f44:	4401      	add	r1, r0
 8008f46:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = 0; i < 6; i++) {
 8008f4a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008f4e:	3301      	adds	r3, #1
 8008f50:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008f54:	e7e4      	b.n	8008f20 <_ZN27positionEstimatorModelClass4stepEv+0x1cd0>
      }

      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_j[r1]);
 8008f56:	1d3b      	adds	r3, r7, #4
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008f5e:	335e      	adds	r3, #94	; 0x5e
 8008f60:	00db      	lsls	r3, r3, #3
 8008f62:	4413      	add	r3, r2
 8008f64:	ed93 7b00 	vldr	d7, [r3]
 8008f68:	eeb0 0a47 	vmov.f32	s0, s14
 8008f6c:	eef0 0a67 	vmov.f32	s1, s15
 8008f70:	f7fc ff05 	bl	8005d7e <_ZSt3absd>
 8008f74:	ec51 0b10 	vmov	r0, r1, d0
 8008f78:	f04f 0200 	mov.w	r2, #0
 8008f7c:	4bc4      	ldr	r3, [pc, #784]	; (8009290 <_ZN27positionEstimatorModelClass4stepEv+0x2040>)
 8008f7e:	f7f7 fb43 	bl	8000608 <__aeabi_dmul>
 8008f82:	4602      	mov	r2, r0
 8008f84:	460b      	mov	r3, r1
 8008f86:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8008f8a:	e9c1 2300 	strd	r2, r3, [r1]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 8008f8e:	f04f 0200 	mov.w	r2, #0
 8008f92:	4bbf      	ldr	r3, [pc, #764]	; (8009290 <_ZN27positionEstimatorModelClass4stepEv+0x2040>)
 8008f94:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8008f98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f9c:	f7f7 fda6 	bl	8000aec <__aeabi_dcmplt>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d108      	bne.n	8008fb8 <_ZN27positionEstimatorModelClass4stepEv+0x1d68>
 8008fa6:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008faa:	ed93 0b00 	vldr	d0, [r3]
 8008fae:	f7fc ffa9 	bl	8005f04 <rtIsNaN>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d001      	beq.n	8008fbc <_ZN27positionEstimatorModelClass4stepEv+0x1d6c>
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e000      	b.n	8008fbe <_ZN27positionEstimatorModelClass4stepEv+0x1d6e>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d006      	beq.n	8008fd0 <_ZN27positionEstimatorModelClass4stepEv+0x1d80>
        epsilon = 1.4901161193847656E-8;
 8008fc2:	f04f 0200 	mov.w	r2, #0
 8008fc6:	4bb2      	ldr	r3, [pc, #712]	; (8009290 <_ZN27positionEstimatorModelClass4stepEv+0x2040>)
 8008fc8:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8008fcc:	e9c1 2300 	strd	r2, r3, [r1]
      }

      imvec[r1] = rtDW.DataStoreReadX_j[r1] + epsilon;
 8008fd0:	1d3b      	adds	r3, r7, #4
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008fd8:	335e      	adds	r3, #94	; 0x5e
 8008fda:	00db      	lsls	r3, r3, #3
 8008fdc:	4413      	add	r3, r2
 8008fde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008fe2:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fea:	f7f7 f957 	bl	800029c <__adddf3>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	f507 60e6 	add.w	r0, r7, #1840	; 0x730
 8008ff6:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	; 0x8c4
 8008ffa:	00c9      	lsls	r1, r1, #3
 8008ffc:	4401      	add	r1, r0
 8008ffe:	e9c1 2300 	strd	r2, r3, [r1]
      dHdx_0[r1 << 2] = (imvec[0] - rtDW.DataStoreReadX_j[0]) / epsilon;
 8009002:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8009006:	e9d3 0100 	ldrd	r0, r1, [r3]
 800900a:	1d3b      	adds	r3, r7, #4
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	e9d3 23bc 	ldrd	r2, r3, [r3, #752]	; 0x2f0
 8009012:	f7f7 f941 	bl	8000298 <__aeabi_dsub>
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	4610      	mov	r0, r2
 800901c:	4619      	mov	r1, r3
 800901e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009022:	009e      	lsls	r6, r3, #2
 8009024:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902c:	f7f7 fc16 	bl	800085c <__aeabi_ddiv>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 8009038:	00f1      	lsls	r1, r6, #3
 800903a:	4401      	add	r1, r0
 800903c:	e9c1 2300 	strd	r2, r3, [r1]
      dHdx_0[(r1 << 2) + 1] = (imvec[1] - rtDW.DataStoreReadX_j[1]) / epsilon;
 8009040:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8009044:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8009048:	1d3b      	adds	r3, r7, #4
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	e9d3 23be 	ldrd	r2, r3, [r3, #760]	; 0x2f8
 8009050:	f7f7 f922 	bl	8000298 <__aeabi_dsub>
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	4610      	mov	r0, r2
 800905a:	4619      	mov	r1, r3
 800905c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	1c5e      	adds	r6, r3, #1
 8009064:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906c:	f7f7 fbf6 	bl	800085c <__aeabi_ddiv>
 8009070:	4602      	mov	r2, r0
 8009072:	460b      	mov	r3, r1
 8009074:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 8009078:	00f1      	lsls	r1, r6, #3
 800907a:	4401      	add	r1, r0
 800907c:	e9c1 2300 	strd	r2, r3, [r1]
      dHdx_0[(r1 << 2) + 2] = (imvec[2] - rtDW.DataStoreReadX_j[2]) / epsilon;
 8009080:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8009084:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8009088:	1d3b      	adds	r3, r7, #4
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	e9d3 23c0 	ldrd	r2, r3, [r3, #768]	; 0x300
 8009090:	f7f7 f902 	bl	8000298 <__aeabi_dsub>
 8009094:	4602      	mov	r2, r0
 8009096:	460b      	mov	r3, r1
 8009098:	4610      	mov	r0, r2
 800909a:	4619      	mov	r1, r3
 800909c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	1c9e      	adds	r6, r3, #2
 80090a4:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80090a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ac:	f7f7 fbd6 	bl	800085c <__aeabi_ddiv>
 80090b0:	4602      	mov	r2, r0
 80090b2:	460b      	mov	r3, r1
 80090b4:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 80090b8:	00f1      	lsls	r1, r6, #3
 80090ba:	4401      	add	r1, r0
 80090bc:	e9c1 2300 	strd	r2, r3, [r1]
      dHdx_0[(r1 << 2) + 3] = (imvec[3] - rtDW.DataStoreReadX_j[3]) / epsilon;
 80090c0:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 80090c4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80090c8:	1d3b      	adds	r3, r7, #4
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	e9d3 23c2 	ldrd	r2, r3, [r3, #776]	; 0x308
 80090d0:	f7f7 f8e2 	bl	8000298 <__aeabi_dsub>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4610      	mov	r0, r2
 80090da:	4619      	mov	r1, r3
 80090dc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	1cde      	adds	r6, r3, #3
 80090e4:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80090e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ec:	f7f7 fbb6 	bl	800085c <__aeabi_ddiv>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 80090f8:	00f1      	lsls	r1, r6, #3
 80090fa:	4401      	add	r1, r0
 80090fc:	e9c1 2300 	strd	r2, r3, [r1]
    for (r1 = 0; r1 < 6; r1++) {
 8009100:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009104:	3301      	adds	r3, #1
 8009106:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800910a:	e701      	b.n	8008f10 <_ZN27positionEstimatorModelClass4stepEv+0x1cc0>
    }

    for (i = 0; i < 6; i++) {
 800910c:	2300      	movs	r3, #0
 800910e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009112:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009116:	2b05      	cmp	r3, #5
 8009118:	dc16      	bgt.n	8009148 <_ZN27positionEstimatorModelClass4stepEv+0x1ef8>
      imvec[i] = rtDW.DataStoreReadX_j[i];
 800911a:	1d3b      	adds	r3, r7, #4
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009122:	335e      	adds	r3, #94	; 0x5e
 8009124:	00db      	lsls	r3, r3, #3
 8009126:	4413      	add	r3, r2
 8009128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912c:	f507 60e6 	add.w	r0, r7, #1840	; 0x730
 8009130:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 8009134:	00c9      	lsls	r1, r1, #3
 8009136:	4401      	add	r1, r0
 8009138:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 6; i++) {
 800913c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009140:	3301      	adds	r3, #1
 8009142:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009146:	e7e4      	b.n	8009112 <_ZN27positionEstimatorModelClass4stepEv+0x1ec2>
    }

    for (r1 = 0; r1 < 4; r1++) {
 8009148:	2300      	movs	r3, #0
 800914a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800914e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009152:	2b03      	cmp	r3, #3
 8009154:	f300 809e 	bgt.w	8009294 <_ZN27positionEstimatorModelClass4stepEv+0x2044>
      for (i = 0; i < 6; i++) {
 8009158:	2300      	movs	r3, #0
 800915a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800915e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009162:	2b05      	cmp	r3, #5
 8009164:	dc6f      	bgt.n	8009246 <_ZN27positionEstimatorModelClass4stepEv+0x1ff6>
        dHdx_2[r1 + (i << 2)] = 0.0;
 8009166:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800916a:	009a      	lsls	r2, r3, #2
 800916c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009170:	4413      	add	r3, r2
 8009172:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8009176:	00db      	lsls	r3, r3, #3
 8009178:	18d1      	adds	r1, r2, r3
 800917a:	f04f 0200 	mov.w	r2, #0
 800917e:	f04f 0300 	mov.w	r3, #0
 8009182:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 8009186:	2300      	movs	r3, #0
 8009188:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800918c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8009190:	2b05      	cmp	r3, #5
 8009192:	dc52      	bgt.n	800923a <_ZN27positionEstimatorModelClass4stepEv+0x1fea>
          u = dHdx_2[(i << 2) + r1];
 8009194:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009198:	009a      	lsls	r2, r3, #2
 800919a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800919e:	4413      	add	r3, r2
 80091a0:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80091a4:	00db      	lsls	r3, r3, #3
 80091a6:	4413      	add	r3, r2
 80091a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ac:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80091b0:	e9c1 2300 	strd	r2, r3, [r1]
          u += dHdx_0[(k << 2) + r1] * rtDW.P_f[6 * i + k];
 80091b4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80091b8:	009a      	lsls	r2, r3, #2
 80091ba:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80091be:	4413      	add	r3, r2
 80091c0:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 80091c4:	00db      	lsls	r3, r3, #3
 80091c6:	4413      	add	r3, r2
 80091c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091cc:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80091d0:	4613      	mov	r3, r2
 80091d2:	005b      	lsls	r3, r3, #1
 80091d4:	4413      	add	r3, r2
 80091d6:	005b      	lsls	r3, r3, #1
 80091d8:	461a      	mov	r2, r3
 80091da:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80091de:	4413      	add	r3, r2
 80091e0:	1d3a      	adds	r2, r7, #4
 80091e2:	6812      	ldr	r2, [r2, #0]
 80091e4:	336e      	adds	r3, #110	; 0x6e
 80091e6:	00db      	lsls	r3, r3, #3
 80091e8:	4413      	add	r3, r2
 80091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ee:	f7f7 fa0b 	bl	8000608 <__aeabi_dmul>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80091fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091fe:	f7f7 f84d 	bl	800029c <__adddf3>
 8009202:	4602      	mov	r2, r0
 8009204:	460b      	mov	r3, r1
 8009206:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800920a:	e9c1 2300 	strd	r2, r3, [r1]
          dHdx_2[r1 + (i << 2)] = u;
 800920e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009212:	009a      	lsls	r2, r3, #2
 8009214:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009218:	4413      	add	r3, r2
 800921a:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 800921e:	00db      	lsls	r3, r3, #3
 8009220:	18d1      	adds	r1, r2, r3
 8009222:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 800922e:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8009232:	3301      	adds	r3, #1
 8009234:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8009238:	e7a8      	b.n	800918c <_ZN27positionEstimatorModelClass4stepEv+0x1f3c>
      for (i = 0; i < 6; i++) {
 800923a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800923e:	3301      	adds	r3, #1
 8009240:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009244:	e78b      	b.n	800915e <_ZN27positionEstimatorModelClass4stepEv+0x1f0e>
        }
      }

      Pyy[r1] = rtDW.TmpSignalConversionAtSFunctionI[r1] -
 8009246:	1d3b      	adds	r3, r7, #4
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800924e:	3364      	adds	r3, #100	; 0x64
 8009250:	00db      	lsls	r3, r3, #3
 8009252:	4413      	add	r3, r2
 8009254:	e9d3 0100 	ldrd	r0, r1, [r3]
        rtDW.DataStoreReadX_j[r1];
 8009258:	1d3b      	adds	r3, r7, #4
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009260:	335e      	adds	r3, #94	; 0x5e
 8009262:	00db      	lsls	r3, r3, #3
 8009264:	4413      	add	r3, r2
 8009266:	e9d3 2300 	ldrd	r2, r3, [r3]
      Pyy[r1] = rtDW.TmpSignalConversionAtSFunctionI[r1] -
 800926a:	f7f7 f815 	bl	8000298 <__aeabi_dsub>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	; 0x8c4
 8009276:	00c9      	lsls	r1, r1, #3
 8009278:	f507 600d 	add.w	r0, r7, #2256	; 0x8d0
 800927c:	4401      	add	r1, r0
 800927e:	39b0      	subs	r1, #176	; 0xb0
 8009280:	e9c1 2300 	strd	r2, r3, [r1]
    for (r1 = 0; r1 < 4; r1++) {
 8009284:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009288:	3301      	adds	r3, #1
 800928a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800928e:	e75e      	b.n	800914e <_ZN27positionEstimatorModelClass4stepEv+0x1efe>
 8009290:	3e500000 	.word	0x3e500000
    }

    for (r1 = 0; r1 < 6; r1++) {
 8009294:	2300      	movs	r3, #0
 8009296:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800929a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800929e:	2b05      	cmp	r3, #5
 80092a0:	f300 8089 	bgt.w	80093b6 <_ZN27positionEstimatorModelClass4stepEv+0x2166>
      for (i = 0; i < 4; i++) {
 80092a4:	2300      	movs	r3, #0
 80092a6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80092aa:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80092ae:	2b03      	cmp	r3, #3
 80092b0:	dc7b      	bgt.n	80093aa <_ZN27positionEstimatorModelClass4stepEv+0x215a>
        tmp[r1 + 6 * i] = 0.0;
 80092b2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80092b6:	4613      	mov	r3, r2
 80092b8:	005b      	lsls	r3, r3, #1
 80092ba:	4413      	add	r3, r2
 80092bc:	005b      	lsls	r3, r3, #1
 80092be:	461a      	mov	r2, r3
 80092c0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80092c4:	4413      	add	r3, r2
 80092c6:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 80092ca:	00db      	lsls	r3, r3, #3
 80092cc:	18d1      	adds	r1, r2, r3
 80092ce:	f04f 0200 	mov.w	r2, #0
 80092d2:	f04f 0300 	mov.w	r3, #0
 80092d6:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 80092da:	2300      	movs	r3, #0
 80092dc:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 80092e0:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80092e4:	2b05      	cmp	r3, #5
 80092e6:	dc5a      	bgt.n	800939e <_ZN27positionEstimatorModelClass4stepEv+0x214e>
          u = tmp[6 * i + r1];
 80092e8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80092ec:	4613      	mov	r3, r2
 80092ee:	005b      	lsls	r3, r3, #1
 80092f0:	4413      	add	r3, r2
 80092f2:	005b      	lsls	r3, r3, #1
 80092f4:	461a      	mov	r2, r3
 80092f6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80092fa:	4413      	add	r3, r2
 80092fc:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8009300:	00db      	lsls	r3, r3, #3
 8009302:	4413      	add	r3, r2
 8009304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009308:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800930c:	e9c1 2300 	strd	r2, r3, [r1]
          u += rtDW.P_f[6 * k + r1] * dHdx_0[(k << 2) + i];
 8009310:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8009314:	4613      	mov	r3, r2
 8009316:	005b      	lsls	r3, r3, #1
 8009318:	4413      	add	r3, r2
 800931a:	005b      	lsls	r3, r3, #1
 800931c:	461a      	mov	r2, r3
 800931e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009322:	4413      	add	r3, r2
 8009324:	1d3a      	adds	r2, r7, #4
 8009326:	6812      	ldr	r2, [r2, #0]
 8009328:	336e      	adds	r3, #110	; 0x6e
 800932a:	00db      	lsls	r3, r3, #3
 800932c:	4413      	add	r3, r2
 800932e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009332:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8009336:	009a      	lsls	r2, r3, #2
 8009338:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800933c:	4413      	add	r3, r2
 800933e:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8009342:	00db      	lsls	r3, r3, #3
 8009344:	4413      	add	r3, r2
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	f7f7 f95d 	bl	8000608 <__aeabi_dmul>
 800934e:	4602      	mov	r2, r0
 8009350:	460b      	mov	r3, r1
 8009352:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009356:	e9d1 0100 	ldrd	r0, r1, [r1]
 800935a:	f7f6 ff9f 	bl	800029c <__adddf3>
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009366:	e9c1 2300 	strd	r2, r3, [r1]
          tmp[r1 + 6 * i] = u;
 800936a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800936e:	4613      	mov	r3, r2
 8009370:	005b      	lsls	r3, r3, #1
 8009372:	4413      	add	r3, r2
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	461a      	mov	r2, r3
 8009378:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800937c:	4413      	add	r3, r2
 800937e:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8009382:	00db      	lsls	r3, r3, #3
 8009384:	18d1      	adds	r1, r2, r3
 8009386:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800938a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938e:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 8009392:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8009396:	3301      	adds	r3, #1
 8009398:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800939c:	e7a0      	b.n	80092e0 <_ZN27positionEstimatorModelClass4stepEv+0x2090>
      for (i = 0; i < 4; i++) {
 800939e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80093a2:	3301      	adds	r3, #1
 80093a4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80093a8:	e77f      	b.n	80092aa <_ZN27positionEstimatorModelClass4stepEv+0x205a>
    for (r1 = 0; r1 < 6; r1++) {
 80093aa:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80093ae:	3301      	adds	r3, #1
 80093b0:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80093b4:	e771      	b.n	800929a <_ZN27positionEstimatorModelClass4stepEv+0x204a>
        }
      }
    }

    for (r1 = 0; r1 < 4; r1++) {
 80093b6:	2300      	movs	r3, #0
 80093b8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80093bc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80093c0:	2b03      	cmp	r3, #3
 80093c2:	dc6f      	bgt.n	80094a4 <_ZN27positionEstimatorModelClass4stepEv+0x2254>
      for (i = 0; i < 4; i++) {
 80093c4:	2300      	movs	r3, #0
 80093c6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80093ca:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80093ce:	2b03      	cmp	r3, #3
 80093d0:	dc62      	bgt.n	8009498 <_ZN27positionEstimatorModelClass4stepEv+0x2248>
        u = 0.0;
 80093d2:	f04f 0200 	mov.w	r2, #0
 80093d6:	f04f 0300 	mov.w	r3, #0
 80093da:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80093de:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 80093e2:	2300      	movs	r3, #0
 80093e4:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 80093e8:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80093ec:	2b05      	cmp	r3, #5
 80093ee:	dc2d      	bgt.n	800944c <_ZN27positionEstimatorModelClass4stepEv+0x21fc>
          u += dHdx_2[(k << 2) + r1] * dHdx_0[(k << 2) + i];
 80093f0:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80093f4:	009a      	lsls	r2, r3, #2
 80093f6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80093fa:	4413      	add	r3, r2
 80093fc:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8009400:	00db      	lsls	r3, r3, #3
 8009402:	4413      	add	r3, r2
 8009404:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009408:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800940c:	009a      	lsls	r2, r3, #2
 800940e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009412:	4413      	add	r3, r2
 8009414:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8009418:	00db      	lsls	r3, r3, #3
 800941a:	4413      	add	r3, r2
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	f7f7 f8f2 	bl	8000608 <__aeabi_dmul>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800942c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009430:	f7f6 ff34 	bl	800029c <__adddf3>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800943c:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 8009440:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8009444:	3301      	adds	r3, #1
 8009446:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800944a:	e7cd      	b.n	80093e8 <_ZN27positionEstimatorModelClass4stepEv+0x2198>
        }

        dHdx_3[r1 + (i << 2)] = rtP.R2_Value[(i << 2) + r1] + u;
 800944c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009450:	009a      	lsls	r2, r3, #2
 8009452:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009456:	4413      	add	r3, r2
 8009458:	4a6c      	ldr	r2, [pc, #432]	; (800960c <_ZN27positionEstimatorModelClass4stepEv+0x23bc>)
 800945a:	3325      	adds	r3, #37	; 0x25
 800945c:	00db      	lsls	r3, r3, #3
 800945e:	4413      	add	r3, r2
 8009460:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009464:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009468:	009a      	lsls	r2, r3, #2
 800946a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800946e:	18d6      	adds	r6, r2, r3
 8009470:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009478:	f7f6 ff10 	bl	800029c <__adddf3>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	f507 6088 	add.w	r0, r7, #1088	; 0x440
 8009484:	00f1      	lsls	r1, r6, #3
 8009486:	4401      	add	r1, r0
 8009488:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = 0; i < 4; i++) {
 800948c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009490:	3301      	adds	r3, #1
 8009492:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009496:	e798      	b.n	80093ca <_ZN27positionEstimatorModelClass4stepEv+0x217a>
    for (r1 = 0; r1 < 4; r1++) {
 8009498:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800949c:	3301      	adds	r3, #1
 800949e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80094a2:	e78b      	b.n	80093bc <_ZN27positionEstimatorModelClass4stepEv+0x216c>
      }
    }

    EKFCorrector_correctStateAndCov(imvec, rtDW.P_f, Pyy, tmp, dHdx_3, dHdx_0);
 80094a4:	1d3b      	adds	r3, r7, #4
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f503 725c 	add.w	r2, r3, #880	; 0x370
 80094ac:	f507 6602 	add.w	r6, r7, #2080	; 0x820
 80094b0:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 80094b4:	1d38      	adds	r0, r7, #4
 80094b6:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80094ba:	9302      	str	r3, [sp, #8]
 80094bc:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80094c0:	9301      	str	r3, [sp, #4]
 80094c2:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	4633      	mov	r3, r6
 80094ca:	6800      	ldr	r0, [r0, #0]
 80094cc:	f7fd f80e 	bl	80064ec <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_>
    for (i = 0; i < 6; i++) {
 80094d0:	2300      	movs	r3, #0
 80094d2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80094d6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80094da:	2b05      	cmp	r3, #5
 80094dc:	dc16      	bgt.n	800950c <_ZN27positionEstimatorModelClass4stepEv+0x22bc>
      rtDW.xNew_g[i] = imvec[i];
 80094de:	f507 62e6 	add.w	r2, r7, #1840	; 0x730
 80094e2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	4413      	add	r3, r2
 80094ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ee:	1d39      	adds	r1, r7, #4
 80094f0:	6808      	ldr	r0, [r1, #0]
 80094f2:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 80094f6:	3168      	adds	r1, #104	; 0x68
 80094f8:	00c9      	lsls	r1, r1, #3
 80094fa:	4401      	add	r1, r0
 80094fc:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 6; i++) {
 8009500:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009504:	3301      	adds	r3, #1
 8009506:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800950a:	e7e4      	b.n	80094d6 <_ZN27positionEstimatorModelClass4stepEv+0x2286>
    }

    // DataStoreWrite: '<S14>/Data Store WriteP'
    for (i = 0; i < 36; i++) {
 800950c:	2300      	movs	r3, #0
 800950e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009512:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009516:	2b23      	cmp	r3, #35	; 0x23
 8009518:	dc18      	bgt.n	800954c <_ZN27positionEstimatorModelClass4stepEv+0x22fc>
      rtDW.P_n_c[i] = rtDW.P_f[i];
 800951a:	1d3b      	adds	r3, r7, #4
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009522:	336e      	adds	r3, #110	; 0x6e
 8009524:	00db      	lsls	r3, r3, #3
 8009526:	4413      	add	r3, r2
 8009528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952c:	1d39      	adds	r1, r7, #4
 800952e:	6808      	ldr	r0, [r1, #0]
 8009530:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 8009534:	f501 718c 	add.w	r1, r1, #280	; 0x118
 8009538:	00c9      	lsls	r1, r1, #3
 800953a:	4401      	add	r1, r0
 800953c:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 36; i++) {
 8009540:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009544:	3301      	adds	r3, #1
 8009546:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800954a:	e7e2      	b.n	8009512 <_ZN27positionEstimatorModelClass4stepEv+0x22c2>
    }

    // End of DataStoreWrite: '<S14>/Data Store WriteP'

    // DataStoreWrite: '<S14>/Data Store WriteX'
    for (i = 0; i < 6; i++) {
 800954c:	2300      	movs	r3, #0
 800954e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009552:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009556:	2b05      	cmp	r3, #5
 8009558:	dc18      	bgt.n	800958c <_ZN27positionEstimatorModelClass4stepEv+0x233c>
      rtDW.x_p[i] = rtDW.xNew_g[i];
 800955a:	1d3b      	adds	r3, r7, #4
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009562:	3368      	adds	r3, #104	; 0x68
 8009564:	00db      	lsls	r3, r3, #3
 8009566:	4413      	add	r3, r2
 8009568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956c:	1d39      	adds	r1, r7, #4
 800956e:	6808      	ldr	r0, [r1, #0]
 8009570:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 8009574:	f501 719e 	add.w	r1, r1, #316	; 0x13c
 8009578:	00c9      	lsls	r1, r1, #3
 800957a:	4401      	add	r1, r0
 800957c:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 6; i++) {
 8009580:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009584:	3301      	adds	r3, #1
 8009586:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800958a:	e7e2      	b.n	8009552 <_ZN27positionEstimatorModelClass4stepEv+0x2302>

  // End of Outputs for SubSystem: '<S2>/Correct2'

  // Outputs for Atomic SubSystem: '<S2>/Output'
  // DataStoreRead: '<S15>/Data Store Read'
  for (i = 0; i < 6; i++) {
 800958c:	2300      	movs	r3, #0
 800958e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009592:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009596:	2b05      	cmp	r3, #5
 8009598:	dc18      	bgt.n	80095cc <_ZN27positionEstimatorModelClass4stepEv+0x237c>
    rtDW.DataStoreRead[i] = rtDW.x_p[i];
 800959a:	1d3b      	adds	r3, r7, #4
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80095a2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80095a6:	00db      	lsls	r3, r3, #3
 80095a8:	4413      	add	r3, r2
 80095aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ae:	1d39      	adds	r1, r7, #4
 80095b0:	6808      	ldr	r0, [r1, #0]
 80095b2:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 80095b6:	3134      	adds	r1, #52	; 0x34
 80095b8:	00c9      	lsls	r1, r1, #3
 80095ba:	4401      	add	r1, r0
 80095bc:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 6; i++) {
 80095c0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80095c4:	3301      	adds	r3, #1
 80095c6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80095ca:	e7e2      	b.n	8009592 <_ZN27positionEstimatorModelClass4stepEv+0x2342>
  }

  // End of DataStoreRead: '<S15>/Data Store Read'

  // DataStoreRead: '<S15>/Data Store Read1'
  for (i = 0; i < 36; i++) {
 80095cc:	2300      	movs	r3, #0
 80095ce:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80095d2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80095d6:	2b23      	cmp	r3, #35	; 0x23
 80095d8:	dc1a      	bgt.n	8009610 <_ZN27positionEstimatorModelClass4stepEv+0x23c0>
    rtDW.DataStoreRead1[i] = rtDW.P_n_c[i];
 80095da:	1d3b      	adds	r3, r7, #4
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80095e2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80095e6:	00db      	lsls	r3, r3, #3
 80095e8:	4413      	add	r3, r2
 80095ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ee:	1d39      	adds	r1, r7, #4
 80095f0:	6808      	ldr	r0, [r1, #0]
 80095f2:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 80095f6:	313a      	adds	r1, #58	; 0x3a
 80095f8:	00c9      	lsls	r1, r1, #3
 80095fa:	4401      	add	r1, r0
 80095fc:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 36; i++) {
 8009600:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009604:	3301      	adds	r3, #1
 8009606:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800960a:	e7e2      	b.n	80095d2 <_ZN27positionEstimatorModelClass4stepEv+0x2382>
 800960c:	20000290 	.word	0x20000290
  }

  // End of DataStoreRead: '<S15>/Data Store Read1'

  // Inport: '<S15>/uBlockOrdering'
  rtDW.uBlockOrdering = rtDW.blockOrdering;
 8009610:	1d3b      	adds	r3, r7, #4
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f893 2c43 	ldrb.w	r2, [r3, #3139]	; 0xc43
 8009618:	1d3b      	adds	r3, r7, #4
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f883 2c42 	strb.w	r2, [r3, #3138]	; 0xc42

  // End of Outputs for SubSystem: '<S2>/Output'

  // Outport: '<Root>/estiX'
  rtY.estiX = rtDW.DataStoreRead[0];
 8009620:	1d3b      	adds	r3, r7, #4
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 8009628:	1d39      	adds	r1, r7, #4
 800962a:	6809      	ldr	r1, [r1, #0]
 800962c:	f501 614d 	add.w	r1, r1, #3280	; 0xcd0
 8009630:	e9c1 2300 	strd	r2, r3, [r1]

  // Outport: '<Root>/estiY'
  rtY.estiY = rtDW.DataStoreRead[1];
 8009634:	1d3b      	adds	r3, r7, #4
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 800963c:	1d39      	adds	r1, r7, #4
 800963e:	6809      	ldr	r1, [r1, #0]
 8009640:	f601 41d8 	addw	r1, r1, #3288	; 0xcd8
 8009644:	e9c1 2300 	strd	r2, r3, [r1]

  // Gain: '<Root>/NED_convert' incorporates:
  //   Inport: '<Root>/baroZ'

  rtDW.NED_convert = rtP.NED_convert_Gain * rtU.baroZ;
 8009648:	4bad      	ldr	r3, [pc, #692]	; (8009900 <_ZN27positionEstimatorModelClass4stepEv+0x26b0>)
 800964a:	e9d3 0176 	ldrd	r0, r1, [r3, #472]	; 0x1d8
 800964e:	1d3b      	adds	r3, r7, #4
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f603 43a8 	addw	r3, r3, #3240	; 0xca8
 8009656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965a:	f7f6 ffd5 	bl	8000608 <__aeabi_dmul>
 800965e:	4602      	mov	r2, r0
 8009660:	460b      	mov	r3, r1
 8009662:	1d39      	adds	r1, r7, #4
 8009664:	6809      	ldr	r1, [r1, #0]
 8009666:	f501 6137 	add.w	r1, r1, #2928	; 0xb70
 800966a:	e9c1 2300 	strd	r2, r3, [r1]

  // Sum: '<S20>/Sum' incorporates:
  //   Inport: '<Root>/HOME_lla'
  //   Inport: '<Root>/alt'

  rtDW.alt = rtU.alt + rtU.HOME_lla[2];
 800966e:	1d3b      	adds	r3, r7, #4
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f603 4388 	addw	r3, r3, #3208	; 0xc88
 8009676:	e9d3 0100 	ldrd	r0, r1, [r3]
 800967a:	1d3b      	adds	r3, r7, #4
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f503 634c 	add.w	r3, r3, #3264	; 0xcc0
 8009682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009686:	f7f6 fe09 	bl	800029c <__adddf3>
 800968a:	4602      	mov	r2, r0
 800968c:	460b      	mov	r3, r1
 800968e:	1d39      	adds	r1, r7, #4
 8009690:	6809      	ldr	r1, [r1, #0]
 8009692:	f601 3178 	addw	r1, r1, #2936	; 0xb78
 8009696:	e9c1 2300 	strd	r2, r3, [r1]

  // UnaryMinus: '<S20>/Ze2height'
  rtDW.Pz = -rtDW.alt;
 800969a:	1d3b      	adds	r3, r7, #4
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f603 3378 	addw	r3, r3, #2936	; 0xb78
 80096a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a6:	4614      	mov	r4, r2
 80096a8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80096ac:	1d3b      	adds	r3, r7, #4
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f503 6338 	add.w	r3, r3, #2944	; 0xb80
 80096b4:	e9c3 4500 	strd	r4, r5, [r3]

  // DataTypeConversion: '<S1>/DataTypeConversion_Enable1' incorporates:
  //   Inport: '<Root>/AhrsFlag'

  rtDW.DataTypeConversion_Enable1_a = (rtU.AhrsFlag != 0.0);
 80096b8:	1d3b      	adds	r3, r7, #4
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 80096c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096c4:	2301      	movs	r3, #1
 80096c6:	461c      	mov	r4, r3
 80096c8:	f04f 0200 	mov.w	r2, #0
 80096cc:	f04f 0300 	mov.w	r3, #0
 80096d0:	f7f7 fa02 	bl	8000ad8 <__aeabi_dcmpeq>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d001      	beq.n	80096de <_ZN27positionEstimatorModelClass4stepEv+0x248e>
 80096da:	2300      	movs	r3, #0
 80096dc:	461c      	mov	r4, r3
 80096de:	b2e3      	uxtb	r3, r4
 80096e0:	461a      	mov	r2, r3
 80096e2:	1d3b      	adds	r3, r7, #4
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f883 2c40 	strb.w	r2, [r3, #3136]	; 0xc40

  // Outputs for Enabled SubSystem: '<S1>/Correct1' incorporates:
  //   EnablePort: '<S4>/Enable'

  if (rtDW.DataTypeConversion_Enable1_a) {
 80096ea:	1d3b      	adds	r3, r7, #4
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f893 3c40 	ldrb.w	r3, [r3, #3136]	; 0xc40
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 83ea 	beq.w	8009ecc <_ZN27positionEstimatorModelClass4stepEv+0x2c7c>
    // DataStoreRead: '<S4>/Data Store ReadX'
    rtDW.DataStoreReadX_o[0] = rtDW.x[0];
 80096f8:	1d3b      	adds	r3, r7, #4
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 8009700:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009704:	1d3a      	adds	r2, r7, #4
 8009706:	6812      	ldr	r2, [r2, #0]
 8009708:	f502 62fd 	add.w	r2, r2, #2024	; 0x7e8
 800970c:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_o[1] = rtDW.x[1];
 8009710:	1d3b      	adds	r3, r7, #4
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8009718:	e9d3 3400 	ldrd	r3, r4, [r3]
 800971c:	1d3a      	adds	r2, r7, #4
 800971e:	6812      	ldr	r2, [r2, #0]
 8009720:	f502 62fe 	add.w	r2, r2, #2032	; 0x7f0
 8009724:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_o[2] = rtDW.x[2];
 8009728:	1d3b      	adds	r3, r7, #4
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 8009730:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009734:	1d3a      	adds	r2, r7, #4
 8009736:	6812      	ldr	r2, [r2, #0]
 8009738:	f502 62ff 	add.w	r2, r2, #2040	; 0x7f8
 800973c:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S4>/Correct' incorporates:
    //   Constant: '<S1>/BlockOrdering'

    rtDW.blockOrdering_k = rtP.BlockOrdering_Value_b;
 8009740:	4b6f      	ldr	r3, [pc, #444]	; (8009900 <_ZN27positionEstimatorModelClass4stepEv+0x26b0>)
 8009742:	f893 23e6 	ldrb.w	r2, [r3, #998]	; 0x3e6
 8009746:	1d3b      	adds	r3, r7, #4
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f883 2c48 	strb.w	r2, [r3, #3144]	; 0xc48
    blockOrdering = rtDW.blockOrdering_k;
 800974e:	1d3b      	adds	r3, r7, #4
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f893 3c48 	ldrb.w	r3, [r3, #3144]	; 0xc48
 8009756:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering_k = blockOrdering;
 800975a:	1d3b      	adds	r3, r7, #4
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 8009762:	f883 2c48 	strb.w	r2, [r3, #3144]	; 0xc48
    for (i = 0; i < 9; i++) {
 8009766:	2300      	movs	r3, #0
 8009768:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800976c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009770:	2b08      	cmp	r3, #8
 8009772:	dc35      	bgt.n	80097e0 <_ZN27positionEstimatorModelClass4stepEv+0x2590>
      // DataStoreRead: '<S4>/Data Store ReadP'
      rtDW.P_g[i] = rtDW.P_i_m[i];
 8009774:	1d3b      	adds	r3, r7, #4
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800977c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8009780:	00db      	lsls	r3, r3, #3
 8009782:	4413      	add	r3, r2
 8009784:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009788:	1d3a      	adds	r2, r7, #4
 800978a:	6811      	ldr	r1, [r2, #0]
 800978c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009790:	f202 1203 	addw	r2, r2, #259	; 0x103
 8009794:	00d2      	lsls	r2, r2, #3
 8009796:	440a      	add	r2, r1
 8009798:	e9c2 3400 	strd	r3, r4, [r2]

      // MATLAB Function: '<S4>/Correct'
      u = rtDW.P_g[i];
 800979c:	1d3b      	adds	r3, r7, #4
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80097a4:	f203 1303 	addw	r3, r3, #259	; 0x103
 80097a8:	00db      	lsls	r3, r3, #3
 80097aa:	4413      	add	r3, r2
 80097ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80097b0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80097b4:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.P_g[i] = u;
 80097b8:	1d3b      	adds	r3, r7, #4
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80097c0:	f203 1303 	addw	r3, r3, #259	; 0x103
 80097c4:	00db      	lsls	r3, r3, #3
 80097c6:	441a      	add	r2, r3
 80097c8:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80097cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80097d0:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 80097d4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80097d8:	3301      	adds	r3, #1
 80097da:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80097de:	e7c5      	b.n	800976c <_ZN27positionEstimatorModelClass4stepEv+0x251c>

    // MATLAB Function: '<S4>/Correct' incorporates:
    //   Constant: '<S1>/R1'
    //   Inport: '<Root>/az'

    for (r1 = 0; r1 < 3; r1++) {
 80097e0:	2300      	movs	r3, #0
 80097e2:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80097e6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	f300 808c 	bgt.w	8009908 <_ZN27positionEstimatorModelClass4stepEv+0x26b8>
      imvec_0[2] = rtDW.DataStoreReadX_o[2];
 80097f0:	1d3b      	adds	r3, r7, #4
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 80097f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80097fc:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8009800:	e9c2 3404 	strd	r3, r4, [r2, #16]
      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_o[r1]);
 8009804:	1d3b      	adds	r3, r7, #4
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800980c:	33fd      	adds	r3, #253	; 0xfd
 800980e:	00db      	lsls	r3, r3, #3
 8009810:	4413      	add	r3, r2
 8009812:	ed93 7b00 	vldr	d7, [r3]
 8009816:	eeb0 0a47 	vmov.f32	s0, s14
 800981a:	eef0 0a67 	vmov.f32	s1, s15
 800981e:	f7fc faae 	bl	8005d7e <_ZSt3absd>
 8009822:	ec51 0b10 	vmov	r0, r1, d0
 8009826:	f04f 0200 	mov.w	r2, #0
 800982a:	4b36      	ldr	r3, [pc, #216]	; (8009904 <_ZN27positionEstimatorModelClass4stepEv+0x26b4>)
 800982c:	f7f6 feec 	bl	8000608 <__aeabi_dmul>
 8009830:	4603      	mov	r3, r0
 8009832:	460c      	mov	r4, r1
 8009834:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8009838:	e9c2 3400 	strd	r3, r4, [r2]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 800983c:	f04f 0200 	mov.w	r2, #0
 8009840:	4b30      	ldr	r3, [pc, #192]	; (8009904 <_ZN27positionEstimatorModelClass4stepEv+0x26b4>)
 8009842:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8009846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800984a:	f7f7 f94f 	bl	8000aec <__aeabi_dcmplt>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d108      	bne.n	8009866 <_ZN27positionEstimatorModelClass4stepEv+0x2616>
 8009854:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009858:	ed93 0b00 	vldr	d0, [r3]
 800985c:	f7fc fb52 	bl	8005f04 <rtIsNaN>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d001      	beq.n	800986a <_ZN27positionEstimatorModelClass4stepEv+0x261a>
 8009866:	2301      	movs	r3, #1
 8009868:	e000      	b.n	800986c <_ZN27positionEstimatorModelClass4stepEv+0x261c>
 800986a:	2300      	movs	r3, #0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d006      	beq.n	800987e <_ZN27positionEstimatorModelClass4stepEv+0x262e>
        epsilon = 1.4901161193847656E-8;
 8009870:	f04f 0300 	mov.w	r3, #0
 8009874:	4c23      	ldr	r4, [pc, #140]	; (8009904 <_ZN27positionEstimatorModelClass4stepEv+0x26b4>)
 8009876:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800987a:	e9c2 3400 	strd	r3, r4, [r2]
      }

      imvec_0[r1] = rtDW.DataStoreReadX_o[r1] + epsilon;
 800987e:	1d3b      	adds	r3, r7, #4
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009886:	33fd      	adds	r3, #253	; 0xfd
 8009888:	00db      	lsls	r3, r3, #3
 800988a:	4413      	add	r3, r2
 800988c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009890:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009898:	f7f6 fd00 	bl	800029c <__adddf3>
 800989c:	4603      	mov	r3, r0
 800989e:	460c      	mov	r4, r1
 80098a0:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 80098a4:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80098a8:	00d2      	lsls	r2, r2, #3
 80098aa:	440a      	add	r2, r1
 80098ac:	e9c2 3400 	strd	r3, r4, [r2]
      dHdx_1[r1] = (imvec_0[2] - rtDW.DataStoreReadX_o[2]) / epsilon;
 80098b0:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80098b4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80098b8:	1d3b      	adds	r3, r7, #4
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 80098c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80098c4:	461a      	mov	r2, r3
 80098c6:	4623      	mov	r3, r4
 80098c8:	f7f6 fce6 	bl	8000298 <__aeabi_dsub>
 80098cc:	4603      	mov	r3, r0
 80098ce:	460c      	mov	r4, r1
 80098d0:	4618      	mov	r0, r3
 80098d2:	4621      	mov	r1, r4
 80098d4:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80098d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098dc:	f7f6 ffbe 	bl	800085c <__aeabi_ddiv>
 80098e0:	4603      	mov	r3, r0
 80098e2:	460c      	mov	r4, r1
 80098e4:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 80098e8:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80098ec:	00d2      	lsls	r2, r2, #3
 80098ee:	440a      	add	r2, r1
 80098f0:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 80098f4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80098f8:	3301      	adds	r3, #1
 80098fa:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80098fe:	e772      	b.n	80097e6 <_ZN27positionEstimatorModelClass4stepEv+0x2596>
 8009900:	20000290 	.word	0x20000290
 8009904:	3e500000 	.word	0x3e500000
    }

    u = 0.0;
 8009908:	f04f 0300 	mov.w	r3, #0
 800990c:	f04f 0400 	mov.w	r4, #0
 8009910:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009914:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 8009918:	2300      	movs	r3, #0
 800991a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800991e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009922:	2b02      	cmp	r3, #2
 8009924:	f300 808b 	bgt.w	8009a3e <_ZN27positionEstimatorModelClass4stepEv+0x27ee>
      a22 = rtDW.P_g[3 * r1] * dHdx_1[0];
 8009928:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800992c:	4613      	mov	r3, r2
 800992e:	005b      	lsls	r3, r3, #1
 8009930:	4413      	add	r3, r2
 8009932:	1d3a      	adds	r2, r7, #4
 8009934:	6812      	ldr	r2, [r2, #0]
 8009936:	f203 1303 	addw	r3, r3, #259	; 0x103
 800993a:	00db      	lsls	r3, r3, #3
 800993c:	4413      	add	r3, r2
 800993e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009942:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009946:	e9d3 3400 	ldrd	r3, r4, [r3]
 800994a:	461a      	mov	r2, r3
 800994c:	4623      	mov	r3, r4
 800994e:	f7f6 fe5b 	bl	8000608 <__aeabi_dmul>
 8009952:	4603      	mov	r3, r0
 8009954:	460c      	mov	r4, r1
 8009956:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800995a:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_g[3 * r1 + 1] * dHdx_1[1];
 800995e:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009962:	4613      	mov	r3, r2
 8009964:	005b      	lsls	r3, r3, #1
 8009966:	4413      	add	r3, r2
 8009968:	3301      	adds	r3, #1
 800996a:	1d3a      	adds	r2, r7, #4
 800996c:	6812      	ldr	r2, [r2, #0]
 800996e:	f203 1303 	addw	r3, r3, #259	; 0x103
 8009972:	00db      	lsls	r3, r3, #3
 8009974:	4413      	add	r3, r2
 8009976:	e9d3 0100 	ldrd	r0, r1, [r3]
 800997a:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800997e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8009982:	461a      	mov	r2, r3
 8009984:	4623      	mov	r3, r4
 8009986:	f7f6 fe3f 	bl	8000608 <__aeabi_dmul>
 800998a:	4603      	mov	r3, r0
 800998c:	460c      	mov	r4, r1
 800998e:	461a      	mov	r2, r3
 8009990:	4623      	mov	r3, r4
 8009992:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 8009996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800999a:	f7f6 fc7f 	bl	800029c <__adddf3>
 800999e:	4603      	mov	r3, r0
 80099a0:	460c      	mov	r4, r1
 80099a2:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 80099a6:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_g[3 * r1 + 2] * dHdx_1[2];
 80099aa:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80099ae:	4613      	mov	r3, r2
 80099b0:	005b      	lsls	r3, r3, #1
 80099b2:	4413      	add	r3, r2
 80099b4:	3302      	adds	r3, #2
 80099b6:	1d3a      	adds	r2, r7, #4
 80099b8:	6812      	ldr	r2, [r2, #0]
 80099ba:	f203 1303 	addw	r3, r3, #259	; 0x103
 80099be:	00db      	lsls	r3, r3, #3
 80099c0:	4413      	add	r3, r2
 80099c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099c6:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80099ca:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80099ce:	461a      	mov	r2, r3
 80099d0:	4623      	mov	r3, r4
 80099d2:	f7f6 fe19 	bl	8000608 <__aeabi_dmul>
 80099d6:	4603      	mov	r3, r0
 80099d8:	460c      	mov	r4, r1
 80099da:	461a      	mov	r2, r3
 80099dc:	4623      	mov	r3, r4
 80099de:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 80099e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099e6:	f7f6 fc59 	bl	800029c <__adddf3>
 80099ea:	4603      	mov	r3, r0
 80099ec:	460c      	mov	r4, r1
 80099ee:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 80099f2:	e9c2 3400 	strd	r3, r4, [r2]
      u += a22 * dHdx_1[r1];
 80099f6:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 80099fa:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	4413      	add	r3, r2
 8009a02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a06:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0e:	f7f6 fdfb 	bl	8000608 <__aeabi_dmul>
 8009a12:	4603      	mov	r3, r0
 8009a14:	460c      	mov	r4, r1
 8009a16:	461a      	mov	r2, r3
 8009a18:	4623      	mov	r3, r4
 8009a1a:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a22:	f7f6 fc3b 	bl	800029c <__adddf3>
 8009a26:	4603      	mov	r3, r0
 8009a28:	460c      	mov	r4, r1
 8009a2a:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009a2e:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 8009a32:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009a36:	3301      	adds	r3, #1
 8009a38:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009a3c:	e76f      	b.n	800991e <_ZN27positionEstimatorModelClass4stepEv+0x26ce>
    }

    epsilon = u + rtP.R1_Value_j;
 8009a3e:	4b9b      	ldr	r3, [pc, #620]	; (8009cac <_ZN27positionEstimatorModelClass4stepEv+0x2a5c>)
 8009a40:	e9d3 3480 	ldrd	r3, r4, [r3, #512]	; 0x200
 8009a44:	461a      	mov	r2, r3
 8009a46:	4623      	mov	r3, r4
 8009a48:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009a4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a50:	f7f6 fc24 	bl	800029c <__adddf3>
 8009a54:	4603      	mov	r3, r0
 8009a56:	460c      	mov	r4, r1
 8009a58:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8009a5c:	e9c2 3400 	strd	r3, r4, [r2]
    a22 = rtU.az - rtDW.DataStoreReadX_o[2];
 8009a60:	1d3b      	adds	r3, r7, #4
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f603 4368 	addw	r3, r3, #3176	; 0xc68
 8009a68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a6c:	1d3b      	adds	r3, r7, #4
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8009a74:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009a78:	461a      	mov	r2, r3
 8009a7a:	4623      	mov	r3, r4
 8009a7c:	f7f6 fc0c 	bl	8000298 <__aeabi_dsub>
 8009a80:	4603      	mov	r3, r0
 8009a82:	460c      	mov	r4, r1
 8009a84:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 8009a88:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009a92:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	f300 80a7 	bgt.w	8009bea <_ZN27positionEstimatorModelClass4stepEv+0x299a>
      u = rtDW.P_g[i] * dHdx_1[0];
 8009a9c:	1d3b      	adds	r3, r7, #4
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009aa4:	f203 1303 	addw	r3, r3, #259	; 0x103
 8009aa8:	00db      	lsls	r3, r3, #3
 8009aaa:	4413      	add	r3, r2
 8009aac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009ab0:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009ab4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ab8:	461a      	mov	r2, r3
 8009aba:	4623      	mov	r3, r4
 8009abc:	f7f6 fda4 	bl	8000608 <__aeabi_dmul>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009ac8:	e9c2 3400 	strd	r3, r4, [r2]
      u += rtDW.P_g[i + 3] * dHdx_1[1];
 8009acc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009ad0:	3303      	adds	r3, #3
 8009ad2:	1d3a      	adds	r2, r7, #4
 8009ad4:	6812      	ldr	r2, [r2, #0]
 8009ad6:	f203 1303 	addw	r3, r3, #259	; 0x103
 8009ada:	00db      	lsls	r3, r3, #3
 8009adc:	4413      	add	r3, r2
 8009ade:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009ae2:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009ae6:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8009aea:	461a      	mov	r2, r3
 8009aec:	4623      	mov	r3, r4
 8009aee:	f7f6 fd8b 	bl	8000608 <__aeabi_dmul>
 8009af2:	4603      	mov	r3, r0
 8009af4:	460c      	mov	r4, r1
 8009af6:	461a      	mov	r2, r3
 8009af8:	4623      	mov	r3, r4
 8009afa:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009afe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b02:	f7f6 fbcb 	bl	800029c <__adddf3>
 8009b06:	4603      	mov	r3, r0
 8009b08:	460c      	mov	r4, r1
 8009b0a:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009b0e:	e9c2 3400 	strd	r3, r4, [r2]
      u += rtDW.P_g[i + 6] * dHdx_1[2];
 8009b12:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009b16:	3306      	adds	r3, #6
 8009b18:	1d3a      	adds	r2, r7, #4
 8009b1a:	6812      	ldr	r2, [r2, #0]
 8009b1c:	f203 1303 	addw	r3, r3, #259	; 0x103
 8009b20:	00db      	lsls	r3, r3, #3
 8009b22:	4413      	add	r3, r2
 8009b24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b28:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009b2c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8009b30:	461a      	mov	r2, r3
 8009b32:	4623      	mov	r3, r4
 8009b34:	f7f6 fd68 	bl	8000608 <__aeabi_dmul>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	4623      	mov	r3, r4
 8009b40:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009b44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b48:	f7f6 fba8 	bl	800029c <__adddf3>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	460c      	mov	r4, r1
 8009b50:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009b54:	e9c2 3400 	strd	r3, r4, [r2]
      u /= epsilon;
 8009b58:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b60:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009b64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b68:	f7f6 fe78 	bl	800085c <__aeabi_ddiv>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	460c      	mov	r4, r1
 8009b70:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009b74:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.xNew_o[i] = u * a22 + rtDW.DataStoreReadX_o[i];
 8009b78:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b80:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b88:	f7f6 fd3e 	bl	8000608 <__aeabi_dmul>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	460c      	mov	r4, r1
 8009b90:	4618      	mov	r0, r3
 8009b92:	4621      	mov	r1, r4
 8009b94:	1d3b      	adds	r3, r7, #4
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009b9c:	33fd      	adds	r3, #253	; 0xfd
 8009b9e:	00db      	lsls	r3, r3, #3
 8009ba0:	4413      	add	r3, r2
 8009ba2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	4623      	mov	r3, r4
 8009baa:	f7f6 fb77 	bl	800029c <__adddf3>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	460c      	mov	r4, r1
 8009bb2:	1d3a      	adds	r2, r7, #4
 8009bb4:	6811      	ldr	r1, [r2, #0]
 8009bb6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009bba:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009bbe:	00d2      	lsls	r2, r2, #3
 8009bc0:	440a      	add	r2, r1
 8009bc2:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_0[i] = u;
 8009bc6:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8009bca:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009bce:	00db      	lsls	r3, r3, #3
 8009bd0:	441a      	add	r2, r3
 8009bd2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009bd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009bda:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 8009bde:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009be2:	3301      	adds	r3, #1
 8009be4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009be8:	e753      	b.n	8009a92 <_ZN27positionEstimatorModelClass4stepEv+0x2842>
    }

    for (r1 = 0; r1 < 3; r1++) {
 8009bea:	2300      	movs	r3, #0
 8009bec:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009bf0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	dc5b      	bgt.n	8009cb0 <_ZN27positionEstimatorModelClass4stepEv+0x2a60>
      u = dHdx_1[r1];
 8009bf8:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 8009bfc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009c00:	00db      	lsls	r3, r3, #3
 8009c02:	4413      	add	r3, r2
 8009c04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c08:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009c0c:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1] = imvec_0[0] * u;
 8009c10:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8009c14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c18:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	005b      	lsls	r3, r3, #1
 8009c20:	189d      	adds	r5, r3, r2
 8009c22:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2a:	f7f6 fced 	bl	8000608 <__aeabi_dmul>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	460c      	mov	r4, r1
 8009c32:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 8009c36:	00ea      	lsls	r2, r5, #3
 8009c38:	440a      	add	r2, r1
 8009c3a:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1 + 1] = imvec_0[1] * u;
 8009c3e:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8009c42:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8009c46:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	005b      	lsls	r3, r3, #1
 8009c4e:	4413      	add	r3, r2
 8009c50:	1c5d      	adds	r5, r3, #1
 8009c52:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5a:	f7f6 fcd5 	bl	8000608 <__aeabi_dmul>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	460c      	mov	r4, r1
 8009c62:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 8009c66:	00ea      	lsls	r2, r5, #3
 8009c68:	440a      	add	r2, r1
 8009c6a:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1 + 2] = imvec_0[2] * u;
 8009c6e:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8009c72:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8009c76:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	005b      	lsls	r3, r3, #1
 8009c7e:	4413      	add	r3, r2
 8009c80:	1c9d      	adds	r5, r3, #2
 8009c82:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8a:	f7f6 fcbd 	bl	8000608 <__aeabi_dmul>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	460c      	mov	r4, r1
 8009c92:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 8009c96:	00ea      	lsls	r2, r5, #3
 8009c98:	440a      	add	r2, r1
 8009c9a:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 8009c9e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009ca8:	e7a2      	b.n	8009bf0 <_ZN27positionEstimatorModelClass4stepEv+0x29a0>
 8009caa:	bf00      	nop
 8009cac:	20000290 	.word	0x20000290
    }

    for (r1 = 0; r1 < 3; r1++) {
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009cb6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	f300 80af 	bgt.w	8009e1e <_ZN27positionEstimatorModelClass4stepEv+0x2bce>
      for (i = 0; i < 3; i++) {
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009cc6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	f300 80a1 	bgt.w	8009e12 <_ZN27positionEstimatorModelClass4stepEv+0x2bc2>
        u = rtDW.P_g[3 * r1] * imvec_1[i];
 8009cd0:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	005b      	lsls	r3, r3, #1
 8009cd8:	4413      	add	r3, r2
 8009cda:	1d3a      	adds	r2, r7, #4
 8009cdc:	6812      	ldr	r2, [r2, #0]
 8009cde:	f203 1303 	addw	r3, r3, #259	; 0x103
 8009ce2:	00db      	lsls	r3, r3, #3
 8009ce4:	4413      	add	r3, r2
 8009ce6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009cea:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009cee:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009cf2:	00db      	lsls	r3, r3, #3
 8009cf4:	4413      	add	r3, r2
 8009cf6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	4623      	mov	r3, r4
 8009cfe:	f7f6 fc83 	bl	8000608 <__aeabi_dmul>
 8009d02:	4603      	mov	r3, r0
 8009d04:	460c      	mov	r4, r1
 8009d06:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009d0a:	e9c2 3400 	strd	r3, r4, [r2]
        u += rtDW.P_g[3 * r1 + 1] * imvec_1[i + 3];
 8009d0e:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009d12:	4613      	mov	r3, r2
 8009d14:	005b      	lsls	r3, r3, #1
 8009d16:	4413      	add	r3, r2
 8009d18:	3301      	adds	r3, #1
 8009d1a:	1d3a      	adds	r2, r7, #4
 8009d1c:	6812      	ldr	r2, [r2, #0]
 8009d1e:	f203 1303 	addw	r3, r3, #259	; 0x103
 8009d22:	00db      	lsls	r3, r3, #3
 8009d24:	4413      	add	r3, r2
 8009d26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d2a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009d2e:	3303      	adds	r3, #3
 8009d30:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009d34:	00db      	lsls	r3, r3, #3
 8009d36:	4413      	add	r3, r2
 8009d38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	4623      	mov	r3, r4
 8009d40:	f7f6 fc62 	bl	8000608 <__aeabi_dmul>
 8009d44:	4603      	mov	r3, r0
 8009d46:	460c      	mov	r4, r1
 8009d48:	461a      	mov	r2, r3
 8009d4a:	4623      	mov	r3, r4
 8009d4c:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d54:	f7f6 faa2 	bl	800029c <__adddf3>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009d60:	e9c2 3400 	strd	r3, r4, [r2]
        u += rtDW.P_g[3 * r1 + 2] * imvec_1[i + 6];
 8009d64:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009d68:	4613      	mov	r3, r2
 8009d6a:	005b      	lsls	r3, r3, #1
 8009d6c:	4413      	add	r3, r2
 8009d6e:	3302      	adds	r3, #2
 8009d70:	1d3a      	adds	r2, r7, #4
 8009d72:	6812      	ldr	r2, [r2, #0]
 8009d74:	f203 1303 	addw	r3, r3, #259	; 0x103
 8009d78:	00db      	lsls	r3, r3, #3
 8009d7a:	4413      	add	r3, r2
 8009d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d80:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009d84:	3306      	adds	r3, #6
 8009d86:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009d8a:	00db      	lsls	r3, r3, #3
 8009d8c:	4413      	add	r3, r2
 8009d8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d92:	461a      	mov	r2, r3
 8009d94:	4623      	mov	r3, r4
 8009d96:	f7f6 fc37 	bl	8000608 <__aeabi_dmul>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	460c      	mov	r4, r1
 8009d9e:	461a      	mov	r2, r3
 8009da0:	4623      	mov	r3, r4
 8009da2:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009daa:	f7f6 fa77 	bl	800029c <__adddf3>
 8009dae:	4603      	mov	r3, r0
 8009db0:	460c      	mov	r4, r1
 8009db2:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009db6:	e9c2 3400 	strd	r3, r4, [r2]
        a[i + 3 * r1] = rtDW.P_g[3 * r1 + i] - u;
 8009dba:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	005b      	lsls	r3, r3, #1
 8009dc2:	441a      	add	r2, r3
 8009dc4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009dc8:	4413      	add	r3, r2
 8009dca:	1d3a      	adds	r2, r7, #4
 8009dcc:	6812      	ldr	r2, [r2, #0]
 8009dce:	f203 1303 	addw	r3, r3, #259	; 0x103
 8009dd2:	00db      	lsls	r3, r3, #3
 8009dd4:	4413      	add	r3, r2
 8009dd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009dda:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009dde:	4613      	mov	r3, r2
 8009de0:	005b      	lsls	r3, r3, #1
 8009de2:	441a      	add	r2, r3
 8009de4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009de8:	18d5      	adds	r5, r2, r3
 8009dea:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df2:	f7f6 fa51 	bl	8000298 <__aeabi_dsub>
 8009df6:	4603      	mov	r3, r0
 8009df8:	460c      	mov	r4, r1
 8009dfa:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8009dfe:	00ea      	lsls	r2, r5, #3
 8009e00:	440a      	add	r2, r1
 8009e02:	e9c2 3400 	strd	r3, r4, [r2]
      for (i = 0; i < 3; i++) {
 8009e06:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009e10:	e759      	b.n	8009cc6 <_ZN27positionEstimatorModelClass4stepEv+0x2a76>
    for (r1 = 0; r1 < 3; r1++) {
 8009e12:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009e16:	3301      	adds	r3, #1
 8009e18:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009e1c:	e74b      	b.n	8009cb6 <_ZN27positionEstimatorModelClass4stepEv+0x2a66>
      }
    }

    for (i = 0; i < 9; i++) {
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009e24:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009e28:	2b08      	cmp	r3, #8
 8009e2a:	dc2b      	bgt.n	8009e84 <_ZN27positionEstimatorModelClass4stepEv+0x2c34>
      rtDW.P_g[i] = a[i];
 8009e2c:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8009e30:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009e34:	00db      	lsls	r3, r3, #3
 8009e36:	4413      	add	r3, r2
 8009e38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e3c:	1d3a      	adds	r2, r7, #4
 8009e3e:	6811      	ldr	r1, [r2, #0]
 8009e40:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009e44:	f202 1203 	addw	r2, r2, #259	; 0x103
 8009e48:	00d2      	lsls	r2, r2, #3
 8009e4a:	440a      	add	r2, r1
 8009e4c:	e9c2 3400 	strd	r3, r4, [r2]

      // DataStoreWrite: '<S4>/Data Store WriteP'
      rtDW.P_i_m[i] = rtDW.P_g[i];
 8009e50:	1d3b      	adds	r3, r7, #4
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009e58:	f203 1303 	addw	r3, r3, #259	; 0x103
 8009e5c:	00db      	lsls	r3, r3, #3
 8009e5e:	4413      	add	r3, r2
 8009e60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e64:	1d3a      	adds	r2, r7, #4
 8009e66:	6811      	ldr	r1, [r2, #0]
 8009e68:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009e6c:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 8009e70:	00d2      	lsls	r2, r2, #3
 8009e72:	440a      	add	r2, r1
 8009e74:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 8009e78:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009e82:	e7cf      	b.n	8009e24 <_ZN27positionEstimatorModelClass4stepEv+0x2bd4>
    }

    // DataStoreWrite: '<S4>/Data Store WriteX'
    rtDW.x[0] = rtDW.xNew_o[0];
 8009e84:	1d3b      	adds	r3, r7, #4
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e90:	1d3a      	adds	r2, r7, #4
 8009e92:	6812      	ldr	r2, [r2, #0]
 8009e94:	f602 02a8 	addw	r2, r2, #2216	; 0x8a8
 8009e98:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[1] = rtDW.xNew_o[1];
 8009e9c:	1d3b      	adds	r3, r7, #4
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8009ea4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ea8:	1d3a      	adds	r2, r7, #4
 8009eaa:	6812      	ldr	r2, [r2, #0]
 8009eac:	f502 620b 	add.w	r2, r2, #2224	; 0x8b0
 8009eb0:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[2] = rtDW.xNew_o[2];
 8009eb4:	1d3b      	adds	r3, r7, #4
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8009ebc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ec0:	1d3a      	adds	r2, r7, #4
 8009ec2:	6812      	ldr	r2, [r2, #0]
 8009ec4:	f602 02b8 	addw	r2, r2, #2232	; 0x8b8
 8009ec8:	e9c2 3400 	strd	r3, r4, [r2]
  // End of Outputs for SubSystem: '<S1>/Correct1'

  // Outputs for Enabled SubSystem: '<S1>/Correct2' incorporates:
  //   EnablePort: '<S5>/Enable'

  if (rtDW.LogicalOperator) {
 8009ecc:	1d3b      	adds	r3, r7, #4
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f893 3c3f 	ldrb.w	r3, [r3, #3135]	; 0xc3f
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f000 83d9 	beq.w	800a68c <_ZN27positionEstimatorModelClass4stepEv+0x343c>
    // DataStoreRead: '<S5>/Data Store ReadX'
    rtDW.DataStoreReadX_m[0] = rtDW.x[0];
 8009eda:	1d3b      	adds	r3, r7, #4
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 8009ee2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ee6:	1d3a      	adds	r2, r7, #4
 8009ee8:	6812      	ldr	r2, [r2, #0]
 8009eea:	f502 62ee 	add.w	r2, r2, #1904	; 0x770
 8009eee:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_m[1] = rtDW.x[1];
 8009ef2:	1d3b      	adds	r3, r7, #4
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8009efa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009efe:	1d3a      	adds	r2, r7, #4
 8009f00:	6812      	ldr	r2, [r2, #0]
 8009f02:	f502 62ef 	add.w	r2, r2, #1912	; 0x778
 8009f06:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_m[2] = rtDW.x[2];
 8009f0a:	1d3b      	adds	r3, r7, #4
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 8009f12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f16:	1d3a      	adds	r2, r7, #4
 8009f18:	6812      	ldr	r2, [r2, #0]
 8009f1a:	f502 62f0 	add.w	r2, r2, #1920	; 0x780
 8009f1e:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S5>/Correct'
    rtDW.blockOrdering_n = rtDW.blockOrdering_k;
 8009f22:	1d3b      	adds	r3, r7, #4
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f893 2c48 	ldrb.w	r2, [r3, #3144]	; 0xc48
 8009f2a:	1d3b      	adds	r3, r7, #4
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f883 2c47 	strb.w	r2, [r3, #3143]	; 0xc47
    blockOrdering = rtDW.blockOrdering_n;
 8009f32:	1d3b      	adds	r3, r7, #4
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f893 3c47 	ldrb.w	r3, [r3, #3143]	; 0xc47
 8009f3a:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering_n = blockOrdering;
 8009f3e:	1d3b      	adds	r3, r7, #4
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 8009f46:	f883 2c47 	strb.w	r2, [r3, #3143]	; 0xc47
    for (i = 0; i < 9; i++) {
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009f50:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009f54:	2b08      	cmp	r3, #8
 8009f56:	dc32      	bgt.n	8009fbe <_ZN27positionEstimatorModelClass4stepEv+0x2d6e>
      // DataStoreRead: '<S5>/Data Store ReadP'
      rtDW.P_c[i] = rtDW.P_i_m[i];
 8009f58:	1d3b      	adds	r3, r7, #4
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009f60:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8009f64:	00db      	lsls	r3, r3, #3
 8009f66:	4413      	add	r3, r2
 8009f68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f6c:	1d3a      	adds	r2, r7, #4
 8009f6e:	6811      	ldr	r1, [r2, #0]
 8009f70:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009f74:	32f4      	adds	r2, #244	; 0xf4
 8009f76:	00d2      	lsls	r2, r2, #3
 8009f78:	440a      	add	r2, r1
 8009f7a:	e9c2 3400 	strd	r3, r4, [r2]

      // MATLAB Function: '<S5>/Correct'
      u = rtDW.P_c[i];
 8009f7e:	1d3b      	adds	r3, r7, #4
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009f86:	33f4      	adds	r3, #244	; 0xf4
 8009f88:	00db      	lsls	r3, r3, #3
 8009f8a:	4413      	add	r3, r2
 8009f8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f90:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009f94:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.P_c[i] = u;
 8009f98:	1d3b      	adds	r3, r7, #4
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009fa0:	33f4      	adds	r3, #244	; 0xf4
 8009fa2:	00db      	lsls	r3, r3, #3
 8009fa4:	441a      	add	r2, r3
 8009fa6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009faa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009fae:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 8009fb2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009fbc:	e7c8      	b.n	8009f50 <_ZN27positionEstimatorModelClass4stepEv+0x2d00>
    }

    // MATLAB Function: '<S5>/Correct' incorporates:
    //   Constant: '<S1>/R2'

    for (r1 = 0; r1 < 3; r1++) {
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009fc4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	f300 8088 	bgt.w	800a0de <_ZN27positionEstimatorModelClass4stepEv+0x2e8e>
      imvec_0[0] = rtDW.DataStoreReadX_m[0];
 8009fce:	1d3b      	adds	r3, r7, #4
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 8009fd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009fda:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8009fde:	e9c2 3400 	strd	r3, r4, [r2]
      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_m[r1]);
 8009fe2:	1d3b      	adds	r3, r7, #4
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009fea:	33ee      	adds	r3, #238	; 0xee
 8009fec:	00db      	lsls	r3, r3, #3
 8009fee:	4413      	add	r3, r2
 8009ff0:	ed93 7b00 	vldr	d7, [r3]
 8009ff4:	eeb0 0a47 	vmov.f32	s0, s14
 8009ff8:	eef0 0a67 	vmov.f32	s1, s15
 8009ffc:	f7fb febf 	bl	8005d7e <_ZSt3absd>
 800a000:	ec51 0b10 	vmov	r0, r1, d0
 800a004:	f04f 0200 	mov.w	r2, #0
 800a008:	4b81      	ldr	r3, [pc, #516]	; (800a210 <_ZN27positionEstimatorModelClass4stepEv+0x2fc0>)
 800a00a:	f7f6 fafd 	bl	8000608 <__aeabi_dmul>
 800a00e:	4603      	mov	r3, r0
 800a010:	460c      	mov	r4, r1
 800a012:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800a016:	e9c2 3400 	strd	r3, r4, [r2]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 800a01a:	f04f 0200 	mov.w	r2, #0
 800a01e:	4b7c      	ldr	r3, [pc, #496]	; (800a210 <_ZN27positionEstimatorModelClass4stepEv+0x2fc0>)
 800a020:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 800a024:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a028:	f7f6 fd60 	bl	8000aec <__aeabi_dcmplt>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d108      	bne.n	800a044 <_ZN27positionEstimatorModelClass4stepEv+0x2df4>
 800a032:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800a036:	ed93 0b00 	vldr	d0, [r3]
 800a03a:	f7fb ff63 	bl	8005f04 <rtIsNaN>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d001      	beq.n	800a048 <_ZN27positionEstimatorModelClass4stepEv+0x2df8>
 800a044:	2301      	movs	r3, #1
 800a046:	e000      	b.n	800a04a <_ZN27positionEstimatorModelClass4stepEv+0x2dfa>
 800a048:	2300      	movs	r3, #0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d006      	beq.n	800a05c <_ZN27positionEstimatorModelClass4stepEv+0x2e0c>
        epsilon = 1.4901161193847656E-8;
 800a04e:	f04f 0300 	mov.w	r3, #0
 800a052:	4c6f      	ldr	r4, [pc, #444]	; (800a210 <_ZN27positionEstimatorModelClass4stepEv+0x2fc0>)
 800a054:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800a058:	e9c2 3400 	strd	r3, r4, [r2]
      }

      imvec_0[r1] = rtDW.DataStoreReadX_m[r1] + epsilon;
 800a05c:	1d3b      	adds	r3, r7, #4
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a064:	33ee      	adds	r3, #238	; 0xee
 800a066:	00db      	lsls	r3, r3, #3
 800a068:	4413      	add	r3, r2
 800a06a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a06e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800a072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a076:	f7f6 f911 	bl	800029c <__adddf3>
 800a07a:	4603      	mov	r3, r0
 800a07c:	460c      	mov	r4, r1
 800a07e:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 800a082:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a086:	00d2      	lsls	r2, r2, #3
 800a088:	440a      	add	r2, r1
 800a08a:	e9c2 3400 	strd	r3, r4, [r2]
      dHdx_1[r1] = (imvec_0[0] - rtDW.DataStoreReadX_m[0]) / epsilon;
 800a08e:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800a092:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a096:	1d3b      	adds	r3, r7, #4
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 800a09e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	4623      	mov	r3, r4
 800a0a6:	f7f6 f8f7 	bl	8000298 <__aeabi_dsub>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	460c      	mov	r4, r1
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	4621      	mov	r1, r4
 800a0b2:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800a0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ba:	f7f6 fbcf 	bl	800085c <__aeabi_ddiv>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	460c      	mov	r4, r1
 800a0c2:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 800a0c6:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a0ca:	00d2      	lsls	r2, r2, #3
 800a0cc:	440a      	add	r2, r1
 800a0ce:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 800a0d2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a0dc:	e772      	b.n	8009fc4 <_ZN27positionEstimatorModelClass4stepEv+0x2d74>
    }

    u = 0.0;
 800a0de:	f04f 0300 	mov.w	r3, #0
 800a0e2:	f04f 0400 	mov.w	r4, #0
 800a0e6:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a0ea:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a0f4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	f300 808b 	bgt.w	800a214 <_ZN27positionEstimatorModelClass4stepEv+0x2fc4>
      a22 = rtDW.P_c[3 * r1] * dHdx_1[0];
 800a0fe:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a102:	4613      	mov	r3, r2
 800a104:	005b      	lsls	r3, r3, #1
 800a106:	4413      	add	r3, r2
 800a108:	1d3a      	adds	r2, r7, #4
 800a10a:	6812      	ldr	r2, [r2, #0]
 800a10c:	33f4      	adds	r3, #244	; 0xf4
 800a10e:	00db      	lsls	r3, r3, #3
 800a110:	4413      	add	r3, r2
 800a112:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a116:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a11a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a11e:	461a      	mov	r2, r3
 800a120:	4623      	mov	r3, r4
 800a122:	f7f6 fa71 	bl	8000608 <__aeabi_dmul>
 800a126:	4603      	mov	r3, r0
 800a128:	460c      	mov	r4, r1
 800a12a:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a12e:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_c[3 * r1 + 1] * dHdx_1[1];
 800a132:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a136:	4613      	mov	r3, r2
 800a138:	005b      	lsls	r3, r3, #1
 800a13a:	4413      	add	r3, r2
 800a13c:	3301      	adds	r3, #1
 800a13e:	1d3a      	adds	r2, r7, #4
 800a140:	6812      	ldr	r2, [r2, #0]
 800a142:	33f4      	adds	r3, #244	; 0xf4
 800a144:	00db      	lsls	r3, r3, #3
 800a146:	4413      	add	r3, r2
 800a148:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a14c:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a150:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800a154:	461a      	mov	r2, r3
 800a156:	4623      	mov	r3, r4
 800a158:	f7f6 fa56 	bl	8000608 <__aeabi_dmul>
 800a15c:	4603      	mov	r3, r0
 800a15e:	460c      	mov	r4, r1
 800a160:	461a      	mov	r2, r3
 800a162:	4623      	mov	r3, r4
 800a164:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800a168:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a16c:	f7f6 f896 	bl	800029c <__adddf3>
 800a170:	4603      	mov	r3, r0
 800a172:	460c      	mov	r4, r1
 800a174:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a178:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_c[3 * r1 + 2] * dHdx_1[2];
 800a17c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a180:	4613      	mov	r3, r2
 800a182:	005b      	lsls	r3, r3, #1
 800a184:	4413      	add	r3, r2
 800a186:	3302      	adds	r3, #2
 800a188:	1d3a      	adds	r2, r7, #4
 800a18a:	6812      	ldr	r2, [r2, #0]
 800a18c:	33f4      	adds	r3, #244	; 0xf4
 800a18e:	00db      	lsls	r3, r3, #3
 800a190:	4413      	add	r3, r2
 800a192:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a196:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a19a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	4623      	mov	r3, r4
 800a1a2:	f7f6 fa31 	bl	8000608 <__aeabi_dmul>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	4623      	mov	r3, r4
 800a1ae:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800a1b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1b6:	f7f6 f871 	bl	800029c <__adddf3>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	460c      	mov	r4, r1
 800a1be:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a1c2:	e9c2 3400 	strd	r3, r4, [r2]
      u += a22 * dHdx_1[r1];
 800a1c6:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800a1ca:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a1ce:	00db      	lsls	r3, r3, #3
 800a1d0:	4413      	add	r3, r2
 800a1d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a1d6:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1de:	f7f6 fa13 	bl	8000608 <__aeabi_dmul>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	460c      	mov	r4, r1
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	4623      	mov	r3, r4
 800a1ea:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a1ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1f2:	f7f6 f853 	bl	800029c <__adddf3>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	460c      	mov	r4, r1
 800a1fa:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a1fe:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 800a202:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a206:	3301      	adds	r3, #1
 800a208:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a20c:	e772      	b.n	800a0f4 <_ZN27positionEstimatorModelClass4stepEv+0x2ea4>
 800a20e:	bf00      	nop
 800a210:	3e500000 	.word	0x3e500000
    }

    epsilon = u + rtP.R2_Value_g;
 800a214:	4b98      	ldr	r3, [pc, #608]	; (800a478 <_ZN27positionEstimatorModelClass4stepEv+0x3228>)
 800a216:	e9d3 347c 	ldrd	r3, r4, [r3, #496]	; 0x1f0
 800a21a:	461a      	mov	r2, r3
 800a21c:	4623      	mov	r3, r4
 800a21e:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a222:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a226:	f7f6 f839 	bl	800029c <__adddf3>
 800a22a:	4603      	mov	r3, r0
 800a22c:	460c      	mov	r4, r1
 800a22e:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800a232:	e9c2 3400 	strd	r3, r4, [r2]
    a22 = rtDW.Pz - rtDW.DataStoreReadX_m[0];
 800a236:	1d3b      	adds	r3, r7, #4
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f503 6338 	add.w	r3, r3, #2944	; 0xb80
 800a23e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a242:	1d3b      	adds	r3, r7, #4
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 800a24a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a24e:	461a      	mov	r2, r3
 800a250:	4623      	mov	r3, r4
 800a252:	f7f6 f821 	bl	8000298 <__aeabi_dsub>
 800a256:	4603      	mov	r3, r0
 800a258:	460c      	mov	r4, r1
 800a25a:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a25e:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800a262:	2300      	movs	r3, #0
 800a264:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a268:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	f300 80a3 	bgt.w	800a3b8 <_ZN27positionEstimatorModelClass4stepEv+0x3168>
      u = rtDW.P_c[i] * dHdx_1[0];
 800a272:	1d3b      	adds	r3, r7, #4
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a27a:	33f4      	adds	r3, #244	; 0xf4
 800a27c:	00db      	lsls	r3, r3, #3
 800a27e:	4413      	add	r3, r2
 800a280:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a284:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a288:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a28c:	461a      	mov	r2, r3
 800a28e:	4623      	mov	r3, r4
 800a290:	f7f6 f9ba 	bl	8000608 <__aeabi_dmul>
 800a294:	4603      	mov	r3, r0
 800a296:	460c      	mov	r4, r1
 800a298:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a29c:	e9c2 3400 	strd	r3, r4, [r2]
      u += rtDW.P_c[i + 3] * dHdx_1[1];
 800a2a0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a2a4:	3303      	adds	r3, #3
 800a2a6:	1d3a      	adds	r2, r7, #4
 800a2a8:	6812      	ldr	r2, [r2, #0]
 800a2aa:	33f4      	adds	r3, #244	; 0xf4
 800a2ac:	00db      	lsls	r3, r3, #3
 800a2ae:	4413      	add	r3, r2
 800a2b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a2b4:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a2b8:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800a2bc:	461a      	mov	r2, r3
 800a2be:	4623      	mov	r3, r4
 800a2c0:	f7f6 f9a2 	bl	8000608 <__aeabi_dmul>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	4623      	mov	r3, r4
 800a2cc:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a2d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2d4:	f7f5 ffe2 	bl	800029c <__adddf3>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	460c      	mov	r4, r1
 800a2dc:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a2e0:	e9c2 3400 	strd	r3, r4, [r2]
      u += rtDW.P_c[i + 6] * dHdx_1[2];
 800a2e4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a2e8:	3306      	adds	r3, #6
 800a2ea:	1d3a      	adds	r2, r7, #4
 800a2ec:	6812      	ldr	r2, [r2, #0]
 800a2ee:	33f4      	adds	r3, #244	; 0xf4
 800a2f0:	00db      	lsls	r3, r3, #3
 800a2f2:	4413      	add	r3, r2
 800a2f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a2f8:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a2fc:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a300:	461a      	mov	r2, r3
 800a302:	4623      	mov	r3, r4
 800a304:	f7f6 f980 	bl	8000608 <__aeabi_dmul>
 800a308:	4603      	mov	r3, r0
 800a30a:	460c      	mov	r4, r1
 800a30c:	461a      	mov	r2, r3
 800a30e:	4623      	mov	r3, r4
 800a310:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a314:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a318:	f7f5 ffc0 	bl	800029c <__adddf3>
 800a31c:	4603      	mov	r3, r0
 800a31e:	460c      	mov	r4, r1
 800a320:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a324:	e9c2 3400 	strd	r3, r4, [r2]
      u /= epsilon;
 800a328:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800a32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a330:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a334:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a338:	f7f6 fa90 	bl	800085c <__aeabi_ddiv>
 800a33c:	4603      	mov	r3, r0
 800a33e:	460c      	mov	r4, r1
 800a340:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a344:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.xNew_g1[i] = u * a22 + rtDW.DataStoreReadX_m[i];
 800a348:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a354:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a358:	f7f6 f956 	bl	8000608 <__aeabi_dmul>
 800a35c:	4603      	mov	r3, r0
 800a35e:	460c      	mov	r4, r1
 800a360:	4618      	mov	r0, r3
 800a362:	4621      	mov	r1, r4
 800a364:	1d3b      	adds	r3, r7, #4
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a36c:	33ee      	adds	r3, #238	; 0xee
 800a36e:	00db      	lsls	r3, r3, #3
 800a370:	4413      	add	r3, r2
 800a372:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a376:	461a      	mov	r2, r3
 800a378:	4623      	mov	r3, r4
 800a37a:	f7f5 ff8f 	bl	800029c <__adddf3>
 800a37e:	4603      	mov	r3, r0
 800a380:	460c      	mov	r4, r1
 800a382:	1d3a      	adds	r2, r7, #4
 800a384:	6811      	ldr	r1, [r2, #0]
 800a386:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a38a:	32f1      	adds	r2, #241	; 0xf1
 800a38c:	00d2      	lsls	r2, r2, #3
 800a38e:	440a      	add	r2, r1
 800a390:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_0[i] = u;
 800a394:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 800a398:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a39c:	00db      	lsls	r3, r3, #3
 800a39e:	441a      	add	r2, r3
 800a3a0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a3a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a3a8:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800a3ac:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a3b6:	e757      	b.n	800a268 <_ZN27positionEstimatorModelClass4stepEv+0x3018>
    }

    for (r1 = 0; r1 < 3; r1++) {
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a3be:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	dc5a      	bgt.n	800a47c <_ZN27positionEstimatorModelClass4stepEv+0x322c>
      u = dHdx_1[r1];
 800a3c6:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800a3ca:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a3ce:	00db      	lsls	r3, r3, #3
 800a3d0:	4413      	add	r3, r2
 800a3d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a3d6:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a3da:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1] = imvec_0[0] * u;
 800a3de:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800a3e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a3e6:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	005b      	lsls	r3, r3, #1
 800a3ee:	189d      	adds	r5, r3, r2
 800a3f0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f8:	f7f6 f906 	bl	8000608 <__aeabi_dmul>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	460c      	mov	r4, r1
 800a400:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 800a404:	00ea      	lsls	r2, r5, #3
 800a406:	440a      	add	r2, r1
 800a408:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1 + 1] = imvec_0[1] * u;
 800a40c:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800a410:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a414:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a418:	4613      	mov	r3, r2
 800a41a:	005b      	lsls	r3, r3, #1
 800a41c:	4413      	add	r3, r2
 800a41e:	1c5d      	adds	r5, r3, #1
 800a420:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a428:	f7f6 f8ee 	bl	8000608 <__aeabi_dmul>
 800a42c:	4603      	mov	r3, r0
 800a42e:	460c      	mov	r4, r1
 800a430:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 800a434:	00ea      	lsls	r2, r5, #3
 800a436:	440a      	add	r2, r1
 800a438:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1 + 2] = imvec_0[2] * u;
 800a43c:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800a440:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a444:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a448:	4613      	mov	r3, r2
 800a44a:	005b      	lsls	r3, r3, #1
 800a44c:	4413      	add	r3, r2
 800a44e:	1c9d      	adds	r5, r3, #2
 800a450:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a458:	f7f6 f8d6 	bl	8000608 <__aeabi_dmul>
 800a45c:	4603      	mov	r3, r0
 800a45e:	460c      	mov	r4, r1
 800a460:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 800a464:	00ea      	lsls	r2, r5, #3
 800a466:	440a      	add	r2, r1
 800a468:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 800a46c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a470:	3301      	adds	r3, #1
 800a472:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a476:	e7a2      	b.n	800a3be <_ZN27positionEstimatorModelClass4stepEv+0x316e>
 800a478:	20000290 	.word	0x20000290
    }

    for (r1 = 0; r1 < 3; r1++) {
 800a47c:	2300      	movs	r3, #0
 800a47e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a482:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a486:	2b02      	cmp	r3, #2
 800a488:	f300 80ab 	bgt.w	800a5e2 <_ZN27positionEstimatorModelClass4stepEv+0x3392>
      for (i = 0; i < 3; i++) {
 800a48c:	2300      	movs	r3, #0
 800a48e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a492:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a496:	2b02      	cmp	r3, #2
 800a498:	f300 809d 	bgt.w	800a5d6 <_ZN27positionEstimatorModelClass4stepEv+0x3386>
        u = rtDW.P_c[3 * r1] * imvec_1[i];
 800a49c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	005b      	lsls	r3, r3, #1
 800a4a4:	4413      	add	r3, r2
 800a4a6:	1d3a      	adds	r2, r7, #4
 800a4a8:	6812      	ldr	r2, [r2, #0]
 800a4aa:	33f4      	adds	r3, #244	; 0xf4
 800a4ac:	00db      	lsls	r3, r3, #3
 800a4ae:	4413      	add	r3, r2
 800a4b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a4b4:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a4b8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a4bc:	00db      	lsls	r3, r3, #3
 800a4be:	4413      	add	r3, r2
 800a4c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	4623      	mov	r3, r4
 800a4c8:	f7f6 f89e 	bl	8000608 <__aeabi_dmul>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a4d4:	e9c2 3400 	strd	r3, r4, [r2]
        u += rtDW.P_c[3 * r1 + 1] * imvec_1[i + 3];
 800a4d8:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a4dc:	4613      	mov	r3, r2
 800a4de:	005b      	lsls	r3, r3, #1
 800a4e0:	4413      	add	r3, r2
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	1d3a      	adds	r2, r7, #4
 800a4e6:	6812      	ldr	r2, [r2, #0]
 800a4e8:	33f4      	adds	r3, #244	; 0xf4
 800a4ea:	00db      	lsls	r3, r3, #3
 800a4ec:	4413      	add	r3, r2
 800a4ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a4f2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a4f6:	3303      	adds	r3, #3
 800a4f8:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a4fc:	00db      	lsls	r3, r3, #3
 800a4fe:	4413      	add	r3, r2
 800a500:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a504:	461a      	mov	r2, r3
 800a506:	4623      	mov	r3, r4
 800a508:	f7f6 f87e 	bl	8000608 <__aeabi_dmul>
 800a50c:	4603      	mov	r3, r0
 800a50e:	460c      	mov	r4, r1
 800a510:	461a      	mov	r2, r3
 800a512:	4623      	mov	r3, r4
 800a514:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a51c:	f7f5 febe 	bl	800029c <__adddf3>
 800a520:	4603      	mov	r3, r0
 800a522:	460c      	mov	r4, r1
 800a524:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a528:	e9c2 3400 	strd	r3, r4, [r2]
        u += rtDW.P_c[3 * r1 + 2] * imvec_1[i + 6];
 800a52c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a530:	4613      	mov	r3, r2
 800a532:	005b      	lsls	r3, r3, #1
 800a534:	4413      	add	r3, r2
 800a536:	3302      	adds	r3, #2
 800a538:	1d3a      	adds	r2, r7, #4
 800a53a:	6812      	ldr	r2, [r2, #0]
 800a53c:	33f4      	adds	r3, #244	; 0xf4
 800a53e:	00db      	lsls	r3, r3, #3
 800a540:	4413      	add	r3, r2
 800a542:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a546:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a54a:	3306      	adds	r3, #6
 800a54c:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a550:	00db      	lsls	r3, r3, #3
 800a552:	4413      	add	r3, r2
 800a554:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a558:	461a      	mov	r2, r3
 800a55a:	4623      	mov	r3, r4
 800a55c:	f7f6 f854 	bl	8000608 <__aeabi_dmul>
 800a560:	4603      	mov	r3, r0
 800a562:	460c      	mov	r4, r1
 800a564:	461a      	mov	r2, r3
 800a566:	4623      	mov	r3, r4
 800a568:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a56c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a570:	f7f5 fe94 	bl	800029c <__adddf3>
 800a574:	4603      	mov	r3, r0
 800a576:	460c      	mov	r4, r1
 800a578:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a57c:	e9c2 3400 	strd	r3, r4, [r2]
        a[i + 3 * r1] = rtDW.P_c[3 * r1 + i] - u;
 800a580:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a584:	4613      	mov	r3, r2
 800a586:	005b      	lsls	r3, r3, #1
 800a588:	441a      	add	r2, r3
 800a58a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a58e:	4413      	add	r3, r2
 800a590:	1d3a      	adds	r2, r7, #4
 800a592:	6812      	ldr	r2, [r2, #0]
 800a594:	33f4      	adds	r3, #244	; 0xf4
 800a596:	00db      	lsls	r3, r3, #3
 800a598:	4413      	add	r3, r2
 800a59a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a59e:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	005b      	lsls	r3, r3, #1
 800a5a6:	441a      	add	r2, r3
 800a5a8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a5ac:	18d5      	adds	r5, r2, r3
 800a5ae:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b6:	f7f5 fe6f 	bl	8000298 <__aeabi_dsub>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	460c      	mov	r4, r1
 800a5be:	f507 7124 	add.w	r1, r7, #656	; 0x290
 800a5c2:	00ea      	lsls	r2, r5, #3
 800a5c4:	440a      	add	r2, r1
 800a5c6:	e9c2 3400 	strd	r3, r4, [r2]
      for (i = 0; i < 3; i++) {
 800a5ca:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a5d4:	e75d      	b.n	800a492 <_ZN27positionEstimatorModelClass4stepEv+0x3242>
    for (r1 = 0; r1 < 3; r1++) {
 800a5d6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a5da:	3301      	adds	r3, #1
 800a5dc:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a5e0:	e74f      	b.n	800a482 <_ZN27positionEstimatorModelClass4stepEv+0x3232>
      }
    }

    for (i = 0; i < 9; i++) {
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a5e8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a5ec:	2b08      	cmp	r3, #8
 800a5ee:	dc29      	bgt.n	800a644 <_ZN27positionEstimatorModelClass4stepEv+0x33f4>
      rtDW.P_c[i] = a[i];
 800a5f0:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a5f4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a5f8:	00db      	lsls	r3, r3, #3
 800a5fa:	4413      	add	r3, r2
 800a5fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a600:	1d3a      	adds	r2, r7, #4
 800a602:	6811      	ldr	r1, [r2, #0]
 800a604:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a608:	32f4      	adds	r2, #244	; 0xf4
 800a60a:	00d2      	lsls	r2, r2, #3
 800a60c:	440a      	add	r2, r1
 800a60e:	e9c2 3400 	strd	r3, r4, [r2]

      // DataStoreWrite: '<S5>/Data Store WriteP'
      rtDW.P_i_m[i] = rtDW.P_c[i];
 800a612:	1d3b      	adds	r3, r7, #4
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a61a:	33f4      	adds	r3, #244	; 0xf4
 800a61c:	00db      	lsls	r3, r3, #3
 800a61e:	4413      	add	r3, r2
 800a620:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a624:	1d3a      	adds	r2, r7, #4
 800a626:	6811      	ldr	r1, [r2, #0]
 800a628:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a62c:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800a630:	00d2      	lsls	r2, r2, #3
 800a632:	440a      	add	r2, r1
 800a634:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 800a638:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a63c:	3301      	adds	r3, #1
 800a63e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a642:	e7d1      	b.n	800a5e8 <_ZN27positionEstimatorModelClass4stepEv+0x3398>
    }

    // DataStoreWrite: '<S5>/Data Store WriteX'
    rtDW.x[0] = rtDW.xNew_g1[0];
 800a644:	1d3b      	adds	r3, r7, #4
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800a64c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a650:	1d3a      	adds	r2, r7, #4
 800a652:	6812      	ldr	r2, [r2, #0]
 800a654:	f602 02a8 	addw	r2, r2, #2216	; 0x8a8
 800a658:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[1] = rtDW.xNew_g1[1];
 800a65c:	1d3b      	adds	r3, r7, #4
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 800a664:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a668:	1d3a      	adds	r2, r7, #4
 800a66a:	6812      	ldr	r2, [r2, #0]
 800a66c:	f502 620b 	add.w	r2, r2, #2224	; 0x8b0
 800a670:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[2] = rtDW.xNew_g1[2];
 800a674:	1d3b      	adds	r3, r7, #4
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 800a67c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a680:	1d3a      	adds	r2, r7, #4
 800a682:	6812      	ldr	r2, [r2, #0]
 800a684:	f602 02b8 	addw	r2, r2, #2232	; 0x8b8
 800a688:	e9c2 3400 	strd	r3, r4, [r2]
  // End of Outputs for SubSystem: '<S1>/Correct2'

  // DataTypeConversion: '<S1>/DataTypeConversion_Enable3' incorporates:
  //   Inport: '<Root>/BaroFlag'

  rtDW.DataTypeConversion_Enable3 = (rtU.BaroFlag != 0.0);
 800a68c:	1d3b      	adds	r3, r7, #4
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800a694:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a698:	2301      	movs	r3, #1
 800a69a:	461c      	mov	r4, r3
 800a69c:	f04f 0200 	mov.w	r2, #0
 800a6a0:	f04f 0300 	mov.w	r3, #0
 800a6a4:	f7f6 fa18 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d001      	beq.n	800a6b2 <_ZN27positionEstimatorModelClass4stepEv+0x3462>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	461c      	mov	r4, r3
 800a6b2:	b2e3      	uxtb	r3, r4
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	1d3b      	adds	r3, r7, #4
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f883 2c41 	strb.w	r2, [r3, #3137]	; 0xc41

  // Outputs for Enabled SubSystem: '<S1>/Correct3' incorporates:
  //   EnablePort: '<S6>/Enable'

  if (rtDW.DataTypeConversion_Enable3) {
 800a6be:	1d3b      	adds	r3, r7, #4
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f893 3c41 	ldrb.w	r3, [r3, #3137]	; 0xc41
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f000 83d8 	beq.w	800ae7c <_ZN27positionEstimatorModelClass4stepEv+0x3c2c>
    // DataStoreRead: '<S6>/Data Store ReadX'
    rtDW.DataStoreReadX_i[0] = rtDW.x[0];
 800a6cc:	1d3b      	adds	r3, r7, #4
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 800a6d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a6d8:	1d3a      	adds	r2, r7, #4
 800a6da:	6812      	ldr	r2, [r2, #0]
 800a6dc:	f502 62df 	add.w	r2, r2, #1784	; 0x6f8
 800a6e0:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_i[1] = rtDW.x[1];
 800a6e4:	1d3b      	adds	r3, r7, #4
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 800a6ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a6f0:	1d3a      	adds	r2, r7, #4
 800a6f2:	6812      	ldr	r2, [r2, #0]
 800a6f4:	f502 62e0 	add.w	r2, r2, #1792	; 0x700
 800a6f8:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_i[2] = rtDW.x[2];
 800a6fc:	1d3b      	adds	r3, r7, #4
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 800a704:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a708:	1d3a      	adds	r2, r7, #4
 800a70a:	6812      	ldr	r2, [r2, #0]
 800a70c:	f502 62e1 	add.w	r2, r2, #1800	; 0x708
 800a710:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S6>/Correct'
    rtDW.blockOrdering_p = rtDW.blockOrdering_n;
 800a714:	1d3b      	adds	r3, r7, #4
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f893 2c47 	ldrb.w	r2, [r3, #3143]	; 0xc47
 800a71c:	1d3b      	adds	r3, r7, #4
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f883 2c46 	strb.w	r2, [r3, #3142]	; 0xc46
    blockOrdering = rtDW.blockOrdering_p;
 800a724:	1d3b      	adds	r3, r7, #4
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f893 3c46 	ldrb.w	r3, [r3, #3142]	; 0xc46
 800a72c:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering_p = blockOrdering;
 800a730:	1d3b      	adds	r3, r7, #4
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 800a738:	f883 2c46 	strb.w	r2, [r3, #3142]	; 0xc46
    for (i = 0; i < 9; i++) {
 800a73c:	2300      	movs	r3, #0
 800a73e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a742:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a746:	2b08      	cmp	r3, #8
 800a748:	dc32      	bgt.n	800a7b0 <_ZN27positionEstimatorModelClass4stepEv+0x3560>
      // DataStoreRead: '<S6>/Data Store ReadP'
      rtDW.P_a[i] = rtDW.P_i_m[i];
 800a74a:	1d3b      	adds	r3, r7, #4
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a752:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800a756:	00db      	lsls	r3, r3, #3
 800a758:	4413      	add	r3, r2
 800a75a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a75e:	1d3a      	adds	r2, r7, #4
 800a760:	6811      	ldr	r1, [r2, #0]
 800a762:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a766:	32e5      	adds	r2, #229	; 0xe5
 800a768:	00d2      	lsls	r2, r2, #3
 800a76a:	440a      	add	r2, r1
 800a76c:	e9c2 3400 	strd	r3, r4, [r2]

      // MATLAB Function: '<S6>/Correct'
      u = rtDW.P_a[i];
 800a770:	1d3b      	adds	r3, r7, #4
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a778:	33e5      	adds	r3, #229	; 0xe5
 800a77a:	00db      	lsls	r3, r3, #3
 800a77c:	4413      	add	r3, r2
 800a77e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a782:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a786:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.P_a[i] = u;
 800a78a:	1d3b      	adds	r3, r7, #4
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a792:	33e5      	adds	r3, #229	; 0xe5
 800a794:	00db      	lsls	r3, r3, #3
 800a796:	441a      	add	r2, r3
 800a798:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a79c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a7a0:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 800a7a4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a7ae:	e7c8      	b.n	800a742 <_ZN27positionEstimatorModelClass4stepEv+0x34f2>
    }

    // MATLAB Function: '<S6>/Correct' incorporates:
    //   Constant: '<S1>/R3'

    for (r1 = 0; r1 < 3; r1++) {
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a7b6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	f300 8088 	bgt.w	800a8d0 <_ZN27positionEstimatorModelClass4stepEv+0x3680>
      imvec_0[0] = rtDW.DataStoreReadX_i[0];
 800a7c0:	1d3b      	adds	r3, r7, #4
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 800a7c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a7cc:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 800a7d0:	e9c2 3400 	strd	r3, r4, [r2]
      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_i[r1]);
 800a7d4:	1d3b      	adds	r3, r7, #4
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a7dc:	33df      	adds	r3, #223	; 0xdf
 800a7de:	00db      	lsls	r3, r3, #3
 800a7e0:	4413      	add	r3, r2
 800a7e2:	ed93 7b00 	vldr	d7, [r3]
 800a7e6:	eeb0 0a47 	vmov.f32	s0, s14
 800a7ea:	eef0 0a67 	vmov.f32	s1, s15
 800a7ee:	f7fb fac6 	bl	8005d7e <_ZSt3absd>
 800a7f2:	ec51 0b10 	vmov	r0, r1, d0
 800a7f6:	f04f 0200 	mov.w	r2, #0
 800a7fa:	4b81      	ldr	r3, [pc, #516]	; (800aa00 <_ZN27positionEstimatorModelClass4stepEv+0x37b0>)
 800a7fc:	f7f5 ff04 	bl	8000608 <__aeabi_dmul>
 800a800:	4603      	mov	r3, r0
 800a802:	460c      	mov	r4, r1
 800a804:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800a808:	e9c2 3400 	strd	r3, r4, [r2]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 800a80c:	f04f 0200 	mov.w	r2, #0
 800a810:	4b7b      	ldr	r3, [pc, #492]	; (800aa00 <_ZN27positionEstimatorModelClass4stepEv+0x37b0>)
 800a812:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 800a816:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a81a:	f7f6 f967 	bl	8000aec <__aeabi_dcmplt>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d108      	bne.n	800a836 <_ZN27positionEstimatorModelClass4stepEv+0x35e6>
 800a824:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800a828:	ed93 0b00 	vldr	d0, [r3]
 800a82c:	f7fb fb6a 	bl	8005f04 <rtIsNaN>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d001      	beq.n	800a83a <_ZN27positionEstimatorModelClass4stepEv+0x35ea>
 800a836:	2301      	movs	r3, #1
 800a838:	e000      	b.n	800a83c <_ZN27positionEstimatorModelClass4stepEv+0x35ec>
 800a83a:	2300      	movs	r3, #0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d006      	beq.n	800a84e <_ZN27positionEstimatorModelClass4stepEv+0x35fe>
        epsilon = 1.4901161193847656E-8;
 800a840:	f04f 0300 	mov.w	r3, #0
 800a844:	4c6e      	ldr	r4, [pc, #440]	; (800aa00 <_ZN27positionEstimatorModelClass4stepEv+0x37b0>)
 800a846:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800a84a:	e9c2 3400 	strd	r3, r4, [r2]
      }

      imvec_0[r1] = rtDW.DataStoreReadX_i[r1] + epsilon;
 800a84e:	1d3b      	adds	r3, r7, #4
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a856:	33df      	adds	r3, #223	; 0xdf
 800a858:	00db      	lsls	r3, r3, #3
 800a85a:	4413      	add	r3, r2
 800a85c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a860:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a868:	f7f5 fd18 	bl	800029c <__adddf3>
 800a86c:	4603      	mov	r3, r0
 800a86e:	460c      	mov	r4, r1
 800a870:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 800a874:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a878:	00d2      	lsls	r2, r2, #3
 800a87a:	440a      	add	r2, r1
 800a87c:	e9c2 3400 	strd	r3, r4, [r2]
      dHdx_1[r1] = (imvec_0[0] - rtDW.DataStoreReadX_i[0]) / epsilon;
 800a880:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800a884:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a888:	1d3b      	adds	r3, r7, #4
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 800a890:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a894:	461a      	mov	r2, r3
 800a896:	4623      	mov	r3, r4
 800a898:	f7f5 fcfe 	bl	8000298 <__aeabi_dsub>
 800a89c:	4603      	mov	r3, r0
 800a89e:	460c      	mov	r4, r1
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	4621      	mov	r1, r4
 800a8a4:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800a8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ac:	f7f5 ffd6 	bl	800085c <__aeabi_ddiv>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	460c      	mov	r4, r1
 800a8b4:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 800a8b8:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a8bc:	00d2      	lsls	r2, r2, #3
 800a8be:	440a      	add	r2, r1
 800a8c0:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 800a8c4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a8ce:	e772      	b.n	800a7b6 <_ZN27positionEstimatorModelClass4stepEv+0x3566>
    }

    u = 0.0;
 800a8d0:	f04f 0300 	mov.w	r3, #0
 800a8d4:	f04f 0400 	mov.w	r4, #0
 800a8d8:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a8dc:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a8e6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	f300 808a 	bgt.w	800aa04 <_ZN27positionEstimatorModelClass4stepEv+0x37b4>
      a22 = rtDW.P_a[3 * r1] * dHdx_1[0];
 800a8f0:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	005b      	lsls	r3, r3, #1
 800a8f8:	4413      	add	r3, r2
 800a8fa:	1d3a      	adds	r2, r7, #4
 800a8fc:	6812      	ldr	r2, [r2, #0]
 800a8fe:	33e5      	adds	r3, #229	; 0xe5
 800a900:	00db      	lsls	r3, r3, #3
 800a902:	4413      	add	r3, r2
 800a904:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a908:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a90c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a910:	461a      	mov	r2, r3
 800a912:	4623      	mov	r3, r4
 800a914:	f7f5 fe78 	bl	8000608 <__aeabi_dmul>
 800a918:	4603      	mov	r3, r0
 800a91a:	460c      	mov	r4, r1
 800a91c:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a920:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_a[3 * r1 + 1] * dHdx_1[1];
 800a924:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a928:	4613      	mov	r3, r2
 800a92a:	005b      	lsls	r3, r3, #1
 800a92c:	4413      	add	r3, r2
 800a92e:	3301      	adds	r3, #1
 800a930:	1d3a      	adds	r2, r7, #4
 800a932:	6812      	ldr	r2, [r2, #0]
 800a934:	33e5      	adds	r3, #229	; 0xe5
 800a936:	00db      	lsls	r3, r3, #3
 800a938:	4413      	add	r3, r2
 800a93a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a93e:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a942:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800a946:	461a      	mov	r2, r3
 800a948:	4623      	mov	r3, r4
 800a94a:	f7f5 fe5d 	bl	8000608 <__aeabi_dmul>
 800a94e:	4603      	mov	r3, r0
 800a950:	460c      	mov	r4, r1
 800a952:	461a      	mov	r2, r3
 800a954:	4623      	mov	r3, r4
 800a956:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800a95a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a95e:	f7f5 fc9d 	bl	800029c <__adddf3>
 800a962:	4603      	mov	r3, r0
 800a964:	460c      	mov	r4, r1
 800a966:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a96a:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_a[3 * r1 + 2] * dHdx_1[2];
 800a96e:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a972:	4613      	mov	r3, r2
 800a974:	005b      	lsls	r3, r3, #1
 800a976:	4413      	add	r3, r2
 800a978:	3302      	adds	r3, #2
 800a97a:	1d3a      	adds	r2, r7, #4
 800a97c:	6812      	ldr	r2, [r2, #0]
 800a97e:	33e5      	adds	r3, #229	; 0xe5
 800a980:	00db      	lsls	r3, r3, #3
 800a982:	4413      	add	r3, r2
 800a984:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a988:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a98c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a990:	461a      	mov	r2, r3
 800a992:	4623      	mov	r3, r4
 800a994:	f7f5 fe38 	bl	8000608 <__aeabi_dmul>
 800a998:	4603      	mov	r3, r0
 800a99a:	460c      	mov	r4, r1
 800a99c:	461a      	mov	r2, r3
 800a99e:	4623      	mov	r3, r4
 800a9a0:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800a9a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9a8:	f7f5 fc78 	bl	800029c <__adddf3>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a9b4:	e9c2 3400 	strd	r3, r4, [r2]
      u += a22 * dHdx_1[r1];
 800a9b8:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800a9bc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a9c0:	00db      	lsls	r3, r3, #3
 800a9c2:	4413      	add	r3, r2
 800a9c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a9c8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d0:	f7f5 fe1a 	bl	8000608 <__aeabi_dmul>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	460c      	mov	r4, r1
 800a9d8:	461a      	mov	r2, r3
 800a9da:	4623      	mov	r3, r4
 800a9dc:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a9e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9e4:	f7f5 fc5a 	bl	800029c <__adddf3>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a9f0:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 800a9f4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a9fe:	e772      	b.n	800a8e6 <_ZN27positionEstimatorModelClass4stepEv+0x3696>
 800aa00:	3e500000 	.word	0x3e500000
    }

    epsilon = u + rtP.R3_Value;
 800aa04:	4b98      	ldr	r3, [pc, #608]	; (800ac68 <_ZN27positionEstimatorModelClass4stepEv+0x3a18>)
 800aa06:	e9d3 3478 	ldrd	r3, r4, [r3, #480]	; 0x1e0
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	4623      	mov	r3, r4
 800aa0e:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800aa12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa16:	f7f5 fc41 	bl	800029c <__adddf3>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	460c      	mov	r4, r1
 800aa1e:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800aa22:	e9c2 3400 	strd	r3, r4, [r2]
    a22 = rtDW.NED_convert - rtDW.DataStoreReadX_i[0];
 800aa26:	1d3b      	adds	r3, r7, #4
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 800aa2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aa32:	1d3b      	adds	r3, r7, #4
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 800aa3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa3e:	461a      	mov	r2, r3
 800aa40:	4623      	mov	r3, r4
 800aa42:	f7f5 fc29 	bl	8000298 <__aeabi_dsub>
 800aa46:	4603      	mov	r3, r0
 800aa48:	460c      	mov	r4, r1
 800aa4a:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800aa4e:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800aa52:	2300      	movs	r3, #0
 800aa54:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800aa58:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	f300 80a3 	bgt.w	800aba8 <_ZN27positionEstimatorModelClass4stepEv+0x3958>
      u = rtDW.P_a[i] * dHdx_1[0];
 800aa62:	1d3b      	adds	r3, r7, #4
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aa6a:	33e5      	adds	r3, #229	; 0xe5
 800aa6c:	00db      	lsls	r3, r3, #3
 800aa6e:	4413      	add	r3, r2
 800aa70:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aa74:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800aa78:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	4623      	mov	r3, r4
 800aa80:	f7f5 fdc2 	bl	8000608 <__aeabi_dmul>
 800aa84:	4603      	mov	r3, r0
 800aa86:	460c      	mov	r4, r1
 800aa88:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800aa8c:	e9c2 3400 	strd	r3, r4, [r2]
      u += rtDW.P_a[i + 3] * dHdx_1[1];
 800aa90:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aa94:	3303      	adds	r3, #3
 800aa96:	1d3a      	adds	r2, r7, #4
 800aa98:	6812      	ldr	r2, [r2, #0]
 800aa9a:	33e5      	adds	r3, #229	; 0xe5
 800aa9c:	00db      	lsls	r3, r3, #3
 800aa9e:	4413      	add	r3, r2
 800aaa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aaa4:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800aaa8:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800aaac:	461a      	mov	r2, r3
 800aaae:	4623      	mov	r3, r4
 800aab0:	f7f5 fdaa 	bl	8000608 <__aeabi_dmul>
 800aab4:	4603      	mov	r3, r0
 800aab6:	460c      	mov	r4, r1
 800aab8:	461a      	mov	r2, r3
 800aaba:	4623      	mov	r3, r4
 800aabc:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800aac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aac4:	f7f5 fbea 	bl	800029c <__adddf3>
 800aac8:	4603      	mov	r3, r0
 800aaca:	460c      	mov	r4, r1
 800aacc:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800aad0:	e9c2 3400 	strd	r3, r4, [r2]
      u += rtDW.P_a[i + 6] * dHdx_1[2];
 800aad4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aad8:	3306      	adds	r3, #6
 800aada:	1d3a      	adds	r2, r7, #4
 800aadc:	6812      	ldr	r2, [r2, #0]
 800aade:	33e5      	adds	r3, #229	; 0xe5
 800aae0:	00db      	lsls	r3, r3, #3
 800aae2:	4413      	add	r3, r2
 800aae4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aae8:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800aaec:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	4623      	mov	r3, r4
 800aaf4:	f7f5 fd88 	bl	8000608 <__aeabi_dmul>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	460c      	mov	r4, r1
 800aafc:	461a      	mov	r2, r3
 800aafe:	4623      	mov	r3, r4
 800ab00:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800ab04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab08:	f7f5 fbc8 	bl	800029c <__adddf3>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	460c      	mov	r4, r1
 800ab10:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800ab14:	e9c2 3400 	strd	r3, r4, [r2]
      u /= epsilon;
 800ab18:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800ab1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab20:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800ab24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab28:	f7f5 fe98 	bl	800085c <__aeabi_ddiv>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	460c      	mov	r4, r1
 800ab30:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800ab34:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.xNew_p[i] = u * a22 + rtDW.DataStoreReadX_i[i];
 800ab38:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800ab3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab40:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800ab44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab48:	f7f5 fd5e 	bl	8000608 <__aeabi_dmul>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	460c      	mov	r4, r1
 800ab50:	4618      	mov	r0, r3
 800ab52:	4621      	mov	r1, r4
 800ab54:	1d3b      	adds	r3, r7, #4
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ab5c:	33df      	adds	r3, #223	; 0xdf
 800ab5e:	00db      	lsls	r3, r3, #3
 800ab60:	4413      	add	r3, r2
 800ab62:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab66:	461a      	mov	r2, r3
 800ab68:	4623      	mov	r3, r4
 800ab6a:	f7f5 fb97 	bl	800029c <__adddf3>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	460c      	mov	r4, r1
 800ab72:	1d3a      	adds	r2, r7, #4
 800ab74:	6811      	ldr	r1, [r2, #0]
 800ab76:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ab7a:	32e2      	adds	r2, #226	; 0xe2
 800ab7c:	00d2      	lsls	r2, r2, #3
 800ab7e:	440a      	add	r2, r1
 800ab80:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_0[i] = u;
 800ab84:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 800ab88:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ab8c:	00db      	lsls	r3, r3, #3
 800ab8e:	441a      	add	r2, r3
 800ab90:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800ab94:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab98:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800ab9c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aba0:	3301      	adds	r3, #1
 800aba2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800aba6:	e757      	b.n	800aa58 <_ZN27positionEstimatorModelClass4stepEv+0x3808>
    }

    for (r1 = 0; r1 < 3; r1++) {
 800aba8:	2300      	movs	r3, #0
 800abaa:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800abae:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	dc5a      	bgt.n	800ac6c <_ZN27positionEstimatorModelClass4stepEv+0x3a1c>
      u = dHdx_1[r1];
 800abb6:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800abba:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800abbe:	00db      	lsls	r3, r3, #3
 800abc0:	4413      	add	r3, r2
 800abc2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800abc6:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800abca:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1] = imvec_0[0] * u;
 800abce:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800abd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800abd6:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800abda:	4613      	mov	r3, r2
 800abdc:	005b      	lsls	r3, r3, #1
 800abde:	189d      	adds	r5, r3, r2
 800abe0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800abe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe8:	f7f5 fd0e 	bl	8000608 <__aeabi_dmul>
 800abec:	4603      	mov	r3, r0
 800abee:	460c      	mov	r4, r1
 800abf0:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 800abf4:	00ea      	lsls	r2, r5, #3
 800abf6:	440a      	add	r2, r1
 800abf8:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1 + 1] = imvec_0[1] * u;
 800abfc:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800ac00:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ac04:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800ac08:	4613      	mov	r3, r2
 800ac0a:	005b      	lsls	r3, r3, #1
 800ac0c:	4413      	add	r3, r2
 800ac0e:	1c5d      	adds	r5, r3, #1
 800ac10:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800ac14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac18:	f7f5 fcf6 	bl	8000608 <__aeabi_dmul>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	460c      	mov	r4, r1
 800ac20:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 800ac24:	00ea      	lsls	r2, r5, #3
 800ac26:	440a      	add	r2, r1
 800ac28:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1 + 2] = imvec_0[2] * u;
 800ac2c:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800ac30:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ac34:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800ac38:	4613      	mov	r3, r2
 800ac3a:	005b      	lsls	r3, r3, #1
 800ac3c:	4413      	add	r3, r2
 800ac3e:	1c9d      	adds	r5, r3, #2
 800ac40:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac48:	f7f5 fcde 	bl	8000608 <__aeabi_dmul>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	460c      	mov	r4, r1
 800ac50:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 800ac54:	00ea      	lsls	r2, r5, #3
 800ac56:	440a      	add	r2, r1
 800ac58:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 800ac5c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ac60:	3301      	adds	r3, #1
 800ac62:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800ac66:	e7a2      	b.n	800abae <_ZN27positionEstimatorModelClass4stepEv+0x395e>
 800ac68:	20000290 	.word	0x20000290
    }

    for (r1 = 0; r1 < 3; r1++) {
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800ac72:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	f300 80ab 	bgt.w	800add2 <_ZN27positionEstimatorModelClass4stepEv+0x3b82>
      for (i = 0; i < 3; i++) {
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800ac82:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	f300 809d 	bgt.w	800adc6 <_ZN27positionEstimatorModelClass4stepEv+0x3b76>
        u = rtDW.P_a[3 * r1] * imvec_1[i];
 800ac8c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800ac90:	4613      	mov	r3, r2
 800ac92:	005b      	lsls	r3, r3, #1
 800ac94:	4413      	add	r3, r2
 800ac96:	1d3a      	adds	r2, r7, #4
 800ac98:	6812      	ldr	r2, [r2, #0]
 800ac9a:	33e5      	adds	r3, #229	; 0xe5
 800ac9c:	00db      	lsls	r3, r3, #3
 800ac9e:	4413      	add	r3, r2
 800aca0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aca4:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800aca8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800acac:	00db      	lsls	r3, r3, #3
 800acae:	4413      	add	r3, r2
 800acb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800acb4:	461a      	mov	r2, r3
 800acb6:	4623      	mov	r3, r4
 800acb8:	f7f5 fca6 	bl	8000608 <__aeabi_dmul>
 800acbc:	4603      	mov	r3, r0
 800acbe:	460c      	mov	r4, r1
 800acc0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800acc4:	e9c2 3400 	strd	r3, r4, [r2]
        u += rtDW.P_a[3 * r1 + 1] * imvec_1[i + 3];
 800acc8:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800accc:	4613      	mov	r3, r2
 800acce:	005b      	lsls	r3, r3, #1
 800acd0:	4413      	add	r3, r2
 800acd2:	3301      	adds	r3, #1
 800acd4:	1d3a      	adds	r2, r7, #4
 800acd6:	6812      	ldr	r2, [r2, #0]
 800acd8:	33e5      	adds	r3, #229	; 0xe5
 800acda:	00db      	lsls	r3, r3, #3
 800acdc:	4413      	add	r3, r2
 800acde:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ace2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ace6:	3303      	adds	r3, #3
 800ace8:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800acec:	00db      	lsls	r3, r3, #3
 800acee:	4413      	add	r3, r2
 800acf0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800acf4:	461a      	mov	r2, r3
 800acf6:	4623      	mov	r3, r4
 800acf8:	f7f5 fc86 	bl	8000608 <__aeabi_dmul>
 800acfc:	4603      	mov	r3, r0
 800acfe:	460c      	mov	r4, r1
 800ad00:	461a      	mov	r2, r3
 800ad02:	4623      	mov	r3, r4
 800ad04:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800ad08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad0c:	f7f5 fac6 	bl	800029c <__adddf3>
 800ad10:	4603      	mov	r3, r0
 800ad12:	460c      	mov	r4, r1
 800ad14:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800ad18:	e9c2 3400 	strd	r3, r4, [r2]
        u += rtDW.P_a[3 * r1 + 2] * imvec_1[i + 6];
 800ad1c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800ad20:	4613      	mov	r3, r2
 800ad22:	005b      	lsls	r3, r3, #1
 800ad24:	4413      	add	r3, r2
 800ad26:	3302      	adds	r3, #2
 800ad28:	1d3a      	adds	r2, r7, #4
 800ad2a:	6812      	ldr	r2, [r2, #0]
 800ad2c:	33e5      	adds	r3, #229	; 0xe5
 800ad2e:	00db      	lsls	r3, r3, #3
 800ad30:	4413      	add	r3, r2
 800ad32:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ad36:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ad3a:	3306      	adds	r3, #6
 800ad3c:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800ad40:	00db      	lsls	r3, r3, #3
 800ad42:	4413      	add	r3, r2
 800ad44:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad48:	461a      	mov	r2, r3
 800ad4a:	4623      	mov	r3, r4
 800ad4c:	f7f5 fc5c 	bl	8000608 <__aeabi_dmul>
 800ad50:	4603      	mov	r3, r0
 800ad52:	460c      	mov	r4, r1
 800ad54:	461a      	mov	r2, r3
 800ad56:	4623      	mov	r3, r4
 800ad58:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800ad5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad60:	f7f5 fa9c 	bl	800029c <__adddf3>
 800ad64:	4603      	mov	r3, r0
 800ad66:	460c      	mov	r4, r1
 800ad68:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800ad6c:	e9c2 3400 	strd	r3, r4, [r2]
        a[i + 3 * r1] = rtDW.P_a[3 * r1 + i] - u;
 800ad70:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800ad74:	4613      	mov	r3, r2
 800ad76:	005b      	lsls	r3, r3, #1
 800ad78:	441a      	add	r2, r3
 800ad7a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ad7e:	4413      	add	r3, r2
 800ad80:	1d3a      	adds	r2, r7, #4
 800ad82:	6812      	ldr	r2, [r2, #0]
 800ad84:	33e5      	adds	r3, #229	; 0xe5
 800ad86:	00db      	lsls	r3, r3, #3
 800ad88:	4413      	add	r3, r2
 800ad8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ad8e:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800ad92:	4613      	mov	r3, r2
 800ad94:	005b      	lsls	r3, r3, #1
 800ad96:	441a      	add	r2, r3
 800ad98:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ad9c:	18d5      	adds	r5, r2, r3
 800ad9e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800ada2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada6:	f7f5 fa77 	bl	8000298 <__aeabi_dsub>
 800adaa:	4603      	mov	r3, r0
 800adac:	460c      	mov	r4, r1
 800adae:	f507 7124 	add.w	r1, r7, #656	; 0x290
 800adb2:	00ea      	lsls	r2, r5, #3
 800adb4:	440a      	add	r2, r1
 800adb6:	e9c2 3400 	strd	r3, r4, [r2]
      for (i = 0; i < 3; i++) {
 800adba:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800adbe:	3301      	adds	r3, #1
 800adc0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800adc4:	e75d      	b.n	800ac82 <_ZN27positionEstimatorModelClass4stepEv+0x3a32>
    for (r1 = 0; r1 < 3; r1++) {
 800adc6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800adca:	3301      	adds	r3, #1
 800adcc:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800add0:	e74f      	b.n	800ac72 <_ZN27positionEstimatorModelClass4stepEv+0x3a22>
      }
    }

    for (i = 0; i < 9; i++) {
 800add2:	2300      	movs	r3, #0
 800add4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800add8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800addc:	2b08      	cmp	r3, #8
 800adde:	dc29      	bgt.n	800ae34 <_ZN27positionEstimatorModelClass4stepEv+0x3be4>
      rtDW.P_a[i] = a[i];
 800ade0:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800ade4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ade8:	00db      	lsls	r3, r3, #3
 800adea:	4413      	add	r3, r2
 800adec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800adf0:	1d3a      	adds	r2, r7, #4
 800adf2:	6811      	ldr	r1, [r2, #0]
 800adf4:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800adf8:	32e5      	adds	r2, #229	; 0xe5
 800adfa:	00d2      	lsls	r2, r2, #3
 800adfc:	440a      	add	r2, r1
 800adfe:	e9c2 3400 	strd	r3, r4, [r2]

      // DataStoreWrite: '<S6>/Data Store WriteP'
      rtDW.P_i_m[i] = rtDW.P_a[i];
 800ae02:	1d3b      	adds	r3, r7, #4
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae0a:	33e5      	adds	r3, #229	; 0xe5
 800ae0c:	00db      	lsls	r3, r3, #3
 800ae0e:	4413      	add	r3, r2
 800ae10:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae14:	1d3a      	adds	r2, r7, #4
 800ae16:	6811      	ldr	r1, [r2, #0]
 800ae18:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ae1c:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800ae20:	00d2      	lsls	r2, r2, #3
 800ae22:	440a      	add	r2, r1
 800ae24:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 800ae28:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800ae32:	e7d1      	b.n	800add8 <_ZN27positionEstimatorModelClass4stepEv+0x3b88>
    }

    // DataStoreWrite: '<S6>/Data Store WriteX'
    rtDW.x[0] = rtDW.xNew_p[0];
 800ae34:	1d3b      	adds	r3, r7, #4
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 800ae3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae40:	1d3a      	adds	r2, r7, #4
 800ae42:	6812      	ldr	r2, [r2, #0]
 800ae44:	f602 02a8 	addw	r2, r2, #2216	; 0x8a8
 800ae48:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[1] = rtDW.xNew_p[1];
 800ae4c:	1d3b      	adds	r3, r7, #4
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800ae54:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae58:	1d3a      	adds	r2, r7, #4
 800ae5a:	6812      	ldr	r2, [r2, #0]
 800ae5c:	f502 620b 	add.w	r2, r2, #2224	; 0x8b0
 800ae60:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[2] = rtDW.xNew_p[2];
 800ae64:	1d3b      	adds	r3, r7, #4
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800ae6c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae70:	1d3a      	adds	r2, r7, #4
 800ae72:	6812      	ldr	r2, [r2, #0]
 800ae74:	f602 02b8 	addw	r2, r2, #2232	; 0x8b8
 800ae78:	e9c2 3400 	strd	r3, r4, [r2]

  // End of Outputs for SubSystem: '<S1>/Correct3'

  // Outputs for Atomic SubSystem: '<S1>/Output'
  // DataStoreRead: '<S7>/Data Store Read'
  rtDW.DataStoreRead_f[0] = rtDW.x[0];
 800ae7c:	1d3b      	adds	r3, r7, #4
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 800ae84:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae88:	1d3a      	adds	r2, r7, #4
 800ae8a:	6812      	ldr	r2, [r2, #0]
 800ae8c:	f502 62d3 	add.w	r2, r2, #1688	; 0x698
 800ae90:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.DataStoreRead_f[1] = rtDW.x[1];
 800ae94:	1d3b      	adds	r3, r7, #4
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 800ae9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aea0:	1d3a      	adds	r2, r7, #4
 800aea2:	6812      	ldr	r2, [r2, #0]
 800aea4:	f502 62d4 	add.w	r2, r2, #1696	; 0x6a0
 800aea8:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.DataStoreRead_f[2] = rtDW.x[2];
 800aeac:	1d3b      	adds	r3, r7, #4
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 800aeb4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aeb8:	1d3a      	adds	r2, r7, #4
 800aeba:	6812      	ldr	r2, [r2, #0]
 800aebc:	f502 62d5 	add.w	r2, r2, #1704	; 0x6a8
 800aec0:	e9c2 3400 	strd	r3, r4, [r2]

  // Inport: '<S7>/uBlockOrdering'
  rtDW.uBlockOrdering_b = rtDW.blockOrdering_p;
 800aec4:	1d3b      	adds	r3, r7, #4
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f893 2c46 	ldrb.w	r2, [r3, #3142]	; 0xc46
 800aecc:	1d3b      	adds	r3, r7, #4
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45

  // End of Outputs for SubSystem: '<S1>/Output'

  // Outport: '<Root>/estiZ'
  rtY.estiZ = rtDW.DataStoreRead_f[0];
 800aed4:	1d3b      	adds	r3, r7, #4
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 800aedc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aee0:	1d3a      	adds	r2, r7, #4
 800aee2:	6812      	ldr	r2, [r2, #0]
 800aee4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800aee8:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiVX'
  rtY.estiVX = rtDW.DataStoreRead[2];
 800aeec:	1d3b      	adds	r3, r7, #4
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	e9d3 346c 	ldrd	r3, r4, [r3, #432]	; 0x1b0
 800aef4:	1d3a      	adds	r2, r7, #4
 800aef6:	6812      	ldr	r2, [r2, #0]
 800aef8:	f602 42e8 	addw	r2, r2, #3304	; 0xce8
 800aefc:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiVY'
  rtY.estiVY = rtDW.DataStoreRead[3];
 800af00:	1d3b      	adds	r3, r7, #4
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	e9d3 346e 	ldrd	r3, r4, [r3, #440]	; 0x1b8
 800af08:	1d3a      	adds	r2, r7, #4
 800af0a:	6812      	ldr	r2, [r2, #0]
 800af0c:	f502 624f 	add.w	r2, r2, #3312	; 0xcf0
 800af10:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiVZ'
  rtY.estiVZ = rtDW.DataStoreRead_f[1];
 800af14:	1d3b      	adds	r3, r7, #4
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800af1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af20:	1d3a      	adds	r2, r7, #4
 800af22:	6812      	ldr	r2, [r2, #0]
 800af24:	f602 42f8 	addw	r2, r2, #3320	; 0xcf8
 800af28:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiAX'
  rtY.estiAX = rtDW.DataStoreRead[4];
 800af2c:	1d3b      	adds	r3, r7, #4
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	e9d3 3470 	ldrd	r3, r4, [r3, #448]	; 0x1c0
 800af34:	1d3a      	adds	r2, r7, #4
 800af36:	6812      	ldr	r2, [r2, #0]
 800af38:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800af3c:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiAY'
  rtY.estiAY = rtDW.DataStoreRead[5];
 800af40:	1d3b      	adds	r3, r7, #4
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	e9d3 3472 	ldrd	r3, r4, [r3, #456]	; 0x1c8
 800af48:	1d3a      	adds	r2, r7, #4
 800af4a:	6812      	ldr	r2, [r2, #0]
 800af4c:	f602 5208 	addw	r2, r2, #3336	; 0xd08
 800af50:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiAZ'
  rtY.estiAZ = rtDW.DataStoreRead_f[2];
 800af54:	1d3b      	adds	r3, r7, #4
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 800af5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af60:	1d3a      	adds	r2, r7, #4
 800af62:	6812      	ldr	r2, [r2, #0]
 800af64:	f502 6251 	add.w	r2, r2, #3344	; 0xd10
 800af68:	e9c2 3400 	strd	r3, r4, [r2]

  // Outputs for Atomic SubSystem: '<S1>/Predict'
  // DataStoreRead: '<S8>/Data Store ReadX'
  rtDW.DataStoreReadX_g[0] = rtDW.x[0];
 800af6c:	1d3b      	adds	r3, r7, #4
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 800af74:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af78:	1d3a      	adds	r2, r7, #4
 800af7a:	6812      	ldr	r2, [r2, #0]
 800af7c:	f502 62c4 	add.w	r2, r2, #1568	; 0x620
 800af80:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.DataStoreReadX_g[1] = rtDW.x[1];
 800af84:	1d3b      	adds	r3, r7, #4
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 800af8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af90:	1d3a      	adds	r2, r7, #4
 800af92:	6812      	ldr	r2, [r2, #0]
 800af94:	f502 62c5 	add.w	r2, r2, #1576	; 0x628
 800af98:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.DataStoreReadX_g[2] = rtDW.x[2];
 800af9c:	1d3b      	adds	r3, r7, #4
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 800afa4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800afa8:	1d3a      	adds	r2, r7, #4
 800afaa:	6812      	ldr	r2, [r2, #0]
 800afac:	f502 62c6 	add.w	r2, r2, #1584	; 0x630
 800afb0:	e9c2 3400 	strd	r3, r4, [r2]

  // Outputs for Atomic SubSystem: '<S1>/Output'
  for (i = 0; i < 9; i++) {
 800afb4:	2300      	movs	r3, #0
 800afb6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800afba:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800afbe:	2b08      	cmp	r3, #8
 800afc0:	dc45      	bgt.n	800b04e <_ZN27positionEstimatorModelClass4stepEv+0x3dfe>
    // DataStoreRead: '<S7>/Data Store Read1'
    rtDW.DataStoreRead1_h[i] = rtDW.P_i_m[i];
 800afc2:	1d3b      	adds	r3, r7, #4
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800afca:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800afce:	00db      	lsls	r3, r3, #3
 800afd0:	4413      	add	r3, r2
 800afd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800afd6:	1d3a      	adds	r2, r7, #4
 800afd8:	6811      	ldr	r1, [r2, #0]
 800afda:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800afde:	32d6      	adds	r2, #214	; 0xd6
 800afe0:	00d2      	lsls	r2, r2, #3
 800afe2:	440a      	add	r2, r1
 800afe4:	e9c2 3400 	strd	r3, r4, [r2]

    // DataStoreRead: '<S8>/Data Store ReadP'
    rtDW.P_i[i] = rtDW.P_i_m[i];
 800afe8:	1d3b      	adds	r3, r7, #4
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aff0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800aff4:	00db      	lsls	r3, r3, #3
 800aff6:	4413      	add	r3, r2
 800aff8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800affc:	1d3a      	adds	r2, r7, #4
 800affe:	6811      	ldr	r1, [r2, #0]
 800b000:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b004:	32ca      	adds	r2, #202	; 0xca
 800b006:	00d2      	lsls	r2, r2, #3
 800b008:	440a      	add	r2, r1
 800b00a:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S8>/Predict'
    u = rtDW.P_i[i];
 800b00e:	1d3b      	adds	r3, r7, #4
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b016:	33ca      	adds	r3, #202	; 0xca
 800b018:	00db      	lsls	r3, r3, #3
 800b01a:	4413      	add	r3, r2
 800b01c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b020:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800b024:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.P_i[i] = u;
 800b028:	1d3b      	adds	r3, r7, #4
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b030:	33ca      	adds	r3, #202	; 0xca
 800b032:	00db      	lsls	r3, r3, #3
 800b034:	441a      	add	r2, r3
 800b036:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800b03a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b03e:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 9; i++) {
 800b042:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b046:	3301      	adds	r3, #1
 800b048:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b04c:	e7b5      	b.n	800afba <_ZN27positionEstimatorModelClass4stepEv+0x3d6a>
  // End of Outputs for SubSystem: '<S1>/Output'

  // MATLAB Function: '<S8>/Predict' incorporates:
  //   Constant: '<S1>/Q'

  for (r1 = 0; r1 < 3; r1++) {
 800b04e:	2300      	movs	r3, #0
 800b050:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800b054:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b058:	2b02      	cmp	r3, #2
 800b05a:	f300 827d 	bgt.w	800b558 <_ZN27positionEstimatorModelClass4stepEv+0x4308>
    u = 0.0;
 800b05e:	f04f 0300 	mov.w	r3, #0
 800b062:	f04f 0400 	mov.w	r4, #0
 800b066:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800b06a:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800b06e:	2300      	movs	r3, #0
 800b070:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b074:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b078:	2b02      	cmp	r3, #2
 800b07a:	f300 8129 	bgt.w	800b2d0 <_ZN27positionEstimatorModelClass4stepEv+0x4080>
      u += a_1[3 * i + r1] * rtDW.DataStoreReadX_g[i];
 800b07e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b082:	4613      	mov	r3, r2
 800b084:	005b      	lsls	r3, r3, #1
 800b086:	441a      	add	r2, r3
 800b088:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b08c:	4413      	add	r3, r2
 800b08e:	4a8f      	ldr	r2, [pc, #572]	; (800b2cc <_ZN27positionEstimatorModelClass4stepEv+0x407c>)
 800b090:	00db      	lsls	r3, r3, #3
 800b092:	4413      	add	r3, r2
 800b094:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b098:	1d3b      	adds	r3, r7, #4
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b0a0:	33c4      	adds	r3, #196	; 0xc4
 800b0a2:	00db      	lsls	r3, r3, #3
 800b0a4:	4413      	add	r3, r2
 800b0a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	4623      	mov	r3, r4
 800b0ae:	f7f5 faab 	bl	8000608 <__aeabi_dmul>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	460c      	mov	r4, r1
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	4623      	mov	r3, r4
 800b0ba:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800b0be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0c2:	f7f5 f8eb 	bl	800029c <__adddf3>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	460c      	mov	r4, r1
 800b0ca:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800b0ce:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[r1 + 3 * i] = 0.0;
 800b0d2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b0d6:	4613      	mov	r3, r2
 800b0d8:	005b      	lsls	r3, r3, #1
 800b0da:	441a      	add	r2, r3
 800b0dc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b0e0:	4413      	add	r3, r2
 800b0e2:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800b0e6:	00db      	lsls	r3, r3, #3
 800b0e8:	441a      	add	r2, r3
 800b0ea:	f04f 0300 	mov.w	r3, #0
 800b0ee:	f04f 0400 	mov.w	r4, #0
 800b0f2:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = imvec_1[3 * i + r1];
 800b0f6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	005b      	lsls	r3, r3, #1
 800b0fe:	441a      	add	r2, r3
 800b100:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b104:	4413      	add	r3, r2
 800b106:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800b10a:	00db      	lsls	r3, r3, #3
 800b10c:	4413      	add	r3, r2
 800b10e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b112:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b116:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_i[3 * i] * a_1[r1];
 800b11a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b11e:	4613      	mov	r3, r2
 800b120:	005b      	lsls	r3, r3, #1
 800b122:	4413      	add	r3, r2
 800b124:	1d3a      	adds	r2, r7, #4
 800b126:	6812      	ldr	r2, [r2, #0]
 800b128:	33ca      	adds	r3, #202	; 0xca
 800b12a:	00db      	lsls	r3, r3, #3
 800b12c:	4413      	add	r3, r2
 800b12e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b132:	4a66      	ldr	r2, [pc, #408]	; (800b2cc <_ZN27positionEstimatorModelClass4stepEv+0x407c>)
 800b134:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b138:	00db      	lsls	r3, r3, #3
 800b13a:	4413      	add	r3, r2
 800b13c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b140:	461a      	mov	r2, r3
 800b142:	4623      	mov	r3, r4
 800b144:	f7f5 fa60 	bl	8000608 <__aeabi_dmul>
 800b148:	4603      	mov	r3, r0
 800b14a:	460c      	mov	r4, r1
 800b14c:	461a      	mov	r2, r3
 800b14e:	4623      	mov	r3, r4
 800b150:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800b154:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b158:	f7f5 f8a0 	bl	800029c <__adddf3>
 800b15c:	4603      	mov	r3, r0
 800b15e:	460c      	mov	r4, r1
 800b160:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b164:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[r1 + 3 * i] = a22;
 800b168:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b16c:	4613      	mov	r3, r2
 800b16e:	005b      	lsls	r3, r3, #1
 800b170:	441a      	add	r2, r3
 800b172:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b176:	4413      	add	r3, r2
 800b178:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800b17c:	00db      	lsls	r3, r3, #3
 800b17e:	441a      	add	r2, r3
 800b180:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800b184:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b188:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = imvec_1[3 * i + r1];
 800b18c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b190:	4613      	mov	r3, r2
 800b192:	005b      	lsls	r3, r3, #1
 800b194:	441a      	add	r2, r3
 800b196:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b19a:	4413      	add	r3, r2
 800b19c:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800b1a0:	00db      	lsls	r3, r3, #3
 800b1a2:	4413      	add	r3, r2
 800b1a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b1a8:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b1ac:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_i[3 * i + 1] * a_1[r1 + 3];
 800b1b0:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	005b      	lsls	r3, r3, #1
 800b1b8:	4413      	add	r3, r2
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	1d3a      	adds	r2, r7, #4
 800b1be:	6812      	ldr	r2, [r2, #0]
 800b1c0:	33ca      	adds	r3, #202	; 0xca
 800b1c2:	00db      	lsls	r3, r3, #3
 800b1c4:	4413      	add	r3, r2
 800b1c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b1ca:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b1ce:	3303      	adds	r3, #3
 800b1d0:	4a3e      	ldr	r2, [pc, #248]	; (800b2cc <_ZN27positionEstimatorModelClass4stepEv+0x407c>)
 800b1d2:	00db      	lsls	r3, r3, #3
 800b1d4:	4413      	add	r3, r2
 800b1d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b1da:	461a      	mov	r2, r3
 800b1dc:	4623      	mov	r3, r4
 800b1de:	f7f5 fa13 	bl	8000608 <__aeabi_dmul>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	460c      	mov	r4, r1
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	4623      	mov	r3, r4
 800b1ea:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800b1ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1f2:	f7f5 f853 	bl	800029c <__adddf3>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	460c      	mov	r4, r1
 800b1fa:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b1fe:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[r1 + 3 * i] = a22;
 800b202:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b206:	4613      	mov	r3, r2
 800b208:	005b      	lsls	r3, r3, #1
 800b20a:	441a      	add	r2, r3
 800b20c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b210:	4413      	add	r3, r2
 800b212:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800b216:	00db      	lsls	r3, r3, #3
 800b218:	441a      	add	r2, r3
 800b21a:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800b21e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b222:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = imvec_1[3 * i + r1];
 800b226:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b22a:	4613      	mov	r3, r2
 800b22c:	005b      	lsls	r3, r3, #1
 800b22e:	441a      	add	r2, r3
 800b230:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b234:	4413      	add	r3, r2
 800b236:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800b23a:	00db      	lsls	r3, r3, #3
 800b23c:	4413      	add	r3, r2
 800b23e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b242:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b246:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_i[3 * i + 2] * a_1[r1 + 6];
 800b24a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b24e:	4613      	mov	r3, r2
 800b250:	005b      	lsls	r3, r3, #1
 800b252:	4413      	add	r3, r2
 800b254:	3302      	adds	r3, #2
 800b256:	1d3a      	adds	r2, r7, #4
 800b258:	6812      	ldr	r2, [r2, #0]
 800b25a:	33ca      	adds	r3, #202	; 0xca
 800b25c:	00db      	lsls	r3, r3, #3
 800b25e:	4413      	add	r3, r2
 800b260:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b264:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b268:	3306      	adds	r3, #6
 800b26a:	4a18      	ldr	r2, [pc, #96]	; (800b2cc <_ZN27positionEstimatorModelClass4stepEv+0x407c>)
 800b26c:	00db      	lsls	r3, r3, #3
 800b26e:	4413      	add	r3, r2
 800b270:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b274:	461a      	mov	r2, r3
 800b276:	4623      	mov	r3, r4
 800b278:	f7f5 f9c6 	bl	8000608 <__aeabi_dmul>
 800b27c:	4603      	mov	r3, r0
 800b27e:	460c      	mov	r4, r1
 800b280:	461a      	mov	r2, r3
 800b282:	4623      	mov	r3, r4
 800b284:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800b288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b28c:	f7f5 f806 	bl	800029c <__adddf3>
 800b290:	4603      	mov	r3, r0
 800b292:	460c      	mov	r4, r1
 800b294:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b298:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[r1 + 3 * i] = a22;
 800b29c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b2a0:	4613      	mov	r3, r2
 800b2a2:	005b      	lsls	r3, r3, #1
 800b2a4:	441a      	add	r2, r3
 800b2a6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b2aa:	4413      	add	r3, r2
 800b2ac:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800b2b0:	00db      	lsls	r3, r3, #3
 800b2b2:	441a      	add	r2, r3
 800b2b4:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800b2b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b2bc:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800b2c0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b2ca:	e6d3      	b.n	800b074 <_ZN27positionEstimatorModelClass4stepEv+0x3e24>
 800b2cc:	0802d088 	.word	0x0802d088
    }

    rtDW.xNew_k[r1] = u;
 800b2d0:	1d3b      	adds	r3, r7, #4
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b2d8:	33c7      	adds	r3, #199	; 0xc7
 800b2da:	00db      	lsls	r3, r3, #3
 800b2dc:	441a      	add	r2, r3
 800b2de:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800b2e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b2e6:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b2f0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b2f4:	2b02      	cmp	r3, #2
 800b2f6:	f300 8129 	bgt.w	800b54c <_ZN27positionEstimatorModelClass4stepEv+0x42fc>
      a[r1 + 3 * i] = 0.0;
 800b2fa:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b2fe:	4613      	mov	r3, r2
 800b300:	005b      	lsls	r3, r3, #1
 800b302:	441a      	add	r2, r3
 800b304:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b308:	4413      	add	r3, r2
 800b30a:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800b30e:	00db      	lsls	r3, r3, #3
 800b310:	441a      	add	r2, r3
 800b312:	f04f 0300 	mov.w	r3, #0
 800b316:	f04f 0400 	mov.w	r4, #0
 800b31a:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = a[3 * i + r1];
 800b31e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b322:	4613      	mov	r3, r2
 800b324:	005b      	lsls	r3, r3, #1
 800b326:	441a      	add	r2, r3
 800b328:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b32c:	4413      	add	r3, r2
 800b32e:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800b332:	00db      	lsls	r3, r3, #3
 800b334:	4413      	add	r3, r2
 800b336:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b33a:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b33e:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += b[3 * i] * imvec_1[r1];
 800b342:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b346:	4613      	mov	r3, r2
 800b348:	005b      	lsls	r3, r3, #1
 800b34a:	4413      	add	r3, r2
 800b34c:	4ac4      	ldr	r2, [pc, #784]	; (800b660 <_ZN27positionEstimatorModelClass4stepEv+0x4410>)
 800b34e:	00db      	lsls	r3, r3, #3
 800b350:	4413      	add	r3, r2
 800b352:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b356:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800b35a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b35e:	00db      	lsls	r3, r3, #3
 800b360:	4413      	add	r3, r2
 800b362:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b366:	461a      	mov	r2, r3
 800b368:	4623      	mov	r3, r4
 800b36a:	f7f5 f94d 	bl	8000608 <__aeabi_dmul>
 800b36e:	4603      	mov	r3, r0
 800b370:	460c      	mov	r4, r1
 800b372:	461a      	mov	r2, r3
 800b374:	4623      	mov	r3, r4
 800b376:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800b37a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b37e:	f7f4 ff8d 	bl	800029c <__adddf3>
 800b382:	4603      	mov	r3, r0
 800b384:	460c      	mov	r4, r1
 800b386:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b38a:	e9c2 3400 	strd	r3, r4, [r2]
      a[r1 + 3 * i] = a22;
 800b38e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b392:	4613      	mov	r3, r2
 800b394:	005b      	lsls	r3, r3, #1
 800b396:	441a      	add	r2, r3
 800b398:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b39c:	4413      	add	r3, r2
 800b39e:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800b3a2:	00db      	lsls	r3, r3, #3
 800b3a4:	441a      	add	r2, r3
 800b3a6:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800b3aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b3ae:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = a[3 * i + r1];
 800b3b2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	005b      	lsls	r3, r3, #1
 800b3ba:	441a      	add	r2, r3
 800b3bc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b3c0:	4413      	add	r3, r2
 800b3c2:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800b3c6:	00db      	lsls	r3, r3, #3
 800b3c8:	4413      	add	r3, r2
 800b3ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b3ce:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b3d2:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += b[3 * i + 1] * imvec_1[r1 + 3];
 800b3d6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b3da:	4613      	mov	r3, r2
 800b3dc:	005b      	lsls	r3, r3, #1
 800b3de:	4413      	add	r3, r2
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	4a9f      	ldr	r2, [pc, #636]	; (800b660 <_ZN27positionEstimatorModelClass4stepEv+0x4410>)
 800b3e4:	00db      	lsls	r3, r3, #3
 800b3e6:	4413      	add	r3, r2
 800b3e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b3ec:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b3f0:	3303      	adds	r3, #3
 800b3f2:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800b3f6:	00db      	lsls	r3, r3, #3
 800b3f8:	4413      	add	r3, r2
 800b3fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b3fe:	461a      	mov	r2, r3
 800b400:	4623      	mov	r3, r4
 800b402:	f7f5 f901 	bl	8000608 <__aeabi_dmul>
 800b406:	4603      	mov	r3, r0
 800b408:	460c      	mov	r4, r1
 800b40a:	461a      	mov	r2, r3
 800b40c:	4623      	mov	r3, r4
 800b40e:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800b412:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b416:	f7f4 ff41 	bl	800029c <__adddf3>
 800b41a:	4603      	mov	r3, r0
 800b41c:	460c      	mov	r4, r1
 800b41e:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b422:	e9c2 3400 	strd	r3, r4, [r2]
      a[r1 + 3 * i] = a22;
 800b426:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b42a:	4613      	mov	r3, r2
 800b42c:	005b      	lsls	r3, r3, #1
 800b42e:	441a      	add	r2, r3
 800b430:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b434:	4413      	add	r3, r2
 800b436:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800b43a:	00db      	lsls	r3, r3, #3
 800b43c:	441a      	add	r2, r3
 800b43e:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800b442:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b446:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = a[3 * i + r1];
 800b44a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b44e:	4613      	mov	r3, r2
 800b450:	005b      	lsls	r3, r3, #1
 800b452:	441a      	add	r2, r3
 800b454:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b458:	4413      	add	r3, r2
 800b45a:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800b45e:	00db      	lsls	r3, r3, #3
 800b460:	4413      	add	r3, r2
 800b462:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b466:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b46a:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += b[3 * i + 2] * imvec_1[r1 + 6];
 800b46e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b472:	4613      	mov	r3, r2
 800b474:	005b      	lsls	r3, r3, #1
 800b476:	4413      	add	r3, r2
 800b478:	3302      	adds	r3, #2
 800b47a:	4a79      	ldr	r2, [pc, #484]	; (800b660 <_ZN27positionEstimatorModelClass4stepEv+0x4410>)
 800b47c:	00db      	lsls	r3, r3, #3
 800b47e:	4413      	add	r3, r2
 800b480:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b484:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b488:	3306      	adds	r3, #6
 800b48a:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800b48e:	00db      	lsls	r3, r3, #3
 800b490:	4413      	add	r3, r2
 800b492:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b496:	461a      	mov	r2, r3
 800b498:	4623      	mov	r3, r4
 800b49a:	f7f5 f8b5 	bl	8000608 <__aeabi_dmul>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	460c      	mov	r4, r1
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	4623      	mov	r3, r4
 800b4a6:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800b4aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4ae:	f7f4 fef5 	bl	800029c <__adddf3>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	460c      	mov	r4, r1
 800b4b6:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b4ba:	e9c2 3400 	strd	r3, r4, [r2]
      a[r1 + 3 * i] = a22;
 800b4be:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	005b      	lsls	r3, r3, #1
 800b4c6:	441a      	add	r2, r3
 800b4c8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b4cc:	4413      	add	r3, r2
 800b4ce:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800b4d2:	00db      	lsls	r3, r3, #3
 800b4d4:	441a      	add	r2, r3
 800b4d6:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800b4da:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b4de:	e9c2 3400 	strd	r3, r4, [r2]
      b_a[i + 3 * r1] = b_a_1[i] * rtP.Q_Value * b_a_1[r1];
 800b4e2:	4a60      	ldr	r2, [pc, #384]	; (800b664 <_ZN27positionEstimatorModelClass4stepEv+0x4414>)
 800b4e4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b4e8:	00db      	lsls	r3, r3, #3
 800b4ea:	4413      	add	r3, r2
 800b4ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b4f0:	4b5d      	ldr	r3, [pc, #372]	; (800b668 <_ZN27positionEstimatorModelClass4stepEv+0x4418>)
 800b4f2:	e9d3 3484 	ldrd	r3, r4, [r3, #528]	; 0x210
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	4623      	mov	r3, r4
 800b4fa:	f7f5 f885 	bl	8000608 <__aeabi_dmul>
 800b4fe:	4603      	mov	r3, r0
 800b500:	460c      	mov	r4, r1
 800b502:	4698      	mov	r8, r3
 800b504:	46a1      	mov	r9, r4
 800b506:	4a57      	ldr	r2, [pc, #348]	; (800b664 <_ZN27positionEstimatorModelClass4stepEv+0x4414>)
 800b508:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b50c:	00db      	lsls	r3, r3, #3
 800b50e:	4413      	add	r3, r2
 800b510:	e9d3 1200 	ldrd	r1, r2, [r3]
 800b514:	f8d7 08c4 	ldr.w	r0, [r7, #2244]	; 0x8c4
 800b518:	4603      	mov	r3, r0
 800b51a:	005b      	lsls	r3, r3, #1
 800b51c:	4418      	add	r0, r3
 800b51e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b522:	18c5      	adds	r5, r0, r3
 800b524:	4613      	mov	r3, r2
 800b526:	460a      	mov	r2, r1
 800b528:	4640      	mov	r0, r8
 800b52a:	4649      	mov	r1, r9
 800b52c:	f7f5 f86c 	bl	8000608 <__aeabi_dmul>
 800b530:	4603      	mov	r3, r0
 800b532:	460c      	mov	r4, r1
 800b534:	f507 7112 	add.w	r1, r7, #584	; 0x248
 800b538:	00ea      	lsls	r2, r5, #3
 800b53a:	440a      	add	r2, r1
 800b53c:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800b540:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b544:	3301      	adds	r3, #1
 800b546:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b54a:	e6d1      	b.n	800b2f0 <_ZN27positionEstimatorModelClass4stepEv+0x40a0>
  for (r1 = 0; r1 < 3; r1++) {
 800b54c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b550:	3301      	adds	r3, #1
 800b552:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800b556:	e57d      	b.n	800b054 <_ZN27positionEstimatorModelClass4stepEv+0x3e04>
    }
  }

  for (i = 0; i < 9; i++) {
 800b558:	2300      	movs	r3, #0
 800b55a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b55e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b562:	2b08      	cmp	r3, #8
 800b564:	dc37      	bgt.n	800b5d6 <_ZN27positionEstimatorModelClass4stepEv+0x4386>
    rtDW.P_i[i] = a[i] + b_a[i];
 800b566:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800b56a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b56e:	00db      	lsls	r3, r3, #3
 800b570:	4413      	add	r3, r2
 800b572:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b576:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800b57a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b57e:	00db      	lsls	r3, r3, #3
 800b580:	4413      	add	r3, r2
 800b582:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b586:	461a      	mov	r2, r3
 800b588:	4623      	mov	r3, r4
 800b58a:	f7f4 fe87 	bl	800029c <__adddf3>
 800b58e:	4603      	mov	r3, r0
 800b590:	460c      	mov	r4, r1
 800b592:	1d3a      	adds	r2, r7, #4
 800b594:	6811      	ldr	r1, [r2, #0]
 800b596:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b59a:	32ca      	adds	r2, #202	; 0xca
 800b59c:	00d2      	lsls	r2, r2, #3
 800b59e:	440a      	add	r2, r1
 800b5a0:	e9c2 3400 	strd	r3, r4, [r2]

    // DataStoreWrite: '<S8>/Data Store WriteP'
    rtDW.P_i_m[i] = rtDW.P_i[i];
 800b5a4:	1d3b      	adds	r3, r7, #4
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b5ac:	33ca      	adds	r3, #202	; 0xca
 800b5ae:	00db      	lsls	r3, r3, #3
 800b5b0:	4413      	add	r3, r2
 800b5b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b5b6:	1d3a      	adds	r2, r7, #4
 800b5b8:	6811      	ldr	r1, [r2, #0]
 800b5ba:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b5be:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800b5c2:	00d2      	lsls	r2, r2, #3
 800b5c4:	440a      	add	r2, r1
 800b5c6:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 9; i++) {
 800b5ca:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b5d4:	e7c3      	b.n	800b55e <_ZN27positionEstimatorModelClass4stepEv+0x430e>
  }

  // DataStoreWrite: '<S8>/Data Store WriteX'
  rtDW.x[0] = rtDW.xNew_k[0];
 800b5d6:	1d3b      	adds	r3, r7, #4
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 800b5de:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b5e2:	1d3a      	adds	r2, r7, #4
 800b5e4:	6812      	ldr	r2, [r2, #0]
 800b5e6:	f602 02a8 	addw	r2, r2, #2216	; 0x8a8
 800b5ea:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.x[1] = rtDW.xNew_k[1];
 800b5ee:	1d3b      	adds	r3, r7, #4
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800b5f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b5fa:	1d3a      	adds	r2, r7, #4
 800b5fc:	6812      	ldr	r2, [r2, #0]
 800b5fe:	f502 620b 	add.w	r2, r2, #2224	; 0x8b0
 800b602:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.x[2] = rtDW.xNew_k[2];
 800b606:	1d3b      	adds	r3, r7, #4
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 800b60e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b612:	1d3a      	adds	r2, r7, #4
 800b614:	6812      	ldr	r2, [r2, #0]
 800b616:	f602 02b8 	addw	r2, r2, #2232	; 0x8b8
 800b61a:	e9c2 3400 	strd	r3, r4, [r2]

  // End of Outputs for SubSystem: '<S1>/Predict'

  // Outputs for Atomic SubSystem: '<S2>/Predict'
  // DataStoreRead: '<S16>/Data Store ReadX'
  for (i = 0; i < 6; i++) {
 800b61e:	2300      	movs	r3, #0
 800b620:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b624:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b628:	2b05      	cmp	r3, #5
 800b62a:	dc1f      	bgt.n	800b66c <_ZN27positionEstimatorModelClass4stepEv+0x441c>
    rtDW.DataStoreReadX[i] = rtDW.x_p[i];
 800b62c:	1d3b      	adds	r3, r7, #4
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b634:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b638:	00db      	lsls	r3, r3, #3
 800b63a:	4413      	add	r3, r2
 800b63c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b640:	1d3a      	adds	r2, r7, #4
 800b642:	6811      	ldr	r1, [r2, #0]
 800b644:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b648:	3204      	adds	r2, #4
 800b64a:	00d2      	lsls	r2, r2, #3
 800b64c:	440a      	add	r2, r1
 800b64e:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 6; i++) {
 800b652:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b656:	3301      	adds	r3, #1
 800b658:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b65c:	e7e2      	b.n	800b624 <_ZN27positionEstimatorModelClass4stepEv+0x43d4>
 800b65e:	bf00      	nop
 800b660:	0802d0d0 	.word	0x0802d0d0
 800b664:	0802d118 	.word	0x0802d118
 800b668:	20000290 	.word	0x20000290
  }

  // End of DataStoreRead: '<S16>/Data Store ReadX'
  for (i = 0; i < 36; i++) {
 800b66c:	2300      	movs	r3, #0
 800b66e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b672:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b676:	2b23      	cmp	r3, #35	; 0x23
 800b678:	dc32      	bgt.n	800b6e0 <_ZN27positionEstimatorModelClass4stepEv+0x4490>
    // DataStoreRead: '<S16>/Data Store ReadP'
    rtDW.P_n[i] = rtDW.P_n_c[i];
 800b67a:	1d3b      	adds	r3, r7, #4
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b682:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800b686:	00db      	lsls	r3, r3, #3
 800b688:	4413      	add	r3, r2
 800b68a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b68e:	1d3a      	adds	r2, r7, #4
 800b690:	6811      	ldr	r1, [r2, #0]
 800b692:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b696:	3210      	adds	r2, #16
 800b698:	00d2      	lsls	r2, r2, #3
 800b69a:	440a      	add	r2, r1
 800b69c:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S16>/Predict'
    u = rtDW.P_n[i];
 800b6a0:	1d3b      	adds	r3, r7, #4
 800b6a2:	681a      	ldr	r2, [r3, #0]
 800b6a4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b6a8:	3310      	adds	r3, #16
 800b6aa:	00db      	lsls	r3, r3, #3
 800b6ac:	4413      	add	r3, r2
 800b6ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b6b2:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800b6b6:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.P_n[i] = u;
 800b6ba:	1d3b      	adds	r3, r7, #4
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b6c2:	3310      	adds	r3, #16
 800b6c4:	00db      	lsls	r3, r3, #3
 800b6c6:	441a      	add	r2, r3
 800b6c8:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800b6cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b6d0:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 36; i++) {
 800b6d4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b6d8:	3301      	adds	r3, #1
 800b6da:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b6de:	e7c8      	b.n	800b672 <_ZN27positionEstimatorModelClass4stepEv+0x4422>
  }

  // MATLAB Function: '<S16>/Predict' incorporates:
  //   Constant: '<S2>/Q'

  for (r1 = 0; r1 < 6; r1++) {
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800b6e6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b6ea:	2b05      	cmp	r3, #5
 800b6ec:	f300 8196 	bgt.w	800ba1c <_ZN27positionEstimatorModelClass4stepEv+0x47cc>
    u = 0.0;
 800b6f0:	f04f 0300 	mov.w	r3, #0
 800b6f4:	f04f 0400 	mov.w	r4, #0
 800b6f8:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800b6fc:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 800b700:	2300      	movs	r3, #0
 800b702:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b706:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b70a:	2b05      	cmp	r3, #5
 800b70c:	f300 80af 	bgt.w	800b86e <_ZN27positionEstimatorModelClass4stepEv+0x461e>
      u += a_2[6 * i + r1] * rtDW.DataStoreReadX[i];
 800b710:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b714:	4613      	mov	r3, r2
 800b716:	005b      	lsls	r3, r3, #1
 800b718:	4413      	add	r3, r2
 800b71a:	005b      	lsls	r3, r3, #1
 800b71c:	461a      	mov	r2, r3
 800b71e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b722:	4413      	add	r3, r2
 800b724:	4ab9      	ldr	r2, [pc, #740]	; (800ba0c <_ZN27positionEstimatorModelClass4stepEv+0x47bc>)
 800b726:	00db      	lsls	r3, r3, #3
 800b728:	4413      	add	r3, r2
 800b72a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b72e:	1d3b      	adds	r3, r7, #4
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b736:	3304      	adds	r3, #4
 800b738:	00db      	lsls	r3, r3, #3
 800b73a:	4413      	add	r3, r2
 800b73c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b740:	461a      	mov	r2, r3
 800b742:	4623      	mov	r3, r4
 800b744:	f7f4 ff60 	bl	8000608 <__aeabi_dmul>
 800b748:	4603      	mov	r3, r0
 800b74a:	460c      	mov	r4, r1
 800b74c:	461a      	mov	r2, r3
 800b74e:	4623      	mov	r3, r4
 800b750:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800b754:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b758:	f7f4 fda0 	bl	800029c <__adddf3>
 800b75c:	4603      	mov	r3, r0
 800b75e:	460c      	mov	r4, r1
 800b760:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800b764:	e9c2 3400 	strd	r3, r4, [r2]
      gain_0[r1 + 6 * i] = 0.0;
 800b768:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b76c:	4613      	mov	r3, r2
 800b76e:	005b      	lsls	r3, r3, #1
 800b770:	4413      	add	r3, r2
 800b772:	005b      	lsls	r3, r3, #1
 800b774:	461a      	mov	r2, r3
 800b776:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b77a:	4413      	add	r3, r2
 800b77c:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800b780:	00db      	lsls	r3, r3, #3
 800b782:	441a      	add	r2, r3
 800b784:	f04f 0300 	mov.w	r3, #0
 800b788:	f04f 0400 	mov.w	r4, #0
 800b78c:	e9c2 3400 	strd	r3, r4, [r2]
      for (k = 0; k < 6; k++) {
 800b790:	2300      	movs	r3, #0
 800b792:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800b796:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800b79a:	2b05      	cmp	r3, #5
 800b79c:	dc61      	bgt.n	800b862 <_ZN27positionEstimatorModelClass4stepEv+0x4612>
        a22 = gain_0[6 * i + r1];
 800b79e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	005b      	lsls	r3, r3, #1
 800b7a6:	4413      	add	r3, r2
 800b7a8:	005b      	lsls	r3, r3, #1
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b7b0:	4413      	add	r3, r2
 800b7b2:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800b7b6:	00db      	lsls	r3, r3, #3
 800b7b8:	4413      	add	r3, r2
 800b7ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b7be:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b7c2:	e9c2 3400 	strd	r3, r4, [r2]
        a22 += a_2[6 * k + r1] * rtDW.P_n[6 * i + k];
 800b7c6:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	005b      	lsls	r3, r3, #1
 800b7ce:	4413      	add	r3, r2
 800b7d0:	005b      	lsls	r3, r3, #1
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b7d8:	4413      	add	r3, r2
 800b7da:	4a8c      	ldr	r2, [pc, #560]	; (800ba0c <_ZN27positionEstimatorModelClass4stepEv+0x47bc>)
 800b7dc:	00db      	lsls	r3, r3, #3
 800b7de:	4413      	add	r3, r2
 800b7e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7e4:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	005b      	lsls	r3, r3, #1
 800b7ec:	4413      	add	r3, r2
 800b7ee:	005b      	lsls	r3, r3, #1
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800b7f6:	4413      	add	r3, r2
 800b7f8:	1d3a      	adds	r2, r7, #4
 800b7fa:	6812      	ldr	r2, [r2, #0]
 800b7fc:	3310      	adds	r3, #16
 800b7fe:	00db      	lsls	r3, r3, #3
 800b800:	4413      	add	r3, r2
 800b802:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b806:	461a      	mov	r2, r3
 800b808:	4623      	mov	r3, r4
 800b80a:	f7f4 fefd 	bl	8000608 <__aeabi_dmul>
 800b80e:	4603      	mov	r3, r0
 800b810:	460c      	mov	r4, r1
 800b812:	461a      	mov	r2, r3
 800b814:	4623      	mov	r3, r4
 800b816:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800b81a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b81e:	f7f4 fd3d 	bl	800029c <__adddf3>
 800b822:	4603      	mov	r3, r0
 800b824:	460c      	mov	r4, r1
 800b826:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b82a:	e9c2 3400 	strd	r3, r4, [r2]
        gain_0[r1 + 6 * i] = a22;
 800b82e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b832:	4613      	mov	r3, r2
 800b834:	005b      	lsls	r3, r3, #1
 800b836:	4413      	add	r3, r2
 800b838:	005b      	lsls	r3, r3, #1
 800b83a:	461a      	mov	r2, r3
 800b83c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b840:	4413      	add	r3, r2
 800b842:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800b846:	00db      	lsls	r3, r3, #3
 800b848:	441a      	add	r2, r3
 800b84a:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800b84e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b852:	e9c2 3400 	strd	r3, r4, [r2]
      for (k = 0; k < 6; k++) {
 800b856:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800b85a:	3301      	adds	r3, #1
 800b85c:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800b860:	e799      	b.n	800b796 <_ZN27positionEstimatorModelClass4stepEv+0x4546>
    for (i = 0; i < 6; i++) {
 800b862:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b866:	3301      	adds	r3, #1
 800b868:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b86c:	e74b      	b.n	800b706 <_ZN27positionEstimatorModelClass4stepEv+0x44b6>
      }
    }

    rtDW.xNew[r1] = u;
 800b86e:	1d3b      	adds	r3, r7, #4
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b876:	330a      	adds	r3, #10
 800b878:	00db      	lsls	r3, r3, #3
 800b87a:	441a      	add	r2, r3
 800b87c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800b880:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b884:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 800b888:	2300      	movs	r3, #0
 800b88a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b88e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b892:	2b05      	cmp	r3, #5
 800b894:	f300 80b3 	bgt.w	800b9fe <_ZN27positionEstimatorModelClass4stepEv+0x47ae>
      a_0[r1 + 6 * i] = 0.0;
 800b898:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b89c:	4613      	mov	r3, r2
 800b89e:	005b      	lsls	r3, r3, #1
 800b8a0:	4413      	add	r3, r2
 800b8a2:	005b      	lsls	r3, r3, #1
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b8aa:	4413      	add	r3, r2
 800b8ac:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800b8b0:	00db      	lsls	r3, r3, #3
 800b8b2:	441a      	add	r2, r3
 800b8b4:	f04f 0300 	mov.w	r3, #0
 800b8b8:	f04f 0400 	mov.w	r4, #0
 800b8bc:	e9c2 3400 	strd	r3, r4, [r2]
      for (k = 0; k < 6; k++) {
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800b8c6:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800b8ca:	2b05      	cmp	r3, #5
 800b8cc:	dc60      	bgt.n	800b990 <_ZN27positionEstimatorModelClass4stepEv+0x4740>
        a22 = a_0[6 * i + r1];
 800b8ce:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b8d2:	4613      	mov	r3, r2
 800b8d4:	005b      	lsls	r3, r3, #1
 800b8d6:	4413      	add	r3, r2
 800b8d8:	005b      	lsls	r3, r3, #1
 800b8da:	461a      	mov	r2, r3
 800b8dc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b8e0:	4413      	add	r3, r2
 800b8e2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800b8e6:	00db      	lsls	r3, r3, #3
 800b8e8:	4413      	add	r3, r2
 800b8ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b8ee:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b8f2:	e9c2 3400 	strd	r3, r4, [r2]
        a22 += gain_0[6 * k + r1] * b_0[6 * i + k];
 800b8f6:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	005b      	lsls	r3, r3, #1
 800b8fe:	4413      	add	r3, r2
 800b900:	005b      	lsls	r3, r3, #1
 800b902:	461a      	mov	r2, r3
 800b904:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b908:	4413      	add	r3, r2
 800b90a:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800b90e:	00db      	lsls	r3, r3, #3
 800b910:	4413      	add	r3, r2
 800b912:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b916:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b91a:	4613      	mov	r3, r2
 800b91c:	005b      	lsls	r3, r3, #1
 800b91e:	4413      	add	r3, r2
 800b920:	005b      	lsls	r3, r3, #1
 800b922:	461a      	mov	r2, r3
 800b924:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800b928:	4413      	add	r3, r2
 800b92a:	4a39      	ldr	r2, [pc, #228]	; (800ba10 <_ZN27positionEstimatorModelClass4stepEv+0x47c0>)
 800b92c:	00db      	lsls	r3, r3, #3
 800b92e:	4413      	add	r3, r2
 800b930:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b934:	461a      	mov	r2, r3
 800b936:	4623      	mov	r3, r4
 800b938:	f7f4 fe66 	bl	8000608 <__aeabi_dmul>
 800b93c:	4603      	mov	r3, r0
 800b93e:	460c      	mov	r4, r1
 800b940:	461a      	mov	r2, r3
 800b942:	4623      	mov	r3, r4
 800b944:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800b948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b94c:	f7f4 fca6 	bl	800029c <__adddf3>
 800b950:	4603      	mov	r3, r0
 800b952:	460c      	mov	r4, r1
 800b954:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b958:	e9c2 3400 	strd	r3, r4, [r2]
        a_0[r1 + 6 * i] = a22;
 800b95c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b960:	4613      	mov	r3, r2
 800b962:	005b      	lsls	r3, r3, #1
 800b964:	4413      	add	r3, r2
 800b966:	005b      	lsls	r3, r3, #1
 800b968:	461a      	mov	r2, r3
 800b96a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b96e:	4413      	add	r3, r2
 800b970:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800b974:	00db      	lsls	r3, r3, #3
 800b976:	441a      	add	r2, r3
 800b978:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800b97c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b980:	e9c2 3400 	strd	r3, r4, [r2]
      for (k = 0; k < 6; k++) {
 800b984:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800b988:	3301      	adds	r3, #1
 800b98a:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800b98e:	e79a      	b.n	800b8c6 <_ZN27positionEstimatorModelClass4stepEv+0x4676>
      }

      b_a_0[i + 6 * r1] = b_a_2[i] * rtP.Q_Value_c * b_a_2[r1];
 800b990:	4a20      	ldr	r2, [pc, #128]	; (800ba14 <_ZN27positionEstimatorModelClass4stepEv+0x47c4>)
 800b992:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b996:	00db      	lsls	r3, r3, #3
 800b998:	4413      	add	r3, r2
 800b99a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b99e:	4b1e      	ldr	r3, [pc, #120]	; (800ba18 <_ZN27positionEstimatorModelClass4stepEv+0x47c8>)
 800b9a0:	e9d3 34a0 	ldrd	r3, r4, [r3, #640]	; 0x280
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	4623      	mov	r3, r4
 800b9a8:	f7f4 fe2e 	bl	8000608 <__aeabi_dmul>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	460c      	mov	r4, r1
 800b9b0:	4698      	mov	r8, r3
 800b9b2:	46a1      	mov	r9, r4
 800b9b4:	4a17      	ldr	r2, [pc, #92]	; (800ba14 <_ZN27positionEstimatorModelClass4stepEv+0x47c4>)
 800b9b6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b9ba:	00db      	lsls	r3, r3, #3
 800b9bc:	4413      	add	r3, r2
 800b9be:	e9d3 1200 	ldrd	r1, r2, [r3]
 800b9c2:	f8d7 08c4 	ldr.w	r0, [r7, #2244]	; 0x8c4
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	005b      	lsls	r3, r3, #1
 800b9ca:	4403      	add	r3, r0
 800b9cc:	005b      	lsls	r3, r3, #1
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b9d4:	18c5      	adds	r5, r0, r3
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	460a      	mov	r2, r1
 800b9da:	4640      	mov	r0, r8
 800b9dc:	4649      	mov	r1, r9
 800b9de:	f7f4 fe13 	bl	8000608 <__aeabi_dmul>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	460c      	mov	r4, r1
 800b9e6:	f107 0108 	add.w	r1, r7, #8
 800b9ea:	00ea      	lsls	r2, r5, #3
 800b9ec:	440a      	add	r2, r1
 800b9ee:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 800b9f2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b9fc:	e747      	b.n	800b88e <_ZN27positionEstimatorModelClass4stepEv+0x463e>
  for (r1 = 0; r1 < 6; r1++) {
 800b9fe:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ba02:	3301      	adds	r3, #1
 800ba04:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800ba08:	e66d      	b.n	800b6e6 <_ZN27positionEstimatorModelClass4stepEv+0x4496>
 800ba0a:	bf00      	nop
 800ba0c:	0802d130 	.word	0x0802d130
 800ba10:	0802d280 	.word	0x0802d280
 800ba14:	0802d250 	.word	0x0802d250
 800ba18:	20000290 	.word	0x20000290
    }
  }

  for (i = 0; i < 36; i++) {
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800ba22:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ba26:	2b23      	cmp	r3, #35	; 0x23
 800ba28:	dc37      	bgt.n	800ba9a <_ZN27positionEstimatorModelClass4stepEv+0x484a>
    rtDW.P_n[i] = a_0[i] + b_a_0[i];
 800ba2a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800ba2e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ba32:	00db      	lsls	r3, r3, #3
 800ba34:	4413      	add	r3, r2
 800ba36:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba3a:	f107 0208 	add.w	r2, r7, #8
 800ba3e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ba42:	00db      	lsls	r3, r3, #3
 800ba44:	4413      	add	r3, r2
 800ba46:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	4623      	mov	r3, r4
 800ba4e:	f7f4 fc25 	bl	800029c <__adddf3>
 800ba52:	4603      	mov	r3, r0
 800ba54:	460c      	mov	r4, r1
 800ba56:	1d3a      	adds	r2, r7, #4
 800ba58:	6811      	ldr	r1, [r2, #0]
 800ba5a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ba5e:	3210      	adds	r2, #16
 800ba60:	00d2      	lsls	r2, r2, #3
 800ba62:	440a      	add	r2, r1
 800ba64:	e9c2 3400 	strd	r3, r4, [r2]

    // DataStoreWrite: '<S16>/Data Store WriteP'
    rtDW.P_n_c[i] = rtDW.P_n[i];
 800ba68:	1d3b      	adds	r3, r7, #4
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ba70:	3310      	adds	r3, #16
 800ba72:	00db      	lsls	r3, r3, #3
 800ba74:	4413      	add	r3, r2
 800ba76:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ba7a:	1d3a      	adds	r2, r7, #4
 800ba7c:	6811      	ldr	r1, [r2, #0]
 800ba7e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ba82:	f502 728c 	add.w	r2, r2, #280	; 0x118
 800ba86:	00d2      	lsls	r2, r2, #3
 800ba88:	440a      	add	r2, r1
 800ba8a:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 36; i++) {
 800ba8e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ba92:	3301      	adds	r3, #1
 800ba94:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800ba98:	e7c3      	b.n	800ba22 <_ZN27positionEstimatorModelClass4stepEv+0x47d2>
  }

  // DataStoreWrite: '<S16>/Data Store WriteX'
  for (i = 0; i < 6; i++) {
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800baa0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800baa4:	2b05      	cmp	r3, #5
 800baa6:	dc18      	bgt.n	800bada <_ZN27positionEstimatorModelClass4stepEv+0x488a>
    rtDW.x_p[i] = rtDW.xNew[i];
 800baa8:	1d3b      	adds	r3, r7, #4
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bab0:	330a      	adds	r3, #10
 800bab2:	00db      	lsls	r3, r3, #3
 800bab4:	4413      	add	r3, r2
 800bab6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800baba:	1d3a      	adds	r2, r7, #4
 800babc:	6811      	ldr	r1, [r2, #0]
 800babe:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800bac2:	f502 729e 	add.w	r2, r2, #316	; 0x13c
 800bac6:	00d2      	lsls	r2, r2, #3
 800bac8:	440a      	add	r2, r1
 800baca:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 6; i++) {
 800bace:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bad2:	3301      	adds	r3, #1
 800bad4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800bad8:	e7e2      	b.n	800baa0 <_ZN27positionEstimatorModelClass4stepEv+0x4850>
  }

  // End of DataStoreWrite: '<S16>/Data Store WriteX'
  // End of Outputs for SubSystem: '<S2>/Predict'
}
 800bada:	bf00      	nop
 800badc:	f607 07d4 	addw	r7, r7, #2260	; 0x8d4
 800bae0:	46bd      	mov	sp, r7
 800bae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bae6:	bf00      	nop

0800bae8 <_ZN27positionEstimatorModelClass10initializeEv>:

// Model initialize function
void positionEstimatorModelClass::initialize()
{
 800bae8:	b590      	push	{r4, r7, lr}
 800baea:	b085      	sub	sp, #20
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  // Registration code

  // initialize non-finites
  rt_InitInfAndNaN(sizeof(real_T));
 800baf0:	2008      	movs	r0, #8
 800baf2:	f7fa f99b 	bl	8005e2c <rt_InitInfAndNaN>

  {
    int32_T i;

    // Start for DataStoreMemory: '<S1>/DataStoreMemory - P'
    for (i = 0; i < 9; i++) {
 800baf6:	2300      	movs	r3, #0
 800baf8:	60fb      	str	r3, [r7, #12]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2b08      	cmp	r3, #8
 800bafe:	dc12      	bgt.n	800bb26 <_ZN27positionEstimatorModelClass10initializeEv+0x3e>
      rtDW.P_i_m[i] = rtP.DataStoreMemoryP_InitialValue[i];
 800bb00:	4a3e      	ldr	r2, [pc, #248]	; (800bbfc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	3344      	adds	r3, #68	; 0x44
 800bb06:	00db      	lsls	r3, r3, #3
 800bb08:	4413      	add	r3, r2
 800bb0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb0e:	6879      	ldr	r1, [r7, #4]
 800bb10:	68fa      	ldr	r2, [r7, #12]
 800bb12:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800bb16:	00d2      	lsls	r2, r2, #3
 800bb18:	440a      	add	r2, r1
 800bb1a:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	3301      	adds	r3, #1
 800bb22:	60fb      	str	r3, [r7, #12]
 800bb24:	e7e9      	b.n	800bafa <_ZN27positionEstimatorModelClass10initializeEv+0x12>
    }

    // End of Start for DataStoreMemory: '<S1>/DataStoreMemory - P'

    // Start for DataStoreMemory: '<S1>/DataStoreMemory - x'
    rtDW.x[0] = rtP.DataStoreMemoryx_InitialValue[0];
 800bb26:	4b35      	ldr	r3, [pc, #212]	; (800bbfc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800bb28:	e9d3 349a 	ldrd	r3, r4, [r3, #616]	; 0x268
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	f602 02a8 	addw	r2, r2, #2216	; 0x8a8
 800bb32:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[1] = rtP.DataStoreMemoryx_InitialValue[1];
 800bb36:	4b31      	ldr	r3, [pc, #196]	; (800bbfc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800bb38:	e9d3 349c 	ldrd	r3, r4, [r3, #624]	; 0x270
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	f502 620b 	add.w	r2, r2, #2224	; 0x8b0
 800bb42:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[2] = rtP.DataStoreMemoryx_InitialValue[2];
 800bb46:	4b2d      	ldr	r3, [pc, #180]	; (800bbfc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800bb48:	e9d3 349e 	ldrd	r3, r4, [r3, #632]	; 0x278
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	f602 02b8 	addw	r2, r2, #2232	; 0x8b8
 800bb52:	e9c2 3400 	strd	r3, r4, [r2]

    // Start for DataStoreMemory: '<S2>/DataStoreMemory - P'
    for (i = 0; i < 36; i++) {
 800bb56:	2300      	movs	r3, #0
 800bb58:	60fb      	str	r3, [r7, #12]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2b23      	cmp	r3, #35	; 0x23
 800bb5e:	dc12      	bgt.n	800bb86 <_ZN27positionEstimatorModelClass10initializeEv+0x9e>
      rtDW.P_n_c[i] = rtP.DataStoreMemoryP_InitialValue_m[i];
 800bb60:	4a26      	ldr	r2, [pc, #152]	; (800bbfc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	3352      	adds	r3, #82	; 0x52
 800bb66:	00db      	lsls	r3, r3, #3
 800bb68:	4413      	add	r3, r2
 800bb6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb6e:	6879      	ldr	r1, [r7, #4]
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	f502 728c 	add.w	r2, r2, #280	; 0x118
 800bb76:	00d2      	lsls	r2, r2, #3
 800bb78:	440a      	add	r2, r1
 800bb7a:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 36; i++) {
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	3301      	adds	r3, #1
 800bb82:	60fb      	str	r3, [r7, #12]
 800bb84:	e7e9      	b.n	800bb5a <_ZN27positionEstimatorModelClass10initializeEv+0x72>
    }

    // End of Start for DataStoreMemory: '<S2>/DataStoreMemory - P'

    // Start for DataStoreMemory: '<S2>/DataStoreMemory - x'
    for (i = 0; i < 6; i++) {
 800bb86:	2300      	movs	r3, #0
 800bb88:	60fb      	str	r3, [r7, #12]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2b05      	cmp	r3, #5
 800bb8e:	dc12      	bgt.n	800bbb6 <_ZN27positionEstimatorModelClass10initializeEv+0xce>
      rtDW.x_p[i] = rtP.DataStoreMemoryx_InitialValue_j[i];
 800bb90:	4a1a      	ldr	r2, [pc, #104]	; (800bbfc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	3376      	adds	r3, #118	; 0x76
 800bb96:	00db      	lsls	r3, r3, #3
 800bb98:	4413      	add	r3, r2
 800bb9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb9e:	6879      	ldr	r1, [r7, #4]
 800bba0:	68fa      	ldr	r2, [r7, #12]
 800bba2:	f502 729e 	add.w	r2, r2, #316	; 0x13c
 800bba6:	00d2      	lsls	r2, r2, #3
 800bba8:	440a      	add	r2, r1
 800bbaa:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	60fb      	str	r3, [r7, #12]
 800bbb4:	e7e9      	b.n	800bb8a <_ZN27positionEstimatorModelClass10initializeEv+0xa2>

    // End of Start for DataStoreMemory: '<S2>/DataStoreMemory - x'

    // SystemInitialize for Enabled SubSystem: '<S2>/Correct1'
    // SystemInitialize for Outport: '<S13>/yBlockOrdering'
    rtDW.blockOrdering_f = rtP.yBlockOrdering_Y0_a;
 800bbb6:	4b11      	ldr	r3, [pc, #68]	; (800bbfc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800bbb8:	f893 23e3 	ldrb.w	r2, [r3, #995]	; 0x3e3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44

    // End of SystemInitialize for SubSystem: '<S2>/Correct1'

    // SystemInitialize for Enabled SubSystem: '<S2>/Correct2'
    // SystemInitialize for Outport: '<S14>/yBlockOrdering'
    rtDW.blockOrdering = rtP.yBlockOrdering_Y0_g;
 800bbc2:	4b0e      	ldr	r3, [pc, #56]	; (800bbfc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800bbc4:	f893 23e4 	ldrb.w	r2, [r3, #996]	; 0x3e4
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f883 2c43 	strb.w	r2, [r3, #3139]	; 0xc43

    // End of SystemInitialize for SubSystem: '<S2>/Correct2'

    // SystemInitialize for Enabled SubSystem: '<S1>/Correct1'
    // SystemInitialize for Outport: '<S4>/yBlockOrdering'
    rtDW.blockOrdering_k = rtP.yBlockOrdering_Y0;
 800bbce:	4b0b      	ldr	r3, [pc, #44]	; (800bbfc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800bbd0:	f893 23e0 	ldrb.w	r2, [r3, #992]	; 0x3e0
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f883 2c48 	strb.w	r2, [r3, #3144]	; 0xc48

    // End of SystemInitialize for SubSystem: '<S1>/Correct1'

    // SystemInitialize for Enabled SubSystem: '<S1>/Correct2'
    // SystemInitialize for Outport: '<S5>/yBlockOrdering'
    rtDW.blockOrdering_n = rtP.yBlockOrdering_Y0_k;
 800bbda:	4b08      	ldr	r3, [pc, #32]	; (800bbfc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800bbdc:	f893 23e1 	ldrb.w	r2, [r3, #993]	; 0x3e1
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f883 2c47 	strb.w	r2, [r3, #3143]	; 0xc47

    // End of SystemInitialize for SubSystem: '<S1>/Correct2'

    // SystemInitialize for Enabled SubSystem: '<S1>/Correct3'
    // SystemInitialize for Outport: '<S6>/yBlockOrdering'
    rtDW.blockOrdering_p = rtP.yBlockOrdering_Y0_b;
 800bbe6:	4b05      	ldr	r3, [pc, #20]	; (800bbfc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800bbe8:	f893 23e2 	ldrb.w	r2, [r3, #994]	; 0x3e2
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f883 2c46 	strb.w	r2, [r3, #3142]	; 0xc46

    // End of SystemInitialize for SubSystem: '<S1>/Correct3'
  }
}
 800bbf2:	bf00      	nop
 800bbf4:	3714      	adds	r7, #20
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd90      	pop	{r4, r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	20000290 	.word	0x20000290

0800bc00 <_ZN27positionEstimatorModelClassC1Ev>:

// Constructor
positionEstimatorModelClass::positionEstimatorModelClass():
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  rtDW()
  ,rtU()
  ,rtY()
  ,rtM()
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f44f 6345 	mov.w	r3, #3152	; 0xc50
 800bc10:	461a      	mov	r2, r3
 800bc12:	2100      	movs	r1, #0
 800bc14:	f01c fdab 	bl	802876e <memset>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 800bc1e:	2280      	movs	r2, #128	; 0x80
 800bc20:	2100      	movs	r1, #0
 800bc22:	4618      	mov	r0, r3
 800bc24:	f01c fda3 	bl	802876e <memset>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 800bc2e:	2248      	movs	r2, #72	; 0x48
 800bc30:	2100      	movs	r1, #0
 800bc32:	4618      	mov	r0, r3
 800bc34:	f01c fd9b 	bl	802876e <memset>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
{
  // Currently there is no constructor body generated.
}
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4618      	mov	r0, r3
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}

0800bc4a <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800bc4a:	b480      	push	{r7}
 800bc4c:	b085      	sub	sp, #20
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	607a      	str	r2, [r7, #4]
 800bc54:	603b      	str	r3, [r7, #0]
 800bc56:	4603      	mov	r3, r0
 800bc58:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800bc5a:	bf00      	nop
 800bc5c:	3714      	adds	r7, #20
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr

0800bc66 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800bc66:	b580      	push	{r7, lr}
 800bc68:	b084      	sub	sp, #16
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
 800bc70:	603b      	str	r3, [r7, #0]
 800bc72:	4603      	mov	r3, r0
 800bc74:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800bc76:	7bfb      	ldrb	r3, [r7, #15]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d003      	beq.n	800bc84 <_out_char+0x1e>
    _putchar(character);
 800bc7c:	7bfb      	ldrb	r3, [r7, #15]
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f006 ff38 	bl	8012af4 <_putchar>
  }
}
 800bc84:	bf00      	nop
 800bc86:	3710      	adds	r7, #16
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	60fb      	str	r3, [r7, #12]
 800bc9a:	e002      	b.n	800bca2 <_strnlen_s+0x16>
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	60fb      	str	r3, [r7, #12]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d004      	beq.n	800bcb4 <_strnlen_s+0x28>
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	1e5a      	subs	r2, r3, #1
 800bcae:	603a      	str	r2, [r7, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d1f3      	bne.n	800bc9c <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	1ad3      	subs	r3, r2, r3
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3714      	adds	r7, #20
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr

0800bcc6 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800bcc6:	b480      	push	{r7}
 800bcc8:	b083      	sub	sp, #12
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	4603      	mov	r3, r0
 800bcce:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800bcd0:	79fb      	ldrb	r3, [r7, #7]
 800bcd2:	2b2f      	cmp	r3, #47	; 0x2f
 800bcd4:	d904      	bls.n	800bce0 <_is_digit+0x1a>
 800bcd6:	79fb      	ldrb	r3, [r7, #7]
 800bcd8:	2b39      	cmp	r3, #57	; 0x39
 800bcda:	d801      	bhi.n	800bce0 <_is_digit+0x1a>
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e000      	b.n	800bce2 <_is_digit+0x1c>
 800bce0:	2300      	movs	r3, #0
 800bce2:	f003 0301 	and.w	r3, r3, #1
 800bce6:	b2db      	uxtb	r3, r3
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	370c      	adds	r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800bd00:	e00e      	b.n	800bd20 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800bd02:	68fa      	ldr	r2, [r7, #12]
 800bd04:	4613      	mov	r3, r2
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	4413      	add	r3, r2
 800bd0a:	005b      	lsls	r3, r3, #1
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	1c59      	adds	r1, r3, #1
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	6011      	str	r1, [r2, #0]
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	4403      	add	r3, r0
 800bd1c:	3b30      	subs	r3, #48	; 0x30
 800bd1e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7ff ffcd 	bl	800bcc6 <_is_digit>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d1e7      	bne.n	800bd02 <_atoi+0xe>
  }
  return i;
 800bd32:	68fb      	ldr	r3, [r7, #12]
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3710      	adds	r7, #16
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800bd3c:	b590      	push	{r4, r7, lr}
 800bd3e:	b087      	sub	sp, #28
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	607a      	str	r2, [r7, #4]
 800bd48:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800bd4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd50:	f003 0302 	and.w	r3, r3, #2
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d125      	bne.n	800bda4 <_out_rev+0x68>
 800bd58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd5a:	f003 0301 	and.w	r3, r3, #1
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d120      	bne.n	800bda4 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800bd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd64:	617b      	str	r3, [r7, #20]
 800bd66:	e00a      	b.n	800bd7e <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	1c53      	adds	r3, r2, #1
 800bd6c:	607b      	str	r3, [r7, #4]
 800bd6e:	68fc      	ldr	r4, [r7, #12]
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	68b9      	ldr	r1, [r7, #8]
 800bd74:	2020      	movs	r0, #32
 800bd76:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	617b      	str	r3, [r7, #20]
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d3f0      	bcc.n	800bd68 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800bd86:	e00d      	b.n	800bda4 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800bd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd92:	4413      	add	r3, r2
 800bd94:	7818      	ldrb	r0, [r3, #0]
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	1c53      	adds	r3, r2, #1
 800bd9a:	607b      	str	r3, [r7, #4]
 800bd9c:	68fc      	ldr	r4, [r7, #12]
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	68b9      	ldr	r1, [r7, #8]
 800bda2:	47a0      	blx	r4
  while (len) {
 800bda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d1ee      	bne.n	800bd88 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800bdaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdac:	f003 0302 	and.w	r3, r3, #2
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00e      	beq.n	800bdd2 <_out_rev+0x96>
    while (idx - start_idx < width) {
 800bdb4:	e007      	b.n	800bdc6 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	1c53      	adds	r3, r2, #1
 800bdba:	607b      	str	r3, [r7, #4]
 800bdbc:	68fc      	ldr	r4, [r7, #12]
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	68b9      	ldr	r1, [r7, #8]
 800bdc2:	2020      	movs	r0, #32
 800bdc4:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	1ad3      	subs	r3, r2, r3
 800bdcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d8f1      	bhi.n	800bdb6 <_out_rev+0x7a>
    }
  }

  return idx;
 800bdd2:	687b      	ldr	r3, [r7, #4]
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	371c      	adds	r7, #28
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd90      	pop	{r4, r7, pc}

0800bddc <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b088      	sub	sp, #32
 800bde0:	af04      	add	r7, sp, #16
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
 800bde8:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800bdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdec:	f003 0302 	and.w	r3, r3, #2
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d136      	bne.n	800be62 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800bdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d018      	beq.n	800be2c <_ntoa_format+0x50>
 800bdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfc:	f003 0301 	and.w	r3, r3, #1
 800be00:	2b00      	cmp	r3, #0
 800be02:	d013      	beq.n	800be2c <_ntoa_format+0x50>
 800be04:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d104      	bne.n	800be16 <_ntoa_format+0x3a>
 800be0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0e:	f003 030c 	and.w	r3, r3, #12
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00a      	beq.n	800be2c <_ntoa_format+0x50>
      width--;
 800be16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be18:	3b01      	subs	r3, #1
 800be1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800be1c:	e006      	b.n	800be2c <_ntoa_format+0x50>
      buf[len++] = '0';
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	1c5a      	adds	r2, r3, #1
 800be22:	61fa      	str	r2, [r7, #28]
 800be24:	69ba      	ldr	r2, [r7, #24]
 800be26:	4413      	add	r3, r2
 800be28:	2230      	movs	r2, #48	; 0x30
 800be2a:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800be2c:	69fa      	ldr	r2, [r7, #28]
 800be2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be30:	429a      	cmp	r2, r3
 800be32:	d20a      	bcs.n	800be4a <_ntoa_format+0x6e>
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	2b1f      	cmp	r3, #31
 800be38:	d9f1      	bls.n	800be1e <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800be3a:	e006      	b.n	800be4a <_ntoa_format+0x6e>
      buf[len++] = '0';
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	1c5a      	adds	r2, r3, #1
 800be40:	61fa      	str	r2, [r7, #28]
 800be42:	69ba      	ldr	r2, [r7, #24]
 800be44:	4413      	add	r3, r2
 800be46:	2230      	movs	r2, #48	; 0x30
 800be48:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800be4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4c:	f003 0301 	and.w	r3, r3, #1
 800be50:	2b00      	cmp	r3, #0
 800be52:	d006      	beq.n	800be62 <_ntoa_format+0x86>
 800be54:	69fa      	ldr	r2, [r7, #28]
 800be56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be58:	429a      	cmp	r2, r3
 800be5a:	d202      	bcs.n	800be62 <_ntoa_format+0x86>
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	2b1f      	cmp	r3, #31
 800be60:	d9ec      	bls.n	800be3c <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	f003 0310 	and.w	r3, r3, #16
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d058      	beq.n	800bf1e <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800be6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be72:	2b00      	cmp	r3, #0
 800be74:	d116      	bne.n	800bea4 <_ntoa_format+0xc8>
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d013      	beq.n	800bea4 <_ntoa_format+0xc8>
 800be7c:	69fa      	ldr	r2, [r7, #28]
 800be7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be80:	429a      	cmp	r2, r3
 800be82:	d003      	beq.n	800be8c <_ntoa_format+0xb0>
 800be84:	69fa      	ldr	r2, [r7, #28]
 800be86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be88:	429a      	cmp	r2, r3
 800be8a:	d10b      	bne.n	800bea4 <_ntoa_format+0xc8>
      len--;
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	3b01      	subs	r3, #1
 800be90:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d005      	beq.n	800bea4 <_ntoa_format+0xc8>
 800be98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9a:	2b10      	cmp	r3, #16
 800be9c:	d102      	bne.n	800bea4 <_ntoa_format+0xc8>
        len--;
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	3b01      	subs	r3, #1
 800bea2:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800bea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea6:	2b10      	cmp	r3, #16
 800bea8:	d10f      	bne.n	800beca <_ntoa_format+0xee>
 800beaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beac:	f003 0320 	and.w	r3, r3, #32
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d10a      	bne.n	800beca <_ntoa_format+0xee>
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	2b1f      	cmp	r3, #31
 800beb8:	d807      	bhi.n	800beca <_ntoa_format+0xee>
      buf[len++] = 'x';
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	1c5a      	adds	r2, r3, #1
 800bebe:	61fa      	str	r2, [r7, #28]
 800bec0:	69ba      	ldr	r2, [r7, #24]
 800bec2:	4413      	add	r3, r2
 800bec4:	2278      	movs	r2, #120	; 0x78
 800bec6:	701a      	strb	r2, [r3, #0]
 800bec8:	e01f      	b.n	800bf0a <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800beca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800becc:	2b10      	cmp	r3, #16
 800bece:	d10f      	bne.n	800bef0 <_ntoa_format+0x114>
 800bed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed2:	f003 0320 	and.w	r3, r3, #32
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00a      	beq.n	800bef0 <_ntoa_format+0x114>
 800beda:	69fb      	ldr	r3, [r7, #28]
 800bedc:	2b1f      	cmp	r3, #31
 800bede:	d807      	bhi.n	800bef0 <_ntoa_format+0x114>
      buf[len++] = 'X';
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	61fa      	str	r2, [r7, #28]
 800bee6:	69ba      	ldr	r2, [r7, #24]
 800bee8:	4413      	add	r3, r2
 800beea:	2258      	movs	r2, #88	; 0x58
 800beec:	701a      	strb	r2, [r3, #0]
 800beee:	e00c      	b.n	800bf0a <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	2b02      	cmp	r3, #2
 800bef4:	d109      	bne.n	800bf0a <_ntoa_format+0x12e>
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	2b1f      	cmp	r3, #31
 800befa:	d806      	bhi.n	800bf0a <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	1c5a      	adds	r2, r3, #1
 800bf00:	61fa      	str	r2, [r7, #28]
 800bf02:	69ba      	ldr	r2, [r7, #24]
 800bf04:	4413      	add	r3, r2
 800bf06:	2262      	movs	r2, #98	; 0x62
 800bf08:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	2b1f      	cmp	r3, #31
 800bf0e:	d806      	bhi.n	800bf1e <_ntoa_format+0x142>
      buf[len++] = '0';
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	1c5a      	adds	r2, r3, #1
 800bf14:	61fa      	str	r2, [r7, #28]
 800bf16:	69ba      	ldr	r2, [r7, #24]
 800bf18:	4413      	add	r3, r2
 800bf1a:	2230      	movs	r2, #48	; 0x30
 800bf1c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	2b1f      	cmp	r3, #31
 800bf22:	d824      	bhi.n	800bf6e <_ntoa_format+0x192>
    if (negative) {
 800bf24:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d007      	beq.n	800bf3c <_ntoa_format+0x160>
      buf[len++] = '-';
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	1c5a      	adds	r2, r3, #1
 800bf30:	61fa      	str	r2, [r7, #28]
 800bf32:	69ba      	ldr	r2, [r7, #24]
 800bf34:	4413      	add	r3, r2
 800bf36:	222d      	movs	r2, #45	; 0x2d
 800bf38:	701a      	strb	r2, [r3, #0]
 800bf3a:	e018      	b.n	800bf6e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800bf3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3e:	f003 0304 	and.w	r3, r3, #4
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d007      	beq.n	800bf56 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	1c5a      	adds	r2, r3, #1
 800bf4a:	61fa      	str	r2, [r7, #28]
 800bf4c:	69ba      	ldr	r2, [r7, #24]
 800bf4e:	4413      	add	r3, r2
 800bf50:	222b      	movs	r2, #43	; 0x2b
 800bf52:	701a      	strb	r2, [r3, #0]
 800bf54:	e00b      	b.n	800bf6e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800bf56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf58:	f003 0308 	and.w	r3, r3, #8
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d006      	beq.n	800bf6e <_ntoa_format+0x192>
      buf[len++] = ' ';
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	1c5a      	adds	r2, r3, #1
 800bf64:	61fa      	str	r2, [r7, #28]
 800bf66:	69ba      	ldr	r2, [r7, #24]
 800bf68:	4413      	add	r3, r2
 800bf6a:	2220      	movs	r2, #32
 800bf6c:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800bf6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf70:	9303      	str	r3, [sp, #12]
 800bf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf74:	9302      	str	r3, [sp, #8]
 800bf76:	69fb      	ldr	r3, [r7, #28]
 800bf78:	9301      	str	r3, [sp, #4]
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	9300      	str	r3, [sp, #0]
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	68b9      	ldr	r1, [r7, #8]
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	f7ff fed9 	bl	800bd3c <_out_rev>
 800bf8a:	4603      	mov	r3, r0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3710      	adds	r7, #16
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b096      	sub	sp, #88	; 0x58
 800bf98:	af08      	add	r7, sp, #32
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
 800bfa0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800bfa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d103      	bne.n	800bfb4 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800bfac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfae:	f023 0310 	bic.w	r3, r3, #16
 800bfb2:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800bfb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d002      	beq.n	800bfc4 <_ntoa_long+0x30>
 800bfbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d033      	beq.n	800c02c <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 800bfc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfc8:	fbb3 f2f2 	udiv	r2, r3, r2
 800bfcc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bfce:	fb01 f202 	mul.w	r2, r1, r2
 800bfd2:	1a9b      	subs	r3, r3, r2
 800bfd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800bfd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bfdc:	2b09      	cmp	r3, #9
 800bfde:	d804      	bhi.n	800bfea <_ntoa_long+0x56>
 800bfe0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bfe4:	3330      	adds	r3, #48	; 0x30
 800bfe6:	b2da      	uxtb	r2, r3
 800bfe8:	e00d      	b.n	800c006 <_ntoa_long+0x72>
 800bfea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfec:	f003 0320 	and.w	r3, r3, #32
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d001      	beq.n	800bff8 <_ntoa_long+0x64>
 800bff4:	2241      	movs	r2, #65	; 0x41
 800bff6:	e000      	b.n	800bffa <_ntoa_long+0x66>
 800bff8:	2261      	movs	r2, #97	; 0x61
 800bffa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bffe:	4413      	add	r3, r2
 800c000:	b2db      	uxtb	r3, r3
 800c002:	3b0a      	subs	r3, #10
 800c004:	b2da      	uxtb	r2, r3
 800c006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c008:	1c59      	adds	r1, r3, #1
 800c00a:	6379      	str	r1, [r7, #52]	; 0x34
 800c00c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800c010:	440b      	add	r3, r1
 800c012:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800c016:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c01a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c01e:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800c020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c022:	2b00      	cmp	r3, #0
 800c024:	d002      	beq.n	800c02c <_ntoa_long+0x98>
 800c026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c028:	2b1f      	cmp	r3, #31
 800c02a:	d9cb      	bls.n	800bfc4 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800c02c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c02e:	9306      	str	r3, [sp, #24]
 800c030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c032:	9305      	str	r3, [sp, #20]
 800c034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c036:	9304      	str	r3, [sp, #16]
 800c038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c03a:	9303      	str	r3, [sp, #12]
 800c03c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c040:	9302      	str	r3, [sp, #8]
 800c042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c044:	9301      	str	r3, [sp, #4]
 800c046:	f107 0310 	add.w	r3, r7, #16
 800c04a:	9300      	str	r3, [sp, #0]
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	68b9      	ldr	r1, [r7, #8]
 800c052:	68f8      	ldr	r0, [r7, #12]
 800c054:	f7ff fec2 	bl	800bddc <_ntoa_format>
 800c058:	4603      	mov	r3, r0
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3738      	adds	r7, #56	; 0x38
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800c062:	b590      	push	{r4, r7, lr}
 800c064:	b097      	sub	sp, #92	; 0x5c
 800c066:	af08      	add	r7, sp, #32
 800c068:	60f8      	str	r0, [r7, #12]
 800c06a:	60b9      	str	r1, [r7, #8]
 800c06c:	607a      	str	r2, [r7, #4]
 800c06e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800c070:	2300      	movs	r3, #0
 800c072:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800c074:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800c078:	4323      	orrs	r3, r4
 800c07a:	d103      	bne.n	800c084 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800c07c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c07e:	f023 0310 	bic.w	r3, r3, #16
 800c082:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800c084:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d003      	beq.n	800c096 <_ntoa_long_long+0x34>
 800c08e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800c092:	4323      	orrs	r3, r4
 800c094:	d039      	beq.n	800c10a <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 800c096:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c09a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c09e:	f7f4 ff59 	bl	8000f54 <__aeabi_uldivmod>
 800c0a2:	461c      	mov	r4, r3
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800c0aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c0ae:	2b09      	cmp	r3, #9
 800c0b0:	d804      	bhi.n	800c0bc <_ntoa_long_long+0x5a>
 800c0b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c0b6:	3330      	adds	r3, #48	; 0x30
 800c0b8:	b2da      	uxtb	r2, r3
 800c0ba:	e00d      	b.n	800c0d8 <_ntoa_long_long+0x76>
 800c0bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0be:	f003 0320 	and.w	r3, r3, #32
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d001      	beq.n	800c0ca <_ntoa_long_long+0x68>
 800c0c6:	2241      	movs	r2, #65	; 0x41
 800c0c8:	e000      	b.n	800c0cc <_ntoa_long_long+0x6a>
 800c0ca:	2261      	movs	r2, #97	; 0x61
 800c0cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c0d0:	4413      	add	r3, r2
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	3b0a      	subs	r3, #10
 800c0d6:	b2da      	uxtb	r2, r3
 800c0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0da:	1c59      	adds	r1, r3, #1
 800c0dc:	6379      	str	r1, [r7, #52]	; 0x34
 800c0de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800c0e2:	440b      	add	r3, r1
 800c0e4:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800c0e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c0ec:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c0f0:	f7f4 ff30 	bl	8000f54 <__aeabi_uldivmod>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	460c      	mov	r4, r1
 800c0f8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800c0fc:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800c100:	4323      	orrs	r3, r4
 800c102:	d002      	beq.n	800c10a <_ntoa_long_long+0xa8>
 800c104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c106:	2b1f      	cmp	r3, #31
 800c108:	d9c5      	bls.n	800c096 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800c10a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c10c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c10e:	9206      	str	r2, [sp, #24]
 800c110:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c112:	9205      	str	r2, [sp, #20]
 800c114:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c116:	9204      	str	r2, [sp, #16]
 800c118:	9303      	str	r3, [sp, #12]
 800c11a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800c11e:	9302      	str	r3, [sp, #8]
 800c120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c122:	9301      	str	r3, [sp, #4]
 800c124:	f107 0310 	add.w	r3, r7, #16
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	68b9      	ldr	r1, [r7, #8]
 800c130:	68f8      	ldr	r0, [r7, #12]
 800c132:	f7ff fe53 	bl	800bddc <_ntoa_format>
 800c136:	4603      	mov	r3, r0
}
 800c138:	4618      	mov	r0, r3
 800c13a:	373c      	adds	r7, #60	; 0x3c
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd90      	pop	{r4, r7, pc}

0800c140 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800c140:	b590      	push	{r4, r7, lr}
 800c142:	b09d      	sub	sp, #116	; 0x74
 800c144:	af04      	add	r7, sp, #16
 800c146:	6178      	str	r0, [r7, #20]
 800c148:	6139      	str	r1, [r7, #16]
 800c14a:	60fa      	str	r2, [r7, #12]
 800c14c:	60bb      	str	r3, [r7, #8]
 800c14e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800c152:	2300      	movs	r3, #0
 800c154:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800c156:	f04f 0300 	mov.w	r3, #0
 800c15a:	f04f 0400 	mov.w	r4, #0
 800c15e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800c162:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c166:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c16a:	f7f4 fcb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d10f      	bne.n	800c194 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800c174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c176:	9303      	str	r3, [sp, #12]
 800c178:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c17a:	9302      	str	r3, [sp, #8]
 800c17c:	2303      	movs	r3, #3
 800c17e:	9301      	str	r3, [sp, #4]
 800c180:	4baf      	ldr	r3, [pc, #700]	; (800c440 <_ftoa+0x300>)
 800c182:	9300      	str	r3, [sp, #0]
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	68fa      	ldr	r2, [r7, #12]
 800c188:	6939      	ldr	r1, [r7, #16]
 800c18a:	6978      	ldr	r0, [r7, #20]
 800c18c:	f7ff fdd6 	bl	800bd3c <_out_rev>
 800c190:	4603      	mov	r3, r0
 800c192:	e237      	b.n	800c604 <_ftoa+0x4c4>
  if (value < -DBL_MAX)
 800c194:	f04f 32ff 	mov.w	r2, #4294967295
 800c198:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800c19c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c1a0:	f7f4 fca4 	bl	8000aec <__aeabi_dcmplt>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00f      	beq.n	800c1ca <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800c1aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1ac:	9303      	str	r3, [sp, #12]
 800c1ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1b0:	9302      	str	r3, [sp, #8]
 800c1b2:	2304      	movs	r3, #4
 800c1b4:	9301      	str	r3, [sp, #4]
 800c1b6:	4ba3      	ldr	r3, [pc, #652]	; (800c444 <_ftoa+0x304>)
 800c1b8:	9300      	str	r3, [sp, #0]
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	68fa      	ldr	r2, [r7, #12]
 800c1be:	6939      	ldr	r1, [r7, #16]
 800c1c0:	6978      	ldr	r0, [r7, #20]
 800c1c2:	f7ff fdbb 	bl	800bd3c <_out_rev>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	e21c      	b.n	800c604 <_ftoa+0x4c4>
  if (value > DBL_MAX)
 800c1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ce:	4b9e      	ldr	r3, [pc, #632]	; (800c448 <_ftoa+0x308>)
 800c1d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c1d4:	f7f4 fca8 	bl	8000b28 <__aeabi_dcmpgt>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d01d      	beq.n	800c21a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800c1de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1e0:	f003 0304 	and.w	r3, r3, #4
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d001      	beq.n	800c1ec <_ftoa+0xac>
 800c1e8:	4b98      	ldr	r3, [pc, #608]	; (800c44c <_ftoa+0x30c>)
 800c1ea:	e000      	b.n	800c1ee <_ftoa+0xae>
 800c1ec:	4b98      	ldr	r3, [pc, #608]	; (800c450 <_ftoa+0x310>)
 800c1ee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c1f0:	f002 0204 	and.w	r2, r2, #4
 800c1f4:	2a00      	cmp	r2, #0
 800c1f6:	d001      	beq.n	800c1fc <_ftoa+0xbc>
 800c1f8:	2204      	movs	r2, #4
 800c1fa:	e000      	b.n	800c1fe <_ftoa+0xbe>
 800c1fc:	2203      	movs	r2, #3
 800c1fe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c200:	9103      	str	r1, [sp, #12]
 800c202:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c204:	9102      	str	r1, [sp, #8]
 800c206:	9201      	str	r2, [sp, #4]
 800c208:	9300      	str	r3, [sp, #0]
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	6939      	ldr	r1, [r7, #16]
 800c210:	6978      	ldr	r0, [r7, #20]
 800c212:	f7ff fd93 	bl	800bd3c <_out_rev>
 800c216:	4603      	mov	r3, r0
 800c218:	e1f4      	b.n	800c604 <_ftoa+0x4c4>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800c21a:	a385      	add	r3, pc, #532	; (adr r3, 800c430 <_ftoa+0x2f0>)
 800c21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c220:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c224:	f7f4 fc80 	bl	8000b28 <__aeabi_dcmpgt>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d109      	bne.n	800c242 <_ftoa+0x102>
 800c22e:	a382      	add	r3, pc, #520	; (adr r3, 800c438 <_ftoa+0x2f8>)
 800c230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c234:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c238:	f7f4 fc58 	bl	8000aec <__aeabi_dcmplt>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00f      	beq.n	800c262 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800c242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c244:	9302      	str	r3, [sp, #8]
 800c246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c248:	9301      	str	r3, [sp, #4]
 800c24a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c24c:	9300      	str	r3, [sp, #0]
 800c24e:	ed97 0b00 	vldr	d0, [r7]
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	68fa      	ldr	r2, [r7, #12]
 800c256:	6939      	ldr	r1, [r7, #16]
 800c258:	6978      	ldr	r0, [r7, #20]
 800c25a:	f000 f9dd 	bl	800c618 <_etoa>
 800c25e:	4603      	mov	r3, r0
 800c260:	e1d0      	b.n	800c604 <_ftoa+0x4c4>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800c262:	2300      	movs	r3, #0
 800c264:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800c268:	f04f 0200 	mov.w	r2, #0
 800c26c:	f04f 0300 	mov.w	r3, #0
 800c270:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c274:	f7f4 fc3a 	bl	8000aec <__aeabi_dcmplt>
 800c278:	4603      	mov	r3, r0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d00e      	beq.n	800c29c <_ftoa+0x15c>
    negative = true;
 800c27e:	2301      	movs	r3, #1
 800c280:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800c284:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c288:	f04f 0000 	mov.w	r0, #0
 800c28c:	f04f 0100 	mov.w	r1, #0
 800c290:	f7f4 f802 	bl	8000298 <__aeabi_dsub>
 800c294:	4603      	mov	r3, r0
 800c296:	460c      	mov	r4, r1
 800c298:	e9c7 3400 	strd	r3, r4, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800c29c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c29e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d10e      	bne.n	800c2c4 <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800c2a6:	2306      	movs	r3, #6
 800c2a8:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800c2aa:	e00b      	b.n	800c2c4 <_ftoa+0x184>
    buf[len++] = '0';
 800c2ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2ae:	1c5a      	adds	r2, r3, #1
 800c2b0:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c2b2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c2b6:	4413      	add	r3, r2
 800c2b8:	2230      	movs	r2, #48	; 0x30
 800c2ba:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800c2be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800c2c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2c6:	2b1f      	cmp	r3, #31
 800c2c8:	d802      	bhi.n	800c2d0 <_ftoa+0x190>
 800c2ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2cc:	2b09      	cmp	r3, #9
 800c2ce:	d8ed      	bhi.n	800c2ac <_ftoa+0x16c>
  }

  int whole = (int)value;
 800c2d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c2d4:	f7f4 fc48 	bl	8000b68 <__aeabi_d2iz>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800c2dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c2de:	f7f4 f929 	bl	8000534 <__aeabi_i2d>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	460c      	mov	r4, r1
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	4623      	mov	r3, r4
 800c2ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c2ee:	f7f3 ffd3 	bl	8000298 <__aeabi_dsub>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	460c      	mov	r4, r1
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	4a56      	ldr	r2, [pc, #344]	; (800c454 <_ftoa+0x314>)
 800c2fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2fe:	00db      	lsls	r3, r3, #3
 800c300:	4413      	add	r3, r2
 800c302:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c306:	461a      	mov	r2, r3
 800c308:	4623      	mov	r3, r4
 800c30a:	f7f4 f97d 	bl	8000608 <__aeabi_dmul>
 800c30e:	4603      	mov	r3, r0
 800c310:	460c      	mov	r4, r1
 800c312:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800c316:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c31a:	f7f4 fc4d 	bl	8000bb8 <__aeabi_d2uiz>
 800c31e:	4603      	mov	r3, r0
 800c320:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800c322:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c324:	f7f4 f8f6 	bl	8000514 <__aeabi_ui2d>
 800c328:	4603      	mov	r3, r0
 800c32a:	460c      	mov	r4, r1
 800c32c:	461a      	mov	r2, r3
 800c32e:	4623      	mov	r3, r4
 800c330:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c334:	f7f3 ffb0 	bl	8000298 <__aeabi_dsub>
 800c338:	4603      	mov	r3, r0
 800c33a:	460c      	mov	r4, r1
 800c33c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800c340:	f04f 0200 	mov.w	r2, #0
 800c344:	4b44      	ldr	r3, [pc, #272]	; (800c458 <_ftoa+0x318>)
 800c346:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c34a:	f7f4 fbed 	bl	8000b28 <__aeabi_dcmpgt>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b00      	cmp	r3, #0
 800c352:	d018      	beq.n	800c386 <_ftoa+0x246>
    ++frac;
 800c354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c356:	3301      	adds	r3, #1
 800c358:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800c35a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c35c:	f7f4 f8da 	bl	8000514 <__aeabi_ui2d>
 800c360:	4a3c      	ldr	r2, [pc, #240]	; (800c454 <_ftoa+0x314>)
 800c362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c364:	00db      	lsls	r3, r3, #3
 800c366:	4413      	add	r3, r2
 800c368:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c36c:	461a      	mov	r2, r3
 800c36e:	4623      	mov	r3, r4
 800c370:	f7f4 fbd0 	bl	8000b14 <__aeabi_dcmpge>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d01a      	beq.n	800c3b0 <_ftoa+0x270>
      frac = 0;
 800c37a:	2300      	movs	r3, #0
 800c37c:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800c37e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c380:	3301      	adds	r3, #1
 800c382:	657b      	str	r3, [r7, #84]	; 0x54
 800c384:	e014      	b.n	800c3b0 <_ftoa+0x270>
    }
  }
  else if (diff < 0.5) {
 800c386:	f04f 0200 	mov.w	r2, #0
 800c38a:	4b33      	ldr	r3, [pc, #204]	; (800c458 <_ftoa+0x318>)
 800c38c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c390:	f7f4 fbac 	bl	8000aec <__aeabi_dcmplt>
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d10a      	bne.n	800c3b0 <_ftoa+0x270>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800c39a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d004      	beq.n	800c3aa <_ftoa+0x26a>
 800c3a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3a2:	f003 0301 	and.w	r3, r3, #1
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d002      	beq.n	800c3b0 <_ftoa+0x270>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800c3aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800c3b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d136      	bne.n	800c424 <_ftoa+0x2e4>
    diff = value - (double)whole;
 800c3b6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c3b8:	f7f4 f8bc 	bl	8000534 <__aeabi_i2d>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	460c      	mov	r4, r1
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	4623      	mov	r3, r4
 800c3c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c3c8:	f7f3 ff66 	bl	8000298 <__aeabi_dsub>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	460c      	mov	r4, r1
 800c3d0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	461c      	mov	r4, r3
 800c3d8:	f04f 0200 	mov.w	r2, #0
 800c3dc:	4b1e      	ldr	r3, [pc, #120]	; (800c458 <_ftoa+0x318>)
 800c3de:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c3e2:	f7f4 fb83 	bl	8000aec <__aeabi_dcmplt>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d101      	bne.n	800c3f0 <_ftoa+0x2b0>
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	461c      	mov	r4, r3
 800c3f0:	b2e3      	uxtb	r3, r4
 800c3f2:	f083 0301 	eor.w	r3, r3, #1
 800c3f6:	b2db      	uxtb	r3, r3
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d109      	bne.n	800c410 <_ftoa+0x2d0>
 800c3fc:	f04f 0200 	mov.w	r2, #0
 800c400:	4b15      	ldr	r3, [pc, #84]	; (800c458 <_ftoa+0x318>)
 800c402:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c406:	f7f4 fb8f 	bl	8000b28 <__aeabi_dcmpgt>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d069      	beq.n	800c4e4 <_ftoa+0x3a4>
 800c410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c412:	f003 0301 	and.w	r3, r3, #1
 800c416:	2b00      	cmp	r3, #0
 800c418:	f000 8087 	beq.w	800c52a <_ftoa+0x3ea>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800c41c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c41e:	3301      	adds	r3, #1
 800c420:	657b      	str	r3, [r7, #84]	; 0x54
 800c422:	e082      	b.n	800c52a <_ftoa+0x3ea>
    }
  }
  else {
    unsigned int count = prec;
 800c424:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c426:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800c428:	e039      	b.n	800c49e <_ftoa+0x35e>
 800c42a:	bf00      	nop
 800c42c:	f3af 8000 	nop.w
 800c430:	00000000 	.word	0x00000000
 800c434:	41cdcd65 	.word	0x41cdcd65
 800c438:	00000000 	.word	0x00000000
 800c43c:	c1cdcd65 	.word	0xc1cdcd65
 800c440:	0802ce18 	.word	0x0802ce18
 800c444:	0802ce1c 	.word	0x0802ce1c
 800c448:	7fefffff 	.word	0x7fefffff
 800c44c:	0802ce24 	.word	0x0802ce24
 800c450:	0802ce2c 	.word	0x0802ce2c
 800c454:	0802d3a0 	.word	0x0802d3a0
 800c458:	3fe00000 	.word	0x3fe00000
      --count;
 800c45c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c45e:	3b01      	subs	r3, #1
 800c460:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800c462:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c464:	4b69      	ldr	r3, [pc, #420]	; (800c60c <_ftoa+0x4cc>)
 800c466:	fba3 2301 	umull	r2, r3, r3, r1
 800c46a:	08da      	lsrs	r2, r3, #3
 800c46c:	4613      	mov	r3, r2
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	4413      	add	r3, r2
 800c472:	005b      	lsls	r3, r3, #1
 800c474:	1aca      	subs	r2, r1, r3
 800c476:	b2d2      	uxtb	r2, r2
 800c478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c47a:	1c59      	adds	r1, r3, #1
 800c47c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800c47e:	3230      	adds	r2, #48	; 0x30
 800c480:	b2d2      	uxtb	r2, r2
 800c482:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800c486:	440b      	add	r3, r1
 800c488:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800c48c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c48e:	4a5f      	ldr	r2, [pc, #380]	; (800c60c <_ftoa+0x4cc>)
 800c490:	fba2 2303 	umull	r2, r3, r2, r3
 800c494:	08db      	lsrs	r3, r3, #3
 800c496:	653b      	str	r3, [r7, #80]	; 0x50
 800c498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d003      	beq.n	800c4a6 <_ftoa+0x366>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800c49e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4a0:	2b1f      	cmp	r3, #31
 800c4a2:	d9db      	bls.n	800c45c <_ftoa+0x31c>
 800c4a4:	e00a      	b.n	800c4bc <_ftoa+0x37c>
        break;
 800c4a6:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800c4a8:	e008      	b.n	800c4bc <_ftoa+0x37c>
      buf[len++] = '0';
 800c4aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4ac:	1c5a      	adds	r2, r3, #1
 800c4ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c4b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c4b4:	4413      	add	r3, r2
 800c4b6:	2230      	movs	r2, #48	; 0x30
 800c4b8:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800c4bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4be:	2b1f      	cmp	r3, #31
 800c4c0:	d804      	bhi.n	800c4cc <_ftoa+0x38c>
 800c4c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4c4:	1e5a      	subs	r2, r3, #1
 800c4c6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d1ee      	bne.n	800c4aa <_ftoa+0x36a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800c4cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4ce:	2b1f      	cmp	r3, #31
 800c4d0:	d82b      	bhi.n	800c52a <_ftoa+0x3ea>
      // add decimal
      buf[len++] = '.';
 800c4d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4d4:	1c5a      	adds	r2, r3, #1
 800c4d6:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c4d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c4dc:	4413      	add	r3, r2
 800c4de:	222e      	movs	r2, #46	; 0x2e
 800c4e0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800c4e4:	e021      	b.n	800c52a <_ftoa+0x3ea>
    buf[len++] = (char)(48 + (whole % 10));
 800c4e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c4e8:	4b49      	ldr	r3, [pc, #292]	; (800c610 <_ftoa+0x4d0>)
 800c4ea:	fb83 1302 	smull	r1, r3, r3, r2
 800c4ee:	1099      	asrs	r1, r3, #2
 800c4f0:	17d3      	asrs	r3, r2, #31
 800c4f2:	1ac9      	subs	r1, r1, r3
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	440b      	add	r3, r1
 800c4fa:	005b      	lsls	r3, r3, #1
 800c4fc:	1ad1      	subs	r1, r2, r3
 800c4fe:	b2ca      	uxtb	r2, r1
 800c500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c502:	1c59      	adds	r1, r3, #1
 800c504:	65f9      	str	r1, [r7, #92]	; 0x5c
 800c506:	3230      	adds	r2, #48	; 0x30
 800c508:	b2d2      	uxtb	r2, r2
 800c50a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800c50e:	440b      	add	r3, r1
 800c510:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800c514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c516:	4a3e      	ldr	r2, [pc, #248]	; (800c610 <_ftoa+0x4d0>)
 800c518:	fb82 1203 	smull	r1, r2, r2, r3
 800c51c:	1092      	asrs	r2, r2, #2
 800c51e:	17db      	asrs	r3, r3, #31
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	657b      	str	r3, [r7, #84]	; 0x54
 800c524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c526:	2b00      	cmp	r3, #0
 800c528:	d003      	beq.n	800c532 <_ftoa+0x3f2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800c52a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c52c:	2b1f      	cmp	r3, #31
 800c52e:	d9da      	bls.n	800c4e6 <_ftoa+0x3a6>
 800c530:	e000      	b.n	800c534 <_ftoa+0x3f4>
      break;
 800c532:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800c534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c536:	f003 0302 	and.w	r3, r3, #2
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d124      	bne.n	800c588 <_ftoa+0x448>
 800c53e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c540:	f003 0301 	and.w	r3, r3, #1
 800c544:	2b00      	cmp	r3, #0
 800c546:	d01f      	beq.n	800c588 <_ftoa+0x448>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800c548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d015      	beq.n	800c57a <_ftoa+0x43a>
 800c54e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c552:	2b00      	cmp	r3, #0
 800c554:	d104      	bne.n	800c560 <_ftoa+0x420>
 800c556:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c558:	f003 030c 	and.w	r3, r3, #12
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d00c      	beq.n	800c57a <_ftoa+0x43a>
      width--;
 800c560:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c562:	3b01      	subs	r3, #1
 800c564:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800c566:	e008      	b.n	800c57a <_ftoa+0x43a>
      buf[len++] = '0';
 800c568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c56a:	1c5a      	adds	r2, r3, #1
 800c56c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c56e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c572:	4413      	add	r3, r2
 800c574:	2230      	movs	r2, #48	; 0x30
 800c576:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800c57a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c57c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c57e:	429a      	cmp	r2, r3
 800c580:	d202      	bcs.n	800c588 <_ftoa+0x448>
 800c582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c584:	2b1f      	cmp	r3, #31
 800c586:	d9ef      	bls.n	800c568 <_ftoa+0x428>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800c588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c58a:	2b1f      	cmp	r3, #31
 800c58c:	d82a      	bhi.n	800c5e4 <_ftoa+0x4a4>
    if (negative) {
 800c58e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c592:	2b00      	cmp	r3, #0
 800c594:	d009      	beq.n	800c5aa <_ftoa+0x46a>
      buf[len++] = '-';
 800c596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c598:	1c5a      	adds	r2, r3, #1
 800c59a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c59c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c5a0:	4413      	add	r3, r2
 800c5a2:	222d      	movs	r2, #45	; 0x2d
 800c5a4:	f803 2c48 	strb.w	r2, [r3, #-72]
 800c5a8:	e01c      	b.n	800c5e4 <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_PLUS) {
 800c5aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5ac:	f003 0304 	and.w	r3, r3, #4
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d009      	beq.n	800c5c8 <_ftoa+0x488>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800c5b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5b6:	1c5a      	adds	r2, r3, #1
 800c5b8:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c5ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c5be:	4413      	add	r3, r2
 800c5c0:	222b      	movs	r2, #43	; 0x2b
 800c5c2:	f803 2c48 	strb.w	r2, [r3, #-72]
 800c5c6:	e00d      	b.n	800c5e4 <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_SPACE) {
 800c5c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5ca:	f003 0308 	and.w	r3, r3, #8
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d008      	beq.n	800c5e4 <_ftoa+0x4a4>
      buf[len++] = ' ';
 800c5d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5d4:	1c5a      	adds	r2, r3, #1
 800c5d6:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c5d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c5dc:	4413      	add	r3, r2
 800c5de:	2220      	movs	r2, #32
 800c5e0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800c5e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5e6:	9303      	str	r3, [sp, #12]
 800c5e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5ea:	9302      	str	r3, [sp, #8]
 800c5ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5ee:	9301      	str	r3, [sp, #4]
 800c5f0:	f107 0318 	add.w	r3, r7, #24
 800c5f4:	9300      	str	r3, [sp, #0]
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	6939      	ldr	r1, [r7, #16]
 800c5fc:	6978      	ldr	r0, [r7, #20]
 800c5fe:	f7ff fb9d 	bl	800bd3c <_out_rev>
 800c602:	4603      	mov	r3, r0
}
 800c604:	4618      	mov	r0, r3
 800c606:	3764      	adds	r7, #100	; 0x64
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd90      	pop	{r4, r7, pc}
 800c60c:	cccccccd 	.word	0xcccccccd
 800c610:	66666667 	.word	0x66666667
 800c614:	00000000 	.word	0x00000000

0800c618 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800c618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61c:	b09d      	sub	sp, #116	; 0x74
 800c61e:	af06      	add	r7, sp, #24
 800c620:	61f8      	str	r0, [r7, #28]
 800c622:	61b9      	str	r1, [r7, #24]
 800c624:	617a      	str	r2, [r7, #20]
 800c626:	613b      	str	r3, [r7, #16]
 800c628:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800c62c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c630:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c634:	f7f4 fa50 	bl	8000ad8 <__aeabi_dcmpeq>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d014      	beq.n	800c668 <_etoa+0x50>
 800c63e:	f04f 32ff 	mov.w	r2, #4294967295
 800c642:	4bc9      	ldr	r3, [pc, #804]	; (800c968 <_etoa+0x350>)
 800c644:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c648:	f7f4 fa6e 	bl	8000b28 <__aeabi_dcmpgt>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d10a      	bne.n	800c668 <_etoa+0x50>
 800c652:	f04f 32ff 	mov.w	r2, #4294967295
 800c656:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800c65a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c65e:	f7f4 fa45 	bl	8000aec <__aeabi_dcmplt>
 800c662:	4603      	mov	r3, r0
 800c664:	2b00      	cmp	r3, #0
 800c666:	d012      	beq.n	800c68e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800c668:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c66c:	9302      	str	r3, [sp, #8]
 800c66e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c672:	9301      	str	r3, [sp, #4]
 800c674:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c678:	9300      	str	r3, [sp, #0]
 800c67a:	ed97 0b02 	vldr	d0, [r7, #8]
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	697a      	ldr	r2, [r7, #20]
 800c682:	69b9      	ldr	r1, [r7, #24]
 800c684:	69f8      	ldr	r0, [r7, #28]
 800c686:	f7ff fd5b 	bl	800c140 <_ftoa>
 800c68a:	4603      	mov	r3, r0
 800c68c:	e24f      	b.n	800cb2e <_etoa+0x516>
  }

  // determine the sign
  const bool negative = value < 0;
 800c68e:	2301      	movs	r3, #1
 800c690:	461c      	mov	r4, r3
 800c692:	f04f 0200 	mov.w	r2, #0
 800c696:	f04f 0300 	mov.w	r3, #0
 800c69a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c69e:	f7f4 fa25 	bl	8000aec <__aeabi_dcmplt>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d101      	bne.n	800c6ac <_etoa+0x94>
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	461c      	mov	r4, r3
 800c6ac:	f887 404b 	strb.w	r4, [r7, #75]	; 0x4b
  if (negative) {
 800c6b0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d005      	beq.n	800c6c4 <_etoa+0xac>
    value = -value;
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	60bb      	str	r3, [r7, #8]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c6c2:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800c6c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c6c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d102      	bne.n	800c6d6 <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800c6d0:	2306      	movs	r3, #6
 800c6d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800c6d6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c6da:	e9c7 3408 	strd	r3, r4, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800c6de:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c6e2:	f04f 0300 	mov.w	r3, #0
 800c6e6:	f04f 0400 	mov.w	r4, #0
 800c6ea:	0d13      	lsrs	r3, r2, #20
 800c6ec:	2400      	movs	r4, #0
 800c6ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6f2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c6f6:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800c6f8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c6fc:	f04f 31ff 	mov.w	r1, #4294967295
 800c700:	4a9a      	ldr	r2, [pc, #616]	; (800c96c <_etoa+0x354>)
 800c702:	ea03 0801 	and.w	r8, r3, r1
 800c706:	ea04 0902 	and.w	r9, r4, r2
 800c70a:	f04f 0100 	mov.w	r1, #0
 800c70e:	4a98      	ldr	r2, [pc, #608]	; (800c970 <_etoa+0x358>)
 800c710:	ea48 0301 	orr.w	r3, r8, r1
 800c714:	ea49 0402 	orr.w	r4, r9, r2
 800c718:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800c71c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c71e:	f7f3 ff09 	bl	8000534 <__aeabi_i2d>
 800c722:	a385      	add	r3, pc, #532	; (adr r3, 800c938 <_etoa+0x320>)
 800c724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c728:	f7f3 ff6e 	bl	8000608 <__aeabi_dmul>
 800c72c:	4603      	mov	r3, r0
 800c72e:	460c      	mov	r4, r1
 800c730:	4618      	mov	r0, r3
 800c732:	4621      	mov	r1, r4
 800c734:	a382      	add	r3, pc, #520	; (adr r3, 800c940 <_etoa+0x328>)
 800c736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73a:	f7f3 fdaf 	bl	800029c <__adddf3>
 800c73e:	4603      	mov	r3, r0
 800c740:	460c      	mov	r4, r1
 800c742:	4698      	mov	r8, r3
 800c744:	46a1      	mov	r9, r4
 800c746:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c74a:	f04f 0200 	mov.w	r2, #0
 800c74e:	4b89      	ldr	r3, [pc, #548]	; (800c974 <_etoa+0x35c>)
 800c750:	f7f3 fda2 	bl	8000298 <__aeabi_dsub>
 800c754:	4603      	mov	r3, r0
 800c756:	460c      	mov	r4, r1
 800c758:	4618      	mov	r0, r3
 800c75a:	4621      	mov	r1, r4
 800c75c:	a37a      	add	r3, pc, #488	; (adr r3, 800c948 <_etoa+0x330>)
 800c75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c762:	f7f3 ff51 	bl	8000608 <__aeabi_dmul>
 800c766:	4603      	mov	r3, r0
 800c768:	460c      	mov	r4, r1
 800c76a:	461a      	mov	r2, r3
 800c76c:	4623      	mov	r3, r4
 800c76e:	4640      	mov	r0, r8
 800c770:	4649      	mov	r1, r9
 800c772:	f7f3 fd93 	bl	800029c <__adddf3>
 800c776:	4603      	mov	r3, r0
 800c778:	460c      	mov	r4, r1
 800c77a:	4618      	mov	r0, r3
 800c77c:	4621      	mov	r1, r4
 800c77e:	f7f4 f9f3 	bl	8000b68 <__aeabi_d2iz>
 800c782:	4603      	mov	r3, r0
 800c784:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800c786:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c788:	f7f3 fed4 	bl	8000534 <__aeabi_i2d>
 800c78c:	a370      	add	r3, pc, #448	; (adr r3, 800c950 <_etoa+0x338>)
 800c78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c792:	f7f3 ff39 	bl	8000608 <__aeabi_dmul>
 800c796:	4603      	mov	r3, r0
 800c798:	460c      	mov	r4, r1
 800c79a:	4618      	mov	r0, r3
 800c79c:	4621      	mov	r1, r4
 800c79e:	f04f 0200 	mov.w	r2, #0
 800c7a2:	4b75      	ldr	r3, [pc, #468]	; (800c978 <_etoa+0x360>)
 800c7a4:	f7f3 fd7a 	bl	800029c <__adddf3>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	460c      	mov	r4, r1
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	f7f4 f9da 	bl	8000b68 <__aeabi_d2iz>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800c7b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c7ba:	f7f3 febb 	bl	8000534 <__aeabi_i2d>
 800c7be:	a366      	add	r3, pc, #408	; (adr r3, 800c958 <_etoa+0x340>)
 800c7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c4:	f7f3 ff20 	bl	8000608 <__aeabi_dmul>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	4698      	mov	r8, r3
 800c7ce:	46a1      	mov	r9, r4
 800c7d0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c7d2:	f7f3 feaf 	bl	8000534 <__aeabi_i2d>
 800c7d6:	a362      	add	r3, pc, #392	; (adr r3, 800c960 <_etoa+0x348>)
 800c7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7dc:	f7f3 ff14 	bl	8000608 <__aeabi_dmul>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	460c      	mov	r4, r1
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	4623      	mov	r3, r4
 800c7e8:	4640      	mov	r0, r8
 800c7ea:	4649      	mov	r1, r9
 800c7ec:	f7f3 fd54 	bl	8000298 <__aeabi_dsub>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	460c      	mov	r4, r1
 800c7f4:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  const double z2 = z * z;
 800c7f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c7fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c800:	f7f3 ff02 	bl	8000608 <__aeabi_dmul>
 800c804:	4603      	mov	r3, r0
 800c806:	460c      	mov	r4, r1
 800c808:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800c80c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c80e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800c812:	4619      	mov	r1, r3
 800c814:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800c818:	f04f 0300 	mov.w	r3, #0
 800c81c:	f04f 0400 	mov.w	r4, #0
 800c820:	050c      	lsls	r4, r1, #20
 800c822:	2300      	movs	r3, #0
 800c824:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800c828:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800c82c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c830:	4602      	mov	r2, r0
 800c832:	460b      	mov	r3, r1
 800c834:	f7f3 fd32 	bl	800029c <__adddf3>
 800c838:	4603      	mov	r3, r0
 800c83a:	460c      	mov	r4, r1
 800c83c:	469a      	mov	sl, r3
 800c83e:	46a3      	mov	fp, r4
 800c840:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c844:	f04f 0000 	mov.w	r0, #0
 800c848:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c84c:	f7f3 fd24 	bl	8000298 <__aeabi_dsub>
 800c850:	4603      	mov	r3, r0
 800c852:	460c      	mov	r4, r1
 800c854:	e9c7 3400 	strd	r3, r4, [r7]
 800c858:	f04f 0200 	mov.w	r2, #0
 800c85c:	4b47      	ldr	r3, [pc, #284]	; (800c97c <_etoa+0x364>)
 800c85e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800c862:	f7f3 fffb 	bl	800085c <__aeabi_ddiv>
 800c866:	4603      	mov	r3, r0
 800c868:	460c      	mov	r4, r1
 800c86a:	4618      	mov	r0, r3
 800c86c:	4621      	mov	r1, r4
 800c86e:	f04f 0200 	mov.w	r2, #0
 800c872:	4b43      	ldr	r3, [pc, #268]	; (800c980 <_etoa+0x368>)
 800c874:	f7f3 fd12 	bl	800029c <__adddf3>
 800c878:	4603      	mov	r3, r0
 800c87a:	460c      	mov	r4, r1
 800c87c:	461a      	mov	r2, r3
 800c87e:	4623      	mov	r3, r4
 800c880:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800c884:	f7f3 ffea 	bl	800085c <__aeabi_ddiv>
 800c888:	4603      	mov	r3, r0
 800c88a:	460c      	mov	r4, r1
 800c88c:	4618      	mov	r0, r3
 800c88e:	4621      	mov	r1, r4
 800c890:	f04f 0200 	mov.w	r2, #0
 800c894:	4b3b      	ldr	r3, [pc, #236]	; (800c984 <_etoa+0x36c>)
 800c896:	f7f3 fd01 	bl	800029c <__adddf3>
 800c89a:	4603      	mov	r3, r0
 800c89c:	460c      	mov	r4, r1
 800c89e:	461a      	mov	r2, r3
 800c8a0:	4623      	mov	r3, r4
 800c8a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800c8a6:	f7f3 ffd9 	bl	800085c <__aeabi_ddiv>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	460c      	mov	r4, r1
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	4623      	mov	r3, r4
 800c8b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c8b6:	f7f3 fcf1 	bl	800029c <__adddf3>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	460c      	mov	r4, r1
 800c8be:	461a      	mov	r2, r3
 800c8c0:	4623      	mov	r3, r4
 800c8c2:	4650      	mov	r0, sl
 800c8c4:	4659      	mov	r1, fp
 800c8c6:	f7f3 ffc9 	bl	800085c <__aeabi_ddiv>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	460c      	mov	r4, r1
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	4621      	mov	r1, r4
 800c8d2:	f04f 0200 	mov.w	r2, #0
 800c8d6:	4b26      	ldr	r3, [pc, #152]	; (800c970 <_etoa+0x358>)
 800c8d8:	f7f3 fce0 	bl	800029c <__adddf3>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	460c      	mov	r4, r1
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	4623      	mov	r3, r4
 800c8e4:	4640      	mov	r0, r8
 800c8e6:	4649      	mov	r1, r9
 800c8e8:	f7f3 fe8e 	bl	8000608 <__aeabi_dmul>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	460c      	mov	r4, r1
 800c8f0:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 800c8f4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	4623      	mov	r3, r4
 800c8fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c900:	f7f4 f8f4 	bl	8000aec <__aeabi_dcmplt>
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00d      	beq.n	800c926 <_etoa+0x30e>
    expval--;
 800c90a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c90c:	3b01      	subs	r3, #1
 800c90e:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 800c910:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c914:	f04f 0200 	mov.w	r2, #0
 800c918:	4b19      	ldr	r3, [pc, #100]	; (800c980 <_etoa+0x368>)
 800c91a:	f7f3 ff9f 	bl	800085c <__aeabi_ddiv>
 800c91e:	4603      	mov	r3, r0
 800c920:	460c      	mov	r4, r1
 800c922:	e9c7 3408 	strd	r3, r4, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800c926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c928:	2b63      	cmp	r3, #99	; 0x63
 800c92a:	dc2d      	bgt.n	800c988 <_etoa+0x370>
 800c92c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c92e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800c932:	db29      	blt.n	800c988 <_etoa+0x370>
 800c934:	2304      	movs	r3, #4
 800c936:	e028      	b.n	800c98a <_etoa+0x372>
 800c938:	509f79fb 	.word	0x509f79fb
 800c93c:	3fd34413 	.word	0x3fd34413
 800c940:	8b60c8b3 	.word	0x8b60c8b3
 800c944:	3fc68a28 	.word	0x3fc68a28
 800c948:	636f4361 	.word	0x636f4361
 800c94c:	3fd287a7 	.word	0x3fd287a7
 800c950:	0979a371 	.word	0x0979a371
 800c954:	400a934f 	.word	0x400a934f
 800c958:	bbb55516 	.word	0xbbb55516
 800c95c:	40026bb1 	.word	0x40026bb1
 800c960:	fefa39ef 	.word	0xfefa39ef
 800c964:	3fe62e42 	.word	0x3fe62e42
 800c968:	7fefffff 	.word	0x7fefffff
 800c96c:	000fffff 	.word	0x000fffff
 800c970:	3ff00000 	.word	0x3ff00000
 800c974:	3ff80000 	.word	0x3ff80000
 800c978:	3fe00000 	.word	0x3fe00000
 800c97c:	402c0000 	.word	0x402c0000
 800c980:	40240000 	.word	0x40240000
 800c984:	40180000 	.word	0x40180000
 800c988:	2305      	movs	r3, #5
 800c98a:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800c98c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c994:	2b00      	cmp	r3, #0
 800c996:	d03d      	beq.n	800ca14 <_etoa+0x3fc>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800c998:	a367      	add	r3, pc, #412	; (adr r3, 800cb38 <_etoa+0x520>)
 800c99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c9a2:	f7f4 f8b7 	bl	8000b14 <__aeabi_dcmpge>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d024      	beq.n	800c9f6 <_etoa+0x3de>
 800c9ac:	a364      	add	r3, pc, #400	; (adr r3, 800cb40 <_etoa+0x528>)
 800c9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c9b6:	f7f4 f899 	bl	8000aec <__aeabi_dcmplt>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d01a      	beq.n	800c9f6 <_etoa+0x3de>
      if ((int)prec > expval) {
 800c9c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c9c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	da07      	bge.n	800c9da <_etoa+0x3c2>
        prec = (unsigned)((int)prec - expval - 1);
 800c9ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c9ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9d0:	1ad3      	subs	r3, r2, r3
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c9d8:	e002      	b.n	800c9e0 <_etoa+0x3c8>
      }
      else {
        prec = 0;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800c9e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c9e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c9e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	657b      	str	r3, [r7, #84]	; 0x54
 800c9f4:	e00e      	b.n	800ca14 <_etoa+0x3fc>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800c9f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d00a      	beq.n	800ca14 <_etoa+0x3fc>
 800c9fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ca02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d004      	beq.n	800ca14 <_etoa+0x3fc>
        --prec;
 800ca0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ca0e:	3b01      	subs	r3, #1
 800ca10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800ca14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 800ca1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ca1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d904      	bls.n	800ca2e <_etoa+0x416>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800ca24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca28:	1ad3      	subs	r3, r2, r3
 800ca2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca2c:	e001      	b.n	800ca32 <_etoa+0x41a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800ca32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ca36:	f003 0302 	and.w	r3, r3, #2
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d004      	beq.n	800ca48 <_etoa+0x430>
 800ca3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d001      	beq.n	800ca48 <_etoa+0x430>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800ca44:	2300      	movs	r3, #0
 800ca46:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 800ca48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d00b      	beq.n	800ca66 <_etoa+0x44e>
    value /= conv.F;
 800ca4e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800ca52:	461a      	mov	r2, r3
 800ca54:	4623      	mov	r3, r4
 800ca56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca5a:	f7f3 feff 	bl	800085c <__aeabi_ddiv>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	460c      	mov	r4, r1
 800ca62:	e9c7 3402 	strd	r3, r4, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800ca6a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d004      	beq.n	800ca7c <_etoa+0x464>
 800ca72:	68bd      	ldr	r5, [r7, #8]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 800ca7a:	e001      	b.n	800ca80 <_etoa+0x468>
 800ca7c:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800ca80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ca84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ca88:	9302      	str	r3, [sp, #8]
 800ca8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca8c:	9301      	str	r3, [sp, #4]
 800ca8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ca92:	9300      	str	r3, [sp, #0]
 800ca94:	ec46 5b10 	vmov	d0, r5, r6
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	697a      	ldr	r2, [r7, #20]
 800ca9c:	69b9      	ldr	r1, [r7, #24]
 800ca9e:	69f8      	ldr	r0, [r7, #28]
 800caa0:	f7ff fb4e 	bl	800c140 <_ftoa>
 800caa4:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 800caa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d03f      	beq.n	800cb2c <_etoa+0x514>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800caac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cab0:	f003 0320 	and.w	r3, r3, #32
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d001      	beq.n	800cabc <_etoa+0x4a4>
 800cab8:	2045      	movs	r0, #69	; 0x45
 800caba:	e000      	b.n	800cabe <_etoa+0x4a6>
 800cabc:	2065      	movs	r0, #101	; 0x65
 800cabe:	697a      	ldr	r2, [r7, #20]
 800cac0:	1c53      	adds	r3, r2, #1
 800cac2:	617b      	str	r3, [r7, #20]
 800cac4:	69fc      	ldr	r4, [r7, #28]
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	69b9      	ldr	r1, [r7, #24]
 800caca:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800cacc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cace:	2b00      	cmp	r3, #0
 800cad0:	bfb8      	it	lt
 800cad2:	425b      	neglt	r3, r3
 800cad4:	4618      	mov	r0, r3
 800cad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cad8:	0fdb      	lsrs	r3, r3, #31
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cade:	3a01      	subs	r2, #1
 800cae0:	2105      	movs	r1, #5
 800cae2:	9105      	str	r1, [sp, #20]
 800cae4:	9204      	str	r2, [sp, #16]
 800cae6:	2200      	movs	r2, #0
 800cae8:	9203      	str	r2, [sp, #12]
 800caea:	220a      	movs	r2, #10
 800caec:	9202      	str	r2, [sp, #8]
 800caee:	9301      	str	r3, [sp, #4]
 800caf0:	9000      	str	r0, [sp, #0]
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	697a      	ldr	r2, [r7, #20]
 800caf6:	69b9      	ldr	r1, [r7, #24]
 800caf8:	69f8      	ldr	r0, [r7, #28]
 800cafa:	f7ff fa4b 	bl	800bf94 <_ntoa_long>
 800cafe:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800cb00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cb04:	f003 0302 	and.w	r3, r3, #2
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d00f      	beq.n	800cb2c <_etoa+0x514>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800cb0c:	e007      	b.n	800cb1e <_etoa+0x506>
 800cb0e:	697a      	ldr	r2, [r7, #20]
 800cb10:	1c53      	adds	r3, r2, #1
 800cb12:	617b      	str	r3, [r7, #20]
 800cb14:	69fc      	ldr	r4, [r7, #28]
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	69b9      	ldr	r1, [r7, #24]
 800cb1a:	2020      	movs	r0, #32
 800cb1c:	47a0      	blx	r4
 800cb1e:	697a      	ldr	r2, [r7, #20]
 800cb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb22:	1ad3      	subs	r3, r2, r3
 800cb24:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d8f0      	bhi.n	800cb0e <_etoa+0x4f6>
    }
  }
  return idx;
 800cb2c:	697b      	ldr	r3, [r7, #20]
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	375c      	adds	r7, #92	; 0x5c
 800cb32:	46bd      	mov	sp, r7
 800cb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb38:	eb1c432d 	.word	0xeb1c432d
 800cb3c:	3f1a36e2 	.word	0x3f1a36e2
 800cb40:	00000000 	.word	0x00000000
 800cb44:	412e8480 	.word	0x412e8480

0800cb48 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800cb48:	b5b0      	push	{r4, r5, r7, lr}
 800cb4a:	b0a0      	sub	sp, #128	; 0x80
 800cb4c:	af0a      	add	r7, sp, #40	; 0x28
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
 800cb54:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800cb56:	2300      	movs	r3, #0
 800cb58:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	f040 8492 	bne.w	800d486 <_vsnprintf+0x93e>
    // use null output function
    out = _out_null;
 800cb62:	4ba0      	ldr	r3, [pc, #640]	; (800cde4 <_vsnprintf+0x29c>)
 800cb64:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800cb66:	f000 bc8e 	b.w	800d486 <_vsnprintf+0x93e>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	2b25      	cmp	r3, #37	; 0x25
 800cb70:	d00d      	beq.n	800cb8e <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	7818      	ldrb	r0, [r3, #0]
 800cb76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb78:	1c53      	adds	r3, r2, #1
 800cb7a:	647b      	str	r3, [r7, #68]	; 0x44
 800cb7c:	68fc      	ldr	r4, [r7, #12]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	68b9      	ldr	r1, [r7, #8]
 800cb82:	47a0      	blx	r4
      format++;
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	3301      	adds	r3, #1
 800cb88:	603b      	str	r3, [r7, #0]
      continue;
 800cb8a:	f000 bc7c 	b.w	800d486 <_vsnprintf+0x93e>
    }
    else {
      // yes, evaluate it
      format++;
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	3301      	adds	r3, #1
 800cb92:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800cb94:	2300      	movs	r3, #0
 800cb96:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	3b20      	subs	r3, #32
 800cb9e:	2b10      	cmp	r3, #16
 800cba0:	d856      	bhi.n	800cc50 <_vsnprintf+0x108>
 800cba2:	a201      	add	r2, pc, #4	; (adr r2, 800cba8 <_vsnprintf+0x60>)
 800cba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cba8:	0800cc29 	.word	0x0800cc29
 800cbac:	0800cc51 	.word	0x0800cc51
 800cbb0:	0800cc51 	.word	0x0800cc51
 800cbb4:	0800cc3d 	.word	0x0800cc3d
 800cbb8:	0800cc51 	.word	0x0800cc51
 800cbbc:	0800cc51 	.word	0x0800cc51
 800cbc0:	0800cc51 	.word	0x0800cc51
 800cbc4:	0800cc51 	.word	0x0800cc51
 800cbc8:	0800cc51 	.word	0x0800cc51
 800cbcc:	0800cc51 	.word	0x0800cc51
 800cbd0:	0800cc51 	.word	0x0800cc51
 800cbd4:	0800cc15 	.word	0x0800cc15
 800cbd8:	0800cc51 	.word	0x0800cc51
 800cbdc:	0800cc01 	.word	0x0800cc01
 800cbe0:	0800cc51 	.word	0x0800cc51
 800cbe4:	0800cc51 	.word	0x0800cc51
 800cbe8:	0800cbed 	.word	0x0800cbed
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800cbec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbee:	f043 0301 	orr.w	r3, r3, #1
 800cbf2:	657b      	str	r3, [r7, #84]	; 0x54
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	603b      	str	r3, [r7, #0]
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbfe:	e02a      	b.n	800cc56 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800cc00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc02:	f043 0302 	orr.w	r3, r3, #2
 800cc06:	657b      	str	r3, [r7, #84]	; 0x54
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	603b      	str	r3, [r7, #0]
 800cc0e:	2301      	movs	r3, #1
 800cc10:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc12:	e020      	b.n	800cc56 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800cc14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc16:	f043 0304 	orr.w	r3, r3, #4
 800cc1a:	657b      	str	r3, [r7, #84]	; 0x54
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	603b      	str	r3, [r7, #0]
 800cc22:	2301      	movs	r3, #1
 800cc24:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc26:	e016      	b.n	800cc56 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800cc28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc2a:	f043 0308 	orr.w	r3, r3, #8
 800cc2e:	657b      	str	r3, [r7, #84]	; 0x54
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	3301      	adds	r3, #1
 800cc34:	603b      	str	r3, [r7, #0]
 800cc36:	2301      	movs	r3, #1
 800cc38:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc3a:	e00c      	b.n	800cc56 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800cc3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc3e:	f043 0310 	orr.w	r3, r3, #16
 800cc42:	657b      	str	r3, [r7, #84]	; 0x54
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	3301      	adds	r3, #1
 800cc48:	603b      	str	r3, [r7, #0]
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc4e:	e002      	b.n	800cc56 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 800cc50:	2300      	movs	r3, #0
 800cc52:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc54:	bf00      	nop
      }
    } while (n);
 800cc56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d19d      	bne.n	800cb98 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7ff f82e 	bl	800bcc6 <_is_digit>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d005      	beq.n	800cc7c <_vsnprintf+0x134>
      width = _atoi(&format);
 800cc70:	463b      	mov	r3, r7
 800cc72:	4618      	mov	r0, r3
 800cc74:	f7ff f83e 	bl	800bcf4 <_atoi>
 800cc78:	6538      	str	r0, [r7, #80]	; 0x50
 800cc7a:	e018      	b.n	800ccae <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	2b2a      	cmp	r3, #42	; 0x2a
 800cc82:	d114      	bne.n	800ccae <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 800cc84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc86:	1d1a      	adds	r2, r3, #4
 800cc88:	66ba      	str	r2, [r7, #104]	; 0x68
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	da07      	bge.n	800cca4 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 800cc94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc96:	f043 0302 	orr.w	r3, r3, #2
 800cc9a:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800cc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9e:	425b      	negs	r3, r3
 800cca0:	653b      	str	r3, [r7, #80]	; 0x50
 800cca2:	e001      	b.n	800cca8 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 800cca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca6:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	2b2e      	cmp	r3, #46	; 0x2e
 800ccb8:	d124      	bne.n	800cd04 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 800ccba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ccc0:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7fe fffa 	bl	800bcc6 <_is_digit>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d005      	beq.n	800cce4 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 800ccd8:	463b      	mov	r3, r7
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7ff f80a 	bl	800bcf4 <_atoi>
 800cce0:	64f8      	str	r0, [r7, #76]	; 0x4c
 800cce2:	e00f      	b.n	800cd04 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	2b2a      	cmp	r3, #42	; 0x2a
 800ccea:	d10b      	bne.n	800cd04 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 800ccec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ccee:	1d1a      	adds	r2, r3, #4
 800ccf0:	66ba      	str	r2, [r7, #104]	; 0x68
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800ccf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ccfc:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	3301      	adds	r3, #1
 800cd02:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	3b68      	subs	r3, #104	; 0x68
 800cd0a:	2b12      	cmp	r3, #18
 800cd0c:	d866      	bhi.n	800cddc <_vsnprintf+0x294>
 800cd0e:	a201      	add	r2, pc, #4	; (adr r2, 800cd14 <_vsnprintf+0x1cc>)
 800cd10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd14:	0800cd87 	.word	0x0800cd87
 800cd18:	0800cddd 	.word	0x0800cddd
 800cd1c:	0800cdbd 	.word	0x0800cdbd
 800cd20:	0800cddd 	.word	0x0800cddd
 800cd24:	0800cd61 	.word	0x0800cd61
 800cd28:	0800cddd 	.word	0x0800cddd
 800cd2c:	0800cddd 	.word	0x0800cddd
 800cd30:	0800cddd 	.word	0x0800cddd
 800cd34:	0800cddd 	.word	0x0800cddd
 800cd38:	0800cddd 	.word	0x0800cddd
 800cd3c:	0800cddd 	.word	0x0800cddd
 800cd40:	0800cddd 	.word	0x0800cddd
 800cd44:	0800cdad 	.word	0x0800cdad
 800cd48:	0800cddd 	.word	0x0800cddd
 800cd4c:	0800cddd 	.word	0x0800cddd
 800cd50:	0800cddd 	.word	0x0800cddd
 800cd54:	0800cddd 	.word	0x0800cddd
 800cd58:	0800cddd 	.word	0x0800cddd
 800cd5c:	0800cdcd 	.word	0x0800cdcd
      case 'l' :
        flags |= FLAGS_LONG;
 800cd60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd66:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	2b6c      	cmp	r3, #108	; 0x6c
 800cd74:	d134      	bne.n	800cde0 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800cd76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cd7c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	3301      	adds	r3, #1
 800cd82:	603b      	str	r3, [r7, #0]
        }
        break;
 800cd84:	e02c      	b.n	800cde0 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800cd86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd8c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	3301      	adds	r3, #1
 800cd92:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	2b68      	cmp	r3, #104	; 0x68
 800cd9a:	d125      	bne.n	800cde8 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 800cd9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cda2:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	3301      	adds	r3, #1
 800cda8:	603b      	str	r3, [r7, #0]
        }
        break;
 800cdaa:	e01d      	b.n	800cde8 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800cdac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cdb2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	603b      	str	r3, [r7, #0]
        break;
 800cdba:	e016      	b.n	800cdea <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800cdbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cdc2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	603b      	str	r3, [r7, #0]
        break;
 800cdca:	e00e      	b.n	800cdea <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800cdcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cdd2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	3301      	adds	r3, #1
 800cdd8:	603b      	str	r3, [r7, #0]
        break;
 800cdda:	e006      	b.n	800cdea <_vsnprintf+0x2a2>
      default :
        break;
 800cddc:	bf00      	nop
 800cdde:	e004      	b.n	800cdea <_vsnprintf+0x2a2>
        break;
 800cde0:	bf00      	nop
 800cde2:	e002      	b.n	800cdea <_vsnprintf+0x2a2>
 800cde4:	0800bc4b 	.word	0x0800bc4b
        break;
 800cde8:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	3b25      	subs	r3, #37	; 0x25
 800cdf0:	2b53      	cmp	r3, #83	; 0x53
 800cdf2:	f200 833b 	bhi.w	800d46c <_vsnprintf+0x924>
 800cdf6:	a201      	add	r2, pc, #4	; (adr r2, 800cdfc <_vsnprintf+0x2b4>)
 800cdf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdfc:	0800d455 	.word	0x0800d455
 800ce00:	0800d46d 	.word	0x0800d46d
 800ce04:	0800d46d 	.word	0x0800d46d
 800ce08:	0800d46d 	.word	0x0800d46d
 800ce0c:	0800d46d 	.word	0x0800d46d
 800ce10:	0800d46d 	.word	0x0800d46d
 800ce14:	0800d46d 	.word	0x0800d46d
 800ce18:	0800d46d 	.word	0x0800d46d
 800ce1c:	0800d46d 	.word	0x0800d46d
 800ce20:	0800d46d 	.word	0x0800d46d
 800ce24:	0800d46d 	.word	0x0800d46d
 800ce28:	0800d46d 	.word	0x0800d46d
 800ce2c:	0800d46d 	.word	0x0800d46d
 800ce30:	0800d46d 	.word	0x0800d46d
 800ce34:	0800d46d 	.word	0x0800d46d
 800ce38:	0800d46d 	.word	0x0800d46d
 800ce3c:	0800d46d 	.word	0x0800d46d
 800ce40:	0800d46d 	.word	0x0800d46d
 800ce44:	0800d46d 	.word	0x0800d46d
 800ce48:	0800d46d 	.word	0x0800d46d
 800ce4c:	0800d46d 	.word	0x0800d46d
 800ce50:	0800d46d 	.word	0x0800d46d
 800ce54:	0800d46d 	.word	0x0800d46d
 800ce58:	0800d46d 	.word	0x0800d46d
 800ce5c:	0800d46d 	.word	0x0800d46d
 800ce60:	0800d46d 	.word	0x0800d46d
 800ce64:	0800d46d 	.word	0x0800d46d
 800ce68:	0800d46d 	.word	0x0800d46d
 800ce6c:	0800d46d 	.word	0x0800d46d
 800ce70:	0800d46d 	.word	0x0800d46d
 800ce74:	0800d46d 	.word	0x0800d46d
 800ce78:	0800d46d 	.word	0x0800d46d
 800ce7c:	0800d225 	.word	0x0800d225
 800ce80:	0800d1d9 	.word	0x0800d1d9
 800ce84:	0800d225 	.word	0x0800d225
 800ce88:	0800d46d 	.word	0x0800d46d
 800ce8c:	0800d46d 	.word	0x0800d46d
 800ce90:	0800d46d 	.word	0x0800d46d
 800ce94:	0800d46d 	.word	0x0800d46d
 800ce98:	0800d46d 	.word	0x0800d46d
 800ce9c:	0800d46d 	.word	0x0800d46d
 800cea0:	0800d46d 	.word	0x0800d46d
 800cea4:	0800d46d 	.word	0x0800d46d
 800cea8:	0800d46d 	.word	0x0800d46d
 800ceac:	0800d46d 	.word	0x0800d46d
 800ceb0:	0800d46d 	.word	0x0800d46d
 800ceb4:	0800d46d 	.word	0x0800d46d
 800ceb8:	0800d46d 	.word	0x0800d46d
 800cebc:	0800d46d 	.word	0x0800d46d
 800cec0:	0800d46d 	.word	0x0800d46d
 800cec4:	0800d46d 	.word	0x0800d46d
 800cec8:	0800cf4d 	.word	0x0800cf4d
 800cecc:	0800d46d 	.word	0x0800d46d
 800ced0:	0800d46d 	.word	0x0800d46d
 800ced4:	0800d46d 	.word	0x0800d46d
 800ced8:	0800d46d 	.word	0x0800d46d
 800cedc:	0800d46d 	.word	0x0800d46d
 800cee0:	0800d46d 	.word	0x0800d46d
 800cee4:	0800d46d 	.word	0x0800d46d
 800cee8:	0800d46d 	.word	0x0800d46d
 800ceec:	0800d46d 	.word	0x0800d46d
 800cef0:	0800cf4d 	.word	0x0800cf4d
 800cef4:	0800d291 	.word	0x0800d291
 800cef8:	0800cf4d 	.word	0x0800cf4d
 800cefc:	0800d225 	.word	0x0800d225
 800cf00:	0800d1d9 	.word	0x0800d1d9
 800cf04:	0800d225 	.word	0x0800d225
 800cf08:	0800d46d 	.word	0x0800d46d
 800cf0c:	0800cf4d 	.word	0x0800cf4d
 800cf10:	0800d46d 	.word	0x0800d46d
 800cf14:	0800d46d 	.word	0x0800d46d
 800cf18:	0800d46d 	.word	0x0800d46d
 800cf1c:	0800d46d 	.word	0x0800d46d
 800cf20:	0800d46d 	.word	0x0800d46d
 800cf24:	0800cf4d 	.word	0x0800cf4d
 800cf28:	0800d3c9 	.word	0x0800d3c9
 800cf2c:	0800d46d 	.word	0x0800d46d
 800cf30:	0800d46d 	.word	0x0800d46d
 800cf34:	0800d305 	.word	0x0800d305
 800cf38:	0800d46d 	.word	0x0800d46d
 800cf3c:	0800cf4d 	.word	0x0800cf4d
 800cf40:	0800d46d 	.word	0x0800d46d
 800cf44:	0800d46d 	.word	0x0800d46d
 800cf48:	0800cf4d 	.word	0x0800cf4d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	2b78      	cmp	r3, #120	; 0x78
 800cf52:	d003      	beq.n	800cf5c <_vsnprintf+0x414>
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	2b58      	cmp	r3, #88	; 0x58
 800cf5a:	d102      	bne.n	800cf62 <_vsnprintf+0x41a>
          base = 16U;
 800cf5c:	2310      	movs	r3, #16
 800cf5e:	643b      	str	r3, [r7, #64]	; 0x40
 800cf60:	e013      	b.n	800cf8a <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	2b6f      	cmp	r3, #111	; 0x6f
 800cf68:	d102      	bne.n	800cf70 <_vsnprintf+0x428>
          base =  8U;
 800cf6a:	2308      	movs	r3, #8
 800cf6c:	643b      	str	r3, [r7, #64]	; 0x40
 800cf6e:	e00c      	b.n	800cf8a <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	2b62      	cmp	r3, #98	; 0x62
 800cf76:	d102      	bne.n	800cf7e <_vsnprintf+0x436>
          base =  2U;
 800cf78:	2302      	movs	r3, #2
 800cf7a:	643b      	str	r3, [r7, #64]	; 0x40
 800cf7c:	e005      	b.n	800cf8a <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 800cf7e:	230a      	movs	r3, #10
 800cf80:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800cf82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf84:	f023 0310 	bic.w	r3, r3, #16
 800cf88:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	2b58      	cmp	r3, #88	; 0x58
 800cf90:	d103      	bne.n	800cf9a <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 800cf92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf94:	f043 0320 	orr.w	r3, r3, #32
 800cf98:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	2b69      	cmp	r3, #105	; 0x69
 800cfa0:	d007      	beq.n	800cfb2 <_vsnprintf+0x46a>
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	2b64      	cmp	r3, #100	; 0x64
 800cfa8:	d003      	beq.n	800cfb2 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800cfaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfac:	f023 030c 	bic.w	r3, r3, #12
 800cfb0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800cfb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d003      	beq.n	800cfc4 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 800cfbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfbe:	f023 0301 	bic.w	r3, r3, #1
 800cfc2:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	2b69      	cmp	r3, #105	; 0x69
 800cfca:	d004      	beq.n	800cfd6 <_vsnprintf+0x48e>
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	2b64      	cmp	r3, #100	; 0x64
 800cfd2:	f040 808d 	bne.w	800d0f0 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800cfd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d02e      	beq.n	800d03e <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800cfe0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cfe2:	3307      	adds	r3, #7
 800cfe4:	f023 0307 	bic.w	r3, r3, #7
 800cfe8:	f103 0208 	add.w	r2, r3, #8
 800cfec:	66ba      	str	r2, [r7, #104]	; 0x68
 800cfee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cff2:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800cff6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	f174 0200 	sbcs.w	r2, r4, #0
 800d000:	da02      	bge.n	800d008 <_vsnprintf+0x4c0>
 800d002:	425b      	negs	r3, r3
 800d004:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 800d008:	4619      	mov	r1, r3
 800d00a:	4622      	mov	r2, r4
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	0fdb      	lsrs	r3, r3, #31
 800d010:	b2d8      	uxtb	r0, r3
 800d012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d014:	f04f 0400 	mov.w	r4, #0
 800d018:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800d01a:	9508      	str	r5, [sp, #32]
 800d01c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800d01e:	9507      	str	r5, [sp, #28]
 800d020:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800d022:	9506      	str	r5, [sp, #24]
 800d024:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d028:	9002      	str	r0, [sp, #8]
 800d02a:	e9cd 1200 	strd	r1, r2, [sp]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d032:	68b9      	ldr	r1, [r7, #8]
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f7ff f814 	bl	800c062 <_ntoa_long_long>
 800d03a:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800d03c:	e0c8      	b.n	800d1d0 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800d03e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d044:	2b00      	cmp	r3, #0
 800d046:	d01e      	beq.n	800d086 <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 800d048:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d04a:	1d1a      	adds	r2, r3, #4
 800d04c:	66ba      	str	r2, [r7, #104]	; 0x68
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800d052:	69fb      	ldr	r3, [r7, #28]
 800d054:	2b00      	cmp	r3, #0
 800d056:	bfb8      	it	lt
 800d058:	425b      	neglt	r3, r3
 800d05a:	4619      	mov	r1, r3
 800d05c:	69fb      	ldr	r3, [r7, #28]
 800d05e:	0fdb      	lsrs	r3, r3, #31
 800d060:	b2db      	uxtb	r3, r3
 800d062:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d064:	9205      	str	r2, [sp, #20]
 800d066:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d068:	9204      	str	r2, [sp, #16]
 800d06a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d06c:	9203      	str	r2, [sp, #12]
 800d06e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d070:	9202      	str	r2, [sp, #8]
 800d072:	9301      	str	r3, [sp, #4]
 800d074:	9100      	str	r1, [sp, #0]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d07a:	68b9      	ldr	r1, [r7, #8]
 800d07c:	68f8      	ldr	r0, [r7, #12]
 800d07e:	f7fe ff89 	bl	800bf94 <_ntoa_long>
 800d082:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800d084:	e0a4      	b.n	800d1d0 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800d086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d005      	beq.n	800d09c <_vsnprintf+0x554>
 800d090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d092:	1d1a      	adds	r2, r3, #4
 800d094:	66ba      	str	r2, [r7, #104]	; 0x68
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	e00e      	b.n	800d0ba <_vsnprintf+0x572>
 800d09c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d005      	beq.n	800d0b2 <_vsnprintf+0x56a>
 800d0a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0a8:	1d1a      	adds	r2, r3, #4
 800d0aa:	66ba      	str	r2, [r7, #104]	; 0x68
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	b21b      	sxth	r3, r3
 800d0b0:	e003      	b.n	800d0ba <_vsnprintf+0x572>
 800d0b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0b4:	1d1a      	adds	r2, r3, #4
 800d0b6:	66ba      	str	r2, [r7, #104]	; 0x68
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800d0bc:	6a3b      	ldr	r3, [r7, #32]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	bfb8      	it	lt
 800d0c2:	425b      	neglt	r3, r3
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	6a3b      	ldr	r3, [r7, #32]
 800d0c8:	0fdb      	lsrs	r3, r3, #31
 800d0ca:	b2db      	uxtb	r3, r3
 800d0cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d0ce:	9205      	str	r2, [sp, #20]
 800d0d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0d2:	9204      	str	r2, [sp, #16]
 800d0d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d0d6:	9203      	str	r2, [sp, #12]
 800d0d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0da:	9202      	str	r2, [sp, #8]
 800d0dc:	9301      	str	r3, [sp, #4]
 800d0de:	9100      	str	r1, [sp, #0]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d0e4:	68b9      	ldr	r1, [r7, #8]
 800d0e6:	68f8      	ldr	r0, [r7, #12]
 800d0e8:	f7fe ff54 	bl	800bf94 <_ntoa_long>
 800d0ec:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800d0ee:	e06f      	b.n	800d1d0 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800d0f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d020      	beq.n	800d13c <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800d0fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0fc:	3307      	adds	r3, #7
 800d0fe:	f023 0307 	bic.w	r3, r3, #7
 800d102:	f103 0208 	add.w	r2, r3, #8
 800d106:	66ba      	str	r2, [r7, #104]	; 0x68
 800d108:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d10c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d10e:	4611      	mov	r1, r2
 800d110:	f04f 0200 	mov.w	r2, #0
 800d114:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d116:	9008      	str	r0, [sp, #32]
 800d118:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d11a:	9007      	str	r0, [sp, #28]
 800d11c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d11e:	9006      	str	r0, [sp, #24]
 800d120:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800d124:	2200      	movs	r2, #0
 800d126:	9202      	str	r2, [sp, #8]
 800d128:	e9cd 3400 	strd	r3, r4, [sp]
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d130:	68b9      	ldr	r1, [r7, #8]
 800d132:	68f8      	ldr	r0, [r7, #12]
 800d134:	f7fe ff95 	bl	800c062 <_ntoa_long_long>
 800d138:	6478      	str	r0, [r7, #68]	; 0x44
 800d13a:	e049      	b.n	800d1d0 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800d13c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d13e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d142:	2b00      	cmp	r3, #0
 800d144:	d016      	beq.n	800d174 <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800d146:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d148:	1d1a      	adds	r2, r3, #4
 800d14a:	66ba      	str	r2, [r7, #104]	; 0x68
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d150:	9205      	str	r2, [sp, #20]
 800d152:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d154:	9204      	str	r2, [sp, #16]
 800d156:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d158:	9203      	str	r2, [sp, #12]
 800d15a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d15c:	9202      	str	r2, [sp, #8]
 800d15e:	2200      	movs	r2, #0
 800d160:	9201      	str	r2, [sp, #4]
 800d162:	9300      	str	r3, [sp, #0]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d168:	68b9      	ldr	r1, [r7, #8]
 800d16a:	68f8      	ldr	r0, [r7, #12]
 800d16c:	f7fe ff12 	bl	800bf94 <_ntoa_long>
 800d170:	6478      	str	r0, [r7, #68]	; 0x44
 800d172:	e02d      	b.n	800d1d0 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800d174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d005      	beq.n	800d18a <_vsnprintf+0x642>
 800d17e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d180:	1d1a      	adds	r2, r3, #4
 800d182:	66ba      	str	r2, [r7, #104]	; 0x68
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	b2db      	uxtb	r3, r3
 800d188:	e00e      	b.n	800d1a8 <_vsnprintf+0x660>
 800d18a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d18c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d190:	2b00      	cmp	r3, #0
 800d192:	d005      	beq.n	800d1a0 <_vsnprintf+0x658>
 800d194:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d196:	1d1a      	adds	r2, r3, #4
 800d198:	66ba      	str	r2, [r7, #104]	; 0x68
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	e003      	b.n	800d1a8 <_vsnprintf+0x660>
 800d1a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1a2:	1d1a      	adds	r2, r3, #4
 800d1a4:	66ba      	str	r2, [r7, #104]	; 0x68
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800d1aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1ac:	9305      	str	r3, [sp, #20]
 800d1ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1b0:	9304      	str	r3, [sp, #16]
 800d1b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1b4:	9303      	str	r3, [sp, #12]
 800d1b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1b8:	9302      	str	r3, [sp, #8]
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	9301      	str	r3, [sp, #4]
 800d1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c0:	9300      	str	r3, [sp, #0]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1c6:	68b9      	ldr	r1, [r7, #8]
 800d1c8:	68f8      	ldr	r0, [r7, #12]
 800d1ca:	f7fe fee3 	bl	800bf94 <_ntoa_long>
 800d1ce:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	603b      	str	r3, [r7, #0]
        break;
 800d1d6:	e156      	b.n	800d486 <_vsnprintf+0x93e>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	2b46      	cmp	r3, #70	; 0x46
 800d1de:	d103      	bne.n	800d1e8 <_vsnprintf+0x6a0>
 800d1e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1e2:	f043 0320 	orr.w	r3, r3, #32
 800d1e6:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800d1e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1ea:	3307      	adds	r3, #7
 800d1ec:	f023 0307 	bic.w	r3, r3, #7
 800d1f0:	f103 0208 	add.w	r2, r3, #8
 800d1f4:	66ba      	str	r2, [r7, #104]	; 0x68
 800d1f6:	ed93 7b00 	vldr	d7, [r3]
 800d1fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1fc:	9302      	str	r3, [sp, #8]
 800d1fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d200:	9301      	str	r3, [sp, #4]
 800d202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d204:	9300      	str	r3, [sp, #0]
 800d206:	eeb0 0a47 	vmov.f32	s0, s14
 800d20a:	eef0 0a67 	vmov.f32	s1, s15
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d212:	68b9      	ldr	r1, [r7, #8]
 800d214:	68f8      	ldr	r0, [r7, #12]
 800d216:	f7fe ff93 	bl	800c140 <_ftoa>
 800d21a:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	3301      	adds	r3, #1
 800d220:	603b      	str	r3, [r7, #0]
        break;
 800d222:	e130      	b.n	800d486 <_vsnprintf+0x93e>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	2b67      	cmp	r3, #103	; 0x67
 800d22a:	d003      	beq.n	800d234 <_vsnprintf+0x6ec>
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	2b47      	cmp	r3, #71	; 0x47
 800d232:	d103      	bne.n	800d23c <_vsnprintf+0x6f4>
 800d234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d236:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d23a:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	2b45      	cmp	r3, #69	; 0x45
 800d242:	d003      	beq.n	800d24c <_vsnprintf+0x704>
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	2b47      	cmp	r3, #71	; 0x47
 800d24a:	d103      	bne.n	800d254 <_vsnprintf+0x70c>
 800d24c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d24e:	f043 0320 	orr.w	r3, r3, #32
 800d252:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800d254:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d256:	3307      	adds	r3, #7
 800d258:	f023 0307 	bic.w	r3, r3, #7
 800d25c:	f103 0208 	add.w	r2, r3, #8
 800d260:	66ba      	str	r2, [r7, #104]	; 0x68
 800d262:	ed93 7b00 	vldr	d7, [r3]
 800d266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d268:	9302      	str	r3, [sp, #8]
 800d26a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d26c:	9301      	str	r3, [sp, #4]
 800d26e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d270:	9300      	str	r3, [sp, #0]
 800d272:	eeb0 0a47 	vmov.f32	s0, s14
 800d276:	eef0 0a67 	vmov.f32	s1, s15
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d27e:	68b9      	ldr	r1, [r7, #8]
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f7ff f9c9 	bl	800c618 <_etoa>
 800d286:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	3301      	adds	r3, #1
 800d28c:	603b      	str	r3, [r7, #0]
        break;
 800d28e:	e0fa      	b.n	800d486 <_vsnprintf+0x93e>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800d290:	2301      	movs	r3, #1
 800d292:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800d294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d296:	f003 0302 	and.w	r3, r3, #2
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d10e      	bne.n	800d2bc <_vsnprintf+0x774>
          while (l++ < width) {
 800d29e:	e007      	b.n	800d2b0 <_vsnprintf+0x768>
            out(' ', buffer, idx++, maxlen);
 800d2a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2a2:	1c53      	adds	r3, r2, #1
 800d2a4:	647b      	str	r3, [r7, #68]	; 0x44
 800d2a6:	68fc      	ldr	r4, [r7, #12]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	68b9      	ldr	r1, [r7, #8]
 800d2ac:	2020      	movs	r0, #32
 800d2ae:	47a0      	blx	r4
          while (l++ < width) {
 800d2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2b2:	1c5a      	adds	r2, r3, #1
 800d2b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d2b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d8f1      	bhi.n	800d2a0 <_vsnprintf+0x758>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800d2bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d2be:	1d1a      	adds	r2, r3, #4
 800d2c0:	66ba      	str	r2, [r7, #104]	; 0x68
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	b2d8      	uxtb	r0, r3
 800d2c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2c8:	1c53      	adds	r3, r2, #1
 800d2ca:	647b      	str	r3, [r7, #68]	; 0x44
 800d2cc:	68fc      	ldr	r4, [r7, #12]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	68b9      	ldr	r1, [r7, #8]
 800d2d2:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800d2d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2d6:	f003 0302 	and.w	r3, r3, #2
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d00e      	beq.n	800d2fc <_vsnprintf+0x7b4>
          while (l++ < width) {
 800d2de:	e007      	b.n	800d2f0 <_vsnprintf+0x7a8>
            out(' ', buffer, idx++, maxlen);
 800d2e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2e2:	1c53      	adds	r3, r2, #1
 800d2e4:	647b      	str	r3, [r7, #68]	; 0x44
 800d2e6:	68fc      	ldr	r4, [r7, #12]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	68b9      	ldr	r1, [r7, #8]
 800d2ec:	2020      	movs	r0, #32
 800d2ee:	47a0      	blx	r4
          while (l++ < width) {
 800d2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2f2:	1c5a      	adds	r2, r3, #1
 800d2f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d2f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d8f1      	bhi.n	800d2e0 <_vsnprintf+0x798>
          }
        }
        format++;
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	3301      	adds	r3, #1
 800d300:	603b      	str	r3, [r7, #0]
        break;
 800d302:	e0c0      	b.n	800d486 <_vsnprintf+0x93e>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800d304:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d306:	1d1a      	adds	r2, r3, #4
 800d308:	66ba      	str	r2, [r7, #104]	; 0x68
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800d30e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d310:	2b00      	cmp	r3, #0
 800d312:	d001      	beq.n	800d318 <_vsnprintf+0x7d0>
 800d314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d316:	e001      	b.n	800d31c <_vsnprintf+0x7d4>
 800d318:	f04f 33ff 	mov.w	r3, #4294967295
 800d31c:	4619      	mov	r1, r3
 800d31e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d320:	f7fe fcb4 	bl	800bc8c <_strnlen_s>
 800d324:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800d326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d005      	beq.n	800d33c <_vsnprintf+0x7f4>
          l = (l < precision ? l : precision);
 800d330:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d334:	4293      	cmp	r3, r2
 800d336:	bf28      	it	cs
 800d338:	4613      	movcs	r3, r2
 800d33a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 800d33c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d33e:	f003 0302 	and.w	r3, r3, #2
 800d342:	2b00      	cmp	r3, #0
 800d344:	d11a      	bne.n	800d37c <_vsnprintf+0x834>
          while (l++ < width) {
 800d346:	e007      	b.n	800d358 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 800d348:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d34a:	1c53      	adds	r3, r2, #1
 800d34c:	647b      	str	r3, [r7, #68]	; 0x44
 800d34e:	68fc      	ldr	r4, [r7, #12]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	68b9      	ldr	r1, [r7, #8]
 800d354:	2020      	movs	r0, #32
 800d356:	47a0      	blx	r4
          while (l++ < width) {
 800d358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d35a:	1c5a      	adds	r2, r3, #1
 800d35c:	637a      	str	r2, [r7, #52]	; 0x34
 800d35e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d360:	429a      	cmp	r2, r3
 800d362:	d8f1      	bhi.n	800d348 <_vsnprintf+0x800>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800d364:	e00a      	b.n	800d37c <_vsnprintf+0x834>
          out(*(p++), buffer, idx++, maxlen);
 800d366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d368:	1c5a      	adds	r2, r3, #1
 800d36a:	63ba      	str	r2, [r7, #56]	; 0x38
 800d36c:	7818      	ldrb	r0, [r3, #0]
 800d36e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d370:	1c53      	adds	r3, r2, #1
 800d372:	647b      	str	r3, [r7, #68]	; 0x44
 800d374:	68fc      	ldr	r4, [r7, #12]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	68b9      	ldr	r1, [r7, #8]
 800d37a:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800d37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d009      	beq.n	800d398 <_vsnprintf+0x850>
 800d384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d0eb      	beq.n	800d366 <_vsnprintf+0x81e>
 800d38e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d390:	1e5a      	subs	r2, r3, #1
 800d392:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d394:	2b00      	cmp	r3, #0
 800d396:	d1e6      	bne.n	800d366 <_vsnprintf+0x81e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800d398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d39a:	f003 0302 	and.w	r3, r3, #2
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d00e      	beq.n	800d3c0 <_vsnprintf+0x878>
          while (l++ < width) {
 800d3a2:	e007      	b.n	800d3b4 <_vsnprintf+0x86c>
            out(' ', buffer, idx++, maxlen);
 800d3a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d3a6:	1c53      	adds	r3, r2, #1
 800d3a8:	647b      	str	r3, [r7, #68]	; 0x44
 800d3aa:	68fc      	ldr	r4, [r7, #12]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	68b9      	ldr	r1, [r7, #8]
 800d3b0:	2020      	movs	r0, #32
 800d3b2:	47a0      	blx	r4
          while (l++ < width) {
 800d3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3b6:	1c5a      	adds	r2, r3, #1
 800d3b8:	637a      	str	r2, [r7, #52]	; 0x34
 800d3ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d8f1      	bhi.n	800d3a4 <_vsnprintf+0x85c>
          }
        }
        format++;
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	603b      	str	r3, [r7, #0]
        break;
 800d3c6:	e05e      	b.n	800d486 <_vsnprintf+0x93e>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800d3c8:	2308      	movs	r3, #8
 800d3ca:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800d3cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3ce:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800d3d2:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 800d3da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d01d      	beq.n	800d41e <_vsnprintf+0x8d6>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800d3e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d3e4:	1d1a      	adds	r2, r3, #4
 800d3e6:	66ba      	str	r2, [r7, #104]	; 0x68
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f04f 0400 	mov.w	r4, #0
 800d3ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d3f0:	9208      	str	r2, [sp, #32]
 800d3f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d3f4:	9207      	str	r2, [sp, #28]
 800d3f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d3f8:	9206      	str	r2, [sp, #24]
 800d3fa:	f04f 0110 	mov.w	r1, #16
 800d3fe:	f04f 0200 	mov.w	r2, #0
 800d402:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800d406:	2200      	movs	r2, #0
 800d408:	9202      	str	r2, [sp, #8]
 800d40a:	e9cd 3400 	strd	r3, r4, [sp]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d412:	68b9      	ldr	r1, [r7, #8]
 800d414:	68f8      	ldr	r0, [r7, #12]
 800d416:	f7fe fe24 	bl	800c062 <_ntoa_long_long>
 800d41a:	6478      	str	r0, [r7, #68]	; 0x44
 800d41c:	e016      	b.n	800d44c <_vsnprintf+0x904>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800d41e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d420:	1d1a      	adds	r2, r3, #4
 800d422:	66ba      	str	r2, [r7, #104]	; 0x68
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	461a      	mov	r2, r3
 800d428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d42a:	9305      	str	r3, [sp, #20]
 800d42c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d42e:	9304      	str	r3, [sp, #16]
 800d430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d432:	9303      	str	r3, [sp, #12]
 800d434:	2310      	movs	r3, #16
 800d436:	9302      	str	r3, [sp, #8]
 800d438:	2300      	movs	r3, #0
 800d43a:	9301      	str	r3, [sp, #4]
 800d43c:	9200      	str	r2, [sp, #0]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d442:	68b9      	ldr	r1, [r7, #8]
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	f7fe fda5 	bl	800bf94 <_ntoa_long>
 800d44a:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	3301      	adds	r3, #1
 800d450:	603b      	str	r3, [r7, #0]
        break;
 800d452:	e018      	b.n	800d486 <_vsnprintf+0x93e>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800d454:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d456:	1c53      	adds	r3, r2, #1
 800d458:	647b      	str	r3, [r7, #68]	; 0x44
 800d45a:	68fc      	ldr	r4, [r7, #12]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	68b9      	ldr	r1, [r7, #8]
 800d460:	2025      	movs	r0, #37	; 0x25
 800d462:	47a0      	blx	r4
        format++;
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	3301      	adds	r3, #1
 800d468:	603b      	str	r3, [r7, #0]
        break;
 800d46a:	e00c      	b.n	800d486 <_vsnprintf+0x93e>

      default :
        out(*format, buffer, idx++, maxlen);
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	7818      	ldrb	r0, [r3, #0]
 800d470:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d472:	1c53      	adds	r3, r2, #1
 800d474:	647b      	str	r3, [r7, #68]	; 0x44
 800d476:	68fc      	ldr	r4, [r7, #12]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	68b9      	ldr	r1, [r7, #8]
 800d47c:	47a0      	blx	r4
        format++;
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	3301      	adds	r3, #1
 800d482:	603b      	str	r3, [r7, #0]
        break;
 800d484:	bf00      	nop
  while (*format)
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	f47f ab6d 	bne.w	800cb6a <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800d490:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	429a      	cmp	r2, r3
 800d496:	d302      	bcc.n	800d49e <_vsnprintf+0x956>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	1e5a      	subs	r2, r3, #1
 800d49c:	e000      	b.n	800d4a0 <_vsnprintf+0x958>
 800d49e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4a0:	68fc      	ldr	r4, [r7, #12]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	68b9      	ldr	r1, [r7, #8]
 800d4a6:	2000      	movs	r0, #0
 800d4a8:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800d4aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3758      	adds	r7, #88	; 0x58
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bdb0      	pop	{r4, r5, r7, pc}

0800d4b4 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 800d4b4:	b40f      	push	{r0, r1, r2, r3}
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b086      	sub	sp, #24
 800d4ba:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 800d4bc:	f107 031c 	add.w	r3, r7, #28
 800d4c0:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800d4c2:	1d39      	adds	r1, r7, #4
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	9300      	str	r3, [sp, #0]
 800d4c8:	69bb      	ldr	r3, [r7, #24]
 800d4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d4ce:	4806      	ldr	r0, [pc, #24]	; (800d4e8 <printf_+0x34>)
 800d4d0:	f7ff fb3a 	bl	800cb48 <_vsnprintf>
 800d4d4:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3710      	adds	r7, #16
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d4e2:	b004      	add	sp, #16
 800d4e4:	4770      	bx	lr
 800d4e6:	bf00      	nop
 800d4e8:	0800bc67 	.word	0x0800bc67

0800d4ec <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>:
	 *  \return variable is updated(true), variable is not updated(false)
	 *
	 *  setFunction :
	 *  \param[in]		variable		msgBus data is changed to input data
	 */
    SIMPLE_FUNC_IMPL(BodyAccel, BodyAccel, bodyAccel)
 800d4ec:	b4b0      	push	{r4, r5, r7}
 800d4ee:	b085      	sub	sp, #20
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	73fb      	strb	r3, [r7, #15]
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	e9d3 1200 	ldrd	r1, r2, [r3]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d506:	42a2      	cmp	r2, r4
 800d508:	bf08      	it	eq
 800d50a:	4299      	cmpeq	r1, r3
 800d50c:	d001      	beq.n	800d512 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE+0x26>
 800d50e:	2301      	movs	r3, #1
 800d510:	73fb      	strb	r3, [r7, #15]
 800d512:	683a      	ldr	r2, [r7, #0]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	4614      	mov	r4, r2
 800d518:	461d      	mov	r5, r3
 800d51a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d51c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d51e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d522:	e884 0003 	stmia.w	r4, {r0, r1}
 800d526:	7bfb      	ldrb	r3, [r7, #15]
 800d528:	4618      	mov	r0, r3
 800d52a:	3714      	adds	r7, #20
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bcb0      	pop	{r4, r5, r7}
 800d530:	4770      	bx	lr

0800d532 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>:
    SIMPLE_FUNC_IMPL(BodyAngularVelocity, BodyAngularVelocity, bodyAngularVelocity)
 800d532:	b4b0      	push	{r4, r5, r7}
 800d534:	b085      	sub	sp, #20
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
 800d53a:	6039      	str	r1, [r7, #0]
 800d53c:	2300      	movs	r3, #0
 800d53e:	73fb      	strb	r3, [r7, #15]
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	e9d3 1200 	ldrd	r1, r2, [r3]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800d54c:	42a2      	cmp	r2, r4
 800d54e:	bf08      	it	eq
 800d550:	4299      	cmpeq	r1, r3
 800d552:	d001      	beq.n	800d558 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE+0x26>
 800d554:	2301      	movs	r3, #1
 800d556:	73fb      	strb	r3, [r7, #15]
 800d558:	683a      	ldr	r2, [r7, #0]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4615      	mov	r5, r2
 800d55e:	f103 0418 	add.w	r4, r3, #24
 800d562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d566:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d56a:	e885 0003 	stmia.w	r5, {r0, r1}
 800d56e:	7bfb      	ldrb	r3, [r7, #15]
 800d570:	4618      	mov	r0, r3
 800d572:	3714      	adds	r7, #20
 800d574:	46bd      	mov	sp, r7
 800d576:	bcb0      	pop	{r4, r5, r7}
 800d578:	4770      	bx	lr

0800d57a <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>:
    SIMPLE_FUNC_IMPL(BodyMag, BodyMag, bodyMag)
 800d57a:	b4b0      	push	{r4, r5, r7}
 800d57c:	b085      	sub	sp, #20
 800d57e:	af00      	add	r7, sp, #0
 800d580:	6078      	str	r0, [r7, #4]
 800d582:	6039      	str	r1, [r7, #0]
 800d584:	2300      	movs	r3, #0
 800d586:	73fb      	strb	r3, [r7, #15]
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800d594:	42a2      	cmp	r2, r4
 800d596:	bf08      	it	eq
 800d598:	4299      	cmpeq	r1, r3
 800d59a:	d001      	beq.n	800d5a0 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE+0x26>
 800d59c:	2301      	movs	r3, #1
 800d59e:	73fb      	strb	r3, [r7, #15]
 800d5a0:	683a      	ldr	r2, [r7, #0]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	4615      	mov	r5, r2
 800d5a6:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800d5aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d5ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d5b2:	e885 0003 	stmia.w	r5, {r0, r1}
 800d5b6:	7bfb      	ldrb	r3, [r7, #15]
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3714      	adds	r7, #20
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bcb0      	pop	{r4, r5, r7}
 800d5c0:	4770      	bx	lr

0800d5c2 <_ZN2FC6MsgBus11setAttitudeERKNS_8AttitudeE>:

    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
    SIMPLE_FUNC_IMPL(VehicleAttitueSP, VehicleAttitueSP, vehicleAttitudeSP)
    SIMPLE_FUNC_IMPL(VehiclePositionSP, VehiclePositionSP, vehiclePositionSP)
    
    SIMPLE_FUNC_IMPL(Attitude, Attitude, attitude)
 800d5c2:	b4b0      	push	{r4, r5, r7}
 800d5c4:	b083      	sub	sp, #12
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
 800d5ca:	6039      	str	r1, [r7, #0]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	683a      	ldr	r2, [r7, #0]
 800d5d0:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800d5d4:	4615      	mov	r5, r2
 800d5d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d5d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d5dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5de:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d5e2:	e884 0003 	stmia.w	r4, {r0, r1}
 800d5e6:	bf00      	nop
 800d5e8:	370c      	adds	r7, #12
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bcb0      	pop	{r4, r5, r7}
 800d5ee:	4770      	bx	lr

0800d5f0 <_ZN2FC6MsgBus11setNedAccelERKNS_8NedAccelE>:
    SIMPLE_FUNC_IMPL(NedAccel, NedAccel, nedAccel)
 800d5f0:	b4b0      	push	{r4, r5, r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	683a      	ldr	r2, [r7, #0]
 800d5fe:	f503 748c 	add.w	r4, r3, #280	; 0x118
 800d602:	4615      	mov	r5, r2
 800d604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d608:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d60c:	e884 0003 	stmia.w	r4, {r0, r1}
 800d610:	bf00      	nop
 800d612:	370c      	adds	r7, #12
 800d614:	46bd      	mov	sp, r7
 800d616:	bcb0      	pop	{r4, r5, r7}
 800d618:	4770      	bx	lr
	...

0800d61c <_ZL11microsecondv>:
/* micro second counter timer */
#define USEC_TIMER &htim2

static uint32_t _timerOverflowCnt = 0;

static __inline uint64_t microsecond(){
 800d61c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800d620:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800d622:	4b0e      	ldr	r3, [pc, #56]	; (800d65c <_ZL11microsecondv+0x40>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4619      	mov	r1, r3
 800d628:	f04f 0200 	mov.w	r2, #0
 800d62c:	f04f 0b00 	mov.w	fp, #0
 800d630:	f04f 0c00 	mov.w	ip, #0
 800d634:	468c      	mov	ip, r1
 800d636:	f04f 0b00 	mov.w	fp, #0
 800d63a:	4a09      	ldr	r2, [pc, #36]	; (800d660 <_ZL11microsecondv+0x44>)
 800d63c:	6812      	ldr	r2, [r2, #0]
 800d63e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d640:	4611      	mov	r1, r2
 800d642:	f04f 0200 	mov.w	r2, #0
 800d646:	ea4b 0301 	orr.w	r3, fp, r1
 800d64a:	ea4c 0402 	orr.w	r4, ip, r2
}
 800d64e:	4618      	mov	r0, r3
 800d650:	4621      	mov	r1, r4
 800d652:	46bd      	mov	sp, r7
 800d654:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800d658:	4770      	bx	lr
 800d65a:	bf00      	nop
 800d65c:	20000abc 	.word	0x20000abc
 800d660:	20010f68 	.word	0x20010f68

0800d664 <_ZN2FC10ModuleAHRSC1Ev>:
#include "Lib/Matrix/matrix/Quaternion.hpp"
#include "cmath"

namespace FC{

ModuleAHRS::ModuleAHRS()
 800d664:	b590      	push	{r4, r7, lr}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
	, lastUpdate{0}
	, beta{0.9f}
	, q0{1.0f}
	, q1{0.0f}
	, q2{0.0f}
	, q3{0.0f}
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	461a      	mov	r2, r3
 800d670:	2300      	movs	r3, #0
 800d672:	6013      	str	r3, [r2, #0]
 800d674:	6053      	str	r3, [r2, #4]
 800d676:	6093      	str	r3, [r2, #8]
 800d678:	60d3      	str	r3, [r2, #12]
 800d67a:	6113      	str	r3, [r2, #16]
 800d67c:	6153      	str	r3, [r2, #20]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	3318      	adds	r3, #24
 800d682:	2200      	movs	r2, #0
 800d684:	601a      	str	r2, [r3, #0]
 800d686:	605a      	str	r2, [r3, #4]
 800d688:	609a      	str	r2, [r3, #8]
 800d68a:	60da      	str	r2, [r3, #12]
 800d68c:	611a      	str	r2, [r3, #16]
 800d68e:	615a      	str	r2, [r3, #20]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	3330      	adds	r3, #48	; 0x30
 800d694:	2200      	movs	r2, #0
 800d696:	601a      	str	r2, [r3, #0]
 800d698:	605a      	str	r2, [r3, #4]
 800d69a:	609a      	str	r2, [r3, #8]
 800d69c:	60da      	str	r2, [r3, #12]
 800d69e:	611a      	str	r2, [r3, #16]
 800d6a0:	615a      	str	r2, [r3, #20]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	3348      	adds	r3, #72	; 0x48
 800d6a6:	2228      	movs	r2, #40	; 0x28
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f01b f85f 	bl	802876e <memset>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	3370      	adds	r3, #112	; 0x70
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	601a      	str	r2, [r3, #0]
 800d6b8:	605a      	str	r2, [r3, #4]
 800d6ba:	609a      	str	r2, [r3, #8]
 800d6bc:	60da      	str	r2, [r3, #12]
 800d6be:	611a      	str	r2, [r3, #16]
 800d6c0:	615a      	str	r2, [r3, #20]
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	f04f 0300 	mov.w	r3, #0
 800d6c8:	f04f 0400 	mov.w	r4, #0
 800d6cc:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	4a0e      	ldr	r2, [pc, #56]	; (800d70c <_ZN2FC10ModuleAHRSC1Ev+0xa8>)
 800d6d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d6de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f04f 0200 	mov.w	r2, #0
 800d6e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f04f 0200 	mov.w	r2, #0
 800d6f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f04f 0200 	mov.w	r2, #0
 800d6fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
{

}
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	4618      	mov	r0, r3
 800d704:	370c      	adds	r7, #12
 800d706:	46bd      	mov	sp, r7
 800d708:	bd90      	pop	{r4, r7, pc}
 800d70a:	bf00      	nop
 800d70c:	3f666666 	.word	0x3f666666

0800d710 <_ZN2FC10ModuleAHRS7oneStepEv>:

void ModuleAHRS::oneStep(){
 800d710:	b5b0      	push	{r4, r5, r7, lr}
 800d712:	b09c      	sub	sp, #112	; 0x70
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
	/* receive data */
	msgBus.getBodyAccel(&this->bodyAccelSub);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	4619      	mov	r1, r3
 800d71c:	481b      	ldr	r0, [pc, #108]	; (800d78c <_ZN2FC10ModuleAHRS7oneStepEv+0x7c>)
 800d71e:	f7ff fee5 	bl	800d4ec <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>
	msgBus.getBodyAngularVelocity(&this->bodyAngularVelocitySub);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	3318      	adds	r3, #24
 800d726:	4619      	mov	r1, r3
 800d728:	4818      	ldr	r0, [pc, #96]	; (800d78c <_ZN2FC10ModuleAHRS7oneStepEv+0x7c>)
 800d72a:	f7ff ff02 	bl	800d532 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>

	/* mag data not valid */
	if(!msgBus.getBodyMag(&this->bodyMagSub))
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	3330      	adds	r3, #48	; 0x30
 800d732:	4619      	mov	r1, r3
 800d734:	4815      	ldr	r0, [pc, #84]	; (800d78c <_ZN2FC10ModuleAHRS7oneStepEv+0x7c>)
 800d736:	f7ff ff20 	bl	800d57a <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>
 800d73a:	4603      	mov	r3, r0
 800d73c:	f083 0301 	eor.w	r3, r3, #1
 800d740:	b2db      	uxtb	r3, r3
 800d742:	2b00      	cmp	r3, #0
 800d744:	d024      	beq.n	800d790 <_ZN2FC10ModuleAHRS7oneStepEv+0x80>
	{
		MadgwickAHRSupdateIMU(bodyAngularVelocitySub.xyz[0],
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	edd3 7a08 	vldr	s15, [r3, #32]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	ed93 6a02 	vldr	s12, [r3, #8]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	edd3 5a03 	vldr	s11, [r3, #12]
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	ed93 5a04 	vldr	s10, [r3, #16]
 800d76a:	eef0 2a45 	vmov.f32	s5, s10
 800d76e:	eeb0 2a65 	vmov.f32	s4, s11
 800d772:	eef0 1a46 	vmov.f32	s3, s12
 800d776:	eeb0 1a66 	vmov.f32	s2, s13
 800d77a:	eef0 0a47 	vmov.f32	s1, s14
 800d77e:	eeb0 0a67 	vmov.f32	s0, s15
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f001 f8dc 	bl	800e940 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>
 800d788:	e02e      	b.n	800d7e8 <_ZN2FC10ModuleAHRS7oneStepEv+0xd8>
 800d78a:	bf00      	nop
 800d78c:	20000b98 	.word	0x20000b98
							  bodyAccelSub.xyz[1],
							  bodyAccelSub.xyz[2]);
	}
	/* mag data valid */
	else{
		MadgwickAHRSupdate(bodyAngularVelocitySub.xyz[0],
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	edd3 7a08 	vldr	s15, [r3, #32]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	ed93 6a02 	vldr	s12, [r3, #8]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	edd3 5a03 	vldr	s11, [r3, #12]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	ed93 5a04 	vldr	s10, [r3, #16]
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	edd3 4a0e 	vldr	s9, [r3, #56]	; 0x38
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 800d7c6:	eeb0 3a64 	vmov.f32	s6, s9
 800d7ca:	eef0 2a45 	vmov.f32	s5, s10
 800d7ce:	eeb0 2a65 	vmov.f32	s4, s11
 800d7d2:	eef0 1a46 	vmov.f32	s3, s12
 800d7d6:	eeb0 1a66 	vmov.f32	s2, s13
 800d7da:	eef0 0a47 	vmov.f32	s1, s14
 800d7de:	eeb0 0a67 	vmov.f32	s0, s15
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f000 f980 	bl	800dae8 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff>
						   bodyMagSub.xyz[2]);
	}

	/* calculate roll pitch yaw */
	float roll, pitch, yaw;
	roll = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0- q1 * q1 - q2 * q2 + q3 * q3);		//roll
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800d7f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800d804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d80c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d810:	ee17 0a90 	vmov	r0, s15
 800d814:	f7f2 fea0 	bl	8000558 <__aeabi_f2d>
 800d818:	4604      	mov	r4, r0
 800d81a:	460d      	mov	r5, r1
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800d828:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800d838:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d83c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d84c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d850:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800d860:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d864:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d868:	ee17 0a90 	vmov	r0, s15
 800d86c:	f7f2 fe74 	bl	8000558 <__aeabi_f2d>
 800d870:	4602      	mov	r2, r0
 800d872:	460b      	mov	r3, r1
 800d874:	ec43 2b11 	vmov	d1, r2, r3
 800d878:	ec45 4b10 	vmov	d0, r4, r5
 800d87c:	f017 fcdc 	bl	8025238 <atan2>
 800d880:	ec54 3b10 	vmov	r3, r4, d0
 800d884:	4618      	mov	r0, r3
 800d886:	4621      	mov	r1, r4
 800d888:	f7f3 f9b6 	bl	8000bf8 <__aeabi_d2f>
 800d88c:	4603      	mov	r3, r0
 800d88e:	66fb      	str	r3, [r7, #108]	; 0x6c
	pitch = -asin(2.0f * (q1 * q3 - q0 * q2));												//pitch
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800d89c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d8ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d8b8:	ee17 0a90 	vmov	r0, s15
 800d8bc:	f7f2 fe4c 	bl	8000558 <__aeabi_f2d>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	460c      	mov	r4, r1
 800d8c4:	ec44 3b10 	vmov	d0, r3, r4
 800d8c8:	f017 fc5e 	bl	8025188 <asin>
 800d8cc:	ec54 3b10 	vmov	r3, r4, d0
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	4621      	mov	r1, r4
 800d8d4:	f7f3 f990 	bl	8000bf8 <__aeabi_d2f>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	ee07 3a90 	vmov	s15, r3
 800d8de:	eef1 7a67 	vneg.f32	s15, s15
 800d8e2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	yaw = atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);		//yaw
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d8f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800d902:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d90a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d90e:	ee17 0a90 	vmov	r0, s15
 800d912:	f7f2 fe21 	bl	8000558 <__aeabi_f2d>
 800d916:	4604      	mov	r4, r0
 800d918:	460d      	mov	r5, r1
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800d926:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800d936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d93a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d94a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d94e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800d95e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d962:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d966:	ee17 0a90 	vmov	r0, s15
 800d96a:	f7f2 fdf5 	bl	8000558 <__aeabi_f2d>
 800d96e:	4602      	mov	r2, r0
 800d970:	460b      	mov	r3, r1
 800d972:	ec43 2b11 	vmov	d1, r2, r3
 800d976:	ec45 4b10 	vmov	d0, r4, r5
 800d97a:	f017 fc5d 	bl	8025238 <atan2>
 800d97e:	ec54 3b10 	vmov	r3, r4, d0
 800d982:	4618      	mov	r0, r3
 800d984:	4621      	mov	r1, r4
 800d986:	f7f3 f937 	bl	8000bf8 <__aeabi_d2f>
 800d98a:	4603      	mov	r3, r0
 800d98c:	667b      	str	r3, [r7, #100]	; 0x64

	matrix::Quatf quat(q0, q1, q2, q3);		/* NED -> body quaternion */
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 800d9a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d9aa:	eef0 1a46 	vmov.f32	s3, s12
 800d9ae:	eeb0 1a66 	vmov.f32	s2, s13
 800d9b2:	eef0 0a47 	vmov.f32	s1, s14
 800d9b6:	eeb0 0a67 	vmov.f32	s0, s15
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f001 fb7f 	bl	800f0be <_ZN6matrix10QuaternionIfEC1Effff>
	matrix::Dcmf dcm(quat/*.inversed()*/);		/* body -> NED DCM */
 800d9c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d9c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d9c8:	4611      	mov	r1, r2
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f001 fbcb 	bl	800f166 <_ZN6matrix3DcmIfEC1ERKNS_10QuaternionIfEE>
	matrix::Vector3f tempBodyAccel(this->bodyAccelSub.xyz[0],
								   this->bodyAccelSub.xyz[1],
								   this->bodyAccelSub.xyz[2]);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	edd3 7a02 	vldr	s15, [r3, #8]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	ed93 7a03 	vldr	s14, [r3, #12]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	edd3 6a04 	vldr	s13, [r3, #16]
 800d9e2:	f107 0318 	add.w	r3, r7, #24
 800d9e6:	eeb0 1a66 	vmov.f32	s2, s13
 800d9ea:	eef0 0a47 	vmov.f32	s1, s14
 800d9ee:	eeb0 0a67 	vmov.f32	s0, s15
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f001 fd00 	bl	800f3f8 <_ZN6matrix7Vector3IfEC1Efff>

	matrix::Vector3f tempNedAccel = dcm*tempBodyAccel;
 800d9f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d9fc:	f107 0218 	add.w	r2, r7, #24
 800da00:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800da04:	4618      	mov	r0, r3
 800da06:	f001 fd24 	bl	800f452 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_>
 800da0a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800da0e:	f107 030c 	add.w	r3, r7, #12
 800da12:	4611      	mov	r1, r2
 800da14:	4618      	mov	r0, r3
 800da16:	f001 fd6d 	bl	800f4f4 <_ZN6matrix7Vector3IfEC1ERKNS_6MatrixIfLj3ELj1EEE>

	attitudePub.timestamp = microsecond();
 800da1a:	f7ff fdff 	bl	800d61c <_ZL11microsecondv>
 800da1e:	4603      	mov	r3, r0
 800da20:	460c      	mov	r4, r1
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	attitudePub.q[0] = this->q0;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	651a      	str	r2, [r3, #80]	; 0x50
	attitudePub.q[1] = this->q1;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	655a      	str	r2, [r3, #84]	; 0x54
	attitudePub.q[2] = this->q2;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	659a      	str	r2, [r3, #88]	; 0x58
	attitudePub.q[3] = this->q3;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	65da      	str	r2, [r3, #92]	; 0x5c
	attitudePub.roll = roll;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800da54:	661a      	str	r2, [r3, #96]	; 0x60
	attitudePub.pitch = pitch;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800da5a:	665a      	str	r2, [r3, #100]	; 0x64
	attitudePub.yaw = yaw;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800da60:	669a      	str	r2, [r3, #104]	; 0x68

	msgBus.setAttitude(attitudePub);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	3348      	adds	r3, #72	; 0x48
 800da66:	4619      	mov	r1, r3
 800da68:	481c      	ldr	r0, [pc, #112]	; (800dadc <_ZN2FC10ModuleAHRS7oneStepEv+0x3cc>)
 800da6a:	f7ff fdaa 	bl	800d5c2 <_ZN2FC6MsgBus11setAttitudeERKNS_8AttitudeE>

	nedAccelPub.timestamp = microsecond();
 800da6e:	f7ff fdd5 	bl	800d61c <_ZL11microsecondv>
 800da72:	4603      	mov	r3, r0
 800da74:	460c      	mov	r4, r1
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	nedAccelPub.xyz[0] = tempNedAccel(0);
 800da7c:	f107 030c 	add.w	r3, r7, #12
 800da80:	2100      	movs	r1, #0
 800da82:	4618      	mov	r0, r3
 800da84:	f001 fd5c 	bl	800f540 <_ZN6matrix6VectorIfLj3EEclEj>
 800da88:	4603      	mov	r3, r0
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	679a      	str	r2, [r3, #120]	; 0x78
	nedAccelPub.xyz[1] = tempNedAccel(1);
 800da90:	f107 030c 	add.w	r3, r7, #12
 800da94:	2101      	movs	r1, #1
 800da96:	4618      	mov	r0, r3
 800da98:	f001 fd52 	bl	800f540 <_ZN6matrix6VectorIfLj3EEclEj>
 800da9c:	4603      	mov	r3, r0
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	67da      	str	r2, [r3, #124]	; 0x7c
	nedAccelPub.xyz[2] = tempNedAccel(2);
 800daa4:	f107 030c 	add.w	r3, r7, #12
 800daa8:	2102      	movs	r1, #2
 800daaa:	4618      	mov	r0, r3
 800daac:	f001 fd48 	bl	800f540 <_ZN6matrix6VectorIfLj3EEclEj>
 800dab0:	4603      	mov	r3, r0
 800dab2:	681a      	ldr	r2, [r3, #0]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	msgBus.setNedAccel(nedAccelPub);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	3370      	adds	r3, #112	; 0x70
 800dabe:	4619      	mov	r1, r3
 800dac0:	4806      	ldr	r0, [pc, #24]	; (800dadc <_ZN2FC10ModuleAHRS7oneStepEv+0x3cc>)
 800dac2:	f7ff fd95 	bl	800d5f0 <_ZN2FC6MsgBus11setNedAccelERKNS_8NedAccelE>

	/* Freq class variable */
	freqCnt++;
 800dac6:	4b06      	ldr	r3, [pc, #24]	; (800dae0 <_ZN2FC10ModuleAHRS7oneStepEv+0x3d0>)
 800dac8:	881b      	ldrh	r3, [r3, #0]
 800daca:	3301      	adds	r3, #1
 800dacc:	b29a      	uxth	r2, r3
 800dace:	4b04      	ldr	r3, [pc, #16]	; (800dae0 <_ZN2FC10ModuleAHRS7oneStepEv+0x3d0>)
 800dad0:	801a      	strh	r2, [r3, #0]
}
 800dad2:	bf00      	nop
 800dad4:	3770      	adds	r7, #112	; 0x70
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bdb0      	pop	{r4, r5, r7, pc}
 800dada:	bf00      	nop
 800dadc:	20000b98 	.word	0x20000b98
 800dae0:	20000ac0 	.word	0x20000ac0
 800dae4:	00000000 	.word	0x00000000

0800dae8 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff>:

void ModuleAHRS::MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz){
 800dae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daea:	b0af      	sub	sp, #188	; 0xbc
 800daec:	af00      	add	r7, sp, #0
 800daee:	6278      	str	r0, [r7, #36]	; 0x24
 800daf0:	ed87 0a08 	vstr	s0, [r7, #32]
 800daf4:	edc7 0a07 	vstr	s1, [r7, #28]
 800daf8:	ed87 1a06 	vstr	s2, [r7, #24]
 800dafc:	edc7 1a05 	vstr	s3, [r7, #20]
 800db00:	ed87 2a04 	vstr	s4, [r7, #16]
 800db04:	edc7 2a03 	vstr	s5, [r7, #12]
 800db08:	ed87 3a02 	vstr	s6, [r7, #8]
 800db0c:	edc7 3a01 	vstr	s7, [r7, #4]
 800db10:	ed87 4a00 	vstr	s8, [r7]
//		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
//		return;
//	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800db14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db16:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800db1a:	eeb1 7a67 	vneg.f32	s14, s15
 800db1e:	edd7 7a08 	vldr	s15, [r7, #32]
 800db22:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db28:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800db2c:	edd7 7a07 	vldr	s15, [r7, #28]
 800db30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800db34:	ee37 7a67 	vsub.f32	s14, s14, s15
 800db38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3a:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800db3e:	edd7 7a06 	vldr	s15, [r7, #24]
 800db42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800db46:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800db4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db52:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800db56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db58:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800db5c:	edd7 7a08 	vldr	s15, [r7, #32]
 800db60:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db66:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800db6a:	edd7 7a06 	vldr	s15, [r7, #24]
 800db6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800db72:	ee37 7a27 	vadd.f32	s14, s14, s15
 800db76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db78:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800db7c:	edd7 7a07 	vldr	s15, [r7, #28]
 800db80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800db84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db88:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800db8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db90:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800db94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db96:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800db9a:	edd7 7a07 	vldr	s15, [r7, #28]
 800db9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba4:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800dba8:	edd7 7a06 	vldr	s15, [r7, #24]
 800dbac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dbb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb6:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800dbba:	edd7 7a08 	vldr	s15, [r7, #32]
 800dbbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dbc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbc6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dbca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dbce:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800dbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800dbd8:	edd7 7a06 	vldr	s15, [r7, #24]
 800dbdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe2:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800dbe6:	edd7 7a07 	vldr	s15, [r7, #28]
 800dbea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dbee:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf4:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800dbf8:	edd7 7a08 	vldr	s15, [r7, #32]
 800dbfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc00:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc04:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dc08:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc0c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800dc10:	ed97 7a05 	vldr	s14, [r7, #20]
 800dc14:	edd7 7a05 	vldr	s15, [r7, #20]
 800dc18:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc1c:	edd7 6a04 	vldr	s13, [r7, #16]
 800dc20:	edd7 7a04 	vldr	s15, [r7, #16]
 800dc24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc28:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc2c:	edd7 6a03 	vldr	s13, [r7, #12]
 800dc30:	edd7 7a03 	vldr	s15, [r7, #12]
 800dc34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc38:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc3c:	eeb0 0a67 	vmov.f32	s0, s15
 800dc40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc42:	f001 f9df 	bl	800f004 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800dc46:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	ax *= recipNorm;
 800dc4a:	ed97 7a05 	vldr	s14, [r7, #20]
 800dc4e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800dc52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc56:	edc7 7a05 	vstr	s15, [r7, #20]
	ay *= recipNorm;
 800dc5a:	ed97 7a04 	vldr	s14, [r7, #16]
 800dc5e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800dc62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc66:	edc7 7a04 	vstr	s15, [r7, #16]
	az *= recipNorm;
 800dc6a:	ed97 7a03 	vldr	s14, [r7, #12]
 800dc6e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800dc72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc76:	edc7 7a03 	vstr	s15, [r7, #12]

	// Normalise magnetometer measurement
	recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 800dc7a:	ed97 7a02 	vldr	s14, [r7, #8]
 800dc7e:	edd7 7a02 	vldr	s15, [r7, #8]
 800dc82:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc86:	edd7 6a01 	vldr	s13, [r7, #4]
 800dc8a:	edd7 7a01 	vldr	s15, [r7, #4]
 800dc8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc92:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc96:	edd7 6a00 	vldr	s13, [r7]
 800dc9a:	edd7 7a00 	vldr	s15, [r7]
 800dc9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dca2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dca6:	eeb0 0a67 	vmov.f32	s0, s15
 800dcaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcac:	f001 f9aa 	bl	800f004 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800dcb0:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	mx *= recipNorm;
 800dcb4:	ed97 7a02 	vldr	s14, [r7, #8]
 800dcb8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800dcbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcc0:	edc7 7a02 	vstr	s15, [r7, #8]
	my *= recipNorm;
 800dcc4:	ed97 7a01 	vldr	s14, [r7, #4]
 800dcc8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800dccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcd0:	edc7 7a01 	vstr	s15, [r7, #4]
	mz *= recipNorm;
 800dcd4:	ed97 7a00 	vldr	s14, [r7]
 800dcd8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800dcdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dce0:	edc7 7a00 	vstr	s15, [r7]

	// Auxiliary variables to avoid repeated arithmetic
	_2q0mx = 2.0f * q0 * mx;
 800dce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce6:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800dcea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800dcee:	ed97 7a02 	vldr	s14, [r7, #8]
 800dcf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcf6:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	_2q0my = 2.0f * q0 * my;
 800dcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfc:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800dd00:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800dd04:	ed97 7a01 	vldr	s14, [r7, #4]
 800dd08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd0c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	_2q0mz = 2.0f * q0 * mz;
 800dd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd12:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800dd16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800dd1a:	ed97 7a00 	vldr	s14, [r7]
 800dd1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd22:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	_2q1mx = 2.0f * q1 * mx;
 800dd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd28:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800dd2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800dd30:	ed97 7a02 	vldr	s14, [r7, #8]
 800dd34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd38:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	_2q0 = 2.0f * q0;
 800dd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd3e:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800dd42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800dd46:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	_2q1 = 2.0f * q1;
 800dd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd4c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800dd50:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800dd54:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	_2q2 = 2.0f * q2;
 800dd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd5a:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800dd5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800dd62:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	_2q3 = 2.0f * q3;
 800dd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd68:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800dd6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800dd70:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	_2q0q2 = 2.0f * q0 * q2;
 800dd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd76:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800dd7a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800dd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd80:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800dd84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd88:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	_2q2q3 = 2.0f * q2 * q3;
 800dd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd8e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800dd92:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800dd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd98:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800dd9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dda0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	q0q0 = q0 * q0;
 800dda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda6:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800ddaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddac:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800ddb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddb4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	q0q1 = q0 * q1;
 800ddb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddba:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800ddbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc0:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800ddc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddc8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q0q2 = q0 * q2;
 800ddcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddce:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800ddd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd4:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800ddd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dddc:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	q0q3 = q0 * q3;
 800dde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde2:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800dde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde8:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800ddec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddf0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	q1q1 = q1 * q1;
 800ddf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf6:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800ddfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfc:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800de00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de04:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	q1q2 = q1 * q2;
 800de08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0a:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800de0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de10:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800de14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de18:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	q1q3 = q1 * q3;
 800de1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1e:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800de22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de24:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800de28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de2c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	q2q2 = q2 * q2;
 800de30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de32:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800de36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de38:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800de3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de40:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	q2q3 = q2 * q3;
 800de44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de46:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800de4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800de50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de54:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	q3q3 = q3 * q3;
 800de58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5a:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800de5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de60:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800de64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de68:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	// Reference direction of Earth's magnetic field
	hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800de6c:	ed97 7a02 	vldr	s14, [r7, #8]
 800de70:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800de74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7a:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800de7e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800de82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800de86:	ee37 7a67 	vsub.f32	s14, s14, s15
 800de8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8c:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800de90:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800de94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800de98:	ee37 7a27 	vadd.f32	s14, s14, s15
 800de9c:	edd7 6a02 	vldr	s13, [r7, #8]
 800dea0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800dea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dea8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800deac:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800deb0:	edd7 7a01 	vldr	s15, [r7, #4]
 800deb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800deb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deba:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800debe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dec2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dec6:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800deca:	edd7 7a00 	vldr	s15, [r7]
 800dece:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ded2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded4:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800ded8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dedc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dee0:	edd7 6a02 	vldr	s13, [r7, #8]
 800dee4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800dee8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800deec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800def0:	edd7 6a02 	vldr	s13, [r7, #8]
 800def4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800def8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800defc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df00:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 800df04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df06:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800df0a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800df0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df12:	edd7 6a01 	vldr	s13, [r7, #4]
 800df16:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800df1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800df22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df24:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800df28:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800df2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df30:	ee37 7a67 	vsub.f32	s14, s14, s15
 800df34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df36:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800df3a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800df3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df42:	ee37 7a27 	vadd.f32	s14, s14, s15
 800df46:	edd7 6a01 	vldr	s13, [r7, #4]
 800df4a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800df4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df52:	ee37 7a67 	vsub.f32	s14, s14, s15
 800df56:	edd7 6a01 	vldr	s13, [r7, #4]
 800df5a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800df5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df62:	ee37 7a27 	vadd.f32	s14, s14, s15
 800df66:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800df6a:	edd7 7a00 	vldr	s15, [r7]
 800df6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800df72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df74:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800df78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800df80:	edd7 6a01 	vldr	s13, [r7, #4]
 800df84:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800df88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df90:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_2bx = sqrt(hx * hx + hy * hy);
 800df94:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800df98:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800df9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dfa0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800dfa4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800dfa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dfac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dfb0:	ee17 0a90 	vmov	r0, s15
 800dfb4:	f7f2 fad0 	bl	8000558 <__aeabi_f2d>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	460c      	mov	r4, r1
 800dfbc:	ec44 3b10 	vmov	d0, r3, r4
 800dfc0:	f017 fb10 	bl	80255e4 <sqrt>
 800dfc4:	ec54 3b10 	vmov	r3, r4, d0
 800dfc8:	4618      	mov	r0, r3
 800dfca:	4621      	mov	r1, r4
 800dfcc:	f7f2 fe14 	bl	8000bf8 <__aeabi_d2f>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	64bb      	str	r3, [r7, #72]	; 0x48
	_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 800dfd4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800dfd8:	eeb1 7a67 	vneg.f32	s14, s15
 800dfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfde:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800dfe2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dfe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe8:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800dfec:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800dff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dff4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dff8:	edd7 6a00 	vldr	s13, [r7]
 800dffc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800e000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e004:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00a:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800e00e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800e012:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e016:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e01a:	edd7 6a00 	vldr	s13, [r7]
 800e01e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800e022:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e026:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e02a:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800e02e:	edd7 7a01 	vldr	s15, [r7, #4]
 800e032:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e038:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800e03c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e040:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e044:	edd7 6a00 	vldr	s13, [r7]
 800e048:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e04c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e050:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e054:	edd7 6a00 	vldr	s13, [r7]
 800e058:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800e05c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e060:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e064:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	_4bx = 2.0f * _2bx;
 800e068:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e06c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e070:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	_4bz = 2.0f * _2bz;
 800e074:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e078:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e07c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// Gradient decent algorithm corrective step
	s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800e080:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800e084:	eeb1 7a67 	vneg.f32	s14, s15
 800e088:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800e08c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e090:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800e094:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e098:	edd7 7a05 	vldr	s15, [r7, #20]
 800e09c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e0a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0a4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800e0a8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e0ac:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800e0b0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e0b4:	edd7 7a04 	vldr	s15, [r7, #16]
 800e0b8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e0bc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800e0c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e0c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ca:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800e0ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e0d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e0d6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e0da:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e0de:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e0e2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800e0e6:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e0ea:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e0ee:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e0f2:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800e0f6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800e0fa:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800e0fe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e102:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800e106:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e10a:	edd7 7a02 	vldr	s15, [r7, #8]
 800e10e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e116:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e11a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e11e:	eef1 6a67 	vneg.f32	s13, s15
 800e122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e124:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800e128:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12e:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 800e132:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e136:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e13a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e13e:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800e142:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800e146:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e14a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e14e:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e152:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800e156:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800e15a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800e15e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e162:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800e166:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e16a:	edd7 7a01 	vldr	s15, [r7, #4]
 800e16e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e172:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e176:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17c:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800e180:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e184:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e188:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800e18c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800e190:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e194:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e198:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e19c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800e1a0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800e1a4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800e1a8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e1ac:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800e1b0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e1b4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800e1b8:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e1bc:	edd7 7a00 	vldr	s15, [r7]
 800e1c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e1c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e1cc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800e1d0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800e1d4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e1d8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800e1dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e1e0:	edd7 7a05 	vldr	s15, [r7, #20]
 800e1e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e1e8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800e1ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1f0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800e1f4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e1f8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800e1fc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e200:	edd7 7a04 	vldr	s15, [r7, #16]
 800e204:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e208:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800e20c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e210:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e216:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800e21a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800e21e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e222:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800e226:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e22a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e22e:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e232:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e236:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e23a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e23e:	edd7 7a03 	vldr	s15, [r7, #12]
 800e242:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e246:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e24a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e250:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800e254:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e258:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e25c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e260:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e264:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e268:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800e26c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e270:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e274:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e278:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800e27c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800e280:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800e284:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e288:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800e28c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e290:	edd7 7a02 	vldr	s15, [r7, #8]
 800e294:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e298:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e29c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a2:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800e2a6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e2aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b0:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 800e2b4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e2b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e2bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e2c0:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800e2c4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800e2c8:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e2cc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e2d0:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e2d4:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800e2d8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800e2dc:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800e2e0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e2e4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800e2e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e2ec:	edd7 7a01 	vldr	s15, [r7, #4]
 800e2f0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e2f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e2f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fe:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800e302:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e306:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30c:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 800e310:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800e314:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e318:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e31c:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800e320:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800e324:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e328:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e32c:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e330:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800e334:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800e338:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800e33c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e340:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800e344:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e348:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800e34c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e350:	edd7 7a00 	vldr	s15, [r7]
 800e354:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e35c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e360:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800e364:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800e368:	eeb1 7a67 	vneg.f32	s14, s15
 800e36c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800e370:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e374:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800e378:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e37c:	edd7 7a05 	vldr	s15, [r7, #20]
 800e380:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e384:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e388:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800e38c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e390:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800e394:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e398:	edd7 7a04 	vldr	s15, [r7, #16]
 800e39c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e3a0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800e3a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e3a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ae:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800e3b2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800e3b6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e3ba:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800e3be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e3c2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e3c6:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e3ca:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e3ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e3d2:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e3d6:	edd7 7a03 	vldr	s15, [r7, #12]
 800e3da:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e3de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e3e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e3e6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800e3ea:	eef1 6a67 	vneg.f32	s13, s15
 800e3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f0:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800e3f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fa:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 800e3fe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e402:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e406:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e40a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e40e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e412:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e416:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800e41a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e41e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e422:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e426:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800e42a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800e42e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800e432:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e436:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800e43a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e43e:	edd7 7a02 	vldr	s15, [r7, #8]
 800e442:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e446:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e44a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e450:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800e454:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e458:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45e:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 800e462:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e466:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e46a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e46e:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800e472:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800e476:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e47a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e47e:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e482:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800e486:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800e48a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800e48e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e492:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800e496:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e49a:	edd7 7a01 	vldr	s15, [r7, #4]
 800e49e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e4a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e4a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ac:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800e4b0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e4b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ba:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 800e4be:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800e4c2:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e4c6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e4ca:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800e4ce:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800e4d2:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e4d6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e4da:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e4de:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800e4e2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800e4e6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800e4ea:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e4ee:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800e4f2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e4f6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800e4fa:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e4fe:	edd7 7a00 	vldr	s15, [r7]
 800e502:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e50a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e50e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800e512:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800e516:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e51a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800e51e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e522:	edd7 7a05 	vldr	s15, [r7, #20]
 800e526:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e52a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800e52e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e532:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800e536:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e53a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800e53e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e542:	edd7 7a04 	vldr	s15, [r7, #16]
 800e546:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e54a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800e54e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e552:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e556:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800e55a:	eef1 6a67 	vneg.f32	s13, s15
 800e55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e560:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800e564:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56a:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 800e56e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e572:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e576:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e57a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e57e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e582:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e586:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800e58a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e58e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e592:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e596:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800e59a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800e59e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800e5a2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e5a6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800e5aa:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e5ae:	edd7 7a02 	vldr	s15, [r7, #8]
 800e5b2:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e5b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e5ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e5be:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e5c2:	eef1 6a67 	vneg.f32	s13, s15
 800e5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c8:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800e5cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d2:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 800e5d6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e5da:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e5de:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e5e2:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800e5e6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800e5ea:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e5ee:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e5f2:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e5f6:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800e5fa:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800e5fe:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800e602:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e606:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800e60a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e60e:	edd7 7a01 	vldr	s15, [r7, #4]
 800e612:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e616:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e61a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e620:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800e624:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e628:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e62c:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800e630:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800e634:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e638:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e63c:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e640:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800e644:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800e648:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800e64c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e650:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800e654:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e658:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800e65c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e660:	edd7 7a00 	vldr	s15, [r7]
 800e664:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e66c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e670:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800e674:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800e678:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800e67c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e680:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800e684:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e688:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e68c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e690:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800e694:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800e698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e69c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e6a0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e6a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e6a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e6ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e6b0:	eeb0 0a67 	vmov.f32	s0, s15
 800e6b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e6b6:	f000 fca5 	bl	800f004 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800e6ba:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	s0 *= recipNorm;
 800e6be:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800e6c2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800e6c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6ca:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	s1 *= recipNorm;
 800e6ce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e6d2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800e6d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6da:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s2 *= recipNorm;
 800e6de:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800e6e2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800e6e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6ea:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s3 *= recipNorm;
 800e6ee:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800e6f2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800e6f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6fa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Apply feedback step
	qDot1 -= beta * s0;
 800e6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e700:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800e704:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800e708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e70c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800e710:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e714:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 -= beta * s1;
 800e718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800e71e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e722:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e726:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800e72a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e72e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 -= beta * s2;
 800e732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e734:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800e738:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800e73c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e740:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800e744:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e748:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 -= beta * s3;
 800e74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74e:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800e752:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e75a:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800e75e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e762:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8


	float dt = (microsecond() - this->lastUpdate)*1000000;	/*[second]*/
 800e766:	f7fe ff59 	bl	800d61c <_ZL11microsecondv>
 800e76a:	460a      	mov	r2, r1
 800e76c:	4601      	mov	r1, r0
 800e76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e770:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 800e774:	1ac9      	subs	r1, r1, r3
 800e776:	eb62 0204 	sbc.w	r2, r2, r4
 800e77a:	460d      	mov	r5, r1
 800e77c:	4616      	mov	r6, r2
 800e77e:	462b      	mov	r3, r5
 800e780:	4634      	mov	r4, r6
 800e782:	f04f 0100 	mov.w	r1, #0
 800e786:	f04f 0200 	mov.w	r2, #0
 800e78a:	0162      	lsls	r2, r4, #5
 800e78c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800e790:	0159      	lsls	r1, r3, #5
 800e792:	460b      	mov	r3, r1
 800e794:	4614      	mov	r4, r2
 800e796:	1b5b      	subs	r3, r3, r5
 800e798:	eb64 0406 	sbc.w	r4, r4, r6
 800e79c:	f04f 0100 	mov.w	r1, #0
 800e7a0:	f04f 0200 	mov.w	r2, #0
 800e7a4:	0262      	lsls	r2, r4, #9
 800e7a6:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800e7aa:	0259      	lsls	r1, r3, #9
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	4614      	mov	r4, r2
 800e7b0:	195b      	adds	r3, r3, r5
 800e7b2:	eb44 0406 	adc.w	r4, r4, r6
 800e7b6:	f04f 0100 	mov.w	r1, #0
 800e7ba:	f04f 0200 	mov.w	r2, #0
 800e7be:	01a2      	lsls	r2, r4, #6
 800e7c0:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 800e7c4:	0199      	lsls	r1, r3, #6
 800e7c6:	1ac9      	subs	r1, r1, r3
 800e7c8:	eb62 0204 	sbc.w	r2, r2, r4
 800e7cc:	194b      	adds	r3, r1, r5
 800e7ce:	eb42 0406 	adc.w	r4, r2, r6
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	4621      	mov	r1, r4
 800e7d6:	f7f2 fb27 	bl	8000e28 <__aeabi_ul2f>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	62bb      	str	r3, [r7, #40]	; 0x28
	if(dt > 0.01) dt = 0.01;								/* saturation */
 800e7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7f1 feb9 	bl	8000558 <__aeabi_f2d>
 800e7e6:	a353      	add	r3, pc, #332	; (adr r3, 800e934 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe4c>)
 800e7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ec:	f7f2 f99c 	bl	8000b28 <__aeabi_dcmpgt>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d001      	beq.n	800e7fa <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xd12>
 800e7f6:	4b4e      	ldr	r3, [pc, #312]	; (800e930 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe48>)
 800e7f8:	62bb      	str	r3, [r7, #40]	; 0x28
	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 800e7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fc:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800e800:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e804:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800e808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e80c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e812:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 += qDot2 * (dt);
 800e816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e818:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800e81c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e820:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800e824:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82e:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 += qDot3 * (dt);
 800e832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e834:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800e838:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e83c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800e840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e844:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84a:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 += qDot4 * (dt);
 800e84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e850:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800e854:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e858:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800e85c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e860:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e866:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800e86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86c:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800e870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e872:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800e876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87c:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800e880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e882:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800e886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e88a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e890:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800e894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e896:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800e89a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e89e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a4:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800e8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8aa:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800e8ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e8b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e8b6:	eeb0 0a67 	vmov.f32	s0, s15
 800e8ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8bc:	f000 fba2 	bl	800f004 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800e8c0:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 800e8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c6:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800e8ca:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800e8ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d4:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 *= recipNorm;
 800e8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8da:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800e8de:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800e8e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e8:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 *= recipNorm;
 800e8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ee:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800e8f2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800e8f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8fc:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 *= recipNorm;
 800e900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e902:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800e906:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800e90a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e910:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	lastUpdate = microsecond();
 800e914:	f7fe fe82 	bl	800d61c <_ZL11microsecondv>
 800e918:	4603      	mov	r3, r0
 800e91a:	460c      	mov	r4, r1
 800e91c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e91e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
}
 800e922:	bf00      	nop
 800e924:	37bc      	adds	r7, #188	; 0xbc
 800e926:	46bd      	mov	sp, r7
 800e928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e92a:	bf00      	nop
 800e92c:	f3af 8000 	nop.w
 800e930:	3c23d70a 	.word	0x3c23d70a
 800e934:	47ae147b 	.word	0x47ae147b
 800e938:	3f847ae1 	.word	0x3f847ae1
 800e93c:	00000000 	.word	0x00000000

0800e940 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>:

void ModuleAHRS::MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 800e940:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e942:	b0a1      	sub	sp, #132	; 0x84
 800e944:	af00      	add	r7, sp, #0
 800e946:	61f8      	str	r0, [r7, #28]
 800e948:	ed87 0a06 	vstr	s0, [r7, #24]
 800e94c:	edc7 0a05 	vstr	s1, [r7, #20]
 800e950:	ed87 1a04 	vstr	s2, [r7, #16]
 800e954:	edc7 1a03 	vstr	s3, [r7, #12]
 800e958:	ed87 2a02 	vstr	s4, [r7, #8]
 800e95c:	edc7 2a01 	vstr	s5, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800e960:	69fb      	ldr	r3, [r7, #28]
 800e962:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800e966:	eeb1 7a67 	vneg.f32	s14, s15
 800e96a:	edd7 7a06 	vldr	s15, [r7, #24]
 800e96e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e972:	69fb      	ldr	r3, [r7, #28]
 800e974:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800e978:	edd7 7a05 	vldr	s15, [r7, #20]
 800e97c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e980:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e984:	69fb      	ldr	r3, [r7, #28]
 800e986:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800e98a:	edd7 7a04 	vldr	s15, [r7, #16]
 800e98e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e992:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e996:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e99a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e99e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800e9a2:	69fb      	ldr	r3, [r7, #28]
 800e9a4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800e9a8:	edd7 7a06 	vldr	s15, [r7, #24]
 800e9ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e9b0:	69fb      	ldr	r3, [r7, #28]
 800e9b2:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800e9b6:	edd7 7a04 	vldr	s15, [r7, #16]
 800e9ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e9be:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e9c2:	69fb      	ldr	r3, [r7, #28]
 800e9c4:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800e9c8:	edd7 7a05 	vldr	s15, [r7, #20]
 800e9cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e9d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e9d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e9d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e9dc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800e9e0:	69fb      	ldr	r3, [r7, #28]
 800e9e2:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800e9e6:	edd7 7a05 	vldr	s15, [r7, #20]
 800e9ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e9ee:	69fb      	ldr	r3, [r7, #28]
 800e9f0:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800e9f4:	edd7 7a04 	vldr	s15, [r7, #16]
 800e9f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e9fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ea00:	69fb      	ldr	r3, [r7, #28]
 800ea02:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800ea06:	edd7 7a06 	vldr	s15, [r7, #24]
 800ea0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ea16:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea1a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800ea1e:	69fb      	ldr	r3, [r7, #28]
 800ea20:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800ea24:	edd7 7a04 	vldr	s15, [r7, #16]
 800ea28:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800ea32:	edd7 7a05 	vldr	s15, [r7, #20]
 800ea36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ea3e:	69fb      	ldr	r3, [r7, #28]
 800ea40:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800ea44:	edd7 7a06 	vldr	s15, [r7, #24]
 800ea48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ea50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ea54:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea58:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	// Normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800ea5c:	ed97 7a03 	vldr	s14, [r7, #12]
 800ea60:	edd7 7a03 	vldr	s15, [r7, #12]
 800ea64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ea68:	edd7 6a02 	vldr	s13, [r7, #8]
 800ea6c:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea74:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ea78:	edd7 6a01 	vldr	s13, [r7, #4]
 800ea7c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ea80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea84:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea88:	eeb0 0a67 	vmov.f32	s0, s15
 800ea8c:	69f8      	ldr	r0, [r7, #28]
 800ea8e:	f000 fab9 	bl	800f004 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800ea92:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	ax *= recipNorm;
 800ea96:	ed97 7a03 	vldr	s14, [r7, #12]
 800ea9a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800ea9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eaa2:	edc7 7a03 	vstr	s15, [r7, #12]
	ay *= recipNorm;
 800eaa6:	ed97 7a02 	vldr	s14, [r7, #8]
 800eaaa:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800eaae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eab2:	edc7 7a02 	vstr	s15, [r7, #8]
	az *= recipNorm;
 800eab6:	ed97 7a01 	vldr	s14, [r7, #4]
 800eaba:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800eabe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eac2:	edc7 7a01 	vstr	s15, [r7, #4]

	// Auxiliary variables to avoid repeated arithmetic
	_2q0 = 2.0f * q0;
 800eac6:	69fb      	ldr	r3, [r7, #28]
 800eac8:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800eacc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ead0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	_2q1 = 2.0f * q1;
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800eada:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800eade:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	_2q2 = 2.0f * q2;
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800eae8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800eaec:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	_2q3 = 2.0f * q3;
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800eaf6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800eafa:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	_4q0 = 4.0f * q0;
 800eafe:	69fb      	ldr	r3, [r7, #28]
 800eb00:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800eb04:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800eb08:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eb0c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	_4q1 = 4.0f * q1;
 800eb10:	69fb      	ldr	r3, [r7, #28]
 800eb12:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800eb16:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800eb1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eb1e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	_4q2 = 4.0f * q2;
 800eb22:	69fb      	ldr	r3, [r7, #28]
 800eb24:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800eb28:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800eb2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eb30:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	_8q1 = 8.0f * q1;
 800eb34:	69fb      	ldr	r3, [r7, #28]
 800eb36:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800eb3a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800eb3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eb42:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_8q2 = 8.0f * q2;
 800eb46:	69fb      	ldr	r3, [r7, #28]
 800eb48:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800eb4c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800eb50:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eb54:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	q0q0 = q0 * q0;
 800eb58:	69fb      	ldr	r3, [r7, #28]
 800eb5a:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800eb5e:	69fb      	ldr	r3, [r7, #28]
 800eb60:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800eb64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb68:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	q1q1 = q1 * q1;
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800eb72:	69fb      	ldr	r3, [r7, #28]
 800eb74:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800eb78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb7c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	q2q2 = q2 * q2;
 800eb80:	69fb      	ldr	r3, [r7, #28]
 800eb82:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800eb8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb90:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	q3q3 = q3 * q3;
 800eb94:	69fb      	ldr	r3, [r7, #28]
 800eb96:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800eb9a:	69fb      	ldr	r3, [r7, #28]
 800eb9c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800eba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eba4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	// Gradient decent algorithm corrective step
	s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800eba8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800ebac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ebb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ebb4:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800ebb8:	edd7 7a03 	vldr	s15, [r7, #12]
 800ebbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ebc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ebc4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800ebc8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800ebcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ebd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ebd4:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800ebd8:	edd7 7a02 	vldr	s15, [r7, #8]
 800ebdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ebe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebe4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800ebe8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800ebec:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800ebf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ebf4:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800ebf8:	edd7 7a03 	vldr	s15, [r7, #12]
 800ebfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec00:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ec04:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ec08:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800ec0c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ec10:	69fb      	ldr	r3, [r7, #28]
 800ec12:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800ec16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ec1e:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800ec22:	edd7 7a02 	vldr	s15, [r7, #8]
 800ec26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ec2e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800ec32:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ec36:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800ec3a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800ec3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec42:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ec46:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800ec4a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ec4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec52:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ec56:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800ec5a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ec5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec62:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec66:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800ec6a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ec6e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800ec72:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ec76:	69fb      	ldr	r3, [r7, #28]
 800ec78:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800ec7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ec80:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800ec84:	edd7 7a03 	vldr	s15, [r7, #12]
 800ec88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ec90:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800ec94:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800ec98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eca0:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800eca4:	edd7 7a02 	vldr	s15, [r7, #8]
 800eca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ecac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ecb0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800ecb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ecb8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800ecbc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800ecc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ecc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ecc8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800eccc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ecd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ecd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ecd8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800ecdc:	edd7 7a01 	vldr	s15, [r7, #4]
 800ece0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ece4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ece8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800ecec:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800ecf0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800ecf4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ecf8:	69fb      	ldr	r3, [r7, #28]
 800ecfa:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800ecfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ed02:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800ed06:	edd7 7a03 	vldr	s15, [r7, #12]
 800ed0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ed12:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ed16:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800ed1a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ed1e:	69fb      	ldr	r3, [r7, #28]
 800ed20:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800ed24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed28:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ed2c:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800ed30:	edd7 7a02 	vldr	s15, [r7, #8]
 800ed34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed3c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800ed40:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ed44:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ed48:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ed4c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800ed50:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ed54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed58:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ed5c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ed60:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ed64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed68:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ed6c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ed70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ed74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed7c:	eeb0 0a67 	vmov.f32	s0, s15
 800ed80:	69f8      	ldr	r0, [r7, #28]
 800ed82:	f000 f93f 	bl	800f004 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800ed86:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	s0 *= recipNorm;
 800ed8a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ed8e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800ed92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed96:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s1 *= recipNorm;
 800ed9a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800ed9e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800eda2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eda6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s2 *= recipNorm;
 800edaa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800edae:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800edb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edb6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s3 *= recipNorm;
 800edba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800edbe:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800edc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edc6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	// Apply feedback step
	qDot1 -= beta * s0;
 800edca:	69fb      	ldr	r3, [r7, #28]
 800edcc:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800edd0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800edd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edd8:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800eddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ede0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot2 -= beta * s1;
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800edea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800edee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edf2:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800edf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800edfa:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	qDot3 -= beta * s2;
 800edfe:	69fb      	ldr	r3, [r7, #28]
 800ee00:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800ee04:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ee08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee0c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800ee10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee14:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot4 -= beta * s3;
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800ee1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ee22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee26:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800ee2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee2e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	float dt = (microsecond() - this->lastUpdate)*1000000;			/*[second]*/
 800ee32:	f7fe fbf3 	bl	800d61c <_ZL11microsecondv>
 800ee36:	460a      	mov	r2, r1
 800ee38:	4601      	mov	r1, r0
 800ee3a:	69fb      	ldr	r3, [r7, #28]
 800ee3c:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 800ee40:	1ac9      	subs	r1, r1, r3
 800ee42:	eb62 0204 	sbc.w	r2, r2, r4
 800ee46:	460d      	mov	r5, r1
 800ee48:	4616      	mov	r6, r2
 800ee4a:	462b      	mov	r3, r5
 800ee4c:	4634      	mov	r4, r6
 800ee4e:	f04f 0100 	mov.w	r1, #0
 800ee52:	f04f 0200 	mov.w	r2, #0
 800ee56:	0162      	lsls	r2, r4, #5
 800ee58:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800ee5c:	0159      	lsls	r1, r3, #5
 800ee5e:	460b      	mov	r3, r1
 800ee60:	4614      	mov	r4, r2
 800ee62:	1b5b      	subs	r3, r3, r5
 800ee64:	eb64 0406 	sbc.w	r4, r4, r6
 800ee68:	f04f 0100 	mov.w	r1, #0
 800ee6c:	f04f 0200 	mov.w	r2, #0
 800ee70:	0262      	lsls	r2, r4, #9
 800ee72:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800ee76:	0259      	lsls	r1, r3, #9
 800ee78:	460b      	mov	r3, r1
 800ee7a:	4614      	mov	r4, r2
 800ee7c:	195b      	adds	r3, r3, r5
 800ee7e:	eb44 0406 	adc.w	r4, r4, r6
 800ee82:	f04f 0100 	mov.w	r1, #0
 800ee86:	f04f 0200 	mov.w	r2, #0
 800ee8a:	01a2      	lsls	r2, r4, #6
 800ee8c:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 800ee90:	0199      	lsls	r1, r3, #6
 800ee92:	1ac9      	subs	r1, r1, r3
 800ee94:	eb62 0204 	sbc.w	r2, r2, r4
 800ee98:	194b      	adds	r3, r1, r5
 800ee9a:	eb42 0406 	adc.w	r4, r2, r6
 800ee9e:	4618      	mov	r0, r3
 800eea0:	4621      	mov	r1, r4
 800eea2:	f7f1 ffc1 	bl	8000e28 <__aeabi_ul2f>
 800eea6:	4603      	mov	r3, r0
 800eea8:	627b      	str	r3, [r7, #36]	; 0x24
	if(dt > 0.01) dt = 0.01;
 800eeaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7f1 fb53 	bl	8000558 <__aeabi_f2d>
 800eeb2:	a352      	add	r3, pc, #328	; (adr r3, 800effc <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x6bc>)
 800eeb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb8:	f7f1 fe36 	bl	8000b28 <__aeabi_dcmpgt>
 800eebc:	4603      	mov	r3, r0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d001      	beq.n	800eec6 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x586>
 800eec2:	4b4d      	ldr	r3, [pc, #308]	; (800eff8 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x6b8>)
 800eec4:	627b      	str	r3, [r7, #36]	; 0x24
	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 800eec6:	69fb      	ldr	r3, [r7, #28]
 800eec8:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800eecc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800eed0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800eed4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eedc:	69fb      	ldr	r3, [r7, #28]
 800eede:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 += qDot2 * (dt);
 800eee2:	69fb      	ldr	r3, [r7, #28]
 800eee4:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800eee8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800eeec:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800eef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eef8:	69fb      	ldr	r3, [r7, #28]
 800eefa:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 += qDot3 * (dt);
 800eefe:	69fb      	ldr	r3, [r7, #28]
 800ef00:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800ef04:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ef08:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800ef0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ef10:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ef14:	69fb      	ldr	r3, [r7, #28]
 800ef16:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 += qDot4 * (dt);
 800ef1a:	69fb      	ldr	r3, [r7, #28]
 800ef1c:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800ef20:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ef24:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800ef28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ef2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ef30:	69fb      	ldr	r3, [r7, #28]
 800ef32:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800ef36:	69fb      	ldr	r3, [r7, #28]
 800ef38:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800ef3c:	69fb      	ldr	r3, [r7, #28]
 800ef3e:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800ef42:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef46:	69fb      	ldr	r3, [r7, #28]
 800ef48:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800ef4c:	69fb      	ldr	r3, [r7, #28]
 800ef4e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800ef52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ef56:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ef5a:	69fb      	ldr	r3, [r7, #28]
 800ef5c:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800ef66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ef6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ef6e:	69fb      	ldr	r3, [r7, #28]
 800ef70:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800ef74:	69fb      	ldr	r3, [r7, #28]
 800ef76:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800ef7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ef7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ef82:	eeb0 0a67 	vmov.f32	s0, s15
 800ef86:	69f8      	ldr	r0, [r7, #28]
 800ef88:	f000 f83c 	bl	800f004 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800ef8c:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	q0 *= recipNorm;
 800ef90:	69fb      	ldr	r3, [r7, #28]
 800ef92:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800ef96:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800ef9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef9e:	69fb      	ldr	r3, [r7, #28]
 800efa0:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 *= recipNorm;
 800efa4:	69fb      	ldr	r3, [r7, #28]
 800efa6:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800efaa:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800efae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efb2:	69fb      	ldr	r3, [r7, #28]
 800efb4:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 *= recipNorm;
 800efb8:	69fb      	ldr	r3, [r7, #28]
 800efba:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800efbe:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800efc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efc6:	69fb      	ldr	r3, [r7, #28]
 800efc8:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 *= recipNorm;
 800efcc:	69fb      	ldr	r3, [r7, #28]
 800efce:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800efd2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800efd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	lastUpdate = microsecond();
 800efe0:	f7fe fb1c 	bl	800d61c <_ZL11microsecondv>
 800efe4:	4603      	mov	r3, r0
 800efe6:	460c      	mov	r4, r1
 800efe8:	69fa      	ldr	r2, [r7, #28]
 800efea:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
}
 800efee:	bf00      	nop
 800eff0:	3784      	adds	r7, #132	; 0x84
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eff6:	bf00      	nop
 800eff8:	3c23d70a 	.word	0x3c23d70a
 800effc:	47ae147b 	.word	0x47ae147b
 800f000:	3f847ae1 	.word	0x3f847ae1

0800f004 <_ZN2FC10ModuleAHRS7invSqrtEf>:

float ModuleAHRS::invSqrt(float x){
 800f004:	b480      	push	{r7}
 800f006:	b087      	sub	sp, #28
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	ed87 0a00 	vstr	s0, [r7]
	float halfx = 0.5f * x;
 800f010:	edd7 7a00 	vldr	s15, [r7]
 800f014:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f018:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f01c:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800f024:	f107 0310 	add.w	r3, r7, #16
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	105a      	asrs	r2, r3, #1
 800f030:	4b12      	ldr	r3, [pc, #72]	; (800f07c <_ZN2FC10ModuleAHRS7invSqrtEf+0x78>)
 800f032:	1a9b      	subs	r3, r3, r2
 800f034:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800f036:	f107 030c 	add.w	r3, r7, #12
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800f03e:	ed97 7a04 	vldr	s14, [r7, #16]
 800f042:	edd7 7a05 	vldr	s15, [r7, #20]
 800f046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f04a:	edd7 7a04 	vldr	s15, [r7, #16]
 800f04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f052:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800f056:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f05a:	edd7 7a04 	vldr	s15, [r7, #16]
 800f05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f062:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	ee07 3a90 	vmov	s15, r3
}
 800f06c:	eeb0 0a67 	vmov.f32	s0, s15
 800f070:	371c      	adds	r7, #28
 800f072:	46bd      	mov	sp, r7
 800f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f078:	4770      	bx	lr
 800f07a:	bf00      	nop
 800f07c:	5f3759df 	.word	0x5f3759df

0800f080 <_ZN6matrix6MatrixIfLj4ELj1EEC1Ev>:
                _data[i][j] = Type{};
            }
        }
    }
#else
    Matrix() = default;
 800f080:	b480      	push	{r7}
 800f082:	b083      	sub	sp, #12
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	461a      	mov	r2, r3
 800f08c:	2300      	movs	r3, #0
 800f08e:	6013      	str	r3, [r2, #0]
 800f090:	6053      	str	r3, [r2, #4]
 800f092:	6093      	str	r3, [r2, #8]
 800f094:	60d3      	str	r3, [r2, #12]
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	4618      	mov	r0, r3
 800f09a:	370c      	adds	r7, #12
 800f09c:	46bd      	mov	sp, r7
 800f09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a2:	4770      	bx	lr

0800f0a4 <_ZN6matrix6VectorIfLj4EEC1Ev>:
class Vector : public Matrix<Type, M, 1>
{
public:
    typedef Matrix<Type, M, 1> MatrixM1;

    Vector() = default;
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b082      	sub	sp, #8
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7ff ffe6 	bl	800f080 <_ZN6matrix6MatrixIfLj4ELj1EEC1Ev>
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3708      	adds	r7, #8
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}

0800f0be <_ZN6matrix10QuaternionIfEC1Effff>:
     * @param a set quaternion value 0
     * @param b set quaternion value 1
     * @param c set quaternion value 2
     * @param d set quaternion value 3
     */
    Quaternion(Type a, Type b, Type c, Type d)
 800f0be:	b580      	push	{r7, lr}
 800f0c0:	b088      	sub	sp, #32
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6178      	str	r0, [r7, #20]
 800f0c6:	ed87 0a04 	vstr	s0, [r7, #16]
 800f0ca:	edc7 0a03 	vstr	s1, [r7, #12]
 800f0ce:	ed87 1a02 	vstr	s2, [r7, #8]
 800f0d2:	edc7 1a01 	vstr	s3, [r7, #4]
    {
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7ff ffe3 	bl	800f0a4 <_ZN6matrix6VectorIfLj4EEC1Ev>
        Quaternion &q = *this;
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	61fb      	str	r3, [r7, #28]
        q(0) = a;
 800f0e2:	69fb      	ldr	r3, [r7, #28]
 800f0e4:	2100      	movs	r1, #0
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f000 fa4a 	bl	800f580 <_ZN6matrix6VectorIfLj4EEclEj>
 800f0ec:	4602      	mov	r2, r0
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	6013      	str	r3, [r2, #0]
        q(1) = b;
 800f0f2:	69fb      	ldr	r3, [r7, #28]
 800f0f4:	2101      	movs	r1, #1
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f000 fa42 	bl	800f580 <_ZN6matrix6VectorIfLj4EEclEj>
 800f0fc:	4602      	mov	r2, r0
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	6013      	str	r3, [r2, #0]
        q(2) = c;
 800f102:	69fb      	ldr	r3, [r7, #28]
 800f104:	2102      	movs	r1, #2
 800f106:	4618      	mov	r0, r3
 800f108:	f000 fa3a 	bl	800f580 <_ZN6matrix6VectorIfLj4EEclEj>
 800f10c:	4602      	mov	r2, r0
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	6013      	str	r3, [r2, #0]
        q(3) = d;
 800f112:	69fb      	ldr	r3, [r7, #28]
 800f114:	2103      	movs	r1, #3
 800f116:	4618      	mov	r0, r3
 800f118:	f000 fa32 	bl	800f580 <_ZN6matrix6VectorIfLj4EEclEj>
 800f11c:	4602      	mov	r2, r0
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6013      	str	r3, [r2, #0]
    }
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	4618      	mov	r0, r3
 800f126:	3720      	adds	r7, #32
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <_ZN6matrix6MatrixIfLj3ELj3EEC1Ev>:
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b082      	sub	sp, #8
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	4618      	mov	r0, r3
 800f138:	2324      	movs	r3, #36	; 0x24
 800f13a:	461a      	mov	r2, r3
 800f13c:	2100      	movs	r1, #0
 800f13e:	f019 fb16 	bl	802876e <memset>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	4618      	mov	r0, r3
 800f146:	3708      	adds	r7, #8
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}

0800f14c <_ZN6matrix12SquareMatrixIfLj3EEC1Ev>:

template <typename Type, size_t  M>
class SquareMatrix : public Matrix<Type, M, M>
{
public:
    SquareMatrix() = default;
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b082      	sub	sp, #8
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	4618      	mov	r0, r3
 800f158:	f7ff ffe8 	bl	800f12c <_ZN6matrix6MatrixIfLj3ELj3EEC1Ev>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	4618      	mov	r0, r3
 800f160:	3708      	adds	r7, #8
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}

0800f166 <_ZN6matrix3DcmIfEC1ERKNS_10QuaternionIfEE>:
     * Instance is initialized from quaternion representing
     * coordinate transformation from frame 2 to frame 1.
     *
     * @param q quaternion to set dcm to
     */
    Dcm(const Quaternion<Type> &q)
 800f166:	b580      	push	{r7, lr}
 800f168:	ed2d 8b02 	vpush	{d8}
 800f16c:	b092      	sub	sp, #72	; 0x48
 800f16e:	af00      	add	r7, sp, #0
 800f170:	6078      	str	r0, [r7, #4]
 800f172:	6039      	str	r1, [r7, #0]
    {
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	4618      	mov	r0, r3
 800f178:	f7ff ffe8 	bl	800f14c <_ZN6matrix12SquareMatrixIfLj3EEC1Ev>
        Dcm &dcm = *this;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	647b      	str	r3, [r7, #68]	; 0x44
        const Type a = q(0);
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	2100      	movs	r1, #0
 800f184:	4618      	mov	r0, r3
 800f186:	f000 fa1b 	bl	800f5c0 <_ZNK6matrix6VectorIfLj4EEclEj>
 800f18a:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        const Type b = q(1);
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	2101      	movs	r1, #1
 800f192:	4618      	mov	r0, r3
 800f194:	f000 fa14 	bl	800f5c0 <_ZNK6matrix6VectorIfLj4EEclEj>
 800f198:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        const Type c = q(2);
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	2102      	movs	r1, #2
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f000 fa0d 	bl	800f5c0 <_ZNK6matrix6VectorIfLj4EEclEj>
 800f1a6:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
        const Type d = q(3);
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	2103      	movs	r1, #3
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f000 fa06 	bl	800f5c0 <_ZNK6matrix6VectorIfLj4EEclEj>
 800f1b4:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
        const Type aa = a * a;
 800f1b8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800f1bc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800f1c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1c4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        const Type ab = a * b;
 800f1c8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800f1cc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800f1d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1d4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        const Type ac = a * c;
 800f1d8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800f1dc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f1e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1e4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        const Type ad = a * d;
 800f1e8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800f1ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f1f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        const Type bb = b * b;
 800f1f8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f1fc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800f200:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f204:	edc7 7a08 	vstr	s15, [r7, #32]
        const Type bc = b * c;
 800f208:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f20c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f210:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f214:	edc7 7a07 	vstr	s15, [r7, #28]
        const Type bd = b * d;
 800f218:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f21c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f220:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f224:	edc7 7a06 	vstr	s15, [r7, #24]
        const Type cc = c * c;
 800f228:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800f22c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f230:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f234:	edc7 7a05 	vstr	s15, [r7, #20]
        const Type cd = c * d;
 800f238:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800f23c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f240:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f244:	edc7 7a04 	vstr	s15, [r7, #16]
        const Type dd = d * d;
 800f248:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f24c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f250:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f254:	edc7 7a03 	vstr	s15, [r7, #12]
        dcm(0, 0) = aa + bb - cc - dd;
 800f258:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800f25c:	edd7 7a08 	vldr	s15, [r7, #32]
 800f260:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f264:	edd7 7a05 	vldr	s15, [r7, #20]
 800f268:	ee37 8a67 	vsub.f32	s16, s14, s15
 800f26c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f26e:	2200      	movs	r2, #0
 800f270:	2100      	movs	r1, #0
 800f272:	4618      	mov	r0, r3
 800f274:	f000 f9c6 	bl	800f604 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800f278:	4603      	mov	r3, r0
 800f27a:	edd7 7a03 	vldr	s15, [r7, #12]
 800f27e:	ee78 7a67 	vsub.f32	s15, s16, s15
 800f282:	edc3 7a00 	vstr	s15, [r3]
        dcm(0, 1) = Type(2) * (bc - ad);
 800f286:	ed97 7a07 	vldr	s14, [r7, #28]
 800f28a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f28e:	ee37 8a67 	vsub.f32	s16, s14, s15
 800f292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f294:	2201      	movs	r2, #1
 800f296:	2100      	movs	r1, #0
 800f298:	4618      	mov	r0, r3
 800f29a:	f000 f9b3 	bl	800f604 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	ee78 7a08 	vadd.f32	s15, s16, s16
 800f2a4:	edc3 7a00 	vstr	s15, [r3]
        dcm(0, 2) = Type(2) * (ac + bd);
 800f2a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f2ac:	edd7 7a06 	vldr	s15, [r7, #24]
 800f2b0:	ee37 8a27 	vadd.f32	s16, s14, s15
 800f2b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2b6:	2202      	movs	r2, #2
 800f2b8:	2100      	movs	r1, #0
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f000 f9a2 	bl	800f604 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	ee78 7a08 	vadd.f32	s15, s16, s16
 800f2c6:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 0) = Type(2) * (bc + ad);
 800f2ca:	ed97 7a07 	vldr	s14, [r7, #28]
 800f2ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f2d2:	ee37 8a27 	vadd.f32	s16, s14, s15
 800f2d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2d8:	2200      	movs	r2, #0
 800f2da:	2101      	movs	r1, #1
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f000 f991 	bl	800f604 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	ee78 7a08 	vadd.f32	s15, s16, s16
 800f2e8:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 1) = aa - bb + cc - dd;
 800f2ec:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800f2f0:	edd7 7a08 	vldr	s15, [r7, #32]
 800f2f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f2f8:	edd7 7a05 	vldr	s15, [r7, #20]
 800f2fc:	ee37 8a27 	vadd.f32	s16, s14, s15
 800f300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f302:	2201      	movs	r2, #1
 800f304:	2101      	movs	r1, #1
 800f306:	4618      	mov	r0, r3
 800f308:	f000 f97c 	bl	800f604 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800f30c:	4603      	mov	r3, r0
 800f30e:	edd7 7a03 	vldr	s15, [r7, #12]
 800f312:	ee78 7a67 	vsub.f32	s15, s16, s15
 800f316:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 2) = Type(2) * (cd - ab);
 800f31a:	ed97 7a04 	vldr	s14, [r7, #16]
 800f31e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f322:	ee37 8a67 	vsub.f32	s16, s14, s15
 800f326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f328:	2202      	movs	r2, #2
 800f32a:	2101      	movs	r1, #1
 800f32c:	4618      	mov	r0, r3
 800f32e:	f000 f969 	bl	800f604 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800f332:	4603      	mov	r3, r0
 800f334:	ee78 7a08 	vadd.f32	s15, s16, s16
 800f338:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 0) = Type(2) * (bd - ac);
 800f33c:	ed97 7a06 	vldr	s14, [r7, #24]
 800f340:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f344:	ee37 8a67 	vsub.f32	s16, s14, s15
 800f348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f34a:	2200      	movs	r2, #0
 800f34c:	2102      	movs	r1, #2
 800f34e:	4618      	mov	r0, r3
 800f350:	f000 f958 	bl	800f604 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800f354:	4603      	mov	r3, r0
 800f356:	ee78 7a08 	vadd.f32	s15, s16, s16
 800f35a:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 1) = Type(2) * (ab + cd);
 800f35e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f362:	edd7 7a04 	vldr	s15, [r7, #16]
 800f366:	ee37 8a27 	vadd.f32	s16, s14, s15
 800f36a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f36c:	2201      	movs	r2, #1
 800f36e:	2102      	movs	r1, #2
 800f370:	4618      	mov	r0, r3
 800f372:	f000 f947 	bl	800f604 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800f376:	4603      	mov	r3, r0
 800f378:	ee78 7a08 	vadd.f32	s15, s16, s16
 800f37c:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 2) = aa - bb - cc + dd;
 800f380:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800f384:	edd7 7a08 	vldr	s15, [r7, #32]
 800f388:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f38c:	edd7 7a05 	vldr	s15, [r7, #20]
 800f390:	ee37 8a67 	vsub.f32	s16, s14, s15
 800f394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f396:	2202      	movs	r2, #2
 800f398:	2102      	movs	r1, #2
 800f39a:	4618      	mov	r0, r3
 800f39c:	f000 f932 	bl	800f604 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	edd7 7a03 	vldr	s15, [r7, #12]
 800f3a6:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f3aa:	edc3 7a00 	vstr	s15, [r3]
    }
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3748      	adds	r7, #72	; 0x48
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	ecbd 8b02 	vpop	{d8}
 800f3ba:	bd80      	pop	{r7, pc}

0800f3bc <_ZN6matrix6MatrixIfLj3ELj1EEC1Ev>:
 800f3bc:	b480      	push	{r7}
 800f3be:	b083      	sub	sp, #12
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	461a      	mov	r2, r3
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	6013      	str	r3, [r2, #0]
 800f3cc:	6053      	str	r3, [r2, #4]
 800f3ce:	6093      	str	r3, [r2, #8]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	370c      	adds	r7, #12
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3dc:	4770      	bx	lr

0800f3de <_ZN6matrix6VectorIfLj3EEC1Ev>:
 800f3de:	b580      	push	{r7, lr}
 800f3e0:	b082      	sub	sp, #8
 800f3e2:	af00      	add	r7, sp, #0
 800f3e4:	6078      	str	r0, [r7, #4]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f7ff ffe7 	bl	800f3bc <_ZN6matrix6MatrixIfLj3ELj1EEC1Ev>
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3708      	adds	r7, #8
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}

0800f3f8 <_ZN6matrix7Vector3IfEC1Efff>:
    explicit Vector3(const Type data_[3]) :
        Vector<Type, 3>(data_)
    {
    }

    Vector3(Type x, Type y, Type z) {
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b086      	sub	sp, #24
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	60f8      	str	r0, [r7, #12]
 800f400:	ed87 0a02 	vstr	s0, [r7, #8]
 800f404:	edc7 0a01 	vstr	s1, [r7, #4]
 800f408:	ed87 1a00 	vstr	s2, [r7]
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	4618      	mov	r0, r3
 800f410:	f7ff ffe5 	bl	800f3de <_ZN6matrix6VectorIfLj3EEC1Ev>
        Vector3 &v(*this);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	617b      	str	r3, [r7, #20]
        v(0) = x;
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	2100      	movs	r1, #0
 800f41c:	4618      	mov	r0, r3
 800f41e:	f000 f88f 	bl	800f540 <_ZN6matrix6VectorIfLj3EEclEj>
 800f422:	4602      	mov	r2, r0
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	6013      	str	r3, [r2, #0]
        v(1) = y;
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	2101      	movs	r1, #1
 800f42c:	4618      	mov	r0, r3
 800f42e:	f000 f887 	bl	800f540 <_ZN6matrix6VectorIfLj3EEclEj>
 800f432:	4602      	mov	r2, r0
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6013      	str	r3, [r2, #0]
        v(2) = z;
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	2102      	movs	r1, #2
 800f43c:	4618      	mov	r0, r3
 800f43e:	f000 f87f 	bl	800f540 <_ZN6matrix6VectorIfLj3EEclEj>
 800f442:	4602      	mov	r2, r0
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	6013      	str	r3, [r2, #0]
    }
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	4618      	mov	r0, r3
 800f44c:	3718      	adds	r7, #24
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}

0800f452 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_>:
    // this might use a lot of programming memory
    // since it instantiates a class for every
    // required mult pair, but it provides
    // compile time size_t checking
    template<size_t P>
    Matrix<Type, M, P> operator*(const Matrix<Type, N, P> &other) const
 800f452:	b580      	push	{r7, lr}
 800f454:	ed2d 8b02 	vpush	{d8}
 800f458:	b088      	sub	sp, #32
 800f45a:	af00      	add	r7, sp, #0
 800f45c:	60f8      	str	r0, [r7, #12]
 800f45e:	60b9      	str	r1, [r7, #8]
 800f460:	607a      	str	r2, [r7, #4]
    {
        const Matrix<Type, M, N> &self = *this;
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	613b      	str	r3, [r7, #16]
        Matrix<Type, M, P> res;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	461a      	mov	r2, r3
 800f46a:	2300      	movs	r3, #0
 800f46c:	6013      	str	r3, [r2, #0]
 800f46e:	6053      	str	r3, [r2, #4]
 800f470:	6093      	str	r3, [r2, #8]
        res.setZero();
 800f472:	68f8      	ldr	r0, [r7, #12]
 800f474:	f000 f8f4 	bl	800f660 <_ZN6matrix6MatrixIfLj3ELj1EE7setZeroEv>

        for (size_t i = 0; i < M; i++) {
 800f478:	2300      	movs	r3, #0
 800f47a:	61fb      	str	r3, [r7, #28]
 800f47c:	69fb      	ldr	r3, [r7, #28]
 800f47e:	2b02      	cmp	r3, #2
 800f480:	d831      	bhi.n	800f4e6 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x94>
            for (size_t k = 0; k < P; k++) {
 800f482:	2300      	movs	r3, #0
 800f484:	61bb      	str	r3, [r7, #24]
 800f486:	69bb      	ldr	r3, [r7, #24]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d128      	bne.n	800f4de <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x8c>
                for (size_t j = 0; j < N; j++) {
 800f48c:	2300      	movs	r3, #0
 800f48e:	617b      	str	r3, [r7, #20]
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	2b02      	cmp	r3, #2
 800f494:	d81f      	bhi.n	800f4d6 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x84>
                    res(i, k) += self(i, j) * other(j, k);
 800f496:	697a      	ldr	r2, [r7, #20]
 800f498:	69f9      	ldr	r1, [r7, #28]
 800f49a:	6938      	ldr	r0, [r7, #16]
 800f49c:	f000 f918 	bl	800f6d0 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj>
 800f4a0:	eeb0 8a40 	vmov.f32	s16, s0
 800f4a4:	69ba      	ldr	r2, [r7, #24]
 800f4a6:	6979      	ldr	r1, [r7, #20]
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f000 f943 	bl	800f734 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj>
 800f4ae:	eef0 7a40 	vmov.f32	s15, s0
 800f4b2:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f4b6:	69ba      	ldr	r2, [r7, #24]
 800f4b8:	69f9      	ldr	r1, [r7, #28]
 800f4ba:	68f8      	ldr	r0, [r7, #12]
 800f4bc:	f000 f8de 	bl	800f67c <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	edd3 7a00 	vldr	s15, [r3]
 800f4c6:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f4ca:	edc3 7a00 	vstr	s15, [r3]
                for (size_t j = 0; j < N; j++) {
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	3301      	adds	r3, #1
 800f4d2:	617b      	str	r3, [r7, #20]
 800f4d4:	e7dc      	b.n	800f490 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x3e>
            for (size_t k = 0; k < P; k++) {
 800f4d6:	69bb      	ldr	r3, [r7, #24]
 800f4d8:	3301      	adds	r3, #1
 800f4da:	61bb      	str	r3, [r7, #24]
 800f4dc:	e7d3      	b.n	800f486 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x34>
        for (size_t i = 0; i < M; i++) {
 800f4de:	69fb      	ldr	r3, [r7, #28]
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	61fb      	str	r3, [r7, #28]
 800f4e4:	e7ca      	b.n	800f47c <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x2a>
                }
            }
        }

        return res;
 800f4e6:	bf00      	nop
    }
 800f4e8:	68f8      	ldr	r0, [r7, #12]
 800f4ea:	3720      	adds	r7, #32
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	ecbd 8b02 	vpop	{d8}
 800f4f2:	bd80      	pop	{r7, pc}

0800f4f4 <_ZN6matrix7Vector3IfEC1ERKNS_6MatrixIfLj3ELj1EEE>:
    Vector3(const Matrix31 & other) :
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b082      	sub	sp, #8
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	6039      	str	r1, [r7, #0]
        Vector<Type, 3>(other)
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6839      	ldr	r1, [r7, #0]
 800f502:	4618      	mov	r0, r3
 800f504:	f000 f944 	bl	800f790 <_ZN6matrix6VectorIfLj3EEC1ERKNS_6MatrixIfLj3ELj1EEE>
    }
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	4618      	mov	r0, r3
 800f50c:	3708      	adds	r7, #8
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}

0800f512 <_ZN6matrix6MatrixIfLj3ELj1EEC1ERKS1_>:
    Matrix(const Matrix &other)
 800f512:	b580      	push	{r7, lr}
 800f514:	b082      	sub	sp, #8
 800f516:	af00      	add	r7, sp, #0
 800f518:	6078      	str	r0, [r7, #4]
 800f51a:	6039      	str	r1, [r7, #0]
    {
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	461a      	mov	r2, r3
 800f520:	2300      	movs	r3, #0
 800f522:	6013      	str	r3, [r2, #0]
 800f524:	6053      	str	r3, [r2, #4]
 800f526:	6093      	str	r3, [r2, #8]
        memcpy(_data, other._data, sizeof(_data));
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6839      	ldr	r1, [r7, #0]
 800f52c:	220c      	movs	r2, #12
 800f52e:	4618      	mov	r0, r3
 800f530:	f019 f912 	bl	8028758 <memcpy>
    }
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	4618      	mov	r0, r3
 800f538:	3708      	adds	r7, #8
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
	...

0800f540 <_ZN6matrix6VectorIfLj3EEclEj>:

        const MatrixM1 &v = *this;
        return v(i, 0);
    }

    inline Type &operator()(size_t i)
 800f540:	b580      	push	{r7, lr}
 800f542:	b084      	sub	sp, #16
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
 800f548:	6039      	str	r1, [r7, #0]
    {
        assert(i >= 0);
        assert(i < M);
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	2b02      	cmp	r3, #2
 800f54e:	d905      	bls.n	800f55c <_ZN6matrix6VectorIfLj3EEclEj+0x1c>
 800f550:	4b08      	ldr	r3, [pc, #32]	; (800f574 <_ZN6matrix6VectorIfLj3EEclEj+0x34>)
 800f552:	4a09      	ldr	r2, [pc, #36]	; (800f578 <_ZN6matrix6VectorIfLj3EEclEj+0x38>)
 800f554:	2137      	movs	r1, #55	; 0x37
 800f556:	4809      	ldr	r0, [pc, #36]	; (800f57c <_ZN6matrix6VectorIfLj3EEclEj+0x3c>)
 800f558:	f019 f8a4 	bl	80286a4 <__assert_func>

        MatrixM1 &v = *this;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 800f560:	2200      	movs	r2, #0
 800f562:	6839      	ldr	r1, [r7, #0]
 800f564:	68f8      	ldr	r0, [r7, #12]
 800f566:	f000 f889 	bl	800f67c <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>
 800f56a:	4603      	mov	r3, r0
    }
 800f56c:	4618      	mov	r0, r3
 800f56e:	3710      	adds	r7, #16
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	0802ce30 	.word	0x0802ce30
 800f578:	0802d854 	.word	0x0802d854
 800f57c:	0802ce38 	.word	0x0802ce38

0800f580 <_ZN6matrix6VectorIfLj4EEclEj>:
    inline Type &operator()(size_t i)
 800f580:	b580      	push	{r7, lr}
 800f582:	b084      	sub	sp, #16
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	6039      	str	r1, [r7, #0]
        assert(i < M);
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	2b03      	cmp	r3, #3
 800f58e:	d905      	bls.n	800f59c <_ZN6matrix6VectorIfLj4EEclEj+0x1c>
 800f590:	4b08      	ldr	r3, [pc, #32]	; (800f5b4 <_ZN6matrix6VectorIfLj4EEclEj+0x34>)
 800f592:	4a09      	ldr	r2, [pc, #36]	; (800f5b8 <_ZN6matrix6VectorIfLj4EEclEj+0x38>)
 800f594:	2137      	movs	r1, #55	; 0x37
 800f596:	4809      	ldr	r0, [pc, #36]	; (800f5bc <_ZN6matrix6VectorIfLj4EEclEj+0x3c>)
 800f598:	f019 f884 	bl	80286a4 <__assert_func>
        MatrixM1 &v = *this;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	6839      	ldr	r1, [r7, #0]
 800f5a4:	68f8      	ldr	r0, [r7, #12]
 800f5a6:	f000 f903 	bl	800f7b0 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj>
 800f5aa:	4603      	mov	r3, r0
    }
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3710      	adds	r7, #16
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}
 800f5b4:	0802ce30 	.word	0x0802ce30
 800f5b8:	0802d3f0 	.word	0x0802d3f0
 800f5bc:	0802ce38 	.word	0x0802ce38

0800f5c0 <_ZNK6matrix6VectorIfLj4EEclEj>:
    inline Type operator()(size_t i) const
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b084      	sub	sp, #16
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
        assert(i < M);
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	2b03      	cmp	r3, #3
 800f5ce:	d905      	bls.n	800f5dc <_ZNK6matrix6VectorIfLj4EEclEj+0x1c>
 800f5d0:	4b09      	ldr	r3, [pc, #36]	; (800f5f8 <_ZNK6matrix6VectorIfLj4EEclEj+0x38>)
 800f5d2:	4a0a      	ldr	r2, [pc, #40]	; (800f5fc <_ZNK6matrix6VectorIfLj4EEclEj+0x3c>)
 800f5d4:	212e      	movs	r1, #46	; 0x2e
 800f5d6:	480a      	ldr	r0, [pc, #40]	; (800f600 <_ZNK6matrix6VectorIfLj4EEclEj+0x40>)
 800f5d8:	f019 f864 	bl	80286a4 <__assert_func>
        const MatrixM1 &v = *this;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	6839      	ldr	r1, [r7, #0]
 800f5e4:	68f8      	ldr	r0, [r7, #12]
 800f5e6:	f000 f90d 	bl	800f804 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>
 800f5ea:	eef0 7a40 	vmov.f32	s15, s0
    }
 800f5ee:	eeb0 0a67 	vmov.f32	s0, s15
 800f5f2:	3710      	adds	r7, #16
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	0802ce30 	.word	0x0802ce30
 800f5fc:	0802d4f4 	.word	0x0802d4f4
 800f600:	0802ce38 	.word	0x0802ce38

0800f604 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 800f604:	b580      	push	{r7, lr}
 800f606:	b084      	sub	sp, #16
 800f608:	af00      	add	r7, sp, #0
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	2b02      	cmp	r3, #2
 800f614:	d905      	bls.n	800f622 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x1e>
 800f616:	4b0e      	ldr	r3, [pc, #56]	; (800f650 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x4c>)
 800f618:	4a0e      	ldr	r2, [pc, #56]	; (800f654 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x50>)
 800f61a:	216e      	movs	r1, #110	; 0x6e
 800f61c:	480e      	ldr	r0, [pc, #56]	; (800f658 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 800f61e:	f019 f841 	bl	80286a4 <__assert_func>
        assert(j < N);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2b02      	cmp	r3, #2
 800f626:	d905      	bls.n	800f634 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x30>
 800f628:	4b0c      	ldr	r3, [pc, #48]	; (800f65c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 800f62a:	4a0a      	ldr	r2, [pc, #40]	; (800f654 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x50>)
 800f62c:	2170      	movs	r1, #112	; 0x70
 800f62e:	480a      	ldr	r0, [pc, #40]	; (800f658 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 800f630:	f019 f838 	bl	80286a4 <__assert_func>
        return _data[i][j];
 800f634:	68ba      	ldr	r2, [r7, #8]
 800f636:	4613      	mov	r3, r2
 800f638:	005b      	lsls	r3, r3, #1
 800f63a:	4413      	add	r3, r2
 800f63c:	687a      	ldr	r2, [r7, #4]
 800f63e:	4413      	add	r3, r2
 800f640:	009b      	lsls	r3, r3, #2
 800f642:	68fa      	ldr	r2, [r7, #12]
 800f644:	4413      	add	r3, r2
    }
 800f646:	4618      	mov	r0, r3
 800f648:	3710      	adds	r7, #16
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop
 800f650:	0802ce30 	.word	0x0802ce30
 800f654:	0802d604 	.word	0x0802d604
 800f658:	0802ce68 	.word	0x0802ce68
 800f65c:	0802ce98 	.word	0x0802ce98

0800f660 <_ZN6matrix6MatrixIfLj3ELj1EE7setZeroEv>:
    void setCol(size_t j, Type val)
    {
        slice<M,1>(0,j) = val;
    }

    void setZero()
 800f660:	b580      	push	{r7, lr}
 800f662:	b082      	sub	sp, #8
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
    {
        memset(_data, 0, sizeof(_data));
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	220c      	movs	r2, #12
 800f66c:	2100      	movs	r1, #0
 800f66e:	4618      	mov	r0, r3
 800f670:	f019 f87d 	bl	802876e <memset>
    }
 800f674:	bf00      	nop
 800f676:	3708      	adds	r7, #8
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}

0800f67c <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b084      	sub	sp, #16
 800f680:	af00      	add	r7, sp, #0
 800f682:	60f8      	str	r0, [r7, #12]
 800f684:	60b9      	str	r1, [r7, #8]
 800f686:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	2b02      	cmp	r3, #2
 800f68c:	d905      	bls.n	800f69a <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x1e>
 800f68e:	4b0c      	ldr	r3, [pc, #48]	; (800f6c0 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x44>)
 800f690:	4a0c      	ldr	r2, [pc, #48]	; (800f6c4 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x48>)
 800f692:	216e      	movs	r1, #110	; 0x6e
 800f694:	480c      	ldr	r0, [pc, #48]	; (800f6c8 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 800f696:	f019 f805 	bl	80286a4 <__assert_func>
        assert(j < N);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d005      	beq.n	800f6ac <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x30>
 800f6a0:	4b0a      	ldr	r3, [pc, #40]	; (800f6cc <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 800f6a2:	4a08      	ldr	r2, [pc, #32]	; (800f6c4 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x48>)
 800f6a4:	2170      	movs	r1, #112	; 0x70
 800f6a6:	4808      	ldr	r0, [pc, #32]	; (800f6c8 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 800f6a8:	f018 fffc 	bl	80286a4 <__assert_func>
        return _data[i][j];
 800f6ac:	68ba      	ldr	r2, [r7, #8]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	4413      	add	r3, r2
 800f6b2:	009b      	lsls	r3, r3, #2
 800f6b4:	68fa      	ldr	r2, [r7, #12]
 800f6b6:	4413      	add	r3, r2
    }
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3710      	adds	r7, #16
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}
 800f6c0:	0802ce30 	.word	0x0802ce30
 800f6c4:	0802d7c4 	.word	0x0802d7c4
 800f6c8:	0802ce68 	.word	0x0802ce68
 800f6cc:	0802ce98 	.word	0x0802ce98

0800f6d0 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	60f8      	str	r0, [r7, #12]
 800f6d8:	60b9      	str	r1, [r7, #8]
 800f6da:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	2b02      	cmp	r3, #2
 800f6e0:	d905      	bls.n	800f6ee <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x1e>
 800f6e2:	4b10      	ldr	r3, [pc, #64]	; (800f724 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 800f6e4:	4a10      	ldr	r2, [pc, #64]	; (800f728 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 800f6e6:	2164      	movs	r1, #100	; 0x64
 800f6e8:	4810      	ldr	r0, [pc, #64]	; (800f72c <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x5c>)
 800f6ea:	f018 ffdb 	bl	80286a4 <__assert_func>
        assert(j < N);
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2b02      	cmp	r3, #2
 800f6f2:	d905      	bls.n	800f700 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x30>
 800f6f4:	4b0e      	ldr	r3, [pc, #56]	; (800f730 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x60>)
 800f6f6:	4a0c      	ldr	r2, [pc, #48]	; (800f728 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 800f6f8:	2166      	movs	r1, #102	; 0x66
 800f6fa:	480c      	ldr	r0, [pc, #48]	; (800f72c <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x5c>)
 800f6fc:	f018 ffd2 	bl	80286a4 <__assert_func>
        return _data[i][j];
 800f700:	68f9      	ldr	r1, [r7, #12]
 800f702:	68ba      	ldr	r2, [r7, #8]
 800f704:	4613      	mov	r3, r2
 800f706:	005b      	lsls	r3, r3, #1
 800f708:	4413      	add	r3, r2
 800f70a:	687a      	ldr	r2, [r7, #4]
 800f70c:	4413      	add	r3, r2
 800f70e:	009b      	lsls	r3, r3, #2
 800f710:	440b      	add	r3, r1
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	ee07 3a90 	vmov	s15, r3
    }
 800f718:	eeb0 0a67 	vmov.f32	s0, s15
 800f71c:	3710      	adds	r7, #16
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}
 800f722:	bf00      	nop
 800f724:	0802ce30 	.word	0x0802ce30
 800f728:	0802d694 	.word	0x0802d694
 800f72c:	0802ce68 	.word	0x0802ce68
 800f730:	0802ce98 	.word	0x0802ce98

0800f734 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 800f734:	b580      	push	{r7, lr}
 800f736:	b084      	sub	sp, #16
 800f738:	af00      	add	r7, sp, #0
 800f73a:	60f8      	str	r0, [r7, #12]
 800f73c:	60b9      	str	r1, [r7, #8]
 800f73e:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	2b02      	cmp	r3, #2
 800f744:	d905      	bls.n	800f752 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x1e>
 800f746:	4b0e      	ldr	r3, [pc, #56]	; (800f780 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 800f748:	4a0e      	ldr	r2, [pc, #56]	; (800f784 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 800f74a:	2164      	movs	r1, #100	; 0x64
 800f74c:	480e      	ldr	r0, [pc, #56]	; (800f788 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x54>)
 800f74e:	f018 ffa9 	bl	80286a4 <__assert_func>
        assert(j < N);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d005      	beq.n	800f764 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x30>
 800f758:	4b0c      	ldr	r3, [pc, #48]	; (800f78c <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x58>)
 800f75a:	4a0a      	ldr	r2, [pc, #40]	; (800f784 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 800f75c:	2166      	movs	r1, #102	; 0x66
 800f75e:	480a      	ldr	r0, [pc, #40]	; (800f788 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x54>)
 800f760:	f018 ffa0 	bl	80286a4 <__assert_func>
        return _data[i][j];
 800f764:	68fa      	ldr	r2, [r7, #12]
 800f766:	68b9      	ldr	r1, [r7, #8]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	440b      	add	r3, r1
 800f76c:	009b      	lsls	r3, r3, #2
 800f76e:	4413      	add	r3, r2
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	ee07 3a90 	vmov	s15, r3
    }
 800f776:	eeb0 0a67 	vmov.f32	s0, s15
 800f77a:	3710      	adds	r7, #16
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}
 800f780:	0802ce30 	.word	0x0802ce30
 800f784:	0802d72c 	.word	0x0802d72c
 800f788:	0802ce68 	.word	0x0802ce68
 800f78c:	0802ce98 	.word	0x0802ce98

0800f790 <_ZN6matrix6VectorIfLj3EEC1ERKNS_6MatrixIfLj3ELj1EEE>:
    Vector(const MatrixM1 & other) :
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
 800f798:	6039      	str	r1, [r7, #0]
        MatrixM1(other)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6839      	ldr	r1, [r7, #0]
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7ff feb7 	bl	800f512 <_ZN6matrix6MatrixIfLj3ELj1EEC1ERKS1_>
    }
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3708      	adds	r7, #8
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}
	...

0800f7b0 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	60f8      	str	r0, [r7, #12]
 800f7b8:	60b9      	str	r1, [r7, #8]
 800f7ba:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	2b03      	cmp	r3, #3
 800f7c0:	d905      	bls.n	800f7ce <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x1e>
 800f7c2:	4b0c      	ldr	r3, [pc, #48]	; (800f7f4 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x44>)
 800f7c4:	4a0c      	ldr	r2, [pc, #48]	; (800f7f8 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x48>)
 800f7c6:	216e      	movs	r1, #110	; 0x6e
 800f7c8:	480c      	ldr	r0, [pc, #48]	; (800f7fc <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 800f7ca:	f018 ff6b 	bl	80286a4 <__assert_func>
        assert(j < N);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d005      	beq.n	800f7e0 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x30>
 800f7d4:	4b0a      	ldr	r3, [pc, #40]	; (800f800 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 800f7d6:	4a08      	ldr	r2, [pc, #32]	; (800f7f8 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x48>)
 800f7d8:	2170      	movs	r1, #112	; 0x70
 800f7da:	4808      	ldr	r0, [pc, #32]	; (800f7fc <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 800f7dc:	f018 ff62 	bl	80286a4 <__assert_func>
        return _data[i][j];
 800f7e0:	68ba      	ldr	r2, [r7, #8]
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	4413      	add	r3, r2
 800f7e6:	009b      	lsls	r3, r3, #2
 800f7e8:	68fa      	ldr	r2, [r7, #12]
 800f7ea:	4413      	add	r3, r2
    }
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3710      	adds	r7, #16
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}
 800f7f4:	0802ce30 	.word	0x0802ce30
 800f7f8:	0802d464 	.word	0x0802d464
 800f7fc:	0802ce68 	.word	0x0802ce68
 800f800:	0802ce98 	.word	0x0802ce98

0800f804 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 800f804:	b580      	push	{r7, lr}
 800f806:	b084      	sub	sp, #16
 800f808:	af00      	add	r7, sp, #0
 800f80a:	60f8      	str	r0, [r7, #12]
 800f80c:	60b9      	str	r1, [r7, #8]
 800f80e:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	2b03      	cmp	r3, #3
 800f814:	d905      	bls.n	800f822 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x1e>
 800f816:	4b0e      	ldr	r3, [pc, #56]	; (800f850 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 800f818:	4a0e      	ldr	r2, [pc, #56]	; (800f854 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 800f81a:	2164      	movs	r1, #100	; 0x64
 800f81c:	480e      	ldr	r0, [pc, #56]	; (800f858 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x54>)
 800f81e:	f018 ff41 	bl	80286a4 <__assert_func>
        assert(j < N);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d005      	beq.n	800f834 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x30>
 800f828:	4b0c      	ldr	r3, [pc, #48]	; (800f85c <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x58>)
 800f82a:	4a0a      	ldr	r2, [pc, #40]	; (800f854 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 800f82c:	2166      	movs	r1, #102	; 0x66
 800f82e:	480a      	ldr	r0, [pc, #40]	; (800f858 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x54>)
 800f830:	f018 ff38 	bl	80286a4 <__assert_func>
        return _data[i][j];
 800f834:	68fa      	ldr	r2, [r7, #12]
 800f836:	68b9      	ldr	r1, [r7, #8]
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	440b      	add	r3, r1
 800f83c:	009b      	lsls	r3, r3, #2
 800f83e:	4413      	add	r3, r2
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	ee07 3a90 	vmov	s15, r3
    }
 800f846:	eeb0 0a67 	vmov.f32	s0, s15
 800f84a:	3710      	adds	r7, #16
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	0802ce30 	.word	0x0802ce30
 800f854:	0802d56c 	.word	0x0802d56c
 800f858:	0802ce68 	.word	0x0802ce68
 800f85c:	0802ce98 	.word	0x0802ce98

0800f860 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>:
    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
 800f860:	b490      	push	{r4, r7}
 800f862:	b084      	sub	sp, #16
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
 800f868:	6039      	str	r1, [r7, #0]
 800f86a:	2300      	movs	r3, #0
 800f86c:	73fb      	strb	r3, [r7, #15]
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 800f87a:	42a2      	cmp	r2, r4
 800f87c:	bf08      	it	eq
 800f87e:	4299      	cmpeq	r1, r3
 800f880:	d001      	beq.n	800f886 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE+0x26>
 800f882:	2301      	movs	r3, #1
 800f884:	73fb      	strb	r3, [r7, #15]
 800f886:	683a      	ldr	r2, [r7, #0]
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	4614      	mov	r4, r2
 800f88c:	33a8      	adds	r3, #168	; 0xa8
 800f88e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f890:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f894:	7bfb      	ldrb	r3, [r7, #15]
 800f896:	4618      	mov	r0, r3
 800f898:	3710      	adds	r7, #16
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bc90      	pop	{r4, r7}
 800f89e:	4770      	bx	lr

0800f8a0 <_ZN2FC6MsgBus19getVehicleAttitueSPEPNS_16VehicleAttitueSPE>:
    SIMPLE_FUNC_IMPL(VehicleAttitueSP, VehicleAttitueSP, vehicleAttitudeSP)
 800f8a0:	b4b0      	push	{r4, r5, r7}
 800f8a2:	b085      	sub	sp, #20
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	6039      	str	r1, [r7, #0]
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	73fb      	strb	r3, [r7, #15]
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	e9d3 342e 	ldrd	r3, r4, [r3, #184]	; 0xb8
 800f8ba:	42a2      	cmp	r2, r4
 800f8bc:	bf08      	it	eq
 800f8be:	4299      	cmpeq	r1, r3
 800f8c0:	d001      	beq.n	800f8c6 <_ZN2FC6MsgBus19getVehicleAttitueSPEPNS_16VehicleAttitueSPE+0x26>
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	73fb      	strb	r3, [r7, #15]
 800f8c6:	683a      	ldr	r2, [r7, #0]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	4615      	mov	r5, r2
 800f8cc:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 800f8d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f8d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f8d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f8d8:	e885 0003 	stmia.w	r5, {r0, r1}
 800f8dc:	7bfb      	ldrb	r3, [r7, #15]
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3714      	adds	r7, #20
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bcb0      	pop	{r4, r5, r7}
 800f8e6:	4770      	bx	lr

0800f8e8 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>:
    SIMPLE_FUNC_IMPL(Attitude, Attitude, attitude)
 800f8e8:	b4b0      	push	{r4, r5, r7}
 800f8ea:	b085      	sub	sp, #20
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	73fb      	strb	r3, [r7, #15]
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	e9d3 343c 	ldrd	r3, r4, [r3, #240]	; 0xf0
 800f902:	42a2      	cmp	r2, r4
 800f904:	bf08      	it	eq
 800f906:	4299      	cmpeq	r1, r3
 800f908:	d001      	beq.n	800f90e <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE+0x26>
 800f90a:	2301      	movs	r3, #1
 800f90c:	73fb      	strb	r3, [r7, #15]
 800f90e:	683a      	ldr	r2, [r7, #0]
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	4615      	mov	r5, r2
 800f914:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800f918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f91a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f91c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f91e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f920:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f924:	e885 0003 	stmia.w	r5, {r0, r1}
 800f928:	7bfb      	ldrb	r3, [r7, #15]
 800f92a:	4618      	mov	r0, r3
 800f92c:	3714      	adds	r7, #20
 800f92e:	46bd      	mov	sp, r7
 800f930:	bcb0      	pop	{r4, r5, r7}
 800f932:	4770      	bx	lr

0800f934 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>:

    SIMPLE_FUNC_IMPL(LocalPosition, LocalPosition, localPosition)

    SIMPLE_FUNC_IMPL(ModeFlag, ModeFlag, modeFlag)
 800f934:	b490      	push	{r4, r7}
 800f936:	b084      	sub	sp, #16
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
 800f93c:	6039      	str	r1, [r7, #0]
 800f93e:	2300      	movs	r3, #0
 800f940:	73fb      	strb	r3, [r7, #15]
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800f94e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f952:	42a2      	cmp	r2, r4
 800f954:	bf08      	it	eq
 800f956:	4299      	cmpeq	r1, r3
 800f958:	d001      	beq.n	800f95e <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE+0x2a>
 800f95a:	2301      	movs	r3, #1
 800f95c:	73fb      	strb	r3, [r7, #15]
 800f95e:	683a      	ldr	r2, [r7, #0]
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	4614      	mov	r4, r2
 800f964:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800f968:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f96a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f96e:	7bfb      	ldrb	r3, [r7, #15]
 800f970:	4618      	mov	r0, r3
 800f972:	3710      	adds	r7, #16
 800f974:	46bd      	mov	sp, r7
 800f976:	bc90      	pop	{r4, r7}
 800f978:	4770      	bx	lr

0800f97a <_ZN2FC6MsgBus11setMotorPWMERKNS_8MotorPWME>:

    SIMPLE_FUNC_IMPL(Health, Health, health)

    SIMPLE_FUNC_IMPL(MotorPWM, MotorPWM, motorPWM)
 800f97a:	b4b0      	push	{r4, r5, r7}
 800f97c:	b083      	sub	sp, #12
 800f97e:	af00      	add	r7, sp, #0
 800f980:	6078      	str	r0, [r7, #4]
 800f982:	6039      	str	r1, [r7, #0]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	683a      	ldr	r2, [r7, #0]
 800f988:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 800f98c:	4615      	mov	r5, r2
 800f98e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f992:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f996:	e884 0003 	stmia.w	r4, {r0, r1}
 800f99a:	bf00      	nop
 800f99c:	370c      	adds	r7, #12
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bcb0      	pop	{r4, r5, r7}
 800f9a2:	4770      	bx	lr

0800f9a4 <_ZN23px4_AlgorithmModelClass17setExternalInputsEPKNS_31ExtU_Second_att_control_codeb_TE>:
  ~px4_AlgorithmModelClass();

  // Root-level structure-based inputs set method

  // Root inports set method
  void setExternalInputs(const ExtU_Second_att_control_codeb_T
 800f9a4:	b4b0      	push	{r4, r5, r7}
 800f9a6:	b083      	sub	sp, #12
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	6039      	str	r1, [r7, #0]
    * pExtU_Second_att_control_codeb_T)
  {
    Second_att_control_codeblock__U = *pExtU_Second_att_control_codeb_T;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	683a      	ldr	r2, [r7, #0]
 800f9b2:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 800f9b6:	4615      	mov	r5, r2
 800f9b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f9ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f9bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f9be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f9c0:	682b      	ldr	r3, [r5, #0]
 800f9c2:	6023      	str	r3, [r4, #0]
  }
 800f9c4:	bf00      	nop
 800f9c6:	370c      	adds	r7, #12
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bcb0      	pop	{r4, r5, r7}
 800f9cc:	4770      	bx	lr

0800f9ce <_ZNK23px4_AlgorithmModelClass18getExternalOutputsEv>:

  // Root-level structure-based outputs get method

  // Root outports get method
  const px4_AlgorithmModelClass::ExtY_Second_att_control_codeb_T
    & getExternalOutputs() const
 800f9ce:	b480      	push	{r7}
 800f9d0:	b083      	sub	sp, #12
 800f9d2:	af00      	add	r7, sp, #0
 800f9d4:	6078      	str	r0, [r7, #4]
  {
    return Second_att_control_codeblock__Y;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
  }
 800f9dc:	4618      	mov	r0, r3
 800f9de:	370c      	adds	r7, #12
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e6:	4770      	bx	lr

0800f9e8 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800f9e8:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800f9ec:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800f9ee:	4b0e      	ldr	r3, [pc, #56]	; (800fa28 <_ZL11microsecondv+0x40>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	4619      	mov	r1, r3
 800f9f4:	f04f 0200 	mov.w	r2, #0
 800f9f8:	f04f 0b00 	mov.w	fp, #0
 800f9fc:	f04f 0c00 	mov.w	ip, #0
 800fa00:	468c      	mov	ip, r1
 800fa02:	f04f 0b00 	mov.w	fp, #0
 800fa06:	4a09      	ldr	r2, [pc, #36]	; (800fa2c <_ZL11microsecondv+0x44>)
 800fa08:	6812      	ldr	r2, [r2, #0]
 800fa0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fa0c:	4611      	mov	r1, r2
 800fa0e:	f04f 0200 	mov.w	r2, #0
 800fa12:	ea4b 0301 	orr.w	r3, fp, r1
 800fa16:	ea4c 0402 	orr.w	r4, ip, r2
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	4621      	mov	r1, r4
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800fa24:	4770      	bx	lr
 800fa26:	bf00      	nop
 800fa28:	20000ac4 	.word	0x20000ac4
 800fa2c:	20010f68 	.word	0x20010f68

0800fa30 <_ZN2FC24ModuleAttitudeControllerC1Ev>:
#include "Usec.h"
#include "printf.h"

namespace FC {

ModuleAttitudeController::ModuleAttitudeController(){}
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7f5 fa2e 	bl	8004e9c <_ZN23px4_AlgorithmModelClassC1Ev>
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	4618      	mov	r0, r3
 800fa44:	3708      	adds	r7, #8
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
	...

0800fa4c <_ZN2FC24ModuleAttitudeController7oneStepEv>:

void ModuleAttitudeController::oneStep(){
 800fa4c:	b5b0      	push	{r4, r5, r7, lr}
 800fa4e:	b092      	sub	sp, #72	; 0x48
 800fa50:	af04      	add	r7, sp, #16
 800fa52:	6078      	str	r0, [r7, #4]
	msgBus.getModeFlag(&modeFlagSub);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	4840      	ldr	r0, [pc, #256]	; (800fb60 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x114>)
 800fa5e:	f7ff ff69 	bl	800f934 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>

	/* not armed */
	if(modeFlagSub.armMode != Command::Arm){
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800fa68:	2b07      	cmp	r3, #7
 800fa6a:	d012      	beq.n	800fa92 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x46>
		setMotor(1000, 1000, 1000, 1000, 1000, 1000);
 800fa6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fa70:	9302      	str	r3, [sp, #8]
 800fa72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fa76:	9301      	str	r3, [sp, #4]
 800fa78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fa7c:	9300      	str	r3, [sp, #0]
 800fa7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fa82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fa86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f000 f8ec 	bl	800fc68 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt>
 800fa90:	e062      	b.n	800fb58 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x10c>
//		armFlag = true;
//		initialize();
//	}

	/* manual control */
	if(modeFlagSub.flightMode == Command::ControlAttitude){
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d103      	bne.n	800faa4 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x58>
		setFromRC();
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f000 f88b 	bl	800fbb8 <_ZN2FC24ModuleAttitudeController9setFromRCEv>
 800faa2:	e002      	b.n	800faaa <_ZN2FC24ModuleAttitudeController7oneStepEv+0x5e>
	}
	/* position control */
	else{
		setFromPositionController();
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f000 f85d 	bl	800fb64 <_ZN2FC24ModuleAttitudeController25setFromPositionControllerEv>
	}

	ExtU_Second_att_control_codeb_T input;
	input.set_pitch = targetPitch;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800fab0:	633b      	str	r3, [r7, #48]	; 0x30
	input.set_roll = targetRoll;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800fab8:	62fb      	str	r3, [r7, #44]	; 0x2c
	input.set_yaw = targetYawRate;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800fac0:	637b      	str	r3, [r7, #52]	; 0x34
	input.set_thrust = targetThrottle;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800fac8:	62bb      	str	r3, [r7, #40]	; 0x28

	msgBus.getAttitude(&attitudeSub);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800fad0:	4619      	mov	r1, r3
 800fad2:	4823      	ldr	r0, [pc, #140]	; (800fb60 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x114>)
 800fad4:	f7ff ff08 	bl	800f8e8 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
	msgBus.getBodyAngularVelocity(&bodyAngularVelocitySub);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800fade:	4619      	mov	r1, r3
 800fae0:	481f      	ldr	r0, [pc, #124]	; (800fb60 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x114>)
 800fae2:	f7fd fd26 	bl	800d532 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>

	input.Roll = attitudeSub.roll;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800faec:	617b      	str	r3, [r7, #20]
	input.Pitch = attitudeSub.pitch;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800faf4:	61bb      	str	r3, [r7, #24]
	input.p = bodyAngularVelocitySub.xyz[0];
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800fafc:	61fb      	str	r3, [r7, #28]
	input.q = bodyAngularVelocitySub.xyz[1];
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800fb04:	623b      	str	r3, [r7, #32]
	input.r = bodyAngularVelocitySub.xyz[2];
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800fb0c:	627b      	str	r3, [r7, #36]	; 0x24

	/* matlab codegen function */
	setExternalInputs(&input);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f107 0214 	add.w	r2, r7, #20
 800fb14:	4611      	mov	r1, r2
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7ff ff44 	bl	800f9a4 <_ZN23px4_AlgorithmModelClass17setExternalInputsEPKNS_31ExtU_Second_att_control_codeb_TE>
	step();
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f7f4 fc34 	bl	800438c <_ZN23px4_AlgorithmModelClass4stepEv>
	ExtY_Second_att_control_codeb_T output = getExternalOutputs();
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7ff ff51 	bl	800f9ce <_ZNK23px4_AlgorithmModelClass18getExternalOutputsEv>
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	f107 0308 	add.w	r3, r7, #8
 800fb32:	6810      	ldr	r0, [r2, #0]
 800fb34:	6851      	ldr	r1, [r2, #4]
 800fb36:	6892      	ldr	r2, [r2, #8]
 800fb38:	c307      	stmia	r3!, {r0, r1, r2}

	/* set motor pwm */
	setMotor((uint16_t)output.PWM_OUT[0],
 800fb3a:	8938      	ldrh	r0, [r7, #8]
			 (uint16_t)output.PWM_OUT[1],
 800fb3c:	897c      	ldrh	r4, [r7, #10]
			 (uint16_t)output.PWM_OUT[2],
 800fb3e:	89bd      	ldrh	r5, [r7, #12]
			 (uint16_t)output.PWM_OUT[3],
 800fb40:	89fb      	ldrh	r3, [r7, #14]
			 (uint16_t)output.PWM_OUT[4],
 800fb42:	8a3a      	ldrh	r2, [r7, #16]
			 (uint16_t)output.PWM_OUT[5]);
 800fb44:	8a79      	ldrh	r1, [r7, #18]
	setMotor((uint16_t)output.PWM_OUT[0],
 800fb46:	9102      	str	r1, [sp, #8]
 800fb48:	9201      	str	r2, [sp, #4]
 800fb4a:	9300      	str	r3, [sp, #0]
 800fb4c:	462b      	mov	r3, r5
 800fb4e:	4622      	mov	r2, r4
 800fb50:	4601      	mov	r1, r0
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f000 f888 	bl	800fc68 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt>
}
 800fb58:	3738      	adds	r7, #56	; 0x38
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bdb0      	pop	{r4, r5, r7, pc}
 800fb5e:	bf00      	nop
 800fb60:	20000b98 	.word	0x20000b98

0800fb64 <_ZN2FC24ModuleAttitudeController25setFromPositionControllerEv>:

void ModuleAttitudeController::setFromPositionController(){
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
	msgBus.getVehicleAttitueSP(&vehicleAttitudeSpSub);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800fb72:	4619      	mov	r1, r3
 800fb74:	480f      	ldr	r0, [pc, #60]	; (800fbb4 <_ZN2FC24ModuleAttitudeController25setFromPositionControllerEv+0x50>)
 800fb76:	f7ff fe93 	bl	800f8a0 <_ZN2FC6MsgBus19getVehicleAttitueSPEPNS_16VehicleAttitueSPE>
	targetRoll = vehicleAttitudeSpSub.roll;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	targetPitch = vehicleAttitudeSpSub.pitch;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	targetYawRate = vehicleAttitudeSpSub.yawRate;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	targetThrottle = vehicleAttitudeSpSub.throttle;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
}
 800fbaa:	bf00      	nop
 800fbac:	3708      	adds	r7, #8
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	20000b98 	.word	0x20000b98

0800fbb8 <_ZN2FC24ModuleAttitudeController9setFromRCEv>:

void ModuleAttitudeController::setFromRC(){
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
	msgBus.getController(&controllerSub);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	4824      	ldr	r0, [pc, #144]	; (800fc5c <_ZN2FC24ModuleAttitudeController9setFromRCEv+0xa4>)
 800fbca:	f7ff fe49 	bl	800f860 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>
	targetRoll = (float)(controllerSub.roll - 1500)/500.0;				/* map 1000~2000 to -1 ~ 1 */
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 800fbd4:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800fbd8:	ee07 3a90 	vmov	s15, r3
 800fbdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fbe0:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800fc60 <_ZN2FC24ModuleAttitudeController9setFromRCEv+0xa8>
 800fbe4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	edc3 7a6a 	vstr	s15, [r3, #424]	; 0x1a8
	targetPitch = -(float)(controllerSub.pitch - 1500)/500.0;			/* map 1000~2000 to -1 ~ 1 */
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 800fbf4:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800fbf8:	ee07 3a90 	vmov	s15, r3
 800fbfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc00:	eeb1 7a67 	vneg.f32	s14, s15
 800fc04:	eddf 6a16 	vldr	s13, [pc, #88]	; 800fc60 <_ZN2FC24ModuleAttitudeController9setFromRCEv+0xa8>
 800fc08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	edc3 7a6b 	vstr	s15, [r3, #428]	; 0x1ac
	targetYawRate = (float)(controllerSub.yaw - 1500)/500.0;			/* map 1000~2000 to -1 ~ 1 */
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 800fc18:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800fc1c:	ee07 3a90 	vmov	s15, r3
 800fc20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fc24:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800fc60 <_ZN2FC24ModuleAttitudeController9setFromRCEv+0xa8>
 800fc28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	edc3 7a6c 	vstr	s15, [r3, #432]	; 0x1b0
	targetThrottle = (float)(controllerSub.throttle - 1000)/1000.0;		/* map 1000~2000 to 0 ~ 1 */
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f8b3 3176 	ldrh.w	r3, [r3, #374]	; 0x176
 800fc38:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800fc3c:	ee07 3a90 	vmov	s15, r3
 800fc40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fc44:	eddf 6a07 	vldr	s13, [pc, #28]	; 800fc64 <_ZN2FC24ModuleAttitudeController9setFromRCEv+0xac>
 800fc48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
}
 800fc52:	bf00      	nop
 800fc54:	3708      	adds	r7, #8
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}
 800fc5a:	bf00      	nop
 800fc5c:	20000b98 	.word	0x20000b98
 800fc60:	43fa0000 	.word	0x43fa0000
 800fc64:	447a0000 	.word	0x447a0000

0800fc68 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt>:

void ModuleAttitudeController::setMotor(uint16_t pwm1, uint16_t pwm2, uint16_t pwm3, uint16_t pwm4, uint16_t pwm5, uint16_t pwm6){
 800fc68:	b590      	push	{r4, r7, lr}
 800fc6a:	b085      	sub	sp, #20
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	60f8      	str	r0, [r7, #12]
 800fc70:	4608      	mov	r0, r1
 800fc72:	4611      	mov	r1, r2
 800fc74:	461a      	mov	r2, r3
 800fc76:	4603      	mov	r3, r0
 800fc78:	817b      	strh	r3, [r7, #10]
 800fc7a:	460b      	mov	r3, r1
 800fc7c:	813b      	strh	r3, [r7, #8]
 800fc7e:	4613      	mov	r3, r2
 800fc80:	80fb      	strh	r3, [r7, #6]
	m1.setPWM(pwm1);
 800fc82:	897b      	ldrh	r3, [r7, #10]
 800fc84:	4619      	mov	r1, r3
 800fc86:	4824      	ldr	r0, [pc, #144]	; (800fd18 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb0>)
 800fc88:	f7f1 fb10 	bl	80012ac <_ZN2FC5Motor6setPWMEt>
	m2.setPWM(pwm2);
 800fc8c:	893b      	ldrh	r3, [r7, #8]
 800fc8e:	4619      	mov	r1, r3
 800fc90:	4822      	ldr	r0, [pc, #136]	; (800fd1c <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb4>)
 800fc92:	f7f1 fb0b 	bl	80012ac <_ZN2FC5Motor6setPWMEt>
	m3.setPWM(pwm3);
 800fc96:	88fb      	ldrh	r3, [r7, #6]
 800fc98:	4619      	mov	r1, r3
 800fc9a:	4821      	ldr	r0, [pc, #132]	; (800fd20 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb8>)
 800fc9c:	f7f1 fb06 	bl	80012ac <_ZN2FC5Motor6setPWMEt>
	m4.setPWM(pwm4);
 800fca0:	8c3b      	ldrh	r3, [r7, #32]
 800fca2:	4619      	mov	r1, r3
 800fca4:	481f      	ldr	r0, [pc, #124]	; (800fd24 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xbc>)
 800fca6:	f7f1 fb01 	bl	80012ac <_ZN2FC5Motor6setPWMEt>
	m5.setPWM(pwm5);
 800fcaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcac:	4619      	mov	r1, r3
 800fcae:	481e      	ldr	r0, [pc, #120]	; (800fd28 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc0>)
 800fcb0:	f7f1 fafc 	bl	80012ac <_ZN2FC5Motor6setPWMEt>
	m6.setPWM(pwm6);
 800fcb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fcb6:	4619      	mov	r1, r3
 800fcb8:	481c      	ldr	r0, [pc, #112]	; (800fd2c <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc4>)
 800fcba:	f7f1 faf7 	bl	80012ac <_ZN2FC5Motor6setPWMEt>

	motorPwmSub.timestamp = microsecond();
 800fcbe:	f7ff fe93 	bl	800f9e8 <_ZL11microsecondv>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	460c      	mov	r4, r1
 800fcc6:	68fa      	ldr	r2, [r7, #12]
 800fcc8:	f502 72c8 	add.w	r2, r2, #400	; 0x190
 800fccc:	e9c2 3400 	strd	r3, r4, [r2]
	motorPwmSub.m1 = pwm1;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	897a      	ldrh	r2, [r7, #10]
 800fcd4:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
	motorPwmSub.m2 = pwm2;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	893a      	ldrh	r2, [r7, #8]
 800fcdc:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
	motorPwmSub.m3 = pwm3;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	88fa      	ldrh	r2, [r7, #6]
 800fce4:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	motorPwmSub.m4 = pwm4;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	8c3a      	ldrh	r2, [r7, #32]
 800fcec:	f8a3 219e 	strh.w	r2, [r3, #414]	; 0x19e
	motorPwmSub.m5 = pwm5;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fcf4:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
	motorPwmSub.m6 = pwm6;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800fcfc:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2

	msgBus.setMotorPWM(motorPwmSub);
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fd06:	4619      	mov	r1, r3
 800fd08:	4809      	ldr	r0, [pc, #36]	; (800fd30 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc8>)
 800fd0a:	f7ff fe36 	bl	800f97a <_ZN2FC6MsgBus11setMotorPWMERKNS_8MotorPWME>
}
 800fd0e:	bf00      	nop
 800fd10:	3714      	adds	r7, #20
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd90      	pop	{r4, r7, pc}
 800fd16:	bf00      	nop
 800fd18:	2000087c 	.word	0x2000087c
 800fd1c:	20000888 	.word	0x20000888
 800fd20:	20000894 	.word	0x20000894
 800fd24:	200008a0 	.word	0x200008a0
 800fd28:	200008ac 	.word	0x200008ac
 800fd2c:	200008b8 	.word	0x200008b8
 800fd30:	20000b98 	.word	0x20000b98

0800fd34 <_ZN2FC12ModuleBuzzer4mainEv>:
	.mq_mem = &Buzzer_QueueBuffer,
	.mq_size = sizeof(Buzzer_QueueBuffer)
};


void ModuleBuzzer::main() {
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b08e      	sub	sp, #56	; 0x38
 800fd38:	af00      	add	r7, sp, #0
	 *  TIM4, TIM_CHANNEL_1
	 *  PCLK 100Mhz
	 *  Prescaler 0
	 *  Counter Period 10-1
	 */
	ModuleBuzzer buzzer(&htim4, TIM_CHANNEL_1, 100000000);
 800fd3a:	1d38      	adds	r0, r7, #4
 800fd3c:	4b12      	ldr	r3, [pc, #72]	; (800fd88 <_ZN2FC12ModuleBuzzer4mainEv+0x54>)
 800fd3e:	2200      	movs	r2, #0
 800fd40:	4912      	ldr	r1, [pc, #72]	; (800fd8c <_ZN2FC12ModuleBuzzer4mainEv+0x58>)
 800fd42:	f000 f827 	bl	800fd94 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm>

	BuzzerCommand rcvResult;
	while(1){
		if(osMessageQueueGet(Buzzer_QueueHandle, (void*)&rcvResult, NULL, osWaitForever) == osOK){
 800fd46:	4b12      	ldr	r3, [pc, #72]	; (800fd90 <_ZN2FC12ModuleBuzzer4mainEv+0x5c>)
 800fd48:	6818      	ldr	r0, [r3, #0]
 800fd4a:	4639      	mov	r1, r7
 800fd4c:	f04f 33ff 	mov.w	r3, #4294967295
 800fd50:	2200      	movs	r2, #0
 800fd52:	f011 fc5b 	bl	802160c <osMessageQueueGet>
 800fd56:	4603      	mov	r3, r0
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	bf0c      	ite	eq
 800fd5c:	2301      	moveq	r3, #1
 800fd5e:	2300      	movne	r3, #0
 800fd60:	b2db      	uxtb	r3, r3
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d006      	beq.n	800fd74 <_ZN2FC12ModuleBuzzer4mainEv+0x40>
			buzzer.commandHandler(rcvResult);
 800fd66:	683a      	ldr	r2, [r7, #0]
 800fd68:	1d3b      	adds	r3, r7, #4
 800fd6a:	4611      	mov	r1, r2
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f000 f881 	bl	800fe74 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE>
 800fd72:	e004      	b.n	800fd7e <_ZN2FC12ModuleBuzzer4mainEv+0x4a>
//			osDelay(10);
		}
		else{
			osMessageQueueReset(Buzzer_QueueHandle);
 800fd74:	4b06      	ldr	r3, [pc, #24]	; (800fd90 <_ZN2FC12ModuleBuzzer4mainEv+0x5c>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f011 fd01 	bl	8021780 <osMessageQueueReset>
		}
		osDelay(10);
 800fd7e:	200a      	movs	r0, #10
 800fd80:	f011 f94a 	bl	8021018 <osDelay>
		if(osMessageQueueGet(Buzzer_QueueHandle, (void*)&rcvResult, NULL, osWaitForever) == osOK){
 800fd84:	e7df      	b.n	800fd46 <_ZN2FC12ModuleBuzzer4mainEv+0x12>
 800fd86:	bf00      	nop
 800fd88:	05f5e100 	.word	0x05f5e100
 800fd8c:	20010e68 	.word	0x20010e68
 800fd90:	20000ac8 	.word	0x20000ac8

0800fd94 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm>:
	}
}

ModuleBuzzer::ModuleBuzzer(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t CLK)
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b084      	sub	sp, #16
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	60f8      	str	r0, [r7, #12]
 800fd9c:	60b9      	str	r1, [r7, #8]
 800fd9e:	607a      	str	r2, [r7, #4]
 800fda0:	603b      	str	r3, [r7, #0]
	: A{Z1, Z2, Z5, Z6}
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	330c      	adds	r3, #12
 800fda6:	2228      	movs	r2, #40	; 0x28
 800fda8:	2100      	movs	r1, #0
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f018 fcdf 	bl	802876e <memset>
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	4a17      	ldr	r2, [pc, #92]	; (800fe10 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x7c>)
 800fdb4:	60da      	str	r2, [r3, #12]
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	4a16      	ldr	r2, [pc, #88]	; (800fe14 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x80>)
 800fdba:	611a      	str	r2, [r3, #16]
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	4a16      	ldr	r2, [pc, #88]	; (800fe18 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x84>)
 800fdc0:	615a      	str	r2, [r3, #20]
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	4a15      	ldr	r2, [pc, #84]	; (800fe1c <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x88>)
 800fdc6:	619a      	str	r2, [r3, #24]
{
	  /* creation of Buzzer_Queue */
	  Buzzer_QueueHandle = osMessageQueueNew (3, sizeof(BuzzerCommand), &Buzzer_Queue_attributes);
 800fdc8:	4a15      	ldr	r2, [pc, #84]	; (800fe20 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x8c>)
 800fdca:	2104      	movs	r1, #4
 800fdcc:	2003      	movs	r0, #3
 800fdce:	f011 fb23 	bl	8021418 <osMessageQueueNew>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	4b13      	ldr	r3, [pc, #76]	; (800fe24 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x90>)
 800fdd6:	601a      	str	r2, [r3, #0]

	  this->htim = htim;
 800fdd8:	68ba      	ldr	r2, [r7, #8]
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	601a      	str	r2, [r3, #0]
	  this->Channel = Channel;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	687a      	ldr	r2, [r7, #4]
 800fde2:	605a      	str	r2, [r3, #4]
	  this->CLK = CLK/10;		/* 10 : AutoReload Register+1 */
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	4a10      	ldr	r2, [pc, #64]	; (800fe28 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x94>)
 800fde8:	fba2 2303 	umull	r2, r3, r2, r3
 800fdec:	08da      	lsrs	r2, r3, #3
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_PRESCALER(htim, this->CLK / 4000);
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	689a      	ldr	r2, [r3, #8]
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	490c      	ldr	r1, [pc, #48]	; (800fe2c <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x98>)
 800fdfc:	fba1 1202 	umull	r1, r2, r1, r2
 800fe00:	0a12      	lsrs	r2, r2, #8
 800fe02:	629a      	str	r2, [r3, #40]	; 0x28
}
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	4618      	mov	r0, r3
 800fe08:	3710      	adds	r7, #16
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}
 800fe0e:	bf00      	nop
 800fe10:	0003f7a0 	.word	0x0003f7a0
 800fe14:	00042e50 	.word	0x00042e50
 800fe18:	00045948 	.word	0x00045948
 800fe1c:	0005cc60 	.word	0x0005cc60
 800fe20:	0802d8c8 	.word	0x0802d8c8
 800fe24:	20000ac8 	.word	0x20000ac8
 800fe28:	cccccccd 	.word	0xcccccccd
 800fe2c:	10624dd3 	.word	0x10624dd3

0800fe30 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>:


bool ModuleBuzzer::sendCommand(BuzzerCommand cmd){
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b082      	sub	sp, #8
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
	if(osMessageQueueGetSpace(Buzzer_QueueHandle) != 0){
 800fe38:	4b0d      	ldr	r3, [pc, #52]	; (800fe70 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x40>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f011 fc57 	bl	80216f0 <osMessageQueueGetSpace>
 800fe42:	4603      	mov	r3, r0
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	bf14      	ite	ne
 800fe48:	2301      	movne	r3, #1
 800fe4a:	2300      	moveq	r3, #0
 800fe4c:	b2db      	uxtb	r3, r3
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d008      	beq.n	800fe64 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x34>
		osMessageQueuePut(Buzzer_QueueHandle, (void*)&cmd, 0, 0);
 800fe52:	4b07      	ldr	r3, [pc, #28]	; (800fe70 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x40>)
 800fe54:	6818      	ldr	r0, [r3, #0]
 800fe56:	1d39      	adds	r1, r7, #4
 800fe58:	2300      	movs	r3, #0
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	f011 fb62 	bl	8021524 <osMessageQueuePut>
		return true;
 800fe60:	2301      	movs	r3, #1
 800fe62:	e000      	b.n	800fe66 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x36>
	}
	return false;
 800fe64:	2300      	movs	r3, #0
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3708      	adds	r7, #8
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	20000ac8 	.word	0x20000ac8

0800fe74 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE>:

void ModuleBuzzer::commandHandler(BuzzerCommand result){
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	6039      	str	r1, [r7, #0]
	switch(result){
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	2b03      	cmp	r3, #3
 800fe82:	d81b      	bhi.n	800febc <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
 800fe84:	a201      	add	r2, pc, #4	; (adr r2, 800fe8c <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x18>)
 800fe86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe8a:	bf00      	nop
 800fe8c:	0800fe9d 	.word	0x0800fe9d
 800fe90:	0800fea5 	.word	0x0800fea5
 800fe94:	0800fead 	.word	0x0800fead
 800fe98:	0800feb5 	.word	0x0800feb5
	case BuzzerCommand::Armed:
		armed();
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	f000 f811 	bl	800fec4 <_ZN2FC12ModuleBuzzer5armedEv>
		break;
 800fea2:	e00b      	b.n	800febc <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
	case BuzzerCommand::DisArmed:
		disarmed();
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f000 f817 	bl	800fed8 <_ZN2FC12ModuleBuzzer8disarmedEv>
		break;
 800feaa:	e007      	b.n	800febc <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
	case BuzzerCommand::Success:
		success();
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f000 f827 	bl	800ff00 <_ZN2FC12ModuleBuzzer7successEv>
		break;
 800feb2:	e003      	b.n	800febc <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
	case BuzzerCommand::Denied:
		denied();
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f000 f819 	bl	800feec <_ZN2FC12ModuleBuzzer6deniedEv>
		break;
 800feba:	bf00      	nop
	}
}
 800febc:	bf00      	nop
 800febe:	3708      	adds	r7, #8
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <_ZN2FC12ModuleBuzzer5armedEv>:

void ModuleBuzzer::armed(){
 800fec4:	b480      	push	{r7}
 800fec6:	b083      	sub	sp, #12
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
	//TODO armed sound
}
 800fecc:	bf00      	nop
 800fece:	370c      	adds	r7, #12
 800fed0:	46bd      	mov	sp, r7
 800fed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed6:	4770      	bx	lr

0800fed8 <_ZN2FC12ModuleBuzzer8disarmedEv>:

void ModuleBuzzer::disarmed(){
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
	//TODO disarmed sound
}
 800fee0:	bf00      	nop
 800fee2:	370c      	adds	r7, #12
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr

0800feec <_ZN2FC12ModuleBuzzer6deniedEv>:

void ModuleBuzzer::denied(){
 800feec:	b480      	push	{r7}
 800feee:	b083      	sub	sp, #12
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
	//TODO denied sound
}
 800fef4:	bf00      	nop
 800fef6:	370c      	adds	r7, #12
 800fef8:	46bd      	mov	sp, r7
 800fefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefe:	4770      	bx	lr

0800ff00 <_ZN2FC12ModuleBuzzer7successEv>:

void ModuleBuzzer::success(){
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b082      	sub	sp, #8
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
//
//		/* Make each note sound and cut 1 mileecond */
//		HAL_TIM_PWM_Stop(htim, Channel);
//		osDelay(10);
//	}
	HAL_TIM_PWM_Start(htim, Channel);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681a      	ldr	r2, [r3, #0]
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	4619      	mov	r1, r3
 800ff12:	4610      	mov	r0, r2
 800ff14:	f00a fc9a 	bl	801a84c <HAL_TIM_PWM_Start>
	osDelay(2000);
 800ff18:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ff1c:	f011 f87c 	bl	8021018 <osDelay>
	HAL_TIM_PWM_Stop(htim, Channel);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681a      	ldr	r2, [r3, #0]
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	685b      	ldr	r3, [r3, #4]
 800ff28:	4619      	mov	r1, r3
 800ff2a:	4610      	mov	r0, r2
 800ff2c:	f00a fcc0 	bl	801a8b0 <HAL_TIM_PWM_Stop>
}
 800ff30:	bf00      	nop
 800ff32:	3708      	adds	r7, #8
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}

0800ff38 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>:
    SIMPLE_FUNC_IMPL(ModeFlag, ModeFlag, modeFlag)
 800ff38:	b490      	push	{r4, r7}
 800ff3a:	b082      	sub	sp, #8
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
 800ff40:	6039      	str	r1, [r7, #0]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	683a      	ldr	r2, [r7, #0]
 800ff46:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 800ff4a:	4613      	mov	r3, r2
 800ff4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ff52:	bf00      	nop
 800ff54:	3708      	adds	r7, #8
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bc90      	pop	{r4, r7}
 800ff5a:	4770      	bx	lr

0800ff5c <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800ff5c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800ff60:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800ff62:	4b0e      	ldr	r3, [pc, #56]	; (800ff9c <_ZL11microsecondv+0x40>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	4619      	mov	r1, r3
 800ff68:	f04f 0200 	mov.w	r2, #0
 800ff6c:	f04f 0b00 	mov.w	fp, #0
 800ff70:	f04f 0c00 	mov.w	ip, #0
 800ff74:	468c      	mov	ip, r1
 800ff76:	f04f 0b00 	mov.w	fp, #0
 800ff7a:	4a09      	ldr	r2, [pc, #36]	; (800ffa0 <_ZL11microsecondv+0x44>)
 800ff7c:	6812      	ldr	r2, [r2, #0]
 800ff7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ff80:	4611      	mov	r1, r2
 800ff82:	f04f 0200 	mov.w	r2, #0
 800ff86:	ea4b 0301 	orr.w	r3, fp, r1
 800ff8a:	ea4c 0402 	orr.w	r4, ip, r2
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	4621      	mov	r1, r4
 800ff92:	46bd      	mov	sp, r7
 800ff94:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800ff98:	4770      	bx	lr
 800ff9a:	bf00      	nop
 800ff9c:	20000b28 	.word	0x20000b28
 800ffa0:	20010f68 	.word	0x20010f68

0800ffa4 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>:
		}
	}

	void oneStep();

	static inline void setSignal(enum PcSignal signal){
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b082      	sub	sp, #8
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	4603      	mov	r3, r0
 800ffac:	71fb      	strb	r3, [r7, #7]
		osThreadFlagsSet(PC_TaskHandle, signal);
 800ffae:	4b05      	ldr	r3, [pc, #20]	; (800ffc4 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE+0x20>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	79fa      	ldrb	r2, [r7, #7]
 800ffb4:	4611      	mov	r1, r2
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f010 feb4 	bl	8020d24 <osThreadFlagsSet>
	}
 800ffbc:	bf00      	nop
 800ffbe:	3708      	adds	r7, #8
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}
 800ffc4:	2000df10 	.word	0x2000df10

0800ffc8 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE>:
		}
	}

	void oneStep();

	static inline void setSignal(enum AcSignal signal){
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	4603      	mov	r3, r0
 800ffd0:	71fb      	strb	r3, [r7, #7]
		osThreadFlagsSet(AC_TaskHandle, AC_fromAHRS);
 800ffd2:	4b05      	ldr	r3, [pc, #20]	; (800ffe8 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE+0x20>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	2101      	movs	r1, #1
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f010 fea3 	bl	8020d24 <osThreadFlagsSet>
	}
 800ffde:	bf00      	nop
 800ffe0:	3708      	adds	r7, #8
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}
 800ffe6:	bf00      	nop
 800ffe8:	2000deb0 	.word	0x2000deb0

0800ffec <_ZN2FC15ModuleCommanderC1Ev>:
  .cb_size = sizeof(Commander_QueueControlBlock),
  .mq_mem = &Commander_QueueBuffer,
  .mq_size = sizeof(Commander_QueueBuffer)
};

ModuleCommander::ModuleCommander(){
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b082      	sub	sp, #8
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	461a      	mov	r2, r3
 800fff8:	2300      	movs	r3, #0
 800fffa:	6013      	str	r3, [r2, #0]
 800fffc:	6053      	str	r3, [r2, #4]
 800fffe:	6093      	str	r3, [r2, #8]
 8010000:	60d3      	str	r3, [r2, #12]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	3310      	adds	r3, #16
 8010006:	2220      	movs	r2, #32
 8010008:	2100      	movs	r1, #0
 801000a:	4618      	mov	r0, r3
 801000c:	f018 fbaf 	bl	802876e <memset>
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	3330      	adds	r3, #48	; 0x30
 8010014:	2200      	movs	r2, #0
 8010016:	601a      	str	r2, [r3, #0]
 8010018:	605a      	str	r2, [r3, #4]
 801001a:	609a      	str	r2, [r3, #8]
 801001c:	60da      	str	r2, [r3, #12]
	  /* creation of Command_Queue */
	  Commander_QueueHandle = osMessageQueueNew (3, sizeof(Command), &Commander_Queue_attributes);
 801001e:	4a06      	ldr	r2, [pc, #24]	; (8010038 <_ZN2FC15ModuleCommanderC1Ev+0x4c>)
 8010020:	2104      	movs	r1, #4
 8010022:	2003      	movs	r0, #3
 8010024:	f011 f9f8 	bl	8021418 <osMessageQueueNew>
 8010028:	4602      	mov	r2, r0
 801002a:	4b04      	ldr	r3, [pc, #16]	; (801003c <_ZN2FC15ModuleCommanderC1Ev+0x50>)
 801002c:	601a      	str	r2, [r3, #0]
}
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	4618      	mov	r0, r3
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	0802d8e0 	.word	0x0802d8e0
 801003c:	20000b2c 	.word	0x20000b2c

08010040 <_ZN2FC15ModuleCommander4mainEv>:

void ModuleCommander::main(){
 8010040:	b580      	push	{r7, lr}
 8010042:	b092      	sub	sp, #72	; 0x48
 8010044:	af00      	add	r7, sp, #0
	ModuleCommander moduleCommander;
 8010046:	f107 0308 	add.w	r3, r7, #8
 801004a:	4618      	mov	r0, r3
 801004c:	f7ff ffce 	bl	800ffec <_ZN2FC15ModuleCommanderC1Ev>

	osDelay(1500);
 8010050:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8010054:	f010 ffe0 	bl	8021018 <osDelay>
	sensorAccel.setBias();
 8010058:	4814      	ldr	r0, [pc, #80]	; (80100ac <_ZN2FC15ModuleCommander4mainEv+0x6c>)
 801005a:	f001 f887 	bl	801116c <_ZN2FC11SensorAccel7setBiasEv>
	sensorGyro.setBias();
 801005e:	4814      	ldr	r0, [pc, #80]	; (80100b0 <_ZN2FC15ModuleCommander4mainEv+0x70>)
 8010060:	f001 fcd4 	bl	8011a0c <_ZN2FC10SensorGyro7setBiasEv>
	sensorBaro.setSeaLevelPressure(26.0); /* inha univ. altitude */
 8010064:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
 8010068:	4812      	ldr	r0, [pc, #72]	; (80100b4 <_ZN2FC15ModuleCommander4mainEv+0x74>)
 801006a:	f001 fa7d 	bl	8011568 <_ZN2FC10SensorBaro19setSeaLevelPressureEf>
	sensorBaro.setRefAltitude();
 801006e:	4811      	ldr	r0, [pc, #68]	; (80100b4 <_ZN2FC15ModuleCommander4mainEv+0x74>)
 8010070:	f001 fa93 	bl	801159a <_ZN2FC10SensorBaro14setRefAltitudeEv>
	osDelay(500);
 8010074:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010078:	f010 ffce 	bl	8021018 <osDelay>

	while(1){
		Command rcvCommand;
		if(osMessageQueueGet(Commander_QueueHandle, (void*)&rcvCommand, NULL, osWaitForever) == osOK){
 801007c:	4b0e      	ldr	r3, [pc, #56]	; (80100b8 <_ZN2FC15ModuleCommander4mainEv+0x78>)
 801007e:	6818      	ldr	r0, [r3, #0]
 8010080:	1d39      	adds	r1, r7, #4
 8010082:	f04f 33ff 	mov.w	r3, #4294967295
 8010086:	2200      	movs	r2, #0
 8010088:	f011 fac0 	bl	802160c <osMessageQueueGet>
 801008c:	4603      	mov	r3, r0
 801008e:	2b00      	cmp	r3, #0
 8010090:	bf0c      	ite	eq
 8010092:	2301      	moveq	r3, #1
 8010094:	2300      	movne	r3, #0
 8010096:	b2db      	uxtb	r3, r3
 8010098:	2b00      	cmp	r3, #0
 801009a:	d0ef      	beq.n	801007c <_ZN2FC15ModuleCommander4mainEv+0x3c>
			moduleCommander.commandHandler(rcvCommand);
 801009c:	687a      	ldr	r2, [r7, #4]
 801009e:	f107 0308 	add.w	r3, r7, #8
 80100a2:	4611      	mov	r1, r2
 80100a4:	4618      	mov	r0, r3
 80100a6:	f000 f83d 	bl	8010124 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE>
		}
	}
 80100aa:	e7e7      	b.n	801007c <_ZN2FC15ModuleCommander4mainEv+0x3c>
 80100ac:	20000f78 	.word	0x20000f78
 80100b0:	20001058 	.word	0x20001058
 80100b4:	20000fb8 	.word	0x20000fb8
 80100b8:	20000b2c 	.word	0x20000b2c

080100bc <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>:
}

bool ModuleCommander::sendCommand(Command cmd){
 80100bc:	b580      	push	{r7, lr}
 80100be:	b082      	sub	sp, #8
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
	if(osMessageQueueGetSpace(Commander_QueueHandle) != 0){
 80100c4:	4b0d      	ldr	r3, [pc, #52]	; (80100fc <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x40>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	4618      	mov	r0, r3
 80100ca:	f011 fb11 	bl	80216f0 <osMessageQueueGetSpace>
 80100ce:	4603      	mov	r3, r0
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	bf14      	ite	ne
 80100d4:	2301      	movne	r3, #1
 80100d6:	2300      	moveq	r3, #0
 80100d8:	b2db      	uxtb	r3, r3
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d008      	beq.n	80100f0 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x34>
		osMessageQueuePut(Commander_QueueHandle, (void*)&cmd, 0, 0);
 80100de:	4b07      	ldr	r3, [pc, #28]	; (80100fc <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x40>)
 80100e0:	6818      	ldr	r0, [r3, #0]
 80100e2:	1d39      	adds	r1, r7, #4
 80100e4:	2300      	movs	r3, #0
 80100e6:	2200      	movs	r2, #0
 80100e8:	f011 fa1c 	bl	8021524 <osMessageQueuePut>
		return true;
 80100ec:	2301      	movs	r3, #1
 80100ee:	e000      	b.n	80100f2 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x36>
	}
	return false;
 80100f0:	2300      	movs	r3, #0
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	3708      	adds	r7, #8
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}
 80100fa:	bf00      	nop
 80100fc:	20000b2c 	.word	0x20000b2c

08010100 <_ZN2FC15ModuleCommander10sendSignalENS_9CmdSignalE>:

void ModuleCommander::sendSignal(enum CmdSignal signal){
 8010100:	b580      	push	{r7, lr}
 8010102:	b082      	sub	sp, #8
 8010104:	af00      	add	r7, sp, #0
 8010106:	4603      	mov	r3, r0
 8010108:	71fb      	strb	r3, [r7, #7]
	osThreadFlagsSet(Commander_TaskHandle, signal);
 801010a:	4b05      	ldr	r3, [pc, #20]	; (8010120 <_ZN2FC15ModuleCommander10sendSignalENS_9CmdSignalE+0x20>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	79fa      	ldrb	r2, [r7, #7]
 8010110:	4611      	mov	r1, r2
 8010112:	4618      	mov	r0, r3
 8010114:	f010 fe06 	bl	8020d24 <osThreadFlagsSet>
}
 8010118:	bf00      	nop
 801011a:	3708      	adds	r7, #8
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}
 8010120:	2000ca20 	.word	0x2000ca20

08010124 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE>:

bool ModuleCommander::commandHandler(Command cmd){
 8010124:	b580      	push	{r7, lr}
 8010126:	b082      	sub	sp, #8
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
 801012c:	6039      	str	r1, [r7, #0]
	switch(cmd){
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	2b09      	cmp	r3, #9
 8010132:	d844      	bhi.n	80101be <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x9a>
 8010134:	a201      	add	r2, pc, #4	; (adr r2, 801013c <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x18>)
 8010136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801013a:	bf00      	nop
 801013c:	08010165 	.word	0x08010165
 8010140:	0801016f 	.word	0x0801016f
 8010144:	08010179 	.word	0x08010179
 8010148:	08010183 	.word	0x08010183
 801014c:	0801018d 	.word	0x0801018d
 8010150:	08010197 	.word	0x08010197
 8010154:	080101bf 	.word	0x080101bf
 8010158:	080101a1 	.word	0x080101a1
 801015c:	080101ab 	.word	0x080101ab
 8010160:	080101b5 	.word	0x080101b5
	case Command::ControlAttitude:
		return toAttitude();
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f000 f82f 	bl	80101c8 <_ZN2FC15ModuleCommander10toAttitudeEv>
 801016a:	4603      	mov	r3, r0
 801016c:	e028      	b.n	80101c0 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x9c>
		break;
	case Command::ControlPosition:
		return toPosition();
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f000 f84c 	bl	801020c <_ZN2FC15ModuleCommander10toPositionEv>
 8010174:	4603      	mov	r3, r0
 8010176:	e023      	b.n	80101c0 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x9c>
		break;
	case Command::AutoWaypoint:
		return toWaypoint();
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f000 f87f 	bl	801027c <_ZN2FC15ModuleCommander10toWaypointEv>
 801017e:	4603      	mov	r3, r0
 8010180:	e01e      	b.n	80101c0 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x9c>
		break;
	case Command::AutoRTL:
		return toRTL();
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f000 f885 	bl	8010292 <_ZN2FC15ModuleCommander5toRTLEv>
 8010188:	4603      	mov	r3, r0
 801018a:	e019      	b.n	80101c0 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x9c>
		break;
	case Command::AutoTakeoff:
		return toTakeoff();
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f000 f88b 	bl	80102a8 <_ZN2FC15ModuleCommander9toTakeoffEv>
 8010192:	4603      	mov	r3, r0
 8010194:	e014      	b.n	80101c0 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x9c>
		break;
	case Command::AutoLand:
		return toLand();
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f000 f891 	bl	80102be <_ZN2FC15ModuleCommander6toLandEv>
 801019c:	4603      	mov	r3, r0
 801019e:	e00f      	b.n	80101c0 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x9c>
		break;

	case Command::Arm:
		return toArm();
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f000 f897 	bl	80102d4 <_ZN2FC15ModuleCommander5toArmEv>
 80101a6:	4603      	mov	r3, r0
 80101a8:	e00a      	b.n	80101c0 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x9c>
		break;
	case Command::DisArm:
		return toDisArm();
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f000 f8d6 	bl	801035c <_ZN2FC15ModuleCommander8toDisArmEv>
 80101b0:	4603      	mov	r3, r0
 80101b2:	e005      	b.n	80101c0 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x9c>
		break;

	case Command::MotorCalibration:
		return toMotorCalibration();
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f000 f8f3 	bl	80103a0 <_ZN2FC15ModuleCommander18toMotorCalibrationEv>
 80101ba:	4603      	mov	r3, r0
 80101bc:	e000      	b.n	80101c0 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x9c>
		break;
	}
	return false;
 80101be:	2300      	movs	r3, #0
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	3708      	adds	r7, #8
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}

080101c8 <_ZN2FC15ModuleCommander10toAttitudeEv>:

bool ModuleCommander::toAttitude(){
 80101c8:	b590      	push	{r4, r7, lr}
 80101ca:	b083      	sub	sp, #12
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
	 * check condition of attitude control
	 */


	/* change to attitude */
	modeFlagPub.timestamp = microsecond();
 80101d0:	f7ff fec4 	bl	800ff5c <_ZL11microsecondv>
 80101d4:	4603      	mov	r3, r0
 80101d6:	460c      	mov	r4, r1
 80101d8:	687a      	ldr	r2, [r7, #4]
 80101da:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	modeFlagPub.flightMode = Command::ControlAttitude;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2200      	movs	r2, #0
 80101e2:	63da      	str	r2, [r3, #60]	; 0x3c
	msgBus.setModeFlag(modeFlagPub);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	3330      	adds	r3, #48	; 0x30
 80101e8:	4619      	mov	r1, r3
 80101ea:	4807      	ldr	r0, [pc, #28]	; (8010208 <_ZN2FC15ModuleCommander10toAttitudeEv+0x40>)
 80101ec:	f7ff fea4 	bl	800ff38 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	stopTheOtherTask();
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f000 f90f 	bl	8010414 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 80101f6:	2002      	movs	r0, #2
 80101f8:	f7ff fe1a 	bl	800fe30 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
}
 80101fc:	bf00      	nop
 80101fe:	4618      	mov	r0, r3
 8010200:	370c      	adds	r7, #12
 8010202:	46bd      	mov	sp, r7
 8010204:	bd90      	pop	{r4, r7, pc}
 8010206:	bf00      	nop
 8010208:	20000b98 	.word	0x20000b98

0801020c <_ZN2FC15ModuleCommander10toPositionEv>:

bool ModuleCommander::toPosition(){
 801020c:	b590      	push	{r4, r7, lr}
 801020e:	b083      	sub	sp, #12
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
	//TODO check condition of position controller

	/* set position controller */
	ModulePositionController::setSignal(PC_start);
 8010214:	2002      	movs	r0, #2
 8010216:	f7ff fec5 	bl	800ffa4 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>
	if(!(osThreadFlagsWait(CMD_ACK, osFlagsWaitAny, 500) & CMD_ACK)){
 801021a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801021e:	2100      	movs	r1, #0
 8010220:	2001      	movs	r0, #1
 8010222:	f010 fe65 	bl	8020ef0 <osThreadFlagsWait>
 8010226:	4603      	mov	r3, r0
 8010228:	f003 0301 	and.w	r3, r3, #1
 801022c:	2b00      	cmp	r3, #0
 801022e:	bf0c      	ite	eq
 8010230:	2301      	moveq	r3, #1
 8010232:	2300      	movne	r3, #0
 8010234:	b2db      	uxtb	r3, r3
 8010236:	2b00      	cmp	r3, #0
 8010238:	d004      	beq.n	8010244 <_ZN2FC15ModuleCommander10toPositionEv+0x38>
		ModuleBuzzer::sendCommand(BuzzerCommand::Denied);
 801023a:	2003      	movs	r0, #3
 801023c:	f7ff fdf8 	bl	800fe30 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
		return false;
 8010240:	2300      	movs	r3, #0
 8010242:	e015      	b.n	8010270 <_ZN2FC15ModuleCommander10toPositionEv+0x64>
	}

	modeFlagPub.timestamp = microsecond();
 8010244:	f7ff fe8a 	bl	800ff5c <_ZL11microsecondv>
 8010248:	4603      	mov	r3, r0
 801024a:	460c      	mov	r4, r1
 801024c:	687a      	ldr	r2, [r7, #4]
 801024e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	modeFlagPub.flightMode = Command::ControlPosition;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	2201      	movs	r2, #1
 8010256:	63da      	str	r2, [r3, #60]	; 0x3c
	msgBus.setModeFlag(modeFlagPub);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	3330      	adds	r3, #48	; 0x30
 801025c:	4619      	mov	r1, r3
 801025e:	4806      	ldr	r0, [pc, #24]	; (8010278 <_ZN2FC15ModuleCommander10toPositionEv+0x6c>)
 8010260:	f7ff fe6a 	bl	800ff38 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	stopTheOtherTask();
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f000 f8d5 	bl	8010414 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 801026a:	2002      	movs	r0, #2
 801026c:	f7ff fde0 	bl	800fe30 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
}
 8010270:	4618      	mov	r0, r3
 8010272:	370c      	adds	r7, #12
 8010274:	46bd      	mov	sp, r7
 8010276:	bd90      	pop	{r4, r7, pc}
 8010278:	20000b98 	.word	0x20000b98

0801027c <_ZN2FC15ModuleCommander10toWaypointEv>:

bool ModuleCommander::toWaypoint(){
 801027c:	b480      	push	{r7}
 801027e:	b083      	sub	sp, #12
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
	//TODO change to waypoint autopilot
}
 8010284:	bf00      	nop
 8010286:	4618      	mov	r0, r3
 8010288:	370c      	adds	r7, #12
 801028a:	46bd      	mov	sp, r7
 801028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010290:	4770      	bx	lr

08010292 <_ZN2FC15ModuleCommander5toRTLEv>:

bool ModuleCommander::toRTL(){
 8010292:	b480      	push	{r7}
 8010294:	b083      	sub	sp, #12
 8010296:	af00      	add	r7, sp, #0
 8010298:	6078      	str	r0, [r7, #4]
	//TODO change to auto RTL
}
 801029a:	bf00      	nop
 801029c:	4618      	mov	r0, r3
 801029e:	370c      	adds	r7, #12
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr

080102a8 <_ZN2FC15ModuleCommander9toTakeoffEv>:
bool ModuleCommander::toTakeoff(){
 80102a8:	b480      	push	{r7}
 80102aa:	b083      	sub	sp, #12
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
	//TODO change to auto takeoff
}
 80102b0:	bf00      	nop
 80102b2:	4618      	mov	r0, r3
 80102b4:	370c      	adds	r7, #12
 80102b6:	46bd      	mov	sp, r7
 80102b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102bc:	4770      	bx	lr

080102be <_ZN2FC15ModuleCommander6toLandEv>:

bool ModuleCommander::toLand(){
 80102be:	b480      	push	{r7}
 80102c0:	b083      	sub	sp, #12
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	6078      	str	r0, [r7, #4]
	//TODO change to auto land
}
 80102c6:	bf00      	nop
 80102c8:	4618      	mov	r0, r3
 80102ca:	370c      	adds	r7, #12
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr

080102d4 <_ZN2FC15ModuleCommander5toArmEv>:

bool ModuleCommander::toArm(){
 80102d4:	b590      	push	{r4, r7, lr}
 80102d6:	b083      	sub	sp, #12
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
	//TODO check arm condition

	/* toArm condition */
	msgBus.getController(&controllerSub);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	4619      	mov	r1, r3
 80102e0:	481a      	ldr	r0, [pc, #104]	; (801034c <_ZN2FC15ModuleCommander5toArmEv+0x78>)
 80102e2:	f7ff fabd 	bl	800f860 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>
	if(controllerSub.throttle > 1050){
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	89db      	ldrh	r3, [r3, #14]
 80102ea:	f240 421a 	movw	r2, #1050	; 0x41a
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d904      	bls.n	80102fc <_ZN2FC15ModuleCommander5toArmEv+0x28>
		ModuleBuzzer::sendCommand(BuzzerCommand::Denied);
 80102f2:	2003      	movs	r0, #3
 80102f4:	f7ff fd9c 	bl	800fe30 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
		return false; /* can't arm */
 80102f8:	2300      	movs	r3, #0
 80102fa:	e022      	b.n	8010342 <_ZN2FC15ModuleCommander5toArmEv+0x6e>
	}

	/* arm initialize */
	sensorAccel.setBias();
 80102fc:	4814      	ldr	r0, [pc, #80]	; (8010350 <_ZN2FC15ModuleCommander5toArmEv+0x7c>)
 80102fe:	f000 ff35 	bl	801116c <_ZN2FC11SensorAccel7setBiasEv>
	sensorGyro.setBias();
 8010302:	4814      	ldr	r0, [pc, #80]	; (8010354 <_ZN2FC15ModuleCommander5toArmEv+0x80>)
 8010304:	f001 fb82 	bl	8011a0c <_ZN2FC10SensorGyro7setBiasEv>
	sensorBaro.setRefAltitude();
 8010308:	4813      	ldr	r0, [pc, #76]	; (8010358 <_ZN2FC15ModuleCommander5toArmEv+0x84>)
 801030a:	f001 f946 	bl	801159a <_ZN2FC10SensorBaro14setRefAltitudeEv>
	resetController();
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f000 f896 	bl	8010440 <_ZN2FC15ModuleCommander15resetControllerEv>
	osDelay(150);					/* wait sensor calibration */
 8010314:	2096      	movs	r0, #150	; 0x96
 8010316:	f010 fe7f 	bl	8021018 <osDelay>

	modeFlagPub.timestamp = microsecond();
 801031a:	f7ff fe1f 	bl	800ff5c <_ZL11microsecondv>
 801031e:	4603      	mov	r3, r0
 8010320:	460c      	mov	r4, r1
 8010322:	687a      	ldr	r2, [r7, #4]
 8010324:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	modeFlagPub.armMode = Command::Arm;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2207      	movs	r2, #7
 801032c:	639a      	str	r2, [r3, #56]	; 0x38
	msgBus.setModeFlag(modeFlagPub);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	3330      	adds	r3, #48	; 0x30
 8010332:	4619      	mov	r1, r3
 8010334:	4805      	ldr	r0, [pc, #20]	; (801034c <_ZN2FC15ModuleCommander5toArmEv+0x78>)
 8010336:	f7ff fdff 	bl	800ff38 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 801033a:	2002      	movs	r0, #2
 801033c:	f7ff fd78 	bl	800fe30 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
	return true;
 8010340:	2301      	movs	r3, #1
}
 8010342:	4618      	mov	r0, r3
 8010344:	370c      	adds	r7, #12
 8010346:	46bd      	mov	sp, r7
 8010348:	bd90      	pop	{r4, r7, pc}
 801034a:	bf00      	nop
 801034c:	20000b98 	.word	0x20000b98
 8010350:	20000f78 	.word	0x20000f78
 8010354:	20001058 	.word	0x20001058
 8010358:	20000fb8 	.word	0x20000fb8

0801035c <_ZN2FC15ModuleCommander8toDisArmEv>:

bool ModuleCommander::toDisArm(){
 801035c:	b590      	push	{r4, r7, lr}
 801035e:	b083      	sub	sp, #12
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
//	   pwm.m4 > DISARM_PWM && pwm.m5 > DISARM_PWM && pwm.m6 > DISARM_PWM){
//		/* can't disarm */
//
//	}

	modeFlagPub.timestamp = microsecond();
 8010364:	f7ff fdfa 	bl	800ff5c <_ZL11microsecondv>
 8010368:	4603      	mov	r3, r0
 801036a:	460c      	mov	r4, r1
 801036c:	687a      	ldr	r2, [r7, #4]
 801036e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	modeFlagPub.armMode = Command::DisArm;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2208      	movs	r2, #8
 8010376:	639a      	str	r2, [r3, #56]	; 0x38
	msgBus.setModeFlag(modeFlagPub);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	3330      	adds	r3, #48	; 0x30
 801037c:	4619      	mov	r1, r3
 801037e:	4807      	ldr	r0, [pc, #28]	; (801039c <_ZN2FC15ModuleCommander8toDisArmEv+0x40>)
 8010380:	f7ff fdda 	bl	800ff38 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	stopTheOtherTask();
 8010384:	6878      	ldr	r0, [r7, #4]
 8010386:	f000 f845 	bl	8010414 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 801038a:	2002      	movs	r0, #2
 801038c:	f7ff fd50 	bl	800fe30 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
	return true;
 8010390:	2301      	movs	r3, #1
}
 8010392:	4618      	mov	r0, r3
 8010394:	370c      	adds	r7, #12
 8010396:	46bd      	mov	sp, r7
 8010398:	bd90      	pop	{r4, r7, pc}
 801039a:	bf00      	nop
 801039c:	20000b98 	.word	0x20000b98

080103a0 <_ZN2FC15ModuleCommander18toMotorCalibrationEv>:

bool ModuleCommander::toMotorCalibration(){
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b086      	sub	sp, #24
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
	osKernelLock();
 80103a8:	f010 fbb6 	bl	8020b18 <osKernelLock>

	struct Controller ctl;

	while(1){
		msgBus.getController(&ctl);
 80103ac:	f107 0308 	add.w	r3, r7, #8
 80103b0:	4619      	mov	r1, r3
 80103b2:	4811      	ldr	r0, [pc, #68]	; (80103f8 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x58>)
 80103b4:	f7ff fa54 	bl	800f860 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>

		m1.setPWM(ctl.throttle);
 80103b8:	8afb      	ldrh	r3, [r7, #22]
 80103ba:	4619      	mov	r1, r3
 80103bc:	480f      	ldr	r0, [pc, #60]	; (80103fc <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x5c>)
 80103be:	f7f0 ff75 	bl	80012ac <_ZN2FC5Motor6setPWMEt>
		m2.setPWM(ctl.throttle);
 80103c2:	8afb      	ldrh	r3, [r7, #22]
 80103c4:	4619      	mov	r1, r3
 80103c6:	480e      	ldr	r0, [pc, #56]	; (8010400 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x60>)
 80103c8:	f7f0 ff70 	bl	80012ac <_ZN2FC5Motor6setPWMEt>
		m3.setPWM(ctl.throttle);
 80103cc:	8afb      	ldrh	r3, [r7, #22]
 80103ce:	4619      	mov	r1, r3
 80103d0:	480c      	ldr	r0, [pc, #48]	; (8010404 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x64>)
 80103d2:	f7f0 ff6b 	bl	80012ac <_ZN2FC5Motor6setPWMEt>
		m4.setPWM(ctl.throttle);
 80103d6:	8afb      	ldrh	r3, [r7, #22]
 80103d8:	4619      	mov	r1, r3
 80103da:	480b      	ldr	r0, [pc, #44]	; (8010408 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x68>)
 80103dc:	f7f0 ff66 	bl	80012ac <_ZN2FC5Motor6setPWMEt>
		m5.setPWM(ctl.throttle);
 80103e0:	8afb      	ldrh	r3, [r7, #22]
 80103e2:	4619      	mov	r1, r3
 80103e4:	4809      	ldr	r0, [pc, #36]	; (801040c <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x6c>)
 80103e6:	f7f0 ff61 	bl	80012ac <_ZN2FC5Motor6setPWMEt>
		m6.setPWM(ctl.throttle);
 80103ea:	8afb      	ldrh	r3, [r7, #22]
 80103ec:	4619      	mov	r1, r3
 80103ee:	4808      	ldr	r0, [pc, #32]	; (8010410 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x70>)
 80103f0:	f7f0 ff5c 	bl	80012ac <_ZN2FC5Motor6setPWMEt>
		msgBus.getController(&ctl);
 80103f4:	e7da      	b.n	80103ac <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0xc>
 80103f6:	bf00      	nop
 80103f8:	20000b98 	.word	0x20000b98
 80103fc:	2000087c 	.word	0x2000087c
 8010400:	20000888 	.word	0x20000888
 8010404:	20000894 	.word	0x20000894
 8010408:	200008a0 	.word	0x200008a0
 801040c:	200008ac 	.word	0x200008ac
 8010410:	200008b8 	.word	0x200008b8

08010414 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv>:
	}
	osKernelUnlock();
}

bool ModuleCommander::stopTheOtherTask(){
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
	switch(modeFlagPub.flightMode){
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010420:	2b00      	cmp	r3, #0
 8010422:	d004      	beq.n	801042e <_ZN2FC15ModuleCommander16stopTheOtherTaskEv+0x1a>
 8010424:	2b00      	cmp	r3, #0
 8010426:	db06      	blt.n	8010436 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv+0x22>
 8010428:	2b02      	cmp	r3, #2
 801042a:	dc04      	bgt.n	8010436 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv+0x22>
	case Command::ControlPosition:
		/* not break */
	case Command::AutoWaypoint:
		//TODO stop auto controller
		/* not break */
		break;
 801042c:	e002      	b.n	8010434 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv+0x20>
		ModulePositionController::setSignal(PC_stop);
 801042e:	2004      	movs	r0, #4
 8010430:	f7ff fdb8 	bl	800ffa4 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>
		break;
 8010434:	bf00      	nop
	}
}
 8010436:	bf00      	nop
 8010438:	4618      	mov	r0, r3
 801043a:	3708      	adds	r7, #8
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}

08010440 <_ZN2FC15ModuleCommander15resetControllerEv>:

void ModuleCommander::resetController(){
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
	switch(modeFlagPub.flightMode){
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801044c:	2b00      	cmp	r3, #0
 801044e:	d006      	beq.n	801045e <_ZN2FC15ModuleCommander15resetControllerEv+0x1e>
 8010450:	2b00      	cmp	r3, #0
 8010452:	db08      	blt.n	8010466 <_ZN2FC15ModuleCommander15resetControllerEv+0x26>
 8010454:	2b02      	cmp	r3, #2
 8010456:	dc06      	bgt.n	8010466 <_ZN2FC15ModuleCommander15resetControllerEv+0x26>
	case Command::AutoWaypoint:
		//TODO initialize auto controller
		/* not break */
	case Command::ControlPosition:
		ModulePositionController::setSignal(PC_reset);
 8010458:	2008      	movs	r0, #8
 801045a:	f7ff fda3 	bl	800ffa4 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>
		/* not break */
	case Command::ControlAttitude:
		ModuleAttitudeController::setSignal(AC_reset);
 801045e:	2002      	movs	r0, #2
 8010460:	f7ff fdb2 	bl	800ffc8 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE>
		break;
 8010464:	bf00      	nop
	}
}
 8010466:	bf00      	nop
 8010468:	3708      	adds	r7, #8
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}

0801046e <_ZN27positionEstimatorModelClass17setExternalInputsEPKNS_4ExtUE>:
  ~positionEstimatorModelClass();

  // Root-level structure-based inputs set method

  // Root inports set method
  void setExternalInputs(const ExtU* pExtU)
 801046e:	b580      	push	{r7, lr}
 8010470:	b082      	sub	sp, #8
 8010472:	af00      	add	r7, sp, #0
 8010474:	6078      	str	r0, [r7, #4]
 8010476:	6039      	str	r1, [r7, #0]
  {
    rtU = *pExtU;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	683a      	ldr	r2, [r7, #0]
 801047c:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 8010480:	4611      	mov	r1, r2
 8010482:	2280      	movs	r2, #128	; 0x80
 8010484:	4618      	mov	r0, r3
 8010486:	f018 f967 	bl	8028758 <memcpy>
  }
 801048a:	bf00      	nop
 801048c:	3708      	adds	r7, #8
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}

08010492 <_ZNK27positionEstimatorModelClass18getExternalOutputsEv>:

  // Root-level structure-based outputs get method

  // Root outports get method
  const positionEstimatorModelClass::ExtY & getExternalOutputs() const
 8010492:	b480      	push	{r7}
 8010494:	b083      	sub	sp, #12
 8010496:	af00      	add	r7, sp, #0
 8010498:	6078      	str	r0, [r7, #4]
  {
    return rtY;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
  }
 80104a0:	4618      	mov	r0, r3
 80104a2:	370c      	adds	r7, #12
 80104a4:	46bd      	mov	sp, r7
 80104a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104aa:	4770      	bx	lr

080104ac <_ZN2FC6MsgBus6getGPSEPNS_3GPSE>:
    SIMPLE_FUNC_IMPL(GPS, GPS, gps)
 80104ac:	b590      	push	{r4, r7, lr}
 80104ae:	b085      	sub	sp, #20
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	6039      	str	r1, [r7, #0]
 80104b6:	2300      	movs	r3, #0
 80104b8:	73fb      	strb	r3, [r7, #15]
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	e9d3 1200 	ldrd	r1, r2, [r3]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 80104c6:	42a2      	cmp	r2, r4
 80104c8:	bf08      	it	eq
 80104ca:	4299      	cmpeq	r1, r3
 80104cc:	d001      	beq.n	80104d2 <_ZN2FC6MsgBus6getGPSEPNS_3GPSE+0x26>
 80104ce:	2301      	movs	r3, #1
 80104d0:	73fb      	strb	r3, [r7, #15]
 80104d2:	683a      	ldr	r2, [r7, #0]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	4610      	mov	r0, r2
 80104d8:	3348      	adds	r3, #72	; 0x48
 80104da:	2248      	movs	r2, #72	; 0x48
 80104dc:	4619      	mov	r1, r3
 80104de:	f018 f93b 	bl	8028758 <memcpy>
 80104e2:	7bfb      	ldrb	r3, [r7, #15]
 80104e4:	4618      	mov	r0, r3
 80104e6:	3714      	adds	r7, #20
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd90      	pop	{r4, r7, pc}

080104ec <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE>:
    SIMPLE_FUNC_IMPL(Barometer, Barometer, barometer)
 80104ec:	b4b0      	push	{r4, r5, r7}
 80104ee:	b085      	sub	sp, #20
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	6039      	str	r1, [r7, #0]
 80104f6:	2300      	movs	r3, #0
 80104f8:	73fb      	strb	r3, [r7, #15]
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	e9d3 1200 	ldrd	r1, r2, [r3]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8010506:	42a2      	cmp	r2, r4
 8010508:	bf08      	it	eq
 801050a:	4299      	cmpeq	r1, r3
 801050c:	d001      	beq.n	8010512 <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE+0x26>
 801050e:	2301      	movs	r3, #1
 8010510:	73fb      	strb	r3, [r7, #15]
 8010512:	683a      	ldr	r2, [r7, #0]
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	4615      	mov	r5, r2
 8010518:	f103 0490 	add.w	r4, r3, #144	; 0x90
 801051c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801051e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010520:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010524:	e885 0003 	stmia.w	r5, {r0, r1}
 8010528:	7bfb      	ldrb	r3, [r7, #15]
 801052a:	4618      	mov	r0, r3
 801052c:	3714      	adds	r7, #20
 801052e:	46bd      	mov	sp, r7
 8010530:	bcb0      	pop	{r4, r5, r7}
 8010532:	4770      	bx	lr

08010534 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>:
    SIMPLE_FUNC_IMPL(NedAccel, NedAccel, nedAccel)
 8010534:	b4b0      	push	{r4, r5, r7}
 8010536:	b085      	sub	sp, #20
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
 801053c:	6039      	str	r1, [r7, #0]
 801053e:	2300      	movs	r3, #0
 8010540:	73fb      	strb	r3, [r7, #15]
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	e9d3 1200 	ldrd	r1, r2, [r3]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 801054e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010552:	42a2      	cmp	r2, r4
 8010554:	bf08      	it	eq
 8010556:	4299      	cmpeq	r1, r3
 8010558:	d001      	beq.n	801055e <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE+0x2a>
 801055a:	2301      	movs	r3, #1
 801055c:	73fb      	strb	r3, [r7, #15]
 801055e:	683a      	ldr	r2, [r7, #0]
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	4615      	mov	r5, r2
 8010564:	f503 748c 	add.w	r4, r3, #280	; 0x118
 8010568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801056a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801056c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010570:	e885 0003 	stmia.w	r5, {r0, r1}
 8010574:	7bfb      	ldrb	r3, [r7, #15]
 8010576:	4618      	mov	r0, r3
 8010578:	3714      	adds	r7, #20
 801057a:	46bd      	mov	sp, r7
 801057c:	bcb0      	pop	{r4, r5, r7}
 801057e:	4770      	bx	lr

08010580 <_ZN2FC6MsgBus16setLocalPositionERKNS_13LocalPositionE>:
    SIMPLE_FUNC_IMPL(LocalPosition, LocalPosition, localPosition)
 8010580:	b580      	push	{r7, lr}
 8010582:	b082      	sub	sp, #8
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	6039      	str	r1, [r7, #0]
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	683a      	ldr	r2, [r7, #0]
 801058e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8010592:	4611      	mov	r1, r2
 8010594:	2248      	movs	r2, #72	; 0x48
 8010596:	4618      	mov	r0, r3
 8010598:	f018 f8de 	bl	8028758 <memcpy>
 801059c:	bf00      	nop
 801059e:	3708      	adds	r7, #8
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}

080105a4 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 80105a4:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80105a8:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 80105aa:	4b0e      	ldr	r3, [pc, #56]	; (80105e4 <_ZL11microsecondv+0x40>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	4619      	mov	r1, r3
 80105b0:	f04f 0200 	mov.w	r2, #0
 80105b4:	f04f 0b00 	mov.w	fp, #0
 80105b8:	f04f 0c00 	mov.w	ip, #0
 80105bc:	468c      	mov	ip, r1
 80105be:	f04f 0b00 	mov.w	fp, #0
 80105c2:	4a09      	ldr	r2, [pc, #36]	; (80105e8 <_ZL11microsecondv+0x44>)
 80105c4:	6812      	ldr	r2, [r2, #0]
 80105c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80105c8:	4611      	mov	r1, r2
 80105ca:	f04f 0200 	mov.w	r2, #0
 80105ce:	ea4b 0301 	orr.w	r3, fp, r1
 80105d2:	ea4c 0402 	orr.w	r4, ip, r2
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	4621      	mov	r1, r4
 80105da:	46bd      	mov	sp, r7
 80105dc:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80105e0:	4770      	bx	lr
 80105e2:	bf00      	nop
 80105e4:	20000b8c 	.word	0x20000b8c
 80105e8:	20010f68 	.word	0x20010f68

080105ec <_ZN2FC9ModuleINSC1Ev>:
#include "Utils/Constant.h"

namespace FC {


ModuleINS::ModuleINS()
 80105ec:	b590      	push	{r4, r7, lr}
 80105ee:	b083      	sub	sp, #12
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
	: refLat(0)
	, refLon(0)
	, refAlt(0)
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	4618      	mov	r0, r3
 80105f8:	f7fb fb02 	bl	800bc00 <_ZN27positionEstimatorModelClassC1Ev>
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f603 6208 	addw	r2, r3, #3592	; 0xe08
 8010602:	f04f 0300 	mov.w	r3, #0
 8010606:	f04f 0400 	mov.w	r4, #0
 801060a:	e9c2 3400 	strd	r3, r4, [r2]
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f503 6261 	add.w	r2, r3, #3600	; 0xe10
 8010614:	f04f 0300 	mov.w	r3, #0
 8010618:	f04f 0400 	mov.w	r4, #0
 801061c:	e9c2 3400 	strd	r3, r4, [r2]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f603 6318 	addw	r3, r3, #3608	; 0xe18
 8010626:	f04f 0200 	mov.w	r2, #0
 801062a:	601a      	str	r2, [r3, #0]
{}
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	4618      	mov	r0, r3
 8010630:	370c      	adds	r7, #12
 8010632:	46bd      	mov	sp, r7
 8010634:	bd90      	pop	{r4, r7, pc}
	...

08010638 <_ZN2FC9ModuleINS7onestepEv>:

void ModuleINS::onestep(){
 8010638:	b590      	push	{r4, r7, lr}
 801063a:	b0b5      	sub	sp, #212	; 0xd4
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
	ExtU input;

	if(msgBus.getNedAccel(&nedAccelSub)){
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f603 5348 	addw	r3, r3, #3400	; 0xd48
 8010646:	4619      	mov	r1, r3
 8010648:	4889      	ldr	r0, [pc, #548]	; (8010870 <_ZN2FC9ModuleINS7onestepEv+0x238>)
 801064a:	f7ff ff73 	bl	8010534 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>
 801064e:	4603      	mov	r3, r0
 8010650:	2b00      	cmp	r3, #0
 8010652:	d02b      	beq.n	80106ac <_ZN2FC9ModuleINS7onestepEv+0x74>
		input.AhrsFlag = true;
 8010654:	f04f 0300 	mov.w	r3, #0
 8010658:	4c86      	ldr	r4, [pc, #536]	; (8010874 <_ZN2FC9ModuleINS7onestepEv+0x23c>)
 801065a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		input.ax = nedAccelSub.xyz[0];
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	4618      	mov	r0, r3
 8010668:	f7ef ff76 	bl	8000558 <__aeabi_f2d>
 801066c:	4603      	mov	r3, r0
 801066e:	460c      	mov	r4, r1
 8010670:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
		input.ay = nedAccelSub.xyz[1];
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f603 5354 	addw	r3, r3, #3412	; 0xd54
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	4618      	mov	r0, r3
 801067e:	f7ef ff6b 	bl	8000558 <__aeabi_f2d>
 8010682:	4603      	mov	r3, r0
 8010684:	460c      	mov	r4, r1
 8010686:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
		input.az = nedAccelSub.xyz[2] - FC_GRAVITY_ACCEERATION;		/* subtract gravity */
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f603 5358 	addw	r3, r3, #3416	; 0xd58
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	4618      	mov	r0, r3
 8010694:	f7ef ff60 	bl	8000558 <__aeabi_f2d>
 8010698:	a373      	add	r3, pc, #460	; (adr r3, 8010868 <_ZN2FC9ModuleINS7onestepEv+0x230>)
 801069a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801069e:	f7ef fdfb 	bl	8000298 <__aeabi_dsub>
 80106a2:	4603      	mov	r3, r0
 80106a4:	460c      	mov	r4, r1
 80106a6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 80106aa:	e005      	b.n	80106b8 <_ZN2FC9ModuleINS7onestepEv+0x80>
	}
	else input.AhrsFlag = false;
 80106ac:	f04f 0300 	mov.w	r3, #0
 80106b0:	f04f 0400 	mov.w	r4, #0
 80106b4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	if(msgBus.getGPS(&gpsSub)){
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f503 6356 	add.w	r3, r3, #3424	; 0xd60
 80106be:	4619      	mov	r1, r3
 80106c0:	486b      	ldr	r0, [pc, #428]	; (8010870 <_ZN2FC9ModuleINS7onestepEv+0x238>)
 80106c2:	f7ff fef3 	bl	80104ac <_ZN2FC6MsgBus6getGPSEPNS_3GPSE>
 80106c6:	4603      	mov	r3, r0
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d006      	beq.n	80106da <_ZN2FC9ModuleINS7onestepEv+0xa2>
		input.GpsFlag = false;
 80106cc:	f04f 0300 	mov.w	r3, #0
 80106d0:	f04f 0400 	mov.w	r4, #0
 80106d4:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 80106d8:	e005      	b.n	80106e6 <_ZN2FC9ModuleINS7onestepEv+0xae>
	}
	else input.GpsFlag = false;
 80106da:	f04f 0300 	mov.w	r3, #0
 80106de:	f04f 0400 	mov.w	r4, #0
 80106e2:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

	if(msgBus.getBarometer(&baroSub)){
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f603 53a8 	addw	r3, r3, #3496	; 0xda8
 80106ec:	4619      	mov	r1, r3
 80106ee:	4860      	ldr	r0, [pc, #384]	; (8010870 <_ZN2FC9ModuleINS7onestepEv+0x238>)
 80106f0:	f7ff fefc 	bl	80104ec <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE>
 80106f4:	4603      	mov	r3, r0
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d010      	beq.n	801071c <_ZN2FC9ModuleINS7onestepEv+0xe4>
		input.BaroFlag = true;
 80106fa:	f04f 0300 	mov.w	r3, #0
 80106fe:	4c5d      	ldr	r4, [pc, #372]	; (8010874 <_ZN2FC9ModuleINS7onestepEv+0x23c>)
 8010700:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		input.baroZ = baroSub.altitude;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f603 53b8 	addw	r3, r3, #3512	; 0xdb8
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	4618      	mov	r0, r3
 801070e:	f7ef ff23 	bl	8000558 <__aeabi_f2d>
 8010712:	4603      	mov	r3, r0
 8010714:	460c      	mov	r4, r1
 8010716:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 801071a:	e005      	b.n	8010728 <_ZN2FC9ModuleINS7onestepEv+0xf0>
	}
	else input.BaroFlag = false;
 801071c:	f04f 0300 	mov.w	r3, #0
 8010720:	f04f 0400 	mov.w	r4, #0
 8010724:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0

	setExternalInputs(&input);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801072e:	4611      	mov	r1, r2
 8010730:	4618      	mov	r0, r3
 8010732:	f7ff fe9c 	bl	801046e <_ZN27positionEstimatorModelClass17setExternalInputsEPKNS_4ExtUE>
	step();
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	4618      	mov	r0, r3
 801073a:	f7f6 fd89 	bl	8007250 <_ZN27positionEstimatorModelClass4stepEv>
	ExtY output = getExternalOutputs();
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	4618      	mov	r0, r3
 8010742:	f7ff fea6 	bl	8010492 <_ZNK27positionEstimatorModelClass18getExternalOutputsEv>
 8010746:	4602      	mov	r2, r0
 8010748:	f107 0308 	add.w	r3, r7, #8
 801074c:	4611      	mov	r1, r2
 801074e:	2248      	movs	r2, #72	; 0x48
 8010750:	4618      	mov	r0, r3
 8010752:	f018 f801 	bl	8028758 <memcpy>


	localPositionPub.timestamp = microsecond();
 8010756:	f7ff ff25 	bl	80105a4 <_ZL11microsecondv>
 801075a:	4603      	mov	r3, r0
 801075c:	460c      	mov	r4, r1
 801075e:	687a      	ldr	r2, [r7, #4]
 8010760:	f502 625c 	add.w	r2, r2, #3520	; 0xdc0
 8010764:	e9c2 3400 	strd	r3, r4, [r2]
	localPositionPub.ax = (float)output.estiAX;
 8010768:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 801076c:	4618      	mov	r0, r3
 801076e:	4621      	mov	r1, r4
 8010770:	f7f0 fa42 	bl	8000bf8 <__aeabi_d2f>
 8010774:	4602      	mov	r2, r0
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f503 635e 	add.w	r3, r3, #3552	; 0xde0
 801077c:	601a      	str	r2, [r3, #0]
	localPositionPub.ay = (float)output.estiAY;
 801077e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8010782:	4618      	mov	r0, r3
 8010784:	4621      	mov	r1, r4
 8010786:	f7f0 fa37 	bl	8000bf8 <__aeabi_d2f>
 801078a:	4602      	mov	r2, r0
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f603 53e4 	addw	r3, r3, #3556	; 0xde4
 8010792:	601a      	str	r2, [r3, #0]
	localPositionPub.az = (float)output.estiAZ;
 8010794:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8010798:	4618      	mov	r0, r3
 801079a:	4621      	mov	r1, r4
 801079c:	f7f0 fa2c 	bl	8000bf8 <__aeabi_d2f>
 80107a0:	4602      	mov	r2, r0
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f603 53e8 	addw	r3, r3, #3560	; 0xde8
 80107a8:	601a      	str	r2, [r3, #0]

	localPositionPub.vx = (float)output.estiVX;
 80107aa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80107ae:	4618      	mov	r0, r3
 80107b0:	4621      	mov	r1, r4
 80107b2:	f7f0 fa21 	bl	8000bf8 <__aeabi_d2f>
 80107b6:	4602      	mov	r2, r0
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	f603 53d4 	addw	r3, r3, #3540	; 0xdd4
 80107be:	601a      	str	r2, [r3, #0]
	localPositionPub.vy = (float)output.estiVY;
 80107c0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80107c4:	4618      	mov	r0, r3
 80107c6:	4621      	mov	r1, r4
 80107c8:	f7f0 fa16 	bl	8000bf8 <__aeabi_d2f>
 80107cc:	4602      	mov	r2, r0
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 80107d4:	601a      	str	r2, [r3, #0]
	localPositionPub.vz = (float)output.estiVZ;
 80107d6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80107da:	4618      	mov	r0, r3
 80107dc:	4621      	mov	r1, r4
 80107de:	f7f0 fa0b 	bl	8000bf8 <__aeabi_d2f>
 80107e2:	4602      	mov	r2, r0
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 80107ea:	601a      	str	r2, [r3, #0]

	localPositionPub.x = (float)output.estiX;
 80107ec:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80107f0:	4618      	mov	r0, r3
 80107f2:	4621      	mov	r1, r4
 80107f4:	f7f0 fa00 	bl	8000bf8 <__aeabi_d2f>
 80107f8:	4602      	mov	r2, r0
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f603 53c8 	addw	r3, r3, #3528	; 0xdc8
 8010800:	601a      	str	r2, [r3, #0]
	localPositionPub.y = (float)output.estiY;
 8010802:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010806:	4618      	mov	r0, r3
 8010808:	4621      	mov	r1, r4
 801080a:	f7f0 f9f5 	bl	8000bf8 <__aeabi_d2f>
 801080e:	4602      	mov	r2, r0
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f603 53cc 	addw	r3, r3, #3532	; 0xdcc
 8010816:	601a      	str	r2, [r3, #0]
	localPositionPub.z = (float)output.estiZ;
 8010818:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801081c:	4618      	mov	r0, r3
 801081e:	4621      	mov	r1, r4
 8010820:	f7f0 f9ea 	bl	8000bf8 <__aeabi_d2f>
 8010824:	4602      	mov	r2, r0
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f503 635d 	add.w	r3, r3, #3536	; 0xdd0
 801082c:	601a      	str	r2, [r3, #0]

	msgBus.getAttitude(&attitudeSub);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8010834:	4619      	mov	r1, r3
 8010836:	480e      	ldr	r0, [pc, #56]	; (8010870 <_ZN2FC9ModuleINS7onestepEv+0x238>)
 8010838:	f7ff f856 	bl	800f8e8 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
	localPositionPub.yaw = attitudeSub.yaw;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f503 6354 	add.w	r3, r3, #3392	; 0xd40
 8010842:	681a      	ldr	r2, [r3, #0]
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f603 53ec 	addw	r3, r3, #3564	; 0xdec
 801084a:	601a      	str	r2, [r3, #0]

	msgBus.setLocalPosition(localPositionPub);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
 8010852:	4619      	mov	r1, r3
 8010854:	4806      	ldr	r0, [pc, #24]	; (8010870 <_ZN2FC9ModuleINS7onestepEv+0x238>)
 8010856:	f7ff fe93 	bl	8010580 <_ZN2FC6MsgBus16setLocalPositionERKNS_13LocalPositionE>
}
 801085a:	bf00      	nop
 801085c:	37d4      	adds	r7, #212	; 0xd4
 801085e:	46bd      	mov	sp, r7
 8010860:	bd90      	pop	{r4, r7, pc}
 8010862:	bf00      	nop
 8010864:	f3af 8000 	nop.w
 8010868:	3a92a305 	.word	0x3a92a305
 801086c:	40239d01 	.word	0x40239d01
 8010870:	20000b98 	.word	0x20000b98
 8010874:	3ff00000 	.word	0x3ff00000

08010878 <_ZN25positionControlModelClass17setExternalInputsEPKNS_22ExtU_positionControl_TE>:
  void setBlockParameters(const P_positionControl_T *ppositionControl_P);

  // Root-level structure-based inputs set method

  // Root inports set method
  void setExternalInputs(const ExtU_positionControl_T* pExtU_positionControl_T)
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	6039      	str	r1, [r7, #0]
  {
    positionControl_U = *pExtU_positionControl_T;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	683a      	ldr	r2, [r7, #0]
 8010886:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 801088a:	4611      	mov	r1, r2
 801088c:	2258      	movs	r2, #88	; 0x58
 801088e:	4618      	mov	r0, r3
 8010890:	f017 ff62 	bl	8028758 <memcpy>
  }
 8010894:	bf00      	nop
 8010896:	3708      	adds	r7, #8
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}

0801089c <_ZNK25positionControlModelClass18getExternalOutputsEv>:

  // Root-level structure-based outputs get method

  // Root outports get method
  const positionControlModelClass::ExtY_positionControl_T & getExternalOutputs()
 801089c:	b480      	push	{r7}
 801089e:	b083      	sub	sp, #12
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
    const
  {
    return positionControl_Y;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f503 734a 	add.w	r3, r3, #808	; 0x328
  }
 80108aa:	4618      	mov	r0, r3
 80108ac:	370c      	adds	r7, #12
 80108ae:	46bd      	mov	sp, r7
 80108b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b4:	4770      	bx	lr

080108b6 <_ZN2FC6MsgBus19setVehicleAttitueSPERKNS_16VehicleAttitueSPE>:
    SIMPLE_FUNC_IMPL(VehicleAttitueSP, VehicleAttitueSP, vehicleAttitudeSP)
 80108b6:	b4b0      	push	{r4, r5, r7}
 80108b8:	b083      	sub	sp, #12
 80108ba:	af00      	add	r7, sp, #0
 80108bc:	6078      	str	r0, [r7, #4]
 80108be:	6039      	str	r1, [r7, #0]
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	683a      	ldr	r2, [r7, #0]
 80108c4:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80108c8:	4615      	mov	r5, r2
 80108ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80108d2:	e884 0003 	stmia.w	r4, {r0, r1}
 80108d6:	bf00      	nop
 80108d8:	370c      	adds	r7, #12
 80108da:	46bd      	mov	sp, r7
 80108dc:	bcb0      	pop	{r4, r5, r7}
 80108de:	4770      	bx	lr

080108e0 <_ZN2FC6MsgBus16getLocalPositionEPNS_13LocalPositionE>:
    SIMPLE_FUNC_IMPL(LocalPosition, LocalPosition, localPosition)
 80108e0:	b590      	push	{r4, r7, lr}
 80108e2:	b085      	sub	sp, #20
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
 80108ea:	2300      	movs	r3, #0
 80108ec:	73fb      	strb	r3, [r7, #15]
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	e9d3 1200 	ldrd	r1, r2, [r3]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80108fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80108fe:	42a2      	cmp	r2, r4
 8010900:	bf08      	it	eq
 8010902:	4299      	cmpeq	r1, r3
 8010904:	d001      	beq.n	801090a <_ZN2FC6MsgBus16getLocalPositionEPNS_13LocalPositionE+0x2a>
 8010906:	2301      	movs	r3, #1
 8010908:	73fb      	strb	r3, [r7, #15]
 801090a:	683a      	ldr	r2, [r7, #0]
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	4610      	mov	r0, r2
 8010910:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8010914:	2248      	movs	r2, #72	; 0x48
 8010916:	4619      	mov	r1, r3
 8010918:	f017 ff1e 	bl	8028758 <memcpy>
 801091c:	7bfb      	ldrb	r3, [r7, #15]
 801091e:	4618      	mov	r0, r3
 8010920:	3714      	adds	r7, #20
 8010922:	46bd      	mov	sp, r7
 8010924:	bd90      	pop	{r4, r7, pc}
	...

08010928 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8010928:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 801092c:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 801092e:	4b0e      	ldr	r3, [pc, #56]	; (8010968 <_ZL11microsecondv+0x40>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	4619      	mov	r1, r3
 8010934:	f04f 0200 	mov.w	r2, #0
 8010938:	f04f 0b00 	mov.w	fp, #0
 801093c:	f04f 0c00 	mov.w	ip, #0
 8010940:	468c      	mov	ip, r1
 8010942:	f04f 0b00 	mov.w	fp, #0
 8010946:	4a09      	ldr	r2, [pc, #36]	; (801096c <_ZL11microsecondv+0x44>)
 8010948:	6812      	ldr	r2, [r2, #0]
 801094a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801094c:	4611      	mov	r1, r2
 801094e:	f04f 0200 	mov.w	r2, #0
 8010952:	ea4b 0301 	orr.w	r3, fp, r1
 8010956:	ea4c 0402 	orr.w	r4, ip, r2
}
 801095a:	4618      	mov	r0, r3
 801095c:	4621      	mov	r1, r4
 801095e:	46bd      	mov	sp, r7
 8010960:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8010964:	4770      	bx	lr
 8010966:	bf00      	nop
 8010968:	20000b90 	.word	0x20000b90
 801096c:	20010f68 	.word	0x20010f68

08010970 <_ZN2FCL3mapEtttff>:
#ifndef UTILS_FUNCTION_H_
#define UTILS_FUNCTION_H_

namespace FC{

static float map(uint16_t value, uint16_t in_min, uint16_t in_max, float out_min, float out_max){
 8010970:	b480      	push	{r7}
 8010972:	b085      	sub	sp, #20
 8010974:	af00      	add	r7, sp, #0
 8010976:	4603      	mov	r3, r0
 8010978:	ed87 0a01 	vstr	s0, [r7, #4]
 801097c:	edc7 0a00 	vstr	s1, [r7]
 8010980:	81fb      	strh	r3, [r7, #14]
 8010982:	460b      	mov	r3, r1
 8010984:	81bb      	strh	r3, [r7, #12]
 8010986:	4613      	mov	r3, r2
 8010988:	817b      	strh	r3, [r7, #10]
	return (float)(value - in_min)*(out_max - out_min) / (in_max - in_min) + out_min;
 801098a:	89fa      	ldrh	r2, [r7, #14]
 801098c:	89bb      	ldrh	r3, [r7, #12]
 801098e:	1ad3      	subs	r3, r2, r3
 8010990:	ee07 3a90 	vmov	s15, r3
 8010994:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010998:	edd7 6a00 	vldr	s13, [r7]
 801099c:	edd7 7a01 	vldr	s15, [r7, #4]
 80109a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80109a4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80109a8:	897a      	ldrh	r2, [r7, #10]
 80109aa:	89bb      	ldrh	r3, [r7, #12]
 80109ac:	1ad3      	subs	r3, r2, r3
 80109ae:	ee07 3a90 	vmov	s15, r3
 80109b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80109b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80109ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80109be:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80109c2:	eeb0 0a67 	vmov.f32	s0, s15
 80109c6:	3714      	adds	r7, #20
 80109c8:	46bd      	mov	sp, r7
 80109ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ce:	4770      	bx	lr

080109d0 <_ZN2FC24ModulePositionControllerC1Ev>:
#include "cmath"
#include "Utils/function.h"
#include "printf.h"
namespace FC {

ModulePositionController::ModulePositionController() {
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b082      	sub	sp, #8
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	4618      	mov	r0, r3
 80109dc:	f7f5 f9a6 	bl	8005d2c <_ZN25positionControlModelClassC1Ev>
	// TODO Auto-generated constructor stub

}
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	4618      	mov	r0, r3
 80109e4:	3708      	adds	r7, #8
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}
	...

080109ec <_ZN2FC24ModulePositionController7oneStepEv>:

void ModulePositionController::oneStep(){
 80109ec:	b590      	push	{r4, r7, lr}
 80109ee:	b09d      	sub	sp, #116	; 0x74
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
	msgBus.getModeFlag(&modeFlagSub);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80109fa:	4619      	mov	r1, r3
 80109fc:	485b      	ldr	r0, [pc, #364]	; (8010b6c <_ZN2FC24ModulePositionController7oneStepEv+0x180>)
 80109fe:	f7fe ff99 	bl	800f934 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
//	 || modeFlagSub.flightMode == Command::ControlAttitude){
//		startFlag = false;
//		return;
//	}

	msgBus.getLocalPosition(&localPositionSub);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8010a08:	4619      	mov	r1, r3
 8010a0a:	4858      	ldr	r0, [pc, #352]	; (8010b6c <_ZN2FC24ModulePositionController7oneStepEv+0x180>)
 8010a0c:	f7ff ff68 	bl	80108e0 <_ZN2FC6MsgBus16getLocalPositionEPNS_13LocalPositionE>

	if(modeFlagSub.flightMode == Command::ControlPosition){
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f8d3 338c 	ldr.w	r3, [r3, #908]	; 0x38c
 8010a16:	2b01      	cmp	r3, #1
 8010a18:	d103      	bne.n	8010a22 <_ZN2FC24ModulePositionController7oneStepEv+0x36>
		setFromRC();
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f000 f8a8 	bl	8010b70 <_ZN2FC24ModulePositionController9setFromRCEv>
 8010a20:	e002      	b.n	8010a28 <_ZN2FC24ModulePositionController7oneStepEv+0x3c>
	}
	else{
		setFromAutoController();
 8010a22:	6878      	ldr	r0, [r7, #4]
 8010a24:	f000 f96c 	bl	8010d00 <_ZN2FC24ModulePositionController21setFromAutoControllerEv>
	}

	ExtU_positionControl_T input;

	input.set_x = targetX;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f7ef fd92 	bl	8000558 <__aeabi_f2d>
 8010a34:	4603      	mov	r3, r0
 8010a36:	460c      	mov	r4, r1
 8010a38:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	input.set_y = targetY;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7ef fd88 	bl	8000558 <__aeabi_f2d>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	460c      	mov	r4, r1
 8010a4c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	input.set_z = targetZ;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7ef fd7e 	bl	8000558 <__aeabi_f2d>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	460c      	mov	r4, r1
 8010a60:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	input.set_yaw = targetYaw;;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f7ef fd74 	bl	8000558 <__aeabi_f2d>
 8010a70:	4603      	mov	r3, r0
 8010a72:	460c      	mov	r4, r1
 8010a74:	e9c7 3408 	strd	r3, r4, [r7, #32]

	input.estim_dx = localPositionSub.vx;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7ef fd6a 	bl	8000558 <__aeabi_f2d>
 8010a84:	4603      	mov	r3, r0
 8010a86:	460c      	mov	r4, r1
 8010a88:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	input.estim_dy = localPositionSub.vy;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8010a92:	4618      	mov	r0, r3
 8010a94:	f7ef fd60 	bl	8000558 <__aeabi_f2d>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	460c      	mov	r4, r1
 8010a9c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	input.estim_dz = localPositionSub.vz;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	f7ef fd56 	bl	8000558 <__aeabi_f2d>
 8010aac:	4603      	mov	r3, r0
 8010aae:	460c      	mov	r4, r1
 8010ab0:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	input.estim_x = localPositionSub.x;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7ef fd4c 	bl	8000558 <__aeabi_f2d>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	460c      	mov	r4, r1
 8010ac4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	input.estim_y = localPositionSub.y;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f7ef fd42 	bl	8000558 <__aeabi_f2d>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	460c      	mov	r4, r1
 8010ad8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	input.estim_z = localPositionSub.z;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7ef fd38 	bl	8000558 <__aeabi_f2d>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	460c      	mov	r4, r1
 8010aec:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	input.estim_yaw = localPositionSub.yaw;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 8010af6:	61bb      	str	r3, [r7, #24]

	setExternalInputs(&input);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f107 0218 	add.w	r2, r7, #24
 8010afe:	4611      	mov	r1, r2
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7ff feb9 	bl	8010878 <_ZN25positionControlModelClass17setExternalInputsEPKNS_22ExtU_positionControl_TE>
	step();
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f7f4 f9ed 	bl	8004ee8 <_ZN25positionControlModelClass4stepEv>
	ExtY_positionControl_T output = getExternalOutputs();
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7ff fec3 	bl	801089c <_ZNK25positionControlModelClass18getExternalOutputsEv>
 8010b16:	4603      	mov	r3, r0
 8010b18:	f107 0408 	add.w	r4, r7, #8
 8010b1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010b1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	vehicleAttitudeSpPub.timestamp = microsecond();
 8010b22:	f7ff ff01 	bl	8010928 <_ZL11microsecondv>
 8010b26:	4603      	mov	r3, r0
 8010b28:	460c      	mov	r4, r1
 8010b2a:	687a      	ldr	r2, [r7, #4]
 8010b2c:	f502 7270 	add.w	r2, r2, #960	; 0x3c0
 8010b30:	e9c2 3400 	strd	r3, r4, [r2]
	vehicleAttitudeSpPub.pitch = output.des_pitch;
 8010b34:	68fa      	ldr	r2, [r7, #12]
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
	vehicleAttitudeSpPub.roll = output.des_roll;
 8010b3c:	68ba      	ldr	r2, [r7, #8]
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
	vehicleAttitudeSpPub.throttle = output.des_Thrust;
 8010b44:	697a      	ldr	r2, [r7, #20]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
	vehicleAttitudeSpPub.yawRate = output.des_yaw_rate;
 8010b4c:	693a      	ldr	r2, [r7, #16]
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

	msgBus.setVehicleAttitueSP(vehicleAttitudeSpPub);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8010b5a:	4619      	mov	r1, r3
 8010b5c:	4803      	ldr	r0, [pc, #12]	; (8010b6c <_ZN2FC24ModulePositionController7oneStepEv+0x180>)
 8010b5e:	f7ff feaa 	bl	80108b6 <_ZN2FC6MsgBus19setVehicleAttitueSPERKNS_16VehicleAttitueSPE>
}
 8010b62:	bf00      	nop
 8010b64:	3774      	adds	r7, #116	; 0x74
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd90      	pop	{r4, r7, pc}
 8010b6a:	bf00      	nop
 8010b6c:	20000b98 	.word	0x20000b98

08010b70 <_ZN2FC24ModulePositionController9setFromRCEv>:

void ModulePositionController::setFromRC(){
 8010b70:	b590      	push	{r4, r7, lr}
 8010b72:	b087      	sub	sp, #28
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
	msgBus.getController(&controllerSub);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8010b7e:	4619      	mov	r1, r3
 8010b80:	485c      	ldr	r0, [pc, #368]	; (8010cf4 <_ZN2FC24ModulePositionController9setFromRCEv+0x184>)
 8010b82:	f7fe fe6d 	bl	800f860 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>

	float roll = map(controllerSub.roll, 1000, 2000, -MAX_HORISION, MAX_HORISION);		/* roll */
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f8b3 3398 	ldrh.w	r3, [r3, #920]	; 0x398
 8010b8c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8010b90:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8010b94:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8010b98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f7ff fee7 	bl	8010970 <_ZN2FCL3mapEtttff>
 8010ba2:	ed87 0a05 	vstr	s0, [r7, #20]
	float pitch = map(controllerSub.pitch, 1000, 2000, -MAX_HORISION, MAX_HORISION);	/* pitch */
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f8b3 339a 	ldrh.w	r3, [r3, #922]	; 0x39a
 8010bac:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8010bb0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8010bb4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8010bb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f7ff fed7 	bl	8010970 <_ZN2FCL3mapEtttff>
 8010bc2:	ed87 0a04 	vstr	s0, [r7, #16]
	targetYaw = map(controllerSub.yaw, 1000, 2000, -MAX_YAW, MAX_YAW);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f8b3 339c 	ldrh.w	r3, [r3, #924]	; 0x39c
 8010bcc:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8010cf8 <_ZN2FC24ModulePositionController9setFromRCEv+0x188>
 8010bd0:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8010cfc <_ZN2FC24ModulePositionController9setFromRCEv+0x18c>
 8010bd4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8010bd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7ff fec7 	bl	8010970 <_ZN2FCL3mapEtttff>
 8010be2:	eef0 7a40 	vmov.f32	s15, s0
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	edc3 7af9 	vstr	s15, [r3, #996]	; 0x3e4
	targetZ = map(controllerSub.throttle, 1000, 2000, -MAX_VELTICAL, MAX_VELTICAL);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f8b3 339e 	ldrh.w	r3, [r3, #926]	; 0x39e
 8010bf2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8010bf6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8010bfa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8010bfe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7ff feb4 	bl	8010970 <_ZN2FCL3mapEtttff>
 8010c08:	eef0 7a40 	vmov.f32	s15, s0
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	edc3 7af8 	vstr	s15, [r3, #992]	; 0x3e0

	float cosYaw = cos(localPositionSub.yaw);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7ef fc9d 	bl	8000558 <__aeabi_f2d>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	460c      	mov	r4, r1
 8010c22:	ec44 3b10 	vmov	d0, r3, r4
 8010c26:	f014 f89b 	bl	8024d60 <cos>
 8010c2a:	ec54 3b10 	vmov	r3, r4, d0
 8010c2e:	4618      	mov	r0, r3
 8010c30:	4621      	mov	r1, r4
 8010c32:	f7ef ffe1 	bl	8000bf8 <__aeabi_d2f>
 8010c36:	4603      	mov	r3, r0
 8010c38:	60fb      	str	r3, [r7, #12]
	float sinYaw = sin(localPositionSub.yaw);
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7ef fc89 	bl	8000558 <__aeabi_f2d>
 8010c46:	4603      	mov	r3, r0
 8010c48:	460c      	mov	r4, r1
 8010c4a:	ec44 3b10 	vmov	d0, r3, r4
 8010c4e:	f014 f94f 	bl	8024ef0 <sin>
 8010c52:	ec54 3b10 	vmov	r3, r4, d0
 8010c56:	4618      	mov	r0, r3
 8010c58:	4621      	mov	r1, r4
 8010c5a:	f7ef ffcd 	bl	8000bf8 <__aeabi_d2f>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	60bb      	str	r3, [r7, #8]
	targetX = localPositionSub.x + pitch*cosYaw + -roll*sinYaw;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	ed93 7ad0 	vldr	s14, [r3, #832]	; 0x340
 8010c68:	edd7 6a04 	vldr	s13, [r7, #16]
 8010c6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8010c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010c74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010c78:	edd7 7a05 	vldr	s15, [r7, #20]
 8010c7c:	eef1 6a67 	vneg.f32	s13, s15
 8010c80:	edd7 7a02 	vldr	s15, [r7, #8]
 8010c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	edc3 7af6 	vstr	s15, [r3, #984]	; 0x3d8
	targetY = localPositionSub.x + pitch*sinYaw + roll*cosYaw;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	ed93 7ad0 	vldr	s14, [r3, #832]	; 0x340
 8010c98:	edd7 6a04 	vldr	s13, [r7, #16]
 8010c9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8010ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010ca8:	edd7 6a05 	vldr	s13, [r7, #20]
 8010cac:	edd7 7a03 	vldr	s15, [r7, #12]
 8010cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	edc3 7af7 	vstr	s15, [r3, #988]	; 0x3dc
	targetZ += localPositionSub.z;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	ed93 7af8 	vldr	s14, [r3, #992]	; 0x3e0
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	edd3 7ad2 	vldr	s15, [r3, #840]	; 0x348
 8010cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	edc3 7af8 	vstr	s15, [r3, #992]	; 0x3e0
	targetYaw += localPositionSub.yaw;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	ed93 7af9 	vldr	s14, [r3, #996]	; 0x3e4
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	edd3 7ad9 	vldr	s15, [r3, #868]	; 0x364
 8010ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	edc3 7af9 	vstr	s15, [r3, #996]	; 0x3e4

//	printf("%f %f %f %f\r\n", targetX, targetY, targetZ, targetYaw);
}
 8010cea:	bf00      	nop
 8010cec:	371c      	adds	r7, #28
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd90      	pop	{r4, r7, pc}
 8010cf2:	bf00      	nop
 8010cf4:	20000b98 	.word	0x20000b98
 8010cf8:	3fc90fd8 	.word	0x3fc90fd8
 8010cfc:	bfc90fd8 	.word	0xbfc90fd8

08010d00 <_ZN2FC24ModulePositionController21setFromAutoControllerEv>:

void ModulePositionController::setFromAutoController(){
 8010d00:	b480      	push	{r7}
 8010d02:	b083      	sub	sp, #12
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
	//TODO add struct VehiclePositionSP, convert to target
}
 8010d08:	bf00      	nop
 8010d0a:	370c      	adds	r7, #12
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d12:	4770      	bx	lr

08010d14 <_ZN2FC6MsgBusC1Ev>:
	MsgBus()
 8010d14:	b590      	push	{r4, r7, lr}
 8010d16:	b083      	sub	sp, #12
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
		, health{0}
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	461a      	mov	r2, r3
 8010d20:	2300      	movs	r3, #0
 8010d22:	6013      	str	r3, [r2, #0]
 8010d24:	6053      	str	r3, [r2, #4]
 8010d26:	6093      	str	r3, [r2, #8]
 8010d28:	60d3      	str	r3, [r2, #12]
 8010d2a:	6113      	str	r3, [r2, #16]
 8010d2c:	6153      	str	r3, [r2, #20]
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	3318      	adds	r3, #24
 8010d32:	2200      	movs	r2, #0
 8010d34:	601a      	str	r2, [r3, #0]
 8010d36:	605a      	str	r2, [r3, #4]
 8010d38:	609a      	str	r2, [r3, #8]
 8010d3a:	60da      	str	r2, [r3, #12]
 8010d3c:	611a      	str	r2, [r3, #16]
 8010d3e:	615a      	str	r2, [r3, #20]
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	3330      	adds	r3, #48	; 0x30
 8010d44:	2200      	movs	r2, #0
 8010d46:	601a      	str	r2, [r3, #0]
 8010d48:	605a      	str	r2, [r3, #4]
 8010d4a:	609a      	str	r2, [r3, #8]
 8010d4c:	60da      	str	r2, [r3, #12]
 8010d4e:	611a      	str	r2, [r3, #16]
 8010d50:	615a      	str	r2, [r3, #20]
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	3348      	adds	r3, #72	; 0x48
 8010d56:	2248      	movs	r2, #72	; 0x48
 8010d58:	2100      	movs	r1, #0
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f017 fd07 	bl	802876e <memset>
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	3390      	adds	r3, #144	; 0x90
 8010d64:	2200      	movs	r2, #0
 8010d66:	601a      	str	r2, [r3, #0]
 8010d68:	605a      	str	r2, [r3, #4]
 8010d6a:	609a      	str	r2, [r3, #8]
 8010d6c:	60da      	str	r2, [r3, #12]
 8010d6e:	611a      	str	r2, [r3, #16]
 8010d70:	615a      	str	r2, [r3, #20]
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	33a8      	adds	r3, #168	; 0xa8
 8010d76:	2200      	movs	r2, #0
 8010d78:	601a      	str	r2, [r3, #0]
 8010d7a:	605a      	str	r2, [r3, #4]
 8010d7c:	609a      	str	r2, [r3, #8]
 8010d7e:	60da      	str	r2, [r3, #12]
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	33f0      	adds	r3, #240	; 0xf0
 8010d84:	2228      	movs	r2, #40	; 0x28
 8010d86:	2100      	movs	r1, #0
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f017 fcf0 	bl	802876e <memset>
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8010d94:	2200      	movs	r2, #0
 8010d96:	601a      	str	r2, [r3, #0]
 8010d98:	605a      	str	r2, [r3, #4]
 8010d9a:	609a      	str	r2, [r3, #8]
 8010d9c:	60da      	str	r2, [r3, #12]
 8010d9e:	611a      	str	r2, [r3, #16]
 8010da0:	615a      	str	r2, [r3, #20]
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 8010da8:	f04f 0300 	mov.w	r3, #0
 8010dac:	f04f 0400 	mov.w	r4, #0
 8010db0:	e9c2 3400 	strd	r3, r4, [r2]
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2208      	movs	r2, #8
 8010db8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8010dca:	2220      	movs	r2, #32
 8010dcc:	2100      	movs	r1, #0
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f017 fccd 	bl	802876e <memset>
	{}
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	370c      	adds	r7, #12
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd90      	pop	{r4, r7, pc}
	...

08010de0 <_Z41__static_initialization_and_destruction_0ii>:

namespace FC{

MsgBus msgBus;

}
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b082      	sub	sp, #8
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	6039      	str	r1, [r7, #0]
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2b01      	cmp	r3, #1
 8010dee:	d107      	bne.n	8010e00 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010df6:	4293      	cmp	r3, r2
 8010df8:	d102      	bne.n	8010e00 <_Z41__static_initialization_and_destruction_0ii+0x20>
MsgBus msgBus;
 8010dfa:	4803      	ldr	r0, [pc, #12]	; (8010e08 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8010dfc:	f7ff ff8a 	bl	8010d14 <_ZN2FC6MsgBusC1Ev>
}
 8010e00:	bf00      	nop
 8010e02:	3708      	adds	r7, #8
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}
 8010e08:	20000b98 	.word	0x20000b98

08010e0c <_GLOBAL__sub_I__ZN2FC6msgBusE>:
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010e14:	2001      	movs	r0, #1
 8010e16:	f7ff ffe3 	bl	8010de0 <_Z41__static_initialization_and_destruction_0ii>
 8010e1a:	bd80      	pop	{r7, pc}

08010e1c <_ZN2FC6MsgBus13setControllerERKNS_10ControllerE>:
    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
 8010e1c:	b490      	push	{r4, r7}
 8010e1e:	b082      	sub	sp, #8
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
 8010e24:	6039      	str	r1, [r7, #0]
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	683a      	ldr	r2, [r7, #0]
 8010e2a:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8010e2e:	4613      	mov	r3, r2
 8010e30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010e32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010e36:	bf00      	nop
 8010e38:	3708      	adds	r7, #8
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	bc90      	pop	{r4, r7}
 8010e3e:	4770      	bx	lr

08010e40 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8010e40:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8010e44:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 8010e46:	4b0e      	ldr	r3, [pc, #56]	; (8010e80 <_ZL11microsecondv+0x40>)
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	4619      	mov	r1, r3
 8010e4c:	f04f 0200 	mov.w	r2, #0
 8010e50:	f04f 0b00 	mov.w	fp, #0
 8010e54:	f04f 0c00 	mov.w	ip, #0
 8010e58:	468c      	mov	ip, r1
 8010e5a:	f04f 0b00 	mov.w	fp, #0
 8010e5e:	4a09      	ldr	r2, [pc, #36]	; (8010e84 <_ZL11microsecondv+0x44>)
 8010e60:	6812      	ldr	r2, [r2, #0]
 8010e62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010e64:	4611      	mov	r1, r2
 8010e66:	f04f 0200 	mov.w	r2, #0
 8010e6a:	ea4b 0301 	orr.w	r3, fp, r1
 8010e6e:	ea4c 0402 	orr.w	r4, ip, r2
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	4621      	mov	r1, r4
 8010e76:	46bd      	mov	sp, r7
 8010e78:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8010e7c:	4770      	bx	lr
 8010e7e:	bf00      	nop
 8010e80:	20000f48 	.word	0x20000f48
 8010e84:	20010f68 	.word	0x20010f68

08010e88 <_ZL11millisecondv>:

static __inline uint32_t millisecond(){
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8010e8c:	f003 ff92 	bl	8014db4 <HAL_GetTick>
 8010e90:	4603      	mov	r3, r0
}
 8010e92:	4618      	mov	r0, r3
 8010e94:	bd80      	pop	{r7, pc}

08010e96 <_ZN2FC2RCC1Ev>:

#define ARMING_THRESHOLD 1500

class RC : public Freq<RC>{
public:
	RC() : start(false) {}
 8010e96:	b480      	push	{r7}
 8010e98:	b083      	sub	sp, #12
 8010e9a:	af00      	add	r7, sp, #0
 8010e9c:	6078      	str	r0, [r7, #4]
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	761a      	strb	r2, [r3, #24]
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	370c      	adds	r7, #12
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb0:	4770      	bx	lr
	...

08010eb4 <_ZN2FC2RC5setRCEtttttt>:
RC rc;

void RC::setRC(uint16_t roll, uint16_t pitch, uint16_t yaw, uint16_t throttle,
    		   uint16_t armming,
			   uint16_t mode)
{
 8010eb4:	b590      	push	{r4, r7, lr}
 8010eb6:	b08b      	sub	sp, #44	; 0x2c
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	60f8      	str	r0, [r7, #12]
 8010ebc:	4608      	mov	r0, r1
 8010ebe:	4611      	mov	r1, r2
 8010ec0:	461a      	mov	r2, r3
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	817b      	strh	r3, [r7, #10]
 8010ec6:	460b      	mov	r3, r1
 8010ec8:	813b      	strh	r3, [r7, #8]
 8010eca:	4613      	mov	r3, r2
 8010ecc:	80fb      	strh	r3, [r7, #6]
	if(start == false && throttle > MOTOR_CALIBRATION_THROTLE){
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	7e1b      	ldrb	r3, [r3, #24]
 8010ed2:	f083 0301 	eor.w	r3, r3, #1
 8010ed6:	b2db      	uxtb	r3, r3
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d007      	beq.n	8010eec <_ZN2FC2RC5setRCEtttttt+0x38>
 8010edc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010ede:	f240 729e 	movw	r2, #1950	; 0x79e
 8010ee2:	4293      	cmp	r3, r2
 8010ee4:	d902      	bls.n	8010eec <_ZN2FC2RC5setRCEtttttt+0x38>
		ModuleCommander::sendCommand(Command::MotorCalibration);
 8010ee6:	2009      	movs	r0, #9
 8010ee8:	f7ff f8e8 	bl	80100bc <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
	}
	start = true;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2201      	movs	r2, #1
 8010ef0:	761a      	strb	r2, [r3, #24]

	/* cotnroller publish */
	this->controllerPub.timestamp = microsecond();
 8010ef2:	f7ff ffa5 	bl	8010e40 <_ZL11microsecondv>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	460c      	mov	r4, r1
 8010efa:	68fa      	ldr	r2, [r7, #12]
 8010efc:	e9c2 3400 	strd	r3, r4, [r2]
	this->controllerPub.roll = roll;
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	897a      	ldrh	r2, [r7, #10]
 8010f04:	811a      	strh	r2, [r3, #8]
	this->controllerPub.pitch = pitch;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	893a      	ldrh	r2, [r7, #8]
 8010f0a:	815a      	strh	r2, [r3, #10]
	this->controllerPub.yaw = yaw;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	88fa      	ldrh	r2, [r7, #6]
 8010f10:	819a      	strh	r2, [r3, #12]
	this->controllerPub.throttle = throttle;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8010f16:	81da      	strh	r2, [r3, #14]
	msgBus.setController(this->controllerPub);
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	483c      	ldr	r0, [pc, #240]	; (8011010 <_ZN2FC2RC5setRCEtttttt+0x15c>)
 8010f1e:	f7ff ff7d 	bl	8010e1c <_ZN2FC6MsgBus13setControllerERKNS_10ControllerE>

	/* arming */
	struct ModeFlag modeFlag;
	msgBus.getModeFlag(&modeFlag);							/* current arm mode */
 8010f22:	f107 0310 	add.w	r3, r7, #16
 8010f26:	4619      	mov	r1, r3
 8010f28:	4839      	ldr	r0, [pc, #228]	; (8011010 <_ZN2FC2RC5setRCEtttttt+0x15c>)
 8010f2a:	f7fe fd03 	bl	800f934 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
	Command rcvArmFlag = Command::DisArm;						/* request arm mode */
 8010f2e:	2308      	movs	r3, #8
 8010f30:	627b      	str	r3, [r7, #36]	; 0x24
	if( armming > ARMING_THRESHOLD ) rcvArmFlag = Command::Arm;
 8010f32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010f34:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010f38:	4293      	cmp	r3, r2
 8010f3a:	d901      	bls.n	8010f40 <_ZN2FC2RC5setRCEtttttt+0x8c>
 8010f3c:	2307      	movs	r3, #7
 8010f3e:	627b      	str	r3, [r7, #36]	; 0x24
	if(modeFlag.armMode != rcvArmFlag && millisecond()-lastArmReq > 500){
 8010f40:	69bb      	ldr	r3, [r7, #24]
 8010f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f44:	429a      	cmp	r2, r3
 8010f46:	d00a      	beq.n	8010f5e <_ZN2FC2RC5setRCEtttttt+0xaa>
 8010f48:	f7ff ff9e 	bl	8010e88 <_ZL11millisecondv>
 8010f4c:	4602      	mov	r2, r0
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	691b      	ldr	r3, [r3, #16]
 8010f52:	1ad3      	subs	r3, r2, r3
 8010f54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010f58:	d901      	bls.n	8010f5e <_ZN2FC2RC5setRCEtttttt+0xaa>
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	e000      	b.n	8010f60 <_ZN2FC2RC5setRCEtttttt+0xac>
 8010f5e:	2300      	movs	r3, #0
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d007      	beq.n	8010f74 <_ZN2FC2RC5setRCEtttttt+0xc0>
		ModuleCommander::sendCommand(rcvArmFlag); /* send command */
 8010f64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f66:	f7ff f8a9 	bl	80100bc <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
		lastArmReq = millisecond();
 8010f6a:	f7ff ff8d 	bl	8010e88 <_ZL11millisecondv>
 8010f6e:	4602      	mov	r2, r0
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	611a      	str	r2, [r3, #16]
	}

	if(millisecond() - lastModeReq > 500){
 8010f74:	f7ff ff88 	bl	8010e88 <_ZL11millisecondv>
 8010f78:	4602      	mov	r2, r0
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	695b      	ldr	r3, [r3, #20]
 8010f7e:	1ad3      	subs	r3, r2, r3
 8010f80:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010f84:	bf8c      	ite	hi
 8010f86:	2301      	movhi	r3, #1
 8010f88:	2300      	movls	r3, #0
 8010f8a:	b2db      	uxtb	r3, r3
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d034      	beq.n	8010ffa <_ZN2FC2RC5setRCEtttttt+0x146>
		if(mode > FLIGHT_ATTITUDE_MODE_THRSHOLD){
 8010f90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010f94:	f240 726c 	movw	r2, #1900	; 0x76c
 8010f98:	4293      	cmp	r3, r2
 8010f9a:	d90b      	bls.n	8010fb4 <_ZN2FC2RC5setRCEtttttt+0x100>
			if(modeFlag.flightMode != Command::ControlAttitude){
 8010f9c:	69fb      	ldr	r3, [r7, #28]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d02b      	beq.n	8010ffa <_ZN2FC2RC5setRCEtttttt+0x146>
				ModuleCommander::sendCommand(Command::ControlAttitude); /* send command */
 8010fa2:	2000      	movs	r0, #0
 8010fa4:	f7ff f88a 	bl	80100bc <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 8010fa8:	f7ff ff6e 	bl	8010e88 <_ZL11millisecondv>
 8010fac:	4602      	mov	r2, r0
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	615a      	str	r2, [r3, #20]
 8010fb2:	e022      	b.n	8010ffa <_ZN2FC2RC5setRCEtttttt+0x146>
			}
		}
		else if(mode > FLIGHT_POSITION_MODE_THRSHOLD){
 8010fb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010fb8:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d90b      	bls.n	8010fd8 <_ZN2FC2RC5setRCEtttttt+0x124>
			if(modeFlag.flightMode != Command::ControlPosition){
 8010fc0:	69fb      	ldr	r3, [r7, #28]
 8010fc2:	2b01      	cmp	r3, #1
 8010fc4:	d019      	beq.n	8010ffa <_ZN2FC2RC5setRCEtttttt+0x146>
				ModuleCommander::sendCommand(Command::ControlPosition); /* send command */
 8010fc6:	2001      	movs	r0, #1
 8010fc8:	f7ff f878 	bl	80100bc <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 8010fcc:	f7ff ff5c 	bl	8010e88 <_ZL11millisecondv>
 8010fd0:	4602      	mov	r2, r0
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	615a      	str	r2, [r3, #20]
 8010fd6:	e010      	b.n	8010ffa <_ZN2FC2RC5setRCEtttttt+0x146>
			}
		}
		else if(mode > FLIGHT_AUTO_MODE_THRSHOLD){ /* FLIGHT_AUTO_MODE_THRSHOLD */
 8010fd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010fdc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010fe0:	4293      	cmp	r3, r2
 8010fe2:	d90a      	bls.n	8010ffa <_ZN2FC2RC5setRCEtttttt+0x146>
			if(modeFlag.flightMode != Command::AutoWaypoint){
 8010fe4:	69fb      	ldr	r3, [r7, #28]
 8010fe6:	2b02      	cmp	r3, #2
 8010fe8:	d007      	beq.n	8010ffa <_ZN2FC2RC5setRCEtttttt+0x146>
				ModuleCommander::sendCommand(Command::ControlPosition); /* send command */
 8010fea:	2001      	movs	r0, #1
 8010fec:	f7ff f866 	bl	80100bc <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 8010ff0:	f7ff ff4a 	bl	8010e88 <_ZL11millisecondv>
 8010ff4:	4602      	mov	r2, r0
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	615a      	str	r2, [r3, #20]
			}
		}
	}

	/* Freq class variable */
	freqCnt++;
 8010ffa:	4b06      	ldr	r3, [pc, #24]	; (8011014 <_ZN2FC2RC5setRCEtttttt+0x160>)
 8010ffc:	881b      	ldrh	r3, [r3, #0]
 8010ffe:	3301      	adds	r3, #1
 8011000:	b29a      	uxth	r2, r3
 8011002:	4b04      	ldr	r3, [pc, #16]	; (8011014 <_ZN2FC2RC5setRCEtttttt+0x160>)
 8011004:	801a      	strh	r2, [r3, #0]
}
 8011006:	bf00      	nop
 8011008:	372c      	adds	r7, #44	; 0x2c
 801100a:	46bd      	mov	sp, r7
 801100c:	bd90      	pop	{r4, r7, pc}
 801100e:	bf00      	nop
 8011010:	20000b98 	.word	0x20000b98
 8011014:	20000f70 	.word	0x20000f70

08011018 <_Z41__static_initialization_and_destruction_0ii>:
}
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	6039      	str	r1, [r7, #0]
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2b01      	cmp	r3, #1
 8011026:	d107      	bne.n	8011038 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8011028:	683b      	ldr	r3, [r7, #0]
 801102a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801102e:	4293      	cmp	r3, r2
 8011030:	d102      	bne.n	8011038 <_Z41__static_initialization_and_destruction_0ii+0x20>
RC rc;
 8011032:	4803      	ldr	r0, [pc, #12]	; (8011040 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8011034:	f7ff ff2f 	bl	8010e96 <_ZN2FC2RCC1Ev>
}
 8011038:	bf00      	nop
 801103a:	3708      	adds	r7, #8
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}
 8011040:	20000f50 	.word	0x20000f50

08011044 <_GLOBAL__sub_I__ZN2FC2rcE>:
 8011044:	b580      	push	{r7, lr}
 8011046:	af00      	add	r7, sp, #0
 8011048:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801104c:	2001      	movs	r0, #1
 801104e:	f7ff ffe3 	bl	8011018 <_Z41__static_initialization_and_destruction_0ii>
 8011052:	bd80      	pop	{r7, pc}

08011054 <_ZN2FC6MsgBus12setBodyAccelERKNS_9BodyAccelE>:
    SIMPLE_FUNC_IMPL(BodyAccel, BodyAccel, bodyAccel)
 8011054:	b4b0      	push	{r4, r5, r7}
 8011056:	b083      	sub	sp, #12
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
 801105c:	6039      	str	r1, [r7, #0]
 801105e:	687a      	ldr	r2, [r7, #4]
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	4614      	mov	r4, r2
 8011064:	461d      	mov	r5, r3
 8011066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801106a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801106e:	e884 0003 	stmia.w	r4, {r0, r1}
 8011072:	bf00      	nop
 8011074:	370c      	adds	r7, #12
 8011076:	46bd      	mov	sp, r7
 8011078:	bcb0      	pop	{r4, r5, r7}
 801107a:	4770      	bx	lr

0801107c <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 801107c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8011080:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 8011082:	4b0e      	ldr	r3, [pc, #56]	; (80110bc <_ZL11microsecondv+0x40>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	4619      	mov	r1, r3
 8011088:	f04f 0200 	mov.w	r2, #0
 801108c:	f04f 0b00 	mov.w	fp, #0
 8011090:	f04f 0c00 	mov.w	ip, #0
 8011094:	468c      	mov	ip, r1
 8011096:	f04f 0b00 	mov.w	fp, #0
 801109a:	4a09      	ldr	r2, [pc, #36]	; (80110c0 <_ZL11microsecondv+0x44>)
 801109c:	6812      	ldr	r2, [r2, #0]
 801109e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80110a0:	4611      	mov	r1, r2
 80110a2:	f04f 0200 	mov.w	r2, #0
 80110a6:	ea4b 0301 	orr.w	r3, fp, r1
 80110aa:	ea4c 0402 	orr.w	r4, ip, r2
}
 80110ae:	4618      	mov	r0, r3
 80110b0:	4621      	mov	r1, r4
 80110b2:	46bd      	mov	sp, r7
 80110b4:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80110b8:	4770      	bx	lr
 80110ba:	bf00      	nop
 80110bc:	20000f74 	.word	0x20000f74
 80110c0:	20010f68 	.word	0x20010f68

080110c4 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>:

    /*
     *  signal to AHRS main function
     *  this function is called by SensorAccel, SensorGyro (peripheral interface)
     */
    static inline void setSignal(enum AhrsSignal signal){
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b082      	sub	sp, #8
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	4603      	mov	r3, r0
 80110cc:	71fb      	strb	r3, [r7, #7]
    	switch(signal){
 80110ce:	79fb      	ldrb	r3, [r7, #7]
 80110d0:	2b01      	cmp	r3, #1
 80110d2:	d002      	beq.n	80110da <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x16>
 80110d4:	2b02      	cmp	r3, #2
 80110d6:	d008      	beq.n	80110ea <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x26>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromAccel);
        	break;
    	case AHRS_fromGyro:
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromGyro);
    	}
    }
 80110d8:	e00d      	b.n	80110f6 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x32>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromAccel);
 80110da:	4b09      	ldr	r3, [pc, #36]	; (8011100 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x3c>)
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	2101      	movs	r1, #1
 80110e0:	4618      	mov	r0, r3
 80110e2:	f00f fe1f 	bl	8020d24 <osThreadFlagsSet>
        	break;
 80110e6:	bf00      	nop
    }
 80110e8:	e005      	b.n	80110f6 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x32>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromGyro);
 80110ea:	4b05      	ldr	r3, [pc, #20]	; (8011100 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x3c>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	2102      	movs	r1, #2
 80110f0:	4618      	mov	r0, r3
 80110f2:	f00f fe17 	bl	8020d24 <osThreadFlagsSet>
    }
 80110f6:	bf00      	nop
 80110f8:	3708      	adds	r7, #8
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}
 80110fe:	bf00      	nop
 8011100:	2000e314 	.word	0x2000e314

08011104 <_ZN2FC11SensorAccelC1Ev>:

namespace FC{

SensorAccel sensorAccel;

SensorAccel::SensorAccel()
 8011104:	b480      	push	{r7}
 8011106:	b083      	sub	sp, #12
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
: bodyAccel{0,}, biasX(0), biasY(0), biasZ(0)
, averX(0), averY(0), averZ(0)
, calBiasFlag(false), averageIndex(0)
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	461a      	mov	r2, r3
 8011110:	2300      	movs	r3, #0
 8011112:	6013      	str	r3, [r2, #0]
 8011114:	6053      	str	r3, [r2, #4]
 8011116:	6093      	str	r3, [r2, #8]
 8011118:	60d3      	str	r3, [r2, #12]
 801111a:	6113      	str	r3, [r2, #16]
 801111c:	6153      	str	r3, [r2, #20]
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f04f 0200 	mov.w	r2, #0
 8011124:	619a      	str	r2, [r3, #24]
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f04f 0200 	mov.w	r2, #0
 801112c:	61da      	str	r2, [r3, #28]
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f04f 0200 	mov.w	r2, #0
 8011134:	621a      	str	r2, [r3, #32]
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	f04f 0200 	mov.w	r2, #0
 801113c:	625a      	str	r2, [r3, #36]	; 0x24
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f04f 0200 	mov.w	r2, #0
 8011144:	629a      	str	r2, [r3, #40]	; 0x28
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f04f 0200 	mov.w	r2, #0
 801114c:	62da      	str	r2, [r3, #44]	; 0x2c
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2200      	movs	r2, #0
 8011152:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2200      	movs	r2, #0
 801115a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
{}
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	4618      	mov	r0, r3
 8011162:	370c      	adds	r7, #12
 8011164:	46bd      	mov	sp, r7
 8011166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116a:	4770      	bx	lr

0801116c <_ZN2FC11SensorAccel7setBiasEv>:

void SensorAccel::setBias(){
 801116c:	b480      	push	{r7}
 801116e:	b083      	sub	sp, #12
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
	calBiasFlag = true;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2201      	movs	r2, #1
 8011178:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	averageIndex = 0;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2200      	movs	r2, #0
 8011180:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	averX = 0;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f04f 0200 	mov.w	r2, #0
 801118a:	625a      	str	r2, [r3, #36]	; 0x24
	averY = 0;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f04f 0200 	mov.w	r2, #0
 8011192:	629a      	str	r2, [r3, #40]	; 0x28
	averZ = 0;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f04f 0200 	mov.w	r2, #0
 801119a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801119c:	bf00      	nop
 801119e:	370c      	adds	r7, #12
 80111a0:	46bd      	mov	sp, r7
 80111a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a6:	4770      	bx	lr

080111a8 <_ZN2FC11SensorAccel8setAccelEfff>:

void SensorAccel::setAccel(float x, float y, float z){
 80111a8:	b590      	push	{r4, r7, lr}
 80111aa:	b085      	sub	sp, #20
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	60f8      	str	r0, [r7, #12]
 80111b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80111b4:	edc7 0a01 	vstr	s1, [r7, #4]
 80111b8:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 80111bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80111c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80111c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111c8:	d10d      	bne.n	80111e6 <_ZN2FC11SensorAccel8setAccelEfff+0x3e>
 80111ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80111ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80111d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111d6:	d106      	bne.n	80111e6 <_ZN2FC11SensorAccel8setAccelEfff+0x3e>
 80111d8:	edd7 7a00 	vldr	s15, [r7]
 80111dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80111e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111e4:	d041      	beq.n	801126a <_ZN2FC11SensorAccel8setAccelEfff+0xc2>

	if(calBiasFlag) calAverage(x, y, z);
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d008      	beq.n	8011202 <_ZN2FC11SensorAccel8setAccelEfff+0x5a>
 80111f0:	ed97 1a00 	vldr	s2, [r7]
 80111f4:	edd7 0a01 	vldr	s1, [r7, #4]
 80111f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80111fc:	68f8      	ldr	r0, [r7, #12]
 80111fe:	f000 f83f 	bl	8011280 <_ZN2FC11SensorAccel10calAverageEfff>

	this->bodyAccel.timestamp = microsecond();
 8011202:	f7ff ff3b 	bl	801107c <_ZL11microsecondv>
 8011206:	4603      	mov	r3, r0
 8011208:	460c      	mov	r4, r1
 801120a:	68fa      	ldr	r2, [r7, #12]
 801120c:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyAccel.xyz[0] = x - biasX;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	edd3 7a06 	vldr	s15, [r3, #24]
 8011216:	ed97 7a02 	vldr	s14, [r7, #8]
 801121a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	edc3 7a02 	vstr	s15, [r3, #8]
	this->bodyAccel.xyz[1] = y - biasY;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	edd3 7a07 	vldr	s15, [r3, #28]
 801122a:	ed97 7a01 	vldr	s14, [r7, #4]
 801122e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	edc3 7a03 	vstr	s15, [r3, #12]
	this->bodyAccel.xyz[2] = z - biasZ;
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	edd3 7a08 	vldr	s15, [r3, #32]
 801123e:	ed97 7a00 	vldr	s14, [r7]
 8011242:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	edc3 7a04 	vstr	s15, [r3, #16]
	msgBus.setBodyAccel(this->bodyAccel);
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	4619      	mov	r1, r3
 8011250:	4808      	ldr	r0, [pc, #32]	; (8011274 <_ZN2FC11SensorAccel8setAccelEfff+0xcc>)
 8011252:	f7ff feff 	bl	8011054 <_ZN2FC6MsgBus12setBodyAccelERKNS_9BodyAccelE>
	ModuleAHRS::setSignal(AHRS_fromAccel);
 8011256:	2001      	movs	r0, #1
 8011258:	f7ff ff34 	bl	80110c4 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>

	/* Freq class variable */
	freqCnt++;
 801125c:	4b06      	ldr	r3, [pc, #24]	; (8011278 <_ZN2FC11SensorAccel8setAccelEfff+0xd0>)
 801125e:	881b      	ldrh	r3, [r3, #0]
 8011260:	3301      	adds	r3, #1
 8011262:	b29a      	uxth	r2, r3
 8011264:	4b04      	ldr	r3, [pc, #16]	; (8011278 <_ZN2FC11SensorAccel8setAccelEfff+0xd0>)
 8011266:	801a      	strh	r2, [r3, #0]
 8011268:	e000      	b.n	801126c <_ZN2FC11SensorAccel8setAccelEfff+0xc4>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 801126a:	bf00      	nop
}
 801126c:	3714      	adds	r7, #20
 801126e:	46bd      	mov	sp, r7
 8011270:	bd90      	pop	{r4, r7, pc}
 8011272:	bf00      	nop
 8011274:	20000b98 	.word	0x20000b98
 8011278:	20000fb0 	.word	0x20000fb0
 801127c:	00000000 	.word	0x00000000

08011280 <_ZN2FC11SensorAccel10calAverageEfff>:

void SensorAccel::calAverage(float x, float y, float z){
 8011280:	b590      	push	{r4, r7, lr}
 8011282:	b087      	sub	sp, #28
 8011284:	af00      	add	r7, sp, #0
 8011286:	60f8      	str	r0, [r7, #12]
 8011288:	ed87 0a02 	vstr	s0, [r7, #8]
 801128c:	edc7 0a01 	vstr	s1, [r7, #4]
 8011290:	ed87 1a00 	vstr	s2, [r7]
	float alpha = (averageIndex-1)/averageIndex;
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801129a:	3b01      	subs	r3, #1
 801129c:	68fa      	ldr	r2, [r7, #12]
 801129e:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 80112a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80112a6:	ee07 3a90 	vmov	s15, r3
 80112aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80112ae:	edc7 7a05 	vstr	s15, [r7, #20]
	averX = alpha*averX + (1-alpha)*x;
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80112b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80112bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80112c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80112c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80112c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80112cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80112d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80112d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	averY = alpha*averY + (1-alpha)*y;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80112e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80112e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80112ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80112f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80112f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80112f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80112fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	averZ = alpha*averZ + (1-alpha)*z;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8011310:	edd7 7a05 	vldr	s15, [r7, #20]
 8011314:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011318:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801131c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011320:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011324:	edd7 7a00 	vldr	s15, [r7]
 8011328:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801132c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	averageIndex++;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801133c:	3301      	adds	r3, #1
 801133e:	b2da      	uxtb	r2, r3
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	if(averageIndex > AVERAGE_SIZE) {
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801134c:	2b14      	cmp	r3, #20
 801134e:	d91e      	bls.n	801138e <_ZN2FC11SensorAccel10calAverageEfff+0x10e>
		calBiasFlag = false;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	2200      	movs	r2, #0
 8011354:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		biasX = averX;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	619a      	str	r2, [r3, #24]
		biasY = averY;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	61da      	str	r2, [r3, #28]
		biasZ = averZ - FC_GRAVITY_ACCEERATION;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801136c:	4618      	mov	r0, r3
 801136e:	f7ef f8f3 	bl	8000558 <__aeabi_f2d>
 8011372:	a309      	add	r3, pc, #36	; (adr r3, 8011398 <_ZN2FC11SensorAccel10calAverageEfff+0x118>)
 8011374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011378:	f7ee ff8e 	bl	8000298 <__aeabi_dsub>
 801137c:	4603      	mov	r3, r0
 801137e:	460c      	mov	r4, r1
 8011380:	4618      	mov	r0, r3
 8011382:	4621      	mov	r1, r4
 8011384:	f7ef fc38 	bl	8000bf8 <__aeabi_d2f>
 8011388:	4602      	mov	r2, r0
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	621a      	str	r2, [r3, #32]
	}
}
 801138e:	bf00      	nop
 8011390:	371c      	adds	r7, #28
 8011392:	46bd      	mov	sp, r7
 8011394:	bd90      	pop	{r4, r7, pc}
 8011396:	bf00      	nop
 8011398:	3a92a305 	.word	0x3a92a305
 801139c:	40239d01 	.word	0x40239d01

080113a0 <_Z41__static_initialization_and_destruction_0ii>:

}
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b082      	sub	sp, #8
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
 80113a8:	6039      	str	r1, [r7, #0]
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	2b01      	cmp	r3, #1
 80113ae:	d107      	bne.n	80113c0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80113b6:	4293      	cmp	r3, r2
 80113b8:	d102      	bne.n	80113c0 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorAccel sensorAccel;
 80113ba:	4803      	ldr	r0, [pc, #12]	; (80113c8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80113bc:	f7ff fea2 	bl	8011104 <_ZN2FC11SensorAccelC1Ev>
}
 80113c0:	bf00      	nop
 80113c2:	3708      	adds	r7, #8
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}
 80113c8:	20000f78 	.word	0x20000f78

080113cc <_GLOBAL__sub_I__ZN2FC11sensorAccelE>:
 80113cc:	b580      	push	{r7, lr}
 80113ce:	af00      	add	r7, sp, #0
 80113d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80113d4:	2001      	movs	r0, #1
 80113d6:	f7ff ffe3 	bl	80113a0 <_Z41__static_initialization_and_destruction_0ii>
 80113da:	bd80      	pop	{r7, pc}

080113dc <_ZN2FC6MsgBus12setBarometerERKNS_9BarometerE>:
    SIMPLE_FUNC_IMPL(Barometer, Barometer, barometer)
 80113dc:	b4b0      	push	{r4, r5, r7}
 80113de:	b083      	sub	sp, #12
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6039      	str	r1, [r7, #0]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	683a      	ldr	r2, [r7, #0]
 80113ea:	f103 0490 	add.w	r4, r3, #144	; 0x90
 80113ee:	4615      	mov	r5, r2
 80113f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80113f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80113f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80113f8:	e884 0003 	stmia.w	r4, {r0, r1}
 80113fc:	bf00      	nop
 80113fe:	370c      	adds	r7, #12
 8011400:	46bd      	mov	sp, r7
 8011402:	bcb0      	pop	{r4, r5, r7}
 8011404:	4770      	bx	lr
	...

08011408 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8011408:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 801140c:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 801140e:	4b0e      	ldr	r3, [pc, #56]	; (8011448 <_ZL11microsecondv+0x40>)
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	4619      	mov	r1, r3
 8011414:	f04f 0200 	mov.w	r2, #0
 8011418:	f04f 0b00 	mov.w	fp, #0
 801141c:	f04f 0c00 	mov.w	ip, #0
 8011420:	468c      	mov	ip, r1
 8011422:	f04f 0b00 	mov.w	fp, #0
 8011426:	4a09      	ldr	r2, [pc, #36]	; (801144c <_ZL11microsecondv+0x44>)
 8011428:	6812      	ldr	r2, [r2, #0]
 801142a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801142c:	4611      	mov	r1, r2
 801142e:	f04f 0200 	mov.w	r2, #0
 8011432:	ea4b 0301 	orr.w	r3, fp, r1
 8011436:	ea4c 0402 	orr.w	r4, ip, r2
}
 801143a:	4618      	mov	r0, r3
 801143c:	4621      	mov	r1, r4
 801143e:	46bd      	mov	sp, r7
 8011440:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8011444:	4770      	bx	lr
 8011446:	bf00      	nop
 8011448:	20000fb4 	.word	0x20000fb4
 801144c:	20010f68 	.word	0x20010f68

08011450 <_ZN2FC10SensorBaroC1Ev>:

namespace FC{

class SensorBaro : public Freq<SensorBaro>{
public:
	SensorBaro()
 8011450:	b480      	push	{r7}
 8011452:	b083      	sub	sp, #12
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
	: barometerPub{0, }
	, seaLevelPressure(1013.25)
	, pressure(0)
	, temperature(0)
	, altitude(0)
	, refAltitude(0)
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	461a      	mov	r2, r3
 801145c:	2300      	movs	r3, #0
 801145e:	6013      	str	r3, [r2, #0]
 8011460:	6053      	str	r3, [r2, #4]
 8011462:	6093      	str	r3, [r2, #8]
 8011464:	60d3      	str	r3, [r2, #12]
 8011466:	6113      	str	r3, [r2, #16]
 8011468:	6153      	str	r3, [r2, #20]
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	4a0c      	ldr	r2, [pc, #48]	; (80114a0 <_ZN2FC10SensorBaroC1Ev+0x50>)
 801146e:	619a      	str	r2, [r3, #24]
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	f04f 0200 	mov.w	r2, #0
 8011476:	61da      	str	r2, [r3, #28]
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	f04f 0200 	mov.w	r2, #0
 801147e:	621a      	str	r2, [r3, #32]
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	f04f 0200 	mov.w	r2, #0
 8011486:	625a      	str	r2, [r3, #36]	; 0x24
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f04f 0200 	mov.w	r2, #0
 801148e:	629a      	str	r2, [r3, #40]	; 0x28
	{}
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	4618      	mov	r0, r3
 8011494:	370c      	adds	r7, #12
 8011496:	46bd      	mov	sp, r7
 8011498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149c:	4770      	bx	lr
 801149e:	bf00      	nop
 80114a0:	447d5000 	.word	0x447d5000

080114a4 <_ZN2FC10SensorBaro7setBaroEff>:

namespace FC{

SensorBaro sensorBaro;

void SensorBaro::setBaro(float pressure, float temperature){
 80114a4:	b590      	push	{r4, r7, lr}
 80114a6:	b085      	sub	sp, #20
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	60f8      	str	r0, [r7, #12]
 80114ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80114b0:	edc7 0a01 	vstr	s1, [r7, #4]
	/* invalid pressure */
	if(pressure > 1200.0 || pressure < 900.0) return;
 80114b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80114b8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8011558 <_ZN2FC10SensorBaro7setBaroEff+0xb4>
 80114bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80114c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114c4:	dc43      	bgt.n	801154e <_ZN2FC10SensorBaro7setBaroEff+0xaa>
 80114c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80114ca:	ed9f 7a24 	vldr	s14, [pc, #144]	; 801155c <_ZN2FC10SensorBaro7setBaroEff+0xb8>
 80114ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80114d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114d6:	d43a      	bmi.n	801154e <_ZN2FC10SensorBaro7setBaroEff+0xaa>

	this->pressure = pressure;
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	68ba      	ldr	r2, [r7, #8]
 80114dc:	61da      	str	r2, [r3, #28]
	this->temperature = temperature;
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	687a      	ldr	r2, [r7, #4]
 80114e2:	621a      	str	r2, [r3, #32]
	this->altitude = calAltitude(seaLevelPressure, pressure);
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	edd3 7a06 	vldr	s15, [r3, #24]
 80114ea:	edd7 0a02 	vldr	s1, [r7, #8]
 80114ee:	eeb0 0a67 	vmov.f32	s0, s15
 80114f2:	68f8      	ldr	r0, [r7, #12]
 80114f4:	f000 f86c 	bl	80115d0 <_ZN2FC10SensorBaro11calAltitudeEff>
 80114f8:	eef0 7a40 	vmov.f32	s15, s0
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	this->barometerPub.timestamp = microsecond();
 8011502:	f7ff ff81 	bl	8011408 <_ZL11microsecondv>
 8011506:	4603      	mov	r3, r0
 8011508:	460c      	mov	r4, r1
 801150a:	68fa      	ldr	r2, [r7, #12]
 801150c:	e9c2 3400 	strd	r3, r4, [r2]
	this->barometerPub.pressure = this->pressure;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	69da      	ldr	r2, [r3, #28]
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	609a      	str	r2, [r3, #8]
	this->barometerPub.temperature = this->temperature;
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	6a1a      	ldr	r2, [r3, #32]
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	60da      	str	r2, [r3, #12]
	this->barometerPub.altitude = this->altitude - refAltitude;
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801152c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	edc3 7a04 	vstr	s15, [r3, #16]

	msgBus.setBarometer(this->barometerPub);
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	4619      	mov	r1, r3
 801153a:	4809      	ldr	r0, [pc, #36]	; (8011560 <_ZN2FC10SensorBaro7setBaroEff+0xbc>)
 801153c:	f7ff ff4e 	bl	80113dc <_ZN2FC6MsgBus12setBarometerERKNS_9BarometerE>

	/* Freq class variable */
	freqCnt++;
 8011540:	4b08      	ldr	r3, [pc, #32]	; (8011564 <_ZN2FC10SensorBaro7setBaroEff+0xc0>)
 8011542:	881b      	ldrh	r3, [r3, #0]
 8011544:	3301      	adds	r3, #1
 8011546:	b29a      	uxth	r2, r3
 8011548:	4b06      	ldr	r3, [pc, #24]	; (8011564 <_ZN2FC10SensorBaro7setBaroEff+0xc0>)
 801154a:	801a      	strh	r2, [r3, #0]
 801154c:	e000      	b.n	8011550 <_ZN2FC10SensorBaro7setBaroEff+0xac>
	if(pressure > 1200.0 || pressure < 900.0) return;
 801154e:	bf00      	nop
}
 8011550:	3714      	adds	r7, #20
 8011552:	46bd      	mov	sp, r7
 8011554:	bd90      	pop	{r4, r7, pc}
 8011556:	bf00      	nop
 8011558:	44960000 	.word	0x44960000
 801155c:	44610000 	.word	0x44610000
 8011560:	20000b98 	.word	0x20000b98
 8011564:	20000fe8 	.word	0x20000fe8

08011568 <_ZN2FC10SensorBaro19setSeaLevelPressureEf>:

void SensorBaro::setSeaLevelPressure(float altitude){
 8011568:	b580      	push	{r7, lr}
 801156a:	b082      	sub	sp, #8
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
 8011570:	ed87 0a00 	vstr	s0, [r7]
	seaLevelPressure = calSeaLevelPressure(altitude, pressure);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	edd3 7a07 	vldr	s15, [r3, #28]
 801157a:	eef0 0a67 	vmov.f32	s1, s15
 801157e:	ed97 0a00 	vldr	s0, [r7]
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	f000 f86c 	bl	8011660 <_ZN2FC10SensorBaro19calSeaLevelPressureEff>
 8011588:	eef0 7a40 	vmov.f32	s15, s0
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8011592:	bf00      	nop
 8011594:	3708      	adds	r7, #8
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}

0801159a <_ZN2FC10SensorBaro14setRefAltitudeEv>:

void SensorBaro::setRefAltitude(){
 801159a:	b580      	push	{r7, lr}
 801159c:	b082      	sub	sp, #8
 801159e:	af00      	add	r7, sp, #0
 80115a0:	6078      	str	r0, [r7, #4]
	refAltitude = calAltitude(seaLevelPressure, pressure);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	ed93 7a07 	vldr	s14, [r3, #28]
 80115ae:	eef0 0a47 	vmov.f32	s1, s14
 80115b2:	eeb0 0a67 	vmov.f32	s0, s15
 80115b6:	6878      	ldr	r0, [r7, #4]
 80115b8:	f000 f80a 	bl	80115d0 <_ZN2FC10SensorBaro11calAltitudeEff>
 80115bc:	eef0 7a40 	vmov.f32	s15, s0
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80115c6:	bf00      	nop
 80115c8:	3708      	adds	r7, #8
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
	...

080115d0 <_ZN2FC10SensorBaro11calAltitudeEff>:

float SensorBaro::calAltitude(float seaLevel, float pressure){
 80115d0:	b590      	push	{r4, r7, lr}
 80115d2:	b085      	sub	sp, #20
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	60f8      	str	r0, [r7, #12]
 80115d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80115dc:	edc7 0a01 	vstr	s1, [r7, #4]
	return 44330.0 * (1.0 - pow(pressure / seaLevel, 0.1903));
 80115e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80115e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80115e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80115ec:	ee16 0a90 	vmov	r0, s13
 80115f0:	f7ee ffb2 	bl	8000558 <__aeabi_f2d>
 80115f4:	4603      	mov	r3, r0
 80115f6:	460c      	mov	r4, r1
 80115f8:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8011648 <_ZN2FC10SensorBaro11calAltitudeEff+0x78>
 80115fc:	ec44 3b10 	vmov	d0, r3, r4
 8011600:	f013 fe80 	bl	8025304 <pow>
 8011604:	ec54 3b10 	vmov	r3, r4, d0
 8011608:	461a      	mov	r2, r3
 801160a:	4623      	mov	r3, r4
 801160c:	f04f 0000 	mov.w	r0, #0
 8011610:	4911      	ldr	r1, [pc, #68]	; (8011658 <_ZN2FC10SensorBaro11calAltitudeEff+0x88>)
 8011612:	f7ee fe41 	bl	8000298 <__aeabi_dsub>
 8011616:	4603      	mov	r3, r0
 8011618:	460c      	mov	r4, r1
 801161a:	4618      	mov	r0, r3
 801161c:	4621      	mov	r1, r4
 801161e:	a30c      	add	r3, pc, #48	; (adr r3, 8011650 <_ZN2FC10SensorBaro11calAltitudeEff+0x80>)
 8011620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011624:	f7ee fff0 	bl	8000608 <__aeabi_dmul>
 8011628:	4603      	mov	r3, r0
 801162a:	460c      	mov	r4, r1
 801162c:	4618      	mov	r0, r3
 801162e:	4621      	mov	r1, r4
 8011630:	f7ef fae2 	bl	8000bf8 <__aeabi_d2f>
 8011634:	4603      	mov	r3, r0
 8011636:	ee07 3a90 	vmov	s15, r3
}
 801163a:	eeb0 0a67 	vmov.f32	s0, s15
 801163e:	3714      	adds	r7, #20
 8011640:	46bd      	mov	sp, r7
 8011642:	bd90      	pop	{r4, r7, pc}
 8011644:	f3af 8000 	nop.w
 8011648:	1a36e2eb 	.word	0x1a36e2eb
 801164c:	3fc85bc0 	.word	0x3fc85bc0
 8011650:	00000000 	.word	0x00000000
 8011654:	40e5a540 	.word	0x40e5a540
 8011658:	3ff00000 	.word	0x3ff00000
 801165c:	00000000 	.word	0x00000000

08011660 <_ZN2FC10SensorBaro19calSeaLevelPressureEff>:

float SensorBaro::calSeaLevelPressure(float altitude, float pressure){
 8011660:	b5b0      	push	{r4, r5, r7, lr}
 8011662:	b084      	sub	sp, #16
 8011664:	af00      	add	r7, sp, #0
 8011666:	60f8      	str	r0, [r7, #12]
 8011668:	ed87 0a02 	vstr	s0, [r7, #8]
 801166c:	edc7 0a01 	vstr	s1, [r7, #4]
	return pressure / pow(1.0 - (altitude / 44330.0), 5.255);
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f7ee ff71 	bl	8000558 <__aeabi_f2d>
 8011676:	4604      	mov	r4, r0
 8011678:	460d      	mov	r5, r1
 801167a:	68b8      	ldr	r0, [r7, #8]
 801167c:	f7ee ff6c 	bl	8000558 <__aeabi_f2d>
 8011680:	a318      	add	r3, pc, #96	; (adr r3, 80116e4 <_ZN2FC10SensorBaro19calSeaLevelPressureEff+0x84>)
 8011682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011686:	f7ef f8e9 	bl	800085c <__aeabi_ddiv>
 801168a:	4602      	mov	r2, r0
 801168c:	460b      	mov	r3, r1
 801168e:	f04f 0000 	mov.w	r0, #0
 8011692:	4913      	ldr	r1, [pc, #76]	; (80116e0 <_ZN2FC10SensorBaro19calSeaLevelPressureEff+0x80>)
 8011694:	f7ee fe00 	bl	8000298 <__aeabi_dsub>
 8011698:	4602      	mov	r2, r0
 801169a:	460b      	mov	r3, r1
 801169c:	ec43 2b17 	vmov	d7, r2, r3
 80116a0:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 80116d8 <_ZN2FC10SensorBaro19calSeaLevelPressureEff+0x78>
 80116a4:	eeb0 0a47 	vmov.f32	s0, s14
 80116a8:	eef0 0a67 	vmov.f32	s1, s15
 80116ac:	f013 fe2a 	bl	8025304 <pow>
 80116b0:	ec53 2b10 	vmov	r2, r3, d0
 80116b4:	4620      	mov	r0, r4
 80116b6:	4629      	mov	r1, r5
 80116b8:	f7ef f8d0 	bl	800085c <__aeabi_ddiv>
 80116bc:	4603      	mov	r3, r0
 80116be:	460c      	mov	r4, r1
 80116c0:	4618      	mov	r0, r3
 80116c2:	4621      	mov	r1, r4
 80116c4:	f7ef fa98 	bl	8000bf8 <__aeabi_d2f>
 80116c8:	4603      	mov	r3, r0
 80116ca:	ee07 3a90 	vmov	s15, r3
}
 80116ce:	eeb0 0a67 	vmov.f32	s0, s15
 80116d2:	3710      	adds	r7, #16
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bdb0      	pop	{r4, r5, r7, pc}
 80116d8:	b851eb85 	.word	0xb851eb85
 80116dc:	4015051e 	.word	0x4015051e
 80116e0:	3ff00000 	.word	0x3ff00000
 80116e4:	00000000 	.word	0x00000000
 80116e8:	40e5a540 	.word	0x40e5a540

080116ec <_Z41__static_initialization_and_destruction_0ii>:


}
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b082      	sub	sp, #8
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	6039      	str	r1, [r7, #0]
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2b01      	cmp	r3, #1
 80116fa:	d107      	bne.n	801170c <_Z41__static_initialization_and_destruction_0ii+0x20>
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011702:	4293      	cmp	r3, r2
 8011704:	d102      	bne.n	801170c <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorBaro sensorBaro;
 8011706:	4803      	ldr	r0, [pc, #12]	; (8011714 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8011708:	f7ff fea2 	bl	8011450 <_ZN2FC10SensorBaroC1Ev>
}
 801170c:	bf00      	nop
 801170e:	3708      	adds	r7, #8
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}
 8011714:	20000fb8 	.word	0x20000fb8

08011718 <_GLOBAL__sub_I__ZN2FC10sensorBaroE>:
 8011718:	b580      	push	{r7, lr}
 801171a:	af00      	add	r7, sp, #0
 801171c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011720:	2001      	movs	r0, #1
 8011722:	f7ff ffe3 	bl	80116ec <_Z41__static_initialization_and_destruction_0ii>
 8011726:	bd80      	pop	{r7, pc}

08011728 <_ZN2FC6MsgBus6setGPSERKNS_3GPSE>:
    SIMPLE_FUNC_IMPL(GPS, GPS, gps)
 8011728:	b580      	push	{r7, lr}
 801172a:	b082      	sub	sp, #8
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
 8011730:	6039      	str	r1, [r7, #0]
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	683a      	ldr	r2, [r7, #0]
 8011736:	3348      	adds	r3, #72	; 0x48
 8011738:	4611      	mov	r1, r2
 801173a:	2248      	movs	r2, #72	; 0x48
 801173c:	4618      	mov	r0, r3
 801173e:	f017 f80b 	bl	8028758 <memcpy>
 8011742:	bf00      	nop
 8011744:	3708      	adds	r7, #8
 8011746:	46bd      	mov	sp, r7
 8011748:	bd80      	pop	{r7, pc}
	...

0801174c <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 801174c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8011750:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 8011752:	4b0e      	ldr	r3, [pc, #56]	; (801178c <_ZL11microsecondv+0x40>)
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	4619      	mov	r1, r3
 8011758:	f04f 0200 	mov.w	r2, #0
 801175c:	f04f 0b00 	mov.w	fp, #0
 8011760:	f04f 0c00 	mov.w	ip, #0
 8011764:	468c      	mov	ip, r1
 8011766:	f04f 0b00 	mov.w	fp, #0
 801176a:	4a09      	ldr	r2, [pc, #36]	; (8011790 <_ZL11microsecondv+0x44>)
 801176c:	6812      	ldr	r2, [r2, #0]
 801176e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011770:	4611      	mov	r1, r2
 8011772:	f04f 0200 	mov.w	r2, #0
 8011776:	ea4b 0301 	orr.w	r3, fp, r1
 801177a:	ea4c 0402 	orr.w	r4, ip, r2
}
 801177e:	4618      	mov	r0, r3
 8011780:	4621      	mov	r1, r4
 8011782:	46bd      	mov	sp, r7
 8011784:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8011788:	4770      	bx	lr
 801178a:	bf00      	nop
 801178c:	20000fec 	.word	0x20000fec
 8011790:	20010f68 	.word	0x20010f68

08011794 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 8011794:	b580      	push	{r7, lr}
 8011796:	b082      	sub	sp, #8
 8011798:	af00      	add	r7, sp, #0
 801179a:	ed87 0a01 	vstr	s0, [r7, #4]
 801179e:	ed97 0a01 	vldr	s0, [r7, #4]
 80117a2:	f013 fc2d 	bl	8025000 <cosf>
 80117a6:	eef0 7a40 	vmov.f32	s15, s0
 80117aa:	eeb0 0a67 	vmov.f32	s0, s15
 80117ae:	3708      	adds	r7, #8
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}

080117b4 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b082      	sub	sp, #8
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80117be:	ed97 0a01 	vldr	s0, [r7, #4]
 80117c2:	f013 fc9f 	bl	8025104 <sinf>
 80117c6:	eef0 7a40 	vmov.f32	s15, s0
 80117ca:	eeb0 0a67 	vmov.f32	s0, s15
 80117ce:	3708      	adds	r7, #8
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}
 80117d4:	0000      	movs	r0, r0
	...

080117d8 <_ZN2FC9SensorGPS6setGPSEddfffffhhy>:
SensorGPS sensorGPS;

void SensorGPS::setGPS(double lat, double lon, float alt,
        			   float vel, float direction, float hdop, float vdop,
					   uint8_t numSat, uint8_t fixType, uint64_t UtcUsec)
{
 80117d8:	b590      	push	{r4, r7, lr}
 80117da:	b091      	sub	sp, #68	; 0x44
 80117dc:	af00      	add	r7, sp, #0
 80117de:	62f8      	str	r0, [r7, #44]	; 0x2c
 80117e0:	ed87 0b08 	vstr	d0, [r7, #32]
 80117e4:	ed87 1b06 	vstr	d1, [r7, #24]
 80117e8:	ed87 2a0a 	vstr	s4, [r7, #40]	; 0x28
 80117ec:	edc7 2a05 	vstr	s5, [r7, #20]
 80117f0:	ed87 3a04 	vstr	s6, [r7, #16]
 80117f4:	edc7 3a03 	vstr	s7, [r7, #12]
 80117f8:	ed87 4a02 	vstr	s8, [r7, #8]
 80117fc:	460b      	mov	r3, r1
 80117fe:	71fb      	strb	r3, [r7, #7]
 8011800:	4613      	mov	r3, r2
 8011802:	71bb      	strb	r3, [r7, #6]

	/* calculate velocity NED  */
	float radDirection = direction*M_PI/180.0;
 8011804:	6938      	ldr	r0, [r7, #16]
 8011806:	f7ee fea7 	bl	8000558 <__aeabi_f2d>
 801180a:	a33e      	add	r3, pc, #248	; (adr r3, 8011904 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x12c>)
 801180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011810:	f7ee fefa 	bl	8000608 <__aeabi_dmul>
 8011814:	4603      	mov	r3, r0
 8011816:	460c      	mov	r4, r1
 8011818:	4618      	mov	r0, r3
 801181a:	4621      	mov	r1, r4
 801181c:	f04f 0200 	mov.w	r2, #0
 8011820:	4b35      	ldr	r3, [pc, #212]	; (80118f8 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x120>)
 8011822:	f7ef f81b 	bl	800085c <__aeabi_ddiv>
 8011826:	4603      	mov	r3, r0
 8011828:	460c      	mov	r4, r1
 801182a:	4618      	mov	r0, r3
 801182c:	4621      	mov	r1, r4
 801182e:	f7ef f9e3 	bl	8000bf8 <__aeabi_d2f>
 8011832:	4603      	mov	r3, r0
 8011834:	63fb      	str	r3, [r7, #60]	; 0x3c
	float velN = std::cos(radDirection)*vel;
 8011836:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 801183a:	f7ff ffab 	bl	8011794 <_ZSt3cosf>
 801183e:	eeb0 7a40 	vmov.f32	s14, s0
 8011842:	edd7 7a05 	vldr	s15, [r7, #20]
 8011846:	ee67 7a87 	vmul.f32	s15, s15, s14
 801184a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float velE = std::sin(radDirection)*vel;
 801184e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8011852:	f7ff ffaf 	bl	80117b4 <_ZSt3sinf>
 8011856:	eeb0 7a40 	vmov.f32	s14, s0
 801185a:	edd7 7a05 	vldr	s15, [r7, #20]
 801185e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011862:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	this->gps.timestamp = microsecond();
 8011866:	f7ff ff71 	bl	801174c <_ZL11microsecondv>
 801186a:	4603      	mov	r3, r0
 801186c:	460c      	mov	r4, r1
 801186e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011870:	e9c2 3400 	strd	r3, r4, [r2]
	this->gps.timestampUTC = UtcUsec;
 8011874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011876:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 801187a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	this->gps.lat = lat;
 801187e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011880:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8011884:	e9c2 3404 	strd	r3, r4, [r2, #16]
	this->gps.lon = lon;
 8011888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801188a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801188e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	this->gps.alt = alt;
 8011892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011896:	621a      	str	r2, [r3, #32]

	this->gps.vel = vel;
 8011898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801189a:	697a      	ldr	r2, [r7, #20]
 801189c:	625a      	str	r2, [r3, #36]	; 0x24
	this->gps.velN = velN;
 801189e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80118a2:	629a      	str	r2, [r3, #40]	; 0x28
	this->gps.velE = velE;
 80118a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80118a8:	62da      	str	r2, [r3, #44]	; 0x2c
	this->gps.velD = 0; /* ??? */
 80118aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ac:	f04f 0200 	mov.w	r2, #0
 80118b0:	631a      	str	r2, [r3, #48]	; 0x30
	this->gps.direction = radDirection;
 80118b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80118b6:	635a      	str	r2, [r3, #52]	; 0x34
	this->gps.hdop = hdop;
 80118b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ba:	68fa      	ldr	r2, [r7, #12]
 80118bc:	639a      	str	r2, [r3, #56]	; 0x38
	this->gps.vdop = vdop;
 80118be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c0:	68ba      	ldr	r2, [r7, #8]
 80118c2:	63da      	str	r2, [r3, #60]	; 0x3c

	this->gps.numSatellites = numSat;
 80118c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c6:	79fa      	ldrb	r2, [r7, #7]
 80118c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	this->gps.fixType = fixType;
 80118cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ce:	79ba      	ldrb	r2, [r7, #6]
 80118d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	msgBus.setGPS(this->gps);
 80118d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118d6:	4619      	mov	r1, r3
 80118d8:	4808      	ldr	r0, [pc, #32]	; (80118fc <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x124>)
 80118da:	f7ff ff25 	bl	8011728 <_ZN2FC6MsgBus6setGPSERKNS_3GPSE>

	/* Freq class variable */
	freqCnt++;
 80118de:	4b08      	ldr	r3, [pc, #32]	; (8011900 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x128>)
 80118e0:	881b      	ldrh	r3, [r3, #0]
 80118e2:	3301      	adds	r3, #1
 80118e4:	b29a      	uxth	r2, r3
 80118e6:	4b06      	ldr	r3, [pc, #24]	; (8011900 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x128>)
 80118e8:	801a      	strh	r2, [r3, #0]

}
 80118ea:	bf00      	nop
 80118ec:	3744      	adds	r7, #68	; 0x44
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd90      	pop	{r4, r7, pc}
 80118f2:	bf00      	nop
 80118f4:	f3af 8000 	nop.w
 80118f8:	40668000 	.word	0x40668000
 80118fc:	20000b98 	.word	0x20000b98
 8011900:	20001050 	.word	0x20001050
 8011904:	54442d18 	.word	0x54442d18
 8011908:	400921fb 	.word	0x400921fb

0801190c <_Z41__static_initialization_and_destruction_0ii>:

}
 801190c:	b480      	push	{r7}
 801190e:	b083      	sub	sp, #12
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
 8011914:	6039      	str	r1, [r7, #0]
 8011916:	bf00      	nop
 8011918:	370c      	adds	r7, #12
 801191a:	46bd      	mov	sp, r7
 801191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011920:	4770      	bx	lr

08011922 <_GLOBAL__sub_I__ZN2FC9sensorGPSE>:
 8011922:	b580      	push	{r7, lr}
 8011924:	af00      	add	r7, sp, #0
 8011926:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801192a:	2001      	movs	r0, #1
 801192c:	f7ff ffee 	bl	801190c <_Z41__static_initialization_and_destruction_0ii>
 8011930:	bd80      	pop	{r7, pc}

08011932 <_ZN2FC6MsgBus22setBodyAngularVelocityERKNS_19BodyAngularVelocityE>:
    SIMPLE_FUNC_IMPL(BodyAngularVelocity, BodyAngularVelocity, bodyAngularVelocity)
 8011932:	b4b0      	push	{r4, r5, r7}
 8011934:	b083      	sub	sp, #12
 8011936:	af00      	add	r7, sp, #0
 8011938:	6078      	str	r0, [r7, #4]
 801193a:	6039      	str	r1, [r7, #0]
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	683a      	ldr	r2, [r7, #0]
 8011940:	f103 0418 	add.w	r4, r3, #24
 8011944:	4615      	mov	r5, r2
 8011946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801194a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801194e:	e884 0003 	stmia.w	r4, {r0, r1}
 8011952:	bf00      	nop
 8011954:	370c      	adds	r7, #12
 8011956:	46bd      	mov	sp, r7
 8011958:	bcb0      	pop	{r4, r5, r7}
 801195a:	4770      	bx	lr

0801195c <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 801195c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8011960:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 8011962:	4b0e      	ldr	r3, [pc, #56]	; (801199c <_ZL11microsecondv+0x40>)
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	4619      	mov	r1, r3
 8011968:	f04f 0200 	mov.w	r2, #0
 801196c:	f04f 0b00 	mov.w	fp, #0
 8011970:	f04f 0c00 	mov.w	ip, #0
 8011974:	468c      	mov	ip, r1
 8011976:	f04f 0b00 	mov.w	fp, #0
 801197a:	4a09      	ldr	r2, [pc, #36]	; (80119a0 <_ZL11microsecondv+0x44>)
 801197c:	6812      	ldr	r2, [r2, #0]
 801197e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011980:	4611      	mov	r1, r2
 8011982:	f04f 0200 	mov.w	r2, #0
 8011986:	ea4b 0301 	orr.w	r3, fp, r1
 801198a:	ea4c 0402 	orr.w	r4, ip, r2
}
 801198e:	4618      	mov	r0, r3
 8011990:	4621      	mov	r1, r4
 8011992:	46bd      	mov	sp, r7
 8011994:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8011998:	4770      	bx	lr
 801199a:	bf00      	nop
 801199c:	20001054 	.word	0x20001054
 80119a0:	20010f68 	.word	0x20010f68

080119a4 <_ZN2FC10SensorGyroC1Ev>:

namespace FC{

SensorGyro sensorGyro;

SensorGyro::SensorGyro()
 80119a4:	b480      	push	{r7}
 80119a6:	b083      	sub	sp, #12
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
: bodyAngularVelocity{0, }
, biasX(0), biasY(0), biasZ(0)
, averX(0), averY(0), averZ(0)
, calBiasFlag(false), averageIndex(0)
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	461a      	mov	r2, r3
 80119b0:	2300      	movs	r3, #0
 80119b2:	6013      	str	r3, [r2, #0]
 80119b4:	6053      	str	r3, [r2, #4]
 80119b6:	6093      	str	r3, [r2, #8]
 80119b8:	60d3      	str	r3, [r2, #12]
 80119ba:	6113      	str	r3, [r2, #16]
 80119bc:	6153      	str	r3, [r2, #20]
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f04f 0200 	mov.w	r2, #0
 80119c4:	619a      	str	r2, [r3, #24]
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f04f 0200 	mov.w	r2, #0
 80119cc:	61da      	str	r2, [r3, #28]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f04f 0200 	mov.w	r2, #0
 80119d4:	621a      	str	r2, [r3, #32]
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	f04f 0200 	mov.w	r2, #0
 80119dc:	625a      	str	r2, [r3, #36]	; 0x24
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	f04f 0200 	mov.w	r2, #0
 80119e4:	629a      	str	r2, [r3, #40]	; 0x28
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	f04f 0200 	mov.w	r2, #0
 80119ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	2200      	movs	r2, #0
 80119f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2200      	movs	r2, #0
 80119fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
{}
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	4618      	mov	r0, r3
 8011a02:	370c      	adds	r7, #12
 8011a04:	46bd      	mov	sp, r7
 8011a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0a:	4770      	bx	lr

08011a0c <_ZN2FC10SensorGyro7setBiasEv>:

void SensorGyro::setBias(){
 8011a0c:	b480      	push	{r7}
 8011a0e:	b083      	sub	sp, #12
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
	calBiasFlag = true;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	2201      	movs	r2, #1
 8011a18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	averageIndex = 0;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2200      	movs	r2, #0
 8011a20:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	averX = 0;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f04f 0200 	mov.w	r2, #0
 8011a2a:	625a      	str	r2, [r3, #36]	; 0x24
	averY = 0;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f04f 0200 	mov.w	r2, #0
 8011a32:	629a      	str	r2, [r3, #40]	; 0x28
	averZ = 0;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f04f 0200 	mov.w	r2, #0
 8011a3a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011a3c:	bf00      	nop
 8011a3e:	370c      	adds	r7, #12
 8011a40:	46bd      	mov	sp, r7
 8011a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a46:	4770      	bx	lr

08011a48 <_ZN2FC10SensorGyro7setGyroEfff>:

void SensorGyro::setGyro(float x, float y, float z){
 8011a48:	b590      	push	{r4, r7, lr}
 8011a4a:	b085      	sub	sp, #20
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	60f8      	str	r0, [r7, #12]
 8011a50:	ed87 0a02 	vstr	s0, [r7, #8]
 8011a54:	edc7 0a01 	vstr	s1, [r7, #4]
 8011a58:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8011a5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8011a60:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a68:	d10d      	bne.n	8011a86 <_ZN2FC10SensorGyro7setGyroEfff+0x3e>
 8011a6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8011a6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a76:	d106      	bne.n	8011a86 <_ZN2FC10SensorGyro7setGyroEfff+0x3e>
 8011a78:	edd7 7a00 	vldr	s15, [r7]
 8011a7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a84:	d041      	beq.n	8011b0a <_ZN2FC10SensorGyro7setGyroEfff+0xc2>

	if(calBiasFlag) calAverage(x, y, z);
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d008      	beq.n	8011aa2 <_ZN2FC10SensorGyro7setGyroEfff+0x5a>
 8011a90:	ed97 1a00 	vldr	s2, [r7]
 8011a94:	edd7 0a01 	vldr	s1, [r7, #4]
 8011a98:	ed97 0a02 	vldr	s0, [r7, #8]
 8011a9c:	68f8      	ldr	r0, [r7, #12]
 8011a9e:	f000 f83d 	bl	8011b1c <_ZN2FC10SensorGyro10calAverageEfff>

	this->bodyAngularVelocity.timestamp = microsecond();
 8011aa2:	f7ff ff5b 	bl	801195c <_ZL11microsecondv>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	460c      	mov	r4, r1
 8011aaa:	68fa      	ldr	r2, [r7, #12]
 8011aac:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyAngularVelocity.xyz[0] = x - biasX;
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	edd3 7a06 	vldr	s15, [r3, #24]
 8011ab6:	ed97 7a02 	vldr	s14, [r7, #8]
 8011aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	edc3 7a02 	vstr	s15, [r3, #8]
	this->bodyAngularVelocity.xyz[1] = y - biasY;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	edd3 7a07 	vldr	s15, [r3, #28]
 8011aca:	ed97 7a01 	vldr	s14, [r7, #4]
 8011ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	edc3 7a03 	vstr	s15, [r3, #12]
	this->bodyAngularVelocity.xyz[2] = z - biasZ;
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	edd3 7a08 	vldr	s15, [r3, #32]
 8011ade:	ed97 7a00 	vldr	s14, [r7]
 8011ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	edc3 7a04 	vstr	s15, [r3, #16]
	msgBus.setBodyAngularVelocity(this->bodyAngularVelocity);
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	4619      	mov	r1, r3
 8011af0:	4808      	ldr	r0, [pc, #32]	; (8011b14 <_ZN2FC10SensorGyro7setGyroEfff+0xcc>)
 8011af2:	f7ff ff1e 	bl	8011932 <_ZN2FC6MsgBus22setBodyAngularVelocityERKNS_19BodyAngularVelocityE>
	ModuleAHRS::setSignal(AHRS_fromGyro);
 8011af6:	2002      	movs	r0, #2
 8011af8:	f7ff fae4 	bl	80110c4 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>

	freqCnt++;
 8011afc:	4b06      	ldr	r3, [pc, #24]	; (8011b18 <_ZN2FC10SensorGyro7setGyroEfff+0xd0>)
 8011afe:	881b      	ldrh	r3, [r3, #0]
 8011b00:	3301      	adds	r3, #1
 8011b02:	b29a      	uxth	r2, r3
 8011b04:	4b04      	ldr	r3, [pc, #16]	; (8011b18 <_ZN2FC10SensorGyro7setGyroEfff+0xd0>)
 8011b06:	801a      	strh	r2, [r3, #0]
 8011b08:	e000      	b.n	8011b0c <_ZN2FC10SensorGyro7setGyroEfff+0xc4>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8011b0a:	bf00      	nop
}
 8011b0c:	3714      	adds	r7, #20
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd90      	pop	{r4, r7, pc}
 8011b12:	bf00      	nop
 8011b14:	20000b98 	.word	0x20000b98
 8011b18:	20001090 	.word	0x20001090

08011b1c <_ZN2FC10SensorGyro10calAverageEfff>:

void SensorGyro::calAverage(float x, float y, float z){
 8011b1c:	b480      	push	{r7}
 8011b1e:	b087      	sub	sp, #28
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	60f8      	str	r0, [r7, #12]
 8011b24:	ed87 0a02 	vstr	s0, [r7, #8]
 8011b28:	edc7 0a01 	vstr	s1, [r7, #4]
 8011b2c:	ed87 1a00 	vstr	s2, [r7]
	float alpha = (averageIndex-1)/averageIndex;
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011b36:	3b01      	subs	r3, #1
 8011b38:	68fa      	ldr	r2, [r7, #12]
 8011b3a:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8011b3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b42:	ee07 3a90 	vmov	s15, r3
 8011b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b4a:	edc7 7a05 	vstr	s15, [r7, #20]
	averX = alpha*averX + (1-alpha)*x;
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8011b54:	edd7 7a05 	vldr	s15, [r7, #20]
 8011b58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011b5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011b60:	edd7 7a05 	vldr	s15, [r7, #20]
 8011b64:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011b68:	edd7 7a02 	vldr	s15, [r7, #8]
 8011b6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	averY = alpha*averY + (1-alpha)*y;
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8011b80:	edd7 7a05 	vldr	s15, [r7, #20]
 8011b84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011b88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011b8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011b90:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011b94:	edd7 7a01 	vldr	s15, [r7, #4]
 8011b98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	averZ = alpha*averZ + (1-alpha)*z;
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8011bac:	edd7 7a05 	vldr	s15, [r7, #20]
 8011bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011bb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011bb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8011bbc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011bc0:	edd7 7a00 	vldr	s15, [r7]
 8011bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	averageIndex++;
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011bd8:	3301      	adds	r3, #1
 8011bda:	b2da      	uxtb	r2, r3
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	if(averageIndex > AVERAGE_SIZE) {
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011be8:	2b14      	cmp	r3, #20
 8011bea:	d90f      	bls.n	8011c0c <_ZN2FC10SensorGyro10calAverageEfff+0xf0>
		calBiasFlag = false;
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	2200      	movs	r2, #0
 8011bf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		biasX = averX;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	619a      	str	r2, [r3, #24]
		biasY = averY;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	61da      	str	r2, [r3, #28]
		biasZ = averZ;
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	621a      	str	r2, [r3, #32]
	}
}
 8011c0c:	bf00      	nop
 8011c0e:	371c      	adds	r7, #28
 8011c10:	46bd      	mov	sp, r7
 8011c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c16:	4770      	bx	lr

08011c18 <_Z41__static_initialization_and_destruction_0ii>:

}
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b082      	sub	sp, #8
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
 8011c20:	6039      	str	r1, [r7, #0]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2b01      	cmp	r3, #1
 8011c26:	d107      	bne.n	8011c38 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c2e:	4293      	cmp	r3, r2
 8011c30:	d102      	bne.n	8011c38 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorGyro sensorGyro;
 8011c32:	4803      	ldr	r0, [pc, #12]	; (8011c40 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8011c34:	f7ff feb6 	bl	80119a4 <_ZN2FC10SensorGyroC1Ev>
}
 8011c38:	bf00      	nop
 8011c3a:	3708      	adds	r7, #8
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}
 8011c40:	20001058 	.word	0x20001058

08011c44 <_GLOBAL__sub_I__ZN2FC10sensorGyroE>:
 8011c44:	b580      	push	{r7, lr}
 8011c46:	af00      	add	r7, sp, #0
 8011c48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011c4c:	2001      	movs	r0, #1
 8011c4e:	f7ff ffe3 	bl	8011c18 <_Z41__static_initialization_and_destruction_0ii>
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <_ZN2FC6MsgBus10setBodyMagERKNS_7BodyMagE>:
    SIMPLE_FUNC_IMPL(BodyMag, BodyMag, bodyMag)
 8011c54:	b4b0      	push	{r4, r5, r7}
 8011c56:	b083      	sub	sp, #12
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	6039      	str	r1, [r7, #0]
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	683a      	ldr	r2, [r7, #0]
 8011c62:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8011c66:	4615      	mov	r5, r2
 8011c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011c70:	e884 0003 	stmia.w	r4, {r0, r1}
 8011c74:	bf00      	nop
 8011c76:	370c      	adds	r7, #12
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bcb0      	pop	{r4, r5, r7}
 8011c7c:	4770      	bx	lr
	...

08011c80 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8011c80:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8011c84:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 8011c86:	4b0e      	ldr	r3, [pc, #56]	; (8011cc0 <_ZL11microsecondv+0x40>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	4619      	mov	r1, r3
 8011c8c:	f04f 0200 	mov.w	r2, #0
 8011c90:	f04f 0b00 	mov.w	fp, #0
 8011c94:	f04f 0c00 	mov.w	ip, #0
 8011c98:	468c      	mov	ip, r1
 8011c9a:	f04f 0b00 	mov.w	fp, #0
 8011c9e:	4a09      	ldr	r2, [pc, #36]	; (8011cc4 <_ZL11microsecondv+0x44>)
 8011ca0:	6812      	ldr	r2, [r2, #0]
 8011ca2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011ca4:	4611      	mov	r1, r2
 8011ca6:	f04f 0200 	mov.w	r2, #0
 8011caa:	ea4b 0301 	orr.w	r3, fp, r1
 8011cae:	ea4c 0402 	orr.w	r4, ip, r2
}
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	4621      	mov	r1, r4
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8011cbc:	4770      	bx	lr
 8011cbe:	bf00      	nop
 8011cc0:	20001094 	.word	0x20001094
 8011cc4:	20010f68 	.word	0x20010f68

08011cc8 <_ZN2FC9SensorMagC1Ev>:

namespace FC{

SensorMag sensorMag;

SensorMag::SensorMag()
 8011cc8:	b480      	push	{r7}
 8011cca:	b083      	sub	sp, #12
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
: bodyMag{0, }
, startCalibrationFlag(false)
, endCalibrationFlag(false)
, bias{-216.450f,-276.416f, -170.502f}
, scale{0.95011f, 1.04095f, 1.01334f}
, min{0, }, max{0, }
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	461a      	mov	r2, r3
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	6013      	str	r3, [r2, #0]
 8011cd8:	6053      	str	r3, [r2, #4]
 8011cda:	6093      	str	r3, [r2, #8]
 8011cdc:	60d3      	str	r3, [r2, #12]
 8011cde:	6113      	str	r3, [r2, #16]
 8011ce0:	6153      	str	r3, [r2, #20]
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	761a      	strb	r2, [r3, #24]
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	2200      	movs	r2, #0
 8011cec:	765a      	strb	r2, [r3, #25]
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	4a0e      	ldr	r2, [pc, #56]	; (8011d2c <_ZN2FC9SensorMagC1Ev+0x64>)
 8011cf2:	331c      	adds	r3, #28
 8011cf4:	ca07      	ldmia	r2, {r0, r1, r2}
 8011cf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	4a0c      	ldr	r2, [pc, #48]	; (8011d30 <_ZN2FC9SensorMagC1Ev+0x68>)
 8011cfe:	3328      	adds	r3, #40	; 0x28
 8011d00:	ca07      	ldmia	r2, {r0, r1, r2}
 8011d02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	3334      	adds	r3, #52	; 0x34
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	601a      	str	r2, [r3, #0]
 8011d0e:	605a      	str	r2, [r3, #4]
 8011d10:	609a      	str	r2, [r3, #8]
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	3340      	adds	r3, #64	; 0x40
 8011d16:	2200      	movs	r2, #0
 8011d18:	601a      	str	r2, [r3, #0]
 8011d1a:	605a      	str	r2, [r3, #4]
 8011d1c:	609a      	str	r2, [r3, #8]
	 * 		biasZ = -170.502f
	 * 		scaleX = 0.95011f
	 * 		scaleY = 1.04095f
	 * 		scaleZ = 1.01334f
	 */
}
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	4618      	mov	r0, r3
 8011d22:	370c      	adds	r7, #12
 8011d24:	46bd      	mov	sp, r7
 8011d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2a:	4770      	bx	lr
 8011d2c:	0802cec0 	.word	0x0802cec0
 8011d30:	0802cecc 	.word	0x0802cecc

08011d34 <_ZN2FC9SensorMag6setMagEfff>:

void SensorMag::setMag(float x, float y, float z){
 8011d34:	b590      	push	{r4, r7, lr}
 8011d36:	b085      	sub	sp, #20
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	60f8      	str	r0, [r7, #12]
 8011d3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8011d40:	edc7 0a01 	vstr	s1, [r7, #4]
 8011d44:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8011d48:	edd7 7a02 	vldr	s15, [r7, #8]
 8011d4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d54:	d10d      	bne.n	8011d72 <_ZN2FC9SensorMag6setMagEfff+0x3e>
 8011d56:	edd7 7a01 	vldr	s15, [r7, #4]
 8011d5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d62:	d106      	bne.n	8011d72 <_ZN2FC9SensorMag6setMagEfff+0x3e>
 8011d64:	edd7 7a00 	vldr	s15, [r7]
 8011d68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d70:	d04c      	beq.n	8011e0c <_ZN2FC9SensorMag6setMagEfff+0xd8>

	if(startCalibrationFlag) calCalibration(x, y, z);
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	7e1b      	ldrb	r3, [r3, #24]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d008      	beq.n	8011d8c <_ZN2FC9SensorMag6setMagEfff+0x58>
 8011d7a:	ed97 1a00 	vldr	s2, [r7]
 8011d7e:	edd7 0a01 	vldr	s1, [r7, #4]
 8011d82:	ed97 0a02 	vldr	s0, [r7, #8]
 8011d86:	68f8      	ldr	r0, [r7, #12]
 8011d88:	f000 f848 	bl	8011e1c <_ZN2FC9SensorMag14calCalibrationEfff>

	this->bodyMag.timestamp = microsecond();
 8011d8c:	f7ff ff78 	bl	8011c80 <_ZL11microsecondv>
 8011d90:	4603      	mov	r3, r0
 8011d92:	460c      	mov	r4, r1
 8011d94:	68fa      	ldr	r2, [r7, #12]
 8011d96:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyMag.xyz[0] = (x - bias[0])*scale[0];
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	edd3 7a07 	vldr	s15, [r3, #28]
 8011da0:	ed97 7a02 	vldr	s14, [r7, #8]
 8011da4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8011dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	edc3 7a02 	vstr	s15, [r3, #8]
	this->bodyMag.xyz[1] = (y - bias[1])*scale[1];
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	edd3 7a08 	vldr	s15, [r3, #32]
 8011dbe:	ed97 7a01 	vldr	s14, [r7, #4]
 8011dc2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8011dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	edc3 7a03 	vstr	s15, [r3, #12]
	this->bodyMag.xyz[2] = (z - bias[2])*scale[2];
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8011ddc:	ed97 7a00 	vldr	s14, [r7]
 8011de0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8011dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	edc3 7a04 	vstr	s15, [r3, #16]
	msgBus.setBodyMag(this->bodyMag);
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	4619      	mov	r1, r3
 8011df8:	4806      	ldr	r0, [pc, #24]	; (8011e14 <_ZN2FC9SensorMag6setMagEfff+0xe0>)
 8011dfa:	f7ff ff2b 	bl	8011c54 <_ZN2FC6MsgBus10setBodyMagERKNS_7BodyMagE>

	/* Freq class variable */
	freqCnt++;
 8011dfe:	4b06      	ldr	r3, [pc, #24]	; (8011e18 <_ZN2FC9SensorMag6setMagEfff+0xe4>)
 8011e00:	881b      	ldrh	r3, [r3, #0]
 8011e02:	3301      	adds	r3, #1
 8011e04:	b29a      	uxth	r2, r3
 8011e06:	4b04      	ldr	r3, [pc, #16]	; (8011e18 <_ZN2FC9SensorMag6setMagEfff+0xe4>)
 8011e08:	801a      	strh	r2, [r3, #0]
 8011e0a:	e000      	b.n	8011e0e <_ZN2FC9SensorMag6setMagEfff+0xda>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8011e0c:	bf00      	nop
}
 8011e0e:	3714      	adds	r7, #20
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd90      	pop	{r4, r7, pc}
 8011e14:	20000b98 	.word	0x20000b98
 8011e18:	200010e8 	.word	0x200010e8

08011e1c <_ZN2FC9SensorMag14calCalibrationEfff>:

void SensorMag::endCalibration(){
	endCalibrationFlag = true;
}

void SensorMag::calCalibration(float x, float y, float z){
 8011e1c:	b480      	push	{r7}
 8011e1e:	b087      	sub	sp, #28
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	60f8      	str	r0, [r7, #12]
 8011e24:	ed87 0a02 	vstr	s0, [r7, #8]
 8011e28:	edc7 0a01 	vstr	s1, [r7, #4]
 8011e2c:	ed87 1a00 	vstr	s2, [r7]
	if(x > max[0]) max[0] = x;
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8011e36:	ed97 7a02 	vldr	s14, [r7, #8]
 8011e3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e42:	dd02      	ble.n	8011e4a <_ZN2FC9SensorMag14calCalibrationEfff+0x2e>
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	68ba      	ldr	r2, [r7, #8]
 8011e48:	641a      	str	r2, [r3, #64]	; 0x40
	if(y > max[1]) max[1] = y;
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8011e50:	ed97 7a01 	vldr	s14, [r7, #4]
 8011e54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e5c:	dd02      	ble.n	8011e64 <_ZN2FC9SensorMag14calCalibrationEfff+0x48>
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	687a      	ldr	r2, [r7, #4]
 8011e62:	645a      	str	r2, [r3, #68]	; 0x44
	if(z > max[2]) max[2] = z;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8011e6a:	ed97 7a00 	vldr	s14, [r7]
 8011e6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e76:	dd02      	ble.n	8011e7e <_ZN2FC9SensorMag14calCalibrationEfff+0x62>
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	683a      	ldr	r2, [r7, #0]
 8011e7c:	649a      	str	r2, [r3, #72]	; 0x48

	if(x < min[0]) min[0] = x;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8011e84:	ed97 7a02 	vldr	s14, [r7, #8]
 8011e88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e90:	d502      	bpl.n	8011e98 <_ZN2FC9SensorMag14calCalibrationEfff+0x7c>
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	68ba      	ldr	r2, [r7, #8]
 8011e96:	635a      	str	r2, [r3, #52]	; 0x34
	if(y < min[1]) min[1] = y;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8011e9e:	ed97 7a01 	vldr	s14, [r7, #4]
 8011ea2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eaa:	d502      	bpl.n	8011eb2 <_ZN2FC9SensorMag14calCalibrationEfff+0x96>
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	687a      	ldr	r2, [r7, #4]
 8011eb0:	639a      	str	r2, [r3, #56]	; 0x38
	if(z < min[2]) min[2] = z;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8011eb8:	ed97 7a00 	vldr	s14, [r7]
 8011ebc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ec4:	d502      	bpl.n	8011ecc <_ZN2FC9SensorMag14calCalibrationEfff+0xb0>
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	683a      	ldr	r2, [r7, #0]
 8011eca:	63da      	str	r2, [r3, #60]	; 0x3c

	if(endCalibrationFlag/* end */){
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	7e5b      	ldrb	r3, [r3, #25]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	f000 8091 	beq.w	8011ff8 <_ZN2FC9SensorMag14calCalibrationEfff+0x1dc>
		/* get hard iron correction */
		bias[0] = (max[0] + min[0])/2;
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8011ee2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011ee6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011eea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	edc3 7a07 	vstr	s15, [r3, #28]
		bias[1] = (max[1] + min[1])/2;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8011f00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011f04:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011f08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	edc3 7a08 	vstr	s15, [r3, #32]
		bias[2] = (max[2] + min[2])/2;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8011f1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011f22:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		/* get soft iron correction estimate */
		scale[0] = (max[0] - min[0])/2;
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8011f3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011f40:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011f44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		scale[1] = (max[1] - min[1])/2;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8011f5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011f5e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011f62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		scale[2] = (max[2] - min[2])/2;
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8011f78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011f7c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011f80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		float avgRad = (scale[0] + scale[1] + scale[2])/3.0f;
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8011f96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8011fa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011fa4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8011fa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011fac:	edc7 7a05 	vstr	s15, [r7, #20]

		scale[0] = avgRad/scale[0];
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8011fb6:	edd7 6a05 	vldr	s13, [r7, #20]
 8011fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		scale[1] = avgRad/scale[1];
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8011fca:	edd7 6a05 	vldr	s13, [r7, #20]
 8011fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		scale[2] = avgRad/scale[2];
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8011fde:	edd7 6a05 	vldr	s13, [r7, #20]
 8011fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

		startCalibrationFlag = false;
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	761a      	strb	r2, [r3, #24]
		endCalibrationFlag = false;
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	765a      	strb	r2, [r3, #25]
	}
}
 8011ff8:	bf00      	nop
 8011ffa:	371c      	adds	r7, #28
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012002:	4770      	bx	lr

08012004 <_Z41__static_initialization_and_destruction_0ii>:

}
 8012004:	b580      	push	{r7, lr}
 8012006:	b082      	sub	sp, #8
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
 801200c:	6039      	str	r1, [r7, #0]
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	2b01      	cmp	r3, #1
 8012012:	d107      	bne.n	8012024 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801201a:	4293      	cmp	r3, r2
 801201c:	d102      	bne.n	8012024 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorMag sensorMag;
 801201e:	4803      	ldr	r0, [pc, #12]	; (801202c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8012020:	f7ff fe52 	bl	8011cc8 <_ZN2FC9SensorMagC1Ev>
}
 8012024:	bf00      	nop
 8012026:	3708      	adds	r7, #8
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}
 801202c:	20001098 	.word	0x20001098

08012030 <_GLOBAL__sub_I__ZN2FC9sensorMagE>:
 8012030:	b580      	push	{r7, lr}
 8012032:	af00      	add	r7, sp, #0
 8012034:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012038:	2001      	movs	r0, #1
 801203a:	f7ff ffe3 	bl	8012004 <_Z41__static_initialization_and_destruction_0ii>
 801203e:	bd80      	pop	{r7, pc}

08012040 <_bitCount64>:
#define SBUS_ERROR_FLAG_BIT_SIZE 64

/*
 *  count '1' from 64bit varible
 */
uint8_t _bitCount64(uint64_t flagBit){
 8012040:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8012044:	b085      	sub	sp, #20
 8012046:	af00      	add	r7, sp, #0
 8012048:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t cnt = 0;
 801204c:	2300      	movs	r3, #0
 801204e:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i < 64; i++){
 8012050:	2300      	movs	r3, #0
 8012052:	60bb      	str	r3, [r7, #8]
 8012054:	68bb      	ldr	r3, [r7, #8]
 8012056:	2b3f      	cmp	r3, #63	; 0x3f
 8012058:	dc16      	bgt.n	8012088 <_bitCount64+0x48>
		if((flagBit & (1<<i))!=0) cnt++;
 801205a:	2201      	movs	r2, #1
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	fa02 f303 	lsl.w	r3, r2, r3
 8012062:	4619      	mov	r1, r3
 8012064:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8012068:	e9d7 3400 	ldrd	r3, r4, [r7]
 801206c:	ea03 0b01 	and.w	fp, r3, r1
 8012070:	ea04 0c02 	and.w	ip, r4, r2
 8012074:	ea5b 030c 	orrs.w	r3, fp, ip
 8012078:	d002      	beq.n	8012080 <_bitCount64+0x40>
 801207a:	7bfb      	ldrb	r3, [r7, #15]
 801207c:	3301      	adds	r3, #1
 801207e:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i < 64; i++){
 8012080:	68bb      	ldr	r3, [r7, #8]
 8012082:	3301      	adds	r3, #1
 8012084:	60bb      	str	r3, [r7, #8]
 8012086:	e7e5      	b.n	8012054 <_bitCount64+0x14>
	}
	return cnt;
 8012088:	7bfb      	ldrb	r3, [r7, #15]
}
 801208a:	4618      	mov	r0, r3
 801208c:	3714      	adds	r7, #20
 801208e:	46bd      	mov	sp, r7
 8012090:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8012094:	4770      	bx	lr
	...

08012098 <SBUS_init>:
SBUS_t sbus;

static uint8_t _parserState = 0;		//for parsing
static uint8_t _curByte, _prevByte;

void SBUS_init(UART_HandleTypeDef *huart) {
 8012098:	b580      	push	{r7, lr}
 801209a:	b082      	sub	sp, #8
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
	sbus.huart = huart;
 80120a0:	4a12      	ldr	r2, [pc, #72]	; (80120ec <SBUS_init+0x54>)
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	6013      	str	r3, [r2, #0]

	memset(sbus.dmaBuf, 0, sizeof(sbus.dmaBuf));
 80120a6:	2219      	movs	r2, #25
 80120a8:	2100      	movs	r1, #0
 80120aa:	4811      	ldr	r0, [pc, #68]	; (80120f0 <SBUS_init+0x58>)
 80120ac:	f016 fb5f 	bl	802876e <memset>
	memset(sbus.rxBuf, 0, sizeof(sbus.rxBuf));
 80120b0:	2219      	movs	r2, #25
 80120b2:	2100      	movs	r1, #0
 80120b4:	480f      	ldr	r0, [pc, #60]	; (80120f4 <SBUS_init+0x5c>)
 80120b6:	f016 fb5a 	bl	802876e <memset>
	memset(sbus.rcValue, 0, sizeof(sbus.rcValue));
 80120ba:	2224      	movs	r2, #36	; 0x24
 80120bc:	2100      	movs	r1, #0
 80120be:	480e      	ldr	r0, [pc, #56]	; (80120f8 <SBUS_init+0x60>)
 80120c0:	f016 fb55 	bl	802876e <memset>
	memset(sbus.compRcValue, 0, sizeof(sbus.compRcValue));
 80120c4:	2224      	movs	r2, #36	; 0x24
 80120c6:	2100      	movs	r1, #0
 80120c8:	480c      	ldr	r0, [pc, #48]	; (80120fc <SBUS_init+0x64>)
 80120ca:	f016 fb50 	bl	802876e <memset>
	sbus.state = SBUS_STATE_FAILSAFE;
 80120ce:	4b07      	ldr	r3, [pc, #28]	; (80120ec <SBUS_init+0x54>)
 80120d0:	2200      	movs	r2, #0
 80120d2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	HAL_UART_Receive_DMA(sbus.huart, sbus.dmaBuf, SBUS_DMA_BUF_SIZE);
 80120d6:	4b05      	ldr	r3, [pc, #20]	; (80120ec <SBUS_init+0x54>)
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	2219      	movs	r2, #25
 80120dc:	4904      	ldr	r1, [pc, #16]	; (80120f0 <SBUS_init+0x58>)
 80120de:	4618      	mov	r0, r3
 80120e0:	f009 fd3e 	bl	801bb60 <HAL_UART_Receive_DMA>
}
 80120e4:	bf00      	nop
 80120e6:	3708      	adds	r7, #8
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}
 80120ec:	20001178 	.word	0x20001178
 80120f0:	2000117c 	.word	0x2000117c
 80120f4:	20001195 	.word	0x20001195
 80120f8:	200011ae 	.word	0x200011ae
 80120fc:	200011d2 	.word	0x200011d2

08012100 <SBUS_decoding>:

SBUS_Result_t SBUS_decoding() {
 8012100:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8012104:	b082      	sub	sp, #8
 8012106:	af00      	add	r7, sp, #0
	if(sbus.rxBuf[23] & SBUS_FAIL_SAFE){	/* failsafe frame */
 8012108:	4b3a      	ldr	r3, [pc, #232]	; (80121f4 <SBUS_decoding+0xf4>)
 801210a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801210e:	f003 0308 	and.w	r3, r3, #8
 8012112:	2b00      	cmp	r3, #0
 8012114:	d005      	beq.n	8012122 <SBUS_decoding+0x22>
		sbus.state = SBUS_STATE_FAILSAFE;
 8012116:	4b37      	ldr	r3, [pc, #220]	; (80121f4 <SBUS_decoding+0xf4>)
 8012118:	2200      	movs	r2, #0
 801211a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		return SBUS_Result_OldData;
 801211e:	2300      	movs	r3, #0
 8012120:	e1f6      	b.n	8012510 <SBUS_decoding+0x410>
	}

	/* handle bit flag  */
	if(++(sbus._bitPos) == SBUS_ERROR_FLAG_BIT_SIZE) sbus._bitPos = 0; /* bitPos over 64 */
 8012122:	4b34      	ldr	r3, [pc, #208]	; (80121f4 <SBUS_decoding+0xf4>)
 8012124:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8012128:	3301      	adds	r3, #1
 801212a:	b2da      	uxtb	r2, r3
 801212c:	4b31      	ldr	r3, [pc, #196]	; (80121f4 <SBUS_decoding+0xf4>)
 801212e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8012132:	4b30      	ldr	r3, [pc, #192]	; (80121f4 <SBUS_decoding+0xf4>)
 8012134:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8012138:	2b40      	cmp	r3, #64	; 0x40
 801213a:	bf0c      	ite	eq
 801213c:	2301      	moveq	r3, #1
 801213e:	2300      	movne	r3, #0
 8012140:	b2db      	uxtb	r3, r3
 8012142:	2b00      	cmp	r3, #0
 8012144:	d003      	beq.n	801214e <SBUS_decoding+0x4e>
 8012146:	4b2b      	ldr	r3, [pc, #172]	; (80121f4 <SBUS_decoding+0xf4>)
 8012148:	2200      	movs	r2, #0
 801214a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

	if(sbus.rxBuf[23] & SBUS_LOST_FRAME) sbus._errBit |= 1<<sbus._bitPos;	/* lost frame */
 801214e:	4b29      	ldr	r3, [pc, #164]	; (80121f4 <SBUS_decoding+0xf4>)
 8012150:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012154:	f003 0304 	and.w	r3, r3, #4
 8012158:	2b00      	cmp	r3, #0
 801215a:	d013      	beq.n	8012184 <SBUS_decoding+0x84>
 801215c:	4b25      	ldr	r3, [pc, #148]	; (80121f4 <SBUS_decoding+0xf4>)
 801215e:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
 8012162:	4b24      	ldr	r3, [pc, #144]	; (80121f4 <SBUS_decoding+0xf4>)
 8012164:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8012168:	4618      	mov	r0, r3
 801216a:	2301      	movs	r3, #1
 801216c:	4083      	lsls	r3, r0
 801216e:	469b      	mov	fp, r3
 8012170:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8012174:	ea4b 0301 	orr.w	r3, fp, r1
 8012178:	ea4c 0402 	orr.w	r4, ip, r2
 801217c:	4a1d      	ldr	r2, [pc, #116]	; (80121f4 <SBUS_decoding+0xf4>)
 801217e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 8012182:	e013      	b.n	80121ac <SBUS_decoding+0xac>
	else sbus._errBit &= ~(1<<sbus._bitPos);	/* normal frame */
 8012184:	4b1b      	ldr	r3, [pc, #108]	; (80121f4 <SBUS_decoding+0xf4>)
 8012186:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
 801218a:	4b1a      	ldr	r3, [pc, #104]	; (80121f4 <SBUS_decoding+0xf4>)
 801218c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8012190:	4618      	mov	r0, r3
 8012192:	2301      	movs	r3, #1
 8012194:	4083      	lsls	r3, r0
 8012196:	43db      	mvns	r3, r3
 8012198:	469b      	mov	fp, r3
 801219a:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 801219e:	ea0b 0301 	and.w	r3, fp, r1
 80121a2:	ea0c 0402 	and.w	r4, ip, r2
 80121a6:	4a13      	ldr	r2, [pc, #76]	; (80121f4 <SBUS_decoding+0xf4>)
 80121a8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	sbus._errCnt = _bitCount64(sbus._errBit);	/* count error bit */
 80121ac:	4b11      	ldr	r3, [pc, #68]	; (80121f4 <SBUS_decoding+0xf4>)
 80121ae:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80121b2:	4618      	mov	r0, r3
 80121b4:	4621      	mov	r1, r4
 80121b6:	f7ff ff43 	bl	8012040 <_bitCount64>
 80121ba:	4603      	mov	r3, r0
 80121bc:	461a      	mov	r2, r3
 80121be:	4b0d      	ldr	r3, [pc, #52]	; (80121f4 <SBUS_decoding+0xf4>)
 80121c0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	/* handle sbus state */
	if(sbus._errCnt > SBUS_ERROR_THRESHHOLD) sbus.state = SBUS_STATE_LOSS; /* if error rate over the threshold */
 80121c4:	4b0b      	ldr	r3, [pc, #44]	; (80121f4 <SBUS_decoding+0xf4>)
 80121c6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80121ca:	2b14      	cmp	r3, #20
 80121cc:	d904      	bls.n	80121d8 <SBUS_decoding+0xd8>
 80121ce:	4b09      	ldr	r3, [pc, #36]	; (80121f4 <SBUS_decoding+0xf4>)
 80121d0:	2201      	movs	r2, #1
 80121d2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80121d6:	e003      	b.n	80121e0 <SBUS_decoding+0xe0>
	else sbus.state = SBUS_STATE_STEADY;	/* sbus signal stable */
 80121d8:	4b06      	ldr	r3, [pc, #24]	; (80121f4 <SBUS_decoding+0xf4>)
 80121da:	2202      	movs	r2, #2
 80121dc:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	if(sbus.rxBuf[23] & SBUS_LOST_FRAME) return SBUS_Result_OldData; /* if this frame is lost frame, not decode packet */
 80121e0:	4b04      	ldr	r3, [pc, #16]	; (80121f4 <SBUS_decoding+0xf4>)
 80121e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80121e6:	f003 0304 	and.w	r3, r3, #4
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d004      	beq.n	80121f8 <SBUS_decoding+0xf8>
 80121ee:	2300      	movs	r3, #0
 80121f0:	e18e      	b.n	8012510 <SBUS_decoding+0x410>
 80121f2:	bf00      	nop
 80121f4:	20001178 	.word	0x20001178

	/* decode packet */
	sbus.rcValue[0] = ((uint16_t)sbus.rxBuf[1] >> 0 | ((uint16_t)sbus.rxBuf[2] << 8)) & 0x07FF;
 80121f8:	4ba7      	ldr	r3, [pc, #668]	; (8012498 <SBUS_decoding+0x398>)
 80121fa:	7f9b      	ldrb	r3, [r3, #30]
 80121fc:	b21a      	sxth	r2, r3
 80121fe:	4ba6      	ldr	r3, [pc, #664]	; (8012498 <SBUS_decoding+0x398>)
 8012200:	7fdb      	ldrb	r3, [r3, #31]
 8012202:	021b      	lsls	r3, r3, #8
 8012204:	b21b      	sxth	r3, r3
 8012206:	4313      	orrs	r3, r2
 8012208:	b21b      	sxth	r3, r3
 801220a:	b29b      	uxth	r3, r3
 801220c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012210:	b29a      	uxth	r2, r3
 8012212:	4ba1      	ldr	r3, [pc, #644]	; (8012498 <SBUS_decoding+0x398>)
 8012214:	86da      	strh	r2, [r3, #54]	; 0x36
	sbus.rcValue[1] = ((uint16_t)sbus.rxBuf[2] >> 3 | ((uint16_t)sbus.rxBuf[3] << 5)) & 0x07FF;
 8012216:	4ba0      	ldr	r3, [pc, #640]	; (8012498 <SBUS_decoding+0x398>)
 8012218:	7fdb      	ldrb	r3, [r3, #31]
 801221a:	10db      	asrs	r3, r3, #3
 801221c:	b21a      	sxth	r2, r3
 801221e:	4b9e      	ldr	r3, [pc, #632]	; (8012498 <SBUS_decoding+0x398>)
 8012220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012224:	015b      	lsls	r3, r3, #5
 8012226:	b21b      	sxth	r3, r3
 8012228:	4313      	orrs	r3, r2
 801222a:	b21b      	sxth	r3, r3
 801222c:	b29b      	uxth	r3, r3
 801222e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012232:	b29a      	uxth	r2, r3
 8012234:	4b98      	ldr	r3, [pc, #608]	; (8012498 <SBUS_decoding+0x398>)
 8012236:	871a      	strh	r2, [r3, #56]	; 0x38
	sbus.rcValue[2] = ((uint16_t)sbus.rxBuf[3] >> 6 | ((uint16_t)sbus.rxBuf[4] << 2) | (uint16_t)sbus.rxBuf[5] << 10) & 0x07FF;
 8012238:	4b97      	ldr	r3, [pc, #604]	; (8012498 <SBUS_decoding+0x398>)
 801223a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801223e:	119b      	asrs	r3, r3, #6
 8012240:	b21a      	sxth	r2, r3
 8012242:	4b95      	ldr	r3, [pc, #596]	; (8012498 <SBUS_decoding+0x398>)
 8012244:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012248:	009b      	lsls	r3, r3, #2
 801224a:	b21b      	sxth	r3, r3
 801224c:	4313      	orrs	r3, r2
 801224e:	b21a      	sxth	r2, r3
 8012250:	4b91      	ldr	r3, [pc, #580]	; (8012498 <SBUS_decoding+0x398>)
 8012252:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8012256:	029b      	lsls	r3, r3, #10
 8012258:	b21b      	sxth	r3, r3
 801225a:	4313      	orrs	r3, r2
 801225c:	b21b      	sxth	r3, r3
 801225e:	b29b      	uxth	r3, r3
 8012260:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012264:	b29a      	uxth	r2, r3
 8012266:	4b8c      	ldr	r3, [pc, #560]	; (8012498 <SBUS_decoding+0x398>)
 8012268:	875a      	strh	r2, [r3, #58]	; 0x3a
	sbus.rcValue[3] = ((uint16_t)sbus.rxBuf[5] >> 1 | ((uint16_t)sbus.rxBuf[6] << 7)) & 0x07FF;
 801226a:	4b8b      	ldr	r3, [pc, #556]	; (8012498 <SBUS_decoding+0x398>)
 801226c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8012270:	105b      	asrs	r3, r3, #1
 8012272:	b21a      	sxth	r2, r3
 8012274:	4b88      	ldr	r3, [pc, #544]	; (8012498 <SBUS_decoding+0x398>)
 8012276:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801227a:	01db      	lsls	r3, r3, #7
 801227c:	b21b      	sxth	r3, r3
 801227e:	4313      	orrs	r3, r2
 8012280:	b21b      	sxth	r3, r3
 8012282:	b29b      	uxth	r3, r3
 8012284:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012288:	b29a      	uxth	r2, r3
 801228a:	4b83      	ldr	r3, [pc, #524]	; (8012498 <SBUS_decoding+0x398>)
 801228c:	879a      	strh	r2, [r3, #60]	; 0x3c
	sbus.rcValue[4] = ((uint16_t)sbus.rxBuf[6] >> 4 | ((uint16_t)sbus.rxBuf[7] << 4)) & 0x07FF;
 801228e:	4b82      	ldr	r3, [pc, #520]	; (8012498 <SBUS_decoding+0x398>)
 8012290:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8012294:	111b      	asrs	r3, r3, #4
 8012296:	b21a      	sxth	r2, r3
 8012298:	4b7f      	ldr	r3, [pc, #508]	; (8012498 <SBUS_decoding+0x398>)
 801229a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801229e:	011b      	lsls	r3, r3, #4
 80122a0:	b21b      	sxth	r3, r3
 80122a2:	4313      	orrs	r3, r2
 80122a4:	b21b      	sxth	r3, r3
 80122a6:	b29b      	uxth	r3, r3
 80122a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80122ac:	b29a      	uxth	r2, r3
 80122ae:	4b7a      	ldr	r3, [pc, #488]	; (8012498 <SBUS_decoding+0x398>)
 80122b0:	87da      	strh	r2, [r3, #62]	; 0x3e
	sbus.rcValue[5] = ((uint16_t)sbus.rxBuf[7] >> 7 | ((uint16_t)sbus.rxBuf[8] << 1) | (uint16_t)sbus.rxBuf[9] << 9) & 0x07FF;
 80122b2:	4b79      	ldr	r3, [pc, #484]	; (8012498 <SBUS_decoding+0x398>)
 80122b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80122b8:	11db      	asrs	r3, r3, #7
 80122ba:	b21a      	sxth	r2, r3
 80122bc:	4b76      	ldr	r3, [pc, #472]	; (8012498 <SBUS_decoding+0x398>)
 80122be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80122c2:	005b      	lsls	r3, r3, #1
 80122c4:	b21b      	sxth	r3, r3
 80122c6:	4313      	orrs	r3, r2
 80122c8:	b21a      	sxth	r2, r3
 80122ca:	4b73      	ldr	r3, [pc, #460]	; (8012498 <SBUS_decoding+0x398>)
 80122cc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80122d0:	025b      	lsls	r3, r3, #9
 80122d2:	b21b      	sxth	r3, r3
 80122d4:	4313      	orrs	r3, r2
 80122d6:	b21b      	sxth	r3, r3
 80122d8:	b29b      	uxth	r3, r3
 80122da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80122de:	b29a      	uxth	r2, r3
 80122e0:	4b6d      	ldr	r3, [pc, #436]	; (8012498 <SBUS_decoding+0x398>)
 80122e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	sbus.rcValue[6] = ((uint16_t)sbus.rxBuf[9] >> 2 | ((uint16_t)sbus.rxBuf[10] << 6)) & 0x07FF;
 80122e6:	4b6c      	ldr	r3, [pc, #432]	; (8012498 <SBUS_decoding+0x398>)
 80122e8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80122ec:	109b      	asrs	r3, r3, #2
 80122ee:	b21a      	sxth	r2, r3
 80122f0:	4b69      	ldr	r3, [pc, #420]	; (8012498 <SBUS_decoding+0x398>)
 80122f2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80122f6:	019b      	lsls	r3, r3, #6
 80122f8:	b21b      	sxth	r3, r3
 80122fa:	4313      	orrs	r3, r2
 80122fc:	b21b      	sxth	r3, r3
 80122fe:	b29b      	uxth	r3, r3
 8012300:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012304:	b29a      	uxth	r2, r3
 8012306:	4b64      	ldr	r3, [pc, #400]	; (8012498 <SBUS_decoding+0x398>)
 8012308:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	sbus.rcValue[7] = ((uint16_t)sbus.rxBuf[10] >> 5 | ((uint16_t)sbus.rxBuf[11] << 3)) & 0x07FF;
 801230c:	4b62      	ldr	r3, [pc, #392]	; (8012498 <SBUS_decoding+0x398>)
 801230e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8012312:	115b      	asrs	r3, r3, #5
 8012314:	b21a      	sxth	r2, r3
 8012316:	4b60      	ldr	r3, [pc, #384]	; (8012498 <SBUS_decoding+0x398>)
 8012318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801231c:	00db      	lsls	r3, r3, #3
 801231e:	b21b      	sxth	r3, r3
 8012320:	4313      	orrs	r3, r2
 8012322:	b21b      	sxth	r3, r3
 8012324:	b29b      	uxth	r3, r3
 8012326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801232a:	b29a      	uxth	r2, r3
 801232c:	4b5a      	ldr	r3, [pc, #360]	; (8012498 <SBUS_decoding+0x398>)
 801232e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	sbus.rcValue[8] = ((uint16_t)sbus.rxBuf[12] << 0 | ((uint16_t)sbus.rxBuf[13] << 8)) & 0x07FF;
 8012332:	4b59      	ldr	r3, [pc, #356]	; (8012498 <SBUS_decoding+0x398>)
 8012334:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8012338:	b21a      	sxth	r2, r3
 801233a:	4b57      	ldr	r3, [pc, #348]	; (8012498 <SBUS_decoding+0x398>)
 801233c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8012340:	021b      	lsls	r3, r3, #8
 8012342:	b21b      	sxth	r3, r3
 8012344:	4313      	orrs	r3, r2
 8012346:	b21b      	sxth	r3, r3
 8012348:	b29b      	uxth	r3, r3
 801234a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801234e:	b29a      	uxth	r2, r3
 8012350:	4b51      	ldr	r3, [pc, #324]	; (8012498 <SBUS_decoding+0x398>)
 8012352:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	sbus.rcValue[9] = ((uint16_t)sbus.rxBuf[13] >> 3 | ((uint16_t)sbus.rxBuf[14] << 5)) & 0x07FF;
 8012356:	4b50      	ldr	r3, [pc, #320]	; (8012498 <SBUS_decoding+0x398>)
 8012358:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801235c:	10db      	asrs	r3, r3, #3
 801235e:	b21a      	sxth	r2, r3
 8012360:	4b4d      	ldr	r3, [pc, #308]	; (8012498 <SBUS_decoding+0x398>)
 8012362:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012366:	015b      	lsls	r3, r3, #5
 8012368:	b21b      	sxth	r3, r3
 801236a:	4313      	orrs	r3, r2
 801236c:	b21b      	sxth	r3, r3
 801236e:	b29b      	uxth	r3, r3
 8012370:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012374:	b29a      	uxth	r2, r3
 8012376:	4b48      	ldr	r3, [pc, #288]	; (8012498 <SBUS_decoding+0x398>)
 8012378:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	sbus.rcValue[10] = ((uint16_t)sbus.rxBuf[14] >> 6 | ((uint16_t)sbus.rxBuf[15] << 2) | (uint16_t)sbus.rxBuf[16] << 10) & 0x07FF;
 801237c:	4b46      	ldr	r3, [pc, #280]	; (8012498 <SBUS_decoding+0x398>)
 801237e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012382:	119b      	asrs	r3, r3, #6
 8012384:	b21a      	sxth	r2, r3
 8012386:	4b44      	ldr	r3, [pc, #272]	; (8012498 <SBUS_decoding+0x398>)
 8012388:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801238c:	009b      	lsls	r3, r3, #2
 801238e:	b21b      	sxth	r3, r3
 8012390:	4313      	orrs	r3, r2
 8012392:	b21a      	sxth	r2, r3
 8012394:	4b40      	ldr	r3, [pc, #256]	; (8012498 <SBUS_decoding+0x398>)
 8012396:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801239a:	029b      	lsls	r3, r3, #10
 801239c:	b21b      	sxth	r3, r3
 801239e:	4313      	orrs	r3, r2
 80123a0:	b21b      	sxth	r3, r3
 80123a2:	b29b      	uxth	r3, r3
 80123a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80123a8:	b29a      	uxth	r2, r3
 80123aa:	4b3b      	ldr	r3, [pc, #236]	; (8012498 <SBUS_decoding+0x398>)
 80123ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	sbus.rcValue[11] = ((uint16_t)sbus.rxBuf[16] >> 1 | ((uint16_t)sbus.rxBuf[17] << 7)) & 0x07FF;
 80123b0:	4b39      	ldr	r3, [pc, #228]	; (8012498 <SBUS_decoding+0x398>)
 80123b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80123b6:	105b      	asrs	r3, r3, #1
 80123b8:	b21a      	sxth	r2, r3
 80123ba:	4b37      	ldr	r3, [pc, #220]	; (8012498 <SBUS_decoding+0x398>)
 80123bc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80123c0:	01db      	lsls	r3, r3, #7
 80123c2:	b21b      	sxth	r3, r3
 80123c4:	4313      	orrs	r3, r2
 80123c6:	b21b      	sxth	r3, r3
 80123c8:	b29b      	uxth	r3, r3
 80123ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80123ce:	b29a      	uxth	r2, r3
 80123d0:	4b31      	ldr	r3, [pc, #196]	; (8012498 <SBUS_decoding+0x398>)
 80123d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	sbus.rcValue[12] = ((uint16_t)sbus.rxBuf[17] >> 4 | ((uint16_t)sbus.rxBuf[18] << 4)) & 0x07FF;
 80123d6:	4b30      	ldr	r3, [pc, #192]	; (8012498 <SBUS_decoding+0x398>)
 80123d8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80123dc:	111b      	asrs	r3, r3, #4
 80123de:	b21a      	sxth	r2, r3
 80123e0:	4b2d      	ldr	r3, [pc, #180]	; (8012498 <SBUS_decoding+0x398>)
 80123e2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80123e6:	011b      	lsls	r3, r3, #4
 80123e8:	b21b      	sxth	r3, r3
 80123ea:	4313      	orrs	r3, r2
 80123ec:	b21b      	sxth	r3, r3
 80123ee:	b29b      	uxth	r3, r3
 80123f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80123f4:	b29a      	uxth	r2, r3
 80123f6:	4b28      	ldr	r3, [pc, #160]	; (8012498 <SBUS_decoding+0x398>)
 80123f8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	sbus.rcValue[13] = ((uint16_t)sbus.rxBuf[18] >> 7 | ((uint16_t)sbus.rxBuf[19] << 1) | (uint16_t)sbus.rxBuf[21] << 9) & 0x07FF;
 80123fc:	4b26      	ldr	r3, [pc, #152]	; (8012498 <SBUS_decoding+0x398>)
 80123fe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012402:	11db      	asrs	r3, r3, #7
 8012404:	b21a      	sxth	r2, r3
 8012406:	4b24      	ldr	r3, [pc, #144]	; (8012498 <SBUS_decoding+0x398>)
 8012408:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801240c:	005b      	lsls	r3, r3, #1
 801240e:	b21b      	sxth	r3, r3
 8012410:	4313      	orrs	r3, r2
 8012412:	b21a      	sxth	r2, r3
 8012414:	4b20      	ldr	r3, [pc, #128]	; (8012498 <SBUS_decoding+0x398>)
 8012416:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801241a:	025b      	lsls	r3, r3, #9
 801241c:	b21b      	sxth	r3, r3
 801241e:	4313      	orrs	r3, r2
 8012420:	b21b      	sxth	r3, r3
 8012422:	b29b      	uxth	r3, r3
 8012424:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012428:	b29a      	uxth	r2, r3
 801242a:	4b1b      	ldr	r3, [pc, #108]	; (8012498 <SBUS_decoding+0x398>)
 801242c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	sbus.rcValue[14] = ((uint16_t)sbus.rxBuf[20] >> 2 | ((uint16_t)sbus.rxBuf[21] << 6)) & 0x07FF;
 8012430:	4b19      	ldr	r3, [pc, #100]	; (8012498 <SBUS_decoding+0x398>)
 8012432:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012436:	109b      	asrs	r3, r3, #2
 8012438:	b21a      	sxth	r2, r3
 801243a:	4b17      	ldr	r3, [pc, #92]	; (8012498 <SBUS_decoding+0x398>)
 801243c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8012440:	019b      	lsls	r3, r3, #6
 8012442:	b21b      	sxth	r3, r3
 8012444:	4313      	orrs	r3, r2
 8012446:	b21b      	sxth	r3, r3
 8012448:	b29b      	uxth	r3, r3
 801244a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801244e:	b29a      	uxth	r2, r3
 8012450:	4b11      	ldr	r3, [pc, #68]	; (8012498 <SBUS_decoding+0x398>)
 8012452:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	sbus.rcValue[15] = ((uint16_t)sbus.rxBuf[21] >> 5 | ((uint16_t)sbus.rxBuf[22] << 3)) & 0x07FF;
 8012456:	4b10      	ldr	r3, [pc, #64]	; (8012498 <SBUS_decoding+0x398>)
 8012458:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801245c:	115b      	asrs	r3, r3, #5
 801245e:	b21a      	sxth	r2, r3
 8012460:	4b0d      	ldr	r3, [pc, #52]	; (8012498 <SBUS_decoding+0x398>)
 8012462:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012466:	00db      	lsls	r3, r3, #3
 8012468:	b21b      	sxth	r3, r3
 801246a:	4313      	orrs	r3, r2
 801246c:	b21b      	sxth	r3, r3
 801246e:	b29b      	uxth	r3, r3
 8012470:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012474:	b29a      	uxth	r2, r3
 8012476:	4b08      	ldr	r3, [pc, #32]	; (8012498 <SBUS_decoding+0x398>)
 8012478:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	if (((uint16_t)sbus.rxBuf[23]) & 0x0001)       sbus.rcValue[16] = 2000; else sbus.rcValue[16] = 1000;
 801247c:	4b06      	ldr	r3, [pc, #24]	; (8012498 <SBUS_decoding+0x398>)
 801247e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012482:	f003 0301 	and.w	r3, r3, #1
 8012486:	2b00      	cmp	r3, #0
 8012488:	d008      	beq.n	801249c <SBUS_decoding+0x39c>
 801248a:	4b03      	ldr	r3, [pc, #12]	; (8012498 <SBUS_decoding+0x398>)
 801248c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8012490:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8012494:	e007      	b.n	80124a6 <SBUS_decoding+0x3a6>
 8012496:	bf00      	nop
 8012498:	20001178 	.word	0x20001178
 801249c:	4b1f      	ldr	r3, [pc, #124]	; (801251c <SBUS_decoding+0x41c>)
 801249e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80124a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	if (((uint16_t)sbus.rxBuf[23] >> 1) & 0x0001)  sbus.rcValue[17] = 2000; else sbus.rcValue[17] = 1000;
 80124a6:	4b1d      	ldr	r3, [pc, #116]	; (801251c <SBUS_decoding+0x41c>)
 80124a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80124ac:	f003 0302 	and.w	r3, r3, #2
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d005      	beq.n	80124c0 <SBUS_decoding+0x3c0>
 80124b4:	4b19      	ldr	r3, [pc, #100]	; (801251c <SBUS_decoding+0x41c>)
 80124b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80124ba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80124be:	e004      	b.n	80124ca <SBUS_decoding+0x3ca>
 80124c0:	4b16      	ldr	r3, [pc, #88]	; (801251c <SBUS_decoding+0x41c>)
 80124c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80124c6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 80124ca:	2300      	movs	r3, #0
 80124cc:	607b      	str	r3, [r7, #4]
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	2b11      	cmp	r3, #17
 80124d2:	dc1c      	bgt.n	801250e <SBUS_decoding+0x40e>
		sbus.compRcValue[i] = (sbus.rcValue[i]) * 5 / 8 + 880;
 80124d4:	4a11      	ldr	r2, [pc, #68]	; (801251c <SBUS_decoding+0x41c>)
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	3318      	adds	r3, #24
 80124da:	005b      	lsls	r3, r3, #1
 80124dc:	4413      	add	r3, r2
 80124de:	88db      	ldrh	r3, [r3, #6]
 80124e0:	461a      	mov	r2, r3
 80124e2:	4613      	mov	r3, r2
 80124e4:	009b      	lsls	r3, r3, #2
 80124e6:	4413      	add	r3, r2
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	da00      	bge.n	80124ee <SBUS_decoding+0x3ee>
 80124ec:	3307      	adds	r3, #7
 80124ee:	10db      	asrs	r3, r3, #3
 80124f0:	b29b      	uxth	r3, r3
 80124f2:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80124f6:	b299      	uxth	r1, r3
 80124f8:	4a08      	ldr	r2, [pc, #32]	; (801251c <SBUS_decoding+0x41c>)
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	332c      	adds	r3, #44	; 0x2c
 80124fe:	005b      	lsls	r3, r3, #1
 8012500:	4413      	add	r3, r2
 8012502:	460a      	mov	r2, r1
 8012504:	805a      	strh	r2, [r3, #2]
	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	3301      	adds	r3, #1
 801250a:	607b      	str	r3, [r7, #4]
 801250c:	e7df      	b.n	80124ce <SBUS_decoding+0x3ce>
	}

//	if(sbus_comp_rcValue[0]<SBUS_FAILSAFE && sbus_comp_rcValue[1]<SBUS_FAILSAFE
//	&& sbus_comp_rcValue[2]<SBUS_FAILSAFE && sbus_comp_rcValue[3]<SBUS_FAILSAFE) return; // failsafe
	return SBUS_Result_NewData;
 801250e:	2301      	movs	r3, #1
}
 8012510:	4618      	mov	r0, r3
 8012512:	3708      	adds	r7, #8
 8012514:	46bd      	mov	sp, r7
 8012516:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 801251a:	bf00      	nop
 801251c:	20001178 	.word	0x20001178

08012520 <SBUS_uartRxCpltCallback>:


SBUS_Result_t SBUS_uartRxCpltCallback(){// must call this function on HAL_UART_RxCpltCallback
 8012520:	b580      	push	{r7, lr}
 8012522:	b082      	sub	sp, #8
 8012524:	af00      	add	r7, sp, #0
	static uint8_t i=0;
	SBUS_Result_t result = SBUS_Result_OldData;
 8012526:	2300      	movs	r3, #0
 8012528:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 801252a:	4b37      	ldr	r3, [pc, #220]	; (8012608 <SBUS_uartRxCpltCallback+0xe8>)
 801252c:	2200      	movs	r2, #0
 801252e:	701a      	strb	r2, [r3, #0]
 8012530:	4b35      	ldr	r3, [pc, #212]	; (8012608 <SBUS_uartRxCpltCallback+0xe8>)
 8012532:	781b      	ldrb	r3, [r3, #0]
 8012534:	2b18      	cmp	r3, #24
 8012536:	d862      	bhi.n	80125fe <SBUS_uartRxCpltCallback+0xde>
		_curByte = sbus.dmaBuf[i];
 8012538:	4b33      	ldr	r3, [pc, #204]	; (8012608 <SBUS_uartRxCpltCallback+0xe8>)
 801253a:	781b      	ldrb	r3, [r3, #0]
 801253c:	461a      	mov	r2, r3
 801253e:	4b33      	ldr	r3, [pc, #204]	; (801260c <SBUS_uartRxCpltCallback+0xec>)
 8012540:	4413      	add	r3, r2
 8012542:	791a      	ldrb	r2, [r3, #4]
 8012544:	4b32      	ldr	r3, [pc, #200]	; (8012610 <SBUS_uartRxCpltCallback+0xf0>)
 8012546:	701a      	strb	r2, [r3, #0]
		if (_parserState == 0) {
 8012548:	4b32      	ldr	r3, [pc, #200]	; (8012614 <SBUS_uartRxCpltCallback+0xf4>)
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d120      	bne.n	8012592 <SBUS_uartRxCpltCallback+0x72>
			if ((_curByte == SBUS_HEADER) && ((_prevByte == SBUS_FOOTER) || ((_prevByte & SBUS2MASK) == SBUS_FOOTER))) {
 8012550:	4b2f      	ldr	r3, [pc, #188]	; (8012610 <SBUS_uartRxCpltCallback+0xf0>)
 8012552:	781b      	ldrb	r3, [r3, #0]
 8012554:	2b0f      	cmp	r3, #15
 8012556:	d118      	bne.n	801258a <SBUS_uartRxCpltCallback+0x6a>
 8012558:	4b2f      	ldr	r3, [pc, #188]	; (8012618 <SBUS_uartRxCpltCallback+0xf8>)
 801255a:	781b      	ldrb	r3, [r3, #0]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d005      	beq.n	801256c <SBUS_uartRxCpltCallback+0x4c>
 8012560:	4b2d      	ldr	r3, [pc, #180]	; (8012618 <SBUS_uartRxCpltCallback+0xf8>)
 8012562:	781b      	ldrb	r3, [r3, #0]
 8012564:	f003 030f 	and.w	r3, r3, #15
 8012568:	2b00      	cmp	r3, #0
 801256a:	d10e      	bne.n	801258a <SBUS_uartRxCpltCallback+0x6a>
				sbus.rxBuf[_parserState] = _curByte;
 801256c:	4b29      	ldr	r3, [pc, #164]	; (8012614 <SBUS_uartRxCpltCallback+0xf4>)
 801256e:	781b      	ldrb	r3, [r3, #0]
 8012570:	4619      	mov	r1, r3
 8012572:	4b27      	ldr	r3, [pc, #156]	; (8012610 <SBUS_uartRxCpltCallback+0xf0>)
 8012574:	781a      	ldrb	r2, [r3, #0]
 8012576:	4b25      	ldr	r3, [pc, #148]	; (801260c <SBUS_uartRxCpltCallback+0xec>)
 8012578:	440b      	add	r3, r1
 801257a:	775a      	strb	r2, [r3, #29]
				_parserState++;
 801257c:	4b25      	ldr	r3, [pc, #148]	; (8012614 <SBUS_uartRxCpltCallback+0xf4>)
 801257e:	781b      	ldrb	r3, [r3, #0]
 8012580:	3301      	adds	r3, #1
 8012582:	b2da      	uxtb	r2, r3
 8012584:	4b23      	ldr	r3, [pc, #140]	; (8012614 <SBUS_uartRxCpltCallback+0xf4>)
 8012586:	701a      	strb	r2, [r3, #0]
 8012588:	e02e      	b.n	80125e8 <SBUS_uartRxCpltCallback+0xc8>
			} else {
				_parserState = 0;
 801258a:	4b22      	ldr	r3, [pc, #136]	; (8012614 <SBUS_uartRxCpltCallback+0xf4>)
 801258c:	2200      	movs	r2, #0
 801258e:	701a      	strb	r2, [r3, #0]
 8012590:	e02a      	b.n	80125e8 <SBUS_uartRxCpltCallback+0xc8>
			}
		}
		else {
			// strip off the data
			if ((_parserState) < SBUS_BUF_SIZE) {
 8012592:	4b20      	ldr	r3, [pc, #128]	; (8012614 <SBUS_uartRxCpltCallback+0xf4>)
 8012594:	781b      	ldrb	r3, [r3, #0]
 8012596:	2b18      	cmp	r3, #24
 8012598:	d80d      	bhi.n	80125b6 <SBUS_uartRxCpltCallback+0x96>
				sbus.rxBuf[_parserState] = _curByte;
 801259a:	4b1e      	ldr	r3, [pc, #120]	; (8012614 <SBUS_uartRxCpltCallback+0xf4>)
 801259c:	781b      	ldrb	r3, [r3, #0]
 801259e:	4619      	mov	r1, r3
 80125a0:	4b1b      	ldr	r3, [pc, #108]	; (8012610 <SBUS_uartRxCpltCallback+0xf0>)
 80125a2:	781a      	ldrb	r2, [r3, #0]
 80125a4:	4b19      	ldr	r3, [pc, #100]	; (801260c <SBUS_uartRxCpltCallback+0xec>)
 80125a6:	440b      	add	r3, r1
 80125a8:	775a      	strb	r2, [r3, #29]
				_parserState++;
 80125aa:	4b1a      	ldr	r3, [pc, #104]	; (8012614 <SBUS_uartRxCpltCallback+0xf4>)
 80125ac:	781b      	ldrb	r3, [r3, #0]
 80125ae:	3301      	adds	r3, #1
 80125b0:	b2da      	uxtb	r2, r3
 80125b2:	4b18      	ldr	r3, [pc, #96]	; (8012614 <SBUS_uartRxCpltCallback+0xf4>)
 80125b4:	701a      	strb	r2, [r3, #0]
			}
			// check the end byte
			if ((_parserState) == SBUS_BUF_SIZE) {
 80125b6:	4b17      	ldr	r3, [pc, #92]	; (8012614 <SBUS_uartRxCpltCallback+0xf4>)
 80125b8:	781b      	ldrb	r3, [r3, #0]
 80125ba:	2b19      	cmp	r3, #25
 80125bc:	d114      	bne.n	80125e8 <SBUS_uartRxCpltCallback+0xc8>
				if ((_curByte == SBUS_FOOTER) || ((_curByte & SBUS2MASK) == SBUS_FOOTER)) {
 80125be:	4b14      	ldr	r3, [pc, #80]	; (8012610 <SBUS_uartRxCpltCallback+0xf0>)
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d005      	beq.n	80125d2 <SBUS_uartRxCpltCallback+0xb2>
 80125c6:	4b12      	ldr	r3, [pc, #72]	; (8012610 <SBUS_uartRxCpltCallback+0xf0>)
 80125c8:	781b      	ldrb	r3, [r3, #0]
 80125ca:	f003 030f 	and.w	r3, r3, #15
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d107      	bne.n	80125e2 <SBUS_uartRxCpltCallback+0xc2>
					_parserState = 0;
 80125d2:	4b10      	ldr	r3, [pc, #64]	; (8012614 <SBUS_uartRxCpltCallback+0xf4>)
 80125d4:	2200      	movs	r2, #0
 80125d6:	701a      	strb	r2, [r3, #0]
					result = SBUS_decoding();
 80125d8:	f7ff fd92 	bl	8012100 <SBUS_decoding>
 80125dc:	4603      	mov	r3, r0
 80125de:	71fb      	strb	r3, [r7, #7]
 80125e0:	e002      	b.n	80125e8 <SBUS_uartRxCpltCallback+0xc8>
				}
				else {
					_parserState = 0;
 80125e2:	4b0c      	ldr	r3, [pc, #48]	; (8012614 <SBUS_uartRxCpltCallback+0xf4>)
 80125e4:	2200      	movs	r2, #0
 80125e6:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		_prevByte = _curByte;
 80125e8:	4b09      	ldr	r3, [pc, #36]	; (8012610 <SBUS_uartRxCpltCallback+0xf0>)
 80125ea:	781a      	ldrb	r2, [r3, #0]
 80125ec:	4b0a      	ldr	r3, [pc, #40]	; (8012618 <SBUS_uartRxCpltCallback+0xf8>)
 80125ee:	701a      	strb	r2, [r3, #0]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 80125f0:	4b05      	ldr	r3, [pc, #20]	; (8012608 <SBUS_uartRxCpltCallback+0xe8>)
 80125f2:	781b      	ldrb	r3, [r3, #0]
 80125f4:	3301      	adds	r3, #1
 80125f6:	b2da      	uxtb	r2, r3
 80125f8:	4b03      	ldr	r3, [pc, #12]	; (8012608 <SBUS_uartRxCpltCallback+0xe8>)
 80125fa:	701a      	strb	r2, [r3, #0]
 80125fc:	e798      	b.n	8012530 <SBUS_uartRxCpltCallback+0x10>
	}
	return result;
 80125fe:	79fb      	ldrb	r3, [r7, #7]
}
 8012600:	4618      	mov	r0, r3
 8012602:	3708      	adds	r7, #8
 8012604:	46bd      	mov	sp, r7
 8012606:	bd80      	pop	{r7, pc}
 8012608:	2000120b 	.word	0x2000120b
 801260c:	20001178 	.word	0x20001178
 8012610:	20001209 	.word	0x20001209
 8012614:	20001208 	.word	0x20001208
 8012618:	2000120a 	.word	0x2000120a

0801261c <SBUS_getChannel>:
//		printf("%d \t", sbus.compRcValue[i]);
//	}
//	printf("\r\n");
//}

uint16_t SBUS_getChannel(uint8_t chan) { // start from 1
 801261c:	b480      	push	{r7}
 801261e:	b083      	sub	sp, #12
 8012620:	af00      	add	r7, sp, #0
 8012622:	4603      	mov	r3, r0
 8012624:	71fb      	strb	r3, [r7, #7]
	return sbus.compRcValue[chan - 1];
 8012626:	79fb      	ldrb	r3, [r7, #7]
 8012628:	3b01      	subs	r3, #1
 801262a:	4a05      	ldr	r2, [pc, #20]	; (8012640 <SBUS_getChannel+0x24>)
 801262c:	332c      	adds	r3, #44	; 0x2c
 801262e:	005b      	lsls	r3, r3, #1
 8012630:	4413      	add	r3, r2
 8012632:	885b      	ldrh	r3, [r3, #2]
}
 8012634:	4618      	mov	r0, r3
 8012636:	370c      	adds	r7, #12
 8012638:	46bd      	mov	sp, r7
 801263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263e:	4770      	bx	lr
 8012640:	20001178 	.word	0x20001178

08012644 <_ZN2FC6MsgBus9getHealthEPNS_6HealthE>:
    SIMPLE_FUNC_IMPL(Health, Health, health)
 8012644:	b4b0      	push	{r4, r5, r7}
 8012646:	b085      	sub	sp, #20
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
 801264c:	6039      	str	r1, [r7, #0]
 801264e:	2300      	movs	r3, #0
 8012650:	73fb      	strb	r3, [r7, #15]
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 801265e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012662:	42a2      	cmp	r2, r4
 8012664:	bf08      	it	eq
 8012666:	4299      	cmpeq	r1, r3
 8012668:	d001      	beq.n	801266e <_ZN2FC6MsgBus9getHealthEPNS_6HealthE+0x2a>
 801266a:	2301      	movs	r3, #1
 801266c:	73fb      	strb	r3, [r7, #15]
 801266e:	683a      	ldr	r2, [r7, #0]
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	4615      	mov	r5, r2
 8012674:	f503 74c4 	add.w	r4, r3, #392	; 0x188
 8012678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801267a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801267c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012680:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8012684:	7bfb      	ldrb	r3, [r7, #15]
 8012686:	4618      	mov	r0, r3
 8012688:	3714      	adds	r7, #20
 801268a:	46bd      	mov	sp, r7
 801268c:	bcb0      	pop	{r4, r5, r7}
 801268e:	4770      	bx	lr

08012690 <_ZN2FC6MsgBus9setHealthERKNS_6HealthE>:
 8012690:	b4b0      	push	{r4, r5, r7}
 8012692:	b083      	sub	sp, #12
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
 8012698:	6039      	str	r1, [r7, #0]
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	683a      	ldr	r2, [r7, #0]
 801269e:	f503 74c4 	add.w	r4, r3, #392	; 0x188
 80126a2:	4615      	mov	r5, r2
 80126a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80126a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80126a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80126ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80126b0:	bf00      	nop
 80126b2:	370c      	adds	r7, #12
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bcb0      	pop	{r4, r5, r7}
 80126b8:	4770      	bx	lr

080126ba <_ZN2FC6MsgBus11getMotorPWMEPNS_8MotorPWME>:
    SIMPLE_FUNC_IMPL(MotorPWM, MotorPWM, motorPWM)
 80126ba:	b4b0      	push	{r4, r5, r7}
 80126bc:	b085      	sub	sp, #20
 80126be:	af00      	add	r7, sp, #0
 80126c0:	6078      	str	r0, [r7, #4]
 80126c2:	6039      	str	r1, [r7, #0]
 80126c4:	2300      	movs	r3, #0
 80126c6:	73fb      	strb	r3, [r7, #15]
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	e9d3 1200 	ldrd	r1, r2, [r3]
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80126d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80126d8:	42a2      	cmp	r2, r4
 80126da:	bf08      	it	eq
 80126dc:	4299      	cmpeq	r1, r3
 80126de:	d001      	beq.n	80126e4 <_ZN2FC6MsgBus11getMotorPWMEPNS_8MotorPWME+0x2a>
 80126e0:	2301      	movs	r3, #1
 80126e2:	73fb      	strb	r3, [r7, #15]
 80126e4:	683a      	ldr	r2, [r7, #0]
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	4615      	mov	r5, r2
 80126ea:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 80126ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80126f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80126f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80126f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80126fa:	7bfb      	ldrb	r3, [r7, #15]
 80126fc:	4618      	mov	r0, r3
 80126fe:	3714      	adds	r7, #20
 8012700:	46bd      	mov	sp, r7
 8012702:	bcb0      	pop	{r4, r5, r7}
 8012704:	4770      	bx	lr
	...

08012708 <_ZN2FC24ModuleAttitudeController4mainEv>:
	static void main(){
 8012708:	b580      	push	{r7, lr}
 801270a:	b0ee      	sub	sp, #440	; 0x1b8
 801270c:	af00      	add	r7, sp, #0
		ModuleAttitudeController attitudeController;
 801270e:	463b      	mov	r3, r7
 8012710:	4618      	mov	r0, r3
 8012712:	f7fd f98d 	bl	800fa30 <_ZN2FC24ModuleAttitudeControllerC1Ev>
			if(osThreadFlagsWait(AC_reset, osFlagsWaitAny, 0) >= 0){
 8012716:	2200      	movs	r2, #0
 8012718:	2100      	movs	r1, #0
 801271a:	2002      	movs	r0, #2
 801271c:	f00e fbe8 	bl	8020ef0 <osThreadFlagsWait>
 8012720:	2301      	movs	r3, #1
 8012722:	2b00      	cmp	r3, #0
 8012724:	d003      	beq.n	801272e <_ZN2FC24ModuleAttitudeController4mainEv+0x26>
				attitudeController.initialize();
 8012726:	463b      	mov	r3, r7
 8012728:	4618      	mov	r0, r3
 801272a:	f7f2 fb7b 	bl	8004e24 <_ZN23px4_AlgorithmModelClass10initializeEv>
			osThreadFlagsWait(AC_fromAHRS, osFlagsWaitAny, osWaitForever);
 801272e:	f04f 32ff 	mov.w	r2, #4294967295
 8012732:	2100      	movs	r1, #0
 8012734:	2001      	movs	r0, #1
 8012736:	f00e fbdb 	bl	8020ef0 <osThreadFlagsWait>
			attitudeController.oneStep();
 801273a:	463b      	mov	r3, r7
 801273c:	4618      	mov	r0, r3
 801273e:	f7fd f985 	bl	800fa4c <_ZN2FC24ModuleAttitudeController7oneStepEv>
			freqCnt++;
 8012742:	4b03      	ldr	r3, [pc, #12]	; (8012750 <_ZN2FC24ModuleAttitudeController4mainEv+0x48>)
 8012744:	881b      	ldrh	r3, [r3, #0]
 8012746:	3301      	adds	r3, #1
 8012748:	b29a      	uxth	r2, r3
 801274a:	4b01      	ldr	r3, [pc, #4]	; (8012750 <_ZN2FC24ModuleAttitudeController4mainEv+0x48>)
 801274c:	801a      	strh	r2, [r3, #0]
			if(osThreadFlagsWait(AC_reset, osFlagsWaitAny, 0) >= 0){
 801274e:	e7e2      	b.n	8012716 <_ZN2FC24ModuleAttitudeController4mainEv+0xe>
 8012750:	2000152c 	.word	0x2000152c

08012754 <_ZN2FC10ModuleAHRS4mainEv>:
	/*
	 *  ModuleAHRS main function
	 *  this function is called by CMSIS task function
	 *	wait signal from accelerometer and gyrometer
	 */
    static void main(){
 8012754:	b580      	push	{r7, lr}
 8012756:	b0aa      	sub	sp, #168	; 0xa8
 8012758:	af00      	add	r7, sp, #0
    	ModuleAHRS moduleAHRS;
 801275a:	463b      	mov	r3, r7
 801275c:	4618      	mov	r0, r3
 801275e:	f7fa ff81 	bl	800d664 <_ZN2FC10ModuleAHRSC1Ev>
    	while(1){
    		/* wait accel, gyro value set */
    		osThreadFlagsWait(0x3U, osFlagsWaitAll, osWaitForever);
 8012762:	f04f 32ff 	mov.w	r2, #4294967295
 8012766:	2101      	movs	r1, #1
 8012768:	2003      	movs	r0, #3
 801276a:	f00e fbc1 	bl	8020ef0 <osThreadFlagsWait>
    		moduleAHRS.oneStep();
 801276e:	463b      	mov	r3, r7
 8012770:	4618      	mov	r0, r3
 8012772:	f7fa ffcd 	bl	800d710 <_ZN2FC10ModuleAHRS7oneStepEv>
    		ModuleAttitudeController::setSignal(AC_fromAHRS);
 8012776:	2001      	movs	r0, #1
 8012778:	f7fd fc26 	bl	800ffc8 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE>
    		osThreadFlagsWait(0x3U, osFlagsWaitAll, osWaitForever);
 801277c:	e7f1      	b.n	8012762 <_ZN2FC10ModuleAHRS4mainEv+0xe>
	...

08012780 <_ZN2FC24ModulePositionController4mainEv>:

class ModulePositionController : public positionControlModelClass, public Freq<ModulePositionController> {
public:
	ModulePositionController();

	static void main(){
 8012780:	b580      	push	{r7, lr}
 8012782:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 8012786:	af00      	add	r7, sp, #0
		bool firstLoop;
		ModulePositionController positionController;
 8012788:	463b      	mov	r3, r7
 801278a:	4618      	mov	r0, r3
 801278c:	f7fe f920 	bl	80109d0 <_ZN2FC24ModulePositionControllerC1Ev>
		while(1){
			firstLoop = true;
 8012790:	2301      	movs	r3, #1
 8012792:	f887 33ef 	strb.w	r3, [r7, #1007]	; 0x3ef
			/* wait position controller start */
			osThreadFlagsWait(PC_start, osFlagsWaitAny, osWaitForever);
 8012796:	f04f 32ff 	mov.w	r2, #4294967295
 801279a:	2100      	movs	r1, #0
 801279c:	2002      	movs	r0, #2
 801279e:	f00e fba7 	bl	8020ef0 <osThreadFlagsWait>
			while(1){
				/* if first loop or reset command, initialize */
				if(firstLoop || (osThreadFlagsGet() & PC_reset)){
 80127a2:	f897 33ef 	ldrb.w	r3, [r7, #1007]	; 0x3ef
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d106      	bne.n	80127b8 <_ZN2FC24ModulePositionController4mainEv+0x38>
 80127aa:	f00e fb6d 	bl	8020e88 <osThreadFlagsGet>
 80127ae:	4603      	mov	r3, r0
 80127b0:	f003 0308 	and.w	r3, r3, #8
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d001      	beq.n	80127bc <_ZN2FC24ModulePositionController4mainEv+0x3c>
 80127b8:	2301      	movs	r3, #1
 80127ba:	e000      	b.n	80127be <_ZN2FC24ModulePositionController4mainEv+0x3e>
 80127bc:	2300      	movs	r3, #0
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d006      	beq.n	80127d0 <_ZN2FC24ModulePositionController4mainEv+0x50>
					osThreadFlagsClear(PC_reset);
 80127c2:	2008      	movs	r0, #8
 80127c4:	f00e fb10 	bl	8020de8 <osThreadFlagsClear>
					positionController.initialize();
 80127c8:	463b      	mov	r3, r7
 80127ca:	4618      	mov	r0, r3
 80127cc:	f7f3 fa5a 	bl	8005c84 <_ZN25positionControlModelClass10initializeEv>
				}

				/* wait EKF data */
				osThreadFlagsWait(PC_fromEKF, osFlagsWaitAny, osWaitForever);
 80127d0:	f04f 32ff 	mov.w	r2, #4294967295
 80127d4:	2100      	movs	r1, #0
 80127d6:	2001      	movs	r0, #1
 80127d8:	f00e fb8a 	bl	8020ef0 <osThreadFlagsWait>
				positionController.oneStep();
 80127dc:	463b      	mov	r3, r7
 80127de:	4618      	mov	r0, r3
 80127e0:	f7fe f904 	bl	80109ec <_ZN2FC24ModulePositionController7oneStepEv>

				/* check position controller stop */
				if(osThreadFlagsGet() & PC_stop){
 80127e4:	f00e fb50 	bl	8020e88 <osThreadFlagsGet>
 80127e8:	4603      	mov	r3, r0
 80127ea:	f003 0304 	and.w	r3, r3, #4
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	bf14      	ite	ne
 80127f2:	2301      	movne	r3, #1
 80127f4:	2300      	moveq	r3, #0
 80127f6:	b2db      	uxtb	r3, r3
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d003      	beq.n	8012804 <_ZN2FC24ModulePositionController4mainEv+0x84>
					osThreadFlagsClear(PC_stop);
 80127fc:	2004      	movs	r0, #4
 80127fe:	f00e faf3 	bl	8020de8 <osThreadFlagsClear>
					break;
 8012802:	e010      	b.n	8012826 <_ZN2FC24ModulePositionController4mainEv+0xa6>
				}

				/* if first loop, send ACK */
				if(firstLoop){
 8012804:	f897 33ef 	ldrb.w	r3, [r7, #1007]	; 0x3ef
 8012808:	2b00      	cmp	r3, #0
 801280a:	d005      	beq.n	8012818 <_ZN2FC24ModulePositionController4mainEv+0x98>
					ModuleCommander::sendSignal(CMD_ACK);
 801280c:	2001      	movs	r0, #1
 801280e:	f7fd fc77 	bl	8010100 <_ZN2FC15ModuleCommander10sendSignalENS_9CmdSignalE>
					firstLoop = false;
 8012812:	2300      	movs	r3, #0
 8012814:	f887 33ef 	strb.w	r3, [r7, #1007]	; 0x3ef
				}
				freqCnt++;
 8012818:	4b03      	ldr	r3, [pc, #12]	; (8012828 <_ZN2FC24ModulePositionController4mainEv+0xa8>)
 801281a:	881b      	ldrh	r3, [r3, #0]
 801281c:	3301      	adds	r3, #1
 801281e:	b29a      	uxth	r2, r3
 8012820:	4b01      	ldr	r3, [pc, #4]	; (8012828 <_ZN2FC24ModulePositionController4mainEv+0xa8>)
 8012822:	801a      	strh	r2, [r3, #0]
				if(firstLoop || (osThreadFlagsGet() & PC_reset)){
 8012824:	e7bd      	b.n	80127a2 <_ZN2FC24ModulePositionController4mainEv+0x22>
			firstLoop = true;
 8012826:	e7b3      	b.n	8012790 <_ZN2FC24ModulePositionController4mainEv+0x10>
 8012828:	2000152e 	.word	0x2000152e

0801282c <_ZN2FC9ModuleINS4mainEv>:
};

class ModuleINS : public positionEstimatorModelClass, public Freq<ModuleINS> {
public:

	static void main(){
 801282c:	b580      	push	{r7, lr}
 801282e:	f5ad 6d62 	sub.w	sp, sp, #3616	; 0xe20
 8012832:	af00      	add	r7, sp, #0
		ModuleINS moduleINS;
 8012834:	463b      	mov	r3, r7
 8012836:	4618      	mov	r0, r3
 8012838:	f7fd fed8 	bl	80105ec <_ZN2FC9ModuleINSC1Ev>
		moduleINS.initialize();
 801283c:	463b      	mov	r3, r7
 801283e:	4618      	mov	r0, r3
 8012840:	f7f9 f952 	bl	800bae8 <_ZN27positionEstimatorModelClass10initializeEv>
		osDelay(10000);
 8012844:	f242 7010 	movw	r0, #10000	; 0x2710
 8012848:	f00e fbe6 	bl	8021018 <osDelay>
		while(1){
			moduleINS.onestep();
 801284c:	463b      	mov	r3, r7
 801284e:	4618      	mov	r0, r3
 8012850:	f7fd fef2 	bl	8010638 <_ZN2FC9ModuleINS7onestepEv>
			ModulePositionController::setSignal(PC_fromEKF);
 8012854:	2001      	movs	r0, #1
 8012856:	f7fd fba5 	bl	800ffa4 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>
			freqCnt++;
 801285a:	4b05      	ldr	r3, [pc, #20]	; (8012870 <_ZN2FC9ModuleINS4mainEv+0x44>)
 801285c:	881b      	ldrh	r3, [r3, #0]
 801285e:	3301      	adds	r3, #1
 8012860:	b29a      	uxth	r2, r3
 8012862:	4b03      	ldr	r3, [pc, #12]	; (8012870 <_ZN2FC9ModuleINS4mainEv+0x44>)
 8012864:	801a      	strh	r2, [r3, #0]
			osDelay(20);
 8012866:	2014      	movs	r0, #20
 8012868:	f00e fbd6 	bl	8021018 <osDelay>
			moduleINS.onestep();
 801286c:	e7ee      	b.n	801284c <_ZN2FC9ModuleINS4mainEv+0x20>
 801286e:	bf00      	nop
 8012870:	20001530 	.word	0x20001530

08012874 <_ZN2FC12ModuleHealth4mainEv>:

namespace FC {

class ModuleHealth {
public:
	static void main(){
 8012874:	b580      	push	{r7, lr}
 8012876:	b08a      	sub	sp, #40	; 0x28
 8012878:	af00      	add	r7, sp, #0
		uint32_t tick;
		tick = osKernelGetTickCount();
 801287a:	f00e f985 	bl	8020b88 <osKernelGetTickCount>
 801287e:	6278      	str	r0, [r7, #36]	; 0x24

		struct Health health;
		while(1){
			tick += 1000;
 8012880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012882:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8012886:	627b      	str	r3, [r7, #36]	; 0x24
			osDelayUntil(tick);		/* 1hz */
 8012888:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801288a:	f00e fbf3 	bl	8021074 <osDelayUntil>

			health.accel = SensorAccel::checkFreq();
 801288e:	f000 fd6f 	bl	8013370 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv>
 8012892:	4603      	mov	r3, r0
 8012894:	813b      	strh	r3, [r7, #8]
			health.gyro = SensorGyro::checkFreq();
 8012896:	f000 fd7d 	bl	8013394 <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv>
 801289a:	4603      	mov	r3, r0
 801289c:	817b      	strh	r3, [r7, #10]
			health.rc = RC::checkFreq();
 801289e:	f000 fd8b 	bl	80133b8 <_ZN2FC4FreqINS_2RCEE9checkFreqEv>
 80128a2:	4603      	mov	r3, r0
 80128a4:	81bb      	strh	r3, [r7, #12]

			health.mag = SensorMag::checkFreq();
 80128a6:	f000 fd99 	bl	80133dc <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv>
 80128aa:	4603      	mov	r3, r0
 80128ac:	81fb      	strh	r3, [r7, #14]
			health.gps = SensorGPS::checkFreq();
 80128ae:	f000 fda7 	bl	8013400 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv>
 80128b2:	4603      	mov	r3, r0
 80128b4:	823b      	strh	r3, [r7, #16]

			health.baro = SensorBaro::checkFreq();
 80128b6:	f000 fdb5 	bl	8013424 <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv>
 80128ba:	4603      	mov	r3, r0
 80128bc:	827b      	strh	r3, [r7, #18]

			health.ahrs = ModuleAHRS::checkFreq();
 80128be:	f000 fdc3 	bl	8013448 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv>
 80128c2:	4603      	mov	r3, r0
 80128c4:	82fb      	strh	r3, [r7, #22]
			health.ins = ModuleINS::checkFreq();
 80128c6:	f000 fdd1 	bl	801346c <_ZN2FC4FreqINS_9ModuleINSEE9checkFreqEv>
 80128ca:	4603      	mov	r3, r0
 80128cc:	833b      	strh	r3, [r7, #24]

			health.attitudeController = ModuleAttitudeController::checkFreq();
 80128ce:	f000 fddf 	bl	8013490 <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv>
 80128d2:	4603      	mov	r3, r0
 80128d4:	837b      	strh	r3, [r7, #26]
			health.positionController = ModulePositionController::checkFreq();
 80128d6:	f000 fded 	bl	80134b4 <_ZN2FC4FreqINS_24ModulePositionControllerEE9checkFreqEv>
 80128da:	4603      	mov	r3, r0
 80128dc:	83bb      	strh	r3, [r7, #28]
			//TODO auto, lidar health check
			health.autoController = 0;
 80128de:	2300      	movs	r3, #0
 80128e0:	83fb      	strh	r3, [r7, #30]
			health.lidar = 0;
 80128e2:	2300      	movs	r3, #0
 80128e4:	82bb      	strh	r3, [r7, #20]

			msgBus.setHealth(health);
 80128e6:	463b      	mov	r3, r7
 80128e8:	4619      	mov	r1, r3
 80128ea:	480c      	ldr	r0, [pc, #48]	; (801291c <_ZN2FC12ModuleHealth4mainEv+0xa8>)
 80128ec:	f7ff fed0 	bl	8012690 <_ZN2FC6MsgBus9setHealthERKNS_6HealthE>

			if(health.accel > ACCEL_THRESHOLD &&
 80128f0:	893b      	ldrh	r3, [r7, #8]
 80128f2:	2b96      	cmp	r3, #150	; 0x96
 80128f4:	d9c4      	bls.n	8012880 <_ZN2FC12ModuleHealth4mainEv+0xc>
			   health.gyro > GYRO_THRESHOLD &&
 80128f6:	897b      	ldrh	r3, [r7, #10]
			if(health.accel > ACCEL_THRESHOLD &&
 80128f8:	2b96      	cmp	r3, #150	; 0x96
 80128fa:	d9c1      	bls.n	8012880 <_ZN2FC12ModuleHealth4mainEv+0xc>
			   health.rc > RC_THRESHOLD &&
 80128fc:	89bb      	ldrh	r3, [r7, #12]
			   health.gyro > GYRO_THRESHOLD &&
 80128fe:	2b64      	cmp	r3, #100	; 0x64
 8012900:	d9be      	bls.n	8012880 <_ZN2FC12ModuleHealth4mainEv+0xc>
			   health.ahrs > AHRS_THRESHOLD &&
 8012902:	8afb      	ldrh	r3, [r7, #22]
			   health.rc > RC_THRESHOLD &&
 8012904:	2b96      	cmp	r3, #150	; 0x96
 8012906:	d9bb      	bls.n	8012880 <_ZN2FC12ModuleHealth4mainEv+0xc>
			   health.attitudeController > ATTITUDE_CTL_THRESHOLD){
 8012908:	8b7b      	ldrh	r3, [r7, #26]
			   health.ahrs > AHRS_THRESHOLD &&
 801290a:	2b96      	cmp	r3, #150	; 0x96
 801290c:	d9b8      	bls.n	8012880 <_ZN2FC12ModuleHealth4mainEv+0xc>
				/* arm(attitude controller) enable */

				if(health.mag > MAG_THRESHOLD &&
 801290e:	89fb      	ldrh	r3, [r7, #14]
 8012910:	2b32      	cmp	r3, #50	; 0x32
 8012912:	d9b5      	bls.n	8012880 <_ZN2FC12ModuleHealth4mainEv+0xc>
						health.gps > GPS_THRESHOLD &&
 8012914:	8a3b      	ldrh	r3, [r7, #16]
				if(health.mag > MAG_THRESHOLD &&
 8012916:	2b03      	cmp	r3, #3
			tick += 1000;
 8012918:	e7b2      	b.n	8012880 <_ZN2FC12ModuleHealth4mainEv+0xc>
 801291a:	bf00      	nop
 801291c:	20000b98 	.word	0x20000b98

08012920 <_ZN2FC8ModuleSD4mainEv>:

class ModuleSD {
public:
	ModuleSD() = default;

	static void main(){
 8012920:	b5b0      	push	{r4, r5, r7, lr}
 8012922:	b0ca      	sub	sp, #296	; 0x128
 8012924:	af00      	add	r7, sp, #0
		uint8_t writeBuf[256];
		uint32_t bytesWritten = 0;
 8012926:	f107 0320 	add.w	r3, r7, #32
 801292a:	2200      	movs	r2, #0
 801292c:	601a      	str	r2, [r3, #0]
		uint8_t writeLen = 0;
 801292e:	2300      	movs	r3, #0
 8012930:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		/*
		 *  TODO
		 *  FR_DISK_ERR		hardware layer error.
		 *  				retry after circuit
		 */
		uint8_t wtext[] = "Hello from SDIO DMA RTOS\n";
 8012934:	1d3b      	adds	r3, r7, #4
 8012936:	4a63      	ldr	r2, [pc, #396]	; (8012ac4 <_ZN2FC8ModuleSD4mainEv+0x1a4>)
 8012938:	461c      	mov	r4, r3
 801293a:	4615      	mov	r5, r2
 801293c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801293e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012940:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012944:	c403      	stmia	r4!, {r0, r1}
 8012946:	8022      	strh	r2, [r4, #0]
		/* 1. Mount - 0 */
		f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8012948:	2200      	movs	r2, #0
 801294a:	495f      	ldr	r1, [pc, #380]	; (8012ac8 <_ZN2FC8ModuleSD4mainEv+0x1a8>)
 801294c:	485f      	ldr	r0, [pc, #380]	; (8012acc <_ZN2FC8ModuleSD4mainEv+0x1ac>)
 801294e:	f00d fa07 	bl	801fd60 <f_mount>
		osDelay(1000);
 8012952:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012956:	f00e fb5f 	bl	8021018 <osDelay>
		printf("try to open file\r\n");
 801295a:	485d      	ldr	r0, [pc, #372]	; (8012ad0 <_ZN2FC8ModuleSD4mainEv+0x1b0>)
 801295c:	f016 ff00 	bl	8029760 <puts>
		if((res = f_open(&SDFile, "0:/test.txt", FA_CREATE_ALWAYS | FA_WRITE)) != FR_OK){
 8012960:	220a      	movs	r2, #10
 8012962:	495c      	ldr	r1, [pc, #368]	; (8012ad4 <_ZN2FC8ModuleSD4mainEv+0x1b4>)
 8012964:	485c      	ldr	r0, [pc, #368]	; (8012ad8 <_ZN2FC8ModuleSD4mainEv+0x1b8>)
 8012966:	f00d fa5f 	bl	801fe28 <f_open>
 801296a:	4603      	mov	r3, r0
 801296c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8012970:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8012974:	2b00      	cmp	r3, #0
 8012976:	bf14      	ite	ne
 8012978:	2301      	movne	r3, #1
 801297a:	2300      	moveq	r3, #0
 801297c:	b2db      	uxtb	r3, r3
 801297e:	2b00      	cmp	r3, #0
 8012980:	d00b      	beq.n	801299a <_ZN2FC8ModuleSD4mainEv+0x7a>
			/* fail to open file */
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8012982:	2200      	movs	r2, #0
 8012984:	2120      	movs	r1, #32
 8012986:	4855      	ldr	r0, [pc, #340]	; (8012adc <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 8012988:	f003 f850 	bl	8015a2c <HAL_GPIO_WritePin>
			printf("fail to open file %d\r\n", res);
 801298c:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8012990:	4619      	mov	r1, r3
 8012992:	4853      	ldr	r0, [pc, #332]	; (8012ae0 <_ZN2FC8ModuleSD4mainEv+0x1c0>)
 8012994:	f016 fe70 	bl	8029678 <iprintf>
 8012998:	e033      	b.n	8012a02 <_ZN2FC8ModuleSD4mainEv+0xe2>
		}
		else{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 801299a:	2201      	movs	r2, #1
 801299c:	2120      	movs	r1, #32
 801299e:	484f      	ldr	r0, [pc, #316]	; (8012adc <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 80129a0:	f003 f844 	bl	8015a2c <HAL_GPIO_WritePin>
			res = f_write(&SDFile, wtext, strlen((char*)wtext), (UINT*)bytesWritten);
 80129a4:	1d3b      	adds	r3, r7, #4
 80129a6:	4618      	mov	r0, r3
 80129a8:	f7ed fc1a 	bl	80001e0 <strlen>
 80129ac:	4602      	mov	r2, r0
 80129ae:	f107 0320 	add.w	r3, r7, #32
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	1d39      	adds	r1, r7, #4
 80129b6:	4848      	ldr	r0, [pc, #288]	; (8012ad8 <_ZN2FC8ModuleSD4mainEv+0x1b8>)
 80129b8:	f00d fc1e 	bl	80201f8 <f_write>
 80129bc:	4603      	mov	r3, r0
 80129be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
			if((bytesWritten == 0) || (res != FR_OK)){
 80129c2:	f107 0320 	add.w	r3, r7, #32
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d003      	beq.n	80129d4 <_ZN2FC8ModuleSD4mainEv+0xb4>
 80129cc:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d00b      	beq.n	80129ec <_ZN2FC8ModuleSD4mainEv+0xcc>
				/* fail to write file */
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80129d4:	2200      	movs	r2, #0
 80129d6:	2120      	movs	r1, #32
 80129d8:	4840      	ldr	r0, [pc, #256]	; (8012adc <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 80129da:	f003 f827 	bl	8015a2c <HAL_GPIO_WritePin>
				printf("fail to write %d\r\n", res);
 80129de:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80129e2:	4619      	mov	r1, r3
 80129e4:	483f      	ldr	r0, [pc, #252]	; (8012ae4 <_ZN2FC8ModuleSD4mainEv+0x1c4>)
 80129e6:	f016 fe47 	bl	8029678 <iprintf>
 80129ea:	e007      	b.n	80129fc <_ZN2FC8ModuleSD4mainEv+0xdc>
			}
			else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80129ec:	2201      	movs	r2, #1
 80129ee:	2120      	movs	r1, #32
 80129f0:	483a      	ldr	r0, [pc, #232]	; (8012adc <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 80129f2:	f003 f81b 	bl	8015a2c <HAL_GPIO_WritePin>
				printf("success write\r\n");
 80129f6:	483c      	ldr	r0, [pc, #240]	; (8012ae8 <_ZN2FC8ModuleSD4mainEv+0x1c8>)
 80129f8:	f016 feb2 	bl	8029760 <puts>
			}

			f_close(&SDFile);
 80129fc:	4836      	ldr	r0, [pc, #216]	; (8012ad8 <_ZN2FC8ModuleSD4mainEv+0x1b8>)
 80129fe:	f00d fe47 	bl	8020690 <f_close>
		}

		while(1){
			/* sdopen */
			if(f_open(&SDFile,"0:/log.txt", FA_CREATE_ALWAYS | FA_WRITE ) != FR_OK){
 8012a02:	220a      	movs	r2, #10
 8012a04:	4939      	ldr	r1, [pc, #228]	; (8012aec <_ZN2FC8ModuleSD4mainEv+0x1cc>)
 8012a06:	4834      	ldr	r0, [pc, #208]	; (8012ad8 <_ZN2FC8ModuleSD4mainEv+0x1b8>)
 8012a08:	f00d fa0e 	bl	801fe28 <f_open>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	bf14      	ite	ne
 8012a12:	2301      	movne	r3, #1
 8012a14:	2300      	moveq	r3, #0
 8012a16:	b2db      	uxtb	r3, r3
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d005      	beq.n	8012a28 <_ZN2FC8ModuleSD4mainEv+0x108>
				/* fail to open file */
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	2120      	movs	r1, #32
 8012a20:	482e      	ldr	r0, [pc, #184]	; (8012adc <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 8012a22:	f003 f803 	bl	8015a2c <HAL_GPIO_WritePin>
 8012a26:	e049      	b.n	8012abc <_ZN2FC8ModuleSD4mainEv+0x19c>
			}
			else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8012a28:	2201      	movs	r2, #1
 8012a2a:	2120      	movs	r1, #32
 8012a2c:	482b      	ldr	r0, [pc, #172]	; (8012adc <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 8012a2e:	f002 fffd 	bl	8015a2c <HAL_GPIO_WritePin>
//					}
//					else{
//						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
//					}
//				}
				writeLen = sprintf((char*)writeBuf,"hello fucking world\n");
 8012a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012a36:	4a2e      	ldr	r2, [pc, #184]	; (8012af0 <_ZN2FC8ModuleSD4mainEv+0x1d0>)
 8012a38:	461c      	mov	r4, r3
 8012a3a:	4615      	mov	r5, r2
 8012a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012a44:	6020      	str	r0, [r4, #0]
 8012a46:	3404      	adds	r4, #4
 8012a48:	7021      	strb	r1, [r4, #0]
 8012a4a:	2314      	movs	r3, #20
 8012a4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				res = f_write(&SDFile, writeBuf, writeLen, (UINT*)&bytesWritten);
 8012a50:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8012a54:	f107 0320 	add.w	r3, r7, #32
 8012a58:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012a5c:	481e      	ldr	r0, [pc, #120]	; (8012ad8 <_ZN2FC8ModuleSD4mainEv+0x1b8>)
 8012a5e:	f00d fbcb 	bl	80201f8 <f_write>
 8012a62:	4603      	mov	r3, r0
 8012a64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
				if((bytesWritten == 0) || (res != FR_OK)){
 8012a68:	f107 0320 	add.w	r3, r7, #32
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d003      	beq.n	8012a7a <_ZN2FC8ModuleSD4mainEv+0x15a>
 8012a72:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d005      	beq.n	8012a86 <_ZN2FC8ModuleSD4mainEv+0x166>
					/* fail to write file */
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	2120      	movs	r1, #32
 8012a7e:	4817      	ldr	r0, [pc, #92]	; (8012adc <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 8012a80:	f002 ffd4 	bl	8015a2c <HAL_GPIO_WritePin>
 8012a84:	e004      	b.n	8012a90 <_ZN2FC8ModuleSD4mainEv+0x170>
				}
				else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8012a86:	2201      	movs	r2, #1
 8012a88:	2120      	movs	r1, #32
 8012a8a:	4814      	ldr	r0, [pc, #80]	; (8012adc <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 8012a8c:	f002 ffce 	bl	8015a2c <HAL_GPIO_WritePin>
				}

				if(f_close(&SDFile) != FR_OK){
 8012a90:	4811      	ldr	r0, [pc, #68]	; (8012ad8 <_ZN2FC8ModuleSD4mainEv+0x1b8>)
 8012a92:	f00d fdfd 	bl	8020690 <f_close>
 8012a96:	4603      	mov	r3, r0
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	bf14      	ite	ne
 8012a9c:	2301      	movne	r3, #1
 8012a9e:	2300      	moveq	r3, #0
 8012aa0:	b2db      	uxtb	r3, r3
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d005      	beq.n	8012ab2 <_ZN2FC8ModuleSD4mainEv+0x192>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	2120      	movs	r1, #32
 8012aaa:	480c      	ldr	r0, [pc, #48]	; (8012adc <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 8012aac:	f002 ffbe 	bl	8015a2c <HAL_GPIO_WritePin>
 8012ab0:	e004      	b.n	8012abc <_ZN2FC8ModuleSD4mainEv+0x19c>
				}
				else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8012ab2:	2201      	movs	r2, #1
 8012ab4:	2120      	movs	r1, #32
 8012ab6:	4809      	ldr	r0, [pc, #36]	; (8012adc <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 8012ab8:	f002 ffb8 	bl	8015a2c <HAL_GPIO_WritePin>
				}
			}

			osDelay(5);			/* 10hz */
 8012abc:	2005      	movs	r0, #5
 8012abe:	f00e faab 	bl	8021018 <osDelay>
			if(f_open(&SDFile,"0:/log.txt", FA_CREATE_ALWAYS | FA_WRITE ) != FR_OK){
 8012ac2:	e79e      	b.n	8012a02 <_ZN2FC8ModuleSD4mainEv+0xe2>
 8012ac4:	0802cf58 	.word	0x0802cf58
 8012ac8:	20011130 	.word	0x20011130
 8012acc:	20012164 	.word	0x20012164
 8012ad0:	0802ced8 	.word	0x0802ced8
 8012ad4:	0802ceec 	.word	0x0802ceec
 8012ad8:	20011134 	.word	0x20011134
 8012adc:	40020000 	.word	0x40020000
 8012ae0:	0802cef8 	.word	0x0802cef8
 8012ae4:	0802cf10 	.word	0x0802cf10
 8012ae8:	0802cf24 	.word	0x0802cf24
 8012aec:	0802cf34 	.word	0x0802cf34
 8012af0:	0802cf40 	.word	0x0802cf40

08012af4 <_putchar>:
uint32_t channel;

uint16_t timeCheck;
int test = 0;

void _putchar(char character){
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b082      	sub	sp, #8
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	4603      	mov	r3, r0
 8012afc:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, 10);
 8012afe:	1df9      	adds	r1, r7, #7
 8012b00:	230a      	movs	r3, #10
 8012b02:	2201      	movs	r2, #1
 8012b04:	4803      	ldr	r0, [pc, #12]	; (8012b14 <_putchar+0x20>)
 8012b06:	f008 ff92 	bl	801ba2e <HAL_UART_Transmit>
}
 8012b0a:	bf00      	nop
 8012b0c:	3708      	adds	r7, #8
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}
 8012b12:	bf00      	nop
 8012b14:	200110e8 	.word	0x200110e8

08012b18 <Health_StartTask>:

void Health_StartTask(void *argument){
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b082      	sub	sp, #8
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
	ModuleHealth::main();
 8012b20:	f7ff fea8 	bl	8012874 <_ZN2FC12ModuleHealth4mainEv>
}
 8012b24:	bf00      	nop
 8012b26:	3708      	adds	r7, #8
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}

08012b2c <Debug_StartTask>:
void Debug_StartTask(void *argument){
 8012b2c:	b590      	push	{r4, r7, lr}
 8012b2e:	b0ed      	sub	sp, #436	; 0x1b4
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	1d3b      	adds	r3, r7, #4
 8012b34:	6018      	str	r0, [r3, #0]
	uint32_t tick;
	tick = osKernelGetTickCount();
 8012b36:	f00e f827 	bl	8020b88 <osKernelGetTickCount>
 8012b3a:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac

	struct VehicleAttitueSP attitudeSP;
//	osDelay(2000);
//	sensorBaro.setSeaLevelPressure(gps.alt);
	while(1){
		tick += 5;
 8012b3e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8012b42:	3305      	adds	r3, #5
 8012b44:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
		osDelayUntil(tick);
 8012b48:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8012b4c:	f00e fa92 	bl	8021074 <osDelayUntil>
		msgBus.getHealth(&health);
 8012b50:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8012b54:	4619      	mov	r1, r3
 8012b56:	48ab      	ldr	r0, [pc, #684]	; (8012e04 <Debug_StartTask+0x2d8>)
 8012b58:	f7ff fd74 	bl	8012644 <_ZN2FC6MsgBus9getHealthEPNS_6HealthE>
		hzAccel = health.accel;
 8012b5c:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 8012b60:	4ba9      	ldr	r3, [pc, #676]	; (8012e08 <Debug_StartTask+0x2dc>)
 8012b62:	801a      	strh	r2, [r3, #0]
		hzBaro = health.baro;
 8012b64:	f8b7 219a 	ldrh.w	r2, [r7, #410]	; 0x19a
 8012b68:	4ba8      	ldr	r3, [pc, #672]	; (8012e0c <Debug_StartTask+0x2e0>)
 8012b6a:	801a      	strh	r2, [r3, #0]
		hzGyro = health.gyro;
 8012b6c:	f8b7 2192 	ldrh.w	r2, [r7, #402]	; 0x192
 8012b70:	4ba7      	ldr	r3, [pc, #668]	; (8012e10 <Debug_StartTask+0x2e4>)
 8012b72:	801a      	strh	r2, [r3, #0]
		hzGPS = health.gps;
 8012b74:	f8b7 2198 	ldrh.w	r2, [r7, #408]	; 0x198
 8012b78:	4ba6      	ldr	r3, [pc, #664]	; (8012e14 <Debug_StartTask+0x2e8>)
 8012b7a:	801a      	strh	r2, [r3, #0]
		hzMag = health.mag;
 8012b7c:	f8b7 2196 	ldrh.w	r2, [r7, #406]	; 0x196
 8012b80:	4ba5      	ldr	r3, [pc, #660]	; (8012e18 <Debug_StartTask+0x2ec>)
 8012b82:	801a      	strh	r2, [r3, #0]
		hzAHRS = health.ahrs;
 8012b84:	f8b7 219e 	ldrh.w	r2, [r7, #414]	; 0x19e
 8012b88:	4ba4      	ldr	r3, [pc, #656]	; (8012e1c <Debug_StartTask+0x2f0>)
 8012b8a:	801a      	strh	r2, [r3, #0]
		hzRC = health.rc;
 8012b8c:	f8b7 2194 	ldrh.w	r2, [r7, #404]	; 0x194
 8012b90:	4ba3      	ldr	r3, [pc, #652]	; (8012e20 <Debug_StartTask+0x2f4>)
 8012b92:	801a      	strh	r2, [r3, #0]
		hzAtti = health.attitudeController;
 8012b94:	f8b7 21a2 	ldrh.w	r2, [r7, #418]	; 0x1a2
 8012b98:	4ba2      	ldr	r3, [pc, #648]	; (8012e24 <Debug_StartTask+0x2f8>)
 8012b9a:	801a      	strh	r2, [r3, #0]
		hzPos = health.positionController;
 8012b9c:	f8b7 21a4 	ldrh.w	r2, [r7, #420]	; 0x1a4
 8012ba0:	4ba1      	ldr	r3, [pc, #644]	; (8012e28 <Debug_StartTask+0x2fc>)
 8012ba2:	801a      	strh	r2, [r3, #0]
		hzINS = health.ins;
 8012ba4:	f8b7 21a0 	ldrh.w	r2, [r7, #416]	; 0x1a0
 8012ba8:	4ba0      	ldr	r3, [pc, #640]	; (8012e2c <Debug_StartTask+0x300>)
 8012baa:	801a      	strh	r2, [r3, #0]
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);

		msgBus.getMotorPWM(&pwm);
 8012bac:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8012bb0:	4619      	mov	r1, r3
 8012bb2:	4894      	ldr	r0, [pc, #592]	; (8012e04 <Debug_StartTask+0x2d8>)
 8012bb4:	f7ff fd81 	bl	80126ba <_ZN2FC6MsgBus11getMotorPWMEPNS_8MotorPWME>
		pwm1 = pwm.m1;
 8012bb8:	f8b7 2178 	ldrh.w	r2, [r7, #376]	; 0x178
 8012bbc:	4b9c      	ldr	r3, [pc, #624]	; (8012e30 <Debug_StartTask+0x304>)
 8012bbe:	801a      	strh	r2, [r3, #0]
		pwm2 = pwm.m2;
 8012bc0:	f8b7 217a 	ldrh.w	r2, [r7, #378]	; 0x17a
 8012bc4:	4b9b      	ldr	r3, [pc, #620]	; (8012e34 <Debug_StartTask+0x308>)
 8012bc6:	801a      	strh	r2, [r3, #0]
		pwm3 = pwm.m3;
 8012bc8:	f8b7 217c 	ldrh.w	r2, [r7, #380]	; 0x17c
 8012bcc:	4b9a      	ldr	r3, [pc, #616]	; (8012e38 <Debug_StartTask+0x30c>)
 8012bce:	801a      	strh	r2, [r3, #0]
		pwm4 = pwm.m4;
 8012bd0:	f8b7 217e 	ldrh.w	r2, [r7, #382]	; 0x17e
 8012bd4:	4b99      	ldr	r3, [pc, #612]	; (8012e3c <Debug_StartTask+0x310>)
 8012bd6:	801a      	strh	r2, [r3, #0]
		pwm5 = pwm.m5;
 8012bd8:	f8b7 2180 	ldrh.w	r2, [r7, #384]	; 0x180
 8012bdc:	4b98      	ldr	r3, [pc, #608]	; (8012e40 <Debug_StartTask+0x314>)
 8012bde:	801a      	strh	r2, [r3, #0]
		pwm6 = pwm.m6;
 8012be0:	f8b7 2182 	ldrh.w	r2, [r7, #386]	; 0x182
 8012be4:	4b97      	ldr	r3, [pc, #604]	; (8012e44 <Debug_StartTask+0x318>)
 8012be6:	801a      	strh	r2, [r3, #0]

		msgBus.getAttitude(&att);
 8012be8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8012bec:	4619      	mov	r1, r3
 8012bee:	4885      	ldr	r0, [pc, #532]	; (8012e04 <Debug_StartTask+0x2d8>)
 8012bf0:	f7fc fe7a 	bl	800f8e8 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
		att_roll = att.roll;
 8012bf4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8012bf8:	4a93      	ldr	r2, [pc, #588]	; (8012e48 <Debug_StartTask+0x31c>)
 8012bfa:	6013      	str	r3, [r2, #0]
		att_pitch = att.pitch;
 8012bfc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8012c00:	4a92      	ldr	r2, [pc, #584]	; (8012e4c <Debug_StartTask+0x320>)
 8012c02:	6013      	str	r3, [r2, #0]
		att_yaw = att.yaw;
 8012c04:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8012c08:	4a91      	ldr	r2, [pc, #580]	; (8012e50 <Debug_StartTask+0x324>)
 8012c0a:	6013      	str	r3, [r2, #0]

		msgBus.getController(&ctl);
 8012c0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c10:	4619      	mov	r1, r3
 8012c12:	487c      	ldr	r0, [pc, #496]	; (8012e04 <Debug_StartTask+0x2d8>)
 8012c14:	f7fc fe24 	bl	800f860 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>
		ctl_roll = ctl.roll;
 8012c18:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8012c1c:	4b8d      	ldr	r3, [pc, #564]	; (8012e54 <Debug_StartTask+0x328>)
 8012c1e:	801a      	strh	r2, [r3, #0]
		ctl_pitch = ctl.pitch;
 8012c20:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 8012c24:	4b8c      	ldr	r3, [pc, #560]	; (8012e58 <Debug_StartTask+0x32c>)
 8012c26:	801a      	strh	r2, [r3, #0]
		ctl_yaw = ctl.yaw;
 8012c28:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 8012c2c:	4b8b      	ldr	r3, [pc, #556]	; (8012e5c <Debug_StartTask+0x330>)
 8012c2e:	801a      	strh	r2, [r3, #0]
		ctl_throtle = ctl.throttle;
 8012c30:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 8012c34:	4b8a      	ldr	r3, [pc, #552]	; (8012e60 <Debug_StartTask+0x334>)
 8012c36:	801a      	strh	r2, [r3, #0]

		if(msgBus.getBodyAccel(&bodyAccel)){
 8012c38:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012c3c:	4619      	mov	r1, r3
 8012c3e:	4871      	ldr	r0, [pc, #452]	; (8012e04 <Debug_StartTask+0x2d8>)
 8012c40:	f7fa fc54 	bl	800d4ec <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>
 8012c44:	4603      	mov	r3, r0
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d00e      	beq.n	8012c68 <Debug_StartTask+0x13c>
			body_ax = bodyAccel.xyz[0];
 8012c4a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012c4e:	689b      	ldr	r3, [r3, #8]
 8012c50:	4a84      	ldr	r2, [pc, #528]	; (8012e64 <Debug_StartTask+0x338>)
 8012c52:	6013      	str	r3, [r2, #0]
			body_ay = bodyAccel.xyz[1];
 8012c54:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012c58:	68db      	ldr	r3, [r3, #12]
 8012c5a:	4a83      	ldr	r2, [pc, #524]	; (8012e68 <Debug_StartTask+0x33c>)
 8012c5c:	6013      	str	r3, [r2, #0]
			body_az = bodyAccel.xyz[2];
 8012c5e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012c62:	691b      	ldr	r3, [r3, #16]
 8012c64:	4a81      	ldr	r2, [pc, #516]	; (8012e6c <Debug_StartTask+0x340>)
 8012c66:	6013      	str	r3, [r2, #0]
		}
		if(msgBus.getBodyAngularVelocity(&bodyAnglularVel)){
 8012c68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c6c:	4619      	mov	r1, r3
 8012c6e:	4865      	ldr	r0, [pc, #404]	; (8012e04 <Debug_StartTask+0x2d8>)
 8012c70:	f7fa fc5f 	bl	800d532 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>
 8012c74:	4603      	mov	r3, r0
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d00e      	beq.n	8012c98 <Debug_StartTask+0x16c>
			body_gx = bodyAnglularVel.xyz[0];
 8012c7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c7e:	689b      	ldr	r3, [r3, #8]
 8012c80:	4a7b      	ldr	r2, [pc, #492]	; (8012e70 <Debug_StartTask+0x344>)
 8012c82:	6013      	str	r3, [r2, #0]
			body_gy = bodyAnglularVel.xyz[1];
 8012c84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c88:	68db      	ldr	r3, [r3, #12]
 8012c8a:	4a7a      	ldr	r2, [pc, #488]	; (8012e74 <Debug_StartTask+0x348>)
 8012c8c:	6013      	str	r3, [r2, #0]
			body_gz = bodyAnglularVel.xyz[2];
 8012c8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c92:	691b      	ldr	r3, [r3, #16]
 8012c94:	4a78      	ldr	r2, [pc, #480]	; (8012e78 <Debug_StartTask+0x34c>)
 8012c96:	6013      	str	r3, [r2, #0]
		}
//		osKernelLock();
		if(msgBus.getBarometer(&baro)){
 8012c98:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012c9c:	4619      	mov	r1, r3
 8012c9e:	4859      	ldr	r0, [pc, #356]	; (8012e04 <Debug_StartTask+0x2d8>)
 8012ca0:	f7fd fc24 	bl	80104ec <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d003      	beq.n	8012cb2 <Debug_StartTask+0x186>
			baro_alt = baro.altitude;
 8012caa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012cae:	4a73      	ldr	r2, [pc, #460]	; (8012e7c <Debug_StartTask+0x350>)
 8012cb0:	6013      	str	r3, [r2, #0]
//			printf_("baro : %u %f\r\n", (unsigned int)baro.timestamp, baro_alt);
		}

		if(msgBus.getNedAccel(&nedAccel)){
 8012cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cb6:	4619      	mov	r1, r3
 8012cb8:	4852      	ldr	r0, [pc, #328]	; (8012e04 <Debug_StartTask+0x2d8>)
 8012cba:	f7fd fc3b 	bl	8010534 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d00b      	beq.n	8012cdc <Debug_StartTask+0x1b0>
			ned_ax = nedAccel.xyz[0];
 8012cc4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8012cc8:	4a6d      	ldr	r2, [pc, #436]	; (8012e80 <Debug_StartTask+0x354>)
 8012cca:	6013      	str	r3, [r2, #0]
			ned_ay = nedAccel.xyz[1];
 8012ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8012cd0:	4a6c      	ldr	r2, [pc, #432]	; (8012e84 <Debug_StartTask+0x358>)
 8012cd2:	6013      	str	r3, [r2, #0]
			ned_az = nedAccel.xyz[2];
 8012cd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8012cd8:	4a6b      	ldr	r2, [pc, #428]	; (8012e88 <Debug_StartTask+0x35c>)
 8012cda:	6013      	str	r3, [r2, #0]
//			printf_("ned accel : %u %f %f %f\r\n", (unsigned int)nedAccel.timestamp, nedAccel.xyz[0], nedAccel.xyz[1], nedAccel.xyz[2]);
		}

		if(msgBus.getGPS(&gps)){
 8012cdc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	4848      	ldr	r0, [pc, #288]	; (8012e04 <Debug_StartTask+0x2d8>)
 8012ce4:	f7fd fbe2 	bl	80104ac <_ZN2FC6MsgBus6getGPSEPNS_3GPSE>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d01a      	beq.n	8012d24 <Debug_StartTask+0x1f8>
			gps_lat = gps.lat;
 8012cee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012cf2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	4621      	mov	r1, r4
 8012cfa:	f7ed ff7d 	bl	8000bf8 <__aeabi_d2f>
 8012cfe:	4602      	mov	r2, r0
 8012d00:	4b62      	ldr	r3, [pc, #392]	; (8012e8c <Debug_StartTask+0x360>)
 8012d02:	601a      	str	r2, [r3, #0]
			gps_lon = gps.lon;
 8012d04:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012d08:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	4621      	mov	r1, r4
 8012d10:	f7ed ff72 	bl	8000bf8 <__aeabi_d2f>
 8012d14:	4602      	mov	r2, r0
 8012d16:	4b5e      	ldr	r3, [pc, #376]	; (8012e90 <Debug_StartTask+0x364>)
 8012d18:	601a      	str	r2, [r3, #0]
			gps_alt = gps.alt;
 8012d1a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012d1e:	6a1b      	ldr	r3, [r3, #32]
 8012d20:	4a5c      	ldr	r2, [pc, #368]	; (8012e94 <Debug_StartTask+0x368>)
 8012d22:	6013      	str	r3, [r2, #0]
//			printf_("GPS : %u %f %f %f %f %f %f %f %u %f %f\r\n", (unsigned int)gps.timestamp, gps.lat, gps.lon, gps.alt, gps.velN, gps.velE
//						   , gps.direction, gps.vel
//						   , gps.fixType, gps.hdop, gps.vdop);
		}

		if(msgBus.getLocalPosition(&localPosition)){
 8012d24:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012d28:	4619      	mov	r1, r3
 8012d2a:	4836      	ldr	r0, [pc, #216]	; (8012e04 <Debug_StartTask+0x2d8>)
 8012d2c:	f7fd fdd8 	bl	80108e0 <_ZN2FC6MsgBus16getLocalPositionEPNS_13LocalPositionE>
 8012d30:	4603      	mov	r3, r0
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d017      	beq.n	8012d66 <Debug_StartTask+0x23a>
			local_x = localPosition.x;
 8012d36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012d3a:	4a57      	ldr	r2, [pc, #348]	; (8012e98 <Debug_StartTask+0x36c>)
 8012d3c:	6013      	str	r3, [r2, #0]
			local_y = localPosition.y;
 8012d3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012d42:	4a56      	ldr	r2, [pc, #344]	; (8012e9c <Debug_StartTask+0x370>)
 8012d44:	6013      	str	r3, [r2, #0]
			local_z = localPosition.z;
 8012d46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8012d4a:	4a55      	ldr	r2, [pc, #340]	; (8012ea0 <Debug_StartTask+0x374>)
 8012d4c:	6013      	str	r3, [r2, #0]
			local_vx = localPosition.vx;
 8012d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012d52:	4a54      	ldr	r2, [pc, #336]	; (8012ea4 <Debug_StartTask+0x378>)
 8012d54:	6013      	str	r3, [r2, #0]
			local_vy = localPosition.vy;
 8012d56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012d5a:	4a53      	ldr	r2, [pc, #332]	; (8012ea8 <Debug_StartTask+0x37c>)
 8012d5c:	6013      	str	r3, [r2, #0]
			local_vz = localPosition.vz;
 8012d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012d62:	4a52      	ldr	r2, [pc, #328]	; (8012eac <Debug_StartTask+0x380>)
 8012d64:	6013      	str	r3, [r2, #0]
//			printf_("ned position : %u %f %f %f\r\n", (unsigned int)localPosition.timestamp, local_x, local_y, local_z);
		}

		if(msgBus.getBodyMag(&bodyMag)){
 8012d66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012d6a:	4619      	mov	r1, r3
 8012d6c:	4825      	ldr	r0, [pc, #148]	; (8012e04 <Debug_StartTask+0x2d8>)
 8012d6e:	f7fa fc04 	bl	800d57a <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>
 8012d72:	4603      	mov	r3, r0
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d00e      	beq.n	8012d96 <Debug_StartTask+0x26a>
			mag_x = bodyMag.xyz[0];
 8012d78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012d7c:	689b      	ldr	r3, [r3, #8]
 8012d7e:	4a4c      	ldr	r2, [pc, #304]	; (8012eb0 <Debug_StartTask+0x384>)
 8012d80:	6013      	str	r3, [r2, #0]
			mag_y = bodyMag.xyz[1];
 8012d82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012d86:	68db      	ldr	r3, [r3, #12]
 8012d88:	4a4a      	ldr	r2, [pc, #296]	; (8012eb4 <Debug_StartTask+0x388>)
 8012d8a:	6013      	str	r3, [r2, #0]
			mag_z = bodyMag.xyz[2];
 8012d8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012d90:	691b      	ldr	r3, [r3, #16]
 8012d92:	4a49      	ldr	r2, [pc, #292]	; (8012eb8 <Debug_StartTask+0x38c>)
 8012d94:	6013      	str	r3, [r2, #0]
		}

		if(msgBus.getModeFlag(&modeFlag)){
 8012d96:	f107 0320 	add.w	r3, r7, #32
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	4819      	ldr	r0, [pc, #100]	; (8012e04 <Debug_StartTask+0x2d8>)
 8012d9e:	f7fc fdc9 	bl	800f934 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
 8012da2:	4603      	mov	r3, r0
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d00b      	beq.n	8012dc0 <Debug_StartTask+0x294>
			mode_arm = (uint8_t)modeFlag.armMode;
 8012da8:	f107 0320 	add.w	r3, r7, #32
 8012dac:	689b      	ldr	r3, [r3, #8]
 8012dae:	b2da      	uxtb	r2, r3
 8012db0:	4b42      	ldr	r3, [pc, #264]	; (8012ebc <Debug_StartTask+0x390>)
 8012db2:	701a      	strb	r2, [r3, #0]
			mode_flight = (uint8_t)modeFlag.flightMode;
 8012db4:	f107 0320 	add.w	r3, r7, #32
 8012db8:	68db      	ldr	r3, [r3, #12]
 8012dba:	b2da      	uxtb	r2, r3
 8012dbc:	4b40      	ldr	r3, [pc, #256]	; (8012ec0 <Debug_StartTask+0x394>)
 8012dbe:	701a      	strb	r2, [r3, #0]
		}

		if(msgBus.getVehicleAttitueSP(&attitudeSP)){
 8012dc0:	f107 0308 	add.w	r3, r7, #8
 8012dc4:	4619      	mov	r1, r3
 8012dc6:	480f      	ldr	r0, [pc, #60]	; (8012e04 <Debug_StartTask+0x2d8>)
 8012dc8:	f7fc fd6a 	bl	800f8a0 <_ZN2FC6MsgBus19getVehicleAttitueSPEPNS_16VehicleAttitueSPE>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d013      	beq.n	8012dfa <Debug_StartTask+0x2ce>
			sp_roll = attitudeSP.roll;
 8012dd2:	f107 0308 	add.w	r3, r7, #8
 8012dd6:	689b      	ldr	r3, [r3, #8]
 8012dd8:	4a3a      	ldr	r2, [pc, #232]	; (8012ec4 <Debug_StartTask+0x398>)
 8012dda:	6013      	str	r3, [r2, #0]
			sp_pitch = attitudeSP.pitch;
 8012ddc:	f107 0308 	add.w	r3, r7, #8
 8012de0:	68db      	ldr	r3, [r3, #12]
 8012de2:	4a39      	ldr	r2, [pc, #228]	; (8012ec8 <Debug_StartTask+0x39c>)
 8012de4:	6013      	str	r3, [r2, #0]
			sp_throtle = attitudeSP.throttle;
 8012de6:	f107 0308 	add.w	r3, r7, #8
 8012dea:	695b      	ldr	r3, [r3, #20]
 8012dec:	4a37      	ldr	r2, [pc, #220]	; (8012ecc <Debug_StartTask+0x3a0>)
 8012dee:	6013      	str	r3, [r2, #0]
			sp_yaw = attitudeSP.yawRate;
 8012df0:	f107 0308 	add.w	r3, r7, #8
 8012df4:	691b      	ldr	r3, [r3, #16]
 8012df6:	4a36      	ldr	r2, [pc, #216]	; (8012ed0 <Debug_StartTask+0x3a4>)
 8012df8:	6013      	str	r3, [r2, #0]
		}
//		osKernelUnlock();
		channel = m1.Channel;
 8012dfa:	4b36      	ldr	r3, [pc, #216]	; (8012ed4 <Debug_StartTask+0x3a8>)
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	4a36      	ldr	r2, [pc, #216]	; (8012ed8 <Debug_StartTask+0x3ac>)
 8012e00:	6013      	str	r3, [r2, #0]
		tick += 5;
 8012e02:	e69c      	b.n	8012b3e <Debug_StartTask+0x12>
 8012e04:	20000b98 	.word	0x20000b98
 8012e08:	20001486 	.word	0x20001486
 8012e0c:	20001488 	.word	0x20001488
 8012e10:	2000148a 	.word	0x2000148a
 8012e14:	2000148c 	.word	0x2000148c
 8012e18:	2000148e 	.word	0x2000148e
 8012e1c:	20001490 	.word	0x20001490
 8012e20:	20001492 	.word	0x20001492
 8012e24:	20001494 	.word	0x20001494
 8012e28:	20001496 	.word	0x20001496
 8012e2c:	20001498 	.word	0x20001498
 8012e30:	2000149a 	.word	0x2000149a
 8012e34:	2000149c 	.word	0x2000149c
 8012e38:	2000149e 	.word	0x2000149e
 8012e3c:	200014a0 	.word	0x200014a0
 8012e40:	200014a2 	.word	0x200014a2
 8012e44:	200014a4 	.word	0x200014a4
 8012e48:	200014a8 	.word	0x200014a8
 8012e4c:	200014ac 	.word	0x200014ac
 8012e50:	200014b0 	.word	0x200014b0
 8012e54:	200014b4 	.word	0x200014b4
 8012e58:	200014b6 	.word	0x200014b6
 8012e5c:	200014b8 	.word	0x200014b8
 8012e60:	200014ba 	.word	0x200014ba
 8012e64:	200014f0 	.word	0x200014f0
 8012e68:	200014f4 	.word	0x200014f4
 8012e6c:	200014f8 	.word	0x200014f8
 8012e70:	200014fc 	.word	0x200014fc
 8012e74:	20001500 	.word	0x20001500
 8012e78:	20001504 	.word	0x20001504
 8012e7c:	200014bc 	.word	0x200014bc
 8012e80:	200014c0 	.word	0x200014c0
 8012e84:	200014c4 	.word	0x200014c4
 8012e88:	200014c8 	.word	0x200014c8
 8012e8c:	200014e4 	.word	0x200014e4
 8012e90:	200014e8 	.word	0x200014e8
 8012e94:	200014ec 	.word	0x200014ec
 8012e98:	200014cc 	.word	0x200014cc
 8012e9c:	200014d0 	.word	0x200014d0
 8012ea0:	200014d4 	.word	0x200014d4
 8012ea4:	200014d8 	.word	0x200014d8
 8012ea8:	200014dc 	.word	0x200014dc
 8012eac:	200014e0 	.word	0x200014e0
 8012eb0:	20001508 	.word	0x20001508
 8012eb4:	2000150c 	.word	0x2000150c
 8012eb8:	20001510 	.word	0x20001510
 8012ebc:	20001524 	.word	0x20001524
 8012ec0:	20001525 	.word	0x20001525
 8012ec4:	20001514 	.word	0x20001514
 8012ec8:	20001518 	.word	0x20001518
 8012ecc:	2000151c 	.word	0x2000151c
 8012ed0:	20001520 	.word	0x20001520
 8012ed4:	2000087c 	.word	0x2000087c
 8012ed8:	20001528 	.word	0x20001528

08012edc <MPU9250_StartTask>:

//		osDelay(5);
	}
}

void MPU9250_StartTask(void *argument){
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b084      	sub	sp, #16
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
	uint32_t tick;
	tick = osKernelGetTickCount();
 8012ee4:	f00d fe50 	bl	8020b88 <osKernelGetTickCount>
 8012ee8:	60f8      	str	r0, [r7, #12]
	while(1){
		tick += 5;
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	3305      	adds	r3, #5
 8012eee:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick);
 8012ef0:	68f8      	ldr	r0, [r7, #12]
 8012ef2:	f00e f8bf 	bl	8021074 <osDelayUntil>
		MPU9250_updateDMA();
 8012ef6:	f7ee fc31 	bl	800175c <MPU9250_updateDMA>
		tick += 5;
 8012efa:	e7f6      	b.n	8012eea <MPU9250_StartTask+0xe>

08012efc <BME280_StartTask>:
//		osDelay(5);				/* 200hz */
	}
}
void BME280_StartTask(void *argument){
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b082      	sub	sp, #8
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
	while(1){
		BME280_readIT();
 8012f04:	f7ef fb30 	bl	8002568 <BME280_readIT>
		osDelay(20); 			/* 50hz */
 8012f08:	2014      	movs	r0, #20
 8012f0a:	f00e f885 	bl	8021018 <osDelay>
		BME280_readIT();
 8012f0e:	e7f9      	b.n	8012f04 <BME280_StartTask+0x8>

08012f10 <IST8310_StartTask>:
	}
}
void IST8310_StartTask(void *argument){
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b082      	sub	sp, #8
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
	while(1){
//		IST8310_updataIT();
		osDelay(10); 			/* 100hz */
 8012f18:	200a      	movs	r0, #10
 8012f1a:	f00e f87d 	bl	8021018 <osDelay>
 8012f1e:	e7fb      	b.n	8012f18 <IST8310_StartTask+0x8>

08012f20 <SD_StartTask>:
	}
}
void SD_StartTask(void *argument){
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b082      	sub	sp, #8
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
	ModuleSD::main();
 8012f28:	f7ff fcfa 	bl	8012920 <_ZN2FC8ModuleSD4mainEv>
}
 8012f2c:	bf00      	nop
 8012f2e:	3708      	adds	r7, #8
 8012f30:	46bd      	mov	sp, r7
 8012f32:	bd80      	pop	{r7, pc}

08012f34 <AHRS_StartTask>:

void AHRS_StartTask(void *argument){
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b082      	sub	sp, #8
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
	ModuleAHRS::main();
 8012f3c:	f7ff fc0a 	bl	8012754 <_ZN2FC10ModuleAHRS4mainEv>
}
 8012f40:	bf00      	nop
 8012f42:	3708      	adds	r7, #8
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}

08012f48 <Commander_StartTask>:

void Commander_StartTask(void *argument){
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
	ModuleCommander::main();
 8012f50:	f7fd f876 	bl	8010040 <_ZN2FC15ModuleCommander4mainEv>
}
 8012f54:	bf00      	nop
 8012f56:	3708      	adds	r7, #8
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}

08012f5c <Buzzer_StartTask>:

void Buzzer_StartTask(void *argument){
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b082      	sub	sp, #8
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
	ModuleBuzzer::main();
 8012f64:	f7fc fee6 	bl	800fd34 <_ZN2FC12ModuleBuzzer4mainEv>
}
 8012f68:	bf00      	nop
 8012f6a:	3708      	adds	r7, #8
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}

08012f70 <AC_StartTask>:

void AC_StartTask(void *argument){
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b082      	sub	sp, #8
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
	ModuleAttitudeController::main();
 8012f78:	f7ff fbc6 	bl	8012708 <_ZN2FC24ModuleAttitudeController4mainEv>
}
 8012f7c:	bf00      	nop
 8012f7e:	3708      	adds	r7, #8
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}

08012f84 <INS_StartTask>:

void INS_StartTask(void *argument){
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b082      	sub	sp, #8
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
	ModuleINS::main();
 8012f8c:	f7ff fc4e 	bl	801282c <_ZN2FC9ModuleINS4mainEv>
}
 8012f90:	bf00      	nop
 8012f92:	3708      	adds	r7, #8
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}

08012f98 <PC_StartTask>:

void PC_StartTask(void *argument){
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b082      	sub	sp, #8
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
	ModulePositionController::main();
 8012fa0:	f7ff fbee 	bl	8012780 <_ZN2FC24ModulePositionController4mainEv>
}
 8012fa4:	bf00      	nop
 8012fa6:	3708      	adds	r7, #8
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd80      	pop	{r7, pc}

08012fac <cppMain>:
/*
 *  LED signal
 *  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 */

void cppMain(){
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b084      	sub	sp, #16
 8012fb0:	af04      	add	r7, sp, #16
    setvbuf(stdout, NULL, _IONBF, 0);
 8012fb2:	4b1f      	ldr	r3, [pc, #124]	; (8013030 <cppMain+0x84>)
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	6898      	ldr	r0, [r3, #8]
 8012fb8:	2300      	movs	r3, #0
 8012fba:	2202      	movs	r2, #2
 8012fbc:	2100      	movs	r1, #0
 8012fbe:	f016 fbd7 	bl	8029770 <setvbuf>
    printf_("test\r\n");
 8012fc2:	481c      	ldr	r0, [pc, #112]	; (8013034 <cppMain+0x88>)
 8012fc4:	f7fa fa76 	bl	800d4b4 <printf_>



    /* micro second timer start */
	HAL_TIM_Base_Start_IT(&htim2);
 8012fc8:	481b      	ldr	r0, [pc, #108]	; (8013038 <cppMain+0x8c>)
 8012fca:	f007 fbf0 	bl	801a7ae <HAL_TIM_Base_Start_IT>

	MPU9250(&hi2c1);
 8012fce:	481b      	ldr	r0, [pc, #108]	; (801303c <cppMain+0x90>)
 8012fd0:	f7ee fb34 	bl	800163c <MPU9250>
	 * RMS Noise : 0.3Pa/2.5cm
	 * Data output rate : 83hz
	 * Filter bandwidth : 1.75 Hz
	 * response time : 0.3s
	 */
	BME280_init(&hi2c2, P_OSR_04, H_OSR_00, T_OSR_01, normal, BW0_021ODR,t_00_5ms);
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	9302      	str	r3, [sp, #8]
 8012fd8:	2304      	movs	r3, #4
 8012fda:	9301      	str	r3, [sp, #4]
 8012fdc:	2303      	movs	r3, #3
 8012fde:	9300      	str	r3, [sp, #0]
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	2201      	movs	r2, #1
 8012fe4:	2103      	movs	r1, #3
 8012fe6:	4816      	ldr	r0, [pc, #88]	; (8013040 <cppMain+0x94>)
 8012fe8:	f7ef f9c6 	bl	8002378 <BME280_init>

	IST8310(&hi2c2);
 8012fec:	4814      	ldr	r0, [pc, #80]	; (8013040 <cppMain+0x94>)
 8012fee:	f7ee f9ed 	bl	80013cc <IST8310>

#ifdef USE_GPS
	/*
	 *  GPS using DMA circular mode
	 */
    TM_GPS_Init(&huart6);
 8012ff2:	4814      	ldr	r0, [pc, #80]	; (8013044 <cppMain+0x98>)
 8012ff4:	f7ef fdac 	bl	8002b50 <TM_GPS_Init>
#endif

#ifdef USE_SBUS
	SBUS_init(&huart1);
 8012ff8:	4813      	ldr	r0, [pc, #76]	; (8013048 <cppMain+0x9c>)
 8012ffa:	f7ff f84d 	bl	8012098 <SBUS_init>
#endif

	//	Lidar1D_init(&htim9, TIM_CHANNEL_1, TIM_CHANNEL_2);
	//	Lidar1D_run();

	m1.start();
 8012ffe:	4813      	ldr	r0, [pc, #76]	; (801304c <cppMain+0xa0>)
 8013000:	f7ee f93f 	bl	8001282 <_ZN2FC5Motor5startEv>
	m2.start();
 8013004:	4812      	ldr	r0, [pc, #72]	; (8013050 <cppMain+0xa4>)
 8013006:	f7ee f93c 	bl	8001282 <_ZN2FC5Motor5startEv>
	m3.start();
 801300a:	4812      	ldr	r0, [pc, #72]	; (8013054 <cppMain+0xa8>)
 801300c:	f7ee f939 	bl	8001282 <_ZN2FC5Motor5startEv>
	m4.start();
 8013010:	4811      	ldr	r0, [pc, #68]	; (8013058 <cppMain+0xac>)
 8013012:	f7ee f936 	bl	8001282 <_ZN2FC5Motor5startEv>
	m5.start();
 8013016:	4811      	ldr	r0, [pc, #68]	; (801305c <cppMain+0xb0>)
 8013018:	f7ee f933 	bl	8001282 <_ZN2FC5Motor5startEv>
	m6.start();
 801301c:	4810      	ldr	r0, [pc, #64]	; (8013060 <cppMain+0xb4>)
 801301e:	f7ee f930 	bl	8001282 <_ZN2FC5Motor5startEv>

    printf_("boot complete\r\n");
 8013022:	4810      	ldr	r0, [pc, #64]	; (8013064 <cppMain+0xb8>)
 8013024:	f7fa fa46 	bl	800d4b4 <printf_>
}
 8013028:	bf00      	nop
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}
 801302e:	bf00      	nop
 8013030:	2000068c 	.word	0x2000068c
 8013034:	0802cf74 	.word	0x0802cf74
 8013038:	20010f68 	.word	0x20010f68
 801303c:	20010bdc 	.word	0x20010bdc
 8013040:	20010c30 	.word	0x20010c30
 8013044:	200110a8 	.word	0x200110a8
 8013048:	20011068 	.word	0x20011068
 801304c:	2000087c 	.word	0x2000087c
 8013050:	20000888 	.word	0x20000888
 8013054:	20000894 	.word	0x20000894
 8013058:	200008a0 	.word	0x200008a0
 801305c:	200008ac 	.word	0x200008ac
 8013060:	200008b8 	.word	0x200008b8
 8013064:	0802cf7c 	.word	0x0802cf7c

08013068 <HAL_I2C_MemRxCpltCallback>:

//callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8013068:	b5f0      	push	{r4, r5, r6, r7, lr}
 801306a:	b083      	sub	sp, #12
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
//#ifdef USE_MPU9250
	if(hi2c->Instance == mpu9250.hi2c->Instance){
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	681a      	ldr	r2, [r3, #0]
 8013074:	4b50      	ldr	r3, [pc, #320]	; (80131b8 <HAL_I2C_MemRxCpltCallback+0x150>)
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	429a      	cmp	r2, r3
 801307c:	d169      	bne.n	8013152 <HAL_I2C_MemRxCpltCallback+0xea>
		switch(MPU9250_i2cRxCpltCallback()){
 801307e:	f7ee fb8d 	bl	800179c <MPU9250_i2cRxCpltCallback>
 8013082:	4603      	mov	r3, r0
 8013084:	2b01      	cmp	r3, #1
 8013086:	d002      	beq.n	801308e <HAL_I2C_MemRxCpltCallback+0x26>
 8013088:	2b02      	cmp	r3, #2
 801308a:	d04f      	beq.n	801312c <HAL_I2C_MemRxCpltCallback+0xc4>
 801308c:	e061      	b.n	8013152 <HAL_I2C_MemRxCpltCallback+0xea>
		case 1:
			sensorAccel.setAccel(mpu9250.accel[0]*FC_GRAVITY_ACCEERATION
 801308e:	4b4a      	ldr	r3, [pc, #296]	; (80131b8 <HAL_I2C_MemRxCpltCallback+0x150>)
 8013090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013092:	4618      	mov	r0, r3
 8013094:	f7ed fa60 	bl	8000558 <__aeabi_f2d>
 8013098:	a345      	add	r3, pc, #276	; (adr r3, 80131b0 <HAL_I2C_MemRxCpltCallback+0x148>)
 801309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801309e:	f7ed fab3 	bl	8000608 <__aeabi_dmul>
 80130a2:	4603      	mov	r3, r0
 80130a4:	460c      	mov	r4, r1
 80130a6:	4618      	mov	r0, r3
 80130a8:	4621      	mov	r1, r4
 80130aa:	f7ed fda5 	bl	8000bf8 <__aeabi_d2f>
 80130ae:	4605      	mov	r5, r0
							   , mpu9250.accel[1]*FC_GRAVITY_ACCEERATION
 80130b0:	4b41      	ldr	r3, [pc, #260]	; (80131b8 <HAL_I2C_MemRxCpltCallback+0x150>)
 80130b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7ed fa4f 	bl	8000558 <__aeabi_f2d>
 80130ba:	a33d      	add	r3, pc, #244	; (adr r3, 80131b0 <HAL_I2C_MemRxCpltCallback+0x148>)
 80130bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130c0:	f7ed faa2 	bl	8000608 <__aeabi_dmul>
 80130c4:	4603      	mov	r3, r0
 80130c6:	460c      	mov	r4, r1
			sensorAccel.setAccel(mpu9250.accel[0]*FC_GRAVITY_ACCEERATION
 80130c8:	4618      	mov	r0, r3
 80130ca:	4621      	mov	r1, r4
 80130cc:	f7ed fd94 	bl	8000bf8 <__aeabi_d2f>
 80130d0:	4606      	mov	r6, r0
							   , mpu9250.accel[2]*FC_GRAVITY_ACCEERATION);
 80130d2:	4b39      	ldr	r3, [pc, #228]	; (80131b8 <HAL_I2C_MemRxCpltCallback+0x150>)
 80130d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80130d6:	4618      	mov	r0, r3
 80130d8:	f7ed fa3e 	bl	8000558 <__aeabi_f2d>
 80130dc:	a334      	add	r3, pc, #208	; (adr r3, 80131b0 <HAL_I2C_MemRxCpltCallback+0x148>)
 80130de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130e2:	f7ed fa91 	bl	8000608 <__aeabi_dmul>
 80130e6:	4603      	mov	r3, r0
 80130e8:	460c      	mov	r4, r1
			sensorAccel.setAccel(mpu9250.accel[0]*FC_GRAVITY_ACCEERATION
 80130ea:	4618      	mov	r0, r3
 80130ec:	4621      	mov	r1, r4
 80130ee:	f7ed fd83 	bl	8000bf8 <__aeabi_d2f>
 80130f2:	4603      	mov	r3, r0
 80130f4:	ee01 3a10 	vmov	s2, r3
 80130f8:	ee00 6a90 	vmov	s1, r6
 80130fc:	ee00 5a10 	vmov	s0, r5
 8013100:	482e      	ldr	r0, [pc, #184]	; (80131bc <HAL_I2C_MemRxCpltCallback+0x154>)
 8013102:	f7fe f851 	bl	80111a8 <_ZN2FC11SensorAccel8setAccelEfff>
			sensorGyro.setGyro(mpu9250.gyro[0], mpu9250.gyro[1], mpu9250.gyro[2]);
 8013106:	4b2c      	ldr	r3, [pc, #176]	; (80131b8 <HAL_I2C_MemRxCpltCallback+0x150>)
 8013108:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 801310c:	4b2a      	ldr	r3, [pc, #168]	; (80131b8 <HAL_I2C_MemRxCpltCallback+0x150>)
 801310e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8013112:	4b29      	ldr	r3, [pc, #164]	; (80131b8 <HAL_I2C_MemRxCpltCallback+0x150>)
 8013114:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8013118:	eeb0 1a66 	vmov.f32	s2, s13
 801311c:	eef0 0a47 	vmov.f32	s1, s14
 8013120:	eeb0 0a67 	vmov.f32	s0, s15
 8013124:	4826      	ldr	r0, [pc, #152]	; (80131c0 <HAL_I2C_MemRxCpltCallback+0x158>)
 8013126:	f7fe fc8f 	bl	8011a48 <_ZN2FC10SensorGyro7setGyroEfff>
			break;
 801312a:	e012      	b.n	8013152 <HAL_I2C_MemRxCpltCallback+0xea>
		case 2:
			sensorMag.setMag(mpu9250.mag[0], mpu9250.mag[1], mpu9250.mag[2]);
 801312c:	4b22      	ldr	r3, [pc, #136]	; (80131b8 <HAL_I2C_MemRxCpltCallback+0x150>)
 801312e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8013132:	4b21      	ldr	r3, [pc, #132]	; (80131b8 <HAL_I2C_MemRxCpltCallback+0x150>)
 8013134:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8013138:	4b1f      	ldr	r3, [pc, #124]	; (80131b8 <HAL_I2C_MemRxCpltCallback+0x150>)
 801313a:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 801313e:	eeb0 1a66 	vmov.f32	s2, s13
 8013142:	eef0 0a47 	vmov.f32	s1, s14
 8013146:	eeb0 0a67 	vmov.f32	s0, s15
 801314a:	481e      	ldr	r0, [pc, #120]	; (80131c4 <HAL_I2C_MemRxCpltCallback+0x15c>)
 801314c:	f7fe fdf2 	bl	8011d34 <_ZN2FC9SensorMag6setMagEfff>
			break;
 8013150:	bf00      	nop
		}
	}
//#endif

//#ifdef USE_IST8310
	if(hi2c->Instance == ist8310.hi2c->Instance){
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	681a      	ldr	r2, [r3, #0]
 8013156:	4b1c      	ldr	r3, [pc, #112]	; (80131c8 <HAL_I2C_MemRxCpltCallback+0x160>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	429a      	cmp	r2, r3
 801315e:	d103      	bne.n	8013168 <HAL_I2C_MemRxCpltCallback+0x100>
		if(IST8310_i2cRxCpltCallback()){
 8013160:	f7ee f94a 	bl	80013f8 <IST8310_i2cRxCpltCallback>
 8013164:	4603      	mov	r3, r0
 8013166:	2b00      	cmp	r3, #0
		}
	}
//#endif

//#ifdef USE_BME280
	if(hi2c->Instance == bme280.hi2c->Instance){
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	681a      	ldr	r2, [r3, #0]
 801316c:	4b17      	ldr	r3, [pc, #92]	; (80131cc <HAL_I2C_MemRxCpltCallback+0x164>)
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	429a      	cmp	r2, r3
 8013174:	d116      	bne.n	80131a4 <HAL_I2C_MemRxCpltCallback+0x13c>
		if(BME280_i2cRxCpltCallback()){
 8013176:	f7ef fa15 	bl	80025a4 <BME280_i2cRxCpltCallback>
 801317a:	4603      	mov	r3, r0
 801317c:	2b00      	cmp	r3, #0
 801317e:	bf14      	ite	ne
 8013180:	2301      	movne	r3, #1
 8013182:	2300      	moveq	r3, #0
 8013184:	b2db      	uxtb	r3, r3
 8013186:	2b00      	cmp	r3, #0
 8013188:	d00c      	beq.n	80131a4 <HAL_I2C_MemRxCpltCallback+0x13c>
			sensorBaro.setBaro(bme280.P, bme280.T);
 801318a:	4b10      	ldr	r3, [pc, #64]	; (80131cc <HAL_I2C_MemRxCpltCallback+0x164>)
 801318c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8013190:	4b0e      	ldr	r3, [pc, #56]	; (80131cc <HAL_I2C_MemRxCpltCallback+0x164>)
 8013192:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8013196:	eef0 0a47 	vmov.f32	s1, s14
 801319a:	eeb0 0a67 	vmov.f32	s0, s15
 801319e:	480c      	ldr	r0, [pc, #48]	; (80131d0 <HAL_I2C_MemRxCpltCallback+0x168>)
 80131a0:	f7fe f980 	bl	80114a4 <_ZN2FC10SensorBaro7setBaroEff>
		}
	}
//#endif
}
 80131a4:	bf00      	nop
 80131a6:	370c      	adds	r7, #12
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131ac:	f3af 8000 	nop.w
 80131b0:	3a92a305 	.word	0x3a92a305
 80131b4:	40239d01 	.word	0x40239d01
 80131b8:	200010ec 	.word	0x200010ec
 80131bc:	20000f78 	.word	0x20000f78
 80131c0:	20001058 	.word	0x20001058
 80131c4:	20001098 	.word	0x20001098
 80131c8:	20001468 	.word	0x20001468
 80131cc:	200008dc 	.word	0x200008dc
 80131d0:	20000fb8 	.word	0x20000fb8

080131d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80131d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80131d8:	ed2d 8b06 	vpush	{d8-d10}
 80131dc:	b087      	sub	sp, #28
 80131de:	af04      	add	r7, sp, #16
 80131e0:	6078      	str	r0, [r7, #4]
#ifdef USE_SBUS
	if(huart->Instance == sbus.huart->Instance){
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	681a      	ldr	r2, [r3, #0]
 80131e6:	4b45      	ldr	r3, [pc, #276]	; (80132fc <HAL_UART_RxCpltCallback+0x128>)
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	429a      	cmp	r2, r3
 80131ee:	d12f      	bne.n	8013250 <HAL_UART_RxCpltCallback+0x7c>
		if(SBUS_uartRxCpltCallback() == SBUS_Result_NewData){
 80131f0:	f7ff f996 	bl	8012520 <SBUS_uartRxCpltCallback>
 80131f4:	4603      	mov	r3, r0
 80131f6:	2b01      	cmp	r3, #1
 80131f8:	bf0c      	ite	eq
 80131fa:	2301      	moveq	r3, #1
 80131fc:	2300      	movne	r3, #0
 80131fe:	b2db      	uxtb	r3, r3
 8013200:	2b00      	cmp	r3, #0
 8013202:	d025      	beq.n	8013250 <HAL_UART_RxCpltCallback+0x7c>
			rc.setRC(SBUS_getChannel(2),	/* roll */
 8013204:	2002      	movs	r0, #2
 8013206:	f7ff fa09 	bl	801261c <SBUS_getChannel>
 801320a:	4603      	mov	r3, r0
 801320c:	461e      	mov	r6, r3
 801320e:	2003      	movs	r0, #3
 8013210:	f7ff fa04 	bl	801261c <SBUS_getChannel>
 8013214:	4603      	mov	r3, r0
 8013216:	4698      	mov	r8, r3
 8013218:	2004      	movs	r0, #4
 801321a:	f7ff f9ff 	bl	801261c <SBUS_getChannel>
 801321e:	4603      	mov	r3, r0
 8013220:	4699      	mov	r9, r3
 8013222:	2001      	movs	r0, #1
 8013224:	f7ff f9fa 	bl	801261c <SBUS_getChannel>
 8013228:	4603      	mov	r3, r0
 801322a:	461c      	mov	r4, r3
 801322c:	200b      	movs	r0, #11
 801322e:	f7ff f9f5 	bl	801261c <SBUS_getChannel>
 8013232:	4603      	mov	r3, r0
 8013234:	461d      	mov	r5, r3
 8013236:	2005      	movs	r0, #5
 8013238:	f7ff f9f0 	bl	801261c <SBUS_getChannel>
 801323c:	4603      	mov	r3, r0
 801323e:	9302      	str	r3, [sp, #8]
 8013240:	9501      	str	r5, [sp, #4]
 8013242:	9400      	str	r4, [sp, #0]
 8013244:	464b      	mov	r3, r9
 8013246:	4642      	mov	r2, r8
 8013248:	4631      	mov	r1, r6
 801324a:	482d      	ldr	r0, [pc, #180]	; (8013300 <HAL_UART_RxCpltCallback+0x12c>)
 801324c:	f7fd fe32 	bl	8010eb4 <_ZN2FC2RC5setRCEtttttt>
		}
	}
#endif

#ifdef USE_GPS
	if(huart->Instance == USART6){
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	4a2b      	ldr	r2, [pc, #172]	; (8013304 <HAL_UART_RxCpltCallback+0x130>)
 8013256:	4293      	cmp	r3, r2
 8013258:	d149      	bne.n	80132ee <HAL_UART_RxCpltCallback+0x11a>
		if(TM_GPS_Update() == TM_GPS_Result_NewData && gpsUart.gpsData.Fix != 0 /* gps must fixed */){
 801325a:	f7ef fd13 	bl	8002c84 <TM_GPS_Update>
 801325e:	4603      	mov	r3, r0
 8013260:	2b00      	cmp	r3, #0
 8013262:	d105      	bne.n	8013270 <HAL_UART_RxCpltCallback+0x9c>
 8013264:	4b28      	ldr	r3, [pc, #160]	; (8013308 <HAL_UART_RxCpltCallback+0x134>)
 8013266:	7d5b      	ldrb	r3, [r3, #21]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d001      	beq.n	8013270 <HAL_UART_RxCpltCallback+0x9c>
 801326c:	2301      	movs	r3, #1
 801326e:	e000      	b.n	8013272 <HAL_UART_RxCpltCallback+0x9e>
 8013270:	2300      	movs	r3, #0
 8013272:	2b00      	cmp	r3, #0
 8013274:	d03b      	beq.n	80132ee <HAL_UART_RxCpltCallback+0x11a>
			sensorGPS.setGPS(gpsUart.gpsData.Latitude, gpsUart.gpsData.Longitude, gpsUart.gpsData.Altitude,
 8013276:	4b24      	ldr	r3, [pc, #144]	; (8013308 <HAL_UART_RxCpltCallback+0x134>)
 8013278:	ed93 8b00 	vldr	d8, [r3]
 801327c:	4b22      	ldr	r3, [pc, #136]	; (8013308 <HAL_UART_RxCpltCallback+0x134>)
 801327e:	ed93 9b02 	vldr	d9, [r3, #8]
 8013282:	4b21      	ldr	r3, [pc, #132]	; (8013308 <HAL_UART_RxCpltCallback+0x134>)
 8013284:	ed93 aa04 	vldr	s20, [r3, #16]
 8013288:	4b1f      	ldr	r3, [pc, #124]	; (8013308 <HAL_UART_RxCpltCallback+0x134>)
 801328a:	edd3 7a08 	vldr	s15, [r3, #32]
 801328e:	2001      	movs	r0, #1
 8013290:	eeb0 0a67 	vmov.f32	s0, s15
 8013294:	f7ef fd2a 	bl	8002cec <TM_GPS_ConvertSpeed>
 8013298:	eeb0 6a40 	vmov.f32	s12, s0
 801329c:	4b1a      	ldr	r3, [pc, #104]	; (8013308 <HAL_UART_RxCpltCallback+0x134>)
 801329e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80132a2:	4b19      	ldr	r3, [pc, #100]	; (8013308 <HAL_UART_RxCpltCallback+0x134>)
 80132a4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80132a8:	4b17      	ldr	r3, [pc, #92]	; (8013308 <HAL_UART_RxCpltCallback+0x134>)
 80132aa:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80132ae:	4b16      	ldr	r3, [pc, #88]	; (8013308 <HAL_UART_RxCpltCallback+0x134>)
 80132b0:	7d19      	ldrb	r1, [r3, #20]
 80132b2:	4b15      	ldr	r3, [pc, #84]	; (8013308 <HAL_UART_RxCpltCallback+0x134>)
 80132b4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80132b8:	f04f 0300 	mov.w	r3, #0
 80132bc:	f04f 0400 	mov.w	r4, #0
 80132c0:	e9cd 3400 	strd	r3, r4, [sp]
 80132c4:	eeb0 4a66 	vmov.f32	s8, s13
 80132c8:	eef0 3a47 	vmov.f32	s7, s14
 80132cc:	eeb0 3a67 	vmov.f32	s6, s15
 80132d0:	eef0 2a46 	vmov.f32	s5, s12
 80132d4:	eeb0 2a4a 	vmov.f32	s4, s20
 80132d8:	eeb0 1a49 	vmov.f32	s2, s18
 80132dc:	eef0 1a69 	vmov.f32	s3, s19
 80132e0:	eeb0 0a48 	vmov.f32	s0, s16
 80132e4:	eef0 0a68 	vmov.f32	s1, s17
 80132e8:	4808      	ldr	r0, [pc, #32]	; (801330c <HAL_UART_RxCpltCallback+0x138>)
 80132ea:	f7fe fa75 	bl	80117d8 <_ZN2FC9SensorGPS6setGPSEddfffffhhy>
							 gpsUart.gpsData.Satellites, gpsUart.gpsData.FixMode, 0/* UTC in microsecond */);
		}
	}
#endif

}
 80132ee:	bf00      	nop
 80132f0:	370c      	adds	r7, #12
 80132f2:	46bd      	mov	sp, r7
 80132f4:	ecbd 8b06 	vpop	{d8-d10}
 80132f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132fc:	20001178 	.word	0x20001178
 8013300:	20000f50 	.word	0x20000f50
 8013304:	40011400 	.word	0x40011400
 8013308:	20001210 	.word	0x20001210
 801330c:	20000ff0 	.word	0x20000ff0

08013310 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8013310:	b580      	push	{r7, lr}
 8013312:	b082      	sub	sp, #8
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
	Lidar1D_CaptureCallback(htim);
 8013318:	6878      	ldr	r0, [r7, #4]
 801331a:	f7ee f965 	bl	80015e8 <Lidar1D_CaptureCallback>
}
 801331e:	bf00      	nop
 8013320:	3708      	adds	r7, #8
 8013322:	46bd      	mov	sp, r7
 8013324:	bd80      	pop	{r7, pc}
	...

08013328 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8013328:	b580      	push	{r7, lr}
 801332a:	b082      	sub	sp, #8
 801332c:	af00      	add	r7, sp, #0
 801332e:	4603      	mov	r3, r0
 8013330:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8013332:	88fb      	ldrh	r3, [r7, #6]
 8013334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013338:	d10d      	bne.n	8013356 <HAL_GPIO_EXTI_Callback+0x2e>
		sensorBaro.setSeaLevelPressure(gps_alt);
 801333a:	4b09      	ldr	r3, [pc, #36]	; (8013360 <HAL_GPIO_EXTI_Callback+0x38>)
 801333c:	edd3 7a00 	vldr	s15, [r3]
 8013340:	eeb0 0a67 	vmov.f32	s0, s15
 8013344:	4807      	ldr	r0, [pc, #28]	; (8013364 <HAL_GPIO_EXTI_Callback+0x3c>)
 8013346:	f7fe f90f 	bl	8011568 <_ZN2FC10SensorBaro19setSeaLevelPressureEf>
//		if(sensorMag.startCalibrationFlag == false)
//			sensorMag.startCalibration();
//		else sensorMag.endCalibration();
		sensorAccel.setBias();
 801334a:	4807      	ldr	r0, [pc, #28]	; (8013368 <HAL_GPIO_EXTI_Callback+0x40>)
 801334c:	f7fd ff0e 	bl	801116c <_ZN2FC11SensorAccel7setBiasEv>
		sensorGyro.setBias();
 8013350:	4806      	ldr	r0, [pc, #24]	; (801336c <HAL_GPIO_EXTI_Callback+0x44>)
 8013352:	f7fe fb5b 	bl	8011a0c <_ZN2FC10SensorGyro7setBiasEv>
	}
}
 8013356:	bf00      	nop
 8013358:	3708      	adds	r7, #8
 801335a:	46bd      	mov	sp, r7
 801335c:	bd80      	pop	{r7, pc}
 801335e:	bf00      	nop
 8013360:	200014ec 	.word	0x200014ec
 8013364:	20000fb8 	.word	0x20000fb8
 8013368:	20000f78 	.word	0x20000f78
 801336c:	20001058 	.word	0x20001058

08013370 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv>:
template<typename T>
class Freq {
public:
	static uint16_t freqCnt;

	static uint16_t checkFreq(){
 8013370:	b480      	push	{r7}
 8013372:	b083      	sub	sp, #12
 8013374:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8013376:	4b06      	ldr	r3, [pc, #24]	; (8013390 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv+0x20>)
 8013378:	881b      	ldrh	r3, [r3, #0]
 801337a:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 801337c:	4b04      	ldr	r3, [pc, #16]	; (8013390 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv+0x20>)
 801337e:	2200      	movs	r2, #0
 8013380:	801a      	strh	r2, [r3, #0]
		return res;
 8013382:	88fb      	ldrh	r3, [r7, #6]
	}
 8013384:	4618      	mov	r0, r3
 8013386:	370c      	adds	r7, #12
 8013388:	46bd      	mov	sp, r7
 801338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338e:	4770      	bx	lr
 8013390:	20000fb0 	.word	0x20000fb0

08013394 <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8013394:	b480      	push	{r7}
 8013396:	b083      	sub	sp, #12
 8013398:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 801339a:	4b06      	ldr	r3, [pc, #24]	; (80133b4 <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv+0x20>)
 801339c:	881b      	ldrh	r3, [r3, #0]
 801339e:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 80133a0:	4b04      	ldr	r3, [pc, #16]	; (80133b4 <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv+0x20>)
 80133a2:	2200      	movs	r2, #0
 80133a4:	801a      	strh	r2, [r3, #0]
		return res;
 80133a6:	88fb      	ldrh	r3, [r7, #6]
	}
 80133a8:	4618      	mov	r0, r3
 80133aa:	370c      	adds	r7, #12
 80133ac:	46bd      	mov	sp, r7
 80133ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b2:	4770      	bx	lr
 80133b4:	20001090 	.word	0x20001090

080133b8 <_ZN2FC4FreqINS_2RCEE9checkFreqEv>:
	static uint16_t checkFreq(){
 80133b8:	b480      	push	{r7}
 80133ba:	b083      	sub	sp, #12
 80133bc:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 80133be:	4b06      	ldr	r3, [pc, #24]	; (80133d8 <_ZN2FC4FreqINS_2RCEE9checkFreqEv+0x20>)
 80133c0:	881b      	ldrh	r3, [r3, #0]
 80133c2:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 80133c4:	4b04      	ldr	r3, [pc, #16]	; (80133d8 <_ZN2FC4FreqINS_2RCEE9checkFreqEv+0x20>)
 80133c6:	2200      	movs	r2, #0
 80133c8:	801a      	strh	r2, [r3, #0]
		return res;
 80133ca:	88fb      	ldrh	r3, [r7, #6]
	}
 80133cc:	4618      	mov	r0, r3
 80133ce:	370c      	adds	r7, #12
 80133d0:	46bd      	mov	sp, r7
 80133d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d6:	4770      	bx	lr
 80133d8:	20000f70 	.word	0x20000f70

080133dc <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv>:
	static uint16_t checkFreq(){
 80133dc:	b480      	push	{r7}
 80133de:	b083      	sub	sp, #12
 80133e0:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 80133e2:	4b06      	ldr	r3, [pc, #24]	; (80133fc <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv+0x20>)
 80133e4:	881b      	ldrh	r3, [r3, #0]
 80133e6:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 80133e8:	4b04      	ldr	r3, [pc, #16]	; (80133fc <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv+0x20>)
 80133ea:	2200      	movs	r2, #0
 80133ec:	801a      	strh	r2, [r3, #0]
		return res;
 80133ee:	88fb      	ldrh	r3, [r7, #6]
	}
 80133f0:	4618      	mov	r0, r3
 80133f2:	370c      	adds	r7, #12
 80133f4:	46bd      	mov	sp, r7
 80133f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fa:	4770      	bx	lr
 80133fc:	200010e8 	.word	0x200010e8

08013400 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8013400:	b480      	push	{r7}
 8013402:	b083      	sub	sp, #12
 8013404:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8013406:	4b06      	ldr	r3, [pc, #24]	; (8013420 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv+0x20>)
 8013408:	881b      	ldrh	r3, [r3, #0]
 801340a:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 801340c:	4b04      	ldr	r3, [pc, #16]	; (8013420 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv+0x20>)
 801340e:	2200      	movs	r2, #0
 8013410:	801a      	strh	r2, [r3, #0]
		return res;
 8013412:	88fb      	ldrh	r3, [r7, #6]
	}
 8013414:	4618      	mov	r0, r3
 8013416:	370c      	adds	r7, #12
 8013418:	46bd      	mov	sp, r7
 801341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801341e:	4770      	bx	lr
 8013420:	20001050 	.word	0x20001050

08013424 <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8013424:	b480      	push	{r7}
 8013426:	b083      	sub	sp, #12
 8013428:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 801342a:	4b06      	ldr	r3, [pc, #24]	; (8013444 <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv+0x20>)
 801342c:	881b      	ldrh	r3, [r3, #0]
 801342e:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8013430:	4b04      	ldr	r3, [pc, #16]	; (8013444 <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv+0x20>)
 8013432:	2200      	movs	r2, #0
 8013434:	801a      	strh	r2, [r3, #0]
		return res;
 8013436:	88fb      	ldrh	r3, [r7, #6]
	}
 8013438:	4618      	mov	r0, r3
 801343a:	370c      	adds	r7, #12
 801343c:	46bd      	mov	sp, r7
 801343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013442:	4770      	bx	lr
 8013444:	20000fe8 	.word	0x20000fe8

08013448 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8013448:	b480      	push	{r7}
 801344a:	b083      	sub	sp, #12
 801344c:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 801344e:	4b06      	ldr	r3, [pc, #24]	; (8013468 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv+0x20>)
 8013450:	881b      	ldrh	r3, [r3, #0]
 8013452:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8013454:	4b04      	ldr	r3, [pc, #16]	; (8013468 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv+0x20>)
 8013456:	2200      	movs	r2, #0
 8013458:	801a      	strh	r2, [r3, #0]
		return res;
 801345a:	88fb      	ldrh	r3, [r7, #6]
	}
 801345c:	4618      	mov	r0, r3
 801345e:	370c      	adds	r7, #12
 8013460:	46bd      	mov	sp, r7
 8013462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013466:	4770      	bx	lr
 8013468:	20000ac0 	.word	0x20000ac0

0801346c <_ZN2FC4FreqINS_9ModuleINSEE9checkFreqEv>:
	static uint16_t checkFreq(){
 801346c:	b480      	push	{r7}
 801346e:	b083      	sub	sp, #12
 8013470:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8013472:	4b06      	ldr	r3, [pc, #24]	; (801348c <_ZN2FC4FreqINS_9ModuleINSEE9checkFreqEv+0x20>)
 8013474:	881b      	ldrh	r3, [r3, #0]
 8013476:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8013478:	4b04      	ldr	r3, [pc, #16]	; (801348c <_ZN2FC4FreqINS_9ModuleINSEE9checkFreqEv+0x20>)
 801347a:	2200      	movs	r2, #0
 801347c:	801a      	strh	r2, [r3, #0]
		return res;
 801347e:	88fb      	ldrh	r3, [r7, #6]
	}
 8013480:	4618      	mov	r0, r3
 8013482:	370c      	adds	r7, #12
 8013484:	46bd      	mov	sp, r7
 8013486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348a:	4770      	bx	lr
 801348c:	20001530 	.word	0x20001530

08013490 <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8013490:	b480      	push	{r7}
 8013492:	b083      	sub	sp, #12
 8013494:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8013496:	4b06      	ldr	r3, [pc, #24]	; (80134b0 <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv+0x20>)
 8013498:	881b      	ldrh	r3, [r3, #0]
 801349a:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 801349c:	4b04      	ldr	r3, [pc, #16]	; (80134b0 <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv+0x20>)
 801349e:	2200      	movs	r2, #0
 80134a0:	801a      	strh	r2, [r3, #0]
		return res;
 80134a2:	88fb      	ldrh	r3, [r7, #6]
	}
 80134a4:	4618      	mov	r0, r3
 80134a6:	370c      	adds	r7, #12
 80134a8:	46bd      	mov	sp, r7
 80134aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ae:	4770      	bx	lr
 80134b0:	2000152c 	.word	0x2000152c

080134b4 <_ZN2FC4FreqINS_24ModulePositionControllerEE9checkFreqEv>:
	static uint16_t checkFreq(){
 80134b4:	b480      	push	{r7}
 80134b6:	b083      	sub	sp, #12
 80134b8:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 80134ba:	4b06      	ldr	r3, [pc, #24]	; (80134d4 <_ZN2FC4FreqINS_24ModulePositionControllerEE9checkFreqEv+0x20>)
 80134bc:	881b      	ldrh	r3, [r3, #0]
 80134be:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 80134c0:	4b04      	ldr	r3, [pc, #16]	; (80134d4 <_ZN2FC4FreqINS_24ModulePositionControllerEE9checkFreqEv+0x20>)
 80134c2:	2200      	movs	r2, #0
 80134c4:	801a      	strh	r2, [r3, #0]
		return res;
 80134c6:	88fb      	ldrh	r3, [r7, #6]
	}
 80134c8:	4618      	mov	r0, r3
 80134ca:	370c      	adds	r7, #12
 80134cc:	46bd      	mov	sp, r7
 80134ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d2:	4770      	bx	lr
 80134d4:	2000152e 	.word	0x2000152e

080134d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80134d8:	b480      	push	{r7}
 80134da:	b083      	sub	sp, #12
 80134dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80134de:	2300      	movs	r3, #0
 80134e0:	607b      	str	r3, [r7, #4]
 80134e2:	4b10      	ldr	r3, [pc, #64]	; (8013524 <MX_DMA_Init+0x4c>)
 80134e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134e6:	4a0f      	ldr	r2, [pc, #60]	; (8013524 <MX_DMA_Init+0x4c>)
 80134e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80134ec:	6313      	str	r3, [r2, #48]	; 0x30
 80134ee:	4b0d      	ldr	r3, [pc, #52]	; (8013524 <MX_DMA_Init+0x4c>)
 80134f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80134f6:	607b      	str	r3, [r7, #4]
 80134f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80134fa:	2300      	movs	r3, #0
 80134fc:	603b      	str	r3, [r7, #0]
 80134fe:	4b09      	ldr	r3, [pc, #36]	; (8013524 <MX_DMA_Init+0x4c>)
 8013500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013502:	4a08      	ldr	r2, [pc, #32]	; (8013524 <MX_DMA_Init+0x4c>)
 8013504:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013508:	6313      	str	r3, [r2, #48]	; 0x30
 801350a:	4b06      	ldr	r3, [pc, #24]	; (8013524 <MX_DMA_Init+0x4c>)
 801350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801350e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013512:	603b      	str	r3, [r7, #0]
 8013514:	683b      	ldr	r3, [r7, #0]

}
 8013516:	bf00      	nop
 8013518:	370c      	adds	r7, #12
 801351a:	46bd      	mov	sp, r7
 801351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013520:	4770      	bx	lr
 8013522:	bf00      	nop
 8013524:	40023800 	.word	0x40023800

08013528 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8013528:	b580      	push	{r7, lr}
 801352a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 801352c:	4a34      	ldr	r2, [pc, #208]	; (8013600 <MX_FREERTOS_Init+0xd8>)
 801352e:	2100      	movs	r1, #0
 8013530:	4834      	ldr	r0, [pc, #208]	; (8013604 <MX_FREERTOS_Init+0xdc>)
 8013532:	f00d fb51 	bl	8020bd8 <osThreadNew>
 8013536:	4602      	mov	r2, r0
 8013538:	4b33      	ldr	r3, [pc, #204]	; (8013608 <MX_FREERTOS_Init+0xe0>)
 801353a:	601a      	str	r2, [r3, #0]

  /* creation of MPU9250_Task */
  MPU9250_TaskHandle = osThreadNew(MPU9250_StartTask, NULL, &MPU9250_Task_attributes);
 801353c:	4a33      	ldr	r2, [pc, #204]	; (801360c <MX_FREERTOS_Init+0xe4>)
 801353e:	2100      	movs	r1, #0
 8013540:	4833      	ldr	r0, [pc, #204]	; (8013610 <MX_FREERTOS_Init+0xe8>)
 8013542:	f00d fb49 	bl	8020bd8 <osThreadNew>
 8013546:	4602      	mov	r2, r0
 8013548:	4b32      	ldr	r3, [pc, #200]	; (8013614 <MX_FREERTOS_Init+0xec>)
 801354a:	601a      	str	r2, [r3, #0]

  /* creation of BME280_Task */
  BME280_TaskHandle = osThreadNew(BME280_StartTask, NULL, &BME280_Task_attributes);
 801354c:	4a32      	ldr	r2, [pc, #200]	; (8013618 <MX_FREERTOS_Init+0xf0>)
 801354e:	2100      	movs	r1, #0
 8013550:	4832      	ldr	r0, [pc, #200]	; (801361c <MX_FREERTOS_Init+0xf4>)
 8013552:	f00d fb41 	bl	8020bd8 <osThreadNew>
 8013556:	4602      	mov	r2, r0
 8013558:	4b31      	ldr	r3, [pc, #196]	; (8013620 <MX_FREERTOS_Init+0xf8>)
 801355a:	601a      	str	r2, [r3, #0]

  /* creation of IST8310_Task */
  IST8310_TaskHandle = osThreadNew(IST8310_StartTask, NULL, &IST8310_Task_attributes);
 801355c:	4a31      	ldr	r2, [pc, #196]	; (8013624 <MX_FREERTOS_Init+0xfc>)
 801355e:	2100      	movs	r1, #0
 8013560:	4831      	ldr	r0, [pc, #196]	; (8013628 <MX_FREERTOS_Init+0x100>)
 8013562:	f00d fb39 	bl	8020bd8 <osThreadNew>
 8013566:	4602      	mov	r2, r0
 8013568:	4b30      	ldr	r3, [pc, #192]	; (801362c <MX_FREERTOS_Init+0x104>)
 801356a:	601a      	str	r2, [r3, #0]

  /* creation of SD_Task */
  SD_TaskHandle = osThreadNew(SD_StartTask, NULL, &SD_Task_attributes);
 801356c:	4a30      	ldr	r2, [pc, #192]	; (8013630 <MX_FREERTOS_Init+0x108>)
 801356e:	2100      	movs	r1, #0
 8013570:	4830      	ldr	r0, [pc, #192]	; (8013634 <MX_FREERTOS_Init+0x10c>)
 8013572:	f00d fb31 	bl	8020bd8 <osThreadNew>
 8013576:	4602      	mov	r2, r0
 8013578:	4b2f      	ldr	r3, [pc, #188]	; (8013638 <MX_FREERTOS_Init+0x110>)
 801357a:	601a      	str	r2, [r3, #0]

  /* creation of AHRS_Task */
  AHRS_TaskHandle = osThreadNew(AHRS_StartTask, NULL, &AHRS_Task_attributes);
 801357c:	4a2f      	ldr	r2, [pc, #188]	; (801363c <MX_FREERTOS_Init+0x114>)
 801357e:	2100      	movs	r1, #0
 8013580:	482f      	ldr	r0, [pc, #188]	; (8013640 <MX_FREERTOS_Init+0x118>)
 8013582:	f00d fb29 	bl	8020bd8 <osThreadNew>
 8013586:	4602      	mov	r2, r0
 8013588:	4b2e      	ldr	r3, [pc, #184]	; (8013644 <MX_FREERTOS_Init+0x11c>)
 801358a:	601a      	str	r2, [r3, #0]

  /* creation of Commander_Task */
  Commander_TaskHandle = osThreadNew(Commander_StartTask, NULL, &Commander_Task_attributes);
 801358c:	4a2e      	ldr	r2, [pc, #184]	; (8013648 <MX_FREERTOS_Init+0x120>)
 801358e:	2100      	movs	r1, #0
 8013590:	482e      	ldr	r0, [pc, #184]	; (801364c <MX_FREERTOS_Init+0x124>)
 8013592:	f00d fb21 	bl	8020bd8 <osThreadNew>
 8013596:	4602      	mov	r2, r0
 8013598:	4b2d      	ldr	r3, [pc, #180]	; (8013650 <MX_FREERTOS_Init+0x128>)
 801359a:	601a      	str	r2, [r3, #0]

  /* creation of Debug_Task */
  Debug_TaskHandle = osThreadNew(Debug_StartTask, NULL, &Debug_Task_attributes);
 801359c:	4a2d      	ldr	r2, [pc, #180]	; (8013654 <MX_FREERTOS_Init+0x12c>)
 801359e:	2100      	movs	r1, #0
 80135a0:	482d      	ldr	r0, [pc, #180]	; (8013658 <MX_FREERTOS_Init+0x130>)
 80135a2:	f00d fb19 	bl	8020bd8 <osThreadNew>
 80135a6:	4602      	mov	r2, r0
 80135a8:	4b2c      	ldr	r3, [pc, #176]	; (801365c <MX_FREERTOS_Init+0x134>)
 80135aa:	601a      	str	r2, [r3, #0]

  /* creation of Buzzer_Task */
  Buzzer_TaskHandle = osThreadNew(Buzzer_StartTask, NULL, &Buzzer_Task_attributes);
 80135ac:	4a2c      	ldr	r2, [pc, #176]	; (8013660 <MX_FREERTOS_Init+0x138>)
 80135ae:	2100      	movs	r1, #0
 80135b0:	482c      	ldr	r0, [pc, #176]	; (8013664 <MX_FREERTOS_Init+0x13c>)
 80135b2:	f00d fb11 	bl	8020bd8 <osThreadNew>
 80135b6:	4602      	mov	r2, r0
 80135b8:	4b2b      	ldr	r3, [pc, #172]	; (8013668 <MX_FREERTOS_Init+0x140>)
 80135ba:	601a      	str	r2, [r3, #0]

  /* creation of Health_Task */
  Health_TaskHandle = osThreadNew(Health_StartTask, NULL, &Health_Task_attributes);
 80135bc:	4a2b      	ldr	r2, [pc, #172]	; (801366c <MX_FREERTOS_Init+0x144>)
 80135be:	2100      	movs	r1, #0
 80135c0:	482b      	ldr	r0, [pc, #172]	; (8013670 <MX_FREERTOS_Init+0x148>)
 80135c2:	f00d fb09 	bl	8020bd8 <osThreadNew>
 80135c6:	4602      	mov	r2, r0
 80135c8:	4b2a      	ldr	r3, [pc, #168]	; (8013674 <MX_FREERTOS_Init+0x14c>)
 80135ca:	601a      	str	r2, [r3, #0]

  /* creation of AC_Task */
  AC_TaskHandle = osThreadNew(AC_StartTask, NULL, &AC_Task_attributes);
 80135cc:	4a2a      	ldr	r2, [pc, #168]	; (8013678 <MX_FREERTOS_Init+0x150>)
 80135ce:	2100      	movs	r1, #0
 80135d0:	482a      	ldr	r0, [pc, #168]	; (801367c <MX_FREERTOS_Init+0x154>)
 80135d2:	f00d fb01 	bl	8020bd8 <osThreadNew>
 80135d6:	4602      	mov	r2, r0
 80135d8:	4b29      	ldr	r3, [pc, #164]	; (8013680 <MX_FREERTOS_Init+0x158>)
 80135da:	601a      	str	r2, [r3, #0]

  /* creation of INS_Task */
  INS_TaskHandle = osThreadNew(INS_StartTask, NULL, &INS_Task_attributes);
 80135dc:	4a29      	ldr	r2, [pc, #164]	; (8013684 <MX_FREERTOS_Init+0x15c>)
 80135de:	2100      	movs	r1, #0
 80135e0:	4829      	ldr	r0, [pc, #164]	; (8013688 <MX_FREERTOS_Init+0x160>)
 80135e2:	f00d faf9 	bl	8020bd8 <osThreadNew>
 80135e6:	4602      	mov	r2, r0
 80135e8:	4b28      	ldr	r3, [pc, #160]	; (801368c <MX_FREERTOS_Init+0x164>)
 80135ea:	601a      	str	r2, [r3, #0]

  /* creation of PC_Task */
  PC_TaskHandle = osThreadNew(PC_StartTask, NULL, &PC_Task_attributes);
 80135ec:	4a28      	ldr	r2, [pc, #160]	; (8013690 <MX_FREERTOS_Init+0x168>)
 80135ee:	2100      	movs	r1, #0
 80135f0:	4828      	ldr	r0, [pc, #160]	; (8013694 <MX_FREERTOS_Init+0x16c>)
 80135f2:	f00d faf1 	bl	8020bd8 <osThreadNew>
 80135f6:	4602      	mov	r2, r0
 80135f8:	4b27      	ldr	r3, [pc, #156]	; (8013698 <MX_FREERTOS_Init+0x170>)
 80135fa:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80135fc:	bf00      	nop
 80135fe:	bd80      	pop	{r7, pc}
 8013600:	0802d8f8 	.word	0x0802d8f8
 8013604:	0801369d 	.word	0x0801369d
 8013608:	200097b4 	.word	0x200097b4
 801360c:	0802d91c 	.word	0x0802d91c
 8013610:	08012edd 	.word	0x08012edd
 8013614:	2000deac 	.word	0x2000deac
 8013618:	0802d940 	.word	0x0802d940
 801361c:	08012efd 	.word	0x08012efd
 8013620:	2000e378 	.word	0x2000e378
 8013624:	0802d964 	.word	0x0802d964
 8013628:	08012f11 	.word	0x08012f11
 801362c:	20009fbc 	.word	0x20009fbc
 8013630:	0802d988 	.word	0x0802d988
 8013634:	08012f21 	.word	0x08012f21
 8013638:	2000c7c0 	.word	0x2000c7c0
 801363c:	0802d9ac 	.word	0x0802d9ac
 8013640:	08012f35 	.word	0x08012f35
 8013644:	2000e314 	.word	0x2000e314
 8013648:	0802d9d0 	.word	0x0802d9d0
 801364c:	08012f49 	.word	0x08012f49
 8013650:	2000ca20 	.word	0x2000ca20
 8013654:	0802d9f4 	.word	0x0802d9f4
 8013658:	08012b2d 	.word	0x08012b2d
 801365c:	2000dcdc 	.word	0x2000dcdc
 8013660:	0802da18 	.word	0x0802da18
 8013664:	08012f5d 	.word	0x08012f5d
 8013668:	2000e374 	.word	0x2000e374
 801366c:	0802da3c 	.word	0x0802da3c
 8013670:	08012b19 	.word	0x08012b19
 8013674:	2000e37c 	.word	0x2000e37c
 8013678:	0802da60 	.word	0x0802da60
 801367c:	08012f71 	.word	0x08012f71
 8013680:	2000deb0 	.word	0x2000deb0
 8013684:	0802da84 	.word	0x0802da84
 8013688:	08012f85 	.word	0x08012f85
 801368c:	20009fb8 	.word	0x20009fb8
 8013690:	0802daa8 	.word	0x0802daa8
 8013694:	08012f99 	.word	0x08012f99
 8013698:	2000df10 	.word	0x2000df10

0801369c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b082      	sub	sp, #8
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80136a4:	2001      	movs	r0, #1
 80136a6:	f00d fcb7 	bl	8021018 <osDelay>
 80136aa:	e7fb      	b.n	80136a4 <StartDefaultTask+0x8>

080136ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b08a      	sub	sp, #40	; 0x28
 80136b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80136b2:	f107 0314 	add.w	r3, r7, #20
 80136b6:	2200      	movs	r2, #0
 80136b8:	601a      	str	r2, [r3, #0]
 80136ba:	605a      	str	r2, [r3, #4]
 80136bc:	609a      	str	r2, [r3, #8]
 80136be:	60da      	str	r2, [r3, #12]
 80136c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80136c2:	2300      	movs	r3, #0
 80136c4:	613b      	str	r3, [r7, #16]
 80136c6:	4b37      	ldr	r3, [pc, #220]	; (80137a4 <MX_GPIO_Init+0xf8>)
 80136c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136ca:	4a36      	ldr	r2, [pc, #216]	; (80137a4 <MX_GPIO_Init+0xf8>)
 80136cc:	f043 0304 	orr.w	r3, r3, #4
 80136d0:	6313      	str	r3, [r2, #48]	; 0x30
 80136d2:	4b34      	ldr	r3, [pc, #208]	; (80137a4 <MX_GPIO_Init+0xf8>)
 80136d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136d6:	f003 0304 	and.w	r3, r3, #4
 80136da:	613b      	str	r3, [r7, #16]
 80136dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80136de:	2300      	movs	r3, #0
 80136e0:	60fb      	str	r3, [r7, #12]
 80136e2:	4b30      	ldr	r3, [pc, #192]	; (80137a4 <MX_GPIO_Init+0xf8>)
 80136e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136e6:	4a2f      	ldr	r2, [pc, #188]	; (80137a4 <MX_GPIO_Init+0xf8>)
 80136e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136ec:	6313      	str	r3, [r2, #48]	; 0x30
 80136ee:	4b2d      	ldr	r3, [pc, #180]	; (80137a4 <MX_GPIO_Init+0xf8>)
 80136f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80136f6:	60fb      	str	r3, [r7, #12]
 80136f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80136fa:	2300      	movs	r3, #0
 80136fc:	60bb      	str	r3, [r7, #8]
 80136fe:	4b29      	ldr	r3, [pc, #164]	; (80137a4 <MX_GPIO_Init+0xf8>)
 8013700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013702:	4a28      	ldr	r2, [pc, #160]	; (80137a4 <MX_GPIO_Init+0xf8>)
 8013704:	f043 0301 	orr.w	r3, r3, #1
 8013708:	6313      	str	r3, [r2, #48]	; 0x30
 801370a:	4b26      	ldr	r3, [pc, #152]	; (80137a4 <MX_GPIO_Init+0xf8>)
 801370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801370e:	f003 0301 	and.w	r3, r3, #1
 8013712:	60bb      	str	r3, [r7, #8]
 8013714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8013716:	2300      	movs	r3, #0
 8013718:	607b      	str	r3, [r7, #4]
 801371a:	4b22      	ldr	r3, [pc, #136]	; (80137a4 <MX_GPIO_Init+0xf8>)
 801371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801371e:	4a21      	ldr	r2, [pc, #132]	; (80137a4 <MX_GPIO_Init+0xf8>)
 8013720:	f043 0302 	orr.w	r3, r3, #2
 8013724:	6313      	str	r3, [r2, #48]	; 0x30
 8013726:	4b1f      	ldr	r3, [pc, #124]	; (80137a4 <MX_GPIO_Init+0xf8>)
 8013728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801372a:	f003 0302 	and.w	r3, r3, #2
 801372e:	607b      	str	r3, [r7, #4]
 8013730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8013732:	2200      	movs	r2, #0
 8013734:	2120      	movs	r1, #32
 8013736:	481c      	ldr	r0, [pc, #112]	; (80137a8 <MX_GPIO_Init+0xfc>)
 8013738:	f002 f978 	bl	8015a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 801373c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8013742:	4b1a      	ldr	r3, [pc, #104]	; (80137ac <MX_GPIO_Init+0x100>)
 8013744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013746:	2301      	movs	r3, #1
 8013748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 801374a:	f107 0314 	add.w	r3, r7, #20
 801374e:	4619      	mov	r1, r3
 8013750:	4817      	ldr	r0, [pc, #92]	; (80137b0 <MX_GPIO_Init+0x104>)
 8013752:	f001 ffe9 	bl	8015728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8013756:	2301      	movs	r3, #1
 8013758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801375a:	2300      	movs	r3, #0
 801375c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801375e:	2300      	movs	r3, #0
 8013760:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013762:	f107 0314 	add.w	r3, r7, #20
 8013766:	4619      	mov	r1, r3
 8013768:	4811      	ldr	r0, [pc, #68]	; (80137b0 <MX_GPIO_Init+0x104>)
 801376a:	f001 ffdd 	bl	8015728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 801376e:	2320      	movs	r3, #32
 8013770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013772:	2301      	movs	r3, #1
 8013774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013776:	2300      	movs	r3, #0
 8013778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801377a:	2300      	movs	r3, #0
 801377c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 801377e:	f107 0314 	add.w	r3, r7, #20
 8013782:	4619      	mov	r1, r3
 8013784:	4808      	ldr	r0, [pc, #32]	; (80137a8 <MX_GPIO_Init+0xfc>)
 8013786:	f001 ffcf 	bl	8015728 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 801378a:	2200      	movs	r2, #0
 801378c:	210a      	movs	r1, #10
 801378e:	2028      	movs	r0, #40	; 0x28
 8013790:	f001 fbf6 	bl	8014f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8013794:	2028      	movs	r0, #40	; 0x28
 8013796:	f001 fc0f 	bl	8014fb8 <HAL_NVIC_EnableIRQ>

}
 801379a:	bf00      	nop
 801379c:	3728      	adds	r7, #40	; 0x28
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}
 80137a2:	bf00      	nop
 80137a4:	40023800 	.word	0x40023800
 80137a8:	40020000 	.word	0x40020000
 80137ac:	10210000 	.word	0x10210000
 80137b0:	40020800 	.word	0x40020800

080137b4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80137b8:	4b12      	ldr	r3, [pc, #72]	; (8013804 <MX_I2C1_Init+0x50>)
 80137ba:	4a13      	ldr	r2, [pc, #76]	; (8013808 <MX_I2C1_Init+0x54>)
 80137bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80137be:	4b11      	ldr	r3, [pc, #68]	; (8013804 <MX_I2C1_Init+0x50>)
 80137c0:	4a12      	ldr	r2, [pc, #72]	; (801380c <MX_I2C1_Init+0x58>)
 80137c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80137c4:	4b0f      	ldr	r3, [pc, #60]	; (8013804 <MX_I2C1_Init+0x50>)
 80137c6:	2200      	movs	r2, #0
 80137c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80137ca:	4b0e      	ldr	r3, [pc, #56]	; (8013804 <MX_I2C1_Init+0x50>)
 80137cc:	2200      	movs	r2, #0
 80137ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80137d0:	4b0c      	ldr	r3, [pc, #48]	; (8013804 <MX_I2C1_Init+0x50>)
 80137d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80137d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80137d8:	4b0a      	ldr	r3, [pc, #40]	; (8013804 <MX_I2C1_Init+0x50>)
 80137da:	2200      	movs	r2, #0
 80137dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80137de:	4b09      	ldr	r3, [pc, #36]	; (8013804 <MX_I2C1_Init+0x50>)
 80137e0:	2200      	movs	r2, #0
 80137e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80137e4:	4b07      	ldr	r3, [pc, #28]	; (8013804 <MX_I2C1_Init+0x50>)
 80137e6:	2200      	movs	r2, #0
 80137e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80137ea:	4b06      	ldr	r3, [pc, #24]	; (8013804 <MX_I2C1_Init+0x50>)
 80137ec:	2200      	movs	r2, #0
 80137ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80137f0:	4804      	ldr	r0, [pc, #16]	; (8013804 <MX_I2C1_Init+0x50>)
 80137f2:	f002 f94d 	bl	8015a90 <HAL_I2C_Init>
 80137f6:	4603      	mov	r3, r0
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d001      	beq.n	8013800 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80137fc:	f000 fa12 	bl	8013c24 <Error_Handler>
  }

}
 8013800:	bf00      	nop
 8013802:	bd80      	pop	{r7, pc}
 8013804:	20010bdc 	.word	0x20010bdc
 8013808:	40005400 	.word	0x40005400
 801380c:	00061a80 	.word	0x00061a80

08013810 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8013810:	b580      	push	{r7, lr}
 8013812:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8013814:	4b12      	ldr	r3, [pc, #72]	; (8013860 <MX_I2C2_Init+0x50>)
 8013816:	4a13      	ldr	r2, [pc, #76]	; (8013864 <MX_I2C2_Init+0x54>)
 8013818:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 801381a:	4b11      	ldr	r3, [pc, #68]	; (8013860 <MX_I2C2_Init+0x50>)
 801381c:	4a12      	ldr	r2, [pc, #72]	; (8013868 <MX_I2C2_Init+0x58>)
 801381e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8013820:	4b0f      	ldr	r3, [pc, #60]	; (8013860 <MX_I2C2_Init+0x50>)
 8013822:	2200      	movs	r2, #0
 8013824:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8013826:	4b0e      	ldr	r3, [pc, #56]	; (8013860 <MX_I2C2_Init+0x50>)
 8013828:	2200      	movs	r2, #0
 801382a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801382c:	4b0c      	ldr	r3, [pc, #48]	; (8013860 <MX_I2C2_Init+0x50>)
 801382e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8013832:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013834:	4b0a      	ldr	r3, [pc, #40]	; (8013860 <MX_I2C2_Init+0x50>)
 8013836:	2200      	movs	r2, #0
 8013838:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 801383a:	4b09      	ldr	r3, [pc, #36]	; (8013860 <MX_I2C2_Init+0x50>)
 801383c:	2200      	movs	r2, #0
 801383e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8013840:	4b07      	ldr	r3, [pc, #28]	; (8013860 <MX_I2C2_Init+0x50>)
 8013842:	2200      	movs	r2, #0
 8013844:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8013846:	4b06      	ldr	r3, [pc, #24]	; (8013860 <MX_I2C2_Init+0x50>)
 8013848:	2200      	movs	r2, #0
 801384a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 801384c:	4804      	ldr	r0, [pc, #16]	; (8013860 <MX_I2C2_Init+0x50>)
 801384e:	f002 f91f 	bl	8015a90 <HAL_I2C_Init>
 8013852:	4603      	mov	r3, r0
 8013854:	2b00      	cmp	r3, #0
 8013856:	d001      	beq.n	801385c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8013858:	f000 f9e4 	bl	8013c24 <Error_Handler>
  }

}
 801385c:	bf00      	nop
 801385e:	bd80      	pop	{r7, pc}
 8013860:	20010c30 	.word	0x20010c30
 8013864:	40005800 	.word	0x40005800
 8013868:	00061a80 	.word	0x00061a80

0801386c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b08c      	sub	sp, #48	; 0x30
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013874:	f107 031c 	add.w	r3, r7, #28
 8013878:	2200      	movs	r2, #0
 801387a:	601a      	str	r2, [r3, #0]
 801387c:	605a      	str	r2, [r3, #4]
 801387e:	609a      	str	r2, [r3, #8]
 8013880:	60da      	str	r2, [r3, #12]
 8013882:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	4a52      	ldr	r2, [pc, #328]	; (80139d4 <HAL_I2C_MspInit+0x168>)
 801388a:	4293      	cmp	r3, r2
 801388c:	d15b      	bne.n	8013946 <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801388e:	2300      	movs	r3, #0
 8013890:	61bb      	str	r3, [r7, #24]
 8013892:	4b51      	ldr	r3, [pc, #324]	; (80139d8 <HAL_I2C_MspInit+0x16c>)
 8013894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013896:	4a50      	ldr	r2, [pc, #320]	; (80139d8 <HAL_I2C_MspInit+0x16c>)
 8013898:	f043 0302 	orr.w	r3, r3, #2
 801389c:	6313      	str	r3, [r2, #48]	; 0x30
 801389e:	4b4e      	ldr	r3, [pc, #312]	; (80139d8 <HAL_I2C_MspInit+0x16c>)
 80138a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138a2:	f003 0302 	and.w	r3, r3, #2
 80138a6:	61bb      	str	r3, [r7, #24]
 80138a8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80138aa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80138ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80138b0:	2312      	movs	r3, #18
 80138b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80138b4:	2301      	movs	r3, #1
 80138b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80138b8:	2303      	movs	r3, #3
 80138ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80138bc:	2304      	movs	r3, #4
 80138be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80138c0:	f107 031c 	add.w	r3, r7, #28
 80138c4:	4619      	mov	r1, r3
 80138c6:	4845      	ldr	r0, [pc, #276]	; (80139dc <HAL_I2C_MspInit+0x170>)
 80138c8:	f001 ff2e 	bl	8015728 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80138cc:	2300      	movs	r3, #0
 80138ce:	617b      	str	r3, [r7, #20]
 80138d0:	4b41      	ldr	r3, [pc, #260]	; (80139d8 <HAL_I2C_MspInit+0x16c>)
 80138d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138d4:	4a40      	ldr	r2, [pc, #256]	; (80139d8 <HAL_I2C_MspInit+0x16c>)
 80138d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80138da:	6413      	str	r3, [r2, #64]	; 0x40
 80138dc:	4b3e      	ldr	r3, [pc, #248]	; (80139d8 <HAL_I2C_MspInit+0x16c>)
 80138de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80138e4:	617b      	str	r3, [r7, #20]
 80138e6:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80138e8:	4b3d      	ldr	r3, [pc, #244]	; (80139e0 <HAL_I2C_MspInit+0x174>)
 80138ea:	4a3e      	ldr	r2, [pc, #248]	; (80139e4 <HAL_I2C_MspInit+0x178>)
 80138ec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80138ee:	4b3c      	ldr	r3, [pc, #240]	; (80139e0 <HAL_I2C_MspInit+0x174>)
 80138f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80138f4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80138f6:	4b3a      	ldr	r3, [pc, #232]	; (80139e0 <HAL_I2C_MspInit+0x174>)
 80138f8:	2200      	movs	r2, #0
 80138fa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80138fc:	4b38      	ldr	r3, [pc, #224]	; (80139e0 <HAL_I2C_MspInit+0x174>)
 80138fe:	2200      	movs	r2, #0
 8013900:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013902:	4b37      	ldr	r3, [pc, #220]	; (80139e0 <HAL_I2C_MspInit+0x174>)
 8013904:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013908:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801390a:	4b35      	ldr	r3, [pc, #212]	; (80139e0 <HAL_I2C_MspInit+0x174>)
 801390c:	2200      	movs	r2, #0
 801390e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013910:	4b33      	ldr	r3, [pc, #204]	; (80139e0 <HAL_I2C_MspInit+0x174>)
 8013912:	2200      	movs	r2, #0
 8013914:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8013916:	4b32      	ldr	r3, [pc, #200]	; (80139e0 <HAL_I2C_MspInit+0x174>)
 8013918:	2200      	movs	r2, #0
 801391a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 801391c:	4b30      	ldr	r3, [pc, #192]	; (80139e0 <HAL_I2C_MspInit+0x174>)
 801391e:	2200      	movs	r2, #0
 8013920:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8013922:	4b2f      	ldr	r3, [pc, #188]	; (80139e0 <HAL_I2C_MspInit+0x174>)
 8013924:	2200      	movs	r2, #0
 8013926:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8013928:	482d      	ldr	r0, [pc, #180]	; (80139e0 <HAL_I2C_MspInit+0x174>)
 801392a:	f001 fb53 	bl	8014fd4 <HAL_DMA_Init>
 801392e:	4603      	mov	r3, r0
 8013930:	2b00      	cmp	r3, #0
 8013932:	d001      	beq.n	8013938 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8013934:	f000 f976 	bl	8013c24 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	4a29      	ldr	r2, [pc, #164]	; (80139e0 <HAL_I2C_MspInit+0x174>)
 801393c:	639a      	str	r2, [r3, #56]	; 0x38
 801393e:	4a28      	ldr	r2, [pc, #160]	; (80139e0 <HAL_I2C_MspInit+0x174>)
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8013944:	e042      	b.n	80139cc <HAL_I2C_MspInit+0x160>
  else if(i2cHandle->Instance==I2C2)
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	4a27      	ldr	r2, [pc, #156]	; (80139e8 <HAL_I2C_MspInit+0x17c>)
 801394c:	4293      	cmp	r3, r2
 801394e:	d13d      	bne.n	80139cc <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013950:	2300      	movs	r3, #0
 8013952:	613b      	str	r3, [r7, #16]
 8013954:	4b20      	ldr	r3, [pc, #128]	; (80139d8 <HAL_I2C_MspInit+0x16c>)
 8013956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013958:	4a1f      	ldr	r2, [pc, #124]	; (80139d8 <HAL_I2C_MspInit+0x16c>)
 801395a:	f043 0302 	orr.w	r3, r3, #2
 801395e:	6313      	str	r3, [r2, #48]	; 0x30
 8013960:	4b1d      	ldr	r3, [pc, #116]	; (80139d8 <HAL_I2C_MspInit+0x16c>)
 8013962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013964:	f003 0302 	and.w	r3, r3, #2
 8013968:	613b      	str	r3, [r7, #16]
 801396a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 801396c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013972:	2312      	movs	r3, #18
 8013974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013976:	2301      	movs	r3, #1
 8013978:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801397a:	2303      	movs	r3, #3
 801397c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 801397e:	2304      	movs	r3, #4
 8013980:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013982:	f107 031c 	add.w	r3, r7, #28
 8013986:	4619      	mov	r1, r3
 8013988:	4814      	ldr	r0, [pc, #80]	; (80139dc <HAL_I2C_MspInit+0x170>)
 801398a:	f001 fecd 	bl	8015728 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801398e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013994:	2312      	movs	r3, #18
 8013996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013998:	2301      	movs	r3, #1
 801399a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801399c:	2303      	movs	r3, #3
 801399e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80139a0:	2309      	movs	r3, #9
 80139a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80139a4:	f107 031c 	add.w	r3, r7, #28
 80139a8:	4619      	mov	r1, r3
 80139aa:	480c      	ldr	r0, [pc, #48]	; (80139dc <HAL_I2C_MspInit+0x170>)
 80139ac:	f001 febc 	bl	8015728 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80139b0:	2300      	movs	r3, #0
 80139b2:	60fb      	str	r3, [r7, #12]
 80139b4:	4b08      	ldr	r3, [pc, #32]	; (80139d8 <HAL_I2C_MspInit+0x16c>)
 80139b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139b8:	4a07      	ldr	r2, [pc, #28]	; (80139d8 <HAL_I2C_MspInit+0x16c>)
 80139ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80139be:	6413      	str	r3, [r2, #64]	; 0x40
 80139c0:	4b05      	ldr	r3, [pc, #20]	; (80139d8 <HAL_I2C_MspInit+0x16c>)
 80139c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80139c8:	60fb      	str	r3, [r7, #12]
 80139ca:	68fb      	ldr	r3, [r7, #12]
}
 80139cc:	bf00      	nop
 80139ce:	3730      	adds	r7, #48	; 0x30
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd80      	pop	{r7, pc}
 80139d4:	40005400 	.word	0x40005400
 80139d8:	40023800 	.word	0x40023800
 80139dc:	40020400 	.word	0x40020400
 80139e0:	20010c84 	.word	0x20010c84
 80139e4:	40026010 	.word	0x40026010
 80139e8:	40005800 	.word	0x40005800

080139ec <msOverFlow>:

static __inline void msOverFlow(){
 80139ec:	b480      	push	{r7}
 80139ee:	af00      	add	r7, sp, #0
	_timerOverflowCnt++;
 80139f0:	4b04      	ldr	r3, [pc, #16]	; (8013a04 <msOverFlow+0x18>)
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	3301      	adds	r3, #1
 80139f6:	4a03      	ldr	r2, [pc, #12]	; (8013a04 <msOverFlow+0x18>)
 80139f8:	6013      	str	r3, [r2, #0]
}
 80139fa:	bf00      	nop
 80139fc:	46bd      	mov	sp, r7
 80139fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a02:	4770      	bx	lr
 8013a04:	20001534 	.word	0x20001534

08013a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8013a0c:	f001 f99c 	bl	8014d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8013a10:	f000 f828 	bl	8013a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8013a14:	f7ff fe4a 	bl	80136ac <MX_GPIO_Init>
  MX_DMA_Init();
 8013a18:	f7ff fd5e 	bl	80134d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8013a1c:	f000 fffe 	bl	8014a1c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8013a20:	f7ff fec8 	bl	80137b4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8013a24:	f7ff fef4 	bl	8013810 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8013a28:	f000 f904 	bl	8013c34 <MX_SDIO_SD_Init>
  MX_TIM2_Init();
 8013a2c:	f000 fcb2 	bl	8014394 <MX_TIM2_Init>
  MX_TIM3_Init();
 8013a30:	f000 fcfc 	bl	801442c <MX_TIM3_Init>
  MX_FATFS_Init();
 8013a34:	f009 fd20 	bl	801d478 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 8013a38:	f001 f81a 	bl	8014a70 <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 8013a3c:	f000 ffc0 	bl	80149c0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8013a40:	f000 fd8c 	bl	801455c <MX_TIM4_Init>
  MX_TIM5_Init();
 8013a44:	f000 fde2 	bl	801460c <MX_TIM5_Init>
  MX_TIM1_Init();
 8013a48:	f000 fc22 	bl	8014290 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8013a4c:	f000 f872 	bl	8013b34 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  cppMain();
 8013a50:	f7ff faac 	bl	8012fac <cppMain>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8013a54:	f00c ffd4 	bl	8020a00 <osKernelInitialize>
  MX_FREERTOS_Init();
 8013a58:	f7ff fd66 	bl	8013528 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8013a5c:	f00d f826 	bl	8020aac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8013a60:	e7fe      	b.n	8013a60 <main+0x58>
	...

08013a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b094      	sub	sp, #80	; 0x50
 8013a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8013a6a:	f107 0320 	add.w	r3, r7, #32
 8013a6e:	2230      	movs	r2, #48	; 0x30
 8013a70:	2100      	movs	r1, #0
 8013a72:	4618      	mov	r0, r3
 8013a74:	f014 fe7b 	bl	802876e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8013a78:	f107 030c 	add.w	r3, r7, #12
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	601a      	str	r2, [r3, #0]
 8013a80:	605a      	str	r2, [r3, #4]
 8013a82:	609a      	str	r2, [r3, #8]
 8013a84:	60da      	str	r2, [r3, #12]
 8013a86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8013a88:	2300      	movs	r3, #0
 8013a8a:	60bb      	str	r3, [r7, #8]
 8013a8c:	4b27      	ldr	r3, [pc, #156]	; (8013b2c <SystemClock_Config+0xc8>)
 8013a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a90:	4a26      	ldr	r2, [pc, #152]	; (8013b2c <SystemClock_Config+0xc8>)
 8013a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013a96:	6413      	str	r3, [r2, #64]	; 0x40
 8013a98:	4b24      	ldr	r3, [pc, #144]	; (8013b2c <SystemClock_Config+0xc8>)
 8013a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013aa0:	60bb      	str	r3, [r7, #8]
 8013aa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	607b      	str	r3, [r7, #4]
 8013aa8:	4b21      	ldr	r3, [pc, #132]	; (8013b30 <SystemClock_Config+0xcc>)
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	4a20      	ldr	r2, [pc, #128]	; (8013b30 <SystemClock_Config+0xcc>)
 8013aae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013ab2:	6013      	str	r3, [r2, #0]
 8013ab4:	4b1e      	ldr	r3, [pc, #120]	; (8013b30 <SystemClock_Config+0xcc>)
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013abc:	607b      	str	r3, [r7, #4]
 8013abe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8013ac0:	2301      	movs	r3, #1
 8013ac2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8013ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013ac8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013aca:	2302      	movs	r3, #2
 8013acc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8013ace:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8013ad4:	2304      	movs	r3, #4
 8013ad6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8013ad8:	2364      	movs	r3, #100	; 0x64
 8013ada:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013adc:	2302      	movs	r3, #2
 8013ade:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8013ae0:	2305      	movs	r3, #5
 8013ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013ae4:	f107 0320 	add.w	r3, r7, #32
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f004 fea3 	bl	8018834 <HAL_RCC_OscConfig>
 8013aee:	4603      	mov	r3, r0
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d001      	beq.n	8013af8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8013af4:	f000 f896 	bl	8013c24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013af8:	230f      	movs	r3, #15
 8013afa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013afc:	2302      	movs	r3, #2
 8013afe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013b00:	2300      	movs	r3, #0
 8013b02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8013b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013b08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8013b0e:	f107 030c 	add.w	r3, r7, #12
 8013b12:	2103      	movs	r1, #3
 8013b14:	4618      	mov	r0, r3
 8013b16:	f005 f8fd 	bl	8018d14 <HAL_RCC_ClockConfig>
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d001      	beq.n	8013b24 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8013b20:	f000 f880 	bl	8013c24 <Error_Handler>
  }
}
 8013b24:	bf00      	nop
 8013b26:	3750      	adds	r7, #80	; 0x50
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	bd80      	pop	{r7, pc}
 8013b2c:	40023800 	.word	0x40023800
 8013b30:	40007000 	.word	0x40007000

08013b34 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	af00      	add	r7, sp, #0
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8013b38:	2200      	movs	r2, #0
 8013b3a:	2105      	movs	r1, #5
 8013b3c:	200b      	movs	r0, #11
 8013b3e:	f001 fa1f 	bl	8014f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8013b42:	200b      	movs	r0, #11
 8013b44:	f001 fa38 	bl	8014fb8 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8013b48:	2200      	movs	r2, #0
 8013b4a:	2105      	movs	r1, #5
 8013b4c:	201f      	movs	r0, #31
 8013b4e:	f001 fa17 	bl	8014f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8013b52:	201f      	movs	r0, #31
 8013b54:	f001 fa30 	bl	8014fb8 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8013b58:	2200      	movs	r2, #0
 8013b5a:	2105      	movs	r1, #5
 8013b5c:	2020      	movs	r0, #32
 8013b5e:	f001 fa0f 	bl	8014f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8013b62:	2020      	movs	r0, #32
 8013b64:	f001 fa28 	bl	8014fb8 <HAL_NVIC_EnableIRQ>
  /* I2C2_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 6, 0);
 8013b68:	2200      	movs	r2, #0
 8013b6a:	2106      	movs	r1, #6
 8013b6c:	2021      	movs	r0, #33	; 0x21
 8013b6e:	f001 fa07 	bl	8014f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8013b72:	2021      	movs	r0, #33	; 0x21
 8013b74:	f001 fa20 	bl	8014fb8 <HAL_NVIC_EnableIRQ>
  /* I2C2_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 6, 0);
 8013b78:	2200      	movs	r2, #0
 8013b7a:	2106      	movs	r1, #6
 8013b7c:	2022      	movs	r0, #34	; 0x22
 8013b7e:	f001 f9ff 	bl	8014f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8013b82:	2022      	movs	r0, #34	; 0x22
 8013b84:	f001 fa18 	bl	8014fb8 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8013b88:	2200      	movs	r2, #0
 8013b8a:	2100      	movs	r1, #0
 8013b8c:	2025      	movs	r0, #37	; 0x25
 8013b8e:	f001 f9f7 	bl	8014f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8013b92:	2025      	movs	r0, #37	; 0x25
 8013b94:	f001 fa10 	bl	8014fb8 <HAL_NVIC_EnableIRQ>
  /* SDIO_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SDIO_IRQn, 10, 0);
 8013b98:	2200      	movs	r2, #0
 8013b9a:	210a      	movs	r1, #10
 8013b9c:	2031      	movs	r0, #49	; 0x31
 8013b9e:	f001 f9ef 	bl	8014f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8013ba2:	2031      	movs	r0, #49	; 0x31
 8013ba4:	f001 fa08 	bl	8014fb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 10, 0);
 8013ba8:	2200      	movs	r2, #0
 8013baa:	210a      	movs	r1, #10
 8013bac:	2039      	movs	r0, #57	; 0x39
 8013bae:	f001 f9e7 	bl	8014f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8013bb2:	2039      	movs	r0, #57	; 0x39
 8013bb4:	f001 fa00 	bl	8014fb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 10, 0);
 8013bb8:	2200      	movs	r2, #0
 8013bba:	210a      	movs	r1, #10
 8013bbc:	203a      	movs	r0, #58	; 0x3a
 8013bbe:	f001 f9df 	bl	8014f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8013bc2:	203a      	movs	r0, #58	; 0x3a
 8013bc4:	f001 f9f8 	bl	8014fb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 10, 0);
 8013bc8:	2200      	movs	r2, #0
 8013bca:	210a      	movs	r1, #10
 8013bcc:	2045      	movs	r0, #69	; 0x45
 8013bce:	f001 f9d7 	bl	8014f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8013bd2:	2045      	movs	r0, #69	; 0x45
 8013bd4:	f001 f9f0 	bl	8014fb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 10, 0);
 8013bd8:	2200      	movs	r2, #0
 8013bda:	210a      	movs	r1, #10
 8013bdc:	203b      	movs	r0, #59	; 0x3b
 8013bde:	f001 f9cf 	bl	8014f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8013be2:	203b      	movs	r0, #59	; 0x3b
 8013be4:	f001 f9e8 	bl	8014fb8 <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 10, 0);
 8013be8:	2200      	movs	r2, #0
 8013bea:	210a      	movs	r1, #10
 8013bec:	2047      	movs	r0, #71	; 0x47
 8013bee:	f001 f9c7 	bl	8014f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8013bf2:	2047      	movs	r0, #71	; 0x47
 8013bf4:	f001 f9e0 	bl	8014fb8 <HAL_NVIC_EnableIRQ>
}
 8013bf8:	bf00      	nop
 8013bfa:	bd80      	pop	{r7, pc}

08013bfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b082      	sub	sp, #8
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	msOverFlow();
 8013c04:	f7ff fef2 	bl	80139ec <msOverFlow>
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	4a04      	ldr	r2, [pc, #16]	; (8013c20 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8013c0e:	4293      	cmp	r3, r2
 8013c10:	d101      	bne.n	8013c16 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_IncTick();
 8013c12:	f001 f8bb 	bl	8014d8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8013c16:	bf00      	nop
 8013c18:	3708      	adds	r7, #8
 8013c1a:	46bd      	mov	sp, r7
 8013c1c:	bd80      	pop	{r7, pc}
 8013c1e:	bf00      	nop
 8013c20:	40014400 	.word	0x40014400

08013c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8013c24:	b480      	push	{r7}
 8013c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8013c28:	bf00      	nop
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c30:	4770      	bx	lr
	...

08013c34 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8013c34:	b480      	push	{r7}
 8013c36:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8013c38:	4b0c      	ldr	r3, [pc, #48]	; (8013c6c <MX_SDIO_SD_Init+0x38>)
 8013c3a:	4a0d      	ldr	r2, [pc, #52]	; (8013c70 <MX_SDIO_SD_Init+0x3c>)
 8013c3c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8013c3e:	4b0b      	ldr	r3, [pc, #44]	; (8013c6c <MX_SDIO_SD_Init+0x38>)
 8013c40:	2200      	movs	r2, #0
 8013c42:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8013c44:	4b09      	ldr	r3, [pc, #36]	; (8013c6c <MX_SDIO_SD_Init+0x38>)
 8013c46:	2200      	movs	r2, #0
 8013c48:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8013c4a:	4b08      	ldr	r3, [pc, #32]	; (8013c6c <MX_SDIO_SD_Init+0x38>)
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8013c50:	4b06      	ldr	r3, [pc, #24]	; (8013c6c <MX_SDIO_SD_Init+0x38>)
 8013c52:	2200      	movs	r2, #0
 8013c54:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8013c56:	4b05      	ldr	r3, [pc, #20]	; (8013c6c <MX_SDIO_SD_Init+0x38>)
 8013c58:	2200      	movs	r2, #0
 8013c5a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8013c5c:	4b03      	ldr	r3, [pc, #12]	; (8013c6c <MX_SDIO_SD_Init+0x38>)
 8013c5e:	2200      	movs	r2, #0
 8013c60:	619a      	str	r2, [r3, #24]

}
 8013c62:	bf00      	nop
 8013c64:	46bd      	mov	sp, r7
 8013c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6a:	4770      	bx	lr
 8013c6c:	20010da4 	.word	0x20010da4
 8013c70:	40012c00 	.word	0x40012c00

08013c74 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b08c      	sub	sp, #48	; 0x30
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013c7c:	f107 031c 	add.w	r3, r7, #28
 8013c80:	2200      	movs	r2, #0
 8013c82:	601a      	str	r2, [r3, #0]
 8013c84:	605a      	str	r2, [r3, #4]
 8013c86:	609a      	str	r2, [r3, #8]
 8013c88:	60da      	str	r2, [r3, #12]
 8013c8a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	4a74      	ldr	r2, [pc, #464]	; (8013e64 <HAL_SD_MspInit+0x1f0>)
 8013c92:	4293      	cmp	r3, r2
 8013c94:	f040 80e1 	bne.w	8013e5a <HAL_SD_MspInit+0x1e6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8013c98:	2300      	movs	r3, #0
 8013c9a:	61bb      	str	r3, [r7, #24]
 8013c9c:	4b72      	ldr	r3, [pc, #456]	; (8013e68 <HAL_SD_MspInit+0x1f4>)
 8013c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ca0:	4a71      	ldr	r2, [pc, #452]	; (8013e68 <HAL_SD_MspInit+0x1f4>)
 8013ca2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013ca6:	6453      	str	r3, [r2, #68]	; 0x44
 8013ca8:	4b6f      	ldr	r3, [pc, #444]	; (8013e68 <HAL_SD_MspInit+0x1f4>)
 8013caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013cb0:	61bb      	str	r3, [r7, #24]
 8013cb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	617b      	str	r3, [r7, #20]
 8013cb8:	4b6b      	ldr	r3, [pc, #428]	; (8013e68 <HAL_SD_MspInit+0x1f4>)
 8013cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cbc:	4a6a      	ldr	r2, [pc, #424]	; (8013e68 <HAL_SD_MspInit+0x1f4>)
 8013cbe:	f043 0301 	orr.w	r3, r3, #1
 8013cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8013cc4:	4b68      	ldr	r3, [pc, #416]	; (8013e68 <HAL_SD_MspInit+0x1f4>)
 8013cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cc8:	f003 0301 	and.w	r3, r3, #1
 8013ccc:	617b      	str	r3, [r7, #20]
 8013cce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	613b      	str	r3, [r7, #16]
 8013cd4:	4b64      	ldr	r3, [pc, #400]	; (8013e68 <HAL_SD_MspInit+0x1f4>)
 8013cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cd8:	4a63      	ldr	r2, [pc, #396]	; (8013e68 <HAL_SD_MspInit+0x1f4>)
 8013cda:	f043 0302 	orr.w	r3, r3, #2
 8013cde:	6313      	str	r3, [r2, #48]	; 0x30
 8013ce0:	4b61      	ldr	r3, [pc, #388]	; (8013e68 <HAL_SD_MspInit+0x1f4>)
 8013ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ce4:	f003 0302 	and.w	r3, r3, #2
 8013ce8:	613b      	str	r3, [r7, #16]
 8013cea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013cec:	2300      	movs	r3, #0
 8013cee:	60fb      	str	r3, [r7, #12]
 8013cf0:	4b5d      	ldr	r3, [pc, #372]	; (8013e68 <HAL_SD_MspInit+0x1f4>)
 8013cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cf4:	4a5c      	ldr	r2, [pc, #368]	; (8013e68 <HAL_SD_MspInit+0x1f4>)
 8013cf6:	f043 0304 	orr.w	r3, r3, #4
 8013cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8013cfc:	4b5a      	ldr	r3, [pc, #360]	; (8013e68 <HAL_SD_MspInit+0x1f4>)
 8013cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d00:	f003 0304 	and.w	r3, r3, #4
 8013d04:	60fb      	str	r3, [r7, #12]
 8013d06:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8013d08:	f44f 7310 	mov.w	r3, #576	; 0x240
 8013d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013d0e:	2302      	movs	r3, #2
 8013d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013d12:	2301      	movs	r3, #1
 8013d14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013d16:	2303      	movs	r3, #3
 8013d18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8013d1a:	230c      	movs	r3, #12
 8013d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013d1e:	f107 031c 	add.w	r3, r7, #28
 8013d22:	4619      	mov	r1, r3
 8013d24:	4851      	ldr	r0, [pc, #324]	; (8013e6c <HAL_SD_MspInit+0x1f8>)
 8013d26:	f001 fcff 	bl	8015728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8013d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013d30:	2302      	movs	r3, #2
 8013d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d34:	2300      	movs	r3, #0
 8013d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013d38:	2303      	movs	r3, #3
 8013d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8013d3c:	230c      	movs	r3, #12
 8013d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013d40:	f107 031c 	add.w	r3, r7, #28
 8013d44:	4619      	mov	r1, r3
 8013d46:	484a      	ldr	r0, [pc, #296]	; (8013e70 <HAL_SD_MspInit+0x1fc>)
 8013d48:	f001 fcee 	bl	8015728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8013d4c:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8013d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013d52:	2302      	movs	r3, #2
 8013d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013d56:	2301      	movs	r3, #1
 8013d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013d5a:	2303      	movs	r3, #3
 8013d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8013d5e:	230c      	movs	r3, #12
 8013d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013d62:	f107 031c 	add.w	r3, r7, #28
 8013d66:	4619      	mov	r1, r3
 8013d68:	4842      	ldr	r0, [pc, #264]	; (8013e74 <HAL_SD_MspInit+0x200>)
 8013d6a:	f001 fcdd 	bl	8015728 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8013d6e:	4b42      	ldr	r3, [pc, #264]	; (8013e78 <HAL_SD_MspInit+0x204>)
 8013d70:	4a42      	ldr	r2, [pc, #264]	; (8013e7c <HAL_SD_MspInit+0x208>)
 8013d72:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8013d74:	4b40      	ldr	r3, [pc, #256]	; (8013e78 <HAL_SD_MspInit+0x204>)
 8013d76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013d7a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8013d7c:	4b3e      	ldr	r3, [pc, #248]	; (8013e78 <HAL_SD_MspInit+0x204>)
 8013d7e:	2200      	movs	r2, #0
 8013d80:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013d82:	4b3d      	ldr	r3, [pc, #244]	; (8013e78 <HAL_SD_MspInit+0x204>)
 8013d84:	2200      	movs	r2, #0
 8013d86:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013d88:	4b3b      	ldr	r3, [pc, #236]	; (8013e78 <HAL_SD_MspInit+0x204>)
 8013d8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013d8e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8013d90:	4b39      	ldr	r3, [pc, #228]	; (8013e78 <HAL_SD_MspInit+0x204>)
 8013d92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013d96:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8013d98:	4b37      	ldr	r3, [pc, #220]	; (8013e78 <HAL_SD_MspInit+0x204>)
 8013d9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8013d9e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8013da0:	4b35      	ldr	r3, [pc, #212]	; (8013e78 <HAL_SD_MspInit+0x204>)
 8013da2:	2220      	movs	r2, #32
 8013da4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013da6:	4b34      	ldr	r3, [pc, #208]	; (8013e78 <HAL_SD_MspInit+0x204>)
 8013da8:	2200      	movs	r2, #0
 8013daa:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8013dac:	4b32      	ldr	r3, [pc, #200]	; (8013e78 <HAL_SD_MspInit+0x204>)
 8013dae:	2204      	movs	r2, #4
 8013db0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8013db2:	4b31      	ldr	r3, [pc, #196]	; (8013e78 <HAL_SD_MspInit+0x204>)
 8013db4:	2203      	movs	r2, #3
 8013db6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8013db8:	4b2f      	ldr	r3, [pc, #188]	; (8013e78 <HAL_SD_MspInit+0x204>)
 8013dba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8013dbe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8013dc0:	4b2d      	ldr	r3, [pc, #180]	; (8013e78 <HAL_SD_MspInit+0x204>)
 8013dc2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8013dc6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8013dc8:	482b      	ldr	r0, [pc, #172]	; (8013e78 <HAL_SD_MspInit+0x204>)
 8013dca:	f001 f903 	bl	8014fd4 <HAL_DMA_Init>
 8013dce:	4603      	mov	r3, r0
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d001      	beq.n	8013dd8 <HAL_SD_MspInit+0x164>
    {
      Error_Handler();
 8013dd4:	f7ff ff26 	bl	8013c24 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	4a27      	ldr	r2, [pc, #156]	; (8013e78 <HAL_SD_MspInit+0x204>)
 8013ddc:	641a      	str	r2, [r3, #64]	; 0x40
 8013dde:	4a26      	ldr	r2, [pc, #152]	; (8013e78 <HAL_SD_MspInit+0x204>)
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8013de4:	4b26      	ldr	r3, [pc, #152]	; (8013e80 <HAL_SD_MspInit+0x20c>)
 8013de6:	4a27      	ldr	r2, [pc, #156]	; (8013e84 <HAL_SD_MspInit+0x210>)
 8013de8:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8013dea:	4b25      	ldr	r3, [pc, #148]	; (8013e80 <HAL_SD_MspInit+0x20c>)
 8013dec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013df0:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8013df2:	4b23      	ldr	r3, [pc, #140]	; (8013e80 <HAL_SD_MspInit+0x20c>)
 8013df4:	2240      	movs	r2, #64	; 0x40
 8013df6:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013df8:	4b21      	ldr	r3, [pc, #132]	; (8013e80 <HAL_SD_MspInit+0x20c>)
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8013dfe:	4b20      	ldr	r3, [pc, #128]	; (8013e80 <HAL_SD_MspInit+0x20c>)
 8013e00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013e04:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8013e06:	4b1e      	ldr	r3, [pc, #120]	; (8013e80 <HAL_SD_MspInit+0x20c>)
 8013e08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013e0c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8013e0e:	4b1c      	ldr	r3, [pc, #112]	; (8013e80 <HAL_SD_MspInit+0x20c>)
 8013e10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8013e14:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8013e16:	4b1a      	ldr	r3, [pc, #104]	; (8013e80 <HAL_SD_MspInit+0x20c>)
 8013e18:	2220      	movs	r2, #32
 8013e1a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013e1c:	4b18      	ldr	r3, [pc, #96]	; (8013e80 <HAL_SD_MspInit+0x20c>)
 8013e1e:	2200      	movs	r2, #0
 8013e20:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8013e22:	4b17      	ldr	r3, [pc, #92]	; (8013e80 <HAL_SD_MspInit+0x20c>)
 8013e24:	2204      	movs	r2, #4
 8013e26:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8013e28:	4b15      	ldr	r3, [pc, #84]	; (8013e80 <HAL_SD_MspInit+0x20c>)
 8013e2a:	2203      	movs	r2, #3
 8013e2c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8013e2e:	4b14      	ldr	r3, [pc, #80]	; (8013e80 <HAL_SD_MspInit+0x20c>)
 8013e30:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8013e34:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8013e36:	4b12      	ldr	r3, [pc, #72]	; (8013e80 <HAL_SD_MspInit+0x20c>)
 8013e38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8013e3c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8013e3e:	4810      	ldr	r0, [pc, #64]	; (8013e80 <HAL_SD_MspInit+0x20c>)
 8013e40:	f001 f8c8 	bl	8014fd4 <HAL_DMA_Init>
 8013e44:	4603      	mov	r3, r0
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d001      	beq.n	8013e4e <HAL_SD_MspInit+0x1da>
    {
      Error_Handler();
 8013e4a:	f7ff feeb 	bl	8013c24 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	4a0b      	ldr	r2, [pc, #44]	; (8013e80 <HAL_SD_MspInit+0x20c>)
 8013e52:	63da      	str	r2, [r3, #60]	; 0x3c
 8013e54:	4a0a      	ldr	r2, [pc, #40]	; (8013e80 <HAL_SD_MspInit+0x20c>)
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8013e5a:	bf00      	nop
 8013e5c:	3730      	adds	r7, #48	; 0x30
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	bd80      	pop	{r7, pc}
 8013e62:	bf00      	nop
 8013e64:	40012c00 	.word	0x40012c00
 8013e68:	40023800 	.word	0x40023800
 8013e6c:	40020000 	.word	0x40020000
 8013e70:	40020400 	.word	0x40020400
 8013e74:	40020800 	.word	0x40020800
 8013e78:	20010ce4 	.word	0x20010ce4
 8013e7c:	40026458 	.word	0x40026458
 8013e80:	20010d44 	.word	0x20010d44
 8013e84:	400264a0 	.word	0x400264a0

08013e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8013e88:	b480      	push	{r7}
 8013e8a:	b083      	sub	sp, #12
 8013e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013e8e:	2300      	movs	r3, #0
 8013e90:	607b      	str	r3, [r7, #4]
 8013e92:	4b10      	ldr	r3, [pc, #64]	; (8013ed4 <HAL_MspInit+0x4c>)
 8013e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e96:	4a0f      	ldr	r2, [pc, #60]	; (8013ed4 <HAL_MspInit+0x4c>)
 8013e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8013e9e:	4b0d      	ldr	r3, [pc, #52]	; (8013ed4 <HAL_MspInit+0x4c>)
 8013ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013ea6:	607b      	str	r3, [r7, #4]
 8013ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8013eaa:	2300      	movs	r3, #0
 8013eac:	603b      	str	r3, [r7, #0]
 8013eae:	4b09      	ldr	r3, [pc, #36]	; (8013ed4 <HAL_MspInit+0x4c>)
 8013eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013eb2:	4a08      	ldr	r2, [pc, #32]	; (8013ed4 <HAL_MspInit+0x4c>)
 8013eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8013eba:	4b06      	ldr	r3, [pc, #24]	; (8013ed4 <HAL_MspInit+0x4c>)
 8013ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013ec2:	603b      	str	r3, [r7, #0]
 8013ec4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8013ec6:	bf00      	nop
 8013ec8:	370c      	adds	r7, #12
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed0:	4770      	bx	lr
 8013ed2:	bf00      	nop
 8013ed4:	40023800 	.word	0x40023800

08013ed8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b08c      	sub	sp, #48	; 0x30
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8013ee8:	2200      	movs	r2, #0
 8013eea:	6879      	ldr	r1, [r7, #4]
 8013eec:	2019      	movs	r0, #25
 8013eee:	f001 f847 	bl	8014f80 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8013ef2:	2019      	movs	r0, #25
 8013ef4:	f001 f860 	bl	8014fb8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8013ef8:	2300      	movs	r3, #0
 8013efa:	60fb      	str	r3, [r7, #12]
 8013efc:	4b1e      	ldr	r3, [pc, #120]	; (8013f78 <HAL_InitTick+0xa0>)
 8013efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f00:	4a1d      	ldr	r2, [pc, #116]	; (8013f78 <HAL_InitTick+0xa0>)
 8013f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013f06:	6453      	str	r3, [r2, #68]	; 0x44
 8013f08:	4b1b      	ldr	r3, [pc, #108]	; (8013f78 <HAL_InitTick+0xa0>)
 8013f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013f10:	60fb      	str	r3, [r7, #12]
 8013f12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8013f14:	f107 0210 	add.w	r2, r7, #16
 8013f18:	f107 0314 	add.w	r3, r7, #20
 8013f1c:	4611      	mov	r1, r2
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f005 f8ea 	bl	80190f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8013f24:	f005 f8d4 	bl	80190d0 <HAL_RCC_GetPCLK2Freq>
 8013f28:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8013f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f2c:	4a13      	ldr	r2, [pc, #76]	; (8013f7c <HAL_InitTick+0xa4>)
 8013f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8013f32:	0c9b      	lsrs	r3, r3, #18
 8013f34:	3b01      	subs	r3, #1
 8013f36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8013f38:	4b11      	ldr	r3, [pc, #68]	; (8013f80 <HAL_InitTick+0xa8>)
 8013f3a:	4a12      	ldr	r2, [pc, #72]	; (8013f84 <HAL_InitTick+0xac>)
 8013f3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8013f3e:	4b10      	ldr	r3, [pc, #64]	; (8013f80 <HAL_InitTick+0xa8>)
 8013f40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8013f44:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8013f46:	4a0e      	ldr	r2, [pc, #56]	; (8013f80 <HAL_InitTick+0xa8>)
 8013f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f4a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8013f4c:	4b0c      	ldr	r3, [pc, #48]	; (8013f80 <HAL_InitTick+0xa8>)
 8013f4e:	2200      	movs	r2, #0
 8013f50:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013f52:	4b0b      	ldr	r3, [pc, #44]	; (8013f80 <HAL_InitTick+0xa8>)
 8013f54:	2200      	movs	r2, #0
 8013f56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8013f58:	4809      	ldr	r0, [pc, #36]	; (8013f80 <HAL_InitTick+0xa8>)
 8013f5a:	f006 fbfd 	bl	801a758 <HAL_TIM_Base_Init>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d104      	bne.n	8013f6e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8013f64:	4806      	ldr	r0, [pc, #24]	; (8013f80 <HAL_InitTick+0xa8>)
 8013f66:	f006 fc22 	bl	801a7ae <HAL_TIM_Base_Start_IT>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	e000      	b.n	8013f70 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8013f6e:	2301      	movs	r3, #1
}
 8013f70:	4618      	mov	r0, r3
 8013f72:	3730      	adds	r7, #48	; 0x30
 8013f74:	46bd      	mov	sp, r7
 8013f76:	bd80      	pop	{r7, pc}
 8013f78:	40023800 	.word	0x40023800
 8013f7c:	431bde83 	.word	0x431bde83
 8013f80:	20010e28 	.word	0x20010e28
 8013f84:	40014400 	.word	0x40014400

08013f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8013f88:	b480      	push	{r7}
 8013f8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8013f8c:	bf00      	nop
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f94:	4770      	bx	lr

08013f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8013f96:	b480      	push	{r7}
 8013f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8013f9a:	e7fe      	b.n	8013f9a <HardFault_Handler+0x4>

08013f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8013f9c:	b480      	push	{r7}
 8013f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8013fa0:	e7fe      	b.n	8013fa0 <MemManage_Handler+0x4>

08013fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8013fa2:	b480      	push	{r7}
 8013fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8013fa6:	e7fe      	b.n	8013fa6 <BusFault_Handler+0x4>

08013fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8013fa8:	b480      	push	{r7}
 8013faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8013fac:	e7fe      	b.n	8013fac <UsageFault_Handler+0x4>

08013fae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8013fae:	b480      	push	{r7}
 8013fb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8013fb2:	bf00      	nop
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fba:	4770      	bx	lr

08013fbc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8013fc0:	4802      	ldr	r0, [pc, #8]	; (8013fcc <DMA1_Stream0_IRQHandler+0x10>)
 8013fc2:	f001 f92f 	bl	8015224 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8013fc6:	bf00      	nop
 8013fc8:	bd80      	pop	{r7, pc}
 8013fca:	bf00      	nop
 8013fcc:	20010c84 	.word	0x20010c84

08013fd0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8013fd4:	4803      	ldr	r0, [pc, #12]	; (8013fe4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8013fd6:	f006 fcec 	bl	801a9b2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8013fda:	4803      	ldr	r0, [pc, #12]	; (8013fe8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8013fdc:	f006 fce9 	bl	801a9b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8013fe0:	bf00      	nop
 8013fe2:	bd80      	pop	{r7, pc}
 8013fe4:	20010f28 	.word	0x20010f28
 8013fe8:	20010e28 	.word	0x20010e28

08013fec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8013fec:	b580      	push	{r7, lr}
 8013fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8013ff0:	4802      	ldr	r0, [pc, #8]	; (8013ffc <I2C1_EV_IRQHandler+0x10>)
 8013ff2:	f002 fbaf 	bl	8016754 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8013ff6:	bf00      	nop
 8013ff8:	bd80      	pop	{r7, pc}
 8013ffa:	bf00      	nop
 8013ffc:	20010bdc 	.word	0x20010bdc

08014000 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8014004:	4802      	ldr	r0, [pc, #8]	; (8014010 <I2C1_ER_IRQHandler+0x10>)
 8014006:	f002 fd0b 	bl	8016a20 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 801400a:	bf00      	nop
 801400c:	bd80      	pop	{r7, pc}
 801400e:	bf00      	nop
 8014010:	20010bdc 	.word	0x20010bdc

08014014 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8014018:	4802      	ldr	r0, [pc, #8]	; (8014024 <I2C2_EV_IRQHandler+0x10>)
 801401a:	f002 fb9b 	bl	8016754 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 801401e:	bf00      	nop
 8014020:	bd80      	pop	{r7, pc}
 8014022:	bf00      	nop
 8014024:	20010c30 	.word	0x20010c30

08014028 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 801402c:	4802      	ldr	r0, [pc, #8]	; (8014038 <I2C2_ER_IRQHandler+0x10>)
 801402e:	f002 fcf7 	bl	8016a20 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8014032:	bf00      	nop
 8014034:	bd80      	pop	{r7, pc}
 8014036:	bf00      	nop
 8014038:	20010c30 	.word	0x20010c30

0801403c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8014040:	4802      	ldr	r0, [pc, #8]	; (801404c <USART1_IRQHandler+0x10>)
 8014042:	f007 fe0d 	bl	801bc60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8014046:	bf00      	nop
 8014048:	bd80      	pop	{r7, pc}
 801404a:	bf00      	nop
 801404c:	20011068 	.word	0x20011068

08014050 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8014050:	b580      	push	{r7, lr}
 8014052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8014054:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8014058:	f001 fd02 	bl	8015a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 801405c:	bf00      	nop
 801405e:	bd80      	pop	{r7, pc}

08014060 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8014064:	4802      	ldr	r0, [pc, #8]	; (8014070 <SDIO_IRQHandler+0x10>)
 8014066:	f005 fae3 	bl	8019630 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 801406a:	bf00      	nop
 801406c:	bd80      	pop	{r7, pc}
 801406e:	bf00      	nop
 8014070:	20010da4 	.word	0x20010da4

08014074 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8014074:	b580      	push	{r7, lr}
 8014076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8014078:	4802      	ldr	r0, [pc, #8]	; (8014084 <DMA2_Stream1_IRQHandler+0x10>)
 801407a:	f001 f8d3 	bl	8015224 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 801407e:	bf00      	nop
 8014080:	bd80      	pop	{r7, pc}
 8014082:	bf00      	nop
 8014084:	20010fa8 	.word	0x20010fa8

08014088 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8014088:	b580      	push	{r7, lr}
 801408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 801408c:	4802      	ldr	r0, [pc, #8]	; (8014098 <DMA2_Stream2_IRQHandler+0x10>)
 801408e:	f001 f8c9 	bl	8015224 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8014092:	bf00      	nop
 8014094:	bd80      	pop	{r7, pc}
 8014096:	bf00      	nop
 8014098:	20011008 	.word	0x20011008

0801409c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 801409c:	b580      	push	{r7, lr}
 801409e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80140a0:	4802      	ldr	r0, [pc, #8]	; (80140ac <DMA2_Stream3_IRQHandler+0x10>)
 80140a2:	f001 f8bf 	bl	8015224 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80140a6:	bf00      	nop
 80140a8:	bd80      	pop	{r7, pc}
 80140aa:	bf00      	nop
 80140ac:	20010ce4 	.word	0x20010ce4

080140b0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80140b4:	4802      	ldr	r0, [pc, #8]	; (80140c0 <DMA2_Stream6_IRQHandler+0x10>)
 80140b6:	f001 f8b5 	bl	8015224 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80140ba:	bf00      	nop
 80140bc:	bd80      	pop	{r7, pc}
 80140be:	bf00      	nop
 80140c0:	20010d44 	.word	0x20010d44

080140c4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80140c8:	4802      	ldr	r0, [pc, #8]	; (80140d4 <USART6_IRQHandler+0x10>)
 80140ca:	f007 fdc9 	bl	801bc60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80140ce:	bf00      	nop
 80140d0:	bd80      	pop	{r7, pc}
 80140d2:	bf00      	nop
 80140d4:	200110a8 	.word	0x200110a8

080140d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80140d8:	b480      	push	{r7}
 80140da:	af00      	add	r7, sp, #0
	return 1;
 80140dc:	2301      	movs	r3, #1
}
 80140de:	4618      	mov	r0, r3
 80140e0:	46bd      	mov	sp, r7
 80140e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e6:	4770      	bx	lr

080140e8 <_kill>:

int _kill(int pid, int sig)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b082      	sub	sp, #8
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
 80140f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80140f2:	f014 faf5 	bl	80286e0 <__errno>
 80140f6:	4602      	mov	r2, r0
 80140f8:	2316      	movs	r3, #22
 80140fa:	6013      	str	r3, [r2, #0]
	return -1;
 80140fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014100:	4618      	mov	r0, r3
 8014102:	3708      	adds	r7, #8
 8014104:	46bd      	mov	sp, r7
 8014106:	bd80      	pop	{r7, pc}

08014108 <_exit>:

void _exit (int status)
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b082      	sub	sp, #8
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8014110:	f04f 31ff 	mov.w	r1, #4294967295
 8014114:	6878      	ldr	r0, [r7, #4]
 8014116:	f7ff ffe7 	bl	80140e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 801411a:	e7fe      	b.n	801411a <_exit+0x12>

0801411c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b086      	sub	sp, #24
 8014120:	af00      	add	r7, sp, #0
 8014122:	60f8      	str	r0, [r7, #12]
 8014124:	60b9      	str	r1, [r7, #8]
 8014126:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014128:	2300      	movs	r3, #0
 801412a:	617b      	str	r3, [r7, #20]
 801412c:	e00a      	b.n	8014144 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801412e:	f3af 8000 	nop.w
 8014132:	4601      	mov	r1, r0
 8014134:	68bb      	ldr	r3, [r7, #8]
 8014136:	1c5a      	adds	r2, r3, #1
 8014138:	60ba      	str	r2, [r7, #8]
 801413a:	b2ca      	uxtb	r2, r1
 801413c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801413e:	697b      	ldr	r3, [r7, #20]
 8014140:	3301      	adds	r3, #1
 8014142:	617b      	str	r3, [r7, #20]
 8014144:	697a      	ldr	r2, [r7, #20]
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	429a      	cmp	r2, r3
 801414a:	dbf0      	blt.n	801412e <_read+0x12>
	}

return len;
 801414c:	687b      	ldr	r3, [r7, #4]
}
 801414e:	4618      	mov	r0, r3
 8014150:	3718      	adds	r7, #24
 8014152:	46bd      	mov	sp, r7
 8014154:	bd80      	pop	{r7, pc}

08014156 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8014156:	b580      	push	{r7, lr}
 8014158:	b086      	sub	sp, #24
 801415a:	af00      	add	r7, sp, #0
 801415c:	60f8      	str	r0, [r7, #12]
 801415e:	60b9      	str	r1, [r7, #8]
 8014160:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014162:	2300      	movs	r3, #0
 8014164:	617b      	str	r3, [r7, #20]
 8014166:	e009      	b.n	801417c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8014168:	68bb      	ldr	r3, [r7, #8]
 801416a:	1c5a      	adds	r2, r3, #1
 801416c:	60ba      	str	r2, [r7, #8]
 801416e:	781b      	ldrb	r3, [r3, #0]
 8014170:	4618      	mov	r0, r3
 8014172:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014176:	697b      	ldr	r3, [r7, #20]
 8014178:	3301      	adds	r3, #1
 801417a:	617b      	str	r3, [r7, #20]
 801417c:	697a      	ldr	r2, [r7, #20]
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	429a      	cmp	r2, r3
 8014182:	dbf1      	blt.n	8014168 <_write+0x12>
	}
	return len;
 8014184:	687b      	ldr	r3, [r7, #4]
}
 8014186:	4618      	mov	r0, r3
 8014188:	3718      	adds	r7, #24
 801418a:	46bd      	mov	sp, r7
 801418c:	bd80      	pop	{r7, pc}

0801418e <_close>:

int _close(int file)
{
 801418e:	b480      	push	{r7}
 8014190:	b083      	sub	sp, #12
 8014192:	af00      	add	r7, sp, #0
 8014194:	6078      	str	r0, [r7, #4]
	return -1;
 8014196:	f04f 33ff 	mov.w	r3, #4294967295
}
 801419a:	4618      	mov	r0, r3
 801419c:	370c      	adds	r7, #12
 801419e:	46bd      	mov	sp, r7
 80141a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a4:	4770      	bx	lr

080141a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80141a6:	b480      	push	{r7}
 80141a8:	b083      	sub	sp, #12
 80141aa:	af00      	add	r7, sp, #0
 80141ac:	6078      	str	r0, [r7, #4]
 80141ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80141b0:	683b      	ldr	r3, [r7, #0]
 80141b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80141b6:	605a      	str	r2, [r3, #4]
	return 0;
 80141b8:	2300      	movs	r3, #0
}
 80141ba:	4618      	mov	r0, r3
 80141bc:	370c      	adds	r7, #12
 80141be:	46bd      	mov	sp, r7
 80141c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c4:	4770      	bx	lr

080141c6 <_isatty>:

int _isatty(int file)
{
 80141c6:	b480      	push	{r7}
 80141c8:	b083      	sub	sp, #12
 80141ca:	af00      	add	r7, sp, #0
 80141cc:	6078      	str	r0, [r7, #4]
	return 1;
 80141ce:	2301      	movs	r3, #1
}
 80141d0:	4618      	mov	r0, r3
 80141d2:	370c      	adds	r7, #12
 80141d4:	46bd      	mov	sp, r7
 80141d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141da:	4770      	bx	lr

080141dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80141dc:	b480      	push	{r7}
 80141de:	b085      	sub	sp, #20
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	60f8      	str	r0, [r7, #12]
 80141e4:	60b9      	str	r1, [r7, #8]
 80141e6:	607a      	str	r2, [r7, #4]
	return 0;
 80141e8:	2300      	movs	r3, #0
}
 80141ea:	4618      	mov	r0, r3
 80141ec:	3714      	adds	r7, #20
 80141ee:	46bd      	mov	sp, r7
 80141f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f4:	4770      	bx	lr
	...

080141f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b086      	sub	sp, #24
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8014200:	4a14      	ldr	r2, [pc, #80]	; (8014254 <_sbrk+0x5c>)
 8014202:	4b15      	ldr	r3, [pc, #84]	; (8014258 <_sbrk+0x60>)
 8014204:	1ad3      	subs	r3, r2, r3
 8014206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801420c:	4b13      	ldr	r3, [pc, #76]	; (801425c <_sbrk+0x64>)
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d102      	bne.n	801421a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8014214:	4b11      	ldr	r3, [pc, #68]	; (801425c <_sbrk+0x64>)
 8014216:	4a12      	ldr	r2, [pc, #72]	; (8014260 <_sbrk+0x68>)
 8014218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801421a:	4b10      	ldr	r3, [pc, #64]	; (801425c <_sbrk+0x64>)
 801421c:	681a      	ldr	r2, [r3, #0]
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	4413      	add	r3, r2
 8014222:	693a      	ldr	r2, [r7, #16]
 8014224:	429a      	cmp	r2, r3
 8014226:	d207      	bcs.n	8014238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8014228:	f014 fa5a 	bl	80286e0 <__errno>
 801422c:	4602      	mov	r2, r0
 801422e:	230c      	movs	r3, #12
 8014230:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8014232:	f04f 33ff 	mov.w	r3, #4294967295
 8014236:	e009      	b.n	801424c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8014238:	4b08      	ldr	r3, [pc, #32]	; (801425c <_sbrk+0x64>)
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801423e:	4b07      	ldr	r3, [pc, #28]	; (801425c <_sbrk+0x64>)
 8014240:	681a      	ldr	r2, [r3, #0]
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	4413      	add	r3, r2
 8014246:	4a05      	ldr	r2, [pc, #20]	; (801425c <_sbrk+0x64>)
 8014248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801424a:	68fb      	ldr	r3, [r7, #12]
}
 801424c:	4618      	mov	r0, r3
 801424e:	3718      	adds	r7, #24
 8014250:	46bd      	mov	sp, r7
 8014252:	bd80      	pop	{r7, pc}
 8014254:	20020000 	.word	0x20020000
 8014258:	00000400 	.word	0x00000400
 801425c:	20001538 	.word	0x20001538
 8014260:	200131e8 	.word	0x200131e8

08014264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8014264:	b480      	push	{r7}
 8014266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8014268:	4b08      	ldr	r3, [pc, #32]	; (801428c <SystemInit+0x28>)
 801426a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801426e:	4a07      	ldr	r2, [pc, #28]	; (801428c <SystemInit+0x28>)
 8014270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8014278:	4b04      	ldr	r3, [pc, #16]	; (801428c <SystemInit+0x28>)
 801427a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801427e:	609a      	str	r2, [r3, #8]
#endif
}
 8014280:	bf00      	nop
 8014282:	46bd      	mov	sp, r7
 8014284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014288:	4770      	bx	lr
 801428a:	bf00      	nop
 801428c:	e000ed00 	.word	0xe000ed00

08014290 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b08a      	sub	sp, #40	; 0x28
 8014294:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8014296:	f107 0318 	add.w	r3, r7, #24
 801429a:	2200      	movs	r2, #0
 801429c:	601a      	str	r2, [r3, #0]
 801429e:	605a      	str	r2, [r3, #4]
 80142a0:	609a      	str	r2, [r3, #8]
 80142a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80142a4:	f107 0310 	add.w	r3, r7, #16
 80142a8:	2200      	movs	r2, #0
 80142aa:	601a      	str	r2, [r3, #0]
 80142ac:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80142ae:	463b      	mov	r3, r7
 80142b0:	2200      	movs	r2, #0
 80142b2:	601a      	str	r2, [r3, #0]
 80142b4:	605a      	str	r2, [r3, #4]
 80142b6:	609a      	str	r2, [r3, #8]
 80142b8:	60da      	str	r2, [r3, #12]

  htim1.Instance = TIM1;
 80142ba:	4b34      	ldr	r3, [pc, #208]	; (801438c <MX_TIM1_Init+0xfc>)
 80142bc:	4a34      	ldr	r2, [pc, #208]	; (8014390 <MX_TIM1_Init+0x100>)
 80142be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80142c0:	4b32      	ldr	r3, [pc, #200]	; (801438c <MX_TIM1_Init+0xfc>)
 80142c2:	2263      	movs	r2, #99	; 0x63
 80142c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80142c6:	4b31      	ldr	r3, [pc, #196]	; (801438c <MX_TIM1_Init+0xfc>)
 80142c8:	2200      	movs	r2, #0
 80142ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80142cc:	4b2f      	ldr	r3, [pc, #188]	; (801438c <MX_TIM1_Init+0xfc>)
 80142ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80142d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80142d4:	4b2d      	ldr	r3, [pc, #180]	; (801438c <MX_TIM1_Init+0xfc>)
 80142d6:	2200      	movs	r2, #0
 80142d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80142da:	4b2c      	ldr	r3, [pc, #176]	; (801438c <MX_TIM1_Init+0xfc>)
 80142dc:	2200      	movs	r2, #0
 80142de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80142e0:	4b2a      	ldr	r3, [pc, #168]	; (801438c <MX_TIM1_Init+0xfc>)
 80142e2:	2200      	movs	r2, #0
 80142e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80142e6:	4829      	ldr	r0, [pc, #164]	; (801438c <MX_TIM1_Init+0xfc>)
 80142e8:	f006 fa36 	bl	801a758 <HAL_TIM_Base_Init>
 80142ec:	4603      	mov	r3, r0
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d001      	beq.n	80142f6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80142f2:	f7ff fc97 	bl	8013c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80142f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80142fa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80142fc:	f107 0318 	add.w	r3, r7, #24
 8014300:	4619      	mov	r1, r3
 8014302:	4822      	ldr	r0, [pc, #136]	; (801438c <MX_TIM1_Init+0xfc>)
 8014304:	f006 fdc0 	bl	801ae88 <HAL_TIM_ConfigClockSource>
 8014308:	4603      	mov	r3, r0
 801430a:	2b00      	cmp	r3, #0
 801430c:	d001      	beq.n	8014312 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 801430e:	f7ff fc89 	bl	8013c24 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8014312:	481e      	ldr	r0, [pc, #120]	; (801438c <MX_TIM1_Init+0xfc>)
 8014314:	f006 fb18 	bl	801a948 <HAL_TIM_IC_Init>
 8014318:	4603      	mov	r3, r0
 801431a:	2b00      	cmp	r3, #0
 801431c:	d001      	beq.n	8014322 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 801431e:	f7ff fc81 	bl	8013c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8014322:	2300      	movs	r3, #0
 8014324:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8014326:	2300      	movs	r3, #0
 8014328:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 801432a:	f107 0310 	add.w	r3, r7, #16
 801432e:	4619      	mov	r1, r3
 8014330:	4816      	ldr	r0, [pc, #88]	; (801438c <MX_TIM1_Init+0xfc>)
 8014332:	f007 faad 	bl	801b890 <HAL_TIMEx_MasterConfigSynchronization>
 8014336:	4603      	mov	r3, r0
 8014338:	2b00      	cmp	r3, #0
 801433a:	d001      	beq.n	8014340 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 801433c:	f7ff fc72 	bl	8013c24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8014340:	2300      	movs	r3, #0
 8014342:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8014344:	2301      	movs	r3, #1
 8014346:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8014348:	2300      	movs	r3, #0
 801434a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 801434c:	2300      	movs	r3, #0
 801434e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8014350:	463b      	mov	r3, r7
 8014352:	2200      	movs	r2, #0
 8014354:	4619      	mov	r1, r3
 8014356:	480d      	ldr	r0, [pc, #52]	; (801438c <MX_TIM1_Init+0xfc>)
 8014358:	f006 fc33 	bl	801abc2 <HAL_TIM_IC_ConfigChannel>
 801435c:	4603      	mov	r3, r0
 801435e:	2b00      	cmp	r3, #0
 8014360:	d001      	beq.n	8014366 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8014362:	f7ff fc5f 	bl	8013c24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8014366:	2302      	movs	r3, #2
 8014368:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 801436a:	2302      	movs	r3, #2
 801436c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 801436e:	463b      	mov	r3, r7
 8014370:	2204      	movs	r2, #4
 8014372:	4619      	mov	r1, r3
 8014374:	4805      	ldr	r0, [pc, #20]	; (801438c <MX_TIM1_Init+0xfc>)
 8014376:	f006 fc24 	bl	801abc2 <HAL_TIM_IC_ConfigChannel>
 801437a:	4603      	mov	r3, r0
 801437c:	2b00      	cmp	r3, #0
 801437e:	d001      	beq.n	8014384 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8014380:	f7ff fc50 	bl	8013c24 <Error_Handler>
  }

}
 8014384:	bf00      	nop
 8014386:	3728      	adds	r7, #40	; 0x28
 8014388:	46bd      	mov	sp, r7
 801438a:	bd80      	pop	{r7, pc}
 801438c:	20010f28 	.word	0x20010f28
 8014390:	40010000 	.word	0x40010000

08014394 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8014394:	b580      	push	{r7, lr}
 8014396:	b086      	sub	sp, #24
 8014398:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801439a:	f107 0308 	add.w	r3, r7, #8
 801439e:	2200      	movs	r2, #0
 80143a0:	601a      	str	r2, [r3, #0]
 80143a2:	605a      	str	r2, [r3, #4]
 80143a4:	609a      	str	r2, [r3, #8]
 80143a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80143a8:	463b      	mov	r3, r7
 80143aa:	2200      	movs	r2, #0
 80143ac:	601a      	str	r2, [r3, #0]
 80143ae:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80143b0:	4b1d      	ldr	r3, [pc, #116]	; (8014428 <MX_TIM2_Init+0x94>)
 80143b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80143b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80143b8:	4b1b      	ldr	r3, [pc, #108]	; (8014428 <MX_TIM2_Init+0x94>)
 80143ba:	2263      	movs	r2, #99	; 0x63
 80143bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80143be:	4b1a      	ldr	r3, [pc, #104]	; (8014428 <MX_TIM2_Init+0x94>)
 80143c0:	2200      	movs	r2, #0
 80143c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80143c4:	4b18      	ldr	r3, [pc, #96]	; (8014428 <MX_TIM2_Init+0x94>)
 80143c6:	f04f 32ff 	mov.w	r2, #4294967295
 80143ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80143cc:	4b16      	ldr	r3, [pc, #88]	; (8014428 <MX_TIM2_Init+0x94>)
 80143ce:	2200      	movs	r2, #0
 80143d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80143d2:	4b15      	ldr	r3, [pc, #84]	; (8014428 <MX_TIM2_Init+0x94>)
 80143d4:	2200      	movs	r2, #0
 80143d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80143d8:	4813      	ldr	r0, [pc, #76]	; (8014428 <MX_TIM2_Init+0x94>)
 80143da:	f006 f9bd 	bl	801a758 <HAL_TIM_Base_Init>
 80143de:	4603      	mov	r3, r0
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d001      	beq.n	80143e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80143e4:	f7ff fc1e 	bl	8013c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80143e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80143ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80143ee:	f107 0308 	add.w	r3, r7, #8
 80143f2:	4619      	mov	r1, r3
 80143f4:	480c      	ldr	r0, [pc, #48]	; (8014428 <MX_TIM2_Init+0x94>)
 80143f6:	f006 fd47 	bl	801ae88 <HAL_TIM_ConfigClockSource>
 80143fa:	4603      	mov	r3, r0
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d001      	beq.n	8014404 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8014400:	f7ff fc10 	bl	8013c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8014404:	2300      	movs	r3, #0
 8014406:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8014408:	2300      	movs	r3, #0
 801440a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801440c:	463b      	mov	r3, r7
 801440e:	4619      	mov	r1, r3
 8014410:	4805      	ldr	r0, [pc, #20]	; (8014428 <MX_TIM2_Init+0x94>)
 8014412:	f007 fa3d 	bl	801b890 <HAL_TIMEx_MasterConfigSynchronization>
 8014416:	4603      	mov	r3, r0
 8014418:	2b00      	cmp	r3, #0
 801441a:	d001      	beq.n	8014420 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 801441c:	f7ff fc02 	bl	8013c24 <Error_Handler>
  }

}
 8014420:	bf00      	nop
 8014422:	3718      	adds	r7, #24
 8014424:	46bd      	mov	sp, r7
 8014426:	bd80      	pop	{r7, pc}
 8014428:	20010f68 	.word	0x20010f68

0801442c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b08e      	sub	sp, #56	; 0x38
 8014430:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8014432:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014436:	2200      	movs	r2, #0
 8014438:	601a      	str	r2, [r3, #0]
 801443a:	605a      	str	r2, [r3, #4]
 801443c:	609a      	str	r2, [r3, #8]
 801443e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8014440:	f107 0320 	add.w	r3, r7, #32
 8014444:	2200      	movs	r2, #0
 8014446:	601a      	str	r2, [r3, #0]
 8014448:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801444a:	1d3b      	adds	r3, r7, #4
 801444c:	2200      	movs	r2, #0
 801444e:	601a      	str	r2, [r3, #0]
 8014450:	605a      	str	r2, [r3, #4]
 8014452:	609a      	str	r2, [r3, #8]
 8014454:	60da      	str	r2, [r3, #12]
 8014456:	611a      	str	r2, [r3, #16]
 8014458:	615a      	str	r2, [r3, #20]
 801445a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 801445c:	4b3d      	ldr	r3, [pc, #244]	; (8014554 <MX_TIM3_Init+0x128>)
 801445e:	4a3e      	ldr	r2, [pc, #248]	; (8014558 <MX_TIM3_Init+0x12c>)
 8014460:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5-1;
 8014462:	4b3c      	ldr	r3, [pc, #240]	; (8014554 <MX_TIM3_Init+0x128>)
 8014464:	2204      	movs	r2, #4
 8014466:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8014468:	4b3a      	ldr	r3, [pc, #232]	; (8014554 <MX_TIM3_Init+0x128>)
 801446a:	2200      	movs	r2, #0
 801446c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 801446e:	4b39      	ldr	r3, [pc, #228]	; (8014554 <MX_TIM3_Init+0x128>)
 8014470:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8014474:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8014476:	4b37      	ldr	r3, [pc, #220]	; (8014554 <MX_TIM3_Init+0x128>)
 8014478:	2200      	movs	r2, #0
 801447a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801447c:	4b35      	ldr	r3, [pc, #212]	; (8014554 <MX_TIM3_Init+0x128>)
 801447e:	2280      	movs	r2, #128	; 0x80
 8014480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8014482:	4834      	ldr	r0, [pc, #208]	; (8014554 <MX_TIM3_Init+0x128>)
 8014484:	f006 f968 	bl	801a758 <HAL_TIM_Base_Init>
 8014488:	4603      	mov	r3, r0
 801448a:	2b00      	cmp	r3, #0
 801448c:	d001      	beq.n	8014492 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 801448e:	f7ff fbc9 	bl	8013c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8014492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014496:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8014498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801449c:	4619      	mov	r1, r3
 801449e:	482d      	ldr	r0, [pc, #180]	; (8014554 <MX_TIM3_Init+0x128>)
 80144a0:	f006 fcf2 	bl	801ae88 <HAL_TIM_ConfigClockSource>
 80144a4:	4603      	mov	r3, r0
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d001      	beq.n	80144ae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80144aa:	f7ff fbbb 	bl	8013c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80144ae:	4829      	ldr	r0, [pc, #164]	; (8014554 <MX_TIM3_Init+0x128>)
 80144b0:	f006 f9a1 	bl	801a7f6 <HAL_TIM_PWM_Init>
 80144b4:	4603      	mov	r3, r0
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d001      	beq.n	80144be <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80144ba:	f7ff fbb3 	bl	8013c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80144be:	2300      	movs	r3, #0
 80144c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80144c2:	2300      	movs	r3, #0
 80144c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80144c6:	f107 0320 	add.w	r3, r7, #32
 80144ca:	4619      	mov	r1, r3
 80144cc:	4821      	ldr	r0, [pc, #132]	; (8014554 <MX_TIM3_Init+0x128>)
 80144ce:	f007 f9df 	bl	801b890 <HAL_TIMEx_MasterConfigSynchronization>
 80144d2:	4603      	mov	r3, r0
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d001      	beq.n	80144dc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80144d8:	f7ff fba4 	bl	8013c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80144dc:	2360      	movs	r3, #96	; 0x60
 80144de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80144e0:	2300      	movs	r3, #0
 80144e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80144e4:	2300      	movs	r3, #0
 80144e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80144e8:	2304      	movs	r3, #4
 80144ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80144ec:	1d3b      	adds	r3, r7, #4
 80144ee:	2200      	movs	r2, #0
 80144f0:	4619      	mov	r1, r3
 80144f2:	4818      	ldr	r0, [pc, #96]	; (8014554 <MX_TIM3_Init+0x128>)
 80144f4:	f006 fc02 	bl	801acfc <HAL_TIM_PWM_ConfigChannel>
 80144f8:	4603      	mov	r3, r0
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d001      	beq.n	8014502 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80144fe:	f7ff fb91 	bl	8013c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8014502:	1d3b      	adds	r3, r7, #4
 8014504:	2204      	movs	r2, #4
 8014506:	4619      	mov	r1, r3
 8014508:	4812      	ldr	r0, [pc, #72]	; (8014554 <MX_TIM3_Init+0x128>)
 801450a:	f006 fbf7 	bl	801acfc <HAL_TIM_PWM_ConfigChannel>
 801450e:	4603      	mov	r3, r0
 8014510:	2b00      	cmp	r3, #0
 8014512:	d001      	beq.n	8014518 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8014514:	f7ff fb86 	bl	8013c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8014518:	1d3b      	adds	r3, r7, #4
 801451a:	2208      	movs	r2, #8
 801451c:	4619      	mov	r1, r3
 801451e:	480d      	ldr	r0, [pc, #52]	; (8014554 <MX_TIM3_Init+0x128>)
 8014520:	f006 fbec 	bl	801acfc <HAL_TIM_PWM_ConfigChannel>
 8014524:	4603      	mov	r3, r0
 8014526:	2b00      	cmp	r3, #0
 8014528:	d001      	beq.n	801452e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 801452a:	f7ff fb7b 	bl	8013c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 801452e:	1d3b      	adds	r3, r7, #4
 8014530:	220c      	movs	r2, #12
 8014532:	4619      	mov	r1, r3
 8014534:	4807      	ldr	r0, [pc, #28]	; (8014554 <MX_TIM3_Init+0x128>)
 8014536:	f006 fbe1 	bl	801acfc <HAL_TIM_PWM_ConfigChannel>
 801453a:	4603      	mov	r3, r0
 801453c:	2b00      	cmp	r3, #0
 801453e:	d001      	beq.n	8014544 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8014540:	f7ff fb70 	bl	8013c24 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8014544:	4803      	ldr	r0, [pc, #12]	; (8014554 <MX_TIM3_Init+0x128>)
 8014546:	f000 f995 	bl	8014874 <HAL_TIM_MspPostInit>

}
 801454a:	bf00      	nop
 801454c:	3738      	adds	r7, #56	; 0x38
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}
 8014552:	bf00      	nop
 8014554:	20010ee8 	.word	0x20010ee8
 8014558:	40000400 	.word	0x40000400

0801455c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b08a      	sub	sp, #40	; 0x28
 8014560:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8014562:	f107 0320 	add.w	r3, r7, #32
 8014566:	2200      	movs	r2, #0
 8014568:	601a      	str	r2, [r3, #0]
 801456a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801456c:	1d3b      	adds	r3, r7, #4
 801456e:	2200      	movs	r2, #0
 8014570:	601a      	str	r2, [r3, #0]
 8014572:	605a      	str	r2, [r3, #4]
 8014574:	609a      	str	r2, [r3, #8]
 8014576:	60da      	str	r2, [r3, #12]
 8014578:	611a      	str	r2, [r3, #16]
 801457a:	615a      	str	r2, [r3, #20]
 801457c:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 801457e:	4b21      	ldr	r3, [pc, #132]	; (8014604 <MX_TIM4_Init+0xa8>)
 8014580:	4a21      	ldr	r2, [pc, #132]	; (8014608 <MX_TIM4_Init+0xac>)
 8014582:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8014584:	4b1f      	ldr	r3, [pc, #124]	; (8014604 <MX_TIM4_Init+0xa8>)
 8014586:	2200      	movs	r2, #0
 8014588:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 801458a:	4b1e      	ldr	r3, [pc, #120]	; (8014604 <MX_TIM4_Init+0xa8>)
 801458c:	2200      	movs	r2, #0
 801458e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8014590:	4b1c      	ldr	r3, [pc, #112]	; (8014604 <MX_TIM4_Init+0xa8>)
 8014592:	220a      	movs	r2, #10
 8014594:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8014596:	4b1b      	ldr	r3, [pc, #108]	; (8014604 <MX_TIM4_Init+0xa8>)
 8014598:	2200      	movs	r2, #0
 801459a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801459c:	4b19      	ldr	r3, [pc, #100]	; (8014604 <MX_TIM4_Init+0xa8>)
 801459e:	2200      	movs	r2, #0
 80145a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80145a2:	4818      	ldr	r0, [pc, #96]	; (8014604 <MX_TIM4_Init+0xa8>)
 80145a4:	f006 f927 	bl	801a7f6 <HAL_TIM_PWM_Init>
 80145a8:	4603      	mov	r3, r0
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d001      	beq.n	80145b2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80145ae:	f7ff fb39 	bl	8013c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80145b2:	2300      	movs	r3, #0
 80145b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80145b6:	2300      	movs	r3, #0
 80145b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80145ba:	f107 0320 	add.w	r3, r7, #32
 80145be:	4619      	mov	r1, r3
 80145c0:	4810      	ldr	r0, [pc, #64]	; (8014604 <MX_TIM4_Init+0xa8>)
 80145c2:	f007 f965 	bl	801b890 <HAL_TIMEx_MasterConfigSynchronization>
 80145c6:	4603      	mov	r3, r0
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d001      	beq.n	80145d0 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80145cc:	f7ff fb2a 	bl	8013c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80145d0:	2360      	movs	r3, #96	; 0x60
 80145d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5;
 80145d4:	2305      	movs	r3, #5
 80145d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80145d8:	2300      	movs	r3, #0
 80145da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80145dc:	2300      	movs	r3, #0
 80145de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80145e0:	1d3b      	adds	r3, r7, #4
 80145e2:	2200      	movs	r2, #0
 80145e4:	4619      	mov	r1, r3
 80145e6:	4807      	ldr	r0, [pc, #28]	; (8014604 <MX_TIM4_Init+0xa8>)
 80145e8:	f006 fb88 	bl	801acfc <HAL_TIM_PWM_ConfigChannel>
 80145ec:	4603      	mov	r3, r0
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d001      	beq.n	80145f6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80145f2:	f7ff fb17 	bl	8013c24 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80145f6:	4803      	ldr	r0, [pc, #12]	; (8014604 <MX_TIM4_Init+0xa8>)
 80145f8:	f000 f93c 	bl	8014874 <HAL_TIM_MspPostInit>

}
 80145fc:	bf00      	nop
 80145fe:	3728      	adds	r7, #40	; 0x28
 8014600:	46bd      	mov	sp, r7
 8014602:	bd80      	pop	{r7, pc}
 8014604:	20010e68 	.word	0x20010e68
 8014608:	40000800 	.word	0x40000800

0801460c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b08e      	sub	sp, #56	; 0x38
 8014610:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8014612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014616:	2200      	movs	r2, #0
 8014618:	601a      	str	r2, [r3, #0]
 801461a:	605a      	str	r2, [r3, #4]
 801461c:	609a      	str	r2, [r3, #8]
 801461e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8014620:	f107 0320 	add.w	r3, r7, #32
 8014624:	2200      	movs	r2, #0
 8014626:	601a      	str	r2, [r3, #0]
 8014628:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801462a:	1d3b      	adds	r3, r7, #4
 801462c:	2200      	movs	r2, #0
 801462e:	601a      	str	r2, [r3, #0]
 8014630:	605a      	str	r2, [r3, #4]
 8014632:	609a      	str	r2, [r3, #8]
 8014634:	60da      	str	r2, [r3, #12]
 8014636:	611a      	str	r2, [r3, #16]
 8014638:	615a      	str	r2, [r3, #20]
 801463a:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 801463c:	4b32      	ldr	r3, [pc, #200]	; (8014708 <MX_TIM5_Init+0xfc>)
 801463e:	4a33      	ldr	r2, [pc, #204]	; (801470c <MX_TIM5_Init+0x100>)
 8014640:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 5-1;
 8014642:	4b31      	ldr	r3, [pc, #196]	; (8014708 <MX_TIM5_Init+0xfc>)
 8014644:	2204      	movs	r2, #4
 8014646:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8014648:	4b2f      	ldr	r3, [pc, #188]	; (8014708 <MX_TIM5_Init+0xfc>)
 801464a:	2200      	movs	r2, #0
 801464c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 40000-1;
 801464e:	4b2e      	ldr	r3, [pc, #184]	; (8014708 <MX_TIM5_Init+0xfc>)
 8014650:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8014654:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8014656:	4b2c      	ldr	r3, [pc, #176]	; (8014708 <MX_TIM5_Init+0xfc>)
 8014658:	2200      	movs	r2, #0
 801465a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801465c:	4b2a      	ldr	r3, [pc, #168]	; (8014708 <MX_TIM5_Init+0xfc>)
 801465e:	2280      	movs	r2, #128	; 0x80
 8014660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8014662:	4829      	ldr	r0, [pc, #164]	; (8014708 <MX_TIM5_Init+0xfc>)
 8014664:	f006 f878 	bl	801a758 <HAL_TIM_Base_Init>
 8014668:	4603      	mov	r3, r0
 801466a:	2b00      	cmp	r3, #0
 801466c:	d001      	beq.n	8014672 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 801466e:	f7ff fad9 	bl	8013c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8014672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014676:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8014678:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801467c:	4619      	mov	r1, r3
 801467e:	4822      	ldr	r0, [pc, #136]	; (8014708 <MX_TIM5_Init+0xfc>)
 8014680:	f006 fc02 	bl	801ae88 <HAL_TIM_ConfigClockSource>
 8014684:	4603      	mov	r3, r0
 8014686:	2b00      	cmp	r3, #0
 8014688:	d001      	beq.n	801468e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 801468a:	f7ff facb 	bl	8013c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 801468e:	481e      	ldr	r0, [pc, #120]	; (8014708 <MX_TIM5_Init+0xfc>)
 8014690:	f006 f8b1 	bl	801a7f6 <HAL_TIM_PWM_Init>
 8014694:	4603      	mov	r3, r0
 8014696:	2b00      	cmp	r3, #0
 8014698:	d001      	beq.n	801469e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 801469a:	f7ff fac3 	bl	8013c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801469e:	2300      	movs	r3, #0
 80146a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80146a2:	2300      	movs	r3, #0
 80146a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80146a6:	f107 0320 	add.w	r3, r7, #32
 80146aa:	4619      	mov	r1, r3
 80146ac:	4816      	ldr	r0, [pc, #88]	; (8014708 <MX_TIM5_Init+0xfc>)
 80146ae:	f007 f8ef 	bl	801b890 <HAL_TIMEx_MasterConfigSynchronization>
 80146b2:	4603      	mov	r3, r0
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d001      	beq.n	80146bc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80146b8:	f7ff fab4 	bl	8013c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80146bc:	2360      	movs	r3, #96	; 0x60
 80146be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80146c0:	2300      	movs	r3, #0
 80146c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80146c4:	2300      	movs	r3, #0
 80146c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80146c8:	2304      	movs	r3, #4
 80146ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80146cc:	1d3b      	adds	r3, r7, #4
 80146ce:	2200      	movs	r2, #0
 80146d0:	4619      	mov	r1, r3
 80146d2:	480d      	ldr	r0, [pc, #52]	; (8014708 <MX_TIM5_Init+0xfc>)
 80146d4:	f006 fb12 	bl	801acfc <HAL_TIM_PWM_ConfigChannel>
 80146d8:	4603      	mov	r3, r0
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d001      	beq.n	80146e2 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80146de:	f7ff faa1 	bl	8013c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80146e2:	1d3b      	adds	r3, r7, #4
 80146e4:	2204      	movs	r2, #4
 80146e6:	4619      	mov	r1, r3
 80146e8:	4807      	ldr	r0, [pc, #28]	; (8014708 <MX_TIM5_Init+0xfc>)
 80146ea:	f006 fb07 	bl	801acfc <HAL_TIM_PWM_ConfigChannel>
 80146ee:	4603      	mov	r3, r0
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d001      	beq.n	80146f8 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 80146f4:	f7ff fa96 	bl	8013c24 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 80146f8:	4803      	ldr	r0, [pc, #12]	; (8014708 <MX_TIM5_Init+0xfc>)
 80146fa:	f000 f8bb 	bl	8014874 <HAL_TIM_MspPostInit>

}
 80146fe:	bf00      	nop
 8014700:	3738      	adds	r7, #56	; 0x38
 8014702:	46bd      	mov	sp, r7
 8014704:	bd80      	pop	{r7, pc}
 8014706:	bf00      	nop
 8014708:	20010ea8 	.word	0x20010ea8
 801470c:	40000c00 	.word	0x40000c00

08014710 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b08c      	sub	sp, #48	; 0x30
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014718:	f107 031c 	add.w	r3, r7, #28
 801471c:	2200      	movs	r2, #0
 801471e:	601a      	str	r2, [r3, #0]
 8014720:	605a      	str	r2, [r3, #4]
 8014722:	609a      	str	r2, [r3, #8]
 8014724:	60da      	str	r2, [r3, #12]
 8014726:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	4a3b      	ldr	r2, [pc, #236]	; (801481c <HAL_TIM_Base_MspInit+0x10c>)
 801472e:	4293      	cmp	r3, r2
 8014730:	d135      	bne.n	801479e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8014732:	2300      	movs	r3, #0
 8014734:	61bb      	str	r3, [r7, #24]
 8014736:	4b3a      	ldr	r3, [pc, #232]	; (8014820 <HAL_TIM_Base_MspInit+0x110>)
 8014738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801473a:	4a39      	ldr	r2, [pc, #228]	; (8014820 <HAL_TIM_Base_MspInit+0x110>)
 801473c:	f043 0301 	orr.w	r3, r3, #1
 8014740:	6453      	str	r3, [r2, #68]	; 0x44
 8014742:	4b37      	ldr	r3, [pc, #220]	; (8014820 <HAL_TIM_Base_MspInit+0x110>)
 8014744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014746:	f003 0301 	and.w	r3, r3, #1
 801474a:	61bb      	str	r3, [r7, #24]
 801474c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801474e:	2300      	movs	r3, #0
 8014750:	617b      	str	r3, [r7, #20]
 8014752:	4b33      	ldr	r3, [pc, #204]	; (8014820 <HAL_TIM_Base_MspInit+0x110>)
 8014754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014756:	4a32      	ldr	r2, [pc, #200]	; (8014820 <HAL_TIM_Base_MspInit+0x110>)
 8014758:	f043 0301 	orr.w	r3, r3, #1
 801475c:	6313      	str	r3, [r2, #48]	; 0x30
 801475e:	4b30      	ldr	r3, [pc, #192]	; (8014820 <HAL_TIM_Base_MspInit+0x110>)
 8014760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014762:	f003 0301 	and.w	r3, r3, #1
 8014766:	617b      	str	r3, [r7, #20]
 8014768:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 801476a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801476e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014770:	2302      	movs	r3, #2
 8014772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014774:	2300      	movs	r3, #0
 8014776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014778:	2300      	movs	r3, #0
 801477a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 801477c:	2301      	movs	r3, #1
 801477e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014780:	f107 031c 	add.w	r3, r7, #28
 8014784:	4619      	mov	r1, r3
 8014786:	4827      	ldr	r0, [pc, #156]	; (8014824 <HAL_TIM_Base_MspInit+0x114>)
 8014788:	f000 ffce 	bl	8015728 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 801478c:	2200      	movs	r2, #0
 801478e:	2100      	movs	r1, #0
 8014790:	2019      	movs	r0, #25
 8014792:	f000 fbf5 	bl	8014f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8014796:	2019      	movs	r0, #25
 8014798:	f000 fc0e 	bl	8014fb8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 801479c:	e03a      	b.n	8014814 <HAL_TIM_Base_MspInit+0x104>
  else if(tim_baseHandle->Instance==TIM2)
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80147a6:	d10e      	bne.n	80147c6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80147a8:	2300      	movs	r3, #0
 80147aa:	613b      	str	r3, [r7, #16]
 80147ac:	4b1c      	ldr	r3, [pc, #112]	; (8014820 <HAL_TIM_Base_MspInit+0x110>)
 80147ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147b0:	4a1b      	ldr	r2, [pc, #108]	; (8014820 <HAL_TIM_Base_MspInit+0x110>)
 80147b2:	f043 0301 	orr.w	r3, r3, #1
 80147b6:	6413      	str	r3, [r2, #64]	; 0x40
 80147b8:	4b19      	ldr	r3, [pc, #100]	; (8014820 <HAL_TIM_Base_MspInit+0x110>)
 80147ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147bc:	f003 0301 	and.w	r3, r3, #1
 80147c0:	613b      	str	r3, [r7, #16]
 80147c2:	693b      	ldr	r3, [r7, #16]
}
 80147c4:	e026      	b.n	8014814 <HAL_TIM_Base_MspInit+0x104>
  else if(tim_baseHandle->Instance==TIM3)
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	4a17      	ldr	r2, [pc, #92]	; (8014828 <HAL_TIM_Base_MspInit+0x118>)
 80147cc:	4293      	cmp	r3, r2
 80147ce:	d10e      	bne.n	80147ee <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80147d0:	2300      	movs	r3, #0
 80147d2:	60fb      	str	r3, [r7, #12]
 80147d4:	4b12      	ldr	r3, [pc, #72]	; (8014820 <HAL_TIM_Base_MspInit+0x110>)
 80147d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147d8:	4a11      	ldr	r2, [pc, #68]	; (8014820 <HAL_TIM_Base_MspInit+0x110>)
 80147da:	f043 0302 	orr.w	r3, r3, #2
 80147de:	6413      	str	r3, [r2, #64]	; 0x40
 80147e0:	4b0f      	ldr	r3, [pc, #60]	; (8014820 <HAL_TIM_Base_MspInit+0x110>)
 80147e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147e4:	f003 0302 	and.w	r3, r3, #2
 80147e8:	60fb      	str	r3, [r7, #12]
 80147ea:	68fb      	ldr	r3, [r7, #12]
}
 80147ec:	e012      	b.n	8014814 <HAL_TIM_Base_MspInit+0x104>
  else if(tim_baseHandle->Instance==TIM5)
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	4a0e      	ldr	r2, [pc, #56]	; (801482c <HAL_TIM_Base_MspInit+0x11c>)
 80147f4:	4293      	cmp	r3, r2
 80147f6:	d10d      	bne.n	8014814 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80147f8:	2300      	movs	r3, #0
 80147fa:	60bb      	str	r3, [r7, #8]
 80147fc:	4b08      	ldr	r3, [pc, #32]	; (8014820 <HAL_TIM_Base_MspInit+0x110>)
 80147fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014800:	4a07      	ldr	r2, [pc, #28]	; (8014820 <HAL_TIM_Base_MspInit+0x110>)
 8014802:	f043 0308 	orr.w	r3, r3, #8
 8014806:	6413      	str	r3, [r2, #64]	; 0x40
 8014808:	4b05      	ldr	r3, [pc, #20]	; (8014820 <HAL_TIM_Base_MspInit+0x110>)
 801480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801480c:	f003 0308 	and.w	r3, r3, #8
 8014810:	60bb      	str	r3, [r7, #8]
 8014812:	68bb      	ldr	r3, [r7, #8]
}
 8014814:	bf00      	nop
 8014816:	3730      	adds	r7, #48	; 0x30
 8014818:	46bd      	mov	sp, r7
 801481a:	bd80      	pop	{r7, pc}
 801481c:	40010000 	.word	0x40010000
 8014820:	40023800 	.word	0x40023800
 8014824:	40020000 	.word	0x40020000
 8014828:	40000400 	.word	0x40000400
 801482c:	40000c00 	.word	0x40000c00

08014830 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8014830:	b480      	push	{r7}
 8014832:	b085      	sub	sp, #20
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	4a0b      	ldr	r2, [pc, #44]	; (801486c <HAL_TIM_PWM_MspInit+0x3c>)
 801483e:	4293      	cmp	r3, r2
 8014840:	d10d      	bne.n	801485e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8014842:	2300      	movs	r3, #0
 8014844:	60fb      	str	r3, [r7, #12]
 8014846:	4b0a      	ldr	r3, [pc, #40]	; (8014870 <HAL_TIM_PWM_MspInit+0x40>)
 8014848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801484a:	4a09      	ldr	r2, [pc, #36]	; (8014870 <HAL_TIM_PWM_MspInit+0x40>)
 801484c:	f043 0304 	orr.w	r3, r3, #4
 8014850:	6413      	str	r3, [r2, #64]	; 0x40
 8014852:	4b07      	ldr	r3, [pc, #28]	; (8014870 <HAL_TIM_PWM_MspInit+0x40>)
 8014854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014856:	f003 0304 	and.w	r3, r3, #4
 801485a:	60fb      	str	r3, [r7, #12]
 801485c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 801485e:	bf00      	nop
 8014860:	3714      	adds	r7, #20
 8014862:	46bd      	mov	sp, r7
 8014864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014868:	4770      	bx	lr
 801486a:	bf00      	nop
 801486c:	40000800 	.word	0x40000800
 8014870:	40023800 	.word	0x40023800

08014874 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8014874:	b580      	push	{r7, lr}
 8014876:	b08c      	sub	sp, #48	; 0x30
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801487c:	f107 031c 	add.w	r3, r7, #28
 8014880:	2200      	movs	r2, #0
 8014882:	601a      	str	r2, [r3, #0]
 8014884:	605a      	str	r2, [r3, #4]
 8014886:	609a      	str	r2, [r3, #8]
 8014888:	60da      	str	r2, [r3, #12]
 801488a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	4a45      	ldr	r2, [pc, #276]	; (80149a8 <HAL_TIM_MspPostInit+0x134>)
 8014892:	4293      	cmp	r3, r2
 8014894:	d13c      	bne.n	8014910 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014896:	2300      	movs	r3, #0
 8014898:	61bb      	str	r3, [r7, #24]
 801489a:	4b44      	ldr	r3, [pc, #272]	; (80149ac <HAL_TIM_MspPostInit+0x138>)
 801489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801489e:	4a43      	ldr	r2, [pc, #268]	; (80149ac <HAL_TIM_MspPostInit+0x138>)
 80148a0:	f043 0301 	orr.w	r3, r3, #1
 80148a4:	6313      	str	r3, [r2, #48]	; 0x30
 80148a6:	4b41      	ldr	r3, [pc, #260]	; (80149ac <HAL_TIM_MspPostInit+0x138>)
 80148a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148aa:	f003 0301 	and.w	r3, r3, #1
 80148ae:	61bb      	str	r3, [r7, #24]
 80148b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80148b2:	2300      	movs	r3, #0
 80148b4:	617b      	str	r3, [r7, #20]
 80148b6:	4b3d      	ldr	r3, [pc, #244]	; (80149ac <HAL_TIM_MspPostInit+0x138>)
 80148b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148ba:	4a3c      	ldr	r2, [pc, #240]	; (80149ac <HAL_TIM_MspPostInit+0x138>)
 80148bc:	f043 0302 	orr.w	r3, r3, #2
 80148c0:	6313      	str	r3, [r2, #48]	; 0x30
 80148c2:	4b3a      	ldr	r3, [pc, #232]	; (80149ac <HAL_TIM_MspPostInit+0x138>)
 80148c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148c6:	f003 0302 	and.w	r3, r3, #2
 80148ca:	617b      	str	r3, [r7, #20]
 80148cc:	697b      	ldr	r3, [r7, #20]
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80148ce:	2380      	movs	r3, #128	; 0x80
 80148d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80148d2:	2302      	movs	r3, #2
 80148d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80148d6:	2300      	movs	r3, #0
 80148d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80148da:	2300      	movs	r3, #0
 80148dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80148de:	2302      	movs	r3, #2
 80148e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80148e2:	f107 031c 	add.w	r3, r7, #28
 80148e6:	4619      	mov	r1, r3
 80148e8:	4831      	ldr	r0, [pc, #196]	; (80149b0 <HAL_TIM_MspPostInit+0x13c>)
 80148ea:	f000 ff1d 	bl	8015728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80148ee:	2313      	movs	r3, #19
 80148f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80148f2:	2302      	movs	r3, #2
 80148f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80148f6:	2300      	movs	r3, #0
 80148f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80148fa:	2300      	movs	r3, #0
 80148fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80148fe:	2302      	movs	r3, #2
 8014900:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014902:	f107 031c 	add.w	r3, r7, #28
 8014906:	4619      	mov	r1, r3
 8014908:	482a      	ldr	r0, [pc, #168]	; (80149b4 <HAL_TIM_MspPostInit+0x140>)
 801490a:	f000 ff0d 	bl	8015728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 801490e:	e046      	b.n	801499e <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM4)
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	4a28      	ldr	r2, [pc, #160]	; (80149b8 <HAL_TIM_MspPostInit+0x144>)
 8014916:	4293      	cmp	r3, r2
 8014918:	d11e      	bne.n	8014958 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801491a:	2300      	movs	r3, #0
 801491c:	613b      	str	r3, [r7, #16]
 801491e:	4b23      	ldr	r3, [pc, #140]	; (80149ac <HAL_TIM_MspPostInit+0x138>)
 8014920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014922:	4a22      	ldr	r2, [pc, #136]	; (80149ac <HAL_TIM_MspPostInit+0x138>)
 8014924:	f043 0302 	orr.w	r3, r3, #2
 8014928:	6313      	str	r3, [r2, #48]	; 0x30
 801492a:	4b20      	ldr	r3, [pc, #128]	; (80149ac <HAL_TIM_MspPostInit+0x138>)
 801492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801492e:	f003 0302 	and.w	r3, r3, #2
 8014932:	613b      	str	r3, [r7, #16]
 8014934:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8014936:	2340      	movs	r3, #64	; 0x40
 8014938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801493a:	2302      	movs	r3, #2
 801493c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801493e:	2300      	movs	r3, #0
 8014940:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014942:	2300      	movs	r3, #0
 8014944:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8014946:	2302      	movs	r3, #2
 8014948:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801494a:	f107 031c 	add.w	r3, r7, #28
 801494e:	4619      	mov	r1, r3
 8014950:	4818      	ldr	r0, [pc, #96]	; (80149b4 <HAL_TIM_MspPostInit+0x140>)
 8014952:	f000 fee9 	bl	8015728 <HAL_GPIO_Init>
}
 8014956:	e022      	b.n	801499e <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM5)
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	4a17      	ldr	r2, [pc, #92]	; (80149bc <HAL_TIM_MspPostInit+0x148>)
 801495e:	4293      	cmp	r3, r2
 8014960:	d11d      	bne.n	801499e <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014962:	2300      	movs	r3, #0
 8014964:	60fb      	str	r3, [r7, #12]
 8014966:	4b11      	ldr	r3, [pc, #68]	; (80149ac <HAL_TIM_MspPostInit+0x138>)
 8014968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801496a:	4a10      	ldr	r2, [pc, #64]	; (80149ac <HAL_TIM_MspPostInit+0x138>)
 801496c:	f043 0301 	orr.w	r3, r3, #1
 8014970:	6313      	str	r3, [r2, #48]	; 0x30
 8014972:	4b0e      	ldr	r3, [pc, #56]	; (80149ac <HAL_TIM_MspPostInit+0x138>)
 8014974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014976:	f003 0301 	and.w	r3, r3, #1
 801497a:	60fb      	str	r3, [r7, #12]
 801497c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801497e:	2303      	movs	r3, #3
 8014980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014982:	2302      	movs	r3, #2
 8014984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014986:	2300      	movs	r3, #0
 8014988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801498a:	2300      	movs	r3, #0
 801498c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 801498e:	2302      	movs	r3, #2
 8014990:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014992:	f107 031c 	add.w	r3, r7, #28
 8014996:	4619      	mov	r1, r3
 8014998:	4805      	ldr	r0, [pc, #20]	; (80149b0 <HAL_TIM_MspPostInit+0x13c>)
 801499a:	f000 fec5 	bl	8015728 <HAL_GPIO_Init>
}
 801499e:	bf00      	nop
 80149a0:	3730      	adds	r7, #48	; 0x30
 80149a2:	46bd      	mov	sp, r7
 80149a4:	bd80      	pop	{r7, pc}
 80149a6:	bf00      	nop
 80149a8:	40000400 	.word	0x40000400
 80149ac:	40023800 	.word	0x40023800
 80149b0:	40020000 	.word	0x40020000
 80149b4:	40020400 	.word	0x40020400
 80149b8:	40000800 	.word	0x40000800
 80149bc:	40000c00 	.word	0x40000c00

080149c0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80149c4:	4b12      	ldr	r3, [pc, #72]	; (8014a10 <MX_USART1_UART_Init+0x50>)
 80149c6:	4a13      	ldr	r2, [pc, #76]	; (8014a14 <MX_USART1_UART_Init+0x54>)
 80149c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 80149ca:	4b11      	ldr	r3, [pc, #68]	; (8014a10 <MX_USART1_UART_Init+0x50>)
 80149cc:	4a12      	ldr	r2, [pc, #72]	; (8014a18 <MX_USART1_UART_Init+0x58>)
 80149ce:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80149d0:	4b0f      	ldr	r3, [pc, #60]	; (8014a10 <MX_USART1_UART_Init+0x50>)
 80149d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80149d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80149d8:	4b0d      	ldr	r3, [pc, #52]	; (8014a10 <MX_USART1_UART_Init+0x50>)
 80149da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80149de:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80149e0:	4b0b      	ldr	r3, [pc, #44]	; (8014a10 <MX_USART1_UART_Init+0x50>)
 80149e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80149e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80149e8:	4b09      	ldr	r3, [pc, #36]	; (8014a10 <MX_USART1_UART_Init+0x50>)
 80149ea:	220c      	movs	r2, #12
 80149ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80149ee:	4b08      	ldr	r3, [pc, #32]	; (8014a10 <MX_USART1_UART_Init+0x50>)
 80149f0:	2200      	movs	r2, #0
 80149f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80149f4:	4b06      	ldr	r3, [pc, #24]	; (8014a10 <MX_USART1_UART_Init+0x50>)
 80149f6:	2200      	movs	r2, #0
 80149f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80149fa:	4805      	ldr	r0, [pc, #20]	; (8014a10 <MX_USART1_UART_Init+0x50>)
 80149fc:	f006 ffca 	bl	801b994 <HAL_UART_Init>
 8014a00:	4603      	mov	r3, r0
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d001      	beq.n	8014a0a <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8014a06:	f7ff f90d 	bl	8013c24 <Error_Handler>
  }

}
 8014a0a:	bf00      	nop
 8014a0c:	bd80      	pop	{r7, pc}
 8014a0e:	bf00      	nop
 8014a10:	20011068 	.word	0x20011068
 8014a14:	40011000 	.word	0x40011000
 8014a18:	000186a0 	.word	0x000186a0

08014a1c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8014a20:	4b11      	ldr	r3, [pc, #68]	; (8014a68 <MX_USART2_UART_Init+0x4c>)
 8014a22:	4a12      	ldr	r2, [pc, #72]	; (8014a6c <MX_USART2_UART_Init+0x50>)
 8014a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8014a26:	4b10      	ldr	r3, [pc, #64]	; (8014a68 <MX_USART2_UART_Init+0x4c>)
 8014a28:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8014a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8014a2e:	4b0e      	ldr	r3, [pc, #56]	; (8014a68 <MX_USART2_UART_Init+0x4c>)
 8014a30:	2200      	movs	r2, #0
 8014a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8014a34:	4b0c      	ldr	r3, [pc, #48]	; (8014a68 <MX_USART2_UART_Init+0x4c>)
 8014a36:	2200      	movs	r2, #0
 8014a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8014a3a:	4b0b      	ldr	r3, [pc, #44]	; (8014a68 <MX_USART2_UART_Init+0x4c>)
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8014a40:	4b09      	ldr	r3, [pc, #36]	; (8014a68 <MX_USART2_UART_Init+0x4c>)
 8014a42:	220c      	movs	r2, #12
 8014a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014a46:	4b08      	ldr	r3, [pc, #32]	; (8014a68 <MX_USART2_UART_Init+0x4c>)
 8014a48:	2200      	movs	r2, #0
 8014a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8014a4c:	4b06      	ldr	r3, [pc, #24]	; (8014a68 <MX_USART2_UART_Init+0x4c>)
 8014a4e:	2200      	movs	r2, #0
 8014a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8014a52:	4805      	ldr	r0, [pc, #20]	; (8014a68 <MX_USART2_UART_Init+0x4c>)
 8014a54:	f006 ff9e 	bl	801b994 <HAL_UART_Init>
 8014a58:	4603      	mov	r3, r0
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d001      	beq.n	8014a62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8014a5e:	f7ff f8e1 	bl	8013c24 <Error_Handler>
  }

}
 8014a62:	bf00      	nop
 8014a64:	bd80      	pop	{r7, pc}
 8014a66:	bf00      	nop
 8014a68:	200110e8 	.word	0x200110e8
 8014a6c:	40004400 	.word	0x40004400

08014a70 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8014a74:	4b11      	ldr	r3, [pc, #68]	; (8014abc <MX_USART6_UART_Init+0x4c>)
 8014a76:	4a12      	ldr	r2, [pc, #72]	; (8014ac0 <MX_USART6_UART_Init+0x50>)
 8014a78:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8014a7a:	4b10      	ldr	r3, [pc, #64]	; (8014abc <MX_USART6_UART_Init+0x4c>)
 8014a7c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8014a80:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8014a82:	4b0e      	ldr	r3, [pc, #56]	; (8014abc <MX_USART6_UART_Init+0x4c>)
 8014a84:	2200      	movs	r2, #0
 8014a86:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8014a88:	4b0c      	ldr	r3, [pc, #48]	; (8014abc <MX_USART6_UART_Init+0x4c>)
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8014a8e:	4b0b      	ldr	r3, [pc, #44]	; (8014abc <MX_USART6_UART_Init+0x4c>)
 8014a90:	2200      	movs	r2, #0
 8014a92:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8014a94:	4b09      	ldr	r3, [pc, #36]	; (8014abc <MX_USART6_UART_Init+0x4c>)
 8014a96:	220c      	movs	r2, #12
 8014a98:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014a9a:	4b08      	ldr	r3, [pc, #32]	; (8014abc <MX_USART6_UART_Init+0x4c>)
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8014aa0:	4b06      	ldr	r3, [pc, #24]	; (8014abc <MX_USART6_UART_Init+0x4c>)
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8014aa6:	4805      	ldr	r0, [pc, #20]	; (8014abc <MX_USART6_UART_Init+0x4c>)
 8014aa8:	f006 ff74 	bl	801b994 <HAL_UART_Init>
 8014aac:	4603      	mov	r3, r0
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d001      	beq.n	8014ab6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8014ab2:	f7ff f8b7 	bl	8013c24 <Error_Handler>
  }

}
 8014ab6:	bf00      	nop
 8014ab8:	bd80      	pop	{r7, pc}
 8014aba:	bf00      	nop
 8014abc:	200110a8 	.word	0x200110a8
 8014ac0:	40011400 	.word	0x40011400

08014ac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b08e      	sub	sp, #56	; 0x38
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	601a      	str	r2, [r3, #0]
 8014ad4:	605a      	str	r2, [r3, #4]
 8014ad6:	609a      	str	r2, [r3, #8]
 8014ad8:	60da      	str	r2, [r3, #12]
 8014ada:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	4a7a      	ldr	r2, [pc, #488]	; (8014ccc <HAL_UART_MspInit+0x208>)
 8014ae2:	4293      	cmp	r3, r2
 8014ae4:	d15c      	bne.n	8014ba0 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	623b      	str	r3, [r7, #32]
 8014aea:	4b79      	ldr	r3, [pc, #484]	; (8014cd0 <HAL_UART_MspInit+0x20c>)
 8014aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014aee:	4a78      	ldr	r2, [pc, #480]	; (8014cd0 <HAL_UART_MspInit+0x20c>)
 8014af0:	f043 0310 	orr.w	r3, r3, #16
 8014af4:	6453      	str	r3, [r2, #68]	; 0x44
 8014af6:	4b76      	ldr	r3, [pc, #472]	; (8014cd0 <HAL_UART_MspInit+0x20c>)
 8014af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014afa:	f003 0310 	and.w	r3, r3, #16
 8014afe:	623b      	str	r3, [r7, #32]
 8014b00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014b02:	2300      	movs	r3, #0
 8014b04:	61fb      	str	r3, [r7, #28]
 8014b06:	4b72      	ldr	r3, [pc, #456]	; (8014cd0 <HAL_UART_MspInit+0x20c>)
 8014b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b0a:	4a71      	ldr	r2, [pc, #452]	; (8014cd0 <HAL_UART_MspInit+0x20c>)
 8014b0c:	f043 0301 	orr.w	r3, r3, #1
 8014b10:	6313      	str	r3, [r2, #48]	; 0x30
 8014b12:	4b6f      	ldr	r3, [pc, #444]	; (8014cd0 <HAL_UART_MspInit+0x20c>)
 8014b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b16:	f003 0301 	and.w	r3, r3, #1
 8014b1a:	61fb      	str	r3, [r7, #28]
 8014b1c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8014b1e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8014b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014b24:	2302      	movs	r3, #2
 8014b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014b28:	2301      	movs	r3, #1
 8014b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014b2c:	2303      	movs	r3, #3
 8014b2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8014b30:	2307      	movs	r3, #7
 8014b32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014b38:	4619      	mov	r1, r3
 8014b3a:	4866      	ldr	r0, [pc, #408]	; (8014cd4 <HAL_UART_MspInit+0x210>)
 8014b3c:	f000 fdf4 	bl	8015728 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8014b40:	4b65      	ldr	r3, [pc, #404]	; (8014cd8 <HAL_UART_MspInit+0x214>)
 8014b42:	4a66      	ldr	r2, [pc, #408]	; (8014cdc <HAL_UART_MspInit+0x218>)
 8014b44:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8014b46:	4b64      	ldr	r3, [pc, #400]	; (8014cd8 <HAL_UART_MspInit+0x214>)
 8014b48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014b4c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014b4e:	4b62      	ldr	r3, [pc, #392]	; (8014cd8 <HAL_UART_MspInit+0x214>)
 8014b50:	2200      	movs	r2, #0
 8014b52:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8014b54:	4b60      	ldr	r3, [pc, #384]	; (8014cd8 <HAL_UART_MspInit+0x214>)
 8014b56:	2200      	movs	r2, #0
 8014b58:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8014b5a:	4b5f      	ldr	r3, [pc, #380]	; (8014cd8 <HAL_UART_MspInit+0x214>)
 8014b5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014b60:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8014b62:	4b5d      	ldr	r3, [pc, #372]	; (8014cd8 <HAL_UART_MspInit+0x214>)
 8014b64:	2200      	movs	r2, #0
 8014b66:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8014b68:	4b5b      	ldr	r3, [pc, #364]	; (8014cd8 <HAL_UART_MspInit+0x214>)
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8014b6e:	4b5a      	ldr	r3, [pc, #360]	; (8014cd8 <HAL_UART_MspInit+0x214>)
 8014b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014b74:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8014b76:	4b58      	ldr	r3, [pc, #352]	; (8014cd8 <HAL_UART_MspInit+0x214>)
 8014b78:	2200      	movs	r2, #0
 8014b7a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014b7c:	4b56      	ldr	r3, [pc, #344]	; (8014cd8 <HAL_UART_MspInit+0x214>)
 8014b7e:	2200      	movs	r2, #0
 8014b80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8014b82:	4855      	ldr	r0, [pc, #340]	; (8014cd8 <HAL_UART_MspInit+0x214>)
 8014b84:	f000 fa26 	bl	8014fd4 <HAL_DMA_Init>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d001      	beq.n	8014b92 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8014b8e:	f7ff f849 	bl	8013c24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	4a50      	ldr	r2, [pc, #320]	; (8014cd8 <HAL_UART_MspInit+0x214>)
 8014b96:	635a      	str	r2, [r3, #52]	; 0x34
 8014b98:	4a4f      	ldr	r2, [pc, #316]	; (8014cd8 <HAL_UART_MspInit+0x214>)
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8014b9e:	e091      	b.n	8014cc4 <HAL_UART_MspInit+0x200>
  else if(uartHandle->Instance==USART2)
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	4a4e      	ldr	r2, [pc, #312]	; (8014ce0 <HAL_UART_MspInit+0x21c>)
 8014ba6:	4293      	cmp	r3, r2
 8014ba8:	d12c      	bne.n	8014c04 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART2_CLK_ENABLE();
 8014baa:	2300      	movs	r3, #0
 8014bac:	61bb      	str	r3, [r7, #24]
 8014bae:	4b48      	ldr	r3, [pc, #288]	; (8014cd0 <HAL_UART_MspInit+0x20c>)
 8014bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bb2:	4a47      	ldr	r2, [pc, #284]	; (8014cd0 <HAL_UART_MspInit+0x20c>)
 8014bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8014bba:	4b45      	ldr	r3, [pc, #276]	; (8014cd0 <HAL_UART_MspInit+0x20c>)
 8014bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014bc2:	61bb      	str	r3, [r7, #24]
 8014bc4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	617b      	str	r3, [r7, #20]
 8014bca:	4b41      	ldr	r3, [pc, #260]	; (8014cd0 <HAL_UART_MspInit+0x20c>)
 8014bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014bce:	4a40      	ldr	r2, [pc, #256]	; (8014cd0 <HAL_UART_MspInit+0x20c>)
 8014bd0:	f043 0301 	orr.w	r3, r3, #1
 8014bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8014bd6:	4b3e      	ldr	r3, [pc, #248]	; (8014cd0 <HAL_UART_MspInit+0x20c>)
 8014bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014bda:	f003 0301 	and.w	r3, r3, #1
 8014bde:	617b      	str	r3, [r7, #20]
 8014be0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8014be2:	230c      	movs	r3, #12
 8014be4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014be6:	2302      	movs	r3, #2
 8014be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014bea:	2300      	movs	r3, #0
 8014bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014bee:	2303      	movs	r3, #3
 8014bf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8014bf2:	2307      	movs	r3, #7
 8014bf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014bfa:	4619      	mov	r1, r3
 8014bfc:	4835      	ldr	r0, [pc, #212]	; (8014cd4 <HAL_UART_MspInit+0x210>)
 8014bfe:	f000 fd93 	bl	8015728 <HAL_GPIO_Init>
}
 8014c02:	e05f      	b.n	8014cc4 <HAL_UART_MspInit+0x200>
  else if(uartHandle->Instance==USART6)
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	4a36      	ldr	r2, [pc, #216]	; (8014ce4 <HAL_UART_MspInit+0x220>)
 8014c0a:	4293      	cmp	r3, r2
 8014c0c:	d15a      	bne.n	8014cc4 <HAL_UART_MspInit+0x200>
    __HAL_RCC_USART6_CLK_ENABLE();
 8014c0e:	2300      	movs	r3, #0
 8014c10:	613b      	str	r3, [r7, #16]
 8014c12:	4b2f      	ldr	r3, [pc, #188]	; (8014cd0 <HAL_UART_MspInit+0x20c>)
 8014c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c16:	4a2e      	ldr	r2, [pc, #184]	; (8014cd0 <HAL_UART_MspInit+0x20c>)
 8014c18:	f043 0320 	orr.w	r3, r3, #32
 8014c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8014c1e:	4b2c      	ldr	r3, [pc, #176]	; (8014cd0 <HAL_UART_MspInit+0x20c>)
 8014c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c22:	f003 0320 	and.w	r3, r3, #32
 8014c26:	613b      	str	r3, [r7, #16]
 8014c28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014c2a:	2300      	movs	r3, #0
 8014c2c:	60fb      	str	r3, [r7, #12]
 8014c2e:	4b28      	ldr	r3, [pc, #160]	; (8014cd0 <HAL_UART_MspInit+0x20c>)
 8014c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c32:	4a27      	ldr	r2, [pc, #156]	; (8014cd0 <HAL_UART_MspInit+0x20c>)
 8014c34:	f043 0304 	orr.w	r3, r3, #4
 8014c38:	6313      	str	r3, [r2, #48]	; 0x30
 8014c3a:	4b25      	ldr	r3, [pc, #148]	; (8014cd0 <HAL_UART_MspInit+0x20c>)
 8014c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c3e:	f003 0304 	and.w	r3, r3, #4
 8014c42:	60fb      	str	r3, [r7, #12]
 8014c44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8014c46:	23c0      	movs	r3, #192	; 0xc0
 8014c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014c4a:	2302      	movs	r3, #2
 8014c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014c4e:	2300      	movs	r3, #0
 8014c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014c52:	2303      	movs	r3, #3
 8014c54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8014c56:	2308      	movs	r3, #8
 8014c58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014c5e:	4619      	mov	r1, r3
 8014c60:	4821      	ldr	r0, [pc, #132]	; (8014ce8 <HAL_UART_MspInit+0x224>)
 8014c62:	f000 fd61 	bl	8015728 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8014c66:	4b21      	ldr	r3, [pc, #132]	; (8014cec <HAL_UART_MspInit+0x228>)
 8014c68:	4a21      	ldr	r2, [pc, #132]	; (8014cf0 <HAL_UART_MspInit+0x22c>)
 8014c6a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8014c6c:	4b1f      	ldr	r3, [pc, #124]	; (8014cec <HAL_UART_MspInit+0x228>)
 8014c6e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8014c72:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014c74:	4b1d      	ldr	r3, [pc, #116]	; (8014cec <HAL_UART_MspInit+0x228>)
 8014c76:	2200      	movs	r2, #0
 8014c78:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8014c7a:	4b1c      	ldr	r3, [pc, #112]	; (8014cec <HAL_UART_MspInit+0x228>)
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8014c80:	4b1a      	ldr	r3, [pc, #104]	; (8014cec <HAL_UART_MspInit+0x228>)
 8014c82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014c86:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8014c88:	4b18      	ldr	r3, [pc, #96]	; (8014cec <HAL_UART_MspInit+0x228>)
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8014c8e:	4b17      	ldr	r3, [pc, #92]	; (8014cec <HAL_UART_MspInit+0x228>)
 8014c90:	2200      	movs	r2, #0
 8014c92:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8014c94:	4b15      	ldr	r3, [pc, #84]	; (8014cec <HAL_UART_MspInit+0x228>)
 8014c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014c9a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8014c9c:	4b13      	ldr	r3, [pc, #76]	; (8014cec <HAL_UART_MspInit+0x228>)
 8014c9e:	2200      	movs	r2, #0
 8014ca0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014ca2:	4b12      	ldr	r3, [pc, #72]	; (8014cec <HAL_UART_MspInit+0x228>)
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8014ca8:	4810      	ldr	r0, [pc, #64]	; (8014cec <HAL_UART_MspInit+0x228>)
 8014caa:	f000 f993 	bl	8014fd4 <HAL_DMA_Init>
 8014cae:	4603      	mov	r3, r0
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d001      	beq.n	8014cb8 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 8014cb4:	f7fe ffb6 	bl	8013c24 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	4a0c      	ldr	r2, [pc, #48]	; (8014cec <HAL_UART_MspInit+0x228>)
 8014cbc:	635a      	str	r2, [r3, #52]	; 0x34
 8014cbe:	4a0b      	ldr	r2, [pc, #44]	; (8014cec <HAL_UART_MspInit+0x228>)
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8014cc4:	bf00      	nop
 8014cc6:	3738      	adds	r7, #56	; 0x38
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	bd80      	pop	{r7, pc}
 8014ccc:	40011000 	.word	0x40011000
 8014cd0:	40023800 	.word	0x40023800
 8014cd4:	40020000 	.word	0x40020000
 8014cd8:	20011008 	.word	0x20011008
 8014cdc:	40026440 	.word	0x40026440
 8014ce0:	40004400 	.word	0x40004400
 8014ce4:	40011400 	.word	0x40011400
 8014ce8:	40020800 	.word	0x40020800
 8014cec:	20010fa8 	.word	0x20010fa8
 8014cf0:	40026428 	.word	0x40026428

08014cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8014cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8014d2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8014cf8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8014cfa:	e003      	b.n	8014d04 <LoopCopyDataInit>

08014cfc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8014cfc:	4b0c      	ldr	r3, [pc, #48]	; (8014d30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8014cfe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8014d00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8014d02:	3104      	adds	r1, #4

08014d04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8014d04:	480b      	ldr	r0, [pc, #44]	; (8014d34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8014d06:	4b0c      	ldr	r3, [pc, #48]	; (8014d38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8014d08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8014d0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8014d0c:	d3f6      	bcc.n	8014cfc <CopyDataInit>
  ldr  r2, =_sbss
 8014d0e:	4a0b      	ldr	r2, [pc, #44]	; (8014d3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8014d10:	e002      	b.n	8014d18 <LoopFillZerobss>

08014d12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8014d12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8014d14:	f842 3b04 	str.w	r3, [r2], #4

08014d18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8014d18:	4b09      	ldr	r3, [pc, #36]	; (8014d40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8014d1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8014d1c:	d3f9      	bcc.n	8014d12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8014d1e:	f7ff faa1 	bl	8014264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8014d22:	f013 fcf5 	bl	8028710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8014d26:	f7fe fe6f 	bl	8013a08 <main>
  bx  lr    
 8014d2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8014d2c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8014d30:	0802e920 	.word	0x0802e920
  ldr  r0, =_sdata
 8014d34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8014d38:	2000085c 	.word	0x2000085c
  ldr  r2, =_sbss
 8014d3c:	20000860 	.word	0x20000860
  ldr  r3, = _ebss
 8014d40:	200131e4 	.word	0x200131e4

08014d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8014d44:	e7fe      	b.n	8014d44 <ADC_IRQHandler>
	...

08014d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8014d4c:	4b0e      	ldr	r3, [pc, #56]	; (8014d88 <HAL_Init+0x40>)
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	4a0d      	ldr	r2, [pc, #52]	; (8014d88 <HAL_Init+0x40>)
 8014d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8014d58:	4b0b      	ldr	r3, [pc, #44]	; (8014d88 <HAL_Init+0x40>)
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	4a0a      	ldr	r2, [pc, #40]	; (8014d88 <HAL_Init+0x40>)
 8014d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8014d64:	4b08      	ldr	r3, [pc, #32]	; (8014d88 <HAL_Init+0x40>)
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	4a07      	ldr	r2, [pc, #28]	; (8014d88 <HAL_Init+0x40>)
 8014d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8014d70:	2003      	movs	r0, #3
 8014d72:	f000 f8fa 	bl	8014f6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8014d76:	2000      	movs	r0, #0
 8014d78:	f7ff f8ae 	bl	8013ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8014d7c:	f7ff f884 	bl	8013e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8014d80:	2300      	movs	r3, #0
}
 8014d82:	4618      	mov	r0, r3
 8014d84:	bd80      	pop	{r7, pc}
 8014d86:	bf00      	nop
 8014d88:	40023c00 	.word	0x40023c00

08014d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8014d8c:	b480      	push	{r7}
 8014d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8014d90:	4b06      	ldr	r3, [pc, #24]	; (8014dac <HAL_IncTick+0x20>)
 8014d92:	781b      	ldrb	r3, [r3, #0]
 8014d94:	461a      	mov	r2, r3
 8014d96:	4b06      	ldr	r3, [pc, #24]	; (8014db0 <HAL_IncTick+0x24>)
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	4413      	add	r3, r2
 8014d9c:	4a04      	ldr	r2, [pc, #16]	; (8014db0 <HAL_IncTick+0x24>)
 8014d9e:	6013      	str	r3, [r2, #0]
}
 8014da0:	bf00      	nop
 8014da2:	46bd      	mov	sp, r7
 8014da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da8:	4770      	bx	lr
 8014daa:	bf00      	nop
 8014dac:	20000680 	.word	0x20000680
 8014db0:	20011128 	.word	0x20011128

08014db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8014db4:	b480      	push	{r7}
 8014db6:	af00      	add	r7, sp, #0
  return uwTick;
 8014db8:	4b03      	ldr	r3, [pc, #12]	; (8014dc8 <HAL_GetTick+0x14>)
 8014dba:	681b      	ldr	r3, [r3, #0]
}
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc4:	4770      	bx	lr
 8014dc6:	bf00      	nop
 8014dc8:	20011128 	.word	0x20011128

08014dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b084      	sub	sp, #16
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8014dd4:	f7ff ffee 	bl	8014db4 <HAL_GetTick>
 8014dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014de4:	d005      	beq.n	8014df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8014de6:	4b09      	ldr	r3, [pc, #36]	; (8014e0c <HAL_Delay+0x40>)
 8014de8:	781b      	ldrb	r3, [r3, #0]
 8014dea:	461a      	mov	r2, r3
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	4413      	add	r3, r2
 8014df0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8014df2:	bf00      	nop
 8014df4:	f7ff ffde 	bl	8014db4 <HAL_GetTick>
 8014df8:	4602      	mov	r2, r0
 8014dfa:	68bb      	ldr	r3, [r7, #8]
 8014dfc:	1ad3      	subs	r3, r2, r3
 8014dfe:	68fa      	ldr	r2, [r7, #12]
 8014e00:	429a      	cmp	r2, r3
 8014e02:	d8f7      	bhi.n	8014df4 <HAL_Delay+0x28>
  {
  }
}
 8014e04:	bf00      	nop
 8014e06:	3710      	adds	r7, #16
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	bd80      	pop	{r7, pc}
 8014e0c:	20000680 	.word	0x20000680

08014e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8014e10:	b480      	push	{r7}
 8014e12:	b085      	sub	sp, #20
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	f003 0307 	and.w	r3, r3, #7
 8014e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8014e20:	4b0c      	ldr	r3, [pc, #48]	; (8014e54 <__NVIC_SetPriorityGrouping+0x44>)
 8014e22:	68db      	ldr	r3, [r3, #12]
 8014e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8014e26:	68ba      	ldr	r2, [r7, #8]
 8014e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8014e2c:	4013      	ands	r3, r2
 8014e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8014e34:	68bb      	ldr	r3, [r7, #8]
 8014e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8014e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8014e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8014e42:	4a04      	ldr	r2, [pc, #16]	; (8014e54 <__NVIC_SetPriorityGrouping+0x44>)
 8014e44:	68bb      	ldr	r3, [r7, #8]
 8014e46:	60d3      	str	r3, [r2, #12]
}
 8014e48:	bf00      	nop
 8014e4a:	3714      	adds	r7, #20
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e52:	4770      	bx	lr
 8014e54:	e000ed00 	.word	0xe000ed00

08014e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8014e58:	b480      	push	{r7}
 8014e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8014e5c:	4b04      	ldr	r3, [pc, #16]	; (8014e70 <__NVIC_GetPriorityGrouping+0x18>)
 8014e5e:	68db      	ldr	r3, [r3, #12]
 8014e60:	0a1b      	lsrs	r3, r3, #8
 8014e62:	f003 0307 	and.w	r3, r3, #7
}
 8014e66:	4618      	mov	r0, r3
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6e:	4770      	bx	lr
 8014e70:	e000ed00 	.word	0xe000ed00

08014e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8014e74:	b480      	push	{r7}
 8014e76:	b083      	sub	sp, #12
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	db0b      	blt.n	8014e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014e86:	79fb      	ldrb	r3, [r7, #7]
 8014e88:	f003 021f 	and.w	r2, r3, #31
 8014e8c:	4907      	ldr	r1, [pc, #28]	; (8014eac <__NVIC_EnableIRQ+0x38>)
 8014e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014e92:	095b      	lsrs	r3, r3, #5
 8014e94:	2001      	movs	r0, #1
 8014e96:	fa00 f202 	lsl.w	r2, r0, r2
 8014e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8014e9e:	bf00      	nop
 8014ea0:	370c      	adds	r7, #12
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea8:	4770      	bx	lr
 8014eaa:	bf00      	nop
 8014eac:	e000e100 	.word	0xe000e100

08014eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8014eb0:	b480      	push	{r7}
 8014eb2:	b083      	sub	sp, #12
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	6039      	str	r1, [r7, #0]
 8014eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	db0a      	blt.n	8014eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014ec4:	683b      	ldr	r3, [r7, #0]
 8014ec6:	b2da      	uxtb	r2, r3
 8014ec8:	490c      	ldr	r1, [pc, #48]	; (8014efc <__NVIC_SetPriority+0x4c>)
 8014eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ece:	0112      	lsls	r2, r2, #4
 8014ed0:	b2d2      	uxtb	r2, r2
 8014ed2:	440b      	add	r3, r1
 8014ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8014ed8:	e00a      	b.n	8014ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	b2da      	uxtb	r2, r3
 8014ede:	4908      	ldr	r1, [pc, #32]	; (8014f00 <__NVIC_SetPriority+0x50>)
 8014ee0:	79fb      	ldrb	r3, [r7, #7]
 8014ee2:	f003 030f 	and.w	r3, r3, #15
 8014ee6:	3b04      	subs	r3, #4
 8014ee8:	0112      	lsls	r2, r2, #4
 8014eea:	b2d2      	uxtb	r2, r2
 8014eec:	440b      	add	r3, r1
 8014eee:	761a      	strb	r2, [r3, #24]
}
 8014ef0:	bf00      	nop
 8014ef2:	370c      	adds	r7, #12
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efa:	4770      	bx	lr
 8014efc:	e000e100 	.word	0xe000e100
 8014f00:	e000ed00 	.word	0xe000ed00

08014f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8014f04:	b480      	push	{r7}
 8014f06:	b089      	sub	sp, #36	; 0x24
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	60f8      	str	r0, [r7, #12]
 8014f0c:	60b9      	str	r1, [r7, #8]
 8014f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	f003 0307 	and.w	r3, r3, #7
 8014f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8014f18:	69fb      	ldr	r3, [r7, #28]
 8014f1a:	f1c3 0307 	rsb	r3, r3, #7
 8014f1e:	2b04      	cmp	r3, #4
 8014f20:	bf28      	it	cs
 8014f22:	2304      	movcs	r3, #4
 8014f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8014f26:	69fb      	ldr	r3, [r7, #28]
 8014f28:	3304      	adds	r3, #4
 8014f2a:	2b06      	cmp	r3, #6
 8014f2c:	d902      	bls.n	8014f34 <NVIC_EncodePriority+0x30>
 8014f2e:	69fb      	ldr	r3, [r7, #28]
 8014f30:	3b03      	subs	r3, #3
 8014f32:	e000      	b.n	8014f36 <NVIC_EncodePriority+0x32>
 8014f34:	2300      	movs	r3, #0
 8014f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8014f38:	f04f 32ff 	mov.w	r2, #4294967295
 8014f3c:	69bb      	ldr	r3, [r7, #24]
 8014f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8014f42:	43da      	mvns	r2, r3
 8014f44:	68bb      	ldr	r3, [r7, #8]
 8014f46:	401a      	ands	r2, r3
 8014f48:	697b      	ldr	r3, [r7, #20]
 8014f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8014f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8014f50:	697b      	ldr	r3, [r7, #20]
 8014f52:	fa01 f303 	lsl.w	r3, r1, r3
 8014f56:	43d9      	mvns	r1, r3
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8014f5c:	4313      	orrs	r3, r2
         );
}
 8014f5e:	4618      	mov	r0, r3
 8014f60:	3724      	adds	r7, #36	; 0x24
 8014f62:	46bd      	mov	sp, r7
 8014f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f68:	4770      	bx	lr

08014f6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8014f6a:	b580      	push	{r7, lr}
 8014f6c:	b082      	sub	sp, #8
 8014f6e:	af00      	add	r7, sp, #0
 8014f70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8014f72:	6878      	ldr	r0, [r7, #4]
 8014f74:	f7ff ff4c 	bl	8014e10 <__NVIC_SetPriorityGrouping>
}
 8014f78:	bf00      	nop
 8014f7a:	3708      	adds	r7, #8
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}

08014f80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b086      	sub	sp, #24
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	4603      	mov	r3, r0
 8014f88:	60b9      	str	r1, [r7, #8]
 8014f8a:	607a      	str	r2, [r7, #4]
 8014f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8014f8e:	2300      	movs	r3, #0
 8014f90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8014f92:	f7ff ff61 	bl	8014e58 <__NVIC_GetPriorityGrouping>
 8014f96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8014f98:	687a      	ldr	r2, [r7, #4]
 8014f9a:	68b9      	ldr	r1, [r7, #8]
 8014f9c:	6978      	ldr	r0, [r7, #20]
 8014f9e:	f7ff ffb1 	bl	8014f04 <NVIC_EncodePriority>
 8014fa2:	4602      	mov	r2, r0
 8014fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014fa8:	4611      	mov	r1, r2
 8014faa:	4618      	mov	r0, r3
 8014fac:	f7ff ff80 	bl	8014eb0 <__NVIC_SetPriority>
}
 8014fb0:	bf00      	nop
 8014fb2:	3718      	adds	r7, #24
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	bd80      	pop	{r7, pc}

08014fb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b082      	sub	sp, #8
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8014fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f7ff ff54 	bl	8014e74 <__NVIC_EnableIRQ>
}
 8014fcc:	bf00      	nop
 8014fce:	3708      	adds	r7, #8
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bd80      	pop	{r7, pc}

08014fd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b086      	sub	sp, #24
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8014fdc:	2300      	movs	r3, #0
 8014fde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8014fe0:	f7ff fee8 	bl	8014db4 <HAL_GetTick>
 8014fe4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d101      	bne.n	8014ff0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8014fec:	2301      	movs	r3, #1
 8014fee:	e099      	b.n	8015124 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	2202      	movs	r2, #2
 8014ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	681a      	ldr	r2, [r3, #0]
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	f022 0201 	bic.w	r2, r2, #1
 801500e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015010:	e00f      	b.n	8015032 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8015012:	f7ff fecf 	bl	8014db4 <HAL_GetTick>
 8015016:	4602      	mov	r2, r0
 8015018:	693b      	ldr	r3, [r7, #16]
 801501a:	1ad3      	subs	r3, r2, r3
 801501c:	2b05      	cmp	r3, #5
 801501e:	d908      	bls.n	8015032 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	2220      	movs	r2, #32
 8015024:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	2203      	movs	r2, #3
 801502a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801502e:	2303      	movs	r3, #3
 8015030:	e078      	b.n	8015124 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	f003 0301 	and.w	r3, r3, #1
 801503c:	2b00      	cmp	r3, #0
 801503e:	d1e8      	bne.n	8015012 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8015048:	697a      	ldr	r2, [r7, #20]
 801504a:	4b38      	ldr	r3, [pc, #224]	; (801512c <HAL_DMA_Init+0x158>)
 801504c:	4013      	ands	r3, r2
 801504e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	685a      	ldr	r2, [r3, #4]
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	689b      	ldr	r3, [r3, #8]
 8015058:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801505e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	691b      	ldr	r3, [r3, #16]
 8015064:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801506a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	699b      	ldr	r3, [r3, #24]
 8015070:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015076:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	6a1b      	ldr	r3, [r3, #32]
 801507c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801507e:	697a      	ldr	r2, [r7, #20]
 8015080:	4313      	orrs	r3, r2
 8015082:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015088:	2b04      	cmp	r3, #4
 801508a:	d107      	bne.n	801509c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015094:	4313      	orrs	r3, r2
 8015096:	697a      	ldr	r2, [r7, #20]
 8015098:	4313      	orrs	r3, r2
 801509a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	697a      	ldr	r2, [r7, #20]
 80150a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	695b      	ldr	r3, [r3, #20]
 80150aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80150ac:	697b      	ldr	r3, [r7, #20]
 80150ae:	f023 0307 	bic.w	r3, r3, #7
 80150b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150b8:	697a      	ldr	r2, [r7, #20]
 80150ba:	4313      	orrs	r3, r2
 80150bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150c2:	2b04      	cmp	r3, #4
 80150c4:	d117      	bne.n	80150f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80150ca:	697a      	ldr	r2, [r7, #20]
 80150cc:	4313      	orrs	r3, r2
 80150ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d00e      	beq.n	80150f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80150d8:	6878      	ldr	r0, [r7, #4]
 80150da:	f000 faab 	bl	8015634 <DMA_CheckFifoParam>
 80150de:	4603      	mov	r3, r0
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d008      	beq.n	80150f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	2240      	movs	r2, #64	; 0x40
 80150e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	2201      	movs	r2, #1
 80150ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80150f2:	2301      	movs	r3, #1
 80150f4:	e016      	b.n	8015124 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	697a      	ldr	r2, [r7, #20]
 80150fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80150fe:	6878      	ldr	r0, [r7, #4]
 8015100:	f000 fa62 	bl	80155c8 <DMA_CalcBaseAndBitshift>
 8015104:	4603      	mov	r3, r0
 8015106:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801510c:	223f      	movs	r2, #63	; 0x3f
 801510e:	409a      	lsls	r2, r3
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	2200      	movs	r2, #0
 8015118:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	2201      	movs	r2, #1
 801511e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8015122:	2300      	movs	r3, #0
}
 8015124:	4618      	mov	r0, r3
 8015126:	3718      	adds	r7, #24
 8015128:	46bd      	mov	sp, r7
 801512a:	bd80      	pop	{r7, pc}
 801512c:	f010803f 	.word	0xf010803f

08015130 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b086      	sub	sp, #24
 8015134:	af00      	add	r7, sp, #0
 8015136:	60f8      	str	r0, [r7, #12]
 8015138:	60b9      	str	r1, [r7, #8]
 801513a:	607a      	str	r2, [r7, #4]
 801513c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801513e:	2300      	movs	r3, #0
 8015140:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015146:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801514e:	2b01      	cmp	r3, #1
 8015150:	d101      	bne.n	8015156 <HAL_DMA_Start_IT+0x26>
 8015152:	2302      	movs	r3, #2
 8015154:	e040      	b.n	80151d8 <HAL_DMA_Start_IT+0xa8>
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	2201      	movs	r2, #1
 801515a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015164:	b2db      	uxtb	r3, r3
 8015166:	2b01      	cmp	r3, #1
 8015168:	d12f      	bne.n	80151ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	2202      	movs	r2, #2
 801516e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	2200      	movs	r2, #0
 8015176:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8015178:	683b      	ldr	r3, [r7, #0]
 801517a:	687a      	ldr	r2, [r7, #4]
 801517c:	68b9      	ldr	r1, [r7, #8]
 801517e:	68f8      	ldr	r0, [r7, #12]
 8015180:	f000 f9f4 	bl	801556c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015188:	223f      	movs	r2, #63	; 0x3f
 801518a:	409a      	lsls	r2, r3
 801518c:	693b      	ldr	r3, [r7, #16]
 801518e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	681a      	ldr	r2, [r3, #0]
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	f042 0216 	orr.w	r2, r2, #22
 801519e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d007      	beq.n	80151b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	681a      	ldr	r2, [r3, #0]
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	f042 0208 	orr.w	r2, r2, #8
 80151b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	681a      	ldr	r2, [r3, #0]
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	f042 0201 	orr.w	r2, r2, #1
 80151c6:	601a      	str	r2, [r3, #0]
 80151c8:	e005      	b.n	80151d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	2200      	movs	r2, #0
 80151ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80151d2:	2302      	movs	r3, #2
 80151d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80151d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80151d8:	4618      	mov	r0, r3
 80151da:	3718      	adds	r7, #24
 80151dc:	46bd      	mov	sp, r7
 80151de:	bd80      	pop	{r7, pc}

080151e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80151e0:	b480      	push	{r7}
 80151e2:	b083      	sub	sp, #12
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80151ee:	b2db      	uxtb	r3, r3
 80151f0:	2b02      	cmp	r3, #2
 80151f2:	d004      	beq.n	80151fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	2280      	movs	r2, #128	; 0x80
 80151f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80151fa:	2301      	movs	r3, #1
 80151fc:	e00c      	b.n	8015218 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	2205      	movs	r2, #5
 8015202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	681a      	ldr	r2, [r3, #0]
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	f022 0201 	bic.w	r2, r2, #1
 8015214:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8015216:	2300      	movs	r3, #0
}
 8015218:	4618      	mov	r0, r3
 801521a:	370c      	adds	r7, #12
 801521c:	46bd      	mov	sp, r7
 801521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015222:	4770      	bx	lr

08015224 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8015224:	b580      	push	{r7, lr}
 8015226:	b086      	sub	sp, #24
 8015228:	af00      	add	r7, sp, #0
 801522a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801522c:	2300      	movs	r3, #0
 801522e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8015230:	4b92      	ldr	r3, [pc, #584]	; (801547c <HAL_DMA_IRQHandler+0x258>)
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	4a92      	ldr	r2, [pc, #584]	; (8015480 <HAL_DMA_IRQHandler+0x25c>)
 8015236:	fba2 2303 	umull	r2, r3, r2, r3
 801523a:	0a9b      	lsrs	r3, r3, #10
 801523c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015242:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8015244:	693b      	ldr	r3, [r7, #16]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801524e:	2208      	movs	r2, #8
 8015250:	409a      	lsls	r2, r3
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	4013      	ands	r3, r2
 8015256:	2b00      	cmp	r3, #0
 8015258:	d01a      	beq.n	8015290 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	f003 0304 	and.w	r3, r3, #4
 8015264:	2b00      	cmp	r3, #0
 8015266:	d013      	beq.n	8015290 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	681a      	ldr	r2, [r3, #0]
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	f022 0204 	bic.w	r2, r2, #4
 8015276:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801527c:	2208      	movs	r2, #8
 801527e:	409a      	lsls	r2, r3
 8015280:	693b      	ldr	r3, [r7, #16]
 8015282:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015288:	f043 0201 	orr.w	r2, r3, #1
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015294:	2201      	movs	r2, #1
 8015296:	409a      	lsls	r2, r3
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	4013      	ands	r3, r2
 801529c:	2b00      	cmp	r3, #0
 801529e:	d012      	beq.n	80152c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	695b      	ldr	r3, [r3, #20]
 80152a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d00b      	beq.n	80152c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80152b2:	2201      	movs	r2, #1
 80152b4:	409a      	lsls	r2, r3
 80152b6:	693b      	ldr	r3, [r7, #16]
 80152b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152be:	f043 0202 	orr.w	r2, r3, #2
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80152ca:	2204      	movs	r2, #4
 80152cc:	409a      	lsls	r2, r3
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	4013      	ands	r3, r2
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d012      	beq.n	80152fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	f003 0302 	and.w	r3, r3, #2
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d00b      	beq.n	80152fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80152e8:	2204      	movs	r2, #4
 80152ea:	409a      	lsls	r2, r3
 80152ec:	693b      	ldr	r3, [r7, #16]
 80152ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152f4:	f043 0204 	orr.w	r2, r3, #4
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015300:	2210      	movs	r2, #16
 8015302:	409a      	lsls	r2, r3
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	4013      	ands	r3, r2
 8015308:	2b00      	cmp	r3, #0
 801530a:	d043      	beq.n	8015394 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	f003 0308 	and.w	r3, r3, #8
 8015316:	2b00      	cmp	r3, #0
 8015318:	d03c      	beq.n	8015394 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801531e:	2210      	movs	r2, #16
 8015320:	409a      	lsls	r2, r3
 8015322:	693b      	ldr	r3, [r7, #16]
 8015324:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015330:	2b00      	cmp	r3, #0
 8015332:	d018      	beq.n	8015366 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801533e:	2b00      	cmp	r3, #0
 8015340:	d108      	bne.n	8015354 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015346:	2b00      	cmp	r3, #0
 8015348:	d024      	beq.n	8015394 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801534e:	6878      	ldr	r0, [r7, #4]
 8015350:	4798      	blx	r3
 8015352:	e01f      	b.n	8015394 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015358:	2b00      	cmp	r3, #0
 801535a:	d01b      	beq.n	8015394 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015360:	6878      	ldr	r0, [r7, #4]
 8015362:	4798      	blx	r3
 8015364:	e016      	b.n	8015394 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015370:	2b00      	cmp	r3, #0
 8015372:	d107      	bne.n	8015384 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	681a      	ldr	r2, [r3, #0]
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	f022 0208 	bic.w	r2, r2, #8
 8015382:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015388:	2b00      	cmp	r3, #0
 801538a:	d003      	beq.n	8015394 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015390:	6878      	ldr	r0, [r7, #4]
 8015392:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015398:	2220      	movs	r2, #32
 801539a:	409a      	lsls	r2, r3
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	4013      	ands	r3, r2
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	f000 808e 	beq.w	80154c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	f003 0310 	and.w	r3, r3, #16
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	f000 8086 	beq.w	80154c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80153ba:	2220      	movs	r2, #32
 80153bc:	409a      	lsls	r2, r3
 80153be:	693b      	ldr	r3, [r7, #16]
 80153c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80153c8:	b2db      	uxtb	r3, r3
 80153ca:	2b05      	cmp	r3, #5
 80153cc:	d136      	bne.n	801543c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	681a      	ldr	r2, [r3, #0]
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	f022 0216 	bic.w	r2, r2, #22
 80153dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	695a      	ldr	r2, [r3, #20]
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80153ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d103      	bne.n	80153fe <HAL_DMA_IRQHandler+0x1da>
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d007      	beq.n	801540e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	681a      	ldr	r2, [r3, #0]
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	f022 0208 	bic.w	r2, r2, #8
 801540c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015412:	223f      	movs	r2, #63	; 0x3f
 8015414:	409a      	lsls	r2, r3
 8015416:	693b      	ldr	r3, [r7, #16]
 8015418:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	2200      	movs	r2, #0
 801541e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	2201      	movs	r2, #1
 8015426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801542e:	2b00      	cmp	r3, #0
 8015430:	d07d      	beq.n	801552e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015436:	6878      	ldr	r0, [r7, #4]
 8015438:	4798      	blx	r3
        }
        return;
 801543a:	e078      	b.n	801552e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015446:	2b00      	cmp	r3, #0
 8015448:	d01c      	beq.n	8015484 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015454:	2b00      	cmp	r3, #0
 8015456:	d108      	bne.n	801546a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801545c:	2b00      	cmp	r3, #0
 801545e:	d030      	beq.n	80154c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015464:	6878      	ldr	r0, [r7, #4]
 8015466:	4798      	blx	r3
 8015468:	e02b      	b.n	80154c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801546e:	2b00      	cmp	r3, #0
 8015470:	d027      	beq.n	80154c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015476:	6878      	ldr	r0, [r7, #4]
 8015478:	4798      	blx	r3
 801547a:	e022      	b.n	80154c2 <HAL_DMA_IRQHandler+0x29e>
 801547c:	20000678 	.word	0x20000678
 8015480:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801548e:	2b00      	cmp	r3, #0
 8015490:	d10f      	bne.n	80154b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	681a      	ldr	r2, [r3, #0]
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	f022 0210 	bic.w	r2, r2, #16
 80154a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	2200      	movs	r2, #0
 80154a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	2201      	movs	r2, #1
 80154ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d003      	beq.n	80154c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80154be:	6878      	ldr	r0, [r7, #4]
 80154c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d032      	beq.n	8015530 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80154ce:	f003 0301 	and.w	r3, r3, #1
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d022      	beq.n	801551c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	2205      	movs	r2, #5
 80154da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	681a      	ldr	r2, [r3, #0]
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	f022 0201 	bic.w	r2, r2, #1
 80154ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80154ee:	68bb      	ldr	r3, [r7, #8]
 80154f0:	3301      	adds	r3, #1
 80154f2:	60bb      	str	r3, [r7, #8]
 80154f4:	697a      	ldr	r2, [r7, #20]
 80154f6:	429a      	cmp	r2, r3
 80154f8:	d307      	bcc.n	801550a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	f003 0301 	and.w	r3, r3, #1
 8015504:	2b00      	cmp	r3, #0
 8015506:	d1f2      	bne.n	80154ee <HAL_DMA_IRQHandler+0x2ca>
 8015508:	e000      	b.n	801550c <HAL_DMA_IRQHandler+0x2e8>
          break;
 801550a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	2200      	movs	r2, #0
 8015510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	2201      	movs	r2, #1
 8015518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015520:	2b00      	cmp	r3, #0
 8015522:	d005      	beq.n	8015530 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015528:	6878      	ldr	r0, [r7, #4]
 801552a:	4798      	blx	r3
 801552c:	e000      	b.n	8015530 <HAL_DMA_IRQHandler+0x30c>
        return;
 801552e:	bf00      	nop
    }
  }
}
 8015530:	3718      	adds	r7, #24
 8015532:	46bd      	mov	sp, r7
 8015534:	bd80      	pop	{r7, pc}
 8015536:	bf00      	nop

08015538 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8015538:	b480      	push	{r7}
 801553a:	b083      	sub	sp, #12
 801553c:	af00      	add	r7, sp, #0
 801553e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015546:	b2db      	uxtb	r3, r3
}
 8015548:	4618      	mov	r0, r3
 801554a:	370c      	adds	r7, #12
 801554c:	46bd      	mov	sp, r7
 801554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015552:	4770      	bx	lr

08015554 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8015554:	b480      	push	{r7}
 8015556:	b083      	sub	sp, #12
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8015560:	4618      	mov	r0, r3
 8015562:	370c      	adds	r7, #12
 8015564:	46bd      	mov	sp, r7
 8015566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801556a:	4770      	bx	lr

0801556c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801556c:	b480      	push	{r7}
 801556e:	b085      	sub	sp, #20
 8015570:	af00      	add	r7, sp, #0
 8015572:	60f8      	str	r0, [r7, #12]
 8015574:	60b9      	str	r1, [r7, #8]
 8015576:	607a      	str	r2, [r7, #4]
 8015578:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	681a      	ldr	r2, [r3, #0]
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8015588:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	683a      	ldr	r2, [r7, #0]
 8015590:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	689b      	ldr	r3, [r3, #8]
 8015596:	2b40      	cmp	r3, #64	; 0x40
 8015598:	d108      	bne.n	80155ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	687a      	ldr	r2, [r7, #4]
 80155a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	68ba      	ldr	r2, [r7, #8]
 80155a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80155aa:	e007      	b.n	80155bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	68ba      	ldr	r2, [r7, #8]
 80155b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	687a      	ldr	r2, [r7, #4]
 80155ba:	60da      	str	r2, [r3, #12]
}
 80155bc:	bf00      	nop
 80155be:	3714      	adds	r7, #20
 80155c0:	46bd      	mov	sp, r7
 80155c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c6:	4770      	bx	lr

080155c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80155c8:	b480      	push	{r7}
 80155ca:	b085      	sub	sp, #20
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	b2db      	uxtb	r3, r3
 80155d6:	3b10      	subs	r3, #16
 80155d8:	4a14      	ldr	r2, [pc, #80]	; (801562c <DMA_CalcBaseAndBitshift+0x64>)
 80155da:	fba2 2303 	umull	r2, r3, r2, r3
 80155de:	091b      	lsrs	r3, r3, #4
 80155e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80155e2:	4a13      	ldr	r2, [pc, #76]	; (8015630 <DMA_CalcBaseAndBitshift+0x68>)
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	4413      	add	r3, r2
 80155e8:	781b      	ldrb	r3, [r3, #0]
 80155ea:	461a      	mov	r2, r3
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	2b03      	cmp	r3, #3
 80155f4:	d909      	bls.n	801560a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80155fe:	f023 0303 	bic.w	r3, r3, #3
 8015602:	1d1a      	adds	r2, r3, #4
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	659a      	str	r2, [r3, #88]	; 0x58
 8015608:	e007      	b.n	801561a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8015612:	f023 0303 	bic.w	r3, r3, #3
 8015616:	687a      	ldr	r2, [r7, #4]
 8015618:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801561e:	4618      	mov	r0, r3
 8015620:	3714      	adds	r7, #20
 8015622:	46bd      	mov	sp, r7
 8015624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015628:	4770      	bx	lr
 801562a:	bf00      	nop
 801562c:	aaaaaaab 	.word	0xaaaaaaab
 8015630:	0802dae4 	.word	0x0802dae4

08015634 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8015634:	b480      	push	{r7}
 8015636:	b085      	sub	sp, #20
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801563c:	2300      	movs	r3, #0
 801563e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015644:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	699b      	ldr	r3, [r3, #24]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d11f      	bne.n	801568e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801564e:	68bb      	ldr	r3, [r7, #8]
 8015650:	2b03      	cmp	r3, #3
 8015652:	d855      	bhi.n	8015700 <DMA_CheckFifoParam+0xcc>
 8015654:	a201      	add	r2, pc, #4	; (adr r2, 801565c <DMA_CheckFifoParam+0x28>)
 8015656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801565a:	bf00      	nop
 801565c:	0801566d 	.word	0x0801566d
 8015660:	0801567f 	.word	0x0801567f
 8015664:	0801566d 	.word	0x0801566d
 8015668:	08015701 	.word	0x08015701
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015674:	2b00      	cmp	r3, #0
 8015676:	d045      	beq.n	8015704 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8015678:	2301      	movs	r3, #1
 801567a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801567c:	e042      	b.n	8015704 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015682:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8015686:	d13f      	bne.n	8015708 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8015688:	2301      	movs	r3, #1
 801568a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801568c:	e03c      	b.n	8015708 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	699b      	ldr	r3, [r3, #24]
 8015692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015696:	d121      	bne.n	80156dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8015698:	68bb      	ldr	r3, [r7, #8]
 801569a:	2b03      	cmp	r3, #3
 801569c:	d836      	bhi.n	801570c <DMA_CheckFifoParam+0xd8>
 801569e:	a201      	add	r2, pc, #4	; (adr r2, 80156a4 <DMA_CheckFifoParam+0x70>)
 80156a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156a4:	080156b5 	.word	0x080156b5
 80156a8:	080156bb 	.word	0x080156bb
 80156ac:	080156b5 	.word	0x080156b5
 80156b0:	080156cd 	.word	0x080156cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80156b4:	2301      	movs	r3, #1
 80156b6:	73fb      	strb	r3, [r7, #15]
      break;
 80156b8:	e02f      	b.n	801571a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d024      	beq.n	8015710 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80156c6:	2301      	movs	r3, #1
 80156c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80156ca:	e021      	b.n	8015710 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80156d4:	d11e      	bne.n	8015714 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80156d6:	2301      	movs	r3, #1
 80156d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80156da:	e01b      	b.n	8015714 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80156dc:	68bb      	ldr	r3, [r7, #8]
 80156de:	2b02      	cmp	r3, #2
 80156e0:	d902      	bls.n	80156e8 <DMA_CheckFifoParam+0xb4>
 80156e2:	2b03      	cmp	r3, #3
 80156e4:	d003      	beq.n	80156ee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80156e6:	e018      	b.n	801571a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80156e8:	2301      	movs	r3, #1
 80156ea:	73fb      	strb	r3, [r7, #15]
      break;
 80156ec:	e015      	b.n	801571a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d00e      	beq.n	8015718 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80156fa:	2301      	movs	r3, #1
 80156fc:	73fb      	strb	r3, [r7, #15]
      break;
 80156fe:	e00b      	b.n	8015718 <DMA_CheckFifoParam+0xe4>
      break;
 8015700:	bf00      	nop
 8015702:	e00a      	b.n	801571a <DMA_CheckFifoParam+0xe6>
      break;
 8015704:	bf00      	nop
 8015706:	e008      	b.n	801571a <DMA_CheckFifoParam+0xe6>
      break;
 8015708:	bf00      	nop
 801570a:	e006      	b.n	801571a <DMA_CheckFifoParam+0xe6>
      break;
 801570c:	bf00      	nop
 801570e:	e004      	b.n	801571a <DMA_CheckFifoParam+0xe6>
      break;
 8015710:	bf00      	nop
 8015712:	e002      	b.n	801571a <DMA_CheckFifoParam+0xe6>
      break;   
 8015714:	bf00      	nop
 8015716:	e000      	b.n	801571a <DMA_CheckFifoParam+0xe6>
      break;
 8015718:	bf00      	nop
    }
  } 
  
  return status; 
 801571a:	7bfb      	ldrb	r3, [r7, #15]
}
 801571c:	4618      	mov	r0, r3
 801571e:	3714      	adds	r7, #20
 8015720:	46bd      	mov	sp, r7
 8015722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015726:	4770      	bx	lr

08015728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015728:	b480      	push	{r7}
 801572a:	b089      	sub	sp, #36	; 0x24
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
 8015730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8015732:	2300      	movs	r3, #0
 8015734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8015736:	2300      	movs	r3, #0
 8015738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801573a:	2300      	movs	r3, #0
 801573c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801573e:	2300      	movs	r3, #0
 8015740:	61fb      	str	r3, [r7, #28]
 8015742:	e159      	b.n	80159f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8015744:	2201      	movs	r2, #1
 8015746:	69fb      	ldr	r3, [r7, #28]
 8015748:	fa02 f303 	lsl.w	r3, r2, r3
 801574c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801574e:	683b      	ldr	r3, [r7, #0]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	697a      	ldr	r2, [r7, #20]
 8015754:	4013      	ands	r3, r2
 8015756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8015758:	693a      	ldr	r2, [r7, #16]
 801575a:	697b      	ldr	r3, [r7, #20]
 801575c:	429a      	cmp	r2, r3
 801575e:	f040 8148 	bne.w	80159f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8015762:	683b      	ldr	r3, [r7, #0]
 8015764:	685b      	ldr	r3, [r3, #4]
 8015766:	2b01      	cmp	r3, #1
 8015768:	d00b      	beq.n	8015782 <HAL_GPIO_Init+0x5a>
 801576a:	683b      	ldr	r3, [r7, #0]
 801576c:	685b      	ldr	r3, [r3, #4]
 801576e:	2b02      	cmp	r3, #2
 8015770:	d007      	beq.n	8015782 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8015772:	683b      	ldr	r3, [r7, #0]
 8015774:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8015776:	2b11      	cmp	r3, #17
 8015778:	d003      	beq.n	8015782 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801577a:	683b      	ldr	r3, [r7, #0]
 801577c:	685b      	ldr	r3, [r3, #4]
 801577e:	2b12      	cmp	r3, #18
 8015780:	d130      	bne.n	80157e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	689b      	ldr	r3, [r3, #8]
 8015786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8015788:	69fb      	ldr	r3, [r7, #28]
 801578a:	005b      	lsls	r3, r3, #1
 801578c:	2203      	movs	r2, #3
 801578e:	fa02 f303 	lsl.w	r3, r2, r3
 8015792:	43db      	mvns	r3, r3
 8015794:	69ba      	ldr	r2, [r7, #24]
 8015796:	4013      	ands	r3, r2
 8015798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801579a:	683b      	ldr	r3, [r7, #0]
 801579c:	68da      	ldr	r2, [r3, #12]
 801579e:	69fb      	ldr	r3, [r7, #28]
 80157a0:	005b      	lsls	r3, r3, #1
 80157a2:	fa02 f303 	lsl.w	r3, r2, r3
 80157a6:	69ba      	ldr	r2, [r7, #24]
 80157a8:	4313      	orrs	r3, r2
 80157aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	69ba      	ldr	r2, [r7, #24]
 80157b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	685b      	ldr	r3, [r3, #4]
 80157b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80157b8:	2201      	movs	r2, #1
 80157ba:	69fb      	ldr	r3, [r7, #28]
 80157bc:	fa02 f303 	lsl.w	r3, r2, r3
 80157c0:	43db      	mvns	r3, r3
 80157c2:	69ba      	ldr	r2, [r7, #24]
 80157c4:	4013      	ands	r3, r2
 80157c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	685b      	ldr	r3, [r3, #4]
 80157cc:	091b      	lsrs	r3, r3, #4
 80157ce:	f003 0201 	and.w	r2, r3, #1
 80157d2:	69fb      	ldr	r3, [r7, #28]
 80157d4:	fa02 f303 	lsl.w	r3, r2, r3
 80157d8:	69ba      	ldr	r2, [r7, #24]
 80157da:	4313      	orrs	r3, r2
 80157dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	69ba      	ldr	r2, [r7, #24]
 80157e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	68db      	ldr	r3, [r3, #12]
 80157e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80157ea:	69fb      	ldr	r3, [r7, #28]
 80157ec:	005b      	lsls	r3, r3, #1
 80157ee:	2203      	movs	r2, #3
 80157f0:	fa02 f303 	lsl.w	r3, r2, r3
 80157f4:	43db      	mvns	r3, r3
 80157f6:	69ba      	ldr	r2, [r7, #24]
 80157f8:	4013      	ands	r3, r2
 80157fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80157fc:	683b      	ldr	r3, [r7, #0]
 80157fe:	689a      	ldr	r2, [r3, #8]
 8015800:	69fb      	ldr	r3, [r7, #28]
 8015802:	005b      	lsls	r3, r3, #1
 8015804:	fa02 f303 	lsl.w	r3, r2, r3
 8015808:	69ba      	ldr	r2, [r7, #24]
 801580a:	4313      	orrs	r3, r2
 801580c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	69ba      	ldr	r2, [r7, #24]
 8015812:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8015814:	683b      	ldr	r3, [r7, #0]
 8015816:	685b      	ldr	r3, [r3, #4]
 8015818:	2b02      	cmp	r3, #2
 801581a:	d003      	beq.n	8015824 <HAL_GPIO_Init+0xfc>
 801581c:	683b      	ldr	r3, [r7, #0]
 801581e:	685b      	ldr	r3, [r3, #4]
 8015820:	2b12      	cmp	r3, #18
 8015822:	d123      	bne.n	801586c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015824:	69fb      	ldr	r3, [r7, #28]
 8015826:	08da      	lsrs	r2, r3, #3
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	3208      	adds	r2, #8
 801582c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015830:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8015832:	69fb      	ldr	r3, [r7, #28]
 8015834:	f003 0307 	and.w	r3, r3, #7
 8015838:	009b      	lsls	r3, r3, #2
 801583a:	220f      	movs	r2, #15
 801583c:	fa02 f303 	lsl.w	r3, r2, r3
 8015840:	43db      	mvns	r3, r3
 8015842:	69ba      	ldr	r2, [r7, #24]
 8015844:	4013      	ands	r3, r2
 8015846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8015848:	683b      	ldr	r3, [r7, #0]
 801584a:	691a      	ldr	r2, [r3, #16]
 801584c:	69fb      	ldr	r3, [r7, #28]
 801584e:	f003 0307 	and.w	r3, r3, #7
 8015852:	009b      	lsls	r3, r3, #2
 8015854:	fa02 f303 	lsl.w	r3, r2, r3
 8015858:	69ba      	ldr	r2, [r7, #24]
 801585a:	4313      	orrs	r3, r2
 801585c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801585e:	69fb      	ldr	r3, [r7, #28]
 8015860:	08da      	lsrs	r2, r3, #3
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	3208      	adds	r2, #8
 8015866:	69b9      	ldr	r1, [r7, #24]
 8015868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8015872:	69fb      	ldr	r3, [r7, #28]
 8015874:	005b      	lsls	r3, r3, #1
 8015876:	2203      	movs	r2, #3
 8015878:	fa02 f303 	lsl.w	r3, r2, r3
 801587c:	43db      	mvns	r3, r3
 801587e:	69ba      	ldr	r2, [r7, #24]
 8015880:	4013      	ands	r3, r2
 8015882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015884:	683b      	ldr	r3, [r7, #0]
 8015886:	685b      	ldr	r3, [r3, #4]
 8015888:	f003 0203 	and.w	r2, r3, #3
 801588c:	69fb      	ldr	r3, [r7, #28]
 801588e:	005b      	lsls	r3, r3, #1
 8015890:	fa02 f303 	lsl.w	r3, r2, r3
 8015894:	69ba      	ldr	r2, [r7, #24]
 8015896:	4313      	orrs	r3, r2
 8015898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	69ba      	ldr	r2, [r7, #24]
 801589e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80158a0:	683b      	ldr	r3, [r7, #0]
 80158a2:	685b      	ldr	r3, [r3, #4]
 80158a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	f000 80a2 	beq.w	80159f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80158ae:	2300      	movs	r3, #0
 80158b0:	60fb      	str	r3, [r7, #12]
 80158b2:	4b56      	ldr	r3, [pc, #344]	; (8015a0c <HAL_GPIO_Init+0x2e4>)
 80158b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158b6:	4a55      	ldr	r2, [pc, #340]	; (8015a0c <HAL_GPIO_Init+0x2e4>)
 80158b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80158bc:	6453      	str	r3, [r2, #68]	; 0x44
 80158be:	4b53      	ldr	r3, [pc, #332]	; (8015a0c <HAL_GPIO_Init+0x2e4>)
 80158c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80158c6:	60fb      	str	r3, [r7, #12]
 80158c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80158ca:	4a51      	ldr	r2, [pc, #324]	; (8015a10 <HAL_GPIO_Init+0x2e8>)
 80158cc:	69fb      	ldr	r3, [r7, #28]
 80158ce:	089b      	lsrs	r3, r3, #2
 80158d0:	3302      	adds	r3, #2
 80158d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80158d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80158d8:	69fb      	ldr	r3, [r7, #28]
 80158da:	f003 0303 	and.w	r3, r3, #3
 80158de:	009b      	lsls	r3, r3, #2
 80158e0:	220f      	movs	r2, #15
 80158e2:	fa02 f303 	lsl.w	r3, r2, r3
 80158e6:	43db      	mvns	r3, r3
 80158e8:	69ba      	ldr	r2, [r7, #24]
 80158ea:	4013      	ands	r3, r2
 80158ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	4a48      	ldr	r2, [pc, #288]	; (8015a14 <HAL_GPIO_Init+0x2ec>)
 80158f2:	4293      	cmp	r3, r2
 80158f4:	d019      	beq.n	801592a <HAL_GPIO_Init+0x202>
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	4a47      	ldr	r2, [pc, #284]	; (8015a18 <HAL_GPIO_Init+0x2f0>)
 80158fa:	4293      	cmp	r3, r2
 80158fc:	d013      	beq.n	8015926 <HAL_GPIO_Init+0x1fe>
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	4a46      	ldr	r2, [pc, #280]	; (8015a1c <HAL_GPIO_Init+0x2f4>)
 8015902:	4293      	cmp	r3, r2
 8015904:	d00d      	beq.n	8015922 <HAL_GPIO_Init+0x1fa>
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	4a45      	ldr	r2, [pc, #276]	; (8015a20 <HAL_GPIO_Init+0x2f8>)
 801590a:	4293      	cmp	r3, r2
 801590c:	d007      	beq.n	801591e <HAL_GPIO_Init+0x1f6>
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	4a44      	ldr	r2, [pc, #272]	; (8015a24 <HAL_GPIO_Init+0x2fc>)
 8015912:	4293      	cmp	r3, r2
 8015914:	d101      	bne.n	801591a <HAL_GPIO_Init+0x1f2>
 8015916:	2304      	movs	r3, #4
 8015918:	e008      	b.n	801592c <HAL_GPIO_Init+0x204>
 801591a:	2307      	movs	r3, #7
 801591c:	e006      	b.n	801592c <HAL_GPIO_Init+0x204>
 801591e:	2303      	movs	r3, #3
 8015920:	e004      	b.n	801592c <HAL_GPIO_Init+0x204>
 8015922:	2302      	movs	r3, #2
 8015924:	e002      	b.n	801592c <HAL_GPIO_Init+0x204>
 8015926:	2301      	movs	r3, #1
 8015928:	e000      	b.n	801592c <HAL_GPIO_Init+0x204>
 801592a:	2300      	movs	r3, #0
 801592c:	69fa      	ldr	r2, [r7, #28]
 801592e:	f002 0203 	and.w	r2, r2, #3
 8015932:	0092      	lsls	r2, r2, #2
 8015934:	4093      	lsls	r3, r2
 8015936:	69ba      	ldr	r2, [r7, #24]
 8015938:	4313      	orrs	r3, r2
 801593a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801593c:	4934      	ldr	r1, [pc, #208]	; (8015a10 <HAL_GPIO_Init+0x2e8>)
 801593e:	69fb      	ldr	r3, [r7, #28]
 8015940:	089b      	lsrs	r3, r3, #2
 8015942:	3302      	adds	r3, #2
 8015944:	69ba      	ldr	r2, [r7, #24]
 8015946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801594a:	4b37      	ldr	r3, [pc, #220]	; (8015a28 <HAL_GPIO_Init+0x300>)
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015950:	693b      	ldr	r3, [r7, #16]
 8015952:	43db      	mvns	r3, r3
 8015954:	69ba      	ldr	r2, [r7, #24]
 8015956:	4013      	ands	r3, r2
 8015958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801595a:	683b      	ldr	r3, [r7, #0]
 801595c:	685b      	ldr	r3, [r3, #4]
 801595e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015962:	2b00      	cmp	r3, #0
 8015964:	d003      	beq.n	801596e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8015966:	69ba      	ldr	r2, [r7, #24]
 8015968:	693b      	ldr	r3, [r7, #16]
 801596a:	4313      	orrs	r3, r2
 801596c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801596e:	4a2e      	ldr	r2, [pc, #184]	; (8015a28 <HAL_GPIO_Init+0x300>)
 8015970:	69bb      	ldr	r3, [r7, #24]
 8015972:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8015974:	4b2c      	ldr	r3, [pc, #176]	; (8015a28 <HAL_GPIO_Init+0x300>)
 8015976:	685b      	ldr	r3, [r3, #4]
 8015978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801597a:	693b      	ldr	r3, [r7, #16]
 801597c:	43db      	mvns	r3, r3
 801597e:	69ba      	ldr	r2, [r7, #24]
 8015980:	4013      	ands	r3, r2
 8015982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8015984:	683b      	ldr	r3, [r7, #0]
 8015986:	685b      	ldr	r3, [r3, #4]
 8015988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801598c:	2b00      	cmp	r3, #0
 801598e:	d003      	beq.n	8015998 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8015990:	69ba      	ldr	r2, [r7, #24]
 8015992:	693b      	ldr	r3, [r7, #16]
 8015994:	4313      	orrs	r3, r2
 8015996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8015998:	4a23      	ldr	r2, [pc, #140]	; (8015a28 <HAL_GPIO_Init+0x300>)
 801599a:	69bb      	ldr	r3, [r7, #24]
 801599c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801599e:	4b22      	ldr	r3, [pc, #136]	; (8015a28 <HAL_GPIO_Init+0x300>)
 80159a0:	689b      	ldr	r3, [r3, #8]
 80159a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80159a4:	693b      	ldr	r3, [r7, #16]
 80159a6:	43db      	mvns	r3, r3
 80159a8:	69ba      	ldr	r2, [r7, #24]
 80159aa:	4013      	ands	r3, r2
 80159ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80159ae:	683b      	ldr	r3, [r7, #0]
 80159b0:	685b      	ldr	r3, [r3, #4]
 80159b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d003      	beq.n	80159c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80159ba:	69ba      	ldr	r2, [r7, #24]
 80159bc:	693b      	ldr	r3, [r7, #16]
 80159be:	4313      	orrs	r3, r2
 80159c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80159c2:	4a19      	ldr	r2, [pc, #100]	; (8015a28 <HAL_GPIO_Init+0x300>)
 80159c4:	69bb      	ldr	r3, [r7, #24]
 80159c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80159c8:	4b17      	ldr	r3, [pc, #92]	; (8015a28 <HAL_GPIO_Init+0x300>)
 80159ca:	68db      	ldr	r3, [r3, #12]
 80159cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80159ce:	693b      	ldr	r3, [r7, #16]
 80159d0:	43db      	mvns	r3, r3
 80159d2:	69ba      	ldr	r2, [r7, #24]
 80159d4:	4013      	ands	r3, r2
 80159d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80159d8:	683b      	ldr	r3, [r7, #0]
 80159da:	685b      	ldr	r3, [r3, #4]
 80159dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d003      	beq.n	80159ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80159e4:	69ba      	ldr	r2, [r7, #24]
 80159e6:	693b      	ldr	r3, [r7, #16]
 80159e8:	4313      	orrs	r3, r2
 80159ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80159ec:	4a0e      	ldr	r2, [pc, #56]	; (8015a28 <HAL_GPIO_Init+0x300>)
 80159ee:	69bb      	ldr	r3, [r7, #24]
 80159f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80159f2:	69fb      	ldr	r3, [r7, #28]
 80159f4:	3301      	adds	r3, #1
 80159f6:	61fb      	str	r3, [r7, #28]
 80159f8:	69fb      	ldr	r3, [r7, #28]
 80159fa:	2b0f      	cmp	r3, #15
 80159fc:	f67f aea2 	bls.w	8015744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8015a00:	bf00      	nop
 8015a02:	3724      	adds	r7, #36	; 0x24
 8015a04:	46bd      	mov	sp, r7
 8015a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a0a:	4770      	bx	lr
 8015a0c:	40023800 	.word	0x40023800
 8015a10:	40013800 	.word	0x40013800
 8015a14:	40020000 	.word	0x40020000
 8015a18:	40020400 	.word	0x40020400
 8015a1c:	40020800 	.word	0x40020800
 8015a20:	40020c00 	.word	0x40020c00
 8015a24:	40021000 	.word	0x40021000
 8015a28:	40013c00 	.word	0x40013c00

08015a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015a2c:	b480      	push	{r7}
 8015a2e:	b083      	sub	sp, #12
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
 8015a34:	460b      	mov	r3, r1
 8015a36:	807b      	strh	r3, [r7, #2]
 8015a38:	4613      	mov	r3, r2
 8015a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8015a3c:	787b      	ldrb	r3, [r7, #1]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d003      	beq.n	8015a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015a42:	887a      	ldrh	r2, [r7, #2]
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8015a48:	e003      	b.n	8015a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8015a4a:	887b      	ldrh	r3, [r7, #2]
 8015a4c:	041a      	lsls	r2, r3, #16
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	619a      	str	r2, [r3, #24]
}
 8015a52:	bf00      	nop
 8015a54:	370c      	adds	r7, #12
 8015a56:	46bd      	mov	sp, r7
 8015a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5c:	4770      	bx	lr
	...

08015a60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b082      	sub	sp, #8
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	4603      	mov	r3, r0
 8015a68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8015a6a:	4b08      	ldr	r3, [pc, #32]	; (8015a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8015a6c:	695a      	ldr	r2, [r3, #20]
 8015a6e:	88fb      	ldrh	r3, [r7, #6]
 8015a70:	4013      	ands	r3, r2
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d006      	beq.n	8015a84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8015a76:	4a05      	ldr	r2, [pc, #20]	; (8015a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8015a78:	88fb      	ldrh	r3, [r7, #6]
 8015a7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8015a7c:	88fb      	ldrh	r3, [r7, #6]
 8015a7e:	4618      	mov	r0, r3
 8015a80:	f7fd fc52 	bl	8013328 <HAL_GPIO_EXTI_Callback>
  }
}
 8015a84:	bf00      	nop
 8015a86:	3708      	adds	r7, #8
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}
 8015a8c:	40013c00 	.word	0x40013c00

08015a90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b084      	sub	sp, #16
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d101      	bne.n	8015aa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015a9e:	2301      	movs	r3, #1
 8015aa0:	e11f      	b.n	8015ce2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015aa8:	b2db      	uxtb	r3, r3
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d106      	bne.n	8015abc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8015ab6:	6878      	ldr	r0, [r7, #4]
 8015ab8:	f7fd fed8 	bl	801386c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	2224      	movs	r2, #36	; 0x24
 8015ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	681a      	ldr	r2, [r3, #0]
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	f022 0201 	bic.w	r2, r2, #1
 8015ad2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	681a      	ldr	r2, [r3, #0]
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	681a      	ldr	r2, [r3, #0]
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8015af4:	f003 fad8 	bl	80190a8 <HAL_RCC_GetPCLK1Freq>
 8015af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	685b      	ldr	r3, [r3, #4]
 8015afe:	4a7b      	ldr	r2, [pc, #492]	; (8015cec <HAL_I2C_Init+0x25c>)
 8015b00:	4293      	cmp	r3, r2
 8015b02:	d807      	bhi.n	8015b14 <HAL_I2C_Init+0x84>
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	4a7a      	ldr	r2, [pc, #488]	; (8015cf0 <HAL_I2C_Init+0x260>)
 8015b08:	4293      	cmp	r3, r2
 8015b0a:	bf94      	ite	ls
 8015b0c:	2301      	movls	r3, #1
 8015b0e:	2300      	movhi	r3, #0
 8015b10:	b2db      	uxtb	r3, r3
 8015b12:	e006      	b.n	8015b22 <HAL_I2C_Init+0x92>
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	4a77      	ldr	r2, [pc, #476]	; (8015cf4 <HAL_I2C_Init+0x264>)
 8015b18:	4293      	cmp	r3, r2
 8015b1a:	bf94      	ite	ls
 8015b1c:	2301      	movls	r3, #1
 8015b1e:	2300      	movhi	r3, #0
 8015b20:	b2db      	uxtb	r3, r3
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d001      	beq.n	8015b2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8015b26:	2301      	movs	r3, #1
 8015b28:	e0db      	b.n	8015ce2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	4a72      	ldr	r2, [pc, #456]	; (8015cf8 <HAL_I2C_Init+0x268>)
 8015b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8015b32:	0c9b      	lsrs	r3, r3, #18
 8015b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	685b      	ldr	r3, [r3, #4]
 8015b3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	68ba      	ldr	r2, [r7, #8]
 8015b46:	430a      	orrs	r2, r1
 8015b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	6a1b      	ldr	r3, [r3, #32]
 8015b50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	685b      	ldr	r3, [r3, #4]
 8015b58:	4a64      	ldr	r2, [pc, #400]	; (8015cec <HAL_I2C_Init+0x25c>)
 8015b5a:	4293      	cmp	r3, r2
 8015b5c:	d802      	bhi.n	8015b64 <HAL_I2C_Init+0xd4>
 8015b5e:	68bb      	ldr	r3, [r7, #8]
 8015b60:	3301      	adds	r3, #1
 8015b62:	e009      	b.n	8015b78 <HAL_I2C_Init+0xe8>
 8015b64:	68bb      	ldr	r3, [r7, #8]
 8015b66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8015b6a:	fb02 f303 	mul.w	r3, r2, r3
 8015b6e:	4a63      	ldr	r2, [pc, #396]	; (8015cfc <HAL_I2C_Init+0x26c>)
 8015b70:	fba2 2303 	umull	r2, r3, r2, r3
 8015b74:	099b      	lsrs	r3, r3, #6
 8015b76:	3301      	adds	r3, #1
 8015b78:	687a      	ldr	r2, [r7, #4]
 8015b7a:	6812      	ldr	r2, [r2, #0]
 8015b7c:	430b      	orrs	r3, r1
 8015b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	69db      	ldr	r3, [r3, #28]
 8015b86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8015b8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	685b      	ldr	r3, [r3, #4]
 8015b92:	4956      	ldr	r1, [pc, #344]	; (8015cec <HAL_I2C_Init+0x25c>)
 8015b94:	428b      	cmp	r3, r1
 8015b96:	d80d      	bhi.n	8015bb4 <HAL_I2C_Init+0x124>
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	1e59      	subs	r1, r3, #1
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	685b      	ldr	r3, [r3, #4]
 8015ba0:	005b      	lsls	r3, r3, #1
 8015ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8015ba6:	3301      	adds	r3, #1
 8015ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015bac:	2b04      	cmp	r3, #4
 8015bae:	bf38      	it	cc
 8015bb0:	2304      	movcc	r3, #4
 8015bb2:	e04f      	b.n	8015c54 <HAL_I2C_Init+0x1c4>
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	689b      	ldr	r3, [r3, #8]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d111      	bne.n	8015be0 <HAL_I2C_Init+0x150>
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	1e58      	subs	r0, r3, #1
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	6859      	ldr	r1, [r3, #4]
 8015bc4:	460b      	mov	r3, r1
 8015bc6:	005b      	lsls	r3, r3, #1
 8015bc8:	440b      	add	r3, r1
 8015bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8015bce:	3301      	adds	r3, #1
 8015bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	bf0c      	ite	eq
 8015bd8:	2301      	moveq	r3, #1
 8015bda:	2300      	movne	r3, #0
 8015bdc:	b2db      	uxtb	r3, r3
 8015bde:	e012      	b.n	8015c06 <HAL_I2C_Init+0x176>
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	1e58      	subs	r0, r3, #1
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	6859      	ldr	r1, [r3, #4]
 8015be8:	460b      	mov	r3, r1
 8015bea:	009b      	lsls	r3, r3, #2
 8015bec:	440b      	add	r3, r1
 8015bee:	0099      	lsls	r1, r3, #2
 8015bf0:	440b      	add	r3, r1
 8015bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8015bf6:	3301      	adds	r3, #1
 8015bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	bf0c      	ite	eq
 8015c00:	2301      	moveq	r3, #1
 8015c02:	2300      	movne	r3, #0
 8015c04:	b2db      	uxtb	r3, r3
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d001      	beq.n	8015c0e <HAL_I2C_Init+0x17e>
 8015c0a:	2301      	movs	r3, #1
 8015c0c:	e022      	b.n	8015c54 <HAL_I2C_Init+0x1c4>
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	689b      	ldr	r3, [r3, #8]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d10e      	bne.n	8015c34 <HAL_I2C_Init+0x1a4>
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	1e58      	subs	r0, r3, #1
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	6859      	ldr	r1, [r3, #4]
 8015c1e:	460b      	mov	r3, r1
 8015c20:	005b      	lsls	r3, r3, #1
 8015c22:	440b      	add	r3, r1
 8015c24:	fbb0 f3f3 	udiv	r3, r0, r3
 8015c28:	3301      	adds	r3, #1
 8015c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015c32:	e00f      	b.n	8015c54 <HAL_I2C_Init+0x1c4>
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	1e58      	subs	r0, r3, #1
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	6859      	ldr	r1, [r3, #4]
 8015c3c:	460b      	mov	r3, r1
 8015c3e:	009b      	lsls	r3, r3, #2
 8015c40:	440b      	add	r3, r1
 8015c42:	0099      	lsls	r1, r3, #2
 8015c44:	440b      	add	r3, r1
 8015c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8015c4a:	3301      	adds	r3, #1
 8015c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015c50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8015c54:	6879      	ldr	r1, [r7, #4]
 8015c56:	6809      	ldr	r1, [r1, #0]
 8015c58:	4313      	orrs	r3, r2
 8015c5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	69da      	ldr	r2, [r3, #28]
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	6a1b      	ldr	r3, [r3, #32]
 8015c6e:	431a      	orrs	r2, r3
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	430a      	orrs	r2, r1
 8015c76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	689b      	ldr	r3, [r3, #8]
 8015c7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8015c82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8015c86:	687a      	ldr	r2, [r7, #4]
 8015c88:	6911      	ldr	r1, [r2, #16]
 8015c8a:	687a      	ldr	r2, [r7, #4]
 8015c8c:	68d2      	ldr	r2, [r2, #12]
 8015c8e:	4311      	orrs	r1, r2
 8015c90:	687a      	ldr	r2, [r7, #4]
 8015c92:	6812      	ldr	r2, [r2, #0]
 8015c94:	430b      	orrs	r3, r1
 8015c96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	68db      	ldr	r3, [r3, #12]
 8015c9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	695a      	ldr	r2, [r3, #20]
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	699b      	ldr	r3, [r3, #24]
 8015caa:	431a      	orrs	r2, r3
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	430a      	orrs	r2, r1
 8015cb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	681a      	ldr	r2, [r3, #0]
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	f042 0201 	orr.w	r2, r2, #1
 8015cc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	2220      	movs	r2, #32
 8015cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	2200      	movs	r2, #0
 8015cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	2200      	movs	r2, #0
 8015cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015ce0:	2300      	movs	r3, #0
}
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	3710      	adds	r7, #16
 8015ce6:	46bd      	mov	sp, r7
 8015ce8:	bd80      	pop	{r7, pc}
 8015cea:	bf00      	nop
 8015cec:	000186a0 	.word	0x000186a0
 8015cf0:	001e847f 	.word	0x001e847f
 8015cf4:	003d08ff 	.word	0x003d08ff
 8015cf8:	431bde83 	.word	0x431bde83
 8015cfc:	10624dd3 	.word	0x10624dd3

08015d00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b088      	sub	sp, #32
 8015d04:	af02      	add	r7, sp, #8
 8015d06:	60f8      	str	r0, [r7, #12]
 8015d08:	4608      	mov	r0, r1
 8015d0a:	4611      	mov	r1, r2
 8015d0c:	461a      	mov	r2, r3
 8015d0e:	4603      	mov	r3, r0
 8015d10:	817b      	strh	r3, [r7, #10]
 8015d12:	460b      	mov	r3, r1
 8015d14:	813b      	strh	r3, [r7, #8]
 8015d16:	4613      	mov	r3, r2
 8015d18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8015d1a:	f7ff f84b 	bl	8014db4 <HAL_GetTick>
 8015d1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015d26:	b2db      	uxtb	r3, r3
 8015d28:	2b20      	cmp	r3, #32
 8015d2a:	f040 80d9 	bne.w	8015ee0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8015d2e:	697b      	ldr	r3, [r7, #20]
 8015d30:	9300      	str	r3, [sp, #0]
 8015d32:	2319      	movs	r3, #25
 8015d34:	2201      	movs	r2, #1
 8015d36:	496d      	ldr	r1, [pc, #436]	; (8015eec <HAL_I2C_Mem_Write+0x1ec>)
 8015d38:	68f8      	ldr	r0, [r7, #12]
 8015d3a:	f002 fb82 	bl	8018442 <I2C_WaitOnFlagUntilTimeout>
 8015d3e:	4603      	mov	r3, r0
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d001      	beq.n	8015d48 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8015d44:	2302      	movs	r3, #2
 8015d46:	e0cc      	b.n	8015ee2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015d4e:	2b01      	cmp	r3, #1
 8015d50:	d101      	bne.n	8015d56 <HAL_I2C_Mem_Write+0x56>
 8015d52:	2302      	movs	r3, #2
 8015d54:	e0c5      	b.n	8015ee2 <HAL_I2C_Mem_Write+0x1e2>
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	2201      	movs	r2, #1
 8015d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	f003 0301 	and.w	r3, r3, #1
 8015d68:	2b01      	cmp	r3, #1
 8015d6a:	d007      	beq.n	8015d7c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	681a      	ldr	r2, [r3, #0]
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	f042 0201 	orr.w	r2, r2, #1
 8015d7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	681a      	ldr	r2, [r3, #0]
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015d8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	2221      	movs	r2, #33	; 0x21
 8015d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	2240      	movs	r2, #64	; 0x40
 8015d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	2200      	movs	r2, #0
 8015da0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	6a3a      	ldr	r2, [r7, #32]
 8015da6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015dac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015db2:	b29a      	uxth	r2, r3
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	4a4d      	ldr	r2, [pc, #308]	; (8015ef0 <HAL_I2C_Mem_Write+0x1f0>)
 8015dbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8015dbe:	88f8      	ldrh	r0, [r7, #6]
 8015dc0:	893a      	ldrh	r2, [r7, #8]
 8015dc2:	8979      	ldrh	r1, [r7, #10]
 8015dc4:	697b      	ldr	r3, [r7, #20]
 8015dc6:	9301      	str	r3, [sp, #4]
 8015dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dca:	9300      	str	r3, [sp, #0]
 8015dcc:	4603      	mov	r3, r0
 8015dce:	68f8      	ldr	r0, [r7, #12]
 8015dd0:	f002 f82c 	bl	8017e2c <I2C_RequestMemoryWrite>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d052      	beq.n	8015e80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8015dda:	2301      	movs	r3, #1
 8015ddc:	e081      	b.n	8015ee2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015dde:	697a      	ldr	r2, [r7, #20]
 8015de0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015de2:	68f8      	ldr	r0, [r7, #12]
 8015de4:	f002 fc03 	bl	80185ee <I2C_WaitOnTXEFlagUntilTimeout>
 8015de8:	4603      	mov	r3, r0
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d00d      	beq.n	8015e0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015df2:	2b04      	cmp	r3, #4
 8015df4:	d107      	bne.n	8015e06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	681a      	ldr	r2, [r3, #0]
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015e04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8015e06:	2301      	movs	r3, #1
 8015e08:	e06b      	b.n	8015ee2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e0e:	781a      	ldrb	r2, [r3, #0]
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e1a:	1c5a      	adds	r2, r3, #1
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e24:	3b01      	subs	r3, #1
 8015e26:	b29a      	uxth	r2, r3
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e30:	b29b      	uxth	r3, r3
 8015e32:	3b01      	subs	r3, #1
 8015e34:	b29a      	uxth	r2, r3
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	695b      	ldr	r3, [r3, #20]
 8015e40:	f003 0304 	and.w	r3, r3, #4
 8015e44:	2b04      	cmp	r3, #4
 8015e46:	d11b      	bne.n	8015e80 <HAL_I2C_Mem_Write+0x180>
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d017      	beq.n	8015e80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e54:	781a      	ldrb	r2, [r3, #0]
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e60:	1c5a      	adds	r2, r3, #1
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e6a:	3b01      	subs	r3, #1
 8015e6c:	b29a      	uxth	r2, r3
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e76:	b29b      	uxth	r3, r3
 8015e78:	3b01      	subs	r3, #1
 8015e7a:	b29a      	uxth	r2, r3
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d1aa      	bne.n	8015dde <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015e88:	697a      	ldr	r2, [r7, #20]
 8015e8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015e8c:	68f8      	ldr	r0, [r7, #12]
 8015e8e:	f002 fbef 	bl	8018670 <I2C_WaitOnBTFFlagUntilTimeout>
 8015e92:	4603      	mov	r3, r0
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d00d      	beq.n	8015eb4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e9c:	2b04      	cmp	r3, #4
 8015e9e:	d107      	bne.n	8015eb0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	681a      	ldr	r2, [r3, #0]
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015eae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8015eb0:	2301      	movs	r3, #1
 8015eb2:	e016      	b.n	8015ee2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	681a      	ldr	r2, [r3, #0]
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015ec2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	2220      	movs	r2, #32
 8015ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	2200      	movs	r2, #0
 8015ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	2200      	movs	r2, #0
 8015ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8015edc:	2300      	movs	r3, #0
 8015ede:	e000      	b.n	8015ee2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8015ee0:	2302      	movs	r3, #2
  }
}
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	3718      	adds	r7, #24
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	bd80      	pop	{r7, pc}
 8015eea:	bf00      	nop
 8015eec:	00100002 	.word	0x00100002
 8015ef0:	ffff0000 	.word	0xffff0000

08015ef4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b08c      	sub	sp, #48	; 0x30
 8015ef8:	af02      	add	r7, sp, #8
 8015efa:	60f8      	str	r0, [r7, #12]
 8015efc:	4608      	mov	r0, r1
 8015efe:	4611      	mov	r1, r2
 8015f00:	461a      	mov	r2, r3
 8015f02:	4603      	mov	r3, r0
 8015f04:	817b      	strh	r3, [r7, #10]
 8015f06:	460b      	mov	r3, r1
 8015f08:	813b      	strh	r3, [r7, #8]
 8015f0a:	4613      	mov	r3, r2
 8015f0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8015f0e:	f7fe ff51 	bl	8014db4 <HAL_GetTick>
 8015f12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015f1a:	b2db      	uxtb	r3, r3
 8015f1c:	2b20      	cmp	r3, #32
 8015f1e:	f040 8208 	bne.w	8016332 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8015f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f24:	9300      	str	r3, [sp, #0]
 8015f26:	2319      	movs	r3, #25
 8015f28:	2201      	movs	r2, #1
 8015f2a:	497b      	ldr	r1, [pc, #492]	; (8016118 <HAL_I2C_Mem_Read+0x224>)
 8015f2c:	68f8      	ldr	r0, [r7, #12]
 8015f2e:	f002 fa88 	bl	8018442 <I2C_WaitOnFlagUntilTimeout>
 8015f32:	4603      	mov	r3, r0
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d001      	beq.n	8015f3c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8015f38:	2302      	movs	r3, #2
 8015f3a:	e1fb      	b.n	8016334 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015f42:	2b01      	cmp	r3, #1
 8015f44:	d101      	bne.n	8015f4a <HAL_I2C_Mem_Read+0x56>
 8015f46:	2302      	movs	r3, #2
 8015f48:	e1f4      	b.n	8016334 <HAL_I2C_Mem_Read+0x440>
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	2201      	movs	r2, #1
 8015f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	f003 0301 	and.w	r3, r3, #1
 8015f5c:	2b01      	cmp	r3, #1
 8015f5e:	d007      	beq.n	8015f70 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	681a      	ldr	r2, [r3, #0]
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	f042 0201 	orr.w	r2, r2, #1
 8015f6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	681a      	ldr	r2, [r3, #0]
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015f7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	2222      	movs	r2, #34	; 0x22
 8015f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	2240      	movs	r2, #64	; 0x40
 8015f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	2200      	movs	r2, #0
 8015f94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8015fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015fa6:	b29a      	uxth	r2, r3
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	4a5b      	ldr	r2, [pc, #364]	; (801611c <HAL_I2C_Mem_Read+0x228>)
 8015fb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8015fb2:	88f8      	ldrh	r0, [r7, #6]
 8015fb4:	893a      	ldrh	r2, [r7, #8]
 8015fb6:	8979      	ldrh	r1, [r7, #10]
 8015fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fba:	9301      	str	r3, [sp, #4]
 8015fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fbe:	9300      	str	r3, [sp, #0]
 8015fc0:	4603      	mov	r3, r0
 8015fc2:	68f8      	ldr	r0, [r7, #12]
 8015fc4:	f001 ffc6 	bl	8017f54 <I2C_RequestMemoryRead>
 8015fc8:	4603      	mov	r3, r0
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d001      	beq.n	8015fd2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8015fce:	2301      	movs	r3, #1
 8015fd0:	e1b0      	b.n	8016334 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d113      	bne.n	8016002 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8015fda:	2300      	movs	r3, #0
 8015fdc:	623b      	str	r3, [r7, #32]
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	695b      	ldr	r3, [r3, #20]
 8015fe4:	623b      	str	r3, [r7, #32]
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	699b      	ldr	r3, [r3, #24]
 8015fec:	623b      	str	r3, [r7, #32]
 8015fee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	681a      	ldr	r2, [r3, #0]
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015ffe:	601a      	str	r2, [r3, #0]
 8016000:	e184      	b.n	801630c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016006:	2b01      	cmp	r3, #1
 8016008:	d11b      	bne.n	8016042 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	681a      	ldr	r2, [r3, #0]
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016018:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801601a:	2300      	movs	r3, #0
 801601c:	61fb      	str	r3, [r7, #28]
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	695b      	ldr	r3, [r3, #20]
 8016024:	61fb      	str	r3, [r7, #28]
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	699b      	ldr	r3, [r3, #24]
 801602c:	61fb      	str	r3, [r7, #28]
 801602e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	681a      	ldr	r2, [r3, #0]
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801603e:	601a      	str	r2, [r3, #0]
 8016040:	e164      	b.n	801630c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016046:	2b02      	cmp	r3, #2
 8016048:	d11b      	bne.n	8016082 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	681a      	ldr	r2, [r3, #0]
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016058:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	681a      	ldr	r2, [r3, #0]
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8016068:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801606a:	2300      	movs	r3, #0
 801606c:	61bb      	str	r3, [r7, #24]
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	695b      	ldr	r3, [r3, #20]
 8016074:	61bb      	str	r3, [r7, #24]
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	699b      	ldr	r3, [r3, #24]
 801607c:	61bb      	str	r3, [r7, #24]
 801607e:	69bb      	ldr	r3, [r7, #24]
 8016080:	e144      	b.n	801630c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016082:	2300      	movs	r3, #0
 8016084:	617b      	str	r3, [r7, #20]
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	695b      	ldr	r3, [r3, #20]
 801608c:	617b      	str	r3, [r7, #20]
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	699b      	ldr	r3, [r3, #24]
 8016094:	617b      	str	r3, [r7, #20]
 8016096:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8016098:	e138      	b.n	801630c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801609e:	2b03      	cmp	r3, #3
 80160a0:	f200 80f1 	bhi.w	8016286 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80160a8:	2b01      	cmp	r3, #1
 80160aa:	d123      	bne.n	80160f4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80160ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80160b0:	68f8      	ldr	r0, [r7, #12]
 80160b2:	f002 fb1e 	bl	80186f2 <I2C_WaitOnRXNEFlagUntilTimeout>
 80160b6:	4603      	mov	r3, r0
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d001      	beq.n	80160c0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80160bc:	2301      	movs	r3, #1
 80160be:	e139      	b.n	8016334 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	691a      	ldr	r2, [r3, #16]
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160ca:	b2d2      	uxtb	r2, r2
 80160cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160d2:	1c5a      	adds	r2, r3, #1
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80160dc:	3b01      	subs	r3, #1
 80160de:	b29a      	uxth	r2, r3
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80160e8:	b29b      	uxth	r3, r3
 80160ea:	3b01      	subs	r3, #1
 80160ec:	b29a      	uxth	r2, r3
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80160f2:	e10b      	b.n	801630c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80160f8:	2b02      	cmp	r3, #2
 80160fa:	d14e      	bne.n	801619a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80160fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160fe:	9300      	str	r3, [sp, #0]
 8016100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016102:	2200      	movs	r2, #0
 8016104:	4906      	ldr	r1, [pc, #24]	; (8016120 <HAL_I2C_Mem_Read+0x22c>)
 8016106:	68f8      	ldr	r0, [r7, #12]
 8016108:	f002 f99b 	bl	8018442 <I2C_WaitOnFlagUntilTimeout>
 801610c:	4603      	mov	r3, r0
 801610e:	2b00      	cmp	r3, #0
 8016110:	d008      	beq.n	8016124 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8016112:	2301      	movs	r3, #1
 8016114:	e10e      	b.n	8016334 <HAL_I2C_Mem_Read+0x440>
 8016116:	bf00      	nop
 8016118:	00100002 	.word	0x00100002
 801611c:	ffff0000 	.word	0xffff0000
 8016120:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	681a      	ldr	r2, [r3, #0]
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	691a      	ldr	r2, [r3, #16]
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801613e:	b2d2      	uxtb	r2, r2
 8016140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016146:	1c5a      	adds	r2, r3, #1
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016150:	3b01      	subs	r3, #1
 8016152:	b29a      	uxth	r2, r3
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801615c:	b29b      	uxth	r3, r3
 801615e:	3b01      	subs	r3, #1
 8016160:	b29a      	uxth	r2, r3
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	691a      	ldr	r2, [r3, #16]
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016170:	b2d2      	uxtb	r2, r2
 8016172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016178:	1c5a      	adds	r2, r3, #1
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016182:	3b01      	subs	r3, #1
 8016184:	b29a      	uxth	r2, r3
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801618e:	b29b      	uxth	r3, r3
 8016190:	3b01      	subs	r3, #1
 8016192:	b29a      	uxth	r2, r3
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016198:	e0b8      	b.n	801630c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801619c:	9300      	str	r3, [sp, #0]
 801619e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161a0:	2200      	movs	r2, #0
 80161a2:	4966      	ldr	r1, [pc, #408]	; (801633c <HAL_I2C_Mem_Read+0x448>)
 80161a4:	68f8      	ldr	r0, [r7, #12]
 80161a6:	f002 f94c 	bl	8018442 <I2C_WaitOnFlagUntilTimeout>
 80161aa:	4603      	mov	r3, r0
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d001      	beq.n	80161b4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80161b0:	2301      	movs	r3, #1
 80161b2:	e0bf      	b.n	8016334 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	681a      	ldr	r2, [r3, #0]
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80161c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	691a      	ldr	r2, [r3, #16]
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161ce:	b2d2      	uxtb	r2, r2
 80161d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161d6:	1c5a      	adds	r2, r3, #1
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80161e0:	3b01      	subs	r3, #1
 80161e2:	b29a      	uxth	r2, r3
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80161ec:	b29b      	uxth	r3, r3
 80161ee:	3b01      	subs	r3, #1
 80161f0:	b29a      	uxth	r2, r3
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80161f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161f8:	9300      	str	r3, [sp, #0]
 80161fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161fc:	2200      	movs	r2, #0
 80161fe:	494f      	ldr	r1, [pc, #316]	; (801633c <HAL_I2C_Mem_Read+0x448>)
 8016200:	68f8      	ldr	r0, [r7, #12]
 8016202:	f002 f91e 	bl	8018442 <I2C_WaitOnFlagUntilTimeout>
 8016206:	4603      	mov	r3, r0
 8016208:	2b00      	cmp	r3, #0
 801620a:	d001      	beq.n	8016210 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 801620c:	2301      	movs	r3, #1
 801620e:	e091      	b.n	8016334 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	681a      	ldr	r2, [r3, #0]
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801621e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	691a      	ldr	r2, [r3, #16]
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801622a:	b2d2      	uxtb	r2, r2
 801622c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016232:	1c5a      	adds	r2, r3, #1
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801623c:	3b01      	subs	r3, #1
 801623e:	b29a      	uxth	r2, r3
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016248:	b29b      	uxth	r3, r3
 801624a:	3b01      	subs	r3, #1
 801624c:	b29a      	uxth	r2, r3
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	691a      	ldr	r2, [r3, #16]
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801625c:	b2d2      	uxtb	r2, r2
 801625e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016264:	1c5a      	adds	r2, r3, #1
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801626e:	3b01      	subs	r3, #1
 8016270:	b29a      	uxth	r2, r3
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801627a:	b29b      	uxth	r3, r3
 801627c:	3b01      	subs	r3, #1
 801627e:	b29a      	uxth	r2, r3
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016284:	e042      	b.n	801630c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016288:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801628a:	68f8      	ldr	r0, [r7, #12]
 801628c:	f002 fa31 	bl	80186f2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8016290:	4603      	mov	r3, r0
 8016292:	2b00      	cmp	r3, #0
 8016294:	d001      	beq.n	801629a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8016296:	2301      	movs	r3, #1
 8016298:	e04c      	b.n	8016334 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	691a      	ldr	r2, [r3, #16]
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162a4:	b2d2      	uxtb	r2, r2
 80162a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162ac:	1c5a      	adds	r2, r3, #1
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80162b6:	3b01      	subs	r3, #1
 80162b8:	b29a      	uxth	r2, r3
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80162c2:	b29b      	uxth	r3, r3
 80162c4:	3b01      	subs	r3, #1
 80162c6:	b29a      	uxth	r2, r3
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	695b      	ldr	r3, [r3, #20]
 80162d2:	f003 0304 	and.w	r3, r3, #4
 80162d6:	2b04      	cmp	r3, #4
 80162d8:	d118      	bne.n	801630c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	691a      	ldr	r2, [r3, #16]
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162e4:	b2d2      	uxtb	r2, r2
 80162e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162ec:	1c5a      	adds	r2, r3, #1
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80162f6:	3b01      	subs	r3, #1
 80162f8:	b29a      	uxth	r2, r3
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016302:	b29b      	uxth	r3, r3
 8016304:	3b01      	subs	r3, #1
 8016306:	b29a      	uxth	r2, r3
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016310:	2b00      	cmp	r3, #0
 8016312:	f47f aec2 	bne.w	801609a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	2220      	movs	r2, #32
 801631a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	2200      	movs	r2, #0
 8016322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	2200      	movs	r2, #0
 801632a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801632e:	2300      	movs	r3, #0
 8016330:	e000      	b.n	8016334 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8016332:	2302      	movs	r3, #2
  }
}
 8016334:	4618      	mov	r0, r3
 8016336:	3728      	adds	r7, #40	; 0x28
 8016338:	46bd      	mov	sp, r7
 801633a:	bd80      	pop	{r7, pc}
 801633c:	00010004 	.word	0x00010004

08016340 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8016340:	b480      	push	{r7}
 8016342:	b087      	sub	sp, #28
 8016344:	af00      	add	r7, sp, #0
 8016346:	60f8      	str	r0, [r7, #12]
 8016348:	4608      	mov	r0, r1
 801634a:	4611      	mov	r1, r2
 801634c:	461a      	mov	r2, r3
 801634e:	4603      	mov	r3, r0
 8016350:	817b      	strh	r3, [r7, #10]
 8016352:	460b      	mov	r3, r1
 8016354:	813b      	strh	r3, [r7, #8]
 8016356:	4613      	mov	r3, r2
 8016358:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 801635a:	2300      	movs	r3, #0
 801635c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016364:	b2db      	uxtb	r3, r3
 8016366:	2b20      	cmp	r3, #32
 8016368:	f040 809a 	bne.w	80164a0 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801636c:	4b50      	ldr	r3, [pc, #320]	; (80164b0 <HAL_I2C_Mem_Read_IT+0x170>)
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	08db      	lsrs	r3, r3, #3
 8016372:	4a50      	ldr	r2, [pc, #320]	; (80164b4 <HAL_I2C_Mem_Read_IT+0x174>)
 8016374:	fba2 2303 	umull	r2, r3, r2, r3
 8016378:	0a1a      	lsrs	r2, r3, #8
 801637a:	4613      	mov	r3, r2
 801637c:	009b      	lsls	r3, r3, #2
 801637e:	4413      	add	r3, r2
 8016380:	009a      	lsls	r2, r3, #2
 8016382:	4413      	add	r3, r2
 8016384:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8016386:	697b      	ldr	r3, [r7, #20]
 8016388:	3b01      	subs	r3, #1
 801638a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801638c:	697b      	ldr	r3, [r7, #20]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d116      	bne.n	80163c0 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	2200      	movs	r2, #0
 8016396:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	2220      	movs	r2, #32
 801639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	2200      	movs	r2, #0
 80163a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80163ac:	f043 0220 	orr.w	r2, r3, #32
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	2200      	movs	r2, #0
 80163b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80163bc:	2301      	movs	r3, #1
 80163be:	e070      	b.n	80164a2 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	699b      	ldr	r3, [r3, #24]
 80163c6:	f003 0302 	and.w	r3, r3, #2
 80163ca:	2b02      	cmp	r3, #2
 80163cc:	d0db      	beq.n	8016386 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80163d4:	2b01      	cmp	r3, #1
 80163d6:	d101      	bne.n	80163dc <HAL_I2C_Mem_Read_IT+0x9c>
 80163d8:	2302      	movs	r3, #2
 80163da:	e062      	b.n	80164a2 <HAL_I2C_Mem_Read_IT+0x162>
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	2201      	movs	r2, #1
 80163e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	f003 0301 	and.w	r3, r3, #1
 80163ee:	2b01      	cmp	r3, #1
 80163f0:	d007      	beq.n	8016402 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	681a      	ldr	r2, [r3, #0]
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	f042 0201 	orr.w	r2, r2, #1
 8016400:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	681a      	ldr	r2, [r3, #0]
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8016410:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	2222      	movs	r2, #34	; 0x22
 8016416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	2240      	movs	r2, #64	; 0x40
 801641e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	2200      	movs	r2, #0
 8016426:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	6a3a      	ldr	r2, [r7, #32]
 801642c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016432:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016438:	b29a      	uxth	r2, r3
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	4a1d      	ldr	r2, [pc, #116]	; (80164b8 <HAL_I2C_Mem_Read_IT+0x178>)
 8016442:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8016444:	897a      	ldrh	r2, [r7, #10]
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801644a:	893a      	ldrh	r2, [r7, #8]
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8016450:	88fa      	ldrh	r2, [r7, #6]
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	2200      	movs	r2, #0
 801645a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	681a      	ldr	r2, [r3, #0]
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801646a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	681a      	ldr	r2, [r3, #0]
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801647a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	2200      	movs	r2, #0
 8016480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016488:	2b00      	cmp	r3, #0
 801648a:	d007      	beq.n	801649c <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	685a      	ldr	r2, [r3, #4]
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801649a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 801649c:	2300      	movs	r3, #0
 801649e:	e000      	b.n	80164a2 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80164a0:	2302      	movs	r3, #2
  }
}
 80164a2:	4618      	mov	r0, r3
 80164a4:	371c      	adds	r7, #28
 80164a6:	46bd      	mov	sp, r7
 80164a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ac:	4770      	bx	lr
 80164ae:	bf00      	nop
 80164b0:	20000678 	.word	0x20000678
 80164b4:	14f8b589 	.word	0x14f8b589
 80164b8:	ffff0000 	.word	0xffff0000

080164bc <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	b08c      	sub	sp, #48	; 0x30
 80164c0:	af02      	add	r7, sp, #8
 80164c2:	60f8      	str	r0, [r7, #12]
 80164c4:	4608      	mov	r0, r1
 80164c6:	4611      	mov	r1, r2
 80164c8:	461a      	mov	r2, r3
 80164ca:	4603      	mov	r3, r0
 80164cc:	817b      	strh	r3, [r7, #10]
 80164ce:	460b      	mov	r3, r1
 80164d0:	813b      	strh	r3, [r7, #8]
 80164d2:	4613      	mov	r3, r2
 80164d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80164d6:	f7fe fc6d 	bl	8014db4 <HAL_GetTick>
 80164da:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 80164dc:	2300      	movs	r3, #0
 80164de:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80164e6:	b2db      	uxtb	r3, r3
 80164e8:	2b20      	cmp	r3, #32
 80164ea:	f040 8123 	bne.w	8016734 <HAL_I2C_Mem_Read_DMA+0x278>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80164ee:	4b94      	ldr	r3, [pc, #592]	; (8016740 <HAL_I2C_Mem_Read_DMA+0x284>)
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	08db      	lsrs	r3, r3, #3
 80164f4:	4a93      	ldr	r2, [pc, #588]	; (8016744 <HAL_I2C_Mem_Read_DMA+0x288>)
 80164f6:	fba2 2303 	umull	r2, r3, r2, r3
 80164fa:	0a1a      	lsrs	r2, r3, #8
 80164fc:	4613      	mov	r3, r2
 80164fe:	009b      	lsls	r3, r3, #2
 8016500:	4413      	add	r3, r2
 8016502:	009a      	lsls	r2, r3, #2
 8016504:	4413      	add	r3, r2
 8016506:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8016508:	69fb      	ldr	r3, [r7, #28]
 801650a:	3b01      	subs	r3, #1
 801650c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 801650e:	69fb      	ldr	r3, [r7, #28]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d116      	bne.n	8016542 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	2200      	movs	r2, #0
 8016518:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	2220      	movs	r2, #32
 801651e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	2200      	movs	r2, #0
 8016526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801652e:	f043 0220 	orr.w	r2, r3, #32
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	2200      	movs	r2, #0
 801653a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801653e:	2301      	movs	r3, #1
 8016540:	e0f9      	b.n	8016736 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	699b      	ldr	r3, [r3, #24]
 8016548:	f003 0302 	and.w	r3, r3, #2
 801654c:	2b02      	cmp	r3, #2
 801654e:	d0db      	beq.n	8016508 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016556:	2b01      	cmp	r3, #1
 8016558:	d101      	bne.n	801655e <HAL_I2C_Mem_Read_DMA+0xa2>
 801655a:	2302      	movs	r3, #2
 801655c:	e0eb      	b.n	8016736 <HAL_I2C_Mem_Read_DMA+0x27a>
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	2201      	movs	r2, #1
 8016562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	f003 0301 	and.w	r3, r3, #1
 8016570:	2b01      	cmp	r3, #1
 8016572:	d007      	beq.n	8016584 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	681a      	ldr	r2, [r3, #0]
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	f042 0201 	orr.w	r2, r2, #1
 8016582:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	681a      	ldr	r2, [r3, #0]
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8016592:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	2222      	movs	r2, #34	; 0x22
 8016598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	2240      	movs	r2, #64	; 0x40
 80165a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	2200      	movs	r2, #0
 80165a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80165ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80165b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80165ba:	b29a      	uxth	r2, r3
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	4a61      	ldr	r2, [pc, #388]	; (8016748 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80165c4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	f000 8085 	beq.w	80166da <HAL_I2C_Mem_Read_DMA+0x21e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165d4:	4a5d      	ldr	r2, [pc, #372]	; (801674c <HAL_I2C_Mem_Read_DMA+0x290>)
 80165d6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165dc:	4a5c      	ldr	r2, [pc, #368]	; (8016750 <HAL_I2C_Mem_Read_DMA+0x294>)
 80165de:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165e4:	2200      	movs	r2, #0
 80165e6:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165ec:	2200      	movs	r2, #0
 80165ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165f4:	2200      	movs	r2, #0
 80165f6:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165fc:	2200      	movs	r2, #0
 80165fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	3310      	adds	r3, #16
 801660a:	4619      	mov	r1, r3
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016610:	461a      	mov	r2, r3
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016616:	f7fe fd8b 	bl	8015130 <HAL_DMA_Start_IT>
 801661a:	4603      	mov	r3, r0
 801661c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 8016620:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016624:	2b00      	cmp	r3, #0
 8016626:	d144      	bne.n	80166b2 <HAL_I2C_Mem_Read_DMA+0x1f6>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8016628:	88f8      	ldrh	r0, [r7, #6]
 801662a:	893a      	ldrh	r2, [r7, #8]
 801662c:	8979      	ldrh	r1, [r7, #10]
 801662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016630:	9301      	str	r3, [sp, #4]
 8016632:	2323      	movs	r3, #35	; 0x23
 8016634:	9300      	str	r3, [sp, #0]
 8016636:	4603      	mov	r3, r0
 8016638:	68f8      	ldr	r0, [r7, #12]
 801663a:	f001 fc8b 	bl	8017f54 <I2C_RequestMemoryRead>
 801663e:	4603      	mov	r3, r0
 8016640:	2b00      	cmp	r3, #0
 8016642:	d001      	beq.n	8016648 <HAL_I2C_Mem_Read_DMA+0x18c>
        {
          return HAL_ERROR;
 8016644:	2301      	movs	r3, #1
 8016646:	e076      	b.n	8016736 <HAL_I2C_Mem_Read_DMA+0x27a>
        }

        if (hi2c->XferSize == 1U)
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801664c:	2b01      	cmp	r3, #1
 801664e:	d108      	bne.n	8016662 <HAL_I2C_Mem_Read_DMA+0x1a6>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	681a      	ldr	r2, [r3, #0]
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801665e:	601a      	str	r2, [r3, #0]
 8016660:	e007      	b.n	8016672 <HAL_I2C_Mem_Read_DMA+0x1b6>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	685a      	ldr	r2, [r3, #4]
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8016670:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016672:	2300      	movs	r3, #0
 8016674:	61bb      	str	r3, [r7, #24]
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	695b      	ldr	r3, [r3, #20]
 801667c:	61bb      	str	r3, [r7, #24]
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	699b      	ldr	r3, [r3, #24]
 8016684:	61bb      	str	r3, [r7, #24]
 8016686:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	2200      	movs	r2, #0
 801668c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	685a      	ldr	r2, [r3, #4]
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801669e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	685a      	ldr	r2, [r3, #4]
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80166ae:	605a      	str	r2, [r3, #4]
 80166b0:	e03e      	b.n	8016730 <HAL_I2C_Mem_Read_DMA+0x274>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	2220      	movs	r2, #32
 80166b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	2200      	movs	r2, #0
 80166be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80166c6:	f043 0210 	orr.w	r2, r3, #16
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	2200      	movs	r2, #0
 80166d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80166d6:	2301      	movs	r3, #1
 80166d8:	e02d      	b.n	8016736 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80166da:	88f8      	ldrh	r0, [r7, #6]
 80166dc:	893a      	ldrh	r2, [r7, #8]
 80166de:	8979      	ldrh	r1, [r7, #10]
 80166e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166e2:	9301      	str	r3, [sp, #4]
 80166e4:	2323      	movs	r3, #35	; 0x23
 80166e6:	9300      	str	r3, [sp, #0]
 80166e8:	4603      	mov	r3, r0
 80166ea:	68f8      	ldr	r0, [r7, #12]
 80166ec:	f001 fc32 	bl	8017f54 <I2C_RequestMemoryRead>
 80166f0:	4603      	mov	r3, r0
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d001      	beq.n	80166fa <HAL_I2C_Mem_Read_DMA+0x23e>
      {
        return HAL_ERROR;
 80166f6:	2301      	movs	r3, #1
 80166f8:	e01d      	b.n	8016736 <HAL_I2C_Mem_Read_DMA+0x27a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80166fa:	2300      	movs	r3, #0
 80166fc:	617b      	str	r3, [r7, #20]
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	695b      	ldr	r3, [r3, #20]
 8016704:	617b      	str	r3, [r7, #20]
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	699b      	ldr	r3, [r3, #24]
 801670c:	617b      	str	r3, [r7, #20]
 801670e:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	681a      	ldr	r2, [r3, #0]
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801671e:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	2220      	movs	r2, #32
 8016724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	2200      	movs	r2, #0
 801672c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8016730:	2300      	movs	r3, #0
 8016732:	e000      	b.n	8016736 <HAL_I2C_Mem_Read_DMA+0x27a>
  }
  else
  {
    return HAL_BUSY;
 8016734:	2302      	movs	r3, #2
  }
}
 8016736:	4618      	mov	r0, r3
 8016738:	3728      	adds	r7, #40	; 0x28
 801673a:	46bd      	mov	sp, r7
 801673c:	bd80      	pop	{r7, pc}
 801673e:	bf00      	nop
 8016740:	20000678 	.word	0x20000678
 8016744:	14f8b589 	.word	0x14f8b589
 8016748:	ffff0000 	.word	0xffff0000
 801674c:	08018121 	.word	0x08018121
 8016750:	080182cb 	.word	0x080182cb

08016754 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b088      	sub	sp, #32
 8016758:	af00      	add	r7, sp, #0
 801675a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 801675c:	2300      	movs	r3, #0
 801675e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	685b      	ldr	r3, [r3, #4]
 8016766:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801676c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016774:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801677c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801677e:	7bfb      	ldrb	r3, [r7, #15]
 8016780:	2b10      	cmp	r3, #16
 8016782:	d003      	beq.n	801678c <HAL_I2C_EV_IRQHandler+0x38>
 8016784:	7bfb      	ldrb	r3, [r7, #15]
 8016786:	2b40      	cmp	r3, #64	; 0x40
 8016788:	f040 80b6 	bne.w	80168f8 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	699b      	ldr	r3, [r3, #24]
 8016792:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	695b      	ldr	r3, [r3, #20]
 801679a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 801679c:	69fb      	ldr	r3, [r7, #28]
 801679e:	f003 0301 	and.w	r3, r3, #1
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d10d      	bne.n	80167c2 <HAL_I2C_EV_IRQHandler+0x6e>
 80167a6:	693b      	ldr	r3, [r7, #16]
 80167a8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80167ac:	d003      	beq.n	80167b6 <HAL_I2C_EV_IRQHandler+0x62>
 80167ae:	693b      	ldr	r3, [r7, #16]
 80167b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80167b4:	d101      	bne.n	80167ba <HAL_I2C_EV_IRQHandler+0x66>
 80167b6:	2301      	movs	r3, #1
 80167b8:	e000      	b.n	80167bc <HAL_I2C_EV_IRQHandler+0x68>
 80167ba:	2300      	movs	r3, #0
 80167bc:	2b01      	cmp	r3, #1
 80167be:	f000 8127 	beq.w	8016a10 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80167c2:	69fb      	ldr	r3, [r7, #28]
 80167c4:	f003 0301 	and.w	r3, r3, #1
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d00c      	beq.n	80167e6 <HAL_I2C_EV_IRQHandler+0x92>
 80167cc:	697b      	ldr	r3, [r7, #20]
 80167ce:	0a5b      	lsrs	r3, r3, #9
 80167d0:	f003 0301 	and.w	r3, r3, #1
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d006      	beq.n	80167e6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80167d8:	6878      	ldr	r0, [r7, #4]
 80167da:	f002 f80f 	bl	80187fc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80167de:	6878      	ldr	r0, [r7, #4]
 80167e0:	f000 fd12 	bl	8017208 <I2C_Master_SB>
 80167e4:	e087      	b.n	80168f6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80167e6:	69fb      	ldr	r3, [r7, #28]
 80167e8:	08db      	lsrs	r3, r3, #3
 80167ea:	f003 0301 	and.w	r3, r3, #1
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d009      	beq.n	8016806 <HAL_I2C_EV_IRQHandler+0xb2>
 80167f2:	697b      	ldr	r3, [r7, #20]
 80167f4:	0a5b      	lsrs	r3, r3, #9
 80167f6:	f003 0301 	and.w	r3, r3, #1
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d003      	beq.n	8016806 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80167fe:	6878      	ldr	r0, [r7, #4]
 8016800:	f000 fd88 	bl	8017314 <I2C_Master_ADD10>
 8016804:	e077      	b.n	80168f6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8016806:	69fb      	ldr	r3, [r7, #28]
 8016808:	085b      	lsrs	r3, r3, #1
 801680a:	f003 0301 	and.w	r3, r3, #1
 801680e:	2b00      	cmp	r3, #0
 8016810:	d009      	beq.n	8016826 <HAL_I2C_EV_IRQHandler+0xd2>
 8016812:	697b      	ldr	r3, [r7, #20]
 8016814:	0a5b      	lsrs	r3, r3, #9
 8016816:	f003 0301 	and.w	r3, r3, #1
 801681a:	2b00      	cmp	r3, #0
 801681c:	d003      	beq.n	8016826 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f000 fda2 	bl	8017368 <I2C_Master_ADDR>
 8016824:	e067      	b.n	80168f6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8016826:	69bb      	ldr	r3, [r7, #24]
 8016828:	089b      	lsrs	r3, r3, #2
 801682a:	f003 0301 	and.w	r3, r3, #1
 801682e:	2b00      	cmp	r3, #0
 8016830:	d030      	beq.n	8016894 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	685b      	ldr	r3, [r3, #4]
 8016838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801683c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016840:	f000 80e8 	beq.w	8016a14 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8016844:	69fb      	ldr	r3, [r7, #28]
 8016846:	09db      	lsrs	r3, r3, #7
 8016848:	f003 0301 	and.w	r3, r3, #1
 801684c:	2b00      	cmp	r3, #0
 801684e:	d00f      	beq.n	8016870 <HAL_I2C_EV_IRQHandler+0x11c>
 8016850:	697b      	ldr	r3, [r7, #20]
 8016852:	0a9b      	lsrs	r3, r3, #10
 8016854:	f003 0301 	and.w	r3, r3, #1
 8016858:	2b00      	cmp	r3, #0
 801685a:	d009      	beq.n	8016870 <HAL_I2C_EV_IRQHandler+0x11c>
 801685c:	69fb      	ldr	r3, [r7, #28]
 801685e:	089b      	lsrs	r3, r3, #2
 8016860:	f003 0301 	and.w	r3, r3, #1
 8016864:	2b00      	cmp	r3, #0
 8016866:	d103      	bne.n	8016870 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8016868:	6878      	ldr	r0, [r7, #4]
 801686a:	f000 f9de 	bl	8016c2a <I2C_MasterTransmit_TXE>
 801686e:	e042      	b.n	80168f6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8016870:	69fb      	ldr	r3, [r7, #28]
 8016872:	089b      	lsrs	r3, r3, #2
 8016874:	f003 0301 	and.w	r3, r3, #1
 8016878:	2b00      	cmp	r3, #0
 801687a:	f000 80cb 	beq.w	8016a14 <HAL_I2C_EV_IRQHandler+0x2c0>
 801687e:	697b      	ldr	r3, [r7, #20]
 8016880:	0a5b      	lsrs	r3, r3, #9
 8016882:	f003 0301 	and.w	r3, r3, #1
 8016886:	2b00      	cmp	r3, #0
 8016888:	f000 80c4 	beq.w	8016a14 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 801688c:	6878      	ldr	r0, [r7, #4]
 801688e:	f000 fa68 	bl	8016d62 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8016892:	e0bf      	b.n	8016a14 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	685b      	ldr	r3, [r3, #4]
 801689a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801689e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80168a2:	f000 80b7 	beq.w	8016a14 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80168a6:	69fb      	ldr	r3, [r7, #28]
 80168a8:	099b      	lsrs	r3, r3, #6
 80168aa:	f003 0301 	and.w	r3, r3, #1
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d00f      	beq.n	80168d2 <HAL_I2C_EV_IRQHandler+0x17e>
 80168b2:	697b      	ldr	r3, [r7, #20]
 80168b4:	0a9b      	lsrs	r3, r3, #10
 80168b6:	f003 0301 	and.w	r3, r3, #1
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d009      	beq.n	80168d2 <HAL_I2C_EV_IRQHandler+0x17e>
 80168be:	69fb      	ldr	r3, [r7, #28]
 80168c0:	089b      	lsrs	r3, r3, #2
 80168c2:	f003 0301 	and.w	r3, r3, #1
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d103      	bne.n	80168d2 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80168ca:	6878      	ldr	r0, [r7, #4]
 80168cc:	f000 fb30 	bl	8016f30 <I2C_MasterReceive_RXNE>
 80168d0:	e011      	b.n	80168f6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80168d2:	69fb      	ldr	r3, [r7, #28]
 80168d4:	089b      	lsrs	r3, r3, #2
 80168d6:	f003 0301 	and.w	r3, r3, #1
 80168da:	2b00      	cmp	r3, #0
 80168dc:	f000 809a 	beq.w	8016a14 <HAL_I2C_EV_IRQHandler+0x2c0>
 80168e0:	697b      	ldr	r3, [r7, #20]
 80168e2:	0a5b      	lsrs	r3, r3, #9
 80168e4:	f003 0301 	and.w	r3, r3, #1
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	f000 8093 	beq.w	8016a14 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 80168ee:	6878      	ldr	r0, [r7, #4]
 80168f0:	f000 fba0 	bl	8017034 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80168f4:	e08e      	b.n	8016a14 <HAL_I2C_EV_IRQHandler+0x2c0>
 80168f6:	e08d      	b.n	8016a14 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d004      	beq.n	801690a <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	695b      	ldr	r3, [r3, #20]
 8016906:	61fb      	str	r3, [r7, #28]
 8016908:	e007      	b.n	801691a <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	699b      	ldr	r3, [r3, #24]
 8016910:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	695b      	ldr	r3, [r3, #20]
 8016918:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801691a:	69fb      	ldr	r3, [r7, #28]
 801691c:	085b      	lsrs	r3, r3, #1
 801691e:	f003 0301 	and.w	r3, r3, #1
 8016922:	2b00      	cmp	r3, #0
 8016924:	d012      	beq.n	801694c <HAL_I2C_EV_IRQHandler+0x1f8>
 8016926:	697b      	ldr	r3, [r7, #20]
 8016928:	0a5b      	lsrs	r3, r3, #9
 801692a:	f003 0301 	and.w	r3, r3, #1
 801692e:	2b00      	cmp	r3, #0
 8016930:	d00c      	beq.n	801694c <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016936:	2b00      	cmp	r3, #0
 8016938:	d003      	beq.n	8016942 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	699b      	ldr	r3, [r3, #24]
 8016940:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8016942:	69b9      	ldr	r1, [r7, #24]
 8016944:	6878      	ldr	r0, [r7, #4]
 8016946:	f000 ff5e 	bl	8017806 <I2C_Slave_ADDR>
 801694a:	e066      	b.n	8016a1a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801694c:	69fb      	ldr	r3, [r7, #28]
 801694e:	091b      	lsrs	r3, r3, #4
 8016950:	f003 0301 	and.w	r3, r3, #1
 8016954:	2b00      	cmp	r3, #0
 8016956:	d009      	beq.n	801696c <HAL_I2C_EV_IRQHandler+0x218>
 8016958:	697b      	ldr	r3, [r7, #20]
 801695a:	0a5b      	lsrs	r3, r3, #9
 801695c:	f003 0301 	and.w	r3, r3, #1
 8016960:	2b00      	cmp	r3, #0
 8016962:	d003      	beq.n	801696c <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8016964:	6878      	ldr	r0, [r7, #4]
 8016966:	f000 ff93 	bl	8017890 <I2C_Slave_STOPF>
 801696a:	e056      	b.n	8016a1a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801696c:	7bbb      	ldrb	r3, [r7, #14]
 801696e:	2b21      	cmp	r3, #33	; 0x21
 8016970:	d002      	beq.n	8016978 <HAL_I2C_EV_IRQHandler+0x224>
 8016972:	7bbb      	ldrb	r3, [r7, #14]
 8016974:	2b29      	cmp	r3, #41	; 0x29
 8016976:	d125      	bne.n	80169c4 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8016978:	69fb      	ldr	r3, [r7, #28]
 801697a:	09db      	lsrs	r3, r3, #7
 801697c:	f003 0301 	and.w	r3, r3, #1
 8016980:	2b00      	cmp	r3, #0
 8016982:	d00f      	beq.n	80169a4 <HAL_I2C_EV_IRQHandler+0x250>
 8016984:	697b      	ldr	r3, [r7, #20]
 8016986:	0a9b      	lsrs	r3, r3, #10
 8016988:	f003 0301 	and.w	r3, r3, #1
 801698c:	2b00      	cmp	r3, #0
 801698e:	d009      	beq.n	80169a4 <HAL_I2C_EV_IRQHandler+0x250>
 8016990:	69fb      	ldr	r3, [r7, #28]
 8016992:	089b      	lsrs	r3, r3, #2
 8016994:	f003 0301 	and.w	r3, r3, #1
 8016998:	2b00      	cmp	r3, #0
 801699a:	d103      	bne.n	80169a4 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 801699c:	6878      	ldr	r0, [r7, #4]
 801699e:	f000 fe74 	bl	801768a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80169a2:	e039      	b.n	8016a18 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80169a4:	69fb      	ldr	r3, [r7, #28]
 80169a6:	089b      	lsrs	r3, r3, #2
 80169a8:	f003 0301 	and.w	r3, r3, #1
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d033      	beq.n	8016a18 <HAL_I2C_EV_IRQHandler+0x2c4>
 80169b0:	697b      	ldr	r3, [r7, #20]
 80169b2:	0a5b      	lsrs	r3, r3, #9
 80169b4:	f003 0301 	and.w	r3, r3, #1
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d02d      	beq.n	8016a18 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80169bc:	6878      	ldr	r0, [r7, #4]
 80169be:	f000 fea1 	bl	8017704 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80169c2:	e029      	b.n	8016a18 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80169c4:	69fb      	ldr	r3, [r7, #28]
 80169c6:	099b      	lsrs	r3, r3, #6
 80169c8:	f003 0301 	and.w	r3, r3, #1
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d00f      	beq.n	80169f0 <HAL_I2C_EV_IRQHandler+0x29c>
 80169d0:	697b      	ldr	r3, [r7, #20]
 80169d2:	0a9b      	lsrs	r3, r3, #10
 80169d4:	f003 0301 	and.w	r3, r3, #1
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d009      	beq.n	80169f0 <HAL_I2C_EV_IRQHandler+0x29c>
 80169dc:	69fb      	ldr	r3, [r7, #28]
 80169de:	089b      	lsrs	r3, r3, #2
 80169e0:	f003 0301 	and.w	r3, r3, #1
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d103      	bne.n	80169f0 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80169e8:	6878      	ldr	r0, [r7, #4]
 80169ea:	f000 feac 	bl	8017746 <I2C_SlaveReceive_RXNE>
 80169ee:	e014      	b.n	8016a1a <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80169f0:	69fb      	ldr	r3, [r7, #28]
 80169f2:	089b      	lsrs	r3, r3, #2
 80169f4:	f003 0301 	and.w	r3, r3, #1
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d00e      	beq.n	8016a1a <HAL_I2C_EV_IRQHandler+0x2c6>
 80169fc:	697b      	ldr	r3, [r7, #20]
 80169fe:	0a5b      	lsrs	r3, r3, #9
 8016a00:	f003 0301 	and.w	r3, r3, #1
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d008      	beq.n	8016a1a <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8016a08:	6878      	ldr	r0, [r7, #4]
 8016a0a:	f000 feda 	bl	80177c2 <I2C_SlaveReceive_BTF>
 8016a0e:	e004      	b.n	8016a1a <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8016a10:	bf00      	nop
 8016a12:	e002      	b.n	8016a1a <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8016a14:	bf00      	nop
 8016a16:	e000      	b.n	8016a1a <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8016a18:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8016a1a:	3720      	adds	r7, #32
 8016a1c:	46bd      	mov	sp, r7
 8016a1e:	bd80      	pop	{r7, pc}

08016a20 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b08a      	sub	sp, #40	; 0x28
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	695b      	ldr	r3, [r3, #20]
 8016a2e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	685b      	ldr	r3, [r3, #4]
 8016a36:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8016a38:	2300      	movs	r3, #0
 8016a3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016a42:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8016a44:	6a3b      	ldr	r3, [r7, #32]
 8016a46:	0a1b      	lsrs	r3, r3, #8
 8016a48:	f003 0301 	and.w	r3, r3, #1
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d00e      	beq.n	8016a6e <HAL_I2C_ER_IRQHandler+0x4e>
 8016a50:	69fb      	ldr	r3, [r7, #28]
 8016a52:	0a1b      	lsrs	r3, r3, #8
 8016a54:	f003 0301 	and.w	r3, r3, #1
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d008      	beq.n	8016a6e <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8016a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a5e:	f043 0301 	orr.w	r3, r3, #1
 8016a62:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8016a6c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8016a6e:	6a3b      	ldr	r3, [r7, #32]
 8016a70:	0a5b      	lsrs	r3, r3, #9
 8016a72:	f003 0301 	and.w	r3, r3, #1
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d00e      	beq.n	8016a98 <HAL_I2C_ER_IRQHandler+0x78>
 8016a7a:	69fb      	ldr	r3, [r7, #28]
 8016a7c:	0a1b      	lsrs	r3, r3, #8
 8016a7e:	f003 0301 	and.w	r3, r3, #1
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d008      	beq.n	8016a98 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8016a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a88:	f043 0302 	orr.w	r3, r3, #2
 8016a8c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8016a96:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8016a98:	6a3b      	ldr	r3, [r7, #32]
 8016a9a:	0a9b      	lsrs	r3, r3, #10
 8016a9c:	f003 0301 	and.w	r3, r3, #1
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d03f      	beq.n	8016b24 <HAL_I2C_ER_IRQHandler+0x104>
 8016aa4:	69fb      	ldr	r3, [r7, #28]
 8016aa6:	0a1b      	lsrs	r3, r3, #8
 8016aa8:	f003 0301 	and.w	r3, r3, #1
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d039      	beq.n	8016b24 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8016ab0:	7efb      	ldrb	r3, [r7, #27]
 8016ab2:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016ab8:	b29b      	uxth	r3, r3
 8016aba:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016ac2:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ac8:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8016aca:	7ebb      	ldrb	r3, [r7, #26]
 8016acc:	2b20      	cmp	r3, #32
 8016ace:	d112      	bne.n	8016af6 <HAL_I2C_ER_IRQHandler+0xd6>
 8016ad0:	697b      	ldr	r3, [r7, #20]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d10f      	bne.n	8016af6 <HAL_I2C_ER_IRQHandler+0xd6>
 8016ad6:	7cfb      	ldrb	r3, [r7, #19]
 8016ad8:	2b21      	cmp	r3, #33	; 0x21
 8016ada:	d008      	beq.n	8016aee <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8016adc:	7cfb      	ldrb	r3, [r7, #19]
 8016ade:	2b29      	cmp	r3, #41	; 0x29
 8016ae0:	d005      	beq.n	8016aee <HAL_I2C_ER_IRQHandler+0xce>
 8016ae2:	7cfb      	ldrb	r3, [r7, #19]
 8016ae4:	2b28      	cmp	r3, #40	; 0x28
 8016ae6:	d106      	bne.n	8016af6 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	2b21      	cmp	r3, #33	; 0x21
 8016aec:	d103      	bne.n	8016af6 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8016aee:	6878      	ldr	r0, [r7, #4]
 8016af0:	f000 fffe 	bl	8017af0 <I2C_Slave_AF>
 8016af4:	e016      	b.n	8016b24 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8016afe:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8016b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b02:	f043 0304 	orr.w	r3, r3, #4
 8016b06:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8016b08:	7efb      	ldrb	r3, [r7, #27]
 8016b0a:	2b10      	cmp	r3, #16
 8016b0c:	d002      	beq.n	8016b14 <HAL_I2C_ER_IRQHandler+0xf4>
 8016b0e:	7efb      	ldrb	r3, [r7, #27]
 8016b10:	2b40      	cmp	r3, #64	; 0x40
 8016b12:	d107      	bne.n	8016b24 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	681a      	ldr	r2, [r3, #0]
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016b22:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8016b24:	6a3b      	ldr	r3, [r7, #32]
 8016b26:	0adb      	lsrs	r3, r3, #11
 8016b28:	f003 0301 	and.w	r3, r3, #1
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d00e      	beq.n	8016b4e <HAL_I2C_ER_IRQHandler+0x12e>
 8016b30:	69fb      	ldr	r3, [r7, #28]
 8016b32:	0a1b      	lsrs	r3, r3, #8
 8016b34:	f003 0301 	and.w	r3, r3, #1
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d008      	beq.n	8016b4e <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8016b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b3e:	f043 0308 	orr.w	r3, r3, #8
 8016b42:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8016b4c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8016b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d008      	beq.n	8016b66 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b5a:	431a      	orrs	r2, r3
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8016b60:	6878      	ldr	r0, [r7, #4]
 8016b62:	f001 f835 	bl	8017bd0 <I2C_ITError>
  }
}
 8016b66:	bf00      	nop
 8016b68:	3728      	adds	r7, #40	; 0x28
 8016b6a:	46bd      	mov	sp, r7
 8016b6c:	bd80      	pop	{r7, pc}

08016b6e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016b6e:	b480      	push	{r7}
 8016b70:	b083      	sub	sp, #12
 8016b72:	af00      	add	r7, sp, #0
 8016b74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8016b76:	bf00      	nop
 8016b78:	370c      	adds	r7, #12
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b80:	4770      	bx	lr

08016b82 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016b82:	b480      	push	{r7}
 8016b84:	b083      	sub	sp, #12
 8016b86:	af00      	add	r7, sp, #0
 8016b88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8016b8a:	bf00      	nop
 8016b8c:	370c      	adds	r7, #12
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b94:	4770      	bx	lr

08016b96 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016b96:	b480      	push	{r7}
 8016b98:	b083      	sub	sp, #12
 8016b9a:	af00      	add	r7, sp, #0
 8016b9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8016b9e:	bf00      	nop
 8016ba0:	370c      	adds	r7, #12
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba8:	4770      	bx	lr

08016baa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016baa:	b480      	push	{r7}
 8016bac:	b083      	sub	sp, #12
 8016bae:	af00      	add	r7, sp, #0
 8016bb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8016bb2:	bf00      	nop
 8016bb4:	370c      	adds	r7, #12
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bbc:	4770      	bx	lr

08016bbe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8016bbe:	b480      	push	{r7}
 8016bc0:	b083      	sub	sp, #12
 8016bc2:	af00      	add	r7, sp, #0
 8016bc4:	6078      	str	r0, [r7, #4]
 8016bc6:	460b      	mov	r3, r1
 8016bc8:	70fb      	strb	r3, [r7, #3]
 8016bca:	4613      	mov	r3, r2
 8016bcc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8016bce:	bf00      	nop
 8016bd0:	370c      	adds	r7, #12
 8016bd2:	46bd      	mov	sp, r7
 8016bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd8:	4770      	bx	lr

08016bda <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016bda:	b480      	push	{r7}
 8016bdc:	b083      	sub	sp, #12
 8016bde:	af00      	add	r7, sp, #0
 8016be0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8016be2:	bf00      	nop
 8016be4:	370c      	adds	r7, #12
 8016be6:	46bd      	mov	sp, r7
 8016be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bec:	4770      	bx	lr

08016bee <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016bee:	b480      	push	{r7}
 8016bf0:	b083      	sub	sp, #12
 8016bf2:	af00      	add	r7, sp, #0
 8016bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8016bf6:	bf00      	nop
 8016bf8:	370c      	adds	r7, #12
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c00:	4770      	bx	lr

08016c02 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8016c02:	b480      	push	{r7}
 8016c04:	b083      	sub	sp, #12
 8016c06:	af00      	add	r7, sp, #0
 8016c08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8016c0a:	bf00      	nop
 8016c0c:	370c      	adds	r7, #12
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c14:	4770      	bx	lr

08016c16 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016c16:	b480      	push	{r7}
 8016c18:	b083      	sub	sp, #12
 8016c1a:	af00      	add	r7, sp, #0
 8016c1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8016c1e:	bf00      	nop
 8016c20:	370c      	adds	r7, #12
 8016c22:	46bd      	mov	sp, r7
 8016c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c28:	4770      	bx	lr

08016c2a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8016c2a:	b580      	push	{r7, lr}
 8016c2c:	b084      	sub	sp, #16
 8016c2e:	af00      	add	r7, sp, #0
 8016c30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016c38:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016c40:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c46:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d150      	bne.n	8016cf2 <I2C_MasterTransmit_TXE+0xc8>
 8016c50:	7bfb      	ldrb	r3, [r7, #15]
 8016c52:	2b21      	cmp	r3, #33	; 0x21
 8016c54:	d14d      	bne.n	8016cf2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8016c56:	68bb      	ldr	r3, [r7, #8]
 8016c58:	2b08      	cmp	r3, #8
 8016c5a:	d01d      	beq.n	8016c98 <I2C_MasterTransmit_TXE+0x6e>
 8016c5c:	68bb      	ldr	r3, [r7, #8]
 8016c5e:	2b20      	cmp	r3, #32
 8016c60:	d01a      	beq.n	8016c98 <I2C_MasterTransmit_TXE+0x6e>
 8016c62:	68bb      	ldr	r3, [r7, #8]
 8016c64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8016c68:	d016      	beq.n	8016c98 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	685a      	ldr	r2, [r3, #4]
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8016c78:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	2211      	movs	r2, #17
 8016c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	2200      	movs	r2, #0
 8016c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	2220      	movs	r2, #32
 8016c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8016c90:	6878      	ldr	r0, [r7, #4]
 8016c92:	f7ff ff6c 	bl	8016b6e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8016c96:	e060      	b.n	8016d5a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	685a      	ldr	r2, [r3, #4]
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8016ca6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	681a      	ldr	r2, [r3, #0]
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016cb6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	2200      	movs	r2, #0
 8016cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	2220      	movs	r2, #32
 8016cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016ccc:	b2db      	uxtb	r3, r3
 8016cce:	2b40      	cmp	r3, #64	; 0x40
 8016cd0:	d107      	bne.n	8016ce2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	2200      	movs	r2, #0
 8016cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8016cda:	6878      	ldr	r0, [r7, #4]
 8016cdc:	f7ff ff87 	bl	8016bee <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8016ce0:	e03b      	b.n	8016d5a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	2200      	movs	r2, #0
 8016ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8016cea:	6878      	ldr	r0, [r7, #4]
 8016cec:	f7ff ff3f 	bl	8016b6e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8016cf0:	e033      	b.n	8016d5a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8016cf2:	7bfb      	ldrb	r3, [r7, #15]
 8016cf4:	2b21      	cmp	r3, #33	; 0x21
 8016cf6:	d005      	beq.n	8016d04 <I2C_MasterTransmit_TXE+0xda>
 8016cf8:	7bbb      	ldrb	r3, [r7, #14]
 8016cfa:	2b40      	cmp	r3, #64	; 0x40
 8016cfc:	d12d      	bne.n	8016d5a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8016cfe:	7bfb      	ldrb	r3, [r7, #15]
 8016d00:	2b22      	cmp	r3, #34	; 0x22
 8016d02:	d12a      	bne.n	8016d5a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016d08:	b29b      	uxth	r3, r3
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d108      	bne.n	8016d20 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	685a      	ldr	r2, [r3, #4]
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016d1c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8016d1e:	e01c      	b.n	8016d5a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016d26:	b2db      	uxtb	r3, r3
 8016d28:	2b40      	cmp	r3, #64	; 0x40
 8016d2a:	d103      	bne.n	8016d34 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8016d2c:	6878      	ldr	r0, [r7, #4]
 8016d2e:	f000 f898 	bl	8016e62 <I2C_MemoryTransmit_TXE_BTF>
}
 8016d32:	e012      	b.n	8016d5a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d38:	781a      	ldrb	r2, [r3, #0]
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d44:	1c5a      	adds	r2, r3, #1
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016d4e:	b29b      	uxth	r3, r3
 8016d50:	3b01      	subs	r3, #1
 8016d52:	b29a      	uxth	r2, r3
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8016d58:	e7ff      	b.n	8016d5a <I2C_MasterTransmit_TXE+0x130>
 8016d5a:	bf00      	nop
 8016d5c:	3710      	adds	r7, #16
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	bd80      	pop	{r7, pc}

08016d62 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8016d62:	b580      	push	{r7, lr}
 8016d64:	b084      	sub	sp, #16
 8016d66:	af00      	add	r7, sp, #0
 8016d68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d6e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016d76:	b2db      	uxtb	r3, r3
 8016d78:	2b21      	cmp	r3, #33	; 0x21
 8016d7a:	d165      	bne.n	8016e48 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016d80:	b29b      	uxth	r3, r3
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d012      	beq.n	8016dac <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d8a:	781a      	ldrb	r2, [r3, #0]
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d96:	1c5a      	adds	r2, r3, #1
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016da0:	b29b      	uxth	r3, r3
 8016da2:	3b01      	subs	r3, #1
 8016da4:	b29a      	uxth	r2, r3
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8016daa:	e056      	b.n	8016e5a <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	2b08      	cmp	r3, #8
 8016db0:	d01d      	beq.n	8016dee <I2C_MasterTransmit_BTF+0x8c>
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	2b20      	cmp	r3, #32
 8016db6:	d01a      	beq.n	8016dee <I2C_MasterTransmit_BTF+0x8c>
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8016dbe:	d016      	beq.n	8016dee <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	685a      	ldr	r2, [r3, #4]
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8016dce:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	2211      	movs	r2, #17
 8016dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	2200      	movs	r2, #0
 8016dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	2220      	movs	r2, #32
 8016de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8016de6:	6878      	ldr	r0, [r7, #4]
 8016de8:	f7ff fec1 	bl	8016b6e <HAL_I2C_MasterTxCpltCallback>
}
 8016dec:	e035      	b.n	8016e5a <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	685a      	ldr	r2, [r3, #4]
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8016dfc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	681a      	ldr	r2, [r3, #0]
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016e0c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	2200      	movs	r2, #0
 8016e12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	2220      	movs	r2, #32
 8016e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016e22:	b2db      	uxtb	r3, r3
 8016e24:	2b40      	cmp	r3, #64	; 0x40
 8016e26:	d107      	bne.n	8016e38 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	2200      	movs	r2, #0
 8016e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8016e30:	6878      	ldr	r0, [r7, #4]
 8016e32:	f7ff fedc 	bl	8016bee <HAL_I2C_MemTxCpltCallback>
}
 8016e36:	e010      	b.n	8016e5a <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	2200      	movs	r2, #0
 8016e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8016e40:	6878      	ldr	r0, [r7, #4]
 8016e42:	f7ff fe94 	bl	8016b6e <HAL_I2C_MasterTxCpltCallback>
}
 8016e46:	e008      	b.n	8016e5a <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016e4e:	b2db      	uxtb	r3, r3
 8016e50:	2b40      	cmp	r3, #64	; 0x40
 8016e52:	d102      	bne.n	8016e5a <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8016e54:	6878      	ldr	r0, [r7, #4]
 8016e56:	f000 f804 	bl	8016e62 <I2C_MemoryTransmit_TXE_BTF>
}
 8016e5a:	bf00      	nop
 8016e5c:	3710      	adds	r7, #16
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	bd80      	pop	{r7, pc}

08016e62 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8016e62:	b480      	push	{r7}
 8016e64:	b083      	sub	sp, #12
 8016e66:	af00      	add	r7, sp, #0
 8016e68:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d11d      	bne.n	8016eae <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016e76:	2b01      	cmp	r3, #1
 8016e78:	d10b      	bne.n	8016e92 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016e7e:	b2da      	uxtb	r2, r3
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	681b      	ldr	r3, [r3, #0]
 8016e84:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016e8a:	1c9a      	adds	r2, r3, #2
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8016e90:	e048      	b.n	8016f24 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016e96:	b29b      	uxth	r3, r3
 8016e98:	121b      	asrs	r3, r3, #8
 8016e9a:	b2da      	uxtb	r2, r3
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016ea6:	1c5a      	adds	r2, r3, #1
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8016eac:	e03a      	b.n	8016f24 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016eb2:	2b01      	cmp	r3, #1
 8016eb4:	d10b      	bne.n	8016ece <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016eba:	b2da      	uxtb	r2, r3
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016ec6:	1c5a      	adds	r2, r3, #1
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	651a      	str	r2, [r3, #80]	; 0x50
}
 8016ecc:	e02a      	b.n	8016f24 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016ed2:	2b02      	cmp	r3, #2
 8016ed4:	d126      	bne.n	8016f24 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016edc:	b2db      	uxtb	r3, r3
 8016ede:	2b22      	cmp	r3, #34	; 0x22
 8016ee0:	d108      	bne.n	8016ef4 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	681a      	ldr	r2, [r3, #0]
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016ef0:	601a      	str	r2, [r3, #0]
}
 8016ef2:	e017      	b.n	8016f24 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016efa:	b2db      	uxtb	r3, r3
 8016efc:	2b21      	cmp	r3, #33	; 0x21
 8016efe:	d111      	bne.n	8016f24 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f04:	781a      	ldrb	r2, [r3, #0]
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f10:	1c5a      	adds	r2, r3, #1
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016f1a:	b29b      	uxth	r3, r3
 8016f1c:	3b01      	subs	r3, #1
 8016f1e:	b29a      	uxth	r2, r3
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8016f24:	bf00      	nop
 8016f26:	370c      	adds	r7, #12
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f2e:	4770      	bx	lr

08016f30 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8016f30:	b580      	push	{r7, lr}
 8016f32:	b084      	sub	sp, #16
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016f3e:	b2db      	uxtb	r3, r3
 8016f40:	2b22      	cmp	r3, #34	; 0x22
 8016f42:	d173      	bne.n	801702c <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016f48:	b29b      	uxth	r3, r3
 8016f4a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	2b03      	cmp	r3, #3
 8016f50:	d920      	bls.n	8016f94 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	691a      	ldr	r2, [r3, #16]
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f5c:	b2d2      	uxtb	r2, r2
 8016f5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f64:	1c5a      	adds	r2, r3, #1
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016f6e:	b29b      	uxth	r3, r3
 8016f70:	3b01      	subs	r3, #1
 8016f72:	b29a      	uxth	r2, r3
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016f7c:	b29b      	uxth	r3, r3
 8016f7e:	2b03      	cmp	r3, #3
 8016f80:	d154      	bne.n	801702c <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	685a      	ldr	r2, [r3, #4]
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016f90:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8016f92:	e04b      	b.n	801702c <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f98:	2b02      	cmp	r3, #2
 8016f9a:	d047      	beq.n	801702c <I2C_MasterReceive_RXNE+0xfc>
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	2b01      	cmp	r3, #1
 8016fa0:	d002      	beq.n	8016fa8 <I2C_MasterReceive_RXNE+0x78>
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d141      	bne.n	801702c <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	681a      	ldr	r2, [r3, #0]
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016fb6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	685a      	ldr	r2, [r3, #4]
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8016fc6:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	691a      	ldr	r2, [r3, #16]
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fd2:	b2d2      	uxtb	r2, r2
 8016fd4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fda:	1c5a      	adds	r2, r3, #1
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016fe4:	b29b      	uxth	r3, r3
 8016fe6:	3b01      	subs	r3, #1
 8016fe8:	b29a      	uxth	r2, r3
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	2220      	movs	r2, #32
 8016ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016ffc:	b2db      	uxtb	r3, r3
 8016ffe:	2b40      	cmp	r3, #64	; 0x40
 8017000:	d10a      	bne.n	8017018 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	2200      	movs	r2, #0
 8017006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	2200      	movs	r2, #0
 801700e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8017010:	6878      	ldr	r0, [r7, #4]
 8017012:	f7fc f829 	bl	8013068 <HAL_I2C_MemRxCpltCallback>
}
 8017016:	e009      	b.n	801702c <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	2200      	movs	r2, #0
 801701c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	2212      	movs	r2, #18
 8017024:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8017026:	6878      	ldr	r0, [r7, #4]
 8017028:	f7ff fdab 	bl	8016b82 <HAL_I2C_MasterRxCpltCallback>
}
 801702c:	bf00      	nop
 801702e:	3710      	adds	r7, #16
 8017030:	46bd      	mov	sp, r7
 8017032:	bd80      	pop	{r7, pc}

08017034 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8017034:	b580      	push	{r7, lr}
 8017036:	b084      	sub	sp, #16
 8017038:	af00      	add	r7, sp, #0
 801703a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017040:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017046:	b29b      	uxth	r3, r3
 8017048:	2b04      	cmp	r3, #4
 801704a:	d11b      	bne.n	8017084 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	685a      	ldr	r2, [r3, #4]
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801705a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	691a      	ldr	r2, [r3, #16]
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017066:	b2d2      	uxtb	r2, r2
 8017068:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801706e:	1c5a      	adds	r2, r3, #1
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017078:	b29b      	uxth	r3, r3
 801707a:	3b01      	subs	r3, #1
 801707c:	b29a      	uxth	r2, r3
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8017082:	e0bd      	b.n	8017200 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017088:	b29b      	uxth	r3, r3
 801708a:	2b03      	cmp	r3, #3
 801708c:	d129      	bne.n	80170e2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	685a      	ldr	r2, [r3, #4]
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801709c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	2b04      	cmp	r3, #4
 80170a2:	d00a      	beq.n	80170ba <I2C_MasterReceive_BTF+0x86>
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	2b02      	cmp	r3, #2
 80170a8:	d007      	beq.n	80170ba <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	681a      	ldr	r2, [r3, #0]
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80170b8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	691a      	ldr	r2, [r3, #16]
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170c4:	b2d2      	uxtb	r2, r2
 80170c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170cc:	1c5a      	adds	r2, r3, #1
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80170d6:	b29b      	uxth	r3, r3
 80170d8:	3b01      	subs	r3, #1
 80170da:	b29a      	uxth	r2, r3
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80170e0:	e08e      	b.n	8017200 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80170e6:	b29b      	uxth	r3, r3
 80170e8:	2b02      	cmp	r3, #2
 80170ea:	d176      	bne.n	80171da <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	2b01      	cmp	r3, #1
 80170f0:	d002      	beq.n	80170f8 <I2C_MasterReceive_BTF+0xc4>
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	2b10      	cmp	r3, #16
 80170f6:	d108      	bne.n	801710a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	681a      	ldr	r2, [r3, #0]
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017106:	601a      	str	r2, [r3, #0]
 8017108:	e019      	b.n	801713e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	2b04      	cmp	r3, #4
 801710e:	d002      	beq.n	8017116 <I2C_MasterReceive_BTF+0xe2>
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	2b02      	cmp	r3, #2
 8017114:	d108      	bne.n	8017128 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	681a      	ldr	r2, [r3, #0]
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017124:	601a      	str	r2, [r3, #0]
 8017126:	e00a      	b.n	801713e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	2b10      	cmp	r3, #16
 801712c:	d007      	beq.n	801713e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	681a      	ldr	r2, [r3, #0]
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	681b      	ldr	r3, [r3, #0]
 8017138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801713c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	691a      	ldr	r2, [r3, #16]
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017148:	b2d2      	uxtb	r2, r2
 801714a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017150:	1c5a      	adds	r2, r3, #1
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801715a:	b29b      	uxth	r3, r3
 801715c:	3b01      	subs	r3, #1
 801715e:	b29a      	uxth	r2, r3
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	691a      	ldr	r2, [r3, #16]
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801716e:	b2d2      	uxtb	r2, r2
 8017170:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017176:	1c5a      	adds	r2, r3, #1
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017180:	b29b      	uxth	r3, r3
 8017182:	3b01      	subs	r3, #1
 8017184:	b29a      	uxth	r2, r3
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	685a      	ldr	r2, [r3, #4]
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8017198:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	2220      	movs	r2, #32
 801719e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80171a8:	b2db      	uxtb	r3, r3
 80171aa:	2b40      	cmp	r3, #64	; 0x40
 80171ac:	d10a      	bne.n	80171c4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	2200      	movs	r2, #0
 80171b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	2200      	movs	r2, #0
 80171ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80171bc:	6878      	ldr	r0, [r7, #4]
 80171be:	f7fb ff53 	bl	8013068 <HAL_I2C_MemRxCpltCallback>
}
 80171c2:	e01d      	b.n	8017200 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	2200      	movs	r2, #0
 80171c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	2212      	movs	r2, #18
 80171d0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80171d2:	6878      	ldr	r0, [r7, #4]
 80171d4:	f7ff fcd5 	bl	8016b82 <HAL_I2C_MasterRxCpltCallback>
}
 80171d8:	e012      	b.n	8017200 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	691a      	ldr	r2, [r3, #16]
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171e4:	b2d2      	uxtb	r2, r2
 80171e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171ec:	1c5a      	adds	r2, r3, #1
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80171f6:	b29b      	uxth	r3, r3
 80171f8:	3b01      	subs	r3, #1
 80171fa:	b29a      	uxth	r2, r3
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8017200:	bf00      	nop
 8017202:	3710      	adds	r7, #16
 8017204:	46bd      	mov	sp, r7
 8017206:	bd80      	pop	{r7, pc}

08017208 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8017208:	b480      	push	{r7}
 801720a:	b083      	sub	sp, #12
 801720c:	af00      	add	r7, sp, #0
 801720e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017216:	b2db      	uxtb	r3, r3
 8017218:	2b40      	cmp	r3, #64	; 0x40
 801721a:	d117      	bne.n	801724c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017220:	2b00      	cmp	r3, #0
 8017222:	d109      	bne.n	8017238 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017228:	b2db      	uxtb	r3, r3
 801722a:	461a      	mov	r2, r3
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8017234:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8017236:	e067      	b.n	8017308 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801723c:	b2db      	uxtb	r3, r3
 801723e:	f043 0301 	orr.w	r3, r3, #1
 8017242:	b2da      	uxtb	r2, r3
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	611a      	str	r2, [r3, #16]
}
 801724a:	e05d      	b.n	8017308 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	691b      	ldr	r3, [r3, #16]
 8017250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017254:	d133      	bne.n	80172be <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801725c:	b2db      	uxtb	r3, r3
 801725e:	2b21      	cmp	r3, #33	; 0x21
 8017260:	d109      	bne.n	8017276 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017266:	b2db      	uxtb	r3, r3
 8017268:	461a      	mov	r2, r3
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8017272:	611a      	str	r2, [r3, #16]
 8017274:	e008      	b.n	8017288 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801727a:	b2db      	uxtb	r3, r3
 801727c:	f043 0301 	orr.w	r3, r3, #1
 8017280:	b2da      	uxtb	r2, r3
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801728c:	2b00      	cmp	r3, #0
 801728e:	d004      	beq.n	801729a <I2C_Master_SB+0x92>
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017296:	2b00      	cmp	r3, #0
 8017298:	d108      	bne.n	80172ac <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d032      	beq.n	8017308 <I2C_Master_SB+0x100>
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d02d      	beq.n	8017308 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	685a      	ldr	r2, [r3, #4]
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80172ba:	605a      	str	r2, [r3, #4]
}
 80172bc:	e024      	b.n	8017308 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d10e      	bne.n	80172e4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80172ca:	b29b      	uxth	r3, r3
 80172cc:	11db      	asrs	r3, r3, #7
 80172ce:	b2db      	uxtb	r3, r3
 80172d0:	f003 0306 	and.w	r3, r3, #6
 80172d4:	b2db      	uxtb	r3, r3
 80172d6:	f063 030f 	orn	r3, r3, #15
 80172da:	b2da      	uxtb	r2, r3
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	611a      	str	r2, [r3, #16]
}
 80172e2:	e011      	b.n	8017308 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80172e8:	2b01      	cmp	r3, #1
 80172ea:	d10d      	bne.n	8017308 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80172f0:	b29b      	uxth	r3, r3
 80172f2:	11db      	asrs	r3, r3, #7
 80172f4:	b2db      	uxtb	r3, r3
 80172f6:	f003 0306 	and.w	r3, r3, #6
 80172fa:	b2db      	uxtb	r3, r3
 80172fc:	f063 030e 	orn	r3, r3, #14
 8017300:	b2da      	uxtb	r2, r3
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	611a      	str	r2, [r3, #16]
}
 8017308:	bf00      	nop
 801730a:	370c      	adds	r7, #12
 801730c:	46bd      	mov	sp, r7
 801730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017312:	4770      	bx	lr

08017314 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8017314:	b480      	push	{r7}
 8017316:	b083      	sub	sp, #12
 8017318:	af00      	add	r7, sp, #0
 801731a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017320:	b2da      	uxtb	r2, r3
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801732c:	2b00      	cmp	r3, #0
 801732e:	d103      	bne.n	8017338 <I2C_Master_ADD10+0x24>
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017334:	2b00      	cmp	r3, #0
 8017336:	d011      	beq.n	801735c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801733c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801733e:	2b00      	cmp	r3, #0
 8017340:	d104      	bne.n	801734c <I2C_Master_ADD10+0x38>
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017348:	2b00      	cmp	r3, #0
 801734a:	d007      	beq.n	801735c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	685a      	ldr	r2, [r3, #4]
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801735a:	605a      	str	r2, [r3, #4]
    }
  }
}
 801735c:	bf00      	nop
 801735e:	370c      	adds	r7, #12
 8017360:	46bd      	mov	sp, r7
 8017362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017366:	4770      	bx	lr

08017368 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8017368:	b480      	push	{r7}
 801736a:	b091      	sub	sp, #68	; 0x44
 801736c:	af00      	add	r7, sp, #0
 801736e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017376:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801737e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017384:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801738c:	b2db      	uxtb	r3, r3
 801738e:	2b22      	cmp	r3, #34	; 0x22
 8017390:	f040 8169 	bne.w	8017666 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017398:	2b00      	cmp	r3, #0
 801739a:	d10f      	bne.n	80173bc <I2C_Master_ADDR+0x54>
 801739c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80173a0:	2b40      	cmp	r3, #64	; 0x40
 80173a2:	d10b      	bne.n	80173bc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80173a4:	2300      	movs	r3, #0
 80173a6:	633b      	str	r3, [r7, #48]	; 0x30
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	695b      	ldr	r3, [r3, #20]
 80173ae:	633b      	str	r3, [r7, #48]	; 0x30
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	699b      	ldr	r3, [r3, #24]
 80173b6:	633b      	str	r3, [r7, #48]	; 0x30
 80173b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173ba:	e160      	b.n	801767e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d11d      	bne.n	8017400 <I2C_Master_ADDR+0x98>
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	691b      	ldr	r3, [r3, #16]
 80173c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80173cc:	d118      	bne.n	8017400 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80173ce:	2300      	movs	r3, #0
 80173d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	695b      	ldr	r3, [r3, #20]
 80173d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	699b      	ldr	r3, [r3, #24]
 80173e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80173e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	681a      	ldr	r2, [r3, #0]
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80173f2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80173f8:	1c5a      	adds	r2, r3, #1
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	651a      	str	r2, [r3, #80]	; 0x50
 80173fe:	e13e      	b.n	801767e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017404:	b29b      	uxth	r3, r3
 8017406:	2b00      	cmp	r3, #0
 8017408:	d113      	bne.n	8017432 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801740a:	2300      	movs	r3, #0
 801740c:	62bb      	str	r3, [r7, #40]	; 0x28
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	695b      	ldr	r3, [r3, #20]
 8017414:	62bb      	str	r3, [r7, #40]	; 0x28
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	699b      	ldr	r3, [r3, #24]
 801741c:	62bb      	str	r3, [r7, #40]	; 0x28
 801741e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	681a      	ldr	r2, [r3, #0]
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801742e:	601a      	str	r2, [r3, #0]
 8017430:	e115      	b.n	801765e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017436:	b29b      	uxth	r3, r3
 8017438:	2b01      	cmp	r3, #1
 801743a:	f040 808a 	bne.w	8017552 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 801743e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017440:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8017444:	d137      	bne.n	80174b6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	681a      	ldr	r2, [r3, #0]
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017454:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	685b      	ldr	r3, [r3, #4]
 801745c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017464:	d113      	bne.n	801748e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	681a      	ldr	r2, [r3, #0]
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017474:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017476:	2300      	movs	r3, #0
 8017478:	627b      	str	r3, [r7, #36]	; 0x24
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	695b      	ldr	r3, [r3, #20]
 8017480:	627b      	str	r3, [r7, #36]	; 0x24
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	699b      	ldr	r3, [r3, #24]
 8017488:	627b      	str	r3, [r7, #36]	; 0x24
 801748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801748c:	e0e7      	b.n	801765e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801748e:	2300      	movs	r3, #0
 8017490:	623b      	str	r3, [r7, #32]
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	695b      	ldr	r3, [r3, #20]
 8017498:	623b      	str	r3, [r7, #32]
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	699b      	ldr	r3, [r3, #24]
 80174a0:	623b      	str	r3, [r7, #32]
 80174a2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	681a      	ldr	r2, [r3, #0]
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80174b2:	601a      	str	r2, [r3, #0]
 80174b4:	e0d3      	b.n	801765e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80174b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174b8:	2b08      	cmp	r3, #8
 80174ba:	d02e      	beq.n	801751a <I2C_Master_ADDR+0x1b2>
 80174bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174be:	2b20      	cmp	r3, #32
 80174c0:	d02b      	beq.n	801751a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80174c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174c4:	2b12      	cmp	r3, #18
 80174c6:	d102      	bne.n	80174ce <I2C_Master_ADDR+0x166>
 80174c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174ca:	2b01      	cmp	r3, #1
 80174cc:	d125      	bne.n	801751a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80174ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174d0:	2b04      	cmp	r3, #4
 80174d2:	d00e      	beq.n	80174f2 <I2C_Master_ADDR+0x18a>
 80174d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174d6:	2b02      	cmp	r3, #2
 80174d8:	d00b      	beq.n	80174f2 <I2C_Master_ADDR+0x18a>
 80174da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174dc:	2b10      	cmp	r3, #16
 80174de:	d008      	beq.n	80174f2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	681a      	ldr	r2, [r3, #0]
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80174ee:	601a      	str	r2, [r3, #0]
 80174f0:	e007      	b.n	8017502 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	681a      	ldr	r2, [r3, #0]
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017500:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017502:	2300      	movs	r3, #0
 8017504:	61fb      	str	r3, [r7, #28]
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	695b      	ldr	r3, [r3, #20]
 801750c:	61fb      	str	r3, [r7, #28]
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	699b      	ldr	r3, [r3, #24]
 8017514:	61fb      	str	r3, [r7, #28]
 8017516:	69fb      	ldr	r3, [r7, #28]
 8017518:	e0a1      	b.n	801765e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	681a      	ldr	r2, [r3, #0]
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	681b      	ldr	r3, [r3, #0]
 8017524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017528:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801752a:	2300      	movs	r3, #0
 801752c:	61bb      	str	r3, [r7, #24]
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	695b      	ldr	r3, [r3, #20]
 8017534:	61bb      	str	r3, [r7, #24]
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	699b      	ldr	r3, [r3, #24]
 801753c:	61bb      	str	r3, [r7, #24]
 801753e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	681a      	ldr	r2, [r3, #0]
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801754e:	601a      	str	r2, [r3, #0]
 8017550:	e085      	b.n	801765e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017556:	b29b      	uxth	r3, r3
 8017558:	2b02      	cmp	r3, #2
 801755a:	d14d      	bne.n	80175f8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801755c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801755e:	2b04      	cmp	r3, #4
 8017560:	d016      	beq.n	8017590 <I2C_Master_ADDR+0x228>
 8017562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017564:	2b02      	cmp	r3, #2
 8017566:	d013      	beq.n	8017590 <I2C_Master_ADDR+0x228>
 8017568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801756a:	2b10      	cmp	r3, #16
 801756c:	d010      	beq.n	8017590 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	681a      	ldr	r2, [r3, #0]
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801757c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	681a      	ldr	r2, [r3, #0]
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801758c:	601a      	str	r2, [r3, #0]
 801758e:	e007      	b.n	80175a0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	681a      	ldr	r2, [r3, #0]
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801759e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	685b      	ldr	r3, [r3, #4]
 80175a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80175aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80175ae:	d117      	bne.n	80175e0 <I2C_Master_ADDR+0x278>
 80175b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80175b6:	d00b      	beq.n	80175d0 <I2C_Master_ADDR+0x268>
 80175b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175ba:	2b01      	cmp	r3, #1
 80175bc:	d008      	beq.n	80175d0 <I2C_Master_ADDR+0x268>
 80175be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175c0:	2b08      	cmp	r3, #8
 80175c2:	d005      	beq.n	80175d0 <I2C_Master_ADDR+0x268>
 80175c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175c6:	2b10      	cmp	r3, #16
 80175c8:	d002      	beq.n	80175d0 <I2C_Master_ADDR+0x268>
 80175ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175cc:	2b20      	cmp	r3, #32
 80175ce:	d107      	bne.n	80175e0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	685a      	ldr	r2, [r3, #4]
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80175de:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80175e0:	2300      	movs	r3, #0
 80175e2:	617b      	str	r3, [r7, #20]
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	695b      	ldr	r3, [r3, #20]
 80175ea:	617b      	str	r3, [r7, #20]
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	699b      	ldr	r3, [r3, #24]
 80175f2:	617b      	str	r3, [r7, #20]
 80175f4:	697b      	ldr	r3, [r7, #20]
 80175f6:	e032      	b.n	801765e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	681a      	ldr	r2, [r3, #0]
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017606:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	685b      	ldr	r3, [r3, #4]
 801760e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017616:	d117      	bne.n	8017648 <I2C_Master_ADDR+0x2e0>
 8017618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801761a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801761e:	d00b      	beq.n	8017638 <I2C_Master_ADDR+0x2d0>
 8017620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017622:	2b01      	cmp	r3, #1
 8017624:	d008      	beq.n	8017638 <I2C_Master_ADDR+0x2d0>
 8017626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017628:	2b08      	cmp	r3, #8
 801762a:	d005      	beq.n	8017638 <I2C_Master_ADDR+0x2d0>
 801762c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801762e:	2b10      	cmp	r3, #16
 8017630:	d002      	beq.n	8017638 <I2C_Master_ADDR+0x2d0>
 8017632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017634:	2b20      	cmp	r3, #32
 8017636:	d107      	bne.n	8017648 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	681b      	ldr	r3, [r3, #0]
 801763c:	685a      	ldr	r2, [r3, #4]
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8017646:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017648:	2300      	movs	r3, #0
 801764a:	613b      	str	r3, [r7, #16]
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	695b      	ldr	r3, [r3, #20]
 8017652:	613b      	str	r3, [r7, #16]
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	699b      	ldr	r3, [r3, #24]
 801765a:	613b      	str	r3, [r7, #16]
 801765c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	2200      	movs	r2, #0
 8017662:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8017664:	e00b      	b.n	801767e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017666:	2300      	movs	r3, #0
 8017668:	60fb      	str	r3, [r7, #12]
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	695b      	ldr	r3, [r3, #20]
 8017670:	60fb      	str	r3, [r7, #12]
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	699b      	ldr	r3, [r3, #24]
 8017678:	60fb      	str	r3, [r7, #12]
 801767a:	68fb      	ldr	r3, [r7, #12]
}
 801767c:	e7ff      	b.n	801767e <I2C_Master_ADDR+0x316>
 801767e:	bf00      	nop
 8017680:	3744      	adds	r7, #68	; 0x44
 8017682:	46bd      	mov	sp, r7
 8017684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017688:	4770      	bx	lr

0801768a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801768a:	b580      	push	{r7, lr}
 801768c:	b084      	sub	sp, #16
 801768e:	af00      	add	r7, sp, #0
 8017690:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017698:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801769e:	b29b      	uxth	r3, r3
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d02b      	beq.n	80176fc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176a8:	781a      	ldrb	r2, [r3, #0]
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176b4:	1c5a      	adds	r2, r3, #1
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80176be:	b29b      	uxth	r3, r3
 80176c0:	3b01      	subs	r3, #1
 80176c2:	b29a      	uxth	r2, r3
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80176cc:	b29b      	uxth	r3, r3
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d114      	bne.n	80176fc <I2C_SlaveTransmit_TXE+0x72>
 80176d2:	7bfb      	ldrb	r3, [r7, #15]
 80176d4:	2b29      	cmp	r3, #41	; 0x29
 80176d6:	d111      	bne.n	80176fc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	685a      	ldr	r2, [r3, #4]
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80176e6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	2221      	movs	r2, #33	; 0x21
 80176ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	2228      	movs	r2, #40	; 0x28
 80176f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80176f6:	6878      	ldr	r0, [r7, #4]
 80176f8:	f7ff fa4d 	bl	8016b96 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80176fc:	bf00      	nop
 80176fe:	3710      	adds	r7, #16
 8017700:	46bd      	mov	sp, r7
 8017702:	bd80      	pop	{r7, pc}

08017704 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8017704:	b480      	push	{r7}
 8017706:	b083      	sub	sp, #12
 8017708:	af00      	add	r7, sp, #0
 801770a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017710:	b29b      	uxth	r3, r3
 8017712:	2b00      	cmp	r3, #0
 8017714:	d011      	beq.n	801773a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801771a:	781a      	ldrb	r2, [r3, #0]
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017726:	1c5a      	adds	r2, r3, #1
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017730:	b29b      	uxth	r3, r3
 8017732:	3b01      	subs	r3, #1
 8017734:	b29a      	uxth	r2, r3
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801773a:	bf00      	nop
 801773c:	370c      	adds	r7, #12
 801773e:	46bd      	mov	sp, r7
 8017740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017744:	4770      	bx	lr

08017746 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8017746:	b580      	push	{r7, lr}
 8017748:	b084      	sub	sp, #16
 801774a:	af00      	add	r7, sp, #0
 801774c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017754:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801775a:	b29b      	uxth	r3, r3
 801775c:	2b00      	cmp	r3, #0
 801775e:	d02c      	beq.n	80177ba <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	691a      	ldr	r2, [r3, #16]
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801776a:	b2d2      	uxtb	r2, r2
 801776c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017772:	1c5a      	adds	r2, r3, #1
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801777c:	b29b      	uxth	r3, r3
 801777e:	3b01      	subs	r3, #1
 8017780:	b29a      	uxth	r2, r3
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801778a:	b29b      	uxth	r3, r3
 801778c:	2b00      	cmp	r3, #0
 801778e:	d114      	bne.n	80177ba <I2C_SlaveReceive_RXNE+0x74>
 8017790:	7bfb      	ldrb	r3, [r7, #15]
 8017792:	2b2a      	cmp	r3, #42	; 0x2a
 8017794:	d111      	bne.n	80177ba <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	685a      	ldr	r2, [r3, #4]
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80177a4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	2222      	movs	r2, #34	; 0x22
 80177aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	2228      	movs	r2, #40	; 0x28
 80177b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80177b4:	6878      	ldr	r0, [r7, #4]
 80177b6:	f7ff f9f8 	bl	8016baa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80177ba:	bf00      	nop
 80177bc:	3710      	adds	r7, #16
 80177be:	46bd      	mov	sp, r7
 80177c0:	bd80      	pop	{r7, pc}

080177c2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80177c2:	b480      	push	{r7}
 80177c4:	b083      	sub	sp, #12
 80177c6:	af00      	add	r7, sp, #0
 80177c8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80177ce:	b29b      	uxth	r3, r3
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d012      	beq.n	80177fa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	691a      	ldr	r2, [r3, #16]
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177de:	b2d2      	uxtb	r2, r2
 80177e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177e6:	1c5a      	adds	r2, r3, #1
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80177f0:	b29b      	uxth	r3, r3
 80177f2:	3b01      	subs	r3, #1
 80177f4:	b29a      	uxth	r2, r3
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80177fa:	bf00      	nop
 80177fc:	370c      	adds	r7, #12
 80177fe:	46bd      	mov	sp, r7
 8017800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017804:	4770      	bx	lr

08017806 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8017806:	b580      	push	{r7, lr}
 8017808:	b084      	sub	sp, #16
 801780a:	af00      	add	r7, sp, #0
 801780c:	6078      	str	r0, [r7, #4]
 801780e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8017810:	2300      	movs	r3, #0
 8017812:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801781a:	b2db      	uxtb	r3, r3
 801781c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8017820:	2b28      	cmp	r3, #40	; 0x28
 8017822:	d127      	bne.n	8017874 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	685a      	ldr	r2, [r3, #4]
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017832:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8017834:	683b      	ldr	r3, [r7, #0]
 8017836:	089b      	lsrs	r3, r3, #2
 8017838:	f003 0301 	and.w	r3, r3, #1
 801783c:	2b00      	cmp	r3, #0
 801783e:	d101      	bne.n	8017844 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8017840:	2301      	movs	r3, #1
 8017842:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8017844:	683b      	ldr	r3, [r7, #0]
 8017846:	09db      	lsrs	r3, r3, #7
 8017848:	f003 0301 	and.w	r3, r3, #1
 801784c:	2b00      	cmp	r3, #0
 801784e:	d103      	bne.n	8017858 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	68db      	ldr	r3, [r3, #12]
 8017854:	81bb      	strh	r3, [r7, #12]
 8017856:	e002      	b.n	801785e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	699b      	ldr	r3, [r3, #24]
 801785c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	2200      	movs	r2, #0
 8017862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8017866:	89ba      	ldrh	r2, [r7, #12]
 8017868:	7bfb      	ldrb	r3, [r7, #15]
 801786a:	4619      	mov	r1, r3
 801786c:	6878      	ldr	r0, [r7, #4]
 801786e:	f7ff f9a6 	bl	8016bbe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8017872:	e008      	b.n	8017886 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	f06f 0202 	mvn.w	r2, #2
 801787c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	2200      	movs	r2, #0
 8017882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8017886:	bf00      	nop
 8017888:	3710      	adds	r7, #16
 801788a:	46bd      	mov	sp, r7
 801788c:	bd80      	pop	{r7, pc}
	...

08017890 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8017890:	b580      	push	{r7, lr}
 8017892:	b084      	sub	sp, #16
 8017894:	af00      	add	r7, sp, #0
 8017896:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801789e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	685a      	ldr	r2, [r3, #4]
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80178ae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80178b0:	2300      	movs	r3, #0
 80178b2:	60bb      	str	r3, [r7, #8]
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	695b      	ldr	r3, [r3, #20]
 80178ba:	60bb      	str	r3, [r7, #8]
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	681a      	ldr	r2, [r3, #0]
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	f042 0201 	orr.w	r2, r2, #1
 80178ca:	601a      	str	r2, [r3, #0]
 80178cc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	681a      	ldr	r2, [r3, #0]
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80178dc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	685b      	ldr	r3, [r3, #4]
 80178e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80178e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80178ec:	d172      	bne.n	80179d4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80178ee:	7bfb      	ldrb	r3, [r7, #15]
 80178f0:	2b22      	cmp	r3, #34	; 0x22
 80178f2:	d002      	beq.n	80178fa <I2C_Slave_STOPF+0x6a>
 80178f4:	7bfb      	ldrb	r3, [r7, #15]
 80178f6:	2b2a      	cmp	r3, #42	; 0x2a
 80178f8:	d135      	bne.n	8017966 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	685b      	ldr	r3, [r3, #4]
 8017902:	b29a      	uxth	r2, r3
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801790c:	b29b      	uxth	r3, r3
 801790e:	2b00      	cmp	r3, #0
 8017910:	d005      	beq.n	801791e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017916:	f043 0204 	orr.w	r2, r3, #4
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	685a      	ldr	r2, [r3, #4]
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801792c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017932:	4618      	mov	r0, r3
 8017934:	f7fd fe00 	bl	8015538 <HAL_DMA_GetState>
 8017938:	4603      	mov	r3, r0
 801793a:	2b01      	cmp	r3, #1
 801793c:	d049      	beq.n	80179d2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017942:	4a69      	ldr	r2, [pc, #420]	; (8017ae8 <I2C_Slave_STOPF+0x258>)
 8017944:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801794a:	4618      	mov	r0, r3
 801794c:	f7fd fc48 	bl	80151e0 <HAL_DMA_Abort_IT>
 8017950:	4603      	mov	r3, r0
 8017952:	2b00      	cmp	r3, #0
 8017954:	d03d      	beq.n	80179d2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801795a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801795c:	687a      	ldr	r2, [r7, #4]
 801795e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8017960:	4610      	mov	r0, r2
 8017962:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8017964:	e035      	b.n	80179d2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	685b      	ldr	r3, [r3, #4]
 801796e:	b29a      	uxth	r2, r3
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017978:	b29b      	uxth	r3, r3
 801797a:	2b00      	cmp	r3, #0
 801797c:	d005      	beq.n	801798a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017982:	f043 0204 	orr.w	r2, r3, #4
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	685a      	ldr	r2, [r3, #4]
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017998:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801799e:	4618      	mov	r0, r3
 80179a0:	f7fd fdca 	bl	8015538 <HAL_DMA_GetState>
 80179a4:	4603      	mov	r3, r0
 80179a6:	2b01      	cmp	r3, #1
 80179a8:	d014      	beq.n	80179d4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80179ae:	4a4e      	ldr	r2, [pc, #312]	; (8017ae8 <I2C_Slave_STOPF+0x258>)
 80179b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80179b6:	4618      	mov	r0, r3
 80179b8:	f7fd fc12 	bl	80151e0 <HAL_DMA_Abort_IT>
 80179bc:	4603      	mov	r3, r0
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d008      	beq.n	80179d4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80179c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80179c8:	687a      	ldr	r2, [r7, #4]
 80179ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80179cc:	4610      	mov	r0, r2
 80179ce:	4798      	blx	r3
 80179d0:	e000      	b.n	80179d4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80179d2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80179d8:	b29b      	uxth	r3, r3
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d03e      	beq.n	8017a5c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	695b      	ldr	r3, [r3, #20]
 80179e4:	f003 0304 	and.w	r3, r3, #4
 80179e8:	2b04      	cmp	r3, #4
 80179ea:	d112      	bne.n	8017a12 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	691a      	ldr	r2, [r3, #16]
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179f6:	b2d2      	uxtb	r2, r2
 80179f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179fe:	1c5a      	adds	r2, r3, #1
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017a08:	b29b      	uxth	r3, r3
 8017a0a:	3b01      	subs	r3, #1
 8017a0c:	b29a      	uxth	r2, r3
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	681b      	ldr	r3, [r3, #0]
 8017a16:	695b      	ldr	r3, [r3, #20]
 8017a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017a1c:	2b40      	cmp	r3, #64	; 0x40
 8017a1e:	d112      	bne.n	8017a46 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	691a      	ldr	r2, [r3, #16]
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a2a:	b2d2      	uxtb	r2, r2
 8017a2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a32:	1c5a      	adds	r2, r3, #1
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017a3c:	b29b      	uxth	r3, r3
 8017a3e:	3b01      	subs	r3, #1
 8017a40:	b29a      	uxth	r2, r3
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017a4a:	b29b      	uxth	r3, r3
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d005      	beq.n	8017a5c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a54:	f043 0204 	orr.w	r2, r3, #4
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d003      	beq.n	8017a6c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8017a64:	6878      	ldr	r0, [r7, #4]
 8017a66:	f000 f8b3 	bl	8017bd0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8017a6a:	e039      	b.n	8017ae0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8017a6c:	7bfb      	ldrb	r3, [r7, #15]
 8017a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8017a70:	d109      	bne.n	8017a86 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	2200      	movs	r2, #0
 8017a76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	2228      	movs	r2, #40	; 0x28
 8017a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8017a80:	6878      	ldr	r0, [r7, #4]
 8017a82:	f7ff f892 	bl	8016baa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017a8c:	b2db      	uxtb	r3, r3
 8017a8e:	2b28      	cmp	r3, #40	; 0x28
 8017a90:	d111      	bne.n	8017ab6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	4a15      	ldr	r2, [pc, #84]	; (8017aec <I2C_Slave_STOPF+0x25c>)
 8017a96:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	2200      	movs	r2, #0
 8017a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	2220      	movs	r2, #32
 8017aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	2200      	movs	r2, #0
 8017aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8017aae:	6878      	ldr	r0, [r7, #4]
 8017ab0:	f7ff f893 	bl	8016bda <HAL_I2C_ListenCpltCallback>
}
 8017ab4:	e014      	b.n	8017ae0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017aba:	2b22      	cmp	r3, #34	; 0x22
 8017abc:	d002      	beq.n	8017ac4 <I2C_Slave_STOPF+0x234>
 8017abe:	7bfb      	ldrb	r3, [r7, #15]
 8017ac0:	2b22      	cmp	r3, #34	; 0x22
 8017ac2:	d10d      	bne.n	8017ae0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	2200      	movs	r2, #0
 8017ac8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	2220      	movs	r2, #32
 8017ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	2200      	movs	r2, #0
 8017ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8017ada:	6878      	ldr	r0, [r7, #4]
 8017adc:	f7ff f865 	bl	8016baa <HAL_I2C_SlaveRxCpltCallback>
}
 8017ae0:	bf00      	nop
 8017ae2:	3710      	adds	r7, #16
 8017ae4:	46bd      	mov	sp, r7
 8017ae6:	bd80      	pop	{r7, pc}
 8017ae8:	08018345 	.word	0x08018345
 8017aec:	ffff0000 	.word	0xffff0000

08017af0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8017af0:	b580      	push	{r7, lr}
 8017af2:	b084      	sub	sp, #16
 8017af4:	af00      	add	r7, sp, #0
 8017af6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017afe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b04:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8017b06:	68bb      	ldr	r3, [r7, #8]
 8017b08:	2b08      	cmp	r3, #8
 8017b0a:	d002      	beq.n	8017b12 <I2C_Slave_AF+0x22>
 8017b0c:	68bb      	ldr	r3, [r7, #8]
 8017b0e:	2b20      	cmp	r3, #32
 8017b10:	d129      	bne.n	8017b66 <I2C_Slave_AF+0x76>
 8017b12:	7bfb      	ldrb	r3, [r7, #15]
 8017b14:	2b28      	cmp	r3, #40	; 0x28
 8017b16:	d126      	bne.n	8017b66 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	4a2c      	ldr	r2, [pc, #176]	; (8017bcc <I2C_Slave_AF+0xdc>)
 8017b1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	685a      	ldr	r2, [r3, #4]
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017b2c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8017b36:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	681a      	ldr	r2, [r3, #0]
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017b46:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	2220      	movs	r2, #32
 8017b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	2200      	movs	r2, #0
 8017b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8017b5e:	6878      	ldr	r0, [r7, #4]
 8017b60:	f7ff f83b 	bl	8016bda <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8017b64:	e02e      	b.n	8017bc4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8017b66:	7bfb      	ldrb	r3, [r7, #15]
 8017b68:	2b21      	cmp	r3, #33	; 0x21
 8017b6a:	d126      	bne.n	8017bba <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	4a17      	ldr	r2, [pc, #92]	; (8017bcc <I2C_Slave_AF+0xdc>)
 8017b70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	2221      	movs	r2, #33	; 0x21
 8017b76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	2220      	movs	r2, #32
 8017b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	2200      	movs	r2, #0
 8017b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	685a      	ldr	r2, [r3, #4]
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017b96:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8017ba0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	681a      	ldr	r2, [r3, #0]
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017bb0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8017bb2:	6878      	ldr	r0, [r7, #4]
 8017bb4:	f7fe ffef 	bl	8016b96 <HAL_I2C_SlaveTxCpltCallback>
}
 8017bb8:	e004      	b.n	8017bc4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8017bc2:	615a      	str	r2, [r3, #20]
}
 8017bc4:	bf00      	nop
 8017bc6:	3710      	adds	r7, #16
 8017bc8:	46bd      	mov	sp, r7
 8017bca:	bd80      	pop	{r7, pc}
 8017bcc:	ffff0000 	.word	0xffff0000

08017bd0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8017bd0:	b580      	push	{r7, lr}
 8017bd2:	b084      	sub	sp, #16
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017bde:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017be6:	b2db      	uxtb	r3, r3
 8017be8:	2b10      	cmp	r3, #16
 8017bea:	d10a      	bne.n	8017c02 <I2C_ITError+0x32>
 8017bec:	7bfb      	ldrb	r3, [r7, #15]
 8017bee:	2b22      	cmp	r3, #34	; 0x22
 8017bf0:	d107      	bne.n	8017c02 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	681a      	ldr	r2, [r3, #0]
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017c00:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8017c02:	7bfb      	ldrb	r3, [r7, #15]
 8017c04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8017c08:	2b28      	cmp	r3, #40	; 0x28
 8017c0a:	d107      	bne.n	8017c1c <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	2200      	movs	r2, #0
 8017c10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	2228      	movs	r2, #40	; 0x28
 8017c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8017c1a:	e015      	b.n	8017c48 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	685b      	ldr	r3, [r3, #4]
 8017c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017c2a:	d006      	beq.n	8017c3a <I2C_ITError+0x6a>
 8017c2c:	7bfb      	ldrb	r3, [r7, #15]
 8017c2e:	2b60      	cmp	r3, #96	; 0x60
 8017c30:	d003      	beq.n	8017c3a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	2220      	movs	r2, #32
 8017c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	2200      	movs	r2, #0
 8017c3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	2200      	movs	r2, #0
 8017c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	685b      	ldr	r3, [r3, #4]
 8017c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017c52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017c56:	d162      	bne.n	8017d1e <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	685a      	ldr	r2, [r3, #4]
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	681b      	ldr	r3, [r3, #0]
 8017c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017c66:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017c70:	b2db      	uxtb	r3, r3
 8017c72:	2b01      	cmp	r3, #1
 8017c74:	d020      	beq.n	8017cb8 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c7a:	4a6a      	ldr	r2, [pc, #424]	; (8017e24 <I2C_ITError+0x254>)
 8017c7c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c82:	4618      	mov	r0, r3
 8017c84:	f7fd faac 	bl	80151e0 <HAL_DMA_Abort_IT>
 8017c88:	4603      	mov	r3, r0
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	f000 8089 	beq.w	8017da2 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	681a      	ldr	r2, [r3, #0]
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	f022 0201 	bic.w	r2, r2, #1
 8017c9e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	2220      	movs	r2, #32
 8017ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017cae:	687a      	ldr	r2, [r7, #4]
 8017cb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8017cb2:	4610      	mov	r0, r2
 8017cb4:	4798      	blx	r3
 8017cb6:	e074      	b.n	8017da2 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017cbc:	4a59      	ldr	r2, [pc, #356]	; (8017e24 <I2C_ITError+0x254>)
 8017cbe:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	f7fd fa8b 	bl	80151e0 <HAL_DMA_Abort_IT>
 8017cca:	4603      	mov	r3, r0
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d068      	beq.n	8017da2 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	695b      	ldr	r3, [r3, #20]
 8017cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017cda:	2b40      	cmp	r3, #64	; 0x40
 8017cdc:	d10b      	bne.n	8017cf6 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	691a      	ldr	r2, [r3, #16]
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ce8:	b2d2      	uxtb	r2, r2
 8017cea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cf0:	1c5a      	adds	r2, r3, #1
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	681a      	ldr	r2, [r3, #0]
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	f022 0201 	bic.w	r2, r2, #1
 8017d04:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	2220      	movs	r2, #32
 8017d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017d14:	687a      	ldr	r2, [r7, #4]
 8017d16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8017d18:	4610      	mov	r0, r2
 8017d1a:	4798      	blx	r3
 8017d1c:	e041      	b.n	8017da2 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017d24:	b2db      	uxtb	r3, r3
 8017d26:	2b60      	cmp	r3, #96	; 0x60
 8017d28:	d125      	bne.n	8017d76 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	2220      	movs	r2, #32
 8017d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	2200      	movs	r2, #0
 8017d36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	695b      	ldr	r3, [r3, #20]
 8017d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017d42:	2b40      	cmp	r3, #64	; 0x40
 8017d44:	d10b      	bne.n	8017d5e <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	681b      	ldr	r3, [r3, #0]
 8017d4a:	691a      	ldr	r2, [r3, #16]
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d50:	b2d2      	uxtb	r2, r2
 8017d52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d58:	1c5a      	adds	r2, r3, #1
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	681a      	ldr	r2, [r3, #0]
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	681b      	ldr	r3, [r3, #0]
 8017d68:	f022 0201 	bic.w	r2, r2, #1
 8017d6c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8017d6e:	6878      	ldr	r0, [r7, #4]
 8017d70:	f7fe ff51 	bl	8016c16 <HAL_I2C_AbortCpltCallback>
 8017d74:	e015      	b.n	8017da2 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	695b      	ldr	r3, [r3, #20]
 8017d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017d80:	2b40      	cmp	r3, #64	; 0x40
 8017d82:	d10b      	bne.n	8017d9c <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	691a      	ldr	r2, [r3, #16]
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d8e:	b2d2      	uxtb	r2, r2
 8017d90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d96:	1c5a      	adds	r2, r3, #1
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8017d9c:	6878      	ldr	r0, [r7, #4]
 8017d9e:	f7fe ff30 	bl	8016c02 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017da6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8017da8:	68bb      	ldr	r3, [r7, #8]
 8017daa:	f003 0301 	and.w	r3, r3, #1
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d10e      	bne.n	8017dd0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8017db2:	68bb      	ldr	r3, [r7, #8]
 8017db4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d109      	bne.n	8017dd0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8017dbc:	68bb      	ldr	r3, [r7, #8]
 8017dbe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d104      	bne.n	8017dd0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8017dc6:	68bb      	ldr	r3, [r7, #8]
 8017dc8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d007      	beq.n	8017de0 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	685a      	ldr	r2, [r3, #4]
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017dde:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017de6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017dec:	f003 0304 	and.w	r3, r3, #4
 8017df0:	2b04      	cmp	r3, #4
 8017df2:	d113      	bne.n	8017e1c <I2C_ITError+0x24c>
 8017df4:	7bfb      	ldrb	r3, [r7, #15]
 8017df6:	2b28      	cmp	r3, #40	; 0x28
 8017df8:	d110      	bne.n	8017e1c <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	4a0a      	ldr	r2, [pc, #40]	; (8017e28 <I2C_ITError+0x258>)
 8017dfe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	2200      	movs	r2, #0
 8017e04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	2220      	movs	r2, #32
 8017e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	2200      	movs	r2, #0
 8017e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8017e16:	6878      	ldr	r0, [r7, #4]
 8017e18:	f7fe fedf 	bl	8016bda <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8017e1c:	bf00      	nop
 8017e1e:	3710      	adds	r7, #16
 8017e20:	46bd      	mov	sp, r7
 8017e22:	bd80      	pop	{r7, pc}
 8017e24:	08018345 	.word	0x08018345
 8017e28:	ffff0000 	.word	0xffff0000

08017e2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b088      	sub	sp, #32
 8017e30:	af02      	add	r7, sp, #8
 8017e32:	60f8      	str	r0, [r7, #12]
 8017e34:	4608      	mov	r0, r1
 8017e36:	4611      	mov	r1, r2
 8017e38:	461a      	mov	r2, r3
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	817b      	strh	r3, [r7, #10]
 8017e3e:	460b      	mov	r3, r1
 8017e40:	813b      	strh	r3, [r7, #8]
 8017e42:	4613      	mov	r3, r2
 8017e44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	681a      	ldr	r2, [r3, #0]
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017e54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8017e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e58:	9300      	str	r3, [sp, #0]
 8017e5a:	6a3b      	ldr	r3, [r7, #32]
 8017e5c:	2200      	movs	r2, #0
 8017e5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8017e62:	68f8      	ldr	r0, [r7, #12]
 8017e64:	f000 faed 	bl	8018442 <I2C_WaitOnFlagUntilTimeout>
 8017e68:	4603      	mov	r3, r0
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d00c      	beq.n	8017e88 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d003      	beq.n	8017e84 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017e82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8017e84:	2303      	movs	r3, #3
 8017e86:	e05f      	b.n	8017f48 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8017e88:	897b      	ldrh	r3, [r7, #10]
 8017e8a:	b2db      	uxtb	r3, r3
 8017e8c:	461a      	mov	r2, r3
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8017e96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8017e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e9a:	6a3a      	ldr	r2, [r7, #32]
 8017e9c:	492c      	ldr	r1, [pc, #176]	; (8017f50 <I2C_RequestMemoryWrite+0x124>)
 8017e9e:	68f8      	ldr	r0, [r7, #12]
 8017ea0:	f000 fb26 	bl	80184f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8017ea4:	4603      	mov	r3, r0
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d001      	beq.n	8017eae <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8017eaa:	2301      	movs	r3, #1
 8017eac:	e04c      	b.n	8017f48 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017eae:	2300      	movs	r3, #0
 8017eb0:	617b      	str	r3, [r7, #20]
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	695b      	ldr	r3, [r3, #20]
 8017eb8:	617b      	str	r3, [r7, #20]
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	699b      	ldr	r3, [r3, #24]
 8017ec0:	617b      	str	r3, [r7, #20]
 8017ec2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ec6:	6a39      	ldr	r1, [r7, #32]
 8017ec8:	68f8      	ldr	r0, [r7, #12]
 8017eca:	f000 fb90 	bl	80185ee <I2C_WaitOnTXEFlagUntilTimeout>
 8017ece:	4603      	mov	r3, r0
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d00d      	beq.n	8017ef0 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ed8:	2b04      	cmp	r3, #4
 8017eda:	d107      	bne.n	8017eec <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017edc:	68fb      	ldr	r3, [r7, #12]
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	681a      	ldr	r2, [r3, #0]
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017eea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8017eec:	2301      	movs	r3, #1
 8017eee:	e02b      	b.n	8017f48 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8017ef0:	88fb      	ldrh	r3, [r7, #6]
 8017ef2:	2b01      	cmp	r3, #1
 8017ef4:	d105      	bne.n	8017f02 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8017ef6:	893b      	ldrh	r3, [r7, #8]
 8017ef8:	b2da      	uxtb	r2, r3
 8017efa:	68fb      	ldr	r3, [r7, #12]
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	611a      	str	r2, [r3, #16]
 8017f00:	e021      	b.n	8017f46 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8017f02:	893b      	ldrh	r3, [r7, #8]
 8017f04:	0a1b      	lsrs	r3, r3, #8
 8017f06:	b29b      	uxth	r3, r3
 8017f08:	b2da      	uxtb	r2, r3
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f12:	6a39      	ldr	r1, [r7, #32]
 8017f14:	68f8      	ldr	r0, [r7, #12]
 8017f16:	f000 fb6a 	bl	80185ee <I2C_WaitOnTXEFlagUntilTimeout>
 8017f1a:	4603      	mov	r3, r0
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d00d      	beq.n	8017f3c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f24:	2b04      	cmp	r3, #4
 8017f26:	d107      	bne.n	8017f38 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	681a      	ldr	r2, [r3, #0]
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017f36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8017f38:	2301      	movs	r3, #1
 8017f3a:	e005      	b.n	8017f48 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8017f3c:	893b      	ldrh	r3, [r7, #8]
 8017f3e:	b2da      	uxtb	r2, r3
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8017f46:	2300      	movs	r3, #0
}
 8017f48:	4618      	mov	r0, r3
 8017f4a:	3718      	adds	r7, #24
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	bd80      	pop	{r7, pc}
 8017f50:	00010002 	.word	0x00010002

08017f54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b088      	sub	sp, #32
 8017f58:	af02      	add	r7, sp, #8
 8017f5a:	60f8      	str	r0, [r7, #12]
 8017f5c:	4608      	mov	r0, r1
 8017f5e:	4611      	mov	r1, r2
 8017f60:	461a      	mov	r2, r3
 8017f62:	4603      	mov	r3, r0
 8017f64:	817b      	strh	r3, [r7, #10]
 8017f66:	460b      	mov	r3, r1
 8017f68:	813b      	strh	r3, [r7, #8]
 8017f6a:	4613      	mov	r3, r2
 8017f6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	681a      	ldr	r2, [r3, #0]
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017f7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	681a      	ldr	r2, [r3, #0]
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017f8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8017f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f90:	9300      	str	r3, [sp, #0]
 8017f92:	6a3b      	ldr	r3, [r7, #32]
 8017f94:	2200      	movs	r2, #0
 8017f96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8017f9a:	68f8      	ldr	r0, [r7, #12]
 8017f9c:	f000 fa51 	bl	8018442 <I2C_WaitOnFlagUntilTimeout>
 8017fa0:	4603      	mov	r3, r0
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d00c      	beq.n	8017fc0 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d003      	beq.n	8017fbc <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8017fb4:	68fb      	ldr	r3, [r7, #12]
 8017fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017fba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8017fbc:	2303      	movs	r3, #3
 8017fbe:	e0a9      	b.n	8018114 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8017fc0:	897b      	ldrh	r3, [r7, #10]
 8017fc2:	b2db      	uxtb	r3, r3
 8017fc4:	461a      	mov	r2, r3
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8017fce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8017fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fd2:	6a3a      	ldr	r2, [r7, #32]
 8017fd4:	4951      	ldr	r1, [pc, #324]	; (801811c <I2C_RequestMemoryRead+0x1c8>)
 8017fd6:	68f8      	ldr	r0, [r7, #12]
 8017fd8:	f000 fa8a 	bl	80184f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d001      	beq.n	8017fe6 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8017fe2:	2301      	movs	r3, #1
 8017fe4:	e096      	b.n	8018114 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017fe6:	2300      	movs	r3, #0
 8017fe8:	617b      	str	r3, [r7, #20]
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	695b      	ldr	r3, [r3, #20]
 8017ff0:	617b      	str	r3, [r7, #20]
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	699b      	ldr	r3, [r3, #24]
 8017ff8:	617b      	str	r3, [r7, #20]
 8017ffa:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ffe:	6a39      	ldr	r1, [r7, #32]
 8018000:	68f8      	ldr	r0, [r7, #12]
 8018002:	f000 faf4 	bl	80185ee <I2C_WaitOnTXEFlagUntilTimeout>
 8018006:	4603      	mov	r3, r0
 8018008:	2b00      	cmp	r3, #0
 801800a:	d00d      	beq.n	8018028 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018010:	2b04      	cmp	r3, #4
 8018012:	d107      	bne.n	8018024 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	681a      	ldr	r2, [r3, #0]
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018022:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8018024:	2301      	movs	r3, #1
 8018026:	e075      	b.n	8018114 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8018028:	88fb      	ldrh	r3, [r7, #6]
 801802a:	2b01      	cmp	r3, #1
 801802c:	d105      	bne.n	801803a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801802e:	893b      	ldrh	r3, [r7, #8]
 8018030:	b2da      	uxtb	r2, r3
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	611a      	str	r2, [r3, #16]
 8018038:	e021      	b.n	801807e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801803a:	893b      	ldrh	r3, [r7, #8]
 801803c:	0a1b      	lsrs	r3, r3, #8
 801803e:	b29b      	uxth	r3, r3
 8018040:	b2da      	uxtb	r2, r3
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801804a:	6a39      	ldr	r1, [r7, #32]
 801804c:	68f8      	ldr	r0, [r7, #12]
 801804e:	f000 face 	bl	80185ee <I2C_WaitOnTXEFlagUntilTimeout>
 8018052:	4603      	mov	r3, r0
 8018054:	2b00      	cmp	r3, #0
 8018056:	d00d      	beq.n	8018074 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8018058:	68fb      	ldr	r3, [r7, #12]
 801805a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801805c:	2b04      	cmp	r3, #4
 801805e:	d107      	bne.n	8018070 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	681a      	ldr	r2, [r3, #0]
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801806e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8018070:	2301      	movs	r3, #1
 8018072:	e04f      	b.n	8018114 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8018074:	893b      	ldrh	r3, [r7, #8]
 8018076:	b2da      	uxtb	r2, r3
 8018078:	68fb      	ldr	r3, [r7, #12]
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801807e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018080:	6a39      	ldr	r1, [r7, #32]
 8018082:	68f8      	ldr	r0, [r7, #12]
 8018084:	f000 fab3 	bl	80185ee <I2C_WaitOnTXEFlagUntilTimeout>
 8018088:	4603      	mov	r3, r0
 801808a:	2b00      	cmp	r3, #0
 801808c:	d00d      	beq.n	80180aa <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018092:	2b04      	cmp	r3, #4
 8018094:	d107      	bne.n	80180a6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	681a      	ldr	r2, [r3, #0]
 801809c:	68fb      	ldr	r3, [r7, #12]
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80180a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80180a6:	2301      	movs	r3, #1
 80180a8:	e034      	b.n	8018114 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80180aa:	68fb      	ldr	r3, [r7, #12]
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	681a      	ldr	r2, [r3, #0]
 80180b0:	68fb      	ldr	r3, [r7, #12]
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80180b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80180ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180bc:	9300      	str	r3, [sp, #0]
 80180be:	6a3b      	ldr	r3, [r7, #32]
 80180c0:	2200      	movs	r2, #0
 80180c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80180c6:	68f8      	ldr	r0, [r7, #12]
 80180c8:	f000 f9bb 	bl	8018442 <I2C_WaitOnFlagUntilTimeout>
 80180cc:	4603      	mov	r3, r0
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d00c      	beq.n	80180ec <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80180d2:	68fb      	ldr	r3, [r7, #12]
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d003      	beq.n	80180e8 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80180e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80180e8:	2303      	movs	r3, #3
 80180ea:	e013      	b.n	8018114 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80180ec:	897b      	ldrh	r3, [r7, #10]
 80180ee:	b2db      	uxtb	r3, r3
 80180f0:	f043 0301 	orr.w	r3, r3, #1
 80180f4:	b2da      	uxtb	r2, r3
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80180fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180fe:	6a3a      	ldr	r2, [r7, #32]
 8018100:	4906      	ldr	r1, [pc, #24]	; (801811c <I2C_RequestMemoryRead+0x1c8>)
 8018102:	68f8      	ldr	r0, [r7, #12]
 8018104:	f000 f9f4 	bl	80184f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8018108:	4603      	mov	r3, r0
 801810a:	2b00      	cmp	r3, #0
 801810c:	d001      	beq.n	8018112 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 801810e:	2301      	movs	r3, #1
 8018110:	e000      	b.n	8018114 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8018112:	2300      	movs	r3, #0
}
 8018114:	4618      	mov	r0, r3
 8018116:	3718      	adds	r7, #24
 8018118:	46bd      	mov	sp, r7
 801811a:	bd80      	pop	{r7, pc}
 801811c:	00010002 	.word	0x00010002

08018120 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8018120:	b580      	push	{r7, lr}
 8018122:	b086      	sub	sp, #24
 8018124:	af00      	add	r7, sp, #0
 8018126:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801812c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801812e:	697b      	ldr	r3, [r7, #20]
 8018130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018134:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8018136:	697b      	ldr	r3, [r7, #20]
 8018138:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801813c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801813e:	697b      	ldr	r3, [r7, #20]
 8018140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018142:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8018144:	697b      	ldr	r3, [r7, #20]
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	685a      	ldr	r2, [r3, #4]
 801814a:	697b      	ldr	r3, [r7, #20]
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8018152:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8018154:	697b      	ldr	r3, [r7, #20]
 8018156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018158:	2b00      	cmp	r3, #0
 801815a:	d003      	beq.n	8018164 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801815c:	697b      	ldr	r3, [r7, #20]
 801815e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018160:	2200      	movs	r2, #0
 8018162:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8018164:	697b      	ldr	r3, [r7, #20]
 8018166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018168:	2b00      	cmp	r3, #0
 801816a:	d003      	beq.n	8018174 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801816c:	697b      	ldr	r3, [r7, #20]
 801816e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018170:	2200      	movs	r2, #0
 8018172:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8018174:	7cfb      	ldrb	r3, [r7, #19]
 8018176:	f003 0321 	and.w	r3, r3, #33	; 0x21
 801817a:	2b21      	cmp	r3, #33	; 0x21
 801817c:	d007      	beq.n	801818e <I2C_DMAXferCplt+0x6e>
 801817e:	7cfb      	ldrb	r3, [r7, #19]
 8018180:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8018184:	2b22      	cmp	r3, #34	; 0x22
 8018186:	d131      	bne.n	80181ec <I2C_DMAXferCplt+0xcc>
 8018188:	7cbb      	ldrb	r3, [r7, #18]
 801818a:	2b20      	cmp	r3, #32
 801818c:	d12e      	bne.n	80181ec <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801818e:	697b      	ldr	r3, [r7, #20]
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	685a      	ldr	r2, [r3, #4]
 8018194:	697b      	ldr	r3, [r7, #20]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801819c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 801819e:	697b      	ldr	r3, [r7, #20]
 80181a0:	2200      	movs	r2, #0
 80181a2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80181a4:	7cfb      	ldrb	r3, [r7, #19]
 80181a6:	2b29      	cmp	r3, #41	; 0x29
 80181a8:	d10a      	bne.n	80181c0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80181aa:	697b      	ldr	r3, [r7, #20]
 80181ac:	2221      	movs	r2, #33	; 0x21
 80181ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80181b0:	697b      	ldr	r3, [r7, #20]
 80181b2:	2228      	movs	r2, #40	; 0x28
 80181b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80181b8:	6978      	ldr	r0, [r7, #20]
 80181ba:	f7fe fcec 	bl	8016b96 <HAL_I2C_SlaveTxCpltCallback>
 80181be:	e00c      	b.n	80181da <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80181c0:	7cfb      	ldrb	r3, [r7, #19]
 80181c2:	2b2a      	cmp	r3, #42	; 0x2a
 80181c4:	d109      	bne.n	80181da <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80181c6:	697b      	ldr	r3, [r7, #20]
 80181c8:	2222      	movs	r2, #34	; 0x22
 80181ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80181cc:	697b      	ldr	r3, [r7, #20]
 80181ce:	2228      	movs	r2, #40	; 0x28
 80181d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80181d4:	6978      	ldr	r0, [r7, #20]
 80181d6:	f7fe fce8 	bl	8016baa <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80181da:	697b      	ldr	r3, [r7, #20]
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	685a      	ldr	r2, [r3, #4]
 80181e0:	697b      	ldr	r3, [r7, #20]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80181e8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80181ea:	e06a      	b.n	80182c2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80181ec:	697b      	ldr	r3, [r7, #20]
 80181ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80181f2:	b2db      	uxtb	r3, r3
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d064      	beq.n	80182c2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80181f8:	697b      	ldr	r3, [r7, #20]
 80181fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80181fc:	b29b      	uxth	r3, r3
 80181fe:	2b01      	cmp	r3, #1
 8018200:	d107      	bne.n	8018212 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018202:	697b      	ldr	r3, [r7, #20]
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	681a      	ldr	r2, [r3, #0]
 8018208:	697b      	ldr	r3, [r7, #20]
 801820a:	681b      	ldr	r3, [r3, #0]
 801820c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018210:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8018212:	697b      	ldr	r3, [r7, #20]
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	685a      	ldr	r2, [r3, #4]
 8018218:	697b      	ldr	r3, [r7, #20]
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8018220:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8018222:	68fb      	ldr	r3, [r7, #12]
 8018224:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018228:	d009      	beq.n	801823e <I2C_DMAXferCplt+0x11e>
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	2b08      	cmp	r3, #8
 801822e:	d006      	beq.n	801823e <I2C_DMAXferCplt+0x11e>
 8018230:	68fb      	ldr	r3, [r7, #12]
 8018232:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8018236:	d002      	beq.n	801823e <I2C_DMAXferCplt+0x11e>
 8018238:	68fb      	ldr	r3, [r7, #12]
 801823a:	2b20      	cmp	r3, #32
 801823c:	d107      	bne.n	801824e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801823e:	697b      	ldr	r3, [r7, #20]
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	681a      	ldr	r2, [r3, #0]
 8018244:	697b      	ldr	r3, [r7, #20]
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801824c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801824e:	697b      	ldr	r3, [r7, #20]
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	685a      	ldr	r2, [r3, #4]
 8018254:	697b      	ldr	r3, [r7, #20]
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801825c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801825e:	697b      	ldr	r3, [r7, #20]
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	685a      	ldr	r2, [r3, #4]
 8018264:	697b      	ldr	r3, [r7, #20]
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801826c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 801826e:	697b      	ldr	r3, [r7, #20]
 8018270:	2200      	movs	r2, #0
 8018272:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8018274:	697b      	ldr	r3, [r7, #20]
 8018276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018278:	2b00      	cmp	r3, #0
 801827a:	d003      	beq.n	8018284 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 801827c:	6978      	ldr	r0, [r7, #20]
 801827e:	f7fe fcc0 	bl	8016c02 <HAL_I2C_ErrorCallback>
}
 8018282:	e01e      	b.n	80182c2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8018284:	697b      	ldr	r3, [r7, #20]
 8018286:	2220      	movs	r2, #32
 8018288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801828c:	697b      	ldr	r3, [r7, #20]
 801828e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018292:	b2db      	uxtb	r3, r3
 8018294:	2b40      	cmp	r3, #64	; 0x40
 8018296:	d10a      	bne.n	80182ae <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018298:	697b      	ldr	r3, [r7, #20]
 801829a:	2200      	movs	r2, #0
 801829c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80182a0:	697b      	ldr	r3, [r7, #20]
 80182a2:	2200      	movs	r2, #0
 80182a4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80182a6:	6978      	ldr	r0, [r7, #20]
 80182a8:	f7fa fede 	bl	8013068 <HAL_I2C_MemRxCpltCallback>
}
 80182ac:	e009      	b.n	80182c2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80182ae:	697b      	ldr	r3, [r7, #20]
 80182b0:	2200      	movs	r2, #0
 80182b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80182b6:	697b      	ldr	r3, [r7, #20]
 80182b8:	2212      	movs	r2, #18
 80182ba:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80182bc:	6978      	ldr	r0, [r7, #20]
 80182be:	f7fe fc60 	bl	8016b82 <HAL_I2C_MasterRxCpltCallback>
}
 80182c2:	bf00      	nop
 80182c4:	3718      	adds	r7, #24
 80182c6:	46bd      	mov	sp, r7
 80182c8:	bd80      	pop	{r7, pc}

080182ca <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80182ca:	b580      	push	{r7, lr}
 80182cc:	b084      	sub	sp, #16
 80182ce:	af00      	add	r7, sp, #0
 80182d0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182d6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d003      	beq.n	80182e8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80182e4:	2200      	movs	r2, #0
 80182e6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d003      	beq.n	80182f8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182f4:	2200      	movs	r2, #0
 80182f6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80182f8:	6878      	ldr	r0, [r7, #4]
 80182fa:	f7fd f92b 	bl	8015554 <HAL_DMA_GetError>
 80182fe:	4603      	mov	r3, r0
 8018300:	2b02      	cmp	r3, #2
 8018302:	d01b      	beq.n	801833c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8018304:	68fb      	ldr	r3, [r7, #12]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	681a      	ldr	r2, [r3, #0]
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018312:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	2200      	movs	r2, #0
 8018318:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	2220      	movs	r2, #32
 801831e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	2200      	movs	r2, #0
 8018326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801832e:	f043 0210 	orr.w	r2, r3, #16
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8018336:	68f8      	ldr	r0, [r7, #12]
 8018338:	f7fe fc63 	bl	8016c02 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801833c:	bf00      	nop
 801833e:	3710      	adds	r7, #16
 8018340:	46bd      	mov	sp, r7
 8018342:	bd80      	pop	{r7, pc}

08018344 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8018344:	b580      	push	{r7, lr}
 8018346:	b084      	sub	sp, #16
 8018348:	af00      	add	r7, sp, #0
 801834a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018350:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018358:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801835e:	2b00      	cmp	r3, #0
 8018360:	d003      	beq.n	801836a <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018366:	2200      	movs	r2, #0
 8018368:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801836e:	2b00      	cmp	r3, #0
 8018370:	d003      	beq.n	801837a <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018376:	2200      	movs	r2, #0
 8018378:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	681a      	ldr	r2, [r3, #0]
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018388:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 801838a:	68fb      	ldr	r3, [r7, #12]
 801838c:	2200      	movs	r2, #0
 801838e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018394:	2b00      	cmp	r3, #0
 8018396:	d003      	beq.n	80183a0 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801839c:	2200      	movs	r2, #0
 801839e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d003      	beq.n	80183b0 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183ac:	2200      	movs	r2, #0
 80183ae:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	681a      	ldr	r2, [r3, #0]
 80183b6:	68fb      	ldr	r3, [r7, #12]
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	f022 0201 	bic.w	r2, r2, #1
 80183be:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80183c6:	b2db      	uxtb	r3, r3
 80183c8:	2b60      	cmp	r3, #96	; 0x60
 80183ca:	d10e      	bne.n	80183ea <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	2220      	movs	r2, #32
 80183d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80183d4:	68fb      	ldr	r3, [r7, #12]
 80183d6:	2200      	movs	r2, #0
 80183d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	2200      	movs	r2, #0
 80183e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80183e2:	68f8      	ldr	r0, [r7, #12]
 80183e4:	f7fe fc17 	bl	8016c16 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80183e8:	e027      	b.n	801843a <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80183ea:	7afb      	ldrb	r3, [r7, #11]
 80183ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80183f0:	2b28      	cmp	r3, #40	; 0x28
 80183f2:	d117      	bne.n	8018424 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	681a      	ldr	r2, [r3, #0]
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	f042 0201 	orr.w	r2, r2, #1
 8018402:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	681a      	ldr	r2, [r3, #0]
 801840a:	68fb      	ldr	r3, [r7, #12]
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018412:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	2200      	movs	r2, #0
 8018418:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	2228      	movs	r2, #40	; 0x28
 801841e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8018422:	e007      	b.n	8018434 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8018424:	68fb      	ldr	r3, [r7, #12]
 8018426:	2220      	movs	r2, #32
 8018428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	2200      	movs	r2, #0
 8018430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8018434:	68f8      	ldr	r0, [r7, #12]
 8018436:	f7fe fbe4 	bl	8016c02 <HAL_I2C_ErrorCallback>
}
 801843a:	bf00      	nop
 801843c:	3710      	adds	r7, #16
 801843e:	46bd      	mov	sp, r7
 8018440:	bd80      	pop	{r7, pc}

08018442 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8018442:	b580      	push	{r7, lr}
 8018444:	b084      	sub	sp, #16
 8018446:	af00      	add	r7, sp, #0
 8018448:	60f8      	str	r0, [r7, #12]
 801844a:	60b9      	str	r1, [r7, #8]
 801844c:	603b      	str	r3, [r7, #0]
 801844e:	4613      	mov	r3, r2
 8018450:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018452:	e025      	b.n	80184a0 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018454:	683b      	ldr	r3, [r7, #0]
 8018456:	f1b3 3fff 	cmp.w	r3, #4294967295
 801845a:	d021      	beq.n	80184a0 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801845c:	f7fc fcaa 	bl	8014db4 <HAL_GetTick>
 8018460:	4602      	mov	r2, r0
 8018462:	69bb      	ldr	r3, [r7, #24]
 8018464:	1ad3      	subs	r3, r2, r3
 8018466:	683a      	ldr	r2, [r7, #0]
 8018468:	429a      	cmp	r2, r3
 801846a:	d302      	bcc.n	8018472 <I2C_WaitOnFlagUntilTimeout+0x30>
 801846c:	683b      	ldr	r3, [r7, #0]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d116      	bne.n	80184a0 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	2200      	movs	r2, #0
 8018476:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	2220      	movs	r2, #32
 801847c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	2200      	movs	r2, #0
 8018484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8018488:	68fb      	ldr	r3, [r7, #12]
 801848a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801848c:	f043 0220 	orr.w	r2, r3, #32
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	2200      	movs	r2, #0
 8018498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801849c:	2301      	movs	r3, #1
 801849e:	e023      	b.n	80184e8 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80184a0:	68bb      	ldr	r3, [r7, #8]
 80184a2:	0c1b      	lsrs	r3, r3, #16
 80184a4:	b2db      	uxtb	r3, r3
 80184a6:	2b01      	cmp	r3, #1
 80184a8:	d10d      	bne.n	80184c6 <I2C_WaitOnFlagUntilTimeout+0x84>
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	695b      	ldr	r3, [r3, #20]
 80184b0:	43da      	mvns	r2, r3
 80184b2:	68bb      	ldr	r3, [r7, #8]
 80184b4:	4013      	ands	r3, r2
 80184b6:	b29b      	uxth	r3, r3
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	bf0c      	ite	eq
 80184bc:	2301      	moveq	r3, #1
 80184be:	2300      	movne	r3, #0
 80184c0:	b2db      	uxtb	r3, r3
 80184c2:	461a      	mov	r2, r3
 80184c4:	e00c      	b.n	80184e0 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	699b      	ldr	r3, [r3, #24]
 80184cc:	43da      	mvns	r2, r3
 80184ce:	68bb      	ldr	r3, [r7, #8]
 80184d0:	4013      	ands	r3, r2
 80184d2:	b29b      	uxth	r3, r3
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	bf0c      	ite	eq
 80184d8:	2301      	moveq	r3, #1
 80184da:	2300      	movne	r3, #0
 80184dc:	b2db      	uxtb	r3, r3
 80184de:	461a      	mov	r2, r3
 80184e0:	79fb      	ldrb	r3, [r7, #7]
 80184e2:	429a      	cmp	r2, r3
 80184e4:	d0b6      	beq.n	8018454 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80184e6:	2300      	movs	r3, #0
}
 80184e8:	4618      	mov	r0, r3
 80184ea:	3710      	adds	r7, #16
 80184ec:	46bd      	mov	sp, r7
 80184ee:	bd80      	pop	{r7, pc}

080184f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80184f0:	b580      	push	{r7, lr}
 80184f2:	b084      	sub	sp, #16
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	60f8      	str	r0, [r7, #12]
 80184f8:	60b9      	str	r1, [r7, #8]
 80184fa:	607a      	str	r2, [r7, #4]
 80184fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80184fe:	e051      	b.n	80185a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8018500:	68fb      	ldr	r3, [r7, #12]
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	695b      	ldr	r3, [r3, #20]
 8018506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801850a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801850e:	d123      	bne.n	8018558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	681a      	ldr	r2, [r3, #0]
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801851e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018520:	68fb      	ldr	r3, [r7, #12]
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8018528:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	2200      	movs	r2, #0
 801852e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8018530:	68fb      	ldr	r3, [r7, #12]
 8018532:	2220      	movs	r2, #32
 8018534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	2200      	movs	r2, #0
 801853c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8018540:	68fb      	ldr	r3, [r7, #12]
 8018542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018544:	f043 0204 	orr.w	r2, r3, #4
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	2200      	movs	r2, #0
 8018550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8018554:	2301      	movs	r3, #1
 8018556:	e046      	b.n	80185e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801855e:	d021      	beq.n	80185a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018560:	f7fc fc28 	bl	8014db4 <HAL_GetTick>
 8018564:	4602      	mov	r2, r0
 8018566:	683b      	ldr	r3, [r7, #0]
 8018568:	1ad3      	subs	r3, r2, r3
 801856a:	687a      	ldr	r2, [r7, #4]
 801856c:	429a      	cmp	r2, r3
 801856e:	d302      	bcc.n	8018576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	2b00      	cmp	r3, #0
 8018574:	d116      	bne.n	80185a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	2200      	movs	r2, #0
 801857a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801857c:	68fb      	ldr	r3, [r7, #12]
 801857e:	2220      	movs	r2, #32
 8018580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	2200      	movs	r2, #0
 8018588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801858c:	68fb      	ldr	r3, [r7, #12]
 801858e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018590:	f043 0220 	orr.w	r2, r3, #32
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	2200      	movs	r2, #0
 801859c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80185a0:	2301      	movs	r3, #1
 80185a2:	e020      	b.n	80185e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80185a4:	68bb      	ldr	r3, [r7, #8]
 80185a6:	0c1b      	lsrs	r3, r3, #16
 80185a8:	b2db      	uxtb	r3, r3
 80185aa:	2b01      	cmp	r3, #1
 80185ac:	d10c      	bne.n	80185c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	695b      	ldr	r3, [r3, #20]
 80185b4:	43da      	mvns	r2, r3
 80185b6:	68bb      	ldr	r3, [r7, #8]
 80185b8:	4013      	ands	r3, r2
 80185ba:	b29b      	uxth	r3, r3
 80185bc:	2b00      	cmp	r3, #0
 80185be:	bf14      	ite	ne
 80185c0:	2301      	movne	r3, #1
 80185c2:	2300      	moveq	r3, #0
 80185c4:	b2db      	uxtb	r3, r3
 80185c6:	e00b      	b.n	80185e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	699b      	ldr	r3, [r3, #24]
 80185ce:	43da      	mvns	r2, r3
 80185d0:	68bb      	ldr	r3, [r7, #8]
 80185d2:	4013      	ands	r3, r2
 80185d4:	b29b      	uxth	r3, r3
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	bf14      	ite	ne
 80185da:	2301      	movne	r3, #1
 80185dc:	2300      	moveq	r3, #0
 80185de:	b2db      	uxtb	r3, r3
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d18d      	bne.n	8018500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80185e4:	2300      	movs	r3, #0
}
 80185e6:	4618      	mov	r0, r3
 80185e8:	3710      	adds	r7, #16
 80185ea:	46bd      	mov	sp, r7
 80185ec:	bd80      	pop	{r7, pc}

080185ee <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80185ee:	b580      	push	{r7, lr}
 80185f0:	b084      	sub	sp, #16
 80185f2:	af00      	add	r7, sp, #0
 80185f4:	60f8      	str	r0, [r7, #12]
 80185f6:	60b9      	str	r1, [r7, #8]
 80185f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80185fa:	e02d      	b.n	8018658 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80185fc:	68f8      	ldr	r0, [r7, #12]
 80185fe:	f000 f8ce 	bl	801879e <I2C_IsAcknowledgeFailed>
 8018602:	4603      	mov	r3, r0
 8018604:	2b00      	cmp	r3, #0
 8018606:	d001      	beq.n	801860c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8018608:	2301      	movs	r3, #1
 801860a:	e02d      	b.n	8018668 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801860c:	68bb      	ldr	r3, [r7, #8]
 801860e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018612:	d021      	beq.n	8018658 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018614:	f7fc fbce 	bl	8014db4 <HAL_GetTick>
 8018618:	4602      	mov	r2, r0
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	1ad3      	subs	r3, r2, r3
 801861e:	68ba      	ldr	r2, [r7, #8]
 8018620:	429a      	cmp	r2, r3
 8018622:	d302      	bcc.n	801862a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8018624:	68bb      	ldr	r3, [r7, #8]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d116      	bne.n	8018658 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	2200      	movs	r2, #0
 801862e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	2220      	movs	r2, #32
 8018634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	2200      	movs	r2, #0
 801863c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018644:	f043 0220 	orr.w	r2, r3, #32
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	2200      	movs	r2, #0
 8018650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8018654:	2301      	movs	r3, #1
 8018656:	e007      	b.n	8018668 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	695b      	ldr	r3, [r3, #20]
 801865e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018662:	2b80      	cmp	r3, #128	; 0x80
 8018664:	d1ca      	bne.n	80185fc <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018666:	2300      	movs	r3, #0
}
 8018668:	4618      	mov	r0, r3
 801866a:	3710      	adds	r7, #16
 801866c:	46bd      	mov	sp, r7
 801866e:	bd80      	pop	{r7, pc}

08018670 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018670:	b580      	push	{r7, lr}
 8018672:	b084      	sub	sp, #16
 8018674:	af00      	add	r7, sp, #0
 8018676:	60f8      	str	r0, [r7, #12]
 8018678:	60b9      	str	r1, [r7, #8]
 801867a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801867c:	e02d      	b.n	80186da <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801867e:	68f8      	ldr	r0, [r7, #12]
 8018680:	f000 f88d 	bl	801879e <I2C_IsAcknowledgeFailed>
 8018684:	4603      	mov	r3, r0
 8018686:	2b00      	cmp	r3, #0
 8018688:	d001      	beq.n	801868e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801868a:	2301      	movs	r3, #1
 801868c:	e02d      	b.n	80186ea <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801868e:	68bb      	ldr	r3, [r7, #8]
 8018690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018694:	d021      	beq.n	80186da <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018696:	f7fc fb8d 	bl	8014db4 <HAL_GetTick>
 801869a:	4602      	mov	r2, r0
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	1ad3      	subs	r3, r2, r3
 80186a0:	68ba      	ldr	r2, [r7, #8]
 80186a2:	429a      	cmp	r2, r3
 80186a4:	d302      	bcc.n	80186ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80186a6:	68bb      	ldr	r3, [r7, #8]
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d116      	bne.n	80186da <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	2200      	movs	r2, #0
 80186b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	2220      	movs	r2, #32
 80186b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	2200      	movs	r2, #0
 80186be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186c6:	f043 0220 	orr.w	r2, r3, #32
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	2200      	movs	r2, #0
 80186d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80186d6:	2301      	movs	r3, #1
 80186d8:	e007      	b.n	80186ea <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	681b      	ldr	r3, [r3, #0]
 80186de:	695b      	ldr	r3, [r3, #20]
 80186e0:	f003 0304 	and.w	r3, r3, #4
 80186e4:	2b04      	cmp	r3, #4
 80186e6:	d1ca      	bne.n	801867e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80186e8:	2300      	movs	r3, #0
}
 80186ea:	4618      	mov	r0, r3
 80186ec:	3710      	adds	r7, #16
 80186ee:	46bd      	mov	sp, r7
 80186f0:	bd80      	pop	{r7, pc}

080186f2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80186f2:	b580      	push	{r7, lr}
 80186f4:	b084      	sub	sp, #16
 80186f6:	af00      	add	r7, sp, #0
 80186f8:	60f8      	str	r0, [r7, #12]
 80186fa:	60b9      	str	r1, [r7, #8]
 80186fc:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80186fe:	e042      	b.n	8018786 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	681b      	ldr	r3, [r3, #0]
 8018704:	695b      	ldr	r3, [r3, #20]
 8018706:	f003 0310 	and.w	r3, r3, #16
 801870a:	2b10      	cmp	r3, #16
 801870c:	d119      	bne.n	8018742 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	f06f 0210 	mvn.w	r2, #16
 8018716:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	2200      	movs	r2, #0
 801871c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801871e:	68fb      	ldr	r3, [r7, #12]
 8018720:	2220      	movs	r2, #32
 8018722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8018726:	68fb      	ldr	r3, [r7, #12]
 8018728:	2200      	movs	r2, #0
 801872a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018736:	68fb      	ldr	r3, [r7, #12]
 8018738:	2200      	movs	r2, #0
 801873a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801873e:	2301      	movs	r3, #1
 8018740:	e029      	b.n	8018796 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018742:	f7fc fb37 	bl	8014db4 <HAL_GetTick>
 8018746:	4602      	mov	r2, r0
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	1ad3      	subs	r3, r2, r3
 801874c:	68ba      	ldr	r2, [r7, #8]
 801874e:	429a      	cmp	r2, r3
 8018750:	d302      	bcc.n	8018758 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8018752:	68bb      	ldr	r3, [r7, #8]
 8018754:	2b00      	cmp	r3, #0
 8018756:	d116      	bne.n	8018786 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8018758:	68fb      	ldr	r3, [r7, #12]
 801875a:	2200      	movs	r2, #0
 801875c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	2220      	movs	r2, #32
 8018762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8018766:	68fb      	ldr	r3, [r7, #12]
 8018768:	2200      	movs	r2, #0
 801876a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018772:	f043 0220 	orr.w	r2, r3, #32
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	2200      	movs	r2, #0
 801877e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8018782:	2301      	movs	r3, #1
 8018784:	e007      	b.n	8018796 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8018786:	68fb      	ldr	r3, [r7, #12]
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	695b      	ldr	r3, [r3, #20]
 801878c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018790:	2b40      	cmp	r3, #64	; 0x40
 8018792:	d1b5      	bne.n	8018700 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8018794:	2300      	movs	r3, #0
}
 8018796:	4618      	mov	r0, r3
 8018798:	3710      	adds	r7, #16
 801879a:	46bd      	mov	sp, r7
 801879c:	bd80      	pop	{r7, pc}

0801879e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801879e:	b480      	push	{r7}
 80187a0:	b083      	sub	sp, #12
 80187a2:	af00      	add	r7, sp, #0
 80187a4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	695b      	ldr	r3, [r3, #20]
 80187ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80187b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80187b4:	d11b      	bne.n	80187ee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80187be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	2200      	movs	r2, #0
 80187c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	2220      	movs	r2, #32
 80187ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	2200      	movs	r2, #0
 80187d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187da:	f043 0204 	orr.w	r2, r3, #4
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	2200      	movs	r2, #0
 80187e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80187ea:	2301      	movs	r3, #1
 80187ec:	e000      	b.n	80187f0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80187ee:	2300      	movs	r3, #0
}
 80187f0:	4618      	mov	r0, r3
 80187f2:	370c      	adds	r7, #12
 80187f4:	46bd      	mov	sp, r7
 80187f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187fa:	4770      	bx	lr

080187fc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80187fc:	b480      	push	{r7}
 80187fe:	b083      	sub	sp, #12
 8018800:	af00      	add	r7, sp, #0
 8018802:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018808:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801880c:	d103      	bne.n	8018816 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	2201      	movs	r2, #1
 8018812:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8018814:	e007      	b.n	8018826 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801881a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801881e:	d102      	bne.n	8018826 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	2208      	movs	r2, #8
 8018824:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8018826:	bf00      	nop
 8018828:	370c      	adds	r7, #12
 801882a:	46bd      	mov	sp, r7
 801882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018830:	4770      	bx	lr
	...

08018834 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8018834:	b580      	push	{r7, lr}
 8018836:	b086      	sub	sp, #24
 8018838:	af00      	add	r7, sp, #0
 801883a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	2b00      	cmp	r3, #0
 8018840:	d101      	bne.n	8018846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8018842:	2301      	movs	r3, #1
 8018844:	e25b      	b.n	8018cfe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	f003 0301 	and.w	r3, r3, #1
 801884e:	2b00      	cmp	r3, #0
 8018850:	d075      	beq.n	801893e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8018852:	4ba3      	ldr	r3, [pc, #652]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 8018854:	689b      	ldr	r3, [r3, #8]
 8018856:	f003 030c 	and.w	r3, r3, #12
 801885a:	2b04      	cmp	r3, #4
 801885c:	d00c      	beq.n	8018878 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801885e:	4ba0      	ldr	r3, [pc, #640]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 8018860:	689b      	ldr	r3, [r3, #8]
 8018862:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8018866:	2b08      	cmp	r3, #8
 8018868:	d112      	bne.n	8018890 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801886a:	4b9d      	ldr	r3, [pc, #628]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 801886c:	685b      	ldr	r3, [r3, #4]
 801886e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8018876:	d10b      	bne.n	8018890 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8018878:	4b99      	ldr	r3, [pc, #612]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018880:	2b00      	cmp	r3, #0
 8018882:	d05b      	beq.n	801893c <HAL_RCC_OscConfig+0x108>
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	685b      	ldr	r3, [r3, #4]
 8018888:	2b00      	cmp	r3, #0
 801888a:	d157      	bne.n	801893c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801888c:	2301      	movs	r3, #1
 801888e:	e236      	b.n	8018cfe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	685b      	ldr	r3, [r3, #4]
 8018894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018898:	d106      	bne.n	80188a8 <HAL_RCC_OscConfig+0x74>
 801889a:	4b91      	ldr	r3, [pc, #580]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	4a90      	ldr	r2, [pc, #576]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 80188a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80188a4:	6013      	str	r3, [r2, #0]
 80188a6:	e01d      	b.n	80188e4 <HAL_RCC_OscConfig+0xb0>
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	685b      	ldr	r3, [r3, #4]
 80188ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80188b0:	d10c      	bne.n	80188cc <HAL_RCC_OscConfig+0x98>
 80188b2:	4b8b      	ldr	r3, [pc, #556]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	4a8a      	ldr	r2, [pc, #552]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 80188b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80188bc:	6013      	str	r3, [r2, #0]
 80188be:	4b88      	ldr	r3, [pc, #544]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	4a87      	ldr	r2, [pc, #540]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 80188c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80188c8:	6013      	str	r3, [r2, #0]
 80188ca:	e00b      	b.n	80188e4 <HAL_RCC_OscConfig+0xb0>
 80188cc:	4b84      	ldr	r3, [pc, #528]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	4a83      	ldr	r2, [pc, #524]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 80188d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80188d6:	6013      	str	r3, [r2, #0]
 80188d8:	4b81      	ldr	r3, [pc, #516]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	4a80      	ldr	r2, [pc, #512]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 80188de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80188e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	685b      	ldr	r3, [r3, #4]
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d013      	beq.n	8018914 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80188ec:	f7fc fa62 	bl	8014db4 <HAL_GetTick>
 80188f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80188f2:	e008      	b.n	8018906 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80188f4:	f7fc fa5e 	bl	8014db4 <HAL_GetTick>
 80188f8:	4602      	mov	r2, r0
 80188fa:	693b      	ldr	r3, [r7, #16]
 80188fc:	1ad3      	subs	r3, r2, r3
 80188fe:	2b64      	cmp	r3, #100	; 0x64
 8018900:	d901      	bls.n	8018906 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8018902:	2303      	movs	r3, #3
 8018904:	e1fb      	b.n	8018cfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8018906:	4b76      	ldr	r3, [pc, #472]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801890e:	2b00      	cmp	r3, #0
 8018910:	d0f0      	beq.n	80188f4 <HAL_RCC_OscConfig+0xc0>
 8018912:	e014      	b.n	801893e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018914:	f7fc fa4e 	bl	8014db4 <HAL_GetTick>
 8018918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801891a:	e008      	b.n	801892e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801891c:	f7fc fa4a 	bl	8014db4 <HAL_GetTick>
 8018920:	4602      	mov	r2, r0
 8018922:	693b      	ldr	r3, [r7, #16]
 8018924:	1ad3      	subs	r3, r2, r3
 8018926:	2b64      	cmp	r3, #100	; 0x64
 8018928:	d901      	bls.n	801892e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801892a:	2303      	movs	r3, #3
 801892c:	e1e7      	b.n	8018cfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801892e:	4b6c      	ldr	r3, [pc, #432]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018936:	2b00      	cmp	r3, #0
 8018938:	d1f0      	bne.n	801891c <HAL_RCC_OscConfig+0xe8>
 801893a:	e000      	b.n	801893e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801893c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	f003 0302 	and.w	r3, r3, #2
 8018946:	2b00      	cmp	r3, #0
 8018948:	d063      	beq.n	8018a12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801894a:	4b65      	ldr	r3, [pc, #404]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 801894c:	689b      	ldr	r3, [r3, #8]
 801894e:	f003 030c 	and.w	r3, r3, #12
 8018952:	2b00      	cmp	r3, #0
 8018954:	d00b      	beq.n	801896e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8018956:	4b62      	ldr	r3, [pc, #392]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 8018958:	689b      	ldr	r3, [r3, #8]
 801895a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801895e:	2b08      	cmp	r3, #8
 8018960:	d11c      	bne.n	801899c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8018962:	4b5f      	ldr	r3, [pc, #380]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 8018964:	685b      	ldr	r3, [r3, #4]
 8018966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801896a:	2b00      	cmp	r3, #0
 801896c:	d116      	bne.n	801899c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801896e:	4b5c      	ldr	r3, [pc, #368]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	f003 0302 	and.w	r3, r3, #2
 8018976:	2b00      	cmp	r3, #0
 8018978:	d005      	beq.n	8018986 <HAL_RCC_OscConfig+0x152>
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	68db      	ldr	r3, [r3, #12]
 801897e:	2b01      	cmp	r3, #1
 8018980:	d001      	beq.n	8018986 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8018982:	2301      	movs	r3, #1
 8018984:	e1bb      	b.n	8018cfe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018986:	4b56      	ldr	r3, [pc, #344]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	691b      	ldr	r3, [r3, #16]
 8018992:	00db      	lsls	r3, r3, #3
 8018994:	4952      	ldr	r1, [pc, #328]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 8018996:	4313      	orrs	r3, r2
 8018998:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801899a:	e03a      	b.n	8018a12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	68db      	ldr	r3, [r3, #12]
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d020      	beq.n	80189e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80189a4:	4b4f      	ldr	r3, [pc, #316]	; (8018ae4 <HAL_RCC_OscConfig+0x2b0>)
 80189a6:	2201      	movs	r2, #1
 80189a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80189aa:	f7fc fa03 	bl	8014db4 <HAL_GetTick>
 80189ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80189b0:	e008      	b.n	80189c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80189b2:	f7fc f9ff 	bl	8014db4 <HAL_GetTick>
 80189b6:	4602      	mov	r2, r0
 80189b8:	693b      	ldr	r3, [r7, #16]
 80189ba:	1ad3      	subs	r3, r2, r3
 80189bc:	2b02      	cmp	r3, #2
 80189be:	d901      	bls.n	80189c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80189c0:	2303      	movs	r3, #3
 80189c2:	e19c      	b.n	8018cfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80189c4:	4b46      	ldr	r3, [pc, #280]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	f003 0302 	and.w	r3, r3, #2
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d0f0      	beq.n	80189b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80189d0:	4b43      	ldr	r3, [pc, #268]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	691b      	ldr	r3, [r3, #16]
 80189dc:	00db      	lsls	r3, r3, #3
 80189de:	4940      	ldr	r1, [pc, #256]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 80189e0:	4313      	orrs	r3, r2
 80189e2:	600b      	str	r3, [r1, #0]
 80189e4:	e015      	b.n	8018a12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80189e6:	4b3f      	ldr	r3, [pc, #252]	; (8018ae4 <HAL_RCC_OscConfig+0x2b0>)
 80189e8:	2200      	movs	r2, #0
 80189ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80189ec:	f7fc f9e2 	bl	8014db4 <HAL_GetTick>
 80189f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80189f2:	e008      	b.n	8018a06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80189f4:	f7fc f9de 	bl	8014db4 <HAL_GetTick>
 80189f8:	4602      	mov	r2, r0
 80189fa:	693b      	ldr	r3, [r7, #16]
 80189fc:	1ad3      	subs	r3, r2, r3
 80189fe:	2b02      	cmp	r3, #2
 8018a00:	d901      	bls.n	8018a06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8018a02:	2303      	movs	r3, #3
 8018a04:	e17b      	b.n	8018cfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8018a06:	4b36      	ldr	r3, [pc, #216]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	f003 0302 	and.w	r3, r3, #2
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d1f0      	bne.n	80189f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	f003 0308 	and.w	r3, r3, #8
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d030      	beq.n	8018a80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	695b      	ldr	r3, [r3, #20]
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d016      	beq.n	8018a54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8018a26:	4b30      	ldr	r3, [pc, #192]	; (8018ae8 <HAL_RCC_OscConfig+0x2b4>)
 8018a28:	2201      	movs	r2, #1
 8018a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018a2c:	f7fc f9c2 	bl	8014db4 <HAL_GetTick>
 8018a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8018a32:	e008      	b.n	8018a46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8018a34:	f7fc f9be 	bl	8014db4 <HAL_GetTick>
 8018a38:	4602      	mov	r2, r0
 8018a3a:	693b      	ldr	r3, [r7, #16]
 8018a3c:	1ad3      	subs	r3, r2, r3
 8018a3e:	2b02      	cmp	r3, #2
 8018a40:	d901      	bls.n	8018a46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8018a42:	2303      	movs	r3, #3
 8018a44:	e15b      	b.n	8018cfe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8018a46:	4b26      	ldr	r3, [pc, #152]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 8018a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018a4a:	f003 0302 	and.w	r3, r3, #2
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d0f0      	beq.n	8018a34 <HAL_RCC_OscConfig+0x200>
 8018a52:	e015      	b.n	8018a80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8018a54:	4b24      	ldr	r3, [pc, #144]	; (8018ae8 <HAL_RCC_OscConfig+0x2b4>)
 8018a56:	2200      	movs	r2, #0
 8018a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018a5a:	f7fc f9ab 	bl	8014db4 <HAL_GetTick>
 8018a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8018a60:	e008      	b.n	8018a74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8018a62:	f7fc f9a7 	bl	8014db4 <HAL_GetTick>
 8018a66:	4602      	mov	r2, r0
 8018a68:	693b      	ldr	r3, [r7, #16]
 8018a6a:	1ad3      	subs	r3, r2, r3
 8018a6c:	2b02      	cmp	r3, #2
 8018a6e:	d901      	bls.n	8018a74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8018a70:	2303      	movs	r3, #3
 8018a72:	e144      	b.n	8018cfe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8018a74:	4b1a      	ldr	r3, [pc, #104]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 8018a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018a78:	f003 0302 	and.w	r3, r3, #2
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d1f0      	bne.n	8018a62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	f003 0304 	and.w	r3, r3, #4
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	f000 80a0 	beq.w	8018bce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8018a8e:	2300      	movs	r3, #0
 8018a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8018a92:	4b13      	ldr	r3, [pc, #76]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 8018a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d10f      	bne.n	8018abe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	60bb      	str	r3, [r7, #8]
 8018aa2:	4b0f      	ldr	r3, [pc, #60]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 8018aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018aa6:	4a0e      	ldr	r2, [pc, #56]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 8018aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018aac:	6413      	str	r3, [r2, #64]	; 0x40
 8018aae:	4b0c      	ldr	r3, [pc, #48]	; (8018ae0 <HAL_RCC_OscConfig+0x2ac>)
 8018ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018ab6:	60bb      	str	r3, [r7, #8]
 8018ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8018aba:	2301      	movs	r3, #1
 8018abc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018abe:	4b0b      	ldr	r3, [pc, #44]	; (8018aec <HAL_RCC_OscConfig+0x2b8>)
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d121      	bne.n	8018b0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8018aca:	4b08      	ldr	r3, [pc, #32]	; (8018aec <HAL_RCC_OscConfig+0x2b8>)
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	4a07      	ldr	r2, [pc, #28]	; (8018aec <HAL_RCC_OscConfig+0x2b8>)
 8018ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8018ad6:	f7fc f96d 	bl	8014db4 <HAL_GetTick>
 8018ada:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018adc:	e011      	b.n	8018b02 <HAL_RCC_OscConfig+0x2ce>
 8018ade:	bf00      	nop
 8018ae0:	40023800 	.word	0x40023800
 8018ae4:	42470000 	.word	0x42470000
 8018ae8:	42470e80 	.word	0x42470e80
 8018aec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8018af0:	f7fc f960 	bl	8014db4 <HAL_GetTick>
 8018af4:	4602      	mov	r2, r0
 8018af6:	693b      	ldr	r3, [r7, #16]
 8018af8:	1ad3      	subs	r3, r2, r3
 8018afa:	2b02      	cmp	r3, #2
 8018afc:	d901      	bls.n	8018b02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8018afe:	2303      	movs	r3, #3
 8018b00:	e0fd      	b.n	8018cfe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018b02:	4b81      	ldr	r3, [pc, #516]	; (8018d08 <HAL_RCC_OscConfig+0x4d4>)
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d0f0      	beq.n	8018af0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	689b      	ldr	r3, [r3, #8]
 8018b12:	2b01      	cmp	r3, #1
 8018b14:	d106      	bne.n	8018b24 <HAL_RCC_OscConfig+0x2f0>
 8018b16:	4b7d      	ldr	r3, [pc, #500]	; (8018d0c <HAL_RCC_OscConfig+0x4d8>)
 8018b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b1a:	4a7c      	ldr	r2, [pc, #496]	; (8018d0c <HAL_RCC_OscConfig+0x4d8>)
 8018b1c:	f043 0301 	orr.w	r3, r3, #1
 8018b20:	6713      	str	r3, [r2, #112]	; 0x70
 8018b22:	e01c      	b.n	8018b5e <HAL_RCC_OscConfig+0x32a>
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	689b      	ldr	r3, [r3, #8]
 8018b28:	2b05      	cmp	r3, #5
 8018b2a:	d10c      	bne.n	8018b46 <HAL_RCC_OscConfig+0x312>
 8018b2c:	4b77      	ldr	r3, [pc, #476]	; (8018d0c <HAL_RCC_OscConfig+0x4d8>)
 8018b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b30:	4a76      	ldr	r2, [pc, #472]	; (8018d0c <HAL_RCC_OscConfig+0x4d8>)
 8018b32:	f043 0304 	orr.w	r3, r3, #4
 8018b36:	6713      	str	r3, [r2, #112]	; 0x70
 8018b38:	4b74      	ldr	r3, [pc, #464]	; (8018d0c <HAL_RCC_OscConfig+0x4d8>)
 8018b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b3c:	4a73      	ldr	r2, [pc, #460]	; (8018d0c <HAL_RCC_OscConfig+0x4d8>)
 8018b3e:	f043 0301 	orr.w	r3, r3, #1
 8018b42:	6713      	str	r3, [r2, #112]	; 0x70
 8018b44:	e00b      	b.n	8018b5e <HAL_RCC_OscConfig+0x32a>
 8018b46:	4b71      	ldr	r3, [pc, #452]	; (8018d0c <HAL_RCC_OscConfig+0x4d8>)
 8018b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b4a:	4a70      	ldr	r2, [pc, #448]	; (8018d0c <HAL_RCC_OscConfig+0x4d8>)
 8018b4c:	f023 0301 	bic.w	r3, r3, #1
 8018b50:	6713      	str	r3, [r2, #112]	; 0x70
 8018b52:	4b6e      	ldr	r3, [pc, #440]	; (8018d0c <HAL_RCC_OscConfig+0x4d8>)
 8018b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b56:	4a6d      	ldr	r2, [pc, #436]	; (8018d0c <HAL_RCC_OscConfig+0x4d8>)
 8018b58:	f023 0304 	bic.w	r3, r3, #4
 8018b5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	689b      	ldr	r3, [r3, #8]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d015      	beq.n	8018b92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018b66:	f7fc f925 	bl	8014db4 <HAL_GetTick>
 8018b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8018b6c:	e00a      	b.n	8018b84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8018b6e:	f7fc f921 	bl	8014db4 <HAL_GetTick>
 8018b72:	4602      	mov	r2, r0
 8018b74:	693b      	ldr	r3, [r7, #16]
 8018b76:	1ad3      	subs	r3, r2, r3
 8018b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8018b7c:	4293      	cmp	r3, r2
 8018b7e:	d901      	bls.n	8018b84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8018b80:	2303      	movs	r3, #3
 8018b82:	e0bc      	b.n	8018cfe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8018b84:	4b61      	ldr	r3, [pc, #388]	; (8018d0c <HAL_RCC_OscConfig+0x4d8>)
 8018b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b88:	f003 0302 	and.w	r3, r3, #2
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d0ee      	beq.n	8018b6e <HAL_RCC_OscConfig+0x33a>
 8018b90:	e014      	b.n	8018bbc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018b92:	f7fc f90f 	bl	8014db4 <HAL_GetTick>
 8018b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8018b98:	e00a      	b.n	8018bb0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8018b9a:	f7fc f90b 	bl	8014db4 <HAL_GetTick>
 8018b9e:	4602      	mov	r2, r0
 8018ba0:	693b      	ldr	r3, [r7, #16]
 8018ba2:	1ad3      	subs	r3, r2, r3
 8018ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8018ba8:	4293      	cmp	r3, r2
 8018baa:	d901      	bls.n	8018bb0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8018bac:	2303      	movs	r3, #3
 8018bae:	e0a6      	b.n	8018cfe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8018bb0:	4b56      	ldr	r3, [pc, #344]	; (8018d0c <HAL_RCC_OscConfig+0x4d8>)
 8018bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018bb4:	f003 0302 	and.w	r3, r3, #2
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d1ee      	bne.n	8018b9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8018bbc:	7dfb      	ldrb	r3, [r7, #23]
 8018bbe:	2b01      	cmp	r3, #1
 8018bc0:	d105      	bne.n	8018bce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8018bc2:	4b52      	ldr	r3, [pc, #328]	; (8018d0c <HAL_RCC_OscConfig+0x4d8>)
 8018bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bc6:	4a51      	ldr	r2, [pc, #324]	; (8018d0c <HAL_RCC_OscConfig+0x4d8>)
 8018bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018bcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	699b      	ldr	r3, [r3, #24]
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	f000 8092 	beq.w	8018cfc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8018bd8:	4b4c      	ldr	r3, [pc, #304]	; (8018d0c <HAL_RCC_OscConfig+0x4d8>)
 8018bda:	689b      	ldr	r3, [r3, #8]
 8018bdc:	f003 030c 	and.w	r3, r3, #12
 8018be0:	2b08      	cmp	r3, #8
 8018be2:	d05c      	beq.n	8018c9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	699b      	ldr	r3, [r3, #24]
 8018be8:	2b02      	cmp	r3, #2
 8018bea:	d141      	bne.n	8018c70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018bec:	4b48      	ldr	r3, [pc, #288]	; (8018d10 <HAL_RCC_OscConfig+0x4dc>)
 8018bee:	2200      	movs	r2, #0
 8018bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018bf2:	f7fc f8df 	bl	8014db4 <HAL_GetTick>
 8018bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018bf8:	e008      	b.n	8018c0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018bfa:	f7fc f8db 	bl	8014db4 <HAL_GetTick>
 8018bfe:	4602      	mov	r2, r0
 8018c00:	693b      	ldr	r3, [r7, #16]
 8018c02:	1ad3      	subs	r3, r2, r3
 8018c04:	2b02      	cmp	r3, #2
 8018c06:	d901      	bls.n	8018c0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8018c08:	2303      	movs	r3, #3
 8018c0a:	e078      	b.n	8018cfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018c0c:	4b3f      	ldr	r3, [pc, #252]	; (8018d0c <HAL_RCC_OscConfig+0x4d8>)
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d1f0      	bne.n	8018bfa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	69da      	ldr	r2, [r3, #28]
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	6a1b      	ldr	r3, [r3, #32]
 8018c20:	431a      	orrs	r2, r3
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c26:	019b      	lsls	r3, r3, #6
 8018c28:	431a      	orrs	r2, r3
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c2e:	085b      	lsrs	r3, r3, #1
 8018c30:	3b01      	subs	r3, #1
 8018c32:	041b      	lsls	r3, r3, #16
 8018c34:	431a      	orrs	r2, r3
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c3a:	061b      	lsls	r3, r3, #24
 8018c3c:	4933      	ldr	r1, [pc, #204]	; (8018d0c <HAL_RCC_OscConfig+0x4d8>)
 8018c3e:	4313      	orrs	r3, r2
 8018c40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8018c42:	4b33      	ldr	r3, [pc, #204]	; (8018d10 <HAL_RCC_OscConfig+0x4dc>)
 8018c44:	2201      	movs	r2, #1
 8018c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018c48:	f7fc f8b4 	bl	8014db4 <HAL_GetTick>
 8018c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8018c4e:	e008      	b.n	8018c62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018c50:	f7fc f8b0 	bl	8014db4 <HAL_GetTick>
 8018c54:	4602      	mov	r2, r0
 8018c56:	693b      	ldr	r3, [r7, #16]
 8018c58:	1ad3      	subs	r3, r2, r3
 8018c5a:	2b02      	cmp	r3, #2
 8018c5c:	d901      	bls.n	8018c62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8018c5e:	2303      	movs	r3, #3
 8018c60:	e04d      	b.n	8018cfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8018c62:	4b2a      	ldr	r3, [pc, #168]	; (8018d0c <HAL_RCC_OscConfig+0x4d8>)
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d0f0      	beq.n	8018c50 <HAL_RCC_OscConfig+0x41c>
 8018c6e:	e045      	b.n	8018cfc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018c70:	4b27      	ldr	r3, [pc, #156]	; (8018d10 <HAL_RCC_OscConfig+0x4dc>)
 8018c72:	2200      	movs	r2, #0
 8018c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018c76:	f7fc f89d 	bl	8014db4 <HAL_GetTick>
 8018c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018c7c:	e008      	b.n	8018c90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018c7e:	f7fc f899 	bl	8014db4 <HAL_GetTick>
 8018c82:	4602      	mov	r2, r0
 8018c84:	693b      	ldr	r3, [r7, #16]
 8018c86:	1ad3      	subs	r3, r2, r3
 8018c88:	2b02      	cmp	r3, #2
 8018c8a:	d901      	bls.n	8018c90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8018c8c:	2303      	movs	r3, #3
 8018c8e:	e036      	b.n	8018cfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018c90:	4b1e      	ldr	r3, [pc, #120]	; (8018d0c <HAL_RCC_OscConfig+0x4d8>)
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d1f0      	bne.n	8018c7e <HAL_RCC_OscConfig+0x44a>
 8018c9c:	e02e      	b.n	8018cfc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	699b      	ldr	r3, [r3, #24]
 8018ca2:	2b01      	cmp	r3, #1
 8018ca4:	d101      	bne.n	8018caa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8018ca6:	2301      	movs	r3, #1
 8018ca8:	e029      	b.n	8018cfe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8018caa:	4b18      	ldr	r3, [pc, #96]	; (8018d0c <HAL_RCC_OscConfig+0x4d8>)
 8018cac:	685b      	ldr	r3, [r3, #4]
 8018cae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	69db      	ldr	r3, [r3, #28]
 8018cba:	429a      	cmp	r2, r3
 8018cbc:	d11c      	bne.n	8018cf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8018cbe:	68fb      	ldr	r3, [r7, #12]
 8018cc0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018cc8:	429a      	cmp	r2, r3
 8018cca:	d115      	bne.n	8018cf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8018ccc:	68fa      	ldr	r2, [r7, #12]
 8018cce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8018cd2:	4013      	ands	r3, r2
 8018cd4:	687a      	ldr	r2, [r7, #4]
 8018cd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8018cd8:	4293      	cmp	r3, r2
 8018cda:	d10d      	bne.n	8018cf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8018ce6:	429a      	cmp	r2, r3
 8018ce8:	d106      	bne.n	8018cf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8018cea:	68fb      	ldr	r3, [r7, #12]
 8018cec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8018cf4:	429a      	cmp	r2, r3
 8018cf6:	d001      	beq.n	8018cfc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8018cf8:	2301      	movs	r3, #1
 8018cfa:	e000      	b.n	8018cfe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8018cfc:	2300      	movs	r3, #0
}
 8018cfe:	4618      	mov	r0, r3
 8018d00:	3718      	adds	r7, #24
 8018d02:	46bd      	mov	sp, r7
 8018d04:	bd80      	pop	{r7, pc}
 8018d06:	bf00      	nop
 8018d08:	40007000 	.word	0x40007000
 8018d0c:	40023800 	.word	0x40023800
 8018d10:	42470060 	.word	0x42470060

08018d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8018d14:	b580      	push	{r7, lr}
 8018d16:	b084      	sub	sp, #16
 8018d18:	af00      	add	r7, sp, #0
 8018d1a:	6078      	str	r0, [r7, #4]
 8018d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d101      	bne.n	8018d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8018d24:	2301      	movs	r3, #1
 8018d26:	e0cc      	b.n	8018ec2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8018d28:	4b68      	ldr	r3, [pc, #416]	; (8018ecc <HAL_RCC_ClockConfig+0x1b8>)
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	f003 030f 	and.w	r3, r3, #15
 8018d30:	683a      	ldr	r2, [r7, #0]
 8018d32:	429a      	cmp	r2, r3
 8018d34:	d90c      	bls.n	8018d50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018d36:	4b65      	ldr	r3, [pc, #404]	; (8018ecc <HAL_RCC_ClockConfig+0x1b8>)
 8018d38:	683a      	ldr	r2, [r7, #0]
 8018d3a:	b2d2      	uxtb	r2, r2
 8018d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8018d3e:	4b63      	ldr	r3, [pc, #396]	; (8018ecc <HAL_RCC_ClockConfig+0x1b8>)
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	f003 030f 	and.w	r3, r3, #15
 8018d46:	683a      	ldr	r2, [r7, #0]
 8018d48:	429a      	cmp	r2, r3
 8018d4a:	d001      	beq.n	8018d50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8018d4c:	2301      	movs	r3, #1
 8018d4e:	e0b8      	b.n	8018ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	f003 0302 	and.w	r3, r3, #2
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d020      	beq.n	8018d9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	681b      	ldr	r3, [r3, #0]
 8018d60:	f003 0304 	and.w	r3, r3, #4
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d005      	beq.n	8018d74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8018d68:	4b59      	ldr	r3, [pc, #356]	; (8018ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8018d6a:	689b      	ldr	r3, [r3, #8]
 8018d6c:	4a58      	ldr	r2, [pc, #352]	; (8018ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8018d6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8018d72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	f003 0308 	and.w	r3, r3, #8
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d005      	beq.n	8018d8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8018d80:	4b53      	ldr	r3, [pc, #332]	; (8018ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8018d82:	689b      	ldr	r3, [r3, #8]
 8018d84:	4a52      	ldr	r2, [pc, #328]	; (8018ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8018d86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8018d8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8018d8c:	4b50      	ldr	r3, [pc, #320]	; (8018ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8018d8e:	689b      	ldr	r3, [r3, #8]
 8018d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	689b      	ldr	r3, [r3, #8]
 8018d98:	494d      	ldr	r1, [pc, #308]	; (8018ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8018d9a:	4313      	orrs	r3, r2
 8018d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	f003 0301 	and.w	r3, r3, #1
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d044      	beq.n	8018e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	685b      	ldr	r3, [r3, #4]
 8018dae:	2b01      	cmp	r3, #1
 8018db0:	d107      	bne.n	8018dc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8018db2:	4b47      	ldr	r3, [pc, #284]	; (8018ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d119      	bne.n	8018df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8018dbe:	2301      	movs	r3, #1
 8018dc0:	e07f      	b.n	8018ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	685b      	ldr	r3, [r3, #4]
 8018dc6:	2b02      	cmp	r3, #2
 8018dc8:	d003      	beq.n	8018dd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8018dce:	2b03      	cmp	r3, #3
 8018dd0:	d107      	bne.n	8018de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8018dd2:	4b3f      	ldr	r3, [pc, #252]	; (8018ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d109      	bne.n	8018df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8018dde:	2301      	movs	r3, #1
 8018de0:	e06f      	b.n	8018ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8018de2:	4b3b      	ldr	r3, [pc, #236]	; (8018ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	f003 0302 	and.w	r3, r3, #2
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d101      	bne.n	8018df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8018dee:	2301      	movs	r3, #1
 8018df0:	e067      	b.n	8018ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8018df2:	4b37      	ldr	r3, [pc, #220]	; (8018ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8018df4:	689b      	ldr	r3, [r3, #8]
 8018df6:	f023 0203 	bic.w	r2, r3, #3
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	685b      	ldr	r3, [r3, #4]
 8018dfe:	4934      	ldr	r1, [pc, #208]	; (8018ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8018e00:	4313      	orrs	r3, r2
 8018e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8018e04:	f7fb ffd6 	bl	8014db4 <HAL_GetTick>
 8018e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018e0a:	e00a      	b.n	8018e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018e0c:	f7fb ffd2 	bl	8014db4 <HAL_GetTick>
 8018e10:	4602      	mov	r2, r0
 8018e12:	68fb      	ldr	r3, [r7, #12]
 8018e14:	1ad3      	subs	r3, r2, r3
 8018e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8018e1a:	4293      	cmp	r3, r2
 8018e1c:	d901      	bls.n	8018e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8018e1e:	2303      	movs	r3, #3
 8018e20:	e04f      	b.n	8018ec2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018e22:	4b2b      	ldr	r3, [pc, #172]	; (8018ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8018e24:	689b      	ldr	r3, [r3, #8]
 8018e26:	f003 020c 	and.w	r2, r3, #12
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	685b      	ldr	r3, [r3, #4]
 8018e2e:	009b      	lsls	r3, r3, #2
 8018e30:	429a      	cmp	r2, r3
 8018e32:	d1eb      	bne.n	8018e0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8018e34:	4b25      	ldr	r3, [pc, #148]	; (8018ecc <HAL_RCC_ClockConfig+0x1b8>)
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	f003 030f 	and.w	r3, r3, #15
 8018e3c:	683a      	ldr	r2, [r7, #0]
 8018e3e:	429a      	cmp	r2, r3
 8018e40:	d20c      	bcs.n	8018e5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018e42:	4b22      	ldr	r3, [pc, #136]	; (8018ecc <HAL_RCC_ClockConfig+0x1b8>)
 8018e44:	683a      	ldr	r2, [r7, #0]
 8018e46:	b2d2      	uxtb	r2, r2
 8018e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8018e4a:	4b20      	ldr	r3, [pc, #128]	; (8018ecc <HAL_RCC_ClockConfig+0x1b8>)
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	f003 030f 	and.w	r3, r3, #15
 8018e52:	683a      	ldr	r2, [r7, #0]
 8018e54:	429a      	cmp	r2, r3
 8018e56:	d001      	beq.n	8018e5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8018e58:	2301      	movs	r3, #1
 8018e5a:	e032      	b.n	8018ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	f003 0304 	and.w	r3, r3, #4
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d008      	beq.n	8018e7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8018e68:	4b19      	ldr	r3, [pc, #100]	; (8018ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8018e6a:	689b      	ldr	r3, [r3, #8]
 8018e6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	68db      	ldr	r3, [r3, #12]
 8018e74:	4916      	ldr	r1, [pc, #88]	; (8018ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8018e76:	4313      	orrs	r3, r2
 8018e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	f003 0308 	and.w	r3, r3, #8
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d009      	beq.n	8018e9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8018e86:	4b12      	ldr	r3, [pc, #72]	; (8018ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8018e88:	689b      	ldr	r3, [r3, #8]
 8018e8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	691b      	ldr	r3, [r3, #16]
 8018e92:	00db      	lsls	r3, r3, #3
 8018e94:	490e      	ldr	r1, [pc, #56]	; (8018ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8018e96:	4313      	orrs	r3, r2
 8018e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8018e9a:	f000 f821 	bl	8018ee0 <HAL_RCC_GetSysClockFreq>
 8018e9e:	4601      	mov	r1, r0
 8018ea0:	4b0b      	ldr	r3, [pc, #44]	; (8018ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8018ea2:	689b      	ldr	r3, [r3, #8]
 8018ea4:	091b      	lsrs	r3, r3, #4
 8018ea6:	f003 030f 	and.w	r3, r3, #15
 8018eaa:	4a0a      	ldr	r2, [pc, #40]	; (8018ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8018eac:	5cd3      	ldrb	r3, [r2, r3]
 8018eae:	fa21 f303 	lsr.w	r3, r1, r3
 8018eb2:	4a09      	ldr	r2, [pc, #36]	; (8018ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8018eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8018eb6:	4b09      	ldr	r3, [pc, #36]	; (8018edc <HAL_RCC_ClockConfig+0x1c8>)
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	4618      	mov	r0, r3
 8018ebc:	f7fb f80c 	bl	8013ed8 <HAL_InitTick>

  return HAL_OK;
 8018ec0:	2300      	movs	r3, #0
}
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	3710      	adds	r7, #16
 8018ec6:	46bd      	mov	sp, r7
 8018ec8:	bd80      	pop	{r7, pc}
 8018eca:	bf00      	nop
 8018ecc:	40023c00 	.word	0x40023c00
 8018ed0:	40023800 	.word	0x40023800
 8018ed4:	0802dacc 	.word	0x0802dacc
 8018ed8:	20000678 	.word	0x20000678
 8018edc:	2000067c 	.word	0x2000067c

08018ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8018ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ee2:	b085      	sub	sp, #20
 8018ee4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8018ee6:	2300      	movs	r3, #0
 8018ee8:	607b      	str	r3, [r7, #4]
 8018eea:	2300      	movs	r3, #0
 8018eec:	60fb      	str	r3, [r7, #12]
 8018eee:	2300      	movs	r3, #0
 8018ef0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8018ef2:	2300      	movs	r3, #0
 8018ef4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8018ef6:	4b63      	ldr	r3, [pc, #396]	; (8019084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8018ef8:	689b      	ldr	r3, [r3, #8]
 8018efa:	f003 030c 	and.w	r3, r3, #12
 8018efe:	2b04      	cmp	r3, #4
 8018f00:	d007      	beq.n	8018f12 <HAL_RCC_GetSysClockFreq+0x32>
 8018f02:	2b08      	cmp	r3, #8
 8018f04:	d008      	beq.n	8018f18 <HAL_RCC_GetSysClockFreq+0x38>
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	f040 80b4 	bne.w	8019074 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8018f0c:	4b5e      	ldr	r3, [pc, #376]	; (8019088 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8018f0e:	60bb      	str	r3, [r7, #8]
       break;
 8018f10:	e0b3      	b.n	801907a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8018f12:	4b5e      	ldr	r3, [pc, #376]	; (801908c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8018f14:	60bb      	str	r3, [r7, #8]
      break;
 8018f16:	e0b0      	b.n	801907a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8018f18:	4b5a      	ldr	r3, [pc, #360]	; (8019084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8018f1a:	685b      	ldr	r3, [r3, #4]
 8018f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018f20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8018f22:	4b58      	ldr	r3, [pc, #352]	; (8019084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8018f24:	685b      	ldr	r3, [r3, #4]
 8018f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d04a      	beq.n	8018fc4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8018f2e:	4b55      	ldr	r3, [pc, #340]	; (8019084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8018f30:	685b      	ldr	r3, [r3, #4]
 8018f32:	099b      	lsrs	r3, r3, #6
 8018f34:	f04f 0400 	mov.w	r4, #0
 8018f38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8018f3c:	f04f 0200 	mov.w	r2, #0
 8018f40:	ea03 0501 	and.w	r5, r3, r1
 8018f44:	ea04 0602 	and.w	r6, r4, r2
 8018f48:	4629      	mov	r1, r5
 8018f4a:	4632      	mov	r2, r6
 8018f4c:	f04f 0300 	mov.w	r3, #0
 8018f50:	f04f 0400 	mov.w	r4, #0
 8018f54:	0154      	lsls	r4, r2, #5
 8018f56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8018f5a:	014b      	lsls	r3, r1, #5
 8018f5c:	4619      	mov	r1, r3
 8018f5e:	4622      	mov	r2, r4
 8018f60:	1b49      	subs	r1, r1, r5
 8018f62:	eb62 0206 	sbc.w	r2, r2, r6
 8018f66:	f04f 0300 	mov.w	r3, #0
 8018f6a:	f04f 0400 	mov.w	r4, #0
 8018f6e:	0194      	lsls	r4, r2, #6
 8018f70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8018f74:	018b      	lsls	r3, r1, #6
 8018f76:	1a5b      	subs	r3, r3, r1
 8018f78:	eb64 0402 	sbc.w	r4, r4, r2
 8018f7c:	f04f 0100 	mov.w	r1, #0
 8018f80:	f04f 0200 	mov.w	r2, #0
 8018f84:	00e2      	lsls	r2, r4, #3
 8018f86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8018f8a:	00d9      	lsls	r1, r3, #3
 8018f8c:	460b      	mov	r3, r1
 8018f8e:	4614      	mov	r4, r2
 8018f90:	195b      	adds	r3, r3, r5
 8018f92:	eb44 0406 	adc.w	r4, r4, r6
 8018f96:	f04f 0100 	mov.w	r1, #0
 8018f9a:	f04f 0200 	mov.w	r2, #0
 8018f9e:	0262      	lsls	r2, r4, #9
 8018fa0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8018fa4:	0259      	lsls	r1, r3, #9
 8018fa6:	460b      	mov	r3, r1
 8018fa8:	4614      	mov	r4, r2
 8018faa:	4618      	mov	r0, r3
 8018fac:	4621      	mov	r1, r4
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	f04f 0400 	mov.w	r4, #0
 8018fb4:	461a      	mov	r2, r3
 8018fb6:	4623      	mov	r3, r4
 8018fb8:	f7e7 ffcc 	bl	8000f54 <__aeabi_uldivmod>
 8018fbc:	4603      	mov	r3, r0
 8018fbe:	460c      	mov	r4, r1
 8018fc0:	60fb      	str	r3, [r7, #12]
 8018fc2:	e049      	b.n	8019058 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8018fc4:	4b2f      	ldr	r3, [pc, #188]	; (8019084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8018fc6:	685b      	ldr	r3, [r3, #4]
 8018fc8:	099b      	lsrs	r3, r3, #6
 8018fca:	f04f 0400 	mov.w	r4, #0
 8018fce:	f240 11ff 	movw	r1, #511	; 0x1ff
 8018fd2:	f04f 0200 	mov.w	r2, #0
 8018fd6:	ea03 0501 	and.w	r5, r3, r1
 8018fda:	ea04 0602 	and.w	r6, r4, r2
 8018fde:	4629      	mov	r1, r5
 8018fe0:	4632      	mov	r2, r6
 8018fe2:	f04f 0300 	mov.w	r3, #0
 8018fe6:	f04f 0400 	mov.w	r4, #0
 8018fea:	0154      	lsls	r4, r2, #5
 8018fec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8018ff0:	014b      	lsls	r3, r1, #5
 8018ff2:	4619      	mov	r1, r3
 8018ff4:	4622      	mov	r2, r4
 8018ff6:	1b49      	subs	r1, r1, r5
 8018ff8:	eb62 0206 	sbc.w	r2, r2, r6
 8018ffc:	f04f 0300 	mov.w	r3, #0
 8019000:	f04f 0400 	mov.w	r4, #0
 8019004:	0194      	lsls	r4, r2, #6
 8019006:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801900a:	018b      	lsls	r3, r1, #6
 801900c:	1a5b      	subs	r3, r3, r1
 801900e:	eb64 0402 	sbc.w	r4, r4, r2
 8019012:	f04f 0100 	mov.w	r1, #0
 8019016:	f04f 0200 	mov.w	r2, #0
 801901a:	00e2      	lsls	r2, r4, #3
 801901c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8019020:	00d9      	lsls	r1, r3, #3
 8019022:	460b      	mov	r3, r1
 8019024:	4614      	mov	r4, r2
 8019026:	195b      	adds	r3, r3, r5
 8019028:	eb44 0406 	adc.w	r4, r4, r6
 801902c:	f04f 0100 	mov.w	r1, #0
 8019030:	f04f 0200 	mov.w	r2, #0
 8019034:	02a2      	lsls	r2, r4, #10
 8019036:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 801903a:	0299      	lsls	r1, r3, #10
 801903c:	460b      	mov	r3, r1
 801903e:	4614      	mov	r4, r2
 8019040:	4618      	mov	r0, r3
 8019042:	4621      	mov	r1, r4
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	f04f 0400 	mov.w	r4, #0
 801904a:	461a      	mov	r2, r3
 801904c:	4623      	mov	r3, r4
 801904e:	f7e7 ff81 	bl	8000f54 <__aeabi_uldivmod>
 8019052:	4603      	mov	r3, r0
 8019054:	460c      	mov	r4, r1
 8019056:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8019058:	4b0a      	ldr	r3, [pc, #40]	; (8019084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801905a:	685b      	ldr	r3, [r3, #4]
 801905c:	0c1b      	lsrs	r3, r3, #16
 801905e:	f003 0303 	and.w	r3, r3, #3
 8019062:	3301      	adds	r3, #1
 8019064:	005b      	lsls	r3, r3, #1
 8019066:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8019068:	68fa      	ldr	r2, [r7, #12]
 801906a:	683b      	ldr	r3, [r7, #0]
 801906c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019070:	60bb      	str	r3, [r7, #8]
      break;
 8019072:	e002      	b.n	801907a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8019074:	4b04      	ldr	r3, [pc, #16]	; (8019088 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8019076:	60bb      	str	r3, [r7, #8]
      break;
 8019078:	bf00      	nop
    }
  }
  return sysclockfreq;
 801907a:	68bb      	ldr	r3, [r7, #8]
}
 801907c:	4618      	mov	r0, r3
 801907e:	3714      	adds	r7, #20
 8019080:	46bd      	mov	sp, r7
 8019082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019084:	40023800 	.word	0x40023800
 8019088:	00f42400 	.word	0x00f42400
 801908c:	007a1200 	.word	0x007a1200

08019090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8019090:	b480      	push	{r7}
 8019092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8019094:	4b03      	ldr	r3, [pc, #12]	; (80190a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8019096:	681b      	ldr	r3, [r3, #0]
}
 8019098:	4618      	mov	r0, r3
 801909a:	46bd      	mov	sp, r7
 801909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190a0:	4770      	bx	lr
 80190a2:	bf00      	nop
 80190a4:	20000678 	.word	0x20000678

080190a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80190a8:	b580      	push	{r7, lr}
 80190aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80190ac:	f7ff fff0 	bl	8019090 <HAL_RCC_GetHCLKFreq>
 80190b0:	4601      	mov	r1, r0
 80190b2:	4b05      	ldr	r3, [pc, #20]	; (80190c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80190b4:	689b      	ldr	r3, [r3, #8]
 80190b6:	0a9b      	lsrs	r3, r3, #10
 80190b8:	f003 0307 	and.w	r3, r3, #7
 80190bc:	4a03      	ldr	r2, [pc, #12]	; (80190cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80190be:	5cd3      	ldrb	r3, [r2, r3]
 80190c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80190c4:	4618      	mov	r0, r3
 80190c6:	bd80      	pop	{r7, pc}
 80190c8:	40023800 	.word	0x40023800
 80190cc:	0802dadc 	.word	0x0802dadc

080190d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80190d0:	b580      	push	{r7, lr}
 80190d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80190d4:	f7ff ffdc 	bl	8019090 <HAL_RCC_GetHCLKFreq>
 80190d8:	4601      	mov	r1, r0
 80190da:	4b05      	ldr	r3, [pc, #20]	; (80190f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80190dc:	689b      	ldr	r3, [r3, #8]
 80190de:	0b5b      	lsrs	r3, r3, #13
 80190e0:	f003 0307 	and.w	r3, r3, #7
 80190e4:	4a03      	ldr	r2, [pc, #12]	; (80190f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80190e6:	5cd3      	ldrb	r3, [r2, r3]
 80190e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80190ec:	4618      	mov	r0, r3
 80190ee:	bd80      	pop	{r7, pc}
 80190f0:	40023800 	.word	0x40023800
 80190f4:	0802dadc 	.word	0x0802dadc

080190f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80190f8:	b480      	push	{r7}
 80190fa:	b083      	sub	sp, #12
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	6078      	str	r0, [r7, #4]
 8019100:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	220f      	movs	r2, #15
 8019106:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8019108:	4b12      	ldr	r3, [pc, #72]	; (8019154 <HAL_RCC_GetClockConfig+0x5c>)
 801910a:	689b      	ldr	r3, [r3, #8]
 801910c:	f003 0203 	and.w	r2, r3, #3
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8019114:	4b0f      	ldr	r3, [pc, #60]	; (8019154 <HAL_RCC_GetClockConfig+0x5c>)
 8019116:	689b      	ldr	r3, [r3, #8]
 8019118:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8019120:	4b0c      	ldr	r3, [pc, #48]	; (8019154 <HAL_RCC_GetClockConfig+0x5c>)
 8019122:	689b      	ldr	r3, [r3, #8]
 8019124:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 801912c:	4b09      	ldr	r3, [pc, #36]	; (8019154 <HAL_RCC_GetClockConfig+0x5c>)
 801912e:	689b      	ldr	r3, [r3, #8]
 8019130:	08db      	lsrs	r3, r3, #3
 8019132:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801913a:	4b07      	ldr	r3, [pc, #28]	; (8019158 <HAL_RCC_GetClockConfig+0x60>)
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	f003 020f 	and.w	r2, r3, #15
 8019142:	683b      	ldr	r3, [r7, #0]
 8019144:	601a      	str	r2, [r3, #0]
}
 8019146:	bf00      	nop
 8019148:	370c      	adds	r7, #12
 801914a:	46bd      	mov	sp, r7
 801914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019150:	4770      	bx	lr
 8019152:	bf00      	nop
 8019154:	40023800 	.word	0x40023800
 8019158:	40023c00 	.word	0x40023c00

0801915c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 801915c:	b580      	push	{r7, lr}
 801915e:	b082      	sub	sp, #8
 8019160:	af00      	add	r7, sp, #0
 8019162:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	2b00      	cmp	r3, #0
 8019168:	d101      	bne.n	801916e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 801916a:	2301      	movs	r3, #1
 801916c:	e022      	b.n	80191b4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019174:	b2db      	uxtb	r3, r3
 8019176:	2b00      	cmp	r3, #0
 8019178:	d105      	bne.n	8019186 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	2200      	movs	r2, #0
 801917e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8019180:	6878      	ldr	r0, [r7, #4]
 8019182:	f7fa fd77 	bl	8013c74 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	2203      	movs	r2, #3
 801918a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 801918e:	6878      	ldr	r0, [r7, #4]
 8019190:	f000 f814 	bl	80191bc <HAL_SD_InitCard>
 8019194:	4603      	mov	r3, r0
 8019196:	2b00      	cmp	r3, #0
 8019198:	d001      	beq.n	801919e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 801919a:	2301      	movs	r3, #1
 801919c:	e00a      	b.n	80191b4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	2200      	movs	r2, #0
 80191a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	2200      	movs	r2, #0
 80191a8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	2201      	movs	r2, #1
 80191ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80191b2:	2300      	movs	r3, #0
}
 80191b4:	4618      	mov	r0, r3
 80191b6:	3708      	adds	r7, #8
 80191b8:	46bd      	mov	sp, r7
 80191ba:	bd80      	pop	{r7, pc}

080191bc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80191bc:	b5b0      	push	{r4, r5, r7, lr}
 80191be:	b08e      	sub	sp, #56	; 0x38
 80191c0:	af04      	add	r7, sp, #16
 80191c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80191c4:	2300      	movs	r3, #0
 80191c6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80191c8:	2300      	movs	r3, #0
 80191ca:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80191cc:	2300      	movs	r3, #0
 80191ce:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80191d0:	2300      	movs	r3, #0
 80191d2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80191d4:	2300      	movs	r3, #0
 80191d6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80191d8:	2376      	movs	r3, #118	; 0x76
 80191da:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	681d      	ldr	r5, [r3, #0]
 80191e0:	466c      	mov	r4, sp
 80191e2:	f107 0314 	add.w	r3, r7, #20
 80191e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80191ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80191ee:	f107 0308 	add.w	r3, r7, #8
 80191f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80191f4:	4628      	mov	r0, r5
 80191f6:	f003 fbdb 	bl	801c9b0 <SDIO_Init>
 80191fa:	4603      	mov	r3, r0
 80191fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8019200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019204:	2b00      	cmp	r3, #0
 8019206:	d001      	beq.n	801920c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8019208:	2301      	movs	r3, #1
 801920a:	e031      	b.n	8019270 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 801920c:	4b1a      	ldr	r3, [pc, #104]	; (8019278 <HAL_SD_InitCard+0xbc>)
 801920e:	2200      	movs	r2, #0
 8019210:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	4618      	mov	r0, r3
 8019218:	f003 fc13 	bl	801ca42 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 801921c:	4b16      	ldr	r3, [pc, #88]	; (8019278 <HAL_SD_InitCard+0xbc>)
 801921e:	2201      	movs	r2, #1
 8019220:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8019222:	6878      	ldr	r0, [r7, #4]
 8019224:	f000 ffdc 	bl	801a1e0 <SD_PowerON>
 8019228:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801922a:	6a3b      	ldr	r3, [r7, #32]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d00b      	beq.n	8019248 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	2201      	movs	r2, #1
 8019234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801923c:	6a3b      	ldr	r3, [r7, #32]
 801923e:	431a      	orrs	r2, r3
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8019244:	2301      	movs	r3, #1
 8019246:	e013      	b.n	8019270 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8019248:	6878      	ldr	r0, [r7, #4]
 801924a:	f000 fefb 	bl	801a044 <SD_InitCard>
 801924e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8019250:	6a3b      	ldr	r3, [r7, #32]
 8019252:	2b00      	cmp	r3, #0
 8019254:	d00b      	beq.n	801926e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	2201      	movs	r2, #1
 801925a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019262:	6a3b      	ldr	r3, [r7, #32]
 8019264:	431a      	orrs	r2, r3
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801926a:	2301      	movs	r3, #1
 801926c:	e000      	b.n	8019270 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 801926e:	2300      	movs	r3, #0
}
 8019270:	4618      	mov	r0, r3
 8019272:	3728      	adds	r7, #40	; 0x28
 8019274:	46bd      	mov	sp, r7
 8019276:	bdb0      	pop	{r4, r5, r7, pc}
 8019278:	422580a0 	.word	0x422580a0

0801927c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 801927c:	b580      	push	{r7, lr}
 801927e:	b08c      	sub	sp, #48	; 0x30
 8019280:	af00      	add	r7, sp, #0
 8019282:	60f8      	str	r0, [r7, #12]
 8019284:	60b9      	str	r1, [r7, #8]
 8019286:	607a      	str	r2, [r7, #4]
 8019288:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 801928e:	68bb      	ldr	r3, [r7, #8]
 8019290:	2b00      	cmp	r3, #0
 8019292:	d107      	bne.n	80192a4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8019294:	68fb      	ldr	r3, [r7, #12]
 8019296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019298:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801929c:	68fb      	ldr	r3, [r7, #12]
 801929e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80192a0:	2301      	movs	r3, #1
 80192a2:	e0c9      	b.n	8019438 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80192aa:	b2db      	uxtb	r3, r3
 80192ac:	2b01      	cmp	r3, #1
 80192ae:	f040 80c2 	bne.w	8019436 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	2200      	movs	r2, #0
 80192b6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80192b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80192ba:	683b      	ldr	r3, [r7, #0]
 80192bc:	441a      	add	r2, r3
 80192be:	68fb      	ldr	r3, [r7, #12]
 80192c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80192c2:	429a      	cmp	r2, r3
 80192c4:	d907      	bls.n	80192d6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80192c6:	68fb      	ldr	r3, [r7, #12]
 80192c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80192ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80192ce:	68fb      	ldr	r3, [r7, #12]
 80192d0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80192d2:	2301      	movs	r3, #1
 80192d4:	e0b0      	b.n	8019438 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80192d6:	68fb      	ldr	r3, [r7, #12]
 80192d8:	2203      	movs	r2, #3
 80192da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	2200      	movs	r2, #0
 80192e4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80192e6:	68fb      	ldr	r3, [r7, #12]
 80192e8:	681b      	ldr	r3, [r3, #0]
 80192ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192ec:	68fa      	ldr	r2, [r7, #12]
 80192ee:	6812      	ldr	r2, [r2, #0]
 80192f0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80192f4:	f043 0302 	orr.w	r3, r3, #2
 80192f8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80192fe:	4a50      	ldr	r2, [pc, #320]	; (8019440 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8019300:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8019302:	68fb      	ldr	r3, [r7, #12]
 8019304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019306:	4a4f      	ldr	r2, [pc, #316]	; (8019444 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8019308:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 801930a:	68fb      	ldr	r3, [r7, #12]
 801930c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801930e:	2200      	movs	r2, #0
 8019310:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8019312:	68fb      	ldr	r3, [r7, #12]
 8019314:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8019316:	68fb      	ldr	r3, [r7, #12]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	3380      	adds	r3, #128	; 0x80
 801931c:	4619      	mov	r1, r3
 801931e:	68ba      	ldr	r2, [r7, #8]
 8019320:	683b      	ldr	r3, [r7, #0]
 8019322:	025b      	lsls	r3, r3, #9
 8019324:	089b      	lsrs	r3, r3, #2
 8019326:	f7fb ff03 	bl	8015130 <HAL_DMA_Start_IT>
 801932a:	4603      	mov	r3, r0
 801932c:	2b00      	cmp	r3, #0
 801932e:	d017      	beq.n	8019360 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8019336:	68fb      	ldr	r3, [r7, #12]
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 801933e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	4a40      	ldr	r2, [pc, #256]	; (8019448 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8019346:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801934c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8019354:	68fb      	ldr	r3, [r7, #12]
 8019356:	2201      	movs	r2, #1
 8019358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 801935c:	2301      	movs	r3, #1
 801935e:	e06b      	b.n	8019438 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8019360:	4b3a      	ldr	r3, [pc, #232]	; (801944c <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8019362:	2201      	movs	r2, #1
 8019364:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8019366:	68fb      	ldr	r3, [r7, #12]
 8019368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801936a:	2b01      	cmp	r3, #1
 801936c:	d002      	beq.n	8019374 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 801936e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019370:	025b      	lsls	r3, r3, #9
 8019372:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	f44f 7100 	mov.w	r1, #512	; 0x200
 801937c:	4618      	mov	r0, r3
 801937e:	f003 fbf3 	bl	801cb68 <SDMMC_CmdBlockLength>
 8019382:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8019384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019386:	2b00      	cmp	r3, #0
 8019388:	d00f      	beq.n	80193aa <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801938a:	68fb      	ldr	r3, [r7, #12]
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	4a2e      	ldr	r2, [pc, #184]	; (8019448 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8019390:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019398:	431a      	orrs	r2, r3
 801939a:	68fb      	ldr	r3, [r7, #12]
 801939c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	2201      	movs	r2, #1
 80193a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80193a6:	2301      	movs	r3, #1
 80193a8:	e046      	b.n	8019438 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80193aa:	f04f 33ff 	mov.w	r3, #4294967295
 80193ae:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80193b0:	683b      	ldr	r3, [r7, #0]
 80193b2:	025b      	lsls	r3, r3, #9
 80193b4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80193b6:	2390      	movs	r3, #144	; 0x90
 80193b8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80193ba:	2302      	movs	r3, #2
 80193bc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80193be:	2300      	movs	r3, #0
 80193c0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80193c2:	2301      	movs	r3, #1
 80193c4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80193c6:	68fb      	ldr	r3, [r7, #12]
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	f107 0210 	add.w	r2, r7, #16
 80193ce:	4611      	mov	r1, r2
 80193d0:	4618      	mov	r0, r3
 80193d2:	f003 fb9d 	bl	801cb10 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80193d6:	683b      	ldr	r3, [r7, #0]
 80193d8:	2b01      	cmp	r3, #1
 80193da:	d90a      	bls.n	80193f2 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	2282      	movs	r2, #130	; 0x82
 80193e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80193e2:	68fb      	ldr	r3, [r7, #12]
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80193e8:	4618      	mov	r0, r3
 80193ea:	f003 fc01 	bl	801cbf0 <SDMMC_CmdReadMultiBlock>
 80193ee:	62f8      	str	r0, [r7, #44]	; 0x2c
 80193f0:	e009      	b.n	8019406 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	2281      	movs	r2, #129	; 0x81
 80193f6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80193fe:	4618      	mov	r0, r3
 8019400:	f003 fbd4 	bl	801cbac <SDMMC_CmdReadSingleBlock>
 8019404:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8019406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019408:	2b00      	cmp	r3, #0
 801940a:	d012      	beq.n	8019432 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	4a0d      	ldr	r2, [pc, #52]	; (8019448 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8019412:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8019414:	68fb      	ldr	r3, [r7, #12]
 8019416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801941a:	431a      	orrs	r2, r3
 801941c:	68fb      	ldr	r3, [r7, #12]
 801941e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	2201      	movs	r2, #1
 8019424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	2200      	movs	r2, #0
 801942c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 801942e:	2301      	movs	r3, #1
 8019430:	e002      	b.n	8019438 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8019432:	2300      	movs	r3, #0
 8019434:	e000      	b.n	8019438 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8019436:	2302      	movs	r3, #2
  }
}
 8019438:	4618      	mov	r0, r3
 801943a:	3730      	adds	r7, #48	; 0x30
 801943c:	46bd      	mov	sp, r7
 801943e:	bd80      	pop	{r7, pc}
 8019440:	08019e53 	.word	0x08019e53
 8019444:	08019ec5 	.word	0x08019ec5
 8019448:	004005ff 	.word	0x004005ff
 801944c:	4225858c 	.word	0x4225858c

08019450 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8019450:	b580      	push	{r7, lr}
 8019452:	b08c      	sub	sp, #48	; 0x30
 8019454:	af00      	add	r7, sp, #0
 8019456:	60f8      	str	r0, [r7, #12]
 8019458:	60b9      	str	r1, [r7, #8]
 801945a:	607a      	str	r2, [r7, #4]
 801945c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8019462:	68bb      	ldr	r3, [r7, #8]
 8019464:	2b00      	cmp	r3, #0
 8019466:	d107      	bne.n	8019478 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8019468:	68fb      	ldr	r3, [r7, #12]
 801946a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801946c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8019474:	2301      	movs	r3, #1
 8019476:	e0ce      	b.n	8019616 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8019478:	68fb      	ldr	r3, [r7, #12]
 801947a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801947e:	b2db      	uxtb	r3, r3
 8019480:	2b01      	cmp	r3, #1
 8019482:	f040 80c7 	bne.w	8019614 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8019486:	68fb      	ldr	r3, [r7, #12]
 8019488:	2200      	movs	r2, #0
 801948a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801948c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801948e:	683b      	ldr	r3, [r7, #0]
 8019490:	441a      	add	r2, r3
 8019492:	68fb      	ldr	r3, [r7, #12]
 8019494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019496:	429a      	cmp	r2, r3
 8019498:	d907      	bls.n	80194aa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801949a:	68fb      	ldr	r3, [r7, #12]
 801949c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801949e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80194a2:	68fb      	ldr	r3, [r7, #12]
 80194a4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80194a6:	2301      	movs	r3, #1
 80194a8:	e0b5      	b.n	8019616 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80194aa:	68fb      	ldr	r3, [r7, #12]
 80194ac:	2203      	movs	r2, #3
 80194ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80194b2:	68fb      	ldr	r3, [r7, #12]
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	2200      	movs	r2, #0
 80194b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80194ba:	68fb      	ldr	r3, [r7, #12]
 80194bc:	681b      	ldr	r3, [r3, #0]
 80194be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80194c0:	68fa      	ldr	r2, [r7, #12]
 80194c2:	6812      	ldr	r2, [r2, #0]
 80194c4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80194c8:	f043 0302 	orr.w	r3, r3, #2
 80194cc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80194ce:	68fb      	ldr	r3, [r7, #12]
 80194d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80194d2:	4a53      	ldr	r2, [pc, #332]	; (8019620 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80194d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80194d6:	68fb      	ldr	r3, [r7, #12]
 80194d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80194da:	4a52      	ldr	r2, [pc, #328]	; (8019624 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80194dc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80194e2:	2200      	movs	r2, #0
 80194e4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80194e6:	68fb      	ldr	r3, [r7, #12]
 80194e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80194ea:	2b01      	cmp	r3, #1
 80194ec:	d002      	beq.n	80194f4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80194ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194f0:	025b      	lsls	r3, r3, #9
 80194f2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80194f4:	68fb      	ldr	r3, [r7, #12]
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80194fc:	4618      	mov	r0, r3
 80194fe:	f003 fb33 	bl	801cb68 <SDMMC_CmdBlockLength>
 8019502:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8019504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019506:	2b00      	cmp	r3, #0
 8019508:	d00f      	beq.n	801952a <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801950a:	68fb      	ldr	r3, [r7, #12]
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	4a46      	ldr	r2, [pc, #280]	; (8019628 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8019510:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019518:	431a      	orrs	r2, r3
 801951a:	68fb      	ldr	r3, [r7, #12]
 801951c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801951e:	68fb      	ldr	r3, [r7, #12]
 8019520:	2201      	movs	r2, #1
 8019522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8019526:	2301      	movs	r3, #1
 8019528:	e075      	b.n	8019616 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 801952a:	683b      	ldr	r3, [r7, #0]
 801952c:	2b01      	cmp	r3, #1
 801952e:	d90a      	bls.n	8019546 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	22a0      	movs	r2, #160	; 0xa0
 8019534:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801953c:	4618      	mov	r0, r3
 801953e:	f003 fb9b 	bl	801cc78 <SDMMC_CmdWriteMultiBlock>
 8019542:	62f8      	str	r0, [r7, #44]	; 0x2c
 8019544:	e009      	b.n	801955a <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8019546:	68fb      	ldr	r3, [r7, #12]
 8019548:	2290      	movs	r2, #144	; 0x90
 801954a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 801954c:	68fb      	ldr	r3, [r7, #12]
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019552:	4618      	mov	r0, r3
 8019554:	f003 fb6e 	bl	801cc34 <SDMMC_CmdWriteSingleBlock>
 8019558:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 801955a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801955c:	2b00      	cmp	r3, #0
 801955e:	d012      	beq.n	8019586 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8019560:	68fb      	ldr	r3, [r7, #12]
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	4a30      	ldr	r2, [pc, #192]	; (8019628 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8019566:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8019568:	68fb      	ldr	r3, [r7, #12]
 801956a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801956c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801956e:	431a      	orrs	r2, r3
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	2201      	movs	r2, #1
 8019578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801957c:	68fb      	ldr	r3, [r7, #12]
 801957e:	2200      	movs	r2, #0
 8019580:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8019582:	2301      	movs	r3, #1
 8019584:	e047      	b.n	8019616 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8019586:	4b29      	ldr	r3, [pc, #164]	; (801962c <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8019588:	2201      	movs	r2, #1
 801958a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 801958c:	68fb      	ldr	r3, [r7, #12]
 801958e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8019590:	68b9      	ldr	r1, [r7, #8]
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	3380      	adds	r3, #128	; 0x80
 8019598:	461a      	mov	r2, r3
 801959a:	683b      	ldr	r3, [r7, #0]
 801959c:	025b      	lsls	r3, r3, #9
 801959e:	089b      	lsrs	r3, r3, #2
 80195a0:	f7fb fdc6 	bl	8015130 <HAL_DMA_Start_IT>
 80195a4:	4603      	mov	r3, r0
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d01c      	beq.n	80195e4 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80195b0:	68fa      	ldr	r2, [r7, #12]
 80195b2:	6812      	ldr	r2, [r2, #0]
 80195b4:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80195b8:	f023 0302 	bic.w	r3, r3, #2
 80195bc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	4a19      	ldr	r2, [pc, #100]	; (8019628 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80195c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80195c6:	68fb      	ldr	r3, [r7, #12]
 80195c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80195ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80195d2:	68fb      	ldr	r3, [r7, #12]
 80195d4:	2201      	movs	r2, #1
 80195d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80195da:	68fb      	ldr	r3, [r7, #12]
 80195dc:	2200      	movs	r2, #0
 80195de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80195e0:	2301      	movs	r3, #1
 80195e2:	e018      	b.n	8019616 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80195e4:	f04f 33ff 	mov.w	r3, #4294967295
 80195e8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80195ea:	683b      	ldr	r3, [r7, #0]
 80195ec:	025b      	lsls	r3, r3, #9
 80195ee:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80195f0:	2390      	movs	r3, #144	; 0x90
 80195f2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80195f4:	2300      	movs	r3, #0
 80195f6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80195f8:	2300      	movs	r3, #0
 80195fa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80195fc:	2301      	movs	r3, #1
 80195fe:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8019600:	68fb      	ldr	r3, [r7, #12]
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	f107 0210 	add.w	r2, r7, #16
 8019608:	4611      	mov	r1, r2
 801960a:	4618      	mov	r0, r3
 801960c:	f003 fa80 	bl	801cb10 <SDIO_ConfigData>

      return HAL_OK;
 8019610:	2300      	movs	r3, #0
 8019612:	e000      	b.n	8019616 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8019614:	2302      	movs	r3, #2
  }
}
 8019616:	4618      	mov	r0, r3
 8019618:	3730      	adds	r7, #48	; 0x30
 801961a:	46bd      	mov	sp, r7
 801961c:	bd80      	pop	{r7, pc}
 801961e:	bf00      	nop
 8019620:	08019e29 	.word	0x08019e29
 8019624:	08019ec5 	.word	0x08019ec5
 8019628:	004005ff 	.word	0x004005ff
 801962c:	4225858c 	.word	0x4225858c

08019630 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8019630:	b580      	push	{r7, lr}
 8019632:	b084      	sub	sp, #16
 8019634:	af00      	add	r7, sp, #0
 8019636:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801963c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019648:	2b00      	cmp	r3, #0
 801964a:	d008      	beq.n	801965e <HAL_SD_IRQHandler+0x2e>
 801964c:	68fb      	ldr	r3, [r7, #12]
 801964e:	f003 0308 	and.w	r3, r3, #8
 8019652:	2b00      	cmp	r3, #0
 8019654:	d003      	beq.n	801965e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8019656:	6878      	ldr	r0, [r7, #4]
 8019658:	f000 ffd8 	bl	801a60c <SD_Read_IT>
 801965c:	e165      	b.n	801992a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	681b      	ldr	r3, [r3, #0]
 8019662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019668:	2b00      	cmp	r3, #0
 801966a:	f000 808f 	beq.w	801978c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019676:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801967e:	687a      	ldr	r2, [r7, #4]
 8019680:	6812      	ldr	r2, [r2, #0]
 8019682:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8019686:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 801968a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	681b      	ldr	r3, [r3, #0]
 8019690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	f022 0201 	bic.w	r2, r2, #1
 801969a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	f003 0308 	and.w	r3, r3, #8
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d039      	beq.n	801971a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80196a6:	68fb      	ldr	r3, [r7, #12]
 80196a8:	f003 0302 	and.w	r3, r3, #2
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d104      	bne.n	80196ba <HAL_SD_IRQHandler+0x8a>
 80196b0:	68fb      	ldr	r3, [r7, #12]
 80196b2:	f003 0320 	and.w	r3, r3, #32
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d011      	beq.n	80196de <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	4618      	mov	r0, r3
 80196c0:	f003 fafc 	bl	801ccbc <SDMMC_CmdStopTransfer>
 80196c4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80196c6:	68bb      	ldr	r3, [r7, #8]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d008      	beq.n	80196de <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80196d0:	68bb      	ldr	r3, [r7, #8]
 80196d2:	431a      	orrs	r2, r3
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80196d8:	6878      	ldr	r0, [r7, #4]
 80196da:	f000 f92f 	bl	801993c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	f240 523a 	movw	r2, #1338	; 0x53a
 80196e6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	2201      	movs	r2, #1
 80196ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	2200      	movs	r2, #0
 80196f4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80196f6:	68fb      	ldr	r3, [r7, #12]
 80196f8:	f003 0301 	and.w	r3, r3, #1
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d104      	bne.n	801970a <HAL_SD_IRQHandler+0xda>
 8019700:	68fb      	ldr	r3, [r7, #12]
 8019702:	f003 0302 	and.w	r3, r3, #2
 8019706:	2b00      	cmp	r3, #0
 8019708:	d003      	beq.n	8019712 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 801970a:	6878      	ldr	r0, [r7, #4]
 801970c:	f003 ff5a 	bl	801d5c4 <HAL_SD_RxCpltCallback>
 8019710:	e10b      	b.n	801992a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8019712:	6878      	ldr	r0, [r7, #4]
 8019714:	f003 ff4c 	bl	801d5b0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8019718:	e107      	b.n	801992a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 801971a:	68fb      	ldr	r3, [r7, #12]
 801971c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019720:	2b00      	cmp	r3, #0
 8019722:	f000 8102 	beq.w	801992a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	f003 0320 	and.w	r3, r3, #32
 801972c:	2b00      	cmp	r3, #0
 801972e:	d011      	beq.n	8019754 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	4618      	mov	r0, r3
 8019736:	f003 fac1 	bl	801ccbc <SDMMC_CmdStopTransfer>
 801973a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 801973c:	68bb      	ldr	r3, [r7, #8]
 801973e:	2b00      	cmp	r3, #0
 8019740:	d008      	beq.n	8019754 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019746:	68bb      	ldr	r3, [r7, #8]
 8019748:	431a      	orrs	r2, r3
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 801974e:	6878      	ldr	r0, [r7, #4]
 8019750:	f000 f8f4 	bl	801993c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8019754:	68fb      	ldr	r3, [r7, #12]
 8019756:	f003 0301 	and.w	r3, r3, #1
 801975a:	2b00      	cmp	r3, #0
 801975c:	f040 80e5 	bne.w	801992a <HAL_SD_IRQHandler+0x2fa>
 8019760:	68fb      	ldr	r3, [r7, #12]
 8019762:	f003 0302 	and.w	r3, r3, #2
 8019766:	2b00      	cmp	r3, #0
 8019768:	f040 80df 	bne.w	801992a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	f022 0208 	bic.w	r2, r2, #8
 801977a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	2201      	movs	r2, #1
 8019780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8019784:	6878      	ldr	r0, [r7, #4]
 8019786:	f003 ff13 	bl	801d5b0 <HAL_SD_TxCpltCallback>
}
 801978a:	e0ce      	b.n	801992a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019796:	2b00      	cmp	r3, #0
 8019798:	d008      	beq.n	80197ac <HAL_SD_IRQHandler+0x17c>
 801979a:	68fb      	ldr	r3, [r7, #12]
 801979c:	f003 0308 	and.w	r3, r3, #8
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d003      	beq.n	80197ac <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80197a4:	6878      	ldr	r0, [r7, #4]
 80197a6:	f000 ff82 	bl	801a6ae <SD_Write_IT>
 80197aa:	e0be      	b.n	801992a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80197b2:	f240 233a 	movw	r3, #570	; 0x23a
 80197b6:	4013      	ands	r3, r2
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	f000 80b6 	beq.w	801992a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80197c4:	f003 0302 	and.w	r3, r3, #2
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d005      	beq.n	80197d8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80197d0:	f043 0202 	orr.w	r2, r3, #2
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80197de:	f003 0308 	and.w	r3, r3, #8
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d005      	beq.n	80197f2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80197ea:	f043 0208 	orr.w	r2, r3, #8
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80197f8:	f003 0320 	and.w	r3, r3, #32
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d005      	beq.n	801980c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019804:	f043 0220 	orr.w	r2, r3, #32
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	681b      	ldr	r3, [r3, #0]
 8019810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019812:	f003 0310 	and.w	r3, r3, #16
 8019816:	2b00      	cmp	r3, #0
 8019818:	d005      	beq.n	8019826 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801981e:	f043 0210 	orr.w	r2, r3, #16
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	681b      	ldr	r3, [r3, #0]
 801982a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801982c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019830:	2b00      	cmp	r3, #0
 8019832:	d005      	beq.n	8019840 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019838:	f043 0208 	orr.w	r2, r3, #8
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	f240 723a 	movw	r2, #1850	; 0x73a
 8019848:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019850:	687a      	ldr	r2, [r7, #4]
 8019852:	6812      	ldr	r2, [r2, #0]
 8019854:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8019858:	f023 0302 	bic.w	r3, r3, #2
 801985c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	4618      	mov	r0, r3
 8019864:	f003 fa2a 	bl	801ccbc <SDMMC_CmdStopTransfer>
 8019868:	4602      	mov	r2, r0
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801986e:	431a      	orrs	r2, r3
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8019874:	68fb      	ldr	r3, [r7, #12]
 8019876:	f003 0308 	and.w	r3, r3, #8
 801987a:	2b00      	cmp	r3, #0
 801987c:	d00a      	beq.n	8019894 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	2201      	movs	r2, #1
 8019882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	2200      	movs	r2, #0
 801988a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 801988c:	6878      	ldr	r0, [r7, #4]
 801988e:	f000 f855 	bl	801993c <HAL_SD_ErrorCallback>
}
 8019892:	e04a      	b.n	801992a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8019894:	68fb      	ldr	r3, [r7, #12]
 8019896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801989a:	2b00      	cmp	r3, #0
 801989c:	d045      	beq.n	801992a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801989e:	68fb      	ldr	r3, [r7, #12]
 80198a0:	f003 0310 	and.w	r3, r3, #16
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d104      	bne.n	80198b2 <HAL_SD_IRQHandler+0x282>
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	f003 0320 	and.w	r3, r3, #32
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d011      	beq.n	80198d6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80198b6:	4a1f      	ldr	r2, [pc, #124]	; (8019934 <HAL_SD_IRQHandler+0x304>)
 80198b8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80198be:	4618      	mov	r0, r3
 80198c0:	f7fb fc8e 	bl	80151e0 <HAL_DMA_Abort_IT>
 80198c4:	4603      	mov	r3, r0
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d02f      	beq.n	801992a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80198ce:	4618      	mov	r0, r3
 80198d0:	f000 fb4a 	bl	8019f68 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80198d4:	e029      	b.n	801992a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	f003 0301 	and.w	r3, r3, #1
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d104      	bne.n	80198ea <HAL_SD_IRQHandler+0x2ba>
 80198e0:	68fb      	ldr	r3, [r7, #12]
 80198e2:	f003 0302 	and.w	r3, r3, #2
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d011      	beq.n	801990e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198ee:	4a12      	ldr	r2, [pc, #72]	; (8019938 <HAL_SD_IRQHandler+0x308>)
 80198f0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198f6:	4618      	mov	r0, r3
 80198f8:	f7fb fc72 	bl	80151e0 <HAL_DMA_Abort_IT>
 80198fc:	4603      	mov	r3, r0
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d013      	beq.n	801992a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019906:	4618      	mov	r0, r3
 8019908:	f000 fb65 	bl	8019fd6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 801990c:	e00d      	b.n	801992a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	2200      	movs	r2, #0
 8019912:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	2201      	movs	r2, #1
 8019918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	2200      	movs	r2, #0
 8019920:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8019922:	6878      	ldr	r0, [r7, #4]
 8019924:	f003 fe3a 	bl	801d59c <HAL_SD_AbortCallback>
}
 8019928:	e7ff      	b.n	801992a <HAL_SD_IRQHandler+0x2fa>
 801992a:	bf00      	nop
 801992c:	3710      	adds	r7, #16
 801992e:	46bd      	mov	sp, r7
 8019930:	bd80      	pop	{r7, pc}
 8019932:	bf00      	nop
 8019934:	08019f69 	.word	0x08019f69
 8019938:	08019fd7 	.word	0x08019fd7

0801993c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 801993c:	b480      	push	{r7}
 801993e:	b083      	sub	sp, #12
 8019940:	af00      	add	r7, sp, #0
 8019942:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8019944:	bf00      	nop
 8019946:	370c      	adds	r7, #12
 8019948:	46bd      	mov	sp, r7
 801994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801994e:	4770      	bx	lr

08019950 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8019950:	b480      	push	{r7}
 8019952:	b083      	sub	sp, #12
 8019954:	af00      	add	r7, sp, #0
 8019956:	6078      	str	r0, [r7, #4]
 8019958:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801995e:	0f9b      	lsrs	r3, r3, #30
 8019960:	b2da      	uxtb	r2, r3
 8019962:	683b      	ldr	r3, [r7, #0]
 8019964:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801996a:	0e9b      	lsrs	r3, r3, #26
 801996c:	b2db      	uxtb	r3, r3
 801996e:	f003 030f 	and.w	r3, r3, #15
 8019972:	b2da      	uxtb	r2, r3
 8019974:	683b      	ldr	r3, [r7, #0]
 8019976:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801997c:	0e1b      	lsrs	r3, r3, #24
 801997e:	b2db      	uxtb	r3, r3
 8019980:	f003 0303 	and.w	r3, r3, #3
 8019984:	b2da      	uxtb	r2, r3
 8019986:	683b      	ldr	r3, [r7, #0]
 8019988:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801998e:	0c1b      	lsrs	r3, r3, #16
 8019990:	b2da      	uxtb	r2, r3
 8019992:	683b      	ldr	r3, [r7, #0]
 8019994:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801999a:	0a1b      	lsrs	r3, r3, #8
 801999c:	b2da      	uxtb	r2, r3
 801999e:	683b      	ldr	r3, [r7, #0]
 80199a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80199a6:	b2da      	uxtb	r2, r3
 80199a8:	683b      	ldr	r3, [r7, #0]
 80199aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80199b0:	0d1b      	lsrs	r3, r3, #20
 80199b2:	b29a      	uxth	r2, r3
 80199b4:	683b      	ldr	r3, [r7, #0]
 80199b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80199bc:	0c1b      	lsrs	r3, r3, #16
 80199be:	b2db      	uxtb	r3, r3
 80199c0:	f003 030f 	and.w	r3, r3, #15
 80199c4:	b2da      	uxtb	r2, r3
 80199c6:	683b      	ldr	r3, [r7, #0]
 80199c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80199ce:	0bdb      	lsrs	r3, r3, #15
 80199d0:	b2db      	uxtb	r3, r3
 80199d2:	f003 0301 	and.w	r3, r3, #1
 80199d6:	b2da      	uxtb	r2, r3
 80199d8:	683b      	ldr	r3, [r7, #0]
 80199da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80199e0:	0b9b      	lsrs	r3, r3, #14
 80199e2:	b2db      	uxtb	r3, r3
 80199e4:	f003 0301 	and.w	r3, r3, #1
 80199e8:	b2da      	uxtb	r2, r3
 80199ea:	683b      	ldr	r3, [r7, #0]
 80199ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80199f2:	0b5b      	lsrs	r3, r3, #13
 80199f4:	b2db      	uxtb	r3, r3
 80199f6:	f003 0301 	and.w	r3, r3, #1
 80199fa:	b2da      	uxtb	r2, r3
 80199fc:	683b      	ldr	r3, [r7, #0]
 80199fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019a04:	0b1b      	lsrs	r3, r3, #12
 8019a06:	b2db      	uxtb	r3, r3
 8019a08:	f003 0301 	and.w	r3, r3, #1
 8019a0c:	b2da      	uxtb	r2, r3
 8019a0e:	683b      	ldr	r3, [r7, #0]
 8019a10:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8019a12:	683b      	ldr	r3, [r7, #0]
 8019a14:	2200      	movs	r2, #0
 8019a16:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d163      	bne.n	8019ae8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019a24:	009a      	lsls	r2, r3, #2
 8019a26:	f640 73fc 	movw	r3, #4092	; 0xffc
 8019a2a:	4013      	ands	r3, r2
 8019a2c:	687a      	ldr	r2, [r7, #4]
 8019a2e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8019a30:	0f92      	lsrs	r2, r2, #30
 8019a32:	431a      	orrs	r2, r3
 8019a34:	683b      	ldr	r3, [r7, #0]
 8019a36:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a3c:	0edb      	lsrs	r3, r3, #27
 8019a3e:	b2db      	uxtb	r3, r3
 8019a40:	f003 0307 	and.w	r3, r3, #7
 8019a44:	b2da      	uxtb	r2, r3
 8019a46:	683b      	ldr	r3, [r7, #0]
 8019a48:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a4e:	0e1b      	lsrs	r3, r3, #24
 8019a50:	b2db      	uxtb	r3, r3
 8019a52:	f003 0307 	and.w	r3, r3, #7
 8019a56:	b2da      	uxtb	r2, r3
 8019a58:	683b      	ldr	r3, [r7, #0]
 8019a5a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a60:	0d5b      	lsrs	r3, r3, #21
 8019a62:	b2db      	uxtb	r3, r3
 8019a64:	f003 0307 	and.w	r3, r3, #7
 8019a68:	b2da      	uxtb	r2, r3
 8019a6a:	683b      	ldr	r3, [r7, #0]
 8019a6c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a72:	0c9b      	lsrs	r3, r3, #18
 8019a74:	b2db      	uxtb	r3, r3
 8019a76:	f003 0307 	and.w	r3, r3, #7
 8019a7a:	b2da      	uxtb	r2, r3
 8019a7c:	683b      	ldr	r3, [r7, #0]
 8019a7e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a84:	0bdb      	lsrs	r3, r3, #15
 8019a86:	b2db      	uxtb	r3, r3
 8019a88:	f003 0307 	and.w	r3, r3, #7
 8019a8c:	b2da      	uxtb	r2, r3
 8019a8e:	683b      	ldr	r3, [r7, #0]
 8019a90:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8019a92:	683b      	ldr	r3, [r7, #0]
 8019a94:	691b      	ldr	r3, [r3, #16]
 8019a96:	1c5a      	adds	r2, r3, #1
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8019a9c:	683b      	ldr	r3, [r7, #0]
 8019a9e:	7e1b      	ldrb	r3, [r3, #24]
 8019aa0:	b2db      	uxtb	r3, r3
 8019aa2:	f003 0307 	and.w	r3, r3, #7
 8019aa6:	3302      	adds	r3, #2
 8019aa8:	2201      	movs	r2, #1
 8019aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8019aae:	687a      	ldr	r2, [r7, #4]
 8019ab0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8019ab2:	fb02 f203 	mul.w	r2, r2, r3
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8019aba:	683b      	ldr	r3, [r7, #0]
 8019abc:	7a1b      	ldrb	r3, [r3, #8]
 8019abe:	b2db      	uxtb	r3, r3
 8019ac0:	f003 030f 	and.w	r3, r3, #15
 8019ac4:	2201      	movs	r2, #1
 8019ac6:	409a      	lsls	r2, r3
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019ad0:	687a      	ldr	r2, [r7, #4]
 8019ad2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8019ad4:	0a52      	lsrs	r2, r2, #9
 8019ad6:	fb02 f203 	mul.w	r2, r2, r3
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019ae4:	661a      	str	r2, [r3, #96]	; 0x60
 8019ae6:	e031      	b.n	8019b4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019aec:	2b01      	cmp	r3, #1
 8019aee:	d11d      	bne.n	8019b2c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019af4:	041b      	lsls	r3, r3, #16
 8019af6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019afe:	0c1b      	lsrs	r3, r3, #16
 8019b00:	431a      	orrs	r2, r3
 8019b02:	683b      	ldr	r3, [r7, #0]
 8019b04:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8019b06:	683b      	ldr	r3, [r7, #0]
 8019b08:	691b      	ldr	r3, [r3, #16]
 8019b0a:	3301      	adds	r3, #1
 8019b0c:	029a      	lsls	r2, r3, #10
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019b20:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	661a      	str	r2, [r3, #96]	; 0x60
 8019b2a:	e00f      	b.n	8019b4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	4a58      	ldr	r2, [pc, #352]	; (8019c94 <HAL_SD_GetCardCSD+0x344>)
 8019b32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	2201      	movs	r2, #1
 8019b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8019b48:	2301      	movs	r3, #1
 8019b4a:	e09d      	b.n	8019c88 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b50:	0b9b      	lsrs	r3, r3, #14
 8019b52:	b2db      	uxtb	r3, r3
 8019b54:	f003 0301 	and.w	r3, r3, #1
 8019b58:	b2da      	uxtb	r2, r3
 8019b5a:	683b      	ldr	r3, [r7, #0]
 8019b5c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b62:	09db      	lsrs	r3, r3, #7
 8019b64:	b2db      	uxtb	r3, r3
 8019b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019b6a:	b2da      	uxtb	r2, r3
 8019b6c:	683b      	ldr	r3, [r7, #0]
 8019b6e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b74:	b2db      	uxtb	r3, r3
 8019b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019b7a:	b2da      	uxtb	r2, r3
 8019b7c:	683b      	ldr	r3, [r7, #0]
 8019b7e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b84:	0fdb      	lsrs	r3, r3, #31
 8019b86:	b2da      	uxtb	r2, r3
 8019b88:	683b      	ldr	r3, [r7, #0]
 8019b8a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b90:	0f5b      	lsrs	r3, r3, #29
 8019b92:	b2db      	uxtb	r3, r3
 8019b94:	f003 0303 	and.w	r3, r3, #3
 8019b98:	b2da      	uxtb	r2, r3
 8019b9a:	683b      	ldr	r3, [r7, #0]
 8019b9c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019ba2:	0e9b      	lsrs	r3, r3, #26
 8019ba4:	b2db      	uxtb	r3, r3
 8019ba6:	f003 0307 	and.w	r3, r3, #7
 8019baa:	b2da      	uxtb	r2, r3
 8019bac:	683b      	ldr	r3, [r7, #0]
 8019bae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019bb4:	0d9b      	lsrs	r3, r3, #22
 8019bb6:	b2db      	uxtb	r3, r3
 8019bb8:	f003 030f 	and.w	r3, r3, #15
 8019bbc:	b2da      	uxtb	r2, r3
 8019bbe:	683b      	ldr	r3, [r7, #0]
 8019bc0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019bc6:	0d5b      	lsrs	r3, r3, #21
 8019bc8:	b2db      	uxtb	r3, r3
 8019bca:	f003 0301 	and.w	r3, r3, #1
 8019bce:	b2da      	uxtb	r2, r3
 8019bd0:	683b      	ldr	r3, [r7, #0]
 8019bd2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8019bd6:	683b      	ldr	r3, [r7, #0]
 8019bd8:	2200      	movs	r2, #0
 8019bda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019be2:	0c1b      	lsrs	r3, r3, #16
 8019be4:	b2db      	uxtb	r3, r3
 8019be6:	f003 0301 	and.w	r3, r3, #1
 8019bea:	b2da      	uxtb	r2, r3
 8019bec:	683b      	ldr	r3, [r7, #0]
 8019bee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019bf6:	0bdb      	lsrs	r3, r3, #15
 8019bf8:	b2db      	uxtb	r3, r3
 8019bfa:	f003 0301 	and.w	r3, r3, #1
 8019bfe:	b2da      	uxtb	r2, r3
 8019c00:	683b      	ldr	r3, [r7, #0]
 8019c02:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c0a:	0b9b      	lsrs	r3, r3, #14
 8019c0c:	b2db      	uxtb	r3, r3
 8019c0e:	f003 0301 	and.w	r3, r3, #1
 8019c12:	b2da      	uxtb	r2, r3
 8019c14:	683b      	ldr	r3, [r7, #0]
 8019c16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c1e:	0b5b      	lsrs	r3, r3, #13
 8019c20:	b2db      	uxtb	r3, r3
 8019c22:	f003 0301 	and.w	r3, r3, #1
 8019c26:	b2da      	uxtb	r2, r3
 8019c28:	683b      	ldr	r3, [r7, #0]
 8019c2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c32:	0b1b      	lsrs	r3, r3, #12
 8019c34:	b2db      	uxtb	r3, r3
 8019c36:	f003 0301 	and.w	r3, r3, #1
 8019c3a:	b2da      	uxtb	r2, r3
 8019c3c:	683b      	ldr	r3, [r7, #0]
 8019c3e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c46:	0a9b      	lsrs	r3, r3, #10
 8019c48:	b2db      	uxtb	r3, r3
 8019c4a:	f003 0303 	and.w	r3, r3, #3
 8019c4e:	b2da      	uxtb	r2, r3
 8019c50:	683b      	ldr	r3, [r7, #0]
 8019c52:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c5a:	0a1b      	lsrs	r3, r3, #8
 8019c5c:	b2db      	uxtb	r3, r3
 8019c5e:	f003 0303 	and.w	r3, r3, #3
 8019c62:	b2da      	uxtb	r2, r3
 8019c64:	683b      	ldr	r3, [r7, #0]
 8019c66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c6e:	085b      	lsrs	r3, r3, #1
 8019c70:	b2db      	uxtb	r3, r3
 8019c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019c76:	b2da      	uxtb	r2, r3
 8019c78:	683b      	ldr	r3, [r7, #0]
 8019c7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8019c7e:	683b      	ldr	r3, [r7, #0]
 8019c80:	2201      	movs	r2, #1
 8019c82:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8019c86:	2300      	movs	r3, #0
}
 8019c88:	4618      	mov	r0, r3
 8019c8a:	370c      	adds	r7, #12
 8019c8c:	46bd      	mov	sp, r7
 8019c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c92:	4770      	bx	lr
 8019c94:	004005ff 	.word	0x004005ff

08019c98 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8019c98:	b480      	push	{r7}
 8019c9a:	b083      	sub	sp, #12
 8019c9c:	af00      	add	r7, sp, #0
 8019c9e:	6078      	str	r0, [r7, #4]
 8019ca0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019ca6:	683b      	ldr	r3, [r7, #0]
 8019ca8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8019cae:	683b      	ldr	r3, [r7, #0]
 8019cb0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019cb6:	683b      	ldr	r3, [r7, #0]
 8019cb8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019cbe:	683b      	ldr	r3, [r7, #0]
 8019cc0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8019cc6:	683b      	ldr	r3, [r7, #0]
 8019cc8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019cce:	683b      	ldr	r3, [r7, #0]
 8019cd0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019cd6:	683b      	ldr	r3, [r7, #0]
 8019cd8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8019cde:	683b      	ldr	r3, [r7, #0]
 8019ce0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8019ce2:	2300      	movs	r3, #0
}
 8019ce4:	4618      	mov	r0, r3
 8019ce6:	370c      	adds	r7, #12
 8019ce8:	46bd      	mov	sp, r7
 8019cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cee:	4770      	bx	lr

08019cf0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8019cf0:	b5b0      	push	{r4, r5, r7, lr}
 8019cf2:	b08e      	sub	sp, #56	; 0x38
 8019cf4:	af04      	add	r7, sp, #16
 8019cf6:	6078      	str	r0, [r7, #4]
 8019cf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	2203      	movs	r2, #3
 8019cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019d06:	2b03      	cmp	r3, #3
 8019d08:	d02e      	beq.n	8019d68 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8019d0a:	683b      	ldr	r3, [r7, #0]
 8019d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019d10:	d106      	bne.n	8019d20 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d16:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	639a      	str	r2, [r3, #56]	; 0x38
 8019d1e:	e029      	b.n	8019d74 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8019d20:	683b      	ldr	r3, [r7, #0]
 8019d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019d26:	d10a      	bne.n	8019d3e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8019d28:	6878      	ldr	r0, [r7, #4]
 8019d2a:	f000 fb0f 	bl	801a34c <SD_WideBus_Enable>
 8019d2e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d36:	431a      	orrs	r2, r3
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	639a      	str	r2, [r3, #56]	; 0x38
 8019d3c:	e01a      	b.n	8019d74 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8019d3e:	683b      	ldr	r3, [r7, #0]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d10a      	bne.n	8019d5a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8019d44:	6878      	ldr	r0, [r7, #4]
 8019d46:	f000 fb4c 	bl	801a3e2 <SD_WideBus_Disable>
 8019d4a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d52:	431a      	orrs	r2, r3
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	639a      	str	r2, [r3, #56]	; 0x38
 8019d58:	e00c      	b.n	8019d74 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d5e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	639a      	str	r2, [r3, #56]	; 0x38
 8019d66:	e005      	b.n	8019d74 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d009      	beq.n	8019d90 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	681b      	ldr	r3, [r3, #0]
 8019d80:	4a18      	ldr	r2, [pc, #96]	; (8019de4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8019d82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	2201      	movs	r2, #1
 8019d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8019d8c:	2301      	movs	r3, #1
 8019d8e:	e024      	b.n	8019dda <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	685b      	ldr	r3, [r3, #4]
 8019d94:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	689b      	ldr	r3, [r3, #8]
 8019d9a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	68db      	ldr	r3, [r3, #12]
 8019da0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8019da2:	683b      	ldr	r3, [r7, #0]
 8019da4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	695b      	ldr	r3, [r3, #20]
 8019daa:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	699b      	ldr	r3, [r3, #24]
 8019db0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	681d      	ldr	r5, [r3, #0]
 8019db6:	466c      	mov	r4, sp
 8019db8:	f107 0318 	add.w	r3, r7, #24
 8019dbc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019dc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019dc4:	f107 030c 	add.w	r3, r7, #12
 8019dc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019dca:	4628      	mov	r0, r5
 8019dcc:	f002 fdf0 	bl	801c9b0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	2201      	movs	r2, #1
 8019dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8019dd8:	2300      	movs	r3, #0
}
 8019dda:	4618      	mov	r0, r3
 8019ddc:	3728      	adds	r7, #40	; 0x28
 8019dde:	46bd      	mov	sp, r7
 8019de0:	bdb0      	pop	{r4, r5, r7, pc}
 8019de2:	bf00      	nop
 8019de4:	004005ff 	.word	0x004005ff

08019de8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8019de8:	b580      	push	{r7, lr}
 8019dea:	b086      	sub	sp, #24
 8019dec:	af00      	add	r7, sp, #0
 8019dee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8019df0:	2300      	movs	r3, #0
 8019df2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8019df4:	f107 030c 	add.w	r3, r7, #12
 8019df8:	4619      	mov	r1, r3
 8019dfa:	6878      	ldr	r0, [r7, #4]
 8019dfc:	f000 fa7e 	bl	801a2fc <SD_SendStatus>
 8019e00:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8019e02:	697b      	ldr	r3, [r7, #20]
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d005      	beq.n	8019e14 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019e0c:	697b      	ldr	r3, [r7, #20]
 8019e0e:	431a      	orrs	r2, r3
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	0a5b      	lsrs	r3, r3, #9
 8019e18:	f003 030f 	and.w	r3, r3, #15
 8019e1c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8019e1e:	693b      	ldr	r3, [r7, #16]
}
 8019e20:	4618      	mov	r0, r3
 8019e22:	3718      	adds	r7, #24
 8019e24:	46bd      	mov	sp, r7
 8019e26:	bd80      	pop	{r7, pc}

08019e28 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8019e28:	b480      	push	{r7}
 8019e2a:	b085      	sub	sp, #20
 8019e2c:	af00      	add	r7, sp, #0
 8019e2e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e34:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8019e36:	68fb      	ldr	r3, [r7, #12]
 8019e38:	681b      	ldr	r3, [r3, #0]
 8019e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8019e3c:	68fb      	ldr	r3, [r7, #12]
 8019e3e:	681b      	ldr	r3, [r3, #0]
 8019e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019e44:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8019e46:	bf00      	nop
 8019e48:	3714      	adds	r7, #20
 8019e4a:	46bd      	mov	sp, r7
 8019e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e50:	4770      	bx	lr

08019e52 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8019e52:	b580      	push	{r7, lr}
 8019e54:	b084      	sub	sp, #16
 8019e56:	af00      	add	r7, sp, #0
 8019e58:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e5e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8019e60:	68fb      	ldr	r3, [r7, #12]
 8019e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019e64:	2b82      	cmp	r3, #130	; 0x82
 8019e66:	d111      	bne.n	8019e8c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	4618      	mov	r0, r3
 8019e6e:	f002 ff25 	bl	801ccbc <SDMMC_CmdStopTransfer>
 8019e72:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8019e74:	68bb      	ldr	r3, [r7, #8]
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	d008      	beq.n	8019e8c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019e7e:	68bb      	ldr	r3, [r7, #8]
 8019e80:	431a      	orrs	r2, r3
 8019e82:	68fb      	ldr	r3, [r7, #12]
 8019e84:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8019e86:	68f8      	ldr	r0, [r7, #12]
 8019e88:	f7ff fd58 	bl	801993c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e92:	68fb      	ldr	r3, [r7, #12]
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	f022 0208 	bic.w	r2, r2, #8
 8019e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	f240 523a 	movw	r2, #1338	; 0x53a
 8019ea4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	2201      	movs	r2, #1
 8019eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	2200      	movs	r2, #0
 8019eb2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8019eb4:	68f8      	ldr	r0, [r7, #12]
 8019eb6:	f003 fb85 	bl	801d5c4 <HAL_SD_RxCpltCallback>
#endif
}
 8019eba:	bf00      	nop
 8019ebc:	3710      	adds	r7, #16
 8019ebe:	46bd      	mov	sp, r7
 8019ec0:	bd80      	pop	{r7, pc}
	...

08019ec4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8019ec4:	b580      	push	{r7, lr}
 8019ec6:	b086      	sub	sp, #24
 8019ec8:	af00      	add	r7, sp, #0
 8019eca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ed0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8019ed2:	6878      	ldr	r0, [r7, #4]
 8019ed4:	f7fb fb3e 	bl	8015554 <HAL_DMA_GetError>
 8019ed8:	4603      	mov	r3, r0
 8019eda:	2b02      	cmp	r3, #2
 8019edc:	d03e      	beq.n	8019f5c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8019ede:	697b      	ldr	r3, [r7, #20]
 8019ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019ee4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8019ee6:	697b      	ldr	r3, [r7, #20]
 8019ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019eec:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8019eee:	693b      	ldr	r3, [r7, #16]
 8019ef0:	2b01      	cmp	r3, #1
 8019ef2:	d002      	beq.n	8019efa <SD_DMAError+0x36>
 8019ef4:	68fb      	ldr	r3, [r7, #12]
 8019ef6:	2b01      	cmp	r3, #1
 8019ef8:	d12d      	bne.n	8019f56 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8019efa:	697b      	ldr	r3, [r7, #20]
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	4a19      	ldr	r2, [pc, #100]	; (8019f64 <SD_DMAError+0xa0>)
 8019f00:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8019f02:	697b      	ldr	r3, [r7, #20]
 8019f04:	681b      	ldr	r3, [r3, #0]
 8019f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8019f08:	697b      	ldr	r3, [r7, #20]
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8019f10:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8019f12:	697b      	ldr	r3, [r7, #20]
 8019f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8019f1a:	697b      	ldr	r3, [r7, #20]
 8019f1c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8019f1e:	6978      	ldr	r0, [r7, #20]
 8019f20:	f7ff ff62 	bl	8019de8 <HAL_SD_GetCardState>
 8019f24:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8019f26:	68bb      	ldr	r3, [r7, #8]
 8019f28:	2b06      	cmp	r3, #6
 8019f2a:	d002      	beq.n	8019f32 <SD_DMAError+0x6e>
 8019f2c:	68bb      	ldr	r3, [r7, #8]
 8019f2e:	2b05      	cmp	r3, #5
 8019f30:	d10a      	bne.n	8019f48 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8019f32:	697b      	ldr	r3, [r7, #20]
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	4618      	mov	r0, r3
 8019f38:	f002 fec0 	bl	801ccbc <SDMMC_CmdStopTransfer>
 8019f3c:	4602      	mov	r2, r0
 8019f3e:	697b      	ldr	r3, [r7, #20]
 8019f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f42:	431a      	orrs	r2, r3
 8019f44:	697b      	ldr	r3, [r7, #20]
 8019f46:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8019f48:	697b      	ldr	r3, [r7, #20]
 8019f4a:	2201      	movs	r2, #1
 8019f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8019f50:	697b      	ldr	r3, [r7, #20]
 8019f52:	2200      	movs	r2, #0
 8019f54:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8019f56:	6978      	ldr	r0, [r7, #20]
 8019f58:	f7ff fcf0 	bl	801993c <HAL_SD_ErrorCallback>
#endif
  }
}
 8019f5c:	bf00      	nop
 8019f5e:	3718      	adds	r7, #24
 8019f60:	46bd      	mov	sp, r7
 8019f62:	bd80      	pop	{r7, pc}
 8019f64:	004005ff 	.word	0x004005ff

08019f68 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8019f68:	b580      	push	{r7, lr}
 8019f6a:	b084      	sub	sp, #16
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f74:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8019f76:	68fb      	ldr	r3, [r7, #12]
 8019f78:	681b      	ldr	r3, [r3, #0]
 8019f7a:	f240 523a 	movw	r2, #1338	; 0x53a
 8019f7e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8019f80:	68f8      	ldr	r0, [r7, #12]
 8019f82:	f7ff ff31 	bl	8019de8 <HAL_SD_GetCardState>
 8019f86:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8019f88:	68fb      	ldr	r3, [r7, #12]
 8019f8a:	2201      	movs	r2, #1
 8019f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8019f90:	68fb      	ldr	r3, [r7, #12]
 8019f92:	2200      	movs	r2, #0
 8019f94:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8019f96:	68bb      	ldr	r3, [r7, #8]
 8019f98:	2b06      	cmp	r3, #6
 8019f9a:	d002      	beq.n	8019fa2 <SD_DMATxAbort+0x3a>
 8019f9c:	68bb      	ldr	r3, [r7, #8]
 8019f9e:	2b05      	cmp	r3, #5
 8019fa0:	d10a      	bne.n	8019fb8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8019fa2:	68fb      	ldr	r3, [r7, #12]
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	f002 fe88 	bl	801ccbc <SDMMC_CmdStopTransfer>
 8019fac:	4602      	mov	r2, r0
 8019fae:	68fb      	ldr	r3, [r7, #12]
 8019fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019fb2:	431a      	orrs	r2, r3
 8019fb4:	68fb      	ldr	r3, [r7, #12]
 8019fb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d103      	bne.n	8019fc8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8019fc0:	68f8      	ldr	r0, [r7, #12]
 8019fc2:	f003 faeb 	bl	801d59c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8019fc6:	e002      	b.n	8019fce <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8019fc8:	68f8      	ldr	r0, [r7, #12]
 8019fca:	f7ff fcb7 	bl	801993c <HAL_SD_ErrorCallback>
}
 8019fce:	bf00      	nop
 8019fd0:	3710      	adds	r7, #16
 8019fd2:	46bd      	mov	sp, r7
 8019fd4:	bd80      	pop	{r7, pc}

08019fd6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8019fd6:	b580      	push	{r7, lr}
 8019fd8:	b084      	sub	sp, #16
 8019fda:	af00      	add	r7, sp, #0
 8019fdc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019fe2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	f240 523a 	movw	r2, #1338	; 0x53a
 8019fec:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8019fee:	68f8      	ldr	r0, [r7, #12]
 8019ff0:	f7ff fefa 	bl	8019de8 <HAL_SD_GetCardState>
 8019ff4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8019ff6:	68fb      	ldr	r3, [r7, #12]
 8019ff8:	2201      	movs	r2, #1
 8019ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8019ffe:	68fb      	ldr	r3, [r7, #12]
 801a000:	2200      	movs	r2, #0
 801a002:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 801a004:	68bb      	ldr	r3, [r7, #8]
 801a006:	2b06      	cmp	r3, #6
 801a008:	d002      	beq.n	801a010 <SD_DMARxAbort+0x3a>
 801a00a:	68bb      	ldr	r3, [r7, #8]
 801a00c:	2b05      	cmp	r3, #5
 801a00e:	d10a      	bne.n	801a026 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 801a010:	68fb      	ldr	r3, [r7, #12]
 801a012:	681b      	ldr	r3, [r3, #0]
 801a014:	4618      	mov	r0, r3
 801a016:	f002 fe51 	bl	801ccbc <SDMMC_CmdStopTransfer>
 801a01a:	4602      	mov	r2, r0
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a020:	431a      	orrs	r2, r3
 801a022:	68fb      	ldr	r3, [r7, #12]
 801a024:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 801a026:	68fb      	ldr	r3, [r7, #12]
 801a028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d103      	bne.n	801a036 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 801a02e:	68f8      	ldr	r0, [r7, #12]
 801a030:	f003 fab4 	bl	801d59c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 801a034:	e002      	b.n	801a03c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 801a036:	68f8      	ldr	r0, [r7, #12]
 801a038:	f7ff fc80 	bl	801993c <HAL_SD_ErrorCallback>
}
 801a03c:	bf00      	nop
 801a03e:	3710      	adds	r7, #16
 801a040:	46bd      	mov	sp, r7
 801a042:	bd80      	pop	{r7, pc}

0801a044 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 801a044:	b5b0      	push	{r4, r5, r7, lr}
 801a046:	b094      	sub	sp, #80	; 0x50
 801a048:	af04      	add	r7, sp, #16
 801a04a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 801a04c:	2301      	movs	r3, #1
 801a04e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	4618      	mov	r0, r3
 801a056:	f002 fd03 	bl	801ca60 <SDIO_GetPowerState>
 801a05a:	4603      	mov	r3, r0
 801a05c:	2b00      	cmp	r3, #0
 801a05e:	d102      	bne.n	801a066 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801a060:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801a064:	e0b7      	b.n	801a1d6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a06a:	2b03      	cmp	r3, #3
 801a06c:	d02f      	beq.n	801a0ce <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	681b      	ldr	r3, [r3, #0]
 801a072:	4618      	mov	r0, r3
 801a074:	f002 ff2c 	bl	801ced0 <SDMMC_CmdSendCID>
 801a078:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801a07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d001      	beq.n	801a084 <SD_InitCard+0x40>
    {
      return errorstate;
 801a080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a082:	e0a8      	b.n	801a1d6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	681b      	ldr	r3, [r3, #0]
 801a088:	2100      	movs	r1, #0
 801a08a:	4618      	mov	r0, r3
 801a08c:	f002 fd2d 	bl	801caea <SDIO_GetResponse>
 801a090:	4602      	mov	r2, r0
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	2104      	movs	r1, #4
 801a09c:	4618      	mov	r0, r3
 801a09e:	f002 fd24 	bl	801caea <SDIO_GetResponse>
 801a0a2:	4602      	mov	r2, r0
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	681b      	ldr	r3, [r3, #0]
 801a0ac:	2108      	movs	r1, #8
 801a0ae:	4618      	mov	r0, r3
 801a0b0:	f002 fd1b 	bl	801caea <SDIO_GetResponse>
 801a0b4:	4602      	mov	r2, r0
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	681b      	ldr	r3, [r3, #0]
 801a0be:	210c      	movs	r1, #12
 801a0c0:	4618      	mov	r0, r3
 801a0c2:	f002 fd12 	bl	801caea <SDIO_GetResponse>
 801a0c6:	4602      	mov	r2, r0
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a0d2:	2b03      	cmp	r3, #3
 801a0d4:	d00d      	beq.n	801a0f2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	f107 020e 	add.w	r2, r7, #14
 801a0de:	4611      	mov	r1, r2
 801a0e0:	4618      	mov	r0, r3
 801a0e2:	f002 ff32 	bl	801cf4a <SDMMC_CmdSetRelAdd>
 801a0e6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801a0e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d001      	beq.n	801a0f2 <SD_InitCard+0xae>
    {
      return errorstate;
 801a0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a0f0:	e071      	b.n	801a1d6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a0f6:	2b03      	cmp	r3, #3
 801a0f8:	d036      	beq.n	801a168 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801a0fa:	89fb      	ldrh	r3, [r7, #14]
 801a0fc:	461a      	mov	r2, r3
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	681a      	ldr	r2, [r3, #0]
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a10a:	041b      	lsls	r3, r3, #16
 801a10c:	4619      	mov	r1, r3
 801a10e:	4610      	mov	r0, r2
 801a110:	f002 fefc 	bl	801cf0c <SDMMC_CmdSendCSD>
 801a114:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801a116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d001      	beq.n	801a120 <SD_InitCard+0xdc>
    {
      return errorstate;
 801a11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a11e:	e05a      	b.n	801a1d6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	681b      	ldr	r3, [r3, #0]
 801a124:	2100      	movs	r1, #0
 801a126:	4618      	mov	r0, r3
 801a128:	f002 fcdf 	bl	801caea <SDIO_GetResponse>
 801a12c:	4602      	mov	r2, r0
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	2104      	movs	r1, #4
 801a138:	4618      	mov	r0, r3
 801a13a:	f002 fcd6 	bl	801caea <SDIO_GetResponse>
 801a13e:	4602      	mov	r2, r0
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	2108      	movs	r1, #8
 801a14a:	4618      	mov	r0, r3
 801a14c:	f002 fccd 	bl	801caea <SDIO_GetResponse>
 801a150:	4602      	mov	r2, r0
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	681b      	ldr	r3, [r3, #0]
 801a15a:	210c      	movs	r1, #12
 801a15c:	4618      	mov	r0, r3
 801a15e:	f002 fcc4 	bl	801caea <SDIO_GetResponse>
 801a162:	4602      	mov	r2, r0
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	2104      	movs	r1, #4
 801a16e:	4618      	mov	r0, r3
 801a170:	f002 fcbb 	bl	801caea <SDIO_GetResponse>
 801a174:	4603      	mov	r3, r0
 801a176:	0d1a      	lsrs	r2, r3, #20
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 801a17c:	f107 0310 	add.w	r3, r7, #16
 801a180:	4619      	mov	r1, r3
 801a182:	6878      	ldr	r0, [r7, #4]
 801a184:	f7ff fbe4 	bl	8019950 <HAL_SD_GetCardCSD>
 801a188:	4603      	mov	r3, r0
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d002      	beq.n	801a194 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801a18e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801a192:	e020      	b.n	801a1d6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	6819      	ldr	r1, [r3, #0]
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a19c:	041b      	lsls	r3, r3, #16
 801a19e:	f04f 0400 	mov.w	r4, #0
 801a1a2:	461a      	mov	r2, r3
 801a1a4:	4623      	mov	r3, r4
 801a1a6:	4608      	mov	r0, r1
 801a1a8:	f002 fdaa 	bl	801cd00 <SDMMC_CmdSelDesel>
 801a1ac:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 801a1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d001      	beq.n	801a1b8 <SD_InitCard+0x174>
  {
    return errorstate;
 801a1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a1b6:	e00e      	b.n	801a1d6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	681d      	ldr	r5, [r3, #0]
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	466c      	mov	r4, sp
 801a1c0:	f103 0210 	add.w	r2, r3, #16
 801a1c4:	ca07      	ldmia	r2, {r0, r1, r2}
 801a1c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801a1ca:	3304      	adds	r3, #4
 801a1cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a1ce:	4628      	mov	r0, r5
 801a1d0:	f002 fbee 	bl	801c9b0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 801a1d4:	2300      	movs	r3, #0
}
 801a1d6:	4618      	mov	r0, r3
 801a1d8:	3740      	adds	r7, #64	; 0x40
 801a1da:	46bd      	mov	sp, r7
 801a1dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801a1e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 801a1e0:	b580      	push	{r7, lr}
 801a1e2:	b086      	sub	sp, #24
 801a1e4:	af00      	add	r7, sp, #0
 801a1e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801a1e8:	2300      	movs	r3, #0
 801a1ea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 801a1ec:	2300      	movs	r3, #0
 801a1ee:	617b      	str	r3, [r7, #20]
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	681b      	ldr	r3, [r3, #0]
 801a1f8:	4618      	mov	r0, r3
 801a1fa:	f002 fda4 	bl	801cd46 <SDMMC_CmdGoIdleState>
 801a1fe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801a200:	68fb      	ldr	r3, [r7, #12]
 801a202:	2b00      	cmp	r3, #0
 801a204:	d001      	beq.n	801a20a <SD_PowerON+0x2a>
  {
    return errorstate;
 801a206:	68fb      	ldr	r3, [r7, #12]
 801a208:	e072      	b.n	801a2f0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	4618      	mov	r0, r3
 801a210:	f002 fdb7 	bl	801cd82 <SDMMC_CmdOperCond>
 801a214:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	2b00      	cmp	r3, #0
 801a21a:	d00d      	beq.n	801a238 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	2200      	movs	r2, #0
 801a220:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	4618      	mov	r0, r3
 801a228:	f002 fd8d 	bl	801cd46 <SDMMC_CmdGoIdleState>
 801a22c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801a22e:	68fb      	ldr	r3, [r7, #12]
 801a230:	2b00      	cmp	r3, #0
 801a232:	d004      	beq.n	801a23e <SD_PowerON+0x5e>
    {
      return errorstate;
 801a234:	68fb      	ldr	r3, [r7, #12]
 801a236:	e05b      	b.n	801a2f0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	2201      	movs	r2, #1
 801a23c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a242:	2b01      	cmp	r3, #1
 801a244:	d137      	bne.n	801a2b6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	2100      	movs	r1, #0
 801a24c:	4618      	mov	r0, r3
 801a24e:	f002 fdb7 	bl	801cdc0 <SDMMC_CmdAppCommand>
 801a252:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801a254:	68fb      	ldr	r3, [r7, #12]
 801a256:	2b00      	cmp	r3, #0
 801a258:	d02d      	beq.n	801a2b6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801a25a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801a25e:	e047      	b.n	801a2f0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	2100      	movs	r1, #0
 801a266:	4618      	mov	r0, r3
 801a268:	f002 fdaa 	bl	801cdc0 <SDMMC_CmdAppCommand>
 801a26c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	2b00      	cmp	r3, #0
 801a272:	d001      	beq.n	801a278 <SD_PowerON+0x98>
    {
      return errorstate;
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	e03b      	b.n	801a2f0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	491e      	ldr	r1, [pc, #120]	; (801a2f8 <SD_PowerON+0x118>)
 801a27e:	4618      	mov	r0, r3
 801a280:	f002 fdc0 	bl	801ce04 <SDMMC_CmdAppOperCommand>
 801a284:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801a286:	68fb      	ldr	r3, [r7, #12]
 801a288:	2b00      	cmp	r3, #0
 801a28a:	d002      	beq.n	801a292 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801a28c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801a290:	e02e      	b.n	801a2f0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	2100      	movs	r1, #0
 801a298:	4618      	mov	r0, r3
 801a29a:	f002 fc26 	bl	801caea <SDIO_GetResponse>
 801a29e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 801a2a0:	697b      	ldr	r3, [r7, #20]
 801a2a2:	0fdb      	lsrs	r3, r3, #31
 801a2a4:	2b01      	cmp	r3, #1
 801a2a6:	d101      	bne.n	801a2ac <SD_PowerON+0xcc>
 801a2a8:	2301      	movs	r3, #1
 801a2aa:	e000      	b.n	801a2ae <SD_PowerON+0xce>
 801a2ac:	2300      	movs	r3, #0
 801a2ae:	613b      	str	r3, [r7, #16]

    count++;
 801a2b0:	68bb      	ldr	r3, [r7, #8]
 801a2b2:	3301      	adds	r3, #1
 801a2b4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 801a2b6:	68bb      	ldr	r3, [r7, #8]
 801a2b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a2bc:	4293      	cmp	r3, r2
 801a2be:	d802      	bhi.n	801a2c6 <SD_PowerON+0xe6>
 801a2c0:	693b      	ldr	r3, [r7, #16]
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d0cc      	beq.n	801a260 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 801a2c6:	68bb      	ldr	r3, [r7, #8]
 801a2c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a2cc:	4293      	cmp	r3, r2
 801a2ce:	d902      	bls.n	801a2d6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 801a2d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801a2d4:	e00c      	b.n	801a2f0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 801a2d6:	697b      	ldr	r3, [r7, #20]
 801a2d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801a2dc:	2b00      	cmp	r3, #0
 801a2de:	d003      	beq.n	801a2e8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	2201      	movs	r2, #1
 801a2e4:	645a      	str	r2, [r3, #68]	; 0x44
 801a2e6:	e002      	b.n	801a2ee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	2200      	movs	r2, #0
 801a2ec:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 801a2ee:	2300      	movs	r3, #0
}
 801a2f0:	4618      	mov	r0, r3
 801a2f2:	3718      	adds	r7, #24
 801a2f4:	46bd      	mov	sp, r7
 801a2f6:	bd80      	pop	{r7, pc}
 801a2f8:	c1100000 	.word	0xc1100000

0801a2fc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 801a2fc:	b580      	push	{r7, lr}
 801a2fe:	b084      	sub	sp, #16
 801a300:	af00      	add	r7, sp, #0
 801a302:	6078      	str	r0, [r7, #4]
 801a304:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 801a306:	683b      	ldr	r3, [r7, #0]
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d102      	bne.n	801a312 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 801a30c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801a310:	e018      	b.n	801a344 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	681a      	ldr	r2, [r3, #0]
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a31a:	041b      	lsls	r3, r3, #16
 801a31c:	4619      	mov	r1, r3
 801a31e:	4610      	mov	r0, r2
 801a320:	f002 fe34 	bl	801cf8c <SDMMC_CmdSendStatus>
 801a324:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801a326:	68fb      	ldr	r3, [r7, #12]
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d001      	beq.n	801a330 <SD_SendStatus+0x34>
  {
    return errorstate;
 801a32c:	68fb      	ldr	r3, [r7, #12]
 801a32e:	e009      	b.n	801a344 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	2100      	movs	r1, #0
 801a336:	4618      	mov	r0, r3
 801a338:	f002 fbd7 	bl	801caea <SDIO_GetResponse>
 801a33c:	4602      	mov	r2, r0
 801a33e:	683b      	ldr	r3, [r7, #0]
 801a340:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 801a342:	2300      	movs	r3, #0
}
 801a344:	4618      	mov	r0, r3
 801a346:	3710      	adds	r7, #16
 801a348:	46bd      	mov	sp, r7
 801a34a:	bd80      	pop	{r7, pc}

0801a34c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 801a34c:	b580      	push	{r7, lr}
 801a34e:	b086      	sub	sp, #24
 801a350:	af00      	add	r7, sp, #0
 801a352:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 801a354:	2300      	movs	r3, #0
 801a356:	60fb      	str	r3, [r7, #12]
 801a358:	2300      	movs	r3, #0
 801a35a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	2100      	movs	r1, #0
 801a362:	4618      	mov	r0, r3
 801a364:	f002 fbc1 	bl	801caea <SDIO_GetResponse>
 801a368:	4603      	mov	r3, r0
 801a36a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a36e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801a372:	d102      	bne.n	801a37a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801a374:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a378:	e02f      	b.n	801a3da <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801a37a:	f107 030c 	add.w	r3, r7, #12
 801a37e:	4619      	mov	r1, r3
 801a380:	6878      	ldr	r0, [r7, #4]
 801a382:	f000 f879 	bl	801a478 <SD_FindSCR>
 801a386:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801a388:	697b      	ldr	r3, [r7, #20]
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	d001      	beq.n	801a392 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 801a38e:	697b      	ldr	r3, [r7, #20]
 801a390:	e023      	b.n	801a3da <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801a392:	693b      	ldr	r3, [r7, #16]
 801a394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801a398:	2b00      	cmp	r3, #0
 801a39a:	d01c      	beq.n	801a3d6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	681a      	ldr	r2, [r3, #0]
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a3a4:	041b      	lsls	r3, r3, #16
 801a3a6:	4619      	mov	r1, r3
 801a3a8:	4610      	mov	r0, r2
 801a3aa:	f002 fd09 	bl	801cdc0 <SDMMC_CmdAppCommand>
 801a3ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801a3b0:	697b      	ldr	r3, [r7, #20]
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d001      	beq.n	801a3ba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 801a3b6:	697b      	ldr	r3, [r7, #20]
 801a3b8:	e00f      	b.n	801a3da <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	2102      	movs	r1, #2
 801a3c0:	4618      	mov	r0, r3
 801a3c2:	f002 fd42 	bl	801ce4a <SDMMC_CmdBusWidth>
 801a3c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801a3c8:	697b      	ldr	r3, [r7, #20]
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	d001      	beq.n	801a3d2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 801a3ce:	697b      	ldr	r3, [r7, #20]
 801a3d0:	e003      	b.n	801a3da <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801a3d2:	2300      	movs	r3, #0
 801a3d4:	e001      	b.n	801a3da <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801a3d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 801a3da:	4618      	mov	r0, r3
 801a3dc:	3718      	adds	r7, #24
 801a3de:	46bd      	mov	sp, r7
 801a3e0:	bd80      	pop	{r7, pc}

0801a3e2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801a3e2:	b580      	push	{r7, lr}
 801a3e4:	b086      	sub	sp, #24
 801a3e6:	af00      	add	r7, sp, #0
 801a3e8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 801a3ea:	2300      	movs	r3, #0
 801a3ec:	60fb      	str	r3, [r7, #12]
 801a3ee:	2300      	movs	r3, #0
 801a3f0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	2100      	movs	r1, #0
 801a3f8:	4618      	mov	r0, r3
 801a3fa:	f002 fb76 	bl	801caea <SDIO_GetResponse>
 801a3fe:	4603      	mov	r3, r0
 801a400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801a408:	d102      	bne.n	801a410 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801a40a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a40e:	e02f      	b.n	801a470 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801a410:	f107 030c 	add.w	r3, r7, #12
 801a414:	4619      	mov	r1, r3
 801a416:	6878      	ldr	r0, [r7, #4]
 801a418:	f000 f82e 	bl	801a478 <SD_FindSCR>
 801a41c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801a41e:	697b      	ldr	r3, [r7, #20]
 801a420:	2b00      	cmp	r3, #0
 801a422:	d001      	beq.n	801a428 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 801a424:	697b      	ldr	r3, [r7, #20]
 801a426:	e023      	b.n	801a470 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801a428:	693b      	ldr	r3, [r7, #16]
 801a42a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d01c      	beq.n	801a46c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	681a      	ldr	r2, [r3, #0]
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a43a:	041b      	lsls	r3, r3, #16
 801a43c:	4619      	mov	r1, r3
 801a43e:	4610      	mov	r0, r2
 801a440:	f002 fcbe 	bl	801cdc0 <SDMMC_CmdAppCommand>
 801a444:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801a446:	697b      	ldr	r3, [r7, #20]
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d001      	beq.n	801a450 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 801a44c:	697b      	ldr	r3, [r7, #20]
 801a44e:	e00f      	b.n	801a470 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	681b      	ldr	r3, [r3, #0]
 801a454:	2100      	movs	r1, #0
 801a456:	4618      	mov	r0, r3
 801a458:	f002 fcf7 	bl	801ce4a <SDMMC_CmdBusWidth>
 801a45c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801a45e:	697b      	ldr	r3, [r7, #20]
 801a460:	2b00      	cmp	r3, #0
 801a462:	d001      	beq.n	801a468 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 801a464:	697b      	ldr	r3, [r7, #20]
 801a466:	e003      	b.n	801a470 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801a468:	2300      	movs	r3, #0
 801a46a:	e001      	b.n	801a470 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801a46c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 801a470:	4618      	mov	r0, r3
 801a472:	3718      	adds	r7, #24
 801a474:	46bd      	mov	sp, r7
 801a476:	bd80      	pop	{r7, pc}

0801a478 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 801a478:	b590      	push	{r4, r7, lr}
 801a47a:	b08f      	sub	sp, #60	; 0x3c
 801a47c:	af00      	add	r7, sp, #0
 801a47e:	6078      	str	r0, [r7, #4]
 801a480:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801a482:	f7fa fc97 	bl	8014db4 <HAL_GetTick>
 801a486:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 801a488:	2300      	movs	r3, #0
 801a48a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 801a48c:	2300      	movs	r3, #0
 801a48e:	60bb      	str	r3, [r7, #8]
 801a490:	2300      	movs	r3, #0
 801a492:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 801a494:	683b      	ldr	r3, [r7, #0]
 801a496:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	2108      	movs	r1, #8
 801a49e:	4618      	mov	r0, r3
 801a4a0:	f002 fb62 	bl	801cb68 <SDMMC_CmdBlockLength>
 801a4a4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801a4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d001      	beq.n	801a4b0 <SD_FindSCR+0x38>
  {
    return errorstate;
 801a4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4ae:	e0a9      	b.n	801a604 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	681a      	ldr	r2, [r3, #0]
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a4b8:	041b      	lsls	r3, r3, #16
 801a4ba:	4619      	mov	r1, r3
 801a4bc:	4610      	mov	r0, r2
 801a4be:	f002 fc7f 	bl	801cdc0 <SDMMC_CmdAppCommand>
 801a4c2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801a4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d001      	beq.n	801a4ce <SD_FindSCR+0x56>
  {
    return errorstate;
 801a4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4cc:	e09a      	b.n	801a604 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801a4ce:	f04f 33ff 	mov.w	r3, #4294967295
 801a4d2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 801a4d4:	2308      	movs	r3, #8
 801a4d6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 801a4d8:	2330      	movs	r3, #48	; 0x30
 801a4da:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 801a4dc:	2302      	movs	r3, #2
 801a4de:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 801a4e4:	2301      	movs	r3, #1
 801a4e6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	f107 0210 	add.w	r2, r7, #16
 801a4f0:	4611      	mov	r1, r2
 801a4f2:	4618      	mov	r0, r3
 801a4f4:	f002 fb0c 	bl	801cb10 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	4618      	mov	r0, r3
 801a4fe:	f002 fcc6 	bl	801ce8e <SDMMC_CmdSendSCR>
 801a502:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801a504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a506:	2b00      	cmp	r3, #0
 801a508:	d022      	beq.n	801a550 <SD_FindSCR+0xd8>
  {
    return errorstate;
 801a50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a50c:	e07a      	b.n	801a604 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d00e      	beq.n	801a53a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	6819      	ldr	r1, [r3, #0]
 801a520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a522:	009b      	lsls	r3, r3, #2
 801a524:	f107 0208 	add.w	r2, r7, #8
 801a528:	18d4      	adds	r4, r2, r3
 801a52a:	4608      	mov	r0, r1
 801a52c:	f002 fa6b 	bl	801ca06 <SDIO_ReadFIFO>
 801a530:	4603      	mov	r3, r0
 801a532:	6023      	str	r3, [r4, #0]
      index++;
 801a534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a536:	3301      	adds	r3, #1
 801a538:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801a53a:	f7fa fc3b 	bl	8014db4 <HAL_GetTick>
 801a53e:	4602      	mov	r2, r0
 801a540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a542:	1ad3      	subs	r3, r2, r3
 801a544:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a548:	d102      	bne.n	801a550 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801a54a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801a54e:	e059      	b.n	801a604 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	681b      	ldr	r3, [r3, #0]
 801a554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a556:	f240 432a 	movw	r3, #1066	; 0x42a
 801a55a:	4013      	ands	r3, r2
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	d0d6      	beq.n	801a50e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a566:	f003 0308 	and.w	r3, r3, #8
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d005      	beq.n	801a57a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	2208      	movs	r2, #8
 801a574:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 801a576:	2308      	movs	r3, #8
 801a578:	e044      	b.n	801a604 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a580:	f003 0302 	and.w	r3, r3, #2
 801a584:	2b00      	cmp	r3, #0
 801a586:	d005      	beq.n	801a594 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	2202      	movs	r2, #2
 801a58e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801a590:	2302      	movs	r3, #2
 801a592:	e037      	b.n	801a604 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	681b      	ldr	r3, [r3, #0]
 801a598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a59a:	f003 0320 	and.w	r3, r3, #32
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	d005      	beq.n	801a5ae <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	2220      	movs	r2, #32
 801a5a8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 801a5aa:	2320      	movs	r3, #32
 801a5ac:	e02a      	b.n	801a604 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	f240 523a 	movw	r2, #1338	; 0x53a
 801a5b6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801a5b8:	68fb      	ldr	r3, [r7, #12]
 801a5ba:	061a      	lsls	r2, r3, #24
 801a5bc:	68fb      	ldr	r3, [r7, #12]
 801a5be:	021b      	lsls	r3, r3, #8
 801a5c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801a5c4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801a5c6:	68fb      	ldr	r3, [r7, #12]
 801a5c8:	0a1b      	lsrs	r3, r3, #8
 801a5ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801a5ce:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801a5d0:	68fb      	ldr	r3, [r7, #12]
 801a5d2:	0e1b      	lsrs	r3, r3, #24
 801a5d4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801a5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5d8:	601a      	str	r2, [r3, #0]
    scr++;
 801a5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5dc:	3304      	adds	r3, #4
 801a5de:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801a5e0:	68bb      	ldr	r3, [r7, #8]
 801a5e2:	061a      	lsls	r2, r3, #24
 801a5e4:	68bb      	ldr	r3, [r7, #8]
 801a5e6:	021b      	lsls	r3, r3, #8
 801a5e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801a5ec:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801a5ee:	68bb      	ldr	r3, [r7, #8]
 801a5f0:	0a1b      	lsrs	r3, r3, #8
 801a5f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801a5f6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801a5f8:	68bb      	ldr	r3, [r7, #8]
 801a5fa:	0e1b      	lsrs	r3, r3, #24
 801a5fc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801a5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a600:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 801a602:	2300      	movs	r3, #0
}
 801a604:	4618      	mov	r0, r3
 801a606:	373c      	adds	r7, #60	; 0x3c
 801a608:	46bd      	mov	sp, r7
 801a60a:	bd90      	pop	{r4, r7, pc}

0801a60c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 801a60c:	b580      	push	{r7, lr}
 801a60e:	b086      	sub	sp, #24
 801a610:	af00      	add	r7, sp, #0
 801a612:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a618:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a61e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 801a620:	693b      	ldr	r3, [r7, #16]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d03f      	beq.n	801a6a6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 801a626:	2300      	movs	r3, #0
 801a628:	617b      	str	r3, [r7, #20]
 801a62a:	e033      	b.n	801a694 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	4618      	mov	r0, r3
 801a632:	f002 f9e8 	bl	801ca06 <SDIO_ReadFIFO>
 801a636:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 801a638:	68bb      	ldr	r3, [r7, #8]
 801a63a:	b2da      	uxtb	r2, r3
 801a63c:	68fb      	ldr	r3, [r7, #12]
 801a63e:	701a      	strb	r2, [r3, #0]
      tmp++;
 801a640:	68fb      	ldr	r3, [r7, #12]
 801a642:	3301      	adds	r3, #1
 801a644:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801a646:	693b      	ldr	r3, [r7, #16]
 801a648:	3b01      	subs	r3, #1
 801a64a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 801a64c:	68bb      	ldr	r3, [r7, #8]
 801a64e:	0a1b      	lsrs	r3, r3, #8
 801a650:	b2da      	uxtb	r2, r3
 801a652:	68fb      	ldr	r3, [r7, #12]
 801a654:	701a      	strb	r2, [r3, #0]
      tmp++;
 801a656:	68fb      	ldr	r3, [r7, #12]
 801a658:	3301      	adds	r3, #1
 801a65a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801a65c:	693b      	ldr	r3, [r7, #16]
 801a65e:	3b01      	subs	r3, #1
 801a660:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 801a662:	68bb      	ldr	r3, [r7, #8]
 801a664:	0c1b      	lsrs	r3, r3, #16
 801a666:	b2da      	uxtb	r2, r3
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801a66c:	68fb      	ldr	r3, [r7, #12]
 801a66e:	3301      	adds	r3, #1
 801a670:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801a672:	693b      	ldr	r3, [r7, #16]
 801a674:	3b01      	subs	r3, #1
 801a676:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 801a678:	68bb      	ldr	r3, [r7, #8]
 801a67a:	0e1b      	lsrs	r3, r3, #24
 801a67c:	b2da      	uxtb	r2, r3
 801a67e:	68fb      	ldr	r3, [r7, #12]
 801a680:	701a      	strb	r2, [r3, #0]
      tmp++;
 801a682:	68fb      	ldr	r3, [r7, #12]
 801a684:	3301      	adds	r3, #1
 801a686:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801a688:	693b      	ldr	r3, [r7, #16]
 801a68a:	3b01      	subs	r3, #1
 801a68c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 801a68e:	697b      	ldr	r3, [r7, #20]
 801a690:	3301      	adds	r3, #1
 801a692:	617b      	str	r3, [r7, #20]
 801a694:	697b      	ldr	r3, [r7, #20]
 801a696:	2b07      	cmp	r3, #7
 801a698:	d9c8      	bls.n	801a62c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	68fa      	ldr	r2, [r7, #12]
 801a69e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	693a      	ldr	r2, [r7, #16]
 801a6a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 801a6a6:	bf00      	nop
 801a6a8:	3718      	adds	r7, #24
 801a6aa:	46bd      	mov	sp, r7
 801a6ac:	bd80      	pop	{r7, pc}

0801a6ae <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 801a6ae:	b580      	push	{r7, lr}
 801a6b0:	b086      	sub	sp, #24
 801a6b2:	af00      	add	r7, sp, #0
 801a6b4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	6a1b      	ldr	r3, [r3, #32]
 801a6ba:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6c0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 801a6c2:	693b      	ldr	r3, [r7, #16]
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	d043      	beq.n	801a750 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 801a6c8:	2300      	movs	r3, #0
 801a6ca:	617b      	str	r3, [r7, #20]
 801a6cc:	e037      	b.n	801a73e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 801a6ce:	68fb      	ldr	r3, [r7, #12]
 801a6d0:	781b      	ldrb	r3, [r3, #0]
 801a6d2:	60bb      	str	r3, [r7, #8]
      tmp++;
 801a6d4:	68fb      	ldr	r3, [r7, #12]
 801a6d6:	3301      	adds	r3, #1
 801a6d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801a6da:	693b      	ldr	r3, [r7, #16]
 801a6dc:	3b01      	subs	r3, #1
 801a6de:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 801a6e0:	68fb      	ldr	r3, [r7, #12]
 801a6e2:	781b      	ldrb	r3, [r3, #0]
 801a6e4:	021a      	lsls	r2, r3, #8
 801a6e6:	68bb      	ldr	r3, [r7, #8]
 801a6e8:	4313      	orrs	r3, r2
 801a6ea:	60bb      	str	r3, [r7, #8]
      tmp++;
 801a6ec:	68fb      	ldr	r3, [r7, #12]
 801a6ee:	3301      	adds	r3, #1
 801a6f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801a6f2:	693b      	ldr	r3, [r7, #16]
 801a6f4:	3b01      	subs	r3, #1
 801a6f6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 801a6f8:	68fb      	ldr	r3, [r7, #12]
 801a6fa:	781b      	ldrb	r3, [r3, #0]
 801a6fc:	041a      	lsls	r2, r3, #16
 801a6fe:	68bb      	ldr	r3, [r7, #8]
 801a700:	4313      	orrs	r3, r2
 801a702:	60bb      	str	r3, [r7, #8]
      tmp++;
 801a704:	68fb      	ldr	r3, [r7, #12]
 801a706:	3301      	adds	r3, #1
 801a708:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801a70a:	693b      	ldr	r3, [r7, #16]
 801a70c:	3b01      	subs	r3, #1
 801a70e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 801a710:	68fb      	ldr	r3, [r7, #12]
 801a712:	781b      	ldrb	r3, [r3, #0]
 801a714:	061a      	lsls	r2, r3, #24
 801a716:	68bb      	ldr	r3, [r7, #8]
 801a718:	4313      	orrs	r3, r2
 801a71a:	60bb      	str	r3, [r7, #8]
      tmp++;
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	3301      	adds	r3, #1
 801a720:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801a722:	693b      	ldr	r3, [r7, #16]
 801a724:	3b01      	subs	r3, #1
 801a726:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	f107 0208 	add.w	r2, r7, #8
 801a730:	4611      	mov	r1, r2
 801a732:	4618      	mov	r0, r3
 801a734:	f002 f974 	bl	801ca20 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 801a738:	697b      	ldr	r3, [r7, #20]
 801a73a:	3301      	adds	r3, #1
 801a73c:	617b      	str	r3, [r7, #20]
 801a73e:	697b      	ldr	r3, [r7, #20]
 801a740:	2b07      	cmp	r3, #7
 801a742:	d9c4      	bls.n	801a6ce <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	68fa      	ldr	r2, [r7, #12]
 801a748:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	693a      	ldr	r2, [r7, #16]
 801a74e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 801a750:	bf00      	nop
 801a752:	3718      	adds	r7, #24
 801a754:	46bd      	mov	sp, r7
 801a756:	bd80      	pop	{r7, pc}

0801a758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801a758:	b580      	push	{r7, lr}
 801a75a:	b082      	sub	sp, #8
 801a75c:	af00      	add	r7, sp, #0
 801a75e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	2b00      	cmp	r3, #0
 801a764:	d101      	bne.n	801a76a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801a766:	2301      	movs	r3, #1
 801a768:	e01d      	b.n	801a7a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a770:	b2db      	uxtb	r3, r3
 801a772:	2b00      	cmp	r3, #0
 801a774:	d106      	bne.n	801a784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	2200      	movs	r2, #0
 801a77a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801a77e:	6878      	ldr	r0, [r7, #4]
 801a780:	f7f9 ffc6 	bl	8014710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	2202      	movs	r2, #2
 801a788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	681a      	ldr	r2, [r3, #0]
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	3304      	adds	r3, #4
 801a794:	4619      	mov	r1, r3
 801a796:	4610      	mov	r0, r2
 801a798:	f000 fc90 	bl	801b0bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	2201      	movs	r2, #1
 801a7a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a7a4:	2300      	movs	r3, #0
}
 801a7a6:	4618      	mov	r0, r3
 801a7a8:	3708      	adds	r7, #8
 801a7aa:	46bd      	mov	sp, r7
 801a7ac:	bd80      	pop	{r7, pc}

0801a7ae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801a7ae:	b480      	push	{r7}
 801a7b0:	b085      	sub	sp, #20
 801a7b2:	af00      	add	r7, sp, #0
 801a7b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	68da      	ldr	r2, [r3, #12]
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	f042 0201 	orr.w	r2, r2, #1
 801a7c4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	689b      	ldr	r3, [r3, #8]
 801a7cc:	f003 0307 	and.w	r3, r3, #7
 801a7d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a7d2:	68fb      	ldr	r3, [r7, #12]
 801a7d4:	2b06      	cmp	r3, #6
 801a7d6:	d007      	beq.n	801a7e8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	681a      	ldr	r2, [r3, #0]
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	f042 0201 	orr.w	r2, r2, #1
 801a7e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a7e8:	2300      	movs	r3, #0
}
 801a7ea:	4618      	mov	r0, r3
 801a7ec:	3714      	adds	r7, #20
 801a7ee:	46bd      	mov	sp, r7
 801a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7f4:	4770      	bx	lr

0801a7f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801a7f6:	b580      	push	{r7, lr}
 801a7f8:	b082      	sub	sp, #8
 801a7fa:	af00      	add	r7, sp, #0
 801a7fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	2b00      	cmp	r3, #0
 801a802:	d101      	bne.n	801a808 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801a804:	2301      	movs	r3, #1
 801a806:	e01d      	b.n	801a844 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a80e:	b2db      	uxtb	r3, r3
 801a810:	2b00      	cmp	r3, #0
 801a812:	d106      	bne.n	801a822 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	2200      	movs	r2, #0
 801a818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801a81c:	6878      	ldr	r0, [r7, #4]
 801a81e:	f7fa f807 	bl	8014830 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	2202      	movs	r2, #2
 801a826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	681a      	ldr	r2, [r3, #0]
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	3304      	adds	r3, #4
 801a832:	4619      	mov	r1, r3
 801a834:	4610      	mov	r0, r2
 801a836:	f000 fc41 	bl	801b0bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	2201      	movs	r2, #1
 801a83e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a842:	2300      	movs	r3, #0
}
 801a844:	4618      	mov	r0, r3
 801a846:	3708      	adds	r7, #8
 801a848:	46bd      	mov	sp, r7
 801a84a:	bd80      	pop	{r7, pc}

0801a84c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a84c:	b580      	push	{r7, lr}
 801a84e:	b084      	sub	sp, #16
 801a850:	af00      	add	r7, sp, #0
 801a852:	6078      	str	r0, [r7, #4]
 801a854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	681b      	ldr	r3, [r3, #0]
 801a85a:	2201      	movs	r2, #1
 801a85c:	6839      	ldr	r1, [r7, #0]
 801a85e:	4618      	mov	r0, r3
 801a860:	f000 fff0 	bl	801b844 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	4a10      	ldr	r2, [pc, #64]	; (801a8ac <HAL_TIM_PWM_Start+0x60>)
 801a86a:	4293      	cmp	r3, r2
 801a86c:	d107      	bne.n	801a87e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	681b      	ldr	r3, [r3, #0]
 801a878:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801a87c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	689b      	ldr	r3, [r3, #8]
 801a884:	f003 0307 	and.w	r3, r3, #7
 801a888:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a88a:	68fb      	ldr	r3, [r7, #12]
 801a88c:	2b06      	cmp	r3, #6
 801a88e:	d007      	beq.n	801a8a0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	681b      	ldr	r3, [r3, #0]
 801a894:	681a      	ldr	r2, [r3, #0]
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	f042 0201 	orr.w	r2, r2, #1
 801a89e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a8a0:	2300      	movs	r3, #0
}
 801a8a2:	4618      	mov	r0, r3
 801a8a4:	3710      	adds	r7, #16
 801a8a6:	46bd      	mov	sp, r7
 801a8a8:	bd80      	pop	{r7, pc}
 801a8aa:	bf00      	nop
 801a8ac:	40010000 	.word	0x40010000

0801a8b0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a8b0:	b580      	push	{r7, lr}
 801a8b2:	b082      	sub	sp, #8
 801a8b4:	af00      	add	r7, sp, #0
 801a8b6:	6078      	str	r0, [r7, #4]
 801a8b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	2200      	movs	r2, #0
 801a8c0:	6839      	ldr	r1, [r7, #0]
 801a8c2:	4618      	mov	r0, r3
 801a8c4:	f000 ffbe 	bl	801b844 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	4a1d      	ldr	r2, [pc, #116]	; (801a944 <HAL_TIM_PWM_Stop+0x94>)
 801a8ce:	4293      	cmp	r3, r2
 801a8d0:	d117      	bne.n	801a902 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	6a1a      	ldr	r2, [r3, #32]
 801a8d8:	f241 1311 	movw	r3, #4369	; 0x1111
 801a8dc:	4013      	ands	r3, r2
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d10f      	bne.n	801a902 <HAL_TIM_PWM_Stop+0x52>
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	6a1a      	ldr	r2, [r3, #32]
 801a8e8:	f240 4344 	movw	r3, #1092	; 0x444
 801a8ec:	4013      	ands	r3, r2
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d107      	bne.n	801a902 <HAL_TIM_PWM_Stop+0x52>
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801a900:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	6a1a      	ldr	r2, [r3, #32]
 801a908:	f241 1311 	movw	r3, #4369	; 0x1111
 801a90c:	4013      	ands	r3, r2
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d10f      	bne.n	801a932 <HAL_TIM_PWM_Stop+0x82>
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	6a1a      	ldr	r2, [r3, #32]
 801a918:	f240 4344 	movw	r3, #1092	; 0x444
 801a91c:	4013      	ands	r3, r2
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d107      	bne.n	801a932 <HAL_TIM_PWM_Stop+0x82>
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	681a      	ldr	r2, [r3, #0]
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	f022 0201 	bic.w	r2, r2, #1
 801a930:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	2201      	movs	r2, #1
 801a936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801a93a:	2300      	movs	r3, #0
}
 801a93c:	4618      	mov	r0, r3
 801a93e:	3708      	adds	r7, #8
 801a940:	46bd      	mov	sp, r7
 801a942:	bd80      	pop	{r7, pc}
 801a944:	40010000 	.word	0x40010000

0801a948 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 801a948:	b580      	push	{r7, lr}
 801a94a:	b082      	sub	sp, #8
 801a94c:	af00      	add	r7, sp, #0
 801a94e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	2b00      	cmp	r3, #0
 801a954:	d101      	bne.n	801a95a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801a956:	2301      	movs	r3, #1
 801a958:	e01d      	b.n	801a996 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a960:	b2db      	uxtb	r3, r3
 801a962:	2b00      	cmp	r3, #0
 801a964:	d106      	bne.n	801a974 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	2200      	movs	r2, #0
 801a96a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801a96e:	6878      	ldr	r0, [r7, #4]
 801a970:	f000 f815 	bl	801a99e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	2202      	movs	r2, #2
 801a978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	681a      	ldr	r2, [r3, #0]
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	3304      	adds	r3, #4
 801a984:	4619      	mov	r1, r3
 801a986:	4610      	mov	r0, r2
 801a988:	f000 fb98 	bl	801b0bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	2201      	movs	r2, #1
 801a990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a994:	2300      	movs	r3, #0
}
 801a996:	4618      	mov	r0, r3
 801a998:	3708      	adds	r7, #8
 801a99a:	46bd      	mov	sp, r7
 801a99c:	bd80      	pop	{r7, pc}

0801a99e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 801a99e:	b480      	push	{r7}
 801a9a0:	b083      	sub	sp, #12
 801a9a2:	af00      	add	r7, sp, #0
 801a9a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 801a9a6:	bf00      	nop
 801a9a8:	370c      	adds	r7, #12
 801a9aa:	46bd      	mov	sp, r7
 801a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9b0:	4770      	bx	lr

0801a9b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801a9b2:	b580      	push	{r7, lr}
 801a9b4:	b082      	sub	sp, #8
 801a9b6:	af00      	add	r7, sp, #0
 801a9b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	691b      	ldr	r3, [r3, #16]
 801a9c0:	f003 0302 	and.w	r3, r3, #2
 801a9c4:	2b02      	cmp	r3, #2
 801a9c6:	d122      	bne.n	801aa0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	68db      	ldr	r3, [r3, #12]
 801a9ce:	f003 0302 	and.w	r3, r3, #2
 801a9d2:	2b02      	cmp	r3, #2
 801a9d4:	d11b      	bne.n	801aa0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	681b      	ldr	r3, [r3, #0]
 801a9da:	f06f 0202 	mvn.w	r2, #2
 801a9de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	2201      	movs	r2, #1
 801a9e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	681b      	ldr	r3, [r3, #0]
 801a9ea:	699b      	ldr	r3, [r3, #24]
 801a9ec:	f003 0303 	and.w	r3, r3, #3
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	d003      	beq.n	801a9fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801a9f4:	6878      	ldr	r0, [r7, #4]
 801a9f6:	f7f8 fc8b 	bl	8013310 <HAL_TIM_IC_CaptureCallback>
 801a9fa:	e005      	b.n	801aa08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801a9fc:	6878      	ldr	r0, [r7, #4]
 801a9fe:	f000 fb3f 	bl	801b080 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801aa02:	6878      	ldr	r0, [r7, #4]
 801aa04:	f000 fb46 	bl	801b094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	2200      	movs	r2, #0
 801aa0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	681b      	ldr	r3, [r3, #0]
 801aa12:	691b      	ldr	r3, [r3, #16]
 801aa14:	f003 0304 	and.w	r3, r3, #4
 801aa18:	2b04      	cmp	r3, #4
 801aa1a:	d122      	bne.n	801aa62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	68db      	ldr	r3, [r3, #12]
 801aa22:	f003 0304 	and.w	r3, r3, #4
 801aa26:	2b04      	cmp	r3, #4
 801aa28:	d11b      	bne.n	801aa62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	f06f 0204 	mvn.w	r2, #4
 801aa32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	2202      	movs	r2, #2
 801aa38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	699b      	ldr	r3, [r3, #24]
 801aa40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	d003      	beq.n	801aa50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801aa48:	6878      	ldr	r0, [r7, #4]
 801aa4a:	f7f8 fc61 	bl	8013310 <HAL_TIM_IC_CaptureCallback>
 801aa4e:	e005      	b.n	801aa5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801aa50:	6878      	ldr	r0, [r7, #4]
 801aa52:	f000 fb15 	bl	801b080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801aa56:	6878      	ldr	r0, [r7, #4]
 801aa58:	f000 fb1c 	bl	801b094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	2200      	movs	r2, #0
 801aa60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	681b      	ldr	r3, [r3, #0]
 801aa66:	691b      	ldr	r3, [r3, #16]
 801aa68:	f003 0308 	and.w	r3, r3, #8
 801aa6c:	2b08      	cmp	r3, #8
 801aa6e:	d122      	bne.n	801aab6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	681b      	ldr	r3, [r3, #0]
 801aa74:	68db      	ldr	r3, [r3, #12]
 801aa76:	f003 0308 	and.w	r3, r3, #8
 801aa7a:	2b08      	cmp	r3, #8
 801aa7c:	d11b      	bne.n	801aab6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	681b      	ldr	r3, [r3, #0]
 801aa82:	f06f 0208 	mvn.w	r2, #8
 801aa86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	2204      	movs	r2, #4
 801aa8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	69db      	ldr	r3, [r3, #28]
 801aa94:	f003 0303 	and.w	r3, r3, #3
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d003      	beq.n	801aaa4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801aa9c:	6878      	ldr	r0, [r7, #4]
 801aa9e:	f7f8 fc37 	bl	8013310 <HAL_TIM_IC_CaptureCallback>
 801aaa2:	e005      	b.n	801aab0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801aaa4:	6878      	ldr	r0, [r7, #4]
 801aaa6:	f000 faeb 	bl	801b080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801aaaa:	6878      	ldr	r0, [r7, #4]
 801aaac:	f000 faf2 	bl	801b094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	2200      	movs	r2, #0
 801aab4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	691b      	ldr	r3, [r3, #16]
 801aabc:	f003 0310 	and.w	r3, r3, #16
 801aac0:	2b10      	cmp	r3, #16
 801aac2:	d122      	bne.n	801ab0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	68db      	ldr	r3, [r3, #12]
 801aaca:	f003 0310 	and.w	r3, r3, #16
 801aace:	2b10      	cmp	r3, #16
 801aad0:	d11b      	bne.n	801ab0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	f06f 0210 	mvn.w	r2, #16
 801aada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	2208      	movs	r2, #8
 801aae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	69db      	ldr	r3, [r3, #28]
 801aae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d003      	beq.n	801aaf8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801aaf0:	6878      	ldr	r0, [r7, #4]
 801aaf2:	f7f8 fc0d 	bl	8013310 <HAL_TIM_IC_CaptureCallback>
 801aaf6:	e005      	b.n	801ab04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801aaf8:	6878      	ldr	r0, [r7, #4]
 801aafa:	f000 fac1 	bl	801b080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801aafe:	6878      	ldr	r0, [r7, #4]
 801ab00:	f000 fac8 	bl	801b094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	2200      	movs	r2, #0
 801ab08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	691b      	ldr	r3, [r3, #16]
 801ab10:	f003 0301 	and.w	r3, r3, #1
 801ab14:	2b01      	cmp	r3, #1
 801ab16:	d10e      	bne.n	801ab36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	68db      	ldr	r3, [r3, #12]
 801ab1e:	f003 0301 	and.w	r3, r3, #1
 801ab22:	2b01      	cmp	r3, #1
 801ab24:	d107      	bne.n	801ab36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	681b      	ldr	r3, [r3, #0]
 801ab2a:	f06f 0201 	mvn.w	r2, #1
 801ab2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801ab30:	6878      	ldr	r0, [r7, #4]
 801ab32:	f7f9 f863 	bl	8013bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	691b      	ldr	r3, [r3, #16]
 801ab3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ab40:	2b80      	cmp	r3, #128	; 0x80
 801ab42:	d10e      	bne.n	801ab62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	681b      	ldr	r3, [r3, #0]
 801ab48:	68db      	ldr	r3, [r3, #12]
 801ab4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ab4e:	2b80      	cmp	r3, #128	; 0x80
 801ab50:	d107      	bne.n	801ab62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801ab5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801ab5c:	6878      	ldr	r0, [r7, #4]
 801ab5e:	f000 ff0f 	bl	801b980 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	681b      	ldr	r3, [r3, #0]
 801ab66:	691b      	ldr	r3, [r3, #16]
 801ab68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ab6c:	2b40      	cmp	r3, #64	; 0x40
 801ab6e:	d10e      	bne.n	801ab8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	681b      	ldr	r3, [r3, #0]
 801ab74:	68db      	ldr	r3, [r3, #12]
 801ab76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ab7a:	2b40      	cmp	r3, #64	; 0x40
 801ab7c:	d107      	bne.n	801ab8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801ab86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801ab88:	6878      	ldr	r0, [r7, #4]
 801ab8a:	f000 fa8d 	bl	801b0a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	691b      	ldr	r3, [r3, #16]
 801ab94:	f003 0320 	and.w	r3, r3, #32
 801ab98:	2b20      	cmp	r3, #32
 801ab9a:	d10e      	bne.n	801abba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	68db      	ldr	r3, [r3, #12]
 801aba2:	f003 0320 	and.w	r3, r3, #32
 801aba6:	2b20      	cmp	r3, #32
 801aba8:	d107      	bne.n	801abba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	f06f 0220 	mvn.w	r2, #32
 801abb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801abb4:	6878      	ldr	r0, [r7, #4]
 801abb6:	f000 fed9 	bl	801b96c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801abba:	bf00      	nop
 801abbc:	3708      	adds	r7, #8
 801abbe:	46bd      	mov	sp, r7
 801abc0:	bd80      	pop	{r7, pc}

0801abc2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801abc2:	b580      	push	{r7, lr}
 801abc4:	b084      	sub	sp, #16
 801abc6:	af00      	add	r7, sp, #0
 801abc8:	60f8      	str	r0, [r7, #12]
 801abca:	60b9      	str	r1, [r7, #8]
 801abcc:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801abce:	68fb      	ldr	r3, [r7, #12]
 801abd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801abd4:	2b01      	cmp	r3, #1
 801abd6:	d101      	bne.n	801abdc <HAL_TIM_IC_ConfigChannel+0x1a>
 801abd8:	2302      	movs	r3, #2
 801abda:	e08a      	b.n	801acf2 <HAL_TIM_IC_ConfigChannel+0x130>
 801abdc:	68fb      	ldr	r3, [r7, #12]
 801abde:	2201      	movs	r2, #1
 801abe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801abe4:	68fb      	ldr	r3, [r7, #12]
 801abe6:	2202      	movs	r2, #2
 801abe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	2b00      	cmp	r3, #0
 801abf0:	d11b      	bne.n	801ac2a <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801abf2:	68fb      	ldr	r3, [r7, #12]
 801abf4:	6818      	ldr	r0, [r3, #0]
 801abf6:	68bb      	ldr	r3, [r7, #8]
 801abf8:	6819      	ldr	r1, [r3, #0]
 801abfa:	68bb      	ldr	r3, [r7, #8]
 801abfc:	685a      	ldr	r2, [r3, #4]
 801abfe:	68bb      	ldr	r3, [r7, #8]
 801ac00:	68db      	ldr	r3, [r3, #12]
 801ac02:	f000 fc67 	bl	801b4d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801ac06:	68fb      	ldr	r3, [r7, #12]
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	699a      	ldr	r2, [r3, #24]
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	681b      	ldr	r3, [r3, #0]
 801ac10:	f022 020c 	bic.w	r2, r2, #12
 801ac14:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801ac16:	68fb      	ldr	r3, [r7, #12]
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	6999      	ldr	r1, [r3, #24]
 801ac1c:	68bb      	ldr	r3, [r7, #8]
 801ac1e:	689a      	ldr	r2, [r3, #8]
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	430a      	orrs	r2, r1
 801ac26:	619a      	str	r2, [r3, #24]
 801ac28:	e05a      	b.n	801ace0 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	2b04      	cmp	r3, #4
 801ac2e:	d11c      	bne.n	801ac6a <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801ac30:	68fb      	ldr	r3, [r7, #12]
 801ac32:	6818      	ldr	r0, [r3, #0]
 801ac34:	68bb      	ldr	r3, [r7, #8]
 801ac36:	6819      	ldr	r1, [r3, #0]
 801ac38:	68bb      	ldr	r3, [r7, #8]
 801ac3a:	685a      	ldr	r2, [r3, #4]
 801ac3c:	68bb      	ldr	r3, [r7, #8]
 801ac3e:	68db      	ldr	r3, [r3, #12]
 801ac40:	f000 fcdf 	bl	801b602 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801ac44:	68fb      	ldr	r3, [r7, #12]
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	699a      	ldr	r2, [r3, #24]
 801ac4a:	68fb      	ldr	r3, [r7, #12]
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801ac52:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801ac54:	68fb      	ldr	r3, [r7, #12]
 801ac56:	681b      	ldr	r3, [r3, #0]
 801ac58:	6999      	ldr	r1, [r3, #24]
 801ac5a:	68bb      	ldr	r3, [r7, #8]
 801ac5c:	689b      	ldr	r3, [r3, #8]
 801ac5e:	021a      	lsls	r2, r3, #8
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	681b      	ldr	r3, [r3, #0]
 801ac64:	430a      	orrs	r2, r1
 801ac66:	619a      	str	r2, [r3, #24]
 801ac68:	e03a      	b.n	801ace0 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	2b08      	cmp	r3, #8
 801ac6e:	d11b      	bne.n	801aca8 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801ac70:	68fb      	ldr	r3, [r7, #12]
 801ac72:	6818      	ldr	r0, [r3, #0]
 801ac74:	68bb      	ldr	r3, [r7, #8]
 801ac76:	6819      	ldr	r1, [r3, #0]
 801ac78:	68bb      	ldr	r3, [r7, #8]
 801ac7a:	685a      	ldr	r2, [r3, #4]
 801ac7c:	68bb      	ldr	r3, [r7, #8]
 801ac7e:	68db      	ldr	r3, [r3, #12]
 801ac80:	f000 fd2c 	bl	801b6dc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801ac84:	68fb      	ldr	r3, [r7, #12]
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	69da      	ldr	r2, [r3, #28]
 801ac8a:	68fb      	ldr	r3, [r7, #12]
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	f022 020c 	bic.w	r2, r2, #12
 801ac92:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801ac94:	68fb      	ldr	r3, [r7, #12]
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	69d9      	ldr	r1, [r3, #28]
 801ac9a:	68bb      	ldr	r3, [r7, #8]
 801ac9c:	689a      	ldr	r2, [r3, #8]
 801ac9e:	68fb      	ldr	r3, [r7, #12]
 801aca0:	681b      	ldr	r3, [r3, #0]
 801aca2:	430a      	orrs	r2, r1
 801aca4:	61da      	str	r2, [r3, #28]
 801aca6:	e01b      	b.n	801ace0 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	6818      	ldr	r0, [r3, #0]
 801acac:	68bb      	ldr	r3, [r7, #8]
 801acae:	6819      	ldr	r1, [r3, #0]
 801acb0:	68bb      	ldr	r3, [r7, #8]
 801acb2:	685a      	ldr	r2, [r3, #4]
 801acb4:	68bb      	ldr	r3, [r7, #8]
 801acb6:	68db      	ldr	r3, [r3, #12]
 801acb8:	f000 fd4c 	bl	801b754 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801acbc:	68fb      	ldr	r3, [r7, #12]
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	69da      	ldr	r2, [r3, #28]
 801acc2:	68fb      	ldr	r3, [r7, #12]
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801acca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801accc:	68fb      	ldr	r3, [r7, #12]
 801acce:	681b      	ldr	r3, [r3, #0]
 801acd0:	69d9      	ldr	r1, [r3, #28]
 801acd2:	68bb      	ldr	r3, [r7, #8]
 801acd4:	689b      	ldr	r3, [r3, #8]
 801acd6:	021a      	lsls	r2, r3, #8
 801acd8:	68fb      	ldr	r3, [r7, #12]
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	430a      	orrs	r2, r1
 801acde:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 801ace0:	68fb      	ldr	r3, [r7, #12]
 801ace2:	2201      	movs	r2, #1
 801ace4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	2200      	movs	r2, #0
 801acec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801acf0:	2300      	movs	r3, #0
}
 801acf2:	4618      	mov	r0, r3
 801acf4:	3710      	adds	r7, #16
 801acf6:	46bd      	mov	sp, r7
 801acf8:	bd80      	pop	{r7, pc}
	...

0801acfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801acfc:	b580      	push	{r7, lr}
 801acfe:	b084      	sub	sp, #16
 801ad00:	af00      	add	r7, sp, #0
 801ad02:	60f8      	str	r0, [r7, #12]
 801ad04:	60b9      	str	r1, [r7, #8]
 801ad06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ad0e:	2b01      	cmp	r3, #1
 801ad10:	d101      	bne.n	801ad16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 801ad12:	2302      	movs	r3, #2
 801ad14:	e0b4      	b.n	801ae80 <HAL_TIM_PWM_ConfigChannel+0x184>
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	2201      	movs	r2, #1
 801ad1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801ad1e:	68fb      	ldr	r3, [r7, #12]
 801ad20:	2202      	movs	r2, #2
 801ad22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	2b0c      	cmp	r3, #12
 801ad2a:	f200 809f 	bhi.w	801ae6c <HAL_TIM_PWM_ConfigChannel+0x170>
 801ad2e:	a201      	add	r2, pc, #4	; (adr r2, 801ad34 <HAL_TIM_PWM_ConfigChannel+0x38>)
 801ad30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad34:	0801ad69 	.word	0x0801ad69
 801ad38:	0801ae6d 	.word	0x0801ae6d
 801ad3c:	0801ae6d 	.word	0x0801ae6d
 801ad40:	0801ae6d 	.word	0x0801ae6d
 801ad44:	0801ada9 	.word	0x0801ada9
 801ad48:	0801ae6d 	.word	0x0801ae6d
 801ad4c:	0801ae6d 	.word	0x0801ae6d
 801ad50:	0801ae6d 	.word	0x0801ae6d
 801ad54:	0801adeb 	.word	0x0801adeb
 801ad58:	0801ae6d 	.word	0x0801ae6d
 801ad5c:	0801ae6d 	.word	0x0801ae6d
 801ad60:	0801ae6d 	.word	0x0801ae6d
 801ad64:	0801ae2b 	.word	0x0801ae2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801ad68:	68fb      	ldr	r3, [r7, #12]
 801ad6a:	681b      	ldr	r3, [r3, #0]
 801ad6c:	68b9      	ldr	r1, [r7, #8]
 801ad6e:	4618      	mov	r0, r3
 801ad70:	f000 fa24 	bl	801b1bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801ad74:	68fb      	ldr	r3, [r7, #12]
 801ad76:	681b      	ldr	r3, [r3, #0]
 801ad78:	699a      	ldr	r2, [r3, #24]
 801ad7a:	68fb      	ldr	r3, [r7, #12]
 801ad7c:	681b      	ldr	r3, [r3, #0]
 801ad7e:	f042 0208 	orr.w	r2, r2, #8
 801ad82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801ad84:	68fb      	ldr	r3, [r7, #12]
 801ad86:	681b      	ldr	r3, [r3, #0]
 801ad88:	699a      	ldr	r2, [r3, #24]
 801ad8a:	68fb      	ldr	r3, [r7, #12]
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	f022 0204 	bic.w	r2, r2, #4
 801ad92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801ad94:	68fb      	ldr	r3, [r7, #12]
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	6999      	ldr	r1, [r3, #24]
 801ad9a:	68bb      	ldr	r3, [r7, #8]
 801ad9c:	691a      	ldr	r2, [r3, #16]
 801ad9e:	68fb      	ldr	r3, [r7, #12]
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	430a      	orrs	r2, r1
 801ada4:	619a      	str	r2, [r3, #24]
      break;
 801ada6:	e062      	b.n	801ae6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801ada8:	68fb      	ldr	r3, [r7, #12]
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	68b9      	ldr	r1, [r7, #8]
 801adae:	4618      	mov	r0, r3
 801adb0:	f000 fa6a 	bl	801b288 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801adb4:	68fb      	ldr	r3, [r7, #12]
 801adb6:	681b      	ldr	r3, [r3, #0]
 801adb8:	699a      	ldr	r2, [r3, #24]
 801adba:	68fb      	ldr	r3, [r7, #12]
 801adbc:	681b      	ldr	r3, [r3, #0]
 801adbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801adc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801adc4:	68fb      	ldr	r3, [r7, #12]
 801adc6:	681b      	ldr	r3, [r3, #0]
 801adc8:	699a      	ldr	r2, [r3, #24]
 801adca:	68fb      	ldr	r3, [r7, #12]
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801add2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801add4:	68fb      	ldr	r3, [r7, #12]
 801add6:	681b      	ldr	r3, [r3, #0]
 801add8:	6999      	ldr	r1, [r3, #24]
 801adda:	68bb      	ldr	r3, [r7, #8]
 801addc:	691b      	ldr	r3, [r3, #16]
 801adde:	021a      	lsls	r2, r3, #8
 801ade0:	68fb      	ldr	r3, [r7, #12]
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	430a      	orrs	r2, r1
 801ade6:	619a      	str	r2, [r3, #24]
      break;
 801ade8:	e041      	b.n	801ae6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801adea:	68fb      	ldr	r3, [r7, #12]
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	68b9      	ldr	r1, [r7, #8]
 801adf0:	4618      	mov	r0, r3
 801adf2:	f000 fab5 	bl	801b360 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801adf6:	68fb      	ldr	r3, [r7, #12]
 801adf8:	681b      	ldr	r3, [r3, #0]
 801adfa:	69da      	ldr	r2, [r3, #28]
 801adfc:	68fb      	ldr	r3, [r7, #12]
 801adfe:	681b      	ldr	r3, [r3, #0]
 801ae00:	f042 0208 	orr.w	r2, r2, #8
 801ae04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801ae06:	68fb      	ldr	r3, [r7, #12]
 801ae08:	681b      	ldr	r3, [r3, #0]
 801ae0a:	69da      	ldr	r2, [r3, #28]
 801ae0c:	68fb      	ldr	r3, [r7, #12]
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	f022 0204 	bic.w	r2, r2, #4
 801ae14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801ae16:	68fb      	ldr	r3, [r7, #12]
 801ae18:	681b      	ldr	r3, [r3, #0]
 801ae1a:	69d9      	ldr	r1, [r3, #28]
 801ae1c:	68bb      	ldr	r3, [r7, #8]
 801ae1e:	691a      	ldr	r2, [r3, #16]
 801ae20:	68fb      	ldr	r3, [r7, #12]
 801ae22:	681b      	ldr	r3, [r3, #0]
 801ae24:	430a      	orrs	r2, r1
 801ae26:	61da      	str	r2, [r3, #28]
      break;
 801ae28:	e021      	b.n	801ae6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801ae2a:	68fb      	ldr	r3, [r7, #12]
 801ae2c:	681b      	ldr	r3, [r3, #0]
 801ae2e:	68b9      	ldr	r1, [r7, #8]
 801ae30:	4618      	mov	r0, r3
 801ae32:	f000 faff 	bl	801b434 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801ae36:	68fb      	ldr	r3, [r7, #12]
 801ae38:	681b      	ldr	r3, [r3, #0]
 801ae3a:	69da      	ldr	r2, [r3, #28]
 801ae3c:	68fb      	ldr	r3, [r7, #12]
 801ae3e:	681b      	ldr	r3, [r3, #0]
 801ae40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801ae44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801ae46:	68fb      	ldr	r3, [r7, #12]
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	69da      	ldr	r2, [r3, #28]
 801ae4c:	68fb      	ldr	r3, [r7, #12]
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ae54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	69d9      	ldr	r1, [r3, #28]
 801ae5c:	68bb      	ldr	r3, [r7, #8]
 801ae5e:	691b      	ldr	r3, [r3, #16]
 801ae60:	021a      	lsls	r2, r3, #8
 801ae62:	68fb      	ldr	r3, [r7, #12]
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	430a      	orrs	r2, r1
 801ae68:	61da      	str	r2, [r3, #28]
      break;
 801ae6a:	e000      	b.n	801ae6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 801ae6c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801ae6e:	68fb      	ldr	r3, [r7, #12]
 801ae70:	2201      	movs	r2, #1
 801ae72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801ae76:	68fb      	ldr	r3, [r7, #12]
 801ae78:	2200      	movs	r2, #0
 801ae7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801ae7e:	2300      	movs	r3, #0
}
 801ae80:	4618      	mov	r0, r3
 801ae82:	3710      	adds	r7, #16
 801ae84:	46bd      	mov	sp, r7
 801ae86:	bd80      	pop	{r7, pc}

0801ae88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801ae88:	b580      	push	{r7, lr}
 801ae8a:	b084      	sub	sp, #16
 801ae8c:	af00      	add	r7, sp, #0
 801ae8e:	6078      	str	r0, [r7, #4]
 801ae90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ae98:	2b01      	cmp	r3, #1
 801ae9a:	d101      	bne.n	801aea0 <HAL_TIM_ConfigClockSource+0x18>
 801ae9c:	2302      	movs	r3, #2
 801ae9e:	e0a6      	b.n	801afee <HAL_TIM_ConfigClockSource+0x166>
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	2201      	movs	r2, #1
 801aea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	2202      	movs	r2, #2
 801aeac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	681b      	ldr	r3, [r3, #0]
 801aeb4:	689b      	ldr	r3, [r3, #8]
 801aeb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801aebe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801aec0:	68fb      	ldr	r3, [r7, #12]
 801aec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801aec6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	68fa      	ldr	r2, [r7, #12]
 801aece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801aed0:	683b      	ldr	r3, [r7, #0]
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	2b40      	cmp	r3, #64	; 0x40
 801aed6:	d067      	beq.n	801afa8 <HAL_TIM_ConfigClockSource+0x120>
 801aed8:	2b40      	cmp	r3, #64	; 0x40
 801aeda:	d80b      	bhi.n	801aef4 <HAL_TIM_ConfigClockSource+0x6c>
 801aedc:	2b10      	cmp	r3, #16
 801aede:	d073      	beq.n	801afc8 <HAL_TIM_ConfigClockSource+0x140>
 801aee0:	2b10      	cmp	r3, #16
 801aee2:	d802      	bhi.n	801aeea <HAL_TIM_ConfigClockSource+0x62>
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	d06f      	beq.n	801afc8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 801aee8:	e078      	b.n	801afdc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801aeea:	2b20      	cmp	r3, #32
 801aeec:	d06c      	beq.n	801afc8 <HAL_TIM_ConfigClockSource+0x140>
 801aeee:	2b30      	cmp	r3, #48	; 0x30
 801aef0:	d06a      	beq.n	801afc8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 801aef2:	e073      	b.n	801afdc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801aef4:	2b70      	cmp	r3, #112	; 0x70
 801aef6:	d00d      	beq.n	801af14 <HAL_TIM_ConfigClockSource+0x8c>
 801aef8:	2b70      	cmp	r3, #112	; 0x70
 801aefa:	d804      	bhi.n	801af06 <HAL_TIM_ConfigClockSource+0x7e>
 801aefc:	2b50      	cmp	r3, #80	; 0x50
 801aefe:	d033      	beq.n	801af68 <HAL_TIM_ConfigClockSource+0xe0>
 801af00:	2b60      	cmp	r3, #96	; 0x60
 801af02:	d041      	beq.n	801af88 <HAL_TIM_ConfigClockSource+0x100>
      break;
 801af04:	e06a      	b.n	801afdc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801af06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801af0a:	d066      	beq.n	801afda <HAL_TIM_ConfigClockSource+0x152>
 801af0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801af10:	d017      	beq.n	801af42 <HAL_TIM_ConfigClockSource+0xba>
      break;
 801af12:	e063      	b.n	801afdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	6818      	ldr	r0, [r3, #0]
 801af18:	683b      	ldr	r3, [r7, #0]
 801af1a:	6899      	ldr	r1, [r3, #8]
 801af1c:	683b      	ldr	r3, [r7, #0]
 801af1e:	685a      	ldr	r2, [r3, #4]
 801af20:	683b      	ldr	r3, [r7, #0]
 801af22:	68db      	ldr	r3, [r3, #12]
 801af24:	f000 fc6e 	bl	801b804 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	689b      	ldr	r3, [r3, #8]
 801af2e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801af30:	68fb      	ldr	r3, [r7, #12]
 801af32:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801af36:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	68fa      	ldr	r2, [r7, #12]
 801af3e:	609a      	str	r2, [r3, #8]
      break;
 801af40:	e04c      	b.n	801afdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	6818      	ldr	r0, [r3, #0]
 801af46:	683b      	ldr	r3, [r7, #0]
 801af48:	6899      	ldr	r1, [r3, #8]
 801af4a:	683b      	ldr	r3, [r7, #0]
 801af4c:	685a      	ldr	r2, [r3, #4]
 801af4e:	683b      	ldr	r3, [r7, #0]
 801af50:	68db      	ldr	r3, [r3, #12]
 801af52:	f000 fc57 	bl	801b804 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	681b      	ldr	r3, [r3, #0]
 801af5a:	689a      	ldr	r2, [r3, #8]
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801af64:	609a      	str	r2, [r3, #8]
      break;
 801af66:	e039      	b.n	801afdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	6818      	ldr	r0, [r3, #0]
 801af6c:	683b      	ldr	r3, [r7, #0]
 801af6e:	6859      	ldr	r1, [r3, #4]
 801af70:	683b      	ldr	r3, [r7, #0]
 801af72:	68db      	ldr	r3, [r3, #12]
 801af74:	461a      	mov	r2, r3
 801af76:	f000 fb15 	bl	801b5a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	2150      	movs	r1, #80	; 0x50
 801af80:	4618      	mov	r0, r3
 801af82:	f000 fc24 	bl	801b7ce <TIM_ITRx_SetConfig>
      break;
 801af86:	e029      	b.n	801afdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	6818      	ldr	r0, [r3, #0]
 801af8c:	683b      	ldr	r3, [r7, #0]
 801af8e:	6859      	ldr	r1, [r3, #4]
 801af90:	683b      	ldr	r3, [r7, #0]
 801af92:	68db      	ldr	r3, [r3, #12]
 801af94:	461a      	mov	r2, r3
 801af96:	f000 fb71 	bl	801b67c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	2160      	movs	r1, #96	; 0x60
 801afa0:	4618      	mov	r0, r3
 801afa2:	f000 fc14 	bl	801b7ce <TIM_ITRx_SetConfig>
      break;
 801afa6:	e019      	b.n	801afdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	6818      	ldr	r0, [r3, #0]
 801afac:	683b      	ldr	r3, [r7, #0]
 801afae:	6859      	ldr	r1, [r3, #4]
 801afb0:	683b      	ldr	r3, [r7, #0]
 801afb2:	68db      	ldr	r3, [r3, #12]
 801afb4:	461a      	mov	r2, r3
 801afb6:	f000 faf5 	bl	801b5a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	681b      	ldr	r3, [r3, #0]
 801afbe:	2140      	movs	r1, #64	; 0x40
 801afc0:	4618      	mov	r0, r3
 801afc2:	f000 fc04 	bl	801b7ce <TIM_ITRx_SetConfig>
      break;
 801afc6:	e009      	b.n	801afdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	681a      	ldr	r2, [r3, #0]
 801afcc:	683b      	ldr	r3, [r7, #0]
 801afce:	681b      	ldr	r3, [r3, #0]
 801afd0:	4619      	mov	r1, r3
 801afd2:	4610      	mov	r0, r2
 801afd4:	f000 fbfb 	bl	801b7ce <TIM_ITRx_SetConfig>
      break;
 801afd8:	e000      	b.n	801afdc <HAL_TIM_ConfigClockSource+0x154>
      break;
 801afda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	2201      	movs	r2, #1
 801afe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	2200      	movs	r2, #0
 801afe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801afec:	2300      	movs	r3, #0
}
 801afee:	4618      	mov	r0, r3
 801aff0:	3710      	adds	r7, #16
 801aff2:	46bd      	mov	sp, r7
 801aff4:	bd80      	pop	{r7, pc}
	...

0801aff8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801aff8:	b480      	push	{r7}
 801affa:	b085      	sub	sp, #20
 801affc:	af00      	add	r7, sp, #0
 801affe:	6078      	str	r0, [r7, #4]
 801b000:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 801b002:	2300      	movs	r3, #0
 801b004:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 801b006:	683b      	ldr	r3, [r7, #0]
 801b008:	2b0c      	cmp	r3, #12
 801b00a:	d831      	bhi.n	801b070 <HAL_TIM_ReadCapturedValue+0x78>
 801b00c:	a201      	add	r2, pc, #4	; (adr r2, 801b014 <HAL_TIM_ReadCapturedValue+0x1c>)
 801b00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b012:	bf00      	nop
 801b014:	0801b049 	.word	0x0801b049
 801b018:	0801b071 	.word	0x0801b071
 801b01c:	0801b071 	.word	0x0801b071
 801b020:	0801b071 	.word	0x0801b071
 801b024:	0801b053 	.word	0x0801b053
 801b028:	0801b071 	.word	0x0801b071
 801b02c:	0801b071 	.word	0x0801b071
 801b030:	0801b071 	.word	0x0801b071
 801b034:	0801b05d 	.word	0x0801b05d
 801b038:	0801b071 	.word	0x0801b071
 801b03c:	0801b071 	.word	0x0801b071
 801b040:	0801b071 	.word	0x0801b071
 801b044:	0801b067 	.word	0x0801b067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	681b      	ldr	r3, [r3, #0]
 801b04c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b04e:	60fb      	str	r3, [r7, #12]

      break;
 801b050:	e00f      	b.n	801b072 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	681b      	ldr	r3, [r3, #0]
 801b056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b058:	60fb      	str	r3, [r7, #12]

      break;
 801b05a:	e00a      	b.n	801b072 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	681b      	ldr	r3, [r3, #0]
 801b060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b062:	60fb      	str	r3, [r7, #12]

      break;
 801b064:	e005      	b.n	801b072 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	681b      	ldr	r3, [r3, #0]
 801b06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b06c:	60fb      	str	r3, [r7, #12]

      break;
 801b06e:	e000      	b.n	801b072 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 801b070:	bf00      	nop
  }

  return tmpreg;
 801b072:	68fb      	ldr	r3, [r7, #12]
}
 801b074:	4618      	mov	r0, r3
 801b076:	3714      	adds	r7, #20
 801b078:	46bd      	mov	sp, r7
 801b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b07e:	4770      	bx	lr

0801b080 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801b080:	b480      	push	{r7}
 801b082:	b083      	sub	sp, #12
 801b084:	af00      	add	r7, sp, #0
 801b086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801b088:	bf00      	nop
 801b08a:	370c      	adds	r7, #12
 801b08c:	46bd      	mov	sp, r7
 801b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b092:	4770      	bx	lr

0801b094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801b094:	b480      	push	{r7}
 801b096:	b083      	sub	sp, #12
 801b098:	af00      	add	r7, sp, #0
 801b09a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801b09c:	bf00      	nop
 801b09e:	370c      	adds	r7, #12
 801b0a0:	46bd      	mov	sp, r7
 801b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0a6:	4770      	bx	lr

0801b0a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801b0a8:	b480      	push	{r7}
 801b0aa:	b083      	sub	sp, #12
 801b0ac:	af00      	add	r7, sp, #0
 801b0ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801b0b0:	bf00      	nop
 801b0b2:	370c      	adds	r7, #12
 801b0b4:	46bd      	mov	sp, r7
 801b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0ba:	4770      	bx	lr

0801b0bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801b0bc:	b480      	push	{r7}
 801b0be:	b085      	sub	sp, #20
 801b0c0:	af00      	add	r7, sp, #0
 801b0c2:	6078      	str	r0, [r7, #4]
 801b0c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	4a34      	ldr	r2, [pc, #208]	; (801b1a0 <TIM_Base_SetConfig+0xe4>)
 801b0d0:	4293      	cmp	r3, r2
 801b0d2:	d00f      	beq.n	801b0f4 <TIM_Base_SetConfig+0x38>
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b0da:	d00b      	beq.n	801b0f4 <TIM_Base_SetConfig+0x38>
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	4a31      	ldr	r2, [pc, #196]	; (801b1a4 <TIM_Base_SetConfig+0xe8>)
 801b0e0:	4293      	cmp	r3, r2
 801b0e2:	d007      	beq.n	801b0f4 <TIM_Base_SetConfig+0x38>
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	4a30      	ldr	r2, [pc, #192]	; (801b1a8 <TIM_Base_SetConfig+0xec>)
 801b0e8:	4293      	cmp	r3, r2
 801b0ea:	d003      	beq.n	801b0f4 <TIM_Base_SetConfig+0x38>
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	4a2f      	ldr	r2, [pc, #188]	; (801b1ac <TIM_Base_SetConfig+0xf0>)
 801b0f0:	4293      	cmp	r3, r2
 801b0f2:	d108      	bne.n	801b106 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801b0f4:	68fb      	ldr	r3, [r7, #12]
 801b0f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b0fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801b0fc:	683b      	ldr	r3, [r7, #0]
 801b0fe:	685b      	ldr	r3, [r3, #4]
 801b100:	68fa      	ldr	r2, [r7, #12]
 801b102:	4313      	orrs	r3, r2
 801b104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	4a25      	ldr	r2, [pc, #148]	; (801b1a0 <TIM_Base_SetConfig+0xe4>)
 801b10a:	4293      	cmp	r3, r2
 801b10c:	d01b      	beq.n	801b146 <TIM_Base_SetConfig+0x8a>
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b114:	d017      	beq.n	801b146 <TIM_Base_SetConfig+0x8a>
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	4a22      	ldr	r2, [pc, #136]	; (801b1a4 <TIM_Base_SetConfig+0xe8>)
 801b11a:	4293      	cmp	r3, r2
 801b11c:	d013      	beq.n	801b146 <TIM_Base_SetConfig+0x8a>
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	4a21      	ldr	r2, [pc, #132]	; (801b1a8 <TIM_Base_SetConfig+0xec>)
 801b122:	4293      	cmp	r3, r2
 801b124:	d00f      	beq.n	801b146 <TIM_Base_SetConfig+0x8a>
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	4a20      	ldr	r2, [pc, #128]	; (801b1ac <TIM_Base_SetConfig+0xf0>)
 801b12a:	4293      	cmp	r3, r2
 801b12c:	d00b      	beq.n	801b146 <TIM_Base_SetConfig+0x8a>
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	4a1f      	ldr	r2, [pc, #124]	; (801b1b0 <TIM_Base_SetConfig+0xf4>)
 801b132:	4293      	cmp	r3, r2
 801b134:	d007      	beq.n	801b146 <TIM_Base_SetConfig+0x8a>
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	4a1e      	ldr	r2, [pc, #120]	; (801b1b4 <TIM_Base_SetConfig+0xf8>)
 801b13a:	4293      	cmp	r3, r2
 801b13c:	d003      	beq.n	801b146 <TIM_Base_SetConfig+0x8a>
 801b13e:	687b      	ldr	r3, [r7, #4]
 801b140:	4a1d      	ldr	r2, [pc, #116]	; (801b1b8 <TIM_Base_SetConfig+0xfc>)
 801b142:	4293      	cmp	r3, r2
 801b144:	d108      	bne.n	801b158 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801b146:	68fb      	ldr	r3, [r7, #12]
 801b148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b14c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801b14e:	683b      	ldr	r3, [r7, #0]
 801b150:	68db      	ldr	r3, [r3, #12]
 801b152:	68fa      	ldr	r2, [r7, #12]
 801b154:	4313      	orrs	r3, r2
 801b156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801b158:	68fb      	ldr	r3, [r7, #12]
 801b15a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801b15e:	683b      	ldr	r3, [r7, #0]
 801b160:	695b      	ldr	r3, [r3, #20]
 801b162:	4313      	orrs	r3, r2
 801b164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	68fa      	ldr	r2, [r7, #12]
 801b16a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801b16c:	683b      	ldr	r3, [r7, #0]
 801b16e:	689a      	ldr	r2, [r3, #8]
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801b174:	683b      	ldr	r3, [r7, #0]
 801b176:	681a      	ldr	r2, [r3, #0]
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	4a08      	ldr	r2, [pc, #32]	; (801b1a0 <TIM_Base_SetConfig+0xe4>)
 801b180:	4293      	cmp	r3, r2
 801b182:	d103      	bne.n	801b18c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801b184:	683b      	ldr	r3, [r7, #0]
 801b186:	691a      	ldr	r2, [r3, #16]
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	2201      	movs	r2, #1
 801b190:	615a      	str	r2, [r3, #20]
}
 801b192:	bf00      	nop
 801b194:	3714      	adds	r7, #20
 801b196:	46bd      	mov	sp, r7
 801b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b19c:	4770      	bx	lr
 801b19e:	bf00      	nop
 801b1a0:	40010000 	.word	0x40010000
 801b1a4:	40000400 	.word	0x40000400
 801b1a8:	40000800 	.word	0x40000800
 801b1ac:	40000c00 	.word	0x40000c00
 801b1b0:	40014000 	.word	0x40014000
 801b1b4:	40014400 	.word	0x40014400
 801b1b8:	40014800 	.word	0x40014800

0801b1bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b1bc:	b480      	push	{r7}
 801b1be:	b087      	sub	sp, #28
 801b1c0:	af00      	add	r7, sp, #0
 801b1c2:	6078      	str	r0, [r7, #4]
 801b1c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	6a1b      	ldr	r3, [r3, #32]
 801b1ca:	f023 0201 	bic.w	r2, r3, #1
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	6a1b      	ldr	r3, [r3, #32]
 801b1d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	685b      	ldr	r3, [r3, #4]
 801b1dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	699b      	ldr	r3, [r3, #24]
 801b1e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801b1e4:	68fb      	ldr	r3, [r7, #12]
 801b1e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b1ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801b1ec:	68fb      	ldr	r3, [r7, #12]
 801b1ee:	f023 0303 	bic.w	r3, r3, #3
 801b1f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b1f4:	683b      	ldr	r3, [r7, #0]
 801b1f6:	681b      	ldr	r3, [r3, #0]
 801b1f8:	68fa      	ldr	r2, [r7, #12]
 801b1fa:	4313      	orrs	r3, r2
 801b1fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801b1fe:	697b      	ldr	r3, [r7, #20]
 801b200:	f023 0302 	bic.w	r3, r3, #2
 801b204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801b206:	683b      	ldr	r3, [r7, #0]
 801b208:	689b      	ldr	r3, [r3, #8]
 801b20a:	697a      	ldr	r2, [r7, #20]
 801b20c:	4313      	orrs	r3, r2
 801b20e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	4a1c      	ldr	r2, [pc, #112]	; (801b284 <TIM_OC1_SetConfig+0xc8>)
 801b214:	4293      	cmp	r3, r2
 801b216:	d10c      	bne.n	801b232 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801b218:	697b      	ldr	r3, [r7, #20]
 801b21a:	f023 0308 	bic.w	r3, r3, #8
 801b21e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801b220:	683b      	ldr	r3, [r7, #0]
 801b222:	68db      	ldr	r3, [r3, #12]
 801b224:	697a      	ldr	r2, [r7, #20]
 801b226:	4313      	orrs	r3, r2
 801b228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801b22a:	697b      	ldr	r3, [r7, #20]
 801b22c:	f023 0304 	bic.w	r3, r3, #4
 801b230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	4a13      	ldr	r2, [pc, #76]	; (801b284 <TIM_OC1_SetConfig+0xc8>)
 801b236:	4293      	cmp	r3, r2
 801b238:	d111      	bne.n	801b25e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801b23a:	693b      	ldr	r3, [r7, #16]
 801b23c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801b242:	693b      	ldr	r3, [r7, #16]
 801b244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801b24a:	683b      	ldr	r3, [r7, #0]
 801b24c:	695b      	ldr	r3, [r3, #20]
 801b24e:	693a      	ldr	r2, [r7, #16]
 801b250:	4313      	orrs	r3, r2
 801b252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801b254:	683b      	ldr	r3, [r7, #0]
 801b256:	699b      	ldr	r3, [r3, #24]
 801b258:	693a      	ldr	r2, [r7, #16]
 801b25a:	4313      	orrs	r3, r2
 801b25c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	693a      	ldr	r2, [r7, #16]
 801b262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	68fa      	ldr	r2, [r7, #12]
 801b268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801b26a:	683b      	ldr	r3, [r7, #0]
 801b26c:	685a      	ldr	r2, [r3, #4]
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	697a      	ldr	r2, [r7, #20]
 801b276:	621a      	str	r2, [r3, #32]
}
 801b278:	bf00      	nop
 801b27a:	371c      	adds	r7, #28
 801b27c:	46bd      	mov	sp, r7
 801b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b282:	4770      	bx	lr
 801b284:	40010000 	.word	0x40010000

0801b288 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b288:	b480      	push	{r7}
 801b28a:	b087      	sub	sp, #28
 801b28c:	af00      	add	r7, sp, #0
 801b28e:	6078      	str	r0, [r7, #4]
 801b290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	6a1b      	ldr	r3, [r3, #32]
 801b296:	f023 0210 	bic.w	r2, r3, #16
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	6a1b      	ldr	r3, [r3, #32]
 801b2a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	685b      	ldr	r3, [r3, #4]
 801b2a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	699b      	ldr	r3, [r3, #24]
 801b2ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801b2b0:	68fb      	ldr	r3, [r7, #12]
 801b2b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b2b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801b2b8:	68fb      	ldr	r3, [r7, #12]
 801b2ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b2be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b2c0:	683b      	ldr	r3, [r7, #0]
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	021b      	lsls	r3, r3, #8
 801b2c6:	68fa      	ldr	r2, [r7, #12]
 801b2c8:	4313      	orrs	r3, r2
 801b2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801b2cc:	697b      	ldr	r3, [r7, #20]
 801b2ce:	f023 0320 	bic.w	r3, r3, #32
 801b2d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801b2d4:	683b      	ldr	r3, [r7, #0]
 801b2d6:	689b      	ldr	r3, [r3, #8]
 801b2d8:	011b      	lsls	r3, r3, #4
 801b2da:	697a      	ldr	r2, [r7, #20]
 801b2dc:	4313      	orrs	r3, r2
 801b2de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	4a1e      	ldr	r2, [pc, #120]	; (801b35c <TIM_OC2_SetConfig+0xd4>)
 801b2e4:	4293      	cmp	r3, r2
 801b2e6:	d10d      	bne.n	801b304 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801b2e8:	697b      	ldr	r3, [r7, #20]
 801b2ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b2ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801b2f0:	683b      	ldr	r3, [r7, #0]
 801b2f2:	68db      	ldr	r3, [r3, #12]
 801b2f4:	011b      	lsls	r3, r3, #4
 801b2f6:	697a      	ldr	r2, [r7, #20]
 801b2f8:	4313      	orrs	r3, r2
 801b2fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801b2fc:	697b      	ldr	r3, [r7, #20]
 801b2fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b302:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	4a15      	ldr	r2, [pc, #84]	; (801b35c <TIM_OC2_SetConfig+0xd4>)
 801b308:	4293      	cmp	r3, r2
 801b30a:	d113      	bne.n	801b334 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801b30c:	693b      	ldr	r3, [r7, #16]
 801b30e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b312:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801b314:	693b      	ldr	r3, [r7, #16]
 801b316:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b31a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801b31c:	683b      	ldr	r3, [r7, #0]
 801b31e:	695b      	ldr	r3, [r3, #20]
 801b320:	009b      	lsls	r3, r3, #2
 801b322:	693a      	ldr	r2, [r7, #16]
 801b324:	4313      	orrs	r3, r2
 801b326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801b328:	683b      	ldr	r3, [r7, #0]
 801b32a:	699b      	ldr	r3, [r3, #24]
 801b32c:	009b      	lsls	r3, r3, #2
 801b32e:	693a      	ldr	r2, [r7, #16]
 801b330:	4313      	orrs	r3, r2
 801b332:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	693a      	ldr	r2, [r7, #16]
 801b338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	68fa      	ldr	r2, [r7, #12]
 801b33e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801b340:	683b      	ldr	r3, [r7, #0]
 801b342:	685a      	ldr	r2, [r3, #4]
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	697a      	ldr	r2, [r7, #20]
 801b34c:	621a      	str	r2, [r3, #32]
}
 801b34e:	bf00      	nop
 801b350:	371c      	adds	r7, #28
 801b352:	46bd      	mov	sp, r7
 801b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b358:	4770      	bx	lr
 801b35a:	bf00      	nop
 801b35c:	40010000 	.word	0x40010000

0801b360 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b360:	b480      	push	{r7}
 801b362:	b087      	sub	sp, #28
 801b364:	af00      	add	r7, sp, #0
 801b366:	6078      	str	r0, [r7, #4]
 801b368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	6a1b      	ldr	r3, [r3, #32]
 801b36e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	6a1b      	ldr	r3, [r3, #32]
 801b37a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	685b      	ldr	r3, [r3, #4]
 801b380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	69db      	ldr	r3, [r3, #28]
 801b386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801b388:	68fb      	ldr	r3, [r7, #12]
 801b38a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b38e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801b390:	68fb      	ldr	r3, [r7, #12]
 801b392:	f023 0303 	bic.w	r3, r3, #3
 801b396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b398:	683b      	ldr	r3, [r7, #0]
 801b39a:	681b      	ldr	r3, [r3, #0]
 801b39c:	68fa      	ldr	r2, [r7, #12]
 801b39e:	4313      	orrs	r3, r2
 801b3a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801b3a2:	697b      	ldr	r3, [r7, #20]
 801b3a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b3a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801b3aa:	683b      	ldr	r3, [r7, #0]
 801b3ac:	689b      	ldr	r3, [r3, #8]
 801b3ae:	021b      	lsls	r3, r3, #8
 801b3b0:	697a      	ldr	r2, [r7, #20]
 801b3b2:	4313      	orrs	r3, r2
 801b3b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	4a1d      	ldr	r2, [pc, #116]	; (801b430 <TIM_OC3_SetConfig+0xd0>)
 801b3ba:	4293      	cmp	r3, r2
 801b3bc:	d10d      	bne.n	801b3da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801b3be:	697b      	ldr	r3, [r7, #20]
 801b3c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b3c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801b3c6:	683b      	ldr	r3, [r7, #0]
 801b3c8:	68db      	ldr	r3, [r3, #12]
 801b3ca:	021b      	lsls	r3, r3, #8
 801b3cc:	697a      	ldr	r2, [r7, #20]
 801b3ce:	4313      	orrs	r3, r2
 801b3d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801b3d2:	697b      	ldr	r3, [r7, #20]
 801b3d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b3d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	4a14      	ldr	r2, [pc, #80]	; (801b430 <TIM_OC3_SetConfig+0xd0>)
 801b3de:	4293      	cmp	r3, r2
 801b3e0:	d113      	bne.n	801b40a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801b3e2:	693b      	ldr	r3, [r7, #16]
 801b3e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b3e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801b3ea:	693b      	ldr	r3, [r7, #16]
 801b3ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b3f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801b3f2:	683b      	ldr	r3, [r7, #0]
 801b3f4:	695b      	ldr	r3, [r3, #20]
 801b3f6:	011b      	lsls	r3, r3, #4
 801b3f8:	693a      	ldr	r2, [r7, #16]
 801b3fa:	4313      	orrs	r3, r2
 801b3fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801b3fe:	683b      	ldr	r3, [r7, #0]
 801b400:	699b      	ldr	r3, [r3, #24]
 801b402:	011b      	lsls	r3, r3, #4
 801b404:	693a      	ldr	r2, [r7, #16]
 801b406:	4313      	orrs	r3, r2
 801b408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	693a      	ldr	r2, [r7, #16]
 801b40e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	68fa      	ldr	r2, [r7, #12]
 801b414:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801b416:	683b      	ldr	r3, [r7, #0]
 801b418:	685a      	ldr	r2, [r3, #4]
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	697a      	ldr	r2, [r7, #20]
 801b422:	621a      	str	r2, [r3, #32]
}
 801b424:	bf00      	nop
 801b426:	371c      	adds	r7, #28
 801b428:	46bd      	mov	sp, r7
 801b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b42e:	4770      	bx	lr
 801b430:	40010000 	.word	0x40010000

0801b434 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b434:	b480      	push	{r7}
 801b436:	b087      	sub	sp, #28
 801b438:	af00      	add	r7, sp, #0
 801b43a:	6078      	str	r0, [r7, #4]
 801b43c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	6a1b      	ldr	r3, [r3, #32]
 801b442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	6a1b      	ldr	r3, [r3, #32]
 801b44e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	685b      	ldr	r3, [r3, #4]
 801b454:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	69db      	ldr	r3, [r3, #28]
 801b45a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801b45c:	68fb      	ldr	r3, [r7, #12]
 801b45e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801b464:	68fb      	ldr	r3, [r7, #12]
 801b466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b46a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b46c:	683b      	ldr	r3, [r7, #0]
 801b46e:	681b      	ldr	r3, [r3, #0]
 801b470:	021b      	lsls	r3, r3, #8
 801b472:	68fa      	ldr	r2, [r7, #12]
 801b474:	4313      	orrs	r3, r2
 801b476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801b478:	693b      	ldr	r3, [r7, #16]
 801b47a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b47e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801b480:	683b      	ldr	r3, [r7, #0]
 801b482:	689b      	ldr	r3, [r3, #8]
 801b484:	031b      	lsls	r3, r3, #12
 801b486:	693a      	ldr	r2, [r7, #16]
 801b488:	4313      	orrs	r3, r2
 801b48a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	4a10      	ldr	r2, [pc, #64]	; (801b4d0 <TIM_OC4_SetConfig+0x9c>)
 801b490:	4293      	cmp	r3, r2
 801b492:	d109      	bne.n	801b4a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801b494:	697b      	ldr	r3, [r7, #20]
 801b496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801b49a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801b49c:	683b      	ldr	r3, [r7, #0]
 801b49e:	695b      	ldr	r3, [r3, #20]
 801b4a0:	019b      	lsls	r3, r3, #6
 801b4a2:	697a      	ldr	r2, [r7, #20]
 801b4a4:	4313      	orrs	r3, r2
 801b4a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	697a      	ldr	r2, [r7, #20]
 801b4ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	68fa      	ldr	r2, [r7, #12]
 801b4b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801b4b4:	683b      	ldr	r3, [r7, #0]
 801b4b6:	685a      	ldr	r2, [r3, #4]
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	693a      	ldr	r2, [r7, #16]
 801b4c0:	621a      	str	r2, [r3, #32]
}
 801b4c2:	bf00      	nop
 801b4c4:	371c      	adds	r7, #28
 801b4c6:	46bd      	mov	sp, r7
 801b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4cc:	4770      	bx	lr
 801b4ce:	bf00      	nop
 801b4d0:	40010000 	.word	0x40010000

0801b4d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 801b4d4:	b480      	push	{r7}
 801b4d6:	b087      	sub	sp, #28
 801b4d8:	af00      	add	r7, sp, #0
 801b4da:	60f8      	str	r0, [r7, #12]
 801b4dc:	60b9      	str	r1, [r7, #8]
 801b4de:	607a      	str	r2, [r7, #4]
 801b4e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	6a1b      	ldr	r3, [r3, #32]
 801b4e6:	f023 0201 	bic.w	r2, r3, #1
 801b4ea:	68fb      	ldr	r3, [r7, #12]
 801b4ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b4ee:	68fb      	ldr	r3, [r7, #12]
 801b4f0:	699b      	ldr	r3, [r3, #24]
 801b4f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b4f4:	68fb      	ldr	r3, [r7, #12]
 801b4f6:	6a1b      	ldr	r3, [r3, #32]
 801b4f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801b4fa:	68fb      	ldr	r3, [r7, #12]
 801b4fc:	4a24      	ldr	r2, [pc, #144]	; (801b590 <TIM_TI1_SetConfig+0xbc>)
 801b4fe:	4293      	cmp	r3, r2
 801b500:	d013      	beq.n	801b52a <TIM_TI1_SetConfig+0x56>
 801b502:	68fb      	ldr	r3, [r7, #12]
 801b504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b508:	d00f      	beq.n	801b52a <TIM_TI1_SetConfig+0x56>
 801b50a:	68fb      	ldr	r3, [r7, #12]
 801b50c:	4a21      	ldr	r2, [pc, #132]	; (801b594 <TIM_TI1_SetConfig+0xc0>)
 801b50e:	4293      	cmp	r3, r2
 801b510:	d00b      	beq.n	801b52a <TIM_TI1_SetConfig+0x56>
 801b512:	68fb      	ldr	r3, [r7, #12]
 801b514:	4a20      	ldr	r2, [pc, #128]	; (801b598 <TIM_TI1_SetConfig+0xc4>)
 801b516:	4293      	cmp	r3, r2
 801b518:	d007      	beq.n	801b52a <TIM_TI1_SetConfig+0x56>
 801b51a:	68fb      	ldr	r3, [r7, #12]
 801b51c:	4a1f      	ldr	r2, [pc, #124]	; (801b59c <TIM_TI1_SetConfig+0xc8>)
 801b51e:	4293      	cmp	r3, r2
 801b520:	d003      	beq.n	801b52a <TIM_TI1_SetConfig+0x56>
 801b522:	68fb      	ldr	r3, [r7, #12]
 801b524:	4a1e      	ldr	r2, [pc, #120]	; (801b5a0 <TIM_TI1_SetConfig+0xcc>)
 801b526:	4293      	cmp	r3, r2
 801b528:	d101      	bne.n	801b52e <TIM_TI1_SetConfig+0x5a>
 801b52a:	2301      	movs	r3, #1
 801b52c:	e000      	b.n	801b530 <TIM_TI1_SetConfig+0x5c>
 801b52e:	2300      	movs	r3, #0
 801b530:	2b00      	cmp	r3, #0
 801b532:	d008      	beq.n	801b546 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801b534:	697b      	ldr	r3, [r7, #20]
 801b536:	f023 0303 	bic.w	r3, r3, #3
 801b53a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801b53c:	697a      	ldr	r2, [r7, #20]
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	4313      	orrs	r3, r2
 801b542:	617b      	str	r3, [r7, #20]
 801b544:	e003      	b.n	801b54e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801b546:	697b      	ldr	r3, [r7, #20]
 801b548:	f043 0301 	orr.w	r3, r3, #1
 801b54c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801b54e:	697b      	ldr	r3, [r7, #20]
 801b550:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b554:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801b556:	683b      	ldr	r3, [r7, #0]
 801b558:	011b      	lsls	r3, r3, #4
 801b55a:	b2db      	uxtb	r3, r3
 801b55c:	697a      	ldr	r2, [r7, #20]
 801b55e:	4313      	orrs	r3, r2
 801b560:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801b562:	693b      	ldr	r3, [r7, #16]
 801b564:	f023 030a 	bic.w	r3, r3, #10
 801b568:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801b56a:	68bb      	ldr	r3, [r7, #8]
 801b56c:	f003 030a 	and.w	r3, r3, #10
 801b570:	693a      	ldr	r2, [r7, #16]
 801b572:	4313      	orrs	r3, r2
 801b574:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801b576:	68fb      	ldr	r3, [r7, #12]
 801b578:	697a      	ldr	r2, [r7, #20]
 801b57a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b57c:	68fb      	ldr	r3, [r7, #12]
 801b57e:	693a      	ldr	r2, [r7, #16]
 801b580:	621a      	str	r2, [r3, #32]
}
 801b582:	bf00      	nop
 801b584:	371c      	adds	r7, #28
 801b586:	46bd      	mov	sp, r7
 801b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b58c:	4770      	bx	lr
 801b58e:	bf00      	nop
 801b590:	40010000 	.word	0x40010000
 801b594:	40000400 	.word	0x40000400
 801b598:	40000800 	.word	0x40000800
 801b59c:	40000c00 	.word	0x40000c00
 801b5a0:	40014000 	.word	0x40014000

0801b5a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b5a4:	b480      	push	{r7}
 801b5a6:	b087      	sub	sp, #28
 801b5a8:	af00      	add	r7, sp, #0
 801b5aa:	60f8      	str	r0, [r7, #12]
 801b5ac:	60b9      	str	r1, [r7, #8]
 801b5ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801b5b0:	68fb      	ldr	r3, [r7, #12]
 801b5b2:	6a1b      	ldr	r3, [r3, #32]
 801b5b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b5b6:	68fb      	ldr	r3, [r7, #12]
 801b5b8:	6a1b      	ldr	r3, [r3, #32]
 801b5ba:	f023 0201 	bic.w	r2, r3, #1
 801b5be:	68fb      	ldr	r3, [r7, #12]
 801b5c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b5c2:	68fb      	ldr	r3, [r7, #12]
 801b5c4:	699b      	ldr	r3, [r3, #24]
 801b5c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801b5c8:	693b      	ldr	r3, [r7, #16]
 801b5ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b5ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	011b      	lsls	r3, r3, #4
 801b5d4:	693a      	ldr	r2, [r7, #16]
 801b5d6:	4313      	orrs	r3, r2
 801b5d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801b5da:	697b      	ldr	r3, [r7, #20]
 801b5dc:	f023 030a 	bic.w	r3, r3, #10
 801b5e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801b5e2:	697a      	ldr	r2, [r7, #20]
 801b5e4:	68bb      	ldr	r3, [r7, #8]
 801b5e6:	4313      	orrs	r3, r2
 801b5e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801b5ea:	68fb      	ldr	r3, [r7, #12]
 801b5ec:	693a      	ldr	r2, [r7, #16]
 801b5ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	697a      	ldr	r2, [r7, #20]
 801b5f4:	621a      	str	r2, [r3, #32]
}
 801b5f6:	bf00      	nop
 801b5f8:	371c      	adds	r7, #28
 801b5fa:	46bd      	mov	sp, r7
 801b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b600:	4770      	bx	lr

0801b602 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801b602:	b480      	push	{r7}
 801b604:	b087      	sub	sp, #28
 801b606:	af00      	add	r7, sp, #0
 801b608:	60f8      	str	r0, [r7, #12]
 801b60a:	60b9      	str	r1, [r7, #8]
 801b60c:	607a      	str	r2, [r7, #4]
 801b60e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b610:	68fb      	ldr	r3, [r7, #12]
 801b612:	6a1b      	ldr	r3, [r3, #32]
 801b614:	f023 0210 	bic.w	r2, r3, #16
 801b618:	68fb      	ldr	r3, [r7, #12]
 801b61a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b61c:	68fb      	ldr	r3, [r7, #12]
 801b61e:	699b      	ldr	r3, [r3, #24]
 801b620:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b622:	68fb      	ldr	r3, [r7, #12]
 801b624:	6a1b      	ldr	r3, [r3, #32]
 801b626:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801b628:	697b      	ldr	r3, [r7, #20]
 801b62a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b62e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	021b      	lsls	r3, r3, #8
 801b634:	697a      	ldr	r2, [r7, #20]
 801b636:	4313      	orrs	r3, r2
 801b638:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801b63a:	697b      	ldr	r3, [r7, #20]
 801b63c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801b640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801b642:	683b      	ldr	r3, [r7, #0]
 801b644:	031b      	lsls	r3, r3, #12
 801b646:	b29b      	uxth	r3, r3
 801b648:	697a      	ldr	r2, [r7, #20]
 801b64a:	4313      	orrs	r3, r2
 801b64c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801b64e:	693b      	ldr	r3, [r7, #16]
 801b650:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801b654:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801b656:	68bb      	ldr	r3, [r7, #8]
 801b658:	011b      	lsls	r3, r3, #4
 801b65a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801b65e:	693a      	ldr	r2, [r7, #16]
 801b660:	4313      	orrs	r3, r2
 801b662:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801b664:	68fb      	ldr	r3, [r7, #12]
 801b666:	697a      	ldr	r2, [r7, #20]
 801b668:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b66a:	68fb      	ldr	r3, [r7, #12]
 801b66c:	693a      	ldr	r2, [r7, #16]
 801b66e:	621a      	str	r2, [r3, #32]
}
 801b670:	bf00      	nop
 801b672:	371c      	adds	r7, #28
 801b674:	46bd      	mov	sp, r7
 801b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b67a:	4770      	bx	lr

0801b67c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b67c:	b480      	push	{r7}
 801b67e:	b087      	sub	sp, #28
 801b680:	af00      	add	r7, sp, #0
 801b682:	60f8      	str	r0, [r7, #12]
 801b684:	60b9      	str	r1, [r7, #8]
 801b686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b688:	68fb      	ldr	r3, [r7, #12]
 801b68a:	6a1b      	ldr	r3, [r3, #32]
 801b68c:	f023 0210 	bic.w	r2, r3, #16
 801b690:	68fb      	ldr	r3, [r7, #12]
 801b692:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b694:	68fb      	ldr	r3, [r7, #12]
 801b696:	699b      	ldr	r3, [r3, #24]
 801b698:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b69a:	68fb      	ldr	r3, [r7, #12]
 801b69c:	6a1b      	ldr	r3, [r3, #32]
 801b69e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801b6a0:	697b      	ldr	r3, [r7, #20]
 801b6a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801b6a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	031b      	lsls	r3, r3, #12
 801b6ac:	697a      	ldr	r2, [r7, #20]
 801b6ae:	4313      	orrs	r3, r2
 801b6b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801b6b2:	693b      	ldr	r3, [r7, #16]
 801b6b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801b6b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801b6ba:	68bb      	ldr	r3, [r7, #8]
 801b6bc:	011b      	lsls	r3, r3, #4
 801b6be:	693a      	ldr	r2, [r7, #16]
 801b6c0:	4313      	orrs	r3, r2
 801b6c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801b6c4:	68fb      	ldr	r3, [r7, #12]
 801b6c6:	697a      	ldr	r2, [r7, #20]
 801b6c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b6ca:	68fb      	ldr	r3, [r7, #12]
 801b6cc:	693a      	ldr	r2, [r7, #16]
 801b6ce:	621a      	str	r2, [r3, #32]
}
 801b6d0:	bf00      	nop
 801b6d2:	371c      	adds	r7, #28
 801b6d4:	46bd      	mov	sp, r7
 801b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6da:	4770      	bx	lr

0801b6dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801b6dc:	b480      	push	{r7}
 801b6de:	b087      	sub	sp, #28
 801b6e0:	af00      	add	r7, sp, #0
 801b6e2:	60f8      	str	r0, [r7, #12]
 801b6e4:	60b9      	str	r1, [r7, #8]
 801b6e6:	607a      	str	r2, [r7, #4]
 801b6e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801b6ea:	68fb      	ldr	r3, [r7, #12]
 801b6ec:	6a1b      	ldr	r3, [r3, #32]
 801b6ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b6f2:	68fb      	ldr	r3, [r7, #12]
 801b6f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801b6f6:	68fb      	ldr	r3, [r7, #12]
 801b6f8:	69db      	ldr	r3, [r3, #28]
 801b6fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b6fc:	68fb      	ldr	r3, [r7, #12]
 801b6fe:	6a1b      	ldr	r3, [r3, #32]
 801b700:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801b702:	697b      	ldr	r3, [r7, #20]
 801b704:	f023 0303 	bic.w	r3, r3, #3
 801b708:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 801b70a:	697a      	ldr	r2, [r7, #20]
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	4313      	orrs	r3, r2
 801b710:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 801b712:	697b      	ldr	r3, [r7, #20]
 801b714:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b718:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801b71a:	683b      	ldr	r3, [r7, #0]
 801b71c:	011b      	lsls	r3, r3, #4
 801b71e:	b2db      	uxtb	r3, r3
 801b720:	697a      	ldr	r2, [r7, #20]
 801b722:	4313      	orrs	r3, r2
 801b724:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801b726:	693b      	ldr	r3, [r7, #16]
 801b728:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 801b72c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801b72e:	68bb      	ldr	r3, [r7, #8]
 801b730:	021b      	lsls	r3, r3, #8
 801b732:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 801b736:	693a      	ldr	r2, [r7, #16]
 801b738:	4313      	orrs	r3, r2
 801b73a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801b73c:	68fb      	ldr	r3, [r7, #12]
 801b73e:	697a      	ldr	r2, [r7, #20]
 801b740:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801b742:	68fb      	ldr	r3, [r7, #12]
 801b744:	693a      	ldr	r2, [r7, #16]
 801b746:	621a      	str	r2, [r3, #32]
}
 801b748:	bf00      	nop
 801b74a:	371c      	adds	r7, #28
 801b74c:	46bd      	mov	sp, r7
 801b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b752:	4770      	bx	lr

0801b754 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801b754:	b480      	push	{r7}
 801b756:	b087      	sub	sp, #28
 801b758:	af00      	add	r7, sp, #0
 801b75a:	60f8      	str	r0, [r7, #12]
 801b75c:	60b9      	str	r1, [r7, #8]
 801b75e:	607a      	str	r2, [r7, #4]
 801b760:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801b762:	68fb      	ldr	r3, [r7, #12]
 801b764:	6a1b      	ldr	r3, [r3, #32]
 801b766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801b76a:	68fb      	ldr	r3, [r7, #12]
 801b76c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801b76e:	68fb      	ldr	r3, [r7, #12]
 801b770:	69db      	ldr	r3, [r3, #28]
 801b772:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b774:	68fb      	ldr	r3, [r7, #12]
 801b776:	6a1b      	ldr	r3, [r3, #32]
 801b778:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801b77a:	697b      	ldr	r3, [r7, #20]
 801b77c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b780:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	021b      	lsls	r3, r3, #8
 801b786:	697a      	ldr	r2, [r7, #20]
 801b788:	4313      	orrs	r3, r2
 801b78a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 801b78c:	697b      	ldr	r3, [r7, #20]
 801b78e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801b792:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801b794:	683b      	ldr	r3, [r7, #0]
 801b796:	031b      	lsls	r3, r3, #12
 801b798:	b29b      	uxth	r3, r3
 801b79a:	697a      	ldr	r2, [r7, #20]
 801b79c:	4313      	orrs	r3, r2
 801b79e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801b7a0:	693b      	ldr	r3, [r7, #16]
 801b7a2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801b7a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801b7a8:	68bb      	ldr	r3, [r7, #8]
 801b7aa:	031b      	lsls	r3, r3, #12
 801b7ac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 801b7b0:	693a      	ldr	r2, [r7, #16]
 801b7b2:	4313      	orrs	r3, r2
 801b7b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801b7b6:	68fb      	ldr	r3, [r7, #12]
 801b7b8:	697a      	ldr	r2, [r7, #20]
 801b7ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	693a      	ldr	r2, [r7, #16]
 801b7c0:	621a      	str	r2, [r3, #32]
}
 801b7c2:	bf00      	nop
 801b7c4:	371c      	adds	r7, #28
 801b7c6:	46bd      	mov	sp, r7
 801b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7cc:	4770      	bx	lr

0801b7ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801b7ce:	b480      	push	{r7}
 801b7d0:	b085      	sub	sp, #20
 801b7d2:	af00      	add	r7, sp, #0
 801b7d4:	6078      	str	r0, [r7, #4]
 801b7d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	689b      	ldr	r3, [r3, #8]
 801b7dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801b7de:	68fb      	ldr	r3, [r7, #12]
 801b7e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b7e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801b7e6:	683a      	ldr	r2, [r7, #0]
 801b7e8:	68fb      	ldr	r3, [r7, #12]
 801b7ea:	4313      	orrs	r3, r2
 801b7ec:	f043 0307 	orr.w	r3, r3, #7
 801b7f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	68fa      	ldr	r2, [r7, #12]
 801b7f6:	609a      	str	r2, [r3, #8]
}
 801b7f8:	bf00      	nop
 801b7fa:	3714      	adds	r7, #20
 801b7fc:	46bd      	mov	sp, r7
 801b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b802:	4770      	bx	lr

0801b804 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801b804:	b480      	push	{r7}
 801b806:	b087      	sub	sp, #28
 801b808:	af00      	add	r7, sp, #0
 801b80a:	60f8      	str	r0, [r7, #12]
 801b80c:	60b9      	str	r1, [r7, #8]
 801b80e:	607a      	str	r2, [r7, #4]
 801b810:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801b812:	68fb      	ldr	r3, [r7, #12]
 801b814:	689b      	ldr	r3, [r3, #8]
 801b816:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b818:	697b      	ldr	r3, [r7, #20]
 801b81a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b81e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801b820:	683b      	ldr	r3, [r7, #0]
 801b822:	021a      	lsls	r2, r3, #8
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	431a      	orrs	r2, r3
 801b828:	68bb      	ldr	r3, [r7, #8]
 801b82a:	4313      	orrs	r3, r2
 801b82c:	697a      	ldr	r2, [r7, #20]
 801b82e:	4313      	orrs	r3, r2
 801b830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	697a      	ldr	r2, [r7, #20]
 801b836:	609a      	str	r2, [r3, #8]
}
 801b838:	bf00      	nop
 801b83a:	371c      	adds	r7, #28
 801b83c:	46bd      	mov	sp, r7
 801b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b842:	4770      	bx	lr

0801b844 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801b844:	b480      	push	{r7}
 801b846:	b087      	sub	sp, #28
 801b848:	af00      	add	r7, sp, #0
 801b84a:	60f8      	str	r0, [r7, #12]
 801b84c:	60b9      	str	r1, [r7, #8]
 801b84e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801b850:	68bb      	ldr	r3, [r7, #8]
 801b852:	f003 031f 	and.w	r3, r3, #31
 801b856:	2201      	movs	r2, #1
 801b858:	fa02 f303 	lsl.w	r3, r2, r3
 801b85c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801b85e:	68fb      	ldr	r3, [r7, #12]
 801b860:	6a1a      	ldr	r2, [r3, #32]
 801b862:	697b      	ldr	r3, [r7, #20]
 801b864:	43db      	mvns	r3, r3
 801b866:	401a      	ands	r2, r3
 801b868:	68fb      	ldr	r3, [r7, #12]
 801b86a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801b86c:	68fb      	ldr	r3, [r7, #12]
 801b86e:	6a1a      	ldr	r2, [r3, #32]
 801b870:	68bb      	ldr	r3, [r7, #8]
 801b872:	f003 031f 	and.w	r3, r3, #31
 801b876:	6879      	ldr	r1, [r7, #4]
 801b878:	fa01 f303 	lsl.w	r3, r1, r3
 801b87c:	431a      	orrs	r2, r3
 801b87e:	68fb      	ldr	r3, [r7, #12]
 801b880:	621a      	str	r2, [r3, #32]
}
 801b882:	bf00      	nop
 801b884:	371c      	adds	r7, #28
 801b886:	46bd      	mov	sp, r7
 801b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b88c:	4770      	bx	lr
	...

0801b890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801b890:	b480      	push	{r7}
 801b892:	b085      	sub	sp, #20
 801b894:	af00      	add	r7, sp, #0
 801b896:	6078      	str	r0, [r7, #4]
 801b898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b8a0:	2b01      	cmp	r3, #1
 801b8a2:	d101      	bne.n	801b8a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801b8a4:	2302      	movs	r3, #2
 801b8a6:	e050      	b.n	801b94a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 801b8a8:	687b      	ldr	r3, [r7, #4]
 801b8aa:	2201      	movs	r2, #1
 801b8ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	2202      	movs	r2, #2
 801b8b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	681b      	ldr	r3, [r3, #0]
 801b8bc:	685b      	ldr	r3, [r3, #4]
 801b8be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	681b      	ldr	r3, [r3, #0]
 801b8c4:	689b      	ldr	r3, [r3, #8]
 801b8c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801b8c8:	68fb      	ldr	r3, [r7, #12]
 801b8ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b8ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801b8d0:	683b      	ldr	r3, [r7, #0]
 801b8d2:	681b      	ldr	r3, [r3, #0]
 801b8d4:	68fa      	ldr	r2, [r7, #12]
 801b8d6:	4313      	orrs	r3, r2
 801b8d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	681b      	ldr	r3, [r3, #0]
 801b8de:	68fa      	ldr	r2, [r7, #12]
 801b8e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	681b      	ldr	r3, [r3, #0]
 801b8e6:	4a1c      	ldr	r2, [pc, #112]	; (801b958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801b8e8:	4293      	cmp	r3, r2
 801b8ea:	d018      	beq.n	801b91e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b8f4:	d013      	beq.n	801b91e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	681b      	ldr	r3, [r3, #0]
 801b8fa:	4a18      	ldr	r2, [pc, #96]	; (801b95c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801b8fc:	4293      	cmp	r3, r2
 801b8fe:	d00e      	beq.n	801b91e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b900:	687b      	ldr	r3, [r7, #4]
 801b902:	681b      	ldr	r3, [r3, #0]
 801b904:	4a16      	ldr	r2, [pc, #88]	; (801b960 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801b906:	4293      	cmp	r3, r2
 801b908:	d009      	beq.n	801b91e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	4a15      	ldr	r2, [pc, #84]	; (801b964 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801b910:	4293      	cmp	r3, r2
 801b912:	d004      	beq.n	801b91e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	681b      	ldr	r3, [r3, #0]
 801b918:	4a13      	ldr	r2, [pc, #76]	; (801b968 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801b91a:	4293      	cmp	r3, r2
 801b91c:	d10c      	bne.n	801b938 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801b91e:	68bb      	ldr	r3, [r7, #8]
 801b920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b924:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801b926:	683b      	ldr	r3, [r7, #0]
 801b928:	685b      	ldr	r3, [r3, #4]
 801b92a:	68ba      	ldr	r2, [r7, #8]
 801b92c:	4313      	orrs	r3, r2
 801b92e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801b930:	687b      	ldr	r3, [r7, #4]
 801b932:	681b      	ldr	r3, [r3, #0]
 801b934:	68ba      	ldr	r2, [r7, #8]
 801b936:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801b938:	687b      	ldr	r3, [r7, #4]
 801b93a:	2201      	movs	r2, #1
 801b93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	2200      	movs	r2, #0
 801b944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801b948:	2300      	movs	r3, #0
}
 801b94a:	4618      	mov	r0, r3
 801b94c:	3714      	adds	r7, #20
 801b94e:	46bd      	mov	sp, r7
 801b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b954:	4770      	bx	lr
 801b956:	bf00      	nop
 801b958:	40010000 	.word	0x40010000
 801b95c:	40000400 	.word	0x40000400
 801b960:	40000800 	.word	0x40000800
 801b964:	40000c00 	.word	0x40000c00
 801b968:	40014000 	.word	0x40014000

0801b96c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801b96c:	b480      	push	{r7}
 801b96e:	b083      	sub	sp, #12
 801b970:	af00      	add	r7, sp, #0
 801b972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801b974:	bf00      	nop
 801b976:	370c      	adds	r7, #12
 801b978:	46bd      	mov	sp, r7
 801b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b97e:	4770      	bx	lr

0801b980 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801b980:	b480      	push	{r7}
 801b982:	b083      	sub	sp, #12
 801b984:	af00      	add	r7, sp, #0
 801b986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801b988:	bf00      	nop
 801b98a:	370c      	adds	r7, #12
 801b98c:	46bd      	mov	sp, r7
 801b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b992:	4770      	bx	lr

0801b994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801b994:	b580      	push	{r7, lr}
 801b996:	b082      	sub	sp, #8
 801b998:	af00      	add	r7, sp, #0
 801b99a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	2b00      	cmp	r3, #0
 801b9a0:	d101      	bne.n	801b9a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801b9a2:	2301      	movs	r3, #1
 801b9a4:	e03f      	b.n	801ba26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801b9ac:	b2db      	uxtb	r3, r3
 801b9ae:	2b00      	cmp	r3, #0
 801b9b0:	d106      	bne.n	801b9c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	2200      	movs	r2, #0
 801b9b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801b9ba:	6878      	ldr	r0, [r7, #4]
 801b9bc:	f7f9 f882 	bl	8014ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	2224      	movs	r2, #36	; 0x24
 801b9c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	68da      	ldr	r2, [r3, #12]
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801b9d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801b9d8:	6878      	ldr	r0, [r7, #4]
 801b9da:	f000 fc6d 	bl	801c2b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	681b      	ldr	r3, [r3, #0]
 801b9e2:	691a      	ldr	r2, [r3, #16]
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801b9ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801b9ee:	687b      	ldr	r3, [r7, #4]
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	695a      	ldr	r2, [r3, #20]
 801b9f4:	687b      	ldr	r3, [r7, #4]
 801b9f6:	681b      	ldr	r3, [r3, #0]
 801b9f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801b9fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	681b      	ldr	r3, [r3, #0]
 801ba02:	68da      	ldr	r2, [r3, #12]
 801ba04:	687b      	ldr	r3, [r7, #4]
 801ba06:	681b      	ldr	r3, [r3, #0]
 801ba08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801ba0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	2200      	movs	r2, #0
 801ba12:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	2220      	movs	r2, #32
 801ba18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	2220      	movs	r2, #32
 801ba20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 801ba24:	2300      	movs	r3, #0
}
 801ba26:	4618      	mov	r0, r3
 801ba28:	3708      	adds	r7, #8
 801ba2a:	46bd      	mov	sp, r7
 801ba2c:	bd80      	pop	{r7, pc}

0801ba2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801ba2e:	b580      	push	{r7, lr}
 801ba30:	b088      	sub	sp, #32
 801ba32:	af02      	add	r7, sp, #8
 801ba34:	60f8      	str	r0, [r7, #12]
 801ba36:	60b9      	str	r1, [r7, #8]
 801ba38:	603b      	str	r3, [r7, #0]
 801ba3a:	4613      	mov	r3, r2
 801ba3c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 801ba3e:	2300      	movs	r3, #0
 801ba40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801ba42:	68fb      	ldr	r3, [r7, #12]
 801ba44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801ba48:	b2db      	uxtb	r3, r3
 801ba4a:	2b20      	cmp	r3, #32
 801ba4c:	f040 8083 	bne.w	801bb56 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 801ba50:	68bb      	ldr	r3, [r7, #8]
 801ba52:	2b00      	cmp	r3, #0
 801ba54:	d002      	beq.n	801ba5c <HAL_UART_Transmit+0x2e>
 801ba56:	88fb      	ldrh	r3, [r7, #6]
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	d101      	bne.n	801ba60 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 801ba5c:	2301      	movs	r3, #1
 801ba5e:	e07b      	b.n	801bb58 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801ba60:	68fb      	ldr	r3, [r7, #12]
 801ba62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801ba66:	2b01      	cmp	r3, #1
 801ba68:	d101      	bne.n	801ba6e <HAL_UART_Transmit+0x40>
 801ba6a:	2302      	movs	r3, #2
 801ba6c:	e074      	b.n	801bb58 <HAL_UART_Transmit+0x12a>
 801ba6e:	68fb      	ldr	r3, [r7, #12]
 801ba70:	2201      	movs	r2, #1
 801ba72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ba76:	68fb      	ldr	r3, [r7, #12]
 801ba78:	2200      	movs	r2, #0
 801ba7a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801ba7c:	68fb      	ldr	r3, [r7, #12]
 801ba7e:	2221      	movs	r2, #33	; 0x21
 801ba80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 801ba84:	f7f9 f996 	bl	8014db4 <HAL_GetTick>
 801ba88:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801ba8a:	68fb      	ldr	r3, [r7, #12]
 801ba8c:	88fa      	ldrh	r2, [r7, #6]
 801ba8e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801ba90:	68fb      	ldr	r3, [r7, #12]
 801ba92:	88fa      	ldrh	r2, [r7, #6]
 801ba94:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801ba96:	68fb      	ldr	r3, [r7, #12]
 801ba98:	2200      	movs	r2, #0
 801ba9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 801ba9e:	e042      	b.n	801bb26 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 801baa0:	68fb      	ldr	r3, [r7, #12]
 801baa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801baa4:	b29b      	uxth	r3, r3
 801baa6:	3b01      	subs	r3, #1
 801baa8:	b29a      	uxth	r2, r3
 801baaa:	68fb      	ldr	r3, [r7, #12]
 801baac:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801baae:	68fb      	ldr	r3, [r7, #12]
 801bab0:	689b      	ldr	r3, [r3, #8]
 801bab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801bab6:	d122      	bne.n	801bafe <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801bab8:	683b      	ldr	r3, [r7, #0]
 801baba:	9300      	str	r3, [sp, #0]
 801babc:	697b      	ldr	r3, [r7, #20]
 801babe:	2200      	movs	r2, #0
 801bac0:	2180      	movs	r1, #128	; 0x80
 801bac2:	68f8      	ldr	r0, [r7, #12]
 801bac4:	f000 fa76 	bl	801bfb4 <UART_WaitOnFlagUntilTimeout>
 801bac8:	4603      	mov	r3, r0
 801baca:	2b00      	cmp	r3, #0
 801bacc:	d001      	beq.n	801bad2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 801bace:	2303      	movs	r3, #3
 801bad0:	e042      	b.n	801bb58 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 801bad2:	68bb      	ldr	r3, [r7, #8]
 801bad4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 801bad6:	693b      	ldr	r3, [r7, #16]
 801bad8:	881b      	ldrh	r3, [r3, #0]
 801bada:	461a      	mov	r2, r3
 801badc:	68fb      	ldr	r3, [r7, #12]
 801bade:	681b      	ldr	r3, [r3, #0]
 801bae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801bae4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 801bae6:	68fb      	ldr	r3, [r7, #12]
 801bae8:	691b      	ldr	r3, [r3, #16]
 801baea:	2b00      	cmp	r3, #0
 801baec:	d103      	bne.n	801baf6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 801baee:	68bb      	ldr	r3, [r7, #8]
 801baf0:	3302      	adds	r3, #2
 801baf2:	60bb      	str	r3, [r7, #8]
 801baf4:	e017      	b.n	801bb26 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 801baf6:	68bb      	ldr	r3, [r7, #8]
 801baf8:	3301      	adds	r3, #1
 801bafa:	60bb      	str	r3, [r7, #8]
 801bafc:	e013      	b.n	801bb26 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801bafe:	683b      	ldr	r3, [r7, #0]
 801bb00:	9300      	str	r3, [sp, #0]
 801bb02:	697b      	ldr	r3, [r7, #20]
 801bb04:	2200      	movs	r2, #0
 801bb06:	2180      	movs	r1, #128	; 0x80
 801bb08:	68f8      	ldr	r0, [r7, #12]
 801bb0a:	f000 fa53 	bl	801bfb4 <UART_WaitOnFlagUntilTimeout>
 801bb0e:	4603      	mov	r3, r0
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	d001      	beq.n	801bb18 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 801bb14:	2303      	movs	r3, #3
 801bb16:	e01f      	b.n	801bb58 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 801bb18:	68bb      	ldr	r3, [r7, #8]
 801bb1a:	1c5a      	adds	r2, r3, #1
 801bb1c:	60ba      	str	r2, [r7, #8]
 801bb1e:	781a      	ldrb	r2, [r3, #0]
 801bb20:	68fb      	ldr	r3, [r7, #12]
 801bb22:	681b      	ldr	r3, [r3, #0]
 801bb24:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 801bb26:	68fb      	ldr	r3, [r7, #12]
 801bb28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801bb2a:	b29b      	uxth	r3, r3
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d1b7      	bne.n	801baa0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801bb30:	683b      	ldr	r3, [r7, #0]
 801bb32:	9300      	str	r3, [sp, #0]
 801bb34:	697b      	ldr	r3, [r7, #20]
 801bb36:	2200      	movs	r2, #0
 801bb38:	2140      	movs	r1, #64	; 0x40
 801bb3a:	68f8      	ldr	r0, [r7, #12]
 801bb3c:	f000 fa3a 	bl	801bfb4 <UART_WaitOnFlagUntilTimeout>
 801bb40:	4603      	mov	r3, r0
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	d001      	beq.n	801bb4a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 801bb46:	2303      	movs	r3, #3
 801bb48:	e006      	b.n	801bb58 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801bb4a:	68fb      	ldr	r3, [r7, #12]
 801bb4c:	2220      	movs	r2, #32
 801bb4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 801bb52:	2300      	movs	r3, #0
 801bb54:	e000      	b.n	801bb58 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 801bb56:	2302      	movs	r3, #2
  }
}
 801bb58:	4618      	mov	r0, r3
 801bb5a:	3718      	adds	r7, #24
 801bb5c:	46bd      	mov	sp, r7
 801bb5e:	bd80      	pop	{r7, pc}

0801bb60 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801bb60:	b580      	push	{r7, lr}
 801bb62:	b086      	sub	sp, #24
 801bb64:	af00      	add	r7, sp, #0
 801bb66:	60f8      	str	r0, [r7, #12]
 801bb68:	60b9      	str	r1, [r7, #8]
 801bb6a:	4613      	mov	r3, r2
 801bb6c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801bb6e:	68fb      	ldr	r3, [r7, #12]
 801bb70:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801bb74:	b2db      	uxtb	r3, r3
 801bb76:	2b20      	cmp	r3, #32
 801bb78:	d166      	bne.n	801bc48 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 801bb7a:	68bb      	ldr	r3, [r7, #8]
 801bb7c:	2b00      	cmp	r3, #0
 801bb7e:	d002      	beq.n	801bb86 <HAL_UART_Receive_DMA+0x26>
 801bb80:	88fb      	ldrh	r3, [r7, #6]
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d101      	bne.n	801bb8a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801bb86:	2301      	movs	r3, #1
 801bb88:	e05f      	b.n	801bc4a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801bb8a:	68fb      	ldr	r3, [r7, #12]
 801bb8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bb90:	2b01      	cmp	r3, #1
 801bb92:	d101      	bne.n	801bb98 <HAL_UART_Receive_DMA+0x38>
 801bb94:	2302      	movs	r3, #2
 801bb96:	e058      	b.n	801bc4a <HAL_UART_Receive_DMA+0xea>
 801bb98:	68fb      	ldr	r3, [r7, #12]
 801bb9a:	2201      	movs	r2, #1
 801bb9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 801bba0:	68ba      	ldr	r2, [r7, #8]
 801bba2:	68fb      	ldr	r3, [r7, #12]
 801bba4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 801bba6:	68fb      	ldr	r3, [r7, #12]
 801bba8:	88fa      	ldrh	r2, [r7, #6]
 801bbaa:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bbac:	68fb      	ldr	r3, [r7, #12]
 801bbae:	2200      	movs	r2, #0
 801bbb0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801bbb2:	68fb      	ldr	r3, [r7, #12]
 801bbb4:	2222      	movs	r2, #34	; 0x22
 801bbb6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801bbba:	68fb      	ldr	r3, [r7, #12]
 801bbbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bbbe:	4a25      	ldr	r2, [pc, #148]	; (801bc54 <HAL_UART_Receive_DMA+0xf4>)
 801bbc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801bbc2:	68fb      	ldr	r3, [r7, #12]
 801bbc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bbc6:	4a24      	ldr	r2, [pc, #144]	; (801bc58 <HAL_UART_Receive_DMA+0xf8>)
 801bbc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801bbca:	68fb      	ldr	r3, [r7, #12]
 801bbcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bbce:	4a23      	ldr	r2, [pc, #140]	; (801bc5c <HAL_UART_Receive_DMA+0xfc>)
 801bbd0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801bbd2:	68fb      	ldr	r3, [r7, #12]
 801bbd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bbd6:	2200      	movs	r2, #0
 801bbd8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 801bbda:	f107 0308 	add.w	r3, r7, #8
 801bbde:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801bbe0:	68fb      	ldr	r3, [r7, #12]
 801bbe2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801bbe4:	68fb      	ldr	r3, [r7, #12]
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	3304      	adds	r3, #4
 801bbea:	4619      	mov	r1, r3
 801bbec:	697b      	ldr	r3, [r7, #20]
 801bbee:	681a      	ldr	r2, [r3, #0]
 801bbf0:	88fb      	ldrh	r3, [r7, #6]
 801bbf2:	f7f9 fa9d 	bl	8015130 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 801bbf6:	2300      	movs	r3, #0
 801bbf8:	613b      	str	r3, [r7, #16]
 801bbfa:	68fb      	ldr	r3, [r7, #12]
 801bbfc:	681b      	ldr	r3, [r3, #0]
 801bbfe:	681b      	ldr	r3, [r3, #0]
 801bc00:	613b      	str	r3, [r7, #16]
 801bc02:	68fb      	ldr	r3, [r7, #12]
 801bc04:	681b      	ldr	r3, [r3, #0]
 801bc06:	685b      	ldr	r3, [r3, #4]
 801bc08:	613b      	str	r3, [r7, #16]
 801bc0a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801bc0c:	68fb      	ldr	r3, [r7, #12]
 801bc0e:	2200      	movs	r2, #0
 801bc10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	681b      	ldr	r3, [r3, #0]
 801bc18:	68da      	ldr	r2, [r3, #12]
 801bc1a:	68fb      	ldr	r3, [r7, #12]
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801bc22:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bc24:	68fb      	ldr	r3, [r7, #12]
 801bc26:	681b      	ldr	r3, [r3, #0]
 801bc28:	695a      	ldr	r2, [r3, #20]
 801bc2a:	68fb      	ldr	r3, [r7, #12]
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	f042 0201 	orr.w	r2, r2, #1
 801bc32:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bc34:	68fb      	ldr	r3, [r7, #12]
 801bc36:	681b      	ldr	r3, [r3, #0]
 801bc38:	695a      	ldr	r2, [r3, #20]
 801bc3a:	68fb      	ldr	r3, [r7, #12]
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801bc42:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 801bc44:	2300      	movs	r3, #0
 801bc46:	e000      	b.n	801bc4a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 801bc48:	2302      	movs	r3, #2
  }
}
 801bc4a:	4618      	mov	r0, r3
 801bc4c:	3718      	adds	r7, #24
 801bc4e:	46bd      	mov	sp, r7
 801bc50:	bd80      	pop	{r7, pc}
 801bc52:	bf00      	nop
 801bc54:	0801be9d 	.word	0x0801be9d
 801bc58:	0801bf05 	.word	0x0801bf05
 801bc5c:	0801bf21 	.word	0x0801bf21

0801bc60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801bc60:	b580      	push	{r7, lr}
 801bc62:	b088      	sub	sp, #32
 801bc64:	af00      	add	r7, sp, #0
 801bc66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801bc68:	687b      	ldr	r3, [r7, #4]
 801bc6a:	681b      	ldr	r3, [r3, #0]
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	681b      	ldr	r3, [r3, #0]
 801bc74:	68db      	ldr	r3, [r3, #12]
 801bc76:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	695b      	ldr	r3, [r3, #20]
 801bc7e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 801bc80:	2300      	movs	r3, #0
 801bc82:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 801bc84:	2300      	movs	r3, #0
 801bc86:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801bc88:	69fb      	ldr	r3, [r7, #28]
 801bc8a:	f003 030f 	and.w	r3, r3, #15
 801bc8e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 801bc90:	693b      	ldr	r3, [r7, #16]
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	d10d      	bne.n	801bcb2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801bc96:	69fb      	ldr	r3, [r7, #28]
 801bc98:	f003 0320 	and.w	r3, r3, #32
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d008      	beq.n	801bcb2 <HAL_UART_IRQHandler+0x52>
 801bca0:	69bb      	ldr	r3, [r7, #24]
 801bca2:	f003 0320 	and.w	r3, r3, #32
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d003      	beq.n	801bcb2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 801bcaa:	6878      	ldr	r0, [r7, #4]
 801bcac:	f000 fa82 	bl	801c1b4 <UART_Receive_IT>
      return;
 801bcb0:	e0d1      	b.n	801be56 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801bcb2:	693b      	ldr	r3, [r7, #16]
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	f000 80b0 	beq.w	801be1a <HAL_UART_IRQHandler+0x1ba>
 801bcba:	697b      	ldr	r3, [r7, #20]
 801bcbc:	f003 0301 	and.w	r3, r3, #1
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	d105      	bne.n	801bcd0 <HAL_UART_IRQHandler+0x70>
 801bcc4:	69bb      	ldr	r3, [r7, #24]
 801bcc6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	f000 80a5 	beq.w	801be1a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801bcd0:	69fb      	ldr	r3, [r7, #28]
 801bcd2:	f003 0301 	and.w	r3, r3, #1
 801bcd6:	2b00      	cmp	r3, #0
 801bcd8:	d00a      	beq.n	801bcf0 <HAL_UART_IRQHandler+0x90>
 801bcda:	69bb      	ldr	r3, [r7, #24]
 801bcdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bce0:	2b00      	cmp	r3, #0
 801bce2:	d005      	beq.n	801bcf0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bce8:	f043 0201 	orr.w	r2, r3, #1
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801bcf0:	69fb      	ldr	r3, [r7, #28]
 801bcf2:	f003 0304 	and.w	r3, r3, #4
 801bcf6:	2b00      	cmp	r3, #0
 801bcf8:	d00a      	beq.n	801bd10 <HAL_UART_IRQHandler+0xb0>
 801bcfa:	697b      	ldr	r3, [r7, #20]
 801bcfc:	f003 0301 	and.w	r3, r3, #1
 801bd00:	2b00      	cmp	r3, #0
 801bd02:	d005      	beq.n	801bd10 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bd08:	f043 0202 	orr.w	r2, r3, #2
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801bd10:	69fb      	ldr	r3, [r7, #28]
 801bd12:	f003 0302 	and.w	r3, r3, #2
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d00a      	beq.n	801bd30 <HAL_UART_IRQHandler+0xd0>
 801bd1a:	697b      	ldr	r3, [r7, #20]
 801bd1c:	f003 0301 	and.w	r3, r3, #1
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d005      	beq.n	801bd30 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bd28:	f043 0204 	orr.w	r2, r3, #4
 801bd2c:	687b      	ldr	r3, [r7, #4]
 801bd2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 801bd30:	69fb      	ldr	r3, [r7, #28]
 801bd32:	f003 0308 	and.w	r3, r3, #8
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	d00f      	beq.n	801bd5a <HAL_UART_IRQHandler+0xfa>
 801bd3a:	69bb      	ldr	r3, [r7, #24]
 801bd3c:	f003 0320 	and.w	r3, r3, #32
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	d104      	bne.n	801bd4e <HAL_UART_IRQHandler+0xee>
 801bd44:	697b      	ldr	r3, [r7, #20]
 801bd46:	f003 0301 	and.w	r3, r3, #1
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d005      	beq.n	801bd5a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bd52:	f043 0208 	orr.w	r2, r3, #8
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	d078      	beq.n	801be54 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801bd62:	69fb      	ldr	r3, [r7, #28]
 801bd64:	f003 0320 	and.w	r3, r3, #32
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	d007      	beq.n	801bd7c <HAL_UART_IRQHandler+0x11c>
 801bd6c:	69bb      	ldr	r3, [r7, #24]
 801bd6e:	f003 0320 	and.w	r3, r3, #32
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d002      	beq.n	801bd7c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 801bd76:	6878      	ldr	r0, [r7, #4]
 801bd78:	f000 fa1c 	bl	801c1b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	681b      	ldr	r3, [r3, #0]
 801bd80:	695b      	ldr	r3, [r3, #20]
 801bd82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bd86:	2b40      	cmp	r3, #64	; 0x40
 801bd88:	bf0c      	ite	eq
 801bd8a:	2301      	moveq	r3, #1
 801bd8c:	2300      	movne	r3, #0
 801bd8e:	b2db      	uxtb	r3, r3
 801bd90:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bd96:	f003 0308 	and.w	r3, r3, #8
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d102      	bne.n	801bda4 <HAL_UART_IRQHandler+0x144>
 801bd9e:	68fb      	ldr	r3, [r7, #12]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d031      	beq.n	801be08 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801bda4:	6878      	ldr	r0, [r7, #4]
 801bda6:	f000 f965 	bl	801c074 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bdaa:	687b      	ldr	r3, [r7, #4]
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	695b      	ldr	r3, [r3, #20]
 801bdb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bdb4:	2b40      	cmp	r3, #64	; 0x40
 801bdb6:	d123      	bne.n	801be00 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bdb8:	687b      	ldr	r3, [r7, #4]
 801bdba:	681b      	ldr	r3, [r3, #0]
 801bdbc:	695a      	ldr	r2, [r3, #20]
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	681b      	ldr	r3, [r3, #0]
 801bdc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801bdc6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bdcc:	2b00      	cmp	r3, #0
 801bdce:	d013      	beq.n	801bdf8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bdd4:	4a21      	ldr	r2, [pc, #132]	; (801be5c <HAL_UART_IRQHandler+0x1fc>)
 801bdd6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bddc:	4618      	mov	r0, r3
 801bdde:	f7f9 f9ff 	bl	80151e0 <HAL_DMA_Abort_IT>
 801bde2:	4603      	mov	r3, r0
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d016      	beq.n	801be16 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bdec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bdee:	687a      	ldr	r2, [r7, #4]
 801bdf0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801bdf2:	4610      	mov	r0, r2
 801bdf4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bdf6:	e00e      	b.n	801be16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801bdf8:	6878      	ldr	r0, [r7, #4]
 801bdfa:	f000 f845 	bl	801be88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bdfe:	e00a      	b.n	801be16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801be00:	6878      	ldr	r0, [r7, #4]
 801be02:	f000 f841 	bl	801be88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801be06:	e006      	b.n	801be16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801be08:	6878      	ldr	r0, [r7, #4]
 801be0a:	f000 f83d 	bl	801be88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801be0e:	687b      	ldr	r3, [r7, #4]
 801be10:	2200      	movs	r2, #0
 801be12:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 801be14:	e01e      	b.n	801be54 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801be16:	bf00      	nop
    return;
 801be18:	e01c      	b.n	801be54 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801be1a:	69fb      	ldr	r3, [r7, #28]
 801be1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801be20:	2b00      	cmp	r3, #0
 801be22:	d008      	beq.n	801be36 <HAL_UART_IRQHandler+0x1d6>
 801be24:	69bb      	ldr	r3, [r7, #24]
 801be26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d003      	beq.n	801be36 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 801be2e:	6878      	ldr	r0, [r7, #4]
 801be30:	f000 f952 	bl	801c0d8 <UART_Transmit_IT>
    return;
 801be34:	e00f      	b.n	801be56 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801be36:	69fb      	ldr	r3, [r7, #28]
 801be38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d00a      	beq.n	801be56 <HAL_UART_IRQHandler+0x1f6>
 801be40:	69bb      	ldr	r3, [r7, #24]
 801be42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801be46:	2b00      	cmp	r3, #0
 801be48:	d005      	beq.n	801be56 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 801be4a:	6878      	ldr	r0, [r7, #4]
 801be4c:	f000 f99a 	bl	801c184 <UART_EndTransmit_IT>
    return;
 801be50:	bf00      	nop
 801be52:	e000      	b.n	801be56 <HAL_UART_IRQHandler+0x1f6>
    return;
 801be54:	bf00      	nop
  }
}
 801be56:	3720      	adds	r7, #32
 801be58:	46bd      	mov	sp, r7
 801be5a:	bd80      	pop	{r7, pc}
 801be5c:	0801c0b1 	.word	0x0801c0b1

0801be60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801be60:	b480      	push	{r7}
 801be62:	b083      	sub	sp, #12
 801be64:	af00      	add	r7, sp, #0
 801be66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801be68:	bf00      	nop
 801be6a:	370c      	adds	r7, #12
 801be6c:	46bd      	mov	sp, r7
 801be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be72:	4770      	bx	lr

0801be74 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801be74:	b480      	push	{r7}
 801be76:	b083      	sub	sp, #12
 801be78:	af00      	add	r7, sp, #0
 801be7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801be7c:	bf00      	nop
 801be7e:	370c      	adds	r7, #12
 801be80:	46bd      	mov	sp, r7
 801be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be86:	4770      	bx	lr

0801be88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801be88:	b480      	push	{r7}
 801be8a:	b083      	sub	sp, #12
 801be8c:	af00      	add	r7, sp, #0
 801be8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801be90:	bf00      	nop
 801be92:	370c      	adds	r7, #12
 801be94:	46bd      	mov	sp, r7
 801be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be9a:	4770      	bx	lr

0801be9c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801be9c:	b580      	push	{r7, lr}
 801be9e:	b084      	sub	sp, #16
 801bea0:	af00      	add	r7, sp, #0
 801bea2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bea8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	681b      	ldr	r3, [r3, #0]
 801beae:	681b      	ldr	r3, [r3, #0]
 801beb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d11e      	bne.n	801bef6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 801beb8:	68fb      	ldr	r3, [r7, #12]
 801beba:	2200      	movs	r2, #0
 801bebc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801bebe:	68fb      	ldr	r3, [r7, #12]
 801bec0:	681b      	ldr	r3, [r3, #0]
 801bec2:	68da      	ldr	r2, [r3, #12]
 801bec4:	68fb      	ldr	r3, [r7, #12]
 801bec6:	681b      	ldr	r3, [r3, #0]
 801bec8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801becc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bece:	68fb      	ldr	r3, [r7, #12]
 801bed0:	681b      	ldr	r3, [r3, #0]
 801bed2:	695a      	ldr	r2, [r3, #20]
 801bed4:	68fb      	ldr	r3, [r7, #12]
 801bed6:	681b      	ldr	r3, [r3, #0]
 801bed8:	f022 0201 	bic.w	r2, r2, #1
 801bedc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bede:	68fb      	ldr	r3, [r7, #12]
 801bee0:	681b      	ldr	r3, [r3, #0]
 801bee2:	695a      	ldr	r2, [r3, #20]
 801bee4:	68fb      	ldr	r3, [r7, #12]
 801bee6:	681b      	ldr	r3, [r3, #0]
 801bee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801beec:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801beee:	68fb      	ldr	r3, [r7, #12]
 801bef0:	2220      	movs	r2, #32
 801bef2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 801bef6:	68f8      	ldr	r0, [r7, #12]
 801bef8:	f7f7 f96c 	bl	80131d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801befc:	bf00      	nop
 801befe:	3710      	adds	r7, #16
 801bf00:	46bd      	mov	sp, r7
 801bf02:	bd80      	pop	{r7, pc}

0801bf04 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801bf04:	b580      	push	{r7, lr}
 801bf06:	b084      	sub	sp, #16
 801bf08:	af00      	add	r7, sp, #0
 801bf0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf10:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 801bf12:	68f8      	ldr	r0, [r7, #12]
 801bf14:	f7ff ffae 	bl	801be74 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801bf18:	bf00      	nop
 801bf1a:	3710      	adds	r7, #16
 801bf1c:	46bd      	mov	sp, r7
 801bf1e:	bd80      	pop	{r7, pc}

0801bf20 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801bf20:	b580      	push	{r7, lr}
 801bf22:	b084      	sub	sp, #16
 801bf24:	af00      	add	r7, sp, #0
 801bf26:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801bf28:	2300      	movs	r3, #0
 801bf2a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf30:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801bf32:	68bb      	ldr	r3, [r7, #8]
 801bf34:	681b      	ldr	r3, [r3, #0]
 801bf36:	695b      	ldr	r3, [r3, #20]
 801bf38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bf3c:	2b80      	cmp	r3, #128	; 0x80
 801bf3e:	bf0c      	ite	eq
 801bf40:	2301      	moveq	r3, #1
 801bf42:	2300      	movne	r3, #0
 801bf44:	b2db      	uxtb	r3, r3
 801bf46:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801bf48:	68bb      	ldr	r3, [r7, #8]
 801bf4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801bf4e:	b2db      	uxtb	r3, r3
 801bf50:	2b21      	cmp	r3, #33	; 0x21
 801bf52:	d108      	bne.n	801bf66 <UART_DMAError+0x46>
 801bf54:	68fb      	ldr	r3, [r7, #12]
 801bf56:	2b00      	cmp	r3, #0
 801bf58:	d005      	beq.n	801bf66 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801bf5a:	68bb      	ldr	r3, [r7, #8]
 801bf5c:	2200      	movs	r2, #0
 801bf5e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801bf60:	68b8      	ldr	r0, [r7, #8]
 801bf62:	f000 f871 	bl	801c048 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801bf66:	68bb      	ldr	r3, [r7, #8]
 801bf68:	681b      	ldr	r3, [r3, #0]
 801bf6a:	695b      	ldr	r3, [r3, #20]
 801bf6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bf70:	2b40      	cmp	r3, #64	; 0x40
 801bf72:	bf0c      	ite	eq
 801bf74:	2301      	moveq	r3, #1
 801bf76:	2300      	movne	r3, #0
 801bf78:	b2db      	uxtb	r3, r3
 801bf7a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801bf7c:	68bb      	ldr	r3, [r7, #8]
 801bf7e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801bf82:	b2db      	uxtb	r3, r3
 801bf84:	2b22      	cmp	r3, #34	; 0x22
 801bf86:	d108      	bne.n	801bf9a <UART_DMAError+0x7a>
 801bf88:	68fb      	ldr	r3, [r7, #12]
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	d005      	beq.n	801bf9a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801bf8e:	68bb      	ldr	r3, [r7, #8]
 801bf90:	2200      	movs	r2, #0
 801bf92:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801bf94:	68b8      	ldr	r0, [r7, #8]
 801bf96:	f000 f86d 	bl	801c074 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801bf9a:	68bb      	ldr	r3, [r7, #8]
 801bf9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bf9e:	f043 0210 	orr.w	r2, r3, #16
 801bfa2:	68bb      	ldr	r3, [r7, #8]
 801bfa4:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801bfa6:	68b8      	ldr	r0, [r7, #8]
 801bfa8:	f7ff ff6e 	bl	801be88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801bfac:	bf00      	nop
 801bfae:	3710      	adds	r7, #16
 801bfb0:	46bd      	mov	sp, r7
 801bfb2:	bd80      	pop	{r7, pc}

0801bfb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 801bfb4:	b580      	push	{r7, lr}
 801bfb6:	b084      	sub	sp, #16
 801bfb8:	af00      	add	r7, sp, #0
 801bfba:	60f8      	str	r0, [r7, #12]
 801bfbc:	60b9      	str	r1, [r7, #8]
 801bfbe:	603b      	str	r3, [r7, #0]
 801bfc0:	4613      	mov	r3, r2
 801bfc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bfc4:	e02c      	b.n	801c020 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801bfc6:	69bb      	ldr	r3, [r7, #24]
 801bfc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bfcc:	d028      	beq.n	801c020 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801bfce:	69bb      	ldr	r3, [r7, #24]
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	d007      	beq.n	801bfe4 <UART_WaitOnFlagUntilTimeout+0x30>
 801bfd4:	f7f8 feee 	bl	8014db4 <HAL_GetTick>
 801bfd8:	4602      	mov	r2, r0
 801bfda:	683b      	ldr	r3, [r7, #0]
 801bfdc:	1ad3      	subs	r3, r2, r3
 801bfde:	69ba      	ldr	r2, [r7, #24]
 801bfe0:	429a      	cmp	r2, r3
 801bfe2:	d21d      	bcs.n	801c020 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801bfe4:	68fb      	ldr	r3, [r7, #12]
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	68da      	ldr	r2, [r3, #12]
 801bfea:	68fb      	ldr	r3, [r7, #12]
 801bfec:	681b      	ldr	r3, [r3, #0]
 801bfee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801bff2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bff4:	68fb      	ldr	r3, [r7, #12]
 801bff6:	681b      	ldr	r3, [r3, #0]
 801bff8:	695a      	ldr	r2, [r3, #20]
 801bffa:	68fb      	ldr	r3, [r7, #12]
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	f022 0201 	bic.w	r2, r2, #1
 801c002:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 801c004:	68fb      	ldr	r3, [r7, #12]
 801c006:	2220      	movs	r2, #32
 801c008:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 801c00c:	68fb      	ldr	r3, [r7, #12]
 801c00e:	2220      	movs	r2, #32
 801c010:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801c014:	68fb      	ldr	r3, [r7, #12]
 801c016:	2200      	movs	r2, #0
 801c018:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 801c01c:	2303      	movs	r3, #3
 801c01e:	e00f      	b.n	801c040 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c020:	68fb      	ldr	r3, [r7, #12]
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	681a      	ldr	r2, [r3, #0]
 801c026:	68bb      	ldr	r3, [r7, #8]
 801c028:	4013      	ands	r3, r2
 801c02a:	68ba      	ldr	r2, [r7, #8]
 801c02c:	429a      	cmp	r2, r3
 801c02e:	bf0c      	ite	eq
 801c030:	2301      	moveq	r3, #1
 801c032:	2300      	movne	r3, #0
 801c034:	b2db      	uxtb	r3, r3
 801c036:	461a      	mov	r2, r3
 801c038:	79fb      	ldrb	r3, [r7, #7]
 801c03a:	429a      	cmp	r2, r3
 801c03c:	d0c3      	beq.n	801bfc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801c03e:	2300      	movs	r3, #0
}
 801c040:	4618      	mov	r0, r3
 801c042:	3710      	adds	r7, #16
 801c044:	46bd      	mov	sp, r7
 801c046:	bd80      	pop	{r7, pc}

0801c048 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801c048:	b480      	push	{r7}
 801c04a:	b083      	sub	sp, #12
 801c04c:	af00      	add	r7, sp, #0
 801c04e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	681b      	ldr	r3, [r3, #0]
 801c054:	68da      	ldr	r2, [r3, #12]
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	681b      	ldr	r3, [r3, #0]
 801c05a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 801c05e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	2220      	movs	r2, #32
 801c064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 801c068:	bf00      	nop
 801c06a:	370c      	adds	r7, #12
 801c06c:	46bd      	mov	sp, r7
 801c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c072:	4770      	bx	lr

0801c074 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c074:	b480      	push	{r7}
 801c076:	b083      	sub	sp, #12
 801c078:	af00      	add	r7, sp, #0
 801c07a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	68da      	ldr	r2, [r3, #12]
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	681b      	ldr	r3, [r3, #0]
 801c086:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801c08a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c08c:	687b      	ldr	r3, [r7, #4]
 801c08e:	681b      	ldr	r3, [r3, #0]
 801c090:	695a      	ldr	r2, [r3, #20]
 801c092:	687b      	ldr	r3, [r7, #4]
 801c094:	681b      	ldr	r3, [r3, #0]
 801c096:	f022 0201 	bic.w	r2, r2, #1
 801c09a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	2220      	movs	r2, #32
 801c0a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 801c0a4:	bf00      	nop
 801c0a6:	370c      	adds	r7, #12
 801c0a8:	46bd      	mov	sp, r7
 801c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0ae:	4770      	bx	lr

0801c0b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c0b0:	b580      	push	{r7, lr}
 801c0b2:	b084      	sub	sp, #16
 801c0b4:	af00      	add	r7, sp, #0
 801c0b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c0b8:	687b      	ldr	r3, [r7, #4]
 801c0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c0bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801c0be:	68fb      	ldr	r3, [r7, #12]
 801c0c0:	2200      	movs	r2, #0
 801c0c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801c0c4:	68fb      	ldr	r3, [r7, #12]
 801c0c6:	2200      	movs	r2, #0
 801c0c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c0ca:	68f8      	ldr	r0, [r7, #12]
 801c0cc:	f7ff fedc 	bl	801be88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c0d0:	bf00      	nop
 801c0d2:	3710      	adds	r7, #16
 801c0d4:	46bd      	mov	sp, r7
 801c0d6:	bd80      	pop	{r7, pc}

0801c0d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801c0d8:	b480      	push	{r7}
 801c0da:	b085      	sub	sp, #20
 801c0dc:	af00      	add	r7, sp, #0
 801c0de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801c0e6:	b2db      	uxtb	r3, r3
 801c0e8:	2b21      	cmp	r3, #33	; 0x21
 801c0ea:	d144      	bne.n	801c176 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	689b      	ldr	r3, [r3, #8]
 801c0f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c0f4:	d11a      	bne.n	801c12c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801c0f6:	687b      	ldr	r3, [r7, #4]
 801c0f8:	6a1b      	ldr	r3, [r3, #32]
 801c0fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801c0fc:	68fb      	ldr	r3, [r7, #12]
 801c0fe:	881b      	ldrh	r3, [r3, #0]
 801c100:	461a      	mov	r2, r3
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	681b      	ldr	r3, [r3, #0]
 801c106:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801c10a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801c10c:	687b      	ldr	r3, [r7, #4]
 801c10e:	691b      	ldr	r3, [r3, #16]
 801c110:	2b00      	cmp	r3, #0
 801c112:	d105      	bne.n	801c120 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	6a1b      	ldr	r3, [r3, #32]
 801c118:	1c9a      	adds	r2, r3, #2
 801c11a:	687b      	ldr	r3, [r7, #4]
 801c11c:	621a      	str	r2, [r3, #32]
 801c11e:	e00e      	b.n	801c13e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	6a1b      	ldr	r3, [r3, #32]
 801c124:	1c5a      	adds	r2, r3, #1
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	621a      	str	r2, [r3, #32]
 801c12a:	e008      	b.n	801c13e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	6a1b      	ldr	r3, [r3, #32]
 801c130:	1c59      	adds	r1, r3, #1
 801c132:	687a      	ldr	r2, [r7, #4]
 801c134:	6211      	str	r1, [r2, #32]
 801c136:	781a      	ldrb	r2, [r3, #0]
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	681b      	ldr	r3, [r3, #0]
 801c13c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801c13e:	687b      	ldr	r3, [r7, #4]
 801c140:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801c142:	b29b      	uxth	r3, r3
 801c144:	3b01      	subs	r3, #1
 801c146:	b29b      	uxth	r3, r3
 801c148:	687a      	ldr	r2, [r7, #4]
 801c14a:	4619      	mov	r1, r3
 801c14c:	84d1      	strh	r1, [r2, #38]	; 0x26
 801c14e:	2b00      	cmp	r3, #0
 801c150:	d10f      	bne.n	801c172 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	681b      	ldr	r3, [r3, #0]
 801c156:	68da      	ldr	r2, [r3, #12]
 801c158:	687b      	ldr	r3, [r7, #4]
 801c15a:	681b      	ldr	r3, [r3, #0]
 801c15c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c160:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801c162:	687b      	ldr	r3, [r7, #4]
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	68da      	ldr	r2, [r3, #12]
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	681b      	ldr	r3, [r3, #0]
 801c16c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c170:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801c172:	2300      	movs	r3, #0
 801c174:	e000      	b.n	801c178 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801c176:	2302      	movs	r3, #2
  }
}
 801c178:	4618      	mov	r0, r3
 801c17a:	3714      	adds	r7, #20
 801c17c:	46bd      	mov	sp, r7
 801c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c182:	4770      	bx	lr

0801c184 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c184:	b580      	push	{r7, lr}
 801c186:	b082      	sub	sp, #8
 801c188:	af00      	add	r7, sp, #0
 801c18a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	681b      	ldr	r3, [r3, #0]
 801c190:	68da      	ldr	r2, [r3, #12]
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	681b      	ldr	r3, [r3, #0]
 801c196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c19a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	2220      	movs	r2, #32
 801c1a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801c1a4:	6878      	ldr	r0, [r7, #4]
 801c1a6:	f7ff fe5b 	bl	801be60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801c1aa:	2300      	movs	r3, #0
}
 801c1ac:	4618      	mov	r0, r3
 801c1ae:	3708      	adds	r7, #8
 801c1b0:	46bd      	mov	sp, r7
 801c1b2:	bd80      	pop	{r7, pc}

0801c1b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801c1b4:	b580      	push	{r7, lr}
 801c1b6:	b084      	sub	sp, #16
 801c1b8:	af00      	add	r7, sp, #0
 801c1ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801c1c2:	b2db      	uxtb	r3, r3
 801c1c4:	2b22      	cmp	r3, #34	; 0x22
 801c1c6:	d171      	bne.n	801c2ac <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	689b      	ldr	r3, [r3, #8]
 801c1cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c1d0:	d123      	bne.n	801c21a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c1d6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	691b      	ldr	r3, [r3, #16]
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	d10e      	bne.n	801c1fe <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	681b      	ldr	r3, [r3, #0]
 801c1e4:	685b      	ldr	r3, [r3, #4]
 801c1e6:	b29b      	uxth	r3, r3
 801c1e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c1ec:	b29a      	uxth	r2, r3
 801c1ee:	68fb      	ldr	r3, [r7, #12]
 801c1f0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c1f6:	1c9a      	adds	r2, r3, #2
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	629a      	str	r2, [r3, #40]	; 0x28
 801c1fc:	e029      	b.n	801c252 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	681b      	ldr	r3, [r3, #0]
 801c202:	685b      	ldr	r3, [r3, #4]
 801c204:	b29b      	uxth	r3, r3
 801c206:	b2db      	uxtb	r3, r3
 801c208:	b29a      	uxth	r2, r3
 801c20a:	68fb      	ldr	r3, [r7, #12]
 801c20c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c212:	1c5a      	adds	r2, r3, #1
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	629a      	str	r2, [r3, #40]	; 0x28
 801c218:	e01b      	b.n	801c252 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	691b      	ldr	r3, [r3, #16]
 801c21e:	2b00      	cmp	r3, #0
 801c220:	d10a      	bne.n	801c238 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	681b      	ldr	r3, [r3, #0]
 801c226:	6858      	ldr	r0, [r3, #4]
 801c228:	687b      	ldr	r3, [r7, #4]
 801c22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c22c:	1c59      	adds	r1, r3, #1
 801c22e:	687a      	ldr	r2, [r7, #4]
 801c230:	6291      	str	r1, [r2, #40]	; 0x28
 801c232:	b2c2      	uxtb	r2, r0
 801c234:	701a      	strb	r2, [r3, #0]
 801c236:	e00c      	b.n	801c252 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	681b      	ldr	r3, [r3, #0]
 801c23c:	685b      	ldr	r3, [r3, #4]
 801c23e:	b2da      	uxtb	r2, r3
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c244:	1c58      	adds	r0, r3, #1
 801c246:	6879      	ldr	r1, [r7, #4]
 801c248:	6288      	str	r0, [r1, #40]	; 0x28
 801c24a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801c24e:	b2d2      	uxtb	r2, r2
 801c250:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c256:	b29b      	uxth	r3, r3
 801c258:	3b01      	subs	r3, #1
 801c25a:	b29b      	uxth	r3, r3
 801c25c:	687a      	ldr	r2, [r7, #4]
 801c25e:	4619      	mov	r1, r3
 801c260:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801c262:	2b00      	cmp	r3, #0
 801c264:	d120      	bne.n	801c2a8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801c266:	687b      	ldr	r3, [r7, #4]
 801c268:	681b      	ldr	r3, [r3, #0]
 801c26a:	68da      	ldr	r2, [r3, #12]
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	681b      	ldr	r3, [r3, #0]
 801c270:	f022 0220 	bic.w	r2, r2, #32
 801c274:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801c276:	687b      	ldr	r3, [r7, #4]
 801c278:	681b      	ldr	r3, [r3, #0]
 801c27a:	68da      	ldr	r2, [r3, #12]
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	681b      	ldr	r3, [r3, #0]
 801c280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801c284:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	695a      	ldr	r2, [r3, #20]
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	681b      	ldr	r3, [r3, #0]
 801c290:	f022 0201 	bic.w	r2, r2, #1
 801c294:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	2220      	movs	r2, #32
 801c29a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 801c29e:	6878      	ldr	r0, [r7, #4]
 801c2a0:	f7f6 ff98 	bl	80131d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 801c2a4:	2300      	movs	r3, #0
 801c2a6:	e002      	b.n	801c2ae <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 801c2a8:	2300      	movs	r3, #0
 801c2aa:	e000      	b.n	801c2ae <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 801c2ac:	2302      	movs	r3, #2
  }
}
 801c2ae:	4618      	mov	r0, r3
 801c2b0:	3710      	adds	r7, #16
 801c2b2:	46bd      	mov	sp, r7
 801c2b4:	bd80      	pop	{r7, pc}
	...

0801c2b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801c2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2bc:	b085      	sub	sp, #20
 801c2be:	af00      	add	r7, sp, #0
 801c2c0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	681b      	ldr	r3, [r3, #0]
 801c2c6:	691b      	ldr	r3, [r3, #16]
 801c2c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801c2cc:	687b      	ldr	r3, [r7, #4]
 801c2ce:	68da      	ldr	r2, [r3, #12]
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	430a      	orrs	r2, r1
 801c2d6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801c2d8:	687b      	ldr	r3, [r7, #4]
 801c2da:	689a      	ldr	r2, [r3, #8]
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	691b      	ldr	r3, [r3, #16]
 801c2e0:	431a      	orrs	r2, r3
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	695b      	ldr	r3, [r3, #20]
 801c2e6:	431a      	orrs	r2, r3
 801c2e8:	687b      	ldr	r3, [r7, #4]
 801c2ea:	69db      	ldr	r3, [r3, #28]
 801c2ec:	4313      	orrs	r3, r2
 801c2ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 801c2f0:	687b      	ldr	r3, [r7, #4]
 801c2f2:	681b      	ldr	r3, [r3, #0]
 801c2f4:	68db      	ldr	r3, [r3, #12]
 801c2f6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 801c2fa:	f023 030c 	bic.w	r3, r3, #12
 801c2fe:	687a      	ldr	r2, [r7, #4]
 801c300:	6812      	ldr	r2, [r2, #0]
 801c302:	68f9      	ldr	r1, [r7, #12]
 801c304:	430b      	orrs	r3, r1
 801c306:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	695b      	ldr	r3, [r3, #20]
 801c30e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	699a      	ldr	r2, [r3, #24]
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	681b      	ldr	r3, [r3, #0]
 801c31a:	430a      	orrs	r2, r1
 801c31c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	69db      	ldr	r3, [r3, #28]
 801c322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c326:	f040 818b 	bne.w	801c640 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	681b      	ldr	r3, [r3, #0]
 801c32e:	4ac1      	ldr	r2, [pc, #772]	; (801c634 <UART_SetConfig+0x37c>)
 801c330:	4293      	cmp	r3, r2
 801c332:	d005      	beq.n	801c340 <UART_SetConfig+0x88>
 801c334:	687b      	ldr	r3, [r7, #4]
 801c336:	681b      	ldr	r3, [r3, #0]
 801c338:	4abf      	ldr	r2, [pc, #764]	; (801c638 <UART_SetConfig+0x380>)
 801c33a:	4293      	cmp	r3, r2
 801c33c:	f040 80bd 	bne.w	801c4ba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801c340:	f7fc fec6 	bl	80190d0 <HAL_RCC_GetPCLK2Freq>
 801c344:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801c346:	68bb      	ldr	r3, [r7, #8]
 801c348:	461d      	mov	r5, r3
 801c34a:	f04f 0600 	mov.w	r6, #0
 801c34e:	46a8      	mov	r8, r5
 801c350:	46b1      	mov	r9, r6
 801c352:	eb18 0308 	adds.w	r3, r8, r8
 801c356:	eb49 0409 	adc.w	r4, r9, r9
 801c35a:	4698      	mov	r8, r3
 801c35c:	46a1      	mov	r9, r4
 801c35e:	eb18 0805 	adds.w	r8, r8, r5
 801c362:	eb49 0906 	adc.w	r9, r9, r6
 801c366:	f04f 0100 	mov.w	r1, #0
 801c36a:	f04f 0200 	mov.w	r2, #0
 801c36e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801c372:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801c376:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801c37a:	4688      	mov	r8, r1
 801c37c:	4691      	mov	r9, r2
 801c37e:	eb18 0005 	adds.w	r0, r8, r5
 801c382:	eb49 0106 	adc.w	r1, r9, r6
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	685b      	ldr	r3, [r3, #4]
 801c38a:	461d      	mov	r5, r3
 801c38c:	f04f 0600 	mov.w	r6, #0
 801c390:	196b      	adds	r3, r5, r5
 801c392:	eb46 0406 	adc.w	r4, r6, r6
 801c396:	461a      	mov	r2, r3
 801c398:	4623      	mov	r3, r4
 801c39a:	f7e4 fddb 	bl	8000f54 <__aeabi_uldivmod>
 801c39e:	4603      	mov	r3, r0
 801c3a0:	460c      	mov	r4, r1
 801c3a2:	461a      	mov	r2, r3
 801c3a4:	4ba5      	ldr	r3, [pc, #660]	; (801c63c <UART_SetConfig+0x384>)
 801c3a6:	fba3 2302 	umull	r2, r3, r3, r2
 801c3aa:	095b      	lsrs	r3, r3, #5
 801c3ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801c3b0:	68bb      	ldr	r3, [r7, #8]
 801c3b2:	461d      	mov	r5, r3
 801c3b4:	f04f 0600 	mov.w	r6, #0
 801c3b8:	46a9      	mov	r9, r5
 801c3ba:	46b2      	mov	sl, r6
 801c3bc:	eb19 0309 	adds.w	r3, r9, r9
 801c3c0:	eb4a 040a 	adc.w	r4, sl, sl
 801c3c4:	4699      	mov	r9, r3
 801c3c6:	46a2      	mov	sl, r4
 801c3c8:	eb19 0905 	adds.w	r9, r9, r5
 801c3cc:	eb4a 0a06 	adc.w	sl, sl, r6
 801c3d0:	f04f 0100 	mov.w	r1, #0
 801c3d4:	f04f 0200 	mov.w	r2, #0
 801c3d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801c3dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801c3e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801c3e4:	4689      	mov	r9, r1
 801c3e6:	4692      	mov	sl, r2
 801c3e8:	eb19 0005 	adds.w	r0, r9, r5
 801c3ec:	eb4a 0106 	adc.w	r1, sl, r6
 801c3f0:	687b      	ldr	r3, [r7, #4]
 801c3f2:	685b      	ldr	r3, [r3, #4]
 801c3f4:	461d      	mov	r5, r3
 801c3f6:	f04f 0600 	mov.w	r6, #0
 801c3fa:	196b      	adds	r3, r5, r5
 801c3fc:	eb46 0406 	adc.w	r4, r6, r6
 801c400:	461a      	mov	r2, r3
 801c402:	4623      	mov	r3, r4
 801c404:	f7e4 fda6 	bl	8000f54 <__aeabi_uldivmod>
 801c408:	4603      	mov	r3, r0
 801c40a:	460c      	mov	r4, r1
 801c40c:	461a      	mov	r2, r3
 801c40e:	4b8b      	ldr	r3, [pc, #556]	; (801c63c <UART_SetConfig+0x384>)
 801c410:	fba3 1302 	umull	r1, r3, r3, r2
 801c414:	095b      	lsrs	r3, r3, #5
 801c416:	2164      	movs	r1, #100	; 0x64
 801c418:	fb01 f303 	mul.w	r3, r1, r3
 801c41c:	1ad3      	subs	r3, r2, r3
 801c41e:	00db      	lsls	r3, r3, #3
 801c420:	3332      	adds	r3, #50	; 0x32
 801c422:	4a86      	ldr	r2, [pc, #536]	; (801c63c <UART_SetConfig+0x384>)
 801c424:	fba2 2303 	umull	r2, r3, r2, r3
 801c428:	095b      	lsrs	r3, r3, #5
 801c42a:	005b      	lsls	r3, r3, #1
 801c42c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801c430:	4498      	add	r8, r3
 801c432:	68bb      	ldr	r3, [r7, #8]
 801c434:	461d      	mov	r5, r3
 801c436:	f04f 0600 	mov.w	r6, #0
 801c43a:	46a9      	mov	r9, r5
 801c43c:	46b2      	mov	sl, r6
 801c43e:	eb19 0309 	adds.w	r3, r9, r9
 801c442:	eb4a 040a 	adc.w	r4, sl, sl
 801c446:	4699      	mov	r9, r3
 801c448:	46a2      	mov	sl, r4
 801c44a:	eb19 0905 	adds.w	r9, r9, r5
 801c44e:	eb4a 0a06 	adc.w	sl, sl, r6
 801c452:	f04f 0100 	mov.w	r1, #0
 801c456:	f04f 0200 	mov.w	r2, #0
 801c45a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801c45e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801c462:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801c466:	4689      	mov	r9, r1
 801c468:	4692      	mov	sl, r2
 801c46a:	eb19 0005 	adds.w	r0, r9, r5
 801c46e:	eb4a 0106 	adc.w	r1, sl, r6
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	685b      	ldr	r3, [r3, #4]
 801c476:	461d      	mov	r5, r3
 801c478:	f04f 0600 	mov.w	r6, #0
 801c47c:	196b      	adds	r3, r5, r5
 801c47e:	eb46 0406 	adc.w	r4, r6, r6
 801c482:	461a      	mov	r2, r3
 801c484:	4623      	mov	r3, r4
 801c486:	f7e4 fd65 	bl	8000f54 <__aeabi_uldivmod>
 801c48a:	4603      	mov	r3, r0
 801c48c:	460c      	mov	r4, r1
 801c48e:	461a      	mov	r2, r3
 801c490:	4b6a      	ldr	r3, [pc, #424]	; (801c63c <UART_SetConfig+0x384>)
 801c492:	fba3 1302 	umull	r1, r3, r3, r2
 801c496:	095b      	lsrs	r3, r3, #5
 801c498:	2164      	movs	r1, #100	; 0x64
 801c49a:	fb01 f303 	mul.w	r3, r1, r3
 801c49e:	1ad3      	subs	r3, r2, r3
 801c4a0:	00db      	lsls	r3, r3, #3
 801c4a2:	3332      	adds	r3, #50	; 0x32
 801c4a4:	4a65      	ldr	r2, [pc, #404]	; (801c63c <UART_SetConfig+0x384>)
 801c4a6:	fba2 2303 	umull	r2, r3, r2, r3
 801c4aa:	095b      	lsrs	r3, r3, #5
 801c4ac:	f003 0207 	and.w	r2, r3, #7
 801c4b0:	687b      	ldr	r3, [r7, #4]
 801c4b2:	681b      	ldr	r3, [r3, #0]
 801c4b4:	4442      	add	r2, r8
 801c4b6:	609a      	str	r2, [r3, #8]
 801c4b8:	e26f      	b.n	801c99a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801c4ba:	f7fc fdf5 	bl	80190a8 <HAL_RCC_GetPCLK1Freq>
 801c4be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801c4c0:	68bb      	ldr	r3, [r7, #8]
 801c4c2:	461d      	mov	r5, r3
 801c4c4:	f04f 0600 	mov.w	r6, #0
 801c4c8:	46a8      	mov	r8, r5
 801c4ca:	46b1      	mov	r9, r6
 801c4cc:	eb18 0308 	adds.w	r3, r8, r8
 801c4d0:	eb49 0409 	adc.w	r4, r9, r9
 801c4d4:	4698      	mov	r8, r3
 801c4d6:	46a1      	mov	r9, r4
 801c4d8:	eb18 0805 	adds.w	r8, r8, r5
 801c4dc:	eb49 0906 	adc.w	r9, r9, r6
 801c4e0:	f04f 0100 	mov.w	r1, #0
 801c4e4:	f04f 0200 	mov.w	r2, #0
 801c4e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801c4ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801c4f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801c4f4:	4688      	mov	r8, r1
 801c4f6:	4691      	mov	r9, r2
 801c4f8:	eb18 0005 	adds.w	r0, r8, r5
 801c4fc:	eb49 0106 	adc.w	r1, r9, r6
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	685b      	ldr	r3, [r3, #4]
 801c504:	461d      	mov	r5, r3
 801c506:	f04f 0600 	mov.w	r6, #0
 801c50a:	196b      	adds	r3, r5, r5
 801c50c:	eb46 0406 	adc.w	r4, r6, r6
 801c510:	461a      	mov	r2, r3
 801c512:	4623      	mov	r3, r4
 801c514:	f7e4 fd1e 	bl	8000f54 <__aeabi_uldivmod>
 801c518:	4603      	mov	r3, r0
 801c51a:	460c      	mov	r4, r1
 801c51c:	461a      	mov	r2, r3
 801c51e:	4b47      	ldr	r3, [pc, #284]	; (801c63c <UART_SetConfig+0x384>)
 801c520:	fba3 2302 	umull	r2, r3, r3, r2
 801c524:	095b      	lsrs	r3, r3, #5
 801c526:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801c52a:	68bb      	ldr	r3, [r7, #8]
 801c52c:	461d      	mov	r5, r3
 801c52e:	f04f 0600 	mov.w	r6, #0
 801c532:	46a9      	mov	r9, r5
 801c534:	46b2      	mov	sl, r6
 801c536:	eb19 0309 	adds.w	r3, r9, r9
 801c53a:	eb4a 040a 	adc.w	r4, sl, sl
 801c53e:	4699      	mov	r9, r3
 801c540:	46a2      	mov	sl, r4
 801c542:	eb19 0905 	adds.w	r9, r9, r5
 801c546:	eb4a 0a06 	adc.w	sl, sl, r6
 801c54a:	f04f 0100 	mov.w	r1, #0
 801c54e:	f04f 0200 	mov.w	r2, #0
 801c552:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801c556:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801c55a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801c55e:	4689      	mov	r9, r1
 801c560:	4692      	mov	sl, r2
 801c562:	eb19 0005 	adds.w	r0, r9, r5
 801c566:	eb4a 0106 	adc.w	r1, sl, r6
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	685b      	ldr	r3, [r3, #4]
 801c56e:	461d      	mov	r5, r3
 801c570:	f04f 0600 	mov.w	r6, #0
 801c574:	196b      	adds	r3, r5, r5
 801c576:	eb46 0406 	adc.w	r4, r6, r6
 801c57a:	461a      	mov	r2, r3
 801c57c:	4623      	mov	r3, r4
 801c57e:	f7e4 fce9 	bl	8000f54 <__aeabi_uldivmod>
 801c582:	4603      	mov	r3, r0
 801c584:	460c      	mov	r4, r1
 801c586:	461a      	mov	r2, r3
 801c588:	4b2c      	ldr	r3, [pc, #176]	; (801c63c <UART_SetConfig+0x384>)
 801c58a:	fba3 1302 	umull	r1, r3, r3, r2
 801c58e:	095b      	lsrs	r3, r3, #5
 801c590:	2164      	movs	r1, #100	; 0x64
 801c592:	fb01 f303 	mul.w	r3, r1, r3
 801c596:	1ad3      	subs	r3, r2, r3
 801c598:	00db      	lsls	r3, r3, #3
 801c59a:	3332      	adds	r3, #50	; 0x32
 801c59c:	4a27      	ldr	r2, [pc, #156]	; (801c63c <UART_SetConfig+0x384>)
 801c59e:	fba2 2303 	umull	r2, r3, r2, r3
 801c5a2:	095b      	lsrs	r3, r3, #5
 801c5a4:	005b      	lsls	r3, r3, #1
 801c5a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801c5aa:	4498      	add	r8, r3
 801c5ac:	68bb      	ldr	r3, [r7, #8]
 801c5ae:	461d      	mov	r5, r3
 801c5b0:	f04f 0600 	mov.w	r6, #0
 801c5b4:	46a9      	mov	r9, r5
 801c5b6:	46b2      	mov	sl, r6
 801c5b8:	eb19 0309 	adds.w	r3, r9, r9
 801c5bc:	eb4a 040a 	adc.w	r4, sl, sl
 801c5c0:	4699      	mov	r9, r3
 801c5c2:	46a2      	mov	sl, r4
 801c5c4:	eb19 0905 	adds.w	r9, r9, r5
 801c5c8:	eb4a 0a06 	adc.w	sl, sl, r6
 801c5cc:	f04f 0100 	mov.w	r1, #0
 801c5d0:	f04f 0200 	mov.w	r2, #0
 801c5d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801c5d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801c5dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801c5e0:	4689      	mov	r9, r1
 801c5e2:	4692      	mov	sl, r2
 801c5e4:	eb19 0005 	adds.w	r0, r9, r5
 801c5e8:	eb4a 0106 	adc.w	r1, sl, r6
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	685b      	ldr	r3, [r3, #4]
 801c5f0:	461d      	mov	r5, r3
 801c5f2:	f04f 0600 	mov.w	r6, #0
 801c5f6:	196b      	adds	r3, r5, r5
 801c5f8:	eb46 0406 	adc.w	r4, r6, r6
 801c5fc:	461a      	mov	r2, r3
 801c5fe:	4623      	mov	r3, r4
 801c600:	f7e4 fca8 	bl	8000f54 <__aeabi_uldivmod>
 801c604:	4603      	mov	r3, r0
 801c606:	460c      	mov	r4, r1
 801c608:	461a      	mov	r2, r3
 801c60a:	4b0c      	ldr	r3, [pc, #48]	; (801c63c <UART_SetConfig+0x384>)
 801c60c:	fba3 1302 	umull	r1, r3, r3, r2
 801c610:	095b      	lsrs	r3, r3, #5
 801c612:	2164      	movs	r1, #100	; 0x64
 801c614:	fb01 f303 	mul.w	r3, r1, r3
 801c618:	1ad3      	subs	r3, r2, r3
 801c61a:	00db      	lsls	r3, r3, #3
 801c61c:	3332      	adds	r3, #50	; 0x32
 801c61e:	4a07      	ldr	r2, [pc, #28]	; (801c63c <UART_SetConfig+0x384>)
 801c620:	fba2 2303 	umull	r2, r3, r2, r3
 801c624:	095b      	lsrs	r3, r3, #5
 801c626:	f003 0207 	and.w	r2, r3, #7
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	681b      	ldr	r3, [r3, #0]
 801c62e:	4442      	add	r2, r8
 801c630:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801c632:	e1b2      	b.n	801c99a <UART_SetConfig+0x6e2>
 801c634:	40011000 	.word	0x40011000
 801c638:	40011400 	.word	0x40011400
 801c63c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	4ad7      	ldr	r2, [pc, #860]	; (801c9a4 <UART_SetConfig+0x6ec>)
 801c646:	4293      	cmp	r3, r2
 801c648:	d005      	beq.n	801c656 <UART_SetConfig+0x39e>
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	681b      	ldr	r3, [r3, #0]
 801c64e:	4ad6      	ldr	r2, [pc, #856]	; (801c9a8 <UART_SetConfig+0x6f0>)
 801c650:	4293      	cmp	r3, r2
 801c652:	f040 80d1 	bne.w	801c7f8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801c656:	f7fc fd3b 	bl	80190d0 <HAL_RCC_GetPCLK2Freq>
 801c65a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801c65c:	68bb      	ldr	r3, [r7, #8]
 801c65e:	469a      	mov	sl, r3
 801c660:	f04f 0b00 	mov.w	fp, #0
 801c664:	46d0      	mov	r8, sl
 801c666:	46d9      	mov	r9, fp
 801c668:	eb18 0308 	adds.w	r3, r8, r8
 801c66c:	eb49 0409 	adc.w	r4, r9, r9
 801c670:	4698      	mov	r8, r3
 801c672:	46a1      	mov	r9, r4
 801c674:	eb18 080a 	adds.w	r8, r8, sl
 801c678:	eb49 090b 	adc.w	r9, r9, fp
 801c67c:	f04f 0100 	mov.w	r1, #0
 801c680:	f04f 0200 	mov.w	r2, #0
 801c684:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801c688:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801c68c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801c690:	4688      	mov	r8, r1
 801c692:	4691      	mov	r9, r2
 801c694:	eb1a 0508 	adds.w	r5, sl, r8
 801c698:	eb4b 0609 	adc.w	r6, fp, r9
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	685b      	ldr	r3, [r3, #4]
 801c6a0:	4619      	mov	r1, r3
 801c6a2:	f04f 0200 	mov.w	r2, #0
 801c6a6:	f04f 0300 	mov.w	r3, #0
 801c6aa:	f04f 0400 	mov.w	r4, #0
 801c6ae:	0094      	lsls	r4, r2, #2
 801c6b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801c6b4:	008b      	lsls	r3, r1, #2
 801c6b6:	461a      	mov	r2, r3
 801c6b8:	4623      	mov	r3, r4
 801c6ba:	4628      	mov	r0, r5
 801c6bc:	4631      	mov	r1, r6
 801c6be:	f7e4 fc49 	bl	8000f54 <__aeabi_uldivmod>
 801c6c2:	4603      	mov	r3, r0
 801c6c4:	460c      	mov	r4, r1
 801c6c6:	461a      	mov	r2, r3
 801c6c8:	4bb8      	ldr	r3, [pc, #736]	; (801c9ac <UART_SetConfig+0x6f4>)
 801c6ca:	fba3 2302 	umull	r2, r3, r3, r2
 801c6ce:	095b      	lsrs	r3, r3, #5
 801c6d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801c6d4:	68bb      	ldr	r3, [r7, #8]
 801c6d6:	469b      	mov	fp, r3
 801c6d8:	f04f 0c00 	mov.w	ip, #0
 801c6dc:	46d9      	mov	r9, fp
 801c6de:	46e2      	mov	sl, ip
 801c6e0:	eb19 0309 	adds.w	r3, r9, r9
 801c6e4:	eb4a 040a 	adc.w	r4, sl, sl
 801c6e8:	4699      	mov	r9, r3
 801c6ea:	46a2      	mov	sl, r4
 801c6ec:	eb19 090b 	adds.w	r9, r9, fp
 801c6f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 801c6f4:	f04f 0100 	mov.w	r1, #0
 801c6f8:	f04f 0200 	mov.w	r2, #0
 801c6fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801c700:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801c704:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801c708:	4689      	mov	r9, r1
 801c70a:	4692      	mov	sl, r2
 801c70c:	eb1b 0509 	adds.w	r5, fp, r9
 801c710:	eb4c 060a 	adc.w	r6, ip, sl
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	685b      	ldr	r3, [r3, #4]
 801c718:	4619      	mov	r1, r3
 801c71a:	f04f 0200 	mov.w	r2, #0
 801c71e:	f04f 0300 	mov.w	r3, #0
 801c722:	f04f 0400 	mov.w	r4, #0
 801c726:	0094      	lsls	r4, r2, #2
 801c728:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801c72c:	008b      	lsls	r3, r1, #2
 801c72e:	461a      	mov	r2, r3
 801c730:	4623      	mov	r3, r4
 801c732:	4628      	mov	r0, r5
 801c734:	4631      	mov	r1, r6
 801c736:	f7e4 fc0d 	bl	8000f54 <__aeabi_uldivmod>
 801c73a:	4603      	mov	r3, r0
 801c73c:	460c      	mov	r4, r1
 801c73e:	461a      	mov	r2, r3
 801c740:	4b9a      	ldr	r3, [pc, #616]	; (801c9ac <UART_SetConfig+0x6f4>)
 801c742:	fba3 1302 	umull	r1, r3, r3, r2
 801c746:	095b      	lsrs	r3, r3, #5
 801c748:	2164      	movs	r1, #100	; 0x64
 801c74a:	fb01 f303 	mul.w	r3, r1, r3
 801c74e:	1ad3      	subs	r3, r2, r3
 801c750:	011b      	lsls	r3, r3, #4
 801c752:	3332      	adds	r3, #50	; 0x32
 801c754:	4a95      	ldr	r2, [pc, #596]	; (801c9ac <UART_SetConfig+0x6f4>)
 801c756:	fba2 2303 	umull	r2, r3, r2, r3
 801c75a:	095b      	lsrs	r3, r3, #5
 801c75c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c760:	4498      	add	r8, r3
 801c762:	68bb      	ldr	r3, [r7, #8]
 801c764:	469b      	mov	fp, r3
 801c766:	f04f 0c00 	mov.w	ip, #0
 801c76a:	46d9      	mov	r9, fp
 801c76c:	46e2      	mov	sl, ip
 801c76e:	eb19 0309 	adds.w	r3, r9, r9
 801c772:	eb4a 040a 	adc.w	r4, sl, sl
 801c776:	4699      	mov	r9, r3
 801c778:	46a2      	mov	sl, r4
 801c77a:	eb19 090b 	adds.w	r9, r9, fp
 801c77e:	eb4a 0a0c 	adc.w	sl, sl, ip
 801c782:	f04f 0100 	mov.w	r1, #0
 801c786:	f04f 0200 	mov.w	r2, #0
 801c78a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801c78e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801c792:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801c796:	4689      	mov	r9, r1
 801c798:	4692      	mov	sl, r2
 801c79a:	eb1b 0509 	adds.w	r5, fp, r9
 801c79e:	eb4c 060a 	adc.w	r6, ip, sl
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	685b      	ldr	r3, [r3, #4]
 801c7a6:	4619      	mov	r1, r3
 801c7a8:	f04f 0200 	mov.w	r2, #0
 801c7ac:	f04f 0300 	mov.w	r3, #0
 801c7b0:	f04f 0400 	mov.w	r4, #0
 801c7b4:	0094      	lsls	r4, r2, #2
 801c7b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801c7ba:	008b      	lsls	r3, r1, #2
 801c7bc:	461a      	mov	r2, r3
 801c7be:	4623      	mov	r3, r4
 801c7c0:	4628      	mov	r0, r5
 801c7c2:	4631      	mov	r1, r6
 801c7c4:	f7e4 fbc6 	bl	8000f54 <__aeabi_uldivmod>
 801c7c8:	4603      	mov	r3, r0
 801c7ca:	460c      	mov	r4, r1
 801c7cc:	461a      	mov	r2, r3
 801c7ce:	4b77      	ldr	r3, [pc, #476]	; (801c9ac <UART_SetConfig+0x6f4>)
 801c7d0:	fba3 1302 	umull	r1, r3, r3, r2
 801c7d4:	095b      	lsrs	r3, r3, #5
 801c7d6:	2164      	movs	r1, #100	; 0x64
 801c7d8:	fb01 f303 	mul.w	r3, r1, r3
 801c7dc:	1ad3      	subs	r3, r2, r3
 801c7de:	011b      	lsls	r3, r3, #4
 801c7e0:	3332      	adds	r3, #50	; 0x32
 801c7e2:	4a72      	ldr	r2, [pc, #456]	; (801c9ac <UART_SetConfig+0x6f4>)
 801c7e4:	fba2 2303 	umull	r2, r3, r2, r3
 801c7e8:	095b      	lsrs	r3, r3, #5
 801c7ea:	f003 020f 	and.w	r2, r3, #15
 801c7ee:	687b      	ldr	r3, [r7, #4]
 801c7f0:	681b      	ldr	r3, [r3, #0]
 801c7f2:	4442      	add	r2, r8
 801c7f4:	609a      	str	r2, [r3, #8]
 801c7f6:	e0d0      	b.n	801c99a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 801c7f8:	f7fc fc56 	bl	80190a8 <HAL_RCC_GetPCLK1Freq>
 801c7fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801c7fe:	68bb      	ldr	r3, [r7, #8]
 801c800:	469a      	mov	sl, r3
 801c802:	f04f 0b00 	mov.w	fp, #0
 801c806:	46d0      	mov	r8, sl
 801c808:	46d9      	mov	r9, fp
 801c80a:	eb18 0308 	adds.w	r3, r8, r8
 801c80e:	eb49 0409 	adc.w	r4, r9, r9
 801c812:	4698      	mov	r8, r3
 801c814:	46a1      	mov	r9, r4
 801c816:	eb18 080a 	adds.w	r8, r8, sl
 801c81a:	eb49 090b 	adc.w	r9, r9, fp
 801c81e:	f04f 0100 	mov.w	r1, #0
 801c822:	f04f 0200 	mov.w	r2, #0
 801c826:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801c82a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801c82e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801c832:	4688      	mov	r8, r1
 801c834:	4691      	mov	r9, r2
 801c836:	eb1a 0508 	adds.w	r5, sl, r8
 801c83a:	eb4b 0609 	adc.w	r6, fp, r9
 801c83e:	687b      	ldr	r3, [r7, #4]
 801c840:	685b      	ldr	r3, [r3, #4]
 801c842:	4619      	mov	r1, r3
 801c844:	f04f 0200 	mov.w	r2, #0
 801c848:	f04f 0300 	mov.w	r3, #0
 801c84c:	f04f 0400 	mov.w	r4, #0
 801c850:	0094      	lsls	r4, r2, #2
 801c852:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801c856:	008b      	lsls	r3, r1, #2
 801c858:	461a      	mov	r2, r3
 801c85a:	4623      	mov	r3, r4
 801c85c:	4628      	mov	r0, r5
 801c85e:	4631      	mov	r1, r6
 801c860:	f7e4 fb78 	bl	8000f54 <__aeabi_uldivmod>
 801c864:	4603      	mov	r3, r0
 801c866:	460c      	mov	r4, r1
 801c868:	461a      	mov	r2, r3
 801c86a:	4b50      	ldr	r3, [pc, #320]	; (801c9ac <UART_SetConfig+0x6f4>)
 801c86c:	fba3 2302 	umull	r2, r3, r3, r2
 801c870:	095b      	lsrs	r3, r3, #5
 801c872:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801c876:	68bb      	ldr	r3, [r7, #8]
 801c878:	469b      	mov	fp, r3
 801c87a:	f04f 0c00 	mov.w	ip, #0
 801c87e:	46d9      	mov	r9, fp
 801c880:	46e2      	mov	sl, ip
 801c882:	eb19 0309 	adds.w	r3, r9, r9
 801c886:	eb4a 040a 	adc.w	r4, sl, sl
 801c88a:	4699      	mov	r9, r3
 801c88c:	46a2      	mov	sl, r4
 801c88e:	eb19 090b 	adds.w	r9, r9, fp
 801c892:	eb4a 0a0c 	adc.w	sl, sl, ip
 801c896:	f04f 0100 	mov.w	r1, #0
 801c89a:	f04f 0200 	mov.w	r2, #0
 801c89e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801c8a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801c8a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801c8aa:	4689      	mov	r9, r1
 801c8ac:	4692      	mov	sl, r2
 801c8ae:	eb1b 0509 	adds.w	r5, fp, r9
 801c8b2:	eb4c 060a 	adc.w	r6, ip, sl
 801c8b6:	687b      	ldr	r3, [r7, #4]
 801c8b8:	685b      	ldr	r3, [r3, #4]
 801c8ba:	4619      	mov	r1, r3
 801c8bc:	f04f 0200 	mov.w	r2, #0
 801c8c0:	f04f 0300 	mov.w	r3, #0
 801c8c4:	f04f 0400 	mov.w	r4, #0
 801c8c8:	0094      	lsls	r4, r2, #2
 801c8ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801c8ce:	008b      	lsls	r3, r1, #2
 801c8d0:	461a      	mov	r2, r3
 801c8d2:	4623      	mov	r3, r4
 801c8d4:	4628      	mov	r0, r5
 801c8d6:	4631      	mov	r1, r6
 801c8d8:	f7e4 fb3c 	bl	8000f54 <__aeabi_uldivmod>
 801c8dc:	4603      	mov	r3, r0
 801c8de:	460c      	mov	r4, r1
 801c8e0:	461a      	mov	r2, r3
 801c8e2:	4b32      	ldr	r3, [pc, #200]	; (801c9ac <UART_SetConfig+0x6f4>)
 801c8e4:	fba3 1302 	umull	r1, r3, r3, r2
 801c8e8:	095b      	lsrs	r3, r3, #5
 801c8ea:	2164      	movs	r1, #100	; 0x64
 801c8ec:	fb01 f303 	mul.w	r3, r1, r3
 801c8f0:	1ad3      	subs	r3, r2, r3
 801c8f2:	011b      	lsls	r3, r3, #4
 801c8f4:	3332      	adds	r3, #50	; 0x32
 801c8f6:	4a2d      	ldr	r2, [pc, #180]	; (801c9ac <UART_SetConfig+0x6f4>)
 801c8f8:	fba2 2303 	umull	r2, r3, r2, r3
 801c8fc:	095b      	lsrs	r3, r3, #5
 801c8fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c902:	4498      	add	r8, r3
 801c904:	68bb      	ldr	r3, [r7, #8]
 801c906:	469b      	mov	fp, r3
 801c908:	f04f 0c00 	mov.w	ip, #0
 801c90c:	46d9      	mov	r9, fp
 801c90e:	46e2      	mov	sl, ip
 801c910:	eb19 0309 	adds.w	r3, r9, r9
 801c914:	eb4a 040a 	adc.w	r4, sl, sl
 801c918:	4699      	mov	r9, r3
 801c91a:	46a2      	mov	sl, r4
 801c91c:	eb19 090b 	adds.w	r9, r9, fp
 801c920:	eb4a 0a0c 	adc.w	sl, sl, ip
 801c924:	f04f 0100 	mov.w	r1, #0
 801c928:	f04f 0200 	mov.w	r2, #0
 801c92c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801c930:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801c934:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801c938:	4689      	mov	r9, r1
 801c93a:	4692      	mov	sl, r2
 801c93c:	eb1b 0509 	adds.w	r5, fp, r9
 801c940:	eb4c 060a 	adc.w	r6, ip, sl
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	685b      	ldr	r3, [r3, #4]
 801c948:	4619      	mov	r1, r3
 801c94a:	f04f 0200 	mov.w	r2, #0
 801c94e:	f04f 0300 	mov.w	r3, #0
 801c952:	f04f 0400 	mov.w	r4, #0
 801c956:	0094      	lsls	r4, r2, #2
 801c958:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801c95c:	008b      	lsls	r3, r1, #2
 801c95e:	461a      	mov	r2, r3
 801c960:	4623      	mov	r3, r4
 801c962:	4628      	mov	r0, r5
 801c964:	4631      	mov	r1, r6
 801c966:	f7e4 faf5 	bl	8000f54 <__aeabi_uldivmod>
 801c96a:	4603      	mov	r3, r0
 801c96c:	460c      	mov	r4, r1
 801c96e:	461a      	mov	r2, r3
 801c970:	4b0e      	ldr	r3, [pc, #56]	; (801c9ac <UART_SetConfig+0x6f4>)
 801c972:	fba3 1302 	umull	r1, r3, r3, r2
 801c976:	095b      	lsrs	r3, r3, #5
 801c978:	2164      	movs	r1, #100	; 0x64
 801c97a:	fb01 f303 	mul.w	r3, r1, r3
 801c97e:	1ad3      	subs	r3, r2, r3
 801c980:	011b      	lsls	r3, r3, #4
 801c982:	3332      	adds	r3, #50	; 0x32
 801c984:	4a09      	ldr	r2, [pc, #36]	; (801c9ac <UART_SetConfig+0x6f4>)
 801c986:	fba2 2303 	umull	r2, r3, r2, r3
 801c98a:	095b      	lsrs	r3, r3, #5
 801c98c:	f003 020f 	and.w	r2, r3, #15
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	681b      	ldr	r3, [r3, #0]
 801c994:	4442      	add	r2, r8
 801c996:	609a      	str	r2, [r3, #8]
}
 801c998:	e7ff      	b.n	801c99a <UART_SetConfig+0x6e2>
 801c99a:	bf00      	nop
 801c99c:	3714      	adds	r7, #20
 801c99e:	46bd      	mov	sp, r7
 801c9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9a4:	40011000 	.word	0x40011000
 801c9a8:	40011400 	.word	0x40011400
 801c9ac:	51eb851f 	.word	0x51eb851f

0801c9b0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 801c9b0:	b084      	sub	sp, #16
 801c9b2:	b480      	push	{r7}
 801c9b4:	b085      	sub	sp, #20
 801c9b6:	af00      	add	r7, sp, #0
 801c9b8:	6078      	str	r0, [r7, #4]
 801c9ba:	f107 001c 	add.w	r0, r7, #28
 801c9be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801c9c2:	2300      	movs	r3, #0
 801c9c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801c9c6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 801c9c8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801c9ca:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 801c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 801c9ce:	431a      	orrs	r2, r3
             Init.BusWide             |\
 801c9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801c9d2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 801c9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 801c9d6:	431a      	orrs	r2, r3
             Init.ClockDiv
 801c9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 801c9da:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 801c9dc:	68fa      	ldr	r2, [r7, #12]
 801c9de:	4313      	orrs	r3, r2
 801c9e0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	685b      	ldr	r3, [r3, #4]
 801c9e6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 801c9ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801c9ee:	68fa      	ldr	r2, [r7, #12]
 801c9f0:	431a      	orrs	r2, r3
 801c9f2:	687b      	ldr	r3, [r7, #4]
 801c9f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801c9f6:	2300      	movs	r3, #0
}
 801c9f8:	4618      	mov	r0, r3
 801c9fa:	3714      	adds	r7, #20
 801c9fc:	46bd      	mov	sp, r7
 801c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca02:	b004      	add	sp, #16
 801ca04:	4770      	bx	lr

0801ca06 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 801ca06:	b480      	push	{r7}
 801ca08:	b083      	sub	sp, #12
 801ca0a:	af00      	add	r7, sp, #0
 801ca0c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801ca14:	4618      	mov	r0, r3
 801ca16:	370c      	adds	r7, #12
 801ca18:	46bd      	mov	sp, r7
 801ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca1e:	4770      	bx	lr

0801ca20 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 801ca20:	b480      	push	{r7}
 801ca22:	b083      	sub	sp, #12
 801ca24:	af00      	add	r7, sp, #0
 801ca26:	6078      	str	r0, [r7, #4]
 801ca28:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 801ca2a:	683b      	ldr	r3, [r7, #0]
 801ca2c:	681a      	ldr	r2, [r3, #0]
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801ca34:	2300      	movs	r3, #0
}
 801ca36:	4618      	mov	r0, r3
 801ca38:	370c      	adds	r7, #12
 801ca3a:	46bd      	mov	sp, r7
 801ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca40:	4770      	bx	lr

0801ca42 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 801ca42:	b580      	push	{r7, lr}
 801ca44:	b082      	sub	sp, #8
 801ca46:	af00      	add	r7, sp, #0
 801ca48:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	2203      	movs	r2, #3
 801ca4e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 801ca50:	2002      	movs	r0, #2
 801ca52:	f7f8 f9bb 	bl	8014dcc <HAL_Delay>
  
  return HAL_OK;
 801ca56:	2300      	movs	r3, #0
}
 801ca58:	4618      	mov	r0, r3
 801ca5a:	3708      	adds	r7, #8
 801ca5c:	46bd      	mov	sp, r7
 801ca5e:	bd80      	pop	{r7, pc}

0801ca60 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 801ca60:	b480      	push	{r7}
 801ca62:	b083      	sub	sp, #12
 801ca64:	af00      	add	r7, sp, #0
 801ca66:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	681b      	ldr	r3, [r3, #0]
 801ca6c:	f003 0303 	and.w	r3, r3, #3
}
 801ca70:	4618      	mov	r0, r3
 801ca72:	370c      	adds	r7, #12
 801ca74:	46bd      	mov	sp, r7
 801ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca7a:	4770      	bx	lr

0801ca7c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 801ca7c:	b480      	push	{r7}
 801ca7e:	b085      	sub	sp, #20
 801ca80:	af00      	add	r7, sp, #0
 801ca82:	6078      	str	r0, [r7, #4]
 801ca84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801ca86:	2300      	movs	r3, #0
 801ca88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 801ca8a:	683b      	ldr	r3, [r7, #0]
 801ca8c:	681a      	ldr	r2, [r3, #0]
 801ca8e:	687b      	ldr	r3, [r7, #4]
 801ca90:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801ca92:	683b      	ldr	r3, [r7, #0]
 801ca94:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801ca96:	683b      	ldr	r3, [r7, #0]
 801ca98:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801ca9a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801ca9c:	683b      	ldr	r3, [r7, #0]
 801ca9e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 801caa0:	431a      	orrs	r2, r3
                       Command->CPSM);
 801caa2:	683b      	ldr	r3, [r7, #0]
 801caa4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801caa6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801caa8:	68fa      	ldr	r2, [r7, #12]
 801caaa:	4313      	orrs	r3, r2
 801caac:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	68db      	ldr	r3, [r3, #12]
 801cab2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801cab6:	f023 030f 	bic.w	r3, r3, #15
 801caba:	68fa      	ldr	r2, [r7, #12]
 801cabc:	431a      	orrs	r2, r3
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801cac2:	2300      	movs	r3, #0
}
 801cac4:	4618      	mov	r0, r3
 801cac6:	3714      	adds	r7, #20
 801cac8:	46bd      	mov	sp, r7
 801caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cace:	4770      	bx	lr

0801cad0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 801cad0:	b480      	push	{r7}
 801cad2:	b083      	sub	sp, #12
 801cad4:	af00      	add	r7, sp, #0
 801cad6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	691b      	ldr	r3, [r3, #16]
 801cadc:	b2db      	uxtb	r3, r3
}
 801cade:	4618      	mov	r0, r3
 801cae0:	370c      	adds	r7, #12
 801cae2:	46bd      	mov	sp, r7
 801cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cae8:	4770      	bx	lr

0801caea <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 801caea:	b480      	push	{r7}
 801caec:	b085      	sub	sp, #20
 801caee:	af00      	add	r7, sp, #0
 801caf0:	6078      	str	r0, [r7, #4]
 801caf2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	3314      	adds	r3, #20
 801caf8:	461a      	mov	r2, r3
 801cafa:	683b      	ldr	r3, [r7, #0]
 801cafc:	4413      	add	r3, r2
 801cafe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 801cb00:	68fb      	ldr	r3, [r7, #12]
 801cb02:	681b      	ldr	r3, [r3, #0]
}  
 801cb04:	4618      	mov	r0, r3
 801cb06:	3714      	adds	r7, #20
 801cb08:	46bd      	mov	sp, r7
 801cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb0e:	4770      	bx	lr

0801cb10 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 801cb10:	b480      	push	{r7}
 801cb12:	b085      	sub	sp, #20
 801cb14:	af00      	add	r7, sp, #0
 801cb16:	6078      	str	r0, [r7, #4]
 801cb18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801cb1a:	2300      	movs	r3, #0
 801cb1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 801cb1e:	683b      	ldr	r3, [r7, #0]
 801cb20:	681a      	ldr	r2, [r3, #0]
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 801cb26:	683b      	ldr	r3, [r7, #0]
 801cb28:	685a      	ldr	r2, [r3, #4]
 801cb2a:	687b      	ldr	r3, [r7, #4]
 801cb2c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801cb2e:	683b      	ldr	r3, [r7, #0]
 801cb30:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801cb32:	683b      	ldr	r3, [r7, #0]
 801cb34:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801cb36:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 801cb38:	683b      	ldr	r3, [r7, #0]
 801cb3a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801cb3c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801cb3e:	683b      	ldr	r3, [r7, #0]
 801cb40:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801cb42:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801cb44:	68fa      	ldr	r2, [r7, #12]
 801cb46:	4313      	orrs	r3, r2
 801cb48:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb4e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801cb52:	68fb      	ldr	r3, [r7, #12]
 801cb54:	431a      	orrs	r2, r3
 801cb56:	687b      	ldr	r3, [r7, #4]
 801cb58:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801cb5a:	2300      	movs	r3, #0

}
 801cb5c:	4618      	mov	r0, r3
 801cb5e:	3714      	adds	r7, #20
 801cb60:	46bd      	mov	sp, r7
 801cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb66:	4770      	bx	lr

0801cb68 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 801cb68:	b580      	push	{r7, lr}
 801cb6a:	b088      	sub	sp, #32
 801cb6c:	af00      	add	r7, sp, #0
 801cb6e:	6078      	str	r0, [r7, #4]
 801cb70:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801cb72:	683b      	ldr	r3, [r7, #0]
 801cb74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801cb76:	2310      	movs	r3, #16
 801cb78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801cb7a:	2340      	movs	r3, #64	; 0x40
 801cb7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801cb7e:	2300      	movs	r3, #0
 801cb80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801cb82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cb86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801cb88:	f107 0308 	add.w	r3, r7, #8
 801cb8c:	4619      	mov	r1, r3
 801cb8e:	6878      	ldr	r0, [r7, #4]
 801cb90:	f7ff ff74 	bl	801ca7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 801cb94:	f241 3288 	movw	r2, #5000	; 0x1388
 801cb98:	2110      	movs	r1, #16
 801cb9a:	6878      	ldr	r0, [r7, #4]
 801cb9c:	f000 fa40 	bl	801d020 <SDMMC_GetCmdResp1>
 801cba0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801cba2:	69fb      	ldr	r3, [r7, #28]
}
 801cba4:	4618      	mov	r0, r3
 801cba6:	3720      	adds	r7, #32
 801cba8:	46bd      	mov	sp, r7
 801cbaa:	bd80      	pop	{r7, pc}

0801cbac <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 801cbac:	b580      	push	{r7, lr}
 801cbae:	b088      	sub	sp, #32
 801cbb0:	af00      	add	r7, sp, #0
 801cbb2:	6078      	str	r0, [r7, #4]
 801cbb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801cbb6:	683b      	ldr	r3, [r7, #0]
 801cbb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801cbba:	2311      	movs	r3, #17
 801cbbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801cbbe:	2340      	movs	r3, #64	; 0x40
 801cbc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801cbc2:	2300      	movs	r3, #0
 801cbc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801cbc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cbca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801cbcc:	f107 0308 	add.w	r3, r7, #8
 801cbd0:	4619      	mov	r1, r3
 801cbd2:	6878      	ldr	r0, [r7, #4]
 801cbd4:	f7ff ff52 	bl	801ca7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 801cbd8:	f241 3288 	movw	r2, #5000	; 0x1388
 801cbdc:	2111      	movs	r1, #17
 801cbde:	6878      	ldr	r0, [r7, #4]
 801cbe0:	f000 fa1e 	bl	801d020 <SDMMC_GetCmdResp1>
 801cbe4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801cbe6:	69fb      	ldr	r3, [r7, #28]
}
 801cbe8:	4618      	mov	r0, r3
 801cbea:	3720      	adds	r7, #32
 801cbec:	46bd      	mov	sp, r7
 801cbee:	bd80      	pop	{r7, pc}

0801cbf0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 801cbf0:	b580      	push	{r7, lr}
 801cbf2:	b088      	sub	sp, #32
 801cbf4:	af00      	add	r7, sp, #0
 801cbf6:	6078      	str	r0, [r7, #4]
 801cbf8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801cbfa:	683b      	ldr	r3, [r7, #0]
 801cbfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801cbfe:	2312      	movs	r3, #18
 801cc00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801cc02:	2340      	movs	r3, #64	; 0x40
 801cc04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801cc06:	2300      	movs	r3, #0
 801cc08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801cc0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cc0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801cc10:	f107 0308 	add.w	r3, r7, #8
 801cc14:	4619      	mov	r1, r3
 801cc16:	6878      	ldr	r0, [r7, #4]
 801cc18:	f7ff ff30 	bl	801ca7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801cc1c:	f241 3288 	movw	r2, #5000	; 0x1388
 801cc20:	2112      	movs	r1, #18
 801cc22:	6878      	ldr	r0, [r7, #4]
 801cc24:	f000 f9fc 	bl	801d020 <SDMMC_GetCmdResp1>
 801cc28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801cc2a:	69fb      	ldr	r3, [r7, #28]
}
 801cc2c:	4618      	mov	r0, r3
 801cc2e:	3720      	adds	r7, #32
 801cc30:	46bd      	mov	sp, r7
 801cc32:	bd80      	pop	{r7, pc}

0801cc34 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801cc34:	b580      	push	{r7, lr}
 801cc36:	b088      	sub	sp, #32
 801cc38:	af00      	add	r7, sp, #0
 801cc3a:	6078      	str	r0, [r7, #4]
 801cc3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801cc3e:	683b      	ldr	r3, [r7, #0]
 801cc40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801cc42:	2318      	movs	r3, #24
 801cc44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801cc46:	2340      	movs	r3, #64	; 0x40
 801cc48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801cc4a:	2300      	movs	r3, #0
 801cc4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801cc4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cc52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801cc54:	f107 0308 	add.w	r3, r7, #8
 801cc58:	4619      	mov	r1, r3
 801cc5a:	6878      	ldr	r0, [r7, #4]
 801cc5c:	f7ff ff0e 	bl	801ca7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 801cc60:	f241 3288 	movw	r2, #5000	; 0x1388
 801cc64:	2118      	movs	r1, #24
 801cc66:	6878      	ldr	r0, [r7, #4]
 801cc68:	f000 f9da 	bl	801d020 <SDMMC_GetCmdResp1>
 801cc6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801cc6e:	69fb      	ldr	r3, [r7, #28]
}
 801cc70:	4618      	mov	r0, r3
 801cc72:	3720      	adds	r7, #32
 801cc74:	46bd      	mov	sp, r7
 801cc76:	bd80      	pop	{r7, pc}

0801cc78 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801cc78:	b580      	push	{r7, lr}
 801cc7a:	b088      	sub	sp, #32
 801cc7c:	af00      	add	r7, sp, #0
 801cc7e:	6078      	str	r0, [r7, #4]
 801cc80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801cc82:	683b      	ldr	r3, [r7, #0]
 801cc84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801cc86:	2319      	movs	r3, #25
 801cc88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801cc8a:	2340      	movs	r3, #64	; 0x40
 801cc8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801cc8e:	2300      	movs	r3, #0
 801cc90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801cc92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cc96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801cc98:	f107 0308 	add.w	r3, r7, #8
 801cc9c:	4619      	mov	r1, r3
 801cc9e:	6878      	ldr	r0, [r7, #4]
 801cca0:	f7ff feec 	bl	801ca7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801cca4:	f241 3288 	movw	r2, #5000	; 0x1388
 801cca8:	2119      	movs	r1, #25
 801ccaa:	6878      	ldr	r0, [r7, #4]
 801ccac:	f000 f9b8 	bl	801d020 <SDMMC_GetCmdResp1>
 801ccb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801ccb2:	69fb      	ldr	r3, [r7, #28]
}
 801ccb4:	4618      	mov	r0, r3
 801ccb6:	3720      	adds	r7, #32
 801ccb8:	46bd      	mov	sp, r7
 801ccba:	bd80      	pop	{r7, pc}

0801ccbc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 801ccbc:	b580      	push	{r7, lr}
 801ccbe:	b088      	sub	sp, #32
 801ccc0:	af00      	add	r7, sp, #0
 801ccc2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801ccc4:	2300      	movs	r3, #0
 801ccc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801ccc8:	230c      	movs	r3, #12
 801ccca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801cccc:	2340      	movs	r3, #64	; 0x40
 801ccce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801ccd0:	2300      	movs	r3, #0
 801ccd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801ccd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ccd8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801ccda:	f107 0308 	add.w	r3, r7, #8
 801ccde:	4619      	mov	r1, r3
 801cce0:	6878      	ldr	r0, [r7, #4]
 801cce2:	f7ff fecb 	bl	801ca7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 801cce6:	4a05      	ldr	r2, [pc, #20]	; (801ccfc <SDMMC_CmdStopTransfer+0x40>)
 801cce8:	210c      	movs	r1, #12
 801ccea:	6878      	ldr	r0, [r7, #4]
 801ccec:	f000 f998 	bl	801d020 <SDMMC_GetCmdResp1>
 801ccf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801ccf2:	69fb      	ldr	r3, [r7, #28]
}
 801ccf4:	4618      	mov	r0, r3
 801ccf6:	3720      	adds	r7, #32
 801ccf8:	46bd      	mov	sp, r7
 801ccfa:	bd80      	pop	{r7, pc}
 801ccfc:	05f5e100 	.word	0x05f5e100

0801cd00 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 801cd00:	b580      	push	{r7, lr}
 801cd02:	b08a      	sub	sp, #40	; 0x28
 801cd04:	af00      	add	r7, sp, #0
 801cd06:	60f8      	str	r0, [r7, #12]
 801cd08:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801cd0c:	683b      	ldr	r3, [r7, #0]
 801cd0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801cd10:	2307      	movs	r3, #7
 801cd12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801cd14:	2340      	movs	r3, #64	; 0x40
 801cd16:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801cd18:	2300      	movs	r3, #0
 801cd1a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801cd1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cd20:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801cd22:	f107 0310 	add.w	r3, r7, #16
 801cd26:	4619      	mov	r1, r3
 801cd28:	68f8      	ldr	r0, [r7, #12]
 801cd2a:	f7ff fea7 	bl	801ca7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 801cd2e:	f241 3288 	movw	r2, #5000	; 0x1388
 801cd32:	2107      	movs	r1, #7
 801cd34:	68f8      	ldr	r0, [r7, #12]
 801cd36:	f000 f973 	bl	801d020 <SDMMC_GetCmdResp1>
 801cd3a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801cd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801cd3e:	4618      	mov	r0, r3
 801cd40:	3728      	adds	r7, #40	; 0x28
 801cd42:	46bd      	mov	sp, r7
 801cd44:	bd80      	pop	{r7, pc}

0801cd46 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801cd46:	b580      	push	{r7, lr}
 801cd48:	b088      	sub	sp, #32
 801cd4a:	af00      	add	r7, sp, #0
 801cd4c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801cd4e:	2300      	movs	r3, #0
 801cd50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801cd52:	2300      	movs	r3, #0
 801cd54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 801cd56:	2300      	movs	r3, #0
 801cd58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801cd5a:	2300      	movs	r3, #0
 801cd5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801cd5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cd62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801cd64:	f107 0308 	add.w	r3, r7, #8
 801cd68:	4619      	mov	r1, r3
 801cd6a:	6878      	ldr	r0, [r7, #4]
 801cd6c:	f7ff fe86 	bl	801ca7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 801cd70:	6878      	ldr	r0, [r7, #4]
 801cd72:	f000 f92d 	bl	801cfd0 <SDMMC_GetCmdError>
 801cd76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801cd78:	69fb      	ldr	r3, [r7, #28]
}
 801cd7a:	4618      	mov	r0, r3
 801cd7c:	3720      	adds	r7, #32
 801cd7e:	46bd      	mov	sp, r7
 801cd80:	bd80      	pop	{r7, pc}

0801cd82 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 801cd82:	b580      	push	{r7, lr}
 801cd84:	b088      	sub	sp, #32
 801cd86:	af00      	add	r7, sp, #0
 801cd88:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801cd8a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801cd8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801cd90:	2308      	movs	r3, #8
 801cd92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801cd94:	2340      	movs	r3, #64	; 0x40
 801cd96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801cd98:	2300      	movs	r3, #0
 801cd9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801cd9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cda0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801cda2:	f107 0308 	add.w	r3, r7, #8
 801cda6:	4619      	mov	r1, r3
 801cda8:	6878      	ldr	r0, [r7, #4]
 801cdaa:	f7ff fe67 	bl	801ca7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 801cdae:	6878      	ldr	r0, [r7, #4]
 801cdb0:	f000 fb16 	bl	801d3e0 <SDMMC_GetCmdResp7>
 801cdb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801cdb6:	69fb      	ldr	r3, [r7, #28]
}
 801cdb8:	4618      	mov	r0, r3
 801cdba:	3720      	adds	r7, #32
 801cdbc:	46bd      	mov	sp, r7
 801cdbe:	bd80      	pop	{r7, pc}

0801cdc0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801cdc0:	b580      	push	{r7, lr}
 801cdc2:	b088      	sub	sp, #32
 801cdc4:	af00      	add	r7, sp, #0
 801cdc6:	6078      	str	r0, [r7, #4]
 801cdc8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801cdca:	683b      	ldr	r3, [r7, #0]
 801cdcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801cdce:	2337      	movs	r3, #55	; 0x37
 801cdd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801cdd2:	2340      	movs	r3, #64	; 0x40
 801cdd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801cdd6:	2300      	movs	r3, #0
 801cdd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801cdda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cdde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801cde0:	f107 0308 	add.w	r3, r7, #8
 801cde4:	4619      	mov	r1, r3
 801cde6:	6878      	ldr	r0, [r7, #4]
 801cde8:	f7ff fe48 	bl	801ca7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 801cdec:	f241 3288 	movw	r2, #5000	; 0x1388
 801cdf0:	2137      	movs	r1, #55	; 0x37
 801cdf2:	6878      	ldr	r0, [r7, #4]
 801cdf4:	f000 f914 	bl	801d020 <SDMMC_GetCmdResp1>
 801cdf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801cdfa:	69fb      	ldr	r3, [r7, #28]
}
 801cdfc:	4618      	mov	r0, r3
 801cdfe:	3720      	adds	r7, #32
 801ce00:	46bd      	mov	sp, r7
 801ce02:	bd80      	pop	{r7, pc}

0801ce04 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801ce04:	b580      	push	{r7, lr}
 801ce06:	b088      	sub	sp, #32
 801ce08:	af00      	add	r7, sp, #0
 801ce0a:	6078      	str	r0, [r7, #4]
 801ce0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801ce0e:	683b      	ldr	r3, [r7, #0]
 801ce10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801ce14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ce18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801ce1a:	2329      	movs	r3, #41	; 0x29
 801ce1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801ce1e:	2340      	movs	r3, #64	; 0x40
 801ce20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801ce22:	2300      	movs	r3, #0
 801ce24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801ce26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ce2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801ce2c:	f107 0308 	add.w	r3, r7, #8
 801ce30:	4619      	mov	r1, r3
 801ce32:	6878      	ldr	r0, [r7, #4]
 801ce34:	f7ff fe22 	bl	801ca7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 801ce38:	6878      	ldr	r0, [r7, #4]
 801ce3a:	f000 fa23 	bl	801d284 <SDMMC_GetCmdResp3>
 801ce3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801ce40:	69fb      	ldr	r3, [r7, #28]
}
 801ce42:	4618      	mov	r0, r3
 801ce44:	3720      	adds	r7, #32
 801ce46:	46bd      	mov	sp, r7
 801ce48:	bd80      	pop	{r7, pc}

0801ce4a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 801ce4a:	b580      	push	{r7, lr}
 801ce4c:	b088      	sub	sp, #32
 801ce4e:	af00      	add	r7, sp, #0
 801ce50:	6078      	str	r0, [r7, #4]
 801ce52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801ce54:	683b      	ldr	r3, [r7, #0]
 801ce56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801ce58:	2306      	movs	r3, #6
 801ce5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801ce5c:	2340      	movs	r3, #64	; 0x40
 801ce5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801ce60:	2300      	movs	r3, #0
 801ce62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801ce64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ce68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801ce6a:	f107 0308 	add.w	r3, r7, #8
 801ce6e:	4619      	mov	r1, r3
 801ce70:	6878      	ldr	r0, [r7, #4]
 801ce72:	f7ff fe03 	bl	801ca7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 801ce76:	f241 3288 	movw	r2, #5000	; 0x1388
 801ce7a:	2106      	movs	r1, #6
 801ce7c:	6878      	ldr	r0, [r7, #4]
 801ce7e:	f000 f8cf 	bl	801d020 <SDMMC_GetCmdResp1>
 801ce82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801ce84:	69fb      	ldr	r3, [r7, #28]
}
 801ce86:	4618      	mov	r0, r3
 801ce88:	3720      	adds	r7, #32
 801ce8a:	46bd      	mov	sp, r7
 801ce8c:	bd80      	pop	{r7, pc}

0801ce8e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 801ce8e:	b580      	push	{r7, lr}
 801ce90:	b088      	sub	sp, #32
 801ce92:	af00      	add	r7, sp, #0
 801ce94:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801ce96:	2300      	movs	r3, #0
 801ce98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801ce9a:	2333      	movs	r3, #51	; 0x33
 801ce9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801ce9e:	2340      	movs	r3, #64	; 0x40
 801cea0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801cea2:	2300      	movs	r3, #0
 801cea4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801cea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ceaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801ceac:	f107 0308 	add.w	r3, r7, #8
 801ceb0:	4619      	mov	r1, r3
 801ceb2:	6878      	ldr	r0, [r7, #4]
 801ceb4:	f7ff fde2 	bl	801ca7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 801ceb8:	f241 3288 	movw	r2, #5000	; 0x1388
 801cebc:	2133      	movs	r1, #51	; 0x33
 801cebe:	6878      	ldr	r0, [r7, #4]
 801cec0:	f000 f8ae 	bl	801d020 <SDMMC_GetCmdResp1>
 801cec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801cec6:	69fb      	ldr	r3, [r7, #28]
}
 801cec8:	4618      	mov	r0, r3
 801ceca:	3720      	adds	r7, #32
 801cecc:	46bd      	mov	sp, r7
 801cece:	bd80      	pop	{r7, pc}

0801ced0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 801ced0:	b580      	push	{r7, lr}
 801ced2:	b088      	sub	sp, #32
 801ced4:	af00      	add	r7, sp, #0
 801ced6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801ced8:	2300      	movs	r3, #0
 801ceda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801cedc:	2302      	movs	r3, #2
 801cede:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 801cee0:	23c0      	movs	r3, #192	; 0xc0
 801cee2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801cee4:	2300      	movs	r3, #0
 801cee6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801cee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ceec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801ceee:	f107 0308 	add.w	r3, r7, #8
 801cef2:	4619      	mov	r1, r3
 801cef4:	6878      	ldr	r0, [r7, #4]
 801cef6:	f7ff fdc1 	bl	801ca7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801cefa:	6878      	ldr	r0, [r7, #4]
 801cefc:	f000 f97c 	bl	801d1f8 <SDMMC_GetCmdResp2>
 801cf00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801cf02:	69fb      	ldr	r3, [r7, #28]
}
 801cf04:	4618      	mov	r0, r3
 801cf06:	3720      	adds	r7, #32
 801cf08:	46bd      	mov	sp, r7
 801cf0a:	bd80      	pop	{r7, pc}

0801cf0c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801cf0c:	b580      	push	{r7, lr}
 801cf0e:	b088      	sub	sp, #32
 801cf10:	af00      	add	r7, sp, #0
 801cf12:	6078      	str	r0, [r7, #4]
 801cf14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801cf16:	683b      	ldr	r3, [r7, #0]
 801cf18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801cf1a:	2309      	movs	r3, #9
 801cf1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 801cf1e:	23c0      	movs	r3, #192	; 0xc0
 801cf20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801cf22:	2300      	movs	r3, #0
 801cf24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801cf26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cf2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801cf2c:	f107 0308 	add.w	r3, r7, #8
 801cf30:	4619      	mov	r1, r3
 801cf32:	6878      	ldr	r0, [r7, #4]
 801cf34:	f7ff fda2 	bl	801ca7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801cf38:	6878      	ldr	r0, [r7, #4]
 801cf3a:	f000 f95d 	bl	801d1f8 <SDMMC_GetCmdResp2>
 801cf3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801cf40:	69fb      	ldr	r3, [r7, #28]
}
 801cf42:	4618      	mov	r0, r3
 801cf44:	3720      	adds	r7, #32
 801cf46:	46bd      	mov	sp, r7
 801cf48:	bd80      	pop	{r7, pc}

0801cf4a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 801cf4a:	b580      	push	{r7, lr}
 801cf4c:	b088      	sub	sp, #32
 801cf4e:	af00      	add	r7, sp, #0
 801cf50:	6078      	str	r0, [r7, #4]
 801cf52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801cf54:	2300      	movs	r3, #0
 801cf56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801cf58:	2303      	movs	r3, #3
 801cf5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801cf5c:	2340      	movs	r3, #64	; 0x40
 801cf5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801cf60:	2300      	movs	r3, #0
 801cf62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801cf64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cf68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801cf6a:	f107 0308 	add.w	r3, r7, #8
 801cf6e:	4619      	mov	r1, r3
 801cf70:	6878      	ldr	r0, [r7, #4]
 801cf72:	f7ff fd83 	bl	801ca7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801cf76:	683a      	ldr	r2, [r7, #0]
 801cf78:	2103      	movs	r1, #3
 801cf7a:	6878      	ldr	r0, [r7, #4]
 801cf7c:	f000 f9bc 	bl	801d2f8 <SDMMC_GetCmdResp6>
 801cf80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801cf82:	69fb      	ldr	r3, [r7, #28]
}
 801cf84:	4618      	mov	r0, r3
 801cf86:	3720      	adds	r7, #32
 801cf88:	46bd      	mov	sp, r7
 801cf8a:	bd80      	pop	{r7, pc}

0801cf8c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801cf8c:	b580      	push	{r7, lr}
 801cf8e:	b088      	sub	sp, #32
 801cf90:	af00      	add	r7, sp, #0
 801cf92:	6078      	str	r0, [r7, #4]
 801cf94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801cf96:	683b      	ldr	r3, [r7, #0]
 801cf98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801cf9a:	230d      	movs	r3, #13
 801cf9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801cf9e:	2340      	movs	r3, #64	; 0x40
 801cfa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801cfa2:	2300      	movs	r3, #0
 801cfa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801cfa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cfaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801cfac:	f107 0308 	add.w	r3, r7, #8
 801cfb0:	4619      	mov	r1, r3
 801cfb2:	6878      	ldr	r0, [r7, #4]
 801cfb4:	f7ff fd62 	bl	801ca7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 801cfb8:	f241 3288 	movw	r2, #5000	; 0x1388
 801cfbc:	210d      	movs	r1, #13
 801cfbe:	6878      	ldr	r0, [r7, #4]
 801cfc0:	f000 f82e 	bl	801d020 <SDMMC_GetCmdResp1>
 801cfc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801cfc6:	69fb      	ldr	r3, [r7, #28]
}
 801cfc8:	4618      	mov	r0, r3
 801cfca:	3720      	adds	r7, #32
 801cfcc:	46bd      	mov	sp, r7
 801cfce:	bd80      	pop	{r7, pc}

0801cfd0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 801cfd0:	b490      	push	{r4, r7}
 801cfd2:	b082      	sub	sp, #8
 801cfd4:	af00      	add	r7, sp, #0
 801cfd6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801cfd8:	4b0f      	ldr	r3, [pc, #60]	; (801d018 <SDMMC_GetCmdError+0x48>)
 801cfda:	681b      	ldr	r3, [r3, #0]
 801cfdc:	4a0f      	ldr	r2, [pc, #60]	; (801d01c <SDMMC_GetCmdError+0x4c>)
 801cfde:	fba2 2303 	umull	r2, r3, r2, r3
 801cfe2:	0a5b      	lsrs	r3, r3, #9
 801cfe4:	f241 3288 	movw	r2, #5000	; 0x1388
 801cfe8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801cfec:	4623      	mov	r3, r4
 801cfee:	1e5c      	subs	r4, r3, #1
 801cff0:	2b00      	cmp	r3, #0
 801cff2:	d102      	bne.n	801cffa <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801cff4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801cff8:	e009      	b.n	801d00e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 801cffa:	687b      	ldr	r3, [r7, #4]
 801cffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d002:	2b00      	cmp	r3, #0
 801d004:	d0f2      	beq.n	801cfec <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	22c5      	movs	r2, #197	; 0xc5
 801d00a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 801d00c:	2300      	movs	r3, #0
}
 801d00e:	4618      	mov	r0, r3
 801d010:	3708      	adds	r7, #8
 801d012:	46bd      	mov	sp, r7
 801d014:	bc90      	pop	{r4, r7}
 801d016:	4770      	bx	lr
 801d018:	20000678 	.word	0x20000678
 801d01c:	10624dd3 	.word	0x10624dd3

0801d020 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 801d020:	b590      	push	{r4, r7, lr}
 801d022:	b087      	sub	sp, #28
 801d024:	af00      	add	r7, sp, #0
 801d026:	60f8      	str	r0, [r7, #12]
 801d028:	460b      	mov	r3, r1
 801d02a:	607a      	str	r2, [r7, #4]
 801d02c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801d02e:	4b6f      	ldr	r3, [pc, #444]	; (801d1ec <SDMMC_GetCmdResp1+0x1cc>)
 801d030:	681b      	ldr	r3, [r3, #0]
 801d032:	4a6f      	ldr	r2, [pc, #444]	; (801d1f0 <SDMMC_GetCmdResp1+0x1d0>)
 801d034:	fba2 2303 	umull	r2, r3, r2, r3
 801d038:	0a5b      	lsrs	r3, r3, #9
 801d03a:	687a      	ldr	r2, [r7, #4]
 801d03c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801d040:	4623      	mov	r3, r4
 801d042:	1e5c      	subs	r4, r3, #1
 801d044:	2b00      	cmp	r3, #0
 801d046:	d102      	bne.n	801d04e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801d048:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801d04c:	e0c9      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 801d04e:	68fb      	ldr	r3, [r7, #12]
 801d050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d052:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801d054:	697b      	ldr	r3, [r7, #20]
 801d056:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801d05a:	2b00      	cmp	r3, #0
 801d05c:	d0f0      	beq.n	801d040 <SDMMC_GetCmdResp1+0x20>
 801d05e:	697b      	ldr	r3, [r7, #20]
 801d060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801d064:	2b00      	cmp	r3, #0
 801d066:	d1eb      	bne.n	801d040 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801d068:	68fb      	ldr	r3, [r7, #12]
 801d06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d06c:	f003 0304 	and.w	r3, r3, #4
 801d070:	2b00      	cmp	r3, #0
 801d072:	d004      	beq.n	801d07e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801d074:	68fb      	ldr	r3, [r7, #12]
 801d076:	2204      	movs	r2, #4
 801d078:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801d07a:	2304      	movs	r3, #4
 801d07c:	e0b1      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801d07e:	68fb      	ldr	r3, [r7, #12]
 801d080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d082:	f003 0301 	and.w	r3, r3, #1
 801d086:	2b00      	cmp	r3, #0
 801d088:	d004      	beq.n	801d094 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801d08a:	68fb      	ldr	r3, [r7, #12]
 801d08c:	2201      	movs	r2, #1
 801d08e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801d090:	2301      	movs	r3, #1
 801d092:	e0a6      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801d094:	68fb      	ldr	r3, [r7, #12]
 801d096:	22c5      	movs	r2, #197	; 0xc5
 801d098:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801d09a:	68f8      	ldr	r0, [r7, #12]
 801d09c:	f7ff fd18 	bl	801cad0 <SDIO_GetCommandResponse>
 801d0a0:	4603      	mov	r3, r0
 801d0a2:	461a      	mov	r2, r3
 801d0a4:	7afb      	ldrb	r3, [r7, #11]
 801d0a6:	4293      	cmp	r3, r2
 801d0a8:	d001      	beq.n	801d0ae <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801d0aa:	2301      	movs	r3, #1
 801d0ac:	e099      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 801d0ae:	2100      	movs	r1, #0
 801d0b0:	68f8      	ldr	r0, [r7, #12]
 801d0b2:	f7ff fd1a 	bl	801caea <SDIO_GetResponse>
 801d0b6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801d0b8:	693a      	ldr	r2, [r7, #16]
 801d0ba:	4b4e      	ldr	r3, [pc, #312]	; (801d1f4 <SDMMC_GetCmdResp1+0x1d4>)
 801d0bc:	4013      	ands	r3, r2
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d101      	bne.n	801d0c6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 801d0c2:	2300      	movs	r3, #0
 801d0c4:	e08d      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801d0c6:	693b      	ldr	r3, [r7, #16]
 801d0c8:	2b00      	cmp	r3, #0
 801d0ca:	da02      	bge.n	801d0d2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801d0cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801d0d0:	e087      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801d0d2:	693b      	ldr	r3, [r7, #16]
 801d0d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801d0d8:	2b00      	cmp	r3, #0
 801d0da:	d001      	beq.n	801d0e0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801d0dc:	2340      	movs	r3, #64	; 0x40
 801d0de:	e080      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801d0e0:	693b      	ldr	r3, [r7, #16]
 801d0e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	d001      	beq.n	801d0ee <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801d0ea:	2380      	movs	r3, #128	; 0x80
 801d0ec:	e079      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801d0ee:	693b      	ldr	r3, [r7, #16]
 801d0f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	d002      	beq.n	801d0fe <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801d0f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 801d0fc:	e071      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801d0fe:	693b      	ldr	r3, [r7, #16]
 801d100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d104:	2b00      	cmp	r3, #0
 801d106:	d002      	beq.n	801d10e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801d108:	f44f 7300 	mov.w	r3, #512	; 0x200
 801d10c:	e069      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801d10e:	693b      	ldr	r3, [r7, #16]
 801d110:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801d114:	2b00      	cmp	r3, #0
 801d116:	d002      	beq.n	801d11e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801d118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d11c:	e061      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801d11e:	693b      	ldr	r3, [r7, #16]
 801d120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801d124:	2b00      	cmp	r3, #0
 801d126:	d002      	beq.n	801d12e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801d128:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d12c:	e059      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801d12e:	693b      	ldr	r3, [r7, #16]
 801d130:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d134:	2b00      	cmp	r3, #0
 801d136:	d002      	beq.n	801d13e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801d138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d13c:	e051      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801d13e:	693b      	ldr	r3, [r7, #16]
 801d140:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d144:	2b00      	cmp	r3, #0
 801d146:	d002      	beq.n	801d14e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801d148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801d14c:	e049      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801d14e:	693b      	ldr	r3, [r7, #16]
 801d150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d154:	2b00      	cmp	r3, #0
 801d156:	d002      	beq.n	801d15e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801d158:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801d15c:	e041      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801d15e:	693b      	ldr	r3, [r7, #16]
 801d160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d164:	2b00      	cmp	r3, #0
 801d166:	d002      	beq.n	801d16e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 801d168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d16c:	e039      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801d16e:	693b      	ldr	r3, [r7, #16]
 801d170:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801d174:	2b00      	cmp	r3, #0
 801d176:	d002      	beq.n	801d17e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801d178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801d17c:	e031      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801d17e:	693b      	ldr	r3, [r7, #16]
 801d180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d184:	2b00      	cmp	r3, #0
 801d186:	d002      	beq.n	801d18e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801d188:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801d18c:	e029      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801d18e:	693b      	ldr	r3, [r7, #16]
 801d190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d194:	2b00      	cmp	r3, #0
 801d196:	d002      	beq.n	801d19e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801d198:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801d19c:	e021      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801d19e:	693b      	ldr	r3, [r7, #16]
 801d1a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801d1a4:	2b00      	cmp	r3, #0
 801d1a6:	d002      	beq.n	801d1ae <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801d1a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801d1ac:	e019      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801d1ae:	693b      	ldr	r3, [r7, #16]
 801d1b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d1b4:	2b00      	cmp	r3, #0
 801d1b6:	d002      	beq.n	801d1be <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801d1b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801d1bc:	e011      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801d1be:	693b      	ldr	r3, [r7, #16]
 801d1c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	d002      	beq.n	801d1ce <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801d1c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801d1cc:	e009      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801d1ce:	693b      	ldr	r3, [r7, #16]
 801d1d0:	f003 0308 	and.w	r3, r3, #8
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	d002      	beq.n	801d1de <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801d1d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801d1dc:	e001      	b.n	801d1e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801d1de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801d1e2:	4618      	mov	r0, r3
 801d1e4:	371c      	adds	r7, #28
 801d1e6:	46bd      	mov	sp, r7
 801d1e8:	bd90      	pop	{r4, r7, pc}
 801d1ea:	bf00      	nop
 801d1ec:	20000678 	.word	0x20000678
 801d1f0:	10624dd3 	.word	0x10624dd3
 801d1f4:	fdffe008 	.word	0xfdffe008

0801d1f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 801d1f8:	b490      	push	{r4, r7}
 801d1fa:	b084      	sub	sp, #16
 801d1fc:	af00      	add	r7, sp, #0
 801d1fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801d200:	4b1e      	ldr	r3, [pc, #120]	; (801d27c <SDMMC_GetCmdResp2+0x84>)
 801d202:	681b      	ldr	r3, [r3, #0]
 801d204:	4a1e      	ldr	r2, [pc, #120]	; (801d280 <SDMMC_GetCmdResp2+0x88>)
 801d206:	fba2 2303 	umull	r2, r3, r2, r3
 801d20a:	0a5b      	lsrs	r3, r3, #9
 801d20c:	f241 3288 	movw	r2, #5000	; 0x1388
 801d210:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801d214:	4623      	mov	r3, r4
 801d216:	1e5c      	subs	r4, r3, #1
 801d218:	2b00      	cmp	r3, #0
 801d21a:	d102      	bne.n	801d222 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801d21c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801d220:	e026      	b.n	801d270 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 801d222:	687b      	ldr	r3, [r7, #4]
 801d224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d226:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801d228:	68fb      	ldr	r3, [r7, #12]
 801d22a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801d22e:	2b00      	cmp	r3, #0
 801d230:	d0f0      	beq.n	801d214 <SDMMC_GetCmdResp2+0x1c>
 801d232:	68fb      	ldr	r3, [r7, #12]
 801d234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801d238:	2b00      	cmp	r3, #0
 801d23a:	d1eb      	bne.n	801d214 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d240:	f003 0304 	and.w	r3, r3, #4
 801d244:	2b00      	cmp	r3, #0
 801d246:	d004      	beq.n	801d252 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	2204      	movs	r2, #4
 801d24c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801d24e:	2304      	movs	r3, #4
 801d250:	e00e      	b.n	801d270 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d256:	f003 0301 	and.w	r3, r3, #1
 801d25a:	2b00      	cmp	r3, #0
 801d25c:	d004      	beq.n	801d268 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801d25e:	687b      	ldr	r3, [r7, #4]
 801d260:	2201      	movs	r2, #1
 801d262:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801d264:	2301      	movs	r3, #1
 801d266:	e003      	b.n	801d270 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	22c5      	movs	r2, #197	; 0xc5
 801d26c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801d26e:	2300      	movs	r3, #0
}
 801d270:	4618      	mov	r0, r3
 801d272:	3710      	adds	r7, #16
 801d274:	46bd      	mov	sp, r7
 801d276:	bc90      	pop	{r4, r7}
 801d278:	4770      	bx	lr
 801d27a:	bf00      	nop
 801d27c:	20000678 	.word	0x20000678
 801d280:	10624dd3 	.word	0x10624dd3

0801d284 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 801d284:	b490      	push	{r4, r7}
 801d286:	b084      	sub	sp, #16
 801d288:	af00      	add	r7, sp, #0
 801d28a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801d28c:	4b18      	ldr	r3, [pc, #96]	; (801d2f0 <SDMMC_GetCmdResp3+0x6c>)
 801d28e:	681b      	ldr	r3, [r3, #0]
 801d290:	4a18      	ldr	r2, [pc, #96]	; (801d2f4 <SDMMC_GetCmdResp3+0x70>)
 801d292:	fba2 2303 	umull	r2, r3, r2, r3
 801d296:	0a5b      	lsrs	r3, r3, #9
 801d298:	f241 3288 	movw	r2, #5000	; 0x1388
 801d29c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801d2a0:	4623      	mov	r3, r4
 801d2a2:	1e5c      	subs	r4, r3, #1
 801d2a4:	2b00      	cmp	r3, #0
 801d2a6:	d102      	bne.n	801d2ae <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801d2a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801d2ac:	e01b      	b.n	801d2e6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 801d2ae:	687b      	ldr	r3, [r7, #4]
 801d2b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d2b2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801d2b4:	68fb      	ldr	r3, [r7, #12]
 801d2b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	d0f0      	beq.n	801d2a0 <SDMMC_GetCmdResp3+0x1c>
 801d2be:	68fb      	ldr	r3, [r7, #12]
 801d2c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	d1eb      	bne.n	801d2a0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d2cc:	f003 0304 	and.w	r3, r3, #4
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	d004      	beq.n	801d2de <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801d2d4:	687b      	ldr	r3, [r7, #4]
 801d2d6:	2204      	movs	r2, #4
 801d2d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801d2da:	2304      	movs	r3, #4
 801d2dc:	e003      	b.n	801d2e6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801d2de:	687b      	ldr	r3, [r7, #4]
 801d2e0:	22c5      	movs	r2, #197	; 0xc5
 801d2e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801d2e4:	2300      	movs	r3, #0
}
 801d2e6:	4618      	mov	r0, r3
 801d2e8:	3710      	adds	r7, #16
 801d2ea:	46bd      	mov	sp, r7
 801d2ec:	bc90      	pop	{r4, r7}
 801d2ee:	4770      	bx	lr
 801d2f0:	20000678 	.word	0x20000678
 801d2f4:	10624dd3 	.word	0x10624dd3

0801d2f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801d2f8:	b590      	push	{r4, r7, lr}
 801d2fa:	b087      	sub	sp, #28
 801d2fc:	af00      	add	r7, sp, #0
 801d2fe:	60f8      	str	r0, [r7, #12]
 801d300:	460b      	mov	r3, r1
 801d302:	607a      	str	r2, [r7, #4]
 801d304:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801d306:	4b34      	ldr	r3, [pc, #208]	; (801d3d8 <SDMMC_GetCmdResp6+0xe0>)
 801d308:	681b      	ldr	r3, [r3, #0]
 801d30a:	4a34      	ldr	r2, [pc, #208]	; (801d3dc <SDMMC_GetCmdResp6+0xe4>)
 801d30c:	fba2 2303 	umull	r2, r3, r2, r3
 801d310:	0a5b      	lsrs	r3, r3, #9
 801d312:	f241 3288 	movw	r2, #5000	; 0x1388
 801d316:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801d31a:	4623      	mov	r3, r4
 801d31c:	1e5c      	subs	r4, r3, #1
 801d31e:	2b00      	cmp	r3, #0
 801d320:	d102      	bne.n	801d328 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 801d322:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801d326:	e052      	b.n	801d3ce <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 801d328:	68fb      	ldr	r3, [r7, #12]
 801d32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d32c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801d32e:	697b      	ldr	r3, [r7, #20]
 801d330:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801d334:	2b00      	cmp	r3, #0
 801d336:	d0f0      	beq.n	801d31a <SDMMC_GetCmdResp6+0x22>
 801d338:	697b      	ldr	r3, [r7, #20]
 801d33a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d1eb      	bne.n	801d31a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801d342:	68fb      	ldr	r3, [r7, #12]
 801d344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d346:	f003 0304 	and.w	r3, r3, #4
 801d34a:	2b00      	cmp	r3, #0
 801d34c:	d004      	beq.n	801d358 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801d34e:	68fb      	ldr	r3, [r7, #12]
 801d350:	2204      	movs	r2, #4
 801d352:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801d354:	2304      	movs	r3, #4
 801d356:	e03a      	b.n	801d3ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801d358:	68fb      	ldr	r3, [r7, #12]
 801d35a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d35c:	f003 0301 	and.w	r3, r3, #1
 801d360:	2b00      	cmp	r3, #0
 801d362:	d004      	beq.n	801d36e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801d364:	68fb      	ldr	r3, [r7, #12]
 801d366:	2201      	movs	r2, #1
 801d368:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801d36a:	2301      	movs	r3, #1
 801d36c:	e02f      	b.n	801d3ce <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801d36e:	68f8      	ldr	r0, [r7, #12]
 801d370:	f7ff fbae 	bl	801cad0 <SDIO_GetCommandResponse>
 801d374:	4603      	mov	r3, r0
 801d376:	461a      	mov	r2, r3
 801d378:	7afb      	ldrb	r3, [r7, #11]
 801d37a:	4293      	cmp	r3, r2
 801d37c:	d001      	beq.n	801d382 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801d37e:	2301      	movs	r3, #1
 801d380:	e025      	b.n	801d3ce <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801d382:	68fb      	ldr	r3, [r7, #12]
 801d384:	22c5      	movs	r2, #197	; 0xc5
 801d386:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 801d388:	2100      	movs	r1, #0
 801d38a:	68f8      	ldr	r0, [r7, #12]
 801d38c:	f7ff fbad 	bl	801caea <SDIO_GetResponse>
 801d390:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801d392:	693b      	ldr	r3, [r7, #16]
 801d394:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 801d398:	2b00      	cmp	r3, #0
 801d39a:	d106      	bne.n	801d3aa <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 801d39c:	693b      	ldr	r3, [r7, #16]
 801d39e:	0c1b      	lsrs	r3, r3, #16
 801d3a0:	b29a      	uxth	r2, r3
 801d3a2:	687b      	ldr	r3, [r7, #4]
 801d3a4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801d3a6:	2300      	movs	r3, #0
 801d3a8:	e011      	b.n	801d3ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801d3aa:	693b      	ldr	r3, [r7, #16]
 801d3ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	d002      	beq.n	801d3ba <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801d3b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801d3b8:	e009      	b.n	801d3ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801d3ba:	693b      	ldr	r3, [r7, #16]
 801d3bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801d3c0:	2b00      	cmp	r3, #0
 801d3c2:	d002      	beq.n	801d3ca <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801d3c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d3c8:	e001      	b.n	801d3ce <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801d3ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801d3ce:	4618      	mov	r0, r3
 801d3d0:	371c      	adds	r7, #28
 801d3d2:	46bd      	mov	sp, r7
 801d3d4:	bd90      	pop	{r4, r7, pc}
 801d3d6:	bf00      	nop
 801d3d8:	20000678 	.word	0x20000678
 801d3dc:	10624dd3 	.word	0x10624dd3

0801d3e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 801d3e0:	b490      	push	{r4, r7}
 801d3e2:	b084      	sub	sp, #16
 801d3e4:	af00      	add	r7, sp, #0
 801d3e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801d3e8:	4b21      	ldr	r3, [pc, #132]	; (801d470 <SDMMC_GetCmdResp7+0x90>)
 801d3ea:	681b      	ldr	r3, [r3, #0]
 801d3ec:	4a21      	ldr	r2, [pc, #132]	; (801d474 <SDMMC_GetCmdResp7+0x94>)
 801d3ee:	fba2 2303 	umull	r2, r3, r2, r3
 801d3f2:	0a5b      	lsrs	r3, r3, #9
 801d3f4:	f241 3288 	movw	r2, #5000	; 0x1388
 801d3f8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801d3fc:	4623      	mov	r3, r4
 801d3fe:	1e5c      	subs	r4, r3, #1
 801d400:	2b00      	cmp	r3, #0
 801d402:	d102      	bne.n	801d40a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801d404:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801d408:	e02c      	b.n	801d464 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d40e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801d410:	68fb      	ldr	r3, [r7, #12]
 801d412:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801d416:	2b00      	cmp	r3, #0
 801d418:	d0f0      	beq.n	801d3fc <SDMMC_GetCmdResp7+0x1c>
 801d41a:	68fb      	ldr	r3, [r7, #12]
 801d41c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801d420:	2b00      	cmp	r3, #0
 801d422:	d1eb      	bne.n	801d3fc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801d424:	687b      	ldr	r3, [r7, #4]
 801d426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d428:	f003 0304 	and.w	r3, r3, #4
 801d42c:	2b00      	cmp	r3, #0
 801d42e:	d004      	beq.n	801d43a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	2204      	movs	r2, #4
 801d434:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801d436:	2304      	movs	r3, #4
 801d438:	e014      	b.n	801d464 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d43e:	f003 0301 	and.w	r3, r3, #1
 801d442:	2b00      	cmp	r3, #0
 801d444:	d004      	beq.n	801d450 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801d446:	687b      	ldr	r3, [r7, #4]
 801d448:	2201      	movs	r2, #1
 801d44a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801d44c:	2301      	movs	r3, #1
 801d44e:	e009      	b.n	801d464 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 801d450:	687b      	ldr	r3, [r7, #4]
 801d452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d458:	2b00      	cmp	r3, #0
 801d45a:	d002      	beq.n	801d462 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 801d45c:	687b      	ldr	r3, [r7, #4]
 801d45e:	2240      	movs	r2, #64	; 0x40
 801d460:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801d462:	2300      	movs	r3, #0
  
}
 801d464:	4618      	mov	r0, r3
 801d466:	3710      	adds	r7, #16
 801d468:	46bd      	mov	sp, r7
 801d46a:	bc90      	pop	{r4, r7}
 801d46c:	4770      	bx	lr
 801d46e:	bf00      	nop
 801d470:	20000678 	.word	0x20000678
 801d474:	10624dd3 	.word	0x10624dd3

0801d478 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801d478:	b580      	push	{r7, lr}
 801d47a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801d47c:	4904      	ldr	r1, [pc, #16]	; (801d490 <MX_FATFS_Init+0x18>)
 801d47e:	4805      	ldr	r0, [pc, #20]	; (801d494 <MX_FATFS_Init+0x1c>)
 801d480:	f003 f982 	bl	8020788 <FATFS_LinkDriver>
 801d484:	4603      	mov	r3, r0
 801d486:	461a      	mov	r2, r3
 801d488:	4b03      	ldr	r3, [pc, #12]	; (801d498 <MX_FATFS_Init+0x20>)
 801d48a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801d48c:	bf00      	nop
 801d48e:	bd80      	pop	{r7, pc}
 801d490:	20011130 	.word	0x20011130
 801d494:	0802daec 	.word	0x0802daec
 801d498:	2001112c 	.word	0x2001112c

0801d49c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801d49c:	b480      	push	{r7}
 801d49e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801d4a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801d4a2:	4618      	mov	r0, r3
 801d4a4:	46bd      	mov	sp, r7
 801d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4aa:	4770      	bx	lr

0801d4ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801d4ac:	b580      	push	{r7, lr}
 801d4ae:	b082      	sub	sp, #8
 801d4b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801d4b2:	2300      	movs	r3, #0
 801d4b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801d4b6:	f000 f896 	bl	801d5e6 <BSP_SD_IsDetected>
 801d4ba:	4603      	mov	r3, r0
 801d4bc:	2b01      	cmp	r3, #1
 801d4be:	d001      	beq.n	801d4c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 801d4c0:	2301      	movs	r3, #1
 801d4c2:	e012      	b.n	801d4ea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 801d4c4:	480b      	ldr	r0, [pc, #44]	; (801d4f4 <BSP_SD_Init+0x48>)
 801d4c6:	f7fb fe49 	bl	801915c <HAL_SD_Init>
 801d4ca:	4603      	mov	r3, r0
 801d4cc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801d4ce:	79fb      	ldrb	r3, [r7, #7]
 801d4d0:	2b00      	cmp	r3, #0
 801d4d2:	d109      	bne.n	801d4e8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 801d4d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801d4d8:	4806      	ldr	r0, [pc, #24]	; (801d4f4 <BSP_SD_Init+0x48>)
 801d4da:	f7fc fc09 	bl	8019cf0 <HAL_SD_ConfigWideBusOperation>
 801d4de:	4603      	mov	r3, r0
 801d4e0:	2b00      	cmp	r3, #0
 801d4e2:	d001      	beq.n	801d4e8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801d4e4:	2301      	movs	r3, #1
 801d4e6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801d4e8:	79fb      	ldrb	r3, [r7, #7]
}
 801d4ea:	4618      	mov	r0, r3
 801d4ec:	3708      	adds	r7, #8
 801d4ee:	46bd      	mov	sp, r7
 801d4f0:	bd80      	pop	{r7, pc}
 801d4f2:	bf00      	nop
 801d4f4:	20010da4 	.word	0x20010da4

0801d4f8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801d4f8:	b580      	push	{r7, lr}
 801d4fa:	b086      	sub	sp, #24
 801d4fc:	af00      	add	r7, sp, #0
 801d4fe:	60f8      	str	r0, [r7, #12]
 801d500:	60b9      	str	r1, [r7, #8]
 801d502:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801d504:	2300      	movs	r3, #0
 801d506:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801d508:	687b      	ldr	r3, [r7, #4]
 801d50a:	68ba      	ldr	r2, [r7, #8]
 801d50c:	68f9      	ldr	r1, [r7, #12]
 801d50e:	4806      	ldr	r0, [pc, #24]	; (801d528 <BSP_SD_ReadBlocks_DMA+0x30>)
 801d510:	f7fb feb4 	bl	801927c <HAL_SD_ReadBlocks_DMA>
 801d514:	4603      	mov	r3, r0
 801d516:	2b00      	cmp	r3, #0
 801d518:	d001      	beq.n	801d51e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801d51a:	2301      	movs	r3, #1
 801d51c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801d51e:	7dfb      	ldrb	r3, [r7, #23]
}
 801d520:	4618      	mov	r0, r3
 801d522:	3718      	adds	r7, #24
 801d524:	46bd      	mov	sp, r7
 801d526:	bd80      	pop	{r7, pc}
 801d528:	20010da4 	.word	0x20010da4

0801d52c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801d52c:	b580      	push	{r7, lr}
 801d52e:	b086      	sub	sp, #24
 801d530:	af00      	add	r7, sp, #0
 801d532:	60f8      	str	r0, [r7, #12]
 801d534:	60b9      	str	r1, [r7, #8]
 801d536:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801d538:	2300      	movs	r3, #0
 801d53a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801d53c:	687b      	ldr	r3, [r7, #4]
 801d53e:	68ba      	ldr	r2, [r7, #8]
 801d540:	68f9      	ldr	r1, [r7, #12]
 801d542:	4806      	ldr	r0, [pc, #24]	; (801d55c <BSP_SD_WriteBlocks_DMA+0x30>)
 801d544:	f7fb ff84 	bl	8019450 <HAL_SD_WriteBlocks_DMA>
 801d548:	4603      	mov	r3, r0
 801d54a:	2b00      	cmp	r3, #0
 801d54c:	d001      	beq.n	801d552 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801d54e:	2301      	movs	r3, #1
 801d550:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801d552:	7dfb      	ldrb	r3, [r7, #23]
}
 801d554:	4618      	mov	r0, r3
 801d556:	3718      	adds	r7, #24
 801d558:	46bd      	mov	sp, r7
 801d55a:	bd80      	pop	{r7, pc}
 801d55c:	20010da4 	.word	0x20010da4

0801d560 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801d560:	b580      	push	{r7, lr}
 801d562:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801d564:	4805      	ldr	r0, [pc, #20]	; (801d57c <BSP_SD_GetCardState+0x1c>)
 801d566:	f7fc fc3f 	bl	8019de8 <HAL_SD_GetCardState>
 801d56a:	4603      	mov	r3, r0
 801d56c:	2b04      	cmp	r3, #4
 801d56e:	bf14      	ite	ne
 801d570:	2301      	movne	r3, #1
 801d572:	2300      	moveq	r3, #0
 801d574:	b2db      	uxtb	r3, r3
}
 801d576:	4618      	mov	r0, r3
 801d578:	bd80      	pop	{r7, pc}
 801d57a:	bf00      	nop
 801d57c:	20010da4 	.word	0x20010da4

0801d580 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801d580:	b580      	push	{r7, lr}
 801d582:	b082      	sub	sp, #8
 801d584:	af00      	add	r7, sp, #0
 801d586:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 801d588:	6879      	ldr	r1, [r7, #4]
 801d58a:	4803      	ldr	r0, [pc, #12]	; (801d598 <BSP_SD_GetCardInfo+0x18>)
 801d58c:	f7fc fb84 	bl	8019c98 <HAL_SD_GetCardInfo>
}
 801d590:	bf00      	nop
 801d592:	3708      	adds	r7, #8
 801d594:	46bd      	mov	sp, r7
 801d596:	bd80      	pop	{r7, pc}
 801d598:	20010da4 	.word	0x20010da4

0801d59c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 801d59c:	b580      	push	{r7, lr}
 801d59e:	b082      	sub	sp, #8
 801d5a0:	af00      	add	r7, sp, #0
 801d5a2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 801d5a4:	f000 f818 	bl	801d5d8 <BSP_SD_AbortCallback>
}
 801d5a8:	bf00      	nop
 801d5aa:	3708      	adds	r7, #8
 801d5ac:	46bd      	mov	sp, r7
 801d5ae:	bd80      	pop	{r7, pc}

0801d5b0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801d5b0:	b580      	push	{r7, lr}
 801d5b2:	b082      	sub	sp, #8
 801d5b4:	af00      	add	r7, sp, #0
 801d5b6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801d5b8:	f000 f998 	bl	801d8ec <BSP_SD_WriteCpltCallback>
}
 801d5bc:	bf00      	nop
 801d5be:	3708      	adds	r7, #8
 801d5c0:	46bd      	mov	sp, r7
 801d5c2:	bd80      	pop	{r7, pc}

0801d5c4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801d5c4:	b580      	push	{r7, lr}
 801d5c6:	b082      	sub	sp, #8
 801d5c8:	af00      	add	r7, sp, #0
 801d5ca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801d5cc:	f000 f9a0 	bl	801d910 <BSP_SD_ReadCpltCallback>
}
 801d5d0:	bf00      	nop
 801d5d2:	3708      	adds	r7, #8
 801d5d4:	46bd      	mov	sp, r7
 801d5d6:	bd80      	pop	{r7, pc}

0801d5d8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 801d5d8:	b480      	push	{r7}
 801d5da:	af00      	add	r7, sp, #0

}
 801d5dc:	bf00      	nop
 801d5de:	46bd      	mov	sp, r7
 801d5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5e4:	4770      	bx	lr

0801d5e6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801d5e6:	b480      	push	{r7}
 801d5e8:	b083      	sub	sp, #12
 801d5ea:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801d5ec:	2301      	movs	r3, #1
 801d5ee:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 801d5f0:	79fb      	ldrb	r3, [r7, #7]
 801d5f2:	b2db      	uxtb	r3, r3
}
 801d5f4:	4618      	mov	r0, r3
 801d5f6:	370c      	adds	r7, #12
 801d5f8:	46bd      	mov	sp, r7
 801d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5fe:	4770      	bx	lr

0801d600 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801d600:	b580      	push	{r7, lr}
 801d602:	b084      	sub	sp, #16
 801d604:	af00      	add	r7, sp, #0
 801d606:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 801d608:	f003 fabe 	bl	8020b88 <osKernelGetTickCount>
 801d60c:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 801d60e:	e006      	b.n	801d61e <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801d610:	f7ff ffa6 	bl	801d560 <BSP_SD_GetCardState>
 801d614:	4603      	mov	r3, r0
 801d616:	2b00      	cmp	r3, #0
 801d618:	d101      	bne.n	801d61e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801d61a:	2300      	movs	r3, #0
 801d61c:	e009      	b.n	801d632 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 801d61e:	f003 fab3 	bl	8020b88 <osKernelGetTickCount>
 801d622:	4602      	mov	r2, r0
 801d624:	68fb      	ldr	r3, [r7, #12]
 801d626:	1ad3      	subs	r3, r2, r3
 801d628:	687a      	ldr	r2, [r7, #4]
 801d62a:	429a      	cmp	r2, r3
 801d62c:	d8f0      	bhi.n	801d610 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801d62e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d632:	4618      	mov	r0, r3
 801d634:	3710      	adds	r7, #16
 801d636:	46bd      	mov	sp, r7
 801d638:	bd80      	pop	{r7, pc}
	...

0801d63c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801d63c:	b580      	push	{r7, lr}
 801d63e:	b082      	sub	sp, #8
 801d640:	af00      	add	r7, sp, #0
 801d642:	4603      	mov	r3, r0
 801d644:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801d646:	4b0b      	ldr	r3, [pc, #44]	; (801d674 <SD_CheckStatus+0x38>)
 801d648:	2201      	movs	r2, #1
 801d64a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801d64c:	f7ff ff88 	bl	801d560 <BSP_SD_GetCardState>
 801d650:	4603      	mov	r3, r0
 801d652:	2b00      	cmp	r3, #0
 801d654:	d107      	bne.n	801d666 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801d656:	4b07      	ldr	r3, [pc, #28]	; (801d674 <SD_CheckStatus+0x38>)
 801d658:	781b      	ldrb	r3, [r3, #0]
 801d65a:	b2db      	uxtb	r3, r3
 801d65c:	f023 0301 	bic.w	r3, r3, #1
 801d660:	b2da      	uxtb	r2, r3
 801d662:	4b04      	ldr	r3, [pc, #16]	; (801d674 <SD_CheckStatus+0x38>)
 801d664:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801d666:	4b03      	ldr	r3, [pc, #12]	; (801d674 <SD_CheckStatus+0x38>)
 801d668:	781b      	ldrb	r3, [r3, #0]
 801d66a:	b2db      	uxtb	r3, r3
}
 801d66c:	4618      	mov	r0, r3
 801d66e:	3708      	adds	r7, #8
 801d670:	46bd      	mov	sp, r7
 801d672:	bd80      	pop	{r7, pc}
 801d674:	20000681 	.word	0x20000681

0801d678 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801d678:	b580      	push	{r7, lr}
 801d67a:	b082      	sub	sp, #8
 801d67c:	af00      	add	r7, sp, #0
 801d67e:	4603      	mov	r3, r0
 801d680:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801d682:	4b1c      	ldr	r3, [pc, #112]	; (801d6f4 <SD_initialize+0x7c>)
 801d684:	2201      	movs	r2, #1
 801d686:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 801d688:	f003 f9ee 	bl	8020a68 <osKernelGetState>
 801d68c:	4603      	mov	r3, r0
 801d68e:	2b02      	cmp	r3, #2
 801d690:	d129      	bne.n	801d6e6 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 801d692:	f7ff ff0b 	bl	801d4ac <BSP_SD_Init>
 801d696:	4603      	mov	r3, r0
 801d698:	2b00      	cmp	r3, #0
 801d69a:	d107      	bne.n	801d6ac <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 801d69c:	79fb      	ldrb	r3, [r7, #7]
 801d69e:	4618      	mov	r0, r3
 801d6a0:	f7ff ffcc 	bl	801d63c <SD_CheckStatus>
 801d6a4:	4603      	mov	r3, r0
 801d6a6:	461a      	mov	r2, r3
 801d6a8:	4b12      	ldr	r3, [pc, #72]	; (801d6f4 <SD_initialize+0x7c>)
 801d6aa:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 801d6ac:	4b11      	ldr	r3, [pc, #68]	; (801d6f4 <SD_initialize+0x7c>)
 801d6ae:	781b      	ldrb	r3, [r3, #0]
 801d6b0:	b2db      	uxtb	r3, r3
 801d6b2:	2b01      	cmp	r3, #1
 801d6b4:	d017      	beq.n	801d6e6 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 801d6b6:	4b10      	ldr	r3, [pc, #64]	; (801d6f8 <SD_initialize+0x80>)
 801d6b8:	681b      	ldr	r3, [r3, #0]
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	d107      	bne.n	801d6ce <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 801d6be:	2200      	movs	r2, #0
 801d6c0:	2102      	movs	r1, #2
 801d6c2:	200a      	movs	r0, #10
 801d6c4:	f003 fea8 	bl	8021418 <osMessageQueueNew>
 801d6c8:	4602      	mov	r2, r0
 801d6ca:	4b0b      	ldr	r3, [pc, #44]	; (801d6f8 <SD_initialize+0x80>)
 801d6cc:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 801d6ce:	4b0a      	ldr	r3, [pc, #40]	; (801d6f8 <SD_initialize+0x80>)
 801d6d0:	681b      	ldr	r3, [r3, #0]
 801d6d2:	2b00      	cmp	r3, #0
 801d6d4:	d107      	bne.n	801d6e6 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 801d6d6:	4b07      	ldr	r3, [pc, #28]	; (801d6f4 <SD_initialize+0x7c>)
 801d6d8:	781b      	ldrb	r3, [r3, #0]
 801d6da:	b2db      	uxtb	r3, r3
 801d6dc:	f043 0301 	orr.w	r3, r3, #1
 801d6e0:	b2da      	uxtb	r2, r3
 801d6e2:	4b04      	ldr	r3, [pc, #16]	; (801d6f4 <SD_initialize+0x7c>)
 801d6e4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 801d6e6:	4b03      	ldr	r3, [pc, #12]	; (801d6f4 <SD_initialize+0x7c>)
 801d6e8:	781b      	ldrb	r3, [r3, #0]
 801d6ea:	b2db      	uxtb	r3, r3
}
 801d6ec:	4618      	mov	r0, r3
 801d6ee:	3708      	adds	r7, #8
 801d6f0:	46bd      	mov	sp, r7
 801d6f2:	bd80      	pop	{r7, pc}
 801d6f4:	20000681 	.word	0x20000681
 801d6f8:	2000153c 	.word	0x2000153c

0801d6fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801d6fc:	b580      	push	{r7, lr}
 801d6fe:	b082      	sub	sp, #8
 801d700:	af00      	add	r7, sp, #0
 801d702:	4603      	mov	r3, r0
 801d704:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801d706:	79fb      	ldrb	r3, [r7, #7]
 801d708:	4618      	mov	r0, r3
 801d70a:	f7ff ff97 	bl	801d63c <SD_CheckStatus>
 801d70e:	4603      	mov	r3, r0
}
 801d710:	4618      	mov	r0, r3
 801d712:	3708      	adds	r7, #8
 801d714:	46bd      	mov	sp, r7
 801d716:	bd80      	pop	{r7, pc}

0801d718 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801d718:	b580      	push	{r7, lr}
 801d71a:	b088      	sub	sp, #32
 801d71c:	af00      	add	r7, sp, #0
 801d71e:	60b9      	str	r1, [r7, #8]
 801d720:	607a      	str	r2, [r7, #4]
 801d722:	603b      	str	r3, [r7, #0]
 801d724:	4603      	mov	r3, r0
 801d726:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801d728:	2301      	movs	r3, #1
 801d72a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801d72c:	f247 5030 	movw	r0, #30000	; 0x7530
 801d730:	f7ff ff66 	bl	801d600 <SD_CheckStatusWithTimeout>
 801d734:	4603      	mov	r3, r0
 801d736:	2b00      	cmp	r3, #0
 801d738:	da01      	bge.n	801d73e <SD_read+0x26>
  {
    return res;
 801d73a:	7ffb      	ldrb	r3, [r7, #31]
 801d73c:	e02f      	b.n	801d79e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801d73e:	683a      	ldr	r2, [r7, #0]
 801d740:	6879      	ldr	r1, [r7, #4]
 801d742:	68b8      	ldr	r0, [r7, #8]
 801d744:	f7ff fed8 	bl	801d4f8 <BSP_SD_ReadBlocks_DMA>
 801d748:	4603      	mov	r3, r0
 801d74a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 801d74c:	7fbb      	ldrb	r3, [r7, #30]
 801d74e:	2b00      	cmp	r3, #0
 801d750:	d124      	bne.n	801d79c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801d752:	4b15      	ldr	r3, [pc, #84]	; (801d7a8 <SD_read+0x90>)
 801d754:	6818      	ldr	r0, [r3, #0]
 801d756:	f107 0112 	add.w	r1, r7, #18
 801d75a:	f247 5330 	movw	r3, #30000	; 0x7530
 801d75e:	2200      	movs	r2, #0
 801d760:	f003 ff54 	bl	802160c <osMessageQueueGet>
 801d764:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 801d766:	69bb      	ldr	r3, [r7, #24]
 801d768:	2b00      	cmp	r3, #0
 801d76a:	d117      	bne.n	801d79c <SD_read+0x84>
 801d76c:	8a7b      	ldrh	r3, [r7, #18]
 801d76e:	2b01      	cmp	r3, #1
 801d770:	d114      	bne.n	801d79c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 801d772:	f003 fa09 	bl	8020b88 <osKernelGetTickCount>
 801d776:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 801d778:	e007      	b.n	801d78a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801d77a:	f7ff fef1 	bl	801d560 <BSP_SD_GetCardState>
 801d77e:	4603      	mov	r3, r0
 801d780:	2b00      	cmp	r3, #0
 801d782:	d102      	bne.n	801d78a <SD_read+0x72>
              {
                res = RES_OK;
 801d784:	2300      	movs	r3, #0
 801d786:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 801d788:	e008      	b.n	801d79c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 801d78a:	f003 f9fd 	bl	8020b88 <osKernelGetTickCount>
 801d78e:	4602      	mov	r2, r0
 801d790:	697b      	ldr	r3, [r7, #20]
 801d792:	1ad3      	subs	r3, r2, r3
 801d794:	f247 522f 	movw	r2, #29999	; 0x752f
 801d798:	4293      	cmp	r3, r2
 801d79a:	d9ee      	bls.n	801d77a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 801d79c:	7ffb      	ldrb	r3, [r7, #31]
}
 801d79e:	4618      	mov	r0, r3
 801d7a0:	3720      	adds	r7, #32
 801d7a2:	46bd      	mov	sp, r7
 801d7a4:	bd80      	pop	{r7, pc}
 801d7a6:	bf00      	nop
 801d7a8:	2000153c 	.word	0x2000153c

0801d7ac <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801d7ac:	b580      	push	{r7, lr}
 801d7ae:	b088      	sub	sp, #32
 801d7b0:	af00      	add	r7, sp, #0
 801d7b2:	60b9      	str	r1, [r7, #8]
 801d7b4:	607a      	str	r2, [r7, #4]
 801d7b6:	603b      	str	r3, [r7, #0]
 801d7b8:	4603      	mov	r3, r0
 801d7ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801d7bc:	2301      	movs	r3, #1
 801d7be:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801d7c0:	f247 5030 	movw	r0, #30000	; 0x7530
 801d7c4:	f7ff ff1c 	bl	801d600 <SD_CheckStatusWithTimeout>
 801d7c8:	4603      	mov	r3, r0
 801d7ca:	2b00      	cmp	r3, #0
 801d7cc:	da01      	bge.n	801d7d2 <SD_write+0x26>
  {
    return res;
 801d7ce:	7ffb      	ldrb	r3, [r7, #31]
 801d7d0:	e02d      	b.n	801d82e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801d7d2:	683a      	ldr	r2, [r7, #0]
 801d7d4:	6879      	ldr	r1, [r7, #4]
 801d7d6:	68b8      	ldr	r0, [r7, #8]
 801d7d8:	f7ff fea8 	bl	801d52c <BSP_SD_WriteBlocks_DMA>
 801d7dc:	4603      	mov	r3, r0
 801d7de:	2b00      	cmp	r3, #0
 801d7e0:	d124      	bne.n	801d82c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801d7e2:	4b15      	ldr	r3, [pc, #84]	; (801d838 <SD_write+0x8c>)
 801d7e4:	6818      	ldr	r0, [r3, #0]
 801d7e6:	f107 0112 	add.w	r1, r7, #18
 801d7ea:	f247 5330 	movw	r3, #30000	; 0x7530
 801d7ee:	2200      	movs	r2, #0
 801d7f0:	f003 ff0c 	bl	802160c <osMessageQueueGet>
 801d7f4:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 801d7f6:	69bb      	ldr	r3, [r7, #24]
 801d7f8:	2b00      	cmp	r3, #0
 801d7fa:	d117      	bne.n	801d82c <SD_write+0x80>
 801d7fc:	8a7b      	ldrh	r3, [r7, #18]
 801d7fe:	2b02      	cmp	r3, #2
 801d800:	d114      	bne.n	801d82c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 801d802:	f003 f9c1 	bl	8020b88 <osKernelGetTickCount>
 801d806:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 801d808:	e007      	b.n	801d81a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801d80a:	f7ff fea9 	bl	801d560 <BSP_SD_GetCardState>
 801d80e:	4603      	mov	r3, r0
 801d810:	2b00      	cmp	r3, #0
 801d812:	d102      	bne.n	801d81a <SD_write+0x6e>
          {
            res = RES_OK;
 801d814:	2300      	movs	r3, #0
 801d816:	77fb      	strb	r3, [r7, #31]
            break;
 801d818:	e008      	b.n	801d82c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 801d81a:	f003 f9b5 	bl	8020b88 <osKernelGetTickCount>
 801d81e:	4602      	mov	r2, r0
 801d820:	697b      	ldr	r3, [r7, #20]
 801d822:	1ad3      	subs	r3, r2, r3
 801d824:	f247 522f 	movw	r2, #29999	; 0x752f
 801d828:	4293      	cmp	r3, r2
 801d82a:	d9ee      	bls.n	801d80a <SD_write+0x5e>
    }

  }
#endif

  return res;
 801d82c:	7ffb      	ldrb	r3, [r7, #31]
}
 801d82e:	4618      	mov	r0, r3
 801d830:	3720      	adds	r7, #32
 801d832:	46bd      	mov	sp, r7
 801d834:	bd80      	pop	{r7, pc}
 801d836:	bf00      	nop
 801d838:	2000153c 	.word	0x2000153c

0801d83c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801d83c:	b580      	push	{r7, lr}
 801d83e:	b08c      	sub	sp, #48	; 0x30
 801d840:	af00      	add	r7, sp, #0
 801d842:	4603      	mov	r3, r0
 801d844:	603a      	str	r2, [r7, #0]
 801d846:	71fb      	strb	r3, [r7, #7]
 801d848:	460b      	mov	r3, r1
 801d84a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801d84c:	2301      	movs	r3, #1
 801d84e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801d852:	4b25      	ldr	r3, [pc, #148]	; (801d8e8 <SD_ioctl+0xac>)
 801d854:	781b      	ldrb	r3, [r3, #0]
 801d856:	b2db      	uxtb	r3, r3
 801d858:	f003 0301 	and.w	r3, r3, #1
 801d85c:	2b00      	cmp	r3, #0
 801d85e:	d001      	beq.n	801d864 <SD_ioctl+0x28>
 801d860:	2303      	movs	r3, #3
 801d862:	e03c      	b.n	801d8de <SD_ioctl+0xa2>

  switch (cmd)
 801d864:	79bb      	ldrb	r3, [r7, #6]
 801d866:	2b03      	cmp	r3, #3
 801d868:	d834      	bhi.n	801d8d4 <SD_ioctl+0x98>
 801d86a:	a201      	add	r2, pc, #4	; (adr r2, 801d870 <SD_ioctl+0x34>)
 801d86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d870:	0801d881 	.word	0x0801d881
 801d874:	0801d889 	.word	0x0801d889
 801d878:	0801d8a1 	.word	0x0801d8a1
 801d87c:	0801d8bb 	.word	0x0801d8bb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801d880:	2300      	movs	r3, #0
 801d882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801d886:	e028      	b.n	801d8da <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801d888:	f107 030c 	add.w	r3, r7, #12
 801d88c:	4618      	mov	r0, r3
 801d88e:	f7ff fe77 	bl	801d580 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801d892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d894:	683b      	ldr	r3, [r7, #0]
 801d896:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801d898:	2300      	movs	r3, #0
 801d89a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801d89e:	e01c      	b.n	801d8da <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801d8a0:	f107 030c 	add.w	r3, r7, #12
 801d8a4:	4618      	mov	r0, r3
 801d8a6:	f7ff fe6b 	bl	801d580 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801d8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d8ac:	b29a      	uxth	r2, r3
 801d8ae:	683b      	ldr	r3, [r7, #0]
 801d8b0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801d8b2:	2300      	movs	r3, #0
 801d8b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801d8b8:	e00f      	b.n	801d8da <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801d8ba:	f107 030c 	add.w	r3, r7, #12
 801d8be:	4618      	mov	r0, r3
 801d8c0:	f7ff fe5e 	bl	801d580 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801d8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d8c6:	0a5a      	lsrs	r2, r3, #9
 801d8c8:	683b      	ldr	r3, [r7, #0]
 801d8ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801d8cc:	2300      	movs	r3, #0
 801d8ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801d8d2:	e002      	b.n	801d8da <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801d8d4:	2304      	movs	r3, #4
 801d8d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801d8da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801d8de:	4618      	mov	r0, r3
 801d8e0:	3730      	adds	r7, #48	; 0x30
 801d8e2:	46bd      	mov	sp, r7
 801d8e4:	bd80      	pop	{r7, pc}
 801d8e6:	bf00      	nop
 801d8e8:	20000681 	.word	0x20000681

0801d8ec <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801d8ec:	b580      	push	{r7, lr}
 801d8ee:	b082      	sub	sp, #8
 801d8f0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 801d8f2:	2302      	movs	r3, #2
 801d8f4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 801d8f6:	4b05      	ldr	r3, [pc, #20]	; (801d90c <BSP_SD_WriteCpltCallback+0x20>)
 801d8f8:	6818      	ldr	r0, [r3, #0]
 801d8fa:	1db9      	adds	r1, r7, #6
 801d8fc:	2300      	movs	r3, #0
 801d8fe:	2200      	movs	r2, #0
 801d900:	f003 fe10 	bl	8021524 <osMessageQueuePut>
#endif
}
 801d904:	bf00      	nop
 801d906:	3708      	adds	r7, #8
 801d908:	46bd      	mov	sp, r7
 801d90a:	bd80      	pop	{r7, pc}
 801d90c:	2000153c 	.word	0x2000153c

0801d910 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801d910:	b580      	push	{r7, lr}
 801d912:	b082      	sub	sp, #8
 801d914:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 801d916:	2301      	movs	r3, #1
 801d918:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 801d91a:	4b05      	ldr	r3, [pc, #20]	; (801d930 <BSP_SD_ReadCpltCallback+0x20>)
 801d91c:	6818      	ldr	r0, [r3, #0]
 801d91e:	1db9      	adds	r1, r7, #6
 801d920:	2300      	movs	r3, #0
 801d922:	2200      	movs	r2, #0
 801d924:	f003 fdfe 	bl	8021524 <osMessageQueuePut>
#endif
}
 801d928:	bf00      	nop
 801d92a:	3708      	adds	r7, #8
 801d92c:	46bd      	mov	sp, r7
 801d92e:	bd80      	pop	{r7, pc}
 801d930:	2000153c 	.word	0x2000153c

0801d934 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801d934:	b580      	push	{r7, lr}
 801d936:	b084      	sub	sp, #16
 801d938:	af00      	add	r7, sp, #0
 801d93a:	4603      	mov	r3, r0
 801d93c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801d93e:	79fb      	ldrb	r3, [r7, #7]
 801d940:	4a08      	ldr	r2, [pc, #32]	; (801d964 <disk_status+0x30>)
 801d942:	009b      	lsls	r3, r3, #2
 801d944:	4413      	add	r3, r2
 801d946:	685b      	ldr	r3, [r3, #4]
 801d948:	685b      	ldr	r3, [r3, #4]
 801d94a:	79fa      	ldrb	r2, [r7, #7]
 801d94c:	4905      	ldr	r1, [pc, #20]	; (801d964 <disk_status+0x30>)
 801d94e:	440a      	add	r2, r1
 801d950:	7a12      	ldrb	r2, [r2, #8]
 801d952:	4610      	mov	r0, r2
 801d954:	4798      	blx	r3
 801d956:	4603      	mov	r3, r0
 801d958:	73fb      	strb	r3, [r7, #15]
  return stat;
 801d95a:	7bfb      	ldrb	r3, [r7, #15]
}
 801d95c:	4618      	mov	r0, r3
 801d95e:	3710      	adds	r7, #16
 801d960:	46bd      	mov	sp, r7
 801d962:	bd80      	pop	{r7, pc}
 801d964:	20001568 	.word	0x20001568

0801d968 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801d968:	b580      	push	{r7, lr}
 801d96a:	b084      	sub	sp, #16
 801d96c:	af00      	add	r7, sp, #0
 801d96e:	4603      	mov	r3, r0
 801d970:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801d972:	2300      	movs	r3, #0
 801d974:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801d976:	79fb      	ldrb	r3, [r7, #7]
 801d978:	4a0d      	ldr	r2, [pc, #52]	; (801d9b0 <disk_initialize+0x48>)
 801d97a:	5cd3      	ldrb	r3, [r2, r3]
 801d97c:	2b00      	cmp	r3, #0
 801d97e:	d111      	bne.n	801d9a4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801d980:	79fb      	ldrb	r3, [r7, #7]
 801d982:	4a0b      	ldr	r2, [pc, #44]	; (801d9b0 <disk_initialize+0x48>)
 801d984:	2101      	movs	r1, #1
 801d986:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801d988:	79fb      	ldrb	r3, [r7, #7]
 801d98a:	4a09      	ldr	r2, [pc, #36]	; (801d9b0 <disk_initialize+0x48>)
 801d98c:	009b      	lsls	r3, r3, #2
 801d98e:	4413      	add	r3, r2
 801d990:	685b      	ldr	r3, [r3, #4]
 801d992:	681b      	ldr	r3, [r3, #0]
 801d994:	79fa      	ldrb	r2, [r7, #7]
 801d996:	4906      	ldr	r1, [pc, #24]	; (801d9b0 <disk_initialize+0x48>)
 801d998:	440a      	add	r2, r1
 801d99a:	7a12      	ldrb	r2, [r2, #8]
 801d99c:	4610      	mov	r0, r2
 801d99e:	4798      	blx	r3
 801d9a0:	4603      	mov	r3, r0
 801d9a2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801d9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 801d9a6:	4618      	mov	r0, r3
 801d9a8:	3710      	adds	r7, #16
 801d9aa:	46bd      	mov	sp, r7
 801d9ac:	bd80      	pop	{r7, pc}
 801d9ae:	bf00      	nop
 801d9b0:	20001568 	.word	0x20001568

0801d9b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801d9b4:	b590      	push	{r4, r7, lr}
 801d9b6:	b087      	sub	sp, #28
 801d9b8:	af00      	add	r7, sp, #0
 801d9ba:	60b9      	str	r1, [r7, #8]
 801d9bc:	607a      	str	r2, [r7, #4]
 801d9be:	603b      	str	r3, [r7, #0]
 801d9c0:	4603      	mov	r3, r0
 801d9c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801d9c4:	7bfb      	ldrb	r3, [r7, #15]
 801d9c6:	4a0a      	ldr	r2, [pc, #40]	; (801d9f0 <disk_read+0x3c>)
 801d9c8:	009b      	lsls	r3, r3, #2
 801d9ca:	4413      	add	r3, r2
 801d9cc:	685b      	ldr	r3, [r3, #4]
 801d9ce:	689c      	ldr	r4, [r3, #8]
 801d9d0:	7bfb      	ldrb	r3, [r7, #15]
 801d9d2:	4a07      	ldr	r2, [pc, #28]	; (801d9f0 <disk_read+0x3c>)
 801d9d4:	4413      	add	r3, r2
 801d9d6:	7a18      	ldrb	r0, [r3, #8]
 801d9d8:	683b      	ldr	r3, [r7, #0]
 801d9da:	687a      	ldr	r2, [r7, #4]
 801d9dc:	68b9      	ldr	r1, [r7, #8]
 801d9de:	47a0      	blx	r4
 801d9e0:	4603      	mov	r3, r0
 801d9e2:	75fb      	strb	r3, [r7, #23]
  return res;
 801d9e4:	7dfb      	ldrb	r3, [r7, #23]
}
 801d9e6:	4618      	mov	r0, r3
 801d9e8:	371c      	adds	r7, #28
 801d9ea:	46bd      	mov	sp, r7
 801d9ec:	bd90      	pop	{r4, r7, pc}
 801d9ee:	bf00      	nop
 801d9f0:	20001568 	.word	0x20001568

0801d9f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801d9f4:	b590      	push	{r4, r7, lr}
 801d9f6:	b087      	sub	sp, #28
 801d9f8:	af00      	add	r7, sp, #0
 801d9fa:	60b9      	str	r1, [r7, #8]
 801d9fc:	607a      	str	r2, [r7, #4]
 801d9fe:	603b      	str	r3, [r7, #0]
 801da00:	4603      	mov	r3, r0
 801da02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801da04:	7bfb      	ldrb	r3, [r7, #15]
 801da06:	4a0a      	ldr	r2, [pc, #40]	; (801da30 <disk_write+0x3c>)
 801da08:	009b      	lsls	r3, r3, #2
 801da0a:	4413      	add	r3, r2
 801da0c:	685b      	ldr	r3, [r3, #4]
 801da0e:	68dc      	ldr	r4, [r3, #12]
 801da10:	7bfb      	ldrb	r3, [r7, #15]
 801da12:	4a07      	ldr	r2, [pc, #28]	; (801da30 <disk_write+0x3c>)
 801da14:	4413      	add	r3, r2
 801da16:	7a18      	ldrb	r0, [r3, #8]
 801da18:	683b      	ldr	r3, [r7, #0]
 801da1a:	687a      	ldr	r2, [r7, #4]
 801da1c:	68b9      	ldr	r1, [r7, #8]
 801da1e:	47a0      	blx	r4
 801da20:	4603      	mov	r3, r0
 801da22:	75fb      	strb	r3, [r7, #23]
  return res;
 801da24:	7dfb      	ldrb	r3, [r7, #23]
}
 801da26:	4618      	mov	r0, r3
 801da28:	371c      	adds	r7, #28
 801da2a:	46bd      	mov	sp, r7
 801da2c:	bd90      	pop	{r4, r7, pc}
 801da2e:	bf00      	nop
 801da30:	20001568 	.word	0x20001568

0801da34 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801da34:	b580      	push	{r7, lr}
 801da36:	b084      	sub	sp, #16
 801da38:	af00      	add	r7, sp, #0
 801da3a:	4603      	mov	r3, r0
 801da3c:	603a      	str	r2, [r7, #0]
 801da3e:	71fb      	strb	r3, [r7, #7]
 801da40:	460b      	mov	r3, r1
 801da42:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801da44:	79fb      	ldrb	r3, [r7, #7]
 801da46:	4a09      	ldr	r2, [pc, #36]	; (801da6c <disk_ioctl+0x38>)
 801da48:	009b      	lsls	r3, r3, #2
 801da4a:	4413      	add	r3, r2
 801da4c:	685b      	ldr	r3, [r3, #4]
 801da4e:	691b      	ldr	r3, [r3, #16]
 801da50:	79fa      	ldrb	r2, [r7, #7]
 801da52:	4906      	ldr	r1, [pc, #24]	; (801da6c <disk_ioctl+0x38>)
 801da54:	440a      	add	r2, r1
 801da56:	7a10      	ldrb	r0, [r2, #8]
 801da58:	79b9      	ldrb	r1, [r7, #6]
 801da5a:	683a      	ldr	r2, [r7, #0]
 801da5c:	4798      	blx	r3
 801da5e:	4603      	mov	r3, r0
 801da60:	73fb      	strb	r3, [r7, #15]
  return res;
 801da62:	7bfb      	ldrb	r3, [r7, #15]
}
 801da64:	4618      	mov	r0, r3
 801da66:	3710      	adds	r7, #16
 801da68:	46bd      	mov	sp, r7
 801da6a:	bd80      	pop	{r7, pc}
 801da6c:	20001568 	.word	0x20001568

0801da70 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801da70:	b480      	push	{r7}
 801da72:	b085      	sub	sp, #20
 801da74:	af00      	add	r7, sp, #0
 801da76:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	3301      	adds	r3, #1
 801da7c:	781b      	ldrb	r3, [r3, #0]
 801da7e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801da80:	89fb      	ldrh	r3, [r7, #14]
 801da82:	021b      	lsls	r3, r3, #8
 801da84:	b21a      	sxth	r2, r3
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	781b      	ldrb	r3, [r3, #0]
 801da8a:	b21b      	sxth	r3, r3
 801da8c:	4313      	orrs	r3, r2
 801da8e:	b21b      	sxth	r3, r3
 801da90:	81fb      	strh	r3, [r7, #14]
	return rv;
 801da92:	89fb      	ldrh	r3, [r7, #14]
}
 801da94:	4618      	mov	r0, r3
 801da96:	3714      	adds	r7, #20
 801da98:	46bd      	mov	sp, r7
 801da9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da9e:	4770      	bx	lr

0801daa0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801daa0:	b480      	push	{r7}
 801daa2:	b085      	sub	sp, #20
 801daa4:	af00      	add	r7, sp, #0
 801daa6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801daa8:	687b      	ldr	r3, [r7, #4]
 801daaa:	3303      	adds	r3, #3
 801daac:	781b      	ldrb	r3, [r3, #0]
 801daae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801dab0:	68fb      	ldr	r3, [r7, #12]
 801dab2:	021b      	lsls	r3, r3, #8
 801dab4:	687a      	ldr	r2, [r7, #4]
 801dab6:	3202      	adds	r2, #2
 801dab8:	7812      	ldrb	r2, [r2, #0]
 801daba:	4313      	orrs	r3, r2
 801dabc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801dabe:	68fb      	ldr	r3, [r7, #12]
 801dac0:	021b      	lsls	r3, r3, #8
 801dac2:	687a      	ldr	r2, [r7, #4]
 801dac4:	3201      	adds	r2, #1
 801dac6:	7812      	ldrb	r2, [r2, #0]
 801dac8:	4313      	orrs	r3, r2
 801daca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801dacc:	68fb      	ldr	r3, [r7, #12]
 801dace:	021b      	lsls	r3, r3, #8
 801dad0:	687a      	ldr	r2, [r7, #4]
 801dad2:	7812      	ldrb	r2, [r2, #0]
 801dad4:	4313      	orrs	r3, r2
 801dad6:	60fb      	str	r3, [r7, #12]
	return rv;
 801dad8:	68fb      	ldr	r3, [r7, #12]
}
 801dada:	4618      	mov	r0, r3
 801dadc:	3714      	adds	r7, #20
 801dade:	46bd      	mov	sp, r7
 801dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dae4:	4770      	bx	lr

0801dae6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801dae6:	b480      	push	{r7}
 801dae8:	b083      	sub	sp, #12
 801daea:	af00      	add	r7, sp, #0
 801daec:	6078      	str	r0, [r7, #4]
 801daee:	460b      	mov	r3, r1
 801daf0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801daf2:	687b      	ldr	r3, [r7, #4]
 801daf4:	1c5a      	adds	r2, r3, #1
 801daf6:	607a      	str	r2, [r7, #4]
 801daf8:	887a      	ldrh	r2, [r7, #2]
 801dafa:	b2d2      	uxtb	r2, r2
 801dafc:	701a      	strb	r2, [r3, #0]
 801dafe:	887b      	ldrh	r3, [r7, #2]
 801db00:	0a1b      	lsrs	r3, r3, #8
 801db02:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801db04:	687b      	ldr	r3, [r7, #4]
 801db06:	1c5a      	adds	r2, r3, #1
 801db08:	607a      	str	r2, [r7, #4]
 801db0a:	887a      	ldrh	r2, [r7, #2]
 801db0c:	b2d2      	uxtb	r2, r2
 801db0e:	701a      	strb	r2, [r3, #0]
}
 801db10:	bf00      	nop
 801db12:	370c      	adds	r7, #12
 801db14:	46bd      	mov	sp, r7
 801db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db1a:	4770      	bx	lr

0801db1c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801db1c:	b480      	push	{r7}
 801db1e:	b083      	sub	sp, #12
 801db20:	af00      	add	r7, sp, #0
 801db22:	6078      	str	r0, [r7, #4]
 801db24:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801db26:	687b      	ldr	r3, [r7, #4]
 801db28:	1c5a      	adds	r2, r3, #1
 801db2a:	607a      	str	r2, [r7, #4]
 801db2c:	683a      	ldr	r2, [r7, #0]
 801db2e:	b2d2      	uxtb	r2, r2
 801db30:	701a      	strb	r2, [r3, #0]
 801db32:	683b      	ldr	r3, [r7, #0]
 801db34:	0a1b      	lsrs	r3, r3, #8
 801db36:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	1c5a      	adds	r2, r3, #1
 801db3c:	607a      	str	r2, [r7, #4]
 801db3e:	683a      	ldr	r2, [r7, #0]
 801db40:	b2d2      	uxtb	r2, r2
 801db42:	701a      	strb	r2, [r3, #0]
 801db44:	683b      	ldr	r3, [r7, #0]
 801db46:	0a1b      	lsrs	r3, r3, #8
 801db48:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	1c5a      	adds	r2, r3, #1
 801db4e:	607a      	str	r2, [r7, #4]
 801db50:	683a      	ldr	r2, [r7, #0]
 801db52:	b2d2      	uxtb	r2, r2
 801db54:	701a      	strb	r2, [r3, #0]
 801db56:	683b      	ldr	r3, [r7, #0]
 801db58:	0a1b      	lsrs	r3, r3, #8
 801db5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801db5c:	687b      	ldr	r3, [r7, #4]
 801db5e:	1c5a      	adds	r2, r3, #1
 801db60:	607a      	str	r2, [r7, #4]
 801db62:	683a      	ldr	r2, [r7, #0]
 801db64:	b2d2      	uxtb	r2, r2
 801db66:	701a      	strb	r2, [r3, #0]
}
 801db68:	bf00      	nop
 801db6a:	370c      	adds	r7, #12
 801db6c:	46bd      	mov	sp, r7
 801db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db72:	4770      	bx	lr

0801db74 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801db74:	b480      	push	{r7}
 801db76:	b087      	sub	sp, #28
 801db78:	af00      	add	r7, sp, #0
 801db7a:	60f8      	str	r0, [r7, #12]
 801db7c:	60b9      	str	r1, [r7, #8]
 801db7e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801db80:	68fb      	ldr	r3, [r7, #12]
 801db82:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801db84:	68bb      	ldr	r3, [r7, #8]
 801db86:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801db88:	687b      	ldr	r3, [r7, #4]
 801db8a:	2b00      	cmp	r3, #0
 801db8c:	d00d      	beq.n	801dbaa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801db8e:	693a      	ldr	r2, [r7, #16]
 801db90:	1c53      	adds	r3, r2, #1
 801db92:	613b      	str	r3, [r7, #16]
 801db94:	697b      	ldr	r3, [r7, #20]
 801db96:	1c59      	adds	r1, r3, #1
 801db98:	6179      	str	r1, [r7, #20]
 801db9a:	7812      	ldrb	r2, [r2, #0]
 801db9c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801db9e:	687b      	ldr	r3, [r7, #4]
 801dba0:	3b01      	subs	r3, #1
 801dba2:	607b      	str	r3, [r7, #4]
 801dba4:	687b      	ldr	r3, [r7, #4]
 801dba6:	2b00      	cmp	r3, #0
 801dba8:	d1f1      	bne.n	801db8e <mem_cpy+0x1a>
	}
}
 801dbaa:	bf00      	nop
 801dbac:	371c      	adds	r7, #28
 801dbae:	46bd      	mov	sp, r7
 801dbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbb4:	4770      	bx	lr

0801dbb6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801dbb6:	b480      	push	{r7}
 801dbb8:	b087      	sub	sp, #28
 801dbba:	af00      	add	r7, sp, #0
 801dbbc:	60f8      	str	r0, [r7, #12]
 801dbbe:	60b9      	str	r1, [r7, #8]
 801dbc0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801dbc2:	68fb      	ldr	r3, [r7, #12]
 801dbc4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801dbc6:	697b      	ldr	r3, [r7, #20]
 801dbc8:	1c5a      	adds	r2, r3, #1
 801dbca:	617a      	str	r2, [r7, #20]
 801dbcc:	68ba      	ldr	r2, [r7, #8]
 801dbce:	b2d2      	uxtb	r2, r2
 801dbd0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801dbd2:	687b      	ldr	r3, [r7, #4]
 801dbd4:	3b01      	subs	r3, #1
 801dbd6:	607b      	str	r3, [r7, #4]
 801dbd8:	687b      	ldr	r3, [r7, #4]
 801dbda:	2b00      	cmp	r3, #0
 801dbdc:	d1f3      	bne.n	801dbc6 <mem_set+0x10>
}
 801dbde:	bf00      	nop
 801dbe0:	371c      	adds	r7, #28
 801dbe2:	46bd      	mov	sp, r7
 801dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbe8:	4770      	bx	lr

0801dbea <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801dbea:	b480      	push	{r7}
 801dbec:	b089      	sub	sp, #36	; 0x24
 801dbee:	af00      	add	r7, sp, #0
 801dbf0:	60f8      	str	r0, [r7, #12]
 801dbf2:	60b9      	str	r1, [r7, #8]
 801dbf4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801dbf6:	68fb      	ldr	r3, [r7, #12]
 801dbf8:	61fb      	str	r3, [r7, #28]
 801dbfa:	68bb      	ldr	r3, [r7, #8]
 801dbfc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801dbfe:	2300      	movs	r3, #0
 801dc00:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801dc02:	69fb      	ldr	r3, [r7, #28]
 801dc04:	1c5a      	adds	r2, r3, #1
 801dc06:	61fa      	str	r2, [r7, #28]
 801dc08:	781b      	ldrb	r3, [r3, #0]
 801dc0a:	4619      	mov	r1, r3
 801dc0c:	69bb      	ldr	r3, [r7, #24]
 801dc0e:	1c5a      	adds	r2, r3, #1
 801dc10:	61ba      	str	r2, [r7, #24]
 801dc12:	781b      	ldrb	r3, [r3, #0]
 801dc14:	1acb      	subs	r3, r1, r3
 801dc16:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801dc18:	687b      	ldr	r3, [r7, #4]
 801dc1a:	3b01      	subs	r3, #1
 801dc1c:	607b      	str	r3, [r7, #4]
 801dc1e:	687b      	ldr	r3, [r7, #4]
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	d002      	beq.n	801dc2a <mem_cmp+0x40>
 801dc24:	697b      	ldr	r3, [r7, #20]
 801dc26:	2b00      	cmp	r3, #0
 801dc28:	d0eb      	beq.n	801dc02 <mem_cmp+0x18>

	return r;
 801dc2a:	697b      	ldr	r3, [r7, #20]
}
 801dc2c:	4618      	mov	r0, r3
 801dc2e:	3724      	adds	r7, #36	; 0x24
 801dc30:	46bd      	mov	sp, r7
 801dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc36:	4770      	bx	lr

0801dc38 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801dc38:	b480      	push	{r7}
 801dc3a:	b083      	sub	sp, #12
 801dc3c:	af00      	add	r7, sp, #0
 801dc3e:	6078      	str	r0, [r7, #4]
 801dc40:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801dc42:	e002      	b.n	801dc4a <chk_chr+0x12>
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	3301      	adds	r3, #1
 801dc48:	607b      	str	r3, [r7, #4]
 801dc4a:	687b      	ldr	r3, [r7, #4]
 801dc4c:	781b      	ldrb	r3, [r3, #0]
 801dc4e:	2b00      	cmp	r3, #0
 801dc50:	d005      	beq.n	801dc5e <chk_chr+0x26>
 801dc52:	687b      	ldr	r3, [r7, #4]
 801dc54:	781b      	ldrb	r3, [r3, #0]
 801dc56:	461a      	mov	r2, r3
 801dc58:	683b      	ldr	r3, [r7, #0]
 801dc5a:	4293      	cmp	r3, r2
 801dc5c:	d1f2      	bne.n	801dc44 <chk_chr+0xc>
	return *str;
 801dc5e:	687b      	ldr	r3, [r7, #4]
 801dc60:	781b      	ldrb	r3, [r3, #0]
}
 801dc62:	4618      	mov	r0, r3
 801dc64:	370c      	adds	r7, #12
 801dc66:	46bd      	mov	sp, r7
 801dc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc6c:	4770      	bx	lr

0801dc6e <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 801dc6e:	b580      	push	{r7, lr}
 801dc70:	b082      	sub	sp, #8
 801dc72:	af00      	add	r7, sp, #0
 801dc74:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801dc76:	687b      	ldr	r3, [r7, #4]
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	d009      	beq.n	801dc90 <lock_fs+0x22>
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	695b      	ldr	r3, [r3, #20]
 801dc80:	4618      	mov	r0, r3
 801dc82:	f002 fe7e 	bl	8020982 <ff_req_grant>
 801dc86:	4603      	mov	r3, r0
 801dc88:	2b00      	cmp	r3, #0
 801dc8a:	d001      	beq.n	801dc90 <lock_fs+0x22>
 801dc8c:	2301      	movs	r3, #1
 801dc8e:	e000      	b.n	801dc92 <lock_fs+0x24>
 801dc90:	2300      	movs	r3, #0
}
 801dc92:	4618      	mov	r0, r3
 801dc94:	3708      	adds	r7, #8
 801dc96:	46bd      	mov	sp, r7
 801dc98:	bd80      	pop	{r7, pc}

0801dc9a <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 801dc9a:	b580      	push	{r7, lr}
 801dc9c:	b082      	sub	sp, #8
 801dc9e:	af00      	add	r7, sp, #0
 801dca0:	6078      	str	r0, [r7, #4]
 801dca2:	460b      	mov	r3, r1
 801dca4:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	2b00      	cmp	r3, #0
 801dcaa:	d00d      	beq.n	801dcc8 <unlock_fs+0x2e>
 801dcac:	78fb      	ldrb	r3, [r7, #3]
 801dcae:	2b0c      	cmp	r3, #12
 801dcb0:	d00a      	beq.n	801dcc8 <unlock_fs+0x2e>
 801dcb2:	78fb      	ldrb	r3, [r7, #3]
 801dcb4:	2b0b      	cmp	r3, #11
 801dcb6:	d007      	beq.n	801dcc8 <unlock_fs+0x2e>
 801dcb8:	78fb      	ldrb	r3, [r7, #3]
 801dcba:	2b0f      	cmp	r3, #15
 801dcbc:	d004      	beq.n	801dcc8 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 801dcbe:	687b      	ldr	r3, [r7, #4]
 801dcc0:	695b      	ldr	r3, [r3, #20]
 801dcc2:	4618      	mov	r0, r3
 801dcc4:	f002 fe72 	bl	80209ac <ff_rel_grant>
	}
}
 801dcc8:	bf00      	nop
 801dcca:	3708      	adds	r7, #8
 801dccc:	46bd      	mov	sp, r7
 801dcce:	bd80      	pop	{r7, pc}

0801dcd0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801dcd0:	b480      	push	{r7}
 801dcd2:	b085      	sub	sp, #20
 801dcd4:	af00      	add	r7, sp, #0
 801dcd6:	6078      	str	r0, [r7, #4]
 801dcd8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801dcda:	2300      	movs	r3, #0
 801dcdc:	60bb      	str	r3, [r7, #8]
 801dcde:	68bb      	ldr	r3, [r7, #8]
 801dce0:	60fb      	str	r3, [r7, #12]
 801dce2:	e029      	b.n	801dd38 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801dce4:	4a27      	ldr	r2, [pc, #156]	; (801dd84 <chk_lock+0xb4>)
 801dce6:	68fb      	ldr	r3, [r7, #12]
 801dce8:	011b      	lsls	r3, r3, #4
 801dcea:	4413      	add	r3, r2
 801dcec:	681b      	ldr	r3, [r3, #0]
 801dcee:	2b00      	cmp	r3, #0
 801dcf0:	d01d      	beq.n	801dd2e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801dcf2:	4a24      	ldr	r2, [pc, #144]	; (801dd84 <chk_lock+0xb4>)
 801dcf4:	68fb      	ldr	r3, [r7, #12]
 801dcf6:	011b      	lsls	r3, r3, #4
 801dcf8:	4413      	add	r3, r2
 801dcfa:	681a      	ldr	r2, [r3, #0]
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	681b      	ldr	r3, [r3, #0]
 801dd00:	429a      	cmp	r2, r3
 801dd02:	d116      	bne.n	801dd32 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801dd04:	4a1f      	ldr	r2, [pc, #124]	; (801dd84 <chk_lock+0xb4>)
 801dd06:	68fb      	ldr	r3, [r7, #12]
 801dd08:	011b      	lsls	r3, r3, #4
 801dd0a:	4413      	add	r3, r2
 801dd0c:	3304      	adds	r3, #4
 801dd0e:	681a      	ldr	r2, [r3, #0]
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801dd14:	429a      	cmp	r2, r3
 801dd16:	d10c      	bne.n	801dd32 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801dd18:	4a1a      	ldr	r2, [pc, #104]	; (801dd84 <chk_lock+0xb4>)
 801dd1a:	68fb      	ldr	r3, [r7, #12]
 801dd1c:	011b      	lsls	r3, r3, #4
 801dd1e:	4413      	add	r3, r2
 801dd20:	3308      	adds	r3, #8
 801dd22:	681a      	ldr	r2, [r3, #0]
 801dd24:	687b      	ldr	r3, [r7, #4]
 801dd26:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801dd28:	429a      	cmp	r2, r3
 801dd2a:	d102      	bne.n	801dd32 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801dd2c:	e007      	b.n	801dd3e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801dd2e:	2301      	movs	r3, #1
 801dd30:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801dd32:	68fb      	ldr	r3, [r7, #12]
 801dd34:	3301      	adds	r3, #1
 801dd36:	60fb      	str	r3, [r7, #12]
 801dd38:	68fb      	ldr	r3, [r7, #12]
 801dd3a:	2b01      	cmp	r3, #1
 801dd3c:	d9d2      	bls.n	801dce4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801dd3e:	68fb      	ldr	r3, [r7, #12]
 801dd40:	2b02      	cmp	r3, #2
 801dd42:	d109      	bne.n	801dd58 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801dd44:	68bb      	ldr	r3, [r7, #8]
 801dd46:	2b00      	cmp	r3, #0
 801dd48:	d102      	bne.n	801dd50 <chk_lock+0x80>
 801dd4a:	683b      	ldr	r3, [r7, #0]
 801dd4c:	2b02      	cmp	r3, #2
 801dd4e:	d101      	bne.n	801dd54 <chk_lock+0x84>
 801dd50:	2300      	movs	r3, #0
 801dd52:	e010      	b.n	801dd76 <chk_lock+0xa6>
 801dd54:	2312      	movs	r3, #18
 801dd56:	e00e      	b.n	801dd76 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801dd58:	683b      	ldr	r3, [r7, #0]
 801dd5a:	2b00      	cmp	r3, #0
 801dd5c:	d108      	bne.n	801dd70 <chk_lock+0xa0>
 801dd5e:	4a09      	ldr	r2, [pc, #36]	; (801dd84 <chk_lock+0xb4>)
 801dd60:	68fb      	ldr	r3, [r7, #12]
 801dd62:	011b      	lsls	r3, r3, #4
 801dd64:	4413      	add	r3, r2
 801dd66:	330c      	adds	r3, #12
 801dd68:	881b      	ldrh	r3, [r3, #0]
 801dd6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801dd6e:	d101      	bne.n	801dd74 <chk_lock+0xa4>
 801dd70:	2310      	movs	r3, #16
 801dd72:	e000      	b.n	801dd76 <chk_lock+0xa6>
 801dd74:	2300      	movs	r3, #0
}
 801dd76:	4618      	mov	r0, r3
 801dd78:	3714      	adds	r7, #20
 801dd7a:	46bd      	mov	sp, r7
 801dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd80:	4770      	bx	lr
 801dd82:	bf00      	nop
 801dd84:	20001548 	.word	0x20001548

0801dd88 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801dd88:	b480      	push	{r7}
 801dd8a:	b083      	sub	sp, #12
 801dd8c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801dd8e:	2300      	movs	r3, #0
 801dd90:	607b      	str	r3, [r7, #4]
 801dd92:	e002      	b.n	801dd9a <enq_lock+0x12>
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	3301      	adds	r3, #1
 801dd98:	607b      	str	r3, [r7, #4]
 801dd9a:	687b      	ldr	r3, [r7, #4]
 801dd9c:	2b01      	cmp	r3, #1
 801dd9e:	d806      	bhi.n	801ddae <enq_lock+0x26>
 801dda0:	4a09      	ldr	r2, [pc, #36]	; (801ddc8 <enq_lock+0x40>)
 801dda2:	687b      	ldr	r3, [r7, #4]
 801dda4:	011b      	lsls	r3, r3, #4
 801dda6:	4413      	add	r3, r2
 801dda8:	681b      	ldr	r3, [r3, #0]
 801ddaa:	2b00      	cmp	r3, #0
 801ddac:	d1f2      	bne.n	801dd94 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801ddae:	687b      	ldr	r3, [r7, #4]
 801ddb0:	2b02      	cmp	r3, #2
 801ddb2:	bf14      	ite	ne
 801ddb4:	2301      	movne	r3, #1
 801ddb6:	2300      	moveq	r3, #0
 801ddb8:	b2db      	uxtb	r3, r3
}
 801ddba:	4618      	mov	r0, r3
 801ddbc:	370c      	adds	r7, #12
 801ddbe:	46bd      	mov	sp, r7
 801ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddc4:	4770      	bx	lr
 801ddc6:	bf00      	nop
 801ddc8:	20001548 	.word	0x20001548

0801ddcc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801ddcc:	b480      	push	{r7}
 801ddce:	b085      	sub	sp, #20
 801ddd0:	af00      	add	r7, sp, #0
 801ddd2:	6078      	str	r0, [r7, #4]
 801ddd4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801ddd6:	2300      	movs	r3, #0
 801ddd8:	60fb      	str	r3, [r7, #12]
 801ddda:	e01f      	b.n	801de1c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801dddc:	4a41      	ldr	r2, [pc, #260]	; (801dee4 <inc_lock+0x118>)
 801ddde:	68fb      	ldr	r3, [r7, #12]
 801dde0:	011b      	lsls	r3, r3, #4
 801dde2:	4413      	add	r3, r2
 801dde4:	681a      	ldr	r2, [r3, #0]
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	681b      	ldr	r3, [r3, #0]
 801ddea:	429a      	cmp	r2, r3
 801ddec:	d113      	bne.n	801de16 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801ddee:	4a3d      	ldr	r2, [pc, #244]	; (801dee4 <inc_lock+0x118>)
 801ddf0:	68fb      	ldr	r3, [r7, #12]
 801ddf2:	011b      	lsls	r3, r3, #4
 801ddf4:	4413      	add	r3, r2
 801ddf6:	3304      	adds	r3, #4
 801ddf8:	681a      	ldr	r2, [r3, #0]
 801ddfa:	687b      	ldr	r3, [r7, #4]
 801ddfc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801ddfe:	429a      	cmp	r2, r3
 801de00:	d109      	bne.n	801de16 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801de02:	4a38      	ldr	r2, [pc, #224]	; (801dee4 <inc_lock+0x118>)
 801de04:	68fb      	ldr	r3, [r7, #12]
 801de06:	011b      	lsls	r3, r3, #4
 801de08:	4413      	add	r3, r2
 801de0a:	3308      	adds	r3, #8
 801de0c:	681a      	ldr	r2, [r3, #0]
 801de0e:	687b      	ldr	r3, [r7, #4]
 801de10:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801de12:	429a      	cmp	r2, r3
 801de14:	d006      	beq.n	801de24 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801de16:	68fb      	ldr	r3, [r7, #12]
 801de18:	3301      	adds	r3, #1
 801de1a:	60fb      	str	r3, [r7, #12]
 801de1c:	68fb      	ldr	r3, [r7, #12]
 801de1e:	2b01      	cmp	r3, #1
 801de20:	d9dc      	bls.n	801dddc <inc_lock+0x10>
 801de22:	e000      	b.n	801de26 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801de24:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801de26:	68fb      	ldr	r3, [r7, #12]
 801de28:	2b02      	cmp	r3, #2
 801de2a:	d132      	bne.n	801de92 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801de2c:	2300      	movs	r3, #0
 801de2e:	60fb      	str	r3, [r7, #12]
 801de30:	e002      	b.n	801de38 <inc_lock+0x6c>
 801de32:	68fb      	ldr	r3, [r7, #12]
 801de34:	3301      	adds	r3, #1
 801de36:	60fb      	str	r3, [r7, #12]
 801de38:	68fb      	ldr	r3, [r7, #12]
 801de3a:	2b01      	cmp	r3, #1
 801de3c:	d806      	bhi.n	801de4c <inc_lock+0x80>
 801de3e:	4a29      	ldr	r2, [pc, #164]	; (801dee4 <inc_lock+0x118>)
 801de40:	68fb      	ldr	r3, [r7, #12]
 801de42:	011b      	lsls	r3, r3, #4
 801de44:	4413      	add	r3, r2
 801de46:	681b      	ldr	r3, [r3, #0]
 801de48:	2b00      	cmp	r3, #0
 801de4a:	d1f2      	bne.n	801de32 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801de4c:	68fb      	ldr	r3, [r7, #12]
 801de4e:	2b02      	cmp	r3, #2
 801de50:	d101      	bne.n	801de56 <inc_lock+0x8a>
 801de52:	2300      	movs	r3, #0
 801de54:	e040      	b.n	801ded8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801de56:	687b      	ldr	r3, [r7, #4]
 801de58:	681a      	ldr	r2, [r3, #0]
 801de5a:	4922      	ldr	r1, [pc, #136]	; (801dee4 <inc_lock+0x118>)
 801de5c:	68fb      	ldr	r3, [r7, #12]
 801de5e:	011b      	lsls	r3, r3, #4
 801de60:	440b      	add	r3, r1
 801de62:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801de64:	687b      	ldr	r3, [r7, #4]
 801de66:	689a      	ldr	r2, [r3, #8]
 801de68:	491e      	ldr	r1, [pc, #120]	; (801dee4 <inc_lock+0x118>)
 801de6a:	68fb      	ldr	r3, [r7, #12]
 801de6c:	011b      	lsls	r3, r3, #4
 801de6e:	440b      	add	r3, r1
 801de70:	3304      	adds	r3, #4
 801de72:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801de74:	687b      	ldr	r3, [r7, #4]
 801de76:	695a      	ldr	r2, [r3, #20]
 801de78:	491a      	ldr	r1, [pc, #104]	; (801dee4 <inc_lock+0x118>)
 801de7a:	68fb      	ldr	r3, [r7, #12]
 801de7c:	011b      	lsls	r3, r3, #4
 801de7e:	440b      	add	r3, r1
 801de80:	3308      	adds	r3, #8
 801de82:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801de84:	4a17      	ldr	r2, [pc, #92]	; (801dee4 <inc_lock+0x118>)
 801de86:	68fb      	ldr	r3, [r7, #12]
 801de88:	011b      	lsls	r3, r3, #4
 801de8a:	4413      	add	r3, r2
 801de8c:	330c      	adds	r3, #12
 801de8e:	2200      	movs	r2, #0
 801de90:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801de92:	683b      	ldr	r3, [r7, #0]
 801de94:	2b00      	cmp	r3, #0
 801de96:	d009      	beq.n	801deac <inc_lock+0xe0>
 801de98:	4a12      	ldr	r2, [pc, #72]	; (801dee4 <inc_lock+0x118>)
 801de9a:	68fb      	ldr	r3, [r7, #12]
 801de9c:	011b      	lsls	r3, r3, #4
 801de9e:	4413      	add	r3, r2
 801dea0:	330c      	adds	r3, #12
 801dea2:	881b      	ldrh	r3, [r3, #0]
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	d001      	beq.n	801deac <inc_lock+0xe0>
 801dea8:	2300      	movs	r3, #0
 801deaa:	e015      	b.n	801ded8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801deac:	683b      	ldr	r3, [r7, #0]
 801deae:	2b00      	cmp	r3, #0
 801deb0:	d108      	bne.n	801dec4 <inc_lock+0xf8>
 801deb2:	4a0c      	ldr	r2, [pc, #48]	; (801dee4 <inc_lock+0x118>)
 801deb4:	68fb      	ldr	r3, [r7, #12]
 801deb6:	011b      	lsls	r3, r3, #4
 801deb8:	4413      	add	r3, r2
 801deba:	330c      	adds	r3, #12
 801debc:	881b      	ldrh	r3, [r3, #0]
 801debe:	3301      	adds	r3, #1
 801dec0:	b29a      	uxth	r2, r3
 801dec2:	e001      	b.n	801dec8 <inc_lock+0xfc>
 801dec4:	f44f 7280 	mov.w	r2, #256	; 0x100
 801dec8:	4906      	ldr	r1, [pc, #24]	; (801dee4 <inc_lock+0x118>)
 801deca:	68fb      	ldr	r3, [r7, #12]
 801decc:	011b      	lsls	r3, r3, #4
 801dece:	440b      	add	r3, r1
 801ded0:	330c      	adds	r3, #12
 801ded2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801ded4:	68fb      	ldr	r3, [r7, #12]
 801ded6:	3301      	adds	r3, #1
}
 801ded8:	4618      	mov	r0, r3
 801deda:	3714      	adds	r7, #20
 801dedc:	46bd      	mov	sp, r7
 801dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dee2:	4770      	bx	lr
 801dee4:	20001548 	.word	0x20001548

0801dee8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801dee8:	b480      	push	{r7}
 801deea:	b085      	sub	sp, #20
 801deec:	af00      	add	r7, sp, #0
 801deee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	3b01      	subs	r3, #1
 801def4:	607b      	str	r3, [r7, #4]
 801def6:	687b      	ldr	r3, [r7, #4]
 801def8:	2b01      	cmp	r3, #1
 801defa:	d825      	bhi.n	801df48 <dec_lock+0x60>
		n = Files[i].ctr;
 801defc:	4a17      	ldr	r2, [pc, #92]	; (801df5c <dec_lock+0x74>)
 801defe:	687b      	ldr	r3, [r7, #4]
 801df00:	011b      	lsls	r3, r3, #4
 801df02:	4413      	add	r3, r2
 801df04:	330c      	adds	r3, #12
 801df06:	881b      	ldrh	r3, [r3, #0]
 801df08:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801df0a:	89fb      	ldrh	r3, [r7, #14]
 801df0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801df10:	d101      	bne.n	801df16 <dec_lock+0x2e>
 801df12:	2300      	movs	r3, #0
 801df14:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801df16:	89fb      	ldrh	r3, [r7, #14]
 801df18:	2b00      	cmp	r3, #0
 801df1a:	d002      	beq.n	801df22 <dec_lock+0x3a>
 801df1c:	89fb      	ldrh	r3, [r7, #14]
 801df1e:	3b01      	subs	r3, #1
 801df20:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801df22:	4a0e      	ldr	r2, [pc, #56]	; (801df5c <dec_lock+0x74>)
 801df24:	687b      	ldr	r3, [r7, #4]
 801df26:	011b      	lsls	r3, r3, #4
 801df28:	4413      	add	r3, r2
 801df2a:	330c      	adds	r3, #12
 801df2c:	89fa      	ldrh	r2, [r7, #14]
 801df2e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801df30:	89fb      	ldrh	r3, [r7, #14]
 801df32:	2b00      	cmp	r3, #0
 801df34:	d105      	bne.n	801df42 <dec_lock+0x5a>
 801df36:	4a09      	ldr	r2, [pc, #36]	; (801df5c <dec_lock+0x74>)
 801df38:	687b      	ldr	r3, [r7, #4]
 801df3a:	011b      	lsls	r3, r3, #4
 801df3c:	4413      	add	r3, r2
 801df3e:	2200      	movs	r2, #0
 801df40:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801df42:	2300      	movs	r3, #0
 801df44:	737b      	strb	r3, [r7, #13]
 801df46:	e001      	b.n	801df4c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801df48:	2302      	movs	r3, #2
 801df4a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801df4c:	7b7b      	ldrb	r3, [r7, #13]
}
 801df4e:	4618      	mov	r0, r3
 801df50:	3714      	adds	r7, #20
 801df52:	46bd      	mov	sp, r7
 801df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df58:	4770      	bx	lr
 801df5a:	bf00      	nop
 801df5c:	20001548 	.word	0x20001548

0801df60 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801df60:	b480      	push	{r7}
 801df62:	b085      	sub	sp, #20
 801df64:	af00      	add	r7, sp, #0
 801df66:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801df68:	2300      	movs	r3, #0
 801df6a:	60fb      	str	r3, [r7, #12]
 801df6c:	e010      	b.n	801df90 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801df6e:	4a0d      	ldr	r2, [pc, #52]	; (801dfa4 <clear_lock+0x44>)
 801df70:	68fb      	ldr	r3, [r7, #12]
 801df72:	011b      	lsls	r3, r3, #4
 801df74:	4413      	add	r3, r2
 801df76:	681b      	ldr	r3, [r3, #0]
 801df78:	687a      	ldr	r2, [r7, #4]
 801df7a:	429a      	cmp	r2, r3
 801df7c:	d105      	bne.n	801df8a <clear_lock+0x2a>
 801df7e:	4a09      	ldr	r2, [pc, #36]	; (801dfa4 <clear_lock+0x44>)
 801df80:	68fb      	ldr	r3, [r7, #12]
 801df82:	011b      	lsls	r3, r3, #4
 801df84:	4413      	add	r3, r2
 801df86:	2200      	movs	r2, #0
 801df88:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801df8a:	68fb      	ldr	r3, [r7, #12]
 801df8c:	3301      	adds	r3, #1
 801df8e:	60fb      	str	r3, [r7, #12]
 801df90:	68fb      	ldr	r3, [r7, #12]
 801df92:	2b01      	cmp	r3, #1
 801df94:	d9eb      	bls.n	801df6e <clear_lock+0xe>
	}
}
 801df96:	bf00      	nop
 801df98:	3714      	adds	r7, #20
 801df9a:	46bd      	mov	sp, r7
 801df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfa0:	4770      	bx	lr
 801dfa2:	bf00      	nop
 801dfa4:	20001548 	.word	0x20001548

0801dfa8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801dfa8:	b580      	push	{r7, lr}
 801dfaa:	b086      	sub	sp, #24
 801dfac:	af00      	add	r7, sp, #0
 801dfae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801dfb0:	2300      	movs	r3, #0
 801dfb2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801dfb4:	687b      	ldr	r3, [r7, #4]
 801dfb6:	78db      	ldrb	r3, [r3, #3]
 801dfb8:	2b00      	cmp	r3, #0
 801dfba:	d034      	beq.n	801e026 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801dfbc:	687b      	ldr	r3, [r7, #4]
 801dfbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dfc0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801dfc2:	687b      	ldr	r3, [r7, #4]
 801dfc4:	7858      	ldrb	r0, [r3, #1]
 801dfc6:	687b      	ldr	r3, [r7, #4]
 801dfc8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801dfcc:	2301      	movs	r3, #1
 801dfce:	697a      	ldr	r2, [r7, #20]
 801dfd0:	f7ff fd10 	bl	801d9f4 <disk_write>
 801dfd4:	4603      	mov	r3, r0
 801dfd6:	2b00      	cmp	r3, #0
 801dfd8:	d002      	beq.n	801dfe0 <sync_window+0x38>
			res = FR_DISK_ERR;
 801dfda:	2301      	movs	r3, #1
 801dfdc:	73fb      	strb	r3, [r7, #15]
 801dfde:	e022      	b.n	801e026 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801dfe0:	687b      	ldr	r3, [r7, #4]
 801dfe2:	2200      	movs	r2, #0
 801dfe4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801dfe6:	687b      	ldr	r3, [r7, #4]
 801dfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dfea:	697a      	ldr	r2, [r7, #20]
 801dfec:	1ad2      	subs	r2, r2, r3
 801dfee:	687b      	ldr	r3, [r7, #4]
 801dff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dff2:	429a      	cmp	r2, r3
 801dff4:	d217      	bcs.n	801e026 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801dff6:	687b      	ldr	r3, [r7, #4]
 801dff8:	789b      	ldrb	r3, [r3, #2]
 801dffa:	613b      	str	r3, [r7, #16]
 801dffc:	e010      	b.n	801e020 <sync_window+0x78>
					wsect += fs->fsize;
 801dffe:	687b      	ldr	r3, [r7, #4]
 801e000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e002:	697a      	ldr	r2, [r7, #20]
 801e004:	4413      	add	r3, r2
 801e006:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	7858      	ldrb	r0, [r3, #1]
 801e00c:	687b      	ldr	r3, [r7, #4]
 801e00e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801e012:	2301      	movs	r3, #1
 801e014:	697a      	ldr	r2, [r7, #20]
 801e016:	f7ff fced 	bl	801d9f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801e01a:	693b      	ldr	r3, [r7, #16]
 801e01c:	3b01      	subs	r3, #1
 801e01e:	613b      	str	r3, [r7, #16]
 801e020:	693b      	ldr	r3, [r7, #16]
 801e022:	2b01      	cmp	r3, #1
 801e024:	d8eb      	bhi.n	801dffe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801e026:	7bfb      	ldrb	r3, [r7, #15]
}
 801e028:	4618      	mov	r0, r3
 801e02a:	3718      	adds	r7, #24
 801e02c:	46bd      	mov	sp, r7
 801e02e:	bd80      	pop	{r7, pc}

0801e030 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801e030:	b580      	push	{r7, lr}
 801e032:	b084      	sub	sp, #16
 801e034:	af00      	add	r7, sp, #0
 801e036:	6078      	str	r0, [r7, #4]
 801e038:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801e03a:	2300      	movs	r3, #0
 801e03c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801e03e:	687b      	ldr	r3, [r7, #4]
 801e040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e042:	683a      	ldr	r2, [r7, #0]
 801e044:	429a      	cmp	r2, r3
 801e046:	d01b      	beq.n	801e080 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801e048:	6878      	ldr	r0, [r7, #4]
 801e04a:	f7ff ffad 	bl	801dfa8 <sync_window>
 801e04e:	4603      	mov	r3, r0
 801e050:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801e052:	7bfb      	ldrb	r3, [r7, #15]
 801e054:	2b00      	cmp	r3, #0
 801e056:	d113      	bne.n	801e080 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801e058:	687b      	ldr	r3, [r7, #4]
 801e05a:	7858      	ldrb	r0, [r3, #1]
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801e062:	2301      	movs	r3, #1
 801e064:	683a      	ldr	r2, [r7, #0]
 801e066:	f7ff fca5 	bl	801d9b4 <disk_read>
 801e06a:	4603      	mov	r3, r0
 801e06c:	2b00      	cmp	r3, #0
 801e06e:	d004      	beq.n	801e07a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801e070:	f04f 33ff 	mov.w	r3, #4294967295
 801e074:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801e076:	2301      	movs	r3, #1
 801e078:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801e07a:	687b      	ldr	r3, [r7, #4]
 801e07c:	683a      	ldr	r2, [r7, #0]
 801e07e:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 801e080:	7bfb      	ldrb	r3, [r7, #15]
}
 801e082:	4618      	mov	r0, r3
 801e084:	3710      	adds	r7, #16
 801e086:	46bd      	mov	sp, r7
 801e088:	bd80      	pop	{r7, pc}
	...

0801e08c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801e08c:	b580      	push	{r7, lr}
 801e08e:	b084      	sub	sp, #16
 801e090:	af00      	add	r7, sp, #0
 801e092:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801e094:	6878      	ldr	r0, [r7, #4]
 801e096:	f7ff ff87 	bl	801dfa8 <sync_window>
 801e09a:	4603      	mov	r3, r0
 801e09c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801e09e:	7bfb      	ldrb	r3, [r7, #15]
 801e0a0:	2b00      	cmp	r3, #0
 801e0a2:	d159      	bne.n	801e158 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801e0a4:	687b      	ldr	r3, [r7, #4]
 801e0a6:	781b      	ldrb	r3, [r3, #0]
 801e0a8:	2b03      	cmp	r3, #3
 801e0aa:	d149      	bne.n	801e140 <sync_fs+0xb4>
 801e0ac:	687b      	ldr	r3, [r7, #4]
 801e0ae:	791b      	ldrb	r3, [r3, #4]
 801e0b0:	2b01      	cmp	r3, #1
 801e0b2:	d145      	bne.n	801e140 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801e0b4:	687b      	ldr	r3, [r7, #4]
 801e0b6:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801e0ba:	687b      	ldr	r3, [r7, #4]
 801e0bc:	899b      	ldrh	r3, [r3, #12]
 801e0be:	461a      	mov	r2, r3
 801e0c0:	2100      	movs	r1, #0
 801e0c2:	f7ff fd78 	bl	801dbb6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801e0c6:	687b      	ldr	r3, [r7, #4]
 801e0c8:	333c      	adds	r3, #60	; 0x3c
 801e0ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801e0ce:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801e0d2:	4618      	mov	r0, r3
 801e0d4:	f7ff fd07 	bl	801dae6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801e0d8:	687b      	ldr	r3, [r7, #4]
 801e0da:	333c      	adds	r3, #60	; 0x3c
 801e0dc:	4921      	ldr	r1, [pc, #132]	; (801e164 <sync_fs+0xd8>)
 801e0de:	4618      	mov	r0, r3
 801e0e0:	f7ff fd1c 	bl	801db1c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801e0e4:	687b      	ldr	r3, [r7, #4]
 801e0e6:	333c      	adds	r3, #60	; 0x3c
 801e0e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801e0ec:	491e      	ldr	r1, [pc, #120]	; (801e168 <sync_fs+0xdc>)
 801e0ee:	4618      	mov	r0, r3
 801e0f0:	f7ff fd14 	bl	801db1c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801e0f4:	687b      	ldr	r3, [r7, #4]
 801e0f6:	333c      	adds	r3, #60	; 0x3c
 801e0f8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801e0fc:	687b      	ldr	r3, [r7, #4]
 801e0fe:	69db      	ldr	r3, [r3, #28]
 801e100:	4619      	mov	r1, r3
 801e102:	4610      	mov	r0, r2
 801e104:	f7ff fd0a 	bl	801db1c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801e108:	687b      	ldr	r3, [r7, #4]
 801e10a:	333c      	adds	r3, #60	; 0x3c
 801e10c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801e110:	687b      	ldr	r3, [r7, #4]
 801e112:	699b      	ldr	r3, [r3, #24]
 801e114:	4619      	mov	r1, r3
 801e116:	4610      	mov	r0, r2
 801e118:	f7ff fd00 	bl	801db1c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801e11c:	687b      	ldr	r3, [r7, #4]
 801e11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e120:	1c5a      	adds	r2, r3, #1
 801e122:	687b      	ldr	r3, [r7, #4]
 801e124:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801e126:	687b      	ldr	r3, [r7, #4]
 801e128:	7858      	ldrb	r0, [r3, #1]
 801e12a:	687b      	ldr	r3, [r7, #4]
 801e12c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e134:	2301      	movs	r3, #1
 801e136:	f7ff fc5d 	bl	801d9f4 <disk_write>
			fs->fsi_flag = 0;
 801e13a:	687b      	ldr	r3, [r7, #4]
 801e13c:	2200      	movs	r2, #0
 801e13e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801e140:	687b      	ldr	r3, [r7, #4]
 801e142:	785b      	ldrb	r3, [r3, #1]
 801e144:	2200      	movs	r2, #0
 801e146:	2100      	movs	r1, #0
 801e148:	4618      	mov	r0, r3
 801e14a:	f7ff fc73 	bl	801da34 <disk_ioctl>
 801e14e:	4603      	mov	r3, r0
 801e150:	2b00      	cmp	r3, #0
 801e152:	d001      	beq.n	801e158 <sync_fs+0xcc>
 801e154:	2301      	movs	r3, #1
 801e156:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801e158:	7bfb      	ldrb	r3, [r7, #15]
}
 801e15a:	4618      	mov	r0, r3
 801e15c:	3710      	adds	r7, #16
 801e15e:	46bd      	mov	sp, r7
 801e160:	bd80      	pop	{r7, pc}
 801e162:	bf00      	nop
 801e164:	41615252 	.word	0x41615252
 801e168:	61417272 	.word	0x61417272

0801e16c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801e16c:	b480      	push	{r7}
 801e16e:	b083      	sub	sp, #12
 801e170:	af00      	add	r7, sp, #0
 801e172:	6078      	str	r0, [r7, #4]
 801e174:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801e176:	683b      	ldr	r3, [r7, #0]
 801e178:	3b02      	subs	r3, #2
 801e17a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	6a1b      	ldr	r3, [r3, #32]
 801e180:	3b02      	subs	r3, #2
 801e182:	683a      	ldr	r2, [r7, #0]
 801e184:	429a      	cmp	r2, r3
 801e186:	d301      	bcc.n	801e18c <clust2sect+0x20>
 801e188:	2300      	movs	r3, #0
 801e18a:	e008      	b.n	801e19e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	895b      	ldrh	r3, [r3, #10]
 801e190:	461a      	mov	r2, r3
 801e192:	683b      	ldr	r3, [r7, #0]
 801e194:	fb03 f202 	mul.w	r2, r3, r2
 801e198:	687b      	ldr	r3, [r7, #4]
 801e19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e19c:	4413      	add	r3, r2
}
 801e19e:	4618      	mov	r0, r3
 801e1a0:	370c      	adds	r7, #12
 801e1a2:	46bd      	mov	sp, r7
 801e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1a8:	4770      	bx	lr

0801e1aa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801e1aa:	b580      	push	{r7, lr}
 801e1ac:	b086      	sub	sp, #24
 801e1ae:	af00      	add	r7, sp, #0
 801e1b0:	6078      	str	r0, [r7, #4]
 801e1b2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	681b      	ldr	r3, [r3, #0]
 801e1b8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801e1ba:	683b      	ldr	r3, [r7, #0]
 801e1bc:	2b01      	cmp	r3, #1
 801e1be:	d904      	bls.n	801e1ca <get_fat+0x20>
 801e1c0:	693b      	ldr	r3, [r7, #16]
 801e1c2:	6a1b      	ldr	r3, [r3, #32]
 801e1c4:	683a      	ldr	r2, [r7, #0]
 801e1c6:	429a      	cmp	r2, r3
 801e1c8:	d302      	bcc.n	801e1d0 <get_fat+0x26>
		val = 1;	/* Internal error */
 801e1ca:	2301      	movs	r3, #1
 801e1cc:	617b      	str	r3, [r7, #20]
 801e1ce:	e0b7      	b.n	801e340 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801e1d0:	f04f 33ff 	mov.w	r3, #4294967295
 801e1d4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801e1d6:	693b      	ldr	r3, [r7, #16]
 801e1d8:	781b      	ldrb	r3, [r3, #0]
 801e1da:	2b02      	cmp	r3, #2
 801e1dc:	d05a      	beq.n	801e294 <get_fat+0xea>
 801e1de:	2b03      	cmp	r3, #3
 801e1e0:	d07d      	beq.n	801e2de <get_fat+0x134>
 801e1e2:	2b01      	cmp	r3, #1
 801e1e4:	f040 80a2 	bne.w	801e32c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801e1e8:	683b      	ldr	r3, [r7, #0]
 801e1ea:	60fb      	str	r3, [r7, #12]
 801e1ec:	68fb      	ldr	r3, [r7, #12]
 801e1ee:	085b      	lsrs	r3, r3, #1
 801e1f0:	68fa      	ldr	r2, [r7, #12]
 801e1f2:	4413      	add	r3, r2
 801e1f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801e1f6:	693b      	ldr	r3, [r7, #16]
 801e1f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e1fa:	693b      	ldr	r3, [r7, #16]
 801e1fc:	899b      	ldrh	r3, [r3, #12]
 801e1fe:	4619      	mov	r1, r3
 801e200:	68fb      	ldr	r3, [r7, #12]
 801e202:	fbb3 f3f1 	udiv	r3, r3, r1
 801e206:	4413      	add	r3, r2
 801e208:	4619      	mov	r1, r3
 801e20a:	6938      	ldr	r0, [r7, #16]
 801e20c:	f7ff ff10 	bl	801e030 <move_window>
 801e210:	4603      	mov	r3, r0
 801e212:	2b00      	cmp	r3, #0
 801e214:	f040 808d 	bne.w	801e332 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 801e218:	68fb      	ldr	r3, [r7, #12]
 801e21a:	1c5a      	adds	r2, r3, #1
 801e21c:	60fa      	str	r2, [r7, #12]
 801e21e:	693a      	ldr	r2, [r7, #16]
 801e220:	8992      	ldrh	r2, [r2, #12]
 801e222:	fbb3 f1f2 	udiv	r1, r3, r2
 801e226:	fb02 f201 	mul.w	r2, r2, r1
 801e22a:	1a9b      	subs	r3, r3, r2
 801e22c:	693a      	ldr	r2, [r7, #16]
 801e22e:	4413      	add	r3, r2
 801e230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e234:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801e236:	693b      	ldr	r3, [r7, #16]
 801e238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e23a:	693b      	ldr	r3, [r7, #16]
 801e23c:	899b      	ldrh	r3, [r3, #12]
 801e23e:	4619      	mov	r1, r3
 801e240:	68fb      	ldr	r3, [r7, #12]
 801e242:	fbb3 f3f1 	udiv	r3, r3, r1
 801e246:	4413      	add	r3, r2
 801e248:	4619      	mov	r1, r3
 801e24a:	6938      	ldr	r0, [r7, #16]
 801e24c:	f7ff fef0 	bl	801e030 <move_window>
 801e250:	4603      	mov	r3, r0
 801e252:	2b00      	cmp	r3, #0
 801e254:	d16f      	bne.n	801e336 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801e256:	693b      	ldr	r3, [r7, #16]
 801e258:	899b      	ldrh	r3, [r3, #12]
 801e25a:	461a      	mov	r2, r3
 801e25c:	68fb      	ldr	r3, [r7, #12]
 801e25e:	fbb3 f1f2 	udiv	r1, r3, r2
 801e262:	fb02 f201 	mul.w	r2, r2, r1
 801e266:	1a9b      	subs	r3, r3, r2
 801e268:	693a      	ldr	r2, [r7, #16]
 801e26a:	4413      	add	r3, r2
 801e26c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e270:	021b      	lsls	r3, r3, #8
 801e272:	461a      	mov	r2, r3
 801e274:	68bb      	ldr	r3, [r7, #8]
 801e276:	4313      	orrs	r3, r2
 801e278:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801e27a:	683b      	ldr	r3, [r7, #0]
 801e27c:	f003 0301 	and.w	r3, r3, #1
 801e280:	2b00      	cmp	r3, #0
 801e282:	d002      	beq.n	801e28a <get_fat+0xe0>
 801e284:	68bb      	ldr	r3, [r7, #8]
 801e286:	091b      	lsrs	r3, r3, #4
 801e288:	e002      	b.n	801e290 <get_fat+0xe6>
 801e28a:	68bb      	ldr	r3, [r7, #8]
 801e28c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801e290:	617b      	str	r3, [r7, #20]
			break;
 801e292:	e055      	b.n	801e340 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801e294:	693b      	ldr	r3, [r7, #16]
 801e296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e298:	693b      	ldr	r3, [r7, #16]
 801e29a:	899b      	ldrh	r3, [r3, #12]
 801e29c:	085b      	lsrs	r3, r3, #1
 801e29e:	b29b      	uxth	r3, r3
 801e2a0:	4619      	mov	r1, r3
 801e2a2:	683b      	ldr	r3, [r7, #0]
 801e2a4:	fbb3 f3f1 	udiv	r3, r3, r1
 801e2a8:	4413      	add	r3, r2
 801e2aa:	4619      	mov	r1, r3
 801e2ac:	6938      	ldr	r0, [r7, #16]
 801e2ae:	f7ff febf 	bl	801e030 <move_window>
 801e2b2:	4603      	mov	r3, r0
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	d140      	bne.n	801e33a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801e2b8:	693b      	ldr	r3, [r7, #16]
 801e2ba:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801e2be:	683b      	ldr	r3, [r7, #0]
 801e2c0:	005b      	lsls	r3, r3, #1
 801e2c2:	693a      	ldr	r2, [r7, #16]
 801e2c4:	8992      	ldrh	r2, [r2, #12]
 801e2c6:	fbb3 f0f2 	udiv	r0, r3, r2
 801e2ca:	fb02 f200 	mul.w	r2, r2, r0
 801e2ce:	1a9b      	subs	r3, r3, r2
 801e2d0:	440b      	add	r3, r1
 801e2d2:	4618      	mov	r0, r3
 801e2d4:	f7ff fbcc 	bl	801da70 <ld_word>
 801e2d8:	4603      	mov	r3, r0
 801e2da:	617b      	str	r3, [r7, #20]
			break;
 801e2dc:	e030      	b.n	801e340 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801e2de:	693b      	ldr	r3, [r7, #16]
 801e2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e2e2:	693b      	ldr	r3, [r7, #16]
 801e2e4:	899b      	ldrh	r3, [r3, #12]
 801e2e6:	089b      	lsrs	r3, r3, #2
 801e2e8:	b29b      	uxth	r3, r3
 801e2ea:	4619      	mov	r1, r3
 801e2ec:	683b      	ldr	r3, [r7, #0]
 801e2ee:	fbb3 f3f1 	udiv	r3, r3, r1
 801e2f2:	4413      	add	r3, r2
 801e2f4:	4619      	mov	r1, r3
 801e2f6:	6938      	ldr	r0, [r7, #16]
 801e2f8:	f7ff fe9a 	bl	801e030 <move_window>
 801e2fc:	4603      	mov	r3, r0
 801e2fe:	2b00      	cmp	r3, #0
 801e300:	d11d      	bne.n	801e33e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801e302:	693b      	ldr	r3, [r7, #16]
 801e304:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801e308:	683b      	ldr	r3, [r7, #0]
 801e30a:	009b      	lsls	r3, r3, #2
 801e30c:	693a      	ldr	r2, [r7, #16]
 801e30e:	8992      	ldrh	r2, [r2, #12]
 801e310:	fbb3 f0f2 	udiv	r0, r3, r2
 801e314:	fb02 f200 	mul.w	r2, r2, r0
 801e318:	1a9b      	subs	r3, r3, r2
 801e31a:	440b      	add	r3, r1
 801e31c:	4618      	mov	r0, r3
 801e31e:	f7ff fbbf 	bl	801daa0 <ld_dword>
 801e322:	4603      	mov	r3, r0
 801e324:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801e328:	617b      	str	r3, [r7, #20]
			break;
 801e32a:	e009      	b.n	801e340 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801e32c:	2301      	movs	r3, #1
 801e32e:	617b      	str	r3, [r7, #20]
 801e330:	e006      	b.n	801e340 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801e332:	bf00      	nop
 801e334:	e004      	b.n	801e340 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801e336:	bf00      	nop
 801e338:	e002      	b.n	801e340 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801e33a:	bf00      	nop
 801e33c:	e000      	b.n	801e340 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801e33e:	bf00      	nop
		}
	}

	return val;
 801e340:	697b      	ldr	r3, [r7, #20]
}
 801e342:	4618      	mov	r0, r3
 801e344:	3718      	adds	r7, #24
 801e346:	46bd      	mov	sp, r7
 801e348:	bd80      	pop	{r7, pc}

0801e34a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801e34a:	b590      	push	{r4, r7, lr}
 801e34c:	b089      	sub	sp, #36	; 0x24
 801e34e:	af00      	add	r7, sp, #0
 801e350:	60f8      	str	r0, [r7, #12]
 801e352:	60b9      	str	r1, [r7, #8]
 801e354:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801e356:	2302      	movs	r3, #2
 801e358:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801e35a:	68bb      	ldr	r3, [r7, #8]
 801e35c:	2b01      	cmp	r3, #1
 801e35e:	f240 8106 	bls.w	801e56e <put_fat+0x224>
 801e362:	68fb      	ldr	r3, [r7, #12]
 801e364:	6a1b      	ldr	r3, [r3, #32]
 801e366:	68ba      	ldr	r2, [r7, #8]
 801e368:	429a      	cmp	r2, r3
 801e36a:	f080 8100 	bcs.w	801e56e <put_fat+0x224>
		switch (fs->fs_type) {
 801e36e:	68fb      	ldr	r3, [r7, #12]
 801e370:	781b      	ldrb	r3, [r3, #0]
 801e372:	2b02      	cmp	r3, #2
 801e374:	f000 8088 	beq.w	801e488 <put_fat+0x13e>
 801e378:	2b03      	cmp	r3, #3
 801e37a:	f000 80b0 	beq.w	801e4de <put_fat+0x194>
 801e37e:	2b01      	cmp	r3, #1
 801e380:	f040 80f5 	bne.w	801e56e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801e384:	68bb      	ldr	r3, [r7, #8]
 801e386:	61bb      	str	r3, [r7, #24]
 801e388:	69bb      	ldr	r3, [r7, #24]
 801e38a:	085b      	lsrs	r3, r3, #1
 801e38c:	69ba      	ldr	r2, [r7, #24]
 801e38e:	4413      	add	r3, r2
 801e390:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801e392:	68fb      	ldr	r3, [r7, #12]
 801e394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e396:	68fb      	ldr	r3, [r7, #12]
 801e398:	899b      	ldrh	r3, [r3, #12]
 801e39a:	4619      	mov	r1, r3
 801e39c:	69bb      	ldr	r3, [r7, #24]
 801e39e:	fbb3 f3f1 	udiv	r3, r3, r1
 801e3a2:	4413      	add	r3, r2
 801e3a4:	4619      	mov	r1, r3
 801e3a6:	68f8      	ldr	r0, [r7, #12]
 801e3a8:	f7ff fe42 	bl	801e030 <move_window>
 801e3ac:	4603      	mov	r3, r0
 801e3ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801e3b0:	7ffb      	ldrb	r3, [r7, #31]
 801e3b2:	2b00      	cmp	r3, #0
 801e3b4:	f040 80d4 	bne.w	801e560 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 801e3b8:	68fb      	ldr	r3, [r7, #12]
 801e3ba:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801e3be:	69bb      	ldr	r3, [r7, #24]
 801e3c0:	1c5a      	adds	r2, r3, #1
 801e3c2:	61ba      	str	r2, [r7, #24]
 801e3c4:	68fa      	ldr	r2, [r7, #12]
 801e3c6:	8992      	ldrh	r2, [r2, #12]
 801e3c8:	fbb3 f0f2 	udiv	r0, r3, r2
 801e3cc:	fb02 f200 	mul.w	r2, r2, r0
 801e3d0:	1a9b      	subs	r3, r3, r2
 801e3d2:	440b      	add	r3, r1
 801e3d4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801e3d6:	68bb      	ldr	r3, [r7, #8]
 801e3d8:	f003 0301 	and.w	r3, r3, #1
 801e3dc:	2b00      	cmp	r3, #0
 801e3de:	d00d      	beq.n	801e3fc <put_fat+0xb2>
 801e3e0:	697b      	ldr	r3, [r7, #20]
 801e3e2:	781b      	ldrb	r3, [r3, #0]
 801e3e4:	b25b      	sxtb	r3, r3
 801e3e6:	f003 030f 	and.w	r3, r3, #15
 801e3ea:	b25a      	sxtb	r2, r3
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	b2db      	uxtb	r3, r3
 801e3f0:	011b      	lsls	r3, r3, #4
 801e3f2:	b25b      	sxtb	r3, r3
 801e3f4:	4313      	orrs	r3, r2
 801e3f6:	b25b      	sxtb	r3, r3
 801e3f8:	b2db      	uxtb	r3, r3
 801e3fa:	e001      	b.n	801e400 <put_fat+0xb6>
 801e3fc:	687b      	ldr	r3, [r7, #4]
 801e3fe:	b2db      	uxtb	r3, r3
 801e400:	697a      	ldr	r2, [r7, #20]
 801e402:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801e404:	68fb      	ldr	r3, [r7, #12]
 801e406:	2201      	movs	r2, #1
 801e408:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801e40a:	68fb      	ldr	r3, [r7, #12]
 801e40c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e40e:	68fb      	ldr	r3, [r7, #12]
 801e410:	899b      	ldrh	r3, [r3, #12]
 801e412:	4619      	mov	r1, r3
 801e414:	69bb      	ldr	r3, [r7, #24]
 801e416:	fbb3 f3f1 	udiv	r3, r3, r1
 801e41a:	4413      	add	r3, r2
 801e41c:	4619      	mov	r1, r3
 801e41e:	68f8      	ldr	r0, [r7, #12]
 801e420:	f7ff fe06 	bl	801e030 <move_window>
 801e424:	4603      	mov	r3, r0
 801e426:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801e428:	7ffb      	ldrb	r3, [r7, #31]
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	f040 809a 	bne.w	801e564 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 801e430:	68fb      	ldr	r3, [r7, #12]
 801e432:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801e436:	68fb      	ldr	r3, [r7, #12]
 801e438:	899b      	ldrh	r3, [r3, #12]
 801e43a:	461a      	mov	r2, r3
 801e43c:	69bb      	ldr	r3, [r7, #24]
 801e43e:	fbb3 f0f2 	udiv	r0, r3, r2
 801e442:	fb02 f200 	mul.w	r2, r2, r0
 801e446:	1a9b      	subs	r3, r3, r2
 801e448:	440b      	add	r3, r1
 801e44a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801e44c:	68bb      	ldr	r3, [r7, #8]
 801e44e:	f003 0301 	and.w	r3, r3, #1
 801e452:	2b00      	cmp	r3, #0
 801e454:	d003      	beq.n	801e45e <put_fat+0x114>
 801e456:	687b      	ldr	r3, [r7, #4]
 801e458:	091b      	lsrs	r3, r3, #4
 801e45a:	b2db      	uxtb	r3, r3
 801e45c:	e00e      	b.n	801e47c <put_fat+0x132>
 801e45e:	697b      	ldr	r3, [r7, #20]
 801e460:	781b      	ldrb	r3, [r3, #0]
 801e462:	b25b      	sxtb	r3, r3
 801e464:	f023 030f 	bic.w	r3, r3, #15
 801e468:	b25a      	sxtb	r2, r3
 801e46a:	687b      	ldr	r3, [r7, #4]
 801e46c:	0a1b      	lsrs	r3, r3, #8
 801e46e:	b25b      	sxtb	r3, r3
 801e470:	f003 030f 	and.w	r3, r3, #15
 801e474:	b25b      	sxtb	r3, r3
 801e476:	4313      	orrs	r3, r2
 801e478:	b25b      	sxtb	r3, r3
 801e47a:	b2db      	uxtb	r3, r3
 801e47c:	697a      	ldr	r2, [r7, #20]
 801e47e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801e480:	68fb      	ldr	r3, [r7, #12]
 801e482:	2201      	movs	r2, #1
 801e484:	70da      	strb	r2, [r3, #3]
			break;
 801e486:	e072      	b.n	801e56e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801e488:	68fb      	ldr	r3, [r7, #12]
 801e48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e48c:	68fb      	ldr	r3, [r7, #12]
 801e48e:	899b      	ldrh	r3, [r3, #12]
 801e490:	085b      	lsrs	r3, r3, #1
 801e492:	b29b      	uxth	r3, r3
 801e494:	4619      	mov	r1, r3
 801e496:	68bb      	ldr	r3, [r7, #8]
 801e498:	fbb3 f3f1 	udiv	r3, r3, r1
 801e49c:	4413      	add	r3, r2
 801e49e:	4619      	mov	r1, r3
 801e4a0:	68f8      	ldr	r0, [r7, #12]
 801e4a2:	f7ff fdc5 	bl	801e030 <move_window>
 801e4a6:	4603      	mov	r3, r0
 801e4a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801e4aa:	7ffb      	ldrb	r3, [r7, #31]
 801e4ac:	2b00      	cmp	r3, #0
 801e4ae:	d15b      	bne.n	801e568 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801e4b0:	68fb      	ldr	r3, [r7, #12]
 801e4b2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801e4b6:	68bb      	ldr	r3, [r7, #8]
 801e4b8:	005b      	lsls	r3, r3, #1
 801e4ba:	68fa      	ldr	r2, [r7, #12]
 801e4bc:	8992      	ldrh	r2, [r2, #12]
 801e4be:	fbb3 f0f2 	udiv	r0, r3, r2
 801e4c2:	fb02 f200 	mul.w	r2, r2, r0
 801e4c6:	1a9b      	subs	r3, r3, r2
 801e4c8:	440b      	add	r3, r1
 801e4ca:	687a      	ldr	r2, [r7, #4]
 801e4cc:	b292      	uxth	r2, r2
 801e4ce:	4611      	mov	r1, r2
 801e4d0:	4618      	mov	r0, r3
 801e4d2:	f7ff fb08 	bl	801dae6 <st_word>
			fs->wflag = 1;
 801e4d6:	68fb      	ldr	r3, [r7, #12]
 801e4d8:	2201      	movs	r2, #1
 801e4da:	70da      	strb	r2, [r3, #3]
			break;
 801e4dc:	e047      	b.n	801e56e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801e4de:	68fb      	ldr	r3, [r7, #12]
 801e4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e4e2:	68fb      	ldr	r3, [r7, #12]
 801e4e4:	899b      	ldrh	r3, [r3, #12]
 801e4e6:	089b      	lsrs	r3, r3, #2
 801e4e8:	b29b      	uxth	r3, r3
 801e4ea:	4619      	mov	r1, r3
 801e4ec:	68bb      	ldr	r3, [r7, #8]
 801e4ee:	fbb3 f3f1 	udiv	r3, r3, r1
 801e4f2:	4413      	add	r3, r2
 801e4f4:	4619      	mov	r1, r3
 801e4f6:	68f8      	ldr	r0, [r7, #12]
 801e4f8:	f7ff fd9a 	bl	801e030 <move_window>
 801e4fc:	4603      	mov	r3, r0
 801e4fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801e500:	7ffb      	ldrb	r3, [r7, #31]
 801e502:	2b00      	cmp	r3, #0
 801e504:	d132      	bne.n	801e56c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801e506:	687b      	ldr	r3, [r7, #4]
 801e508:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801e50c:	68fb      	ldr	r3, [r7, #12]
 801e50e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801e512:	68bb      	ldr	r3, [r7, #8]
 801e514:	009b      	lsls	r3, r3, #2
 801e516:	68fa      	ldr	r2, [r7, #12]
 801e518:	8992      	ldrh	r2, [r2, #12]
 801e51a:	fbb3 f0f2 	udiv	r0, r3, r2
 801e51e:	fb02 f200 	mul.w	r2, r2, r0
 801e522:	1a9b      	subs	r3, r3, r2
 801e524:	440b      	add	r3, r1
 801e526:	4618      	mov	r0, r3
 801e528:	f7ff faba 	bl	801daa0 <ld_dword>
 801e52c:	4603      	mov	r3, r0
 801e52e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801e532:	4323      	orrs	r3, r4
 801e534:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801e536:	68fb      	ldr	r3, [r7, #12]
 801e538:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801e53c:	68bb      	ldr	r3, [r7, #8]
 801e53e:	009b      	lsls	r3, r3, #2
 801e540:	68fa      	ldr	r2, [r7, #12]
 801e542:	8992      	ldrh	r2, [r2, #12]
 801e544:	fbb3 f0f2 	udiv	r0, r3, r2
 801e548:	fb02 f200 	mul.w	r2, r2, r0
 801e54c:	1a9b      	subs	r3, r3, r2
 801e54e:	440b      	add	r3, r1
 801e550:	6879      	ldr	r1, [r7, #4]
 801e552:	4618      	mov	r0, r3
 801e554:	f7ff fae2 	bl	801db1c <st_dword>
			fs->wflag = 1;
 801e558:	68fb      	ldr	r3, [r7, #12]
 801e55a:	2201      	movs	r2, #1
 801e55c:	70da      	strb	r2, [r3, #3]
			break;
 801e55e:	e006      	b.n	801e56e <put_fat+0x224>
			if (res != FR_OK) break;
 801e560:	bf00      	nop
 801e562:	e004      	b.n	801e56e <put_fat+0x224>
			if (res != FR_OK) break;
 801e564:	bf00      	nop
 801e566:	e002      	b.n	801e56e <put_fat+0x224>
			if (res != FR_OK) break;
 801e568:	bf00      	nop
 801e56a:	e000      	b.n	801e56e <put_fat+0x224>
			if (res != FR_OK) break;
 801e56c:	bf00      	nop
		}
	}
	return res;
 801e56e:	7ffb      	ldrb	r3, [r7, #31]
}
 801e570:	4618      	mov	r0, r3
 801e572:	3724      	adds	r7, #36	; 0x24
 801e574:	46bd      	mov	sp, r7
 801e576:	bd90      	pop	{r4, r7, pc}

0801e578 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801e578:	b580      	push	{r7, lr}
 801e57a:	b088      	sub	sp, #32
 801e57c:	af00      	add	r7, sp, #0
 801e57e:	60f8      	str	r0, [r7, #12]
 801e580:	60b9      	str	r1, [r7, #8]
 801e582:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801e584:	2300      	movs	r3, #0
 801e586:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801e588:	68fb      	ldr	r3, [r7, #12]
 801e58a:	681b      	ldr	r3, [r3, #0]
 801e58c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801e58e:	68bb      	ldr	r3, [r7, #8]
 801e590:	2b01      	cmp	r3, #1
 801e592:	d904      	bls.n	801e59e <remove_chain+0x26>
 801e594:	69bb      	ldr	r3, [r7, #24]
 801e596:	6a1b      	ldr	r3, [r3, #32]
 801e598:	68ba      	ldr	r2, [r7, #8]
 801e59a:	429a      	cmp	r2, r3
 801e59c:	d301      	bcc.n	801e5a2 <remove_chain+0x2a>
 801e59e:	2302      	movs	r3, #2
 801e5a0:	e04b      	b.n	801e63a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801e5a2:	687b      	ldr	r3, [r7, #4]
 801e5a4:	2b00      	cmp	r3, #0
 801e5a6:	d00c      	beq.n	801e5c2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801e5a8:	f04f 32ff 	mov.w	r2, #4294967295
 801e5ac:	6879      	ldr	r1, [r7, #4]
 801e5ae:	69b8      	ldr	r0, [r7, #24]
 801e5b0:	f7ff fecb 	bl	801e34a <put_fat>
 801e5b4:	4603      	mov	r3, r0
 801e5b6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801e5b8:	7ffb      	ldrb	r3, [r7, #31]
 801e5ba:	2b00      	cmp	r3, #0
 801e5bc:	d001      	beq.n	801e5c2 <remove_chain+0x4a>
 801e5be:	7ffb      	ldrb	r3, [r7, #31]
 801e5c0:	e03b      	b.n	801e63a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801e5c2:	68b9      	ldr	r1, [r7, #8]
 801e5c4:	68f8      	ldr	r0, [r7, #12]
 801e5c6:	f7ff fdf0 	bl	801e1aa <get_fat>
 801e5ca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801e5cc:	697b      	ldr	r3, [r7, #20]
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	d031      	beq.n	801e636 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801e5d2:	697b      	ldr	r3, [r7, #20]
 801e5d4:	2b01      	cmp	r3, #1
 801e5d6:	d101      	bne.n	801e5dc <remove_chain+0x64>
 801e5d8:	2302      	movs	r3, #2
 801e5da:	e02e      	b.n	801e63a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801e5dc:	697b      	ldr	r3, [r7, #20]
 801e5de:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e5e2:	d101      	bne.n	801e5e8 <remove_chain+0x70>
 801e5e4:	2301      	movs	r3, #1
 801e5e6:	e028      	b.n	801e63a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801e5e8:	2200      	movs	r2, #0
 801e5ea:	68b9      	ldr	r1, [r7, #8]
 801e5ec:	69b8      	ldr	r0, [r7, #24]
 801e5ee:	f7ff feac 	bl	801e34a <put_fat>
 801e5f2:	4603      	mov	r3, r0
 801e5f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801e5f6:	7ffb      	ldrb	r3, [r7, #31]
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	d001      	beq.n	801e600 <remove_chain+0x88>
 801e5fc:	7ffb      	ldrb	r3, [r7, #31]
 801e5fe:	e01c      	b.n	801e63a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801e600:	69bb      	ldr	r3, [r7, #24]
 801e602:	69da      	ldr	r2, [r3, #28]
 801e604:	69bb      	ldr	r3, [r7, #24]
 801e606:	6a1b      	ldr	r3, [r3, #32]
 801e608:	3b02      	subs	r3, #2
 801e60a:	429a      	cmp	r2, r3
 801e60c:	d20b      	bcs.n	801e626 <remove_chain+0xae>
			fs->free_clst++;
 801e60e:	69bb      	ldr	r3, [r7, #24]
 801e610:	69db      	ldr	r3, [r3, #28]
 801e612:	1c5a      	adds	r2, r3, #1
 801e614:	69bb      	ldr	r3, [r7, #24]
 801e616:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 801e618:	69bb      	ldr	r3, [r7, #24]
 801e61a:	791b      	ldrb	r3, [r3, #4]
 801e61c:	f043 0301 	orr.w	r3, r3, #1
 801e620:	b2da      	uxtb	r2, r3
 801e622:	69bb      	ldr	r3, [r7, #24]
 801e624:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801e626:	697b      	ldr	r3, [r7, #20]
 801e628:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801e62a:	69bb      	ldr	r3, [r7, #24]
 801e62c:	6a1b      	ldr	r3, [r3, #32]
 801e62e:	68ba      	ldr	r2, [r7, #8]
 801e630:	429a      	cmp	r2, r3
 801e632:	d3c6      	bcc.n	801e5c2 <remove_chain+0x4a>
 801e634:	e000      	b.n	801e638 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801e636:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801e638:	2300      	movs	r3, #0
}
 801e63a:	4618      	mov	r0, r3
 801e63c:	3720      	adds	r7, #32
 801e63e:	46bd      	mov	sp, r7
 801e640:	bd80      	pop	{r7, pc}

0801e642 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801e642:	b580      	push	{r7, lr}
 801e644:	b088      	sub	sp, #32
 801e646:	af00      	add	r7, sp, #0
 801e648:	6078      	str	r0, [r7, #4]
 801e64a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801e64c:	687b      	ldr	r3, [r7, #4]
 801e64e:	681b      	ldr	r3, [r3, #0]
 801e650:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801e652:	683b      	ldr	r3, [r7, #0]
 801e654:	2b00      	cmp	r3, #0
 801e656:	d10d      	bne.n	801e674 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801e658:	693b      	ldr	r3, [r7, #16]
 801e65a:	699b      	ldr	r3, [r3, #24]
 801e65c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801e65e:	69bb      	ldr	r3, [r7, #24]
 801e660:	2b00      	cmp	r3, #0
 801e662:	d004      	beq.n	801e66e <create_chain+0x2c>
 801e664:	693b      	ldr	r3, [r7, #16]
 801e666:	6a1b      	ldr	r3, [r3, #32]
 801e668:	69ba      	ldr	r2, [r7, #24]
 801e66a:	429a      	cmp	r2, r3
 801e66c:	d31b      	bcc.n	801e6a6 <create_chain+0x64>
 801e66e:	2301      	movs	r3, #1
 801e670:	61bb      	str	r3, [r7, #24]
 801e672:	e018      	b.n	801e6a6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801e674:	6839      	ldr	r1, [r7, #0]
 801e676:	6878      	ldr	r0, [r7, #4]
 801e678:	f7ff fd97 	bl	801e1aa <get_fat>
 801e67c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801e67e:	68fb      	ldr	r3, [r7, #12]
 801e680:	2b01      	cmp	r3, #1
 801e682:	d801      	bhi.n	801e688 <create_chain+0x46>
 801e684:	2301      	movs	r3, #1
 801e686:	e070      	b.n	801e76a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801e688:	68fb      	ldr	r3, [r7, #12]
 801e68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e68e:	d101      	bne.n	801e694 <create_chain+0x52>
 801e690:	68fb      	ldr	r3, [r7, #12]
 801e692:	e06a      	b.n	801e76a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801e694:	693b      	ldr	r3, [r7, #16]
 801e696:	6a1b      	ldr	r3, [r3, #32]
 801e698:	68fa      	ldr	r2, [r7, #12]
 801e69a:	429a      	cmp	r2, r3
 801e69c:	d201      	bcs.n	801e6a2 <create_chain+0x60>
 801e69e:	68fb      	ldr	r3, [r7, #12]
 801e6a0:	e063      	b.n	801e76a <create_chain+0x128>
		scl = clst;
 801e6a2:	683b      	ldr	r3, [r7, #0]
 801e6a4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801e6a6:	69bb      	ldr	r3, [r7, #24]
 801e6a8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801e6aa:	69fb      	ldr	r3, [r7, #28]
 801e6ac:	3301      	adds	r3, #1
 801e6ae:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801e6b0:	693b      	ldr	r3, [r7, #16]
 801e6b2:	6a1b      	ldr	r3, [r3, #32]
 801e6b4:	69fa      	ldr	r2, [r7, #28]
 801e6b6:	429a      	cmp	r2, r3
 801e6b8:	d307      	bcc.n	801e6ca <create_chain+0x88>
				ncl = 2;
 801e6ba:	2302      	movs	r3, #2
 801e6bc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801e6be:	69fa      	ldr	r2, [r7, #28]
 801e6c0:	69bb      	ldr	r3, [r7, #24]
 801e6c2:	429a      	cmp	r2, r3
 801e6c4:	d901      	bls.n	801e6ca <create_chain+0x88>
 801e6c6:	2300      	movs	r3, #0
 801e6c8:	e04f      	b.n	801e76a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801e6ca:	69f9      	ldr	r1, [r7, #28]
 801e6cc:	6878      	ldr	r0, [r7, #4]
 801e6ce:	f7ff fd6c 	bl	801e1aa <get_fat>
 801e6d2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801e6d4:	68fb      	ldr	r3, [r7, #12]
 801e6d6:	2b00      	cmp	r3, #0
 801e6d8:	d00e      	beq.n	801e6f8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801e6da:	68fb      	ldr	r3, [r7, #12]
 801e6dc:	2b01      	cmp	r3, #1
 801e6de:	d003      	beq.n	801e6e8 <create_chain+0xa6>
 801e6e0:	68fb      	ldr	r3, [r7, #12]
 801e6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e6e6:	d101      	bne.n	801e6ec <create_chain+0xaa>
 801e6e8:	68fb      	ldr	r3, [r7, #12]
 801e6ea:	e03e      	b.n	801e76a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801e6ec:	69fa      	ldr	r2, [r7, #28]
 801e6ee:	69bb      	ldr	r3, [r7, #24]
 801e6f0:	429a      	cmp	r2, r3
 801e6f2:	d1da      	bne.n	801e6aa <create_chain+0x68>
 801e6f4:	2300      	movs	r3, #0
 801e6f6:	e038      	b.n	801e76a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801e6f8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801e6fa:	f04f 32ff 	mov.w	r2, #4294967295
 801e6fe:	69f9      	ldr	r1, [r7, #28]
 801e700:	6938      	ldr	r0, [r7, #16]
 801e702:	f7ff fe22 	bl	801e34a <put_fat>
 801e706:	4603      	mov	r3, r0
 801e708:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801e70a:	7dfb      	ldrb	r3, [r7, #23]
 801e70c:	2b00      	cmp	r3, #0
 801e70e:	d109      	bne.n	801e724 <create_chain+0xe2>
 801e710:	683b      	ldr	r3, [r7, #0]
 801e712:	2b00      	cmp	r3, #0
 801e714:	d006      	beq.n	801e724 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801e716:	69fa      	ldr	r2, [r7, #28]
 801e718:	6839      	ldr	r1, [r7, #0]
 801e71a:	6938      	ldr	r0, [r7, #16]
 801e71c:	f7ff fe15 	bl	801e34a <put_fat>
 801e720:	4603      	mov	r3, r0
 801e722:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801e724:	7dfb      	ldrb	r3, [r7, #23]
 801e726:	2b00      	cmp	r3, #0
 801e728:	d116      	bne.n	801e758 <create_chain+0x116>
		fs->last_clst = ncl;
 801e72a:	693b      	ldr	r3, [r7, #16]
 801e72c:	69fa      	ldr	r2, [r7, #28]
 801e72e:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801e730:	693b      	ldr	r3, [r7, #16]
 801e732:	69da      	ldr	r2, [r3, #28]
 801e734:	693b      	ldr	r3, [r7, #16]
 801e736:	6a1b      	ldr	r3, [r3, #32]
 801e738:	3b02      	subs	r3, #2
 801e73a:	429a      	cmp	r2, r3
 801e73c:	d804      	bhi.n	801e748 <create_chain+0x106>
 801e73e:	693b      	ldr	r3, [r7, #16]
 801e740:	69db      	ldr	r3, [r3, #28]
 801e742:	1e5a      	subs	r2, r3, #1
 801e744:	693b      	ldr	r3, [r7, #16]
 801e746:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 801e748:	693b      	ldr	r3, [r7, #16]
 801e74a:	791b      	ldrb	r3, [r3, #4]
 801e74c:	f043 0301 	orr.w	r3, r3, #1
 801e750:	b2da      	uxtb	r2, r3
 801e752:	693b      	ldr	r3, [r7, #16]
 801e754:	711a      	strb	r2, [r3, #4]
 801e756:	e007      	b.n	801e768 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801e758:	7dfb      	ldrb	r3, [r7, #23]
 801e75a:	2b01      	cmp	r3, #1
 801e75c:	d102      	bne.n	801e764 <create_chain+0x122>
 801e75e:	f04f 33ff 	mov.w	r3, #4294967295
 801e762:	e000      	b.n	801e766 <create_chain+0x124>
 801e764:	2301      	movs	r3, #1
 801e766:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801e768:	69fb      	ldr	r3, [r7, #28]
}
 801e76a:	4618      	mov	r0, r3
 801e76c:	3720      	adds	r7, #32
 801e76e:	46bd      	mov	sp, r7
 801e770:	bd80      	pop	{r7, pc}

0801e772 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801e772:	b480      	push	{r7}
 801e774:	b087      	sub	sp, #28
 801e776:	af00      	add	r7, sp, #0
 801e778:	6078      	str	r0, [r7, #4]
 801e77a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801e77c:	687b      	ldr	r3, [r7, #4]
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e786:	3304      	adds	r3, #4
 801e788:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801e78a:	68fb      	ldr	r3, [r7, #12]
 801e78c:	899b      	ldrh	r3, [r3, #12]
 801e78e:	461a      	mov	r2, r3
 801e790:	683b      	ldr	r3, [r7, #0]
 801e792:	fbb3 f3f2 	udiv	r3, r3, r2
 801e796:	68fa      	ldr	r2, [r7, #12]
 801e798:	8952      	ldrh	r2, [r2, #10]
 801e79a:	fbb3 f3f2 	udiv	r3, r3, r2
 801e79e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801e7a0:	693b      	ldr	r3, [r7, #16]
 801e7a2:	1d1a      	adds	r2, r3, #4
 801e7a4:	613a      	str	r2, [r7, #16]
 801e7a6:	681b      	ldr	r3, [r3, #0]
 801e7a8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801e7aa:	68bb      	ldr	r3, [r7, #8]
 801e7ac:	2b00      	cmp	r3, #0
 801e7ae:	d101      	bne.n	801e7b4 <clmt_clust+0x42>
 801e7b0:	2300      	movs	r3, #0
 801e7b2:	e010      	b.n	801e7d6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801e7b4:	697a      	ldr	r2, [r7, #20]
 801e7b6:	68bb      	ldr	r3, [r7, #8]
 801e7b8:	429a      	cmp	r2, r3
 801e7ba:	d307      	bcc.n	801e7cc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801e7bc:	697a      	ldr	r2, [r7, #20]
 801e7be:	68bb      	ldr	r3, [r7, #8]
 801e7c0:	1ad3      	subs	r3, r2, r3
 801e7c2:	617b      	str	r3, [r7, #20]
 801e7c4:	693b      	ldr	r3, [r7, #16]
 801e7c6:	3304      	adds	r3, #4
 801e7c8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801e7ca:	e7e9      	b.n	801e7a0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801e7cc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801e7ce:	693b      	ldr	r3, [r7, #16]
 801e7d0:	681a      	ldr	r2, [r3, #0]
 801e7d2:	697b      	ldr	r3, [r7, #20]
 801e7d4:	4413      	add	r3, r2
}
 801e7d6:	4618      	mov	r0, r3
 801e7d8:	371c      	adds	r7, #28
 801e7da:	46bd      	mov	sp, r7
 801e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7e0:	4770      	bx	lr

0801e7e2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801e7e2:	b580      	push	{r7, lr}
 801e7e4:	b086      	sub	sp, #24
 801e7e6:	af00      	add	r7, sp, #0
 801e7e8:	6078      	str	r0, [r7, #4]
 801e7ea:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801e7ec:	687b      	ldr	r3, [r7, #4]
 801e7ee:	681b      	ldr	r3, [r3, #0]
 801e7f0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801e7f2:	683b      	ldr	r3, [r7, #0]
 801e7f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801e7f8:	d204      	bcs.n	801e804 <dir_sdi+0x22>
 801e7fa:	683b      	ldr	r3, [r7, #0]
 801e7fc:	f003 031f 	and.w	r3, r3, #31
 801e800:	2b00      	cmp	r3, #0
 801e802:	d001      	beq.n	801e808 <dir_sdi+0x26>
		return FR_INT_ERR;
 801e804:	2302      	movs	r3, #2
 801e806:	e071      	b.n	801e8ec <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801e808:	687b      	ldr	r3, [r7, #4]
 801e80a:	683a      	ldr	r2, [r7, #0]
 801e80c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801e80e:	687b      	ldr	r3, [r7, #4]
 801e810:	689b      	ldr	r3, [r3, #8]
 801e812:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801e814:	697b      	ldr	r3, [r7, #20]
 801e816:	2b00      	cmp	r3, #0
 801e818:	d106      	bne.n	801e828 <dir_sdi+0x46>
 801e81a:	693b      	ldr	r3, [r7, #16]
 801e81c:	781b      	ldrb	r3, [r3, #0]
 801e81e:	2b02      	cmp	r3, #2
 801e820:	d902      	bls.n	801e828 <dir_sdi+0x46>
		clst = fs->dirbase;
 801e822:	693b      	ldr	r3, [r7, #16]
 801e824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e826:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801e828:	697b      	ldr	r3, [r7, #20]
 801e82a:	2b00      	cmp	r3, #0
 801e82c:	d10c      	bne.n	801e848 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801e82e:	683b      	ldr	r3, [r7, #0]
 801e830:	095b      	lsrs	r3, r3, #5
 801e832:	693a      	ldr	r2, [r7, #16]
 801e834:	8912      	ldrh	r2, [r2, #8]
 801e836:	4293      	cmp	r3, r2
 801e838:	d301      	bcc.n	801e83e <dir_sdi+0x5c>
 801e83a:	2302      	movs	r3, #2
 801e83c:	e056      	b.n	801e8ec <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801e83e:	693b      	ldr	r3, [r7, #16]
 801e840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e842:	687b      	ldr	r3, [r7, #4]
 801e844:	61da      	str	r2, [r3, #28]
 801e846:	e02d      	b.n	801e8a4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801e848:	693b      	ldr	r3, [r7, #16]
 801e84a:	895b      	ldrh	r3, [r3, #10]
 801e84c:	461a      	mov	r2, r3
 801e84e:	693b      	ldr	r3, [r7, #16]
 801e850:	899b      	ldrh	r3, [r3, #12]
 801e852:	fb03 f302 	mul.w	r3, r3, r2
 801e856:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801e858:	e019      	b.n	801e88e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801e85a:	687b      	ldr	r3, [r7, #4]
 801e85c:	6979      	ldr	r1, [r7, #20]
 801e85e:	4618      	mov	r0, r3
 801e860:	f7ff fca3 	bl	801e1aa <get_fat>
 801e864:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801e866:	697b      	ldr	r3, [r7, #20]
 801e868:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e86c:	d101      	bne.n	801e872 <dir_sdi+0x90>
 801e86e:	2301      	movs	r3, #1
 801e870:	e03c      	b.n	801e8ec <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801e872:	697b      	ldr	r3, [r7, #20]
 801e874:	2b01      	cmp	r3, #1
 801e876:	d904      	bls.n	801e882 <dir_sdi+0xa0>
 801e878:	693b      	ldr	r3, [r7, #16]
 801e87a:	6a1b      	ldr	r3, [r3, #32]
 801e87c:	697a      	ldr	r2, [r7, #20]
 801e87e:	429a      	cmp	r2, r3
 801e880:	d301      	bcc.n	801e886 <dir_sdi+0xa4>
 801e882:	2302      	movs	r3, #2
 801e884:	e032      	b.n	801e8ec <dir_sdi+0x10a>
			ofs -= csz;
 801e886:	683a      	ldr	r2, [r7, #0]
 801e888:	68fb      	ldr	r3, [r7, #12]
 801e88a:	1ad3      	subs	r3, r2, r3
 801e88c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801e88e:	683a      	ldr	r2, [r7, #0]
 801e890:	68fb      	ldr	r3, [r7, #12]
 801e892:	429a      	cmp	r2, r3
 801e894:	d2e1      	bcs.n	801e85a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801e896:	6979      	ldr	r1, [r7, #20]
 801e898:	6938      	ldr	r0, [r7, #16]
 801e89a:	f7ff fc67 	bl	801e16c <clust2sect>
 801e89e:	4602      	mov	r2, r0
 801e8a0:	687b      	ldr	r3, [r7, #4]
 801e8a2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801e8a4:	687b      	ldr	r3, [r7, #4]
 801e8a6:	697a      	ldr	r2, [r7, #20]
 801e8a8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	69db      	ldr	r3, [r3, #28]
 801e8ae:	2b00      	cmp	r3, #0
 801e8b0:	d101      	bne.n	801e8b6 <dir_sdi+0xd4>
 801e8b2:	2302      	movs	r3, #2
 801e8b4:	e01a      	b.n	801e8ec <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801e8b6:	687b      	ldr	r3, [r7, #4]
 801e8b8:	69da      	ldr	r2, [r3, #28]
 801e8ba:	693b      	ldr	r3, [r7, #16]
 801e8bc:	899b      	ldrh	r3, [r3, #12]
 801e8be:	4619      	mov	r1, r3
 801e8c0:	683b      	ldr	r3, [r7, #0]
 801e8c2:	fbb3 f3f1 	udiv	r3, r3, r1
 801e8c6:	441a      	add	r2, r3
 801e8c8:	687b      	ldr	r3, [r7, #4]
 801e8ca:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801e8cc:	693b      	ldr	r3, [r7, #16]
 801e8ce:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801e8d2:	693b      	ldr	r3, [r7, #16]
 801e8d4:	899b      	ldrh	r3, [r3, #12]
 801e8d6:	461a      	mov	r2, r3
 801e8d8:	683b      	ldr	r3, [r7, #0]
 801e8da:	fbb3 f0f2 	udiv	r0, r3, r2
 801e8de:	fb02 f200 	mul.w	r2, r2, r0
 801e8e2:	1a9b      	subs	r3, r3, r2
 801e8e4:	18ca      	adds	r2, r1, r3
 801e8e6:	687b      	ldr	r3, [r7, #4]
 801e8e8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801e8ea:	2300      	movs	r3, #0
}
 801e8ec:	4618      	mov	r0, r3
 801e8ee:	3718      	adds	r7, #24
 801e8f0:	46bd      	mov	sp, r7
 801e8f2:	bd80      	pop	{r7, pc}

0801e8f4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801e8f4:	b580      	push	{r7, lr}
 801e8f6:	b086      	sub	sp, #24
 801e8f8:	af00      	add	r7, sp, #0
 801e8fa:	6078      	str	r0, [r7, #4]
 801e8fc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801e8fe:	687b      	ldr	r3, [r7, #4]
 801e900:	681b      	ldr	r3, [r3, #0]
 801e902:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801e904:	687b      	ldr	r3, [r7, #4]
 801e906:	695b      	ldr	r3, [r3, #20]
 801e908:	3320      	adds	r3, #32
 801e90a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801e90c:	687b      	ldr	r3, [r7, #4]
 801e90e:	69db      	ldr	r3, [r3, #28]
 801e910:	2b00      	cmp	r3, #0
 801e912:	d003      	beq.n	801e91c <dir_next+0x28>
 801e914:	68bb      	ldr	r3, [r7, #8]
 801e916:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801e91a:	d301      	bcc.n	801e920 <dir_next+0x2c>
 801e91c:	2304      	movs	r3, #4
 801e91e:	e0bb      	b.n	801ea98 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801e920:	68fb      	ldr	r3, [r7, #12]
 801e922:	899b      	ldrh	r3, [r3, #12]
 801e924:	461a      	mov	r2, r3
 801e926:	68bb      	ldr	r3, [r7, #8]
 801e928:	fbb3 f1f2 	udiv	r1, r3, r2
 801e92c:	fb02 f201 	mul.w	r2, r2, r1
 801e930:	1a9b      	subs	r3, r3, r2
 801e932:	2b00      	cmp	r3, #0
 801e934:	f040 809d 	bne.w	801ea72 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801e938:	687b      	ldr	r3, [r7, #4]
 801e93a:	69db      	ldr	r3, [r3, #28]
 801e93c:	1c5a      	adds	r2, r3, #1
 801e93e:	687b      	ldr	r3, [r7, #4]
 801e940:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	699b      	ldr	r3, [r3, #24]
 801e946:	2b00      	cmp	r3, #0
 801e948:	d10b      	bne.n	801e962 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801e94a:	68bb      	ldr	r3, [r7, #8]
 801e94c:	095b      	lsrs	r3, r3, #5
 801e94e:	68fa      	ldr	r2, [r7, #12]
 801e950:	8912      	ldrh	r2, [r2, #8]
 801e952:	4293      	cmp	r3, r2
 801e954:	f0c0 808d 	bcc.w	801ea72 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801e958:	687b      	ldr	r3, [r7, #4]
 801e95a:	2200      	movs	r2, #0
 801e95c:	61da      	str	r2, [r3, #28]
 801e95e:	2304      	movs	r3, #4
 801e960:	e09a      	b.n	801ea98 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801e962:	68fb      	ldr	r3, [r7, #12]
 801e964:	899b      	ldrh	r3, [r3, #12]
 801e966:	461a      	mov	r2, r3
 801e968:	68bb      	ldr	r3, [r7, #8]
 801e96a:	fbb3 f3f2 	udiv	r3, r3, r2
 801e96e:	68fa      	ldr	r2, [r7, #12]
 801e970:	8952      	ldrh	r2, [r2, #10]
 801e972:	3a01      	subs	r2, #1
 801e974:	4013      	ands	r3, r2
 801e976:	2b00      	cmp	r3, #0
 801e978:	d17b      	bne.n	801ea72 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801e97a:	687a      	ldr	r2, [r7, #4]
 801e97c:	687b      	ldr	r3, [r7, #4]
 801e97e:	699b      	ldr	r3, [r3, #24]
 801e980:	4619      	mov	r1, r3
 801e982:	4610      	mov	r0, r2
 801e984:	f7ff fc11 	bl	801e1aa <get_fat>
 801e988:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801e98a:	697b      	ldr	r3, [r7, #20]
 801e98c:	2b01      	cmp	r3, #1
 801e98e:	d801      	bhi.n	801e994 <dir_next+0xa0>
 801e990:	2302      	movs	r3, #2
 801e992:	e081      	b.n	801ea98 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801e994:	697b      	ldr	r3, [r7, #20]
 801e996:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e99a:	d101      	bne.n	801e9a0 <dir_next+0xac>
 801e99c:	2301      	movs	r3, #1
 801e99e:	e07b      	b.n	801ea98 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801e9a0:	68fb      	ldr	r3, [r7, #12]
 801e9a2:	6a1b      	ldr	r3, [r3, #32]
 801e9a4:	697a      	ldr	r2, [r7, #20]
 801e9a6:	429a      	cmp	r2, r3
 801e9a8:	d359      	bcc.n	801ea5e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801e9aa:	683b      	ldr	r3, [r7, #0]
 801e9ac:	2b00      	cmp	r3, #0
 801e9ae:	d104      	bne.n	801e9ba <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801e9b0:	687b      	ldr	r3, [r7, #4]
 801e9b2:	2200      	movs	r2, #0
 801e9b4:	61da      	str	r2, [r3, #28]
 801e9b6:	2304      	movs	r3, #4
 801e9b8:	e06e      	b.n	801ea98 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801e9ba:	687a      	ldr	r2, [r7, #4]
 801e9bc:	687b      	ldr	r3, [r7, #4]
 801e9be:	699b      	ldr	r3, [r3, #24]
 801e9c0:	4619      	mov	r1, r3
 801e9c2:	4610      	mov	r0, r2
 801e9c4:	f7ff fe3d 	bl	801e642 <create_chain>
 801e9c8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801e9ca:	697b      	ldr	r3, [r7, #20]
 801e9cc:	2b00      	cmp	r3, #0
 801e9ce:	d101      	bne.n	801e9d4 <dir_next+0xe0>
 801e9d0:	2307      	movs	r3, #7
 801e9d2:	e061      	b.n	801ea98 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801e9d4:	697b      	ldr	r3, [r7, #20]
 801e9d6:	2b01      	cmp	r3, #1
 801e9d8:	d101      	bne.n	801e9de <dir_next+0xea>
 801e9da:	2302      	movs	r3, #2
 801e9dc:	e05c      	b.n	801ea98 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801e9de:	697b      	ldr	r3, [r7, #20]
 801e9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e9e4:	d101      	bne.n	801e9ea <dir_next+0xf6>
 801e9e6:	2301      	movs	r3, #1
 801e9e8:	e056      	b.n	801ea98 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801e9ea:	68f8      	ldr	r0, [r7, #12]
 801e9ec:	f7ff fadc 	bl	801dfa8 <sync_window>
 801e9f0:	4603      	mov	r3, r0
 801e9f2:	2b00      	cmp	r3, #0
 801e9f4:	d001      	beq.n	801e9fa <dir_next+0x106>
 801e9f6:	2301      	movs	r3, #1
 801e9f8:	e04e      	b.n	801ea98 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801e9fa:	68fb      	ldr	r3, [r7, #12]
 801e9fc:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801ea00:	68fb      	ldr	r3, [r7, #12]
 801ea02:	899b      	ldrh	r3, [r3, #12]
 801ea04:	461a      	mov	r2, r3
 801ea06:	2100      	movs	r1, #0
 801ea08:	f7ff f8d5 	bl	801dbb6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801ea0c:	2300      	movs	r3, #0
 801ea0e:	613b      	str	r3, [r7, #16]
 801ea10:	6979      	ldr	r1, [r7, #20]
 801ea12:	68f8      	ldr	r0, [r7, #12]
 801ea14:	f7ff fbaa 	bl	801e16c <clust2sect>
 801ea18:	4602      	mov	r2, r0
 801ea1a:	68fb      	ldr	r3, [r7, #12]
 801ea1c:	639a      	str	r2, [r3, #56]	; 0x38
 801ea1e:	e012      	b.n	801ea46 <dir_next+0x152>
						fs->wflag = 1;
 801ea20:	68fb      	ldr	r3, [r7, #12]
 801ea22:	2201      	movs	r2, #1
 801ea24:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801ea26:	68f8      	ldr	r0, [r7, #12]
 801ea28:	f7ff fabe 	bl	801dfa8 <sync_window>
 801ea2c:	4603      	mov	r3, r0
 801ea2e:	2b00      	cmp	r3, #0
 801ea30:	d001      	beq.n	801ea36 <dir_next+0x142>
 801ea32:	2301      	movs	r3, #1
 801ea34:	e030      	b.n	801ea98 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801ea36:	693b      	ldr	r3, [r7, #16]
 801ea38:	3301      	adds	r3, #1
 801ea3a:	613b      	str	r3, [r7, #16]
 801ea3c:	68fb      	ldr	r3, [r7, #12]
 801ea3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ea40:	1c5a      	adds	r2, r3, #1
 801ea42:	68fb      	ldr	r3, [r7, #12]
 801ea44:	639a      	str	r2, [r3, #56]	; 0x38
 801ea46:	68fb      	ldr	r3, [r7, #12]
 801ea48:	895b      	ldrh	r3, [r3, #10]
 801ea4a:	461a      	mov	r2, r3
 801ea4c:	693b      	ldr	r3, [r7, #16]
 801ea4e:	4293      	cmp	r3, r2
 801ea50:	d3e6      	bcc.n	801ea20 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801ea52:	68fb      	ldr	r3, [r7, #12]
 801ea54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ea56:	693b      	ldr	r3, [r7, #16]
 801ea58:	1ad2      	subs	r2, r2, r3
 801ea5a:	68fb      	ldr	r3, [r7, #12]
 801ea5c:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801ea5e:	687b      	ldr	r3, [r7, #4]
 801ea60:	697a      	ldr	r2, [r7, #20]
 801ea62:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801ea64:	6979      	ldr	r1, [r7, #20]
 801ea66:	68f8      	ldr	r0, [r7, #12]
 801ea68:	f7ff fb80 	bl	801e16c <clust2sect>
 801ea6c:	4602      	mov	r2, r0
 801ea6e:	687b      	ldr	r3, [r7, #4]
 801ea70:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801ea72:	687b      	ldr	r3, [r7, #4]
 801ea74:	68ba      	ldr	r2, [r7, #8]
 801ea76:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801ea78:	68fb      	ldr	r3, [r7, #12]
 801ea7a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801ea7e:	68fb      	ldr	r3, [r7, #12]
 801ea80:	899b      	ldrh	r3, [r3, #12]
 801ea82:	461a      	mov	r2, r3
 801ea84:	68bb      	ldr	r3, [r7, #8]
 801ea86:	fbb3 f0f2 	udiv	r0, r3, r2
 801ea8a:	fb02 f200 	mul.w	r2, r2, r0
 801ea8e:	1a9b      	subs	r3, r3, r2
 801ea90:	18ca      	adds	r2, r1, r3
 801ea92:	687b      	ldr	r3, [r7, #4]
 801ea94:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801ea96:	2300      	movs	r3, #0
}
 801ea98:	4618      	mov	r0, r3
 801ea9a:	3718      	adds	r7, #24
 801ea9c:	46bd      	mov	sp, r7
 801ea9e:	bd80      	pop	{r7, pc}

0801eaa0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801eaa0:	b580      	push	{r7, lr}
 801eaa2:	b086      	sub	sp, #24
 801eaa4:	af00      	add	r7, sp, #0
 801eaa6:	6078      	str	r0, [r7, #4]
 801eaa8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801eaaa:	687b      	ldr	r3, [r7, #4]
 801eaac:	681b      	ldr	r3, [r3, #0]
 801eaae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801eab0:	2100      	movs	r1, #0
 801eab2:	6878      	ldr	r0, [r7, #4]
 801eab4:	f7ff fe95 	bl	801e7e2 <dir_sdi>
 801eab8:	4603      	mov	r3, r0
 801eaba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801eabc:	7dfb      	ldrb	r3, [r7, #23]
 801eabe:	2b00      	cmp	r3, #0
 801eac0:	d12b      	bne.n	801eb1a <dir_alloc+0x7a>
		n = 0;
 801eac2:	2300      	movs	r3, #0
 801eac4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801eac6:	687b      	ldr	r3, [r7, #4]
 801eac8:	69db      	ldr	r3, [r3, #28]
 801eaca:	4619      	mov	r1, r3
 801eacc:	68f8      	ldr	r0, [r7, #12]
 801eace:	f7ff faaf 	bl	801e030 <move_window>
 801ead2:	4603      	mov	r3, r0
 801ead4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801ead6:	7dfb      	ldrb	r3, [r7, #23]
 801ead8:	2b00      	cmp	r3, #0
 801eada:	d11d      	bne.n	801eb18 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801eadc:	687b      	ldr	r3, [r7, #4]
 801eade:	6a1b      	ldr	r3, [r3, #32]
 801eae0:	781b      	ldrb	r3, [r3, #0]
 801eae2:	2be5      	cmp	r3, #229	; 0xe5
 801eae4:	d004      	beq.n	801eaf0 <dir_alloc+0x50>
 801eae6:	687b      	ldr	r3, [r7, #4]
 801eae8:	6a1b      	ldr	r3, [r3, #32]
 801eaea:	781b      	ldrb	r3, [r3, #0]
 801eaec:	2b00      	cmp	r3, #0
 801eaee:	d107      	bne.n	801eb00 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801eaf0:	693b      	ldr	r3, [r7, #16]
 801eaf2:	3301      	adds	r3, #1
 801eaf4:	613b      	str	r3, [r7, #16]
 801eaf6:	693a      	ldr	r2, [r7, #16]
 801eaf8:	683b      	ldr	r3, [r7, #0]
 801eafa:	429a      	cmp	r2, r3
 801eafc:	d102      	bne.n	801eb04 <dir_alloc+0x64>
 801eafe:	e00c      	b.n	801eb1a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801eb00:	2300      	movs	r3, #0
 801eb02:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801eb04:	2101      	movs	r1, #1
 801eb06:	6878      	ldr	r0, [r7, #4]
 801eb08:	f7ff fef4 	bl	801e8f4 <dir_next>
 801eb0c:	4603      	mov	r3, r0
 801eb0e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801eb10:	7dfb      	ldrb	r3, [r7, #23]
 801eb12:	2b00      	cmp	r3, #0
 801eb14:	d0d7      	beq.n	801eac6 <dir_alloc+0x26>
 801eb16:	e000      	b.n	801eb1a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801eb18:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801eb1a:	7dfb      	ldrb	r3, [r7, #23]
 801eb1c:	2b04      	cmp	r3, #4
 801eb1e:	d101      	bne.n	801eb24 <dir_alloc+0x84>
 801eb20:	2307      	movs	r3, #7
 801eb22:	75fb      	strb	r3, [r7, #23]
	return res;
 801eb24:	7dfb      	ldrb	r3, [r7, #23]
}
 801eb26:	4618      	mov	r0, r3
 801eb28:	3718      	adds	r7, #24
 801eb2a:	46bd      	mov	sp, r7
 801eb2c:	bd80      	pop	{r7, pc}

0801eb2e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801eb2e:	b580      	push	{r7, lr}
 801eb30:	b084      	sub	sp, #16
 801eb32:	af00      	add	r7, sp, #0
 801eb34:	6078      	str	r0, [r7, #4]
 801eb36:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801eb38:	683b      	ldr	r3, [r7, #0]
 801eb3a:	331a      	adds	r3, #26
 801eb3c:	4618      	mov	r0, r3
 801eb3e:	f7fe ff97 	bl	801da70 <ld_word>
 801eb42:	4603      	mov	r3, r0
 801eb44:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801eb46:	687b      	ldr	r3, [r7, #4]
 801eb48:	781b      	ldrb	r3, [r3, #0]
 801eb4a:	2b03      	cmp	r3, #3
 801eb4c:	d109      	bne.n	801eb62 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801eb4e:	683b      	ldr	r3, [r7, #0]
 801eb50:	3314      	adds	r3, #20
 801eb52:	4618      	mov	r0, r3
 801eb54:	f7fe ff8c 	bl	801da70 <ld_word>
 801eb58:	4603      	mov	r3, r0
 801eb5a:	041b      	lsls	r3, r3, #16
 801eb5c:	68fa      	ldr	r2, [r7, #12]
 801eb5e:	4313      	orrs	r3, r2
 801eb60:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801eb62:	68fb      	ldr	r3, [r7, #12]
}
 801eb64:	4618      	mov	r0, r3
 801eb66:	3710      	adds	r7, #16
 801eb68:	46bd      	mov	sp, r7
 801eb6a:	bd80      	pop	{r7, pc}

0801eb6c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801eb6c:	b580      	push	{r7, lr}
 801eb6e:	b084      	sub	sp, #16
 801eb70:	af00      	add	r7, sp, #0
 801eb72:	60f8      	str	r0, [r7, #12]
 801eb74:	60b9      	str	r1, [r7, #8]
 801eb76:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801eb78:	68bb      	ldr	r3, [r7, #8]
 801eb7a:	331a      	adds	r3, #26
 801eb7c:	687a      	ldr	r2, [r7, #4]
 801eb7e:	b292      	uxth	r2, r2
 801eb80:	4611      	mov	r1, r2
 801eb82:	4618      	mov	r0, r3
 801eb84:	f7fe ffaf 	bl	801dae6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801eb88:	68fb      	ldr	r3, [r7, #12]
 801eb8a:	781b      	ldrb	r3, [r3, #0]
 801eb8c:	2b03      	cmp	r3, #3
 801eb8e:	d109      	bne.n	801eba4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801eb90:	68bb      	ldr	r3, [r7, #8]
 801eb92:	f103 0214 	add.w	r2, r3, #20
 801eb96:	687b      	ldr	r3, [r7, #4]
 801eb98:	0c1b      	lsrs	r3, r3, #16
 801eb9a:	b29b      	uxth	r3, r3
 801eb9c:	4619      	mov	r1, r3
 801eb9e:	4610      	mov	r0, r2
 801eba0:	f7fe ffa1 	bl	801dae6 <st_word>
	}
}
 801eba4:	bf00      	nop
 801eba6:	3710      	adds	r7, #16
 801eba8:	46bd      	mov	sp, r7
 801ebaa:	bd80      	pop	{r7, pc}

0801ebac <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801ebac:	b590      	push	{r4, r7, lr}
 801ebae:	b087      	sub	sp, #28
 801ebb0:	af00      	add	r7, sp, #0
 801ebb2:	6078      	str	r0, [r7, #4]
 801ebb4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801ebb6:	683b      	ldr	r3, [r7, #0]
 801ebb8:	331a      	adds	r3, #26
 801ebba:	4618      	mov	r0, r3
 801ebbc:	f7fe ff58 	bl	801da70 <ld_word>
 801ebc0:	4603      	mov	r3, r0
 801ebc2:	2b00      	cmp	r3, #0
 801ebc4:	d001      	beq.n	801ebca <cmp_lfn+0x1e>
 801ebc6:	2300      	movs	r3, #0
 801ebc8:	e059      	b.n	801ec7e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801ebca:	683b      	ldr	r3, [r7, #0]
 801ebcc:	781b      	ldrb	r3, [r3, #0]
 801ebce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ebd2:	1e5a      	subs	r2, r3, #1
 801ebd4:	4613      	mov	r3, r2
 801ebd6:	005b      	lsls	r3, r3, #1
 801ebd8:	4413      	add	r3, r2
 801ebda:	009b      	lsls	r3, r3, #2
 801ebdc:	4413      	add	r3, r2
 801ebde:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801ebe0:	2301      	movs	r3, #1
 801ebe2:	81fb      	strh	r3, [r7, #14]
 801ebe4:	2300      	movs	r3, #0
 801ebe6:	613b      	str	r3, [r7, #16]
 801ebe8:	e033      	b.n	801ec52 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801ebea:	4a27      	ldr	r2, [pc, #156]	; (801ec88 <cmp_lfn+0xdc>)
 801ebec:	693b      	ldr	r3, [r7, #16]
 801ebee:	4413      	add	r3, r2
 801ebf0:	781b      	ldrb	r3, [r3, #0]
 801ebf2:	461a      	mov	r2, r3
 801ebf4:	683b      	ldr	r3, [r7, #0]
 801ebf6:	4413      	add	r3, r2
 801ebf8:	4618      	mov	r0, r3
 801ebfa:	f7fe ff39 	bl	801da70 <ld_word>
 801ebfe:	4603      	mov	r3, r0
 801ec00:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801ec02:	89fb      	ldrh	r3, [r7, #14]
 801ec04:	2b00      	cmp	r3, #0
 801ec06:	d01a      	beq.n	801ec3e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801ec08:	697b      	ldr	r3, [r7, #20]
 801ec0a:	2bfe      	cmp	r3, #254	; 0xfe
 801ec0c:	d812      	bhi.n	801ec34 <cmp_lfn+0x88>
 801ec0e:	89bb      	ldrh	r3, [r7, #12]
 801ec10:	4618      	mov	r0, r3
 801ec12:	f001 fe05 	bl	8020820 <ff_wtoupper>
 801ec16:	4603      	mov	r3, r0
 801ec18:	461c      	mov	r4, r3
 801ec1a:	697b      	ldr	r3, [r7, #20]
 801ec1c:	1c5a      	adds	r2, r3, #1
 801ec1e:	617a      	str	r2, [r7, #20]
 801ec20:	005b      	lsls	r3, r3, #1
 801ec22:	687a      	ldr	r2, [r7, #4]
 801ec24:	4413      	add	r3, r2
 801ec26:	881b      	ldrh	r3, [r3, #0]
 801ec28:	4618      	mov	r0, r3
 801ec2a:	f001 fdf9 	bl	8020820 <ff_wtoupper>
 801ec2e:	4603      	mov	r3, r0
 801ec30:	429c      	cmp	r4, r3
 801ec32:	d001      	beq.n	801ec38 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801ec34:	2300      	movs	r3, #0
 801ec36:	e022      	b.n	801ec7e <cmp_lfn+0xd2>
			}
			wc = uc;
 801ec38:	89bb      	ldrh	r3, [r7, #12]
 801ec3a:	81fb      	strh	r3, [r7, #14]
 801ec3c:	e006      	b.n	801ec4c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801ec3e:	89bb      	ldrh	r3, [r7, #12]
 801ec40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ec44:	4293      	cmp	r3, r2
 801ec46:	d001      	beq.n	801ec4c <cmp_lfn+0xa0>
 801ec48:	2300      	movs	r3, #0
 801ec4a:	e018      	b.n	801ec7e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801ec4c:	693b      	ldr	r3, [r7, #16]
 801ec4e:	3301      	adds	r3, #1
 801ec50:	613b      	str	r3, [r7, #16]
 801ec52:	693b      	ldr	r3, [r7, #16]
 801ec54:	2b0c      	cmp	r3, #12
 801ec56:	d9c8      	bls.n	801ebea <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801ec58:	683b      	ldr	r3, [r7, #0]
 801ec5a:	781b      	ldrb	r3, [r3, #0]
 801ec5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ec60:	2b00      	cmp	r3, #0
 801ec62:	d00b      	beq.n	801ec7c <cmp_lfn+0xd0>
 801ec64:	89fb      	ldrh	r3, [r7, #14]
 801ec66:	2b00      	cmp	r3, #0
 801ec68:	d008      	beq.n	801ec7c <cmp_lfn+0xd0>
 801ec6a:	697b      	ldr	r3, [r7, #20]
 801ec6c:	005b      	lsls	r3, r3, #1
 801ec6e:	687a      	ldr	r2, [r7, #4]
 801ec70:	4413      	add	r3, r2
 801ec72:	881b      	ldrh	r3, [r3, #0]
 801ec74:	2b00      	cmp	r3, #0
 801ec76:	d001      	beq.n	801ec7c <cmp_lfn+0xd0>
 801ec78:	2300      	movs	r3, #0
 801ec7a:	e000      	b.n	801ec7e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801ec7c:	2301      	movs	r3, #1
}
 801ec7e:	4618      	mov	r0, r3
 801ec80:	371c      	adds	r7, #28
 801ec82:	46bd      	mov	sp, r7
 801ec84:	bd90      	pop	{r4, r7, pc}
 801ec86:	bf00      	nop
 801ec88:	0802db80 	.word	0x0802db80

0801ec8c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801ec8c:	b580      	push	{r7, lr}
 801ec8e:	b088      	sub	sp, #32
 801ec90:	af00      	add	r7, sp, #0
 801ec92:	60f8      	str	r0, [r7, #12]
 801ec94:	60b9      	str	r1, [r7, #8]
 801ec96:	4611      	mov	r1, r2
 801ec98:	461a      	mov	r2, r3
 801ec9a:	460b      	mov	r3, r1
 801ec9c:	71fb      	strb	r3, [r7, #7]
 801ec9e:	4613      	mov	r3, r2
 801eca0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801eca2:	68bb      	ldr	r3, [r7, #8]
 801eca4:	330d      	adds	r3, #13
 801eca6:	79ba      	ldrb	r2, [r7, #6]
 801eca8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801ecaa:	68bb      	ldr	r3, [r7, #8]
 801ecac:	330b      	adds	r3, #11
 801ecae:	220f      	movs	r2, #15
 801ecb0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801ecb2:	68bb      	ldr	r3, [r7, #8]
 801ecb4:	330c      	adds	r3, #12
 801ecb6:	2200      	movs	r2, #0
 801ecb8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801ecba:	68bb      	ldr	r3, [r7, #8]
 801ecbc:	331a      	adds	r3, #26
 801ecbe:	2100      	movs	r1, #0
 801ecc0:	4618      	mov	r0, r3
 801ecc2:	f7fe ff10 	bl	801dae6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801ecc6:	79fb      	ldrb	r3, [r7, #7]
 801ecc8:	1e5a      	subs	r2, r3, #1
 801ecca:	4613      	mov	r3, r2
 801eccc:	005b      	lsls	r3, r3, #1
 801ecce:	4413      	add	r3, r2
 801ecd0:	009b      	lsls	r3, r3, #2
 801ecd2:	4413      	add	r3, r2
 801ecd4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801ecd6:	2300      	movs	r3, #0
 801ecd8:	82fb      	strh	r3, [r7, #22]
 801ecda:	2300      	movs	r3, #0
 801ecdc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801ecde:	8afb      	ldrh	r3, [r7, #22]
 801ece0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ece4:	4293      	cmp	r3, r2
 801ece6:	d007      	beq.n	801ecf8 <put_lfn+0x6c>
 801ece8:	69fb      	ldr	r3, [r7, #28]
 801ecea:	1c5a      	adds	r2, r3, #1
 801ecec:	61fa      	str	r2, [r7, #28]
 801ecee:	005b      	lsls	r3, r3, #1
 801ecf0:	68fa      	ldr	r2, [r7, #12]
 801ecf2:	4413      	add	r3, r2
 801ecf4:	881b      	ldrh	r3, [r3, #0]
 801ecf6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801ecf8:	4a17      	ldr	r2, [pc, #92]	; (801ed58 <put_lfn+0xcc>)
 801ecfa:	69bb      	ldr	r3, [r7, #24]
 801ecfc:	4413      	add	r3, r2
 801ecfe:	781b      	ldrb	r3, [r3, #0]
 801ed00:	461a      	mov	r2, r3
 801ed02:	68bb      	ldr	r3, [r7, #8]
 801ed04:	4413      	add	r3, r2
 801ed06:	8afa      	ldrh	r2, [r7, #22]
 801ed08:	4611      	mov	r1, r2
 801ed0a:	4618      	mov	r0, r3
 801ed0c:	f7fe feeb 	bl	801dae6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801ed10:	8afb      	ldrh	r3, [r7, #22]
 801ed12:	2b00      	cmp	r3, #0
 801ed14:	d102      	bne.n	801ed1c <put_lfn+0x90>
 801ed16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ed1a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801ed1c:	69bb      	ldr	r3, [r7, #24]
 801ed1e:	3301      	adds	r3, #1
 801ed20:	61bb      	str	r3, [r7, #24]
 801ed22:	69bb      	ldr	r3, [r7, #24]
 801ed24:	2b0c      	cmp	r3, #12
 801ed26:	d9da      	bls.n	801ecde <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801ed28:	8afb      	ldrh	r3, [r7, #22]
 801ed2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ed2e:	4293      	cmp	r3, r2
 801ed30:	d006      	beq.n	801ed40 <put_lfn+0xb4>
 801ed32:	69fb      	ldr	r3, [r7, #28]
 801ed34:	005b      	lsls	r3, r3, #1
 801ed36:	68fa      	ldr	r2, [r7, #12]
 801ed38:	4413      	add	r3, r2
 801ed3a:	881b      	ldrh	r3, [r3, #0]
 801ed3c:	2b00      	cmp	r3, #0
 801ed3e:	d103      	bne.n	801ed48 <put_lfn+0xbc>
 801ed40:	79fb      	ldrb	r3, [r7, #7]
 801ed42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ed46:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801ed48:	68bb      	ldr	r3, [r7, #8]
 801ed4a:	79fa      	ldrb	r2, [r7, #7]
 801ed4c:	701a      	strb	r2, [r3, #0]
}
 801ed4e:	bf00      	nop
 801ed50:	3720      	adds	r7, #32
 801ed52:	46bd      	mov	sp, r7
 801ed54:	bd80      	pop	{r7, pc}
 801ed56:	bf00      	nop
 801ed58:	0802db80 	.word	0x0802db80

0801ed5c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801ed5c:	b580      	push	{r7, lr}
 801ed5e:	b08c      	sub	sp, #48	; 0x30
 801ed60:	af00      	add	r7, sp, #0
 801ed62:	60f8      	str	r0, [r7, #12]
 801ed64:	60b9      	str	r1, [r7, #8]
 801ed66:	607a      	str	r2, [r7, #4]
 801ed68:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801ed6a:	220b      	movs	r2, #11
 801ed6c:	68b9      	ldr	r1, [r7, #8]
 801ed6e:	68f8      	ldr	r0, [r7, #12]
 801ed70:	f7fe ff00 	bl	801db74 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801ed74:	683b      	ldr	r3, [r7, #0]
 801ed76:	2b05      	cmp	r3, #5
 801ed78:	d92b      	bls.n	801edd2 <gen_numname+0x76>
		sr = seq;
 801ed7a:	683b      	ldr	r3, [r7, #0]
 801ed7c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801ed7e:	e022      	b.n	801edc6 <gen_numname+0x6a>
			wc = *lfn++;
 801ed80:	687b      	ldr	r3, [r7, #4]
 801ed82:	1c9a      	adds	r2, r3, #2
 801ed84:	607a      	str	r2, [r7, #4]
 801ed86:	881b      	ldrh	r3, [r3, #0]
 801ed88:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801ed8a:	2300      	movs	r3, #0
 801ed8c:	62bb      	str	r3, [r7, #40]	; 0x28
 801ed8e:	e017      	b.n	801edc0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 801ed90:	69fb      	ldr	r3, [r7, #28]
 801ed92:	005a      	lsls	r2, r3, #1
 801ed94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ed96:	f003 0301 	and.w	r3, r3, #1
 801ed9a:	4413      	add	r3, r2
 801ed9c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801ed9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801eda0:	085b      	lsrs	r3, r3, #1
 801eda2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801eda4:	69fb      	ldr	r3, [r7, #28]
 801eda6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801edaa:	2b00      	cmp	r3, #0
 801edac:	d005      	beq.n	801edba <gen_numname+0x5e>
 801edae:	69fb      	ldr	r3, [r7, #28]
 801edb0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 801edb4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 801edb8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801edba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801edbc:	3301      	adds	r3, #1
 801edbe:	62bb      	str	r3, [r7, #40]	; 0x28
 801edc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801edc2:	2b0f      	cmp	r3, #15
 801edc4:	d9e4      	bls.n	801ed90 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801edc6:	687b      	ldr	r3, [r7, #4]
 801edc8:	881b      	ldrh	r3, [r3, #0]
 801edca:	2b00      	cmp	r3, #0
 801edcc:	d1d8      	bne.n	801ed80 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801edce:	69fb      	ldr	r3, [r7, #28]
 801edd0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801edd2:	2307      	movs	r3, #7
 801edd4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801edd6:	683b      	ldr	r3, [r7, #0]
 801edd8:	b2db      	uxtb	r3, r3
 801edda:	f003 030f 	and.w	r3, r3, #15
 801edde:	b2db      	uxtb	r3, r3
 801ede0:	3330      	adds	r3, #48	; 0x30
 801ede2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801ede6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801edea:	2b39      	cmp	r3, #57	; 0x39
 801edec:	d904      	bls.n	801edf8 <gen_numname+0x9c>
 801edee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801edf2:	3307      	adds	r3, #7
 801edf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 801edf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801edfa:	1e5a      	subs	r2, r3, #1
 801edfc:	62ba      	str	r2, [r7, #40]	; 0x28
 801edfe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801ee02:	4413      	add	r3, r2
 801ee04:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801ee08:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801ee0c:	683b      	ldr	r3, [r7, #0]
 801ee0e:	091b      	lsrs	r3, r3, #4
 801ee10:	603b      	str	r3, [r7, #0]
	} while (seq);
 801ee12:	683b      	ldr	r3, [r7, #0]
 801ee14:	2b00      	cmp	r3, #0
 801ee16:	d1de      	bne.n	801edd6 <gen_numname+0x7a>
	ns[i] = '~';
 801ee18:	f107 0214 	add.w	r2, r7, #20
 801ee1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee1e:	4413      	add	r3, r2
 801ee20:	227e      	movs	r2, #126	; 0x7e
 801ee22:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801ee24:	2300      	movs	r3, #0
 801ee26:	627b      	str	r3, [r7, #36]	; 0x24
 801ee28:	e002      	b.n	801ee30 <gen_numname+0xd4>
 801ee2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee2c:	3301      	adds	r3, #1
 801ee2e:	627b      	str	r3, [r7, #36]	; 0x24
 801ee30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ee32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee34:	429a      	cmp	r2, r3
 801ee36:	d205      	bcs.n	801ee44 <gen_numname+0xe8>
 801ee38:	68fa      	ldr	r2, [r7, #12]
 801ee3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee3c:	4413      	add	r3, r2
 801ee3e:	781b      	ldrb	r3, [r3, #0]
 801ee40:	2b20      	cmp	r3, #32
 801ee42:	d1f2      	bne.n	801ee2a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801ee44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee46:	2b07      	cmp	r3, #7
 801ee48:	d808      	bhi.n	801ee5c <gen_numname+0x100>
 801ee4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee4c:	1c5a      	adds	r2, r3, #1
 801ee4e:	62ba      	str	r2, [r7, #40]	; 0x28
 801ee50:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801ee54:	4413      	add	r3, r2
 801ee56:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801ee5a:	e000      	b.n	801ee5e <gen_numname+0x102>
 801ee5c:	2120      	movs	r1, #32
 801ee5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee60:	1c5a      	adds	r2, r3, #1
 801ee62:	627a      	str	r2, [r7, #36]	; 0x24
 801ee64:	68fa      	ldr	r2, [r7, #12]
 801ee66:	4413      	add	r3, r2
 801ee68:	460a      	mov	r2, r1
 801ee6a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801ee6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee6e:	2b07      	cmp	r3, #7
 801ee70:	d9e8      	bls.n	801ee44 <gen_numname+0xe8>
}
 801ee72:	bf00      	nop
 801ee74:	3730      	adds	r7, #48	; 0x30
 801ee76:	46bd      	mov	sp, r7
 801ee78:	bd80      	pop	{r7, pc}

0801ee7a <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801ee7a:	b480      	push	{r7}
 801ee7c:	b085      	sub	sp, #20
 801ee7e:	af00      	add	r7, sp, #0
 801ee80:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801ee82:	2300      	movs	r3, #0
 801ee84:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801ee86:	230b      	movs	r3, #11
 801ee88:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801ee8a:	7bfb      	ldrb	r3, [r7, #15]
 801ee8c:	b2da      	uxtb	r2, r3
 801ee8e:	0852      	lsrs	r2, r2, #1
 801ee90:	01db      	lsls	r3, r3, #7
 801ee92:	4313      	orrs	r3, r2
 801ee94:	b2da      	uxtb	r2, r3
 801ee96:	687b      	ldr	r3, [r7, #4]
 801ee98:	1c59      	adds	r1, r3, #1
 801ee9a:	6079      	str	r1, [r7, #4]
 801ee9c:	781b      	ldrb	r3, [r3, #0]
 801ee9e:	4413      	add	r3, r2
 801eea0:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801eea2:	68bb      	ldr	r3, [r7, #8]
 801eea4:	3b01      	subs	r3, #1
 801eea6:	60bb      	str	r3, [r7, #8]
 801eea8:	68bb      	ldr	r3, [r7, #8]
 801eeaa:	2b00      	cmp	r3, #0
 801eeac:	d1ed      	bne.n	801ee8a <sum_sfn+0x10>
	return sum;
 801eeae:	7bfb      	ldrb	r3, [r7, #15]
}
 801eeb0:	4618      	mov	r0, r3
 801eeb2:	3714      	adds	r7, #20
 801eeb4:	46bd      	mov	sp, r7
 801eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eeba:	4770      	bx	lr

0801eebc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801eebc:	b580      	push	{r7, lr}
 801eebe:	b086      	sub	sp, #24
 801eec0:	af00      	add	r7, sp, #0
 801eec2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801eec4:	687b      	ldr	r3, [r7, #4]
 801eec6:	681b      	ldr	r3, [r3, #0]
 801eec8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801eeca:	2100      	movs	r1, #0
 801eecc:	6878      	ldr	r0, [r7, #4]
 801eece:	f7ff fc88 	bl	801e7e2 <dir_sdi>
 801eed2:	4603      	mov	r3, r0
 801eed4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801eed6:	7dfb      	ldrb	r3, [r7, #23]
 801eed8:	2b00      	cmp	r3, #0
 801eeda:	d001      	beq.n	801eee0 <dir_find+0x24>
 801eedc:	7dfb      	ldrb	r3, [r7, #23]
 801eede:	e0a9      	b.n	801f034 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801eee0:	23ff      	movs	r3, #255	; 0xff
 801eee2:	753b      	strb	r3, [r7, #20]
 801eee4:	7d3b      	ldrb	r3, [r7, #20]
 801eee6:	757b      	strb	r3, [r7, #21]
 801eee8:	687b      	ldr	r3, [r7, #4]
 801eeea:	f04f 32ff 	mov.w	r2, #4294967295
 801eeee:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	69db      	ldr	r3, [r3, #28]
 801eef4:	4619      	mov	r1, r3
 801eef6:	6938      	ldr	r0, [r7, #16]
 801eef8:	f7ff f89a 	bl	801e030 <move_window>
 801eefc:	4603      	mov	r3, r0
 801eefe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801ef00:	7dfb      	ldrb	r3, [r7, #23]
 801ef02:	2b00      	cmp	r3, #0
 801ef04:	f040 8090 	bne.w	801f028 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801ef08:	687b      	ldr	r3, [r7, #4]
 801ef0a:	6a1b      	ldr	r3, [r3, #32]
 801ef0c:	781b      	ldrb	r3, [r3, #0]
 801ef0e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801ef10:	7dbb      	ldrb	r3, [r7, #22]
 801ef12:	2b00      	cmp	r3, #0
 801ef14:	d102      	bne.n	801ef1c <dir_find+0x60>
 801ef16:	2304      	movs	r3, #4
 801ef18:	75fb      	strb	r3, [r7, #23]
 801ef1a:	e08a      	b.n	801f032 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801ef1c:	687b      	ldr	r3, [r7, #4]
 801ef1e:	6a1b      	ldr	r3, [r3, #32]
 801ef20:	330b      	adds	r3, #11
 801ef22:	781b      	ldrb	r3, [r3, #0]
 801ef24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ef28:	73fb      	strb	r3, [r7, #15]
 801ef2a:	687b      	ldr	r3, [r7, #4]
 801ef2c:	7bfa      	ldrb	r2, [r7, #15]
 801ef2e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801ef30:	7dbb      	ldrb	r3, [r7, #22]
 801ef32:	2be5      	cmp	r3, #229	; 0xe5
 801ef34:	d007      	beq.n	801ef46 <dir_find+0x8a>
 801ef36:	7bfb      	ldrb	r3, [r7, #15]
 801ef38:	f003 0308 	and.w	r3, r3, #8
 801ef3c:	2b00      	cmp	r3, #0
 801ef3e:	d009      	beq.n	801ef54 <dir_find+0x98>
 801ef40:	7bfb      	ldrb	r3, [r7, #15]
 801ef42:	2b0f      	cmp	r3, #15
 801ef44:	d006      	beq.n	801ef54 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801ef46:	23ff      	movs	r3, #255	; 0xff
 801ef48:	757b      	strb	r3, [r7, #21]
 801ef4a:	687b      	ldr	r3, [r7, #4]
 801ef4c:	f04f 32ff 	mov.w	r2, #4294967295
 801ef50:	631a      	str	r2, [r3, #48]	; 0x30
 801ef52:	e05e      	b.n	801f012 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801ef54:	7bfb      	ldrb	r3, [r7, #15]
 801ef56:	2b0f      	cmp	r3, #15
 801ef58:	d136      	bne.n	801efc8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801ef5a:	687b      	ldr	r3, [r7, #4]
 801ef5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801ef60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ef64:	2b00      	cmp	r3, #0
 801ef66:	d154      	bne.n	801f012 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801ef68:	7dbb      	ldrb	r3, [r7, #22]
 801ef6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ef6e:	2b00      	cmp	r3, #0
 801ef70:	d00d      	beq.n	801ef8e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801ef72:	687b      	ldr	r3, [r7, #4]
 801ef74:	6a1b      	ldr	r3, [r3, #32]
 801ef76:	7b5b      	ldrb	r3, [r3, #13]
 801ef78:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801ef7a:	7dbb      	ldrb	r3, [r7, #22]
 801ef7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801ef80:	75bb      	strb	r3, [r7, #22]
 801ef82:	7dbb      	ldrb	r3, [r7, #22]
 801ef84:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801ef86:	687b      	ldr	r3, [r7, #4]
 801ef88:	695a      	ldr	r2, [r3, #20]
 801ef8a:	687b      	ldr	r3, [r7, #4]
 801ef8c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801ef8e:	7dba      	ldrb	r2, [r7, #22]
 801ef90:	7d7b      	ldrb	r3, [r7, #21]
 801ef92:	429a      	cmp	r2, r3
 801ef94:	d115      	bne.n	801efc2 <dir_find+0x106>
 801ef96:	687b      	ldr	r3, [r7, #4]
 801ef98:	6a1b      	ldr	r3, [r3, #32]
 801ef9a:	330d      	adds	r3, #13
 801ef9c:	781b      	ldrb	r3, [r3, #0]
 801ef9e:	7d3a      	ldrb	r2, [r7, #20]
 801efa0:	429a      	cmp	r2, r3
 801efa2:	d10e      	bne.n	801efc2 <dir_find+0x106>
 801efa4:	693b      	ldr	r3, [r7, #16]
 801efa6:	691a      	ldr	r2, [r3, #16]
 801efa8:	687b      	ldr	r3, [r7, #4]
 801efaa:	6a1b      	ldr	r3, [r3, #32]
 801efac:	4619      	mov	r1, r3
 801efae:	4610      	mov	r0, r2
 801efb0:	f7ff fdfc 	bl	801ebac <cmp_lfn>
 801efb4:	4603      	mov	r3, r0
 801efb6:	2b00      	cmp	r3, #0
 801efb8:	d003      	beq.n	801efc2 <dir_find+0x106>
 801efba:	7d7b      	ldrb	r3, [r7, #21]
 801efbc:	3b01      	subs	r3, #1
 801efbe:	b2db      	uxtb	r3, r3
 801efc0:	e000      	b.n	801efc4 <dir_find+0x108>
 801efc2:	23ff      	movs	r3, #255	; 0xff
 801efc4:	757b      	strb	r3, [r7, #21]
 801efc6:	e024      	b.n	801f012 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801efc8:	7d7b      	ldrb	r3, [r7, #21]
 801efca:	2b00      	cmp	r3, #0
 801efcc:	d109      	bne.n	801efe2 <dir_find+0x126>
 801efce:	687b      	ldr	r3, [r7, #4]
 801efd0:	6a1b      	ldr	r3, [r3, #32]
 801efd2:	4618      	mov	r0, r3
 801efd4:	f7ff ff51 	bl	801ee7a <sum_sfn>
 801efd8:	4603      	mov	r3, r0
 801efda:	461a      	mov	r2, r3
 801efdc:	7d3b      	ldrb	r3, [r7, #20]
 801efde:	4293      	cmp	r3, r2
 801efe0:	d024      	beq.n	801f02c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801efe2:	687b      	ldr	r3, [r7, #4]
 801efe4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801efe8:	f003 0301 	and.w	r3, r3, #1
 801efec:	2b00      	cmp	r3, #0
 801efee:	d10a      	bne.n	801f006 <dir_find+0x14a>
 801eff0:	687b      	ldr	r3, [r7, #4]
 801eff2:	6a18      	ldr	r0, [r3, #32]
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	3324      	adds	r3, #36	; 0x24
 801eff8:	220b      	movs	r2, #11
 801effa:	4619      	mov	r1, r3
 801effc:	f7fe fdf5 	bl	801dbea <mem_cmp>
 801f000:	4603      	mov	r3, r0
 801f002:	2b00      	cmp	r3, #0
 801f004:	d014      	beq.n	801f030 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801f006:	23ff      	movs	r3, #255	; 0xff
 801f008:	757b      	strb	r3, [r7, #21]
 801f00a:	687b      	ldr	r3, [r7, #4]
 801f00c:	f04f 32ff 	mov.w	r2, #4294967295
 801f010:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801f012:	2100      	movs	r1, #0
 801f014:	6878      	ldr	r0, [r7, #4]
 801f016:	f7ff fc6d 	bl	801e8f4 <dir_next>
 801f01a:	4603      	mov	r3, r0
 801f01c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801f01e:	7dfb      	ldrb	r3, [r7, #23]
 801f020:	2b00      	cmp	r3, #0
 801f022:	f43f af65 	beq.w	801eef0 <dir_find+0x34>
 801f026:	e004      	b.n	801f032 <dir_find+0x176>
		if (res != FR_OK) break;
 801f028:	bf00      	nop
 801f02a:	e002      	b.n	801f032 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801f02c:	bf00      	nop
 801f02e:	e000      	b.n	801f032 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801f030:	bf00      	nop

	return res;
 801f032:	7dfb      	ldrb	r3, [r7, #23]
}
 801f034:	4618      	mov	r0, r3
 801f036:	3718      	adds	r7, #24
 801f038:	46bd      	mov	sp, r7
 801f03a:	bd80      	pop	{r7, pc}

0801f03c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801f03c:	b580      	push	{r7, lr}
 801f03e:	b08c      	sub	sp, #48	; 0x30
 801f040:	af00      	add	r7, sp, #0
 801f042:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801f044:	687b      	ldr	r3, [r7, #4]
 801f046:	681b      	ldr	r3, [r3, #0]
 801f048:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801f04a:	687b      	ldr	r3, [r7, #4]
 801f04c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801f050:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801f054:	2b00      	cmp	r3, #0
 801f056:	d001      	beq.n	801f05c <dir_register+0x20>
 801f058:	2306      	movs	r3, #6
 801f05a:	e0e0      	b.n	801f21e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801f05c:	2300      	movs	r3, #0
 801f05e:	627b      	str	r3, [r7, #36]	; 0x24
 801f060:	e002      	b.n	801f068 <dir_register+0x2c>
 801f062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f064:	3301      	adds	r3, #1
 801f066:	627b      	str	r3, [r7, #36]	; 0x24
 801f068:	69fb      	ldr	r3, [r7, #28]
 801f06a:	691a      	ldr	r2, [r3, #16]
 801f06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f06e:	005b      	lsls	r3, r3, #1
 801f070:	4413      	add	r3, r2
 801f072:	881b      	ldrh	r3, [r3, #0]
 801f074:	2b00      	cmp	r3, #0
 801f076:	d1f4      	bne.n	801f062 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801f078:	687b      	ldr	r3, [r7, #4]
 801f07a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801f07e:	f107 030c 	add.w	r3, r7, #12
 801f082:	220c      	movs	r2, #12
 801f084:	4618      	mov	r0, r3
 801f086:	f7fe fd75 	bl	801db74 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801f08a:	7dfb      	ldrb	r3, [r7, #23]
 801f08c:	f003 0301 	and.w	r3, r3, #1
 801f090:	2b00      	cmp	r3, #0
 801f092:	d032      	beq.n	801f0fa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801f094:	687b      	ldr	r3, [r7, #4]
 801f096:	2240      	movs	r2, #64	; 0x40
 801f098:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 801f09c:	2301      	movs	r3, #1
 801f09e:	62bb      	str	r3, [r7, #40]	; 0x28
 801f0a0:	e016      	b.n	801f0d0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801f0a2:	687b      	ldr	r3, [r7, #4]
 801f0a4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 801f0a8:	69fb      	ldr	r3, [r7, #28]
 801f0aa:	691a      	ldr	r2, [r3, #16]
 801f0ac:	f107 010c 	add.w	r1, r7, #12
 801f0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f0b2:	f7ff fe53 	bl	801ed5c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801f0b6:	6878      	ldr	r0, [r7, #4]
 801f0b8:	f7ff ff00 	bl	801eebc <dir_find>
 801f0bc:	4603      	mov	r3, r0
 801f0be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801f0c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f0c6:	2b00      	cmp	r3, #0
 801f0c8:	d106      	bne.n	801f0d8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801f0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f0cc:	3301      	adds	r3, #1
 801f0ce:	62bb      	str	r3, [r7, #40]	; 0x28
 801f0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f0d2:	2b63      	cmp	r3, #99	; 0x63
 801f0d4:	d9e5      	bls.n	801f0a2 <dir_register+0x66>
 801f0d6:	e000      	b.n	801f0da <dir_register+0x9e>
			if (res != FR_OK) break;
 801f0d8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801f0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f0dc:	2b64      	cmp	r3, #100	; 0x64
 801f0de:	d101      	bne.n	801f0e4 <dir_register+0xa8>
 801f0e0:	2307      	movs	r3, #7
 801f0e2:	e09c      	b.n	801f21e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801f0e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f0e8:	2b04      	cmp	r3, #4
 801f0ea:	d002      	beq.n	801f0f2 <dir_register+0xb6>
 801f0ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f0f0:	e095      	b.n	801f21e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801f0f2:	7dfa      	ldrb	r2, [r7, #23]
 801f0f4:	687b      	ldr	r3, [r7, #4]
 801f0f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801f0fa:	7dfb      	ldrb	r3, [r7, #23]
 801f0fc:	f003 0302 	and.w	r3, r3, #2
 801f100:	2b00      	cmp	r3, #0
 801f102:	d007      	beq.n	801f114 <dir_register+0xd8>
 801f104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f106:	330c      	adds	r3, #12
 801f108:	4a47      	ldr	r2, [pc, #284]	; (801f228 <dir_register+0x1ec>)
 801f10a:	fba2 2303 	umull	r2, r3, r2, r3
 801f10e:	089b      	lsrs	r3, r3, #2
 801f110:	3301      	adds	r3, #1
 801f112:	e000      	b.n	801f116 <dir_register+0xda>
 801f114:	2301      	movs	r3, #1
 801f116:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801f118:	6a39      	ldr	r1, [r7, #32]
 801f11a:	6878      	ldr	r0, [r7, #4]
 801f11c:	f7ff fcc0 	bl	801eaa0 <dir_alloc>
 801f120:	4603      	mov	r3, r0
 801f122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801f126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f12a:	2b00      	cmp	r3, #0
 801f12c:	d148      	bne.n	801f1c0 <dir_register+0x184>
 801f12e:	6a3b      	ldr	r3, [r7, #32]
 801f130:	3b01      	subs	r3, #1
 801f132:	623b      	str	r3, [r7, #32]
 801f134:	6a3b      	ldr	r3, [r7, #32]
 801f136:	2b00      	cmp	r3, #0
 801f138:	d042      	beq.n	801f1c0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801f13a:	687b      	ldr	r3, [r7, #4]
 801f13c:	695a      	ldr	r2, [r3, #20]
 801f13e:	6a3b      	ldr	r3, [r7, #32]
 801f140:	015b      	lsls	r3, r3, #5
 801f142:	1ad3      	subs	r3, r2, r3
 801f144:	4619      	mov	r1, r3
 801f146:	6878      	ldr	r0, [r7, #4]
 801f148:	f7ff fb4b 	bl	801e7e2 <dir_sdi>
 801f14c:	4603      	mov	r3, r0
 801f14e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801f152:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f156:	2b00      	cmp	r3, #0
 801f158:	d132      	bne.n	801f1c0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801f15a:	687b      	ldr	r3, [r7, #4]
 801f15c:	3324      	adds	r3, #36	; 0x24
 801f15e:	4618      	mov	r0, r3
 801f160:	f7ff fe8b 	bl	801ee7a <sum_sfn>
 801f164:	4603      	mov	r3, r0
 801f166:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801f168:	687b      	ldr	r3, [r7, #4]
 801f16a:	69db      	ldr	r3, [r3, #28]
 801f16c:	4619      	mov	r1, r3
 801f16e:	69f8      	ldr	r0, [r7, #28]
 801f170:	f7fe ff5e 	bl	801e030 <move_window>
 801f174:	4603      	mov	r3, r0
 801f176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801f17a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f17e:	2b00      	cmp	r3, #0
 801f180:	d11d      	bne.n	801f1be <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801f182:	69fb      	ldr	r3, [r7, #28]
 801f184:	6918      	ldr	r0, [r3, #16]
 801f186:	687b      	ldr	r3, [r7, #4]
 801f188:	6a19      	ldr	r1, [r3, #32]
 801f18a:	6a3b      	ldr	r3, [r7, #32]
 801f18c:	b2da      	uxtb	r2, r3
 801f18e:	7efb      	ldrb	r3, [r7, #27]
 801f190:	f7ff fd7c 	bl	801ec8c <put_lfn>
				fs->wflag = 1;
 801f194:	69fb      	ldr	r3, [r7, #28]
 801f196:	2201      	movs	r2, #1
 801f198:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801f19a:	2100      	movs	r1, #0
 801f19c:	6878      	ldr	r0, [r7, #4]
 801f19e:	f7ff fba9 	bl	801e8f4 <dir_next>
 801f1a2:	4603      	mov	r3, r0
 801f1a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 801f1a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	d107      	bne.n	801f1c0 <dir_register+0x184>
 801f1b0:	6a3b      	ldr	r3, [r7, #32]
 801f1b2:	3b01      	subs	r3, #1
 801f1b4:	623b      	str	r3, [r7, #32]
 801f1b6:	6a3b      	ldr	r3, [r7, #32]
 801f1b8:	2b00      	cmp	r3, #0
 801f1ba:	d1d5      	bne.n	801f168 <dir_register+0x12c>
 801f1bc:	e000      	b.n	801f1c0 <dir_register+0x184>
				if (res != FR_OK) break;
 801f1be:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801f1c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f1c4:	2b00      	cmp	r3, #0
 801f1c6:	d128      	bne.n	801f21a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801f1c8:	687b      	ldr	r3, [r7, #4]
 801f1ca:	69db      	ldr	r3, [r3, #28]
 801f1cc:	4619      	mov	r1, r3
 801f1ce:	69f8      	ldr	r0, [r7, #28]
 801f1d0:	f7fe ff2e 	bl	801e030 <move_window>
 801f1d4:	4603      	mov	r3, r0
 801f1d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801f1da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f1de:	2b00      	cmp	r3, #0
 801f1e0:	d11b      	bne.n	801f21a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801f1e2:	687b      	ldr	r3, [r7, #4]
 801f1e4:	6a1b      	ldr	r3, [r3, #32]
 801f1e6:	2220      	movs	r2, #32
 801f1e8:	2100      	movs	r1, #0
 801f1ea:	4618      	mov	r0, r3
 801f1ec:	f7fe fce3 	bl	801dbb6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801f1f0:	687b      	ldr	r3, [r7, #4]
 801f1f2:	6a18      	ldr	r0, [r3, #32]
 801f1f4:	687b      	ldr	r3, [r7, #4]
 801f1f6:	3324      	adds	r3, #36	; 0x24
 801f1f8:	220b      	movs	r2, #11
 801f1fa:	4619      	mov	r1, r3
 801f1fc:	f7fe fcba 	bl	801db74 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801f206:	687b      	ldr	r3, [r7, #4]
 801f208:	6a1b      	ldr	r3, [r3, #32]
 801f20a:	330c      	adds	r3, #12
 801f20c:	f002 0218 	and.w	r2, r2, #24
 801f210:	b2d2      	uxtb	r2, r2
 801f212:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801f214:	69fb      	ldr	r3, [r7, #28]
 801f216:	2201      	movs	r2, #1
 801f218:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801f21a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801f21e:	4618      	mov	r0, r3
 801f220:	3730      	adds	r7, #48	; 0x30
 801f222:	46bd      	mov	sp, r7
 801f224:	bd80      	pop	{r7, pc}
 801f226:	bf00      	nop
 801f228:	4ec4ec4f 	.word	0x4ec4ec4f

0801f22c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801f22c:	b580      	push	{r7, lr}
 801f22e:	b08a      	sub	sp, #40	; 0x28
 801f230:	af00      	add	r7, sp, #0
 801f232:	6078      	str	r0, [r7, #4]
 801f234:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801f236:	683b      	ldr	r3, [r7, #0]
 801f238:	681b      	ldr	r3, [r3, #0]
 801f23a:	613b      	str	r3, [r7, #16]
 801f23c:	687b      	ldr	r3, [r7, #4]
 801f23e:	681b      	ldr	r3, [r3, #0]
 801f240:	691b      	ldr	r3, [r3, #16]
 801f242:	60fb      	str	r3, [r7, #12]
 801f244:	2300      	movs	r3, #0
 801f246:	617b      	str	r3, [r7, #20]
 801f248:	697b      	ldr	r3, [r7, #20]
 801f24a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801f24c:	69bb      	ldr	r3, [r7, #24]
 801f24e:	1c5a      	adds	r2, r3, #1
 801f250:	61ba      	str	r2, [r7, #24]
 801f252:	693a      	ldr	r2, [r7, #16]
 801f254:	4413      	add	r3, r2
 801f256:	781b      	ldrb	r3, [r3, #0]
 801f258:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801f25a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f25c:	2b1f      	cmp	r3, #31
 801f25e:	d940      	bls.n	801f2e2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801f260:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f262:	2b2f      	cmp	r3, #47	; 0x2f
 801f264:	d006      	beq.n	801f274 <create_name+0x48>
 801f266:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f268:	2b5c      	cmp	r3, #92	; 0x5c
 801f26a:	d110      	bne.n	801f28e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801f26c:	e002      	b.n	801f274 <create_name+0x48>
 801f26e:	69bb      	ldr	r3, [r7, #24]
 801f270:	3301      	adds	r3, #1
 801f272:	61bb      	str	r3, [r7, #24]
 801f274:	693a      	ldr	r2, [r7, #16]
 801f276:	69bb      	ldr	r3, [r7, #24]
 801f278:	4413      	add	r3, r2
 801f27a:	781b      	ldrb	r3, [r3, #0]
 801f27c:	2b2f      	cmp	r3, #47	; 0x2f
 801f27e:	d0f6      	beq.n	801f26e <create_name+0x42>
 801f280:	693a      	ldr	r2, [r7, #16]
 801f282:	69bb      	ldr	r3, [r7, #24]
 801f284:	4413      	add	r3, r2
 801f286:	781b      	ldrb	r3, [r3, #0]
 801f288:	2b5c      	cmp	r3, #92	; 0x5c
 801f28a:	d0f0      	beq.n	801f26e <create_name+0x42>
			break;
 801f28c:	e02a      	b.n	801f2e4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801f28e:	697b      	ldr	r3, [r7, #20]
 801f290:	2bfe      	cmp	r3, #254	; 0xfe
 801f292:	d901      	bls.n	801f298 <create_name+0x6c>
 801f294:	2306      	movs	r3, #6
 801f296:	e177      	b.n	801f588 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 801f298:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f29a:	b2db      	uxtb	r3, r3
 801f29c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801f29e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f2a0:	2101      	movs	r1, #1
 801f2a2:	4618      	mov	r0, r3
 801f2a4:	f001 fa80 	bl	80207a8 <ff_convert>
 801f2a8:	4603      	mov	r3, r0
 801f2aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801f2ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f2ae:	2b00      	cmp	r3, #0
 801f2b0:	d101      	bne.n	801f2b6 <create_name+0x8a>
 801f2b2:	2306      	movs	r3, #6
 801f2b4:	e168      	b.n	801f588 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801f2b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f2b8:	2b7f      	cmp	r3, #127	; 0x7f
 801f2ba:	d809      	bhi.n	801f2d0 <create_name+0xa4>
 801f2bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f2be:	4619      	mov	r1, r3
 801f2c0:	48b3      	ldr	r0, [pc, #716]	; (801f590 <create_name+0x364>)
 801f2c2:	f7fe fcb9 	bl	801dc38 <chk_chr>
 801f2c6:	4603      	mov	r3, r0
 801f2c8:	2b00      	cmp	r3, #0
 801f2ca:	d001      	beq.n	801f2d0 <create_name+0xa4>
 801f2cc:	2306      	movs	r3, #6
 801f2ce:	e15b      	b.n	801f588 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 801f2d0:	697b      	ldr	r3, [r7, #20]
 801f2d2:	1c5a      	adds	r2, r3, #1
 801f2d4:	617a      	str	r2, [r7, #20]
 801f2d6:	005b      	lsls	r3, r3, #1
 801f2d8:	68fa      	ldr	r2, [r7, #12]
 801f2da:	4413      	add	r3, r2
 801f2dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801f2de:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801f2e0:	e7b4      	b.n	801f24c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801f2e2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801f2e4:	693a      	ldr	r2, [r7, #16]
 801f2e6:	69bb      	ldr	r3, [r7, #24]
 801f2e8:	441a      	add	r2, r3
 801f2ea:	683b      	ldr	r3, [r7, #0]
 801f2ec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801f2ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f2f0:	2b1f      	cmp	r3, #31
 801f2f2:	d801      	bhi.n	801f2f8 <create_name+0xcc>
 801f2f4:	2304      	movs	r3, #4
 801f2f6:	e000      	b.n	801f2fa <create_name+0xce>
 801f2f8:	2300      	movs	r3, #0
 801f2fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801f2fe:	e011      	b.n	801f324 <create_name+0xf8>
		w = lfn[di - 1];
 801f300:	697b      	ldr	r3, [r7, #20]
 801f302:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801f306:	3b01      	subs	r3, #1
 801f308:	005b      	lsls	r3, r3, #1
 801f30a:	68fa      	ldr	r2, [r7, #12]
 801f30c:	4413      	add	r3, r2
 801f30e:	881b      	ldrh	r3, [r3, #0]
 801f310:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801f312:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f314:	2b20      	cmp	r3, #32
 801f316:	d002      	beq.n	801f31e <create_name+0xf2>
 801f318:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f31a:	2b2e      	cmp	r3, #46	; 0x2e
 801f31c:	d106      	bne.n	801f32c <create_name+0x100>
		di--;
 801f31e:	697b      	ldr	r3, [r7, #20]
 801f320:	3b01      	subs	r3, #1
 801f322:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801f324:	697b      	ldr	r3, [r7, #20]
 801f326:	2b00      	cmp	r3, #0
 801f328:	d1ea      	bne.n	801f300 <create_name+0xd4>
 801f32a:	e000      	b.n	801f32e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801f32c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801f32e:	697b      	ldr	r3, [r7, #20]
 801f330:	005b      	lsls	r3, r3, #1
 801f332:	68fa      	ldr	r2, [r7, #12]
 801f334:	4413      	add	r3, r2
 801f336:	2200      	movs	r2, #0
 801f338:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801f33a:	697b      	ldr	r3, [r7, #20]
 801f33c:	2b00      	cmp	r3, #0
 801f33e:	d101      	bne.n	801f344 <create_name+0x118>
 801f340:	2306      	movs	r3, #6
 801f342:	e121      	b.n	801f588 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801f344:	687b      	ldr	r3, [r7, #4]
 801f346:	3324      	adds	r3, #36	; 0x24
 801f348:	220b      	movs	r2, #11
 801f34a:	2120      	movs	r1, #32
 801f34c:	4618      	mov	r0, r3
 801f34e:	f7fe fc32 	bl	801dbb6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801f352:	2300      	movs	r3, #0
 801f354:	61bb      	str	r3, [r7, #24]
 801f356:	e002      	b.n	801f35e <create_name+0x132>
 801f358:	69bb      	ldr	r3, [r7, #24]
 801f35a:	3301      	adds	r3, #1
 801f35c:	61bb      	str	r3, [r7, #24]
 801f35e:	69bb      	ldr	r3, [r7, #24]
 801f360:	005b      	lsls	r3, r3, #1
 801f362:	68fa      	ldr	r2, [r7, #12]
 801f364:	4413      	add	r3, r2
 801f366:	881b      	ldrh	r3, [r3, #0]
 801f368:	2b20      	cmp	r3, #32
 801f36a:	d0f5      	beq.n	801f358 <create_name+0x12c>
 801f36c:	69bb      	ldr	r3, [r7, #24]
 801f36e:	005b      	lsls	r3, r3, #1
 801f370:	68fa      	ldr	r2, [r7, #12]
 801f372:	4413      	add	r3, r2
 801f374:	881b      	ldrh	r3, [r3, #0]
 801f376:	2b2e      	cmp	r3, #46	; 0x2e
 801f378:	d0ee      	beq.n	801f358 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801f37a:	69bb      	ldr	r3, [r7, #24]
 801f37c:	2b00      	cmp	r3, #0
 801f37e:	d009      	beq.n	801f394 <create_name+0x168>
 801f380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f384:	f043 0303 	orr.w	r3, r3, #3
 801f388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801f38c:	e002      	b.n	801f394 <create_name+0x168>
 801f38e:	697b      	ldr	r3, [r7, #20]
 801f390:	3b01      	subs	r3, #1
 801f392:	617b      	str	r3, [r7, #20]
 801f394:	697b      	ldr	r3, [r7, #20]
 801f396:	2b00      	cmp	r3, #0
 801f398:	d009      	beq.n	801f3ae <create_name+0x182>
 801f39a:	697b      	ldr	r3, [r7, #20]
 801f39c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801f3a0:	3b01      	subs	r3, #1
 801f3a2:	005b      	lsls	r3, r3, #1
 801f3a4:	68fa      	ldr	r2, [r7, #12]
 801f3a6:	4413      	add	r3, r2
 801f3a8:	881b      	ldrh	r3, [r3, #0]
 801f3aa:	2b2e      	cmp	r3, #46	; 0x2e
 801f3ac:	d1ef      	bne.n	801f38e <create_name+0x162>

	i = b = 0; ni = 8;
 801f3ae:	2300      	movs	r3, #0
 801f3b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801f3b4:	2300      	movs	r3, #0
 801f3b6:	623b      	str	r3, [r7, #32]
 801f3b8:	2308      	movs	r3, #8
 801f3ba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801f3bc:	69bb      	ldr	r3, [r7, #24]
 801f3be:	1c5a      	adds	r2, r3, #1
 801f3c0:	61ba      	str	r2, [r7, #24]
 801f3c2:	005b      	lsls	r3, r3, #1
 801f3c4:	68fa      	ldr	r2, [r7, #12]
 801f3c6:	4413      	add	r3, r2
 801f3c8:	881b      	ldrh	r3, [r3, #0]
 801f3ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801f3cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	f000 8090 	beq.w	801f4f4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801f3d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f3d6:	2b20      	cmp	r3, #32
 801f3d8:	d006      	beq.n	801f3e8 <create_name+0x1bc>
 801f3da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f3dc:	2b2e      	cmp	r3, #46	; 0x2e
 801f3de:	d10a      	bne.n	801f3f6 <create_name+0x1ca>
 801f3e0:	69ba      	ldr	r2, [r7, #24]
 801f3e2:	697b      	ldr	r3, [r7, #20]
 801f3e4:	429a      	cmp	r2, r3
 801f3e6:	d006      	beq.n	801f3f6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801f3e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f3ec:	f043 0303 	orr.w	r3, r3, #3
 801f3f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801f3f4:	e07d      	b.n	801f4f2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801f3f6:	6a3a      	ldr	r2, [r7, #32]
 801f3f8:	69fb      	ldr	r3, [r7, #28]
 801f3fa:	429a      	cmp	r2, r3
 801f3fc:	d203      	bcs.n	801f406 <create_name+0x1da>
 801f3fe:	69ba      	ldr	r2, [r7, #24]
 801f400:	697b      	ldr	r3, [r7, #20]
 801f402:	429a      	cmp	r2, r3
 801f404:	d123      	bne.n	801f44e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801f406:	69fb      	ldr	r3, [r7, #28]
 801f408:	2b0b      	cmp	r3, #11
 801f40a:	d106      	bne.n	801f41a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801f40c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f410:	f043 0303 	orr.w	r3, r3, #3
 801f414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801f418:	e06f      	b.n	801f4fa <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801f41a:	69ba      	ldr	r2, [r7, #24]
 801f41c:	697b      	ldr	r3, [r7, #20]
 801f41e:	429a      	cmp	r2, r3
 801f420:	d005      	beq.n	801f42e <create_name+0x202>
 801f422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f426:	f043 0303 	orr.w	r3, r3, #3
 801f42a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801f42e:	69ba      	ldr	r2, [r7, #24]
 801f430:	697b      	ldr	r3, [r7, #20]
 801f432:	429a      	cmp	r2, r3
 801f434:	d860      	bhi.n	801f4f8 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801f436:	697b      	ldr	r3, [r7, #20]
 801f438:	61bb      	str	r3, [r7, #24]
 801f43a:	2308      	movs	r3, #8
 801f43c:	623b      	str	r3, [r7, #32]
 801f43e:	230b      	movs	r3, #11
 801f440:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801f442:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801f446:	009b      	lsls	r3, r3, #2
 801f448:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801f44c:	e051      	b.n	801f4f2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801f44e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f450:	2b7f      	cmp	r3, #127	; 0x7f
 801f452:	d914      	bls.n	801f47e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801f454:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f456:	2100      	movs	r1, #0
 801f458:	4618      	mov	r0, r3
 801f45a:	f001 f9a5 	bl	80207a8 <ff_convert>
 801f45e:	4603      	mov	r3, r0
 801f460:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801f462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f464:	2b00      	cmp	r3, #0
 801f466:	d004      	beq.n	801f472 <create_name+0x246>
 801f468:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f46a:	3b80      	subs	r3, #128	; 0x80
 801f46c:	4a49      	ldr	r2, [pc, #292]	; (801f594 <create_name+0x368>)
 801f46e:	5cd3      	ldrb	r3, [r2, r3]
 801f470:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801f472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f476:	f043 0302 	orr.w	r3, r3, #2
 801f47a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801f47e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f480:	2b00      	cmp	r3, #0
 801f482:	d007      	beq.n	801f494 <create_name+0x268>
 801f484:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f486:	4619      	mov	r1, r3
 801f488:	4843      	ldr	r0, [pc, #268]	; (801f598 <create_name+0x36c>)
 801f48a:	f7fe fbd5 	bl	801dc38 <chk_chr>
 801f48e:	4603      	mov	r3, r0
 801f490:	2b00      	cmp	r3, #0
 801f492:	d008      	beq.n	801f4a6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801f494:	235f      	movs	r3, #95	; 0x5f
 801f496:	84bb      	strh	r3, [r7, #36]	; 0x24
 801f498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f49c:	f043 0303 	orr.w	r3, r3, #3
 801f4a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801f4a4:	e01b      	b.n	801f4de <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801f4a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f4a8:	2b40      	cmp	r3, #64	; 0x40
 801f4aa:	d909      	bls.n	801f4c0 <create_name+0x294>
 801f4ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f4ae:	2b5a      	cmp	r3, #90	; 0x5a
 801f4b0:	d806      	bhi.n	801f4c0 <create_name+0x294>
					b |= 2;
 801f4b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801f4b6:	f043 0302 	orr.w	r3, r3, #2
 801f4ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801f4be:	e00e      	b.n	801f4de <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801f4c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f4c2:	2b60      	cmp	r3, #96	; 0x60
 801f4c4:	d90b      	bls.n	801f4de <create_name+0x2b2>
 801f4c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f4c8:	2b7a      	cmp	r3, #122	; 0x7a
 801f4ca:	d808      	bhi.n	801f4de <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801f4cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801f4d0:	f043 0301 	orr.w	r3, r3, #1
 801f4d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801f4d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f4da:	3b20      	subs	r3, #32
 801f4dc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801f4de:	6a3b      	ldr	r3, [r7, #32]
 801f4e0:	1c5a      	adds	r2, r3, #1
 801f4e2:	623a      	str	r2, [r7, #32]
 801f4e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801f4e6:	b2d1      	uxtb	r1, r2
 801f4e8:	687a      	ldr	r2, [r7, #4]
 801f4ea:	4413      	add	r3, r2
 801f4ec:	460a      	mov	r2, r1
 801f4ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801f4f2:	e763      	b.n	801f3bc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801f4f4:	bf00      	nop
 801f4f6:	e000      	b.n	801f4fa <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 801f4f8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801f4fa:	687b      	ldr	r3, [r7, #4]
 801f4fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801f500:	2be5      	cmp	r3, #229	; 0xe5
 801f502:	d103      	bne.n	801f50c <create_name+0x2e0>
 801f504:	687b      	ldr	r3, [r7, #4]
 801f506:	2205      	movs	r2, #5
 801f508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 801f50c:	69fb      	ldr	r3, [r7, #28]
 801f50e:	2b08      	cmp	r3, #8
 801f510:	d104      	bne.n	801f51c <create_name+0x2f0>
 801f512:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801f516:	009b      	lsls	r3, r3, #2
 801f518:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801f51c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801f520:	f003 030c 	and.w	r3, r3, #12
 801f524:	2b0c      	cmp	r3, #12
 801f526:	d005      	beq.n	801f534 <create_name+0x308>
 801f528:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801f52c:	f003 0303 	and.w	r3, r3, #3
 801f530:	2b03      	cmp	r3, #3
 801f532:	d105      	bne.n	801f540 <create_name+0x314>
 801f534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f538:	f043 0302 	orr.w	r3, r3, #2
 801f53c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801f540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f544:	f003 0302 	and.w	r3, r3, #2
 801f548:	2b00      	cmp	r3, #0
 801f54a:	d117      	bne.n	801f57c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801f54c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801f550:	f003 0303 	and.w	r3, r3, #3
 801f554:	2b01      	cmp	r3, #1
 801f556:	d105      	bne.n	801f564 <create_name+0x338>
 801f558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f55c:	f043 0310 	orr.w	r3, r3, #16
 801f560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801f564:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801f568:	f003 030c 	and.w	r3, r3, #12
 801f56c:	2b04      	cmp	r3, #4
 801f56e:	d105      	bne.n	801f57c <create_name+0x350>
 801f570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f574:	f043 0308 	orr.w	r3, r3, #8
 801f578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801f57c:	687b      	ldr	r3, [r7, #4]
 801f57e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801f582:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801f586:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801f588:	4618      	mov	r0, r3
 801f58a:	3728      	adds	r7, #40	; 0x28
 801f58c:	46bd      	mov	sp, r7
 801f58e:	bd80      	pop	{r7, pc}
 801f590:	0802d028 	.word	0x0802d028
 801f594:	0802db00 	.word	0x0802db00
 801f598:	0802d034 	.word	0x0802d034

0801f59c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801f59c:	b580      	push	{r7, lr}
 801f59e:	b086      	sub	sp, #24
 801f5a0:	af00      	add	r7, sp, #0
 801f5a2:	6078      	str	r0, [r7, #4]
 801f5a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801f5a6:	687b      	ldr	r3, [r7, #4]
 801f5a8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801f5aa:	693b      	ldr	r3, [r7, #16]
 801f5ac:	681b      	ldr	r3, [r3, #0]
 801f5ae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801f5b0:	e002      	b.n	801f5b8 <follow_path+0x1c>
 801f5b2:	683b      	ldr	r3, [r7, #0]
 801f5b4:	3301      	adds	r3, #1
 801f5b6:	603b      	str	r3, [r7, #0]
 801f5b8:	683b      	ldr	r3, [r7, #0]
 801f5ba:	781b      	ldrb	r3, [r3, #0]
 801f5bc:	2b2f      	cmp	r3, #47	; 0x2f
 801f5be:	d0f8      	beq.n	801f5b2 <follow_path+0x16>
 801f5c0:	683b      	ldr	r3, [r7, #0]
 801f5c2:	781b      	ldrb	r3, [r3, #0]
 801f5c4:	2b5c      	cmp	r3, #92	; 0x5c
 801f5c6:	d0f4      	beq.n	801f5b2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801f5c8:	693b      	ldr	r3, [r7, #16]
 801f5ca:	2200      	movs	r2, #0
 801f5cc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801f5ce:	683b      	ldr	r3, [r7, #0]
 801f5d0:	781b      	ldrb	r3, [r3, #0]
 801f5d2:	2b1f      	cmp	r3, #31
 801f5d4:	d80a      	bhi.n	801f5ec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801f5d6:	687b      	ldr	r3, [r7, #4]
 801f5d8:	2280      	movs	r2, #128	; 0x80
 801f5da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801f5de:	2100      	movs	r1, #0
 801f5e0:	6878      	ldr	r0, [r7, #4]
 801f5e2:	f7ff f8fe 	bl	801e7e2 <dir_sdi>
 801f5e6:	4603      	mov	r3, r0
 801f5e8:	75fb      	strb	r3, [r7, #23]
 801f5ea:	e048      	b.n	801f67e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801f5ec:	463b      	mov	r3, r7
 801f5ee:	4619      	mov	r1, r3
 801f5f0:	6878      	ldr	r0, [r7, #4]
 801f5f2:	f7ff fe1b 	bl	801f22c <create_name>
 801f5f6:	4603      	mov	r3, r0
 801f5f8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801f5fa:	7dfb      	ldrb	r3, [r7, #23]
 801f5fc:	2b00      	cmp	r3, #0
 801f5fe:	d139      	bne.n	801f674 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801f600:	6878      	ldr	r0, [r7, #4]
 801f602:	f7ff fc5b 	bl	801eebc <dir_find>
 801f606:	4603      	mov	r3, r0
 801f608:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801f60a:	687b      	ldr	r3, [r7, #4]
 801f60c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801f610:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801f612:	7dfb      	ldrb	r3, [r7, #23]
 801f614:	2b00      	cmp	r3, #0
 801f616:	d00a      	beq.n	801f62e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801f618:	7dfb      	ldrb	r3, [r7, #23]
 801f61a:	2b04      	cmp	r3, #4
 801f61c:	d12c      	bne.n	801f678 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801f61e:	7afb      	ldrb	r3, [r7, #11]
 801f620:	f003 0304 	and.w	r3, r3, #4
 801f624:	2b00      	cmp	r3, #0
 801f626:	d127      	bne.n	801f678 <follow_path+0xdc>
 801f628:	2305      	movs	r3, #5
 801f62a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801f62c:	e024      	b.n	801f678 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801f62e:	7afb      	ldrb	r3, [r7, #11]
 801f630:	f003 0304 	and.w	r3, r3, #4
 801f634:	2b00      	cmp	r3, #0
 801f636:	d121      	bne.n	801f67c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801f638:	693b      	ldr	r3, [r7, #16]
 801f63a:	799b      	ldrb	r3, [r3, #6]
 801f63c:	f003 0310 	and.w	r3, r3, #16
 801f640:	2b00      	cmp	r3, #0
 801f642:	d102      	bne.n	801f64a <follow_path+0xae>
				res = FR_NO_PATH; break;
 801f644:	2305      	movs	r3, #5
 801f646:	75fb      	strb	r3, [r7, #23]
 801f648:	e019      	b.n	801f67e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801f64a:	68fb      	ldr	r3, [r7, #12]
 801f64c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801f650:	687b      	ldr	r3, [r7, #4]
 801f652:	695b      	ldr	r3, [r3, #20]
 801f654:	68fa      	ldr	r2, [r7, #12]
 801f656:	8992      	ldrh	r2, [r2, #12]
 801f658:	fbb3 f0f2 	udiv	r0, r3, r2
 801f65c:	fb02 f200 	mul.w	r2, r2, r0
 801f660:	1a9b      	subs	r3, r3, r2
 801f662:	440b      	add	r3, r1
 801f664:	4619      	mov	r1, r3
 801f666:	68f8      	ldr	r0, [r7, #12]
 801f668:	f7ff fa61 	bl	801eb2e <ld_clust>
 801f66c:	4602      	mov	r2, r0
 801f66e:	693b      	ldr	r3, [r7, #16]
 801f670:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801f672:	e7bb      	b.n	801f5ec <follow_path+0x50>
			if (res != FR_OK) break;
 801f674:	bf00      	nop
 801f676:	e002      	b.n	801f67e <follow_path+0xe2>
				break;
 801f678:	bf00      	nop
 801f67a:	e000      	b.n	801f67e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801f67c:	bf00      	nop
			}
		}
	}

	return res;
 801f67e:	7dfb      	ldrb	r3, [r7, #23]
}
 801f680:	4618      	mov	r0, r3
 801f682:	3718      	adds	r7, #24
 801f684:	46bd      	mov	sp, r7
 801f686:	bd80      	pop	{r7, pc}

0801f688 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801f688:	b480      	push	{r7}
 801f68a:	b087      	sub	sp, #28
 801f68c:	af00      	add	r7, sp, #0
 801f68e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801f690:	f04f 33ff 	mov.w	r3, #4294967295
 801f694:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801f696:	687b      	ldr	r3, [r7, #4]
 801f698:	681b      	ldr	r3, [r3, #0]
 801f69a:	2b00      	cmp	r3, #0
 801f69c:	d031      	beq.n	801f702 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801f69e:	687b      	ldr	r3, [r7, #4]
 801f6a0:	681b      	ldr	r3, [r3, #0]
 801f6a2:	617b      	str	r3, [r7, #20]
 801f6a4:	e002      	b.n	801f6ac <get_ldnumber+0x24>
 801f6a6:	697b      	ldr	r3, [r7, #20]
 801f6a8:	3301      	adds	r3, #1
 801f6aa:	617b      	str	r3, [r7, #20]
 801f6ac:	697b      	ldr	r3, [r7, #20]
 801f6ae:	781b      	ldrb	r3, [r3, #0]
 801f6b0:	2b1f      	cmp	r3, #31
 801f6b2:	d903      	bls.n	801f6bc <get_ldnumber+0x34>
 801f6b4:	697b      	ldr	r3, [r7, #20]
 801f6b6:	781b      	ldrb	r3, [r3, #0]
 801f6b8:	2b3a      	cmp	r3, #58	; 0x3a
 801f6ba:	d1f4      	bne.n	801f6a6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801f6bc:	697b      	ldr	r3, [r7, #20]
 801f6be:	781b      	ldrb	r3, [r3, #0]
 801f6c0:	2b3a      	cmp	r3, #58	; 0x3a
 801f6c2:	d11c      	bne.n	801f6fe <get_ldnumber+0x76>
			tp = *path;
 801f6c4:	687b      	ldr	r3, [r7, #4]
 801f6c6:	681b      	ldr	r3, [r3, #0]
 801f6c8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801f6ca:	68fb      	ldr	r3, [r7, #12]
 801f6cc:	1c5a      	adds	r2, r3, #1
 801f6ce:	60fa      	str	r2, [r7, #12]
 801f6d0:	781b      	ldrb	r3, [r3, #0]
 801f6d2:	3b30      	subs	r3, #48	; 0x30
 801f6d4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801f6d6:	68bb      	ldr	r3, [r7, #8]
 801f6d8:	2b09      	cmp	r3, #9
 801f6da:	d80e      	bhi.n	801f6fa <get_ldnumber+0x72>
 801f6dc:	68fa      	ldr	r2, [r7, #12]
 801f6de:	697b      	ldr	r3, [r7, #20]
 801f6e0:	429a      	cmp	r2, r3
 801f6e2:	d10a      	bne.n	801f6fa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801f6e4:	68bb      	ldr	r3, [r7, #8]
 801f6e6:	2b00      	cmp	r3, #0
 801f6e8:	d107      	bne.n	801f6fa <get_ldnumber+0x72>
					vol = (int)i;
 801f6ea:	68bb      	ldr	r3, [r7, #8]
 801f6ec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801f6ee:	697b      	ldr	r3, [r7, #20]
 801f6f0:	3301      	adds	r3, #1
 801f6f2:	617b      	str	r3, [r7, #20]
 801f6f4:	687b      	ldr	r3, [r7, #4]
 801f6f6:	697a      	ldr	r2, [r7, #20]
 801f6f8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801f6fa:	693b      	ldr	r3, [r7, #16]
 801f6fc:	e002      	b.n	801f704 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801f6fe:	2300      	movs	r3, #0
 801f700:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801f702:	693b      	ldr	r3, [r7, #16]
}
 801f704:	4618      	mov	r0, r3
 801f706:	371c      	adds	r7, #28
 801f708:	46bd      	mov	sp, r7
 801f70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f70e:	4770      	bx	lr

0801f710 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801f710:	b580      	push	{r7, lr}
 801f712:	b082      	sub	sp, #8
 801f714:	af00      	add	r7, sp, #0
 801f716:	6078      	str	r0, [r7, #4]
 801f718:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801f71a:	687b      	ldr	r3, [r7, #4]
 801f71c:	2200      	movs	r2, #0
 801f71e:	70da      	strb	r2, [r3, #3]
 801f720:	687b      	ldr	r3, [r7, #4]
 801f722:	f04f 32ff 	mov.w	r2, #4294967295
 801f726:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801f728:	6839      	ldr	r1, [r7, #0]
 801f72a:	6878      	ldr	r0, [r7, #4]
 801f72c:	f7fe fc80 	bl	801e030 <move_window>
 801f730:	4603      	mov	r3, r0
 801f732:	2b00      	cmp	r3, #0
 801f734:	d001      	beq.n	801f73a <check_fs+0x2a>
 801f736:	2304      	movs	r3, #4
 801f738:	e038      	b.n	801f7ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801f73a:	687b      	ldr	r3, [r7, #4]
 801f73c:	333c      	adds	r3, #60	; 0x3c
 801f73e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801f742:	4618      	mov	r0, r3
 801f744:	f7fe f994 	bl	801da70 <ld_word>
 801f748:	4603      	mov	r3, r0
 801f74a:	461a      	mov	r2, r3
 801f74c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801f750:	429a      	cmp	r2, r3
 801f752:	d001      	beq.n	801f758 <check_fs+0x48>
 801f754:	2303      	movs	r3, #3
 801f756:	e029      	b.n	801f7ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801f758:	687b      	ldr	r3, [r7, #4]
 801f75a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f75e:	2be9      	cmp	r3, #233	; 0xe9
 801f760:	d009      	beq.n	801f776 <check_fs+0x66>
 801f762:	687b      	ldr	r3, [r7, #4]
 801f764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f768:	2beb      	cmp	r3, #235	; 0xeb
 801f76a:	d11e      	bne.n	801f7aa <check_fs+0x9a>
 801f76c:	687b      	ldr	r3, [r7, #4]
 801f76e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f772:	2b90      	cmp	r3, #144	; 0x90
 801f774:	d119      	bne.n	801f7aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801f776:	687b      	ldr	r3, [r7, #4]
 801f778:	333c      	adds	r3, #60	; 0x3c
 801f77a:	3336      	adds	r3, #54	; 0x36
 801f77c:	4618      	mov	r0, r3
 801f77e:	f7fe f98f 	bl	801daa0 <ld_dword>
 801f782:	4603      	mov	r3, r0
 801f784:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801f788:	4a0a      	ldr	r2, [pc, #40]	; (801f7b4 <check_fs+0xa4>)
 801f78a:	4293      	cmp	r3, r2
 801f78c:	d101      	bne.n	801f792 <check_fs+0x82>
 801f78e:	2300      	movs	r3, #0
 801f790:	e00c      	b.n	801f7ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801f792:	687b      	ldr	r3, [r7, #4]
 801f794:	333c      	adds	r3, #60	; 0x3c
 801f796:	3352      	adds	r3, #82	; 0x52
 801f798:	4618      	mov	r0, r3
 801f79a:	f7fe f981 	bl	801daa0 <ld_dword>
 801f79e:	4602      	mov	r2, r0
 801f7a0:	4b05      	ldr	r3, [pc, #20]	; (801f7b8 <check_fs+0xa8>)
 801f7a2:	429a      	cmp	r2, r3
 801f7a4:	d101      	bne.n	801f7aa <check_fs+0x9a>
 801f7a6:	2300      	movs	r3, #0
 801f7a8:	e000      	b.n	801f7ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801f7aa:	2302      	movs	r3, #2
}
 801f7ac:	4618      	mov	r0, r3
 801f7ae:	3708      	adds	r7, #8
 801f7b0:	46bd      	mov	sp, r7
 801f7b2:	bd80      	pop	{r7, pc}
 801f7b4:	00544146 	.word	0x00544146
 801f7b8:	33544146 	.word	0x33544146

0801f7bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801f7bc:	b580      	push	{r7, lr}
 801f7be:	b096      	sub	sp, #88	; 0x58
 801f7c0:	af00      	add	r7, sp, #0
 801f7c2:	60f8      	str	r0, [r7, #12]
 801f7c4:	60b9      	str	r1, [r7, #8]
 801f7c6:	4613      	mov	r3, r2
 801f7c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801f7ca:	68bb      	ldr	r3, [r7, #8]
 801f7cc:	2200      	movs	r2, #0
 801f7ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801f7d0:	68f8      	ldr	r0, [r7, #12]
 801f7d2:	f7ff ff59 	bl	801f688 <get_ldnumber>
 801f7d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801f7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f7da:	2b00      	cmp	r3, #0
 801f7dc:	da01      	bge.n	801f7e2 <find_volume+0x26>
 801f7de:	230b      	movs	r3, #11
 801f7e0:	e26c      	b.n	801fcbc <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801f7e2:	4aa4      	ldr	r2, [pc, #656]	; (801fa74 <find_volume+0x2b8>)
 801f7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f7e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f7ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801f7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f7ee:	2b00      	cmp	r3, #0
 801f7f0:	d101      	bne.n	801f7f6 <find_volume+0x3a>
 801f7f2:	230c      	movs	r3, #12
 801f7f4:	e262      	b.n	801fcbc <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 801f7f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801f7f8:	f7fe fa39 	bl	801dc6e <lock_fs>
 801f7fc:	4603      	mov	r3, r0
 801f7fe:	2b00      	cmp	r3, #0
 801f800:	d101      	bne.n	801f806 <find_volume+0x4a>
 801f802:	230f      	movs	r3, #15
 801f804:	e25a      	b.n	801fcbc <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 801f806:	68bb      	ldr	r3, [r7, #8]
 801f808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801f80a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801f80c:	79fb      	ldrb	r3, [r7, #7]
 801f80e:	f023 0301 	bic.w	r3, r3, #1
 801f812:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801f814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f816:	781b      	ldrb	r3, [r3, #0]
 801f818:	2b00      	cmp	r3, #0
 801f81a:	d01a      	beq.n	801f852 <find_volume+0x96>
		stat = disk_status(fs->drv);
 801f81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f81e:	785b      	ldrb	r3, [r3, #1]
 801f820:	4618      	mov	r0, r3
 801f822:	f7fe f887 	bl	801d934 <disk_status>
 801f826:	4603      	mov	r3, r0
 801f828:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801f82c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801f830:	f003 0301 	and.w	r3, r3, #1
 801f834:	2b00      	cmp	r3, #0
 801f836:	d10c      	bne.n	801f852 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801f838:	79fb      	ldrb	r3, [r7, #7]
 801f83a:	2b00      	cmp	r3, #0
 801f83c:	d007      	beq.n	801f84e <find_volume+0x92>
 801f83e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801f842:	f003 0304 	and.w	r3, r3, #4
 801f846:	2b00      	cmp	r3, #0
 801f848:	d001      	beq.n	801f84e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801f84a:	230a      	movs	r3, #10
 801f84c:	e236      	b.n	801fcbc <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 801f84e:	2300      	movs	r3, #0
 801f850:	e234      	b.n	801fcbc <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801f852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f854:	2200      	movs	r2, #0
 801f856:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801f858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f85a:	b2da      	uxtb	r2, r3
 801f85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f85e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801f860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f862:	785b      	ldrb	r3, [r3, #1]
 801f864:	4618      	mov	r0, r3
 801f866:	f7fe f87f 	bl	801d968 <disk_initialize>
 801f86a:	4603      	mov	r3, r0
 801f86c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801f870:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801f874:	f003 0301 	and.w	r3, r3, #1
 801f878:	2b00      	cmp	r3, #0
 801f87a:	d001      	beq.n	801f880 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801f87c:	2303      	movs	r3, #3
 801f87e:	e21d      	b.n	801fcbc <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801f880:	79fb      	ldrb	r3, [r7, #7]
 801f882:	2b00      	cmp	r3, #0
 801f884:	d007      	beq.n	801f896 <find_volume+0xda>
 801f886:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801f88a:	f003 0304 	and.w	r3, r3, #4
 801f88e:	2b00      	cmp	r3, #0
 801f890:	d001      	beq.n	801f896 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 801f892:	230a      	movs	r3, #10
 801f894:	e212      	b.n	801fcbc <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801f896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f898:	7858      	ldrb	r0, [r3, #1]
 801f89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f89c:	330c      	adds	r3, #12
 801f89e:	461a      	mov	r2, r3
 801f8a0:	2102      	movs	r1, #2
 801f8a2:	f7fe f8c7 	bl	801da34 <disk_ioctl>
 801f8a6:	4603      	mov	r3, r0
 801f8a8:	2b00      	cmp	r3, #0
 801f8aa:	d001      	beq.n	801f8b0 <find_volume+0xf4>
 801f8ac:	2301      	movs	r3, #1
 801f8ae:	e205      	b.n	801fcbc <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801f8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f8b2:	899b      	ldrh	r3, [r3, #12]
 801f8b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f8b8:	d80d      	bhi.n	801f8d6 <find_volume+0x11a>
 801f8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f8bc:	899b      	ldrh	r3, [r3, #12]
 801f8be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f8c2:	d308      	bcc.n	801f8d6 <find_volume+0x11a>
 801f8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f8c6:	899b      	ldrh	r3, [r3, #12]
 801f8c8:	461a      	mov	r2, r3
 801f8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f8cc:	899b      	ldrh	r3, [r3, #12]
 801f8ce:	3b01      	subs	r3, #1
 801f8d0:	4013      	ands	r3, r2
 801f8d2:	2b00      	cmp	r3, #0
 801f8d4:	d001      	beq.n	801f8da <find_volume+0x11e>
 801f8d6:	2301      	movs	r3, #1
 801f8d8:	e1f0      	b.n	801fcbc <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801f8da:	2300      	movs	r3, #0
 801f8dc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801f8de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801f8e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801f8e2:	f7ff ff15 	bl	801f710 <check_fs>
 801f8e6:	4603      	mov	r3, r0
 801f8e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801f8ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801f8f0:	2b02      	cmp	r3, #2
 801f8f2:	d14b      	bne.n	801f98c <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801f8f4:	2300      	movs	r3, #0
 801f8f6:	643b      	str	r3, [r7, #64]	; 0x40
 801f8f8:	e01f      	b.n	801f93a <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801f8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f8fc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 801f900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f902:	011b      	lsls	r3, r3, #4
 801f904:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801f908:	4413      	add	r3, r2
 801f90a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801f90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f90e:	3304      	adds	r3, #4
 801f910:	781b      	ldrb	r3, [r3, #0]
 801f912:	2b00      	cmp	r3, #0
 801f914:	d006      	beq.n	801f924 <find_volume+0x168>
 801f916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f918:	3308      	adds	r3, #8
 801f91a:	4618      	mov	r0, r3
 801f91c:	f7fe f8c0 	bl	801daa0 <ld_dword>
 801f920:	4602      	mov	r2, r0
 801f922:	e000      	b.n	801f926 <find_volume+0x16a>
 801f924:	2200      	movs	r2, #0
 801f926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f928:	009b      	lsls	r3, r3, #2
 801f92a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801f92e:	440b      	add	r3, r1
 801f930:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801f934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f936:	3301      	adds	r3, #1
 801f938:	643b      	str	r3, [r7, #64]	; 0x40
 801f93a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f93c:	2b03      	cmp	r3, #3
 801f93e:	d9dc      	bls.n	801f8fa <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801f940:	2300      	movs	r3, #0
 801f942:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801f944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f946:	2b00      	cmp	r3, #0
 801f948:	d002      	beq.n	801f950 <find_volume+0x194>
 801f94a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f94c:	3b01      	subs	r3, #1
 801f94e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801f950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f952:	009b      	lsls	r3, r3, #2
 801f954:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801f958:	4413      	add	r3, r2
 801f95a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801f95e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801f960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f962:	2b00      	cmp	r3, #0
 801f964:	d005      	beq.n	801f972 <find_volume+0x1b6>
 801f966:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801f968:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801f96a:	f7ff fed1 	bl	801f710 <check_fs>
 801f96e:	4603      	mov	r3, r0
 801f970:	e000      	b.n	801f974 <find_volume+0x1b8>
 801f972:	2303      	movs	r3, #3
 801f974:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801f978:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801f97c:	2b01      	cmp	r3, #1
 801f97e:	d905      	bls.n	801f98c <find_volume+0x1d0>
 801f980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f982:	3301      	adds	r3, #1
 801f984:	643b      	str	r3, [r7, #64]	; 0x40
 801f986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f988:	2b03      	cmp	r3, #3
 801f98a:	d9e1      	bls.n	801f950 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801f98c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801f990:	2b04      	cmp	r3, #4
 801f992:	d101      	bne.n	801f998 <find_volume+0x1dc>
 801f994:	2301      	movs	r3, #1
 801f996:	e191      	b.n	801fcbc <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801f998:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801f99c:	2b01      	cmp	r3, #1
 801f99e:	d901      	bls.n	801f9a4 <find_volume+0x1e8>
 801f9a0:	230d      	movs	r3, #13
 801f9a2:	e18b      	b.n	801fcbc <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801f9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f9a6:	333c      	adds	r3, #60	; 0x3c
 801f9a8:	330b      	adds	r3, #11
 801f9aa:	4618      	mov	r0, r3
 801f9ac:	f7fe f860 	bl	801da70 <ld_word>
 801f9b0:	4603      	mov	r3, r0
 801f9b2:	461a      	mov	r2, r3
 801f9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f9b6:	899b      	ldrh	r3, [r3, #12]
 801f9b8:	429a      	cmp	r2, r3
 801f9ba:	d001      	beq.n	801f9c0 <find_volume+0x204>
 801f9bc:	230d      	movs	r3, #13
 801f9be:	e17d      	b.n	801fcbc <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801f9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f9c2:	333c      	adds	r3, #60	; 0x3c
 801f9c4:	3316      	adds	r3, #22
 801f9c6:	4618      	mov	r0, r3
 801f9c8:	f7fe f852 	bl	801da70 <ld_word>
 801f9cc:	4603      	mov	r3, r0
 801f9ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801f9d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f9d2:	2b00      	cmp	r3, #0
 801f9d4:	d106      	bne.n	801f9e4 <find_volume+0x228>
 801f9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f9d8:	333c      	adds	r3, #60	; 0x3c
 801f9da:	3324      	adds	r3, #36	; 0x24
 801f9dc:	4618      	mov	r0, r3
 801f9de:	f7fe f85f 	bl	801daa0 <ld_dword>
 801f9e2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801f9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f9e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f9e8:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801f9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f9ec:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 801f9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f9f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801f9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f9f6:	789b      	ldrb	r3, [r3, #2]
 801f9f8:	2b01      	cmp	r3, #1
 801f9fa:	d005      	beq.n	801fa08 <find_volume+0x24c>
 801f9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f9fe:	789b      	ldrb	r3, [r3, #2]
 801fa00:	2b02      	cmp	r3, #2
 801fa02:	d001      	beq.n	801fa08 <find_volume+0x24c>
 801fa04:	230d      	movs	r3, #13
 801fa06:	e159      	b.n	801fcbc <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801fa08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa0a:	789b      	ldrb	r3, [r3, #2]
 801fa0c:	461a      	mov	r2, r3
 801fa0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fa10:	fb02 f303 	mul.w	r3, r2, r3
 801fa14:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801fa16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa18:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801fa1c:	b29a      	uxth	r2, r3
 801fa1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa20:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801fa22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa24:	895b      	ldrh	r3, [r3, #10]
 801fa26:	2b00      	cmp	r3, #0
 801fa28:	d008      	beq.n	801fa3c <find_volume+0x280>
 801fa2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa2c:	895b      	ldrh	r3, [r3, #10]
 801fa2e:	461a      	mov	r2, r3
 801fa30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa32:	895b      	ldrh	r3, [r3, #10]
 801fa34:	3b01      	subs	r3, #1
 801fa36:	4013      	ands	r3, r2
 801fa38:	2b00      	cmp	r3, #0
 801fa3a:	d001      	beq.n	801fa40 <find_volume+0x284>
 801fa3c:	230d      	movs	r3, #13
 801fa3e:	e13d      	b.n	801fcbc <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801fa40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa42:	333c      	adds	r3, #60	; 0x3c
 801fa44:	3311      	adds	r3, #17
 801fa46:	4618      	mov	r0, r3
 801fa48:	f7fe f812 	bl	801da70 <ld_word>
 801fa4c:	4603      	mov	r3, r0
 801fa4e:	461a      	mov	r2, r3
 801fa50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa52:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801fa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa56:	891b      	ldrh	r3, [r3, #8]
 801fa58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fa5a:	8992      	ldrh	r2, [r2, #12]
 801fa5c:	0952      	lsrs	r2, r2, #5
 801fa5e:	b292      	uxth	r2, r2
 801fa60:	fbb3 f1f2 	udiv	r1, r3, r2
 801fa64:	fb02 f201 	mul.w	r2, r2, r1
 801fa68:	1a9b      	subs	r3, r3, r2
 801fa6a:	b29b      	uxth	r3, r3
 801fa6c:	2b00      	cmp	r3, #0
 801fa6e:	d003      	beq.n	801fa78 <find_volume+0x2bc>
 801fa70:	230d      	movs	r3, #13
 801fa72:	e123      	b.n	801fcbc <find_volume+0x500>
 801fa74:	20001540 	.word	0x20001540

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801fa78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa7a:	333c      	adds	r3, #60	; 0x3c
 801fa7c:	3313      	adds	r3, #19
 801fa7e:	4618      	mov	r0, r3
 801fa80:	f7fd fff6 	bl	801da70 <ld_word>
 801fa84:	4603      	mov	r3, r0
 801fa86:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801fa88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fa8a:	2b00      	cmp	r3, #0
 801fa8c:	d106      	bne.n	801fa9c <find_volume+0x2e0>
 801fa8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa90:	333c      	adds	r3, #60	; 0x3c
 801fa92:	3320      	adds	r3, #32
 801fa94:	4618      	mov	r0, r3
 801fa96:	f7fe f803 	bl	801daa0 <ld_dword>
 801fa9a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801fa9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa9e:	333c      	adds	r3, #60	; 0x3c
 801faa0:	330e      	adds	r3, #14
 801faa2:	4618      	mov	r0, r3
 801faa4:	f7fd ffe4 	bl	801da70 <ld_word>
 801faa8:	4603      	mov	r3, r0
 801faaa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801faac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801faae:	2b00      	cmp	r3, #0
 801fab0:	d101      	bne.n	801fab6 <find_volume+0x2fa>
 801fab2:	230d      	movs	r3, #13
 801fab4:	e102      	b.n	801fcbc <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801fab6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801fab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801faba:	4413      	add	r3, r2
 801fabc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fabe:	8911      	ldrh	r1, [r2, #8]
 801fac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fac2:	8992      	ldrh	r2, [r2, #12]
 801fac4:	0952      	lsrs	r2, r2, #5
 801fac6:	b292      	uxth	r2, r2
 801fac8:	fbb1 f2f2 	udiv	r2, r1, r2
 801facc:	b292      	uxth	r2, r2
 801face:	4413      	add	r3, r2
 801fad0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801fad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801fad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fad6:	429a      	cmp	r2, r3
 801fad8:	d201      	bcs.n	801fade <find_volume+0x322>
 801fada:	230d      	movs	r3, #13
 801fadc:	e0ee      	b.n	801fcbc <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801fade:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801fae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fae2:	1ad3      	subs	r3, r2, r3
 801fae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fae6:	8952      	ldrh	r2, [r2, #10]
 801fae8:	fbb3 f3f2 	udiv	r3, r3, r2
 801faec:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801faee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801faf0:	2b00      	cmp	r3, #0
 801faf2:	d101      	bne.n	801faf8 <find_volume+0x33c>
 801faf4:	230d      	movs	r3, #13
 801faf6:	e0e1      	b.n	801fcbc <find_volume+0x500>
		fmt = FS_FAT32;
 801faf8:	2303      	movs	r3, #3
 801fafa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801fafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb00:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801fb04:	4293      	cmp	r3, r2
 801fb06:	d802      	bhi.n	801fb0e <find_volume+0x352>
 801fb08:	2302      	movs	r3, #2
 801fb0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801fb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb10:	f640 72f5 	movw	r2, #4085	; 0xff5
 801fb14:	4293      	cmp	r3, r2
 801fb16:	d802      	bhi.n	801fb1e <find_volume+0x362>
 801fb18:	2301      	movs	r3, #1
 801fb1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801fb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb20:	1c9a      	adds	r2, r3, #2
 801fb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb24:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 801fb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801fb2a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801fb2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801fb2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801fb30:	441a      	add	r2, r3
 801fb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb34:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 801fb36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801fb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fb3a:	441a      	add	r2, r3
 801fb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb3e:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 801fb40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801fb44:	2b03      	cmp	r3, #3
 801fb46:	d11e      	bne.n	801fb86 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801fb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb4a:	333c      	adds	r3, #60	; 0x3c
 801fb4c:	332a      	adds	r3, #42	; 0x2a
 801fb4e:	4618      	mov	r0, r3
 801fb50:	f7fd ff8e 	bl	801da70 <ld_word>
 801fb54:	4603      	mov	r3, r0
 801fb56:	2b00      	cmp	r3, #0
 801fb58:	d001      	beq.n	801fb5e <find_volume+0x3a2>
 801fb5a:	230d      	movs	r3, #13
 801fb5c:	e0ae      	b.n	801fcbc <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801fb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb60:	891b      	ldrh	r3, [r3, #8]
 801fb62:	2b00      	cmp	r3, #0
 801fb64:	d001      	beq.n	801fb6a <find_volume+0x3ae>
 801fb66:	230d      	movs	r3, #13
 801fb68:	e0a8      	b.n	801fcbc <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801fb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb6c:	333c      	adds	r3, #60	; 0x3c
 801fb6e:	332c      	adds	r3, #44	; 0x2c
 801fb70:	4618      	mov	r0, r3
 801fb72:	f7fd ff95 	bl	801daa0 <ld_dword>
 801fb76:	4602      	mov	r2, r0
 801fb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb7a:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801fb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb7e:	6a1b      	ldr	r3, [r3, #32]
 801fb80:	009b      	lsls	r3, r3, #2
 801fb82:	647b      	str	r3, [r7, #68]	; 0x44
 801fb84:	e01f      	b.n	801fbc6 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801fb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb88:	891b      	ldrh	r3, [r3, #8]
 801fb8a:	2b00      	cmp	r3, #0
 801fb8c:	d101      	bne.n	801fb92 <find_volume+0x3d6>
 801fb8e:	230d      	movs	r3, #13
 801fb90:	e094      	b.n	801fcbc <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801fb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fb96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fb98:	441a      	add	r2, r3
 801fb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb9c:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801fb9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801fba2:	2b02      	cmp	r3, #2
 801fba4:	d103      	bne.n	801fbae <find_volume+0x3f2>
 801fba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fba8:	6a1b      	ldr	r3, [r3, #32]
 801fbaa:	005b      	lsls	r3, r3, #1
 801fbac:	e00a      	b.n	801fbc4 <find_volume+0x408>
 801fbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fbb0:	6a1a      	ldr	r2, [r3, #32]
 801fbb2:	4613      	mov	r3, r2
 801fbb4:	005b      	lsls	r3, r3, #1
 801fbb6:	4413      	add	r3, r2
 801fbb8:	085a      	lsrs	r2, r3, #1
 801fbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fbbc:	6a1b      	ldr	r3, [r3, #32]
 801fbbe:	f003 0301 	and.w	r3, r3, #1
 801fbc2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801fbc4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801fbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fbc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801fbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fbcc:	899b      	ldrh	r3, [r3, #12]
 801fbce:	4619      	mov	r1, r3
 801fbd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fbd2:	440b      	add	r3, r1
 801fbd4:	3b01      	subs	r3, #1
 801fbd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801fbd8:	8989      	ldrh	r1, [r1, #12]
 801fbda:	fbb3 f3f1 	udiv	r3, r3, r1
 801fbde:	429a      	cmp	r2, r3
 801fbe0:	d201      	bcs.n	801fbe6 <find_volume+0x42a>
 801fbe2:	230d      	movs	r3, #13
 801fbe4:	e06a      	b.n	801fcbc <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801fbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fbe8:	f04f 32ff 	mov.w	r2, #4294967295
 801fbec:	61da      	str	r2, [r3, #28]
 801fbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fbf0:	69da      	ldr	r2, [r3, #28]
 801fbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fbf4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 801fbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fbf8:	2280      	movs	r2, #128	; 0x80
 801fbfa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801fbfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801fc00:	2b03      	cmp	r3, #3
 801fc02:	d149      	bne.n	801fc98 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801fc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fc06:	333c      	adds	r3, #60	; 0x3c
 801fc08:	3330      	adds	r3, #48	; 0x30
 801fc0a:	4618      	mov	r0, r3
 801fc0c:	f7fd ff30 	bl	801da70 <ld_word>
 801fc10:	4603      	mov	r3, r0
 801fc12:	2b01      	cmp	r3, #1
 801fc14:	d140      	bne.n	801fc98 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 801fc16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801fc18:	3301      	adds	r3, #1
 801fc1a:	4619      	mov	r1, r3
 801fc1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801fc1e:	f7fe fa07 	bl	801e030 <move_window>
 801fc22:	4603      	mov	r3, r0
 801fc24:	2b00      	cmp	r3, #0
 801fc26:	d137      	bne.n	801fc98 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 801fc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fc2a:	2200      	movs	r2, #0
 801fc2c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801fc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fc30:	333c      	adds	r3, #60	; 0x3c
 801fc32:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801fc36:	4618      	mov	r0, r3
 801fc38:	f7fd ff1a 	bl	801da70 <ld_word>
 801fc3c:	4603      	mov	r3, r0
 801fc3e:	461a      	mov	r2, r3
 801fc40:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801fc44:	429a      	cmp	r2, r3
 801fc46:	d127      	bne.n	801fc98 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801fc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fc4a:	333c      	adds	r3, #60	; 0x3c
 801fc4c:	4618      	mov	r0, r3
 801fc4e:	f7fd ff27 	bl	801daa0 <ld_dword>
 801fc52:	4602      	mov	r2, r0
 801fc54:	4b1b      	ldr	r3, [pc, #108]	; (801fcc4 <find_volume+0x508>)
 801fc56:	429a      	cmp	r2, r3
 801fc58:	d11e      	bne.n	801fc98 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801fc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fc5c:	333c      	adds	r3, #60	; 0x3c
 801fc5e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801fc62:	4618      	mov	r0, r3
 801fc64:	f7fd ff1c 	bl	801daa0 <ld_dword>
 801fc68:	4602      	mov	r2, r0
 801fc6a:	4b17      	ldr	r3, [pc, #92]	; (801fcc8 <find_volume+0x50c>)
 801fc6c:	429a      	cmp	r2, r3
 801fc6e:	d113      	bne.n	801fc98 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801fc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fc72:	333c      	adds	r3, #60	; 0x3c
 801fc74:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801fc78:	4618      	mov	r0, r3
 801fc7a:	f7fd ff11 	bl	801daa0 <ld_dword>
 801fc7e:	4602      	mov	r2, r0
 801fc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fc82:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801fc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fc86:	333c      	adds	r3, #60	; 0x3c
 801fc88:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801fc8c:	4618      	mov	r0, r3
 801fc8e:	f7fd ff07 	bl	801daa0 <ld_dword>
 801fc92:	4602      	mov	r2, r0
 801fc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fc96:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801fc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fc9a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801fc9e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801fca0:	4b0a      	ldr	r3, [pc, #40]	; (801fccc <find_volume+0x510>)
 801fca2:	881b      	ldrh	r3, [r3, #0]
 801fca4:	3301      	adds	r3, #1
 801fca6:	b29a      	uxth	r2, r3
 801fca8:	4b08      	ldr	r3, [pc, #32]	; (801fccc <find_volume+0x510>)
 801fcaa:	801a      	strh	r2, [r3, #0]
 801fcac:	4b07      	ldr	r3, [pc, #28]	; (801fccc <find_volume+0x510>)
 801fcae:	881a      	ldrh	r2, [r3, #0]
 801fcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fcb2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801fcb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801fcb6:	f7fe f953 	bl	801df60 <clear_lock>
#endif
	return FR_OK;
 801fcba:	2300      	movs	r3, #0
}
 801fcbc:	4618      	mov	r0, r3
 801fcbe:	3758      	adds	r7, #88	; 0x58
 801fcc0:	46bd      	mov	sp, r7
 801fcc2:	bd80      	pop	{r7, pc}
 801fcc4:	41615252 	.word	0x41615252
 801fcc8:	61417272 	.word	0x61417272
 801fccc:	20001544 	.word	0x20001544

0801fcd0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801fcd0:	b580      	push	{r7, lr}
 801fcd2:	b084      	sub	sp, #16
 801fcd4:	af00      	add	r7, sp, #0
 801fcd6:	6078      	str	r0, [r7, #4]
 801fcd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801fcda:	2309      	movs	r3, #9
 801fcdc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801fcde:	687b      	ldr	r3, [r7, #4]
 801fce0:	2b00      	cmp	r3, #0
 801fce2:	d02e      	beq.n	801fd42 <validate+0x72>
 801fce4:	687b      	ldr	r3, [r7, #4]
 801fce6:	681b      	ldr	r3, [r3, #0]
 801fce8:	2b00      	cmp	r3, #0
 801fcea:	d02a      	beq.n	801fd42 <validate+0x72>
 801fcec:	687b      	ldr	r3, [r7, #4]
 801fcee:	681b      	ldr	r3, [r3, #0]
 801fcf0:	781b      	ldrb	r3, [r3, #0]
 801fcf2:	2b00      	cmp	r3, #0
 801fcf4:	d025      	beq.n	801fd42 <validate+0x72>
 801fcf6:	687b      	ldr	r3, [r7, #4]
 801fcf8:	889a      	ldrh	r2, [r3, #4]
 801fcfa:	687b      	ldr	r3, [r7, #4]
 801fcfc:	681b      	ldr	r3, [r3, #0]
 801fcfe:	88db      	ldrh	r3, [r3, #6]
 801fd00:	429a      	cmp	r2, r3
 801fd02:	d11e      	bne.n	801fd42 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801fd04:	687b      	ldr	r3, [r7, #4]
 801fd06:	681b      	ldr	r3, [r3, #0]
 801fd08:	4618      	mov	r0, r3
 801fd0a:	f7fd ffb0 	bl	801dc6e <lock_fs>
 801fd0e:	4603      	mov	r3, r0
 801fd10:	2b00      	cmp	r3, #0
 801fd12:	d014      	beq.n	801fd3e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801fd14:	687b      	ldr	r3, [r7, #4]
 801fd16:	681b      	ldr	r3, [r3, #0]
 801fd18:	785b      	ldrb	r3, [r3, #1]
 801fd1a:	4618      	mov	r0, r3
 801fd1c:	f7fd fe0a 	bl	801d934 <disk_status>
 801fd20:	4603      	mov	r3, r0
 801fd22:	f003 0301 	and.w	r3, r3, #1
 801fd26:	2b00      	cmp	r3, #0
 801fd28:	d102      	bne.n	801fd30 <validate+0x60>
				res = FR_OK;
 801fd2a:	2300      	movs	r3, #0
 801fd2c:	73fb      	strb	r3, [r7, #15]
 801fd2e:	e008      	b.n	801fd42 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 801fd30:	687b      	ldr	r3, [r7, #4]
 801fd32:	681b      	ldr	r3, [r3, #0]
 801fd34:	2100      	movs	r1, #0
 801fd36:	4618      	mov	r0, r3
 801fd38:	f7fd ffaf 	bl	801dc9a <unlock_fs>
 801fd3c:	e001      	b.n	801fd42 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801fd3e:	230f      	movs	r3, #15
 801fd40:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801fd42:	7bfb      	ldrb	r3, [r7, #15]
 801fd44:	2b00      	cmp	r3, #0
 801fd46:	d102      	bne.n	801fd4e <validate+0x7e>
 801fd48:	687b      	ldr	r3, [r7, #4]
 801fd4a:	681b      	ldr	r3, [r3, #0]
 801fd4c:	e000      	b.n	801fd50 <validate+0x80>
 801fd4e:	2300      	movs	r3, #0
 801fd50:	683a      	ldr	r2, [r7, #0]
 801fd52:	6013      	str	r3, [r2, #0]
	return res;
 801fd54:	7bfb      	ldrb	r3, [r7, #15]
}
 801fd56:	4618      	mov	r0, r3
 801fd58:	3710      	adds	r7, #16
 801fd5a:	46bd      	mov	sp, r7
 801fd5c:	bd80      	pop	{r7, pc}
	...

0801fd60 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801fd60:	b580      	push	{r7, lr}
 801fd62:	b088      	sub	sp, #32
 801fd64:	af00      	add	r7, sp, #0
 801fd66:	60f8      	str	r0, [r7, #12]
 801fd68:	60b9      	str	r1, [r7, #8]
 801fd6a:	4613      	mov	r3, r2
 801fd6c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801fd6e:	68bb      	ldr	r3, [r7, #8]
 801fd70:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801fd72:	f107 0310 	add.w	r3, r7, #16
 801fd76:	4618      	mov	r0, r3
 801fd78:	f7ff fc86 	bl	801f688 <get_ldnumber>
 801fd7c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801fd7e:	69fb      	ldr	r3, [r7, #28]
 801fd80:	2b00      	cmp	r3, #0
 801fd82:	da01      	bge.n	801fd88 <f_mount+0x28>
 801fd84:	230b      	movs	r3, #11
 801fd86:	e048      	b.n	801fe1a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801fd88:	4a26      	ldr	r2, [pc, #152]	; (801fe24 <f_mount+0xc4>)
 801fd8a:	69fb      	ldr	r3, [r7, #28]
 801fd8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801fd90:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801fd92:	69bb      	ldr	r3, [r7, #24]
 801fd94:	2b00      	cmp	r3, #0
 801fd96:	d00f      	beq.n	801fdb8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801fd98:	69b8      	ldr	r0, [r7, #24]
 801fd9a:	f7fe f8e1 	bl	801df60 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801fd9e:	69bb      	ldr	r3, [r7, #24]
 801fda0:	695b      	ldr	r3, [r3, #20]
 801fda2:	4618      	mov	r0, r3
 801fda4:	f000 fde1 	bl	802096a <ff_del_syncobj>
 801fda8:	4603      	mov	r3, r0
 801fdaa:	2b00      	cmp	r3, #0
 801fdac:	d101      	bne.n	801fdb2 <f_mount+0x52>
 801fdae:	2302      	movs	r3, #2
 801fdb0:	e033      	b.n	801fe1a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801fdb2:	69bb      	ldr	r3, [r7, #24]
 801fdb4:	2200      	movs	r2, #0
 801fdb6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801fdb8:	68fb      	ldr	r3, [r7, #12]
 801fdba:	2b00      	cmp	r3, #0
 801fdbc:	d00f      	beq.n	801fdde <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 801fdbe:	68fb      	ldr	r3, [r7, #12]
 801fdc0:	2200      	movs	r2, #0
 801fdc2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801fdc4:	69fb      	ldr	r3, [r7, #28]
 801fdc6:	b2da      	uxtb	r2, r3
 801fdc8:	68fb      	ldr	r3, [r7, #12]
 801fdca:	3314      	adds	r3, #20
 801fdcc:	4619      	mov	r1, r3
 801fdce:	4610      	mov	r0, r2
 801fdd0:	f000 fdb0 	bl	8020934 <ff_cre_syncobj>
 801fdd4:	4603      	mov	r3, r0
 801fdd6:	2b00      	cmp	r3, #0
 801fdd8:	d101      	bne.n	801fdde <f_mount+0x7e>
 801fdda:	2302      	movs	r3, #2
 801fddc:	e01d      	b.n	801fe1a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801fdde:	68fa      	ldr	r2, [r7, #12]
 801fde0:	4910      	ldr	r1, [pc, #64]	; (801fe24 <f_mount+0xc4>)
 801fde2:	69fb      	ldr	r3, [r7, #28]
 801fde4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801fde8:	68fb      	ldr	r3, [r7, #12]
 801fdea:	2b00      	cmp	r3, #0
 801fdec:	d002      	beq.n	801fdf4 <f_mount+0x94>
 801fdee:	79fb      	ldrb	r3, [r7, #7]
 801fdf0:	2b01      	cmp	r3, #1
 801fdf2:	d001      	beq.n	801fdf8 <f_mount+0x98>
 801fdf4:	2300      	movs	r3, #0
 801fdf6:	e010      	b.n	801fe1a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801fdf8:	f107 010c 	add.w	r1, r7, #12
 801fdfc:	f107 0308 	add.w	r3, r7, #8
 801fe00:	2200      	movs	r2, #0
 801fe02:	4618      	mov	r0, r3
 801fe04:	f7ff fcda 	bl	801f7bc <find_volume>
 801fe08:	4603      	mov	r3, r0
 801fe0a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801fe0c:	68fb      	ldr	r3, [r7, #12]
 801fe0e:	7dfa      	ldrb	r2, [r7, #23]
 801fe10:	4611      	mov	r1, r2
 801fe12:	4618      	mov	r0, r3
 801fe14:	f7fd ff41 	bl	801dc9a <unlock_fs>
 801fe18:	7dfb      	ldrb	r3, [r7, #23]
}
 801fe1a:	4618      	mov	r0, r3
 801fe1c:	3720      	adds	r7, #32
 801fe1e:	46bd      	mov	sp, r7
 801fe20:	bd80      	pop	{r7, pc}
 801fe22:	bf00      	nop
 801fe24:	20001540 	.word	0x20001540

0801fe28 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801fe28:	b580      	push	{r7, lr}
 801fe2a:	b09a      	sub	sp, #104	; 0x68
 801fe2c:	af00      	add	r7, sp, #0
 801fe2e:	60f8      	str	r0, [r7, #12]
 801fe30:	60b9      	str	r1, [r7, #8]
 801fe32:	4613      	mov	r3, r2
 801fe34:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801fe36:	68fb      	ldr	r3, [r7, #12]
 801fe38:	2b00      	cmp	r3, #0
 801fe3a:	d101      	bne.n	801fe40 <f_open+0x18>
 801fe3c:	2309      	movs	r3, #9
 801fe3e:	e1d7      	b.n	80201f0 <f_open+0x3c8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801fe40:	79fb      	ldrb	r3, [r7, #7]
 801fe42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fe46:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801fe48:	79fa      	ldrb	r2, [r7, #7]
 801fe4a:	f107 0110 	add.w	r1, r7, #16
 801fe4e:	f107 0308 	add.w	r3, r7, #8
 801fe52:	4618      	mov	r0, r3
 801fe54:	f7ff fcb2 	bl	801f7bc <find_volume>
 801fe58:	4603      	mov	r3, r0
 801fe5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801fe5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801fe62:	2b00      	cmp	r3, #0
 801fe64:	f040 81b4 	bne.w	80201d0 <f_open+0x3a8>
		dj.obj.fs = fs;
 801fe68:	693b      	ldr	r3, [r7, #16]
 801fe6a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 801fe6c:	f44f 7000 	mov.w	r0, #512	; 0x200
 801fe70:	f000 fda7 	bl	80209c2 <ff_memalloc>
 801fe74:	65b8      	str	r0, [r7, #88]	; 0x58
 801fe76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801fe78:	2b00      	cmp	r3, #0
 801fe7a:	d106      	bne.n	801fe8a <f_open+0x62>
 801fe7c:	693b      	ldr	r3, [r7, #16]
 801fe7e:	2111      	movs	r1, #17
 801fe80:	4618      	mov	r0, r3
 801fe82:	f7fd ff0a 	bl	801dc9a <unlock_fs>
 801fe86:	2311      	movs	r3, #17
 801fe88:	e1b2      	b.n	80201f0 <f_open+0x3c8>
 801fe8a:	693b      	ldr	r3, [r7, #16]
 801fe8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801fe8e:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 801fe90:	68ba      	ldr	r2, [r7, #8]
 801fe92:	f107 0314 	add.w	r3, r7, #20
 801fe96:	4611      	mov	r1, r2
 801fe98:	4618      	mov	r0, r3
 801fe9a:	f7ff fb7f 	bl	801f59c <follow_path>
 801fe9e:	4603      	mov	r3, r0
 801fea0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801fea4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801fea8:	2b00      	cmp	r3, #0
 801feaa:	d11a      	bne.n	801fee2 <f_open+0xba>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801feac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801feb0:	b25b      	sxtb	r3, r3
 801feb2:	2b00      	cmp	r3, #0
 801feb4:	da03      	bge.n	801febe <f_open+0x96>
				res = FR_INVALID_NAME;
 801feb6:	2306      	movs	r3, #6
 801feb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801febc:	e011      	b.n	801fee2 <f_open+0xba>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801febe:	79fb      	ldrb	r3, [r7, #7]
 801fec0:	f023 0301 	bic.w	r3, r3, #1
 801fec4:	2b00      	cmp	r3, #0
 801fec6:	bf14      	ite	ne
 801fec8:	2301      	movne	r3, #1
 801feca:	2300      	moveq	r3, #0
 801fecc:	b2db      	uxtb	r3, r3
 801fece:	461a      	mov	r2, r3
 801fed0:	f107 0314 	add.w	r3, r7, #20
 801fed4:	4611      	mov	r1, r2
 801fed6:	4618      	mov	r0, r3
 801fed8:	f7fd fefa 	bl	801dcd0 <chk_lock>
 801fedc:	4603      	mov	r3, r0
 801fede:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801fee2:	79fb      	ldrb	r3, [r7, #7]
 801fee4:	f003 031c 	and.w	r3, r3, #28
 801fee8:	2b00      	cmp	r3, #0
 801feea:	d07f      	beq.n	801ffec <f_open+0x1c4>
			if (res != FR_OK) {					/* No file, create new */
 801feec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801fef0:	2b00      	cmp	r3, #0
 801fef2:	d017      	beq.n	801ff24 <f_open+0xfc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801fef4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801fef8:	2b04      	cmp	r3, #4
 801fefa:	d10e      	bne.n	801ff1a <f_open+0xf2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801fefc:	f7fd ff44 	bl	801dd88 <enq_lock>
 801ff00:	4603      	mov	r3, r0
 801ff02:	2b00      	cmp	r3, #0
 801ff04:	d006      	beq.n	801ff14 <f_open+0xec>
 801ff06:	f107 0314 	add.w	r3, r7, #20
 801ff0a:	4618      	mov	r0, r3
 801ff0c:	f7ff f896 	bl	801f03c <dir_register>
 801ff10:	4603      	mov	r3, r0
 801ff12:	e000      	b.n	801ff16 <f_open+0xee>
 801ff14:	2312      	movs	r3, #18
 801ff16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801ff1a:	79fb      	ldrb	r3, [r7, #7]
 801ff1c:	f043 0308 	orr.w	r3, r3, #8
 801ff20:	71fb      	strb	r3, [r7, #7]
 801ff22:	e010      	b.n	801ff46 <f_open+0x11e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801ff24:	7ebb      	ldrb	r3, [r7, #26]
 801ff26:	f003 0311 	and.w	r3, r3, #17
 801ff2a:	2b00      	cmp	r3, #0
 801ff2c:	d003      	beq.n	801ff36 <f_open+0x10e>
					res = FR_DENIED;
 801ff2e:	2307      	movs	r3, #7
 801ff30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801ff34:	e007      	b.n	801ff46 <f_open+0x11e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801ff36:	79fb      	ldrb	r3, [r7, #7]
 801ff38:	f003 0304 	and.w	r3, r3, #4
 801ff3c:	2b00      	cmp	r3, #0
 801ff3e:	d002      	beq.n	801ff46 <f_open+0x11e>
 801ff40:	2308      	movs	r3, #8
 801ff42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801ff46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801ff4a:	2b00      	cmp	r3, #0
 801ff4c:	d168      	bne.n	8020020 <f_open+0x1f8>
 801ff4e:	79fb      	ldrb	r3, [r7, #7]
 801ff50:	f003 0308 	and.w	r3, r3, #8
 801ff54:	2b00      	cmp	r3, #0
 801ff56:	d063      	beq.n	8020020 <f_open+0x1f8>
				dw = GET_FATTIME();
 801ff58:	f7fd faa0 	bl	801d49c <get_fattime>
 801ff5c:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801ff5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ff60:	330e      	adds	r3, #14
 801ff62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801ff64:	4618      	mov	r0, r3
 801ff66:	f7fd fdd9 	bl	801db1c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801ff6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ff6c:	3316      	adds	r3, #22
 801ff6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801ff70:	4618      	mov	r0, r3
 801ff72:	f7fd fdd3 	bl	801db1c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801ff76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ff78:	330b      	adds	r3, #11
 801ff7a:	2220      	movs	r2, #32
 801ff7c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801ff7e:	693b      	ldr	r3, [r7, #16]
 801ff80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ff82:	4611      	mov	r1, r2
 801ff84:	4618      	mov	r0, r3
 801ff86:	f7fe fdd2 	bl	801eb2e <ld_clust>
 801ff8a:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801ff8c:	693b      	ldr	r3, [r7, #16]
 801ff8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ff90:	2200      	movs	r2, #0
 801ff92:	4618      	mov	r0, r3
 801ff94:	f7fe fdea 	bl	801eb6c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801ff98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ff9a:	331c      	adds	r3, #28
 801ff9c:	2100      	movs	r1, #0
 801ff9e:	4618      	mov	r0, r3
 801ffa0:	f7fd fdbc 	bl	801db1c <st_dword>
					fs->wflag = 1;
 801ffa4:	693b      	ldr	r3, [r7, #16]
 801ffa6:	2201      	movs	r2, #1
 801ffa8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801ffaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ffac:	2b00      	cmp	r3, #0
 801ffae:	d037      	beq.n	8020020 <f_open+0x1f8>
						dw = fs->winsect;
 801ffb0:	693b      	ldr	r3, [r7, #16]
 801ffb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ffb4:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 801ffb6:	f107 0314 	add.w	r3, r7, #20
 801ffba:	2200      	movs	r2, #0
 801ffbc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801ffbe:	4618      	mov	r0, r3
 801ffc0:	f7fe fada 	bl	801e578 <remove_chain>
 801ffc4:	4603      	mov	r3, r0
 801ffc6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801ffca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801ffce:	2b00      	cmp	r3, #0
 801ffd0:	d126      	bne.n	8020020 <f_open+0x1f8>
							res = move_window(fs, dw);
 801ffd2:	693b      	ldr	r3, [r7, #16]
 801ffd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801ffd6:	4618      	mov	r0, r3
 801ffd8:	f7fe f82a 	bl	801e030 <move_window>
 801ffdc:	4603      	mov	r3, r0
 801ffde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801ffe2:	693b      	ldr	r3, [r7, #16]
 801ffe4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ffe6:	3a01      	subs	r2, #1
 801ffe8:	619a      	str	r2, [r3, #24]
 801ffea:	e019      	b.n	8020020 <f_open+0x1f8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801ffec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801fff0:	2b00      	cmp	r3, #0
 801fff2:	d115      	bne.n	8020020 <f_open+0x1f8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801fff4:	7ebb      	ldrb	r3, [r7, #26]
 801fff6:	f003 0310 	and.w	r3, r3, #16
 801fffa:	2b00      	cmp	r3, #0
 801fffc:	d003      	beq.n	8020006 <f_open+0x1de>
					res = FR_NO_FILE;
 801fffe:	2304      	movs	r3, #4
 8020000:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8020004:	e00c      	b.n	8020020 <f_open+0x1f8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8020006:	79fb      	ldrb	r3, [r7, #7]
 8020008:	f003 0302 	and.w	r3, r3, #2
 802000c:	2b00      	cmp	r3, #0
 802000e:	d007      	beq.n	8020020 <f_open+0x1f8>
 8020010:	7ebb      	ldrb	r3, [r7, #26]
 8020012:	f003 0301 	and.w	r3, r3, #1
 8020016:	2b00      	cmp	r3, #0
 8020018:	d002      	beq.n	8020020 <f_open+0x1f8>
						res = FR_DENIED;
 802001a:	2307      	movs	r3, #7
 802001c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8020020:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8020024:	2b00      	cmp	r3, #0
 8020026:	d128      	bne.n	802007a <f_open+0x252>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8020028:	79fb      	ldrb	r3, [r7, #7]
 802002a:	f003 0308 	and.w	r3, r3, #8
 802002e:	2b00      	cmp	r3, #0
 8020030:	d003      	beq.n	802003a <f_open+0x212>
				mode |= FA_MODIFIED;
 8020032:	79fb      	ldrb	r3, [r7, #7]
 8020034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020038:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 802003a:	693b      	ldr	r3, [r7, #16]
 802003c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802003e:	68fb      	ldr	r3, [r7, #12]
 8020040:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8020042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020044:	68fb      	ldr	r3, [r7, #12]
 8020046:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8020048:	79fb      	ldrb	r3, [r7, #7]
 802004a:	f023 0301 	bic.w	r3, r3, #1
 802004e:	2b00      	cmp	r3, #0
 8020050:	bf14      	ite	ne
 8020052:	2301      	movne	r3, #1
 8020054:	2300      	moveq	r3, #0
 8020056:	b2db      	uxtb	r3, r3
 8020058:	461a      	mov	r2, r3
 802005a:	f107 0314 	add.w	r3, r7, #20
 802005e:	4611      	mov	r1, r2
 8020060:	4618      	mov	r0, r3
 8020062:	f7fd feb3 	bl	801ddcc <inc_lock>
 8020066:	4602      	mov	r2, r0
 8020068:	68fb      	ldr	r3, [r7, #12]
 802006a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 802006c:	68fb      	ldr	r3, [r7, #12]
 802006e:	691b      	ldr	r3, [r3, #16]
 8020070:	2b00      	cmp	r3, #0
 8020072:	d102      	bne.n	802007a <f_open+0x252>
 8020074:	2302      	movs	r3, #2
 8020076:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 802007a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 802007e:	2b00      	cmp	r3, #0
 8020080:	f040 80a3 	bne.w	80201ca <f_open+0x3a2>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8020084:	693b      	ldr	r3, [r7, #16]
 8020086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020088:	4611      	mov	r1, r2
 802008a:	4618      	mov	r0, r3
 802008c:	f7fe fd4f 	bl	801eb2e <ld_clust>
 8020090:	4602      	mov	r2, r0
 8020092:	68fb      	ldr	r3, [r7, #12]
 8020094:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8020096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020098:	331c      	adds	r3, #28
 802009a:	4618      	mov	r0, r3
 802009c:	f7fd fd00 	bl	801daa0 <ld_dword>
 80200a0:	4602      	mov	r2, r0
 80200a2:	68fb      	ldr	r3, [r7, #12]
 80200a4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80200a6:	68fb      	ldr	r3, [r7, #12]
 80200a8:	2200      	movs	r2, #0
 80200aa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80200ac:	693a      	ldr	r2, [r7, #16]
 80200ae:	68fb      	ldr	r3, [r7, #12]
 80200b0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80200b2:	693b      	ldr	r3, [r7, #16]
 80200b4:	88da      	ldrh	r2, [r3, #6]
 80200b6:	68fb      	ldr	r3, [r7, #12]
 80200b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80200ba:	68fb      	ldr	r3, [r7, #12]
 80200bc:	79fa      	ldrb	r2, [r7, #7]
 80200be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80200c0:	68fb      	ldr	r3, [r7, #12]
 80200c2:	2200      	movs	r2, #0
 80200c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80200c6:	68fb      	ldr	r3, [r7, #12]
 80200c8:	2200      	movs	r2, #0
 80200ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80200cc:	68fb      	ldr	r3, [r7, #12]
 80200ce:	2200      	movs	r2, #0
 80200d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80200d2:	68fb      	ldr	r3, [r7, #12]
 80200d4:	3330      	adds	r3, #48	; 0x30
 80200d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80200da:	2100      	movs	r1, #0
 80200dc:	4618      	mov	r0, r3
 80200de:	f7fd fd6a 	bl	801dbb6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80200e2:	79fb      	ldrb	r3, [r7, #7]
 80200e4:	f003 0320 	and.w	r3, r3, #32
 80200e8:	2b00      	cmp	r3, #0
 80200ea:	d06e      	beq.n	80201ca <f_open+0x3a2>
 80200ec:	68fb      	ldr	r3, [r7, #12]
 80200ee:	68db      	ldr	r3, [r3, #12]
 80200f0:	2b00      	cmp	r3, #0
 80200f2:	d06a      	beq.n	80201ca <f_open+0x3a2>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80200f4:	68fb      	ldr	r3, [r7, #12]
 80200f6:	68da      	ldr	r2, [r3, #12]
 80200f8:	68fb      	ldr	r3, [r7, #12]
 80200fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80200fc:	693b      	ldr	r3, [r7, #16]
 80200fe:	895b      	ldrh	r3, [r3, #10]
 8020100:	461a      	mov	r2, r3
 8020102:	693b      	ldr	r3, [r7, #16]
 8020104:	899b      	ldrh	r3, [r3, #12]
 8020106:	fb03 f302 	mul.w	r3, r3, r2
 802010a:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 802010c:	68fb      	ldr	r3, [r7, #12]
 802010e:	689b      	ldr	r3, [r3, #8]
 8020110:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8020112:	68fb      	ldr	r3, [r7, #12]
 8020114:	68db      	ldr	r3, [r3, #12]
 8020116:	65fb      	str	r3, [r7, #92]	; 0x5c
 8020118:	e016      	b.n	8020148 <f_open+0x320>
					clst = get_fat(&fp->obj, clst);
 802011a:	68fb      	ldr	r3, [r7, #12]
 802011c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 802011e:	4618      	mov	r0, r3
 8020120:	f7fe f843 	bl	801e1aa <get_fat>
 8020124:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8020126:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8020128:	2b01      	cmp	r3, #1
 802012a:	d802      	bhi.n	8020132 <f_open+0x30a>
 802012c:	2302      	movs	r3, #2
 802012e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8020132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8020134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020138:	d102      	bne.n	8020140 <f_open+0x318>
 802013a:	2301      	movs	r3, #1
 802013c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8020140:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8020142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020144:	1ad3      	subs	r3, r2, r3
 8020146:	65fb      	str	r3, [r7, #92]	; 0x5c
 8020148:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 802014c:	2b00      	cmp	r3, #0
 802014e:	d103      	bne.n	8020158 <f_open+0x330>
 8020150:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8020152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020154:	429a      	cmp	r2, r3
 8020156:	d8e0      	bhi.n	802011a <f_open+0x2f2>
				}
				fp->clust = clst;
 8020158:	68fb      	ldr	r3, [r7, #12]
 802015a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802015c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 802015e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8020162:	2b00      	cmp	r3, #0
 8020164:	d131      	bne.n	80201ca <f_open+0x3a2>
 8020166:	693b      	ldr	r3, [r7, #16]
 8020168:	899b      	ldrh	r3, [r3, #12]
 802016a:	461a      	mov	r2, r3
 802016c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802016e:	fbb3 f1f2 	udiv	r1, r3, r2
 8020172:	fb02 f201 	mul.w	r2, r2, r1
 8020176:	1a9b      	subs	r3, r3, r2
 8020178:	2b00      	cmp	r3, #0
 802017a:	d026      	beq.n	80201ca <f_open+0x3a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 802017c:	693b      	ldr	r3, [r7, #16]
 802017e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8020180:	4618      	mov	r0, r3
 8020182:	f7fd fff3 	bl	801e16c <clust2sect>
 8020186:	64b8      	str	r0, [r7, #72]	; 0x48
 8020188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802018a:	2b00      	cmp	r3, #0
 802018c:	d103      	bne.n	8020196 <f_open+0x36e>
						res = FR_INT_ERR;
 802018e:	2302      	movs	r3, #2
 8020190:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8020194:	e019      	b.n	80201ca <f_open+0x3a2>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8020196:	693b      	ldr	r3, [r7, #16]
 8020198:	899b      	ldrh	r3, [r3, #12]
 802019a:	461a      	mov	r2, r3
 802019c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802019e:	fbb3 f2f2 	udiv	r2, r3, r2
 80201a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80201a4:	441a      	add	r2, r3
 80201a6:	68fb      	ldr	r3, [r7, #12]
 80201a8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80201aa:	693b      	ldr	r3, [r7, #16]
 80201ac:	7858      	ldrb	r0, [r3, #1]
 80201ae:	68fb      	ldr	r3, [r7, #12]
 80201b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80201b4:	68fb      	ldr	r3, [r7, #12]
 80201b6:	6a1a      	ldr	r2, [r3, #32]
 80201b8:	2301      	movs	r3, #1
 80201ba:	f7fd fbfb 	bl	801d9b4 <disk_read>
 80201be:	4603      	mov	r3, r0
 80201c0:	2b00      	cmp	r3, #0
 80201c2:	d002      	beq.n	80201ca <f_open+0x3a2>
 80201c4:	2301      	movs	r3, #1
 80201c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 80201ca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80201cc:	f000 fc05 	bl	80209da <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80201d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80201d4:	2b00      	cmp	r3, #0
 80201d6:	d002      	beq.n	80201de <f_open+0x3b6>
 80201d8:	68fb      	ldr	r3, [r7, #12]
 80201da:	2200      	movs	r2, #0
 80201dc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80201de:	693b      	ldr	r3, [r7, #16]
 80201e0:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80201e4:	4611      	mov	r1, r2
 80201e6:	4618      	mov	r0, r3
 80201e8:	f7fd fd57 	bl	801dc9a <unlock_fs>
 80201ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80201f0:	4618      	mov	r0, r3
 80201f2:	3768      	adds	r7, #104	; 0x68
 80201f4:	46bd      	mov	sp, r7
 80201f6:	bd80      	pop	{r7, pc}

080201f8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80201f8:	b580      	push	{r7, lr}
 80201fa:	b08c      	sub	sp, #48	; 0x30
 80201fc:	af00      	add	r7, sp, #0
 80201fe:	60f8      	str	r0, [r7, #12]
 8020200:	60b9      	str	r1, [r7, #8]
 8020202:	607a      	str	r2, [r7, #4]
 8020204:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8020206:	68bb      	ldr	r3, [r7, #8]
 8020208:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 802020a:	683b      	ldr	r3, [r7, #0]
 802020c:	2200      	movs	r2, #0
 802020e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8020210:	68fb      	ldr	r3, [r7, #12]
 8020212:	f107 0210 	add.w	r2, r7, #16
 8020216:	4611      	mov	r1, r2
 8020218:	4618      	mov	r0, r3
 802021a:	f7ff fd59 	bl	801fcd0 <validate>
 802021e:	4603      	mov	r3, r0
 8020220:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8020224:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8020228:	2b00      	cmp	r3, #0
 802022a:	d107      	bne.n	802023c <f_write+0x44>
 802022c:	68fb      	ldr	r3, [r7, #12]
 802022e:	7d5b      	ldrb	r3, [r3, #21]
 8020230:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8020234:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8020238:	2b00      	cmp	r3, #0
 802023a:	d009      	beq.n	8020250 <f_write+0x58>
 802023c:	693b      	ldr	r3, [r7, #16]
 802023e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8020242:	4611      	mov	r1, r2
 8020244:	4618      	mov	r0, r3
 8020246:	f7fd fd28 	bl	801dc9a <unlock_fs>
 802024a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802024e:	e192      	b.n	8020576 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8020250:	68fb      	ldr	r3, [r7, #12]
 8020252:	7d1b      	ldrb	r3, [r3, #20]
 8020254:	f003 0302 	and.w	r3, r3, #2
 8020258:	2b00      	cmp	r3, #0
 802025a:	d106      	bne.n	802026a <f_write+0x72>
 802025c:	693b      	ldr	r3, [r7, #16]
 802025e:	2107      	movs	r1, #7
 8020260:	4618      	mov	r0, r3
 8020262:	f7fd fd1a 	bl	801dc9a <unlock_fs>
 8020266:	2307      	movs	r3, #7
 8020268:	e185      	b.n	8020576 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 802026a:	68fb      	ldr	r3, [r7, #12]
 802026c:	699a      	ldr	r2, [r3, #24]
 802026e:	687b      	ldr	r3, [r7, #4]
 8020270:	441a      	add	r2, r3
 8020272:	68fb      	ldr	r3, [r7, #12]
 8020274:	699b      	ldr	r3, [r3, #24]
 8020276:	429a      	cmp	r2, r3
 8020278:	f080 816a 	bcs.w	8020550 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 802027c:	68fb      	ldr	r3, [r7, #12]
 802027e:	699b      	ldr	r3, [r3, #24]
 8020280:	43db      	mvns	r3, r3
 8020282:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8020284:	e164      	b.n	8020550 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8020286:	68fb      	ldr	r3, [r7, #12]
 8020288:	699b      	ldr	r3, [r3, #24]
 802028a:	693a      	ldr	r2, [r7, #16]
 802028c:	8992      	ldrh	r2, [r2, #12]
 802028e:	fbb3 f1f2 	udiv	r1, r3, r2
 8020292:	fb02 f201 	mul.w	r2, r2, r1
 8020296:	1a9b      	subs	r3, r3, r2
 8020298:	2b00      	cmp	r3, #0
 802029a:	f040 810f 	bne.w	80204bc <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 802029e:	68fb      	ldr	r3, [r7, #12]
 80202a0:	699b      	ldr	r3, [r3, #24]
 80202a2:	693a      	ldr	r2, [r7, #16]
 80202a4:	8992      	ldrh	r2, [r2, #12]
 80202a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80202aa:	693a      	ldr	r2, [r7, #16]
 80202ac:	8952      	ldrh	r2, [r2, #10]
 80202ae:	3a01      	subs	r2, #1
 80202b0:	4013      	ands	r3, r2
 80202b2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80202b4:	69bb      	ldr	r3, [r7, #24]
 80202b6:	2b00      	cmp	r3, #0
 80202b8:	d14d      	bne.n	8020356 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80202ba:	68fb      	ldr	r3, [r7, #12]
 80202bc:	699b      	ldr	r3, [r3, #24]
 80202be:	2b00      	cmp	r3, #0
 80202c0:	d10c      	bne.n	80202dc <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80202c2:	68fb      	ldr	r3, [r7, #12]
 80202c4:	689b      	ldr	r3, [r3, #8]
 80202c6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80202c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d11a      	bne.n	8020304 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80202ce:	68fb      	ldr	r3, [r7, #12]
 80202d0:	2100      	movs	r1, #0
 80202d2:	4618      	mov	r0, r3
 80202d4:	f7fe f9b5 	bl	801e642 <create_chain>
 80202d8:	62b8      	str	r0, [r7, #40]	; 0x28
 80202da:	e013      	b.n	8020304 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80202dc:	68fb      	ldr	r3, [r7, #12]
 80202de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80202e0:	2b00      	cmp	r3, #0
 80202e2:	d007      	beq.n	80202f4 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80202e4:	68fb      	ldr	r3, [r7, #12]
 80202e6:	699b      	ldr	r3, [r3, #24]
 80202e8:	4619      	mov	r1, r3
 80202ea:	68f8      	ldr	r0, [r7, #12]
 80202ec:	f7fe fa41 	bl	801e772 <clmt_clust>
 80202f0:	62b8      	str	r0, [r7, #40]	; 0x28
 80202f2:	e007      	b.n	8020304 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80202f4:	68fa      	ldr	r2, [r7, #12]
 80202f6:	68fb      	ldr	r3, [r7, #12]
 80202f8:	69db      	ldr	r3, [r3, #28]
 80202fa:	4619      	mov	r1, r3
 80202fc:	4610      	mov	r0, r2
 80202fe:	f7fe f9a0 	bl	801e642 <create_chain>
 8020302:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8020304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020306:	2b00      	cmp	r3, #0
 8020308:	f000 8127 	beq.w	802055a <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 802030c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802030e:	2b01      	cmp	r3, #1
 8020310:	d109      	bne.n	8020326 <f_write+0x12e>
 8020312:	68fb      	ldr	r3, [r7, #12]
 8020314:	2202      	movs	r2, #2
 8020316:	755a      	strb	r2, [r3, #21]
 8020318:	693b      	ldr	r3, [r7, #16]
 802031a:	2102      	movs	r1, #2
 802031c:	4618      	mov	r0, r3
 802031e:	f7fd fcbc 	bl	801dc9a <unlock_fs>
 8020322:	2302      	movs	r3, #2
 8020324:	e127      	b.n	8020576 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8020326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020328:	f1b3 3fff 	cmp.w	r3, #4294967295
 802032c:	d109      	bne.n	8020342 <f_write+0x14a>
 802032e:	68fb      	ldr	r3, [r7, #12]
 8020330:	2201      	movs	r2, #1
 8020332:	755a      	strb	r2, [r3, #21]
 8020334:	693b      	ldr	r3, [r7, #16]
 8020336:	2101      	movs	r1, #1
 8020338:	4618      	mov	r0, r3
 802033a:	f7fd fcae 	bl	801dc9a <unlock_fs>
 802033e:	2301      	movs	r3, #1
 8020340:	e119      	b.n	8020576 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8020342:	68fb      	ldr	r3, [r7, #12]
 8020344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020346:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8020348:	68fb      	ldr	r3, [r7, #12]
 802034a:	689b      	ldr	r3, [r3, #8]
 802034c:	2b00      	cmp	r3, #0
 802034e:	d102      	bne.n	8020356 <f_write+0x15e>
 8020350:	68fb      	ldr	r3, [r7, #12]
 8020352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020354:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8020356:	68fb      	ldr	r3, [r7, #12]
 8020358:	7d1b      	ldrb	r3, [r3, #20]
 802035a:	b25b      	sxtb	r3, r3
 802035c:	2b00      	cmp	r3, #0
 802035e:	da1d      	bge.n	802039c <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8020360:	693b      	ldr	r3, [r7, #16]
 8020362:	7858      	ldrb	r0, [r3, #1]
 8020364:	68fb      	ldr	r3, [r7, #12]
 8020366:	f103 0130 	add.w	r1, r3, #48	; 0x30
 802036a:	68fb      	ldr	r3, [r7, #12]
 802036c:	6a1a      	ldr	r2, [r3, #32]
 802036e:	2301      	movs	r3, #1
 8020370:	f7fd fb40 	bl	801d9f4 <disk_write>
 8020374:	4603      	mov	r3, r0
 8020376:	2b00      	cmp	r3, #0
 8020378:	d009      	beq.n	802038e <f_write+0x196>
 802037a:	68fb      	ldr	r3, [r7, #12]
 802037c:	2201      	movs	r2, #1
 802037e:	755a      	strb	r2, [r3, #21]
 8020380:	693b      	ldr	r3, [r7, #16]
 8020382:	2101      	movs	r1, #1
 8020384:	4618      	mov	r0, r3
 8020386:	f7fd fc88 	bl	801dc9a <unlock_fs>
 802038a:	2301      	movs	r3, #1
 802038c:	e0f3      	b.n	8020576 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 802038e:	68fb      	ldr	r3, [r7, #12]
 8020390:	7d1b      	ldrb	r3, [r3, #20]
 8020392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020396:	b2da      	uxtb	r2, r3
 8020398:	68fb      	ldr	r3, [r7, #12]
 802039a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 802039c:	693a      	ldr	r2, [r7, #16]
 802039e:	68fb      	ldr	r3, [r7, #12]
 80203a0:	69db      	ldr	r3, [r3, #28]
 80203a2:	4619      	mov	r1, r3
 80203a4:	4610      	mov	r0, r2
 80203a6:	f7fd fee1 	bl	801e16c <clust2sect>
 80203aa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80203ac:	697b      	ldr	r3, [r7, #20]
 80203ae:	2b00      	cmp	r3, #0
 80203b0:	d109      	bne.n	80203c6 <f_write+0x1ce>
 80203b2:	68fb      	ldr	r3, [r7, #12]
 80203b4:	2202      	movs	r2, #2
 80203b6:	755a      	strb	r2, [r3, #21]
 80203b8:	693b      	ldr	r3, [r7, #16]
 80203ba:	2102      	movs	r1, #2
 80203bc:	4618      	mov	r0, r3
 80203be:	f7fd fc6c 	bl	801dc9a <unlock_fs>
 80203c2:	2302      	movs	r3, #2
 80203c4:	e0d7      	b.n	8020576 <f_write+0x37e>
			sect += csect;
 80203c6:	697a      	ldr	r2, [r7, #20]
 80203c8:	69bb      	ldr	r3, [r7, #24]
 80203ca:	4413      	add	r3, r2
 80203cc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80203ce:	693b      	ldr	r3, [r7, #16]
 80203d0:	899b      	ldrh	r3, [r3, #12]
 80203d2:	461a      	mov	r2, r3
 80203d4:	687b      	ldr	r3, [r7, #4]
 80203d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80203da:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80203dc:	6a3b      	ldr	r3, [r7, #32]
 80203de:	2b00      	cmp	r3, #0
 80203e0:	d048      	beq.n	8020474 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80203e2:	69ba      	ldr	r2, [r7, #24]
 80203e4:	6a3b      	ldr	r3, [r7, #32]
 80203e6:	4413      	add	r3, r2
 80203e8:	693a      	ldr	r2, [r7, #16]
 80203ea:	8952      	ldrh	r2, [r2, #10]
 80203ec:	4293      	cmp	r3, r2
 80203ee:	d905      	bls.n	80203fc <f_write+0x204>
					cc = fs->csize - csect;
 80203f0:	693b      	ldr	r3, [r7, #16]
 80203f2:	895b      	ldrh	r3, [r3, #10]
 80203f4:	461a      	mov	r2, r3
 80203f6:	69bb      	ldr	r3, [r7, #24]
 80203f8:	1ad3      	subs	r3, r2, r3
 80203fa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80203fc:	693b      	ldr	r3, [r7, #16]
 80203fe:	7858      	ldrb	r0, [r3, #1]
 8020400:	6a3b      	ldr	r3, [r7, #32]
 8020402:	697a      	ldr	r2, [r7, #20]
 8020404:	69f9      	ldr	r1, [r7, #28]
 8020406:	f7fd faf5 	bl	801d9f4 <disk_write>
 802040a:	4603      	mov	r3, r0
 802040c:	2b00      	cmp	r3, #0
 802040e:	d009      	beq.n	8020424 <f_write+0x22c>
 8020410:	68fb      	ldr	r3, [r7, #12]
 8020412:	2201      	movs	r2, #1
 8020414:	755a      	strb	r2, [r3, #21]
 8020416:	693b      	ldr	r3, [r7, #16]
 8020418:	2101      	movs	r1, #1
 802041a:	4618      	mov	r0, r3
 802041c:	f7fd fc3d 	bl	801dc9a <unlock_fs>
 8020420:	2301      	movs	r3, #1
 8020422:	e0a8      	b.n	8020576 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8020424:	68fb      	ldr	r3, [r7, #12]
 8020426:	6a1a      	ldr	r2, [r3, #32]
 8020428:	697b      	ldr	r3, [r7, #20]
 802042a:	1ad3      	subs	r3, r2, r3
 802042c:	6a3a      	ldr	r2, [r7, #32]
 802042e:	429a      	cmp	r2, r3
 8020430:	d918      	bls.n	8020464 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8020432:	68fb      	ldr	r3, [r7, #12]
 8020434:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8020438:	68fb      	ldr	r3, [r7, #12]
 802043a:	6a1a      	ldr	r2, [r3, #32]
 802043c:	697b      	ldr	r3, [r7, #20]
 802043e:	1ad3      	subs	r3, r2, r3
 8020440:	693a      	ldr	r2, [r7, #16]
 8020442:	8992      	ldrh	r2, [r2, #12]
 8020444:	fb02 f303 	mul.w	r3, r2, r3
 8020448:	69fa      	ldr	r2, [r7, #28]
 802044a:	18d1      	adds	r1, r2, r3
 802044c:	693b      	ldr	r3, [r7, #16]
 802044e:	899b      	ldrh	r3, [r3, #12]
 8020450:	461a      	mov	r2, r3
 8020452:	f7fd fb8f 	bl	801db74 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8020456:	68fb      	ldr	r3, [r7, #12]
 8020458:	7d1b      	ldrb	r3, [r3, #20]
 802045a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802045e:	b2da      	uxtb	r2, r3
 8020460:	68fb      	ldr	r3, [r7, #12]
 8020462:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8020464:	693b      	ldr	r3, [r7, #16]
 8020466:	899b      	ldrh	r3, [r3, #12]
 8020468:	461a      	mov	r2, r3
 802046a:	6a3b      	ldr	r3, [r7, #32]
 802046c:	fb02 f303 	mul.w	r3, r2, r3
 8020470:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8020472:	e050      	b.n	8020516 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8020474:	68fb      	ldr	r3, [r7, #12]
 8020476:	6a1b      	ldr	r3, [r3, #32]
 8020478:	697a      	ldr	r2, [r7, #20]
 802047a:	429a      	cmp	r2, r3
 802047c:	d01b      	beq.n	80204b6 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 802047e:	68fb      	ldr	r3, [r7, #12]
 8020480:	699a      	ldr	r2, [r3, #24]
 8020482:	68fb      	ldr	r3, [r7, #12]
 8020484:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8020486:	429a      	cmp	r2, r3
 8020488:	d215      	bcs.n	80204b6 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 802048a:	693b      	ldr	r3, [r7, #16]
 802048c:	7858      	ldrb	r0, [r3, #1]
 802048e:	68fb      	ldr	r3, [r7, #12]
 8020490:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8020494:	2301      	movs	r3, #1
 8020496:	697a      	ldr	r2, [r7, #20]
 8020498:	f7fd fa8c 	bl	801d9b4 <disk_read>
 802049c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 802049e:	2b00      	cmp	r3, #0
 80204a0:	d009      	beq.n	80204b6 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80204a2:	68fb      	ldr	r3, [r7, #12]
 80204a4:	2201      	movs	r2, #1
 80204a6:	755a      	strb	r2, [r3, #21]
 80204a8:	693b      	ldr	r3, [r7, #16]
 80204aa:	2101      	movs	r1, #1
 80204ac:	4618      	mov	r0, r3
 80204ae:	f7fd fbf4 	bl	801dc9a <unlock_fs>
 80204b2:	2301      	movs	r3, #1
 80204b4:	e05f      	b.n	8020576 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 80204b6:	68fb      	ldr	r3, [r7, #12]
 80204b8:	697a      	ldr	r2, [r7, #20]
 80204ba:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80204bc:	693b      	ldr	r3, [r7, #16]
 80204be:	899b      	ldrh	r3, [r3, #12]
 80204c0:	4618      	mov	r0, r3
 80204c2:	68fb      	ldr	r3, [r7, #12]
 80204c4:	699b      	ldr	r3, [r3, #24]
 80204c6:	693a      	ldr	r2, [r7, #16]
 80204c8:	8992      	ldrh	r2, [r2, #12]
 80204ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80204ce:	fb02 f201 	mul.w	r2, r2, r1
 80204d2:	1a9b      	subs	r3, r3, r2
 80204d4:	1ac3      	subs	r3, r0, r3
 80204d6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80204d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80204da:	687b      	ldr	r3, [r7, #4]
 80204dc:	429a      	cmp	r2, r3
 80204de:	d901      	bls.n	80204e4 <f_write+0x2ec>
 80204e0:	687b      	ldr	r3, [r7, #4]
 80204e2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80204e4:	68fb      	ldr	r3, [r7, #12]
 80204e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80204ea:	68fb      	ldr	r3, [r7, #12]
 80204ec:	699b      	ldr	r3, [r3, #24]
 80204ee:	693a      	ldr	r2, [r7, #16]
 80204f0:	8992      	ldrh	r2, [r2, #12]
 80204f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80204f6:	fb02 f200 	mul.w	r2, r2, r0
 80204fa:	1a9b      	subs	r3, r3, r2
 80204fc:	440b      	add	r3, r1
 80204fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020500:	69f9      	ldr	r1, [r7, #28]
 8020502:	4618      	mov	r0, r3
 8020504:	f7fd fb36 	bl	801db74 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8020508:	68fb      	ldr	r3, [r7, #12]
 802050a:	7d1b      	ldrb	r3, [r3, #20]
 802050c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8020510:	b2da      	uxtb	r2, r3
 8020512:	68fb      	ldr	r3, [r7, #12]
 8020514:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8020516:	69fa      	ldr	r2, [r7, #28]
 8020518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802051a:	4413      	add	r3, r2
 802051c:	61fb      	str	r3, [r7, #28]
 802051e:	68fb      	ldr	r3, [r7, #12]
 8020520:	699a      	ldr	r2, [r3, #24]
 8020522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020524:	441a      	add	r2, r3
 8020526:	68fb      	ldr	r3, [r7, #12]
 8020528:	619a      	str	r2, [r3, #24]
 802052a:	68fb      	ldr	r3, [r7, #12]
 802052c:	68da      	ldr	r2, [r3, #12]
 802052e:	68fb      	ldr	r3, [r7, #12]
 8020530:	699b      	ldr	r3, [r3, #24]
 8020532:	429a      	cmp	r2, r3
 8020534:	bf38      	it	cc
 8020536:	461a      	movcc	r2, r3
 8020538:	68fb      	ldr	r3, [r7, #12]
 802053a:	60da      	str	r2, [r3, #12]
 802053c:	683b      	ldr	r3, [r7, #0]
 802053e:	681a      	ldr	r2, [r3, #0]
 8020540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020542:	441a      	add	r2, r3
 8020544:	683b      	ldr	r3, [r7, #0]
 8020546:	601a      	str	r2, [r3, #0]
 8020548:	687a      	ldr	r2, [r7, #4]
 802054a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802054c:	1ad3      	subs	r3, r2, r3
 802054e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8020550:	687b      	ldr	r3, [r7, #4]
 8020552:	2b00      	cmp	r3, #0
 8020554:	f47f ae97 	bne.w	8020286 <f_write+0x8e>
 8020558:	e000      	b.n	802055c <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 802055a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 802055c:	68fb      	ldr	r3, [r7, #12]
 802055e:	7d1b      	ldrb	r3, [r3, #20]
 8020560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020564:	b2da      	uxtb	r2, r3
 8020566:	68fb      	ldr	r3, [r7, #12]
 8020568:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 802056a:	693b      	ldr	r3, [r7, #16]
 802056c:	2100      	movs	r1, #0
 802056e:	4618      	mov	r0, r3
 8020570:	f7fd fb93 	bl	801dc9a <unlock_fs>
 8020574:	2300      	movs	r3, #0
}
 8020576:	4618      	mov	r0, r3
 8020578:	3730      	adds	r7, #48	; 0x30
 802057a:	46bd      	mov	sp, r7
 802057c:	bd80      	pop	{r7, pc}

0802057e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 802057e:	b580      	push	{r7, lr}
 8020580:	b086      	sub	sp, #24
 8020582:	af00      	add	r7, sp, #0
 8020584:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8020586:	687b      	ldr	r3, [r7, #4]
 8020588:	f107 0208 	add.w	r2, r7, #8
 802058c:	4611      	mov	r1, r2
 802058e:	4618      	mov	r0, r3
 8020590:	f7ff fb9e 	bl	801fcd0 <validate>
 8020594:	4603      	mov	r3, r0
 8020596:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8020598:	7dfb      	ldrb	r3, [r7, #23]
 802059a:	2b00      	cmp	r3, #0
 802059c:	d16d      	bne.n	802067a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 802059e:	687b      	ldr	r3, [r7, #4]
 80205a0:	7d1b      	ldrb	r3, [r3, #20]
 80205a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80205a6:	2b00      	cmp	r3, #0
 80205a8:	d067      	beq.n	802067a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80205aa:	687b      	ldr	r3, [r7, #4]
 80205ac:	7d1b      	ldrb	r3, [r3, #20]
 80205ae:	b25b      	sxtb	r3, r3
 80205b0:	2b00      	cmp	r3, #0
 80205b2:	da1a      	bge.n	80205ea <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80205b4:	68bb      	ldr	r3, [r7, #8]
 80205b6:	7858      	ldrb	r0, [r3, #1]
 80205b8:	687b      	ldr	r3, [r7, #4]
 80205ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80205be:	687b      	ldr	r3, [r7, #4]
 80205c0:	6a1a      	ldr	r2, [r3, #32]
 80205c2:	2301      	movs	r3, #1
 80205c4:	f7fd fa16 	bl	801d9f4 <disk_write>
 80205c8:	4603      	mov	r3, r0
 80205ca:	2b00      	cmp	r3, #0
 80205cc:	d006      	beq.n	80205dc <f_sync+0x5e>
 80205ce:	68bb      	ldr	r3, [r7, #8]
 80205d0:	2101      	movs	r1, #1
 80205d2:	4618      	mov	r0, r3
 80205d4:	f7fd fb61 	bl	801dc9a <unlock_fs>
 80205d8:	2301      	movs	r3, #1
 80205da:	e055      	b.n	8020688 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80205dc:	687b      	ldr	r3, [r7, #4]
 80205de:	7d1b      	ldrb	r3, [r3, #20]
 80205e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80205e4:	b2da      	uxtb	r2, r3
 80205e6:	687b      	ldr	r3, [r7, #4]
 80205e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80205ea:	f7fc ff57 	bl	801d49c <get_fattime>
 80205ee:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80205f0:	68ba      	ldr	r2, [r7, #8]
 80205f2:	687b      	ldr	r3, [r7, #4]
 80205f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80205f6:	4619      	mov	r1, r3
 80205f8:	4610      	mov	r0, r2
 80205fa:	f7fd fd19 	bl	801e030 <move_window>
 80205fe:	4603      	mov	r3, r0
 8020600:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8020602:	7dfb      	ldrb	r3, [r7, #23]
 8020604:	2b00      	cmp	r3, #0
 8020606:	d138      	bne.n	802067a <f_sync+0xfc>
					dir = fp->dir_ptr;
 8020608:	687b      	ldr	r3, [r7, #4]
 802060a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802060c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 802060e:	68fb      	ldr	r3, [r7, #12]
 8020610:	330b      	adds	r3, #11
 8020612:	781a      	ldrb	r2, [r3, #0]
 8020614:	68fb      	ldr	r3, [r7, #12]
 8020616:	330b      	adds	r3, #11
 8020618:	f042 0220 	orr.w	r2, r2, #32
 802061c:	b2d2      	uxtb	r2, r2
 802061e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8020620:	687b      	ldr	r3, [r7, #4]
 8020622:	6818      	ldr	r0, [r3, #0]
 8020624:	687b      	ldr	r3, [r7, #4]
 8020626:	689b      	ldr	r3, [r3, #8]
 8020628:	461a      	mov	r2, r3
 802062a:	68f9      	ldr	r1, [r7, #12]
 802062c:	f7fe fa9e 	bl	801eb6c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8020630:	68fb      	ldr	r3, [r7, #12]
 8020632:	f103 021c 	add.w	r2, r3, #28
 8020636:	687b      	ldr	r3, [r7, #4]
 8020638:	68db      	ldr	r3, [r3, #12]
 802063a:	4619      	mov	r1, r3
 802063c:	4610      	mov	r0, r2
 802063e:	f7fd fa6d 	bl	801db1c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8020642:	68fb      	ldr	r3, [r7, #12]
 8020644:	3316      	adds	r3, #22
 8020646:	6939      	ldr	r1, [r7, #16]
 8020648:	4618      	mov	r0, r3
 802064a:	f7fd fa67 	bl	801db1c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 802064e:	68fb      	ldr	r3, [r7, #12]
 8020650:	3312      	adds	r3, #18
 8020652:	2100      	movs	r1, #0
 8020654:	4618      	mov	r0, r3
 8020656:	f7fd fa46 	bl	801dae6 <st_word>
					fs->wflag = 1;
 802065a:	68bb      	ldr	r3, [r7, #8]
 802065c:	2201      	movs	r2, #1
 802065e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8020660:	68bb      	ldr	r3, [r7, #8]
 8020662:	4618      	mov	r0, r3
 8020664:	f7fd fd12 	bl	801e08c <sync_fs>
 8020668:	4603      	mov	r3, r0
 802066a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 802066c:	687b      	ldr	r3, [r7, #4]
 802066e:	7d1b      	ldrb	r3, [r3, #20]
 8020670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8020674:	b2da      	uxtb	r2, r3
 8020676:	687b      	ldr	r3, [r7, #4]
 8020678:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 802067a:	68bb      	ldr	r3, [r7, #8]
 802067c:	7dfa      	ldrb	r2, [r7, #23]
 802067e:	4611      	mov	r1, r2
 8020680:	4618      	mov	r0, r3
 8020682:	f7fd fb0a 	bl	801dc9a <unlock_fs>
 8020686:	7dfb      	ldrb	r3, [r7, #23]
}
 8020688:	4618      	mov	r0, r3
 802068a:	3718      	adds	r7, #24
 802068c:	46bd      	mov	sp, r7
 802068e:	bd80      	pop	{r7, pc}

08020690 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8020690:	b580      	push	{r7, lr}
 8020692:	b084      	sub	sp, #16
 8020694:	af00      	add	r7, sp, #0
 8020696:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8020698:	6878      	ldr	r0, [r7, #4]
 802069a:	f7ff ff70 	bl	802057e <f_sync>
 802069e:	4603      	mov	r3, r0
 80206a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80206a2:	7bfb      	ldrb	r3, [r7, #15]
 80206a4:	2b00      	cmp	r3, #0
 80206a6:	d11d      	bne.n	80206e4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80206a8:	687b      	ldr	r3, [r7, #4]
 80206aa:	f107 0208 	add.w	r2, r7, #8
 80206ae:	4611      	mov	r1, r2
 80206b0:	4618      	mov	r0, r3
 80206b2:	f7ff fb0d 	bl	801fcd0 <validate>
 80206b6:	4603      	mov	r3, r0
 80206b8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80206ba:	7bfb      	ldrb	r3, [r7, #15]
 80206bc:	2b00      	cmp	r3, #0
 80206be:	d111      	bne.n	80206e4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80206c0:	687b      	ldr	r3, [r7, #4]
 80206c2:	691b      	ldr	r3, [r3, #16]
 80206c4:	4618      	mov	r0, r3
 80206c6:	f7fd fc0f 	bl	801dee8 <dec_lock>
 80206ca:	4603      	mov	r3, r0
 80206cc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80206ce:	7bfb      	ldrb	r3, [r7, #15]
 80206d0:	2b00      	cmp	r3, #0
 80206d2:	d102      	bne.n	80206da <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80206d4:	687b      	ldr	r3, [r7, #4]
 80206d6:	2200      	movs	r2, #0
 80206d8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80206da:	68bb      	ldr	r3, [r7, #8]
 80206dc:	2100      	movs	r1, #0
 80206de:	4618      	mov	r0, r3
 80206e0:	f7fd fadb 	bl	801dc9a <unlock_fs>
#endif
		}
	}
	return res;
 80206e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80206e6:	4618      	mov	r0, r3
 80206e8:	3710      	adds	r7, #16
 80206ea:	46bd      	mov	sp, r7
 80206ec:	bd80      	pop	{r7, pc}
	...

080206f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80206f0:	b480      	push	{r7}
 80206f2:	b087      	sub	sp, #28
 80206f4:	af00      	add	r7, sp, #0
 80206f6:	60f8      	str	r0, [r7, #12]
 80206f8:	60b9      	str	r1, [r7, #8]
 80206fa:	4613      	mov	r3, r2
 80206fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80206fe:	2301      	movs	r3, #1
 8020700:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8020702:	2300      	movs	r3, #0
 8020704:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8020706:	4b1f      	ldr	r3, [pc, #124]	; (8020784 <FATFS_LinkDriverEx+0x94>)
 8020708:	7a5b      	ldrb	r3, [r3, #9]
 802070a:	b2db      	uxtb	r3, r3
 802070c:	2b00      	cmp	r3, #0
 802070e:	d131      	bne.n	8020774 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8020710:	4b1c      	ldr	r3, [pc, #112]	; (8020784 <FATFS_LinkDriverEx+0x94>)
 8020712:	7a5b      	ldrb	r3, [r3, #9]
 8020714:	b2db      	uxtb	r3, r3
 8020716:	461a      	mov	r2, r3
 8020718:	4b1a      	ldr	r3, [pc, #104]	; (8020784 <FATFS_LinkDriverEx+0x94>)
 802071a:	2100      	movs	r1, #0
 802071c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 802071e:	4b19      	ldr	r3, [pc, #100]	; (8020784 <FATFS_LinkDriverEx+0x94>)
 8020720:	7a5b      	ldrb	r3, [r3, #9]
 8020722:	b2db      	uxtb	r3, r3
 8020724:	4a17      	ldr	r2, [pc, #92]	; (8020784 <FATFS_LinkDriverEx+0x94>)
 8020726:	009b      	lsls	r3, r3, #2
 8020728:	4413      	add	r3, r2
 802072a:	68fa      	ldr	r2, [r7, #12]
 802072c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 802072e:	4b15      	ldr	r3, [pc, #84]	; (8020784 <FATFS_LinkDriverEx+0x94>)
 8020730:	7a5b      	ldrb	r3, [r3, #9]
 8020732:	b2db      	uxtb	r3, r3
 8020734:	461a      	mov	r2, r3
 8020736:	4b13      	ldr	r3, [pc, #76]	; (8020784 <FATFS_LinkDriverEx+0x94>)
 8020738:	4413      	add	r3, r2
 802073a:	79fa      	ldrb	r2, [r7, #7]
 802073c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 802073e:	4b11      	ldr	r3, [pc, #68]	; (8020784 <FATFS_LinkDriverEx+0x94>)
 8020740:	7a5b      	ldrb	r3, [r3, #9]
 8020742:	b2db      	uxtb	r3, r3
 8020744:	1c5a      	adds	r2, r3, #1
 8020746:	b2d1      	uxtb	r1, r2
 8020748:	4a0e      	ldr	r2, [pc, #56]	; (8020784 <FATFS_LinkDriverEx+0x94>)
 802074a:	7251      	strb	r1, [r2, #9]
 802074c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 802074e:	7dbb      	ldrb	r3, [r7, #22]
 8020750:	3330      	adds	r3, #48	; 0x30
 8020752:	b2da      	uxtb	r2, r3
 8020754:	68bb      	ldr	r3, [r7, #8]
 8020756:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8020758:	68bb      	ldr	r3, [r7, #8]
 802075a:	3301      	adds	r3, #1
 802075c:	223a      	movs	r2, #58	; 0x3a
 802075e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8020760:	68bb      	ldr	r3, [r7, #8]
 8020762:	3302      	adds	r3, #2
 8020764:	222f      	movs	r2, #47	; 0x2f
 8020766:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8020768:	68bb      	ldr	r3, [r7, #8]
 802076a:	3303      	adds	r3, #3
 802076c:	2200      	movs	r2, #0
 802076e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8020770:	2300      	movs	r3, #0
 8020772:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8020774:	7dfb      	ldrb	r3, [r7, #23]
}
 8020776:	4618      	mov	r0, r3
 8020778:	371c      	adds	r7, #28
 802077a:	46bd      	mov	sp, r7
 802077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020780:	4770      	bx	lr
 8020782:	bf00      	nop
 8020784:	20001568 	.word	0x20001568

08020788 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8020788:	b580      	push	{r7, lr}
 802078a:	b082      	sub	sp, #8
 802078c:	af00      	add	r7, sp, #0
 802078e:	6078      	str	r0, [r7, #4]
 8020790:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8020792:	2200      	movs	r2, #0
 8020794:	6839      	ldr	r1, [r7, #0]
 8020796:	6878      	ldr	r0, [r7, #4]
 8020798:	f7ff ffaa 	bl	80206f0 <FATFS_LinkDriverEx>
 802079c:	4603      	mov	r3, r0
}
 802079e:	4618      	mov	r0, r3
 80207a0:	3708      	adds	r7, #8
 80207a2:	46bd      	mov	sp, r7
 80207a4:	bd80      	pop	{r7, pc}
	...

080207a8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80207a8:	b480      	push	{r7}
 80207aa:	b085      	sub	sp, #20
 80207ac:	af00      	add	r7, sp, #0
 80207ae:	4603      	mov	r3, r0
 80207b0:	6039      	str	r1, [r7, #0]
 80207b2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80207b4:	88fb      	ldrh	r3, [r7, #6]
 80207b6:	2b7f      	cmp	r3, #127	; 0x7f
 80207b8:	d802      	bhi.n	80207c0 <ff_convert+0x18>
		c = chr;
 80207ba:	88fb      	ldrh	r3, [r7, #6]
 80207bc:	81fb      	strh	r3, [r7, #14]
 80207be:	e025      	b.n	802080c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80207c0:	683b      	ldr	r3, [r7, #0]
 80207c2:	2b00      	cmp	r3, #0
 80207c4:	d00b      	beq.n	80207de <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80207c6:	88fb      	ldrh	r3, [r7, #6]
 80207c8:	2bff      	cmp	r3, #255	; 0xff
 80207ca:	d805      	bhi.n	80207d8 <ff_convert+0x30>
 80207cc:	88fb      	ldrh	r3, [r7, #6]
 80207ce:	3b80      	subs	r3, #128	; 0x80
 80207d0:	4a12      	ldr	r2, [pc, #72]	; (802081c <ff_convert+0x74>)
 80207d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80207d6:	e000      	b.n	80207da <ff_convert+0x32>
 80207d8:	2300      	movs	r3, #0
 80207da:	81fb      	strh	r3, [r7, #14]
 80207dc:	e016      	b.n	802080c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80207de:	2300      	movs	r3, #0
 80207e0:	81fb      	strh	r3, [r7, #14]
 80207e2:	e009      	b.n	80207f8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80207e4:	89fb      	ldrh	r3, [r7, #14]
 80207e6:	4a0d      	ldr	r2, [pc, #52]	; (802081c <ff_convert+0x74>)
 80207e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80207ec:	88fa      	ldrh	r2, [r7, #6]
 80207ee:	429a      	cmp	r2, r3
 80207f0:	d006      	beq.n	8020800 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80207f2:	89fb      	ldrh	r3, [r7, #14]
 80207f4:	3301      	adds	r3, #1
 80207f6:	81fb      	strh	r3, [r7, #14]
 80207f8:	89fb      	ldrh	r3, [r7, #14]
 80207fa:	2b7f      	cmp	r3, #127	; 0x7f
 80207fc:	d9f2      	bls.n	80207e4 <ff_convert+0x3c>
 80207fe:	e000      	b.n	8020802 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8020800:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8020802:	89fb      	ldrh	r3, [r7, #14]
 8020804:	3380      	adds	r3, #128	; 0x80
 8020806:	b29b      	uxth	r3, r3
 8020808:	b2db      	uxtb	r3, r3
 802080a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 802080c:	89fb      	ldrh	r3, [r7, #14]
}
 802080e:	4618      	mov	r0, r3
 8020810:	3714      	adds	r7, #20
 8020812:	46bd      	mov	sp, r7
 8020814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020818:	4770      	bx	lr
 802081a:	bf00      	nop
 802081c:	0802db90 	.word	0x0802db90

08020820 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8020820:	b480      	push	{r7}
 8020822:	b087      	sub	sp, #28
 8020824:	af00      	add	r7, sp, #0
 8020826:	4603      	mov	r3, r0
 8020828:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 802082a:	88fb      	ldrh	r3, [r7, #6]
 802082c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020830:	d201      	bcs.n	8020836 <ff_wtoupper+0x16>
 8020832:	4b3e      	ldr	r3, [pc, #248]	; (802092c <ff_wtoupper+0x10c>)
 8020834:	e000      	b.n	8020838 <ff_wtoupper+0x18>
 8020836:	4b3e      	ldr	r3, [pc, #248]	; (8020930 <ff_wtoupper+0x110>)
 8020838:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 802083a:	697b      	ldr	r3, [r7, #20]
 802083c:	1c9a      	adds	r2, r3, #2
 802083e:	617a      	str	r2, [r7, #20]
 8020840:	881b      	ldrh	r3, [r3, #0]
 8020842:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8020844:	8a7b      	ldrh	r3, [r7, #18]
 8020846:	2b00      	cmp	r3, #0
 8020848:	d068      	beq.n	802091c <ff_wtoupper+0xfc>
 802084a:	88fa      	ldrh	r2, [r7, #6]
 802084c:	8a7b      	ldrh	r3, [r7, #18]
 802084e:	429a      	cmp	r2, r3
 8020850:	d364      	bcc.n	802091c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8020852:	697b      	ldr	r3, [r7, #20]
 8020854:	1c9a      	adds	r2, r3, #2
 8020856:	617a      	str	r2, [r7, #20]
 8020858:	881b      	ldrh	r3, [r3, #0]
 802085a:	823b      	strh	r3, [r7, #16]
 802085c:	8a3b      	ldrh	r3, [r7, #16]
 802085e:	0a1b      	lsrs	r3, r3, #8
 8020860:	81fb      	strh	r3, [r7, #14]
 8020862:	8a3b      	ldrh	r3, [r7, #16]
 8020864:	b2db      	uxtb	r3, r3
 8020866:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8020868:	88fa      	ldrh	r2, [r7, #6]
 802086a:	8a79      	ldrh	r1, [r7, #18]
 802086c:	8a3b      	ldrh	r3, [r7, #16]
 802086e:	440b      	add	r3, r1
 8020870:	429a      	cmp	r2, r3
 8020872:	da49      	bge.n	8020908 <ff_wtoupper+0xe8>
			switch (cmd) {
 8020874:	89fb      	ldrh	r3, [r7, #14]
 8020876:	2b08      	cmp	r3, #8
 8020878:	d84f      	bhi.n	802091a <ff_wtoupper+0xfa>
 802087a:	a201      	add	r2, pc, #4	; (adr r2, 8020880 <ff_wtoupper+0x60>)
 802087c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020880:	080208a5 	.word	0x080208a5
 8020884:	080208b7 	.word	0x080208b7
 8020888:	080208cd 	.word	0x080208cd
 802088c:	080208d5 	.word	0x080208d5
 8020890:	080208dd 	.word	0x080208dd
 8020894:	080208e5 	.word	0x080208e5
 8020898:	080208ed 	.word	0x080208ed
 802089c:	080208f5 	.word	0x080208f5
 80208a0:	080208fd 	.word	0x080208fd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80208a4:	88fa      	ldrh	r2, [r7, #6]
 80208a6:	8a7b      	ldrh	r3, [r7, #18]
 80208a8:	1ad3      	subs	r3, r2, r3
 80208aa:	005b      	lsls	r3, r3, #1
 80208ac:	697a      	ldr	r2, [r7, #20]
 80208ae:	4413      	add	r3, r2
 80208b0:	881b      	ldrh	r3, [r3, #0]
 80208b2:	80fb      	strh	r3, [r7, #6]
 80208b4:	e027      	b.n	8020906 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80208b6:	88fa      	ldrh	r2, [r7, #6]
 80208b8:	8a7b      	ldrh	r3, [r7, #18]
 80208ba:	1ad3      	subs	r3, r2, r3
 80208bc:	b29b      	uxth	r3, r3
 80208be:	f003 0301 	and.w	r3, r3, #1
 80208c2:	b29b      	uxth	r3, r3
 80208c4:	88fa      	ldrh	r2, [r7, #6]
 80208c6:	1ad3      	subs	r3, r2, r3
 80208c8:	80fb      	strh	r3, [r7, #6]
 80208ca:	e01c      	b.n	8020906 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80208cc:	88fb      	ldrh	r3, [r7, #6]
 80208ce:	3b10      	subs	r3, #16
 80208d0:	80fb      	strh	r3, [r7, #6]
 80208d2:	e018      	b.n	8020906 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80208d4:	88fb      	ldrh	r3, [r7, #6]
 80208d6:	3b20      	subs	r3, #32
 80208d8:	80fb      	strh	r3, [r7, #6]
 80208da:	e014      	b.n	8020906 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80208dc:	88fb      	ldrh	r3, [r7, #6]
 80208de:	3b30      	subs	r3, #48	; 0x30
 80208e0:	80fb      	strh	r3, [r7, #6]
 80208e2:	e010      	b.n	8020906 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80208e4:	88fb      	ldrh	r3, [r7, #6]
 80208e6:	3b1a      	subs	r3, #26
 80208e8:	80fb      	strh	r3, [r7, #6]
 80208ea:	e00c      	b.n	8020906 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80208ec:	88fb      	ldrh	r3, [r7, #6]
 80208ee:	3308      	adds	r3, #8
 80208f0:	80fb      	strh	r3, [r7, #6]
 80208f2:	e008      	b.n	8020906 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80208f4:	88fb      	ldrh	r3, [r7, #6]
 80208f6:	3b50      	subs	r3, #80	; 0x50
 80208f8:	80fb      	strh	r3, [r7, #6]
 80208fa:	e004      	b.n	8020906 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80208fc:	88fb      	ldrh	r3, [r7, #6]
 80208fe:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8020902:	80fb      	strh	r3, [r7, #6]
 8020904:	bf00      	nop
			}
			break;
 8020906:	e008      	b.n	802091a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8020908:	89fb      	ldrh	r3, [r7, #14]
 802090a:	2b00      	cmp	r3, #0
 802090c:	d195      	bne.n	802083a <ff_wtoupper+0x1a>
 802090e:	8a3b      	ldrh	r3, [r7, #16]
 8020910:	005b      	lsls	r3, r3, #1
 8020912:	697a      	ldr	r2, [r7, #20]
 8020914:	4413      	add	r3, r2
 8020916:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8020918:	e78f      	b.n	802083a <ff_wtoupper+0x1a>
			break;
 802091a:	bf00      	nop
	}

	return chr;
 802091c:	88fb      	ldrh	r3, [r7, #6]
}
 802091e:	4618      	mov	r0, r3
 8020920:	371c      	adds	r7, #28
 8020922:	46bd      	mov	sp, r7
 8020924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020928:	4770      	bx	lr
 802092a:	bf00      	nop
 802092c:	0802dc90 	.word	0x0802dc90
 8020930:	0802de84 	.word	0x0802de84

08020934 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8020934:	b580      	push	{r7, lr}
 8020936:	b084      	sub	sp, #16
 8020938:	af00      	add	r7, sp, #0
 802093a:	4603      	mov	r3, r0
 802093c:	6039      	str	r1, [r7, #0]
 802093e:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8020940:	2200      	movs	r2, #0
 8020942:	2101      	movs	r1, #1
 8020944:	2001      	movs	r0, #1
 8020946:	f000 fbd5 	bl	80210f4 <osSemaphoreNew>
 802094a:	4602      	mov	r2, r0
 802094c:	683b      	ldr	r3, [r7, #0]
 802094e:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8020950:	683b      	ldr	r3, [r7, #0]
 8020952:	681b      	ldr	r3, [r3, #0]
 8020954:	2b00      	cmp	r3, #0
 8020956:	bf14      	ite	ne
 8020958:	2301      	movne	r3, #1
 802095a:	2300      	moveq	r3, #0
 802095c:	b2db      	uxtb	r3, r3
 802095e:	60fb      	str	r3, [r7, #12]

    return ret;
 8020960:	68fb      	ldr	r3, [r7, #12]
}
 8020962:	4618      	mov	r0, r3
 8020964:	3710      	adds	r7, #16
 8020966:	46bd      	mov	sp, r7
 8020968:	bd80      	pop	{r7, pc}

0802096a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 802096a:	b580      	push	{r7, lr}
 802096c:	b082      	sub	sp, #8
 802096e:	af00      	add	r7, sp, #0
 8020970:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8020972:	6878      	ldr	r0, [r7, #4]
 8020974:	f000 fd1a 	bl	80213ac <osSemaphoreDelete>
#endif
    return 1;
 8020978:	2301      	movs	r3, #1
}
 802097a:	4618      	mov	r0, r3
 802097c:	3708      	adds	r7, #8
 802097e:	46bd      	mov	sp, r7
 8020980:	bd80      	pop	{r7, pc}

08020982 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8020982:	b580      	push	{r7, lr}
 8020984:	b084      	sub	sp, #16
 8020986:	af00      	add	r7, sp, #0
 8020988:	6078      	str	r0, [r7, #4]
  int ret = 0;
 802098a:	2300      	movs	r3, #0
 802098c:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 802098e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8020992:	6878      	ldr	r0, [r7, #4]
 8020994:	f000 fc4c 	bl	8021230 <osSemaphoreAcquire>
 8020998:	4603      	mov	r3, r0
 802099a:	2b00      	cmp	r3, #0
 802099c:	d101      	bne.n	80209a2 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 802099e:	2301      	movs	r3, #1
 80209a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80209a2:	68fb      	ldr	r3, [r7, #12]
}
 80209a4:	4618      	mov	r0, r3
 80209a6:	3710      	adds	r7, #16
 80209a8:	46bd      	mov	sp, r7
 80209aa:	bd80      	pop	{r7, pc}

080209ac <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80209ac:	b580      	push	{r7, lr}
 80209ae:	b082      	sub	sp, #8
 80209b0:	af00      	add	r7, sp, #0
 80209b2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80209b4:	6878      	ldr	r0, [r7, #4]
 80209b6:	f000 fca1 	bl	80212fc <osSemaphoreRelease>
#endif
}
 80209ba:	bf00      	nop
 80209bc:	3708      	adds	r7, #8
 80209be:	46bd      	mov	sp, r7
 80209c0:	bd80      	pop	{r7, pc}

080209c2 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80209c2:	b580      	push	{r7, lr}
 80209c4:	b082      	sub	sp, #8
 80209c6:	af00      	add	r7, sp, #0
 80209c8:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80209ca:	6878      	ldr	r0, [r7, #4]
 80209cc:	f003 fff0 	bl	80249b0 <pvPortMalloc>
 80209d0:	4603      	mov	r3, r0
}
 80209d2:	4618      	mov	r0, r3
 80209d4:	3708      	adds	r7, #8
 80209d6:	46bd      	mov	sp, r7
 80209d8:	bd80      	pop	{r7, pc}

080209da <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80209da:	b580      	push	{r7, lr}
 80209dc:	b082      	sub	sp, #8
 80209de:	af00      	add	r7, sp, #0
 80209e0:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80209e2:	6878      	ldr	r0, [r7, #4]
 80209e4:	f004 f8a6 	bl	8024b34 <vPortFree>
}
 80209e8:	bf00      	nop
 80209ea:	3708      	adds	r7, #8
 80209ec:	46bd      	mov	sp, r7
 80209ee:	bd80      	pop	{r7, pc}

080209f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80209f0:	b480      	push	{r7}
 80209f2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80209f4:	bf00      	nop
 80209f6:	46bd      	mov	sp, r7
 80209f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209fc:	4770      	bx	lr
	...

08020a00 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8020a00:	b480      	push	{r7}
 8020a02:	b085      	sub	sp, #20
 8020a04:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020a06:	f3ef 8305 	mrs	r3, IPSR
 8020a0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8020a0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	d10f      	bne.n	8020a32 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020a12:	f3ef 8310 	mrs	r3, PRIMASK
 8020a16:	607b      	str	r3, [r7, #4]
  return(result);
 8020a18:	687b      	ldr	r3, [r7, #4]
 8020a1a:	2b00      	cmp	r3, #0
 8020a1c:	d105      	bne.n	8020a2a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8020a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8020a22:	603b      	str	r3, [r7, #0]
  return(result);
 8020a24:	683b      	ldr	r3, [r7, #0]
 8020a26:	2b00      	cmp	r3, #0
 8020a28:	d007      	beq.n	8020a3a <osKernelInitialize+0x3a>
 8020a2a:	4b0e      	ldr	r3, [pc, #56]	; (8020a64 <osKernelInitialize+0x64>)
 8020a2c:	681b      	ldr	r3, [r3, #0]
 8020a2e:	2b02      	cmp	r3, #2
 8020a30:	d103      	bne.n	8020a3a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8020a32:	f06f 0305 	mvn.w	r3, #5
 8020a36:	60fb      	str	r3, [r7, #12]
 8020a38:	e00c      	b.n	8020a54 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8020a3a:	4b0a      	ldr	r3, [pc, #40]	; (8020a64 <osKernelInitialize+0x64>)
 8020a3c:	681b      	ldr	r3, [r3, #0]
 8020a3e:	2b00      	cmp	r3, #0
 8020a40:	d105      	bne.n	8020a4e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8020a42:	4b08      	ldr	r3, [pc, #32]	; (8020a64 <osKernelInitialize+0x64>)
 8020a44:	2201      	movs	r2, #1
 8020a46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8020a48:	2300      	movs	r3, #0
 8020a4a:	60fb      	str	r3, [r7, #12]
 8020a4c:	e002      	b.n	8020a54 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8020a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8020a52:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8020a54:	68fb      	ldr	r3, [r7, #12]
}
 8020a56:	4618      	mov	r0, r3
 8020a58:	3714      	adds	r7, #20
 8020a5a:	46bd      	mov	sp, r7
 8020a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a60:	4770      	bx	lr
 8020a62:	bf00      	nop
 8020a64:	20001574 	.word	0x20001574

08020a68 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8020a68:	b580      	push	{r7, lr}
 8020a6a:	b082      	sub	sp, #8
 8020a6c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8020a6e:	f002 fe57 	bl	8023720 <xTaskGetSchedulerState>
 8020a72:	4603      	mov	r3, r0
 8020a74:	2b00      	cmp	r3, #0
 8020a76:	d004      	beq.n	8020a82 <osKernelGetState+0x1a>
 8020a78:	2b02      	cmp	r3, #2
 8020a7a:	d105      	bne.n	8020a88 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8020a7c:	2302      	movs	r3, #2
 8020a7e:	607b      	str	r3, [r7, #4]
      break;
 8020a80:	e00c      	b.n	8020a9c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8020a82:	2303      	movs	r3, #3
 8020a84:	607b      	str	r3, [r7, #4]
      break;
 8020a86:	e009      	b.n	8020a9c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8020a88:	4b07      	ldr	r3, [pc, #28]	; (8020aa8 <osKernelGetState+0x40>)
 8020a8a:	681b      	ldr	r3, [r3, #0]
 8020a8c:	2b01      	cmp	r3, #1
 8020a8e:	d102      	bne.n	8020a96 <osKernelGetState+0x2e>
        state = osKernelReady;
 8020a90:	2301      	movs	r3, #1
 8020a92:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8020a94:	e001      	b.n	8020a9a <osKernelGetState+0x32>
        state = osKernelInactive;
 8020a96:	2300      	movs	r3, #0
 8020a98:	607b      	str	r3, [r7, #4]
      break;
 8020a9a:	bf00      	nop
  }

  return (state);
 8020a9c:	687b      	ldr	r3, [r7, #4]
}
 8020a9e:	4618      	mov	r0, r3
 8020aa0:	3708      	adds	r7, #8
 8020aa2:	46bd      	mov	sp, r7
 8020aa4:	bd80      	pop	{r7, pc}
 8020aa6:	bf00      	nop
 8020aa8:	20001574 	.word	0x20001574

08020aac <osKernelStart>:

osStatus_t osKernelStart (void) {
 8020aac:	b580      	push	{r7, lr}
 8020aae:	b084      	sub	sp, #16
 8020ab0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020ab2:	f3ef 8305 	mrs	r3, IPSR
 8020ab6:	60bb      	str	r3, [r7, #8]
  return(result);
 8020ab8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8020aba:	2b00      	cmp	r3, #0
 8020abc:	d10f      	bne.n	8020ade <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020abe:	f3ef 8310 	mrs	r3, PRIMASK
 8020ac2:	607b      	str	r3, [r7, #4]
  return(result);
 8020ac4:	687b      	ldr	r3, [r7, #4]
 8020ac6:	2b00      	cmp	r3, #0
 8020ac8:	d105      	bne.n	8020ad6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8020aca:	f3ef 8311 	mrs	r3, BASEPRI
 8020ace:	603b      	str	r3, [r7, #0]
  return(result);
 8020ad0:	683b      	ldr	r3, [r7, #0]
 8020ad2:	2b00      	cmp	r3, #0
 8020ad4:	d007      	beq.n	8020ae6 <osKernelStart+0x3a>
 8020ad6:	4b0f      	ldr	r3, [pc, #60]	; (8020b14 <osKernelStart+0x68>)
 8020ad8:	681b      	ldr	r3, [r3, #0]
 8020ada:	2b02      	cmp	r3, #2
 8020adc:	d103      	bne.n	8020ae6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8020ade:	f06f 0305 	mvn.w	r3, #5
 8020ae2:	60fb      	str	r3, [r7, #12]
 8020ae4:	e010      	b.n	8020b08 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8020ae6:	4b0b      	ldr	r3, [pc, #44]	; (8020b14 <osKernelStart+0x68>)
 8020ae8:	681b      	ldr	r3, [r3, #0]
 8020aea:	2b01      	cmp	r3, #1
 8020aec:	d109      	bne.n	8020b02 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8020aee:	f7ff ff7f 	bl	80209f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8020af2:	4b08      	ldr	r3, [pc, #32]	; (8020b14 <osKernelStart+0x68>)
 8020af4:	2202      	movs	r2, #2
 8020af6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8020af8:	f002 f9ba 	bl	8022e70 <vTaskStartScheduler>
      stat = osOK;
 8020afc:	2300      	movs	r3, #0
 8020afe:	60fb      	str	r3, [r7, #12]
 8020b00:	e002      	b.n	8020b08 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8020b02:	f04f 33ff 	mov.w	r3, #4294967295
 8020b06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8020b08:	68fb      	ldr	r3, [r7, #12]
}
 8020b0a:	4618      	mov	r0, r3
 8020b0c:	3710      	adds	r7, #16
 8020b0e:	46bd      	mov	sp, r7
 8020b10:	bd80      	pop	{r7, pc}
 8020b12:	bf00      	nop
 8020b14:	20001574 	.word	0x20001574

08020b18 <osKernelLock>:

int32_t osKernelLock (void) {
 8020b18:	b580      	push	{r7, lr}
 8020b1a:	b084      	sub	sp, #16
 8020b1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020b1e:	f3ef 8305 	mrs	r3, IPSR
 8020b22:	60bb      	str	r3, [r7, #8]
  return(result);
 8020b24:	68bb      	ldr	r3, [r7, #8]
  int32_t lock;

  if (IS_IRQ()) {
 8020b26:	2b00      	cmp	r3, #0
 8020b28:	d10f      	bne.n	8020b4a <osKernelLock+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8020b2e:	607b      	str	r3, [r7, #4]
  return(result);
 8020b30:	687b      	ldr	r3, [r7, #4]
 8020b32:	2b00      	cmp	r3, #0
 8020b34:	d105      	bne.n	8020b42 <osKernelLock+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8020b36:	f3ef 8311 	mrs	r3, BASEPRI
 8020b3a:	603b      	str	r3, [r7, #0]
  return(result);
 8020b3c:	683b      	ldr	r3, [r7, #0]
 8020b3e:	2b00      	cmp	r3, #0
 8020b40:	d007      	beq.n	8020b52 <osKernelLock+0x3a>
 8020b42:	4b10      	ldr	r3, [pc, #64]	; (8020b84 <osKernelLock+0x6c>)
 8020b44:	681b      	ldr	r3, [r3, #0]
 8020b46:	2b02      	cmp	r3, #2
 8020b48:	d103      	bne.n	8020b52 <osKernelLock+0x3a>
    lock = (int32_t)osErrorISR;
 8020b4a:	f06f 0305 	mvn.w	r3, #5
 8020b4e:	60fb      	str	r3, [r7, #12]
 8020b50:	e013      	b.n	8020b7a <osKernelLock+0x62>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8020b52:	f002 fde5 	bl	8023720 <xTaskGetSchedulerState>
 8020b56:	4603      	mov	r3, r0
 8020b58:	2b00      	cmp	r3, #0
 8020b5a:	d002      	beq.n	8020b62 <osKernelLock+0x4a>
 8020b5c:	2b02      	cmp	r3, #2
 8020b5e:	d003      	beq.n	8020b68 <osKernelLock+0x50>
 8020b60:	e007      	b.n	8020b72 <osKernelLock+0x5a>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 8020b62:	2301      	movs	r3, #1
 8020b64:	60fb      	str	r3, [r7, #12]
        break;
 8020b66:	e008      	b.n	8020b7a <osKernelLock+0x62>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 8020b68:	f002 f9e6 	bl	8022f38 <vTaskSuspendAll>
        lock = 0;
 8020b6c:	2300      	movs	r3, #0
 8020b6e:	60fb      	str	r3, [r7, #12]
        break;
 8020b70:	e003      	b.n	8020b7a <osKernelLock+0x62>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8020b72:	f04f 33ff 	mov.w	r3, #4294967295
 8020b76:	60fb      	str	r3, [r7, #12]
        break;
 8020b78:	bf00      	nop
    }
  }

  return (lock);
 8020b7a:	68fb      	ldr	r3, [r7, #12]
}
 8020b7c:	4618      	mov	r0, r3
 8020b7e:	3710      	adds	r7, #16
 8020b80:	46bd      	mov	sp, r7
 8020b82:	bd80      	pop	{r7, pc}
 8020b84:	20001574 	.word	0x20001574

08020b88 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8020b88:	b580      	push	{r7, lr}
 8020b8a:	b084      	sub	sp, #16
 8020b8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020b8e:	f3ef 8305 	mrs	r3, IPSR
 8020b92:	60bb      	str	r3, [r7, #8]
  return(result);
 8020b94:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8020b96:	2b00      	cmp	r3, #0
 8020b98:	d10f      	bne.n	8020bba <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8020b9e:	607b      	str	r3, [r7, #4]
  return(result);
 8020ba0:	687b      	ldr	r3, [r7, #4]
 8020ba2:	2b00      	cmp	r3, #0
 8020ba4:	d105      	bne.n	8020bb2 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8020ba6:	f3ef 8311 	mrs	r3, BASEPRI
 8020baa:	603b      	str	r3, [r7, #0]
  return(result);
 8020bac:	683b      	ldr	r3, [r7, #0]
 8020bae:	2b00      	cmp	r3, #0
 8020bb0:	d007      	beq.n	8020bc2 <osKernelGetTickCount+0x3a>
 8020bb2:	4b08      	ldr	r3, [pc, #32]	; (8020bd4 <osKernelGetTickCount+0x4c>)
 8020bb4:	681b      	ldr	r3, [r3, #0]
 8020bb6:	2b02      	cmp	r3, #2
 8020bb8:	d103      	bne.n	8020bc2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8020bba:	f002 fa77 	bl	80230ac <xTaskGetTickCountFromISR>
 8020bbe:	60f8      	str	r0, [r7, #12]
 8020bc0:	e002      	b.n	8020bc8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8020bc2:	f002 fa63 	bl	802308c <xTaskGetTickCount>
 8020bc6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8020bc8:	68fb      	ldr	r3, [r7, #12]
}
 8020bca:	4618      	mov	r0, r3
 8020bcc:	3710      	adds	r7, #16
 8020bce:	46bd      	mov	sp, r7
 8020bd0:	bd80      	pop	{r7, pc}
 8020bd2:	bf00      	nop
 8020bd4:	20001574 	.word	0x20001574

08020bd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8020bd8:	b580      	push	{r7, lr}
 8020bda:	b090      	sub	sp, #64	; 0x40
 8020bdc:	af04      	add	r7, sp, #16
 8020bde:	60f8      	str	r0, [r7, #12]
 8020be0:	60b9      	str	r1, [r7, #8]
 8020be2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8020be4:	2300      	movs	r3, #0
 8020be6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020be8:	f3ef 8305 	mrs	r3, IPSR
 8020bec:	61fb      	str	r3, [r7, #28]
  return(result);
 8020bee:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8020bf0:	2b00      	cmp	r3, #0
 8020bf2:	f040 808f 	bne.w	8020d14 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8020bfa:	61bb      	str	r3, [r7, #24]
  return(result);
 8020bfc:	69bb      	ldr	r3, [r7, #24]
 8020bfe:	2b00      	cmp	r3, #0
 8020c00:	d105      	bne.n	8020c0e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8020c02:	f3ef 8311 	mrs	r3, BASEPRI
 8020c06:	617b      	str	r3, [r7, #20]
  return(result);
 8020c08:	697b      	ldr	r3, [r7, #20]
 8020c0a:	2b00      	cmp	r3, #0
 8020c0c:	d003      	beq.n	8020c16 <osThreadNew+0x3e>
 8020c0e:	4b44      	ldr	r3, [pc, #272]	; (8020d20 <osThreadNew+0x148>)
 8020c10:	681b      	ldr	r3, [r3, #0]
 8020c12:	2b02      	cmp	r3, #2
 8020c14:	d07e      	beq.n	8020d14 <osThreadNew+0x13c>
 8020c16:	68fb      	ldr	r3, [r7, #12]
 8020c18:	2b00      	cmp	r3, #0
 8020c1a:	d07b      	beq.n	8020d14 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8020c1c:	2380      	movs	r3, #128	; 0x80
 8020c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8020c20:	2318      	movs	r3, #24
 8020c22:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8020c24:	2300      	movs	r3, #0
 8020c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8020c28:	f04f 33ff 	mov.w	r3, #4294967295
 8020c2c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8020c2e:	687b      	ldr	r3, [r7, #4]
 8020c30:	2b00      	cmp	r3, #0
 8020c32:	d045      	beq.n	8020cc0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8020c34:	687b      	ldr	r3, [r7, #4]
 8020c36:	681b      	ldr	r3, [r3, #0]
 8020c38:	2b00      	cmp	r3, #0
 8020c3a:	d002      	beq.n	8020c42 <osThreadNew+0x6a>
        name = attr->name;
 8020c3c:	687b      	ldr	r3, [r7, #4]
 8020c3e:	681b      	ldr	r3, [r3, #0]
 8020c40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8020c42:	687b      	ldr	r3, [r7, #4]
 8020c44:	699b      	ldr	r3, [r3, #24]
 8020c46:	2b00      	cmp	r3, #0
 8020c48:	d002      	beq.n	8020c50 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8020c4a:	687b      	ldr	r3, [r7, #4]
 8020c4c:	699b      	ldr	r3, [r3, #24]
 8020c4e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8020c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c52:	2b00      	cmp	r3, #0
 8020c54:	d008      	beq.n	8020c68 <osThreadNew+0x90>
 8020c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c58:	2b38      	cmp	r3, #56	; 0x38
 8020c5a:	d805      	bhi.n	8020c68 <osThreadNew+0x90>
 8020c5c:	687b      	ldr	r3, [r7, #4]
 8020c5e:	685b      	ldr	r3, [r3, #4]
 8020c60:	f003 0301 	and.w	r3, r3, #1
 8020c64:	2b00      	cmp	r3, #0
 8020c66:	d001      	beq.n	8020c6c <osThreadNew+0x94>
        return (NULL);
 8020c68:	2300      	movs	r3, #0
 8020c6a:	e054      	b.n	8020d16 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8020c6c:	687b      	ldr	r3, [r7, #4]
 8020c6e:	695b      	ldr	r3, [r3, #20]
 8020c70:	2b00      	cmp	r3, #0
 8020c72:	d003      	beq.n	8020c7c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8020c74:	687b      	ldr	r3, [r7, #4]
 8020c76:	695b      	ldr	r3, [r3, #20]
 8020c78:	089b      	lsrs	r3, r3, #2
 8020c7a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8020c7c:	687b      	ldr	r3, [r7, #4]
 8020c7e:	689b      	ldr	r3, [r3, #8]
 8020c80:	2b00      	cmp	r3, #0
 8020c82:	d00e      	beq.n	8020ca2 <osThreadNew+0xca>
 8020c84:	687b      	ldr	r3, [r7, #4]
 8020c86:	68db      	ldr	r3, [r3, #12]
 8020c88:	2b5b      	cmp	r3, #91	; 0x5b
 8020c8a:	d90a      	bls.n	8020ca2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8020c8c:	687b      	ldr	r3, [r7, #4]
 8020c8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8020c90:	2b00      	cmp	r3, #0
 8020c92:	d006      	beq.n	8020ca2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8020c94:	687b      	ldr	r3, [r7, #4]
 8020c96:	695b      	ldr	r3, [r3, #20]
 8020c98:	2b00      	cmp	r3, #0
 8020c9a:	d002      	beq.n	8020ca2 <osThreadNew+0xca>
        mem = 1;
 8020c9c:	2301      	movs	r3, #1
 8020c9e:	623b      	str	r3, [r7, #32]
 8020ca0:	e010      	b.n	8020cc4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8020ca2:	687b      	ldr	r3, [r7, #4]
 8020ca4:	689b      	ldr	r3, [r3, #8]
 8020ca6:	2b00      	cmp	r3, #0
 8020ca8:	d10c      	bne.n	8020cc4 <osThreadNew+0xec>
 8020caa:	687b      	ldr	r3, [r7, #4]
 8020cac:	68db      	ldr	r3, [r3, #12]
 8020cae:	2b00      	cmp	r3, #0
 8020cb0:	d108      	bne.n	8020cc4 <osThreadNew+0xec>
 8020cb2:	687b      	ldr	r3, [r7, #4]
 8020cb4:	691b      	ldr	r3, [r3, #16]
 8020cb6:	2b00      	cmp	r3, #0
 8020cb8:	d104      	bne.n	8020cc4 <osThreadNew+0xec>
          mem = 0;
 8020cba:	2300      	movs	r3, #0
 8020cbc:	623b      	str	r3, [r7, #32]
 8020cbe:	e001      	b.n	8020cc4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8020cc0:	2300      	movs	r3, #0
 8020cc2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8020cc4:	6a3b      	ldr	r3, [r7, #32]
 8020cc6:	2b01      	cmp	r3, #1
 8020cc8:	d110      	bne.n	8020cec <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8020cca:	687b      	ldr	r3, [r7, #4]
 8020ccc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8020cce:	687a      	ldr	r2, [r7, #4]
 8020cd0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8020cd2:	9202      	str	r2, [sp, #8]
 8020cd4:	9301      	str	r3, [sp, #4]
 8020cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020cd8:	9300      	str	r3, [sp, #0]
 8020cda:	68bb      	ldr	r3, [r7, #8]
 8020cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020cde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020ce0:	68f8      	ldr	r0, [r7, #12]
 8020ce2:	f001 fe79 	bl	80229d8 <xTaskCreateStatic>
 8020ce6:	4603      	mov	r3, r0
 8020ce8:	613b      	str	r3, [r7, #16]
 8020cea:	e013      	b.n	8020d14 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8020cec:	6a3b      	ldr	r3, [r7, #32]
 8020cee:	2b00      	cmp	r3, #0
 8020cf0:	d110      	bne.n	8020d14 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8020cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020cf4:	b29a      	uxth	r2, r3
 8020cf6:	f107 0310 	add.w	r3, r7, #16
 8020cfa:	9301      	str	r3, [sp, #4]
 8020cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020cfe:	9300      	str	r3, [sp, #0]
 8020d00:	68bb      	ldr	r3, [r7, #8]
 8020d02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020d04:	68f8      	ldr	r0, [r7, #12]
 8020d06:	f001 fec1 	bl	8022a8c <xTaskCreate>
 8020d0a:	4603      	mov	r3, r0
 8020d0c:	2b01      	cmp	r3, #1
 8020d0e:	d001      	beq.n	8020d14 <osThreadNew+0x13c>
          hTask = NULL;
 8020d10:	2300      	movs	r3, #0
 8020d12:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8020d14:	693b      	ldr	r3, [r7, #16]
}
 8020d16:	4618      	mov	r0, r3
 8020d18:	3730      	adds	r7, #48	; 0x30
 8020d1a:	46bd      	mov	sp, r7
 8020d1c:	bd80      	pop	{r7, pc}
 8020d1e:	bf00      	nop
 8020d20:	20001574 	.word	0x20001574

08020d24 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8020d24:	b580      	push	{r7, lr}
 8020d26:	b08a      	sub	sp, #40	; 0x28
 8020d28:	af02      	add	r7, sp, #8
 8020d2a:	6078      	str	r0, [r7, #4]
 8020d2c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8020d2e:	687b      	ldr	r3, [r7, #4]
 8020d30:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8020d32:	69fb      	ldr	r3, [r7, #28]
 8020d34:	2b00      	cmp	r3, #0
 8020d36:	d002      	beq.n	8020d3e <osThreadFlagsSet+0x1a>
 8020d38:	683b      	ldr	r3, [r7, #0]
 8020d3a:	2b00      	cmp	r3, #0
 8020d3c:	da03      	bge.n	8020d46 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8020d3e:	f06f 0303 	mvn.w	r3, #3
 8020d42:	60fb      	str	r3, [r7, #12]
 8020d44:	e046      	b.n	8020dd4 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 8020d46:	f04f 33ff 	mov.w	r3, #4294967295
 8020d4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020d4c:	f3ef 8305 	mrs	r3, IPSR
 8020d50:	61bb      	str	r3, [r7, #24]
  return(result);
 8020d52:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 8020d54:	2b00      	cmp	r3, #0
 8020d56:	d10f      	bne.n	8020d78 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020d58:	f3ef 8310 	mrs	r3, PRIMASK
 8020d5c:	617b      	str	r3, [r7, #20]
  return(result);
 8020d5e:	697b      	ldr	r3, [r7, #20]
 8020d60:	2b00      	cmp	r3, #0
 8020d62:	d105      	bne.n	8020d70 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8020d64:	f3ef 8311 	mrs	r3, BASEPRI
 8020d68:	613b      	str	r3, [r7, #16]
  return(result);
 8020d6a:	693b      	ldr	r3, [r7, #16]
 8020d6c:	2b00      	cmp	r3, #0
 8020d6e:	d024      	beq.n	8020dba <osThreadFlagsSet+0x96>
 8020d70:	4b1b      	ldr	r3, [pc, #108]	; (8020de0 <osThreadFlagsSet+0xbc>)
 8020d72:	681b      	ldr	r3, [r3, #0]
 8020d74:	2b02      	cmp	r3, #2
 8020d76:	d120      	bne.n	8020dba <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 8020d78:	2300      	movs	r3, #0
 8020d7a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8020d7c:	f107 0308 	add.w	r3, r7, #8
 8020d80:	9300      	str	r3, [sp, #0]
 8020d82:	2300      	movs	r3, #0
 8020d84:	2201      	movs	r2, #1
 8020d86:	6839      	ldr	r1, [r7, #0]
 8020d88:	69f8      	ldr	r0, [r7, #28]
 8020d8a:	f002 ff5d 	bl	8023c48 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8020d8e:	f107 020c 	add.w	r2, r7, #12
 8020d92:	2300      	movs	r3, #0
 8020d94:	9300      	str	r3, [sp, #0]
 8020d96:	4613      	mov	r3, r2
 8020d98:	2200      	movs	r2, #0
 8020d9a:	2100      	movs	r1, #0
 8020d9c:	69f8      	ldr	r0, [r7, #28]
 8020d9e:	f002 ff53 	bl	8023c48 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8020da2:	68bb      	ldr	r3, [r7, #8]
 8020da4:	2b00      	cmp	r3, #0
 8020da6:	d015      	beq.n	8020dd4 <osThreadFlagsSet+0xb0>
 8020da8:	4b0e      	ldr	r3, [pc, #56]	; (8020de4 <osThreadFlagsSet+0xc0>)
 8020daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020dae:	601a      	str	r2, [r3, #0]
 8020db0:	f3bf 8f4f 	dsb	sy
 8020db4:	f3bf 8f6f 	isb	sy
 8020db8:	e00c      	b.n	8020dd4 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8020dba:	2300      	movs	r3, #0
 8020dbc:	2201      	movs	r2, #1
 8020dbe:	6839      	ldr	r1, [r7, #0]
 8020dc0:	69f8      	ldr	r0, [r7, #28]
 8020dc2:	f002 fe8d 	bl	8023ae0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8020dc6:	f107 030c 	add.w	r3, r7, #12
 8020dca:	2200      	movs	r2, #0
 8020dcc:	2100      	movs	r1, #0
 8020dce:	69f8      	ldr	r0, [r7, #28]
 8020dd0:	f002 fe86 	bl	8023ae0 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8020dd4:	68fb      	ldr	r3, [r7, #12]
}
 8020dd6:	4618      	mov	r0, r3
 8020dd8:	3720      	adds	r7, #32
 8020dda:	46bd      	mov	sp, r7
 8020ddc:	bd80      	pop	{r7, pc}
 8020dde:	bf00      	nop
 8020de0:	20001574 	.word	0x20001574
 8020de4:	e000ed04 	.word	0xe000ed04

08020de8 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8020de8:	b580      	push	{r7, lr}
 8020dea:	b088      	sub	sp, #32
 8020dec:	af00      	add	r7, sp, #0
 8020dee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020df0:	f3ef 8305 	mrs	r3, IPSR
 8020df4:	617b      	str	r3, [r7, #20]
  return(result);
 8020df6:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 8020df8:	2b00      	cmp	r3, #0
 8020dfa:	d10f      	bne.n	8020e1c <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8020e00:	613b      	str	r3, [r7, #16]
  return(result);
 8020e02:	693b      	ldr	r3, [r7, #16]
 8020e04:	2b00      	cmp	r3, #0
 8020e06:	d105      	bne.n	8020e14 <osThreadFlagsClear+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8020e08:	f3ef 8311 	mrs	r3, BASEPRI
 8020e0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8020e0e:	68fb      	ldr	r3, [r7, #12]
 8020e10:	2b00      	cmp	r3, #0
 8020e12:	d007      	beq.n	8020e24 <osThreadFlagsClear+0x3c>
 8020e14:	4b1b      	ldr	r3, [pc, #108]	; (8020e84 <osThreadFlagsClear+0x9c>)
 8020e16:	681b      	ldr	r3, [r3, #0]
 8020e18:	2b02      	cmp	r3, #2
 8020e1a:	d103      	bne.n	8020e24 <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 8020e1c:	f06f 0305 	mvn.w	r3, #5
 8020e20:	61fb      	str	r3, [r7, #28]
 8020e22:	e02a      	b.n	8020e7a <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8020e24:	687b      	ldr	r3, [r7, #4]
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	da03      	bge.n	8020e32 <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 8020e2a:	f06f 0303 	mvn.w	r3, #3
 8020e2e:	61fb      	str	r3, [r7, #28]
 8020e30:	e023      	b.n	8020e7a <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 8020e32:	f002 fc65 	bl	8023700 <xTaskGetCurrentTaskHandle>
 8020e36:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 8020e38:	f107 0308 	add.w	r3, r7, #8
 8020e3c:	2200      	movs	r2, #0
 8020e3e:	2100      	movs	r1, #0
 8020e40:	69b8      	ldr	r0, [r7, #24]
 8020e42:	f002 fe4d 	bl	8023ae0 <xTaskGenericNotify>
 8020e46:	4603      	mov	r3, r0
 8020e48:	2b01      	cmp	r3, #1
 8020e4a:	d113      	bne.n	8020e74 <osThreadFlagsClear+0x8c>
      rflags = cflags;
 8020e4c:	68bb      	ldr	r3, [r7, #8]
 8020e4e:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 8020e50:	687b      	ldr	r3, [r7, #4]
 8020e52:	43da      	mvns	r2, r3
 8020e54:	68bb      	ldr	r3, [r7, #8]
 8020e56:	4013      	ands	r3, r2
 8020e58:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 8020e5a:	68b9      	ldr	r1, [r7, #8]
 8020e5c:	2300      	movs	r3, #0
 8020e5e:	2203      	movs	r2, #3
 8020e60:	69b8      	ldr	r0, [r7, #24]
 8020e62:	f002 fe3d 	bl	8023ae0 <xTaskGenericNotify>
 8020e66:	4603      	mov	r3, r0
 8020e68:	2b01      	cmp	r3, #1
 8020e6a:	d006      	beq.n	8020e7a <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 8020e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8020e70:	61fb      	str	r3, [r7, #28]
 8020e72:	e002      	b.n	8020e7a <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 8020e74:	f04f 33ff 	mov.w	r3, #4294967295
 8020e78:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 8020e7a:	69fb      	ldr	r3, [r7, #28]
}
 8020e7c:	4618      	mov	r0, r3
 8020e7e:	3720      	adds	r7, #32
 8020e80:	46bd      	mov	sp, r7
 8020e82:	bd80      	pop	{r7, pc}
 8020e84:	20001574 	.word	0x20001574

08020e88 <osThreadFlagsGet>:

uint32_t osThreadFlagsGet (void) {
 8020e88:	b580      	push	{r7, lr}
 8020e8a:	b086      	sub	sp, #24
 8020e8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020e8e:	f3ef 8305 	mrs	r3, IPSR
 8020e92:	613b      	str	r3, [r7, #16]
  return(result);
 8020e94:	693b      	ldr	r3, [r7, #16]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 8020e96:	2b00      	cmp	r3, #0
 8020e98:	d10f      	bne.n	8020eba <osThreadFlagsGet+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8020e9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8020ea0:	68fb      	ldr	r3, [r7, #12]
 8020ea2:	2b00      	cmp	r3, #0
 8020ea4:	d105      	bne.n	8020eb2 <osThreadFlagsGet+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8020ea6:	f3ef 8311 	mrs	r3, BASEPRI
 8020eaa:	60bb      	str	r3, [r7, #8]
  return(result);
 8020eac:	68bb      	ldr	r3, [r7, #8]
 8020eae:	2b00      	cmp	r3, #0
 8020eb0:	d007      	beq.n	8020ec2 <osThreadFlagsGet+0x3a>
 8020eb2:	4b0e      	ldr	r3, [pc, #56]	; (8020eec <osThreadFlagsGet+0x64>)
 8020eb4:	681b      	ldr	r3, [r3, #0]
 8020eb6:	2b02      	cmp	r3, #2
 8020eb8:	d103      	bne.n	8020ec2 <osThreadFlagsGet+0x3a>
    rflags = (uint32_t)osErrorISR;
 8020eba:	f06f 0305 	mvn.w	r3, #5
 8020ebe:	607b      	str	r3, [r7, #4]
 8020ec0:	e00e      	b.n	8020ee0 <osThreadFlagsGet+0x58>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 8020ec2:	f002 fc1d 	bl	8023700 <xTaskGetCurrentTaskHandle>
 8020ec6:	6178      	str	r0, [r7, #20]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 8020ec8:	1d3b      	adds	r3, r7, #4
 8020eca:	2200      	movs	r2, #0
 8020ecc:	2100      	movs	r1, #0
 8020ece:	6978      	ldr	r0, [r7, #20]
 8020ed0:	f002 fe06 	bl	8023ae0 <xTaskGenericNotify>
 8020ed4:	4603      	mov	r3, r0
 8020ed6:	2b01      	cmp	r3, #1
 8020ed8:	d002      	beq.n	8020ee0 <osThreadFlagsGet+0x58>
      rflags = (uint32_t)osError;
 8020eda:	f04f 33ff 	mov.w	r3, #4294967295
 8020ede:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 8020ee0:	687b      	ldr	r3, [r7, #4]
}
 8020ee2:	4618      	mov	r0, r3
 8020ee4:	3718      	adds	r7, #24
 8020ee6:	46bd      	mov	sp, r7
 8020ee8:	bd80      	pop	{r7, pc}
 8020eea:	bf00      	nop
 8020eec:	20001574 	.word	0x20001574

08020ef0 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8020ef0:	b580      	push	{r7, lr}
 8020ef2:	b08e      	sub	sp, #56	; 0x38
 8020ef4:	af00      	add	r7, sp, #0
 8020ef6:	60f8      	str	r0, [r7, #12]
 8020ef8:	60b9      	str	r1, [r7, #8]
 8020efa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020efc:	f3ef 8305 	mrs	r3, IPSR
 8020f00:	61fb      	str	r3, [r7, #28]
  return(result);
 8020f02:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8020f04:	2b00      	cmp	r3, #0
 8020f06:	d10f      	bne.n	8020f28 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020f08:	f3ef 8310 	mrs	r3, PRIMASK
 8020f0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8020f0e:	69bb      	ldr	r3, [r7, #24]
 8020f10:	2b00      	cmp	r3, #0
 8020f12:	d105      	bne.n	8020f20 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8020f14:	f3ef 8311 	mrs	r3, BASEPRI
 8020f18:	617b      	str	r3, [r7, #20]
  return(result);
 8020f1a:	697b      	ldr	r3, [r7, #20]
 8020f1c:	2b00      	cmp	r3, #0
 8020f1e:	d007      	beq.n	8020f30 <osThreadFlagsWait+0x40>
 8020f20:	4b3c      	ldr	r3, [pc, #240]	; (8021014 <osThreadFlagsWait+0x124>)
 8020f22:	681b      	ldr	r3, [r3, #0]
 8020f24:	2b02      	cmp	r3, #2
 8020f26:	d103      	bne.n	8020f30 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8020f28:	f06f 0305 	mvn.w	r3, #5
 8020f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8020f2e:	e06b      	b.n	8021008 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8020f30:	68fb      	ldr	r3, [r7, #12]
 8020f32:	2b00      	cmp	r3, #0
 8020f34:	da03      	bge.n	8020f3e <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 8020f36:	f06f 0303 	mvn.w	r3, #3
 8020f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8020f3c:	e064      	b.n	8021008 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8020f3e:	68bb      	ldr	r3, [r7, #8]
 8020f40:	f003 0302 	and.w	r3, r3, #2
 8020f44:	2b00      	cmp	r3, #0
 8020f46:	d002      	beq.n	8020f4e <osThreadFlagsWait+0x5e>
      clear = 0U;
 8020f48:	2300      	movs	r3, #0
 8020f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8020f4c:	e001      	b.n	8020f52 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8020f4e:	68fb      	ldr	r3, [r7, #12]
 8020f50:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8020f52:	2300      	movs	r3, #0
 8020f54:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8020f56:	687b      	ldr	r3, [r7, #4]
 8020f58:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8020f5a:	f002 f897 	bl	802308c <xTaskGetTickCount>
 8020f5e:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8020f60:	f107 0210 	add.w	r2, r7, #16
 8020f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020f66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8020f68:	2000      	movs	r0, #0
 8020f6a:	f002 fd5f 	bl	8023a2c <xTaskNotifyWait>
 8020f6e:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8020f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020f72:	2b01      	cmp	r3, #1
 8020f74:	d137      	bne.n	8020fe6 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 8020f76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020f78:	68fb      	ldr	r3, [r7, #12]
 8020f7a:	4013      	ands	r3, r2
 8020f7c:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8020f7e:	693b      	ldr	r3, [r7, #16]
 8020f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020f82:	4313      	orrs	r3, r2
 8020f84:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8020f86:	68bb      	ldr	r3, [r7, #8]
 8020f88:	f003 0301 	and.w	r3, r3, #1
 8020f8c:	2b00      	cmp	r3, #0
 8020f8e:	d00c      	beq.n	8020faa <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8020f90:	68fa      	ldr	r2, [r7, #12]
 8020f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020f94:	4013      	ands	r3, r2
 8020f96:	68fa      	ldr	r2, [r7, #12]
 8020f98:	429a      	cmp	r2, r3
 8020f9a:	d032      	beq.n	8021002 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8020f9c:	687b      	ldr	r3, [r7, #4]
 8020f9e:	2b00      	cmp	r3, #0
 8020fa0:	d10f      	bne.n	8020fc2 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8020fa2:	f06f 0302 	mvn.w	r3, #2
 8020fa6:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8020fa8:	e02e      	b.n	8021008 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8020faa:	68fa      	ldr	r2, [r7, #12]
 8020fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020fae:	4013      	ands	r3, r2
 8020fb0:	2b00      	cmp	r3, #0
 8020fb2:	d128      	bne.n	8021006 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8020fb4:	687b      	ldr	r3, [r7, #4]
 8020fb6:	2b00      	cmp	r3, #0
 8020fb8:	d103      	bne.n	8020fc2 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8020fba:	f06f 0302 	mvn.w	r3, #2
 8020fbe:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8020fc0:	e022      	b.n	8021008 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8020fc2:	f002 f863 	bl	802308c <xTaskGetTickCount>
 8020fc6:	4602      	mov	r2, r0
 8020fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020fca:	1ad3      	subs	r3, r2, r3
 8020fcc:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 8020fce:	6a3a      	ldr	r2, [r7, #32]
 8020fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020fd2:	429a      	cmp	r2, r3
 8020fd4:	d902      	bls.n	8020fdc <osThreadFlagsWait+0xec>
          tout  = 0;
 8020fd6:	2300      	movs	r3, #0
 8020fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020fda:	e00e      	b.n	8020ffa <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8020fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020fde:	6a3b      	ldr	r3, [r7, #32]
 8020fe0:	1ad3      	subs	r3, r2, r3
 8020fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020fe4:	e009      	b.n	8020ffa <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8020fe6:	687b      	ldr	r3, [r7, #4]
 8020fe8:	2b00      	cmp	r3, #0
 8020fea:	d103      	bne.n	8020ff4 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8020fec:	f06f 0302 	mvn.w	r3, #2
 8020ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8020ff2:	e002      	b.n	8020ffa <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8020ff4:	f06f 0301 	mvn.w	r3, #1
 8020ff8:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 8020ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ffc:	2b00      	cmp	r3, #0
 8020ffe:	d1af      	bne.n	8020f60 <osThreadFlagsWait+0x70>
 8021000:	e002      	b.n	8021008 <osThreadFlagsWait+0x118>
            break;
 8021002:	bf00      	nop
 8021004:	e000      	b.n	8021008 <osThreadFlagsWait+0x118>
            break;
 8021006:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8021008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 802100a:	4618      	mov	r0, r3
 802100c:	3738      	adds	r7, #56	; 0x38
 802100e:	46bd      	mov	sp, r7
 8021010:	bd80      	pop	{r7, pc}
 8021012:	bf00      	nop
 8021014:	20001574 	.word	0x20001574

08021018 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8021018:	b580      	push	{r7, lr}
 802101a:	b086      	sub	sp, #24
 802101c:	af00      	add	r7, sp, #0
 802101e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021020:	f3ef 8305 	mrs	r3, IPSR
 8021024:	613b      	str	r3, [r7, #16]
  return(result);
 8021026:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8021028:	2b00      	cmp	r3, #0
 802102a:	d10f      	bne.n	802104c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802102c:	f3ef 8310 	mrs	r3, PRIMASK
 8021030:	60fb      	str	r3, [r7, #12]
  return(result);
 8021032:	68fb      	ldr	r3, [r7, #12]
 8021034:	2b00      	cmp	r3, #0
 8021036:	d105      	bne.n	8021044 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8021038:	f3ef 8311 	mrs	r3, BASEPRI
 802103c:	60bb      	str	r3, [r7, #8]
  return(result);
 802103e:	68bb      	ldr	r3, [r7, #8]
 8021040:	2b00      	cmp	r3, #0
 8021042:	d007      	beq.n	8021054 <osDelay+0x3c>
 8021044:	4b0a      	ldr	r3, [pc, #40]	; (8021070 <osDelay+0x58>)
 8021046:	681b      	ldr	r3, [r3, #0]
 8021048:	2b02      	cmp	r3, #2
 802104a:	d103      	bne.n	8021054 <osDelay+0x3c>
    stat = osErrorISR;
 802104c:	f06f 0305 	mvn.w	r3, #5
 8021050:	617b      	str	r3, [r7, #20]
 8021052:	e007      	b.n	8021064 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8021054:	2300      	movs	r3, #0
 8021056:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8021058:	687b      	ldr	r3, [r7, #4]
 802105a:	2b00      	cmp	r3, #0
 802105c:	d002      	beq.n	8021064 <osDelay+0x4c>
      vTaskDelay(ticks);
 802105e:	6878      	ldr	r0, [r7, #4]
 8021060:	f001 fed2 	bl	8022e08 <vTaskDelay>
    }
  }

  return (stat);
 8021064:	697b      	ldr	r3, [r7, #20]
}
 8021066:	4618      	mov	r0, r3
 8021068:	3718      	adds	r7, #24
 802106a:	46bd      	mov	sp, r7
 802106c:	bd80      	pop	{r7, pc}
 802106e:	bf00      	nop
 8021070:	20001574 	.word	0x20001574

08021074 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8021074:	b580      	push	{r7, lr}
 8021076:	b088      	sub	sp, #32
 8021078:	af00      	add	r7, sp, #0
 802107a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802107c:	f3ef 8305 	mrs	r3, IPSR
 8021080:	617b      	str	r3, [r7, #20]
  return(result);
 8021082:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8021084:	2b00      	cmp	r3, #0
 8021086:	d10f      	bne.n	80210a8 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021088:	f3ef 8310 	mrs	r3, PRIMASK
 802108c:	613b      	str	r3, [r7, #16]
  return(result);
 802108e:	693b      	ldr	r3, [r7, #16]
 8021090:	2b00      	cmp	r3, #0
 8021092:	d105      	bne.n	80210a0 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8021094:	f3ef 8311 	mrs	r3, BASEPRI
 8021098:	60fb      	str	r3, [r7, #12]
  return(result);
 802109a:	68fb      	ldr	r3, [r7, #12]
 802109c:	2b00      	cmp	r3, #0
 802109e:	d007      	beq.n	80210b0 <osDelayUntil+0x3c>
 80210a0:	4b13      	ldr	r3, [pc, #76]	; (80210f0 <osDelayUntil+0x7c>)
 80210a2:	681b      	ldr	r3, [r3, #0]
 80210a4:	2b02      	cmp	r3, #2
 80210a6:	d103      	bne.n	80210b0 <osDelayUntil+0x3c>
    stat = osErrorISR;
 80210a8:	f06f 0305 	mvn.w	r3, #5
 80210ac:	61fb      	str	r3, [r7, #28]
 80210ae:	e019      	b.n	80210e4 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 80210b0:	2300      	movs	r3, #0
 80210b2:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 80210b4:	f001 ffea 	bl	802308c <xTaskGetTickCount>
 80210b8:	4603      	mov	r3, r0
 80210ba:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80210bc:	68bb      	ldr	r3, [r7, #8]
 80210be:	687a      	ldr	r2, [r7, #4]
 80210c0:	1ad3      	subs	r3, r2, r3
 80210c2:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80210c4:	69bb      	ldr	r3, [r7, #24]
 80210c6:	2b00      	cmp	r3, #0
 80210c8:	d009      	beq.n	80210de <osDelayUntil+0x6a>
 80210ca:	69bb      	ldr	r3, [r7, #24]
 80210cc:	2b00      	cmp	r3, #0
 80210ce:	db06      	blt.n	80210de <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 80210d0:	f107 0308 	add.w	r3, r7, #8
 80210d4:	69b9      	ldr	r1, [r7, #24]
 80210d6:	4618      	mov	r0, r3
 80210d8:	f001 fe1c 	bl	8022d14 <vTaskDelayUntil>
 80210dc:	e002      	b.n	80210e4 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80210de:	f06f 0303 	mvn.w	r3, #3
 80210e2:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80210e4:	69fb      	ldr	r3, [r7, #28]
}
 80210e6:	4618      	mov	r0, r3
 80210e8:	3720      	adds	r7, #32
 80210ea:	46bd      	mov	sp, r7
 80210ec:	bd80      	pop	{r7, pc}
 80210ee:	bf00      	nop
 80210f0:	20001574 	.word	0x20001574

080210f4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80210f4:	b580      	push	{r7, lr}
 80210f6:	b08c      	sub	sp, #48	; 0x30
 80210f8:	af02      	add	r7, sp, #8
 80210fa:	60f8      	str	r0, [r7, #12]
 80210fc:	60b9      	str	r1, [r7, #8]
 80210fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8021100:	2300      	movs	r3, #0
 8021102:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021104:	f3ef 8305 	mrs	r3, IPSR
 8021108:	61bb      	str	r3, [r7, #24]
  return(result);
 802110a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 802110c:	2b00      	cmp	r3, #0
 802110e:	f040 8087 	bne.w	8021220 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021112:	f3ef 8310 	mrs	r3, PRIMASK
 8021116:	617b      	str	r3, [r7, #20]
  return(result);
 8021118:	697b      	ldr	r3, [r7, #20]
 802111a:	2b00      	cmp	r3, #0
 802111c:	d105      	bne.n	802112a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 802111e:	f3ef 8311 	mrs	r3, BASEPRI
 8021122:	613b      	str	r3, [r7, #16]
  return(result);
 8021124:	693b      	ldr	r3, [r7, #16]
 8021126:	2b00      	cmp	r3, #0
 8021128:	d003      	beq.n	8021132 <osSemaphoreNew+0x3e>
 802112a:	4b40      	ldr	r3, [pc, #256]	; (802122c <osSemaphoreNew+0x138>)
 802112c:	681b      	ldr	r3, [r3, #0]
 802112e:	2b02      	cmp	r3, #2
 8021130:	d076      	beq.n	8021220 <osSemaphoreNew+0x12c>
 8021132:	68fb      	ldr	r3, [r7, #12]
 8021134:	2b00      	cmp	r3, #0
 8021136:	d073      	beq.n	8021220 <osSemaphoreNew+0x12c>
 8021138:	68ba      	ldr	r2, [r7, #8]
 802113a:	68fb      	ldr	r3, [r7, #12]
 802113c:	429a      	cmp	r2, r3
 802113e:	d86f      	bhi.n	8021220 <osSemaphoreNew+0x12c>
    mem = -1;
 8021140:	f04f 33ff 	mov.w	r3, #4294967295
 8021144:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8021146:	687b      	ldr	r3, [r7, #4]
 8021148:	2b00      	cmp	r3, #0
 802114a:	d015      	beq.n	8021178 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 802114c:	687b      	ldr	r3, [r7, #4]
 802114e:	689b      	ldr	r3, [r3, #8]
 8021150:	2b00      	cmp	r3, #0
 8021152:	d006      	beq.n	8021162 <osSemaphoreNew+0x6e>
 8021154:	687b      	ldr	r3, [r7, #4]
 8021156:	68db      	ldr	r3, [r3, #12]
 8021158:	2b4f      	cmp	r3, #79	; 0x4f
 802115a:	d902      	bls.n	8021162 <osSemaphoreNew+0x6e>
        mem = 1;
 802115c:	2301      	movs	r3, #1
 802115e:	623b      	str	r3, [r7, #32]
 8021160:	e00c      	b.n	802117c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8021162:	687b      	ldr	r3, [r7, #4]
 8021164:	689b      	ldr	r3, [r3, #8]
 8021166:	2b00      	cmp	r3, #0
 8021168:	d108      	bne.n	802117c <osSemaphoreNew+0x88>
 802116a:	687b      	ldr	r3, [r7, #4]
 802116c:	68db      	ldr	r3, [r3, #12]
 802116e:	2b00      	cmp	r3, #0
 8021170:	d104      	bne.n	802117c <osSemaphoreNew+0x88>
          mem = 0;
 8021172:	2300      	movs	r3, #0
 8021174:	623b      	str	r3, [r7, #32]
 8021176:	e001      	b.n	802117c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8021178:	2300      	movs	r3, #0
 802117a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 802117c:	6a3b      	ldr	r3, [r7, #32]
 802117e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021182:	d04d      	beq.n	8021220 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8021184:	68fb      	ldr	r3, [r7, #12]
 8021186:	2b01      	cmp	r3, #1
 8021188:	d129      	bne.n	80211de <osSemaphoreNew+0xea>
        if (mem == 1) {
 802118a:	6a3b      	ldr	r3, [r7, #32]
 802118c:	2b01      	cmp	r3, #1
 802118e:	d10b      	bne.n	80211a8 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8021190:	687b      	ldr	r3, [r7, #4]
 8021192:	689a      	ldr	r2, [r3, #8]
 8021194:	2303      	movs	r3, #3
 8021196:	9300      	str	r3, [sp, #0]
 8021198:	4613      	mov	r3, r2
 802119a:	2200      	movs	r2, #0
 802119c:	2100      	movs	r1, #0
 802119e:	2001      	movs	r0, #1
 80211a0:	f000 fc72 	bl	8021a88 <xQueueGenericCreateStatic>
 80211a4:	6278      	str	r0, [r7, #36]	; 0x24
 80211a6:	e005      	b.n	80211b4 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80211a8:	2203      	movs	r2, #3
 80211aa:	2100      	movs	r1, #0
 80211ac:	2001      	movs	r0, #1
 80211ae:	f000 fcde 	bl	8021b6e <xQueueGenericCreate>
 80211b2:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80211b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80211b6:	2b00      	cmp	r3, #0
 80211b8:	d022      	beq.n	8021200 <osSemaphoreNew+0x10c>
 80211ba:	68bb      	ldr	r3, [r7, #8]
 80211bc:	2b00      	cmp	r3, #0
 80211be:	d01f      	beq.n	8021200 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80211c0:	2300      	movs	r3, #0
 80211c2:	2200      	movs	r2, #0
 80211c4:	2100      	movs	r1, #0
 80211c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80211c8:	f000 fd9a 	bl	8021d00 <xQueueGenericSend>
 80211cc:	4603      	mov	r3, r0
 80211ce:	2b01      	cmp	r3, #1
 80211d0:	d016      	beq.n	8021200 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80211d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80211d4:	f001 fa2f 	bl	8022636 <vQueueDelete>
            hSemaphore = NULL;
 80211d8:	2300      	movs	r3, #0
 80211da:	627b      	str	r3, [r7, #36]	; 0x24
 80211dc:	e010      	b.n	8021200 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80211de:	6a3b      	ldr	r3, [r7, #32]
 80211e0:	2b01      	cmp	r3, #1
 80211e2:	d108      	bne.n	80211f6 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80211e4:	687b      	ldr	r3, [r7, #4]
 80211e6:	689b      	ldr	r3, [r3, #8]
 80211e8:	461a      	mov	r2, r3
 80211ea:	68b9      	ldr	r1, [r7, #8]
 80211ec:	68f8      	ldr	r0, [r7, #12]
 80211ee:	f000 fd20 	bl	8021c32 <xQueueCreateCountingSemaphoreStatic>
 80211f2:	6278      	str	r0, [r7, #36]	; 0x24
 80211f4:	e004      	b.n	8021200 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80211f6:	68b9      	ldr	r1, [r7, #8]
 80211f8:	68f8      	ldr	r0, [r7, #12]
 80211fa:	f000 fd4f 	bl	8021c9c <xQueueCreateCountingSemaphore>
 80211fe:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8021200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021202:	2b00      	cmp	r3, #0
 8021204:	d00c      	beq.n	8021220 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8021206:	687b      	ldr	r3, [r7, #4]
 8021208:	2b00      	cmp	r3, #0
 802120a:	d003      	beq.n	8021214 <osSemaphoreNew+0x120>
          name = attr->name;
 802120c:	687b      	ldr	r3, [r7, #4]
 802120e:	681b      	ldr	r3, [r3, #0]
 8021210:	61fb      	str	r3, [r7, #28]
 8021212:	e001      	b.n	8021218 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8021214:	2300      	movs	r3, #0
 8021216:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8021218:	69f9      	ldr	r1, [r7, #28]
 802121a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802121c:	f001 fb56 	bl	80228cc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8021220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8021222:	4618      	mov	r0, r3
 8021224:	3728      	adds	r7, #40	; 0x28
 8021226:	46bd      	mov	sp, r7
 8021228:	bd80      	pop	{r7, pc}
 802122a:	bf00      	nop
 802122c:	20001574 	.word	0x20001574

08021230 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8021230:	b580      	push	{r7, lr}
 8021232:	b088      	sub	sp, #32
 8021234:	af00      	add	r7, sp, #0
 8021236:	6078      	str	r0, [r7, #4]
 8021238:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 802123a:	687b      	ldr	r3, [r7, #4]
 802123c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 802123e:	2300      	movs	r3, #0
 8021240:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8021242:	69bb      	ldr	r3, [r7, #24]
 8021244:	2b00      	cmp	r3, #0
 8021246:	d103      	bne.n	8021250 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8021248:	f06f 0303 	mvn.w	r3, #3
 802124c:	61fb      	str	r3, [r7, #28]
 802124e:	e04b      	b.n	80212e8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021250:	f3ef 8305 	mrs	r3, IPSR
 8021254:	617b      	str	r3, [r7, #20]
  return(result);
 8021256:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8021258:	2b00      	cmp	r3, #0
 802125a:	d10f      	bne.n	802127c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802125c:	f3ef 8310 	mrs	r3, PRIMASK
 8021260:	613b      	str	r3, [r7, #16]
  return(result);
 8021262:	693b      	ldr	r3, [r7, #16]
 8021264:	2b00      	cmp	r3, #0
 8021266:	d105      	bne.n	8021274 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8021268:	f3ef 8311 	mrs	r3, BASEPRI
 802126c:	60fb      	str	r3, [r7, #12]
  return(result);
 802126e:	68fb      	ldr	r3, [r7, #12]
 8021270:	2b00      	cmp	r3, #0
 8021272:	d026      	beq.n	80212c2 <osSemaphoreAcquire+0x92>
 8021274:	4b1f      	ldr	r3, [pc, #124]	; (80212f4 <osSemaphoreAcquire+0xc4>)
 8021276:	681b      	ldr	r3, [r3, #0]
 8021278:	2b02      	cmp	r3, #2
 802127a:	d122      	bne.n	80212c2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 802127c:	683b      	ldr	r3, [r7, #0]
 802127e:	2b00      	cmp	r3, #0
 8021280:	d003      	beq.n	802128a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8021282:	f06f 0303 	mvn.w	r3, #3
 8021286:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8021288:	e02d      	b.n	80212e6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 802128a:	2300      	movs	r3, #0
 802128c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 802128e:	f107 0308 	add.w	r3, r7, #8
 8021292:	461a      	mov	r2, r3
 8021294:	2100      	movs	r1, #0
 8021296:	69b8      	ldr	r0, [r7, #24]
 8021298:	f001 f92e 	bl	80224f8 <xQueueReceiveFromISR>
 802129c:	4603      	mov	r3, r0
 802129e:	2b01      	cmp	r3, #1
 80212a0:	d003      	beq.n	80212aa <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80212a2:	f06f 0302 	mvn.w	r3, #2
 80212a6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80212a8:	e01d      	b.n	80212e6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80212aa:	68bb      	ldr	r3, [r7, #8]
 80212ac:	2b00      	cmp	r3, #0
 80212ae:	d01a      	beq.n	80212e6 <osSemaphoreAcquire+0xb6>
 80212b0:	4b11      	ldr	r3, [pc, #68]	; (80212f8 <osSemaphoreAcquire+0xc8>)
 80212b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80212b6:	601a      	str	r2, [r3, #0]
 80212b8:	f3bf 8f4f 	dsb	sy
 80212bc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80212c0:	e011      	b.n	80212e6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80212c2:	6839      	ldr	r1, [r7, #0]
 80212c4:	69b8      	ldr	r0, [r7, #24]
 80212c6:	f001 f80f 	bl	80222e8 <xQueueSemaphoreTake>
 80212ca:	4603      	mov	r3, r0
 80212cc:	2b01      	cmp	r3, #1
 80212ce:	d00b      	beq.n	80212e8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80212d0:	683b      	ldr	r3, [r7, #0]
 80212d2:	2b00      	cmp	r3, #0
 80212d4:	d003      	beq.n	80212de <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80212d6:	f06f 0301 	mvn.w	r3, #1
 80212da:	61fb      	str	r3, [r7, #28]
 80212dc:	e004      	b.n	80212e8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80212de:	f06f 0302 	mvn.w	r3, #2
 80212e2:	61fb      	str	r3, [r7, #28]
 80212e4:	e000      	b.n	80212e8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80212e6:	bf00      	nop
      }
    }
  }

  return (stat);
 80212e8:	69fb      	ldr	r3, [r7, #28]
}
 80212ea:	4618      	mov	r0, r3
 80212ec:	3720      	adds	r7, #32
 80212ee:	46bd      	mov	sp, r7
 80212f0:	bd80      	pop	{r7, pc}
 80212f2:	bf00      	nop
 80212f4:	20001574 	.word	0x20001574
 80212f8:	e000ed04 	.word	0xe000ed04

080212fc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80212fc:	b580      	push	{r7, lr}
 80212fe:	b088      	sub	sp, #32
 8021300:	af00      	add	r7, sp, #0
 8021302:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8021304:	687b      	ldr	r3, [r7, #4]
 8021306:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8021308:	2300      	movs	r3, #0
 802130a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 802130c:	69bb      	ldr	r3, [r7, #24]
 802130e:	2b00      	cmp	r3, #0
 8021310:	d103      	bne.n	802131a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8021312:	f06f 0303 	mvn.w	r3, #3
 8021316:	61fb      	str	r3, [r7, #28]
 8021318:	e03e      	b.n	8021398 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802131a:	f3ef 8305 	mrs	r3, IPSR
 802131e:	617b      	str	r3, [r7, #20]
  return(result);
 8021320:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8021322:	2b00      	cmp	r3, #0
 8021324:	d10f      	bne.n	8021346 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021326:	f3ef 8310 	mrs	r3, PRIMASK
 802132a:	613b      	str	r3, [r7, #16]
  return(result);
 802132c:	693b      	ldr	r3, [r7, #16]
 802132e:	2b00      	cmp	r3, #0
 8021330:	d105      	bne.n	802133e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8021332:	f3ef 8311 	mrs	r3, BASEPRI
 8021336:	60fb      	str	r3, [r7, #12]
  return(result);
 8021338:	68fb      	ldr	r3, [r7, #12]
 802133a:	2b00      	cmp	r3, #0
 802133c:	d01e      	beq.n	802137c <osSemaphoreRelease+0x80>
 802133e:	4b19      	ldr	r3, [pc, #100]	; (80213a4 <osSemaphoreRelease+0xa8>)
 8021340:	681b      	ldr	r3, [r3, #0]
 8021342:	2b02      	cmp	r3, #2
 8021344:	d11a      	bne.n	802137c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8021346:	2300      	movs	r3, #0
 8021348:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 802134a:	f107 0308 	add.w	r3, r7, #8
 802134e:	4619      	mov	r1, r3
 8021350:	69b8      	ldr	r0, [r7, #24]
 8021352:	f000 fe63 	bl	802201c <xQueueGiveFromISR>
 8021356:	4603      	mov	r3, r0
 8021358:	2b01      	cmp	r3, #1
 802135a:	d003      	beq.n	8021364 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 802135c:	f06f 0302 	mvn.w	r3, #2
 8021360:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8021362:	e018      	b.n	8021396 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8021364:	68bb      	ldr	r3, [r7, #8]
 8021366:	2b00      	cmp	r3, #0
 8021368:	d015      	beq.n	8021396 <osSemaphoreRelease+0x9a>
 802136a:	4b0f      	ldr	r3, [pc, #60]	; (80213a8 <osSemaphoreRelease+0xac>)
 802136c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021370:	601a      	str	r2, [r3, #0]
 8021372:	f3bf 8f4f 	dsb	sy
 8021376:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 802137a:	e00c      	b.n	8021396 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 802137c:	2300      	movs	r3, #0
 802137e:	2200      	movs	r2, #0
 8021380:	2100      	movs	r1, #0
 8021382:	69b8      	ldr	r0, [r7, #24]
 8021384:	f000 fcbc 	bl	8021d00 <xQueueGenericSend>
 8021388:	4603      	mov	r3, r0
 802138a:	2b01      	cmp	r3, #1
 802138c:	d004      	beq.n	8021398 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 802138e:	f06f 0302 	mvn.w	r3, #2
 8021392:	61fb      	str	r3, [r7, #28]
 8021394:	e000      	b.n	8021398 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8021396:	bf00      	nop
    }
  }

  return (stat);
 8021398:	69fb      	ldr	r3, [r7, #28]
}
 802139a:	4618      	mov	r0, r3
 802139c:	3720      	adds	r7, #32
 802139e:	46bd      	mov	sp, r7
 80213a0:	bd80      	pop	{r7, pc}
 80213a2:	bf00      	nop
 80213a4:	20001574 	.word	0x20001574
 80213a8:	e000ed04 	.word	0xe000ed04

080213ac <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80213ac:	b580      	push	{r7, lr}
 80213ae:	b088      	sub	sp, #32
 80213b0:	af00      	add	r7, sp, #0
 80213b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80213b4:	687b      	ldr	r3, [r7, #4]
 80213b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80213b8:	f3ef 8305 	mrs	r3, IPSR
 80213bc:	617b      	str	r3, [r7, #20]
  return(result);
 80213be:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80213c0:	2b00      	cmp	r3, #0
 80213c2:	d10f      	bne.n	80213e4 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80213c4:	f3ef 8310 	mrs	r3, PRIMASK
 80213c8:	613b      	str	r3, [r7, #16]
  return(result);
 80213ca:	693b      	ldr	r3, [r7, #16]
 80213cc:	2b00      	cmp	r3, #0
 80213ce:	d105      	bne.n	80213dc <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80213d0:	f3ef 8311 	mrs	r3, BASEPRI
 80213d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80213d6:	68fb      	ldr	r3, [r7, #12]
 80213d8:	2b00      	cmp	r3, #0
 80213da:	d007      	beq.n	80213ec <osSemaphoreDelete+0x40>
 80213dc:	4b0d      	ldr	r3, [pc, #52]	; (8021414 <osSemaphoreDelete+0x68>)
 80213de:	681b      	ldr	r3, [r3, #0]
 80213e0:	2b02      	cmp	r3, #2
 80213e2:	d103      	bne.n	80213ec <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 80213e4:	f06f 0305 	mvn.w	r3, #5
 80213e8:	61fb      	str	r3, [r7, #28]
 80213ea:	e00e      	b.n	802140a <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 80213ec:	69bb      	ldr	r3, [r7, #24]
 80213ee:	2b00      	cmp	r3, #0
 80213f0:	d103      	bne.n	80213fa <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 80213f2:	f06f 0303 	mvn.w	r3, #3
 80213f6:	61fb      	str	r3, [r7, #28]
 80213f8:	e007      	b.n	802140a <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80213fa:	69b8      	ldr	r0, [r7, #24]
 80213fc:	f001 fa8e 	bl	802291c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8021400:	2300      	movs	r3, #0
 8021402:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8021404:	69b8      	ldr	r0, [r7, #24]
 8021406:	f001 f916 	bl	8022636 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 802140a:	69fb      	ldr	r3, [r7, #28]
}
 802140c:	4618      	mov	r0, r3
 802140e:	3720      	adds	r7, #32
 8021410:	46bd      	mov	sp, r7
 8021412:	bd80      	pop	{r7, pc}
 8021414:	20001574 	.word	0x20001574

08021418 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8021418:	b580      	push	{r7, lr}
 802141a:	b08c      	sub	sp, #48	; 0x30
 802141c:	af02      	add	r7, sp, #8
 802141e:	60f8      	str	r0, [r7, #12]
 8021420:	60b9      	str	r1, [r7, #8]
 8021422:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8021424:	2300      	movs	r3, #0
 8021426:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021428:	f3ef 8305 	mrs	r3, IPSR
 802142c:	61bb      	str	r3, [r7, #24]
  return(result);
 802142e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8021430:	2b00      	cmp	r3, #0
 8021432:	d170      	bne.n	8021516 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021434:	f3ef 8310 	mrs	r3, PRIMASK
 8021438:	617b      	str	r3, [r7, #20]
  return(result);
 802143a:	697b      	ldr	r3, [r7, #20]
 802143c:	2b00      	cmp	r3, #0
 802143e:	d105      	bne.n	802144c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8021440:	f3ef 8311 	mrs	r3, BASEPRI
 8021444:	613b      	str	r3, [r7, #16]
  return(result);
 8021446:	693b      	ldr	r3, [r7, #16]
 8021448:	2b00      	cmp	r3, #0
 802144a:	d003      	beq.n	8021454 <osMessageQueueNew+0x3c>
 802144c:	4b34      	ldr	r3, [pc, #208]	; (8021520 <osMessageQueueNew+0x108>)
 802144e:	681b      	ldr	r3, [r3, #0]
 8021450:	2b02      	cmp	r3, #2
 8021452:	d060      	beq.n	8021516 <osMessageQueueNew+0xfe>
 8021454:	68fb      	ldr	r3, [r7, #12]
 8021456:	2b00      	cmp	r3, #0
 8021458:	d05d      	beq.n	8021516 <osMessageQueueNew+0xfe>
 802145a:	68bb      	ldr	r3, [r7, #8]
 802145c:	2b00      	cmp	r3, #0
 802145e:	d05a      	beq.n	8021516 <osMessageQueueNew+0xfe>
    mem = -1;
 8021460:	f04f 33ff 	mov.w	r3, #4294967295
 8021464:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8021466:	687b      	ldr	r3, [r7, #4]
 8021468:	2b00      	cmp	r3, #0
 802146a:	d029      	beq.n	80214c0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 802146c:	687b      	ldr	r3, [r7, #4]
 802146e:	689b      	ldr	r3, [r3, #8]
 8021470:	2b00      	cmp	r3, #0
 8021472:	d012      	beq.n	802149a <osMessageQueueNew+0x82>
 8021474:	687b      	ldr	r3, [r7, #4]
 8021476:	68db      	ldr	r3, [r3, #12]
 8021478:	2b4f      	cmp	r3, #79	; 0x4f
 802147a:	d90e      	bls.n	802149a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 802147c:	687b      	ldr	r3, [r7, #4]
 802147e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8021480:	2b00      	cmp	r3, #0
 8021482:	d00a      	beq.n	802149a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8021484:	687b      	ldr	r3, [r7, #4]
 8021486:	695a      	ldr	r2, [r3, #20]
 8021488:	68fb      	ldr	r3, [r7, #12]
 802148a:	68b9      	ldr	r1, [r7, #8]
 802148c:	fb01 f303 	mul.w	r3, r1, r3
 8021490:	429a      	cmp	r2, r3
 8021492:	d302      	bcc.n	802149a <osMessageQueueNew+0x82>
        mem = 1;
 8021494:	2301      	movs	r3, #1
 8021496:	623b      	str	r3, [r7, #32]
 8021498:	e014      	b.n	80214c4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 802149a:	687b      	ldr	r3, [r7, #4]
 802149c:	689b      	ldr	r3, [r3, #8]
 802149e:	2b00      	cmp	r3, #0
 80214a0:	d110      	bne.n	80214c4 <osMessageQueueNew+0xac>
 80214a2:	687b      	ldr	r3, [r7, #4]
 80214a4:	68db      	ldr	r3, [r3, #12]
 80214a6:	2b00      	cmp	r3, #0
 80214a8:	d10c      	bne.n	80214c4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80214aa:	687b      	ldr	r3, [r7, #4]
 80214ac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80214ae:	2b00      	cmp	r3, #0
 80214b0:	d108      	bne.n	80214c4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80214b2:	687b      	ldr	r3, [r7, #4]
 80214b4:	695b      	ldr	r3, [r3, #20]
 80214b6:	2b00      	cmp	r3, #0
 80214b8:	d104      	bne.n	80214c4 <osMessageQueueNew+0xac>
          mem = 0;
 80214ba:	2300      	movs	r3, #0
 80214bc:	623b      	str	r3, [r7, #32]
 80214be:	e001      	b.n	80214c4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80214c0:	2300      	movs	r3, #0
 80214c2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80214c4:	6a3b      	ldr	r3, [r7, #32]
 80214c6:	2b01      	cmp	r3, #1
 80214c8:	d10c      	bne.n	80214e4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80214ca:	687b      	ldr	r3, [r7, #4]
 80214cc:	691a      	ldr	r2, [r3, #16]
 80214ce:	687b      	ldr	r3, [r7, #4]
 80214d0:	6899      	ldr	r1, [r3, #8]
 80214d2:	2300      	movs	r3, #0
 80214d4:	9300      	str	r3, [sp, #0]
 80214d6:	460b      	mov	r3, r1
 80214d8:	68b9      	ldr	r1, [r7, #8]
 80214da:	68f8      	ldr	r0, [r7, #12]
 80214dc:	f000 fad4 	bl	8021a88 <xQueueGenericCreateStatic>
 80214e0:	6278      	str	r0, [r7, #36]	; 0x24
 80214e2:	e008      	b.n	80214f6 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80214e4:	6a3b      	ldr	r3, [r7, #32]
 80214e6:	2b00      	cmp	r3, #0
 80214e8:	d105      	bne.n	80214f6 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80214ea:	2200      	movs	r2, #0
 80214ec:	68b9      	ldr	r1, [r7, #8]
 80214ee:	68f8      	ldr	r0, [r7, #12]
 80214f0:	f000 fb3d 	bl	8021b6e <xQueueGenericCreate>
 80214f4:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80214f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80214f8:	2b00      	cmp	r3, #0
 80214fa:	d00c      	beq.n	8021516 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80214fc:	687b      	ldr	r3, [r7, #4]
 80214fe:	2b00      	cmp	r3, #0
 8021500:	d003      	beq.n	802150a <osMessageQueueNew+0xf2>
        name = attr->name;
 8021502:	687b      	ldr	r3, [r7, #4]
 8021504:	681b      	ldr	r3, [r3, #0]
 8021506:	61fb      	str	r3, [r7, #28]
 8021508:	e001      	b.n	802150e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 802150a:	2300      	movs	r3, #0
 802150c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 802150e:	69f9      	ldr	r1, [r7, #28]
 8021510:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021512:	f001 f9db 	bl	80228cc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8021516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8021518:	4618      	mov	r0, r3
 802151a:	3728      	adds	r7, #40	; 0x28
 802151c:	46bd      	mov	sp, r7
 802151e:	bd80      	pop	{r7, pc}
 8021520:	20001574 	.word	0x20001574

08021524 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8021524:	b580      	push	{r7, lr}
 8021526:	b08a      	sub	sp, #40	; 0x28
 8021528:	af00      	add	r7, sp, #0
 802152a:	60f8      	str	r0, [r7, #12]
 802152c:	60b9      	str	r1, [r7, #8]
 802152e:	603b      	str	r3, [r7, #0]
 8021530:	4613      	mov	r3, r2
 8021532:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8021534:	68fb      	ldr	r3, [r7, #12]
 8021536:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8021538:	2300      	movs	r3, #0
 802153a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802153c:	f3ef 8305 	mrs	r3, IPSR
 8021540:	61fb      	str	r3, [r7, #28]
  return(result);
 8021542:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8021544:	2b00      	cmp	r3, #0
 8021546:	d10f      	bne.n	8021568 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021548:	f3ef 8310 	mrs	r3, PRIMASK
 802154c:	61bb      	str	r3, [r7, #24]
  return(result);
 802154e:	69bb      	ldr	r3, [r7, #24]
 8021550:	2b00      	cmp	r3, #0
 8021552:	d105      	bne.n	8021560 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8021554:	f3ef 8311 	mrs	r3, BASEPRI
 8021558:	617b      	str	r3, [r7, #20]
  return(result);
 802155a:	697b      	ldr	r3, [r7, #20]
 802155c:	2b00      	cmp	r3, #0
 802155e:	d02c      	beq.n	80215ba <osMessageQueuePut+0x96>
 8021560:	4b28      	ldr	r3, [pc, #160]	; (8021604 <osMessageQueuePut+0xe0>)
 8021562:	681b      	ldr	r3, [r3, #0]
 8021564:	2b02      	cmp	r3, #2
 8021566:	d128      	bne.n	80215ba <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8021568:	6a3b      	ldr	r3, [r7, #32]
 802156a:	2b00      	cmp	r3, #0
 802156c:	d005      	beq.n	802157a <osMessageQueuePut+0x56>
 802156e:	68bb      	ldr	r3, [r7, #8]
 8021570:	2b00      	cmp	r3, #0
 8021572:	d002      	beq.n	802157a <osMessageQueuePut+0x56>
 8021574:	683b      	ldr	r3, [r7, #0]
 8021576:	2b00      	cmp	r3, #0
 8021578:	d003      	beq.n	8021582 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 802157a:	f06f 0303 	mvn.w	r3, #3
 802157e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8021580:	e039      	b.n	80215f6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8021582:	2300      	movs	r3, #0
 8021584:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8021586:	f107 0210 	add.w	r2, r7, #16
 802158a:	2300      	movs	r3, #0
 802158c:	68b9      	ldr	r1, [r7, #8]
 802158e:	6a38      	ldr	r0, [r7, #32]
 8021590:	f000 fcb0 	bl	8021ef4 <xQueueGenericSendFromISR>
 8021594:	4603      	mov	r3, r0
 8021596:	2b01      	cmp	r3, #1
 8021598:	d003      	beq.n	80215a2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 802159a:	f06f 0302 	mvn.w	r3, #2
 802159e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80215a0:	e029      	b.n	80215f6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80215a2:	693b      	ldr	r3, [r7, #16]
 80215a4:	2b00      	cmp	r3, #0
 80215a6:	d026      	beq.n	80215f6 <osMessageQueuePut+0xd2>
 80215a8:	4b17      	ldr	r3, [pc, #92]	; (8021608 <osMessageQueuePut+0xe4>)
 80215aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80215ae:	601a      	str	r2, [r3, #0]
 80215b0:	f3bf 8f4f 	dsb	sy
 80215b4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80215b8:	e01d      	b.n	80215f6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80215ba:	6a3b      	ldr	r3, [r7, #32]
 80215bc:	2b00      	cmp	r3, #0
 80215be:	d002      	beq.n	80215c6 <osMessageQueuePut+0xa2>
 80215c0:	68bb      	ldr	r3, [r7, #8]
 80215c2:	2b00      	cmp	r3, #0
 80215c4:	d103      	bne.n	80215ce <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80215c6:	f06f 0303 	mvn.w	r3, #3
 80215ca:	627b      	str	r3, [r7, #36]	; 0x24
 80215cc:	e014      	b.n	80215f8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80215ce:	2300      	movs	r3, #0
 80215d0:	683a      	ldr	r2, [r7, #0]
 80215d2:	68b9      	ldr	r1, [r7, #8]
 80215d4:	6a38      	ldr	r0, [r7, #32]
 80215d6:	f000 fb93 	bl	8021d00 <xQueueGenericSend>
 80215da:	4603      	mov	r3, r0
 80215dc:	2b01      	cmp	r3, #1
 80215de:	d00b      	beq.n	80215f8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80215e0:	683b      	ldr	r3, [r7, #0]
 80215e2:	2b00      	cmp	r3, #0
 80215e4:	d003      	beq.n	80215ee <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80215e6:	f06f 0301 	mvn.w	r3, #1
 80215ea:	627b      	str	r3, [r7, #36]	; 0x24
 80215ec:	e004      	b.n	80215f8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80215ee:	f06f 0302 	mvn.w	r3, #2
 80215f2:	627b      	str	r3, [r7, #36]	; 0x24
 80215f4:	e000      	b.n	80215f8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80215f6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80215f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80215fa:	4618      	mov	r0, r3
 80215fc:	3728      	adds	r7, #40	; 0x28
 80215fe:	46bd      	mov	sp, r7
 8021600:	bd80      	pop	{r7, pc}
 8021602:	bf00      	nop
 8021604:	20001574 	.word	0x20001574
 8021608:	e000ed04 	.word	0xe000ed04

0802160c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 802160c:	b580      	push	{r7, lr}
 802160e:	b08a      	sub	sp, #40	; 0x28
 8021610:	af00      	add	r7, sp, #0
 8021612:	60f8      	str	r0, [r7, #12]
 8021614:	60b9      	str	r1, [r7, #8]
 8021616:	607a      	str	r2, [r7, #4]
 8021618:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 802161a:	68fb      	ldr	r3, [r7, #12]
 802161c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 802161e:	2300      	movs	r3, #0
 8021620:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021622:	f3ef 8305 	mrs	r3, IPSR
 8021626:	61fb      	str	r3, [r7, #28]
  return(result);
 8021628:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 802162a:	2b00      	cmp	r3, #0
 802162c:	d10f      	bne.n	802164e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802162e:	f3ef 8310 	mrs	r3, PRIMASK
 8021632:	61bb      	str	r3, [r7, #24]
  return(result);
 8021634:	69bb      	ldr	r3, [r7, #24]
 8021636:	2b00      	cmp	r3, #0
 8021638:	d105      	bne.n	8021646 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 802163a:	f3ef 8311 	mrs	r3, BASEPRI
 802163e:	617b      	str	r3, [r7, #20]
  return(result);
 8021640:	697b      	ldr	r3, [r7, #20]
 8021642:	2b00      	cmp	r3, #0
 8021644:	d02c      	beq.n	80216a0 <osMessageQueueGet+0x94>
 8021646:	4b28      	ldr	r3, [pc, #160]	; (80216e8 <osMessageQueueGet+0xdc>)
 8021648:	681b      	ldr	r3, [r3, #0]
 802164a:	2b02      	cmp	r3, #2
 802164c:	d128      	bne.n	80216a0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 802164e:	6a3b      	ldr	r3, [r7, #32]
 8021650:	2b00      	cmp	r3, #0
 8021652:	d005      	beq.n	8021660 <osMessageQueueGet+0x54>
 8021654:	68bb      	ldr	r3, [r7, #8]
 8021656:	2b00      	cmp	r3, #0
 8021658:	d002      	beq.n	8021660 <osMessageQueueGet+0x54>
 802165a:	683b      	ldr	r3, [r7, #0]
 802165c:	2b00      	cmp	r3, #0
 802165e:	d003      	beq.n	8021668 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8021660:	f06f 0303 	mvn.w	r3, #3
 8021664:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8021666:	e038      	b.n	80216da <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8021668:	2300      	movs	r3, #0
 802166a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 802166c:	f107 0310 	add.w	r3, r7, #16
 8021670:	461a      	mov	r2, r3
 8021672:	68b9      	ldr	r1, [r7, #8]
 8021674:	6a38      	ldr	r0, [r7, #32]
 8021676:	f000 ff3f 	bl	80224f8 <xQueueReceiveFromISR>
 802167a:	4603      	mov	r3, r0
 802167c:	2b01      	cmp	r3, #1
 802167e:	d003      	beq.n	8021688 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8021680:	f06f 0302 	mvn.w	r3, #2
 8021684:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8021686:	e028      	b.n	80216da <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8021688:	693b      	ldr	r3, [r7, #16]
 802168a:	2b00      	cmp	r3, #0
 802168c:	d025      	beq.n	80216da <osMessageQueueGet+0xce>
 802168e:	4b17      	ldr	r3, [pc, #92]	; (80216ec <osMessageQueueGet+0xe0>)
 8021690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021694:	601a      	str	r2, [r3, #0]
 8021696:	f3bf 8f4f 	dsb	sy
 802169a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 802169e:	e01c      	b.n	80216da <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80216a0:	6a3b      	ldr	r3, [r7, #32]
 80216a2:	2b00      	cmp	r3, #0
 80216a4:	d002      	beq.n	80216ac <osMessageQueueGet+0xa0>
 80216a6:	68bb      	ldr	r3, [r7, #8]
 80216a8:	2b00      	cmp	r3, #0
 80216aa:	d103      	bne.n	80216b4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80216ac:	f06f 0303 	mvn.w	r3, #3
 80216b0:	627b      	str	r3, [r7, #36]	; 0x24
 80216b2:	e013      	b.n	80216dc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80216b4:	683a      	ldr	r2, [r7, #0]
 80216b6:	68b9      	ldr	r1, [r7, #8]
 80216b8:	6a38      	ldr	r0, [r7, #32]
 80216ba:	f000 fd39 	bl	8022130 <xQueueReceive>
 80216be:	4603      	mov	r3, r0
 80216c0:	2b01      	cmp	r3, #1
 80216c2:	d00b      	beq.n	80216dc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80216c4:	683b      	ldr	r3, [r7, #0]
 80216c6:	2b00      	cmp	r3, #0
 80216c8:	d003      	beq.n	80216d2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80216ca:	f06f 0301 	mvn.w	r3, #1
 80216ce:	627b      	str	r3, [r7, #36]	; 0x24
 80216d0:	e004      	b.n	80216dc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80216d2:	f06f 0302 	mvn.w	r3, #2
 80216d6:	627b      	str	r3, [r7, #36]	; 0x24
 80216d8:	e000      	b.n	80216dc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80216da:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80216dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80216de:	4618      	mov	r0, r3
 80216e0:	3728      	adds	r7, #40	; 0x28
 80216e2:	46bd      	mov	sp, r7
 80216e4:	bd80      	pop	{r7, pc}
 80216e6:	bf00      	nop
 80216e8:	20001574 	.word	0x20001574
 80216ec:	e000ed04 	.word	0xe000ed04

080216f0 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 80216f0:	b580      	push	{r7, lr}
 80216f2:	b08c      	sub	sp, #48	; 0x30
 80216f4:	af00      	add	r7, sp, #0
 80216f6:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 80216f8:	687b      	ldr	r3, [r7, #4]
 80216fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 80216fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80216fe:	2b00      	cmp	r3, #0
 8021700:	d102      	bne.n	8021708 <osMessageQueueGetSpace+0x18>
    space = 0U;
 8021702:	2300      	movs	r3, #0
 8021704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021706:	e033      	b.n	8021770 <osMessageQueueGetSpace+0x80>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021708:	f3ef 8305 	mrs	r3, IPSR
 802170c:	623b      	str	r3, [r7, #32]
  return(result);
 802170e:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 8021710:	2b00      	cmp	r3, #0
 8021712:	d10f      	bne.n	8021734 <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021714:	f3ef 8310 	mrs	r3, PRIMASK
 8021718:	61fb      	str	r3, [r7, #28]
  return(result);
 802171a:	69fb      	ldr	r3, [r7, #28]
 802171c:	2b00      	cmp	r3, #0
 802171e:	d105      	bne.n	802172c <osMessageQueueGetSpace+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8021720:	f3ef 8311 	mrs	r3, BASEPRI
 8021724:	61bb      	str	r3, [r7, #24]
  return(result);
 8021726:	69bb      	ldr	r3, [r7, #24]
 8021728:	2b00      	cmp	r3, #0
 802172a:	d01d      	beq.n	8021768 <osMessageQueueGetSpace+0x78>
 802172c:	4b13      	ldr	r3, [pc, #76]	; (802177c <osMessageQueueGetSpace+0x8c>)
 802172e:	681b      	ldr	r3, [r3, #0]
 8021730:	2b02      	cmp	r3, #2
 8021732:	d119      	bne.n	8021768 <osMessageQueueGetSpace+0x78>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8021734:	f3ef 8211 	mrs	r2, BASEPRI
 8021738:	f04f 0350 	mov.w	r3, #80	; 0x50
 802173c:	f383 8811 	msr	BASEPRI, r3
 8021740:	f3bf 8f6f 	isb	sy
 8021744:	f3bf 8f4f 	dsb	sy
 8021748:	613a      	str	r2, [r7, #16]
 802174a:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 802174c:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 802174e:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8021750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8021754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021758:	1ad3      	subs	r3, r2, r3
 802175a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802175e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8021760:	697b      	ldr	r3, [r7, #20]
 8021762:	f383 8811 	msr	BASEPRI, r3

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 8021766:	e003      	b.n	8021770 <osMessageQueueGetSpace+0x80>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8021768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802176a:	f000 ff42 	bl	80225f2 <uxQueueSpacesAvailable>
 802176e:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 8021770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8021772:	4618      	mov	r0, r3
 8021774:	3730      	adds	r7, #48	; 0x30
 8021776:	46bd      	mov	sp, r7
 8021778:	bd80      	pop	{r7, pc}
 802177a:	bf00      	nop
 802177c:	20001574 	.word	0x20001574

08021780 <osMessageQueueReset>:

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8021780:	b580      	push	{r7, lr}
 8021782:	b088      	sub	sp, #32
 8021784:	af00      	add	r7, sp, #0
 8021786:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8021788:	687b      	ldr	r3, [r7, #4]
 802178a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802178c:	f3ef 8305 	mrs	r3, IPSR
 8021790:	617b      	str	r3, [r7, #20]
  return(result);
 8021792:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8021794:	2b00      	cmp	r3, #0
 8021796:	d10f      	bne.n	80217b8 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021798:	f3ef 8310 	mrs	r3, PRIMASK
 802179c:	613b      	str	r3, [r7, #16]
  return(result);
 802179e:	693b      	ldr	r3, [r7, #16]
 80217a0:	2b00      	cmp	r3, #0
 80217a2:	d105      	bne.n	80217b0 <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80217a4:	f3ef 8311 	mrs	r3, BASEPRI
 80217a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80217aa:	68fb      	ldr	r3, [r7, #12]
 80217ac:	2b00      	cmp	r3, #0
 80217ae:	d007      	beq.n	80217c0 <osMessageQueueReset+0x40>
 80217b0:	4b0c      	ldr	r3, [pc, #48]	; (80217e4 <osMessageQueueReset+0x64>)
 80217b2:	681b      	ldr	r3, [r3, #0]
 80217b4:	2b02      	cmp	r3, #2
 80217b6:	d103      	bne.n	80217c0 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 80217b8:	f06f 0305 	mvn.w	r3, #5
 80217bc:	61fb      	str	r3, [r7, #28]
 80217be:	e00c      	b.n	80217da <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 80217c0:	69bb      	ldr	r3, [r7, #24]
 80217c2:	2b00      	cmp	r3, #0
 80217c4:	d103      	bne.n	80217ce <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 80217c6:	f06f 0303 	mvn.w	r3, #3
 80217ca:	61fb      	str	r3, [r7, #28]
 80217cc:	e005      	b.n	80217da <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 80217ce:	2300      	movs	r3, #0
 80217d0:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 80217d2:	2100      	movs	r1, #0
 80217d4:	69b8      	ldr	r0, [r7, #24]
 80217d6:	f000 f8ef 	bl	80219b8 <xQueueGenericReset>
  }

  return (stat);
 80217da:	69fb      	ldr	r3, [r7, #28]
}
 80217dc:	4618      	mov	r0, r3
 80217de:	3720      	adds	r7, #32
 80217e0:	46bd      	mov	sp, r7
 80217e2:	bd80      	pop	{r7, pc}
 80217e4:	20001574 	.word	0x20001574

080217e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80217e8:	b480      	push	{r7}
 80217ea:	b085      	sub	sp, #20
 80217ec:	af00      	add	r7, sp, #0
 80217ee:	60f8      	str	r0, [r7, #12]
 80217f0:	60b9      	str	r1, [r7, #8]
 80217f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80217f4:	68fb      	ldr	r3, [r7, #12]
 80217f6:	4a07      	ldr	r2, [pc, #28]	; (8021814 <vApplicationGetIdleTaskMemory+0x2c>)
 80217f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80217fa:	68bb      	ldr	r3, [r7, #8]
 80217fc:	4a06      	ldr	r2, [pc, #24]	; (8021818 <vApplicationGetIdleTaskMemory+0x30>)
 80217fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8021800:	687b      	ldr	r3, [r7, #4]
 8021802:	2280      	movs	r2, #128	; 0x80
 8021804:	601a      	str	r2, [r3, #0]
}
 8021806:	bf00      	nop
 8021808:	3714      	adds	r7, #20
 802180a:	46bd      	mov	sp, r7
 802180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021810:	4770      	bx	lr
 8021812:	bf00      	nop
 8021814:	20001578 	.word	0x20001578
 8021818:	200015d4 	.word	0x200015d4

0802181c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 802181c:	b480      	push	{r7}
 802181e:	b085      	sub	sp, #20
 8021820:	af00      	add	r7, sp, #0
 8021822:	60f8      	str	r0, [r7, #12]
 8021824:	60b9      	str	r1, [r7, #8]
 8021826:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8021828:	68fb      	ldr	r3, [r7, #12]
 802182a:	4a07      	ldr	r2, [pc, #28]	; (8021848 <vApplicationGetTimerTaskMemory+0x2c>)
 802182c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 802182e:	68bb      	ldr	r3, [r7, #8]
 8021830:	4a06      	ldr	r2, [pc, #24]	; (802184c <vApplicationGetTimerTaskMemory+0x30>)
 8021832:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8021834:	687b      	ldr	r3, [r7, #4]
 8021836:	f44f 7280 	mov.w	r2, #256	; 0x100
 802183a:	601a      	str	r2, [r3, #0]
}
 802183c:	bf00      	nop
 802183e:	3714      	adds	r7, #20
 8021840:	46bd      	mov	sp, r7
 8021842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021846:	4770      	bx	lr
 8021848:	200017d4 	.word	0x200017d4
 802184c:	20001830 	.word	0x20001830

08021850 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8021850:	b480      	push	{r7}
 8021852:	b083      	sub	sp, #12
 8021854:	af00      	add	r7, sp, #0
 8021856:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8021858:	687b      	ldr	r3, [r7, #4]
 802185a:	f103 0208 	add.w	r2, r3, #8
 802185e:	687b      	ldr	r3, [r7, #4]
 8021860:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8021862:	687b      	ldr	r3, [r7, #4]
 8021864:	f04f 32ff 	mov.w	r2, #4294967295
 8021868:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802186a:	687b      	ldr	r3, [r7, #4]
 802186c:	f103 0208 	add.w	r2, r3, #8
 8021870:	687b      	ldr	r3, [r7, #4]
 8021872:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8021874:	687b      	ldr	r3, [r7, #4]
 8021876:	f103 0208 	add.w	r2, r3, #8
 802187a:	687b      	ldr	r3, [r7, #4]
 802187c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 802187e:	687b      	ldr	r3, [r7, #4]
 8021880:	2200      	movs	r2, #0
 8021882:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8021884:	bf00      	nop
 8021886:	370c      	adds	r7, #12
 8021888:	46bd      	mov	sp, r7
 802188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802188e:	4770      	bx	lr

08021890 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8021890:	b480      	push	{r7}
 8021892:	b083      	sub	sp, #12
 8021894:	af00      	add	r7, sp, #0
 8021896:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8021898:	687b      	ldr	r3, [r7, #4]
 802189a:	2200      	movs	r2, #0
 802189c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 802189e:	bf00      	nop
 80218a0:	370c      	adds	r7, #12
 80218a2:	46bd      	mov	sp, r7
 80218a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218a8:	4770      	bx	lr

080218aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80218aa:	b480      	push	{r7}
 80218ac:	b085      	sub	sp, #20
 80218ae:	af00      	add	r7, sp, #0
 80218b0:	6078      	str	r0, [r7, #4]
 80218b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80218b4:	687b      	ldr	r3, [r7, #4]
 80218b6:	685b      	ldr	r3, [r3, #4]
 80218b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80218ba:	683b      	ldr	r3, [r7, #0]
 80218bc:	68fa      	ldr	r2, [r7, #12]
 80218be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80218c0:	68fb      	ldr	r3, [r7, #12]
 80218c2:	689a      	ldr	r2, [r3, #8]
 80218c4:	683b      	ldr	r3, [r7, #0]
 80218c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80218c8:	68fb      	ldr	r3, [r7, #12]
 80218ca:	689b      	ldr	r3, [r3, #8]
 80218cc:	683a      	ldr	r2, [r7, #0]
 80218ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80218d0:	68fb      	ldr	r3, [r7, #12]
 80218d2:	683a      	ldr	r2, [r7, #0]
 80218d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80218d6:	683b      	ldr	r3, [r7, #0]
 80218d8:	687a      	ldr	r2, [r7, #4]
 80218da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80218dc:	687b      	ldr	r3, [r7, #4]
 80218de:	681b      	ldr	r3, [r3, #0]
 80218e0:	1c5a      	adds	r2, r3, #1
 80218e2:	687b      	ldr	r3, [r7, #4]
 80218e4:	601a      	str	r2, [r3, #0]
}
 80218e6:	bf00      	nop
 80218e8:	3714      	adds	r7, #20
 80218ea:	46bd      	mov	sp, r7
 80218ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218f0:	4770      	bx	lr

080218f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80218f2:	b480      	push	{r7}
 80218f4:	b085      	sub	sp, #20
 80218f6:	af00      	add	r7, sp, #0
 80218f8:	6078      	str	r0, [r7, #4]
 80218fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80218fc:	683b      	ldr	r3, [r7, #0]
 80218fe:	681b      	ldr	r3, [r3, #0]
 8021900:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8021902:	68bb      	ldr	r3, [r7, #8]
 8021904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021908:	d103      	bne.n	8021912 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 802190a:	687b      	ldr	r3, [r7, #4]
 802190c:	691b      	ldr	r3, [r3, #16]
 802190e:	60fb      	str	r3, [r7, #12]
 8021910:	e00c      	b.n	802192c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8021912:	687b      	ldr	r3, [r7, #4]
 8021914:	3308      	adds	r3, #8
 8021916:	60fb      	str	r3, [r7, #12]
 8021918:	e002      	b.n	8021920 <vListInsert+0x2e>
 802191a:	68fb      	ldr	r3, [r7, #12]
 802191c:	685b      	ldr	r3, [r3, #4]
 802191e:	60fb      	str	r3, [r7, #12]
 8021920:	68fb      	ldr	r3, [r7, #12]
 8021922:	685b      	ldr	r3, [r3, #4]
 8021924:	681b      	ldr	r3, [r3, #0]
 8021926:	68ba      	ldr	r2, [r7, #8]
 8021928:	429a      	cmp	r2, r3
 802192a:	d2f6      	bcs.n	802191a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 802192c:	68fb      	ldr	r3, [r7, #12]
 802192e:	685a      	ldr	r2, [r3, #4]
 8021930:	683b      	ldr	r3, [r7, #0]
 8021932:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8021934:	683b      	ldr	r3, [r7, #0]
 8021936:	685b      	ldr	r3, [r3, #4]
 8021938:	683a      	ldr	r2, [r7, #0]
 802193a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 802193c:	683b      	ldr	r3, [r7, #0]
 802193e:	68fa      	ldr	r2, [r7, #12]
 8021940:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8021942:	68fb      	ldr	r3, [r7, #12]
 8021944:	683a      	ldr	r2, [r7, #0]
 8021946:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8021948:	683b      	ldr	r3, [r7, #0]
 802194a:	687a      	ldr	r2, [r7, #4]
 802194c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 802194e:	687b      	ldr	r3, [r7, #4]
 8021950:	681b      	ldr	r3, [r3, #0]
 8021952:	1c5a      	adds	r2, r3, #1
 8021954:	687b      	ldr	r3, [r7, #4]
 8021956:	601a      	str	r2, [r3, #0]
}
 8021958:	bf00      	nop
 802195a:	3714      	adds	r7, #20
 802195c:	46bd      	mov	sp, r7
 802195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021962:	4770      	bx	lr

08021964 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8021964:	b480      	push	{r7}
 8021966:	b085      	sub	sp, #20
 8021968:	af00      	add	r7, sp, #0
 802196a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 802196c:	687b      	ldr	r3, [r7, #4]
 802196e:	691b      	ldr	r3, [r3, #16]
 8021970:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8021972:	687b      	ldr	r3, [r7, #4]
 8021974:	685b      	ldr	r3, [r3, #4]
 8021976:	687a      	ldr	r2, [r7, #4]
 8021978:	6892      	ldr	r2, [r2, #8]
 802197a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 802197c:	687b      	ldr	r3, [r7, #4]
 802197e:	689b      	ldr	r3, [r3, #8]
 8021980:	687a      	ldr	r2, [r7, #4]
 8021982:	6852      	ldr	r2, [r2, #4]
 8021984:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8021986:	68fb      	ldr	r3, [r7, #12]
 8021988:	685b      	ldr	r3, [r3, #4]
 802198a:	687a      	ldr	r2, [r7, #4]
 802198c:	429a      	cmp	r2, r3
 802198e:	d103      	bne.n	8021998 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8021990:	687b      	ldr	r3, [r7, #4]
 8021992:	689a      	ldr	r2, [r3, #8]
 8021994:	68fb      	ldr	r3, [r7, #12]
 8021996:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8021998:	687b      	ldr	r3, [r7, #4]
 802199a:	2200      	movs	r2, #0
 802199c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 802199e:	68fb      	ldr	r3, [r7, #12]
 80219a0:	681b      	ldr	r3, [r3, #0]
 80219a2:	1e5a      	subs	r2, r3, #1
 80219a4:	68fb      	ldr	r3, [r7, #12]
 80219a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80219a8:	68fb      	ldr	r3, [r7, #12]
 80219aa:	681b      	ldr	r3, [r3, #0]
}
 80219ac:	4618      	mov	r0, r3
 80219ae:	3714      	adds	r7, #20
 80219b0:	46bd      	mov	sp, r7
 80219b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219b6:	4770      	bx	lr

080219b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80219b8:	b580      	push	{r7, lr}
 80219ba:	b084      	sub	sp, #16
 80219bc:	af00      	add	r7, sp, #0
 80219be:	6078      	str	r0, [r7, #4]
 80219c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80219c2:	687b      	ldr	r3, [r7, #4]
 80219c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80219c6:	68fb      	ldr	r3, [r7, #12]
 80219c8:	2b00      	cmp	r3, #0
 80219ca:	d109      	bne.n	80219e0 <xQueueGenericReset+0x28>
	__asm volatile
 80219cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80219d0:	f383 8811 	msr	BASEPRI, r3
 80219d4:	f3bf 8f6f 	isb	sy
 80219d8:	f3bf 8f4f 	dsb	sy
 80219dc:	60bb      	str	r3, [r7, #8]
 80219de:	e7fe      	b.n	80219de <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80219e0:	f002 fecc 	bl	802477c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80219e4:	68fb      	ldr	r3, [r7, #12]
 80219e6:	681a      	ldr	r2, [r3, #0]
 80219e8:	68fb      	ldr	r3, [r7, #12]
 80219ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80219ec:	68f9      	ldr	r1, [r7, #12]
 80219ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80219f0:	fb01 f303 	mul.w	r3, r1, r3
 80219f4:	441a      	add	r2, r3
 80219f6:	68fb      	ldr	r3, [r7, #12]
 80219f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80219fa:	68fb      	ldr	r3, [r7, #12]
 80219fc:	2200      	movs	r2, #0
 80219fe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8021a00:	68fb      	ldr	r3, [r7, #12]
 8021a02:	681a      	ldr	r2, [r3, #0]
 8021a04:	68fb      	ldr	r3, [r7, #12]
 8021a06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8021a08:	68fb      	ldr	r3, [r7, #12]
 8021a0a:	681a      	ldr	r2, [r3, #0]
 8021a0c:	68fb      	ldr	r3, [r7, #12]
 8021a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021a10:	3b01      	subs	r3, #1
 8021a12:	68f9      	ldr	r1, [r7, #12]
 8021a14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8021a16:	fb01 f303 	mul.w	r3, r1, r3
 8021a1a:	441a      	add	r2, r3
 8021a1c:	68fb      	ldr	r3, [r7, #12]
 8021a1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8021a20:	68fb      	ldr	r3, [r7, #12]
 8021a22:	22ff      	movs	r2, #255	; 0xff
 8021a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8021a28:	68fb      	ldr	r3, [r7, #12]
 8021a2a:	22ff      	movs	r2, #255	; 0xff
 8021a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8021a30:	683b      	ldr	r3, [r7, #0]
 8021a32:	2b00      	cmp	r3, #0
 8021a34:	d114      	bne.n	8021a60 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8021a36:	68fb      	ldr	r3, [r7, #12]
 8021a38:	691b      	ldr	r3, [r3, #16]
 8021a3a:	2b00      	cmp	r3, #0
 8021a3c:	d01a      	beq.n	8021a74 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8021a3e:	68fb      	ldr	r3, [r7, #12]
 8021a40:	3310      	adds	r3, #16
 8021a42:	4618      	mov	r0, r3
 8021a44:	f001 fca6 	bl	8023394 <xTaskRemoveFromEventList>
 8021a48:	4603      	mov	r3, r0
 8021a4a:	2b00      	cmp	r3, #0
 8021a4c:	d012      	beq.n	8021a74 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8021a4e:	4b0d      	ldr	r3, [pc, #52]	; (8021a84 <xQueueGenericReset+0xcc>)
 8021a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021a54:	601a      	str	r2, [r3, #0]
 8021a56:	f3bf 8f4f 	dsb	sy
 8021a5a:	f3bf 8f6f 	isb	sy
 8021a5e:	e009      	b.n	8021a74 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8021a60:	68fb      	ldr	r3, [r7, #12]
 8021a62:	3310      	adds	r3, #16
 8021a64:	4618      	mov	r0, r3
 8021a66:	f7ff fef3 	bl	8021850 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8021a6a:	68fb      	ldr	r3, [r7, #12]
 8021a6c:	3324      	adds	r3, #36	; 0x24
 8021a6e:	4618      	mov	r0, r3
 8021a70:	f7ff feee 	bl	8021850 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8021a74:	f002 feb0 	bl	80247d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8021a78:	2301      	movs	r3, #1
}
 8021a7a:	4618      	mov	r0, r3
 8021a7c:	3710      	adds	r7, #16
 8021a7e:	46bd      	mov	sp, r7
 8021a80:	bd80      	pop	{r7, pc}
 8021a82:	bf00      	nop
 8021a84:	e000ed04 	.word	0xe000ed04

08021a88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8021a88:	b580      	push	{r7, lr}
 8021a8a:	b08e      	sub	sp, #56	; 0x38
 8021a8c:	af02      	add	r7, sp, #8
 8021a8e:	60f8      	str	r0, [r7, #12]
 8021a90:	60b9      	str	r1, [r7, #8]
 8021a92:	607a      	str	r2, [r7, #4]
 8021a94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8021a96:	68fb      	ldr	r3, [r7, #12]
 8021a98:	2b00      	cmp	r3, #0
 8021a9a:	d109      	bne.n	8021ab0 <xQueueGenericCreateStatic+0x28>
 8021a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021aa0:	f383 8811 	msr	BASEPRI, r3
 8021aa4:	f3bf 8f6f 	isb	sy
 8021aa8:	f3bf 8f4f 	dsb	sy
 8021aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8021aae:	e7fe      	b.n	8021aae <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8021ab0:	683b      	ldr	r3, [r7, #0]
 8021ab2:	2b00      	cmp	r3, #0
 8021ab4:	d109      	bne.n	8021aca <xQueueGenericCreateStatic+0x42>
 8021ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021aba:	f383 8811 	msr	BASEPRI, r3
 8021abe:	f3bf 8f6f 	isb	sy
 8021ac2:	f3bf 8f4f 	dsb	sy
 8021ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8021ac8:	e7fe      	b.n	8021ac8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8021aca:	687b      	ldr	r3, [r7, #4]
 8021acc:	2b00      	cmp	r3, #0
 8021ace:	d002      	beq.n	8021ad6 <xQueueGenericCreateStatic+0x4e>
 8021ad0:	68bb      	ldr	r3, [r7, #8]
 8021ad2:	2b00      	cmp	r3, #0
 8021ad4:	d001      	beq.n	8021ada <xQueueGenericCreateStatic+0x52>
 8021ad6:	2301      	movs	r3, #1
 8021ad8:	e000      	b.n	8021adc <xQueueGenericCreateStatic+0x54>
 8021ada:	2300      	movs	r3, #0
 8021adc:	2b00      	cmp	r3, #0
 8021ade:	d109      	bne.n	8021af4 <xQueueGenericCreateStatic+0x6c>
 8021ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021ae4:	f383 8811 	msr	BASEPRI, r3
 8021ae8:	f3bf 8f6f 	isb	sy
 8021aec:	f3bf 8f4f 	dsb	sy
 8021af0:	623b      	str	r3, [r7, #32]
 8021af2:	e7fe      	b.n	8021af2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8021af4:	687b      	ldr	r3, [r7, #4]
 8021af6:	2b00      	cmp	r3, #0
 8021af8:	d102      	bne.n	8021b00 <xQueueGenericCreateStatic+0x78>
 8021afa:	68bb      	ldr	r3, [r7, #8]
 8021afc:	2b00      	cmp	r3, #0
 8021afe:	d101      	bne.n	8021b04 <xQueueGenericCreateStatic+0x7c>
 8021b00:	2301      	movs	r3, #1
 8021b02:	e000      	b.n	8021b06 <xQueueGenericCreateStatic+0x7e>
 8021b04:	2300      	movs	r3, #0
 8021b06:	2b00      	cmp	r3, #0
 8021b08:	d109      	bne.n	8021b1e <xQueueGenericCreateStatic+0x96>
 8021b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021b0e:	f383 8811 	msr	BASEPRI, r3
 8021b12:	f3bf 8f6f 	isb	sy
 8021b16:	f3bf 8f4f 	dsb	sy
 8021b1a:	61fb      	str	r3, [r7, #28]
 8021b1c:	e7fe      	b.n	8021b1c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8021b1e:	2350      	movs	r3, #80	; 0x50
 8021b20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8021b22:	697b      	ldr	r3, [r7, #20]
 8021b24:	2b50      	cmp	r3, #80	; 0x50
 8021b26:	d009      	beq.n	8021b3c <xQueueGenericCreateStatic+0xb4>
 8021b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021b2c:	f383 8811 	msr	BASEPRI, r3
 8021b30:	f3bf 8f6f 	isb	sy
 8021b34:	f3bf 8f4f 	dsb	sy
 8021b38:	61bb      	str	r3, [r7, #24]
 8021b3a:	e7fe      	b.n	8021b3a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8021b3c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8021b3e:	683b      	ldr	r3, [r7, #0]
 8021b40:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8021b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b44:	2b00      	cmp	r3, #0
 8021b46:	d00d      	beq.n	8021b64 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8021b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b4a:	2201      	movs	r2, #1
 8021b4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8021b50:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8021b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b56:	9300      	str	r3, [sp, #0]
 8021b58:	4613      	mov	r3, r2
 8021b5a:	687a      	ldr	r2, [r7, #4]
 8021b5c:	68b9      	ldr	r1, [r7, #8]
 8021b5e:	68f8      	ldr	r0, [r7, #12]
 8021b60:	f000 f844 	bl	8021bec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8021b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8021b66:	4618      	mov	r0, r3
 8021b68:	3730      	adds	r7, #48	; 0x30
 8021b6a:	46bd      	mov	sp, r7
 8021b6c:	bd80      	pop	{r7, pc}

08021b6e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8021b6e:	b580      	push	{r7, lr}
 8021b70:	b08a      	sub	sp, #40	; 0x28
 8021b72:	af02      	add	r7, sp, #8
 8021b74:	60f8      	str	r0, [r7, #12]
 8021b76:	60b9      	str	r1, [r7, #8]
 8021b78:	4613      	mov	r3, r2
 8021b7a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8021b7c:	68fb      	ldr	r3, [r7, #12]
 8021b7e:	2b00      	cmp	r3, #0
 8021b80:	d109      	bne.n	8021b96 <xQueueGenericCreate+0x28>
 8021b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021b86:	f383 8811 	msr	BASEPRI, r3
 8021b8a:	f3bf 8f6f 	isb	sy
 8021b8e:	f3bf 8f4f 	dsb	sy
 8021b92:	613b      	str	r3, [r7, #16]
 8021b94:	e7fe      	b.n	8021b94 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8021b96:	68bb      	ldr	r3, [r7, #8]
 8021b98:	2b00      	cmp	r3, #0
 8021b9a:	d102      	bne.n	8021ba2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8021b9c:	2300      	movs	r3, #0
 8021b9e:	61fb      	str	r3, [r7, #28]
 8021ba0:	e004      	b.n	8021bac <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021ba2:	68fb      	ldr	r3, [r7, #12]
 8021ba4:	68ba      	ldr	r2, [r7, #8]
 8021ba6:	fb02 f303 	mul.w	r3, r2, r3
 8021baa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8021bac:	69fb      	ldr	r3, [r7, #28]
 8021bae:	3350      	adds	r3, #80	; 0x50
 8021bb0:	4618      	mov	r0, r3
 8021bb2:	f002 fefd 	bl	80249b0 <pvPortMalloc>
 8021bb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8021bb8:	69bb      	ldr	r3, [r7, #24]
 8021bba:	2b00      	cmp	r3, #0
 8021bbc:	d011      	beq.n	8021be2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8021bbe:	69bb      	ldr	r3, [r7, #24]
 8021bc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8021bc2:	697b      	ldr	r3, [r7, #20]
 8021bc4:	3350      	adds	r3, #80	; 0x50
 8021bc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8021bc8:	69bb      	ldr	r3, [r7, #24]
 8021bca:	2200      	movs	r2, #0
 8021bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8021bd0:	79fa      	ldrb	r2, [r7, #7]
 8021bd2:	69bb      	ldr	r3, [r7, #24]
 8021bd4:	9300      	str	r3, [sp, #0]
 8021bd6:	4613      	mov	r3, r2
 8021bd8:	697a      	ldr	r2, [r7, #20]
 8021bda:	68b9      	ldr	r1, [r7, #8]
 8021bdc:	68f8      	ldr	r0, [r7, #12]
 8021bde:	f000 f805 	bl	8021bec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8021be2:	69bb      	ldr	r3, [r7, #24]
	}
 8021be4:	4618      	mov	r0, r3
 8021be6:	3720      	adds	r7, #32
 8021be8:	46bd      	mov	sp, r7
 8021bea:	bd80      	pop	{r7, pc}

08021bec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8021bec:	b580      	push	{r7, lr}
 8021bee:	b084      	sub	sp, #16
 8021bf0:	af00      	add	r7, sp, #0
 8021bf2:	60f8      	str	r0, [r7, #12]
 8021bf4:	60b9      	str	r1, [r7, #8]
 8021bf6:	607a      	str	r2, [r7, #4]
 8021bf8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8021bfa:	68bb      	ldr	r3, [r7, #8]
 8021bfc:	2b00      	cmp	r3, #0
 8021bfe:	d103      	bne.n	8021c08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8021c00:	69bb      	ldr	r3, [r7, #24]
 8021c02:	69ba      	ldr	r2, [r7, #24]
 8021c04:	601a      	str	r2, [r3, #0]
 8021c06:	e002      	b.n	8021c0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8021c08:	69bb      	ldr	r3, [r7, #24]
 8021c0a:	687a      	ldr	r2, [r7, #4]
 8021c0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8021c0e:	69bb      	ldr	r3, [r7, #24]
 8021c10:	68fa      	ldr	r2, [r7, #12]
 8021c12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8021c14:	69bb      	ldr	r3, [r7, #24]
 8021c16:	68ba      	ldr	r2, [r7, #8]
 8021c18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8021c1a:	2101      	movs	r1, #1
 8021c1c:	69b8      	ldr	r0, [r7, #24]
 8021c1e:	f7ff fecb 	bl	80219b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8021c22:	69bb      	ldr	r3, [r7, #24]
 8021c24:	78fa      	ldrb	r2, [r7, #3]
 8021c26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8021c2a:	bf00      	nop
 8021c2c:	3710      	adds	r7, #16
 8021c2e:	46bd      	mov	sp, r7
 8021c30:	bd80      	pop	{r7, pc}

08021c32 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8021c32:	b580      	push	{r7, lr}
 8021c34:	b08a      	sub	sp, #40	; 0x28
 8021c36:	af02      	add	r7, sp, #8
 8021c38:	60f8      	str	r0, [r7, #12]
 8021c3a:	60b9      	str	r1, [r7, #8]
 8021c3c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8021c3e:	68fb      	ldr	r3, [r7, #12]
 8021c40:	2b00      	cmp	r3, #0
 8021c42:	d109      	bne.n	8021c58 <xQueueCreateCountingSemaphoreStatic+0x26>
 8021c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021c48:	f383 8811 	msr	BASEPRI, r3
 8021c4c:	f3bf 8f6f 	isb	sy
 8021c50:	f3bf 8f4f 	dsb	sy
 8021c54:	61bb      	str	r3, [r7, #24]
 8021c56:	e7fe      	b.n	8021c56 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8021c58:	68ba      	ldr	r2, [r7, #8]
 8021c5a:	68fb      	ldr	r3, [r7, #12]
 8021c5c:	429a      	cmp	r2, r3
 8021c5e:	d909      	bls.n	8021c74 <xQueueCreateCountingSemaphoreStatic+0x42>
 8021c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021c64:	f383 8811 	msr	BASEPRI, r3
 8021c68:	f3bf 8f6f 	isb	sy
 8021c6c:	f3bf 8f4f 	dsb	sy
 8021c70:	617b      	str	r3, [r7, #20]
 8021c72:	e7fe      	b.n	8021c72 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8021c74:	2302      	movs	r3, #2
 8021c76:	9300      	str	r3, [sp, #0]
 8021c78:	687b      	ldr	r3, [r7, #4]
 8021c7a:	2200      	movs	r2, #0
 8021c7c:	2100      	movs	r1, #0
 8021c7e:	68f8      	ldr	r0, [r7, #12]
 8021c80:	f7ff ff02 	bl	8021a88 <xQueueGenericCreateStatic>
 8021c84:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8021c86:	69fb      	ldr	r3, [r7, #28]
 8021c88:	2b00      	cmp	r3, #0
 8021c8a:	d002      	beq.n	8021c92 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8021c8c:	69fb      	ldr	r3, [r7, #28]
 8021c8e:	68ba      	ldr	r2, [r7, #8]
 8021c90:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8021c92:	69fb      	ldr	r3, [r7, #28]
	}
 8021c94:	4618      	mov	r0, r3
 8021c96:	3720      	adds	r7, #32
 8021c98:	46bd      	mov	sp, r7
 8021c9a:	bd80      	pop	{r7, pc}

08021c9c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8021c9c:	b580      	push	{r7, lr}
 8021c9e:	b086      	sub	sp, #24
 8021ca0:	af00      	add	r7, sp, #0
 8021ca2:	6078      	str	r0, [r7, #4]
 8021ca4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8021ca6:	687b      	ldr	r3, [r7, #4]
 8021ca8:	2b00      	cmp	r3, #0
 8021caa:	d109      	bne.n	8021cc0 <xQueueCreateCountingSemaphore+0x24>
 8021cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021cb0:	f383 8811 	msr	BASEPRI, r3
 8021cb4:	f3bf 8f6f 	isb	sy
 8021cb8:	f3bf 8f4f 	dsb	sy
 8021cbc:	613b      	str	r3, [r7, #16]
 8021cbe:	e7fe      	b.n	8021cbe <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8021cc0:	683a      	ldr	r2, [r7, #0]
 8021cc2:	687b      	ldr	r3, [r7, #4]
 8021cc4:	429a      	cmp	r2, r3
 8021cc6:	d909      	bls.n	8021cdc <xQueueCreateCountingSemaphore+0x40>
 8021cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021ccc:	f383 8811 	msr	BASEPRI, r3
 8021cd0:	f3bf 8f6f 	isb	sy
 8021cd4:	f3bf 8f4f 	dsb	sy
 8021cd8:	60fb      	str	r3, [r7, #12]
 8021cda:	e7fe      	b.n	8021cda <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8021cdc:	2202      	movs	r2, #2
 8021cde:	2100      	movs	r1, #0
 8021ce0:	6878      	ldr	r0, [r7, #4]
 8021ce2:	f7ff ff44 	bl	8021b6e <xQueueGenericCreate>
 8021ce6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8021ce8:	697b      	ldr	r3, [r7, #20]
 8021cea:	2b00      	cmp	r3, #0
 8021cec:	d002      	beq.n	8021cf4 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8021cee:	697b      	ldr	r3, [r7, #20]
 8021cf0:	683a      	ldr	r2, [r7, #0]
 8021cf2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8021cf4:	697b      	ldr	r3, [r7, #20]
	}
 8021cf6:	4618      	mov	r0, r3
 8021cf8:	3718      	adds	r7, #24
 8021cfa:	46bd      	mov	sp, r7
 8021cfc:	bd80      	pop	{r7, pc}
	...

08021d00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8021d00:	b580      	push	{r7, lr}
 8021d02:	b08e      	sub	sp, #56	; 0x38
 8021d04:	af00      	add	r7, sp, #0
 8021d06:	60f8      	str	r0, [r7, #12]
 8021d08:	60b9      	str	r1, [r7, #8]
 8021d0a:	607a      	str	r2, [r7, #4]
 8021d0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8021d0e:	2300      	movs	r3, #0
 8021d10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8021d12:	68fb      	ldr	r3, [r7, #12]
 8021d14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8021d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d18:	2b00      	cmp	r3, #0
 8021d1a:	d109      	bne.n	8021d30 <xQueueGenericSend+0x30>
 8021d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021d20:	f383 8811 	msr	BASEPRI, r3
 8021d24:	f3bf 8f6f 	isb	sy
 8021d28:	f3bf 8f4f 	dsb	sy
 8021d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8021d2e:	e7fe      	b.n	8021d2e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8021d30:	68bb      	ldr	r3, [r7, #8]
 8021d32:	2b00      	cmp	r3, #0
 8021d34:	d103      	bne.n	8021d3e <xQueueGenericSend+0x3e>
 8021d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021d3a:	2b00      	cmp	r3, #0
 8021d3c:	d101      	bne.n	8021d42 <xQueueGenericSend+0x42>
 8021d3e:	2301      	movs	r3, #1
 8021d40:	e000      	b.n	8021d44 <xQueueGenericSend+0x44>
 8021d42:	2300      	movs	r3, #0
 8021d44:	2b00      	cmp	r3, #0
 8021d46:	d109      	bne.n	8021d5c <xQueueGenericSend+0x5c>
 8021d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021d4c:	f383 8811 	msr	BASEPRI, r3
 8021d50:	f3bf 8f6f 	isb	sy
 8021d54:	f3bf 8f4f 	dsb	sy
 8021d58:	627b      	str	r3, [r7, #36]	; 0x24
 8021d5a:	e7fe      	b.n	8021d5a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8021d5c:	683b      	ldr	r3, [r7, #0]
 8021d5e:	2b02      	cmp	r3, #2
 8021d60:	d103      	bne.n	8021d6a <xQueueGenericSend+0x6a>
 8021d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021d66:	2b01      	cmp	r3, #1
 8021d68:	d101      	bne.n	8021d6e <xQueueGenericSend+0x6e>
 8021d6a:	2301      	movs	r3, #1
 8021d6c:	e000      	b.n	8021d70 <xQueueGenericSend+0x70>
 8021d6e:	2300      	movs	r3, #0
 8021d70:	2b00      	cmp	r3, #0
 8021d72:	d109      	bne.n	8021d88 <xQueueGenericSend+0x88>
 8021d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021d78:	f383 8811 	msr	BASEPRI, r3
 8021d7c:	f3bf 8f6f 	isb	sy
 8021d80:	f3bf 8f4f 	dsb	sy
 8021d84:	623b      	str	r3, [r7, #32]
 8021d86:	e7fe      	b.n	8021d86 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8021d88:	f001 fcca 	bl	8023720 <xTaskGetSchedulerState>
 8021d8c:	4603      	mov	r3, r0
 8021d8e:	2b00      	cmp	r3, #0
 8021d90:	d102      	bne.n	8021d98 <xQueueGenericSend+0x98>
 8021d92:	687b      	ldr	r3, [r7, #4]
 8021d94:	2b00      	cmp	r3, #0
 8021d96:	d101      	bne.n	8021d9c <xQueueGenericSend+0x9c>
 8021d98:	2301      	movs	r3, #1
 8021d9a:	e000      	b.n	8021d9e <xQueueGenericSend+0x9e>
 8021d9c:	2300      	movs	r3, #0
 8021d9e:	2b00      	cmp	r3, #0
 8021da0:	d109      	bne.n	8021db6 <xQueueGenericSend+0xb6>
 8021da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021da6:	f383 8811 	msr	BASEPRI, r3
 8021daa:	f3bf 8f6f 	isb	sy
 8021dae:	f3bf 8f4f 	dsb	sy
 8021db2:	61fb      	str	r3, [r7, #28]
 8021db4:	e7fe      	b.n	8021db4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8021db6:	f002 fce1 	bl	802477c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8021dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8021dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021dc2:	429a      	cmp	r2, r3
 8021dc4:	d302      	bcc.n	8021dcc <xQueueGenericSend+0xcc>
 8021dc6:	683b      	ldr	r3, [r7, #0]
 8021dc8:	2b02      	cmp	r3, #2
 8021dca:	d129      	bne.n	8021e20 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8021dcc:	683a      	ldr	r2, [r7, #0]
 8021dce:	68b9      	ldr	r1, [r7, #8]
 8021dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021dd2:	f000 fc6a 	bl	80226aa <prvCopyDataToQueue>
 8021dd6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8021dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021ddc:	2b00      	cmp	r3, #0
 8021dde:	d010      	beq.n	8021e02 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8021de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021de2:	3324      	adds	r3, #36	; 0x24
 8021de4:	4618      	mov	r0, r3
 8021de6:	f001 fad5 	bl	8023394 <xTaskRemoveFromEventList>
 8021dea:	4603      	mov	r3, r0
 8021dec:	2b00      	cmp	r3, #0
 8021dee:	d013      	beq.n	8021e18 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8021df0:	4b3f      	ldr	r3, [pc, #252]	; (8021ef0 <xQueueGenericSend+0x1f0>)
 8021df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021df6:	601a      	str	r2, [r3, #0]
 8021df8:	f3bf 8f4f 	dsb	sy
 8021dfc:	f3bf 8f6f 	isb	sy
 8021e00:	e00a      	b.n	8021e18 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8021e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e04:	2b00      	cmp	r3, #0
 8021e06:	d007      	beq.n	8021e18 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8021e08:	4b39      	ldr	r3, [pc, #228]	; (8021ef0 <xQueueGenericSend+0x1f0>)
 8021e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021e0e:	601a      	str	r2, [r3, #0]
 8021e10:	f3bf 8f4f 	dsb	sy
 8021e14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8021e18:	f002 fcde 	bl	80247d8 <vPortExitCritical>
				return pdPASS;
 8021e1c:	2301      	movs	r3, #1
 8021e1e:	e063      	b.n	8021ee8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8021e20:	687b      	ldr	r3, [r7, #4]
 8021e22:	2b00      	cmp	r3, #0
 8021e24:	d103      	bne.n	8021e2e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8021e26:	f002 fcd7 	bl	80247d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8021e2a:	2300      	movs	r3, #0
 8021e2c:	e05c      	b.n	8021ee8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8021e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021e30:	2b00      	cmp	r3, #0
 8021e32:	d106      	bne.n	8021e42 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8021e34:	f107 0314 	add.w	r3, r7, #20
 8021e38:	4618      	mov	r0, r3
 8021e3a:	f001 fb0d 	bl	8023458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8021e3e:	2301      	movs	r3, #1
 8021e40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8021e42:	f002 fcc9 	bl	80247d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8021e46:	f001 f877 	bl	8022f38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8021e4a:	f002 fc97 	bl	802477c <vPortEnterCritical>
 8021e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8021e54:	b25b      	sxtb	r3, r3
 8021e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021e5a:	d103      	bne.n	8021e64 <xQueueGenericSend+0x164>
 8021e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e5e:	2200      	movs	r2, #0
 8021e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8021e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8021e6a:	b25b      	sxtb	r3, r3
 8021e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021e70:	d103      	bne.n	8021e7a <xQueueGenericSend+0x17a>
 8021e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e74:	2200      	movs	r2, #0
 8021e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8021e7a:	f002 fcad 	bl	80247d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8021e7e:	1d3a      	adds	r2, r7, #4
 8021e80:	f107 0314 	add.w	r3, r7, #20
 8021e84:	4611      	mov	r1, r2
 8021e86:	4618      	mov	r0, r3
 8021e88:	f001 fafc 	bl	8023484 <xTaskCheckForTimeOut>
 8021e8c:	4603      	mov	r3, r0
 8021e8e:	2b00      	cmp	r3, #0
 8021e90:	d124      	bne.n	8021edc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8021e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021e94:	f000 fd01 	bl	802289a <prvIsQueueFull>
 8021e98:	4603      	mov	r3, r0
 8021e9a:	2b00      	cmp	r3, #0
 8021e9c:	d018      	beq.n	8021ed0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8021e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ea0:	3310      	adds	r3, #16
 8021ea2:	687a      	ldr	r2, [r7, #4]
 8021ea4:	4611      	mov	r1, r2
 8021ea6:	4618      	mov	r0, r3
 8021ea8:	f001 fa26 	bl	80232f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8021eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021eae:	f000 fc8c 	bl	80227ca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8021eb2:	f001 f84f 	bl	8022f54 <xTaskResumeAll>
 8021eb6:	4603      	mov	r3, r0
 8021eb8:	2b00      	cmp	r3, #0
 8021eba:	f47f af7c 	bne.w	8021db6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8021ebe:	4b0c      	ldr	r3, [pc, #48]	; (8021ef0 <xQueueGenericSend+0x1f0>)
 8021ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021ec4:	601a      	str	r2, [r3, #0]
 8021ec6:	f3bf 8f4f 	dsb	sy
 8021eca:	f3bf 8f6f 	isb	sy
 8021ece:	e772      	b.n	8021db6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8021ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021ed2:	f000 fc7a 	bl	80227ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8021ed6:	f001 f83d 	bl	8022f54 <xTaskResumeAll>
 8021eda:	e76c      	b.n	8021db6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8021edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021ede:	f000 fc74 	bl	80227ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8021ee2:	f001 f837 	bl	8022f54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8021ee6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8021ee8:	4618      	mov	r0, r3
 8021eea:	3738      	adds	r7, #56	; 0x38
 8021eec:	46bd      	mov	sp, r7
 8021eee:	bd80      	pop	{r7, pc}
 8021ef0:	e000ed04 	.word	0xe000ed04

08021ef4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8021ef4:	b580      	push	{r7, lr}
 8021ef6:	b08e      	sub	sp, #56	; 0x38
 8021ef8:	af00      	add	r7, sp, #0
 8021efa:	60f8      	str	r0, [r7, #12]
 8021efc:	60b9      	str	r1, [r7, #8]
 8021efe:	607a      	str	r2, [r7, #4]
 8021f00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8021f02:	68fb      	ldr	r3, [r7, #12]
 8021f04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8021f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f08:	2b00      	cmp	r3, #0
 8021f0a:	d109      	bne.n	8021f20 <xQueueGenericSendFromISR+0x2c>
 8021f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021f10:	f383 8811 	msr	BASEPRI, r3
 8021f14:	f3bf 8f6f 	isb	sy
 8021f18:	f3bf 8f4f 	dsb	sy
 8021f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8021f1e:	e7fe      	b.n	8021f1e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8021f20:	68bb      	ldr	r3, [r7, #8]
 8021f22:	2b00      	cmp	r3, #0
 8021f24:	d103      	bne.n	8021f2e <xQueueGenericSendFromISR+0x3a>
 8021f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021f2a:	2b00      	cmp	r3, #0
 8021f2c:	d101      	bne.n	8021f32 <xQueueGenericSendFromISR+0x3e>
 8021f2e:	2301      	movs	r3, #1
 8021f30:	e000      	b.n	8021f34 <xQueueGenericSendFromISR+0x40>
 8021f32:	2300      	movs	r3, #0
 8021f34:	2b00      	cmp	r3, #0
 8021f36:	d109      	bne.n	8021f4c <xQueueGenericSendFromISR+0x58>
 8021f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021f3c:	f383 8811 	msr	BASEPRI, r3
 8021f40:	f3bf 8f6f 	isb	sy
 8021f44:	f3bf 8f4f 	dsb	sy
 8021f48:	623b      	str	r3, [r7, #32]
 8021f4a:	e7fe      	b.n	8021f4a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8021f4c:	683b      	ldr	r3, [r7, #0]
 8021f4e:	2b02      	cmp	r3, #2
 8021f50:	d103      	bne.n	8021f5a <xQueueGenericSendFromISR+0x66>
 8021f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021f56:	2b01      	cmp	r3, #1
 8021f58:	d101      	bne.n	8021f5e <xQueueGenericSendFromISR+0x6a>
 8021f5a:	2301      	movs	r3, #1
 8021f5c:	e000      	b.n	8021f60 <xQueueGenericSendFromISR+0x6c>
 8021f5e:	2300      	movs	r3, #0
 8021f60:	2b00      	cmp	r3, #0
 8021f62:	d109      	bne.n	8021f78 <xQueueGenericSendFromISR+0x84>
 8021f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021f68:	f383 8811 	msr	BASEPRI, r3
 8021f6c:	f3bf 8f6f 	isb	sy
 8021f70:	f3bf 8f4f 	dsb	sy
 8021f74:	61fb      	str	r3, [r7, #28]
 8021f76:	e7fe      	b.n	8021f76 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8021f78:	f002 fcdc 	bl	8024934 <vPortValidateInterruptPriority>
	__asm volatile
 8021f7c:	f3ef 8211 	mrs	r2, BASEPRI
 8021f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021f84:	f383 8811 	msr	BASEPRI, r3
 8021f88:	f3bf 8f6f 	isb	sy
 8021f8c:	f3bf 8f4f 	dsb	sy
 8021f90:	61ba      	str	r2, [r7, #24]
 8021f92:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8021f94:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8021f96:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8021f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8021f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021fa0:	429a      	cmp	r2, r3
 8021fa2:	d302      	bcc.n	8021faa <xQueueGenericSendFromISR+0xb6>
 8021fa4:	683b      	ldr	r3, [r7, #0]
 8021fa6:	2b02      	cmp	r3, #2
 8021fa8:	d12c      	bne.n	8022004 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8021faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8021fb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8021fb4:	683a      	ldr	r2, [r7, #0]
 8021fb6:	68b9      	ldr	r1, [r7, #8]
 8021fb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021fba:	f000 fb76 	bl	80226aa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8021fbe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8021fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021fc6:	d112      	bne.n	8021fee <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8021fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021fcc:	2b00      	cmp	r3, #0
 8021fce:	d016      	beq.n	8021ffe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8021fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021fd2:	3324      	adds	r3, #36	; 0x24
 8021fd4:	4618      	mov	r0, r3
 8021fd6:	f001 f9dd 	bl	8023394 <xTaskRemoveFromEventList>
 8021fda:	4603      	mov	r3, r0
 8021fdc:	2b00      	cmp	r3, #0
 8021fde:	d00e      	beq.n	8021ffe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8021fe0:	687b      	ldr	r3, [r7, #4]
 8021fe2:	2b00      	cmp	r3, #0
 8021fe4:	d00b      	beq.n	8021ffe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8021fe6:	687b      	ldr	r3, [r7, #4]
 8021fe8:	2201      	movs	r2, #1
 8021fea:	601a      	str	r2, [r3, #0]
 8021fec:	e007      	b.n	8021ffe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8021fee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8021ff2:	3301      	adds	r3, #1
 8021ff4:	b2db      	uxtb	r3, r3
 8021ff6:	b25a      	sxtb	r2, r3
 8021ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8021ffe:	2301      	movs	r3, #1
 8022000:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8022002:	e001      	b.n	8022008 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8022004:	2300      	movs	r3, #0
 8022006:	637b      	str	r3, [r7, #52]	; 0x34
 8022008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802200a:	613b      	str	r3, [r7, #16]
	__asm volatile
 802200c:	693b      	ldr	r3, [r7, #16]
 802200e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8022012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8022014:	4618      	mov	r0, r3
 8022016:	3738      	adds	r7, #56	; 0x38
 8022018:	46bd      	mov	sp, r7
 802201a:	bd80      	pop	{r7, pc}

0802201c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 802201c:	b580      	push	{r7, lr}
 802201e:	b08e      	sub	sp, #56	; 0x38
 8022020:	af00      	add	r7, sp, #0
 8022022:	6078      	str	r0, [r7, #4]
 8022024:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8022026:	687b      	ldr	r3, [r7, #4]
 8022028:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 802202a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802202c:	2b00      	cmp	r3, #0
 802202e:	d109      	bne.n	8022044 <xQueueGiveFromISR+0x28>
	__asm volatile
 8022030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022034:	f383 8811 	msr	BASEPRI, r3
 8022038:	f3bf 8f6f 	isb	sy
 802203c:	f3bf 8f4f 	dsb	sy
 8022040:	623b      	str	r3, [r7, #32]
 8022042:	e7fe      	b.n	8022042 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8022044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022048:	2b00      	cmp	r3, #0
 802204a:	d009      	beq.n	8022060 <xQueueGiveFromISR+0x44>
 802204c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022050:	f383 8811 	msr	BASEPRI, r3
 8022054:	f3bf 8f6f 	isb	sy
 8022058:	f3bf 8f4f 	dsb	sy
 802205c:	61fb      	str	r3, [r7, #28]
 802205e:	e7fe      	b.n	802205e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8022060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022062:	681b      	ldr	r3, [r3, #0]
 8022064:	2b00      	cmp	r3, #0
 8022066:	d103      	bne.n	8022070 <xQueueGiveFromISR+0x54>
 8022068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802206a:	689b      	ldr	r3, [r3, #8]
 802206c:	2b00      	cmp	r3, #0
 802206e:	d101      	bne.n	8022074 <xQueueGiveFromISR+0x58>
 8022070:	2301      	movs	r3, #1
 8022072:	e000      	b.n	8022076 <xQueueGiveFromISR+0x5a>
 8022074:	2300      	movs	r3, #0
 8022076:	2b00      	cmp	r3, #0
 8022078:	d109      	bne.n	802208e <xQueueGiveFromISR+0x72>
 802207a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802207e:	f383 8811 	msr	BASEPRI, r3
 8022082:	f3bf 8f6f 	isb	sy
 8022086:	f3bf 8f4f 	dsb	sy
 802208a:	61bb      	str	r3, [r7, #24]
 802208c:	e7fe      	b.n	802208c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 802208e:	f002 fc51 	bl	8024934 <vPortValidateInterruptPriority>
	__asm volatile
 8022092:	f3ef 8211 	mrs	r2, BASEPRI
 8022096:	f04f 0350 	mov.w	r3, #80	; 0x50
 802209a:	f383 8811 	msr	BASEPRI, r3
 802209e:	f3bf 8f6f 	isb	sy
 80220a2:	f3bf 8f4f 	dsb	sy
 80220a6:	617a      	str	r2, [r7, #20]
 80220a8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80220aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80220ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80220ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80220b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80220b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80220b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80220b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80220b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80220ba:	429a      	cmp	r2, r3
 80220bc:	d22b      	bcs.n	8022116 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80220be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80220c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80220c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80220c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80220ca:	1c5a      	adds	r2, r3, #1
 80220cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80220ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80220d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80220d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80220d8:	d112      	bne.n	8022100 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80220da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80220dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80220de:	2b00      	cmp	r3, #0
 80220e0:	d016      	beq.n	8022110 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80220e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80220e4:	3324      	adds	r3, #36	; 0x24
 80220e6:	4618      	mov	r0, r3
 80220e8:	f001 f954 	bl	8023394 <xTaskRemoveFromEventList>
 80220ec:	4603      	mov	r3, r0
 80220ee:	2b00      	cmp	r3, #0
 80220f0:	d00e      	beq.n	8022110 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80220f2:	683b      	ldr	r3, [r7, #0]
 80220f4:	2b00      	cmp	r3, #0
 80220f6:	d00b      	beq.n	8022110 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80220f8:	683b      	ldr	r3, [r7, #0]
 80220fa:	2201      	movs	r2, #1
 80220fc:	601a      	str	r2, [r3, #0]
 80220fe:	e007      	b.n	8022110 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8022100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022104:	3301      	adds	r3, #1
 8022106:	b2db      	uxtb	r3, r3
 8022108:	b25a      	sxtb	r2, r3
 802210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802210c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8022110:	2301      	movs	r3, #1
 8022112:	637b      	str	r3, [r7, #52]	; 0x34
 8022114:	e001      	b.n	802211a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8022116:	2300      	movs	r3, #0
 8022118:	637b      	str	r3, [r7, #52]	; 0x34
 802211a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802211c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 802211e:	68fb      	ldr	r3, [r7, #12]
 8022120:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8022124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8022126:	4618      	mov	r0, r3
 8022128:	3738      	adds	r7, #56	; 0x38
 802212a:	46bd      	mov	sp, r7
 802212c:	bd80      	pop	{r7, pc}
	...

08022130 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8022130:	b580      	push	{r7, lr}
 8022132:	b08c      	sub	sp, #48	; 0x30
 8022134:	af00      	add	r7, sp, #0
 8022136:	60f8      	str	r0, [r7, #12]
 8022138:	60b9      	str	r1, [r7, #8]
 802213a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 802213c:	2300      	movs	r3, #0
 802213e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8022140:	68fb      	ldr	r3, [r7, #12]
 8022142:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8022144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022146:	2b00      	cmp	r3, #0
 8022148:	d109      	bne.n	802215e <xQueueReceive+0x2e>
	__asm volatile
 802214a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802214e:	f383 8811 	msr	BASEPRI, r3
 8022152:	f3bf 8f6f 	isb	sy
 8022156:	f3bf 8f4f 	dsb	sy
 802215a:	623b      	str	r3, [r7, #32]
 802215c:	e7fe      	b.n	802215c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802215e:	68bb      	ldr	r3, [r7, #8]
 8022160:	2b00      	cmp	r3, #0
 8022162:	d103      	bne.n	802216c <xQueueReceive+0x3c>
 8022164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022168:	2b00      	cmp	r3, #0
 802216a:	d101      	bne.n	8022170 <xQueueReceive+0x40>
 802216c:	2301      	movs	r3, #1
 802216e:	e000      	b.n	8022172 <xQueueReceive+0x42>
 8022170:	2300      	movs	r3, #0
 8022172:	2b00      	cmp	r3, #0
 8022174:	d109      	bne.n	802218a <xQueueReceive+0x5a>
 8022176:	f04f 0350 	mov.w	r3, #80	; 0x50
 802217a:	f383 8811 	msr	BASEPRI, r3
 802217e:	f3bf 8f6f 	isb	sy
 8022182:	f3bf 8f4f 	dsb	sy
 8022186:	61fb      	str	r3, [r7, #28]
 8022188:	e7fe      	b.n	8022188 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802218a:	f001 fac9 	bl	8023720 <xTaskGetSchedulerState>
 802218e:	4603      	mov	r3, r0
 8022190:	2b00      	cmp	r3, #0
 8022192:	d102      	bne.n	802219a <xQueueReceive+0x6a>
 8022194:	687b      	ldr	r3, [r7, #4]
 8022196:	2b00      	cmp	r3, #0
 8022198:	d101      	bne.n	802219e <xQueueReceive+0x6e>
 802219a:	2301      	movs	r3, #1
 802219c:	e000      	b.n	80221a0 <xQueueReceive+0x70>
 802219e:	2300      	movs	r3, #0
 80221a0:	2b00      	cmp	r3, #0
 80221a2:	d109      	bne.n	80221b8 <xQueueReceive+0x88>
 80221a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80221a8:	f383 8811 	msr	BASEPRI, r3
 80221ac:	f3bf 8f6f 	isb	sy
 80221b0:	f3bf 8f4f 	dsb	sy
 80221b4:	61bb      	str	r3, [r7, #24]
 80221b6:	e7fe      	b.n	80221b6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80221b8:	f002 fae0 	bl	802477c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80221bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80221be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80221c0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80221c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221c4:	2b00      	cmp	r3, #0
 80221c6:	d01f      	beq.n	8022208 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80221c8:	68b9      	ldr	r1, [r7, #8]
 80221ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80221cc:	f000 fad7 	bl	802277e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80221d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221d2:	1e5a      	subs	r2, r3, #1
 80221d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80221d6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80221d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80221da:	691b      	ldr	r3, [r3, #16]
 80221dc:	2b00      	cmp	r3, #0
 80221de:	d00f      	beq.n	8022200 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80221e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80221e2:	3310      	adds	r3, #16
 80221e4:	4618      	mov	r0, r3
 80221e6:	f001 f8d5 	bl	8023394 <xTaskRemoveFromEventList>
 80221ea:	4603      	mov	r3, r0
 80221ec:	2b00      	cmp	r3, #0
 80221ee:	d007      	beq.n	8022200 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80221f0:	4b3c      	ldr	r3, [pc, #240]	; (80222e4 <xQueueReceive+0x1b4>)
 80221f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80221f6:	601a      	str	r2, [r3, #0]
 80221f8:	f3bf 8f4f 	dsb	sy
 80221fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8022200:	f002 faea 	bl	80247d8 <vPortExitCritical>
				return pdPASS;
 8022204:	2301      	movs	r3, #1
 8022206:	e069      	b.n	80222dc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8022208:	687b      	ldr	r3, [r7, #4]
 802220a:	2b00      	cmp	r3, #0
 802220c:	d103      	bne.n	8022216 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 802220e:	f002 fae3 	bl	80247d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8022212:	2300      	movs	r3, #0
 8022214:	e062      	b.n	80222dc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8022216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022218:	2b00      	cmp	r3, #0
 802221a:	d106      	bne.n	802222a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802221c:	f107 0310 	add.w	r3, r7, #16
 8022220:	4618      	mov	r0, r3
 8022222:	f001 f919 	bl	8023458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8022226:	2301      	movs	r3, #1
 8022228:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802222a:	f002 fad5 	bl	80247d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802222e:	f000 fe83 	bl	8022f38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8022232:	f002 faa3 	bl	802477c <vPortEnterCritical>
 8022236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022238:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802223c:	b25b      	sxtb	r3, r3
 802223e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022242:	d103      	bne.n	802224c <xQueueReceive+0x11c>
 8022244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022246:	2200      	movs	r2, #0
 8022248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802224c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802224e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8022252:	b25b      	sxtb	r3, r3
 8022254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022258:	d103      	bne.n	8022262 <xQueueReceive+0x132>
 802225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802225c:	2200      	movs	r2, #0
 802225e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8022262:	f002 fab9 	bl	80247d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8022266:	1d3a      	adds	r2, r7, #4
 8022268:	f107 0310 	add.w	r3, r7, #16
 802226c:	4611      	mov	r1, r2
 802226e:	4618      	mov	r0, r3
 8022270:	f001 f908 	bl	8023484 <xTaskCheckForTimeOut>
 8022274:	4603      	mov	r3, r0
 8022276:	2b00      	cmp	r3, #0
 8022278:	d123      	bne.n	80222c2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802227a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802227c:	f000 faf7 	bl	802286e <prvIsQueueEmpty>
 8022280:	4603      	mov	r3, r0
 8022282:	2b00      	cmp	r3, #0
 8022284:	d017      	beq.n	80222b6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8022286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022288:	3324      	adds	r3, #36	; 0x24
 802228a:	687a      	ldr	r2, [r7, #4]
 802228c:	4611      	mov	r1, r2
 802228e:	4618      	mov	r0, r3
 8022290:	f001 f832 	bl	80232f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8022294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022296:	f000 fa98 	bl	80227ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 802229a:	f000 fe5b 	bl	8022f54 <xTaskResumeAll>
 802229e:	4603      	mov	r3, r0
 80222a0:	2b00      	cmp	r3, #0
 80222a2:	d189      	bne.n	80221b8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80222a4:	4b0f      	ldr	r3, [pc, #60]	; (80222e4 <xQueueReceive+0x1b4>)
 80222a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80222aa:	601a      	str	r2, [r3, #0]
 80222ac:	f3bf 8f4f 	dsb	sy
 80222b0:	f3bf 8f6f 	isb	sy
 80222b4:	e780      	b.n	80221b8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80222b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80222b8:	f000 fa87 	bl	80227ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80222bc:	f000 fe4a 	bl	8022f54 <xTaskResumeAll>
 80222c0:	e77a      	b.n	80221b8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80222c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80222c4:	f000 fa81 	bl	80227ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80222c8:	f000 fe44 	bl	8022f54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80222cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80222ce:	f000 face 	bl	802286e <prvIsQueueEmpty>
 80222d2:	4603      	mov	r3, r0
 80222d4:	2b00      	cmp	r3, #0
 80222d6:	f43f af6f 	beq.w	80221b8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80222da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80222dc:	4618      	mov	r0, r3
 80222de:	3730      	adds	r7, #48	; 0x30
 80222e0:	46bd      	mov	sp, r7
 80222e2:	bd80      	pop	{r7, pc}
 80222e4:	e000ed04 	.word	0xe000ed04

080222e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80222e8:	b580      	push	{r7, lr}
 80222ea:	b08e      	sub	sp, #56	; 0x38
 80222ec:	af00      	add	r7, sp, #0
 80222ee:	6078      	str	r0, [r7, #4]
 80222f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80222f2:	2300      	movs	r3, #0
 80222f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80222f6:	687b      	ldr	r3, [r7, #4]
 80222f8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80222fa:	2300      	movs	r3, #0
 80222fc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80222fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022300:	2b00      	cmp	r3, #0
 8022302:	d109      	bne.n	8022318 <xQueueSemaphoreTake+0x30>
 8022304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022308:	f383 8811 	msr	BASEPRI, r3
 802230c:	f3bf 8f6f 	isb	sy
 8022310:	f3bf 8f4f 	dsb	sy
 8022314:	623b      	str	r3, [r7, #32]
 8022316:	e7fe      	b.n	8022316 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8022318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802231c:	2b00      	cmp	r3, #0
 802231e:	d009      	beq.n	8022334 <xQueueSemaphoreTake+0x4c>
 8022320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022324:	f383 8811 	msr	BASEPRI, r3
 8022328:	f3bf 8f6f 	isb	sy
 802232c:	f3bf 8f4f 	dsb	sy
 8022330:	61fb      	str	r3, [r7, #28]
 8022332:	e7fe      	b.n	8022332 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8022334:	f001 f9f4 	bl	8023720 <xTaskGetSchedulerState>
 8022338:	4603      	mov	r3, r0
 802233a:	2b00      	cmp	r3, #0
 802233c:	d102      	bne.n	8022344 <xQueueSemaphoreTake+0x5c>
 802233e:	683b      	ldr	r3, [r7, #0]
 8022340:	2b00      	cmp	r3, #0
 8022342:	d101      	bne.n	8022348 <xQueueSemaphoreTake+0x60>
 8022344:	2301      	movs	r3, #1
 8022346:	e000      	b.n	802234a <xQueueSemaphoreTake+0x62>
 8022348:	2300      	movs	r3, #0
 802234a:	2b00      	cmp	r3, #0
 802234c:	d109      	bne.n	8022362 <xQueueSemaphoreTake+0x7a>
 802234e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022352:	f383 8811 	msr	BASEPRI, r3
 8022356:	f3bf 8f6f 	isb	sy
 802235a:	f3bf 8f4f 	dsb	sy
 802235e:	61bb      	str	r3, [r7, #24]
 8022360:	e7fe      	b.n	8022360 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8022362:	f002 fa0b 	bl	802477c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8022366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802236a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 802236c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802236e:	2b00      	cmp	r3, #0
 8022370:	d024      	beq.n	80223bc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8022372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022374:	1e5a      	subs	r2, r3, #1
 8022376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022378:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 802237a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802237c:	681b      	ldr	r3, [r3, #0]
 802237e:	2b00      	cmp	r3, #0
 8022380:	d104      	bne.n	802238c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8022382:	f001 fb3f 	bl	8023a04 <pvTaskIncrementMutexHeldCount>
 8022386:	4602      	mov	r2, r0
 8022388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802238a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802238c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802238e:	691b      	ldr	r3, [r3, #16]
 8022390:	2b00      	cmp	r3, #0
 8022392:	d00f      	beq.n	80223b4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8022394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022396:	3310      	adds	r3, #16
 8022398:	4618      	mov	r0, r3
 802239a:	f000 fffb 	bl	8023394 <xTaskRemoveFromEventList>
 802239e:	4603      	mov	r3, r0
 80223a0:	2b00      	cmp	r3, #0
 80223a2:	d007      	beq.n	80223b4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80223a4:	4b53      	ldr	r3, [pc, #332]	; (80224f4 <xQueueSemaphoreTake+0x20c>)
 80223a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80223aa:	601a      	str	r2, [r3, #0]
 80223ac:	f3bf 8f4f 	dsb	sy
 80223b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80223b4:	f002 fa10 	bl	80247d8 <vPortExitCritical>
				return pdPASS;
 80223b8:	2301      	movs	r3, #1
 80223ba:	e096      	b.n	80224ea <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80223bc:	683b      	ldr	r3, [r7, #0]
 80223be:	2b00      	cmp	r3, #0
 80223c0:	d110      	bne.n	80223e4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80223c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80223c4:	2b00      	cmp	r3, #0
 80223c6:	d009      	beq.n	80223dc <xQueueSemaphoreTake+0xf4>
 80223c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80223cc:	f383 8811 	msr	BASEPRI, r3
 80223d0:	f3bf 8f6f 	isb	sy
 80223d4:	f3bf 8f4f 	dsb	sy
 80223d8:	617b      	str	r3, [r7, #20]
 80223da:	e7fe      	b.n	80223da <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80223dc:	f002 f9fc 	bl	80247d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80223e0:	2300      	movs	r3, #0
 80223e2:	e082      	b.n	80224ea <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80223e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80223e6:	2b00      	cmp	r3, #0
 80223e8:	d106      	bne.n	80223f8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80223ea:	f107 030c 	add.w	r3, r7, #12
 80223ee:	4618      	mov	r0, r3
 80223f0:	f001 f832 	bl	8023458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80223f4:	2301      	movs	r3, #1
 80223f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80223f8:	f002 f9ee 	bl	80247d8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80223fc:	f000 fd9c 	bl	8022f38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8022400:	f002 f9bc 	bl	802477c <vPortEnterCritical>
 8022404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022406:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802240a:	b25b      	sxtb	r3, r3
 802240c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022410:	d103      	bne.n	802241a <xQueueSemaphoreTake+0x132>
 8022412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022414:	2200      	movs	r2, #0
 8022416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802241c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8022420:	b25b      	sxtb	r3, r3
 8022422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022426:	d103      	bne.n	8022430 <xQueueSemaphoreTake+0x148>
 8022428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802242a:	2200      	movs	r2, #0
 802242c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8022430:	f002 f9d2 	bl	80247d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8022434:	463a      	mov	r2, r7
 8022436:	f107 030c 	add.w	r3, r7, #12
 802243a:	4611      	mov	r1, r2
 802243c:	4618      	mov	r0, r3
 802243e:	f001 f821 	bl	8023484 <xTaskCheckForTimeOut>
 8022442:	4603      	mov	r3, r0
 8022444:	2b00      	cmp	r3, #0
 8022446:	d132      	bne.n	80224ae <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8022448:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802244a:	f000 fa10 	bl	802286e <prvIsQueueEmpty>
 802244e:	4603      	mov	r3, r0
 8022450:	2b00      	cmp	r3, #0
 8022452:	d026      	beq.n	80224a2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8022454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022456:	681b      	ldr	r3, [r3, #0]
 8022458:	2b00      	cmp	r3, #0
 802245a:	d109      	bne.n	8022470 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 802245c:	f002 f98e 	bl	802477c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8022460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022462:	689b      	ldr	r3, [r3, #8]
 8022464:	4618      	mov	r0, r3
 8022466:	f001 f979 	bl	802375c <xTaskPriorityInherit>
 802246a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 802246c:	f002 f9b4 	bl	80247d8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8022470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022472:	3324      	adds	r3, #36	; 0x24
 8022474:	683a      	ldr	r2, [r7, #0]
 8022476:	4611      	mov	r1, r2
 8022478:	4618      	mov	r0, r3
 802247a:	f000 ff3d 	bl	80232f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 802247e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8022480:	f000 f9a3 	bl	80227ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8022484:	f000 fd66 	bl	8022f54 <xTaskResumeAll>
 8022488:	4603      	mov	r3, r0
 802248a:	2b00      	cmp	r3, #0
 802248c:	f47f af69 	bne.w	8022362 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8022490:	4b18      	ldr	r3, [pc, #96]	; (80224f4 <xQueueSemaphoreTake+0x20c>)
 8022492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022496:	601a      	str	r2, [r3, #0]
 8022498:	f3bf 8f4f 	dsb	sy
 802249c:	f3bf 8f6f 	isb	sy
 80224a0:	e75f      	b.n	8022362 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80224a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80224a4:	f000 f991 	bl	80227ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80224a8:	f000 fd54 	bl	8022f54 <xTaskResumeAll>
 80224ac:	e759      	b.n	8022362 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80224ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80224b0:	f000 f98b 	bl	80227ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80224b4:	f000 fd4e 	bl	8022f54 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80224b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80224ba:	f000 f9d8 	bl	802286e <prvIsQueueEmpty>
 80224be:	4603      	mov	r3, r0
 80224c0:	2b00      	cmp	r3, #0
 80224c2:	f43f af4e 	beq.w	8022362 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80224c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80224c8:	2b00      	cmp	r3, #0
 80224ca:	d00d      	beq.n	80224e8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80224cc:	f002 f956 	bl	802477c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80224d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80224d2:	f000 f8d2 	bl	802267a <prvGetDisinheritPriorityAfterTimeout>
 80224d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80224d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80224da:	689b      	ldr	r3, [r3, #8]
 80224dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80224de:	4618      	mov	r0, r3
 80224e0:	f001 fa10 	bl	8023904 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80224e4:	f002 f978 	bl	80247d8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80224e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80224ea:	4618      	mov	r0, r3
 80224ec:	3738      	adds	r7, #56	; 0x38
 80224ee:	46bd      	mov	sp, r7
 80224f0:	bd80      	pop	{r7, pc}
 80224f2:	bf00      	nop
 80224f4:	e000ed04 	.word	0xe000ed04

080224f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80224f8:	b580      	push	{r7, lr}
 80224fa:	b08e      	sub	sp, #56	; 0x38
 80224fc:	af00      	add	r7, sp, #0
 80224fe:	60f8      	str	r0, [r7, #12]
 8022500:	60b9      	str	r1, [r7, #8]
 8022502:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8022504:	68fb      	ldr	r3, [r7, #12]
 8022506:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8022508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802250a:	2b00      	cmp	r3, #0
 802250c:	d109      	bne.n	8022522 <xQueueReceiveFromISR+0x2a>
 802250e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022512:	f383 8811 	msr	BASEPRI, r3
 8022516:	f3bf 8f6f 	isb	sy
 802251a:	f3bf 8f4f 	dsb	sy
 802251e:	623b      	str	r3, [r7, #32]
 8022520:	e7fe      	b.n	8022520 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8022522:	68bb      	ldr	r3, [r7, #8]
 8022524:	2b00      	cmp	r3, #0
 8022526:	d103      	bne.n	8022530 <xQueueReceiveFromISR+0x38>
 8022528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802252c:	2b00      	cmp	r3, #0
 802252e:	d101      	bne.n	8022534 <xQueueReceiveFromISR+0x3c>
 8022530:	2301      	movs	r3, #1
 8022532:	e000      	b.n	8022536 <xQueueReceiveFromISR+0x3e>
 8022534:	2300      	movs	r3, #0
 8022536:	2b00      	cmp	r3, #0
 8022538:	d109      	bne.n	802254e <xQueueReceiveFromISR+0x56>
 802253a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802253e:	f383 8811 	msr	BASEPRI, r3
 8022542:	f3bf 8f6f 	isb	sy
 8022546:	f3bf 8f4f 	dsb	sy
 802254a:	61fb      	str	r3, [r7, #28]
 802254c:	e7fe      	b.n	802254c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 802254e:	f002 f9f1 	bl	8024934 <vPortValidateInterruptPriority>
	__asm volatile
 8022552:	f3ef 8211 	mrs	r2, BASEPRI
 8022556:	f04f 0350 	mov.w	r3, #80	; 0x50
 802255a:	f383 8811 	msr	BASEPRI, r3
 802255e:	f3bf 8f6f 	isb	sy
 8022562:	f3bf 8f4f 	dsb	sy
 8022566:	61ba      	str	r2, [r7, #24]
 8022568:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 802256a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 802256c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 802256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022572:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8022574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022576:	2b00      	cmp	r3, #0
 8022578:	d02f      	beq.n	80225da <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 802257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802257c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8022580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8022584:	68b9      	ldr	r1, [r7, #8]
 8022586:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022588:	f000 f8f9 	bl	802277e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 802258c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802258e:	1e5a      	subs	r2, r3, #1
 8022590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022592:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8022594:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8022598:	f1b3 3fff 	cmp.w	r3, #4294967295
 802259c:	d112      	bne.n	80225c4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80225a0:	691b      	ldr	r3, [r3, #16]
 80225a2:	2b00      	cmp	r3, #0
 80225a4:	d016      	beq.n	80225d4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80225a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80225a8:	3310      	adds	r3, #16
 80225aa:	4618      	mov	r0, r3
 80225ac:	f000 fef2 	bl	8023394 <xTaskRemoveFromEventList>
 80225b0:	4603      	mov	r3, r0
 80225b2:	2b00      	cmp	r3, #0
 80225b4:	d00e      	beq.n	80225d4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80225b6:	687b      	ldr	r3, [r7, #4]
 80225b8:	2b00      	cmp	r3, #0
 80225ba:	d00b      	beq.n	80225d4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80225bc:	687b      	ldr	r3, [r7, #4]
 80225be:	2201      	movs	r2, #1
 80225c0:	601a      	str	r2, [r3, #0]
 80225c2:	e007      	b.n	80225d4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80225c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80225c8:	3301      	adds	r3, #1
 80225ca:	b2db      	uxtb	r3, r3
 80225cc:	b25a      	sxtb	r2, r3
 80225ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80225d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80225d4:	2301      	movs	r3, #1
 80225d6:	637b      	str	r3, [r7, #52]	; 0x34
 80225d8:	e001      	b.n	80225de <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80225da:	2300      	movs	r3, #0
 80225dc:	637b      	str	r3, [r7, #52]	; 0x34
 80225de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80225e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80225e2:	693b      	ldr	r3, [r7, #16]
 80225e4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80225e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80225ea:	4618      	mov	r0, r3
 80225ec:	3738      	adds	r7, #56	; 0x38
 80225ee:	46bd      	mov	sp, r7
 80225f0:	bd80      	pop	{r7, pc}

080225f2 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80225f2:	b580      	push	{r7, lr}
 80225f4:	b086      	sub	sp, #24
 80225f6:	af00      	add	r7, sp, #0
 80225f8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80225fa:	687b      	ldr	r3, [r7, #4]
 80225fc:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80225fe:	697b      	ldr	r3, [r7, #20]
 8022600:	2b00      	cmp	r3, #0
 8022602:	d109      	bne.n	8022618 <uxQueueSpacesAvailable+0x26>
	__asm volatile
 8022604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022608:	f383 8811 	msr	BASEPRI, r3
 802260c:	f3bf 8f6f 	isb	sy
 8022610:	f3bf 8f4f 	dsb	sy
 8022614:	60fb      	str	r3, [r7, #12]
 8022616:	e7fe      	b.n	8022616 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 8022618:	f002 f8b0 	bl	802477c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 802261c:	697b      	ldr	r3, [r7, #20]
 802261e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8022620:	697b      	ldr	r3, [r7, #20]
 8022622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022624:	1ad3      	subs	r3, r2, r3
 8022626:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8022628:	f002 f8d6 	bl	80247d8 <vPortExitCritical>

	return uxReturn;
 802262c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 802262e:	4618      	mov	r0, r3
 8022630:	3718      	adds	r7, #24
 8022632:	46bd      	mov	sp, r7
 8022634:	bd80      	pop	{r7, pc}

08022636 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8022636:	b580      	push	{r7, lr}
 8022638:	b084      	sub	sp, #16
 802263a:	af00      	add	r7, sp, #0
 802263c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 802263e:	687b      	ldr	r3, [r7, #4]
 8022640:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8022642:	68fb      	ldr	r3, [r7, #12]
 8022644:	2b00      	cmp	r3, #0
 8022646:	d109      	bne.n	802265c <vQueueDelete+0x26>
 8022648:	f04f 0350 	mov.w	r3, #80	; 0x50
 802264c:	f383 8811 	msr	BASEPRI, r3
 8022650:	f3bf 8f6f 	isb	sy
 8022654:	f3bf 8f4f 	dsb	sy
 8022658:	60bb      	str	r3, [r7, #8]
 802265a:	e7fe      	b.n	802265a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 802265c:	68f8      	ldr	r0, [r7, #12]
 802265e:	f000 f95d 	bl	802291c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8022662:	68fb      	ldr	r3, [r7, #12]
 8022664:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8022668:	2b00      	cmp	r3, #0
 802266a:	d102      	bne.n	8022672 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 802266c:	68f8      	ldr	r0, [r7, #12]
 802266e:	f002 fa61 	bl	8024b34 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8022672:	bf00      	nop
 8022674:	3710      	adds	r7, #16
 8022676:	46bd      	mov	sp, r7
 8022678:	bd80      	pop	{r7, pc}

0802267a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 802267a:	b480      	push	{r7}
 802267c:	b085      	sub	sp, #20
 802267e:	af00      	add	r7, sp, #0
 8022680:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8022682:	687b      	ldr	r3, [r7, #4]
 8022684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022686:	2b00      	cmp	r3, #0
 8022688:	d006      	beq.n	8022698 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 802268a:	687b      	ldr	r3, [r7, #4]
 802268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802268e:	681b      	ldr	r3, [r3, #0]
 8022690:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8022694:	60fb      	str	r3, [r7, #12]
 8022696:	e001      	b.n	802269c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8022698:	2300      	movs	r3, #0
 802269a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 802269c:	68fb      	ldr	r3, [r7, #12]
	}
 802269e:	4618      	mov	r0, r3
 80226a0:	3714      	adds	r7, #20
 80226a2:	46bd      	mov	sp, r7
 80226a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226a8:	4770      	bx	lr

080226aa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80226aa:	b580      	push	{r7, lr}
 80226ac:	b086      	sub	sp, #24
 80226ae:	af00      	add	r7, sp, #0
 80226b0:	60f8      	str	r0, [r7, #12]
 80226b2:	60b9      	str	r1, [r7, #8]
 80226b4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80226b6:	2300      	movs	r3, #0
 80226b8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80226ba:	68fb      	ldr	r3, [r7, #12]
 80226bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80226be:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80226c0:	68fb      	ldr	r3, [r7, #12]
 80226c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80226c4:	2b00      	cmp	r3, #0
 80226c6:	d10d      	bne.n	80226e4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80226c8:	68fb      	ldr	r3, [r7, #12]
 80226ca:	681b      	ldr	r3, [r3, #0]
 80226cc:	2b00      	cmp	r3, #0
 80226ce:	d14d      	bne.n	802276c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80226d0:	68fb      	ldr	r3, [r7, #12]
 80226d2:	689b      	ldr	r3, [r3, #8]
 80226d4:	4618      	mov	r0, r3
 80226d6:	f001 f8a9 	bl	802382c <xTaskPriorityDisinherit>
 80226da:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80226dc:	68fb      	ldr	r3, [r7, #12]
 80226de:	2200      	movs	r2, #0
 80226e0:	609a      	str	r2, [r3, #8]
 80226e2:	e043      	b.n	802276c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80226e4:	687b      	ldr	r3, [r7, #4]
 80226e6:	2b00      	cmp	r3, #0
 80226e8:	d119      	bne.n	802271e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80226ea:	68fb      	ldr	r3, [r7, #12]
 80226ec:	6858      	ldr	r0, [r3, #4]
 80226ee:	68fb      	ldr	r3, [r7, #12]
 80226f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80226f2:	461a      	mov	r2, r3
 80226f4:	68b9      	ldr	r1, [r7, #8]
 80226f6:	f006 f82f 	bl	8028758 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80226fa:	68fb      	ldr	r3, [r7, #12]
 80226fc:	685a      	ldr	r2, [r3, #4]
 80226fe:	68fb      	ldr	r3, [r7, #12]
 8022700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022702:	441a      	add	r2, r3
 8022704:	68fb      	ldr	r3, [r7, #12]
 8022706:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8022708:	68fb      	ldr	r3, [r7, #12]
 802270a:	685a      	ldr	r2, [r3, #4]
 802270c:	68fb      	ldr	r3, [r7, #12]
 802270e:	689b      	ldr	r3, [r3, #8]
 8022710:	429a      	cmp	r2, r3
 8022712:	d32b      	bcc.n	802276c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8022714:	68fb      	ldr	r3, [r7, #12]
 8022716:	681a      	ldr	r2, [r3, #0]
 8022718:	68fb      	ldr	r3, [r7, #12]
 802271a:	605a      	str	r2, [r3, #4]
 802271c:	e026      	b.n	802276c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 802271e:	68fb      	ldr	r3, [r7, #12]
 8022720:	68d8      	ldr	r0, [r3, #12]
 8022722:	68fb      	ldr	r3, [r7, #12]
 8022724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022726:	461a      	mov	r2, r3
 8022728:	68b9      	ldr	r1, [r7, #8]
 802272a:	f006 f815 	bl	8028758 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 802272e:	68fb      	ldr	r3, [r7, #12]
 8022730:	68da      	ldr	r2, [r3, #12]
 8022732:	68fb      	ldr	r3, [r7, #12]
 8022734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022736:	425b      	negs	r3, r3
 8022738:	441a      	add	r2, r3
 802273a:	68fb      	ldr	r3, [r7, #12]
 802273c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 802273e:	68fb      	ldr	r3, [r7, #12]
 8022740:	68da      	ldr	r2, [r3, #12]
 8022742:	68fb      	ldr	r3, [r7, #12]
 8022744:	681b      	ldr	r3, [r3, #0]
 8022746:	429a      	cmp	r2, r3
 8022748:	d207      	bcs.n	802275a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 802274a:	68fb      	ldr	r3, [r7, #12]
 802274c:	689a      	ldr	r2, [r3, #8]
 802274e:	68fb      	ldr	r3, [r7, #12]
 8022750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022752:	425b      	negs	r3, r3
 8022754:	441a      	add	r2, r3
 8022756:	68fb      	ldr	r3, [r7, #12]
 8022758:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 802275a:	687b      	ldr	r3, [r7, #4]
 802275c:	2b02      	cmp	r3, #2
 802275e:	d105      	bne.n	802276c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8022760:	693b      	ldr	r3, [r7, #16]
 8022762:	2b00      	cmp	r3, #0
 8022764:	d002      	beq.n	802276c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8022766:	693b      	ldr	r3, [r7, #16]
 8022768:	3b01      	subs	r3, #1
 802276a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 802276c:	693b      	ldr	r3, [r7, #16]
 802276e:	1c5a      	adds	r2, r3, #1
 8022770:	68fb      	ldr	r3, [r7, #12]
 8022772:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8022774:	697b      	ldr	r3, [r7, #20]
}
 8022776:	4618      	mov	r0, r3
 8022778:	3718      	adds	r7, #24
 802277a:	46bd      	mov	sp, r7
 802277c:	bd80      	pop	{r7, pc}

0802277e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 802277e:	b580      	push	{r7, lr}
 8022780:	b082      	sub	sp, #8
 8022782:	af00      	add	r7, sp, #0
 8022784:	6078      	str	r0, [r7, #4]
 8022786:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8022788:	687b      	ldr	r3, [r7, #4]
 802278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802278c:	2b00      	cmp	r3, #0
 802278e:	d018      	beq.n	80227c2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8022790:	687b      	ldr	r3, [r7, #4]
 8022792:	68da      	ldr	r2, [r3, #12]
 8022794:	687b      	ldr	r3, [r7, #4]
 8022796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022798:	441a      	add	r2, r3
 802279a:	687b      	ldr	r3, [r7, #4]
 802279c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 802279e:	687b      	ldr	r3, [r7, #4]
 80227a0:	68da      	ldr	r2, [r3, #12]
 80227a2:	687b      	ldr	r3, [r7, #4]
 80227a4:	689b      	ldr	r3, [r3, #8]
 80227a6:	429a      	cmp	r2, r3
 80227a8:	d303      	bcc.n	80227b2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80227aa:	687b      	ldr	r3, [r7, #4]
 80227ac:	681a      	ldr	r2, [r3, #0]
 80227ae:	687b      	ldr	r3, [r7, #4]
 80227b0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80227b2:	687b      	ldr	r3, [r7, #4]
 80227b4:	68d9      	ldr	r1, [r3, #12]
 80227b6:	687b      	ldr	r3, [r7, #4]
 80227b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80227ba:	461a      	mov	r2, r3
 80227bc:	6838      	ldr	r0, [r7, #0]
 80227be:	f005 ffcb 	bl	8028758 <memcpy>
	}
}
 80227c2:	bf00      	nop
 80227c4:	3708      	adds	r7, #8
 80227c6:	46bd      	mov	sp, r7
 80227c8:	bd80      	pop	{r7, pc}

080227ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80227ca:	b580      	push	{r7, lr}
 80227cc:	b084      	sub	sp, #16
 80227ce:	af00      	add	r7, sp, #0
 80227d0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80227d2:	f001 ffd3 	bl	802477c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80227d6:	687b      	ldr	r3, [r7, #4]
 80227d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80227dc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80227de:	e011      	b.n	8022804 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80227e0:	687b      	ldr	r3, [r7, #4]
 80227e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80227e4:	2b00      	cmp	r3, #0
 80227e6:	d012      	beq.n	802280e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80227e8:	687b      	ldr	r3, [r7, #4]
 80227ea:	3324      	adds	r3, #36	; 0x24
 80227ec:	4618      	mov	r0, r3
 80227ee:	f000 fdd1 	bl	8023394 <xTaskRemoveFromEventList>
 80227f2:	4603      	mov	r3, r0
 80227f4:	2b00      	cmp	r3, #0
 80227f6:	d001      	beq.n	80227fc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80227f8:	f000 fea4 	bl	8023544 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80227fc:	7bfb      	ldrb	r3, [r7, #15]
 80227fe:	3b01      	subs	r3, #1
 8022800:	b2db      	uxtb	r3, r3
 8022802:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8022804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8022808:	2b00      	cmp	r3, #0
 802280a:	dce9      	bgt.n	80227e0 <prvUnlockQueue+0x16>
 802280c:	e000      	b.n	8022810 <prvUnlockQueue+0x46>
					break;
 802280e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8022810:	687b      	ldr	r3, [r7, #4]
 8022812:	22ff      	movs	r2, #255	; 0xff
 8022814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8022818:	f001 ffde 	bl	80247d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 802281c:	f001 ffae 	bl	802477c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8022820:	687b      	ldr	r3, [r7, #4]
 8022822:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8022826:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8022828:	e011      	b.n	802284e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802282a:	687b      	ldr	r3, [r7, #4]
 802282c:	691b      	ldr	r3, [r3, #16]
 802282e:	2b00      	cmp	r3, #0
 8022830:	d012      	beq.n	8022858 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8022832:	687b      	ldr	r3, [r7, #4]
 8022834:	3310      	adds	r3, #16
 8022836:	4618      	mov	r0, r3
 8022838:	f000 fdac 	bl	8023394 <xTaskRemoveFromEventList>
 802283c:	4603      	mov	r3, r0
 802283e:	2b00      	cmp	r3, #0
 8022840:	d001      	beq.n	8022846 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8022842:	f000 fe7f 	bl	8023544 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8022846:	7bbb      	ldrb	r3, [r7, #14]
 8022848:	3b01      	subs	r3, #1
 802284a:	b2db      	uxtb	r3, r3
 802284c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 802284e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8022852:	2b00      	cmp	r3, #0
 8022854:	dce9      	bgt.n	802282a <prvUnlockQueue+0x60>
 8022856:	e000      	b.n	802285a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8022858:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 802285a:	687b      	ldr	r3, [r7, #4]
 802285c:	22ff      	movs	r2, #255	; 0xff
 802285e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8022862:	f001 ffb9 	bl	80247d8 <vPortExitCritical>
}
 8022866:	bf00      	nop
 8022868:	3710      	adds	r7, #16
 802286a:	46bd      	mov	sp, r7
 802286c:	bd80      	pop	{r7, pc}

0802286e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 802286e:	b580      	push	{r7, lr}
 8022870:	b084      	sub	sp, #16
 8022872:	af00      	add	r7, sp, #0
 8022874:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8022876:	f001 ff81 	bl	802477c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 802287a:	687b      	ldr	r3, [r7, #4]
 802287c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802287e:	2b00      	cmp	r3, #0
 8022880:	d102      	bne.n	8022888 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8022882:	2301      	movs	r3, #1
 8022884:	60fb      	str	r3, [r7, #12]
 8022886:	e001      	b.n	802288c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8022888:	2300      	movs	r3, #0
 802288a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 802288c:	f001 ffa4 	bl	80247d8 <vPortExitCritical>

	return xReturn;
 8022890:	68fb      	ldr	r3, [r7, #12]
}
 8022892:	4618      	mov	r0, r3
 8022894:	3710      	adds	r7, #16
 8022896:	46bd      	mov	sp, r7
 8022898:	bd80      	pop	{r7, pc}

0802289a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 802289a:	b580      	push	{r7, lr}
 802289c:	b084      	sub	sp, #16
 802289e:	af00      	add	r7, sp, #0
 80228a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80228a2:	f001 ff6b 	bl	802477c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80228a6:	687b      	ldr	r3, [r7, #4]
 80228a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80228aa:	687b      	ldr	r3, [r7, #4]
 80228ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80228ae:	429a      	cmp	r2, r3
 80228b0:	d102      	bne.n	80228b8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80228b2:	2301      	movs	r3, #1
 80228b4:	60fb      	str	r3, [r7, #12]
 80228b6:	e001      	b.n	80228bc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80228b8:	2300      	movs	r3, #0
 80228ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80228bc:	f001 ff8c 	bl	80247d8 <vPortExitCritical>

	return xReturn;
 80228c0:	68fb      	ldr	r3, [r7, #12]
}
 80228c2:	4618      	mov	r0, r3
 80228c4:	3710      	adds	r7, #16
 80228c6:	46bd      	mov	sp, r7
 80228c8:	bd80      	pop	{r7, pc}
	...

080228cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80228cc:	b480      	push	{r7}
 80228ce:	b085      	sub	sp, #20
 80228d0:	af00      	add	r7, sp, #0
 80228d2:	6078      	str	r0, [r7, #4]
 80228d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80228d6:	2300      	movs	r3, #0
 80228d8:	60fb      	str	r3, [r7, #12]
 80228da:	e014      	b.n	8022906 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80228dc:	4a0e      	ldr	r2, [pc, #56]	; (8022918 <vQueueAddToRegistry+0x4c>)
 80228de:	68fb      	ldr	r3, [r7, #12]
 80228e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80228e4:	2b00      	cmp	r3, #0
 80228e6:	d10b      	bne.n	8022900 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80228e8:	490b      	ldr	r1, [pc, #44]	; (8022918 <vQueueAddToRegistry+0x4c>)
 80228ea:	68fb      	ldr	r3, [r7, #12]
 80228ec:	683a      	ldr	r2, [r7, #0]
 80228ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80228f2:	4a09      	ldr	r2, [pc, #36]	; (8022918 <vQueueAddToRegistry+0x4c>)
 80228f4:	68fb      	ldr	r3, [r7, #12]
 80228f6:	00db      	lsls	r3, r3, #3
 80228f8:	4413      	add	r3, r2
 80228fa:	687a      	ldr	r2, [r7, #4]
 80228fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80228fe:	e005      	b.n	802290c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8022900:	68fb      	ldr	r3, [r7, #12]
 8022902:	3301      	adds	r3, #1
 8022904:	60fb      	str	r3, [r7, #12]
 8022906:	68fb      	ldr	r3, [r7, #12]
 8022908:	2b07      	cmp	r3, #7
 802290a:	d9e7      	bls.n	80228dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 802290c:	bf00      	nop
 802290e:	3714      	adds	r7, #20
 8022910:	46bd      	mov	sp, r7
 8022912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022916:	4770      	bx	lr
 8022918:	200131a0 	.word	0x200131a0

0802291c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 802291c:	b480      	push	{r7}
 802291e:	b085      	sub	sp, #20
 8022920:	af00      	add	r7, sp, #0
 8022922:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8022924:	2300      	movs	r3, #0
 8022926:	60fb      	str	r3, [r7, #12]
 8022928:	e016      	b.n	8022958 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 802292a:	4a10      	ldr	r2, [pc, #64]	; (802296c <vQueueUnregisterQueue+0x50>)
 802292c:	68fb      	ldr	r3, [r7, #12]
 802292e:	00db      	lsls	r3, r3, #3
 8022930:	4413      	add	r3, r2
 8022932:	685b      	ldr	r3, [r3, #4]
 8022934:	687a      	ldr	r2, [r7, #4]
 8022936:	429a      	cmp	r2, r3
 8022938:	d10b      	bne.n	8022952 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 802293a:	4a0c      	ldr	r2, [pc, #48]	; (802296c <vQueueUnregisterQueue+0x50>)
 802293c:	68fb      	ldr	r3, [r7, #12]
 802293e:	2100      	movs	r1, #0
 8022940:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8022944:	4a09      	ldr	r2, [pc, #36]	; (802296c <vQueueUnregisterQueue+0x50>)
 8022946:	68fb      	ldr	r3, [r7, #12]
 8022948:	00db      	lsls	r3, r3, #3
 802294a:	4413      	add	r3, r2
 802294c:	2200      	movs	r2, #0
 802294e:	605a      	str	r2, [r3, #4]
				break;
 8022950:	e005      	b.n	802295e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8022952:	68fb      	ldr	r3, [r7, #12]
 8022954:	3301      	adds	r3, #1
 8022956:	60fb      	str	r3, [r7, #12]
 8022958:	68fb      	ldr	r3, [r7, #12]
 802295a:	2b07      	cmp	r3, #7
 802295c:	d9e5      	bls.n	802292a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 802295e:	bf00      	nop
 8022960:	3714      	adds	r7, #20
 8022962:	46bd      	mov	sp, r7
 8022964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022968:	4770      	bx	lr
 802296a:	bf00      	nop
 802296c:	200131a0 	.word	0x200131a0

08022970 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8022970:	b580      	push	{r7, lr}
 8022972:	b086      	sub	sp, #24
 8022974:	af00      	add	r7, sp, #0
 8022976:	60f8      	str	r0, [r7, #12]
 8022978:	60b9      	str	r1, [r7, #8]
 802297a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 802297c:	68fb      	ldr	r3, [r7, #12]
 802297e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8022980:	f001 fefc 	bl	802477c <vPortEnterCritical>
 8022984:	697b      	ldr	r3, [r7, #20]
 8022986:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802298a:	b25b      	sxtb	r3, r3
 802298c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022990:	d103      	bne.n	802299a <vQueueWaitForMessageRestricted+0x2a>
 8022992:	697b      	ldr	r3, [r7, #20]
 8022994:	2200      	movs	r2, #0
 8022996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802299a:	697b      	ldr	r3, [r7, #20]
 802299c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80229a0:	b25b      	sxtb	r3, r3
 80229a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80229a6:	d103      	bne.n	80229b0 <vQueueWaitForMessageRestricted+0x40>
 80229a8:	697b      	ldr	r3, [r7, #20]
 80229aa:	2200      	movs	r2, #0
 80229ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80229b0:	f001 ff12 	bl	80247d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80229b4:	697b      	ldr	r3, [r7, #20]
 80229b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80229b8:	2b00      	cmp	r3, #0
 80229ba:	d106      	bne.n	80229ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80229bc:	697b      	ldr	r3, [r7, #20]
 80229be:	3324      	adds	r3, #36	; 0x24
 80229c0:	687a      	ldr	r2, [r7, #4]
 80229c2:	68b9      	ldr	r1, [r7, #8]
 80229c4:	4618      	mov	r0, r3
 80229c6:	f000 fcbb 	bl	8023340 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80229ca:	6978      	ldr	r0, [r7, #20]
 80229cc:	f7ff fefd 	bl	80227ca <prvUnlockQueue>
	}
 80229d0:	bf00      	nop
 80229d2:	3718      	adds	r7, #24
 80229d4:	46bd      	mov	sp, r7
 80229d6:	bd80      	pop	{r7, pc}

080229d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80229d8:	b580      	push	{r7, lr}
 80229da:	b08e      	sub	sp, #56	; 0x38
 80229dc:	af04      	add	r7, sp, #16
 80229de:	60f8      	str	r0, [r7, #12]
 80229e0:	60b9      	str	r1, [r7, #8]
 80229e2:	607a      	str	r2, [r7, #4]
 80229e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80229e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80229e8:	2b00      	cmp	r3, #0
 80229ea:	d109      	bne.n	8022a00 <xTaskCreateStatic+0x28>
 80229ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80229f0:	f383 8811 	msr	BASEPRI, r3
 80229f4:	f3bf 8f6f 	isb	sy
 80229f8:	f3bf 8f4f 	dsb	sy
 80229fc:	623b      	str	r3, [r7, #32]
 80229fe:	e7fe      	b.n	80229fe <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8022a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022a02:	2b00      	cmp	r3, #0
 8022a04:	d109      	bne.n	8022a1a <xTaskCreateStatic+0x42>
 8022a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022a0a:	f383 8811 	msr	BASEPRI, r3
 8022a0e:	f3bf 8f6f 	isb	sy
 8022a12:	f3bf 8f4f 	dsb	sy
 8022a16:	61fb      	str	r3, [r7, #28]
 8022a18:	e7fe      	b.n	8022a18 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8022a1a:	235c      	movs	r3, #92	; 0x5c
 8022a1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8022a1e:	693b      	ldr	r3, [r7, #16]
 8022a20:	2b5c      	cmp	r3, #92	; 0x5c
 8022a22:	d009      	beq.n	8022a38 <xTaskCreateStatic+0x60>
 8022a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022a28:	f383 8811 	msr	BASEPRI, r3
 8022a2c:	f3bf 8f6f 	isb	sy
 8022a30:	f3bf 8f4f 	dsb	sy
 8022a34:	61bb      	str	r3, [r7, #24]
 8022a36:	e7fe      	b.n	8022a36 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8022a38:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8022a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022a3c:	2b00      	cmp	r3, #0
 8022a3e:	d01e      	beq.n	8022a7e <xTaskCreateStatic+0xa6>
 8022a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022a42:	2b00      	cmp	r3, #0
 8022a44:	d01b      	beq.n	8022a7e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8022a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022a48:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8022a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022a4e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8022a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a52:	2202      	movs	r2, #2
 8022a54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8022a58:	2300      	movs	r3, #0
 8022a5a:	9303      	str	r3, [sp, #12]
 8022a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a5e:	9302      	str	r3, [sp, #8]
 8022a60:	f107 0314 	add.w	r3, r7, #20
 8022a64:	9301      	str	r3, [sp, #4]
 8022a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022a68:	9300      	str	r3, [sp, #0]
 8022a6a:	683b      	ldr	r3, [r7, #0]
 8022a6c:	687a      	ldr	r2, [r7, #4]
 8022a6e:	68b9      	ldr	r1, [r7, #8]
 8022a70:	68f8      	ldr	r0, [r7, #12]
 8022a72:	f000 f850 	bl	8022b16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8022a76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022a78:	f000 f8dc 	bl	8022c34 <prvAddNewTaskToReadyList>
 8022a7c:	e001      	b.n	8022a82 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8022a7e:	2300      	movs	r3, #0
 8022a80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8022a82:	697b      	ldr	r3, [r7, #20]
	}
 8022a84:	4618      	mov	r0, r3
 8022a86:	3728      	adds	r7, #40	; 0x28
 8022a88:	46bd      	mov	sp, r7
 8022a8a:	bd80      	pop	{r7, pc}

08022a8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8022a8c:	b580      	push	{r7, lr}
 8022a8e:	b08c      	sub	sp, #48	; 0x30
 8022a90:	af04      	add	r7, sp, #16
 8022a92:	60f8      	str	r0, [r7, #12]
 8022a94:	60b9      	str	r1, [r7, #8]
 8022a96:	603b      	str	r3, [r7, #0]
 8022a98:	4613      	mov	r3, r2
 8022a9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8022a9c:	88fb      	ldrh	r3, [r7, #6]
 8022a9e:	009b      	lsls	r3, r3, #2
 8022aa0:	4618      	mov	r0, r3
 8022aa2:	f001 ff85 	bl	80249b0 <pvPortMalloc>
 8022aa6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8022aa8:	697b      	ldr	r3, [r7, #20]
 8022aaa:	2b00      	cmp	r3, #0
 8022aac:	d00e      	beq.n	8022acc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8022aae:	205c      	movs	r0, #92	; 0x5c
 8022ab0:	f001 ff7e 	bl	80249b0 <pvPortMalloc>
 8022ab4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8022ab6:	69fb      	ldr	r3, [r7, #28]
 8022ab8:	2b00      	cmp	r3, #0
 8022aba:	d003      	beq.n	8022ac4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8022abc:	69fb      	ldr	r3, [r7, #28]
 8022abe:	697a      	ldr	r2, [r7, #20]
 8022ac0:	631a      	str	r2, [r3, #48]	; 0x30
 8022ac2:	e005      	b.n	8022ad0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8022ac4:	6978      	ldr	r0, [r7, #20]
 8022ac6:	f002 f835 	bl	8024b34 <vPortFree>
 8022aca:	e001      	b.n	8022ad0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8022acc:	2300      	movs	r3, #0
 8022ace:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8022ad0:	69fb      	ldr	r3, [r7, #28]
 8022ad2:	2b00      	cmp	r3, #0
 8022ad4:	d017      	beq.n	8022b06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8022ad6:	69fb      	ldr	r3, [r7, #28]
 8022ad8:	2200      	movs	r2, #0
 8022ada:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8022ade:	88fa      	ldrh	r2, [r7, #6]
 8022ae0:	2300      	movs	r3, #0
 8022ae2:	9303      	str	r3, [sp, #12]
 8022ae4:	69fb      	ldr	r3, [r7, #28]
 8022ae6:	9302      	str	r3, [sp, #8]
 8022ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022aea:	9301      	str	r3, [sp, #4]
 8022aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022aee:	9300      	str	r3, [sp, #0]
 8022af0:	683b      	ldr	r3, [r7, #0]
 8022af2:	68b9      	ldr	r1, [r7, #8]
 8022af4:	68f8      	ldr	r0, [r7, #12]
 8022af6:	f000 f80e 	bl	8022b16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8022afa:	69f8      	ldr	r0, [r7, #28]
 8022afc:	f000 f89a 	bl	8022c34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8022b00:	2301      	movs	r3, #1
 8022b02:	61bb      	str	r3, [r7, #24]
 8022b04:	e002      	b.n	8022b0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8022b06:	f04f 33ff 	mov.w	r3, #4294967295
 8022b0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8022b0c:	69bb      	ldr	r3, [r7, #24]
	}
 8022b0e:	4618      	mov	r0, r3
 8022b10:	3720      	adds	r7, #32
 8022b12:	46bd      	mov	sp, r7
 8022b14:	bd80      	pop	{r7, pc}

08022b16 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8022b16:	b580      	push	{r7, lr}
 8022b18:	b088      	sub	sp, #32
 8022b1a:	af00      	add	r7, sp, #0
 8022b1c:	60f8      	str	r0, [r7, #12]
 8022b1e:	60b9      	str	r1, [r7, #8]
 8022b20:	607a      	str	r2, [r7, #4]
 8022b22:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8022b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022b26:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8022b28:	687b      	ldr	r3, [r7, #4]
 8022b2a:	009b      	lsls	r3, r3, #2
 8022b2c:	461a      	mov	r2, r3
 8022b2e:	21a5      	movs	r1, #165	; 0xa5
 8022b30:	f005 fe1d 	bl	802876e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8022b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8022b38:	687b      	ldr	r3, [r7, #4]
 8022b3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8022b3e:	3b01      	subs	r3, #1
 8022b40:	009b      	lsls	r3, r3, #2
 8022b42:	4413      	add	r3, r2
 8022b44:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8022b46:	69bb      	ldr	r3, [r7, #24]
 8022b48:	f023 0307 	bic.w	r3, r3, #7
 8022b4c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8022b4e:	69bb      	ldr	r3, [r7, #24]
 8022b50:	f003 0307 	and.w	r3, r3, #7
 8022b54:	2b00      	cmp	r3, #0
 8022b56:	d009      	beq.n	8022b6c <prvInitialiseNewTask+0x56>
 8022b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022b5c:	f383 8811 	msr	BASEPRI, r3
 8022b60:	f3bf 8f6f 	isb	sy
 8022b64:	f3bf 8f4f 	dsb	sy
 8022b68:	617b      	str	r3, [r7, #20]
 8022b6a:	e7fe      	b.n	8022b6a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8022b6c:	68bb      	ldr	r3, [r7, #8]
 8022b6e:	2b00      	cmp	r3, #0
 8022b70:	d01f      	beq.n	8022bb2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8022b72:	2300      	movs	r3, #0
 8022b74:	61fb      	str	r3, [r7, #28]
 8022b76:	e012      	b.n	8022b9e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8022b78:	68ba      	ldr	r2, [r7, #8]
 8022b7a:	69fb      	ldr	r3, [r7, #28]
 8022b7c:	4413      	add	r3, r2
 8022b7e:	7819      	ldrb	r1, [r3, #0]
 8022b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022b82:	69fb      	ldr	r3, [r7, #28]
 8022b84:	4413      	add	r3, r2
 8022b86:	3334      	adds	r3, #52	; 0x34
 8022b88:	460a      	mov	r2, r1
 8022b8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8022b8c:	68ba      	ldr	r2, [r7, #8]
 8022b8e:	69fb      	ldr	r3, [r7, #28]
 8022b90:	4413      	add	r3, r2
 8022b92:	781b      	ldrb	r3, [r3, #0]
 8022b94:	2b00      	cmp	r3, #0
 8022b96:	d006      	beq.n	8022ba6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8022b98:	69fb      	ldr	r3, [r7, #28]
 8022b9a:	3301      	adds	r3, #1
 8022b9c:	61fb      	str	r3, [r7, #28]
 8022b9e:	69fb      	ldr	r3, [r7, #28]
 8022ba0:	2b0f      	cmp	r3, #15
 8022ba2:	d9e9      	bls.n	8022b78 <prvInitialiseNewTask+0x62>
 8022ba4:	e000      	b.n	8022ba8 <prvInitialiseNewTask+0x92>
			{
				break;
 8022ba6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8022ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022baa:	2200      	movs	r2, #0
 8022bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8022bb0:	e003      	b.n	8022bba <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8022bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022bb4:	2200      	movs	r2, #0
 8022bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8022bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022bbc:	2b37      	cmp	r3, #55	; 0x37
 8022bbe:	d901      	bls.n	8022bc4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8022bc0:	2337      	movs	r3, #55	; 0x37
 8022bc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8022bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022bc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8022bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022bce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8022bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022bd2:	2200      	movs	r2, #0
 8022bd4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8022bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022bd8:	3304      	adds	r3, #4
 8022bda:	4618      	mov	r0, r3
 8022bdc:	f7fe fe58 	bl	8021890 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8022be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022be2:	3318      	adds	r3, #24
 8022be4:	4618      	mov	r0, r3
 8022be6:	f7fe fe53 	bl	8021890 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8022bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022bee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022bf2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8022bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022bf8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8022bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022bfe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8022c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022c02:	2200      	movs	r2, #0
 8022c04:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8022c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022c08:	2200      	movs	r2, #0
 8022c0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8022c0e:	683a      	ldr	r2, [r7, #0]
 8022c10:	68f9      	ldr	r1, [r7, #12]
 8022c12:	69b8      	ldr	r0, [r7, #24]
 8022c14:	f001 fc8a 	bl	802452c <pxPortInitialiseStack>
 8022c18:	4602      	mov	r2, r0
 8022c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022c1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8022c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022c20:	2b00      	cmp	r3, #0
 8022c22:	d002      	beq.n	8022c2a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8022c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022c28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8022c2a:	bf00      	nop
 8022c2c:	3720      	adds	r7, #32
 8022c2e:	46bd      	mov	sp, r7
 8022c30:	bd80      	pop	{r7, pc}
	...

08022c34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8022c34:	b580      	push	{r7, lr}
 8022c36:	b082      	sub	sp, #8
 8022c38:	af00      	add	r7, sp, #0
 8022c3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8022c3c:	f001 fd9e 	bl	802477c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8022c40:	4b2d      	ldr	r3, [pc, #180]	; (8022cf8 <prvAddNewTaskToReadyList+0xc4>)
 8022c42:	681b      	ldr	r3, [r3, #0]
 8022c44:	3301      	adds	r3, #1
 8022c46:	4a2c      	ldr	r2, [pc, #176]	; (8022cf8 <prvAddNewTaskToReadyList+0xc4>)
 8022c48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8022c4a:	4b2c      	ldr	r3, [pc, #176]	; (8022cfc <prvAddNewTaskToReadyList+0xc8>)
 8022c4c:	681b      	ldr	r3, [r3, #0]
 8022c4e:	2b00      	cmp	r3, #0
 8022c50:	d109      	bne.n	8022c66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8022c52:	4a2a      	ldr	r2, [pc, #168]	; (8022cfc <prvAddNewTaskToReadyList+0xc8>)
 8022c54:	687b      	ldr	r3, [r7, #4]
 8022c56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8022c58:	4b27      	ldr	r3, [pc, #156]	; (8022cf8 <prvAddNewTaskToReadyList+0xc4>)
 8022c5a:	681b      	ldr	r3, [r3, #0]
 8022c5c:	2b01      	cmp	r3, #1
 8022c5e:	d110      	bne.n	8022c82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8022c60:	f000 fc94 	bl	802358c <prvInitialiseTaskLists>
 8022c64:	e00d      	b.n	8022c82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8022c66:	4b26      	ldr	r3, [pc, #152]	; (8022d00 <prvAddNewTaskToReadyList+0xcc>)
 8022c68:	681b      	ldr	r3, [r3, #0]
 8022c6a:	2b00      	cmp	r3, #0
 8022c6c:	d109      	bne.n	8022c82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8022c6e:	4b23      	ldr	r3, [pc, #140]	; (8022cfc <prvAddNewTaskToReadyList+0xc8>)
 8022c70:	681b      	ldr	r3, [r3, #0]
 8022c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022c74:	687b      	ldr	r3, [r7, #4]
 8022c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022c78:	429a      	cmp	r2, r3
 8022c7a:	d802      	bhi.n	8022c82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8022c7c:	4a1f      	ldr	r2, [pc, #124]	; (8022cfc <prvAddNewTaskToReadyList+0xc8>)
 8022c7e:	687b      	ldr	r3, [r7, #4]
 8022c80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8022c82:	4b20      	ldr	r3, [pc, #128]	; (8022d04 <prvAddNewTaskToReadyList+0xd0>)
 8022c84:	681b      	ldr	r3, [r3, #0]
 8022c86:	3301      	adds	r3, #1
 8022c88:	4a1e      	ldr	r2, [pc, #120]	; (8022d04 <prvAddNewTaskToReadyList+0xd0>)
 8022c8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8022c8c:	4b1d      	ldr	r3, [pc, #116]	; (8022d04 <prvAddNewTaskToReadyList+0xd0>)
 8022c8e:	681a      	ldr	r2, [r3, #0]
 8022c90:	687b      	ldr	r3, [r7, #4]
 8022c92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8022c94:	687b      	ldr	r3, [r7, #4]
 8022c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022c98:	4b1b      	ldr	r3, [pc, #108]	; (8022d08 <prvAddNewTaskToReadyList+0xd4>)
 8022c9a:	681b      	ldr	r3, [r3, #0]
 8022c9c:	429a      	cmp	r2, r3
 8022c9e:	d903      	bls.n	8022ca8 <prvAddNewTaskToReadyList+0x74>
 8022ca0:	687b      	ldr	r3, [r7, #4]
 8022ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022ca4:	4a18      	ldr	r2, [pc, #96]	; (8022d08 <prvAddNewTaskToReadyList+0xd4>)
 8022ca6:	6013      	str	r3, [r2, #0]
 8022ca8:	687b      	ldr	r3, [r7, #4]
 8022caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022cac:	4613      	mov	r3, r2
 8022cae:	009b      	lsls	r3, r3, #2
 8022cb0:	4413      	add	r3, r2
 8022cb2:	009b      	lsls	r3, r3, #2
 8022cb4:	4a15      	ldr	r2, [pc, #84]	; (8022d0c <prvAddNewTaskToReadyList+0xd8>)
 8022cb6:	441a      	add	r2, r3
 8022cb8:	687b      	ldr	r3, [r7, #4]
 8022cba:	3304      	adds	r3, #4
 8022cbc:	4619      	mov	r1, r3
 8022cbe:	4610      	mov	r0, r2
 8022cc0:	f7fe fdf3 	bl	80218aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8022cc4:	f001 fd88 	bl	80247d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8022cc8:	4b0d      	ldr	r3, [pc, #52]	; (8022d00 <prvAddNewTaskToReadyList+0xcc>)
 8022cca:	681b      	ldr	r3, [r3, #0]
 8022ccc:	2b00      	cmp	r3, #0
 8022cce:	d00e      	beq.n	8022cee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8022cd0:	4b0a      	ldr	r3, [pc, #40]	; (8022cfc <prvAddNewTaskToReadyList+0xc8>)
 8022cd2:	681b      	ldr	r3, [r3, #0]
 8022cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022cd6:	687b      	ldr	r3, [r7, #4]
 8022cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022cda:	429a      	cmp	r2, r3
 8022cdc:	d207      	bcs.n	8022cee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8022cde:	4b0c      	ldr	r3, [pc, #48]	; (8022d10 <prvAddNewTaskToReadyList+0xdc>)
 8022ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022ce4:	601a      	str	r2, [r3, #0]
 8022ce6:	f3bf 8f4f 	dsb	sy
 8022cea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8022cee:	bf00      	nop
 8022cf0:	3708      	adds	r7, #8
 8022cf2:	46bd      	mov	sp, r7
 8022cf4:	bd80      	pop	{r7, pc}
 8022cf6:	bf00      	nop
 8022cf8:	20002104 	.word	0x20002104
 8022cfc:	20001c30 	.word	0x20001c30
 8022d00:	20002110 	.word	0x20002110
 8022d04:	20002120 	.word	0x20002120
 8022d08:	2000210c 	.word	0x2000210c
 8022d0c:	20001c34 	.word	0x20001c34
 8022d10:	e000ed04 	.word	0xe000ed04

08022d14 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8022d14:	b580      	push	{r7, lr}
 8022d16:	b08a      	sub	sp, #40	; 0x28
 8022d18:	af00      	add	r7, sp, #0
 8022d1a:	6078      	str	r0, [r7, #4]
 8022d1c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8022d1e:	2300      	movs	r3, #0
 8022d20:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8022d22:	687b      	ldr	r3, [r7, #4]
 8022d24:	2b00      	cmp	r3, #0
 8022d26:	d109      	bne.n	8022d3c <vTaskDelayUntil+0x28>
 8022d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022d2c:	f383 8811 	msr	BASEPRI, r3
 8022d30:	f3bf 8f6f 	isb	sy
 8022d34:	f3bf 8f4f 	dsb	sy
 8022d38:	617b      	str	r3, [r7, #20]
 8022d3a:	e7fe      	b.n	8022d3a <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8022d3c:	683b      	ldr	r3, [r7, #0]
 8022d3e:	2b00      	cmp	r3, #0
 8022d40:	d109      	bne.n	8022d56 <vTaskDelayUntil+0x42>
 8022d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022d46:	f383 8811 	msr	BASEPRI, r3
 8022d4a:	f3bf 8f6f 	isb	sy
 8022d4e:	f3bf 8f4f 	dsb	sy
 8022d52:	613b      	str	r3, [r7, #16]
 8022d54:	e7fe      	b.n	8022d54 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8022d56:	4b29      	ldr	r3, [pc, #164]	; (8022dfc <vTaskDelayUntil+0xe8>)
 8022d58:	681b      	ldr	r3, [r3, #0]
 8022d5a:	2b00      	cmp	r3, #0
 8022d5c:	d009      	beq.n	8022d72 <vTaskDelayUntil+0x5e>
 8022d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022d62:	f383 8811 	msr	BASEPRI, r3
 8022d66:	f3bf 8f6f 	isb	sy
 8022d6a:	f3bf 8f4f 	dsb	sy
 8022d6e:	60fb      	str	r3, [r7, #12]
 8022d70:	e7fe      	b.n	8022d70 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8022d72:	f000 f8e1 	bl	8022f38 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8022d76:	4b22      	ldr	r3, [pc, #136]	; (8022e00 <vTaskDelayUntil+0xec>)
 8022d78:	681b      	ldr	r3, [r3, #0]
 8022d7a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8022d7c:	687b      	ldr	r3, [r7, #4]
 8022d7e:	681b      	ldr	r3, [r3, #0]
 8022d80:	683a      	ldr	r2, [r7, #0]
 8022d82:	4413      	add	r3, r2
 8022d84:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8022d86:	687b      	ldr	r3, [r7, #4]
 8022d88:	681b      	ldr	r3, [r3, #0]
 8022d8a:	6a3a      	ldr	r2, [r7, #32]
 8022d8c:	429a      	cmp	r2, r3
 8022d8e:	d20b      	bcs.n	8022da8 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8022d90:	687b      	ldr	r3, [r7, #4]
 8022d92:	681b      	ldr	r3, [r3, #0]
 8022d94:	69fa      	ldr	r2, [r7, #28]
 8022d96:	429a      	cmp	r2, r3
 8022d98:	d211      	bcs.n	8022dbe <vTaskDelayUntil+0xaa>
 8022d9a:	69fa      	ldr	r2, [r7, #28]
 8022d9c:	6a3b      	ldr	r3, [r7, #32]
 8022d9e:	429a      	cmp	r2, r3
 8022da0:	d90d      	bls.n	8022dbe <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8022da2:	2301      	movs	r3, #1
 8022da4:	627b      	str	r3, [r7, #36]	; 0x24
 8022da6:	e00a      	b.n	8022dbe <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8022da8:	687b      	ldr	r3, [r7, #4]
 8022daa:	681b      	ldr	r3, [r3, #0]
 8022dac:	69fa      	ldr	r2, [r7, #28]
 8022dae:	429a      	cmp	r2, r3
 8022db0:	d303      	bcc.n	8022dba <vTaskDelayUntil+0xa6>
 8022db2:	69fa      	ldr	r2, [r7, #28]
 8022db4:	6a3b      	ldr	r3, [r7, #32]
 8022db6:	429a      	cmp	r2, r3
 8022db8:	d901      	bls.n	8022dbe <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8022dba:	2301      	movs	r3, #1
 8022dbc:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8022dbe:	687b      	ldr	r3, [r7, #4]
 8022dc0:	69fa      	ldr	r2, [r7, #28]
 8022dc2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8022dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022dc6:	2b00      	cmp	r3, #0
 8022dc8:	d006      	beq.n	8022dd8 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8022dca:	69fa      	ldr	r2, [r7, #28]
 8022dcc:	6a3b      	ldr	r3, [r7, #32]
 8022dce:	1ad3      	subs	r3, r2, r3
 8022dd0:	2100      	movs	r1, #0
 8022dd2:	4618      	mov	r0, r3
 8022dd4:	f001 f810 	bl	8023df8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8022dd8:	f000 f8bc 	bl	8022f54 <xTaskResumeAll>
 8022ddc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8022dde:	69bb      	ldr	r3, [r7, #24]
 8022de0:	2b00      	cmp	r3, #0
 8022de2:	d107      	bne.n	8022df4 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8022de4:	4b07      	ldr	r3, [pc, #28]	; (8022e04 <vTaskDelayUntil+0xf0>)
 8022de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022dea:	601a      	str	r2, [r3, #0]
 8022dec:	f3bf 8f4f 	dsb	sy
 8022df0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8022df4:	bf00      	nop
 8022df6:	3728      	adds	r7, #40	; 0x28
 8022df8:	46bd      	mov	sp, r7
 8022dfa:	bd80      	pop	{r7, pc}
 8022dfc:	2000212c 	.word	0x2000212c
 8022e00:	20002108 	.word	0x20002108
 8022e04:	e000ed04 	.word	0xe000ed04

08022e08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8022e08:	b580      	push	{r7, lr}
 8022e0a:	b084      	sub	sp, #16
 8022e0c:	af00      	add	r7, sp, #0
 8022e0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8022e10:	2300      	movs	r3, #0
 8022e12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8022e14:	687b      	ldr	r3, [r7, #4]
 8022e16:	2b00      	cmp	r3, #0
 8022e18:	d016      	beq.n	8022e48 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8022e1a:	4b13      	ldr	r3, [pc, #76]	; (8022e68 <vTaskDelay+0x60>)
 8022e1c:	681b      	ldr	r3, [r3, #0]
 8022e1e:	2b00      	cmp	r3, #0
 8022e20:	d009      	beq.n	8022e36 <vTaskDelay+0x2e>
 8022e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022e26:	f383 8811 	msr	BASEPRI, r3
 8022e2a:	f3bf 8f6f 	isb	sy
 8022e2e:	f3bf 8f4f 	dsb	sy
 8022e32:	60bb      	str	r3, [r7, #8]
 8022e34:	e7fe      	b.n	8022e34 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8022e36:	f000 f87f 	bl	8022f38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8022e3a:	2100      	movs	r1, #0
 8022e3c:	6878      	ldr	r0, [r7, #4]
 8022e3e:	f000 ffdb 	bl	8023df8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8022e42:	f000 f887 	bl	8022f54 <xTaskResumeAll>
 8022e46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8022e48:	68fb      	ldr	r3, [r7, #12]
 8022e4a:	2b00      	cmp	r3, #0
 8022e4c:	d107      	bne.n	8022e5e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8022e4e:	4b07      	ldr	r3, [pc, #28]	; (8022e6c <vTaskDelay+0x64>)
 8022e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022e54:	601a      	str	r2, [r3, #0]
 8022e56:	f3bf 8f4f 	dsb	sy
 8022e5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8022e5e:	bf00      	nop
 8022e60:	3710      	adds	r7, #16
 8022e62:	46bd      	mov	sp, r7
 8022e64:	bd80      	pop	{r7, pc}
 8022e66:	bf00      	nop
 8022e68:	2000212c 	.word	0x2000212c
 8022e6c:	e000ed04 	.word	0xe000ed04

08022e70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8022e70:	b580      	push	{r7, lr}
 8022e72:	b08a      	sub	sp, #40	; 0x28
 8022e74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8022e76:	2300      	movs	r3, #0
 8022e78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8022e7a:	2300      	movs	r3, #0
 8022e7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8022e7e:	463a      	mov	r2, r7
 8022e80:	1d39      	adds	r1, r7, #4
 8022e82:	f107 0308 	add.w	r3, r7, #8
 8022e86:	4618      	mov	r0, r3
 8022e88:	f7fe fcae 	bl	80217e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8022e8c:	6839      	ldr	r1, [r7, #0]
 8022e8e:	687b      	ldr	r3, [r7, #4]
 8022e90:	68ba      	ldr	r2, [r7, #8]
 8022e92:	9202      	str	r2, [sp, #8]
 8022e94:	9301      	str	r3, [sp, #4]
 8022e96:	2300      	movs	r3, #0
 8022e98:	9300      	str	r3, [sp, #0]
 8022e9a:	2300      	movs	r3, #0
 8022e9c:	460a      	mov	r2, r1
 8022e9e:	4920      	ldr	r1, [pc, #128]	; (8022f20 <vTaskStartScheduler+0xb0>)
 8022ea0:	4820      	ldr	r0, [pc, #128]	; (8022f24 <vTaskStartScheduler+0xb4>)
 8022ea2:	f7ff fd99 	bl	80229d8 <xTaskCreateStatic>
 8022ea6:	4602      	mov	r2, r0
 8022ea8:	4b1f      	ldr	r3, [pc, #124]	; (8022f28 <vTaskStartScheduler+0xb8>)
 8022eaa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8022eac:	4b1e      	ldr	r3, [pc, #120]	; (8022f28 <vTaskStartScheduler+0xb8>)
 8022eae:	681b      	ldr	r3, [r3, #0]
 8022eb0:	2b00      	cmp	r3, #0
 8022eb2:	d002      	beq.n	8022eba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8022eb4:	2301      	movs	r3, #1
 8022eb6:	617b      	str	r3, [r7, #20]
 8022eb8:	e001      	b.n	8022ebe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8022eba:	2300      	movs	r3, #0
 8022ebc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8022ebe:	697b      	ldr	r3, [r7, #20]
 8022ec0:	2b01      	cmp	r3, #1
 8022ec2:	d102      	bne.n	8022eca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8022ec4:	f000 ffec 	bl	8023ea0 <xTimerCreateTimerTask>
 8022ec8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8022eca:	697b      	ldr	r3, [r7, #20]
 8022ecc:	2b01      	cmp	r3, #1
 8022ece:	d115      	bne.n	8022efc <vTaskStartScheduler+0x8c>
 8022ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022ed4:	f383 8811 	msr	BASEPRI, r3
 8022ed8:	f3bf 8f6f 	isb	sy
 8022edc:	f3bf 8f4f 	dsb	sy
 8022ee0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8022ee2:	4b12      	ldr	r3, [pc, #72]	; (8022f2c <vTaskStartScheduler+0xbc>)
 8022ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8022ee8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8022eea:	4b11      	ldr	r3, [pc, #68]	; (8022f30 <vTaskStartScheduler+0xc0>)
 8022eec:	2201      	movs	r2, #1
 8022eee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8022ef0:	4b10      	ldr	r3, [pc, #64]	; (8022f34 <vTaskStartScheduler+0xc4>)
 8022ef2:	2200      	movs	r2, #0
 8022ef4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8022ef6:	f001 fba3 	bl	8024640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8022efa:	e00d      	b.n	8022f18 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8022efc:	697b      	ldr	r3, [r7, #20]
 8022efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022f02:	d109      	bne.n	8022f18 <vTaskStartScheduler+0xa8>
 8022f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022f08:	f383 8811 	msr	BASEPRI, r3
 8022f0c:	f3bf 8f6f 	isb	sy
 8022f10:	f3bf 8f4f 	dsb	sy
 8022f14:	60fb      	str	r3, [r7, #12]
 8022f16:	e7fe      	b.n	8022f16 <vTaskStartScheduler+0xa6>
}
 8022f18:	bf00      	nop
 8022f1a:	3718      	adds	r7, #24
 8022f1c:	46bd      	mov	sp, r7
 8022f1e:	bd80      	pop	{r7, pc}
 8022f20:	0802d070 	.word	0x0802d070
 8022f24:	0802355d 	.word	0x0802355d
 8022f28:	20002128 	.word	0x20002128
 8022f2c:	20002124 	.word	0x20002124
 8022f30:	20002110 	.word	0x20002110
 8022f34:	20002108 	.word	0x20002108

08022f38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8022f38:	b480      	push	{r7}
 8022f3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8022f3c:	4b04      	ldr	r3, [pc, #16]	; (8022f50 <vTaskSuspendAll+0x18>)
 8022f3e:	681b      	ldr	r3, [r3, #0]
 8022f40:	3301      	adds	r3, #1
 8022f42:	4a03      	ldr	r2, [pc, #12]	; (8022f50 <vTaskSuspendAll+0x18>)
 8022f44:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8022f46:	bf00      	nop
 8022f48:	46bd      	mov	sp, r7
 8022f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f4e:	4770      	bx	lr
 8022f50:	2000212c 	.word	0x2000212c

08022f54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8022f54:	b580      	push	{r7, lr}
 8022f56:	b084      	sub	sp, #16
 8022f58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8022f5a:	2300      	movs	r3, #0
 8022f5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8022f5e:	2300      	movs	r3, #0
 8022f60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8022f62:	4b41      	ldr	r3, [pc, #260]	; (8023068 <xTaskResumeAll+0x114>)
 8022f64:	681b      	ldr	r3, [r3, #0]
 8022f66:	2b00      	cmp	r3, #0
 8022f68:	d109      	bne.n	8022f7e <xTaskResumeAll+0x2a>
 8022f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022f6e:	f383 8811 	msr	BASEPRI, r3
 8022f72:	f3bf 8f6f 	isb	sy
 8022f76:	f3bf 8f4f 	dsb	sy
 8022f7a:	603b      	str	r3, [r7, #0]
 8022f7c:	e7fe      	b.n	8022f7c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8022f7e:	f001 fbfd 	bl	802477c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8022f82:	4b39      	ldr	r3, [pc, #228]	; (8023068 <xTaskResumeAll+0x114>)
 8022f84:	681b      	ldr	r3, [r3, #0]
 8022f86:	3b01      	subs	r3, #1
 8022f88:	4a37      	ldr	r2, [pc, #220]	; (8023068 <xTaskResumeAll+0x114>)
 8022f8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8022f8c:	4b36      	ldr	r3, [pc, #216]	; (8023068 <xTaskResumeAll+0x114>)
 8022f8e:	681b      	ldr	r3, [r3, #0]
 8022f90:	2b00      	cmp	r3, #0
 8022f92:	d162      	bne.n	802305a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8022f94:	4b35      	ldr	r3, [pc, #212]	; (802306c <xTaskResumeAll+0x118>)
 8022f96:	681b      	ldr	r3, [r3, #0]
 8022f98:	2b00      	cmp	r3, #0
 8022f9a:	d05e      	beq.n	802305a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8022f9c:	e02f      	b.n	8022ffe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022f9e:	4b34      	ldr	r3, [pc, #208]	; (8023070 <xTaskResumeAll+0x11c>)
 8022fa0:	68db      	ldr	r3, [r3, #12]
 8022fa2:	68db      	ldr	r3, [r3, #12]
 8022fa4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8022fa6:	68fb      	ldr	r3, [r7, #12]
 8022fa8:	3318      	adds	r3, #24
 8022faa:	4618      	mov	r0, r3
 8022fac:	f7fe fcda 	bl	8021964 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022fb0:	68fb      	ldr	r3, [r7, #12]
 8022fb2:	3304      	adds	r3, #4
 8022fb4:	4618      	mov	r0, r3
 8022fb6:	f7fe fcd5 	bl	8021964 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8022fba:	68fb      	ldr	r3, [r7, #12]
 8022fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022fbe:	4b2d      	ldr	r3, [pc, #180]	; (8023074 <xTaskResumeAll+0x120>)
 8022fc0:	681b      	ldr	r3, [r3, #0]
 8022fc2:	429a      	cmp	r2, r3
 8022fc4:	d903      	bls.n	8022fce <xTaskResumeAll+0x7a>
 8022fc6:	68fb      	ldr	r3, [r7, #12]
 8022fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022fca:	4a2a      	ldr	r2, [pc, #168]	; (8023074 <xTaskResumeAll+0x120>)
 8022fcc:	6013      	str	r3, [r2, #0]
 8022fce:	68fb      	ldr	r3, [r7, #12]
 8022fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022fd2:	4613      	mov	r3, r2
 8022fd4:	009b      	lsls	r3, r3, #2
 8022fd6:	4413      	add	r3, r2
 8022fd8:	009b      	lsls	r3, r3, #2
 8022fda:	4a27      	ldr	r2, [pc, #156]	; (8023078 <xTaskResumeAll+0x124>)
 8022fdc:	441a      	add	r2, r3
 8022fde:	68fb      	ldr	r3, [r7, #12]
 8022fe0:	3304      	adds	r3, #4
 8022fe2:	4619      	mov	r1, r3
 8022fe4:	4610      	mov	r0, r2
 8022fe6:	f7fe fc60 	bl	80218aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8022fea:	68fb      	ldr	r3, [r7, #12]
 8022fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022fee:	4b23      	ldr	r3, [pc, #140]	; (802307c <xTaskResumeAll+0x128>)
 8022ff0:	681b      	ldr	r3, [r3, #0]
 8022ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022ff4:	429a      	cmp	r2, r3
 8022ff6:	d302      	bcc.n	8022ffe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8022ff8:	4b21      	ldr	r3, [pc, #132]	; (8023080 <xTaskResumeAll+0x12c>)
 8022ffa:	2201      	movs	r2, #1
 8022ffc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8022ffe:	4b1c      	ldr	r3, [pc, #112]	; (8023070 <xTaskResumeAll+0x11c>)
 8023000:	681b      	ldr	r3, [r3, #0]
 8023002:	2b00      	cmp	r3, #0
 8023004:	d1cb      	bne.n	8022f9e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8023006:	68fb      	ldr	r3, [r7, #12]
 8023008:	2b00      	cmp	r3, #0
 802300a:	d001      	beq.n	8023010 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 802300c:	f000 fb58 	bl	80236c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8023010:	4b1c      	ldr	r3, [pc, #112]	; (8023084 <xTaskResumeAll+0x130>)
 8023012:	681b      	ldr	r3, [r3, #0]
 8023014:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8023016:	687b      	ldr	r3, [r7, #4]
 8023018:	2b00      	cmp	r3, #0
 802301a:	d010      	beq.n	802303e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 802301c:	f000 f858 	bl	80230d0 <xTaskIncrementTick>
 8023020:	4603      	mov	r3, r0
 8023022:	2b00      	cmp	r3, #0
 8023024:	d002      	beq.n	802302c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8023026:	4b16      	ldr	r3, [pc, #88]	; (8023080 <xTaskResumeAll+0x12c>)
 8023028:	2201      	movs	r2, #1
 802302a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 802302c:	687b      	ldr	r3, [r7, #4]
 802302e:	3b01      	subs	r3, #1
 8023030:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8023032:	687b      	ldr	r3, [r7, #4]
 8023034:	2b00      	cmp	r3, #0
 8023036:	d1f1      	bne.n	802301c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8023038:	4b12      	ldr	r3, [pc, #72]	; (8023084 <xTaskResumeAll+0x130>)
 802303a:	2200      	movs	r2, #0
 802303c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 802303e:	4b10      	ldr	r3, [pc, #64]	; (8023080 <xTaskResumeAll+0x12c>)
 8023040:	681b      	ldr	r3, [r3, #0]
 8023042:	2b00      	cmp	r3, #0
 8023044:	d009      	beq.n	802305a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8023046:	2301      	movs	r3, #1
 8023048:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 802304a:	4b0f      	ldr	r3, [pc, #60]	; (8023088 <xTaskResumeAll+0x134>)
 802304c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8023050:	601a      	str	r2, [r3, #0]
 8023052:	f3bf 8f4f 	dsb	sy
 8023056:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802305a:	f001 fbbd 	bl	80247d8 <vPortExitCritical>

	return xAlreadyYielded;
 802305e:	68bb      	ldr	r3, [r7, #8]
}
 8023060:	4618      	mov	r0, r3
 8023062:	3710      	adds	r7, #16
 8023064:	46bd      	mov	sp, r7
 8023066:	bd80      	pop	{r7, pc}
 8023068:	2000212c 	.word	0x2000212c
 802306c:	20002104 	.word	0x20002104
 8023070:	200020c4 	.word	0x200020c4
 8023074:	2000210c 	.word	0x2000210c
 8023078:	20001c34 	.word	0x20001c34
 802307c:	20001c30 	.word	0x20001c30
 8023080:	20002118 	.word	0x20002118
 8023084:	20002114 	.word	0x20002114
 8023088:	e000ed04 	.word	0xe000ed04

0802308c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 802308c:	b480      	push	{r7}
 802308e:	b083      	sub	sp, #12
 8023090:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8023092:	4b05      	ldr	r3, [pc, #20]	; (80230a8 <xTaskGetTickCount+0x1c>)
 8023094:	681b      	ldr	r3, [r3, #0]
 8023096:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8023098:	687b      	ldr	r3, [r7, #4]
}
 802309a:	4618      	mov	r0, r3
 802309c:	370c      	adds	r7, #12
 802309e:	46bd      	mov	sp, r7
 80230a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230a4:	4770      	bx	lr
 80230a6:	bf00      	nop
 80230a8:	20002108 	.word	0x20002108

080230ac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80230ac:	b580      	push	{r7, lr}
 80230ae:	b082      	sub	sp, #8
 80230b0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80230b2:	f001 fc3f 	bl	8024934 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80230b6:	2300      	movs	r3, #0
 80230b8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80230ba:	4b04      	ldr	r3, [pc, #16]	; (80230cc <xTaskGetTickCountFromISR+0x20>)
 80230bc:	681b      	ldr	r3, [r3, #0]
 80230be:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80230c0:	683b      	ldr	r3, [r7, #0]
}
 80230c2:	4618      	mov	r0, r3
 80230c4:	3708      	adds	r7, #8
 80230c6:	46bd      	mov	sp, r7
 80230c8:	bd80      	pop	{r7, pc}
 80230ca:	bf00      	nop
 80230cc:	20002108 	.word	0x20002108

080230d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80230d0:	b580      	push	{r7, lr}
 80230d2:	b086      	sub	sp, #24
 80230d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80230d6:	2300      	movs	r3, #0
 80230d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80230da:	4b4e      	ldr	r3, [pc, #312]	; (8023214 <xTaskIncrementTick+0x144>)
 80230dc:	681b      	ldr	r3, [r3, #0]
 80230de:	2b00      	cmp	r3, #0
 80230e0:	f040 8088 	bne.w	80231f4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80230e4:	4b4c      	ldr	r3, [pc, #304]	; (8023218 <xTaskIncrementTick+0x148>)
 80230e6:	681b      	ldr	r3, [r3, #0]
 80230e8:	3301      	adds	r3, #1
 80230ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80230ec:	4a4a      	ldr	r2, [pc, #296]	; (8023218 <xTaskIncrementTick+0x148>)
 80230ee:	693b      	ldr	r3, [r7, #16]
 80230f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80230f2:	693b      	ldr	r3, [r7, #16]
 80230f4:	2b00      	cmp	r3, #0
 80230f6:	d11f      	bne.n	8023138 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80230f8:	4b48      	ldr	r3, [pc, #288]	; (802321c <xTaskIncrementTick+0x14c>)
 80230fa:	681b      	ldr	r3, [r3, #0]
 80230fc:	681b      	ldr	r3, [r3, #0]
 80230fe:	2b00      	cmp	r3, #0
 8023100:	d009      	beq.n	8023116 <xTaskIncrementTick+0x46>
 8023102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023106:	f383 8811 	msr	BASEPRI, r3
 802310a:	f3bf 8f6f 	isb	sy
 802310e:	f3bf 8f4f 	dsb	sy
 8023112:	603b      	str	r3, [r7, #0]
 8023114:	e7fe      	b.n	8023114 <xTaskIncrementTick+0x44>
 8023116:	4b41      	ldr	r3, [pc, #260]	; (802321c <xTaskIncrementTick+0x14c>)
 8023118:	681b      	ldr	r3, [r3, #0]
 802311a:	60fb      	str	r3, [r7, #12]
 802311c:	4b40      	ldr	r3, [pc, #256]	; (8023220 <xTaskIncrementTick+0x150>)
 802311e:	681b      	ldr	r3, [r3, #0]
 8023120:	4a3e      	ldr	r2, [pc, #248]	; (802321c <xTaskIncrementTick+0x14c>)
 8023122:	6013      	str	r3, [r2, #0]
 8023124:	4a3e      	ldr	r2, [pc, #248]	; (8023220 <xTaskIncrementTick+0x150>)
 8023126:	68fb      	ldr	r3, [r7, #12]
 8023128:	6013      	str	r3, [r2, #0]
 802312a:	4b3e      	ldr	r3, [pc, #248]	; (8023224 <xTaskIncrementTick+0x154>)
 802312c:	681b      	ldr	r3, [r3, #0]
 802312e:	3301      	adds	r3, #1
 8023130:	4a3c      	ldr	r2, [pc, #240]	; (8023224 <xTaskIncrementTick+0x154>)
 8023132:	6013      	str	r3, [r2, #0]
 8023134:	f000 fac4 	bl	80236c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8023138:	4b3b      	ldr	r3, [pc, #236]	; (8023228 <xTaskIncrementTick+0x158>)
 802313a:	681b      	ldr	r3, [r3, #0]
 802313c:	693a      	ldr	r2, [r7, #16]
 802313e:	429a      	cmp	r2, r3
 8023140:	d349      	bcc.n	80231d6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8023142:	4b36      	ldr	r3, [pc, #216]	; (802321c <xTaskIncrementTick+0x14c>)
 8023144:	681b      	ldr	r3, [r3, #0]
 8023146:	681b      	ldr	r3, [r3, #0]
 8023148:	2b00      	cmp	r3, #0
 802314a:	d104      	bne.n	8023156 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802314c:	4b36      	ldr	r3, [pc, #216]	; (8023228 <xTaskIncrementTick+0x158>)
 802314e:	f04f 32ff 	mov.w	r2, #4294967295
 8023152:	601a      	str	r2, [r3, #0]
					break;
 8023154:	e03f      	b.n	80231d6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8023156:	4b31      	ldr	r3, [pc, #196]	; (802321c <xTaskIncrementTick+0x14c>)
 8023158:	681b      	ldr	r3, [r3, #0]
 802315a:	68db      	ldr	r3, [r3, #12]
 802315c:	68db      	ldr	r3, [r3, #12]
 802315e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8023160:	68bb      	ldr	r3, [r7, #8]
 8023162:	685b      	ldr	r3, [r3, #4]
 8023164:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8023166:	693a      	ldr	r2, [r7, #16]
 8023168:	687b      	ldr	r3, [r7, #4]
 802316a:	429a      	cmp	r2, r3
 802316c:	d203      	bcs.n	8023176 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 802316e:	4a2e      	ldr	r2, [pc, #184]	; (8023228 <xTaskIncrementTick+0x158>)
 8023170:	687b      	ldr	r3, [r7, #4]
 8023172:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8023174:	e02f      	b.n	80231d6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8023176:	68bb      	ldr	r3, [r7, #8]
 8023178:	3304      	adds	r3, #4
 802317a:	4618      	mov	r0, r3
 802317c:	f7fe fbf2 	bl	8021964 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8023180:	68bb      	ldr	r3, [r7, #8]
 8023182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023184:	2b00      	cmp	r3, #0
 8023186:	d004      	beq.n	8023192 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8023188:	68bb      	ldr	r3, [r7, #8]
 802318a:	3318      	adds	r3, #24
 802318c:	4618      	mov	r0, r3
 802318e:	f7fe fbe9 	bl	8021964 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8023192:	68bb      	ldr	r3, [r7, #8]
 8023194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023196:	4b25      	ldr	r3, [pc, #148]	; (802322c <xTaskIncrementTick+0x15c>)
 8023198:	681b      	ldr	r3, [r3, #0]
 802319a:	429a      	cmp	r2, r3
 802319c:	d903      	bls.n	80231a6 <xTaskIncrementTick+0xd6>
 802319e:	68bb      	ldr	r3, [r7, #8]
 80231a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80231a2:	4a22      	ldr	r2, [pc, #136]	; (802322c <xTaskIncrementTick+0x15c>)
 80231a4:	6013      	str	r3, [r2, #0]
 80231a6:	68bb      	ldr	r3, [r7, #8]
 80231a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80231aa:	4613      	mov	r3, r2
 80231ac:	009b      	lsls	r3, r3, #2
 80231ae:	4413      	add	r3, r2
 80231b0:	009b      	lsls	r3, r3, #2
 80231b2:	4a1f      	ldr	r2, [pc, #124]	; (8023230 <xTaskIncrementTick+0x160>)
 80231b4:	441a      	add	r2, r3
 80231b6:	68bb      	ldr	r3, [r7, #8]
 80231b8:	3304      	adds	r3, #4
 80231ba:	4619      	mov	r1, r3
 80231bc:	4610      	mov	r0, r2
 80231be:	f7fe fb74 	bl	80218aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80231c2:	68bb      	ldr	r3, [r7, #8]
 80231c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80231c6:	4b1b      	ldr	r3, [pc, #108]	; (8023234 <xTaskIncrementTick+0x164>)
 80231c8:	681b      	ldr	r3, [r3, #0]
 80231ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80231cc:	429a      	cmp	r2, r3
 80231ce:	d3b8      	bcc.n	8023142 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80231d0:	2301      	movs	r3, #1
 80231d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80231d4:	e7b5      	b.n	8023142 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80231d6:	4b17      	ldr	r3, [pc, #92]	; (8023234 <xTaskIncrementTick+0x164>)
 80231d8:	681b      	ldr	r3, [r3, #0]
 80231da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80231dc:	4914      	ldr	r1, [pc, #80]	; (8023230 <xTaskIncrementTick+0x160>)
 80231de:	4613      	mov	r3, r2
 80231e0:	009b      	lsls	r3, r3, #2
 80231e2:	4413      	add	r3, r2
 80231e4:	009b      	lsls	r3, r3, #2
 80231e6:	440b      	add	r3, r1
 80231e8:	681b      	ldr	r3, [r3, #0]
 80231ea:	2b01      	cmp	r3, #1
 80231ec:	d907      	bls.n	80231fe <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80231ee:	2301      	movs	r3, #1
 80231f0:	617b      	str	r3, [r7, #20]
 80231f2:	e004      	b.n	80231fe <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80231f4:	4b10      	ldr	r3, [pc, #64]	; (8023238 <xTaskIncrementTick+0x168>)
 80231f6:	681b      	ldr	r3, [r3, #0]
 80231f8:	3301      	adds	r3, #1
 80231fa:	4a0f      	ldr	r2, [pc, #60]	; (8023238 <xTaskIncrementTick+0x168>)
 80231fc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80231fe:	4b0f      	ldr	r3, [pc, #60]	; (802323c <xTaskIncrementTick+0x16c>)
 8023200:	681b      	ldr	r3, [r3, #0]
 8023202:	2b00      	cmp	r3, #0
 8023204:	d001      	beq.n	802320a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8023206:	2301      	movs	r3, #1
 8023208:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 802320a:	697b      	ldr	r3, [r7, #20]
}
 802320c:	4618      	mov	r0, r3
 802320e:	3718      	adds	r7, #24
 8023210:	46bd      	mov	sp, r7
 8023212:	bd80      	pop	{r7, pc}
 8023214:	2000212c 	.word	0x2000212c
 8023218:	20002108 	.word	0x20002108
 802321c:	200020bc 	.word	0x200020bc
 8023220:	200020c0 	.word	0x200020c0
 8023224:	2000211c 	.word	0x2000211c
 8023228:	20002124 	.word	0x20002124
 802322c:	2000210c 	.word	0x2000210c
 8023230:	20001c34 	.word	0x20001c34
 8023234:	20001c30 	.word	0x20001c30
 8023238:	20002114 	.word	0x20002114
 802323c:	20002118 	.word	0x20002118

08023240 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8023240:	b480      	push	{r7}
 8023242:	b085      	sub	sp, #20
 8023244:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8023246:	4b27      	ldr	r3, [pc, #156]	; (80232e4 <vTaskSwitchContext+0xa4>)
 8023248:	681b      	ldr	r3, [r3, #0]
 802324a:	2b00      	cmp	r3, #0
 802324c:	d003      	beq.n	8023256 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 802324e:	4b26      	ldr	r3, [pc, #152]	; (80232e8 <vTaskSwitchContext+0xa8>)
 8023250:	2201      	movs	r2, #1
 8023252:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8023254:	e040      	b.n	80232d8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8023256:	4b24      	ldr	r3, [pc, #144]	; (80232e8 <vTaskSwitchContext+0xa8>)
 8023258:	2200      	movs	r2, #0
 802325a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802325c:	4b23      	ldr	r3, [pc, #140]	; (80232ec <vTaskSwitchContext+0xac>)
 802325e:	681b      	ldr	r3, [r3, #0]
 8023260:	60fb      	str	r3, [r7, #12]
 8023262:	e00f      	b.n	8023284 <vTaskSwitchContext+0x44>
 8023264:	68fb      	ldr	r3, [r7, #12]
 8023266:	2b00      	cmp	r3, #0
 8023268:	d109      	bne.n	802327e <vTaskSwitchContext+0x3e>
 802326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802326e:	f383 8811 	msr	BASEPRI, r3
 8023272:	f3bf 8f6f 	isb	sy
 8023276:	f3bf 8f4f 	dsb	sy
 802327a:	607b      	str	r3, [r7, #4]
 802327c:	e7fe      	b.n	802327c <vTaskSwitchContext+0x3c>
 802327e:	68fb      	ldr	r3, [r7, #12]
 8023280:	3b01      	subs	r3, #1
 8023282:	60fb      	str	r3, [r7, #12]
 8023284:	491a      	ldr	r1, [pc, #104]	; (80232f0 <vTaskSwitchContext+0xb0>)
 8023286:	68fa      	ldr	r2, [r7, #12]
 8023288:	4613      	mov	r3, r2
 802328a:	009b      	lsls	r3, r3, #2
 802328c:	4413      	add	r3, r2
 802328e:	009b      	lsls	r3, r3, #2
 8023290:	440b      	add	r3, r1
 8023292:	681b      	ldr	r3, [r3, #0]
 8023294:	2b00      	cmp	r3, #0
 8023296:	d0e5      	beq.n	8023264 <vTaskSwitchContext+0x24>
 8023298:	68fa      	ldr	r2, [r7, #12]
 802329a:	4613      	mov	r3, r2
 802329c:	009b      	lsls	r3, r3, #2
 802329e:	4413      	add	r3, r2
 80232a0:	009b      	lsls	r3, r3, #2
 80232a2:	4a13      	ldr	r2, [pc, #76]	; (80232f0 <vTaskSwitchContext+0xb0>)
 80232a4:	4413      	add	r3, r2
 80232a6:	60bb      	str	r3, [r7, #8]
 80232a8:	68bb      	ldr	r3, [r7, #8]
 80232aa:	685b      	ldr	r3, [r3, #4]
 80232ac:	685a      	ldr	r2, [r3, #4]
 80232ae:	68bb      	ldr	r3, [r7, #8]
 80232b0:	605a      	str	r2, [r3, #4]
 80232b2:	68bb      	ldr	r3, [r7, #8]
 80232b4:	685a      	ldr	r2, [r3, #4]
 80232b6:	68bb      	ldr	r3, [r7, #8]
 80232b8:	3308      	adds	r3, #8
 80232ba:	429a      	cmp	r2, r3
 80232bc:	d104      	bne.n	80232c8 <vTaskSwitchContext+0x88>
 80232be:	68bb      	ldr	r3, [r7, #8]
 80232c0:	685b      	ldr	r3, [r3, #4]
 80232c2:	685a      	ldr	r2, [r3, #4]
 80232c4:	68bb      	ldr	r3, [r7, #8]
 80232c6:	605a      	str	r2, [r3, #4]
 80232c8:	68bb      	ldr	r3, [r7, #8]
 80232ca:	685b      	ldr	r3, [r3, #4]
 80232cc:	68db      	ldr	r3, [r3, #12]
 80232ce:	4a09      	ldr	r2, [pc, #36]	; (80232f4 <vTaskSwitchContext+0xb4>)
 80232d0:	6013      	str	r3, [r2, #0]
 80232d2:	4a06      	ldr	r2, [pc, #24]	; (80232ec <vTaskSwitchContext+0xac>)
 80232d4:	68fb      	ldr	r3, [r7, #12]
 80232d6:	6013      	str	r3, [r2, #0]
}
 80232d8:	bf00      	nop
 80232da:	3714      	adds	r7, #20
 80232dc:	46bd      	mov	sp, r7
 80232de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80232e2:	4770      	bx	lr
 80232e4:	2000212c 	.word	0x2000212c
 80232e8:	20002118 	.word	0x20002118
 80232ec:	2000210c 	.word	0x2000210c
 80232f0:	20001c34 	.word	0x20001c34
 80232f4:	20001c30 	.word	0x20001c30

080232f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80232f8:	b580      	push	{r7, lr}
 80232fa:	b084      	sub	sp, #16
 80232fc:	af00      	add	r7, sp, #0
 80232fe:	6078      	str	r0, [r7, #4]
 8023300:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8023302:	687b      	ldr	r3, [r7, #4]
 8023304:	2b00      	cmp	r3, #0
 8023306:	d109      	bne.n	802331c <vTaskPlaceOnEventList+0x24>
 8023308:	f04f 0350 	mov.w	r3, #80	; 0x50
 802330c:	f383 8811 	msr	BASEPRI, r3
 8023310:	f3bf 8f6f 	isb	sy
 8023314:	f3bf 8f4f 	dsb	sy
 8023318:	60fb      	str	r3, [r7, #12]
 802331a:	e7fe      	b.n	802331a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 802331c:	4b07      	ldr	r3, [pc, #28]	; (802333c <vTaskPlaceOnEventList+0x44>)
 802331e:	681b      	ldr	r3, [r3, #0]
 8023320:	3318      	adds	r3, #24
 8023322:	4619      	mov	r1, r3
 8023324:	6878      	ldr	r0, [r7, #4]
 8023326:	f7fe fae4 	bl	80218f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 802332a:	2101      	movs	r1, #1
 802332c:	6838      	ldr	r0, [r7, #0]
 802332e:	f000 fd63 	bl	8023df8 <prvAddCurrentTaskToDelayedList>
}
 8023332:	bf00      	nop
 8023334:	3710      	adds	r7, #16
 8023336:	46bd      	mov	sp, r7
 8023338:	bd80      	pop	{r7, pc}
 802333a:	bf00      	nop
 802333c:	20001c30 	.word	0x20001c30

08023340 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8023340:	b580      	push	{r7, lr}
 8023342:	b086      	sub	sp, #24
 8023344:	af00      	add	r7, sp, #0
 8023346:	60f8      	str	r0, [r7, #12]
 8023348:	60b9      	str	r1, [r7, #8]
 802334a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 802334c:	68fb      	ldr	r3, [r7, #12]
 802334e:	2b00      	cmp	r3, #0
 8023350:	d109      	bne.n	8023366 <vTaskPlaceOnEventListRestricted+0x26>
 8023352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023356:	f383 8811 	msr	BASEPRI, r3
 802335a:	f3bf 8f6f 	isb	sy
 802335e:	f3bf 8f4f 	dsb	sy
 8023362:	617b      	str	r3, [r7, #20]
 8023364:	e7fe      	b.n	8023364 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8023366:	4b0a      	ldr	r3, [pc, #40]	; (8023390 <vTaskPlaceOnEventListRestricted+0x50>)
 8023368:	681b      	ldr	r3, [r3, #0]
 802336a:	3318      	adds	r3, #24
 802336c:	4619      	mov	r1, r3
 802336e:	68f8      	ldr	r0, [r7, #12]
 8023370:	f7fe fa9b 	bl	80218aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8023374:	687b      	ldr	r3, [r7, #4]
 8023376:	2b00      	cmp	r3, #0
 8023378:	d002      	beq.n	8023380 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 802337a:	f04f 33ff 	mov.w	r3, #4294967295
 802337e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8023380:	6879      	ldr	r1, [r7, #4]
 8023382:	68b8      	ldr	r0, [r7, #8]
 8023384:	f000 fd38 	bl	8023df8 <prvAddCurrentTaskToDelayedList>
	}
 8023388:	bf00      	nop
 802338a:	3718      	adds	r7, #24
 802338c:	46bd      	mov	sp, r7
 802338e:	bd80      	pop	{r7, pc}
 8023390:	20001c30 	.word	0x20001c30

08023394 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8023394:	b580      	push	{r7, lr}
 8023396:	b086      	sub	sp, #24
 8023398:	af00      	add	r7, sp, #0
 802339a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802339c:	687b      	ldr	r3, [r7, #4]
 802339e:	68db      	ldr	r3, [r3, #12]
 80233a0:	68db      	ldr	r3, [r3, #12]
 80233a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80233a4:	693b      	ldr	r3, [r7, #16]
 80233a6:	2b00      	cmp	r3, #0
 80233a8:	d109      	bne.n	80233be <xTaskRemoveFromEventList+0x2a>
 80233aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80233ae:	f383 8811 	msr	BASEPRI, r3
 80233b2:	f3bf 8f6f 	isb	sy
 80233b6:	f3bf 8f4f 	dsb	sy
 80233ba:	60fb      	str	r3, [r7, #12]
 80233bc:	e7fe      	b.n	80233bc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80233be:	693b      	ldr	r3, [r7, #16]
 80233c0:	3318      	adds	r3, #24
 80233c2:	4618      	mov	r0, r3
 80233c4:	f7fe face 	bl	8021964 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80233c8:	4b1d      	ldr	r3, [pc, #116]	; (8023440 <xTaskRemoveFromEventList+0xac>)
 80233ca:	681b      	ldr	r3, [r3, #0]
 80233cc:	2b00      	cmp	r3, #0
 80233ce:	d11d      	bne.n	802340c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80233d0:	693b      	ldr	r3, [r7, #16]
 80233d2:	3304      	adds	r3, #4
 80233d4:	4618      	mov	r0, r3
 80233d6:	f7fe fac5 	bl	8021964 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80233da:	693b      	ldr	r3, [r7, #16]
 80233dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80233de:	4b19      	ldr	r3, [pc, #100]	; (8023444 <xTaskRemoveFromEventList+0xb0>)
 80233e0:	681b      	ldr	r3, [r3, #0]
 80233e2:	429a      	cmp	r2, r3
 80233e4:	d903      	bls.n	80233ee <xTaskRemoveFromEventList+0x5a>
 80233e6:	693b      	ldr	r3, [r7, #16]
 80233e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80233ea:	4a16      	ldr	r2, [pc, #88]	; (8023444 <xTaskRemoveFromEventList+0xb0>)
 80233ec:	6013      	str	r3, [r2, #0]
 80233ee:	693b      	ldr	r3, [r7, #16]
 80233f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80233f2:	4613      	mov	r3, r2
 80233f4:	009b      	lsls	r3, r3, #2
 80233f6:	4413      	add	r3, r2
 80233f8:	009b      	lsls	r3, r3, #2
 80233fa:	4a13      	ldr	r2, [pc, #76]	; (8023448 <xTaskRemoveFromEventList+0xb4>)
 80233fc:	441a      	add	r2, r3
 80233fe:	693b      	ldr	r3, [r7, #16]
 8023400:	3304      	adds	r3, #4
 8023402:	4619      	mov	r1, r3
 8023404:	4610      	mov	r0, r2
 8023406:	f7fe fa50 	bl	80218aa <vListInsertEnd>
 802340a:	e005      	b.n	8023418 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 802340c:	693b      	ldr	r3, [r7, #16]
 802340e:	3318      	adds	r3, #24
 8023410:	4619      	mov	r1, r3
 8023412:	480e      	ldr	r0, [pc, #56]	; (802344c <xTaskRemoveFromEventList+0xb8>)
 8023414:	f7fe fa49 	bl	80218aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8023418:	693b      	ldr	r3, [r7, #16]
 802341a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802341c:	4b0c      	ldr	r3, [pc, #48]	; (8023450 <xTaskRemoveFromEventList+0xbc>)
 802341e:	681b      	ldr	r3, [r3, #0]
 8023420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023422:	429a      	cmp	r2, r3
 8023424:	d905      	bls.n	8023432 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8023426:	2301      	movs	r3, #1
 8023428:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 802342a:	4b0a      	ldr	r3, [pc, #40]	; (8023454 <xTaskRemoveFromEventList+0xc0>)
 802342c:	2201      	movs	r2, #1
 802342e:	601a      	str	r2, [r3, #0]
 8023430:	e001      	b.n	8023436 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8023432:	2300      	movs	r3, #0
 8023434:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8023436:	697b      	ldr	r3, [r7, #20]
}
 8023438:	4618      	mov	r0, r3
 802343a:	3718      	adds	r7, #24
 802343c:	46bd      	mov	sp, r7
 802343e:	bd80      	pop	{r7, pc}
 8023440:	2000212c 	.word	0x2000212c
 8023444:	2000210c 	.word	0x2000210c
 8023448:	20001c34 	.word	0x20001c34
 802344c:	200020c4 	.word	0x200020c4
 8023450:	20001c30 	.word	0x20001c30
 8023454:	20002118 	.word	0x20002118

08023458 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8023458:	b480      	push	{r7}
 802345a:	b083      	sub	sp, #12
 802345c:	af00      	add	r7, sp, #0
 802345e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8023460:	4b06      	ldr	r3, [pc, #24]	; (802347c <vTaskInternalSetTimeOutState+0x24>)
 8023462:	681a      	ldr	r2, [r3, #0]
 8023464:	687b      	ldr	r3, [r7, #4]
 8023466:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8023468:	4b05      	ldr	r3, [pc, #20]	; (8023480 <vTaskInternalSetTimeOutState+0x28>)
 802346a:	681a      	ldr	r2, [r3, #0]
 802346c:	687b      	ldr	r3, [r7, #4]
 802346e:	605a      	str	r2, [r3, #4]
}
 8023470:	bf00      	nop
 8023472:	370c      	adds	r7, #12
 8023474:	46bd      	mov	sp, r7
 8023476:	f85d 7b04 	ldr.w	r7, [sp], #4
 802347a:	4770      	bx	lr
 802347c:	2000211c 	.word	0x2000211c
 8023480:	20002108 	.word	0x20002108

08023484 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8023484:	b580      	push	{r7, lr}
 8023486:	b088      	sub	sp, #32
 8023488:	af00      	add	r7, sp, #0
 802348a:	6078      	str	r0, [r7, #4]
 802348c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 802348e:	687b      	ldr	r3, [r7, #4]
 8023490:	2b00      	cmp	r3, #0
 8023492:	d109      	bne.n	80234a8 <xTaskCheckForTimeOut+0x24>
 8023494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023498:	f383 8811 	msr	BASEPRI, r3
 802349c:	f3bf 8f6f 	isb	sy
 80234a0:	f3bf 8f4f 	dsb	sy
 80234a4:	613b      	str	r3, [r7, #16]
 80234a6:	e7fe      	b.n	80234a6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80234a8:	683b      	ldr	r3, [r7, #0]
 80234aa:	2b00      	cmp	r3, #0
 80234ac:	d109      	bne.n	80234c2 <xTaskCheckForTimeOut+0x3e>
 80234ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80234b2:	f383 8811 	msr	BASEPRI, r3
 80234b6:	f3bf 8f6f 	isb	sy
 80234ba:	f3bf 8f4f 	dsb	sy
 80234be:	60fb      	str	r3, [r7, #12]
 80234c0:	e7fe      	b.n	80234c0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80234c2:	f001 f95b 	bl	802477c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80234c6:	4b1d      	ldr	r3, [pc, #116]	; (802353c <xTaskCheckForTimeOut+0xb8>)
 80234c8:	681b      	ldr	r3, [r3, #0]
 80234ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80234cc:	687b      	ldr	r3, [r7, #4]
 80234ce:	685b      	ldr	r3, [r3, #4]
 80234d0:	69ba      	ldr	r2, [r7, #24]
 80234d2:	1ad3      	subs	r3, r2, r3
 80234d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80234d6:	683b      	ldr	r3, [r7, #0]
 80234d8:	681b      	ldr	r3, [r3, #0]
 80234da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80234de:	d102      	bne.n	80234e6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80234e0:	2300      	movs	r3, #0
 80234e2:	61fb      	str	r3, [r7, #28]
 80234e4:	e023      	b.n	802352e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80234e6:	687b      	ldr	r3, [r7, #4]
 80234e8:	681a      	ldr	r2, [r3, #0]
 80234ea:	4b15      	ldr	r3, [pc, #84]	; (8023540 <xTaskCheckForTimeOut+0xbc>)
 80234ec:	681b      	ldr	r3, [r3, #0]
 80234ee:	429a      	cmp	r2, r3
 80234f0:	d007      	beq.n	8023502 <xTaskCheckForTimeOut+0x7e>
 80234f2:	687b      	ldr	r3, [r7, #4]
 80234f4:	685b      	ldr	r3, [r3, #4]
 80234f6:	69ba      	ldr	r2, [r7, #24]
 80234f8:	429a      	cmp	r2, r3
 80234fa:	d302      	bcc.n	8023502 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80234fc:	2301      	movs	r3, #1
 80234fe:	61fb      	str	r3, [r7, #28]
 8023500:	e015      	b.n	802352e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8023502:	683b      	ldr	r3, [r7, #0]
 8023504:	681b      	ldr	r3, [r3, #0]
 8023506:	697a      	ldr	r2, [r7, #20]
 8023508:	429a      	cmp	r2, r3
 802350a:	d20b      	bcs.n	8023524 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 802350c:	683b      	ldr	r3, [r7, #0]
 802350e:	681a      	ldr	r2, [r3, #0]
 8023510:	697b      	ldr	r3, [r7, #20]
 8023512:	1ad2      	subs	r2, r2, r3
 8023514:	683b      	ldr	r3, [r7, #0]
 8023516:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8023518:	6878      	ldr	r0, [r7, #4]
 802351a:	f7ff ff9d 	bl	8023458 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 802351e:	2300      	movs	r3, #0
 8023520:	61fb      	str	r3, [r7, #28]
 8023522:	e004      	b.n	802352e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8023524:	683b      	ldr	r3, [r7, #0]
 8023526:	2200      	movs	r2, #0
 8023528:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 802352a:	2301      	movs	r3, #1
 802352c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 802352e:	f001 f953 	bl	80247d8 <vPortExitCritical>

	return xReturn;
 8023532:	69fb      	ldr	r3, [r7, #28]
}
 8023534:	4618      	mov	r0, r3
 8023536:	3720      	adds	r7, #32
 8023538:	46bd      	mov	sp, r7
 802353a:	bd80      	pop	{r7, pc}
 802353c:	20002108 	.word	0x20002108
 8023540:	2000211c 	.word	0x2000211c

08023544 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8023544:	b480      	push	{r7}
 8023546:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8023548:	4b03      	ldr	r3, [pc, #12]	; (8023558 <vTaskMissedYield+0x14>)
 802354a:	2201      	movs	r2, #1
 802354c:	601a      	str	r2, [r3, #0]
}
 802354e:	bf00      	nop
 8023550:	46bd      	mov	sp, r7
 8023552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023556:	4770      	bx	lr
 8023558:	20002118 	.word	0x20002118

0802355c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 802355c:	b580      	push	{r7, lr}
 802355e:	b082      	sub	sp, #8
 8023560:	af00      	add	r7, sp, #0
 8023562:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8023564:	f000 f852 	bl	802360c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8023568:	4b06      	ldr	r3, [pc, #24]	; (8023584 <prvIdleTask+0x28>)
 802356a:	681b      	ldr	r3, [r3, #0]
 802356c:	2b01      	cmp	r3, #1
 802356e:	d9f9      	bls.n	8023564 <prvIdleTask+0x8>
			{
				taskYIELD();
 8023570:	4b05      	ldr	r3, [pc, #20]	; (8023588 <prvIdleTask+0x2c>)
 8023572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8023576:	601a      	str	r2, [r3, #0]
 8023578:	f3bf 8f4f 	dsb	sy
 802357c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8023580:	e7f0      	b.n	8023564 <prvIdleTask+0x8>
 8023582:	bf00      	nop
 8023584:	20001c34 	.word	0x20001c34
 8023588:	e000ed04 	.word	0xe000ed04

0802358c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 802358c:	b580      	push	{r7, lr}
 802358e:	b082      	sub	sp, #8
 8023590:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8023592:	2300      	movs	r3, #0
 8023594:	607b      	str	r3, [r7, #4]
 8023596:	e00c      	b.n	80235b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8023598:	687a      	ldr	r2, [r7, #4]
 802359a:	4613      	mov	r3, r2
 802359c:	009b      	lsls	r3, r3, #2
 802359e:	4413      	add	r3, r2
 80235a0:	009b      	lsls	r3, r3, #2
 80235a2:	4a12      	ldr	r2, [pc, #72]	; (80235ec <prvInitialiseTaskLists+0x60>)
 80235a4:	4413      	add	r3, r2
 80235a6:	4618      	mov	r0, r3
 80235a8:	f7fe f952 	bl	8021850 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80235ac:	687b      	ldr	r3, [r7, #4]
 80235ae:	3301      	adds	r3, #1
 80235b0:	607b      	str	r3, [r7, #4]
 80235b2:	687b      	ldr	r3, [r7, #4]
 80235b4:	2b37      	cmp	r3, #55	; 0x37
 80235b6:	d9ef      	bls.n	8023598 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80235b8:	480d      	ldr	r0, [pc, #52]	; (80235f0 <prvInitialiseTaskLists+0x64>)
 80235ba:	f7fe f949 	bl	8021850 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80235be:	480d      	ldr	r0, [pc, #52]	; (80235f4 <prvInitialiseTaskLists+0x68>)
 80235c0:	f7fe f946 	bl	8021850 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80235c4:	480c      	ldr	r0, [pc, #48]	; (80235f8 <prvInitialiseTaskLists+0x6c>)
 80235c6:	f7fe f943 	bl	8021850 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80235ca:	480c      	ldr	r0, [pc, #48]	; (80235fc <prvInitialiseTaskLists+0x70>)
 80235cc:	f7fe f940 	bl	8021850 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80235d0:	480b      	ldr	r0, [pc, #44]	; (8023600 <prvInitialiseTaskLists+0x74>)
 80235d2:	f7fe f93d 	bl	8021850 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80235d6:	4b0b      	ldr	r3, [pc, #44]	; (8023604 <prvInitialiseTaskLists+0x78>)
 80235d8:	4a05      	ldr	r2, [pc, #20]	; (80235f0 <prvInitialiseTaskLists+0x64>)
 80235da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80235dc:	4b0a      	ldr	r3, [pc, #40]	; (8023608 <prvInitialiseTaskLists+0x7c>)
 80235de:	4a05      	ldr	r2, [pc, #20]	; (80235f4 <prvInitialiseTaskLists+0x68>)
 80235e0:	601a      	str	r2, [r3, #0]
}
 80235e2:	bf00      	nop
 80235e4:	3708      	adds	r7, #8
 80235e6:	46bd      	mov	sp, r7
 80235e8:	bd80      	pop	{r7, pc}
 80235ea:	bf00      	nop
 80235ec:	20001c34 	.word	0x20001c34
 80235f0:	20002094 	.word	0x20002094
 80235f4:	200020a8 	.word	0x200020a8
 80235f8:	200020c4 	.word	0x200020c4
 80235fc:	200020d8 	.word	0x200020d8
 8023600:	200020f0 	.word	0x200020f0
 8023604:	200020bc 	.word	0x200020bc
 8023608:	200020c0 	.word	0x200020c0

0802360c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 802360c:	b580      	push	{r7, lr}
 802360e:	b082      	sub	sp, #8
 8023610:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8023612:	e019      	b.n	8023648 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8023614:	f001 f8b2 	bl	802477c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8023618:	4b0f      	ldr	r3, [pc, #60]	; (8023658 <prvCheckTasksWaitingTermination+0x4c>)
 802361a:	68db      	ldr	r3, [r3, #12]
 802361c:	68db      	ldr	r3, [r3, #12]
 802361e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8023620:	687b      	ldr	r3, [r7, #4]
 8023622:	3304      	adds	r3, #4
 8023624:	4618      	mov	r0, r3
 8023626:	f7fe f99d 	bl	8021964 <uxListRemove>
				--uxCurrentNumberOfTasks;
 802362a:	4b0c      	ldr	r3, [pc, #48]	; (802365c <prvCheckTasksWaitingTermination+0x50>)
 802362c:	681b      	ldr	r3, [r3, #0]
 802362e:	3b01      	subs	r3, #1
 8023630:	4a0a      	ldr	r2, [pc, #40]	; (802365c <prvCheckTasksWaitingTermination+0x50>)
 8023632:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8023634:	4b0a      	ldr	r3, [pc, #40]	; (8023660 <prvCheckTasksWaitingTermination+0x54>)
 8023636:	681b      	ldr	r3, [r3, #0]
 8023638:	3b01      	subs	r3, #1
 802363a:	4a09      	ldr	r2, [pc, #36]	; (8023660 <prvCheckTasksWaitingTermination+0x54>)
 802363c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 802363e:	f001 f8cb 	bl	80247d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8023642:	6878      	ldr	r0, [r7, #4]
 8023644:	f000 f80e 	bl	8023664 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8023648:	4b05      	ldr	r3, [pc, #20]	; (8023660 <prvCheckTasksWaitingTermination+0x54>)
 802364a:	681b      	ldr	r3, [r3, #0]
 802364c:	2b00      	cmp	r3, #0
 802364e:	d1e1      	bne.n	8023614 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8023650:	bf00      	nop
 8023652:	3708      	adds	r7, #8
 8023654:	46bd      	mov	sp, r7
 8023656:	bd80      	pop	{r7, pc}
 8023658:	200020d8 	.word	0x200020d8
 802365c:	20002104 	.word	0x20002104
 8023660:	200020ec 	.word	0x200020ec

08023664 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8023664:	b580      	push	{r7, lr}
 8023666:	b084      	sub	sp, #16
 8023668:	af00      	add	r7, sp, #0
 802366a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 802366c:	687b      	ldr	r3, [r7, #4]
 802366e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8023672:	2b00      	cmp	r3, #0
 8023674:	d108      	bne.n	8023688 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8023676:	687b      	ldr	r3, [r7, #4]
 8023678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802367a:	4618      	mov	r0, r3
 802367c:	f001 fa5a 	bl	8024b34 <vPortFree>
				vPortFree( pxTCB );
 8023680:	6878      	ldr	r0, [r7, #4]
 8023682:	f001 fa57 	bl	8024b34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8023686:	e017      	b.n	80236b8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8023688:	687b      	ldr	r3, [r7, #4]
 802368a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 802368e:	2b01      	cmp	r3, #1
 8023690:	d103      	bne.n	802369a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8023692:	6878      	ldr	r0, [r7, #4]
 8023694:	f001 fa4e 	bl	8024b34 <vPortFree>
	}
 8023698:	e00e      	b.n	80236b8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 802369a:	687b      	ldr	r3, [r7, #4]
 802369c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80236a0:	2b02      	cmp	r3, #2
 80236a2:	d009      	beq.n	80236b8 <prvDeleteTCB+0x54>
 80236a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80236a8:	f383 8811 	msr	BASEPRI, r3
 80236ac:	f3bf 8f6f 	isb	sy
 80236b0:	f3bf 8f4f 	dsb	sy
 80236b4:	60fb      	str	r3, [r7, #12]
 80236b6:	e7fe      	b.n	80236b6 <prvDeleteTCB+0x52>
	}
 80236b8:	bf00      	nop
 80236ba:	3710      	adds	r7, #16
 80236bc:	46bd      	mov	sp, r7
 80236be:	bd80      	pop	{r7, pc}

080236c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80236c0:	b480      	push	{r7}
 80236c2:	b083      	sub	sp, #12
 80236c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80236c6:	4b0c      	ldr	r3, [pc, #48]	; (80236f8 <prvResetNextTaskUnblockTime+0x38>)
 80236c8:	681b      	ldr	r3, [r3, #0]
 80236ca:	681b      	ldr	r3, [r3, #0]
 80236cc:	2b00      	cmp	r3, #0
 80236ce:	d104      	bne.n	80236da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80236d0:	4b0a      	ldr	r3, [pc, #40]	; (80236fc <prvResetNextTaskUnblockTime+0x3c>)
 80236d2:	f04f 32ff 	mov.w	r2, #4294967295
 80236d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80236d8:	e008      	b.n	80236ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80236da:	4b07      	ldr	r3, [pc, #28]	; (80236f8 <prvResetNextTaskUnblockTime+0x38>)
 80236dc:	681b      	ldr	r3, [r3, #0]
 80236de:	68db      	ldr	r3, [r3, #12]
 80236e0:	68db      	ldr	r3, [r3, #12]
 80236e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80236e4:	687b      	ldr	r3, [r7, #4]
 80236e6:	685b      	ldr	r3, [r3, #4]
 80236e8:	4a04      	ldr	r2, [pc, #16]	; (80236fc <prvResetNextTaskUnblockTime+0x3c>)
 80236ea:	6013      	str	r3, [r2, #0]
}
 80236ec:	bf00      	nop
 80236ee:	370c      	adds	r7, #12
 80236f0:	46bd      	mov	sp, r7
 80236f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236f6:	4770      	bx	lr
 80236f8:	200020bc 	.word	0x200020bc
 80236fc:	20002124 	.word	0x20002124

08023700 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8023700:	b480      	push	{r7}
 8023702:	b083      	sub	sp, #12
 8023704:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8023706:	4b05      	ldr	r3, [pc, #20]	; (802371c <xTaskGetCurrentTaskHandle+0x1c>)
 8023708:	681b      	ldr	r3, [r3, #0]
 802370a:	607b      	str	r3, [r7, #4]

		return xReturn;
 802370c:	687b      	ldr	r3, [r7, #4]
	}
 802370e:	4618      	mov	r0, r3
 8023710:	370c      	adds	r7, #12
 8023712:	46bd      	mov	sp, r7
 8023714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023718:	4770      	bx	lr
 802371a:	bf00      	nop
 802371c:	20001c30 	.word	0x20001c30

08023720 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8023720:	b480      	push	{r7}
 8023722:	b083      	sub	sp, #12
 8023724:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8023726:	4b0b      	ldr	r3, [pc, #44]	; (8023754 <xTaskGetSchedulerState+0x34>)
 8023728:	681b      	ldr	r3, [r3, #0]
 802372a:	2b00      	cmp	r3, #0
 802372c:	d102      	bne.n	8023734 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 802372e:	2301      	movs	r3, #1
 8023730:	607b      	str	r3, [r7, #4]
 8023732:	e008      	b.n	8023746 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8023734:	4b08      	ldr	r3, [pc, #32]	; (8023758 <xTaskGetSchedulerState+0x38>)
 8023736:	681b      	ldr	r3, [r3, #0]
 8023738:	2b00      	cmp	r3, #0
 802373a:	d102      	bne.n	8023742 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 802373c:	2302      	movs	r3, #2
 802373e:	607b      	str	r3, [r7, #4]
 8023740:	e001      	b.n	8023746 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8023742:	2300      	movs	r3, #0
 8023744:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8023746:	687b      	ldr	r3, [r7, #4]
	}
 8023748:	4618      	mov	r0, r3
 802374a:	370c      	adds	r7, #12
 802374c:	46bd      	mov	sp, r7
 802374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023752:	4770      	bx	lr
 8023754:	20002110 	.word	0x20002110
 8023758:	2000212c 	.word	0x2000212c

0802375c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 802375c:	b580      	push	{r7, lr}
 802375e:	b084      	sub	sp, #16
 8023760:	af00      	add	r7, sp, #0
 8023762:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8023764:	687b      	ldr	r3, [r7, #4]
 8023766:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8023768:	2300      	movs	r3, #0
 802376a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 802376c:	687b      	ldr	r3, [r7, #4]
 802376e:	2b00      	cmp	r3, #0
 8023770:	d051      	beq.n	8023816 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8023772:	68bb      	ldr	r3, [r7, #8]
 8023774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023776:	4b2a      	ldr	r3, [pc, #168]	; (8023820 <xTaskPriorityInherit+0xc4>)
 8023778:	681b      	ldr	r3, [r3, #0]
 802377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802377c:	429a      	cmp	r2, r3
 802377e:	d241      	bcs.n	8023804 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8023780:	68bb      	ldr	r3, [r7, #8]
 8023782:	699b      	ldr	r3, [r3, #24]
 8023784:	2b00      	cmp	r3, #0
 8023786:	db06      	blt.n	8023796 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8023788:	4b25      	ldr	r3, [pc, #148]	; (8023820 <xTaskPriorityInherit+0xc4>)
 802378a:	681b      	ldr	r3, [r3, #0]
 802378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802378e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8023792:	68bb      	ldr	r3, [r7, #8]
 8023794:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8023796:	68bb      	ldr	r3, [r7, #8]
 8023798:	6959      	ldr	r1, [r3, #20]
 802379a:	68bb      	ldr	r3, [r7, #8]
 802379c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802379e:	4613      	mov	r3, r2
 80237a0:	009b      	lsls	r3, r3, #2
 80237a2:	4413      	add	r3, r2
 80237a4:	009b      	lsls	r3, r3, #2
 80237a6:	4a1f      	ldr	r2, [pc, #124]	; (8023824 <xTaskPriorityInherit+0xc8>)
 80237a8:	4413      	add	r3, r2
 80237aa:	4299      	cmp	r1, r3
 80237ac:	d122      	bne.n	80237f4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80237ae:	68bb      	ldr	r3, [r7, #8]
 80237b0:	3304      	adds	r3, #4
 80237b2:	4618      	mov	r0, r3
 80237b4:	f7fe f8d6 	bl	8021964 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80237b8:	4b19      	ldr	r3, [pc, #100]	; (8023820 <xTaskPriorityInherit+0xc4>)
 80237ba:	681b      	ldr	r3, [r3, #0]
 80237bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80237be:	68bb      	ldr	r3, [r7, #8]
 80237c0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80237c2:	68bb      	ldr	r3, [r7, #8]
 80237c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80237c6:	4b18      	ldr	r3, [pc, #96]	; (8023828 <xTaskPriorityInherit+0xcc>)
 80237c8:	681b      	ldr	r3, [r3, #0]
 80237ca:	429a      	cmp	r2, r3
 80237cc:	d903      	bls.n	80237d6 <xTaskPriorityInherit+0x7a>
 80237ce:	68bb      	ldr	r3, [r7, #8]
 80237d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80237d2:	4a15      	ldr	r2, [pc, #84]	; (8023828 <xTaskPriorityInherit+0xcc>)
 80237d4:	6013      	str	r3, [r2, #0]
 80237d6:	68bb      	ldr	r3, [r7, #8]
 80237d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80237da:	4613      	mov	r3, r2
 80237dc:	009b      	lsls	r3, r3, #2
 80237de:	4413      	add	r3, r2
 80237e0:	009b      	lsls	r3, r3, #2
 80237e2:	4a10      	ldr	r2, [pc, #64]	; (8023824 <xTaskPriorityInherit+0xc8>)
 80237e4:	441a      	add	r2, r3
 80237e6:	68bb      	ldr	r3, [r7, #8]
 80237e8:	3304      	adds	r3, #4
 80237ea:	4619      	mov	r1, r3
 80237ec:	4610      	mov	r0, r2
 80237ee:	f7fe f85c 	bl	80218aa <vListInsertEnd>
 80237f2:	e004      	b.n	80237fe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80237f4:	4b0a      	ldr	r3, [pc, #40]	; (8023820 <xTaskPriorityInherit+0xc4>)
 80237f6:	681b      	ldr	r3, [r3, #0]
 80237f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80237fa:	68bb      	ldr	r3, [r7, #8]
 80237fc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80237fe:	2301      	movs	r3, #1
 8023800:	60fb      	str	r3, [r7, #12]
 8023802:	e008      	b.n	8023816 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8023804:	68bb      	ldr	r3, [r7, #8]
 8023806:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8023808:	4b05      	ldr	r3, [pc, #20]	; (8023820 <xTaskPriorityInherit+0xc4>)
 802380a:	681b      	ldr	r3, [r3, #0]
 802380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802380e:	429a      	cmp	r2, r3
 8023810:	d201      	bcs.n	8023816 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8023812:	2301      	movs	r3, #1
 8023814:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8023816:	68fb      	ldr	r3, [r7, #12]
	}
 8023818:	4618      	mov	r0, r3
 802381a:	3710      	adds	r7, #16
 802381c:	46bd      	mov	sp, r7
 802381e:	bd80      	pop	{r7, pc}
 8023820:	20001c30 	.word	0x20001c30
 8023824:	20001c34 	.word	0x20001c34
 8023828:	2000210c 	.word	0x2000210c

0802382c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 802382c:	b580      	push	{r7, lr}
 802382e:	b086      	sub	sp, #24
 8023830:	af00      	add	r7, sp, #0
 8023832:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8023834:	687b      	ldr	r3, [r7, #4]
 8023836:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8023838:	2300      	movs	r3, #0
 802383a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 802383c:	687b      	ldr	r3, [r7, #4]
 802383e:	2b00      	cmp	r3, #0
 8023840:	d054      	beq.n	80238ec <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8023842:	4b2d      	ldr	r3, [pc, #180]	; (80238f8 <xTaskPriorityDisinherit+0xcc>)
 8023844:	681b      	ldr	r3, [r3, #0]
 8023846:	693a      	ldr	r2, [r7, #16]
 8023848:	429a      	cmp	r2, r3
 802384a:	d009      	beq.n	8023860 <xTaskPriorityDisinherit+0x34>
 802384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023850:	f383 8811 	msr	BASEPRI, r3
 8023854:	f3bf 8f6f 	isb	sy
 8023858:	f3bf 8f4f 	dsb	sy
 802385c:	60fb      	str	r3, [r7, #12]
 802385e:	e7fe      	b.n	802385e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8023860:	693b      	ldr	r3, [r7, #16]
 8023862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023864:	2b00      	cmp	r3, #0
 8023866:	d109      	bne.n	802387c <xTaskPriorityDisinherit+0x50>
 8023868:	f04f 0350 	mov.w	r3, #80	; 0x50
 802386c:	f383 8811 	msr	BASEPRI, r3
 8023870:	f3bf 8f6f 	isb	sy
 8023874:	f3bf 8f4f 	dsb	sy
 8023878:	60bb      	str	r3, [r7, #8]
 802387a:	e7fe      	b.n	802387a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 802387c:	693b      	ldr	r3, [r7, #16]
 802387e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023880:	1e5a      	subs	r2, r3, #1
 8023882:	693b      	ldr	r3, [r7, #16]
 8023884:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8023886:	693b      	ldr	r3, [r7, #16]
 8023888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802388a:	693b      	ldr	r3, [r7, #16]
 802388c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802388e:	429a      	cmp	r2, r3
 8023890:	d02c      	beq.n	80238ec <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8023892:	693b      	ldr	r3, [r7, #16]
 8023894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023896:	2b00      	cmp	r3, #0
 8023898:	d128      	bne.n	80238ec <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802389a:	693b      	ldr	r3, [r7, #16]
 802389c:	3304      	adds	r3, #4
 802389e:	4618      	mov	r0, r3
 80238a0:	f7fe f860 	bl	8021964 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80238a4:	693b      	ldr	r3, [r7, #16]
 80238a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80238a8:	693b      	ldr	r3, [r7, #16]
 80238aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80238ac:	693b      	ldr	r3, [r7, #16]
 80238ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80238b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80238b4:	693b      	ldr	r3, [r7, #16]
 80238b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80238b8:	693b      	ldr	r3, [r7, #16]
 80238ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80238bc:	4b0f      	ldr	r3, [pc, #60]	; (80238fc <xTaskPriorityDisinherit+0xd0>)
 80238be:	681b      	ldr	r3, [r3, #0]
 80238c0:	429a      	cmp	r2, r3
 80238c2:	d903      	bls.n	80238cc <xTaskPriorityDisinherit+0xa0>
 80238c4:	693b      	ldr	r3, [r7, #16]
 80238c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80238c8:	4a0c      	ldr	r2, [pc, #48]	; (80238fc <xTaskPriorityDisinherit+0xd0>)
 80238ca:	6013      	str	r3, [r2, #0]
 80238cc:	693b      	ldr	r3, [r7, #16]
 80238ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80238d0:	4613      	mov	r3, r2
 80238d2:	009b      	lsls	r3, r3, #2
 80238d4:	4413      	add	r3, r2
 80238d6:	009b      	lsls	r3, r3, #2
 80238d8:	4a09      	ldr	r2, [pc, #36]	; (8023900 <xTaskPriorityDisinherit+0xd4>)
 80238da:	441a      	add	r2, r3
 80238dc:	693b      	ldr	r3, [r7, #16]
 80238de:	3304      	adds	r3, #4
 80238e0:	4619      	mov	r1, r3
 80238e2:	4610      	mov	r0, r2
 80238e4:	f7fd ffe1 	bl	80218aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80238e8:	2301      	movs	r3, #1
 80238ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80238ec:	697b      	ldr	r3, [r7, #20]
	}
 80238ee:	4618      	mov	r0, r3
 80238f0:	3718      	adds	r7, #24
 80238f2:	46bd      	mov	sp, r7
 80238f4:	bd80      	pop	{r7, pc}
 80238f6:	bf00      	nop
 80238f8:	20001c30 	.word	0x20001c30
 80238fc:	2000210c 	.word	0x2000210c
 8023900:	20001c34 	.word	0x20001c34

08023904 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8023904:	b580      	push	{r7, lr}
 8023906:	b088      	sub	sp, #32
 8023908:	af00      	add	r7, sp, #0
 802390a:	6078      	str	r0, [r7, #4]
 802390c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 802390e:	687b      	ldr	r3, [r7, #4]
 8023910:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8023912:	2301      	movs	r3, #1
 8023914:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8023916:	687b      	ldr	r3, [r7, #4]
 8023918:	2b00      	cmp	r3, #0
 802391a:	d068      	beq.n	80239ee <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 802391c:	69bb      	ldr	r3, [r7, #24]
 802391e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023920:	2b00      	cmp	r3, #0
 8023922:	d109      	bne.n	8023938 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8023924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023928:	f383 8811 	msr	BASEPRI, r3
 802392c:	f3bf 8f6f 	isb	sy
 8023930:	f3bf 8f4f 	dsb	sy
 8023934:	60fb      	str	r3, [r7, #12]
 8023936:	e7fe      	b.n	8023936 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8023938:	69bb      	ldr	r3, [r7, #24]
 802393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802393c:	683a      	ldr	r2, [r7, #0]
 802393e:	429a      	cmp	r2, r3
 8023940:	d902      	bls.n	8023948 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8023942:	683b      	ldr	r3, [r7, #0]
 8023944:	61fb      	str	r3, [r7, #28]
 8023946:	e002      	b.n	802394e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8023948:	69bb      	ldr	r3, [r7, #24]
 802394a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802394c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 802394e:	69bb      	ldr	r3, [r7, #24]
 8023950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023952:	69fa      	ldr	r2, [r7, #28]
 8023954:	429a      	cmp	r2, r3
 8023956:	d04a      	beq.n	80239ee <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8023958:	69bb      	ldr	r3, [r7, #24]
 802395a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802395c:	697a      	ldr	r2, [r7, #20]
 802395e:	429a      	cmp	r2, r3
 8023960:	d145      	bne.n	80239ee <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8023962:	4b25      	ldr	r3, [pc, #148]	; (80239f8 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8023964:	681b      	ldr	r3, [r3, #0]
 8023966:	69ba      	ldr	r2, [r7, #24]
 8023968:	429a      	cmp	r2, r3
 802396a:	d109      	bne.n	8023980 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 802396c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023970:	f383 8811 	msr	BASEPRI, r3
 8023974:	f3bf 8f6f 	isb	sy
 8023978:	f3bf 8f4f 	dsb	sy
 802397c:	60bb      	str	r3, [r7, #8]
 802397e:	e7fe      	b.n	802397e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8023980:	69bb      	ldr	r3, [r7, #24]
 8023982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023984:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8023986:	69bb      	ldr	r3, [r7, #24]
 8023988:	69fa      	ldr	r2, [r7, #28]
 802398a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 802398c:	69bb      	ldr	r3, [r7, #24]
 802398e:	699b      	ldr	r3, [r3, #24]
 8023990:	2b00      	cmp	r3, #0
 8023992:	db04      	blt.n	802399e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8023994:	69fb      	ldr	r3, [r7, #28]
 8023996:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 802399a:	69bb      	ldr	r3, [r7, #24]
 802399c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 802399e:	69bb      	ldr	r3, [r7, #24]
 80239a0:	6959      	ldr	r1, [r3, #20]
 80239a2:	693a      	ldr	r2, [r7, #16]
 80239a4:	4613      	mov	r3, r2
 80239a6:	009b      	lsls	r3, r3, #2
 80239a8:	4413      	add	r3, r2
 80239aa:	009b      	lsls	r3, r3, #2
 80239ac:	4a13      	ldr	r2, [pc, #76]	; (80239fc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80239ae:	4413      	add	r3, r2
 80239b0:	4299      	cmp	r1, r3
 80239b2:	d11c      	bne.n	80239ee <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80239b4:	69bb      	ldr	r3, [r7, #24]
 80239b6:	3304      	adds	r3, #4
 80239b8:	4618      	mov	r0, r3
 80239ba:	f7fd ffd3 	bl	8021964 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80239be:	69bb      	ldr	r3, [r7, #24]
 80239c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80239c2:	4b0f      	ldr	r3, [pc, #60]	; (8023a00 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80239c4:	681b      	ldr	r3, [r3, #0]
 80239c6:	429a      	cmp	r2, r3
 80239c8:	d903      	bls.n	80239d2 <vTaskPriorityDisinheritAfterTimeout+0xce>
 80239ca:	69bb      	ldr	r3, [r7, #24]
 80239cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80239ce:	4a0c      	ldr	r2, [pc, #48]	; (8023a00 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80239d0:	6013      	str	r3, [r2, #0]
 80239d2:	69bb      	ldr	r3, [r7, #24]
 80239d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80239d6:	4613      	mov	r3, r2
 80239d8:	009b      	lsls	r3, r3, #2
 80239da:	4413      	add	r3, r2
 80239dc:	009b      	lsls	r3, r3, #2
 80239de:	4a07      	ldr	r2, [pc, #28]	; (80239fc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80239e0:	441a      	add	r2, r3
 80239e2:	69bb      	ldr	r3, [r7, #24]
 80239e4:	3304      	adds	r3, #4
 80239e6:	4619      	mov	r1, r3
 80239e8:	4610      	mov	r0, r2
 80239ea:	f7fd ff5e 	bl	80218aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80239ee:	bf00      	nop
 80239f0:	3720      	adds	r7, #32
 80239f2:	46bd      	mov	sp, r7
 80239f4:	bd80      	pop	{r7, pc}
 80239f6:	bf00      	nop
 80239f8:	20001c30 	.word	0x20001c30
 80239fc:	20001c34 	.word	0x20001c34
 8023a00:	2000210c 	.word	0x2000210c

08023a04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8023a04:	b480      	push	{r7}
 8023a06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8023a08:	4b07      	ldr	r3, [pc, #28]	; (8023a28 <pvTaskIncrementMutexHeldCount+0x24>)
 8023a0a:	681b      	ldr	r3, [r3, #0]
 8023a0c:	2b00      	cmp	r3, #0
 8023a0e:	d004      	beq.n	8023a1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8023a10:	4b05      	ldr	r3, [pc, #20]	; (8023a28 <pvTaskIncrementMutexHeldCount+0x24>)
 8023a12:	681b      	ldr	r3, [r3, #0]
 8023a14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8023a16:	3201      	adds	r2, #1
 8023a18:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8023a1a:	4b03      	ldr	r3, [pc, #12]	; (8023a28 <pvTaskIncrementMutexHeldCount+0x24>)
 8023a1c:	681b      	ldr	r3, [r3, #0]
	}
 8023a1e:	4618      	mov	r0, r3
 8023a20:	46bd      	mov	sp, r7
 8023a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a26:	4770      	bx	lr
 8023a28:	20001c30 	.word	0x20001c30

08023a2c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8023a2c:	b580      	push	{r7, lr}
 8023a2e:	b086      	sub	sp, #24
 8023a30:	af00      	add	r7, sp, #0
 8023a32:	60f8      	str	r0, [r7, #12]
 8023a34:	60b9      	str	r1, [r7, #8]
 8023a36:	607a      	str	r2, [r7, #4]
 8023a38:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8023a3a:	f000 fe9f 	bl	802477c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8023a3e:	4b26      	ldr	r3, [pc, #152]	; (8023ad8 <xTaskNotifyWait+0xac>)
 8023a40:	681b      	ldr	r3, [r3, #0]
 8023a42:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8023a46:	b2db      	uxtb	r3, r3
 8023a48:	2b02      	cmp	r3, #2
 8023a4a:	d01a      	beq.n	8023a82 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8023a4c:	4b22      	ldr	r3, [pc, #136]	; (8023ad8 <xTaskNotifyWait+0xac>)
 8023a4e:	681b      	ldr	r3, [r3, #0]
 8023a50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8023a52:	68fa      	ldr	r2, [r7, #12]
 8023a54:	43d2      	mvns	r2, r2
 8023a56:	400a      	ands	r2, r1
 8023a58:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8023a5a:	4b1f      	ldr	r3, [pc, #124]	; (8023ad8 <xTaskNotifyWait+0xac>)
 8023a5c:	681b      	ldr	r3, [r3, #0]
 8023a5e:	2201      	movs	r2, #1
 8023a60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8023a64:	683b      	ldr	r3, [r7, #0]
 8023a66:	2b00      	cmp	r3, #0
 8023a68:	d00b      	beq.n	8023a82 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8023a6a:	2101      	movs	r1, #1
 8023a6c:	6838      	ldr	r0, [r7, #0]
 8023a6e:	f000 f9c3 	bl	8023df8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8023a72:	4b1a      	ldr	r3, [pc, #104]	; (8023adc <xTaskNotifyWait+0xb0>)
 8023a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8023a78:	601a      	str	r2, [r3, #0]
 8023a7a:	f3bf 8f4f 	dsb	sy
 8023a7e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8023a82:	f000 fea9 	bl	80247d8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8023a86:	f000 fe79 	bl	802477c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8023a8a:	687b      	ldr	r3, [r7, #4]
 8023a8c:	2b00      	cmp	r3, #0
 8023a8e:	d004      	beq.n	8023a9a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8023a90:	4b11      	ldr	r3, [pc, #68]	; (8023ad8 <xTaskNotifyWait+0xac>)
 8023a92:	681b      	ldr	r3, [r3, #0]
 8023a94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8023a96:	687b      	ldr	r3, [r7, #4]
 8023a98:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8023a9a:	4b0f      	ldr	r3, [pc, #60]	; (8023ad8 <xTaskNotifyWait+0xac>)
 8023a9c:	681b      	ldr	r3, [r3, #0]
 8023a9e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8023aa2:	b2db      	uxtb	r3, r3
 8023aa4:	2b02      	cmp	r3, #2
 8023aa6:	d002      	beq.n	8023aae <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8023aa8:	2300      	movs	r3, #0
 8023aaa:	617b      	str	r3, [r7, #20]
 8023aac:	e008      	b.n	8023ac0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8023aae:	4b0a      	ldr	r3, [pc, #40]	; (8023ad8 <xTaskNotifyWait+0xac>)
 8023ab0:	681b      	ldr	r3, [r3, #0]
 8023ab2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8023ab4:	68ba      	ldr	r2, [r7, #8]
 8023ab6:	43d2      	mvns	r2, r2
 8023ab8:	400a      	ands	r2, r1
 8023aba:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8023abc:	2301      	movs	r3, #1
 8023abe:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8023ac0:	4b05      	ldr	r3, [pc, #20]	; (8023ad8 <xTaskNotifyWait+0xac>)
 8023ac2:	681b      	ldr	r3, [r3, #0]
 8023ac4:	2200      	movs	r2, #0
 8023ac6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8023aca:	f000 fe85 	bl	80247d8 <vPortExitCritical>

		return xReturn;
 8023ace:	697b      	ldr	r3, [r7, #20]
	}
 8023ad0:	4618      	mov	r0, r3
 8023ad2:	3718      	adds	r7, #24
 8023ad4:	46bd      	mov	sp, r7
 8023ad6:	bd80      	pop	{r7, pc}
 8023ad8:	20001c30 	.word	0x20001c30
 8023adc:	e000ed04 	.word	0xe000ed04

08023ae0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8023ae0:	b580      	push	{r7, lr}
 8023ae2:	b08a      	sub	sp, #40	; 0x28
 8023ae4:	af00      	add	r7, sp, #0
 8023ae6:	60f8      	str	r0, [r7, #12]
 8023ae8:	60b9      	str	r1, [r7, #8]
 8023aea:	603b      	str	r3, [r7, #0]
 8023aec:	4613      	mov	r3, r2
 8023aee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8023af0:	2301      	movs	r3, #1
 8023af2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8023af4:	68fb      	ldr	r3, [r7, #12]
 8023af6:	2b00      	cmp	r3, #0
 8023af8:	d109      	bne.n	8023b0e <xTaskGenericNotify+0x2e>
 8023afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023afe:	f383 8811 	msr	BASEPRI, r3
 8023b02:	f3bf 8f6f 	isb	sy
 8023b06:	f3bf 8f4f 	dsb	sy
 8023b0a:	61bb      	str	r3, [r7, #24]
 8023b0c:	e7fe      	b.n	8023b0c <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8023b0e:	68fb      	ldr	r3, [r7, #12]
 8023b10:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8023b12:	f000 fe33 	bl	802477c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8023b16:	683b      	ldr	r3, [r7, #0]
 8023b18:	2b00      	cmp	r3, #0
 8023b1a:	d003      	beq.n	8023b24 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8023b1c:	6a3b      	ldr	r3, [r7, #32]
 8023b1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8023b20:	683b      	ldr	r3, [r7, #0]
 8023b22:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8023b24:	6a3b      	ldr	r3, [r7, #32]
 8023b26:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8023b2a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8023b2c:	6a3b      	ldr	r3, [r7, #32]
 8023b2e:	2202      	movs	r2, #2
 8023b30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8023b34:	79fb      	ldrb	r3, [r7, #7]
 8023b36:	2b04      	cmp	r3, #4
 8023b38:	d827      	bhi.n	8023b8a <xTaskGenericNotify+0xaa>
 8023b3a:	a201      	add	r2, pc, #4	; (adr r2, 8023b40 <xTaskGenericNotify+0x60>)
 8023b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023b40:	08023ba9 	.word	0x08023ba9
 8023b44:	08023b55 	.word	0x08023b55
 8023b48:	08023b63 	.word	0x08023b63
 8023b4c:	08023b6f 	.word	0x08023b6f
 8023b50:	08023b77 	.word	0x08023b77
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8023b54:	6a3b      	ldr	r3, [r7, #32]
 8023b56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8023b58:	68bb      	ldr	r3, [r7, #8]
 8023b5a:	431a      	orrs	r2, r3
 8023b5c:	6a3b      	ldr	r3, [r7, #32]
 8023b5e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8023b60:	e025      	b.n	8023bae <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8023b62:	6a3b      	ldr	r3, [r7, #32]
 8023b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023b66:	1c5a      	adds	r2, r3, #1
 8023b68:	6a3b      	ldr	r3, [r7, #32]
 8023b6a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8023b6c:	e01f      	b.n	8023bae <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8023b6e:	6a3b      	ldr	r3, [r7, #32]
 8023b70:	68ba      	ldr	r2, [r7, #8]
 8023b72:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8023b74:	e01b      	b.n	8023bae <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8023b76:	7ffb      	ldrb	r3, [r7, #31]
 8023b78:	2b02      	cmp	r3, #2
 8023b7a:	d003      	beq.n	8023b84 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8023b7c:	6a3b      	ldr	r3, [r7, #32]
 8023b7e:	68ba      	ldr	r2, [r7, #8]
 8023b80:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8023b82:	e014      	b.n	8023bae <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8023b84:	2300      	movs	r3, #0
 8023b86:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8023b88:	e011      	b.n	8023bae <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8023b8a:	6a3b      	ldr	r3, [r7, #32]
 8023b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023b92:	d00b      	beq.n	8023bac <xTaskGenericNotify+0xcc>
 8023b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023b98:	f383 8811 	msr	BASEPRI, r3
 8023b9c:	f3bf 8f6f 	isb	sy
 8023ba0:	f3bf 8f4f 	dsb	sy
 8023ba4:	617b      	str	r3, [r7, #20]
 8023ba6:	e7fe      	b.n	8023ba6 <xTaskGenericNotify+0xc6>
					break;
 8023ba8:	bf00      	nop
 8023baa:	e000      	b.n	8023bae <xTaskGenericNotify+0xce>

					break;
 8023bac:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8023bae:	7ffb      	ldrb	r3, [r7, #31]
 8023bb0:	2b01      	cmp	r3, #1
 8023bb2:	d139      	bne.n	8023c28 <xTaskGenericNotify+0x148>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8023bb4:	6a3b      	ldr	r3, [r7, #32]
 8023bb6:	3304      	adds	r3, #4
 8023bb8:	4618      	mov	r0, r3
 8023bba:	f7fd fed3 	bl	8021964 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8023bbe:	6a3b      	ldr	r3, [r7, #32]
 8023bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023bc2:	4b1d      	ldr	r3, [pc, #116]	; (8023c38 <xTaskGenericNotify+0x158>)
 8023bc4:	681b      	ldr	r3, [r3, #0]
 8023bc6:	429a      	cmp	r2, r3
 8023bc8:	d903      	bls.n	8023bd2 <xTaskGenericNotify+0xf2>
 8023bca:	6a3b      	ldr	r3, [r7, #32]
 8023bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023bce:	4a1a      	ldr	r2, [pc, #104]	; (8023c38 <xTaskGenericNotify+0x158>)
 8023bd0:	6013      	str	r3, [r2, #0]
 8023bd2:	6a3b      	ldr	r3, [r7, #32]
 8023bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023bd6:	4613      	mov	r3, r2
 8023bd8:	009b      	lsls	r3, r3, #2
 8023bda:	4413      	add	r3, r2
 8023bdc:	009b      	lsls	r3, r3, #2
 8023bde:	4a17      	ldr	r2, [pc, #92]	; (8023c3c <xTaskGenericNotify+0x15c>)
 8023be0:	441a      	add	r2, r3
 8023be2:	6a3b      	ldr	r3, [r7, #32]
 8023be4:	3304      	adds	r3, #4
 8023be6:	4619      	mov	r1, r3
 8023be8:	4610      	mov	r0, r2
 8023bea:	f7fd fe5e 	bl	80218aa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8023bee:	6a3b      	ldr	r3, [r7, #32]
 8023bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023bf2:	2b00      	cmp	r3, #0
 8023bf4:	d009      	beq.n	8023c0a <xTaskGenericNotify+0x12a>
 8023bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023bfa:	f383 8811 	msr	BASEPRI, r3
 8023bfe:	f3bf 8f6f 	isb	sy
 8023c02:	f3bf 8f4f 	dsb	sy
 8023c06:	613b      	str	r3, [r7, #16]
 8023c08:	e7fe      	b.n	8023c08 <xTaskGenericNotify+0x128>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8023c0a:	6a3b      	ldr	r3, [r7, #32]
 8023c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023c0e:	4b0c      	ldr	r3, [pc, #48]	; (8023c40 <xTaskGenericNotify+0x160>)
 8023c10:	681b      	ldr	r3, [r3, #0]
 8023c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023c14:	429a      	cmp	r2, r3
 8023c16:	d907      	bls.n	8023c28 <xTaskGenericNotify+0x148>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8023c18:	4b0a      	ldr	r3, [pc, #40]	; (8023c44 <xTaskGenericNotify+0x164>)
 8023c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8023c1e:	601a      	str	r2, [r3, #0]
 8023c20:	f3bf 8f4f 	dsb	sy
 8023c24:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8023c28:	f000 fdd6 	bl	80247d8 <vPortExitCritical>

		return xReturn;
 8023c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8023c2e:	4618      	mov	r0, r3
 8023c30:	3728      	adds	r7, #40	; 0x28
 8023c32:	46bd      	mov	sp, r7
 8023c34:	bd80      	pop	{r7, pc}
 8023c36:	bf00      	nop
 8023c38:	2000210c 	.word	0x2000210c
 8023c3c:	20001c34 	.word	0x20001c34
 8023c40:	20001c30 	.word	0x20001c30
 8023c44:	e000ed04 	.word	0xe000ed04

08023c48 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8023c48:	b580      	push	{r7, lr}
 8023c4a:	b08e      	sub	sp, #56	; 0x38
 8023c4c:	af00      	add	r7, sp, #0
 8023c4e:	60f8      	str	r0, [r7, #12]
 8023c50:	60b9      	str	r1, [r7, #8]
 8023c52:	603b      	str	r3, [r7, #0]
 8023c54:	4613      	mov	r3, r2
 8023c56:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8023c58:	2301      	movs	r3, #1
 8023c5a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8023c5c:	68fb      	ldr	r3, [r7, #12]
 8023c5e:	2b00      	cmp	r3, #0
 8023c60:	d109      	bne.n	8023c76 <xTaskGenericNotifyFromISR+0x2e>
 8023c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023c66:	f383 8811 	msr	BASEPRI, r3
 8023c6a:	f3bf 8f6f 	isb	sy
 8023c6e:	f3bf 8f4f 	dsb	sy
 8023c72:	627b      	str	r3, [r7, #36]	; 0x24
 8023c74:	e7fe      	b.n	8023c74 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8023c76:	f000 fe5d 	bl	8024934 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8023c7a:	68fb      	ldr	r3, [r7, #12]
 8023c7c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8023c7e:	f3ef 8211 	mrs	r2, BASEPRI
 8023c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023c86:	f383 8811 	msr	BASEPRI, r3
 8023c8a:	f3bf 8f6f 	isb	sy
 8023c8e:	f3bf 8f4f 	dsb	sy
 8023c92:	623a      	str	r2, [r7, #32]
 8023c94:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8023c96:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8023c98:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8023c9a:	683b      	ldr	r3, [r7, #0]
 8023c9c:	2b00      	cmp	r3, #0
 8023c9e:	d003      	beq.n	8023ca8 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8023ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023ca2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8023ca4:	683b      	ldr	r3, [r7, #0]
 8023ca6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8023ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023caa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8023cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8023cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023cb4:	2202      	movs	r2, #2
 8023cb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8023cba:	79fb      	ldrb	r3, [r7, #7]
 8023cbc:	2b04      	cmp	r3, #4
 8023cbe:	d829      	bhi.n	8023d14 <xTaskGenericNotifyFromISR+0xcc>
 8023cc0:	a201      	add	r2, pc, #4	; (adr r2, 8023cc8 <xTaskGenericNotifyFromISR+0x80>)
 8023cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023cc6:	bf00      	nop
 8023cc8:	08023d33 	.word	0x08023d33
 8023ccc:	08023cdd 	.word	0x08023cdd
 8023cd0:	08023ceb 	.word	0x08023ceb
 8023cd4:	08023cf7 	.word	0x08023cf7
 8023cd8:	08023cff 	.word	0x08023cff
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8023cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023cde:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8023ce0:	68bb      	ldr	r3, [r7, #8]
 8023ce2:	431a      	orrs	r2, r3
 8023ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023ce6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8023ce8:	e026      	b.n	8023d38 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8023cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023cee:	1c5a      	adds	r2, r3, #1
 8023cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023cf2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8023cf4:	e020      	b.n	8023d38 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8023cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023cf8:	68ba      	ldr	r2, [r7, #8]
 8023cfa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8023cfc:	e01c      	b.n	8023d38 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8023cfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8023d02:	2b02      	cmp	r3, #2
 8023d04:	d003      	beq.n	8023d0e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8023d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023d08:	68ba      	ldr	r2, [r7, #8]
 8023d0a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8023d0c:	e014      	b.n	8023d38 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8023d0e:	2300      	movs	r3, #0
 8023d10:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8023d12:	e011      	b.n	8023d38 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8023d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023d1c:	d00b      	beq.n	8023d36 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8023d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023d22:	f383 8811 	msr	BASEPRI, r3
 8023d26:	f3bf 8f6f 	isb	sy
 8023d2a:	f3bf 8f4f 	dsb	sy
 8023d2e:	61bb      	str	r3, [r7, #24]
 8023d30:	e7fe      	b.n	8023d30 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8023d32:	bf00      	nop
 8023d34:	e000      	b.n	8023d38 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8023d36:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8023d38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8023d3c:	2b01      	cmp	r3, #1
 8023d3e:	d145      	bne.n	8023dcc <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8023d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023d44:	2b00      	cmp	r3, #0
 8023d46:	d009      	beq.n	8023d5c <xTaskGenericNotifyFromISR+0x114>
 8023d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023d4c:	f383 8811 	msr	BASEPRI, r3
 8023d50:	f3bf 8f6f 	isb	sy
 8023d54:	f3bf 8f4f 	dsb	sy
 8023d58:	617b      	str	r3, [r7, #20]
 8023d5a:	e7fe      	b.n	8023d5a <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8023d5c:	4b20      	ldr	r3, [pc, #128]	; (8023de0 <xTaskGenericNotifyFromISR+0x198>)
 8023d5e:	681b      	ldr	r3, [r3, #0]
 8023d60:	2b00      	cmp	r3, #0
 8023d62:	d11d      	bne.n	8023da0 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8023d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023d66:	3304      	adds	r3, #4
 8023d68:	4618      	mov	r0, r3
 8023d6a:	f7fd fdfb 	bl	8021964 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8023d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023d72:	4b1c      	ldr	r3, [pc, #112]	; (8023de4 <xTaskGenericNotifyFromISR+0x19c>)
 8023d74:	681b      	ldr	r3, [r3, #0]
 8023d76:	429a      	cmp	r2, r3
 8023d78:	d903      	bls.n	8023d82 <xTaskGenericNotifyFromISR+0x13a>
 8023d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023d7e:	4a19      	ldr	r2, [pc, #100]	; (8023de4 <xTaskGenericNotifyFromISR+0x19c>)
 8023d80:	6013      	str	r3, [r2, #0]
 8023d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023d86:	4613      	mov	r3, r2
 8023d88:	009b      	lsls	r3, r3, #2
 8023d8a:	4413      	add	r3, r2
 8023d8c:	009b      	lsls	r3, r3, #2
 8023d8e:	4a16      	ldr	r2, [pc, #88]	; (8023de8 <xTaskGenericNotifyFromISR+0x1a0>)
 8023d90:	441a      	add	r2, r3
 8023d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023d94:	3304      	adds	r3, #4
 8023d96:	4619      	mov	r1, r3
 8023d98:	4610      	mov	r0, r2
 8023d9a:	f7fd fd86 	bl	80218aa <vListInsertEnd>
 8023d9e:	e005      	b.n	8023dac <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8023da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023da2:	3318      	adds	r3, #24
 8023da4:	4619      	mov	r1, r3
 8023da6:	4811      	ldr	r0, [pc, #68]	; (8023dec <xTaskGenericNotifyFromISR+0x1a4>)
 8023da8:	f7fd fd7f 	bl	80218aa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8023dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023db0:	4b0f      	ldr	r3, [pc, #60]	; (8023df0 <xTaskGenericNotifyFromISR+0x1a8>)
 8023db2:	681b      	ldr	r3, [r3, #0]
 8023db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023db6:	429a      	cmp	r2, r3
 8023db8:	d908      	bls.n	8023dcc <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8023dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023dbc:	2b00      	cmp	r3, #0
 8023dbe:	d002      	beq.n	8023dc6 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8023dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023dc2:	2201      	movs	r2, #1
 8023dc4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8023dc6:	4b0b      	ldr	r3, [pc, #44]	; (8023df4 <xTaskGenericNotifyFromISR+0x1ac>)
 8023dc8:	2201      	movs	r2, #1
 8023dca:	601a      	str	r2, [r3, #0]
 8023dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023dce:	613b      	str	r3, [r7, #16]
	__asm volatile
 8023dd0:	693b      	ldr	r3, [r7, #16]
 8023dd2:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8023dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8023dd8:	4618      	mov	r0, r3
 8023dda:	3738      	adds	r7, #56	; 0x38
 8023ddc:	46bd      	mov	sp, r7
 8023dde:	bd80      	pop	{r7, pc}
 8023de0:	2000212c 	.word	0x2000212c
 8023de4:	2000210c 	.word	0x2000210c
 8023de8:	20001c34 	.word	0x20001c34
 8023dec:	200020c4 	.word	0x200020c4
 8023df0:	20001c30 	.word	0x20001c30
 8023df4:	20002118 	.word	0x20002118

08023df8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8023df8:	b580      	push	{r7, lr}
 8023dfa:	b084      	sub	sp, #16
 8023dfc:	af00      	add	r7, sp, #0
 8023dfe:	6078      	str	r0, [r7, #4]
 8023e00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8023e02:	4b21      	ldr	r3, [pc, #132]	; (8023e88 <prvAddCurrentTaskToDelayedList+0x90>)
 8023e04:	681b      	ldr	r3, [r3, #0]
 8023e06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8023e08:	4b20      	ldr	r3, [pc, #128]	; (8023e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8023e0a:	681b      	ldr	r3, [r3, #0]
 8023e0c:	3304      	adds	r3, #4
 8023e0e:	4618      	mov	r0, r3
 8023e10:	f7fd fda8 	bl	8021964 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8023e14:	687b      	ldr	r3, [r7, #4]
 8023e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023e1a:	d10a      	bne.n	8023e32 <prvAddCurrentTaskToDelayedList+0x3a>
 8023e1c:	683b      	ldr	r3, [r7, #0]
 8023e1e:	2b00      	cmp	r3, #0
 8023e20:	d007      	beq.n	8023e32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8023e22:	4b1a      	ldr	r3, [pc, #104]	; (8023e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8023e24:	681b      	ldr	r3, [r3, #0]
 8023e26:	3304      	adds	r3, #4
 8023e28:	4619      	mov	r1, r3
 8023e2a:	4819      	ldr	r0, [pc, #100]	; (8023e90 <prvAddCurrentTaskToDelayedList+0x98>)
 8023e2c:	f7fd fd3d 	bl	80218aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8023e30:	e026      	b.n	8023e80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8023e32:	68fa      	ldr	r2, [r7, #12]
 8023e34:	687b      	ldr	r3, [r7, #4]
 8023e36:	4413      	add	r3, r2
 8023e38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8023e3a:	4b14      	ldr	r3, [pc, #80]	; (8023e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8023e3c:	681b      	ldr	r3, [r3, #0]
 8023e3e:	68ba      	ldr	r2, [r7, #8]
 8023e40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8023e42:	68ba      	ldr	r2, [r7, #8]
 8023e44:	68fb      	ldr	r3, [r7, #12]
 8023e46:	429a      	cmp	r2, r3
 8023e48:	d209      	bcs.n	8023e5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8023e4a:	4b12      	ldr	r3, [pc, #72]	; (8023e94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8023e4c:	681a      	ldr	r2, [r3, #0]
 8023e4e:	4b0f      	ldr	r3, [pc, #60]	; (8023e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8023e50:	681b      	ldr	r3, [r3, #0]
 8023e52:	3304      	adds	r3, #4
 8023e54:	4619      	mov	r1, r3
 8023e56:	4610      	mov	r0, r2
 8023e58:	f7fd fd4b 	bl	80218f2 <vListInsert>
}
 8023e5c:	e010      	b.n	8023e80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8023e5e:	4b0e      	ldr	r3, [pc, #56]	; (8023e98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8023e60:	681a      	ldr	r2, [r3, #0]
 8023e62:	4b0a      	ldr	r3, [pc, #40]	; (8023e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8023e64:	681b      	ldr	r3, [r3, #0]
 8023e66:	3304      	adds	r3, #4
 8023e68:	4619      	mov	r1, r3
 8023e6a:	4610      	mov	r0, r2
 8023e6c:	f7fd fd41 	bl	80218f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8023e70:	4b0a      	ldr	r3, [pc, #40]	; (8023e9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8023e72:	681b      	ldr	r3, [r3, #0]
 8023e74:	68ba      	ldr	r2, [r7, #8]
 8023e76:	429a      	cmp	r2, r3
 8023e78:	d202      	bcs.n	8023e80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8023e7a:	4a08      	ldr	r2, [pc, #32]	; (8023e9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8023e7c:	68bb      	ldr	r3, [r7, #8]
 8023e7e:	6013      	str	r3, [r2, #0]
}
 8023e80:	bf00      	nop
 8023e82:	3710      	adds	r7, #16
 8023e84:	46bd      	mov	sp, r7
 8023e86:	bd80      	pop	{r7, pc}
 8023e88:	20002108 	.word	0x20002108
 8023e8c:	20001c30 	.word	0x20001c30
 8023e90:	200020f0 	.word	0x200020f0
 8023e94:	200020c0 	.word	0x200020c0
 8023e98:	200020bc 	.word	0x200020bc
 8023e9c:	20002124 	.word	0x20002124

08023ea0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8023ea0:	b580      	push	{r7, lr}
 8023ea2:	b08a      	sub	sp, #40	; 0x28
 8023ea4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8023ea6:	2300      	movs	r3, #0
 8023ea8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8023eaa:	f000 faff 	bl	80244ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8023eae:	4b1c      	ldr	r3, [pc, #112]	; (8023f20 <xTimerCreateTimerTask+0x80>)
 8023eb0:	681b      	ldr	r3, [r3, #0]
 8023eb2:	2b00      	cmp	r3, #0
 8023eb4:	d021      	beq.n	8023efa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8023eb6:	2300      	movs	r3, #0
 8023eb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8023eba:	2300      	movs	r3, #0
 8023ebc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8023ebe:	1d3a      	adds	r2, r7, #4
 8023ec0:	f107 0108 	add.w	r1, r7, #8
 8023ec4:	f107 030c 	add.w	r3, r7, #12
 8023ec8:	4618      	mov	r0, r3
 8023eca:	f7fd fca7 	bl	802181c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8023ece:	6879      	ldr	r1, [r7, #4]
 8023ed0:	68bb      	ldr	r3, [r7, #8]
 8023ed2:	68fa      	ldr	r2, [r7, #12]
 8023ed4:	9202      	str	r2, [sp, #8]
 8023ed6:	9301      	str	r3, [sp, #4]
 8023ed8:	2332      	movs	r3, #50	; 0x32
 8023eda:	9300      	str	r3, [sp, #0]
 8023edc:	2300      	movs	r3, #0
 8023ede:	460a      	mov	r2, r1
 8023ee0:	4910      	ldr	r1, [pc, #64]	; (8023f24 <xTimerCreateTimerTask+0x84>)
 8023ee2:	4811      	ldr	r0, [pc, #68]	; (8023f28 <xTimerCreateTimerTask+0x88>)
 8023ee4:	f7fe fd78 	bl	80229d8 <xTaskCreateStatic>
 8023ee8:	4602      	mov	r2, r0
 8023eea:	4b10      	ldr	r3, [pc, #64]	; (8023f2c <xTimerCreateTimerTask+0x8c>)
 8023eec:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8023eee:	4b0f      	ldr	r3, [pc, #60]	; (8023f2c <xTimerCreateTimerTask+0x8c>)
 8023ef0:	681b      	ldr	r3, [r3, #0]
 8023ef2:	2b00      	cmp	r3, #0
 8023ef4:	d001      	beq.n	8023efa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8023ef6:	2301      	movs	r3, #1
 8023ef8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8023efa:	697b      	ldr	r3, [r7, #20]
 8023efc:	2b00      	cmp	r3, #0
 8023efe:	d109      	bne.n	8023f14 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8023f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023f04:	f383 8811 	msr	BASEPRI, r3
 8023f08:	f3bf 8f6f 	isb	sy
 8023f0c:	f3bf 8f4f 	dsb	sy
 8023f10:	613b      	str	r3, [r7, #16]
 8023f12:	e7fe      	b.n	8023f12 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8023f14:	697b      	ldr	r3, [r7, #20]
}
 8023f16:	4618      	mov	r0, r3
 8023f18:	3718      	adds	r7, #24
 8023f1a:	46bd      	mov	sp, r7
 8023f1c:	bd80      	pop	{r7, pc}
 8023f1e:	bf00      	nop
 8023f20:	20002160 	.word	0x20002160
 8023f24:	0802d078 	.word	0x0802d078
 8023f28:	08024061 	.word	0x08024061
 8023f2c:	20002164 	.word	0x20002164

08023f30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8023f30:	b580      	push	{r7, lr}
 8023f32:	b08a      	sub	sp, #40	; 0x28
 8023f34:	af00      	add	r7, sp, #0
 8023f36:	60f8      	str	r0, [r7, #12]
 8023f38:	60b9      	str	r1, [r7, #8]
 8023f3a:	607a      	str	r2, [r7, #4]
 8023f3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8023f3e:	2300      	movs	r3, #0
 8023f40:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8023f42:	68fb      	ldr	r3, [r7, #12]
 8023f44:	2b00      	cmp	r3, #0
 8023f46:	d109      	bne.n	8023f5c <xTimerGenericCommand+0x2c>
 8023f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023f4c:	f383 8811 	msr	BASEPRI, r3
 8023f50:	f3bf 8f6f 	isb	sy
 8023f54:	f3bf 8f4f 	dsb	sy
 8023f58:	623b      	str	r3, [r7, #32]
 8023f5a:	e7fe      	b.n	8023f5a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8023f5c:	4b19      	ldr	r3, [pc, #100]	; (8023fc4 <xTimerGenericCommand+0x94>)
 8023f5e:	681b      	ldr	r3, [r3, #0]
 8023f60:	2b00      	cmp	r3, #0
 8023f62:	d02a      	beq.n	8023fba <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8023f64:	68bb      	ldr	r3, [r7, #8]
 8023f66:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8023f68:	687b      	ldr	r3, [r7, #4]
 8023f6a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8023f6c:	68fb      	ldr	r3, [r7, #12]
 8023f6e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8023f70:	68bb      	ldr	r3, [r7, #8]
 8023f72:	2b05      	cmp	r3, #5
 8023f74:	dc18      	bgt.n	8023fa8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8023f76:	f7ff fbd3 	bl	8023720 <xTaskGetSchedulerState>
 8023f7a:	4603      	mov	r3, r0
 8023f7c:	2b02      	cmp	r3, #2
 8023f7e:	d109      	bne.n	8023f94 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8023f80:	4b10      	ldr	r3, [pc, #64]	; (8023fc4 <xTimerGenericCommand+0x94>)
 8023f82:	6818      	ldr	r0, [r3, #0]
 8023f84:	f107 0110 	add.w	r1, r7, #16
 8023f88:	2300      	movs	r3, #0
 8023f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023f8c:	f7fd feb8 	bl	8021d00 <xQueueGenericSend>
 8023f90:	6278      	str	r0, [r7, #36]	; 0x24
 8023f92:	e012      	b.n	8023fba <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8023f94:	4b0b      	ldr	r3, [pc, #44]	; (8023fc4 <xTimerGenericCommand+0x94>)
 8023f96:	6818      	ldr	r0, [r3, #0]
 8023f98:	f107 0110 	add.w	r1, r7, #16
 8023f9c:	2300      	movs	r3, #0
 8023f9e:	2200      	movs	r2, #0
 8023fa0:	f7fd feae 	bl	8021d00 <xQueueGenericSend>
 8023fa4:	6278      	str	r0, [r7, #36]	; 0x24
 8023fa6:	e008      	b.n	8023fba <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8023fa8:	4b06      	ldr	r3, [pc, #24]	; (8023fc4 <xTimerGenericCommand+0x94>)
 8023faa:	6818      	ldr	r0, [r3, #0]
 8023fac:	f107 0110 	add.w	r1, r7, #16
 8023fb0:	2300      	movs	r3, #0
 8023fb2:	683a      	ldr	r2, [r7, #0]
 8023fb4:	f7fd ff9e 	bl	8021ef4 <xQueueGenericSendFromISR>
 8023fb8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8023fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8023fbc:	4618      	mov	r0, r3
 8023fbe:	3728      	adds	r7, #40	; 0x28
 8023fc0:	46bd      	mov	sp, r7
 8023fc2:	bd80      	pop	{r7, pc}
 8023fc4:	20002160 	.word	0x20002160

08023fc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8023fc8:	b580      	push	{r7, lr}
 8023fca:	b088      	sub	sp, #32
 8023fcc:	af02      	add	r7, sp, #8
 8023fce:	6078      	str	r0, [r7, #4]
 8023fd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8023fd2:	4b22      	ldr	r3, [pc, #136]	; (802405c <prvProcessExpiredTimer+0x94>)
 8023fd4:	681b      	ldr	r3, [r3, #0]
 8023fd6:	68db      	ldr	r3, [r3, #12]
 8023fd8:	68db      	ldr	r3, [r3, #12]
 8023fda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8023fdc:	697b      	ldr	r3, [r7, #20]
 8023fde:	3304      	adds	r3, #4
 8023fe0:	4618      	mov	r0, r3
 8023fe2:	f7fd fcbf 	bl	8021964 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8023fe6:	697b      	ldr	r3, [r7, #20]
 8023fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8023fec:	f003 0304 	and.w	r3, r3, #4
 8023ff0:	2b00      	cmp	r3, #0
 8023ff2:	d021      	beq.n	8024038 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8023ff4:	697b      	ldr	r3, [r7, #20]
 8023ff6:	699a      	ldr	r2, [r3, #24]
 8023ff8:	687b      	ldr	r3, [r7, #4]
 8023ffa:	18d1      	adds	r1, r2, r3
 8023ffc:	687b      	ldr	r3, [r7, #4]
 8023ffe:	683a      	ldr	r2, [r7, #0]
 8024000:	6978      	ldr	r0, [r7, #20]
 8024002:	f000 f8d1 	bl	80241a8 <prvInsertTimerInActiveList>
 8024006:	4603      	mov	r3, r0
 8024008:	2b00      	cmp	r3, #0
 802400a:	d01e      	beq.n	802404a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 802400c:	2300      	movs	r3, #0
 802400e:	9300      	str	r3, [sp, #0]
 8024010:	2300      	movs	r3, #0
 8024012:	687a      	ldr	r2, [r7, #4]
 8024014:	2100      	movs	r1, #0
 8024016:	6978      	ldr	r0, [r7, #20]
 8024018:	f7ff ff8a 	bl	8023f30 <xTimerGenericCommand>
 802401c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 802401e:	693b      	ldr	r3, [r7, #16]
 8024020:	2b00      	cmp	r3, #0
 8024022:	d112      	bne.n	802404a <prvProcessExpiredTimer+0x82>
 8024024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024028:	f383 8811 	msr	BASEPRI, r3
 802402c:	f3bf 8f6f 	isb	sy
 8024030:	f3bf 8f4f 	dsb	sy
 8024034:	60fb      	str	r3, [r7, #12]
 8024036:	e7fe      	b.n	8024036 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8024038:	697b      	ldr	r3, [r7, #20]
 802403a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802403e:	f023 0301 	bic.w	r3, r3, #1
 8024042:	b2da      	uxtb	r2, r3
 8024044:	697b      	ldr	r3, [r7, #20]
 8024046:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802404a:	697b      	ldr	r3, [r7, #20]
 802404c:	6a1b      	ldr	r3, [r3, #32]
 802404e:	6978      	ldr	r0, [r7, #20]
 8024050:	4798      	blx	r3
}
 8024052:	bf00      	nop
 8024054:	3718      	adds	r7, #24
 8024056:	46bd      	mov	sp, r7
 8024058:	bd80      	pop	{r7, pc}
 802405a:	bf00      	nop
 802405c:	20002158 	.word	0x20002158

08024060 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8024060:	b580      	push	{r7, lr}
 8024062:	b084      	sub	sp, #16
 8024064:	af00      	add	r7, sp, #0
 8024066:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8024068:	f107 0308 	add.w	r3, r7, #8
 802406c:	4618      	mov	r0, r3
 802406e:	f000 f857 	bl	8024120 <prvGetNextExpireTime>
 8024072:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8024074:	68bb      	ldr	r3, [r7, #8]
 8024076:	4619      	mov	r1, r3
 8024078:	68f8      	ldr	r0, [r7, #12]
 802407a:	f000 f803 	bl	8024084 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 802407e:	f000 f8d5 	bl	802422c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8024082:	e7f1      	b.n	8024068 <prvTimerTask+0x8>

08024084 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8024084:	b580      	push	{r7, lr}
 8024086:	b084      	sub	sp, #16
 8024088:	af00      	add	r7, sp, #0
 802408a:	6078      	str	r0, [r7, #4]
 802408c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 802408e:	f7fe ff53 	bl	8022f38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8024092:	f107 0308 	add.w	r3, r7, #8
 8024096:	4618      	mov	r0, r3
 8024098:	f000 f866 	bl	8024168 <prvSampleTimeNow>
 802409c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 802409e:	68bb      	ldr	r3, [r7, #8]
 80240a0:	2b00      	cmp	r3, #0
 80240a2:	d130      	bne.n	8024106 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80240a4:	683b      	ldr	r3, [r7, #0]
 80240a6:	2b00      	cmp	r3, #0
 80240a8:	d10a      	bne.n	80240c0 <prvProcessTimerOrBlockTask+0x3c>
 80240aa:	687a      	ldr	r2, [r7, #4]
 80240ac:	68fb      	ldr	r3, [r7, #12]
 80240ae:	429a      	cmp	r2, r3
 80240b0:	d806      	bhi.n	80240c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80240b2:	f7fe ff4f 	bl	8022f54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80240b6:	68f9      	ldr	r1, [r7, #12]
 80240b8:	6878      	ldr	r0, [r7, #4]
 80240ba:	f7ff ff85 	bl	8023fc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80240be:	e024      	b.n	802410a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80240c0:	683b      	ldr	r3, [r7, #0]
 80240c2:	2b00      	cmp	r3, #0
 80240c4:	d008      	beq.n	80240d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80240c6:	4b13      	ldr	r3, [pc, #76]	; (8024114 <prvProcessTimerOrBlockTask+0x90>)
 80240c8:	681b      	ldr	r3, [r3, #0]
 80240ca:	681b      	ldr	r3, [r3, #0]
 80240cc:	2b00      	cmp	r3, #0
 80240ce:	d101      	bne.n	80240d4 <prvProcessTimerOrBlockTask+0x50>
 80240d0:	2301      	movs	r3, #1
 80240d2:	e000      	b.n	80240d6 <prvProcessTimerOrBlockTask+0x52>
 80240d4:	2300      	movs	r3, #0
 80240d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80240d8:	4b0f      	ldr	r3, [pc, #60]	; (8024118 <prvProcessTimerOrBlockTask+0x94>)
 80240da:	6818      	ldr	r0, [r3, #0]
 80240dc:	687a      	ldr	r2, [r7, #4]
 80240de:	68fb      	ldr	r3, [r7, #12]
 80240e0:	1ad3      	subs	r3, r2, r3
 80240e2:	683a      	ldr	r2, [r7, #0]
 80240e4:	4619      	mov	r1, r3
 80240e6:	f7fe fc43 	bl	8022970 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80240ea:	f7fe ff33 	bl	8022f54 <xTaskResumeAll>
 80240ee:	4603      	mov	r3, r0
 80240f0:	2b00      	cmp	r3, #0
 80240f2:	d10a      	bne.n	802410a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80240f4:	4b09      	ldr	r3, [pc, #36]	; (802411c <prvProcessTimerOrBlockTask+0x98>)
 80240f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80240fa:	601a      	str	r2, [r3, #0]
 80240fc:	f3bf 8f4f 	dsb	sy
 8024100:	f3bf 8f6f 	isb	sy
}
 8024104:	e001      	b.n	802410a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8024106:	f7fe ff25 	bl	8022f54 <xTaskResumeAll>
}
 802410a:	bf00      	nop
 802410c:	3710      	adds	r7, #16
 802410e:	46bd      	mov	sp, r7
 8024110:	bd80      	pop	{r7, pc}
 8024112:	bf00      	nop
 8024114:	2000215c 	.word	0x2000215c
 8024118:	20002160 	.word	0x20002160
 802411c:	e000ed04 	.word	0xe000ed04

08024120 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8024120:	b480      	push	{r7}
 8024122:	b085      	sub	sp, #20
 8024124:	af00      	add	r7, sp, #0
 8024126:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8024128:	4b0e      	ldr	r3, [pc, #56]	; (8024164 <prvGetNextExpireTime+0x44>)
 802412a:	681b      	ldr	r3, [r3, #0]
 802412c:	681b      	ldr	r3, [r3, #0]
 802412e:	2b00      	cmp	r3, #0
 8024130:	d101      	bne.n	8024136 <prvGetNextExpireTime+0x16>
 8024132:	2201      	movs	r2, #1
 8024134:	e000      	b.n	8024138 <prvGetNextExpireTime+0x18>
 8024136:	2200      	movs	r2, #0
 8024138:	687b      	ldr	r3, [r7, #4]
 802413a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 802413c:	687b      	ldr	r3, [r7, #4]
 802413e:	681b      	ldr	r3, [r3, #0]
 8024140:	2b00      	cmp	r3, #0
 8024142:	d105      	bne.n	8024150 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8024144:	4b07      	ldr	r3, [pc, #28]	; (8024164 <prvGetNextExpireTime+0x44>)
 8024146:	681b      	ldr	r3, [r3, #0]
 8024148:	68db      	ldr	r3, [r3, #12]
 802414a:	681b      	ldr	r3, [r3, #0]
 802414c:	60fb      	str	r3, [r7, #12]
 802414e:	e001      	b.n	8024154 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8024150:	2300      	movs	r3, #0
 8024152:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8024154:	68fb      	ldr	r3, [r7, #12]
}
 8024156:	4618      	mov	r0, r3
 8024158:	3714      	adds	r7, #20
 802415a:	46bd      	mov	sp, r7
 802415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024160:	4770      	bx	lr
 8024162:	bf00      	nop
 8024164:	20002158 	.word	0x20002158

08024168 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8024168:	b580      	push	{r7, lr}
 802416a:	b084      	sub	sp, #16
 802416c:	af00      	add	r7, sp, #0
 802416e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8024170:	f7fe ff8c 	bl	802308c <xTaskGetTickCount>
 8024174:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8024176:	4b0b      	ldr	r3, [pc, #44]	; (80241a4 <prvSampleTimeNow+0x3c>)
 8024178:	681b      	ldr	r3, [r3, #0]
 802417a:	68fa      	ldr	r2, [r7, #12]
 802417c:	429a      	cmp	r2, r3
 802417e:	d205      	bcs.n	802418c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8024180:	f000 f930 	bl	80243e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8024184:	687b      	ldr	r3, [r7, #4]
 8024186:	2201      	movs	r2, #1
 8024188:	601a      	str	r2, [r3, #0]
 802418a:	e002      	b.n	8024192 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 802418c:	687b      	ldr	r3, [r7, #4]
 802418e:	2200      	movs	r2, #0
 8024190:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8024192:	4a04      	ldr	r2, [pc, #16]	; (80241a4 <prvSampleTimeNow+0x3c>)
 8024194:	68fb      	ldr	r3, [r7, #12]
 8024196:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8024198:	68fb      	ldr	r3, [r7, #12]
}
 802419a:	4618      	mov	r0, r3
 802419c:	3710      	adds	r7, #16
 802419e:	46bd      	mov	sp, r7
 80241a0:	bd80      	pop	{r7, pc}
 80241a2:	bf00      	nop
 80241a4:	20002168 	.word	0x20002168

080241a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80241a8:	b580      	push	{r7, lr}
 80241aa:	b086      	sub	sp, #24
 80241ac:	af00      	add	r7, sp, #0
 80241ae:	60f8      	str	r0, [r7, #12]
 80241b0:	60b9      	str	r1, [r7, #8]
 80241b2:	607a      	str	r2, [r7, #4]
 80241b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80241b6:	2300      	movs	r3, #0
 80241b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80241ba:	68fb      	ldr	r3, [r7, #12]
 80241bc:	68ba      	ldr	r2, [r7, #8]
 80241be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80241c0:	68fb      	ldr	r3, [r7, #12]
 80241c2:	68fa      	ldr	r2, [r7, #12]
 80241c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80241c6:	68ba      	ldr	r2, [r7, #8]
 80241c8:	687b      	ldr	r3, [r7, #4]
 80241ca:	429a      	cmp	r2, r3
 80241cc:	d812      	bhi.n	80241f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80241ce:	687a      	ldr	r2, [r7, #4]
 80241d0:	683b      	ldr	r3, [r7, #0]
 80241d2:	1ad2      	subs	r2, r2, r3
 80241d4:	68fb      	ldr	r3, [r7, #12]
 80241d6:	699b      	ldr	r3, [r3, #24]
 80241d8:	429a      	cmp	r2, r3
 80241da:	d302      	bcc.n	80241e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80241dc:	2301      	movs	r3, #1
 80241de:	617b      	str	r3, [r7, #20]
 80241e0:	e01b      	b.n	802421a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80241e2:	4b10      	ldr	r3, [pc, #64]	; (8024224 <prvInsertTimerInActiveList+0x7c>)
 80241e4:	681a      	ldr	r2, [r3, #0]
 80241e6:	68fb      	ldr	r3, [r7, #12]
 80241e8:	3304      	adds	r3, #4
 80241ea:	4619      	mov	r1, r3
 80241ec:	4610      	mov	r0, r2
 80241ee:	f7fd fb80 	bl	80218f2 <vListInsert>
 80241f2:	e012      	b.n	802421a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80241f4:	687a      	ldr	r2, [r7, #4]
 80241f6:	683b      	ldr	r3, [r7, #0]
 80241f8:	429a      	cmp	r2, r3
 80241fa:	d206      	bcs.n	802420a <prvInsertTimerInActiveList+0x62>
 80241fc:	68ba      	ldr	r2, [r7, #8]
 80241fe:	683b      	ldr	r3, [r7, #0]
 8024200:	429a      	cmp	r2, r3
 8024202:	d302      	bcc.n	802420a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8024204:	2301      	movs	r3, #1
 8024206:	617b      	str	r3, [r7, #20]
 8024208:	e007      	b.n	802421a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802420a:	4b07      	ldr	r3, [pc, #28]	; (8024228 <prvInsertTimerInActiveList+0x80>)
 802420c:	681a      	ldr	r2, [r3, #0]
 802420e:	68fb      	ldr	r3, [r7, #12]
 8024210:	3304      	adds	r3, #4
 8024212:	4619      	mov	r1, r3
 8024214:	4610      	mov	r0, r2
 8024216:	f7fd fb6c 	bl	80218f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 802421a:	697b      	ldr	r3, [r7, #20]
}
 802421c:	4618      	mov	r0, r3
 802421e:	3718      	adds	r7, #24
 8024220:	46bd      	mov	sp, r7
 8024222:	bd80      	pop	{r7, pc}
 8024224:	2000215c 	.word	0x2000215c
 8024228:	20002158 	.word	0x20002158

0802422c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 802422c:	b580      	push	{r7, lr}
 802422e:	b08e      	sub	sp, #56	; 0x38
 8024230:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8024232:	e0c6      	b.n	80243c2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8024234:	687b      	ldr	r3, [r7, #4]
 8024236:	2b00      	cmp	r3, #0
 8024238:	da17      	bge.n	802426a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 802423a:	1d3b      	adds	r3, r7, #4
 802423c:	3304      	adds	r3, #4
 802423e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8024240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024242:	2b00      	cmp	r3, #0
 8024244:	d109      	bne.n	802425a <prvProcessReceivedCommands+0x2e>
 8024246:	f04f 0350 	mov.w	r3, #80	; 0x50
 802424a:	f383 8811 	msr	BASEPRI, r3
 802424e:	f3bf 8f6f 	isb	sy
 8024252:	f3bf 8f4f 	dsb	sy
 8024256:	61fb      	str	r3, [r7, #28]
 8024258:	e7fe      	b.n	8024258 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 802425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802425c:	681b      	ldr	r3, [r3, #0]
 802425e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024260:	6850      	ldr	r0, [r2, #4]
 8024262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024264:	6892      	ldr	r2, [r2, #8]
 8024266:	4611      	mov	r1, r2
 8024268:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 802426a:	687b      	ldr	r3, [r7, #4]
 802426c:	2b00      	cmp	r3, #0
 802426e:	f2c0 80a7 	blt.w	80243c0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8024272:	68fb      	ldr	r3, [r7, #12]
 8024274:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8024276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024278:	695b      	ldr	r3, [r3, #20]
 802427a:	2b00      	cmp	r3, #0
 802427c:	d004      	beq.n	8024288 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024280:	3304      	adds	r3, #4
 8024282:	4618      	mov	r0, r3
 8024284:	f7fd fb6e 	bl	8021964 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8024288:	463b      	mov	r3, r7
 802428a:	4618      	mov	r0, r3
 802428c:	f7ff ff6c 	bl	8024168 <prvSampleTimeNow>
 8024290:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8024292:	687b      	ldr	r3, [r7, #4]
 8024294:	2b09      	cmp	r3, #9
 8024296:	f200 8094 	bhi.w	80243c2 <prvProcessReceivedCommands+0x196>
 802429a:	a201      	add	r2, pc, #4	; (adr r2, 80242a0 <prvProcessReceivedCommands+0x74>)
 802429c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80242a0:	080242c9 	.word	0x080242c9
 80242a4:	080242c9 	.word	0x080242c9
 80242a8:	080242c9 	.word	0x080242c9
 80242ac:	0802433b 	.word	0x0802433b
 80242b0:	0802434f 	.word	0x0802434f
 80242b4:	08024397 	.word	0x08024397
 80242b8:	080242c9 	.word	0x080242c9
 80242bc:	080242c9 	.word	0x080242c9
 80242c0:	0802433b 	.word	0x0802433b
 80242c4:	0802434f 	.word	0x0802434f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80242c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80242ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80242ce:	f043 0301 	orr.w	r3, r3, #1
 80242d2:	b2da      	uxtb	r2, r3
 80242d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80242d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80242da:	68ba      	ldr	r2, [r7, #8]
 80242dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80242de:	699b      	ldr	r3, [r3, #24]
 80242e0:	18d1      	adds	r1, r2, r3
 80242e2:	68bb      	ldr	r3, [r7, #8]
 80242e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80242e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80242e8:	f7ff ff5e 	bl	80241a8 <prvInsertTimerInActiveList>
 80242ec:	4603      	mov	r3, r0
 80242ee:	2b00      	cmp	r3, #0
 80242f0:	d067      	beq.n	80243c2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80242f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80242f4:	6a1b      	ldr	r3, [r3, #32]
 80242f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80242f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80242fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80242fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8024300:	f003 0304 	and.w	r3, r3, #4
 8024304:	2b00      	cmp	r3, #0
 8024306:	d05c      	beq.n	80243c2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8024308:	68ba      	ldr	r2, [r7, #8]
 802430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802430c:	699b      	ldr	r3, [r3, #24]
 802430e:	441a      	add	r2, r3
 8024310:	2300      	movs	r3, #0
 8024312:	9300      	str	r3, [sp, #0]
 8024314:	2300      	movs	r3, #0
 8024316:	2100      	movs	r1, #0
 8024318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802431a:	f7ff fe09 	bl	8023f30 <xTimerGenericCommand>
 802431e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8024320:	6a3b      	ldr	r3, [r7, #32]
 8024322:	2b00      	cmp	r3, #0
 8024324:	d14d      	bne.n	80243c2 <prvProcessReceivedCommands+0x196>
 8024326:	f04f 0350 	mov.w	r3, #80	; 0x50
 802432a:	f383 8811 	msr	BASEPRI, r3
 802432e:	f3bf 8f6f 	isb	sy
 8024332:	f3bf 8f4f 	dsb	sy
 8024336:	61bb      	str	r3, [r7, #24]
 8024338:	e7fe      	b.n	8024338 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802433c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8024340:	f023 0301 	bic.w	r3, r3, #1
 8024344:	b2da      	uxtb	r2, r3
 8024346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024348:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 802434c:	e039      	b.n	80243c2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8024354:	f043 0301 	orr.w	r3, r3, #1
 8024358:	b2da      	uxtb	r2, r3
 802435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802435c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8024360:	68ba      	ldr	r2, [r7, #8]
 8024362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024364:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8024366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024368:	699b      	ldr	r3, [r3, #24]
 802436a:	2b00      	cmp	r3, #0
 802436c:	d109      	bne.n	8024382 <prvProcessReceivedCommands+0x156>
 802436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024372:	f383 8811 	msr	BASEPRI, r3
 8024376:	f3bf 8f6f 	isb	sy
 802437a:	f3bf 8f4f 	dsb	sy
 802437e:	617b      	str	r3, [r7, #20]
 8024380:	e7fe      	b.n	8024380 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8024382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024384:	699a      	ldr	r2, [r3, #24]
 8024386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024388:	18d1      	adds	r1, r2, r3
 802438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802438c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802438e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024390:	f7ff ff0a 	bl	80241a8 <prvInsertTimerInActiveList>
					break;
 8024394:	e015      	b.n	80243c2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8024396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802439c:	f003 0302 	and.w	r3, r3, #2
 80243a0:	2b00      	cmp	r3, #0
 80243a2:	d103      	bne.n	80243ac <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80243a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80243a6:	f000 fbc5 	bl	8024b34 <vPortFree>
 80243aa:	e00a      	b.n	80243c2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80243ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80243ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80243b2:	f023 0301 	bic.w	r3, r3, #1
 80243b6:	b2da      	uxtb	r2, r3
 80243b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80243ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80243be:	e000      	b.n	80243c2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80243c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80243c2:	4b07      	ldr	r3, [pc, #28]	; (80243e0 <prvProcessReceivedCommands+0x1b4>)
 80243c4:	681b      	ldr	r3, [r3, #0]
 80243c6:	1d39      	adds	r1, r7, #4
 80243c8:	2200      	movs	r2, #0
 80243ca:	4618      	mov	r0, r3
 80243cc:	f7fd feb0 	bl	8022130 <xQueueReceive>
 80243d0:	4603      	mov	r3, r0
 80243d2:	2b00      	cmp	r3, #0
 80243d4:	f47f af2e 	bne.w	8024234 <prvProcessReceivedCommands+0x8>
	}
}
 80243d8:	bf00      	nop
 80243da:	3730      	adds	r7, #48	; 0x30
 80243dc:	46bd      	mov	sp, r7
 80243de:	bd80      	pop	{r7, pc}
 80243e0:	20002160 	.word	0x20002160

080243e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80243e4:	b580      	push	{r7, lr}
 80243e6:	b088      	sub	sp, #32
 80243e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80243ea:	e047      	b.n	802447c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80243ec:	4b2d      	ldr	r3, [pc, #180]	; (80244a4 <prvSwitchTimerLists+0xc0>)
 80243ee:	681b      	ldr	r3, [r3, #0]
 80243f0:	68db      	ldr	r3, [r3, #12]
 80243f2:	681b      	ldr	r3, [r3, #0]
 80243f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80243f6:	4b2b      	ldr	r3, [pc, #172]	; (80244a4 <prvSwitchTimerLists+0xc0>)
 80243f8:	681b      	ldr	r3, [r3, #0]
 80243fa:	68db      	ldr	r3, [r3, #12]
 80243fc:	68db      	ldr	r3, [r3, #12]
 80243fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8024400:	68fb      	ldr	r3, [r7, #12]
 8024402:	3304      	adds	r3, #4
 8024404:	4618      	mov	r0, r3
 8024406:	f7fd faad 	bl	8021964 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802440a:	68fb      	ldr	r3, [r7, #12]
 802440c:	6a1b      	ldr	r3, [r3, #32]
 802440e:	68f8      	ldr	r0, [r7, #12]
 8024410:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8024412:	68fb      	ldr	r3, [r7, #12]
 8024414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8024418:	f003 0304 	and.w	r3, r3, #4
 802441c:	2b00      	cmp	r3, #0
 802441e:	d02d      	beq.n	802447c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8024420:	68fb      	ldr	r3, [r7, #12]
 8024422:	699b      	ldr	r3, [r3, #24]
 8024424:	693a      	ldr	r2, [r7, #16]
 8024426:	4413      	add	r3, r2
 8024428:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 802442a:	68ba      	ldr	r2, [r7, #8]
 802442c:	693b      	ldr	r3, [r7, #16]
 802442e:	429a      	cmp	r2, r3
 8024430:	d90e      	bls.n	8024450 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8024432:	68fb      	ldr	r3, [r7, #12]
 8024434:	68ba      	ldr	r2, [r7, #8]
 8024436:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8024438:	68fb      	ldr	r3, [r7, #12]
 802443a:	68fa      	ldr	r2, [r7, #12]
 802443c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802443e:	4b19      	ldr	r3, [pc, #100]	; (80244a4 <prvSwitchTimerLists+0xc0>)
 8024440:	681a      	ldr	r2, [r3, #0]
 8024442:	68fb      	ldr	r3, [r7, #12]
 8024444:	3304      	adds	r3, #4
 8024446:	4619      	mov	r1, r3
 8024448:	4610      	mov	r0, r2
 802444a:	f7fd fa52 	bl	80218f2 <vListInsert>
 802444e:	e015      	b.n	802447c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8024450:	2300      	movs	r3, #0
 8024452:	9300      	str	r3, [sp, #0]
 8024454:	2300      	movs	r3, #0
 8024456:	693a      	ldr	r2, [r7, #16]
 8024458:	2100      	movs	r1, #0
 802445a:	68f8      	ldr	r0, [r7, #12]
 802445c:	f7ff fd68 	bl	8023f30 <xTimerGenericCommand>
 8024460:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8024462:	687b      	ldr	r3, [r7, #4]
 8024464:	2b00      	cmp	r3, #0
 8024466:	d109      	bne.n	802447c <prvSwitchTimerLists+0x98>
 8024468:	f04f 0350 	mov.w	r3, #80	; 0x50
 802446c:	f383 8811 	msr	BASEPRI, r3
 8024470:	f3bf 8f6f 	isb	sy
 8024474:	f3bf 8f4f 	dsb	sy
 8024478:	603b      	str	r3, [r7, #0]
 802447a:	e7fe      	b.n	802447a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802447c:	4b09      	ldr	r3, [pc, #36]	; (80244a4 <prvSwitchTimerLists+0xc0>)
 802447e:	681b      	ldr	r3, [r3, #0]
 8024480:	681b      	ldr	r3, [r3, #0]
 8024482:	2b00      	cmp	r3, #0
 8024484:	d1b2      	bne.n	80243ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8024486:	4b07      	ldr	r3, [pc, #28]	; (80244a4 <prvSwitchTimerLists+0xc0>)
 8024488:	681b      	ldr	r3, [r3, #0]
 802448a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 802448c:	4b06      	ldr	r3, [pc, #24]	; (80244a8 <prvSwitchTimerLists+0xc4>)
 802448e:	681b      	ldr	r3, [r3, #0]
 8024490:	4a04      	ldr	r2, [pc, #16]	; (80244a4 <prvSwitchTimerLists+0xc0>)
 8024492:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8024494:	4a04      	ldr	r2, [pc, #16]	; (80244a8 <prvSwitchTimerLists+0xc4>)
 8024496:	697b      	ldr	r3, [r7, #20]
 8024498:	6013      	str	r3, [r2, #0]
}
 802449a:	bf00      	nop
 802449c:	3718      	adds	r7, #24
 802449e:	46bd      	mov	sp, r7
 80244a0:	bd80      	pop	{r7, pc}
 80244a2:	bf00      	nop
 80244a4:	20002158 	.word	0x20002158
 80244a8:	2000215c 	.word	0x2000215c

080244ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80244ac:	b580      	push	{r7, lr}
 80244ae:	b082      	sub	sp, #8
 80244b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80244b2:	f000 f963 	bl	802477c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80244b6:	4b15      	ldr	r3, [pc, #84]	; (802450c <prvCheckForValidListAndQueue+0x60>)
 80244b8:	681b      	ldr	r3, [r3, #0]
 80244ba:	2b00      	cmp	r3, #0
 80244bc:	d120      	bne.n	8024500 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80244be:	4814      	ldr	r0, [pc, #80]	; (8024510 <prvCheckForValidListAndQueue+0x64>)
 80244c0:	f7fd f9c6 	bl	8021850 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80244c4:	4813      	ldr	r0, [pc, #76]	; (8024514 <prvCheckForValidListAndQueue+0x68>)
 80244c6:	f7fd f9c3 	bl	8021850 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80244ca:	4b13      	ldr	r3, [pc, #76]	; (8024518 <prvCheckForValidListAndQueue+0x6c>)
 80244cc:	4a10      	ldr	r2, [pc, #64]	; (8024510 <prvCheckForValidListAndQueue+0x64>)
 80244ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80244d0:	4b12      	ldr	r3, [pc, #72]	; (802451c <prvCheckForValidListAndQueue+0x70>)
 80244d2:	4a10      	ldr	r2, [pc, #64]	; (8024514 <prvCheckForValidListAndQueue+0x68>)
 80244d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80244d6:	2300      	movs	r3, #0
 80244d8:	9300      	str	r3, [sp, #0]
 80244da:	4b11      	ldr	r3, [pc, #68]	; (8024520 <prvCheckForValidListAndQueue+0x74>)
 80244dc:	4a11      	ldr	r2, [pc, #68]	; (8024524 <prvCheckForValidListAndQueue+0x78>)
 80244de:	2110      	movs	r1, #16
 80244e0:	200a      	movs	r0, #10
 80244e2:	f7fd fad1 	bl	8021a88 <xQueueGenericCreateStatic>
 80244e6:	4602      	mov	r2, r0
 80244e8:	4b08      	ldr	r3, [pc, #32]	; (802450c <prvCheckForValidListAndQueue+0x60>)
 80244ea:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80244ec:	4b07      	ldr	r3, [pc, #28]	; (802450c <prvCheckForValidListAndQueue+0x60>)
 80244ee:	681b      	ldr	r3, [r3, #0]
 80244f0:	2b00      	cmp	r3, #0
 80244f2:	d005      	beq.n	8024500 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80244f4:	4b05      	ldr	r3, [pc, #20]	; (802450c <prvCheckForValidListAndQueue+0x60>)
 80244f6:	681b      	ldr	r3, [r3, #0]
 80244f8:	490b      	ldr	r1, [pc, #44]	; (8024528 <prvCheckForValidListAndQueue+0x7c>)
 80244fa:	4618      	mov	r0, r3
 80244fc:	f7fe f9e6 	bl	80228cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8024500:	f000 f96a 	bl	80247d8 <vPortExitCritical>
}
 8024504:	bf00      	nop
 8024506:	46bd      	mov	sp, r7
 8024508:	bd80      	pop	{r7, pc}
 802450a:	bf00      	nop
 802450c:	20002160 	.word	0x20002160
 8024510:	20002130 	.word	0x20002130
 8024514:	20002144 	.word	0x20002144
 8024518:	20002158 	.word	0x20002158
 802451c:	2000215c 	.word	0x2000215c
 8024520:	2000220c 	.word	0x2000220c
 8024524:	2000216c 	.word	0x2000216c
 8024528:	0802d080 	.word	0x0802d080

0802452c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 802452c:	b480      	push	{r7}
 802452e:	b085      	sub	sp, #20
 8024530:	af00      	add	r7, sp, #0
 8024532:	60f8      	str	r0, [r7, #12]
 8024534:	60b9      	str	r1, [r7, #8]
 8024536:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8024538:	68fb      	ldr	r3, [r7, #12]
 802453a:	3b04      	subs	r3, #4
 802453c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 802453e:	68fb      	ldr	r3, [r7, #12]
 8024540:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8024544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8024546:	68fb      	ldr	r3, [r7, #12]
 8024548:	3b04      	subs	r3, #4
 802454a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 802454c:	68bb      	ldr	r3, [r7, #8]
 802454e:	f023 0201 	bic.w	r2, r3, #1
 8024552:	68fb      	ldr	r3, [r7, #12]
 8024554:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8024556:	68fb      	ldr	r3, [r7, #12]
 8024558:	3b04      	subs	r3, #4
 802455a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 802455c:	4a0c      	ldr	r2, [pc, #48]	; (8024590 <pxPortInitialiseStack+0x64>)
 802455e:	68fb      	ldr	r3, [r7, #12]
 8024560:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8024562:	68fb      	ldr	r3, [r7, #12]
 8024564:	3b14      	subs	r3, #20
 8024566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8024568:	687a      	ldr	r2, [r7, #4]
 802456a:	68fb      	ldr	r3, [r7, #12]
 802456c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 802456e:	68fb      	ldr	r3, [r7, #12]
 8024570:	3b04      	subs	r3, #4
 8024572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8024574:	68fb      	ldr	r3, [r7, #12]
 8024576:	f06f 0202 	mvn.w	r2, #2
 802457a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 802457c:	68fb      	ldr	r3, [r7, #12]
 802457e:	3b20      	subs	r3, #32
 8024580:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8024582:	68fb      	ldr	r3, [r7, #12]
}
 8024584:	4618      	mov	r0, r3
 8024586:	3714      	adds	r7, #20
 8024588:	46bd      	mov	sp, r7
 802458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802458e:	4770      	bx	lr
 8024590:	08024595 	.word	0x08024595

08024594 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8024594:	b480      	push	{r7}
 8024596:	b085      	sub	sp, #20
 8024598:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 802459a:	2300      	movs	r3, #0
 802459c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 802459e:	4b11      	ldr	r3, [pc, #68]	; (80245e4 <prvTaskExitError+0x50>)
 80245a0:	681b      	ldr	r3, [r3, #0]
 80245a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80245a6:	d009      	beq.n	80245bc <prvTaskExitError+0x28>
 80245a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80245ac:	f383 8811 	msr	BASEPRI, r3
 80245b0:	f3bf 8f6f 	isb	sy
 80245b4:	f3bf 8f4f 	dsb	sy
 80245b8:	60fb      	str	r3, [r7, #12]
 80245ba:	e7fe      	b.n	80245ba <prvTaskExitError+0x26>
 80245bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80245c0:	f383 8811 	msr	BASEPRI, r3
 80245c4:	f3bf 8f6f 	isb	sy
 80245c8:	f3bf 8f4f 	dsb	sy
 80245cc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80245ce:	bf00      	nop
 80245d0:	687b      	ldr	r3, [r7, #4]
 80245d2:	2b00      	cmp	r3, #0
 80245d4:	d0fc      	beq.n	80245d0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80245d6:	bf00      	nop
 80245d8:	3714      	adds	r7, #20
 80245da:	46bd      	mov	sp, r7
 80245dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245e0:	4770      	bx	lr
 80245e2:	bf00      	nop
 80245e4:	20000684 	.word	0x20000684
	...

080245f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80245f0:	4b07      	ldr	r3, [pc, #28]	; (8024610 <pxCurrentTCBConst2>)
 80245f2:	6819      	ldr	r1, [r3, #0]
 80245f4:	6808      	ldr	r0, [r1, #0]
 80245f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245fa:	f380 8809 	msr	PSP, r0
 80245fe:	f3bf 8f6f 	isb	sy
 8024602:	f04f 0000 	mov.w	r0, #0
 8024606:	f380 8811 	msr	BASEPRI, r0
 802460a:	4770      	bx	lr
 802460c:	f3af 8000 	nop.w

08024610 <pxCurrentTCBConst2>:
 8024610:	20001c30 	.word	0x20001c30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8024614:	bf00      	nop
 8024616:	bf00      	nop

08024618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8024618:	4808      	ldr	r0, [pc, #32]	; (802463c <prvPortStartFirstTask+0x24>)
 802461a:	6800      	ldr	r0, [r0, #0]
 802461c:	6800      	ldr	r0, [r0, #0]
 802461e:	f380 8808 	msr	MSP, r0
 8024622:	f04f 0000 	mov.w	r0, #0
 8024626:	f380 8814 	msr	CONTROL, r0
 802462a:	b662      	cpsie	i
 802462c:	b661      	cpsie	f
 802462e:	f3bf 8f4f 	dsb	sy
 8024632:	f3bf 8f6f 	isb	sy
 8024636:	df00      	svc	0
 8024638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802463a:	bf00      	nop
 802463c:	e000ed08 	.word	0xe000ed08

08024640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8024640:	b580      	push	{r7, lr}
 8024642:	b086      	sub	sp, #24
 8024644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8024646:	4b44      	ldr	r3, [pc, #272]	; (8024758 <xPortStartScheduler+0x118>)
 8024648:	681b      	ldr	r3, [r3, #0]
 802464a:	4a44      	ldr	r2, [pc, #272]	; (802475c <xPortStartScheduler+0x11c>)
 802464c:	4293      	cmp	r3, r2
 802464e:	d109      	bne.n	8024664 <xPortStartScheduler+0x24>
 8024650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024654:	f383 8811 	msr	BASEPRI, r3
 8024658:	f3bf 8f6f 	isb	sy
 802465c:	f3bf 8f4f 	dsb	sy
 8024660:	613b      	str	r3, [r7, #16]
 8024662:	e7fe      	b.n	8024662 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8024664:	4b3c      	ldr	r3, [pc, #240]	; (8024758 <xPortStartScheduler+0x118>)
 8024666:	681b      	ldr	r3, [r3, #0]
 8024668:	4a3d      	ldr	r2, [pc, #244]	; (8024760 <xPortStartScheduler+0x120>)
 802466a:	4293      	cmp	r3, r2
 802466c:	d109      	bne.n	8024682 <xPortStartScheduler+0x42>
 802466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024672:	f383 8811 	msr	BASEPRI, r3
 8024676:	f3bf 8f6f 	isb	sy
 802467a:	f3bf 8f4f 	dsb	sy
 802467e:	60fb      	str	r3, [r7, #12]
 8024680:	e7fe      	b.n	8024680 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8024682:	4b38      	ldr	r3, [pc, #224]	; (8024764 <xPortStartScheduler+0x124>)
 8024684:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8024686:	697b      	ldr	r3, [r7, #20]
 8024688:	781b      	ldrb	r3, [r3, #0]
 802468a:	b2db      	uxtb	r3, r3
 802468c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 802468e:	697b      	ldr	r3, [r7, #20]
 8024690:	22ff      	movs	r2, #255	; 0xff
 8024692:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8024694:	697b      	ldr	r3, [r7, #20]
 8024696:	781b      	ldrb	r3, [r3, #0]
 8024698:	b2db      	uxtb	r3, r3
 802469a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 802469c:	78fb      	ldrb	r3, [r7, #3]
 802469e:	b2db      	uxtb	r3, r3
 80246a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80246a4:	b2da      	uxtb	r2, r3
 80246a6:	4b30      	ldr	r3, [pc, #192]	; (8024768 <xPortStartScheduler+0x128>)
 80246a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80246aa:	4b30      	ldr	r3, [pc, #192]	; (802476c <xPortStartScheduler+0x12c>)
 80246ac:	2207      	movs	r2, #7
 80246ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80246b0:	e009      	b.n	80246c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80246b2:	4b2e      	ldr	r3, [pc, #184]	; (802476c <xPortStartScheduler+0x12c>)
 80246b4:	681b      	ldr	r3, [r3, #0]
 80246b6:	3b01      	subs	r3, #1
 80246b8:	4a2c      	ldr	r2, [pc, #176]	; (802476c <xPortStartScheduler+0x12c>)
 80246ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80246bc:	78fb      	ldrb	r3, [r7, #3]
 80246be:	b2db      	uxtb	r3, r3
 80246c0:	005b      	lsls	r3, r3, #1
 80246c2:	b2db      	uxtb	r3, r3
 80246c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80246c6:	78fb      	ldrb	r3, [r7, #3]
 80246c8:	b2db      	uxtb	r3, r3
 80246ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80246ce:	2b80      	cmp	r3, #128	; 0x80
 80246d0:	d0ef      	beq.n	80246b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80246d2:	4b26      	ldr	r3, [pc, #152]	; (802476c <xPortStartScheduler+0x12c>)
 80246d4:	681b      	ldr	r3, [r3, #0]
 80246d6:	f1c3 0307 	rsb	r3, r3, #7
 80246da:	2b04      	cmp	r3, #4
 80246dc:	d009      	beq.n	80246f2 <xPortStartScheduler+0xb2>
 80246de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80246e2:	f383 8811 	msr	BASEPRI, r3
 80246e6:	f3bf 8f6f 	isb	sy
 80246ea:	f3bf 8f4f 	dsb	sy
 80246ee:	60bb      	str	r3, [r7, #8]
 80246f0:	e7fe      	b.n	80246f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80246f2:	4b1e      	ldr	r3, [pc, #120]	; (802476c <xPortStartScheduler+0x12c>)
 80246f4:	681b      	ldr	r3, [r3, #0]
 80246f6:	021b      	lsls	r3, r3, #8
 80246f8:	4a1c      	ldr	r2, [pc, #112]	; (802476c <xPortStartScheduler+0x12c>)
 80246fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80246fc:	4b1b      	ldr	r3, [pc, #108]	; (802476c <xPortStartScheduler+0x12c>)
 80246fe:	681b      	ldr	r3, [r3, #0]
 8024700:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8024704:	4a19      	ldr	r2, [pc, #100]	; (802476c <xPortStartScheduler+0x12c>)
 8024706:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8024708:	687b      	ldr	r3, [r7, #4]
 802470a:	b2da      	uxtb	r2, r3
 802470c:	697b      	ldr	r3, [r7, #20]
 802470e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8024710:	4b17      	ldr	r3, [pc, #92]	; (8024770 <xPortStartScheduler+0x130>)
 8024712:	681b      	ldr	r3, [r3, #0]
 8024714:	4a16      	ldr	r2, [pc, #88]	; (8024770 <xPortStartScheduler+0x130>)
 8024716:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802471a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 802471c:	4b14      	ldr	r3, [pc, #80]	; (8024770 <xPortStartScheduler+0x130>)
 802471e:	681b      	ldr	r3, [r3, #0]
 8024720:	4a13      	ldr	r2, [pc, #76]	; (8024770 <xPortStartScheduler+0x130>)
 8024722:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8024726:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8024728:	f000 f8d6 	bl	80248d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 802472c:	4b11      	ldr	r3, [pc, #68]	; (8024774 <xPortStartScheduler+0x134>)
 802472e:	2200      	movs	r2, #0
 8024730:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8024732:	f000 f8f5 	bl	8024920 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8024736:	4b10      	ldr	r3, [pc, #64]	; (8024778 <xPortStartScheduler+0x138>)
 8024738:	681b      	ldr	r3, [r3, #0]
 802473a:	4a0f      	ldr	r2, [pc, #60]	; (8024778 <xPortStartScheduler+0x138>)
 802473c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8024740:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8024742:	f7ff ff69 	bl	8024618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8024746:	f7fe fd7b 	bl	8023240 <vTaskSwitchContext>
	prvTaskExitError();
 802474a:	f7ff ff23 	bl	8024594 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 802474e:	2300      	movs	r3, #0
}
 8024750:	4618      	mov	r0, r3
 8024752:	3718      	adds	r7, #24
 8024754:	46bd      	mov	sp, r7
 8024756:	bd80      	pop	{r7, pc}
 8024758:	e000ed00 	.word	0xe000ed00
 802475c:	410fc271 	.word	0x410fc271
 8024760:	410fc270 	.word	0x410fc270
 8024764:	e000e400 	.word	0xe000e400
 8024768:	2000225c 	.word	0x2000225c
 802476c:	20002260 	.word	0x20002260
 8024770:	e000ed20 	.word	0xe000ed20
 8024774:	20000684 	.word	0x20000684
 8024778:	e000ef34 	.word	0xe000ef34

0802477c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 802477c:	b480      	push	{r7}
 802477e:	b083      	sub	sp, #12
 8024780:	af00      	add	r7, sp, #0
 8024782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024786:	f383 8811 	msr	BASEPRI, r3
 802478a:	f3bf 8f6f 	isb	sy
 802478e:	f3bf 8f4f 	dsb	sy
 8024792:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8024794:	4b0e      	ldr	r3, [pc, #56]	; (80247d0 <vPortEnterCritical+0x54>)
 8024796:	681b      	ldr	r3, [r3, #0]
 8024798:	3301      	adds	r3, #1
 802479a:	4a0d      	ldr	r2, [pc, #52]	; (80247d0 <vPortEnterCritical+0x54>)
 802479c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 802479e:	4b0c      	ldr	r3, [pc, #48]	; (80247d0 <vPortEnterCritical+0x54>)
 80247a0:	681b      	ldr	r3, [r3, #0]
 80247a2:	2b01      	cmp	r3, #1
 80247a4:	d10e      	bne.n	80247c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80247a6:	4b0b      	ldr	r3, [pc, #44]	; (80247d4 <vPortEnterCritical+0x58>)
 80247a8:	681b      	ldr	r3, [r3, #0]
 80247aa:	b2db      	uxtb	r3, r3
 80247ac:	2b00      	cmp	r3, #0
 80247ae:	d009      	beq.n	80247c4 <vPortEnterCritical+0x48>
 80247b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80247b4:	f383 8811 	msr	BASEPRI, r3
 80247b8:	f3bf 8f6f 	isb	sy
 80247bc:	f3bf 8f4f 	dsb	sy
 80247c0:	603b      	str	r3, [r7, #0]
 80247c2:	e7fe      	b.n	80247c2 <vPortEnterCritical+0x46>
	}
}
 80247c4:	bf00      	nop
 80247c6:	370c      	adds	r7, #12
 80247c8:	46bd      	mov	sp, r7
 80247ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247ce:	4770      	bx	lr
 80247d0:	20000684 	.word	0x20000684
 80247d4:	e000ed04 	.word	0xe000ed04

080247d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80247d8:	b480      	push	{r7}
 80247da:	b083      	sub	sp, #12
 80247dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80247de:	4b11      	ldr	r3, [pc, #68]	; (8024824 <vPortExitCritical+0x4c>)
 80247e0:	681b      	ldr	r3, [r3, #0]
 80247e2:	2b00      	cmp	r3, #0
 80247e4:	d109      	bne.n	80247fa <vPortExitCritical+0x22>
 80247e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80247ea:	f383 8811 	msr	BASEPRI, r3
 80247ee:	f3bf 8f6f 	isb	sy
 80247f2:	f3bf 8f4f 	dsb	sy
 80247f6:	607b      	str	r3, [r7, #4]
 80247f8:	e7fe      	b.n	80247f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80247fa:	4b0a      	ldr	r3, [pc, #40]	; (8024824 <vPortExitCritical+0x4c>)
 80247fc:	681b      	ldr	r3, [r3, #0]
 80247fe:	3b01      	subs	r3, #1
 8024800:	4a08      	ldr	r2, [pc, #32]	; (8024824 <vPortExitCritical+0x4c>)
 8024802:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8024804:	4b07      	ldr	r3, [pc, #28]	; (8024824 <vPortExitCritical+0x4c>)
 8024806:	681b      	ldr	r3, [r3, #0]
 8024808:	2b00      	cmp	r3, #0
 802480a:	d104      	bne.n	8024816 <vPortExitCritical+0x3e>
 802480c:	2300      	movs	r3, #0
 802480e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8024810:	683b      	ldr	r3, [r7, #0]
 8024812:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8024816:	bf00      	nop
 8024818:	370c      	adds	r7, #12
 802481a:	46bd      	mov	sp, r7
 802481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024820:	4770      	bx	lr
 8024822:	bf00      	nop
 8024824:	20000684 	.word	0x20000684
	...

08024830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8024830:	f3ef 8009 	mrs	r0, PSP
 8024834:	f3bf 8f6f 	isb	sy
 8024838:	4b15      	ldr	r3, [pc, #84]	; (8024890 <pxCurrentTCBConst>)
 802483a:	681a      	ldr	r2, [r3, #0]
 802483c:	f01e 0f10 	tst.w	lr, #16
 8024840:	bf08      	it	eq
 8024842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8024846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802484a:	6010      	str	r0, [r2, #0]
 802484c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8024850:	f04f 0050 	mov.w	r0, #80	; 0x50
 8024854:	f380 8811 	msr	BASEPRI, r0
 8024858:	f3bf 8f4f 	dsb	sy
 802485c:	f3bf 8f6f 	isb	sy
 8024860:	f7fe fcee 	bl	8023240 <vTaskSwitchContext>
 8024864:	f04f 0000 	mov.w	r0, #0
 8024868:	f380 8811 	msr	BASEPRI, r0
 802486c:	bc09      	pop	{r0, r3}
 802486e:	6819      	ldr	r1, [r3, #0]
 8024870:	6808      	ldr	r0, [r1, #0]
 8024872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024876:	f01e 0f10 	tst.w	lr, #16
 802487a:	bf08      	it	eq
 802487c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8024880:	f380 8809 	msr	PSP, r0
 8024884:	f3bf 8f6f 	isb	sy
 8024888:	4770      	bx	lr
 802488a:	bf00      	nop
 802488c:	f3af 8000 	nop.w

08024890 <pxCurrentTCBConst>:
 8024890:	20001c30 	.word	0x20001c30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8024894:	bf00      	nop
 8024896:	bf00      	nop

08024898 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8024898:	b580      	push	{r7, lr}
 802489a:	b082      	sub	sp, #8
 802489c:	af00      	add	r7, sp, #0
	__asm volatile
 802489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80248a2:	f383 8811 	msr	BASEPRI, r3
 80248a6:	f3bf 8f6f 	isb	sy
 80248aa:	f3bf 8f4f 	dsb	sy
 80248ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80248b0:	f7fe fc0e 	bl	80230d0 <xTaskIncrementTick>
 80248b4:	4603      	mov	r3, r0
 80248b6:	2b00      	cmp	r3, #0
 80248b8:	d003      	beq.n	80248c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80248ba:	4b06      	ldr	r3, [pc, #24]	; (80248d4 <SysTick_Handler+0x3c>)
 80248bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80248c0:	601a      	str	r2, [r3, #0]
 80248c2:	2300      	movs	r3, #0
 80248c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80248c6:	683b      	ldr	r3, [r7, #0]
 80248c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80248cc:	bf00      	nop
 80248ce:	3708      	adds	r7, #8
 80248d0:	46bd      	mov	sp, r7
 80248d2:	bd80      	pop	{r7, pc}
 80248d4:	e000ed04 	.word	0xe000ed04

080248d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80248d8:	b480      	push	{r7}
 80248da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80248dc:	4b0b      	ldr	r3, [pc, #44]	; (802490c <vPortSetupTimerInterrupt+0x34>)
 80248de:	2200      	movs	r2, #0
 80248e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80248e2:	4b0b      	ldr	r3, [pc, #44]	; (8024910 <vPortSetupTimerInterrupt+0x38>)
 80248e4:	2200      	movs	r2, #0
 80248e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80248e8:	4b0a      	ldr	r3, [pc, #40]	; (8024914 <vPortSetupTimerInterrupt+0x3c>)
 80248ea:	681b      	ldr	r3, [r3, #0]
 80248ec:	4a0a      	ldr	r2, [pc, #40]	; (8024918 <vPortSetupTimerInterrupt+0x40>)
 80248ee:	fba2 2303 	umull	r2, r3, r2, r3
 80248f2:	099b      	lsrs	r3, r3, #6
 80248f4:	4a09      	ldr	r2, [pc, #36]	; (802491c <vPortSetupTimerInterrupt+0x44>)
 80248f6:	3b01      	subs	r3, #1
 80248f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80248fa:	4b04      	ldr	r3, [pc, #16]	; (802490c <vPortSetupTimerInterrupt+0x34>)
 80248fc:	2207      	movs	r2, #7
 80248fe:	601a      	str	r2, [r3, #0]
}
 8024900:	bf00      	nop
 8024902:	46bd      	mov	sp, r7
 8024904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024908:	4770      	bx	lr
 802490a:	bf00      	nop
 802490c:	e000e010 	.word	0xe000e010
 8024910:	e000e018 	.word	0xe000e018
 8024914:	20000678 	.word	0x20000678
 8024918:	10624dd3 	.word	0x10624dd3
 802491c:	e000e014 	.word	0xe000e014

08024920 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8024920:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8024930 <vPortEnableVFP+0x10>
 8024924:	6801      	ldr	r1, [r0, #0]
 8024926:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802492a:	6001      	str	r1, [r0, #0]
 802492c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 802492e:	bf00      	nop
 8024930:	e000ed88 	.word	0xe000ed88

08024934 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8024934:	b480      	push	{r7}
 8024936:	b085      	sub	sp, #20
 8024938:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 802493a:	f3ef 8305 	mrs	r3, IPSR
 802493e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8024940:	68fb      	ldr	r3, [r7, #12]
 8024942:	2b0f      	cmp	r3, #15
 8024944:	d913      	bls.n	802496e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8024946:	4a16      	ldr	r2, [pc, #88]	; (80249a0 <vPortValidateInterruptPriority+0x6c>)
 8024948:	68fb      	ldr	r3, [r7, #12]
 802494a:	4413      	add	r3, r2
 802494c:	781b      	ldrb	r3, [r3, #0]
 802494e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8024950:	4b14      	ldr	r3, [pc, #80]	; (80249a4 <vPortValidateInterruptPriority+0x70>)
 8024952:	781b      	ldrb	r3, [r3, #0]
 8024954:	7afa      	ldrb	r2, [r7, #11]
 8024956:	429a      	cmp	r2, r3
 8024958:	d209      	bcs.n	802496e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 802495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802495e:	f383 8811 	msr	BASEPRI, r3
 8024962:	f3bf 8f6f 	isb	sy
 8024966:	f3bf 8f4f 	dsb	sy
 802496a:	607b      	str	r3, [r7, #4]
 802496c:	e7fe      	b.n	802496c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 802496e:	4b0e      	ldr	r3, [pc, #56]	; (80249a8 <vPortValidateInterruptPriority+0x74>)
 8024970:	681b      	ldr	r3, [r3, #0]
 8024972:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8024976:	4b0d      	ldr	r3, [pc, #52]	; (80249ac <vPortValidateInterruptPriority+0x78>)
 8024978:	681b      	ldr	r3, [r3, #0]
 802497a:	429a      	cmp	r2, r3
 802497c:	d909      	bls.n	8024992 <vPortValidateInterruptPriority+0x5e>
 802497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024982:	f383 8811 	msr	BASEPRI, r3
 8024986:	f3bf 8f6f 	isb	sy
 802498a:	f3bf 8f4f 	dsb	sy
 802498e:	603b      	str	r3, [r7, #0]
 8024990:	e7fe      	b.n	8024990 <vPortValidateInterruptPriority+0x5c>
	}
 8024992:	bf00      	nop
 8024994:	3714      	adds	r7, #20
 8024996:	46bd      	mov	sp, r7
 8024998:	f85d 7b04 	ldr.w	r7, [sp], #4
 802499c:	4770      	bx	lr
 802499e:	bf00      	nop
 80249a0:	e000e3f0 	.word	0xe000e3f0
 80249a4:	2000225c 	.word	0x2000225c
 80249a8:	e000ed0c 	.word	0xe000ed0c
 80249ac:	20002260 	.word	0x20002260

080249b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80249b0:	b580      	push	{r7, lr}
 80249b2:	b08a      	sub	sp, #40	; 0x28
 80249b4:	af00      	add	r7, sp, #0
 80249b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80249b8:	2300      	movs	r3, #0
 80249ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80249bc:	f7fe fabc 	bl	8022f38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80249c0:	4b57      	ldr	r3, [pc, #348]	; (8024b20 <pvPortMalloc+0x170>)
 80249c2:	681b      	ldr	r3, [r3, #0]
 80249c4:	2b00      	cmp	r3, #0
 80249c6:	d101      	bne.n	80249cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80249c8:	f000 f90c 	bl	8024be4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80249cc:	4b55      	ldr	r3, [pc, #340]	; (8024b24 <pvPortMalloc+0x174>)
 80249ce:	681a      	ldr	r2, [r3, #0]
 80249d0:	687b      	ldr	r3, [r7, #4]
 80249d2:	4013      	ands	r3, r2
 80249d4:	2b00      	cmp	r3, #0
 80249d6:	f040 808c 	bne.w	8024af2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80249da:	687b      	ldr	r3, [r7, #4]
 80249dc:	2b00      	cmp	r3, #0
 80249de:	d01c      	beq.n	8024a1a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80249e0:	2208      	movs	r2, #8
 80249e2:	687b      	ldr	r3, [r7, #4]
 80249e4:	4413      	add	r3, r2
 80249e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80249e8:	687b      	ldr	r3, [r7, #4]
 80249ea:	f003 0307 	and.w	r3, r3, #7
 80249ee:	2b00      	cmp	r3, #0
 80249f0:	d013      	beq.n	8024a1a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80249f2:	687b      	ldr	r3, [r7, #4]
 80249f4:	f023 0307 	bic.w	r3, r3, #7
 80249f8:	3308      	adds	r3, #8
 80249fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80249fc:	687b      	ldr	r3, [r7, #4]
 80249fe:	f003 0307 	and.w	r3, r3, #7
 8024a02:	2b00      	cmp	r3, #0
 8024a04:	d009      	beq.n	8024a1a <pvPortMalloc+0x6a>
 8024a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024a0a:	f383 8811 	msr	BASEPRI, r3
 8024a0e:	f3bf 8f6f 	isb	sy
 8024a12:	f3bf 8f4f 	dsb	sy
 8024a16:	617b      	str	r3, [r7, #20]
 8024a18:	e7fe      	b.n	8024a18 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8024a1a:	687b      	ldr	r3, [r7, #4]
 8024a1c:	2b00      	cmp	r3, #0
 8024a1e:	d068      	beq.n	8024af2 <pvPortMalloc+0x142>
 8024a20:	4b41      	ldr	r3, [pc, #260]	; (8024b28 <pvPortMalloc+0x178>)
 8024a22:	681b      	ldr	r3, [r3, #0]
 8024a24:	687a      	ldr	r2, [r7, #4]
 8024a26:	429a      	cmp	r2, r3
 8024a28:	d863      	bhi.n	8024af2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8024a2a:	4b40      	ldr	r3, [pc, #256]	; (8024b2c <pvPortMalloc+0x17c>)
 8024a2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8024a2e:	4b3f      	ldr	r3, [pc, #252]	; (8024b2c <pvPortMalloc+0x17c>)
 8024a30:	681b      	ldr	r3, [r3, #0]
 8024a32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8024a34:	e004      	b.n	8024a40 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8024a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024a38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8024a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024a3c:	681b      	ldr	r3, [r3, #0]
 8024a3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8024a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024a42:	685b      	ldr	r3, [r3, #4]
 8024a44:	687a      	ldr	r2, [r7, #4]
 8024a46:	429a      	cmp	r2, r3
 8024a48:	d903      	bls.n	8024a52 <pvPortMalloc+0xa2>
 8024a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024a4c:	681b      	ldr	r3, [r3, #0]
 8024a4e:	2b00      	cmp	r3, #0
 8024a50:	d1f1      	bne.n	8024a36 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8024a52:	4b33      	ldr	r3, [pc, #204]	; (8024b20 <pvPortMalloc+0x170>)
 8024a54:	681b      	ldr	r3, [r3, #0]
 8024a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024a58:	429a      	cmp	r2, r3
 8024a5a:	d04a      	beq.n	8024af2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8024a5c:	6a3b      	ldr	r3, [r7, #32]
 8024a5e:	681b      	ldr	r3, [r3, #0]
 8024a60:	2208      	movs	r2, #8
 8024a62:	4413      	add	r3, r2
 8024a64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8024a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024a68:	681a      	ldr	r2, [r3, #0]
 8024a6a:	6a3b      	ldr	r3, [r7, #32]
 8024a6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8024a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024a70:	685a      	ldr	r2, [r3, #4]
 8024a72:	687b      	ldr	r3, [r7, #4]
 8024a74:	1ad2      	subs	r2, r2, r3
 8024a76:	2308      	movs	r3, #8
 8024a78:	005b      	lsls	r3, r3, #1
 8024a7a:	429a      	cmp	r2, r3
 8024a7c:	d91e      	bls.n	8024abc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8024a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024a80:	687b      	ldr	r3, [r7, #4]
 8024a82:	4413      	add	r3, r2
 8024a84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8024a86:	69bb      	ldr	r3, [r7, #24]
 8024a88:	f003 0307 	and.w	r3, r3, #7
 8024a8c:	2b00      	cmp	r3, #0
 8024a8e:	d009      	beq.n	8024aa4 <pvPortMalloc+0xf4>
 8024a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024a94:	f383 8811 	msr	BASEPRI, r3
 8024a98:	f3bf 8f6f 	isb	sy
 8024a9c:	f3bf 8f4f 	dsb	sy
 8024aa0:	613b      	str	r3, [r7, #16]
 8024aa2:	e7fe      	b.n	8024aa2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8024aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024aa6:	685a      	ldr	r2, [r3, #4]
 8024aa8:	687b      	ldr	r3, [r7, #4]
 8024aaa:	1ad2      	subs	r2, r2, r3
 8024aac:	69bb      	ldr	r3, [r7, #24]
 8024aae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8024ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024ab2:	687a      	ldr	r2, [r7, #4]
 8024ab4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8024ab6:	69b8      	ldr	r0, [r7, #24]
 8024ab8:	f000 f8f6 	bl	8024ca8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8024abc:	4b1a      	ldr	r3, [pc, #104]	; (8024b28 <pvPortMalloc+0x178>)
 8024abe:	681a      	ldr	r2, [r3, #0]
 8024ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024ac2:	685b      	ldr	r3, [r3, #4]
 8024ac4:	1ad3      	subs	r3, r2, r3
 8024ac6:	4a18      	ldr	r2, [pc, #96]	; (8024b28 <pvPortMalloc+0x178>)
 8024ac8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8024aca:	4b17      	ldr	r3, [pc, #92]	; (8024b28 <pvPortMalloc+0x178>)
 8024acc:	681a      	ldr	r2, [r3, #0]
 8024ace:	4b18      	ldr	r3, [pc, #96]	; (8024b30 <pvPortMalloc+0x180>)
 8024ad0:	681b      	ldr	r3, [r3, #0]
 8024ad2:	429a      	cmp	r2, r3
 8024ad4:	d203      	bcs.n	8024ade <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8024ad6:	4b14      	ldr	r3, [pc, #80]	; (8024b28 <pvPortMalloc+0x178>)
 8024ad8:	681b      	ldr	r3, [r3, #0]
 8024ada:	4a15      	ldr	r2, [pc, #84]	; (8024b30 <pvPortMalloc+0x180>)
 8024adc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8024ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024ae0:	685a      	ldr	r2, [r3, #4]
 8024ae2:	4b10      	ldr	r3, [pc, #64]	; (8024b24 <pvPortMalloc+0x174>)
 8024ae4:	681b      	ldr	r3, [r3, #0]
 8024ae6:	431a      	orrs	r2, r3
 8024ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024aea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8024aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024aee:	2200      	movs	r2, #0
 8024af0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8024af2:	f7fe fa2f 	bl	8022f54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8024af6:	69fb      	ldr	r3, [r7, #28]
 8024af8:	f003 0307 	and.w	r3, r3, #7
 8024afc:	2b00      	cmp	r3, #0
 8024afe:	d009      	beq.n	8024b14 <pvPortMalloc+0x164>
 8024b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024b04:	f383 8811 	msr	BASEPRI, r3
 8024b08:	f3bf 8f6f 	isb	sy
 8024b0c:	f3bf 8f4f 	dsb	sy
 8024b10:	60fb      	str	r3, [r7, #12]
 8024b12:	e7fe      	b.n	8024b12 <pvPortMalloc+0x162>
	return pvReturn;
 8024b14:	69fb      	ldr	r3, [r7, #28]
}
 8024b16:	4618      	mov	r0, r3
 8024b18:	3728      	adds	r7, #40	; 0x28
 8024b1a:	46bd      	mov	sp, r7
 8024b1c:	bd80      	pop	{r7, pc}
 8024b1e:	bf00      	nop
 8024b20:	2000979c 	.word	0x2000979c
 8024b24:	200097a8 	.word	0x200097a8
 8024b28:	200097a0 	.word	0x200097a0
 8024b2c:	20009794 	.word	0x20009794
 8024b30:	200097a4 	.word	0x200097a4

08024b34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8024b34:	b580      	push	{r7, lr}
 8024b36:	b086      	sub	sp, #24
 8024b38:	af00      	add	r7, sp, #0
 8024b3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8024b3c:	687b      	ldr	r3, [r7, #4]
 8024b3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8024b40:	687b      	ldr	r3, [r7, #4]
 8024b42:	2b00      	cmp	r3, #0
 8024b44:	d046      	beq.n	8024bd4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8024b46:	2308      	movs	r3, #8
 8024b48:	425b      	negs	r3, r3
 8024b4a:	697a      	ldr	r2, [r7, #20]
 8024b4c:	4413      	add	r3, r2
 8024b4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8024b50:	697b      	ldr	r3, [r7, #20]
 8024b52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8024b54:	693b      	ldr	r3, [r7, #16]
 8024b56:	685a      	ldr	r2, [r3, #4]
 8024b58:	4b20      	ldr	r3, [pc, #128]	; (8024bdc <vPortFree+0xa8>)
 8024b5a:	681b      	ldr	r3, [r3, #0]
 8024b5c:	4013      	ands	r3, r2
 8024b5e:	2b00      	cmp	r3, #0
 8024b60:	d109      	bne.n	8024b76 <vPortFree+0x42>
 8024b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024b66:	f383 8811 	msr	BASEPRI, r3
 8024b6a:	f3bf 8f6f 	isb	sy
 8024b6e:	f3bf 8f4f 	dsb	sy
 8024b72:	60fb      	str	r3, [r7, #12]
 8024b74:	e7fe      	b.n	8024b74 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8024b76:	693b      	ldr	r3, [r7, #16]
 8024b78:	681b      	ldr	r3, [r3, #0]
 8024b7a:	2b00      	cmp	r3, #0
 8024b7c:	d009      	beq.n	8024b92 <vPortFree+0x5e>
 8024b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024b82:	f383 8811 	msr	BASEPRI, r3
 8024b86:	f3bf 8f6f 	isb	sy
 8024b8a:	f3bf 8f4f 	dsb	sy
 8024b8e:	60bb      	str	r3, [r7, #8]
 8024b90:	e7fe      	b.n	8024b90 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8024b92:	693b      	ldr	r3, [r7, #16]
 8024b94:	685a      	ldr	r2, [r3, #4]
 8024b96:	4b11      	ldr	r3, [pc, #68]	; (8024bdc <vPortFree+0xa8>)
 8024b98:	681b      	ldr	r3, [r3, #0]
 8024b9a:	4013      	ands	r3, r2
 8024b9c:	2b00      	cmp	r3, #0
 8024b9e:	d019      	beq.n	8024bd4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8024ba0:	693b      	ldr	r3, [r7, #16]
 8024ba2:	681b      	ldr	r3, [r3, #0]
 8024ba4:	2b00      	cmp	r3, #0
 8024ba6:	d115      	bne.n	8024bd4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8024ba8:	693b      	ldr	r3, [r7, #16]
 8024baa:	685a      	ldr	r2, [r3, #4]
 8024bac:	4b0b      	ldr	r3, [pc, #44]	; (8024bdc <vPortFree+0xa8>)
 8024bae:	681b      	ldr	r3, [r3, #0]
 8024bb0:	43db      	mvns	r3, r3
 8024bb2:	401a      	ands	r2, r3
 8024bb4:	693b      	ldr	r3, [r7, #16]
 8024bb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8024bb8:	f7fe f9be 	bl	8022f38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8024bbc:	693b      	ldr	r3, [r7, #16]
 8024bbe:	685a      	ldr	r2, [r3, #4]
 8024bc0:	4b07      	ldr	r3, [pc, #28]	; (8024be0 <vPortFree+0xac>)
 8024bc2:	681b      	ldr	r3, [r3, #0]
 8024bc4:	4413      	add	r3, r2
 8024bc6:	4a06      	ldr	r2, [pc, #24]	; (8024be0 <vPortFree+0xac>)
 8024bc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8024bca:	6938      	ldr	r0, [r7, #16]
 8024bcc:	f000 f86c 	bl	8024ca8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8024bd0:	f7fe f9c0 	bl	8022f54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8024bd4:	bf00      	nop
 8024bd6:	3718      	adds	r7, #24
 8024bd8:	46bd      	mov	sp, r7
 8024bda:	bd80      	pop	{r7, pc}
 8024bdc:	200097a8 	.word	0x200097a8
 8024be0:	200097a0 	.word	0x200097a0

08024be4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8024be4:	b480      	push	{r7}
 8024be6:	b085      	sub	sp, #20
 8024be8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8024bea:	f247 5330 	movw	r3, #30000	; 0x7530
 8024bee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8024bf0:	4b27      	ldr	r3, [pc, #156]	; (8024c90 <prvHeapInit+0xac>)
 8024bf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8024bf4:	68fb      	ldr	r3, [r7, #12]
 8024bf6:	f003 0307 	and.w	r3, r3, #7
 8024bfa:	2b00      	cmp	r3, #0
 8024bfc:	d00c      	beq.n	8024c18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8024bfe:	68fb      	ldr	r3, [r7, #12]
 8024c00:	3307      	adds	r3, #7
 8024c02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8024c04:	68fb      	ldr	r3, [r7, #12]
 8024c06:	f023 0307 	bic.w	r3, r3, #7
 8024c0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8024c0c:	68ba      	ldr	r2, [r7, #8]
 8024c0e:	68fb      	ldr	r3, [r7, #12]
 8024c10:	1ad3      	subs	r3, r2, r3
 8024c12:	4a1f      	ldr	r2, [pc, #124]	; (8024c90 <prvHeapInit+0xac>)
 8024c14:	4413      	add	r3, r2
 8024c16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8024c18:	68fb      	ldr	r3, [r7, #12]
 8024c1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8024c1c:	4a1d      	ldr	r2, [pc, #116]	; (8024c94 <prvHeapInit+0xb0>)
 8024c1e:	687b      	ldr	r3, [r7, #4]
 8024c20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8024c22:	4b1c      	ldr	r3, [pc, #112]	; (8024c94 <prvHeapInit+0xb0>)
 8024c24:	2200      	movs	r2, #0
 8024c26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8024c28:	687b      	ldr	r3, [r7, #4]
 8024c2a:	68ba      	ldr	r2, [r7, #8]
 8024c2c:	4413      	add	r3, r2
 8024c2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8024c30:	2208      	movs	r2, #8
 8024c32:	68fb      	ldr	r3, [r7, #12]
 8024c34:	1a9b      	subs	r3, r3, r2
 8024c36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8024c38:	68fb      	ldr	r3, [r7, #12]
 8024c3a:	f023 0307 	bic.w	r3, r3, #7
 8024c3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8024c40:	68fb      	ldr	r3, [r7, #12]
 8024c42:	4a15      	ldr	r2, [pc, #84]	; (8024c98 <prvHeapInit+0xb4>)
 8024c44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8024c46:	4b14      	ldr	r3, [pc, #80]	; (8024c98 <prvHeapInit+0xb4>)
 8024c48:	681b      	ldr	r3, [r3, #0]
 8024c4a:	2200      	movs	r2, #0
 8024c4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8024c4e:	4b12      	ldr	r3, [pc, #72]	; (8024c98 <prvHeapInit+0xb4>)
 8024c50:	681b      	ldr	r3, [r3, #0]
 8024c52:	2200      	movs	r2, #0
 8024c54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8024c56:	687b      	ldr	r3, [r7, #4]
 8024c58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8024c5a:	683b      	ldr	r3, [r7, #0]
 8024c5c:	68fa      	ldr	r2, [r7, #12]
 8024c5e:	1ad2      	subs	r2, r2, r3
 8024c60:	683b      	ldr	r3, [r7, #0]
 8024c62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8024c64:	4b0c      	ldr	r3, [pc, #48]	; (8024c98 <prvHeapInit+0xb4>)
 8024c66:	681a      	ldr	r2, [r3, #0]
 8024c68:	683b      	ldr	r3, [r7, #0]
 8024c6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8024c6c:	683b      	ldr	r3, [r7, #0]
 8024c6e:	685b      	ldr	r3, [r3, #4]
 8024c70:	4a0a      	ldr	r2, [pc, #40]	; (8024c9c <prvHeapInit+0xb8>)
 8024c72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8024c74:	683b      	ldr	r3, [r7, #0]
 8024c76:	685b      	ldr	r3, [r3, #4]
 8024c78:	4a09      	ldr	r2, [pc, #36]	; (8024ca0 <prvHeapInit+0xbc>)
 8024c7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8024c7c:	4b09      	ldr	r3, [pc, #36]	; (8024ca4 <prvHeapInit+0xc0>)
 8024c7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8024c82:	601a      	str	r2, [r3, #0]
}
 8024c84:	bf00      	nop
 8024c86:	3714      	adds	r7, #20
 8024c88:	46bd      	mov	sp, r7
 8024c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024c8e:	4770      	bx	lr
 8024c90:	20002264 	.word	0x20002264
 8024c94:	20009794 	.word	0x20009794
 8024c98:	2000979c 	.word	0x2000979c
 8024c9c:	200097a4 	.word	0x200097a4
 8024ca0:	200097a0 	.word	0x200097a0
 8024ca4:	200097a8 	.word	0x200097a8

08024ca8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8024ca8:	b480      	push	{r7}
 8024caa:	b085      	sub	sp, #20
 8024cac:	af00      	add	r7, sp, #0
 8024cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8024cb0:	4b28      	ldr	r3, [pc, #160]	; (8024d54 <prvInsertBlockIntoFreeList+0xac>)
 8024cb2:	60fb      	str	r3, [r7, #12]
 8024cb4:	e002      	b.n	8024cbc <prvInsertBlockIntoFreeList+0x14>
 8024cb6:	68fb      	ldr	r3, [r7, #12]
 8024cb8:	681b      	ldr	r3, [r3, #0]
 8024cba:	60fb      	str	r3, [r7, #12]
 8024cbc:	68fb      	ldr	r3, [r7, #12]
 8024cbe:	681b      	ldr	r3, [r3, #0]
 8024cc0:	687a      	ldr	r2, [r7, #4]
 8024cc2:	429a      	cmp	r2, r3
 8024cc4:	d8f7      	bhi.n	8024cb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8024cc6:	68fb      	ldr	r3, [r7, #12]
 8024cc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8024cca:	68fb      	ldr	r3, [r7, #12]
 8024ccc:	685b      	ldr	r3, [r3, #4]
 8024cce:	68ba      	ldr	r2, [r7, #8]
 8024cd0:	4413      	add	r3, r2
 8024cd2:	687a      	ldr	r2, [r7, #4]
 8024cd4:	429a      	cmp	r2, r3
 8024cd6:	d108      	bne.n	8024cea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8024cd8:	68fb      	ldr	r3, [r7, #12]
 8024cda:	685a      	ldr	r2, [r3, #4]
 8024cdc:	687b      	ldr	r3, [r7, #4]
 8024cde:	685b      	ldr	r3, [r3, #4]
 8024ce0:	441a      	add	r2, r3
 8024ce2:	68fb      	ldr	r3, [r7, #12]
 8024ce4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8024ce6:	68fb      	ldr	r3, [r7, #12]
 8024ce8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8024cea:	687b      	ldr	r3, [r7, #4]
 8024cec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8024cee:	687b      	ldr	r3, [r7, #4]
 8024cf0:	685b      	ldr	r3, [r3, #4]
 8024cf2:	68ba      	ldr	r2, [r7, #8]
 8024cf4:	441a      	add	r2, r3
 8024cf6:	68fb      	ldr	r3, [r7, #12]
 8024cf8:	681b      	ldr	r3, [r3, #0]
 8024cfa:	429a      	cmp	r2, r3
 8024cfc:	d118      	bne.n	8024d30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8024cfe:	68fb      	ldr	r3, [r7, #12]
 8024d00:	681a      	ldr	r2, [r3, #0]
 8024d02:	4b15      	ldr	r3, [pc, #84]	; (8024d58 <prvInsertBlockIntoFreeList+0xb0>)
 8024d04:	681b      	ldr	r3, [r3, #0]
 8024d06:	429a      	cmp	r2, r3
 8024d08:	d00d      	beq.n	8024d26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8024d0a:	687b      	ldr	r3, [r7, #4]
 8024d0c:	685a      	ldr	r2, [r3, #4]
 8024d0e:	68fb      	ldr	r3, [r7, #12]
 8024d10:	681b      	ldr	r3, [r3, #0]
 8024d12:	685b      	ldr	r3, [r3, #4]
 8024d14:	441a      	add	r2, r3
 8024d16:	687b      	ldr	r3, [r7, #4]
 8024d18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8024d1a:	68fb      	ldr	r3, [r7, #12]
 8024d1c:	681b      	ldr	r3, [r3, #0]
 8024d1e:	681a      	ldr	r2, [r3, #0]
 8024d20:	687b      	ldr	r3, [r7, #4]
 8024d22:	601a      	str	r2, [r3, #0]
 8024d24:	e008      	b.n	8024d38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8024d26:	4b0c      	ldr	r3, [pc, #48]	; (8024d58 <prvInsertBlockIntoFreeList+0xb0>)
 8024d28:	681a      	ldr	r2, [r3, #0]
 8024d2a:	687b      	ldr	r3, [r7, #4]
 8024d2c:	601a      	str	r2, [r3, #0]
 8024d2e:	e003      	b.n	8024d38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8024d30:	68fb      	ldr	r3, [r7, #12]
 8024d32:	681a      	ldr	r2, [r3, #0]
 8024d34:	687b      	ldr	r3, [r7, #4]
 8024d36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8024d38:	68fa      	ldr	r2, [r7, #12]
 8024d3a:	687b      	ldr	r3, [r7, #4]
 8024d3c:	429a      	cmp	r2, r3
 8024d3e:	d002      	beq.n	8024d46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8024d40:	68fb      	ldr	r3, [r7, #12]
 8024d42:	687a      	ldr	r2, [r7, #4]
 8024d44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8024d46:	bf00      	nop
 8024d48:	3714      	adds	r7, #20
 8024d4a:	46bd      	mov	sp, r7
 8024d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d50:	4770      	bx	lr
 8024d52:	bf00      	nop
 8024d54:	20009794 	.word	0x20009794
 8024d58:	2000979c 	.word	0x2000979c
 8024d5c:	00000000 	.word	0x00000000

08024d60 <cos>:
 8024d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024d62:	ec51 0b10 	vmov	r0, r1, d0
 8024d66:	4a1e      	ldr	r2, [pc, #120]	; (8024de0 <cos+0x80>)
 8024d68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8024d6c:	4293      	cmp	r3, r2
 8024d6e:	dc06      	bgt.n	8024d7e <cos+0x1e>
 8024d70:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8024dd8 <cos+0x78>
 8024d74:	f002 f970 	bl	8027058 <__kernel_cos>
 8024d78:	ec51 0b10 	vmov	r0, r1, d0
 8024d7c:	e007      	b.n	8024d8e <cos+0x2e>
 8024d7e:	4a19      	ldr	r2, [pc, #100]	; (8024de4 <cos+0x84>)
 8024d80:	4293      	cmp	r3, r2
 8024d82:	dd09      	ble.n	8024d98 <cos+0x38>
 8024d84:	ee10 2a10 	vmov	r2, s0
 8024d88:	460b      	mov	r3, r1
 8024d8a:	f7db fa85 	bl	8000298 <__aeabi_dsub>
 8024d8e:	ec41 0b10 	vmov	d0, r0, r1
 8024d92:	b005      	add	sp, #20
 8024d94:	f85d fb04 	ldr.w	pc, [sp], #4
 8024d98:	4668      	mov	r0, sp
 8024d9a:	f001 fd8d 	bl	80268b8 <__ieee754_rem_pio2>
 8024d9e:	f000 0003 	and.w	r0, r0, #3
 8024da2:	2801      	cmp	r0, #1
 8024da4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024da8:	ed9d 0b00 	vldr	d0, [sp]
 8024dac:	d007      	beq.n	8024dbe <cos+0x5e>
 8024dae:	2802      	cmp	r0, #2
 8024db0:	d00e      	beq.n	8024dd0 <cos+0x70>
 8024db2:	2800      	cmp	r0, #0
 8024db4:	d0de      	beq.n	8024d74 <cos+0x14>
 8024db6:	2001      	movs	r0, #1
 8024db8:	f002 fd56 	bl	8027868 <__kernel_sin>
 8024dbc:	e7dc      	b.n	8024d78 <cos+0x18>
 8024dbe:	f002 fd53 	bl	8027868 <__kernel_sin>
 8024dc2:	ec53 2b10 	vmov	r2, r3, d0
 8024dc6:	ee10 0a10 	vmov	r0, s0
 8024dca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8024dce:	e7de      	b.n	8024d8e <cos+0x2e>
 8024dd0:	f002 f942 	bl	8027058 <__kernel_cos>
 8024dd4:	e7f5      	b.n	8024dc2 <cos+0x62>
 8024dd6:	bf00      	nop
	...
 8024de0:	3fe921fb 	.word	0x3fe921fb
 8024de4:	7fefffff 	.word	0x7fefffff

08024de8 <floor>:
 8024de8:	ec51 0b10 	vmov	r0, r1, d0
 8024dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024df0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8024df4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8024df8:	2e13      	cmp	r6, #19
 8024dfa:	460c      	mov	r4, r1
 8024dfc:	ee10 5a10 	vmov	r5, s0
 8024e00:	4680      	mov	r8, r0
 8024e02:	dc34      	bgt.n	8024e6e <floor+0x86>
 8024e04:	2e00      	cmp	r6, #0
 8024e06:	da16      	bge.n	8024e36 <floor+0x4e>
 8024e08:	a335      	add	r3, pc, #212	; (adr r3, 8024ee0 <floor+0xf8>)
 8024e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e0e:	f7db fa45 	bl	800029c <__adddf3>
 8024e12:	2200      	movs	r2, #0
 8024e14:	2300      	movs	r3, #0
 8024e16:	f7db fe87 	bl	8000b28 <__aeabi_dcmpgt>
 8024e1a:	b148      	cbz	r0, 8024e30 <floor+0x48>
 8024e1c:	2c00      	cmp	r4, #0
 8024e1e:	da59      	bge.n	8024ed4 <floor+0xec>
 8024e20:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8024e24:	4a30      	ldr	r2, [pc, #192]	; (8024ee8 <floor+0x100>)
 8024e26:	432b      	orrs	r3, r5
 8024e28:	2500      	movs	r5, #0
 8024e2a:	42ab      	cmp	r3, r5
 8024e2c:	bf18      	it	ne
 8024e2e:	4614      	movne	r4, r2
 8024e30:	4621      	mov	r1, r4
 8024e32:	4628      	mov	r0, r5
 8024e34:	e025      	b.n	8024e82 <floor+0x9a>
 8024e36:	4f2d      	ldr	r7, [pc, #180]	; (8024eec <floor+0x104>)
 8024e38:	4137      	asrs	r7, r6
 8024e3a:	ea01 0307 	and.w	r3, r1, r7
 8024e3e:	4303      	orrs	r3, r0
 8024e40:	d01f      	beq.n	8024e82 <floor+0x9a>
 8024e42:	a327      	add	r3, pc, #156	; (adr r3, 8024ee0 <floor+0xf8>)
 8024e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e48:	f7db fa28 	bl	800029c <__adddf3>
 8024e4c:	2200      	movs	r2, #0
 8024e4e:	2300      	movs	r3, #0
 8024e50:	f7db fe6a 	bl	8000b28 <__aeabi_dcmpgt>
 8024e54:	2800      	cmp	r0, #0
 8024e56:	d0eb      	beq.n	8024e30 <floor+0x48>
 8024e58:	2c00      	cmp	r4, #0
 8024e5a:	bfbe      	ittt	lt
 8024e5c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8024e60:	fa43 f606 	asrlt.w	r6, r3, r6
 8024e64:	19a4      	addlt	r4, r4, r6
 8024e66:	ea24 0407 	bic.w	r4, r4, r7
 8024e6a:	2500      	movs	r5, #0
 8024e6c:	e7e0      	b.n	8024e30 <floor+0x48>
 8024e6e:	2e33      	cmp	r6, #51	; 0x33
 8024e70:	dd0b      	ble.n	8024e8a <floor+0xa2>
 8024e72:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024e76:	d104      	bne.n	8024e82 <floor+0x9a>
 8024e78:	ee10 2a10 	vmov	r2, s0
 8024e7c:	460b      	mov	r3, r1
 8024e7e:	f7db fa0d 	bl	800029c <__adddf3>
 8024e82:	ec41 0b10 	vmov	d0, r0, r1
 8024e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024e8a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8024e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8024e92:	fa23 f707 	lsr.w	r7, r3, r7
 8024e96:	4207      	tst	r7, r0
 8024e98:	d0f3      	beq.n	8024e82 <floor+0x9a>
 8024e9a:	a311      	add	r3, pc, #68	; (adr r3, 8024ee0 <floor+0xf8>)
 8024e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ea0:	f7db f9fc 	bl	800029c <__adddf3>
 8024ea4:	2200      	movs	r2, #0
 8024ea6:	2300      	movs	r3, #0
 8024ea8:	f7db fe3e 	bl	8000b28 <__aeabi_dcmpgt>
 8024eac:	2800      	cmp	r0, #0
 8024eae:	d0bf      	beq.n	8024e30 <floor+0x48>
 8024eb0:	2c00      	cmp	r4, #0
 8024eb2:	da02      	bge.n	8024eba <floor+0xd2>
 8024eb4:	2e14      	cmp	r6, #20
 8024eb6:	d103      	bne.n	8024ec0 <floor+0xd8>
 8024eb8:	3401      	adds	r4, #1
 8024eba:	ea25 0507 	bic.w	r5, r5, r7
 8024ebe:	e7b7      	b.n	8024e30 <floor+0x48>
 8024ec0:	2301      	movs	r3, #1
 8024ec2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8024ec6:	fa03 f606 	lsl.w	r6, r3, r6
 8024eca:	4435      	add	r5, r6
 8024ecc:	4545      	cmp	r5, r8
 8024ece:	bf38      	it	cc
 8024ed0:	18e4      	addcc	r4, r4, r3
 8024ed2:	e7f2      	b.n	8024eba <floor+0xd2>
 8024ed4:	2500      	movs	r5, #0
 8024ed6:	462c      	mov	r4, r5
 8024ed8:	e7aa      	b.n	8024e30 <floor+0x48>
 8024eda:	bf00      	nop
 8024edc:	f3af 8000 	nop.w
 8024ee0:	8800759c 	.word	0x8800759c
 8024ee4:	7e37e43c 	.word	0x7e37e43c
 8024ee8:	bff00000 	.word	0xbff00000
 8024eec:	000fffff 	.word	0x000fffff

08024ef0 <sin>:
 8024ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024ef2:	ec51 0b10 	vmov	r0, r1, d0
 8024ef6:	4a20      	ldr	r2, [pc, #128]	; (8024f78 <sin+0x88>)
 8024ef8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8024efc:	4293      	cmp	r3, r2
 8024efe:	dc07      	bgt.n	8024f10 <sin+0x20>
 8024f00:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8024f70 <sin+0x80>
 8024f04:	2000      	movs	r0, #0
 8024f06:	f002 fcaf 	bl	8027868 <__kernel_sin>
 8024f0a:	ec51 0b10 	vmov	r0, r1, d0
 8024f0e:	e007      	b.n	8024f20 <sin+0x30>
 8024f10:	4a1a      	ldr	r2, [pc, #104]	; (8024f7c <sin+0x8c>)
 8024f12:	4293      	cmp	r3, r2
 8024f14:	dd09      	ble.n	8024f2a <sin+0x3a>
 8024f16:	ee10 2a10 	vmov	r2, s0
 8024f1a:	460b      	mov	r3, r1
 8024f1c:	f7db f9bc 	bl	8000298 <__aeabi_dsub>
 8024f20:	ec41 0b10 	vmov	d0, r0, r1
 8024f24:	b005      	add	sp, #20
 8024f26:	f85d fb04 	ldr.w	pc, [sp], #4
 8024f2a:	4668      	mov	r0, sp
 8024f2c:	f001 fcc4 	bl	80268b8 <__ieee754_rem_pio2>
 8024f30:	f000 0003 	and.w	r0, r0, #3
 8024f34:	2801      	cmp	r0, #1
 8024f36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024f3a:	ed9d 0b00 	vldr	d0, [sp]
 8024f3e:	d004      	beq.n	8024f4a <sin+0x5a>
 8024f40:	2802      	cmp	r0, #2
 8024f42:	d005      	beq.n	8024f50 <sin+0x60>
 8024f44:	b970      	cbnz	r0, 8024f64 <sin+0x74>
 8024f46:	2001      	movs	r0, #1
 8024f48:	e7dd      	b.n	8024f06 <sin+0x16>
 8024f4a:	f002 f885 	bl	8027058 <__kernel_cos>
 8024f4e:	e7dc      	b.n	8024f0a <sin+0x1a>
 8024f50:	2001      	movs	r0, #1
 8024f52:	f002 fc89 	bl	8027868 <__kernel_sin>
 8024f56:	ec53 2b10 	vmov	r2, r3, d0
 8024f5a:	ee10 0a10 	vmov	r0, s0
 8024f5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8024f62:	e7dd      	b.n	8024f20 <sin+0x30>
 8024f64:	f002 f878 	bl	8027058 <__kernel_cos>
 8024f68:	e7f5      	b.n	8024f56 <sin+0x66>
 8024f6a:	bf00      	nop
 8024f6c:	f3af 8000 	nop.w
	...
 8024f78:	3fe921fb 	.word	0x3fe921fb
 8024f7c:	7fefffff 	.word	0x7fefffff

08024f80 <ceilf>:
 8024f80:	ee10 3a10 	vmov	r3, s0
 8024f84:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8024f88:	0dca      	lsrs	r2, r1, #23
 8024f8a:	3a7f      	subs	r2, #127	; 0x7f
 8024f8c:	2a16      	cmp	r2, #22
 8024f8e:	dc2a      	bgt.n	8024fe6 <ceilf+0x66>
 8024f90:	2a00      	cmp	r2, #0
 8024f92:	da11      	bge.n	8024fb8 <ceilf+0x38>
 8024f94:	eddf 7a18 	vldr	s15, [pc, #96]	; 8024ff8 <ceilf+0x78>
 8024f98:	ee30 0a27 	vadd.f32	s0, s0, s15
 8024f9c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8024fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024fa4:	dd05      	ble.n	8024fb2 <ceilf+0x32>
 8024fa6:	2b00      	cmp	r3, #0
 8024fa8:	db23      	blt.n	8024ff2 <ceilf+0x72>
 8024faa:	2900      	cmp	r1, #0
 8024fac:	bf18      	it	ne
 8024fae:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8024fb2:	ee00 3a10 	vmov	s0, r3
 8024fb6:	4770      	bx	lr
 8024fb8:	4910      	ldr	r1, [pc, #64]	; (8024ffc <ceilf+0x7c>)
 8024fba:	4111      	asrs	r1, r2
 8024fbc:	420b      	tst	r3, r1
 8024fbe:	d0fa      	beq.n	8024fb6 <ceilf+0x36>
 8024fc0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8024ff8 <ceilf+0x78>
 8024fc4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8024fc8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8024fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024fd0:	ddef      	ble.n	8024fb2 <ceilf+0x32>
 8024fd2:	2b00      	cmp	r3, #0
 8024fd4:	bfc2      	ittt	gt
 8024fd6:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8024fda:	fa40 f202 	asrgt.w	r2, r0, r2
 8024fde:	189b      	addgt	r3, r3, r2
 8024fe0:	ea23 0301 	bic.w	r3, r3, r1
 8024fe4:	e7e5      	b.n	8024fb2 <ceilf+0x32>
 8024fe6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8024fea:	d3e4      	bcc.n	8024fb6 <ceilf+0x36>
 8024fec:	ee30 0a00 	vadd.f32	s0, s0, s0
 8024ff0:	4770      	bx	lr
 8024ff2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8024ff6:	e7dc      	b.n	8024fb2 <ceilf+0x32>
 8024ff8:	7149f2ca 	.word	0x7149f2ca
 8024ffc:	007fffff 	.word	0x007fffff

08025000 <cosf>:
 8025000:	ee10 3a10 	vmov	r3, s0
 8025004:	b507      	push	{r0, r1, r2, lr}
 8025006:	4a1c      	ldr	r2, [pc, #112]	; (8025078 <cosf+0x78>)
 8025008:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802500c:	4293      	cmp	r3, r2
 802500e:	dc04      	bgt.n	802501a <cosf+0x1a>
 8025010:	eddf 0a1a 	vldr	s1, [pc, #104]	; 802507c <cosf+0x7c>
 8025014:	f002 fce2 	bl	80279dc <__kernel_cosf>
 8025018:	e004      	b.n	8025024 <cosf+0x24>
 802501a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802501e:	db04      	blt.n	802502a <cosf+0x2a>
 8025020:	ee30 0a40 	vsub.f32	s0, s0, s0
 8025024:	b003      	add	sp, #12
 8025026:	f85d fb04 	ldr.w	pc, [sp], #4
 802502a:	4668      	mov	r0, sp
 802502c:	f001 fee6 	bl	8026dfc <__ieee754_rem_pio2f>
 8025030:	f000 0003 	and.w	r0, r0, #3
 8025034:	2801      	cmp	r0, #1
 8025036:	d007      	beq.n	8025048 <cosf+0x48>
 8025038:	2802      	cmp	r0, #2
 802503a:	d00e      	beq.n	802505a <cosf+0x5a>
 802503c:	b9a0      	cbnz	r0, 8025068 <cosf+0x68>
 802503e:	eddd 0a01 	vldr	s1, [sp, #4]
 8025042:	ed9d 0a00 	vldr	s0, [sp]
 8025046:	e7e5      	b.n	8025014 <cosf+0x14>
 8025048:	eddd 0a01 	vldr	s1, [sp, #4]
 802504c:	ed9d 0a00 	vldr	s0, [sp]
 8025050:	f002 ffa4 	bl	8027f9c <__kernel_sinf>
 8025054:	eeb1 0a40 	vneg.f32	s0, s0
 8025058:	e7e4      	b.n	8025024 <cosf+0x24>
 802505a:	eddd 0a01 	vldr	s1, [sp, #4]
 802505e:	ed9d 0a00 	vldr	s0, [sp]
 8025062:	f002 fcbb 	bl	80279dc <__kernel_cosf>
 8025066:	e7f5      	b.n	8025054 <cosf+0x54>
 8025068:	2001      	movs	r0, #1
 802506a:	eddd 0a01 	vldr	s1, [sp, #4]
 802506e:	ed9d 0a00 	vldr	s0, [sp]
 8025072:	f002 ff93 	bl	8027f9c <__kernel_sinf>
 8025076:	e7d5      	b.n	8025024 <cosf+0x24>
 8025078:	3f490fd8 	.word	0x3f490fd8
 802507c:	00000000 	.word	0x00000000

08025080 <floorf>:
 8025080:	ee10 3a10 	vmov	r3, s0
 8025084:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8025088:	0dca      	lsrs	r2, r1, #23
 802508a:	3a7f      	subs	r2, #127	; 0x7f
 802508c:	2a16      	cmp	r2, #22
 802508e:	dc2a      	bgt.n	80250e6 <floorf+0x66>
 8025090:	2a00      	cmp	r2, #0
 8025092:	da11      	bge.n	80250b8 <floorf+0x38>
 8025094:	eddf 7a18 	vldr	s15, [pc, #96]	; 80250f8 <floorf+0x78>
 8025098:	ee30 0a27 	vadd.f32	s0, s0, s15
 802509c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80250a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80250a4:	dd05      	ble.n	80250b2 <floorf+0x32>
 80250a6:	2b00      	cmp	r3, #0
 80250a8:	da23      	bge.n	80250f2 <floorf+0x72>
 80250aa:	4a14      	ldr	r2, [pc, #80]	; (80250fc <floorf+0x7c>)
 80250ac:	2900      	cmp	r1, #0
 80250ae:	bf18      	it	ne
 80250b0:	4613      	movne	r3, r2
 80250b2:	ee00 3a10 	vmov	s0, r3
 80250b6:	4770      	bx	lr
 80250b8:	4911      	ldr	r1, [pc, #68]	; (8025100 <floorf+0x80>)
 80250ba:	4111      	asrs	r1, r2
 80250bc:	420b      	tst	r3, r1
 80250be:	d0fa      	beq.n	80250b6 <floorf+0x36>
 80250c0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80250f8 <floorf+0x78>
 80250c4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80250c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80250cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80250d0:	ddef      	ble.n	80250b2 <floorf+0x32>
 80250d2:	2b00      	cmp	r3, #0
 80250d4:	bfbe      	ittt	lt
 80250d6:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80250da:	fa40 f202 	asrlt.w	r2, r0, r2
 80250de:	189b      	addlt	r3, r3, r2
 80250e0:	ea23 0301 	bic.w	r3, r3, r1
 80250e4:	e7e5      	b.n	80250b2 <floorf+0x32>
 80250e6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80250ea:	d3e4      	bcc.n	80250b6 <floorf+0x36>
 80250ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 80250f0:	4770      	bx	lr
 80250f2:	2300      	movs	r3, #0
 80250f4:	e7dd      	b.n	80250b2 <floorf+0x32>
 80250f6:	bf00      	nop
 80250f8:	7149f2ca 	.word	0x7149f2ca
 80250fc:	bf800000 	.word	0xbf800000
 8025100:	007fffff 	.word	0x007fffff

08025104 <sinf>:
 8025104:	ee10 3a10 	vmov	r3, s0
 8025108:	b507      	push	{r0, r1, r2, lr}
 802510a:	4a1d      	ldr	r2, [pc, #116]	; (8025180 <sinf+0x7c>)
 802510c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025110:	4293      	cmp	r3, r2
 8025112:	dc05      	bgt.n	8025120 <sinf+0x1c>
 8025114:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8025184 <sinf+0x80>
 8025118:	2000      	movs	r0, #0
 802511a:	f002 ff3f 	bl	8027f9c <__kernel_sinf>
 802511e:	e004      	b.n	802512a <sinf+0x26>
 8025120:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8025124:	db04      	blt.n	8025130 <sinf+0x2c>
 8025126:	ee30 0a40 	vsub.f32	s0, s0, s0
 802512a:	b003      	add	sp, #12
 802512c:	f85d fb04 	ldr.w	pc, [sp], #4
 8025130:	4668      	mov	r0, sp
 8025132:	f001 fe63 	bl	8026dfc <__ieee754_rem_pio2f>
 8025136:	f000 0003 	and.w	r0, r0, #3
 802513a:	2801      	cmp	r0, #1
 802513c:	d008      	beq.n	8025150 <sinf+0x4c>
 802513e:	2802      	cmp	r0, #2
 8025140:	d00d      	beq.n	802515e <sinf+0x5a>
 8025142:	b9b0      	cbnz	r0, 8025172 <sinf+0x6e>
 8025144:	2001      	movs	r0, #1
 8025146:	eddd 0a01 	vldr	s1, [sp, #4]
 802514a:	ed9d 0a00 	vldr	s0, [sp]
 802514e:	e7e4      	b.n	802511a <sinf+0x16>
 8025150:	eddd 0a01 	vldr	s1, [sp, #4]
 8025154:	ed9d 0a00 	vldr	s0, [sp]
 8025158:	f002 fc40 	bl	80279dc <__kernel_cosf>
 802515c:	e7e5      	b.n	802512a <sinf+0x26>
 802515e:	2001      	movs	r0, #1
 8025160:	eddd 0a01 	vldr	s1, [sp, #4]
 8025164:	ed9d 0a00 	vldr	s0, [sp]
 8025168:	f002 ff18 	bl	8027f9c <__kernel_sinf>
 802516c:	eeb1 0a40 	vneg.f32	s0, s0
 8025170:	e7db      	b.n	802512a <sinf+0x26>
 8025172:	eddd 0a01 	vldr	s1, [sp, #4]
 8025176:	ed9d 0a00 	vldr	s0, [sp]
 802517a:	f002 fc2f 	bl	80279dc <__kernel_cosf>
 802517e:	e7f5      	b.n	802516c <sinf+0x68>
 8025180:	3f490fd8 	.word	0x3f490fd8
 8025184:	00000000 	.word	0x00000000

08025188 <asin>:
 8025188:	b5f0      	push	{r4, r5, r6, r7, lr}
 802518a:	ed2d 8b02 	vpush	{d8}
 802518e:	4e26      	ldr	r6, [pc, #152]	; (8025228 <asin+0xa0>)
 8025190:	b08b      	sub	sp, #44	; 0x2c
 8025192:	ec55 4b10 	vmov	r4, r5, d0
 8025196:	f000 fa7f 	bl	8025698 <__ieee754_asin>
 802519a:	f996 3000 	ldrsb.w	r3, [r6]
 802519e:	eeb0 8a40 	vmov.f32	s16, s0
 80251a2:	eef0 8a60 	vmov.f32	s17, s1
 80251a6:	3301      	adds	r3, #1
 80251a8:	d036      	beq.n	8025218 <asin+0x90>
 80251aa:	4622      	mov	r2, r4
 80251ac:	462b      	mov	r3, r5
 80251ae:	4620      	mov	r0, r4
 80251b0:	4629      	mov	r1, r5
 80251b2:	f7db fcc3 	bl	8000b3c <__aeabi_dcmpun>
 80251b6:	4607      	mov	r7, r0
 80251b8:	bb70      	cbnz	r0, 8025218 <asin+0x90>
 80251ba:	ec45 4b10 	vmov	d0, r4, r5
 80251be:	f003 f8d7 	bl	8028370 <fabs>
 80251c2:	2200      	movs	r2, #0
 80251c4:	4b19      	ldr	r3, [pc, #100]	; (802522c <asin+0xa4>)
 80251c6:	ec51 0b10 	vmov	r0, r1, d0
 80251ca:	f7db fcad 	bl	8000b28 <__aeabi_dcmpgt>
 80251ce:	b318      	cbz	r0, 8025218 <asin+0x90>
 80251d0:	2301      	movs	r3, #1
 80251d2:	9300      	str	r3, [sp, #0]
 80251d4:	4816      	ldr	r0, [pc, #88]	; (8025230 <asin+0xa8>)
 80251d6:	4b17      	ldr	r3, [pc, #92]	; (8025234 <asin+0xac>)
 80251d8:	9301      	str	r3, [sp, #4]
 80251da:	9708      	str	r7, [sp, #32]
 80251dc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80251e0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80251e4:	f003 f8d8 	bl	8028398 <nan>
 80251e8:	f996 3000 	ldrsb.w	r3, [r6]
 80251ec:	2b02      	cmp	r3, #2
 80251ee:	ed8d 0b06 	vstr	d0, [sp, #24]
 80251f2:	d104      	bne.n	80251fe <asin+0x76>
 80251f4:	f003 fa74 	bl	80286e0 <__errno>
 80251f8:	2321      	movs	r3, #33	; 0x21
 80251fa:	6003      	str	r3, [r0, #0]
 80251fc:	e004      	b.n	8025208 <asin+0x80>
 80251fe:	4668      	mov	r0, sp
 8025200:	f003 f8c7 	bl	8028392 <matherr>
 8025204:	2800      	cmp	r0, #0
 8025206:	d0f5      	beq.n	80251f4 <asin+0x6c>
 8025208:	9b08      	ldr	r3, [sp, #32]
 802520a:	b11b      	cbz	r3, 8025214 <asin+0x8c>
 802520c:	f003 fa68 	bl	80286e0 <__errno>
 8025210:	9b08      	ldr	r3, [sp, #32]
 8025212:	6003      	str	r3, [r0, #0]
 8025214:	ed9d 8b06 	vldr	d8, [sp, #24]
 8025218:	eeb0 0a48 	vmov.f32	s0, s16
 802521c:	eef0 0a68 	vmov.f32	s1, s17
 8025220:	b00b      	add	sp, #44	; 0x2c
 8025222:	ecbd 8b02 	vpop	{d8}
 8025226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025228:	20000688 	.word	0x20000688
 802522c:	3ff00000 	.word	0x3ff00000
 8025230:	0802e5cb 	.word	0x0802e5cb
 8025234:	0802df40 	.word	0x0802df40

08025238 <atan2>:
 8025238:	f000 bc3e 	b.w	8025ab8 <__ieee754_atan2>

0802523c <fmod>:
 802523c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025240:	ed2d 8b02 	vpush	{d8}
 8025244:	b08b      	sub	sp, #44	; 0x2c
 8025246:	ec55 4b10 	vmov	r4, r5, d0
 802524a:	ec57 6b11 	vmov	r6, r7, d1
 802524e:	f000 fd11 	bl	8025c74 <__ieee754_fmod>
 8025252:	4b2a      	ldr	r3, [pc, #168]	; (80252fc <fmod+0xc0>)
 8025254:	eeb0 8a40 	vmov.f32	s16, s0
 8025258:	eef0 8a60 	vmov.f32	s17, s1
 802525c:	f993 8000 	ldrsb.w	r8, [r3]
 8025260:	f1b8 3fff 	cmp.w	r8, #4294967295
 8025264:	d030      	beq.n	80252c8 <fmod+0x8c>
 8025266:	4632      	mov	r2, r6
 8025268:	463b      	mov	r3, r7
 802526a:	4630      	mov	r0, r6
 802526c:	4639      	mov	r1, r7
 802526e:	f7db fc65 	bl	8000b3c <__aeabi_dcmpun>
 8025272:	bb48      	cbnz	r0, 80252c8 <fmod+0x8c>
 8025274:	4622      	mov	r2, r4
 8025276:	462b      	mov	r3, r5
 8025278:	4620      	mov	r0, r4
 802527a:	4629      	mov	r1, r5
 802527c:	f7db fc5e 	bl	8000b3c <__aeabi_dcmpun>
 8025280:	4681      	mov	r9, r0
 8025282:	bb08      	cbnz	r0, 80252c8 <fmod+0x8c>
 8025284:	2200      	movs	r2, #0
 8025286:	2300      	movs	r3, #0
 8025288:	4630      	mov	r0, r6
 802528a:	4639      	mov	r1, r7
 802528c:	f7db fc24 	bl	8000ad8 <__aeabi_dcmpeq>
 8025290:	b1d0      	cbz	r0, 80252c8 <fmod+0x8c>
 8025292:	2301      	movs	r3, #1
 8025294:	9300      	str	r3, [sp, #0]
 8025296:	4b1a      	ldr	r3, [pc, #104]	; (8025300 <fmod+0xc4>)
 8025298:	9301      	str	r3, [sp, #4]
 802529a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 802529e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80252a2:	f8cd 9020 	str.w	r9, [sp, #32]
 80252a6:	f1b8 0f00 	cmp.w	r8, #0
 80252aa:	d116      	bne.n	80252da <fmod+0x9e>
 80252ac:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80252b0:	4668      	mov	r0, sp
 80252b2:	f003 f86e 	bl	8028392 <matherr>
 80252b6:	b1d8      	cbz	r0, 80252f0 <fmod+0xb4>
 80252b8:	9b08      	ldr	r3, [sp, #32]
 80252ba:	b11b      	cbz	r3, 80252c4 <fmod+0x88>
 80252bc:	f003 fa10 	bl	80286e0 <__errno>
 80252c0:	9b08      	ldr	r3, [sp, #32]
 80252c2:	6003      	str	r3, [r0, #0]
 80252c4:	ed9d 8b06 	vldr	d8, [sp, #24]
 80252c8:	eeb0 0a48 	vmov.f32	s0, s16
 80252cc:	eef0 0a68 	vmov.f32	s1, s17
 80252d0:	b00b      	add	sp, #44	; 0x2c
 80252d2:	ecbd 8b02 	vpop	{d8}
 80252d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80252da:	2200      	movs	r2, #0
 80252dc:	2300      	movs	r3, #0
 80252de:	4610      	mov	r0, r2
 80252e0:	4619      	mov	r1, r3
 80252e2:	f7db fabb 	bl	800085c <__aeabi_ddiv>
 80252e6:	f1b8 0f02 	cmp.w	r8, #2
 80252ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80252ee:	d1df      	bne.n	80252b0 <fmod+0x74>
 80252f0:	f003 f9f6 	bl	80286e0 <__errno>
 80252f4:	2321      	movs	r3, #33	; 0x21
 80252f6:	6003      	str	r3, [r0, #0]
 80252f8:	e7de      	b.n	80252b8 <fmod+0x7c>
 80252fa:	bf00      	nop
 80252fc:	20000688 	.word	0x20000688
 8025300:	0802df45 	.word	0x0802df45

08025304 <pow>:
 8025304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025308:	ed2d 8b04 	vpush	{d8-d9}
 802530c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80255e0 <pow+0x2dc>
 8025310:	b08d      	sub	sp, #52	; 0x34
 8025312:	ec57 6b10 	vmov	r6, r7, d0
 8025316:	ec55 4b11 	vmov	r4, r5, d1
 802531a:	f000 fdbd 	bl	8025e98 <__ieee754_pow>
 802531e:	f999 3000 	ldrsb.w	r3, [r9]
 8025322:	9300      	str	r3, [sp, #0]
 8025324:	3301      	adds	r3, #1
 8025326:	eeb0 8a40 	vmov.f32	s16, s0
 802532a:	eef0 8a60 	vmov.f32	s17, s1
 802532e:	46c8      	mov	r8, r9
 8025330:	d05f      	beq.n	80253f2 <pow+0xee>
 8025332:	4622      	mov	r2, r4
 8025334:	462b      	mov	r3, r5
 8025336:	4620      	mov	r0, r4
 8025338:	4629      	mov	r1, r5
 802533a:	f7db fbff 	bl	8000b3c <__aeabi_dcmpun>
 802533e:	4683      	mov	fp, r0
 8025340:	2800      	cmp	r0, #0
 8025342:	d156      	bne.n	80253f2 <pow+0xee>
 8025344:	4632      	mov	r2, r6
 8025346:	463b      	mov	r3, r7
 8025348:	4630      	mov	r0, r6
 802534a:	4639      	mov	r1, r7
 802534c:	f7db fbf6 	bl	8000b3c <__aeabi_dcmpun>
 8025350:	9001      	str	r0, [sp, #4]
 8025352:	b1e8      	cbz	r0, 8025390 <pow+0x8c>
 8025354:	2200      	movs	r2, #0
 8025356:	2300      	movs	r3, #0
 8025358:	4620      	mov	r0, r4
 802535a:	4629      	mov	r1, r5
 802535c:	f7db fbbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8025360:	2800      	cmp	r0, #0
 8025362:	d046      	beq.n	80253f2 <pow+0xee>
 8025364:	2301      	movs	r3, #1
 8025366:	9302      	str	r3, [sp, #8]
 8025368:	4b96      	ldr	r3, [pc, #600]	; (80255c4 <pow+0x2c0>)
 802536a:	9303      	str	r3, [sp, #12]
 802536c:	4b96      	ldr	r3, [pc, #600]	; (80255c8 <pow+0x2c4>)
 802536e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8025372:	2200      	movs	r2, #0
 8025374:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8025378:	9b00      	ldr	r3, [sp, #0]
 802537a:	2b02      	cmp	r3, #2
 802537c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8025380:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8025384:	d033      	beq.n	80253ee <pow+0xea>
 8025386:	a802      	add	r0, sp, #8
 8025388:	f003 f803 	bl	8028392 <matherr>
 802538c:	bb48      	cbnz	r0, 80253e2 <pow+0xde>
 802538e:	e05d      	b.n	802544c <pow+0x148>
 8025390:	f04f 0a00 	mov.w	sl, #0
 8025394:	f04f 0b00 	mov.w	fp, #0
 8025398:	4652      	mov	r2, sl
 802539a:	465b      	mov	r3, fp
 802539c:	4630      	mov	r0, r6
 802539e:	4639      	mov	r1, r7
 80253a0:	f7db fb9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80253a4:	ec4b ab19 	vmov	d9, sl, fp
 80253a8:	2800      	cmp	r0, #0
 80253aa:	d054      	beq.n	8025456 <pow+0x152>
 80253ac:	4652      	mov	r2, sl
 80253ae:	465b      	mov	r3, fp
 80253b0:	4620      	mov	r0, r4
 80253b2:	4629      	mov	r1, r5
 80253b4:	f7db fb90 	bl	8000ad8 <__aeabi_dcmpeq>
 80253b8:	4680      	mov	r8, r0
 80253ba:	b318      	cbz	r0, 8025404 <pow+0x100>
 80253bc:	2301      	movs	r3, #1
 80253be:	9302      	str	r3, [sp, #8]
 80253c0:	4b80      	ldr	r3, [pc, #512]	; (80255c4 <pow+0x2c0>)
 80253c2:	9303      	str	r3, [sp, #12]
 80253c4:	9b01      	ldr	r3, [sp, #4]
 80253c6:	930a      	str	r3, [sp, #40]	; 0x28
 80253c8:	9b00      	ldr	r3, [sp, #0]
 80253ca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80253ce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80253d2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80253d6:	2b00      	cmp	r3, #0
 80253d8:	d0d5      	beq.n	8025386 <pow+0x82>
 80253da:	4b7b      	ldr	r3, [pc, #492]	; (80255c8 <pow+0x2c4>)
 80253dc:	2200      	movs	r2, #0
 80253de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80253e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80253e4:	b11b      	cbz	r3, 80253ee <pow+0xea>
 80253e6:	f003 f97b 	bl	80286e0 <__errno>
 80253ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80253ec:	6003      	str	r3, [r0, #0]
 80253ee:	ed9d 8b08 	vldr	d8, [sp, #32]
 80253f2:	eeb0 0a48 	vmov.f32	s0, s16
 80253f6:	eef0 0a68 	vmov.f32	s1, s17
 80253fa:	b00d      	add	sp, #52	; 0x34
 80253fc:	ecbd 8b04 	vpop	{d8-d9}
 8025400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025404:	ec45 4b10 	vmov	d0, r4, r5
 8025408:	f002 ffbb 	bl	8028382 <finite>
 802540c:	2800      	cmp	r0, #0
 802540e:	d0f0      	beq.n	80253f2 <pow+0xee>
 8025410:	4652      	mov	r2, sl
 8025412:	465b      	mov	r3, fp
 8025414:	4620      	mov	r0, r4
 8025416:	4629      	mov	r1, r5
 8025418:	f7db fb68 	bl	8000aec <__aeabi_dcmplt>
 802541c:	2800      	cmp	r0, #0
 802541e:	d0e8      	beq.n	80253f2 <pow+0xee>
 8025420:	2301      	movs	r3, #1
 8025422:	9302      	str	r3, [sp, #8]
 8025424:	4b67      	ldr	r3, [pc, #412]	; (80255c4 <pow+0x2c0>)
 8025426:	9303      	str	r3, [sp, #12]
 8025428:	f999 3000 	ldrsb.w	r3, [r9]
 802542c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8025430:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8025434:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8025438:	b913      	cbnz	r3, 8025440 <pow+0x13c>
 802543a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 802543e:	e7a2      	b.n	8025386 <pow+0x82>
 8025440:	4962      	ldr	r1, [pc, #392]	; (80255cc <pow+0x2c8>)
 8025442:	2000      	movs	r0, #0
 8025444:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8025448:	2b02      	cmp	r3, #2
 802544a:	d19c      	bne.n	8025386 <pow+0x82>
 802544c:	f003 f948 	bl	80286e0 <__errno>
 8025450:	2321      	movs	r3, #33	; 0x21
 8025452:	6003      	str	r3, [r0, #0]
 8025454:	e7c5      	b.n	80253e2 <pow+0xde>
 8025456:	eeb0 0a48 	vmov.f32	s0, s16
 802545a:	eef0 0a68 	vmov.f32	s1, s17
 802545e:	f002 ff90 	bl	8028382 <finite>
 8025462:	9000      	str	r0, [sp, #0]
 8025464:	2800      	cmp	r0, #0
 8025466:	f040 8081 	bne.w	802556c <pow+0x268>
 802546a:	ec47 6b10 	vmov	d0, r6, r7
 802546e:	f002 ff88 	bl	8028382 <finite>
 8025472:	2800      	cmp	r0, #0
 8025474:	d07a      	beq.n	802556c <pow+0x268>
 8025476:	ec45 4b10 	vmov	d0, r4, r5
 802547a:	f002 ff82 	bl	8028382 <finite>
 802547e:	2800      	cmp	r0, #0
 8025480:	d074      	beq.n	802556c <pow+0x268>
 8025482:	ec53 2b18 	vmov	r2, r3, d8
 8025486:	ee18 0a10 	vmov	r0, s16
 802548a:	4619      	mov	r1, r3
 802548c:	f7db fb56 	bl	8000b3c <__aeabi_dcmpun>
 8025490:	f999 9000 	ldrsb.w	r9, [r9]
 8025494:	4b4b      	ldr	r3, [pc, #300]	; (80255c4 <pow+0x2c0>)
 8025496:	b1b0      	cbz	r0, 80254c6 <pow+0x1c2>
 8025498:	2201      	movs	r2, #1
 802549a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802549e:	9b00      	ldr	r3, [sp, #0]
 80254a0:	930a      	str	r3, [sp, #40]	; 0x28
 80254a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80254a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80254aa:	f1b9 0f00 	cmp.w	r9, #0
 80254ae:	d0c4      	beq.n	802543a <pow+0x136>
 80254b0:	4652      	mov	r2, sl
 80254b2:	465b      	mov	r3, fp
 80254b4:	4650      	mov	r0, sl
 80254b6:	4659      	mov	r1, fp
 80254b8:	f7db f9d0 	bl	800085c <__aeabi_ddiv>
 80254bc:	f1b9 0f02 	cmp.w	r9, #2
 80254c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80254c4:	e7c1      	b.n	802544a <pow+0x146>
 80254c6:	2203      	movs	r2, #3
 80254c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80254cc:	900a      	str	r0, [sp, #40]	; 0x28
 80254ce:	4629      	mov	r1, r5
 80254d0:	4620      	mov	r0, r4
 80254d2:	2200      	movs	r2, #0
 80254d4:	4b3e      	ldr	r3, [pc, #248]	; (80255d0 <pow+0x2cc>)
 80254d6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80254da:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80254de:	f7db f893 	bl	8000608 <__aeabi_dmul>
 80254e2:	4604      	mov	r4, r0
 80254e4:	460d      	mov	r5, r1
 80254e6:	f1b9 0f00 	cmp.w	r9, #0
 80254ea:	d124      	bne.n	8025536 <pow+0x232>
 80254ec:	4b39      	ldr	r3, [pc, #228]	; (80255d4 <pow+0x2d0>)
 80254ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80254f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80254f6:	4630      	mov	r0, r6
 80254f8:	4652      	mov	r2, sl
 80254fa:	465b      	mov	r3, fp
 80254fc:	4639      	mov	r1, r7
 80254fe:	f7db faf5 	bl	8000aec <__aeabi_dcmplt>
 8025502:	2800      	cmp	r0, #0
 8025504:	d056      	beq.n	80255b4 <pow+0x2b0>
 8025506:	ec45 4b10 	vmov	d0, r4, r5
 802550a:	f002 ff4d 	bl	80283a8 <rint>
 802550e:	4622      	mov	r2, r4
 8025510:	462b      	mov	r3, r5
 8025512:	ec51 0b10 	vmov	r0, r1, d0
 8025516:	f7db fadf 	bl	8000ad8 <__aeabi_dcmpeq>
 802551a:	b920      	cbnz	r0, 8025526 <pow+0x222>
 802551c:	4b2e      	ldr	r3, [pc, #184]	; (80255d8 <pow+0x2d4>)
 802551e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8025522:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8025526:	f998 3000 	ldrsb.w	r3, [r8]
 802552a:	2b02      	cmp	r3, #2
 802552c:	d142      	bne.n	80255b4 <pow+0x2b0>
 802552e:	f003 f8d7 	bl	80286e0 <__errno>
 8025532:	2322      	movs	r3, #34	; 0x22
 8025534:	e78d      	b.n	8025452 <pow+0x14e>
 8025536:	4b29      	ldr	r3, [pc, #164]	; (80255dc <pow+0x2d8>)
 8025538:	2200      	movs	r2, #0
 802553a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802553e:	4630      	mov	r0, r6
 8025540:	4652      	mov	r2, sl
 8025542:	465b      	mov	r3, fp
 8025544:	4639      	mov	r1, r7
 8025546:	f7db fad1 	bl	8000aec <__aeabi_dcmplt>
 802554a:	2800      	cmp	r0, #0
 802554c:	d0eb      	beq.n	8025526 <pow+0x222>
 802554e:	ec45 4b10 	vmov	d0, r4, r5
 8025552:	f002 ff29 	bl	80283a8 <rint>
 8025556:	4622      	mov	r2, r4
 8025558:	462b      	mov	r3, r5
 802555a:	ec51 0b10 	vmov	r0, r1, d0
 802555e:	f7db fabb 	bl	8000ad8 <__aeabi_dcmpeq>
 8025562:	2800      	cmp	r0, #0
 8025564:	d1df      	bne.n	8025526 <pow+0x222>
 8025566:	2200      	movs	r2, #0
 8025568:	4b18      	ldr	r3, [pc, #96]	; (80255cc <pow+0x2c8>)
 802556a:	e7da      	b.n	8025522 <pow+0x21e>
 802556c:	2200      	movs	r2, #0
 802556e:	2300      	movs	r3, #0
 8025570:	ec51 0b18 	vmov	r0, r1, d8
 8025574:	f7db fab0 	bl	8000ad8 <__aeabi_dcmpeq>
 8025578:	2800      	cmp	r0, #0
 802557a:	f43f af3a 	beq.w	80253f2 <pow+0xee>
 802557e:	ec47 6b10 	vmov	d0, r6, r7
 8025582:	f002 fefe 	bl	8028382 <finite>
 8025586:	2800      	cmp	r0, #0
 8025588:	f43f af33 	beq.w	80253f2 <pow+0xee>
 802558c:	ec45 4b10 	vmov	d0, r4, r5
 8025590:	f002 fef7 	bl	8028382 <finite>
 8025594:	2800      	cmp	r0, #0
 8025596:	f43f af2c 	beq.w	80253f2 <pow+0xee>
 802559a:	2304      	movs	r3, #4
 802559c:	9302      	str	r3, [sp, #8]
 802559e:	4b09      	ldr	r3, [pc, #36]	; (80255c4 <pow+0x2c0>)
 80255a0:	9303      	str	r3, [sp, #12]
 80255a2:	2300      	movs	r3, #0
 80255a4:	930a      	str	r3, [sp, #40]	; 0x28
 80255a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80255aa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80255ae:	ed8d 9b08 	vstr	d9, [sp, #32]
 80255b2:	e7b8      	b.n	8025526 <pow+0x222>
 80255b4:	a802      	add	r0, sp, #8
 80255b6:	f002 feec 	bl	8028392 <matherr>
 80255ba:	2800      	cmp	r0, #0
 80255bc:	f47f af11 	bne.w	80253e2 <pow+0xde>
 80255c0:	e7b5      	b.n	802552e <pow+0x22a>
 80255c2:	bf00      	nop
 80255c4:	0802df4a 	.word	0x0802df4a
 80255c8:	3ff00000 	.word	0x3ff00000
 80255cc:	fff00000 	.word	0xfff00000
 80255d0:	3fe00000 	.word	0x3fe00000
 80255d4:	47efffff 	.word	0x47efffff
 80255d8:	c7efffff 	.word	0xc7efffff
 80255dc:	7ff00000 	.word	0x7ff00000
 80255e0:	20000688 	.word	0x20000688

080255e4 <sqrt>:
 80255e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80255e8:	ed2d 8b02 	vpush	{d8}
 80255ec:	b08b      	sub	sp, #44	; 0x2c
 80255ee:	ec55 4b10 	vmov	r4, r5, d0
 80255f2:	f001 fb53 	bl	8026c9c <__ieee754_sqrt>
 80255f6:	4b26      	ldr	r3, [pc, #152]	; (8025690 <sqrt+0xac>)
 80255f8:	eeb0 8a40 	vmov.f32	s16, s0
 80255fc:	eef0 8a60 	vmov.f32	s17, s1
 8025600:	f993 6000 	ldrsb.w	r6, [r3]
 8025604:	1c73      	adds	r3, r6, #1
 8025606:	d02a      	beq.n	802565e <sqrt+0x7a>
 8025608:	4622      	mov	r2, r4
 802560a:	462b      	mov	r3, r5
 802560c:	4620      	mov	r0, r4
 802560e:	4629      	mov	r1, r5
 8025610:	f7db fa94 	bl	8000b3c <__aeabi_dcmpun>
 8025614:	4607      	mov	r7, r0
 8025616:	bb10      	cbnz	r0, 802565e <sqrt+0x7a>
 8025618:	f04f 0800 	mov.w	r8, #0
 802561c:	f04f 0900 	mov.w	r9, #0
 8025620:	4642      	mov	r2, r8
 8025622:	464b      	mov	r3, r9
 8025624:	4620      	mov	r0, r4
 8025626:	4629      	mov	r1, r5
 8025628:	f7db fa60 	bl	8000aec <__aeabi_dcmplt>
 802562c:	b1b8      	cbz	r0, 802565e <sqrt+0x7a>
 802562e:	2301      	movs	r3, #1
 8025630:	9300      	str	r3, [sp, #0]
 8025632:	4b18      	ldr	r3, [pc, #96]	; (8025694 <sqrt+0xb0>)
 8025634:	9301      	str	r3, [sp, #4]
 8025636:	9708      	str	r7, [sp, #32]
 8025638:	e9cd 4504 	strd	r4, r5, [sp, #16]
 802563c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8025640:	b9b6      	cbnz	r6, 8025670 <sqrt+0x8c>
 8025642:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8025646:	4668      	mov	r0, sp
 8025648:	f002 fea3 	bl	8028392 <matherr>
 802564c:	b1d0      	cbz	r0, 8025684 <sqrt+0xa0>
 802564e:	9b08      	ldr	r3, [sp, #32]
 8025650:	b11b      	cbz	r3, 802565a <sqrt+0x76>
 8025652:	f003 f845 	bl	80286e0 <__errno>
 8025656:	9b08      	ldr	r3, [sp, #32]
 8025658:	6003      	str	r3, [r0, #0]
 802565a:	ed9d 8b06 	vldr	d8, [sp, #24]
 802565e:	eeb0 0a48 	vmov.f32	s0, s16
 8025662:	eef0 0a68 	vmov.f32	s1, s17
 8025666:	b00b      	add	sp, #44	; 0x2c
 8025668:	ecbd 8b02 	vpop	{d8}
 802566c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025670:	4642      	mov	r2, r8
 8025672:	464b      	mov	r3, r9
 8025674:	4640      	mov	r0, r8
 8025676:	4649      	mov	r1, r9
 8025678:	f7db f8f0 	bl	800085c <__aeabi_ddiv>
 802567c:	2e02      	cmp	r6, #2
 802567e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025682:	d1e0      	bne.n	8025646 <sqrt+0x62>
 8025684:	f003 f82c 	bl	80286e0 <__errno>
 8025688:	2321      	movs	r3, #33	; 0x21
 802568a:	6003      	str	r3, [r0, #0]
 802568c:	e7df      	b.n	802564e <sqrt+0x6a>
 802568e:	bf00      	nop
 8025690:	20000688 	.word	0x20000688
 8025694:	0802df4e 	.word	0x0802df4e

08025698 <__ieee754_asin>:
 8025698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802569c:	ec55 4b10 	vmov	r4, r5, d0
 80256a0:	4bcb      	ldr	r3, [pc, #812]	; (80259d0 <__ieee754_asin+0x338>)
 80256a2:	b087      	sub	sp, #28
 80256a4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80256a8:	429f      	cmp	r7, r3
 80256aa:	9501      	str	r5, [sp, #4]
 80256ac:	dd31      	ble.n	8025712 <__ieee754_asin+0x7a>
 80256ae:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 80256b2:	ee10 3a10 	vmov	r3, s0
 80256b6:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 80256ba:	433b      	orrs	r3, r7
 80256bc:	d117      	bne.n	80256ee <__ieee754_asin+0x56>
 80256be:	a3aa      	add	r3, pc, #680	; (adr r3, 8025968 <__ieee754_asin+0x2d0>)
 80256c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80256c4:	ee10 0a10 	vmov	r0, s0
 80256c8:	4629      	mov	r1, r5
 80256ca:	f7da ff9d 	bl	8000608 <__aeabi_dmul>
 80256ce:	a3a8      	add	r3, pc, #672	; (adr r3, 8025970 <__ieee754_asin+0x2d8>)
 80256d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80256d4:	4606      	mov	r6, r0
 80256d6:	460f      	mov	r7, r1
 80256d8:	4620      	mov	r0, r4
 80256da:	4629      	mov	r1, r5
 80256dc:	f7da ff94 	bl	8000608 <__aeabi_dmul>
 80256e0:	4602      	mov	r2, r0
 80256e2:	460b      	mov	r3, r1
 80256e4:	4630      	mov	r0, r6
 80256e6:	4639      	mov	r1, r7
 80256e8:	f7da fdd8 	bl	800029c <__adddf3>
 80256ec:	e00a      	b.n	8025704 <__ieee754_asin+0x6c>
 80256ee:	ee10 2a10 	vmov	r2, s0
 80256f2:	462b      	mov	r3, r5
 80256f4:	4620      	mov	r0, r4
 80256f6:	4629      	mov	r1, r5
 80256f8:	f7da fdce 	bl	8000298 <__aeabi_dsub>
 80256fc:	4602      	mov	r2, r0
 80256fe:	460b      	mov	r3, r1
 8025700:	f7db f8ac 	bl	800085c <__aeabi_ddiv>
 8025704:	4604      	mov	r4, r0
 8025706:	460d      	mov	r5, r1
 8025708:	ec45 4b10 	vmov	d0, r4, r5
 802570c:	b007      	add	sp, #28
 802570e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025712:	4bb0      	ldr	r3, [pc, #704]	; (80259d4 <__ieee754_asin+0x33c>)
 8025714:	429f      	cmp	r7, r3
 8025716:	dc11      	bgt.n	802573c <__ieee754_asin+0xa4>
 8025718:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 802571c:	f280 80ae 	bge.w	802587c <__ieee754_asin+0x1e4>
 8025720:	a395      	add	r3, pc, #596	; (adr r3, 8025978 <__ieee754_asin+0x2e0>)
 8025722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025726:	ee10 0a10 	vmov	r0, s0
 802572a:	4629      	mov	r1, r5
 802572c:	f7da fdb6 	bl	800029c <__adddf3>
 8025730:	2200      	movs	r2, #0
 8025732:	4ba9      	ldr	r3, [pc, #676]	; (80259d8 <__ieee754_asin+0x340>)
 8025734:	f7db f9f8 	bl	8000b28 <__aeabi_dcmpgt>
 8025738:	2800      	cmp	r0, #0
 802573a:	d1e5      	bne.n	8025708 <__ieee754_asin+0x70>
 802573c:	ec45 4b10 	vmov	d0, r4, r5
 8025740:	f002 fe16 	bl	8028370 <fabs>
 8025744:	2000      	movs	r0, #0
 8025746:	ec53 2b10 	vmov	r2, r3, d0
 802574a:	49a3      	ldr	r1, [pc, #652]	; (80259d8 <__ieee754_asin+0x340>)
 802574c:	f7da fda4 	bl	8000298 <__aeabi_dsub>
 8025750:	2200      	movs	r2, #0
 8025752:	4ba2      	ldr	r3, [pc, #648]	; (80259dc <__ieee754_asin+0x344>)
 8025754:	f7da ff58 	bl	8000608 <__aeabi_dmul>
 8025758:	a389      	add	r3, pc, #548	; (adr r3, 8025980 <__ieee754_asin+0x2e8>)
 802575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802575e:	4604      	mov	r4, r0
 8025760:	460d      	mov	r5, r1
 8025762:	f7da ff51 	bl	8000608 <__aeabi_dmul>
 8025766:	a388      	add	r3, pc, #544	; (adr r3, 8025988 <__ieee754_asin+0x2f0>)
 8025768:	e9d3 2300 	ldrd	r2, r3, [r3]
 802576c:	f7da fd96 	bl	800029c <__adddf3>
 8025770:	4622      	mov	r2, r4
 8025772:	462b      	mov	r3, r5
 8025774:	f7da ff48 	bl	8000608 <__aeabi_dmul>
 8025778:	a385      	add	r3, pc, #532	; (adr r3, 8025990 <__ieee754_asin+0x2f8>)
 802577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802577e:	f7da fd8b 	bl	8000298 <__aeabi_dsub>
 8025782:	4622      	mov	r2, r4
 8025784:	462b      	mov	r3, r5
 8025786:	f7da ff3f 	bl	8000608 <__aeabi_dmul>
 802578a:	a383      	add	r3, pc, #524	; (adr r3, 8025998 <__ieee754_asin+0x300>)
 802578c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025790:	f7da fd84 	bl	800029c <__adddf3>
 8025794:	4622      	mov	r2, r4
 8025796:	462b      	mov	r3, r5
 8025798:	f7da ff36 	bl	8000608 <__aeabi_dmul>
 802579c:	a380      	add	r3, pc, #512	; (adr r3, 80259a0 <__ieee754_asin+0x308>)
 802579e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257a2:	f7da fd79 	bl	8000298 <__aeabi_dsub>
 80257a6:	4622      	mov	r2, r4
 80257a8:	462b      	mov	r3, r5
 80257aa:	f7da ff2d 	bl	8000608 <__aeabi_dmul>
 80257ae:	a37e      	add	r3, pc, #504	; (adr r3, 80259a8 <__ieee754_asin+0x310>)
 80257b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257b4:	f7da fd72 	bl	800029c <__adddf3>
 80257b8:	4622      	mov	r2, r4
 80257ba:	462b      	mov	r3, r5
 80257bc:	f7da ff24 	bl	8000608 <__aeabi_dmul>
 80257c0:	a37b      	add	r3, pc, #492	; (adr r3, 80259b0 <__ieee754_asin+0x318>)
 80257c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257c6:	4680      	mov	r8, r0
 80257c8:	4689      	mov	r9, r1
 80257ca:	4620      	mov	r0, r4
 80257cc:	4629      	mov	r1, r5
 80257ce:	f7da ff1b 	bl	8000608 <__aeabi_dmul>
 80257d2:	a379      	add	r3, pc, #484	; (adr r3, 80259b8 <__ieee754_asin+0x320>)
 80257d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257d8:	f7da fd5e 	bl	8000298 <__aeabi_dsub>
 80257dc:	4622      	mov	r2, r4
 80257de:	462b      	mov	r3, r5
 80257e0:	f7da ff12 	bl	8000608 <__aeabi_dmul>
 80257e4:	a376      	add	r3, pc, #472	; (adr r3, 80259c0 <__ieee754_asin+0x328>)
 80257e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257ea:	f7da fd57 	bl	800029c <__adddf3>
 80257ee:	4622      	mov	r2, r4
 80257f0:	462b      	mov	r3, r5
 80257f2:	f7da ff09 	bl	8000608 <__aeabi_dmul>
 80257f6:	a374      	add	r3, pc, #464	; (adr r3, 80259c8 <__ieee754_asin+0x330>)
 80257f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257fc:	f7da fd4c 	bl	8000298 <__aeabi_dsub>
 8025800:	4622      	mov	r2, r4
 8025802:	462b      	mov	r3, r5
 8025804:	f7da ff00 	bl	8000608 <__aeabi_dmul>
 8025808:	4b73      	ldr	r3, [pc, #460]	; (80259d8 <__ieee754_asin+0x340>)
 802580a:	2200      	movs	r2, #0
 802580c:	f7da fd46 	bl	800029c <__adddf3>
 8025810:	ec45 4b10 	vmov	d0, r4, r5
 8025814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025818:	f001 fa40 	bl	8026c9c <__ieee754_sqrt>
 802581c:	4b70      	ldr	r3, [pc, #448]	; (80259e0 <__ieee754_asin+0x348>)
 802581e:	429f      	cmp	r7, r3
 8025820:	ec5b ab10 	vmov	sl, fp, d0
 8025824:	f340 80de 	ble.w	80259e4 <__ieee754_asin+0x34c>
 8025828:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802582c:	4640      	mov	r0, r8
 802582e:	4649      	mov	r1, r9
 8025830:	f7db f814 	bl	800085c <__aeabi_ddiv>
 8025834:	4652      	mov	r2, sl
 8025836:	465b      	mov	r3, fp
 8025838:	f7da fee6 	bl	8000608 <__aeabi_dmul>
 802583c:	4652      	mov	r2, sl
 802583e:	465b      	mov	r3, fp
 8025840:	f7da fd2c 	bl	800029c <__adddf3>
 8025844:	4602      	mov	r2, r0
 8025846:	460b      	mov	r3, r1
 8025848:	f7da fd28 	bl	800029c <__adddf3>
 802584c:	a348      	add	r3, pc, #288	; (adr r3, 8025970 <__ieee754_asin+0x2d8>)
 802584e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025852:	f7da fd21 	bl	8000298 <__aeabi_dsub>
 8025856:	4602      	mov	r2, r0
 8025858:	460b      	mov	r3, r1
 802585a:	a143      	add	r1, pc, #268	; (adr r1, 8025968 <__ieee754_asin+0x2d0>)
 802585c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025860:	f7da fd1a 	bl	8000298 <__aeabi_dsub>
 8025864:	9b01      	ldr	r3, [sp, #4]
 8025866:	2b00      	cmp	r3, #0
 8025868:	bfdc      	itt	le
 802586a:	4602      	movle	r2, r0
 802586c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8025870:	4604      	mov	r4, r0
 8025872:	460d      	mov	r5, r1
 8025874:	bfdc      	itt	le
 8025876:	4614      	movle	r4, r2
 8025878:	461d      	movle	r5, r3
 802587a:	e745      	b.n	8025708 <__ieee754_asin+0x70>
 802587c:	ee10 2a10 	vmov	r2, s0
 8025880:	ee10 0a10 	vmov	r0, s0
 8025884:	462b      	mov	r3, r5
 8025886:	4629      	mov	r1, r5
 8025888:	f7da febe 	bl	8000608 <__aeabi_dmul>
 802588c:	a33c      	add	r3, pc, #240	; (adr r3, 8025980 <__ieee754_asin+0x2e8>)
 802588e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025892:	4606      	mov	r6, r0
 8025894:	460f      	mov	r7, r1
 8025896:	f7da feb7 	bl	8000608 <__aeabi_dmul>
 802589a:	a33b      	add	r3, pc, #236	; (adr r3, 8025988 <__ieee754_asin+0x2f0>)
 802589c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258a0:	f7da fcfc 	bl	800029c <__adddf3>
 80258a4:	4632      	mov	r2, r6
 80258a6:	463b      	mov	r3, r7
 80258a8:	f7da feae 	bl	8000608 <__aeabi_dmul>
 80258ac:	a338      	add	r3, pc, #224	; (adr r3, 8025990 <__ieee754_asin+0x2f8>)
 80258ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258b2:	f7da fcf1 	bl	8000298 <__aeabi_dsub>
 80258b6:	4632      	mov	r2, r6
 80258b8:	463b      	mov	r3, r7
 80258ba:	f7da fea5 	bl	8000608 <__aeabi_dmul>
 80258be:	a336      	add	r3, pc, #216	; (adr r3, 8025998 <__ieee754_asin+0x300>)
 80258c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258c4:	f7da fcea 	bl	800029c <__adddf3>
 80258c8:	4632      	mov	r2, r6
 80258ca:	463b      	mov	r3, r7
 80258cc:	f7da fe9c 	bl	8000608 <__aeabi_dmul>
 80258d0:	a333      	add	r3, pc, #204	; (adr r3, 80259a0 <__ieee754_asin+0x308>)
 80258d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258d6:	f7da fcdf 	bl	8000298 <__aeabi_dsub>
 80258da:	4632      	mov	r2, r6
 80258dc:	463b      	mov	r3, r7
 80258de:	f7da fe93 	bl	8000608 <__aeabi_dmul>
 80258e2:	a331      	add	r3, pc, #196	; (adr r3, 80259a8 <__ieee754_asin+0x310>)
 80258e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258e8:	f7da fcd8 	bl	800029c <__adddf3>
 80258ec:	4632      	mov	r2, r6
 80258ee:	463b      	mov	r3, r7
 80258f0:	f7da fe8a 	bl	8000608 <__aeabi_dmul>
 80258f4:	a32e      	add	r3, pc, #184	; (adr r3, 80259b0 <__ieee754_asin+0x318>)
 80258f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258fa:	4680      	mov	r8, r0
 80258fc:	4689      	mov	r9, r1
 80258fe:	4630      	mov	r0, r6
 8025900:	4639      	mov	r1, r7
 8025902:	f7da fe81 	bl	8000608 <__aeabi_dmul>
 8025906:	a32c      	add	r3, pc, #176	; (adr r3, 80259b8 <__ieee754_asin+0x320>)
 8025908:	e9d3 2300 	ldrd	r2, r3, [r3]
 802590c:	f7da fcc4 	bl	8000298 <__aeabi_dsub>
 8025910:	4632      	mov	r2, r6
 8025912:	463b      	mov	r3, r7
 8025914:	f7da fe78 	bl	8000608 <__aeabi_dmul>
 8025918:	a329      	add	r3, pc, #164	; (adr r3, 80259c0 <__ieee754_asin+0x328>)
 802591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802591e:	f7da fcbd 	bl	800029c <__adddf3>
 8025922:	4632      	mov	r2, r6
 8025924:	463b      	mov	r3, r7
 8025926:	f7da fe6f 	bl	8000608 <__aeabi_dmul>
 802592a:	a327      	add	r3, pc, #156	; (adr r3, 80259c8 <__ieee754_asin+0x330>)
 802592c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025930:	f7da fcb2 	bl	8000298 <__aeabi_dsub>
 8025934:	4632      	mov	r2, r6
 8025936:	463b      	mov	r3, r7
 8025938:	f7da fe66 	bl	8000608 <__aeabi_dmul>
 802593c:	2200      	movs	r2, #0
 802593e:	4b26      	ldr	r3, [pc, #152]	; (80259d8 <__ieee754_asin+0x340>)
 8025940:	f7da fcac 	bl	800029c <__adddf3>
 8025944:	4602      	mov	r2, r0
 8025946:	460b      	mov	r3, r1
 8025948:	4640      	mov	r0, r8
 802594a:	4649      	mov	r1, r9
 802594c:	f7da ff86 	bl	800085c <__aeabi_ddiv>
 8025950:	4622      	mov	r2, r4
 8025952:	462b      	mov	r3, r5
 8025954:	f7da fe58 	bl	8000608 <__aeabi_dmul>
 8025958:	4602      	mov	r2, r0
 802595a:	460b      	mov	r3, r1
 802595c:	4620      	mov	r0, r4
 802595e:	4629      	mov	r1, r5
 8025960:	e6c2      	b.n	80256e8 <__ieee754_asin+0x50>
 8025962:	bf00      	nop
 8025964:	f3af 8000 	nop.w
 8025968:	54442d18 	.word	0x54442d18
 802596c:	3ff921fb 	.word	0x3ff921fb
 8025970:	33145c07 	.word	0x33145c07
 8025974:	3c91a626 	.word	0x3c91a626
 8025978:	8800759c 	.word	0x8800759c
 802597c:	7e37e43c 	.word	0x7e37e43c
 8025980:	0dfdf709 	.word	0x0dfdf709
 8025984:	3f023de1 	.word	0x3f023de1
 8025988:	7501b288 	.word	0x7501b288
 802598c:	3f49efe0 	.word	0x3f49efe0
 8025990:	b5688f3b 	.word	0xb5688f3b
 8025994:	3fa48228 	.word	0x3fa48228
 8025998:	0e884455 	.word	0x0e884455
 802599c:	3fc9c155 	.word	0x3fc9c155
 80259a0:	03eb6f7d 	.word	0x03eb6f7d
 80259a4:	3fd4d612 	.word	0x3fd4d612
 80259a8:	55555555 	.word	0x55555555
 80259ac:	3fc55555 	.word	0x3fc55555
 80259b0:	b12e9282 	.word	0xb12e9282
 80259b4:	3fb3b8c5 	.word	0x3fb3b8c5
 80259b8:	1b8d0159 	.word	0x1b8d0159
 80259bc:	3fe6066c 	.word	0x3fe6066c
 80259c0:	9c598ac8 	.word	0x9c598ac8
 80259c4:	40002ae5 	.word	0x40002ae5
 80259c8:	1c8a2d4b 	.word	0x1c8a2d4b
 80259cc:	40033a27 	.word	0x40033a27
 80259d0:	3fefffff 	.word	0x3fefffff
 80259d4:	3fdfffff 	.word	0x3fdfffff
 80259d8:	3ff00000 	.word	0x3ff00000
 80259dc:	3fe00000 	.word	0x3fe00000
 80259e0:	3fef3332 	.word	0x3fef3332
 80259e4:	ee10 2a10 	vmov	r2, s0
 80259e8:	ee10 0a10 	vmov	r0, s0
 80259ec:	465b      	mov	r3, fp
 80259ee:	4659      	mov	r1, fp
 80259f0:	f7da fc54 	bl	800029c <__adddf3>
 80259f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80259f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80259fc:	4640      	mov	r0, r8
 80259fe:	4649      	mov	r1, r9
 8025a00:	f7da ff2c 	bl	800085c <__aeabi_ddiv>
 8025a04:	4602      	mov	r2, r0
 8025a06:	460b      	mov	r3, r1
 8025a08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8025a0c:	f7da fdfc 	bl	8000608 <__aeabi_dmul>
 8025a10:	2600      	movs	r6, #0
 8025a12:	4680      	mov	r8, r0
 8025a14:	4689      	mov	r9, r1
 8025a16:	4632      	mov	r2, r6
 8025a18:	465b      	mov	r3, fp
 8025a1a:	4630      	mov	r0, r6
 8025a1c:	4659      	mov	r1, fp
 8025a1e:	f7da fdf3 	bl	8000608 <__aeabi_dmul>
 8025a22:	4602      	mov	r2, r0
 8025a24:	460b      	mov	r3, r1
 8025a26:	4620      	mov	r0, r4
 8025a28:	4629      	mov	r1, r5
 8025a2a:	f7da fc35 	bl	8000298 <__aeabi_dsub>
 8025a2e:	4632      	mov	r2, r6
 8025a30:	4604      	mov	r4, r0
 8025a32:	460d      	mov	r5, r1
 8025a34:	465b      	mov	r3, fp
 8025a36:	4650      	mov	r0, sl
 8025a38:	4659      	mov	r1, fp
 8025a3a:	f7da fc2f 	bl	800029c <__adddf3>
 8025a3e:	4602      	mov	r2, r0
 8025a40:	460b      	mov	r3, r1
 8025a42:	4620      	mov	r0, r4
 8025a44:	4629      	mov	r1, r5
 8025a46:	f7da ff09 	bl	800085c <__aeabi_ddiv>
 8025a4a:	4602      	mov	r2, r0
 8025a4c:	460b      	mov	r3, r1
 8025a4e:	f7da fc25 	bl	800029c <__adddf3>
 8025a52:	4602      	mov	r2, r0
 8025a54:	460b      	mov	r3, r1
 8025a56:	a114      	add	r1, pc, #80	; (adr r1, 8025aa8 <__ieee754_asin+0x410>)
 8025a58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025a5c:	f7da fc1c 	bl	8000298 <__aeabi_dsub>
 8025a60:	4602      	mov	r2, r0
 8025a62:	460b      	mov	r3, r1
 8025a64:	4640      	mov	r0, r8
 8025a66:	4649      	mov	r1, r9
 8025a68:	f7da fc16 	bl	8000298 <__aeabi_dsub>
 8025a6c:	465f      	mov	r7, fp
 8025a6e:	4604      	mov	r4, r0
 8025a70:	460d      	mov	r5, r1
 8025a72:	4632      	mov	r2, r6
 8025a74:	465b      	mov	r3, fp
 8025a76:	4630      	mov	r0, r6
 8025a78:	4639      	mov	r1, r7
 8025a7a:	f7da fc0f 	bl	800029c <__adddf3>
 8025a7e:	4602      	mov	r2, r0
 8025a80:	460b      	mov	r3, r1
 8025a82:	a10b      	add	r1, pc, #44	; (adr r1, 8025ab0 <__ieee754_asin+0x418>)
 8025a84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025a88:	f7da fc06 	bl	8000298 <__aeabi_dsub>
 8025a8c:	4602      	mov	r2, r0
 8025a8e:	460b      	mov	r3, r1
 8025a90:	4620      	mov	r0, r4
 8025a92:	4629      	mov	r1, r5
 8025a94:	f7da fc00 	bl	8000298 <__aeabi_dsub>
 8025a98:	4602      	mov	r2, r0
 8025a9a:	460b      	mov	r3, r1
 8025a9c:	a104      	add	r1, pc, #16	; (adr r1, 8025ab0 <__ieee754_asin+0x418>)
 8025a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025aa2:	e6dd      	b.n	8025860 <__ieee754_asin+0x1c8>
 8025aa4:	f3af 8000 	nop.w
 8025aa8:	33145c07 	.word	0x33145c07
 8025aac:	3c91a626 	.word	0x3c91a626
 8025ab0:	54442d18 	.word	0x54442d18
 8025ab4:	3fe921fb 	.word	0x3fe921fb

08025ab8 <__ieee754_atan2>:
 8025ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025abc:	ec57 6b11 	vmov	r6, r7, d1
 8025ac0:	4273      	negs	r3, r6
 8025ac2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8025ac6:	4333      	orrs	r3, r6
 8025ac8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8025c70 <__ieee754_atan2+0x1b8>
 8025acc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8025ad0:	4573      	cmp	r3, lr
 8025ad2:	ec51 0b10 	vmov	r0, r1, d0
 8025ad6:	ee11 8a10 	vmov	r8, s2
 8025ada:	d80a      	bhi.n	8025af2 <__ieee754_atan2+0x3a>
 8025adc:	4244      	negs	r4, r0
 8025ade:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8025ae2:	4304      	orrs	r4, r0
 8025ae4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8025ae8:	4574      	cmp	r4, lr
 8025aea:	468c      	mov	ip, r1
 8025aec:	ee10 9a10 	vmov	r9, s0
 8025af0:	d907      	bls.n	8025b02 <__ieee754_atan2+0x4a>
 8025af2:	4632      	mov	r2, r6
 8025af4:	463b      	mov	r3, r7
 8025af6:	f7da fbd1 	bl	800029c <__adddf3>
 8025afa:	ec41 0b10 	vmov	d0, r0, r1
 8025afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025b02:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8025b06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8025b0a:	4334      	orrs	r4, r6
 8025b0c:	d103      	bne.n	8025b16 <__ieee754_atan2+0x5e>
 8025b0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025b12:	f002 ba8d 	b.w	8028030 <atan>
 8025b16:	17bc      	asrs	r4, r7, #30
 8025b18:	f004 0402 	and.w	r4, r4, #2
 8025b1c:	ea53 0909 	orrs.w	r9, r3, r9
 8025b20:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8025b24:	d107      	bne.n	8025b36 <__ieee754_atan2+0x7e>
 8025b26:	2c02      	cmp	r4, #2
 8025b28:	d073      	beq.n	8025c12 <__ieee754_atan2+0x15a>
 8025b2a:	2c03      	cmp	r4, #3
 8025b2c:	d1e5      	bne.n	8025afa <__ieee754_atan2+0x42>
 8025b2e:	a13e      	add	r1, pc, #248	; (adr r1, 8025c28 <__ieee754_atan2+0x170>)
 8025b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025b34:	e7e1      	b.n	8025afa <__ieee754_atan2+0x42>
 8025b36:	ea52 0808 	orrs.w	r8, r2, r8
 8025b3a:	d106      	bne.n	8025b4a <__ieee754_atan2+0x92>
 8025b3c:	f1bc 0f00 	cmp.w	ip, #0
 8025b40:	da6b      	bge.n	8025c1a <__ieee754_atan2+0x162>
 8025b42:	a13b      	add	r1, pc, #236	; (adr r1, 8025c30 <__ieee754_atan2+0x178>)
 8025b44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025b48:	e7d7      	b.n	8025afa <__ieee754_atan2+0x42>
 8025b4a:	4572      	cmp	r2, lr
 8025b4c:	d120      	bne.n	8025b90 <__ieee754_atan2+0xd8>
 8025b4e:	4293      	cmp	r3, r2
 8025b50:	d111      	bne.n	8025b76 <__ieee754_atan2+0xbe>
 8025b52:	2c02      	cmp	r4, #2
 8025b54:	d007      	beq.n	8025b66 <__ieee754_atan2+0xae>
 8025b56:	2c03      	cmp	r4, #3
 8025b58:	d009      	beq.n	8025b6e <__ieee754_atan2+0xb6>
 8025b5a:	2c01      	cmp	r4, #1
 8025b5c:	d155      	bne.n	8025c0a <__ieee754_atan2+0x152>
 8025b5e:	a136      	add	r1, pc, #216	; (adr r1, 8025c38 <__ieee754_atan2+0x180>)
 8025b60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025b64:	e7c9      	b.n	8025afa <__ieee754_atan2+0x42>
 8025b66:	a136      	add	r1, pc, #216	; (adr r1, 8025c40 <__ieee754_atan2+0x188>)
 8025b68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025b6c:	e7c5      	b.n	8025afa <__ieee754_atan2+0x42>
 8025b6e:	a136      	add	r1, pc, #216	; (adr r1, 8025c48 <__ieee754_atan2+0x190>)
 8025b70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025b74:	e7c1      	b.n	8025afa <__ieee754_atan2+0x42>
 8025b76:	2c02      	cmp	r4, #2
 8025b78:	d04b      	beq.n	8025c12 <__ieee754_atan2+0x15a>
 8025b7a:	2c03      	cmp	r4, #3
 8025b7c:	d0d7      	beq.n	8025b2e <__ieee754_atan2+0x76>
 8025b7e:	2c01      	cmp	r4, #1
 8025b80:	f04f 0000 	mov.w	r0, #0
 8025b84:	d102      	bne.n	8025b8c <__ieee754_atan2+0xd4>
 8025b86:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8025b8a:	e7b6      	b.n	8025afa <__ieee754_atan2+0x42>
 8025b8c:	2100      	movs	r1, #0
 8025b8e:	e7b4      	b.n	8025afa <__ieee754_atan2+0x42>
 8025b90:	4573      	cmp	r3, lr
 8025b92:	d0d3      	beq.n	8025b3c <__ieee754_atan2+0x84>
 8025b94:	1a9b      	subs	r3, r3, r2
 8025b96:	151b      	asrs	r3, r3, #20
 8025b98:	2b3c      	cmp	r3, #60	; 0x3c
 8025b9a:	dc1e      	bgt.n	8025bda <__ieee754_atan2+0x122>
 8025b9c:	2f00      	cmp	r7, #0
 8025b9e:	da01      	bge.n	8025ba4 <__ieee754_atan2+0xec>
 8025ba0:	333c      	adds	r3, #60	; 0x3c
 8025ba2:	db1e      	blt.n	8025be2 <__ieee754_atan2+0x12a>
 8025ba4:	4632      	mov	r2, r6
 8025ba6:	463b      	mov	r3, r7
 8025ba8:	f7da fe58 	bl	800085c <__aeabi_ddiv>
 8025bac:	ec41 0b10 	vmov	d0, r0, r1
 8025bb0:	f002 fbde 	bl	8028370 <fabs>
 8025bb4:	f002 fa3c 	bl	8028030 <atan>
 8025bb8:	ec51 0b10 	vmov	r0, r1, d0
 8025bbc:	2c01      	cmp	r4, #1
 8025bbe:	d013      	beq.n	8025be8 <__ieee754_atan2+0x130>
 8025bc0:	2c02      	cmp	r4, #2
 8025bc2:	d015      	beq.n	8025bf0 <__ieee754_atan2+0x138>
 8025bc4:	2c00      	cmp	r4, #0
 8025bc6:	d098      	beq.n	8025afa <__ieee754_atan2+0x42>
 8025bc8:	a321      	add	r3, pc, #132	; (adr r3, 8025c50 <__ieee754_atan2+0x198>)
 8025bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025bce:	f7da fb63 	bl	8000298 <__aeabi_dsub>
 8025bd2:	a321      	add	r3, pc, #132	; (adr r3, 8025c58 <__ieee754_atan2+0x1a0>)
 8025bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025bd8:	e014      	b.n	8025c04 <__ieee754_atan2+0x14c>
 8025bda:	a121      	add	r1, pc, #132	; (adr r1, 8025c60 <__ieee754_atan2+0x1a8>)
 8025bdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025be0:	e7ec      	b.n	8025bbc <__ieee754_atan2+0x104>
 8025be2:	2000      	movs	r0, #0
 8025be4:	2100      	movs	r1, #0
 8025be6:	e7e9      	b.n	8025bbc <__ieee754_atan2+0x104>
 8025be8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025bec:	4619      	mov	r1, r3
 8025bee:	e784      	b.n	8025afa <__ieee754_atan2+0x42>
 8025bf0:	a317      	add	r3, pc, #92	; (adr r3, 8025c50 <__ieee754_atan2+0x198>)
 8025bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025bf6:	f7da fb4f 	bl	8000298 <__aeabi_dsub>
 8025bfa:	4602      	mov	r2, r0
 8025bfc:	460b      	mov	r3, r1
 8025bfe:	a116      	add	r1, pc, #88	; (adr r1, 8025c58 <__ieee754_atan2+0x1a0>)
 8025c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025c04:	f7da fb48 	bl	8000298 <__aeabi_dsub>
 8025c08:	e777      	b.n	8025afa <__ieee754_atan2+0x42>
 8025c0a:	a117      	add	r1, pc, #92	; (adr r1, 8025c68 <__ieee754_atan2+0x1b0>)
 8025c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025c10:	e773      	b.n	8025afa <__ieee754_atan2+0x42>
 8025c12:	a111      	add	r1, pc, #68	; (adr r1, 8025c58 <__ieee754_atan2+0x1a0>)
 8025c14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025c18:	e76f      	b.n	8025afa <__ieee754_atan2+0x42>
 8025c1a:	a111      	add	r1, pc, #68	; (adr r1, 8025c60 <__ieee754_atan2+0x1a8>)
 8025c1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025c20:	e76b      	b.n	8025afa <__ieee754_atan2+0x42>
 8025c22:	bf00      	nop
 8025c24:	f3af 8000 	nop.w
 8025c28:	54442d18 	.word	0x54442d18
 8025c2c:	c00921fb 	.word	0xc00921fb
 8025c30:	54442d18 	.word	0x54442d18
 8025c34:	bff921fb 	.word	0xbff921fb
 8025c38:	54442d18 	.word	0x54442d18
 8025c3c:	bfe921fb 	.word	0xbfe921fb
 8025c40:	7f3321d2 	.word	0x7f3321d2
 8025c44:	4002d97c 	.word	0x4002d97c
 8025c48:	7f3321d2 	.word	0x7f3321d2
 8025c4c:	c002d97c 	.word	0xc002d97c
 8025c50:	33145c07 	.word	0x33145c07
 8025c54:	3ca1a626 	.word	0x3ca1a626
 8025c58:	54442d18 	.word	0x54442d18
 8025c5c:	400921fb 	.word	0x400921fb
 8025c60:	54442d18 	.word	0x54442d18
 8025c64:	3ff921fb 	.word	0x3ff921fb
 8025c68:	54442d18 	.word	0x54442d18
 8025c6c:	3fe921fb 	.word	0x3fe921fb
 8025c70:	7ff00000 	.word	0x7ff00000

08025c74 <__ieee754_fmod>:
 8025c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025c78:	ec53 2b11 	vmov	r2, r3, d1
 8025c7c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8025c80:	ea5e 0402 	orrs.w	r4, lr, r2
 8025c84:	ec51 0b10 	vmov	r0, r1, d0
 8025c88:	461e      	mov	r6, r3
 8025c8a:	ee11 5a10 	vmov	r5, s2
 8025c8e:	4694      	mov	ip, r2
 8025c90:	d00c      	beq.n	8025cac <__ieee754_fmod+0x38>
 8025c92:	4c7a      	ldr	r4, [pc, #488]	; (8025e7c <__ieee754_fmod+0x208>)
 8025c94:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8025c98:	45a0      	cmp	r8, r4
 8025c9a:	4689      	mov	r9, r1
 8025c9c:	dc06      	bgt.n	8025cac <__ieee754_fmod+0x38>
 8025c9e:	4254      	negs	r4, r2
 8025ca0:	4314      	orrs	r4, r2
 8025ca2:	4f77      	ldr	r7, [pc, #476]	; (8025e80 <__ieee754_fmod+0x20c>)
 8025ca4:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8025ca8:	42bc      	cmp	r4, r7
 8025caa:	d909      	bls.n	8025cc0 <__ieee754_fmod+0x4c>
 8025cac:	f7da fcac 	bl	8000608 <__aeabi_dmul>
 8025cb0:	4602      	mov	r2, r0
 8025cb2:	460b      	mov	r3, r1
 8025cb4:	f7da fdd2 	bl	800085c <__aeabi_ddiv>
 8025cb8:	ec41 0b10 	vmov	d0, r0, r1
 8025cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025cc0:	45f0      	cmp	r8, lr
 8025cc2:	ee10 2a10 	vmov	r2, s0
 8025cc6:	4607      	mov	r7, r0
 8025cc8:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8025ccc:	dc0a      	bgt.n	8025ce4 <__ieee754_fmod+0x70>
 8025cce:	dbf3      	blt.n	8025cb8 <__ieee754_fmod+0x44>
 8025cd0:	42a8      	cmp	r0, r5
 8025cd2:	d3f1      	bcc.n	8025cb8 <__ieee754_fmod+0x44>
 8025cd4:	d106      	bne.n	8025ce4 <__ieee754_fmod+0x70>
 8025cd6:	496b      	ldr	r1, [pc, #428]	; (8025e84 <__ieee754_fmod+0x210>)
 8025cd8:	0fe4      	lsrs	r4, r4, #31
 8025cda:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8025cde:	e9d4 0100 	ldrd	r0, r1, [r4]
 8025ce2:	e7e9      	b.n	8025cb8 <__ieee754_fmod+0x44>
 8025ce4:	4b68      	ldr	r3, [pc, #416]	; (8025e88 <__ieee754_fmod+0x214>)
 8025ce6:	4598      	cmp	r8, r3
 8025ce8:	dc49      	bgt.n	8025d7e <__ieee754_fmod+0x10a>
 8025cea:	f1b8 0f00 	cmp.w	r8, #0
 8025cee:	d13d      	bne.n	8025d6c <__ieee754_fmod+0xf8>
 8025cf0:	4866      	ldr	r0, [pc, #408]	; (8025e8c <__ieee754_fmod+0x218>)
 8025cf2:	4611      	mov	r1, r2
 8025cf4:	2900      	cmp	r1, #0
 8025cf6:	dc36      	bgt.n	8025d66 <__ieee754_fmod+0xf2>
 8025cf8:	459e      	cmp	lr, r3
 8025cfa:	dc51      	bgt.n	8025da0 <__ieee754_fmod+0x12c>
 8025cfc:	f1be 0f00 	cmp.w	lr, #0
 8025d00:	d145      	bne.n	8025d8e <__ieee754_fmod+0x11a>
 8025d02:	4b62      	ldr	r3, [pc, #392]	; (8025e8c <__ieee754_fmod+0x218>)
 8025d04:	4629      	mov	r1, r5
 8025d06:	2900      	cmp	r1, #0
 8025d08:	dc3e      	bgt.n	8025d88 <__ieee754_fmod+0x114>
 8025d0a:	4961      	ldr	r1, [pc, #388]	; (8025e90 <__ieee754_fmod+0x21c>)
 8025d0c:	4288      	cmp	r0, r1
 8025d0e:	db4c      	blt.n	8025daa <__ieee754_fmod+0x136>
 8025d10:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8025d14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8025d18:	4a5d      	ldr	r2, [pc, #372]	; (8025e90 <__ieee754_fmod+0x21c>)
 8025d1a:	4293      	cmp	r3, r2
 8025d1c:	db59      	blt.n	8025dd2 <__ieee754_fmod+0x15e>
 8025d1e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8025d22:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8025d26:	1ac0      	subs	r0, r0, r3
 8025d28:	1b8a      	subs	r2, r1, r6
 8025d2a:	eba7 050c 	sub.w	r5, r7, ip
 8025d2e:	2800      	cmp	r0, #0
 8025d30:	d166      	bne.n	8025e00 <__ieee754_fmod+0x18c>
 8025d32:	4567      	cmp	r7, ip
 8025d34:	bf38      	it	cc
 8025d36:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8025d3a:	2a00      	cmp	r2, #0
 8025d3c:	bfbc      	itt	lt
 8025d3e:	463d      	movlt	r5, r7
 8025d40:	460a      	movlt	r2, r1
 8025d42:	ea52 0105 	orrs.w	r1, r2, r5
 8025d46:	d0c6      	beq.n	8025cd6 <__ieee754_fmod+0x62>
 8025d48:	494f      	ldr	r1, [pc, #316]	; (8025e88 <__ieee754_fmod+0x214>)
 8025d4a:	428a      	cmp	r2, r1
 8025d4c:	dd6d      	ble.n	8025e2a <__ieee754_fmod+0x1b6>
 8025d4e:	4950      	ldr	r1, [pc, #320]	; (8025e90 <__ieee754_fmod+0x21c>)
 8025d50:	428b      	cmp	r3, r1
 8025d52:	db70      	blt.n	8025e36 <__ieee754_fmod+0x1c2>
 8025d54:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8025d58:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8025d5c:	4314      	orrs	r4, r2
 8025d5e:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 8025d62:	4628      	mov	r0, r5
 8025d64:	e7a8      	b.n	8025cb8 <__ieee754_fmod+0x44>
 8025d66:	3801      	subs	r0, #1
 8025d68:	0049      	lsls	r1, r1, #1
 8025d6a:	e7c3      	b.n	8025cf4 <__ieee754_fmod+0x80>
 8025d6c:	4848      	ldr	r0, [pc, #288]	; (8025e90 <__ieee754_fmod+0x21c>)
 8025d6e:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8025d72:	0049      	lsls	r1, r1, #1
 8025d74:	2900      	cmp	r1, #0
 8025d76:	f100 30ff 	add.w	r0, r0, #4294967295
 8025d7a:	dcfa      	bgt.n	8025d72 <__ieee754_fmod+0xfe>
 8025d7c:	e7bc      	b.n	8025cf8 <__ieee754_fmod+0x84>
 8025d7e:	ea4f 5028 	mov.w	r0, r8, asr #20
 8025d82:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8025d86:	e7b7      	b.n	8025cf8 <__ieee754_fmod+0x84>
 8025d88:	3b01      	subs	r3, #1
 8025d8a:	0049      	lsls	r1, r1, #1
 8025d8c:	e7bb      	b.n	8025d06 <__ieee754_fmod+0x92>
 8025d8e:	4b40      	ldr	r3, [pc, #256]	; (8025e90 <__ieee754_fmod+0x21c>)
 8025d90:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8025d94:	0049      	lsls	r1, r1, #1
 8025d96:	2900      	cmp	r1, #0
 8025d98:	f103 33ff 	add.w	r3, r3, #4294967295
 8025d9c:	dcfa      	bgt.n	8025d94 <__ieee754_fmod+0x120>
 8025d9e:	e7b4      	b.n	8025d0a <__ieee754_fmod+0x96>
 8025da0:	ea4f 532e 	mov.w	r3, lr, asr #20
 8025da4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8025da8:	e7af      	b.n	8025d0a <__ieee754_fmod+0x96>
 8025daa:	1a0f      	subs	r7, r1, r0
 8025dac:	2f1f      	cmp	r7, #31
 8025dae:	dc0a      	bgt.n	8025dc6 <__ieee754_fmod+0x152>
 8025db0:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8025db4:	fa08 f807 	lsl.w	r8, r8, r7
 8025db8:	fa22 f101 	lsr.w	r1, r2, r1
 8025dbc:	ea41 0108 	orr.w	r1, r1, r8
 8025dc0:	fa02 f707 	lsl.w	r7, r2, r7
 8025dc4:	e7a8      	b.n	8025d18 <__ieee754_fmod+0xa4>
 8025dc6:	4933      	ldr	r1, [pc, #204]	; (8025e94 <__ieee754_fmod+0x220>)
 8025dc8:	1a09      	subs	r1, r1, r0
 8025dca:	fa02 f101 	lsl.w	r1, r2, r1
 8025dce:	2700      	movs	r7, #0
 8025dd0:	e7a2      	b.n	8025d18 <__ieee754_fmod+0xa4>
 8025dd2:	eba2 0c03 	sub.w	ip, r2, r3
 8025dd6:	f1bc 0f1f 	cmp.w	ip, #31
 8025dda:	dc0a      	bgt.n	8025df2 <__ieee754_fmod+0x17e>
 8025ddc:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8025de0:	fa0e fe0c 	lsl.w	lr, lr, ip
 8025de4:	fa25 f606 	lsr.w	r6, r5, r6
 8025de8:	ea46 060e 	orr.w	r6, r6, lr
 8025dec:	fa05 fc0c 	lsl.w	ip, r5, ip
 8025df0:	e799      	b.n	8025d26 <__ieee754_fmod+0xb2>
 8025df2:	4e28      	ldr	r6, [pc, #160]	; (8025e94 <__ieee754_fmod+0x220>)
 8025df4:	1af6      	subs	r6, r6, r3
 8025df6:	fa05 f606 	lsl.w	r6, r5, r6
 8025dfa:	f04f 0c00 	mov.w	ip, #0
 8025dfe:	e792      	b.n	8025d26 <__ieee754_fmod+0xb2>
 8025e00:	4567      	cmp	r7, ip
 8025e02:	bf38      	it	cc
 8025e04:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8025e08:	2a00      	cmp	r2, #0
 8025e0a:	da05      	bge.n	8025e18 <__ieee754_fmod+0x1a4>
 8025e0c:	0ffa      	lsrs	r2, r7, #31
 8025e0e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8025e12:	007f      	lsls	r7, r7, #1
 8025e14:	3801      	subs	r0, #1
 8025e16:	e787      	b.n	8025d28 <__ieee754_fmod+0xb4>
 8025e18:	ea52 0105 	orrs.w	r1, r2, r5
 8025e1c:	f43f af5b 	beq.w	8025cd6 <__ieee754_fmod+0x62>
 8025e20:	0fe9      	lsrs	r1, r5, #31
 8025e22:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8025e26:	006f      	lsls	r7, r5, #1
 8025e28:	e7f4      	b.n	8025e14 <__ieee754_fmod+0x1a0>
 8025e2a:	0fe8      	lsrs	r0, r5, #31
 8025e2c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8025e30:	006d      	lsls	r5, r5, #1
 8025e32:	3b01      	subs	r3, #1
 8025e34:	e789      	b.n	8025d4a <__ieee754_fmod+0xd6>
 8025e36:	1ac9      	subs	r1, r1, r3
 8025e38:	2914      	cmp	r1, #20
 8025e3a:	dc0a      	bgt.n	8025e52 <__ieee754_fmod+0x1de>
 8025e3c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8025e40:	fa02 f303 	lsl.w	r3, r2, r3
 8025e44:	40cd      	lsrs	r5, r1
 8025e46:	432b      	orrs	r3, r5
 8025e48:	410a      	asrs	r2, r1
 8025e4a:	ea42 0104 	orr.w	r1, r2, r4
 8025e4e:	4618      	mov	r0, r3
 8025e50:	e732      	b.n	8025cb8 <__ieee754_fmod+0x44>
 8025e52:	291f      	cmp	r1, #31
 8025e54:	dc07      	bgt.n	8025e66 <__ieee754_fmod+0x1f2>
 8025e56:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8025e5a:	40cd      	lsrs	r5, r1
 8025e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8025e60:	432b      	orrs	r3, r5
 8025e62:	4622      	mov	r2, r4
 8025e64:	e7f1      	b.n	8025e4a <__ieee754_fmod+0x1d6>
 8025e66:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8025e6a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8025e6e:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8025e72:	33e2      	adds	r3, #226	; 0xe2
 8025e74:	fa42 f303 	asr.w	r3, r2, r3
 8025e78:	e7f3      	b.n	8025e62 <__ieee754_fmod+0x1ee>
 8025e7a:	bf00      	nop
 8025e7c:	7fefffff 	.word	0x7fefffff
 8025e80:	7ff00000 	.word	0x7ff00000
 8025e84:	0802df58 	.word	0x0802df58
 8025e88:	000fffff 	.word	0x000fffff
 8025e8c:	fffffbed 	.word	0xfffffbed
 8025e90:	fffffc02 	.word	0xfffffc02
 8025e94:	fffffbe2 	.word	0xfffffbe2

08025e98 <__ieee754_pow>:
 8025e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e9c:	b091      	sub	sp, #68	; 0x44
 8025e9e:	ed8d 1b00 	vstr	d1, [sp]
 8025ea2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8025ea6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8025eaa:	ea58 0302 	orrs.w	r3, r8, r2
 8025eae:	ec57 6b10 	vmov	r6, r7, d0
 8025eb2:	f000 84be 	beq.w	8026832 <__ieee754_pow+0x99a>
 8025eb6:	4b7a      	ldr	r3, [pc, #488]	; (80260a0 <__ieee754_pow+0x208>)
 8025eb8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8025ebc:	429c      	cmp	r4, r3
 8025ebe:	463d      	mov	r5, r7
 8025ec0:	ee10 aa10 	vmov	sl, s0
 8025ec4:	dc09      	bgt.n	8025eda <__ieee754_pow+0x42>
 8025ec6:	d103      	bne.n	8025ed0 <__ieee754_pow+0x38>
 8025ec8:	b93e      	cbnz	r6, 8025eda <__ieee754_pow+0x42>
 8025eca:	45a0      	cmp	r8, r4
 8025ecc:	dc0d      	bgt.n	8025eea <__ieee754_pow+0x52>
 8025ece:	e001      	b.n	8025ed4 <__ieee754_pow+0x3c>
 8025ed0:	4598      	cmp	r8, r3
 8025ed2:	dc02      	bgt.n	8025eda <__ieee754_pow+0x42>
 8025ed4:	4598      	cmp	r8, r3
 8025ed6:	d10e      	bne.n	8025ef6 <__ieee754_pow+0x5e>
 8025ed8:	b16a      	cbz	r2, 8025ef6 <__ieee754_pow+0x5e>
 8025eda:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8025ede:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8025ee2:	ea54 030a 	orrs.w	r3, r4, sl
 8025ee6:	f000 84a4 	beq.w	8026832 <__ieee754_pow+0x99a>
 8025eea:	486e      	ldr	r0, [pc, #440]	; (80260a4 <__ieee754_pow+0x20c>)
 8025eec:	b011      	add	sp, #68	; 0x44
 8025eee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ef2:	f002 ba51 	b.w	8028398 <nan>
 8025ef6:	2d00      	cmp	r5, #0
 8025ef8:	da53      	bge.n	8025fa2 <__ieee754_pow+0x10a>
 8025efa:	4b6b      	ldr	r3, [pc, #428]	; (80260a8 <__ieee754_pow+0x210>)
 8025efc:	4598      	cmp	r8, r3
 8025efe:	dc4d      	bgt.n	8025f9c <__ieee754_pow+0x104>
 8025f00:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8025f04:	4598      	cmp	r8, r3
 8025f06:	dd4c      	ble.n	8025fa2 <__ieee754_pow+0x10a>
 8025f08:	ea4f 5328 	mov.w	r3, r8, asr #20
 8025f0c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8025f10:	2b14      	cmp	r3, #20
 8025f12:	dd26      	ble.n	8025f62 <__ieee754_pow+0xca>
 8025f14:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8025f18:	fa22 f103 	lsr.w	r1, r2, r3
 8025f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8025f20:	4293      	cmp	r3, r2
 8025f22:	d13e      	bne.n	8025fa2 <__ieee754_pow+0x10a>
 8025f24:	f001 0101 	and.w	r1, r1, #1
 8025f28:	f1c1 0b02 	rsb	fp, r1, #2
 8025f2c:	2a00      	cmp	r2, #0
 8025f2e:	d15b      	bne.n	8025fe8 <__ieee754_pow+0x150>
 8025f30:	4b5b      	ldr	r3, [pc, #364]	; (80260a0 <__ieee754_pow+0x208>)
 8025f32:	4598      	cmp	r8, r3
 8025f34:	d124      	bne.n	8025f80 <__ieee754_pow+0xe8>
 8025f36:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8025f3a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8025f3e:	ea53 030a 	orrs.w	r3, r3, sl
 8025f42:	f000 8476 	beq.w	8026832 <__ieee754_pow+0x99a>
 8025f46:	4b59      	ldr	r3, [pc, #356]	; (80260ac <__ieee754_pow+0x214>)
 8025f48:	429c      	cmp	r4, r3
 8025f4a:	dd2d      	ble.n	8025fa8 <__ieee754_pow+0x110>
 8025f4c:	f1b9 0f00 	cmp.w	r9, #0
 8025f50:	f280 8473 	bge.w	802683a <__ieee754_pow+0x9a2>
 8025f54:	2000      	movs	r0, #0
 8025f56:	2100      	movs	r1, #0
 8025f58:	ec41 0b10 	vmov	d0, r0, r1
 8025f5c:	b011      	add	sp, #68	; 0x44
 8025f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f62:	2a00      	cmp	r2, #0
 8025f64:	d13e      	bne.n	8025fe4 <__ieee754_pow+0x14c>
 8025f66:	f1c3 0314 	rsb	r3, r3, #20
 8025f6a:	fa48 f103 	asr.w	r1, r8, r3
 8025f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8025f72:	4543      	cmp	r3, r8
 8025f74:	f040 8469 	bne.w	802684a <__ieee754_pow+0x9b2>
 8025f78:	f001 0101 	and.w	r1, r1, #1
 8025f7c:	f1c1 0b02 	rsb	fp, r1, #2
 8025f80:	4b4b      	ldr	r3, [pc, #300]	; (80260b0 <__ieee754_pow+0x218>)
 8025f82:	4598      	cmp	r8, r3
 8025f84:	d118      	bne.n	8025fb8 <__ieee754_pow+0x120>
 8025f86:	f1b9 0f00 	cmp.w	r9, #0
 8025f8a:	f280 845a 	bge.w	8026842 <__ieee754_pow+0x9aa>
 8025f8e:	4948      	ldr	r1, [pc, #288]	; (80260b0 <__ieee754_pow+0x218>)
 8025f90:	4632      	mov	r2, r6
 8025f92:	463b      	mov	r3, r7
 8025f94:	2000      	movs	r0, #0
 8025f96:	f7da fc61 	bl	800085c <__aeabi_ddiv>
 8025f9a:	e7dd      	b.n	8025f58 <__ieee754_pow+0xc0>
 8025f9c:	f04f 0b02 	mov.w	fp, #2
 8025fa0:	e7c4      	b.n	8025f2c <__ieee754_pow+0x94>
 8025fa2:	f04f 0b00 	mov.w	fp, #0
 8025fa6:	e7c1      	b.n	8025f2c <__ieee754_pow+0x94>
 8025fa8:	f1b9 0f00 	cmp.w	r9, #0
 8025fac:	dad2      	bge.n	8025f54 <__ieee754_pow+0xbc>
 8025fae:	e9dd 0300 	ldrd	r0, r3, [sp]
 8025fb2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8025fb6:	e7cf      	b.n	8025f58 <__ieee754_pow+0xc0>
 8025fb8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8025fbc:	d106      	bne.n	8025fcc <__ieee754_pow+0x134>
 8025fbe:	4632      	mov	r2, r6
 8025fc0:	463b      	mov	r3, r7
 8025fc2:	4610      	mov	r0, r2
 8025fc4:	4619      	mov	r1, r3
 8025fc6:	f7da fb1f 	bl	8000608 <__aeabi_dmul>
 8025fca:	e7c5      	b.n	8025f58 <__ieee754_pow+0xc0>
 8025fcc:	4b39      	ldr	r3, [pc, #228]	; (80260b4 <__ieee754_pow+0x21c>)
 8025fce:	4599      	cmp	r9, r3
 8025fd0:	d10a      	bne.n	8025fe8 <__ieee754_pow+0x150>
 8025fd2:	2d00      	cmp	r5, #0
 8025fd4:	db08      	blt.n	8025fe8 <__ieee754_pow+0x150>
 8025fd6:	ec47 6b10 	vmov	d0, r6, r7
 8025fda:	b011      	add	sp, #68	; 0x44
 8025fdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025fe0:	f000 be5c 	b.w	8026c9c <__ieee754_sqrt>
 8025fe4:	f04f 0b00 	mov.w	fp, #0
 8025fe8:	ec47 6b10 	vmov	d0, r6, r7
 8025fec:	f002 f9c0 	bl	8028370 <fabs>
 8025ff0:	ec51 0b10 	vmov	r0, r1, d0
 8025ff4:	f1ba 0f00 	cmp.w	sl, #0
 8025ff8:	d127      	bne.n	802604a <__ieee754_pow+0x1b2>
 8025ffa:	b124      	cbz	r4, 8026006 <__ieee754_pow+0x16e>
 8025ffc:	4b2c      	ldr	r3, [pc, #176]	; (80260b0 <__ieee754_pow+0x218>)
 8025ffe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8026002:	429a      	cmp	r2, r3
 8026004:	d121      	bne.n	802604a <__ieee754_pow+0x1b2>
 8026006:	f1b9 0f00 	cmp.w	r9, #0
 802600a:	da05      	bge.n	8026018 <__ieee754_pow+0x180>
 802600c:	4602      	mov	r2, r0
 802600e:	460b      	mov	r3, r1
 8026010:	2000      	movs	r0, #0
 8026012:	4927      	ldr	r1, [pc, #156]	; (80260b0 <__ieee754_pow+0x218>)
 8026014:	f7da fc22 	bl	800085c <__aeabi_ddiv>
 8026018:	2d00      	cmp	r5, #0
 802601a:	da9d      	bge.n	8025f58 <__ieee754_pow+0xc0>
 802601c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8026020:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8026024:	ea54 030b 	orrs.w	r3, r4, fp
 8026028:	d108      	bne.n	802603c <__ieee754_pow+0x1a4>
 802602a:	4602      	mov	r2, r0
 802602c:	460b      	mov	r3, r1
 802602e:	4610      	mov	r0, r2
 8026030:	4619      	mov	r1, r3
 8026032:	f7da f931 	bl	8000298 <__aeabi_dsub>
 8026036:	4602      	mov	r2, r0
 8026038:	460b      	mov	r3, r1
 802603a:	e7ac      	b.n	8025f96 <__ieee754_pow+0xfe>
 802603c:	f1bb 0f01 	cmp.w	fp, #1
 8026040:	d18a      	bne.n	8025f58 <__ieee754_pow+0xc0>
 8026042:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8026046:	4619      	mov	r1, r3
 8026048:	e786      	b.n	8025f58 <__ieee754_pow+0xc0>
 802604a:	0fed      	lsrs	r5, r5, #31
 802604c:	1e6b      	subs	r3, r5, #1
 802604e:	930d      	str	r3, [sp, #52]	; 0x34
 8026050:	ea5b 0303 	orrs.w	r3, fp, r3
 8026054:	d102      	bne.n	802605c <__ieee754_pow+0x1c4>
 8026056:	4632      	mov	r2, r6
 8026058:	463b      	mov	r3, r7
 802605a:	e7e8      	b.n	802602e <__ieee754_pow+0x196>
 802605c:	4b16      	ldr	r3, [pc, #88]	; (80260b8 <__ieee754_pow+0x220>)
 802605e:	4598      	cmp	r8, r3
 8026060:	f340 80fe 	ble.w	8026260 <__ieee754_pow+0x3c8>
 8026064:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8026068:	4598      	cmp	r8, r3
 802606a:	dd0a      	ble.n	8026082 <__ieee754_pow+0x1ea>
 802606c:	4b0f      	ldr	r3, [pc, #60]	; (80260ac <__ieee754_pow+0x214>)
 802606e:	429c      	cmp	r4, r3
 8026070:	dc0d      	bgt.n	802608e <__ieee754_pow+0x1f6>
 8026072:	f1b9 0f00 	cmp.w	r9, #0
 8026076:	f6bf af6d 	bge.w	8025f54 <__ieee754_pow+0xbc>
 802607a:	a307      	add	r3, pc, #28	; (adr r3, 8026098 <__ieee754_pow+0x200>)
 802607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026080:	e79f      	b.n	8025fc2 <__ieee754_pow+0x12a>
 8026082:	4b0e      	ldr	r3, [pc, #56]	; (80260bc <__ieee754_pow+0x224>)
 8026084:	429c      	cmp	r4, r3
 8026086:	ddf4      	ble.n	8026072 <__ieee754_pow+0x1da>
 8026088:	4b09      	ldr	r3, [pc, #36]	; (80260b0 <__ieee754_pow+0x218>)
 802608a:	429c      	cmp	r4, r3
 802608c:	dd18      	ble.n	80260c0 <__ieee754_pow+0x228>
 802608e:	f1b9 0f00 	cmp.w	r9, #0
 8026092:	dcf2      	bgt.n	802607a <__ieee754_pow+0x1e2>
 8026094:	e75e      	b.n	8025f54 <__ieee754_pow+0xbc>
 8026096:	bf00      	nop
 8026098:	8800759c 	.word	0x8800759c
 802609c:	7e37e43c 	.word	0x7e37e43c
 80260a0:	7ff00000 	.word	0x7ff00000
 80260a4:	0802e5cb 	.word	0x0802e5cb
 80260a8:	433fffff 	.word	0x433fffff
 80260ac:	3fefffff 	.word	0x3fefffff
 80260b0:	3ff00000 	.word	0x3ff00000
 80260b4:	3fe00000 	.word	0x3fe00000
 80260b8:	41e00000 	.word	0x41e00000
 80260bc:	3feffffe 	.word	0x3feffffe
 80260c0:	2200      	movs	r2, #0
 80260c2:	4b63      	ldr	r3, [pc, #396]	; (8026250 <__ieee754_pow+0x3b8>)
 80260c4:	f7da f8e8 	bl	8000298 <__aeabi_dsub>
 80260c8:	a355      	add	r3, pc, #340	; (adr r3, 8026220 <__ieee754_pow+0x388>)
 80260ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80260ce:	4604      	mov	r4, r0
 80260d0:	460d      	mov	r5, r1
 80260d2:	f7da fa99 	bl	8000608 <__aeabi_dmul>
 80260d6:	a354      	add	r3, pc, #336	; (adr r3, 8026228 <__ieee754_pow+0x390>)
 80260d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80260dc:	4606      	mov	r6, r0
 80260de:	460f      	mov	r7, r1
 80260e0:	4620      	mov	r0, r4
 80260e2:	4629      	mov	r1, r5
 80260e4:	f7da fa90 	bl	8000608 <__aeabi_dmul>
 80260e8:	2200      	movs	r2, #0
 80260ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80260ee:	4b59      	ldr	r3, [pc, #356]	; (8026254 <__ieee754_pow+0x3bc>)
 80260f0:	4620      	mov	r0, r4
 80260f2:	4629      	mov	r1, r5
 80260f4:	f7da fa88 	bl	8000608 <__aeabi_dmul>
 80260f8:	4602      	mov	r2, r0
 80260fa:	460b      	mov	r3, r1
 80260fc:	a14c      	add	r1, pc, #304	; (adr r1, 8026230 <__ieee754_pow+0x398>)
 80260fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8026102:	f7da f8c9 	bl	8000298 <__aeabi_dsub>
 8026106:	4622      	mov	r2, r4
 8026108:	462b      	mov	r3, r5
 802610a:	f7da fa7d 	bl	8000608 <__aeabi_dmul>
 802610e:	4602      	mov	r2, r0
 8026110:	460b      	mov	r3, r1
 8026112:	2000      	movs	r0, #0
 8026114:	4950      	ldr	r1, [pc, #320]	; (8026258 <__ieee754_pow+0x3c0>)
 8026116:	f7da f8bf 	bl	8000298 <__aeabi_dsub>
 802611a:	4622      	mov	r2, r4
 802611c:	462b      	mov	r3, r5
 802611e:	4680      	mov	r8, r0
 8026120:	4689      	mov	r9, r1
 8026122:	4620      	mov	r0, r4
 8026124:	4629      	mov	r1, r5
 8026126:	f7da fa6f 	bl	8000608 <__aeabi_dmul>
 802612a:	4602      	mov	r2, r0
 802612c:	460b      	mov	r3, r1
 802612e:	4640      	mov	r0, r8
 8026130:	4649      	mov	r1, r9
 8026132:	f7da fa69 	bl	8000608 <__aeabi_dmul>
 8026136:	a340      	add	r3, pc, #256	; (adr r3, 8026238 <__ieee754_pow+0x3a0>)
 8026138:	e9d3 2300 	ldrd	r2, r3, [r3]
 802613c:	f7da fa64 	bl	8000608 <__aeabi_dmul>
 8026140:	4602      	mov	r2, r0
 8026142:	460b      	mov	r3, r1
 8026144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8026148:	f7da f8a6 	bl	8000298 <__aeabi_dsub>
 802614c:	4602      	mov	r2, r0
 802614e:	460b      	mov	r3, r1
 8026150:	4604      	mov	r4, r0
 8026152:	460d      	mov	r5, r1
 8026154:	4630      	mov	r0, r6
 8026156:	4639      	mov	r1, r7
 8026158:	f7da f8a0 	bl	800029c <__adddf3>
 802615c:	2000      	movs	r0, #0
 802615e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8026162:	4632      	mov	r2, r6
 8026164:	463b      	mov	r3, r7
 8026166:	f7da f897 	bl	8000298 <__aeabi_dsub>
 802616a:	4602      	mov	r2, r0
 802616c:	460b      	mov	r3, r1
 802616e:	4620      	mov	r0, r4
 8026170:	4629      	mov	r1, r5
 8026172:	f7da f891 	bl	8000298 <__aeabi_dsub>
 8026176:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026178:	f10b 33ff 	add.w	r3, fp, #4294967295
 802617c:	4313      	orrs	r3, r2
 802617e:	4606      	mov	r6, r0
 8026180:	460f      	mov	r7, r1
 8026182:	f040 81eb 	bne.w	802655c <__ieee754_pow+0x6c4>
 8026186:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8026240 <__ieee754_pow+0x3a8>
 802618a:	e9dd 4500 	ldrd	r4, r5, [sp]
 802618e:	2400      	movs	r4, #0
 8026190:	4622      	mov	r2, r4
 8026192:	462b      	mov	r3, r5
 8026194:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026198:	ed8d 7b02 	vstr	d7, [sp, #8]
 802619c:	f7da f87c 	bl	8000298 <__aeabi_dsub>
 80261a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80261a4:	f7da fa30 	bl	8000608 <__aeabi_dmul>
 80261a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80261ac:	4680      	mov	r8, r0
 80261ae:	4689      	mov	r9, r1
 80261b0:	4630      	mov	r0, r6
 80261b2:	4639      	mov	r1, r7
 80261b4:	f7da fa28 	bl	8000608 <__aeabi_dmul>
 80261b8:	4602      	mov	r2, r0
 80261ba:	460b      	mov	r3, r1
 80261bc:	4640      	mov	r0, r8
 80261be:	4649      	mov	r1, r9
 80261c0:	f7da f86c 	bl	800029c <__adddf3>
 80261c4:	4622      	mov	r2, r4
 80261c6:	462b      	mov	r3, r5
 80261c8:	4680      	mov	r8, r0
 80261ca:	4689      	mov	r9, r1
 80261cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80261d0:	f7da fa1a 	bl	8000608 <__aeabi_dmul>
 80261d4:	460b      	mov	r3, r1
 80261d6:	4604      	mov	r4, r0
 80261d8:	460d      	mov	r5, r1
 80261da:	4602      	mov	r2, r0
 80261dc:	4649      	mov	r1, r9
 80261de:	4640      	mov	r0, r8
 80261e0:	e9cd 4500 	strd	r4, r5, [sp]
 80261e4:	f7da f85a 	bl	800029c <__adddf3>
 80261e8:	4b1c      	ldr	r3, [pc, #112]	; (802625c <__ieee754_pow+0x3c4>)
 80261ea:	4299      	cmp	r1, r3
 80261ec:	4606      	mov	r6, r0
 80261ee:	460f      	mov	r7, r1
 80261f0:	468b      	mov	fp, r1
 80261f2:	f340 82f7 	ble.w	80267e4 <__ieee754_pow+0x94c>
 80261f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80261fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80261fe:	4303      	orrs	r3, r0
 8026200:	f000 81ea 	beq.w	80265d8 <__ieee754_pow+0x740>
 8026204:	a310      	add	r3, pc, #64	; (adr r3, 8026248 <__ieee754_pow+0x3b0>)
 8026206:	e9d3 2300 	ldrd	r2, r3, [r3]
 802620a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802620e:	f7da f9fb 	bl	8000608 <__aeabi_dmul>
 8026212:	a30d      	add	r3, pc, #52	; (adr r3, 8026248 <__ieee754_pow+0x3b0>)
 8026214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026218:	e6d5      	b.n	8025fc6 <__ieee754_pow+0x12e>
 802621a:	bf00      	nop
 802621c:	f3af 8000 	nop.w
 8026220:	60000000 	.word	0x60000000
 8026224:	3ff71547 	.word	0x3ff71547
 8026228:	f85ddf44 	.word	0xf85ddf44
 802622c:	3e54ae0b 	.word	0x3e54ae0b
 8026230:	55555555 	.word	0x55555555
 8026234:	3fd55555 	.word	0x3fd55555
 8026238:	652b82fe 	.word	0x652b82fe
 802623c:	3ff71547 	.word	0x3ff71547
 8026240:	00000000 	.word	0x00000000
 8026244:	bff00000 	.word	0xbff00000
 8026248:	8800759c 	.word	0x8800759c
 802624c:	7e37e43c 	.word	0x7e37e43c
 8026250:	3ff00000 	.word	0x3ff00000
 8026254:	3fd00000 	.word	0x3fd00000
 8026258:	3fe00000 	.word	0x3fe00000
 802625c:	408fffff 	.word	0x408fffff
 8026260:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8026264:	f04f 0200 	mov.w	r2, #0
 8026268:	da05      	bge.n	8026276 <__ieee754_pow+0x3de>
 802626a:	4bd3      	ldr	r3, [pc, #844]	; (80265b8 <__ieee754_pow+0x720>)
 802626c:	f7da f9cc 	bl	8000608 <__aeabi_dmul>
 8026270:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8026274:	460c      	mov	r4, r1
 8026276:	1523      	asrs	r3, r4, #20
 8026278:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802627c:	4413      	add	r3, r2
 802627e:	9309      	str	r3, [sp, #36]	; 0x24
 8026280:	4bce      	ldr	r3, [pc, #824]	; (80265bc <__ieee754_pow+0x724>)
 8026282:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8026286:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 802628a:	429c      	cmp	r4, r3
 802628c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8026290:	dd08      	ble.n	80262a4 <__ieee754_pow+0x40c>
 8026292:	4bcb      	ldr	r3, [pc, #812]	; (80265c0 <__ieee754_pow+0x728>)
 8026294:	429c      	cmp	r4, r3
 8026296:	f340 815e 	ble.w	8026556 <__ieee754_pow+0x6be>
 802629a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802629c:	3301      	adds	r3, #1
 802629e:	9309      	str	r3, [sp, #36]	; 0x24
 80262a0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80262a4:	f04f 0a00 	mov.w	sl, #0
 80262a8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80262ac:	930c      	str	r3, [sp, #48]	; 0x30
 80262ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80262b0:	4bc4      	ldr	r3, [pc, #784]	; (80265c4 <__ieee754_pow+0x72c>)
 80262b2:	4413      	add	r3, r2
 80262b4:	ed93 7b00 	vldr	d7, [r3]
 80262b8:	4629      	mov	r1, r5
 80262ba:	ec53 2b17 	vmov	r2, r3, d7
 80262be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80262c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80262c6:	f7d9 ffe7 	bl	8000298 <__aeabi_dsub>
 80262ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80262ce:	4606      	mov	r6, r0
 80262d0:	460f      	mov	r7, r1
 80262d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80262d6:	f7d9 ffe1 	bl	800029c <__adddf3>
 80262da:	4602      	mov	r2, r0
 80262dc:	460b      	mov	r3, r1
 80262de:	2000      	movs	r0, #0
 80262e0:	49b9      	ldr	r1, [pc, #740]	; (80265c8 <__ieee754_pow+0x730>)
 80262e2:	f7da fabb 	bl	800085c <__aeabi_ddiv>
 80262e6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80262ea:	4602      	mov	r2, r0
 80262ec:	460b      	mov	r3, r1
 80262ee:	4630      	mov	r0, r6
 80262f0:	4639      	mov	r1, r7
 80262f2:	f7da f989 	bl	8000608 <__aeabi_dmul>
 80262f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80262fa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80262fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8026302:	2300      	movs	r3, #0
 8026304:	9302      	str	r3, [sp, #8]
 8026306:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802630a:	106d      	asrs	r5, r5, #1
 802630c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8026310:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8026314:	2200      	movs	r2, #0
 8026316:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 802631a:	4640      	mov	r0, r8
 802631c:	4649      	mov	r1, r9
 802631e:	4614      	mov	r4, r2
 8026320:	461d      	mov	r5, r3
 8026322:	f7da f971 	bl	8000608 <__aeabi_dmul>
 8026326:	4602      	mov	r2, r0
 8026328:	460b      	mov	r3, r1
 802632a:	4630      	mov	r0, r6
 802632c:	4639      	mov	r1, r7
 802632e:	f7d9 ffb3 	bl	8000298 <__aeabi_dsub>
 8026332:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8026336:	4606      	mov	r6, r0
 8026338:	460f      	mov	r7, r1
 802633a:	4620      	mov	r0, r4
 802633c:	4629      	mov	r1, r5
 802633e:	f7d9 ffab 	bl	8000298 <__aeabi_dsub>
 8026342:	4602      	mov	r2, r0
 8026344:	460b      	mov	r3, r1
 8026346:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802634a:	f7d9 ffa5 	bl	8000298 <__aeabi_dsub>
 802634e:	4642      	mov	r2, r8
 8026350:	464b      	mov	r3, r9
 8026352:	f7da f959 	bl	8000608 <__aeabi_dmul>
 8026356:	4602      	mov	r2, r0
 8026358:	460b      	mov	r3, r1
 802635a:	4630      	mov	r0, r6
 802635c:	4639      	mov	r1, r7
 802635e:	f7d9 ff9b 	bl	8000298 <__aeabi_dsub>
 8026362:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8026366:	f7da f94f 	bl	8000608 <__aeabi_dmul>
 802636a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802636e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8026372:	4610      	mov	r0, r2
 8026374:	4619      	mov	r1, r3
 8026376:	f7da f947 	bl	8000608 <__aeabi_dmul>
 802637a:	a37b      	add	r3, pc, #492	; (adr r3, 8026568 <__ieee754_pow+0x6d0>)
 802637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026380:	4604      	mov	r4, r0
 8026382:	460d      	mov	r5, r1
 8026384:	f7da f940 	bl	8000608 <__aeabi_dmul>
 8026388:	a379      	add	r3, pc, #484	; (adr r3, 8026570 <__ieee754_pow+0x6d8>)
 802638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802638e:	f7d9 ff85 	bl	800029c <__adddf3>
 8026392:	4622      	mov	r2, r4
 8026394:	462b      	mov	r3, r5
 8026396:	f7da f937 	bl	8000608 <__aeabi_dmul>
 802639a:	a377      	add	r3, pc, #476	; (adr r3, 8026578 <__ieee754_pow+0x6e0>)
 802639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80263a0:	f7d9 ff7c 	bl	800029c <__adddf3>
 80263a4:	4622      	mov	r2, r4
 80263a6:	462b      	mov	r3, r5
 80263a8:	f7da f92e 	bl	8000608 <__aeabi_dmul>
 80263ac:	a374      	add	r3, pc, #464	; (adr r3, 8026580 <__ieee754_pow+0x6e8>)
 80263ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80263b2:	f7d9 ff73 	bl	800029c <__adddf3>
 80263b6:	4622      	mov	r2, r4
 80263b8:	462b      	mov	r3, r5
 80263ba:	f7da f925 	bl	8000608 <__aeabi_dmul>
 80263be:	a372      	add	r3, pc, #456	; (adr r3, 8026588 <__ieee754_pow+0x6f0>)
 80263c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80263c4:	f7d9 ff6a 	bl	800029c <__adddf3>
 80263c8:	4622      	mov	r2, r4
 80263ca:	462b      	mov	r3, r5
 80263cc:	f7da f91c 	bl	8000608 <__aeabi_dmul>
 80263d0:	a36f      	add	r3, pc, #444	; (adr r3, 8026590 <__ieee754_pow+0x6f8>)
 80263d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80263d6:	f7d9 ff61 	bl	800029c <__adddf3>
 80263da:	4622      	mov	r2, r4
 80263dc:	4606      	mov	r6, r0
 80263de:	460f      	mov	r7, r1
 80263e0:	462b      	mov	r3, r5
 80263e2:	4620      	mov	r0, r4
 80263e4:	4629      	mov	r1, r5
 80263e6:	f7da f90f 	bl	8000608 <__aeabi_dmul>
 80263ea:	4602      	mov	r2, r0
 80263ec:	460b      	mov	r3, r1
 80263ee:	4630      	mov	r0, r6
 80263f0:	4639      	mov	r1, r7
 80263f2:	f7da f909 	bl	8000608 <__aeabi_dmul>
 80263f6:	4642      	mov	r2, r8
 80263f8:	4604      	mov	r4, r0
 80263fa:	460d      	mov	r5, r1
 80263fc:	464b      	mov	r3, r9
 80263fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8026402:	f7d9 ff4b 	bl	800029c <__adddf3>
 8026406:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802640a:	f7da f8fd 	bl	8000608 <__aeabi_dmul>
 802640e:	4622      	mov	r2, r4
 8026410:	462b      	mov	r3, r5
 8026412:	f7d9 ff43 	bl	800029c <__adddf3>
 8026416:	4642      	mov	r2, r8
 8026418:	4606      	mov	r6, r0
 802641a:	460f      	mov	r7, r1
 802641c:	464b      	mov	r3, r9
 802641e:	4640      	mov	r0, r8
 8026420:	4649      	mov	r1, r9
 8026422:	f7da f8f1 	bl	8000608 <__aeabi_dmul>
 8026426:	2200      	movs	r2, #0
 8026428:	4b68      	ldr	r3, [pc, #416]	; (80265cc <__ieee754_pow+0x734>)
 802642a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 802642e:	f7d9 ff35 	bl	800029c <__adddf3>
 8026432:	4632      	mov	r2, r6
 8026434:	463b      	mov	r3, r7
 8026436:	f7d9 ff31 	bl	800029c <__adddf3>
 802643a:	9802      	ldr	r0, [sp, #8]
 802643c:	460d      	mov	r5, r1
 802643e:	4604      	mov	r4, r0
 8026440:	4602      	mov	r2, r0
 8026442:	460b      	mov	r3, r1
 8026444:	4640      	mov	r0, r8
 8026446:	4649      	mov	r1, r9
 8026448:	f7da f8de 	bl	8000608 <__aeabi_dmul>
 802644c:	2200      	movs	r2, #0
 802644e:	4680      	mov	r8, r0
 8026450:	4689      	mov	r9, r1
 8026452:	4b5e      	ldr	r3, [pc, #376]	; (80265cc <__ieee754_pow+0x734>)
 8026454:	4620      	mov	r0, r4
 8026456:	4629      	mov	r1, r5
 8026458:	f7d9 ff1e 	bl	8000298 <__aeabi_dsub>
 802645c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8026460:	f7d9 ff1a 	bl	8000298 <__aeabi_dsub>
 8026464:	4602      	mov	r2, r0
 8026466:	460b      	mov	r3, r1
 8026468:	4630      	mov	r0, r6
 802646a:	4639      	mov	r1, r7
 802646c:	f7d9 ff14 	bl	8000298 <__aeabi_dsub>
 8026470:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8026474:	f7da f8c8 	bl	8000608 <__aeabi_dmul>
 8026478:	4622      	mov	r2, r4
 802647a:	4606      	mov	r6, r0
 802647c:	460f      	mov	r7, r1
 802647e:	462b      	mov	r3, r5
 8026480:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8026484:	f7da f8c0 	bl	8000608 <__aeabi_dmul>
 8026488:	4602      	mov	r2, r0
 802648a:	460b      	mov	r3, r1
 802648c:	4630      	mov	r0, r6
 802648e:	4639      	mov	r1, r7
 8026490:	f7d9 ff04 	bl	800029c <__adddf3>
 8026494:	4606      	mov	r6, r0
 8026496:	460f      	mov	r7, r1
 8026498:	4602      	mov	r2, r0
 802649a:	460b      	mov	r3, r1
 802649c:	4640      	mov	r0, r8
 802649e:	4649      	mov	r1, r9
 80264a0:	f7d9 fefc 	bl	800029c <__adddf3>
 80264a4:	9802      	ldr	r0, [sp, #8]
 80264a6:	a33c      	add	r3, pc, #240	; (adr r3, 8026598 <__ieee754_pow+0x700>)
 80264a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80264ac:	4604      	mov	r4, r0
 80264ae:	460d      	mov	r5, r1
 80264b0:	f7da f8aa 	bl	8000608 <__aeabi_dmul>
 80264b4:	4642      	mov	r2, r8
 80264b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80264ba:	464b      	mov	r3, r9
 80264bc:	4620      	mov	r0, r4
 80264be:	4629      	mov	r1, r5
 80264c0:	f7d9 feea 	bl	8000298 <__aeabi_dsub>
 80264c4:	4602      	mov	r2, r0
 80264c6:	460b      	mov	r3, r1
 80264c8:	4630      	mov	r0, r6
 80264ca:	4639      	mov	r1, r7
 80264cc:	f7d9 fee4 	bl	8000298 <__aeabi_dsub>
 80264d0:	a333      	add	r3, pc, #204	; (adr r3, 80265a0 <__ieee754_pow+0x708>)
 80264d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80264d6:	f7da f897 	bl	8000608 <__aeabi_dmul>
 80264da:	a333      	add	r3, pc, #204	; (adr r3, 80265a8 <__ieee754_pow+0x710>)
 80264dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80264e0:	4606      	mov	r6, r0
 80264e2:	460f      	mov	r7, r1
 80264e4:	4620      	mov	r0, r4
 80264e6:	4629      	mov	r1, r5
 80264e8:	f7da f88e 	bl	8000608 <__aeabi_dmul>
 80264ec:	4602      	mov	r2, r0
 80264ee:	460b      	mov	r3, r1
 80264f0:	4630      	mov	r0, r6
 80264f2:	4639      	mov	r1, r7
 80264f4:	f7d9 fed2 	bl	800029c <__adddf3>
 80264f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80264fa:	4b35      	ldr	r3, [pc, #212]	; (80265d0 <__ieee754_pow+0x738>)
 80264fc:	4413      	add	r3, r2
 80264fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026502:	f7d9 fecb 	bl	800029c <__adddf3>
 8026506:	4604      	mov	r4, r0
 8026508:	9809      	ldr	r0, [sp, #36]	; 0x24
 802650a:	460d      	mov	r5, r1
 802650c:	f7da f812 	bl	8000534 <__aeabi_i2d>
 8026510:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026512:	4b30      	ldr	r3, [pc, #192]	; (80265d4 <__ieee754_pow+0x73c>)
 8026514:	4413      	add	r3, r2
 8026516:	e9d3 8900 	ldrd	r8, r9, [r3]
 802651a:	4606      	mov	r6, r0
 802651c:	460f      	mov	r7, r1
 802651e:	4622      	mov	r2, r4
 8026520:	462b      	mov	r3, r5
 8026522:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8026526:	f7d9 feb9 	bl	800029c <__adddf3>
 802652a:	4642      	mov	r2, r8
 802652c:	464b      	mov	r3, r9
 802652e:	f7d9 feb5 	bl	800029c <__adddf3>
 8026532:	4632      	mov	r2, r6
 8026534:	463b      	mov	r3, r7
 8026536:	f7d9 feb1 	bl	800029c <__adddf3>
 802653a:	9802      	ldr	r0, [sp, #8]
 802653c:	4632      	mov	r2, r6
 802653e:	463b      	mov	r3, r7
 8026540:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8026544:	f7d9 fea8 	bl	8000298 <__aeabi_dsub>
 8026548:	4642      	mov	r2, r8
 802654a:	464b      	mov	r3, r9
 802654c:	f7d9 fea4 	bl	8000298 <__aeabi_dsub>
 8026550:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8026554:	e607      	b.n	8026166 <__ieee754_pow+0x2ce>
 8026556:	f04f 0a01 	mov.w	sl, #1
 802655a:	e6a5      	b.n	80262a8 <__ieee754_pow+0x410>
 802655c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80265b0 <__ieee754_pow+0x718>
 8026560:	e613      	b.n	802618a <__ieee754_pow+0x2f2>
 8026562:	bf00      	nop
 8026564:	f3af 8000 	nop.w
 8026568:	4a454eef 	.word	0x4a454eef
 802656c:	3fca7e28 	.word	0x3fca7e28
 8026570:	93c9db65 	.word	0x93c9db65
 8026574:	3fcd864a 	.word	0x3fcd864a
 8026578:	a91d4101 	.word	0xa91d4101
 802657c:	3fd17460 	.word	0x3fd17460
 8026580:	518f264d 	.word	0x518f264d
 8026584:	3fd55555 	.word	0x3fd55555
 8026588:	db6fabff 	.word	0xdb6fabff
 802658c:	3fdb6db6 	.word	0x3fdb6db6
 8026590:	33333303 	.word	0x33333303
 8026594:	3fe33333 	.word	0x3fe33333
 8026598:	e0000000 	.word	0xe0000000
 802659c:	3feec709 	.word	0x3feec709
 80265a0:	dc3a03fd 	.word	0xdc3a03fd
 80265a4:	3feec709 	.word	0x3feec709
 80265a8:	145b01f5 	.word	0x145b01f5
 80265ac:	be3e2fe0 	.word	0xbe3e2fe0
 80265b0:	00000000 	.word	0x00000000
 80265b4:	3ff00000 	.word	0x3ff00000
 80265b8:	43400000 	.word	0x43400000
 80265bc:	0003988e 	.word	0x0003988e
 80265c0:	000bb679 	.word	0x000bb679
 80265c4:	0802df68 	.word	0x0802df68
 80265c8:	3ff00000 	.word	0x3ff00000
 80265cc:	40080000 	.word	0x40080000
 80265d0:	0802df88 	.word	0x0802df88
 80265d4:	0802df78 	.word	0x0802df78
 80265d8:	a3b4      	add	r3, pc, #720	; (adr r3, 80268ac <__ieee754_pow+0xa14>)
 80265da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80265de:	4640      	mov	r0, r8
 80265e0:	4649      	mov	r1, r9
 80265e2:	f7d9 fe5b 	bl	800029c <__adddf3>
 80265e6:	4622      	mov	r2, r4
 80265e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80265ec:	462b      	mov	r3, r5
 80265ee:	4630      	mov	r0, r6
 80265f0:	4639      	mov	r1, r7
 80265f2:	f7d9 fe51 	bl	8000298 <__aeabi_dsub>
 80265f6:	4602      	mov	r2, r0
 80265f8:	460b      	mov	r3, r1
 80265fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80265fe:	f7da fa93 	bl	8000b28 <__aeabi_dcmpgt>
 8026602:	2800      	cmp	r0, #0
 8026604:	f47f adfe 	bne.w	8026204 <__ieee754_pow+0x36c>
 8026608:	4aa3      	ldr	r2, [pc, #652]	; (8026898 <__ieee754_pow+0xa00>)
 802660a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802660e:	4293      	cmp	r3, r2
 8026610:	f340 810a 	ble.w	8026828 <__ieee754_pow+0x990>
 8026614:	151b      	asrs	r3, r3, #20
 8026616:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 802661a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 802661e:	fa4a f303 	asr.w	r3, sl, r3
 8026622:	445b      	add	r3, fp
 8026624:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8026628:	4e9c      	ldr	r6, [pc, #624]	; (802689c <__ieee754_pow+0xa04>)
 802662a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 802662e:	4116      	asrs	r6, r2
 8026630:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8026634:	2000      	movs	r0, #0
 8026636:	ea23 0106 	bic.w	r1, r3, r6
 802663a:	f1c2 0214 	rsb	r2, r2, #20
 802663e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8026642:	fa4a fa02 	asr.w	sl, sl, r2
 8026646:	f1bb 0f00 	cmp.w	fp, #0
 802664a:	4602      	mov	r2, r0
 802664c:	460b      	mov	r3, r1
 802664e:	4620      	mov	r0, r4
 8026650:	4629      	mov	r1, r5
 8026652:	bfb8      	it	lt
 8026654:	f1ca 0a00 	rsblt	sl, sl, #0
 8026658:	f7d9 fe1e 	bl	8000298 <__aeabi_dsub>
 802665c:	e9cd 0100 	strd	r0, r1, [sp]
 8026660:	4642      	mov	r2, r8
 8026662:	464b      	mov	r3, r9
 8026664:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026668:	f7d9 fe18 	bl	800029c <__adddf3>
 802666c:	2000      	movs	r0, #0
 802666e:	a378      	add	r3, pc, #480	; (adr r3, 8026850 <__ieee754_pow+0x9b8>)
 8026670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026674:	4604      	mov	r4, r0
 8026676:	460d      	mov	r5, r1
 8026678:	f7d9 ffc6 	bl	8000608 <__aeabi_dmul>
 802667c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026680:	4606      	mov	r6, r0
 8026682:	460f      	mov	r7, r1
 8026684:	4620      	mov	r0, r4
 8026686:	4629      	mov	r1, r5
 8026688:	f7d9 fe06 	bl	8000298 <__aeabi_dsub>
 802668c:	4602      	mov	r2, r0
 802668e:	460b      	mov	r3, r1
 8026690:	4640      	mov	r0, r8
 8026692:	4649      	mov	r1, r9
 8026694:	f7d9 fe00 	bl	8000298 <__aeabi_dsub>
 8026698:	a36f      	add	r3, pc, #444	; (adr r3, 8026858 <__ieee754_pow+0x9c0>)
 802669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802669e:	f7d9 ffb3 	bl	8000608 <__aeabi_dmul>
 80266a2:	a36f      	add	r3, pc, #444	; (adr r3, 8026860 <__ieee754_pow+0x9c8>)
 80266a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80266a8:	4680      	mov	r8, r0
 80266aa:	4689      	mov	r9, r1
 80266ac:	4620      	mov	r0, r4
 80266ae:	4629      	mov	r1, r5
 80266b0:	f7d9 ffaa 	bl	8000608 <__aeabi_dmul>
 80266b4:	4602      	mov	r2, r0
 80266b6:	460b      	mov	r3, r1
 80266b8:	4640      	mov	r0, r8
 80266ba:	4649      	mov	r1, r9
 80266bc:	f7d9 fdee 	bl	800029c <__adddf3>
 80266c0:	4604      	mov	r4, r0
 80266c2:	460d      	mov	r5, r1
 80266c4:	4602      	mov	r2, r0
 80266c6:	460b      	mov	r3, r1
 80266c8:	4630      	mov	r0, r6
 80266ca:	4639      	mov	r1, r7
 80266cc:	f7d9 fde6 	bl	800029c <__adddf3>
 80266d0:	4632      	mov	r2, r6
 80266d2:	463b      	mov	r3, r7
 80266d4:	4680      	mov	r8, r0
 80266d6:	4689      	mov	r9, r1
 80266d8:	f7d9 fdde 	bl	8000298 <__aeabi_dsub>
 80266dc:	4602      	mov	r2, r0
 80266de:	460b      	mov	r3, r1
 80266e0:	4620      	mov	r0, r4
 80266e2:	4629      	mov	r1, r5
 80266e4:	f7d9 fdd8 	bl	8000298 <__aeabi_dsub>
 80266e8:	4642      	mov	r2, r8
 80266ea:	4606      	mov	r6, r0
 80266ec:	460f      	mov	r7, r1
 80266ee:	464b      	mov	r3, r9
 80266f0:	4640      	mov	r0, r8
 80266f2:	4649      	mov	r1, r9
 80266f4:	f7d9 ff88 	bl	8000608 <__aeabi_dmul>
 80266f8:	a35b      	add	r3, pc, #364	; (adr r3, 8026868 <__ieee754_pow+0x9d0>)
 80266fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80266fe:	4604      	mov	r4, r0
 8026700:	460d      	mov	r5, r1
 8026702:	f7d9 ff81 	bl	8000608 <__aeabi_dmul>
 8026706:	a35a      	add	r3, pc, #360	; (adr r3, 8026870 <__ieee754_pow+0x9d8>)
 8026708:	e9d3 2300 	ldrd	r2, r3, [r3]
 802670c:	f7d9 fdc4 	bl	8000298 <__aeabi_dsub>
 8026710:	4622      	mov	r2, r4
 8026712:	462b      	mov	r3, r5
 8026714:	f7d9 ff78 	bl	8000608 <__aeabi_dmul>
 8026718:	a357      	add	r3, pc, #348	; (adr r3, 8026878 <__ieee754_pow+0x9e0>)
 802671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802671e:	f7d9 fdbd 	bl	800029c <__adddf3>
 8026722:	4622      	mov	r2, r4
 8026724:	462b      	mov	r3, r5
 8026726:	f7d9 ff6f 	bl	8000608 <__aeabi_dmul>
 802672a:	a355      	add	r3, pc, #340	; (adr r3, 8026880 <__ieee754_pow+0x9e8>)
 802672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026730:	f7d9 fdb2 	bl	8000298 <__aeabi_dsub>
 8026734:	4622      	mov	r2, r4
 8026736:	462b      	mov	r3, r5
 8026738:	f7d9 ff66 	bl	8000608 <__aeabi_dmul>
 802673c:	a352      	add	r3, pc, #328	; (adr r3, 8026888 <__ieee754_pow+0x9f0>)
 802673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026742:	f7d9 fdab 	bl	800029c <__adddf3>
 8026746:	4622      	mov	r2, r4
 8026748:	462b      	mov	r3, r5
 802674a:	f7d9 ff5d 	bl	8000608 <__aeabi_dmul>
 802674e:	4602      	mov	r2, r0
 8026750:	460b      	mov	r3, r1
 8026752:	4640      	mov	r0, r8
 8026754:	4649      	mov	r1, r9
 8026756:	f7d9 fd9f 	bl	8000298 <__aeabi_dsub>
 802675a:	4604      	mov	r4, r0
 802675c:	460d      	mov	r5, r1
 802675e:	4602      	mov	r2, r0
 8026760:	460b      	mov	r3, r1
 8026762:	4640      	mov	r0, r8
 8026764:	4649      	mov	r1, r9
 8026766:	f7d9 ff4f 	bl	8000608 <__aeabi_dmul>
 802676a:	2200      	movs	r2, #0
 802676c:	e9cd 0100 	strd	r0, r1, [sp]
 8026770:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8026774:	4620      	mov	r0, r4
 8026776:	4629      	mov	r1, r5
 8026778:	f7d9 fd8e 	bl	8000298 <__aeabi_dsub>
 802677c:	4602      	mov	r2, r0
 802677e:	460b      	mov	r3, r1
 8026780:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026784:	f7da f86a 	bl	800085c <__aeabi_ddiv>
 8026788:	4632      	mov	r2, r6
 802678a:	4604      	mov	r4, r0
 802678c:	460d      	mov	r5, r1
 802678e:	463b      	mov	r3, r7
 8026790:	4640      	mov	r0, r8
 8026792:	4649      	mov	r1, r9
 8026794:	f7d9 ff38 	bl	8000608 <__aeabi_dmul>
 8026798:	4632      	mov	r2, r6
 802679a:	463b      	mov	r3, r7
 802679c:	f7d9 fd7e 	bl	800029c <__adddf3>
 80267a0:	4602      	mov	r2, r0
 80267a2:	460b      	mov	r3, r1
 80267a4:	4620      	mov	r0, r4
 80267a6:	4629      	mov	r1, r5
 80267a8:	f7d9 fd76 	bl	8000298 <__aeabi_dsub>
 80267ac:	4642      	mov	r2, r8
 80267ae:	464b      	mov	r3, r9
 80267b0:	f7d9 fd72 	bl	8000298 <__aeabi_dsub>
 80267b4:	4602      	mov	r2, r0
 80267b6:	460b      	mov	r3, r1
 80267b8:	2000      	movs	r0, #0
 80267ba:	4939      	ldr	r1, [pc, #228]	; (80268a0 <__ieee754_pow+0xa08>)
 80267bc:	f7d9 fd6c 	bl	8000298 <__aeabi_dsub>
 80267c0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80267c4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80267c8:	4602      	mov	r2, r0
 80267ca:	460b      	mov	r3, r1
 80267cc:	da2f      	bge.n	802682e <__ieee754_pow+0x996>
 80267ce:	4650      	mov	r0, sl
 80267d0:	ec43 2b10 	vmov	d0, r2, r3
 80267d4:	f001 fe6c 	bl	80284b0 <scalbn>
 80267d8:	ec51 0b10 	vmov	r0, r1, d0
 80267dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80267e0:	f7ff bbf1 	b.w	8025fc6 <__ieee754_pow+0x12e>
 80267e4:	4b2f      	ldr	r3, [pc, #188]	; (80268a4 <__ieee754_pow+0xa0c>)
 80267e6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80267ea:	429e      	cmp	r6, r3
 80267ec:	f77f af0c 	ble.w	8026608 <__ieee754_pow+0x770>
 80267f0:	4b2d      	ldr	r3, [pc, #180]	; (80268a8 <__ieee754_pow+0xa10>)
 80267f2:	440b      	add	r3, r1
 80267f4:	4303      	orrs	r3, r0
 80267f6:	d00b      	beq.n	8026810 <__ieee754_pow+0x978>
 80267f8:	a325      	add	r3, pc, #148	; (adr r3, 8026890 <__ieee754_pow+0x9f8>)
 80267fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80267fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8026802:	f7d9 ff01 	bl	8000608 <__aeabi_dmul>
 8026806:	a322      	add	r3, pc, #136	; (adr r3, 8026890 <__ieee754_pow+0x9f8>)
 8026808:	e9d3 2300 	ldrd	r2, r3, [r3]
 802680c:	f7ff bbdb 	b.w	8025fc6 <__ieee754_pow+0x12e>
 8026810:	4622      	mov	r2, r4
 8026812:	462b      	mov	r3, r5
 8026814:	f7d9 fd40 	bl	8000298 <__aeabi_dsub>
 8026818:	4642      	mov	r2, r8
 802681a:	464b      	mov	r3, r9
 802681c:	f7da f97a 	bl	8000b14 <__aeabi_dcmpge>
 8026820:	2800      	cmp	r0, #0
 8026822:	f43f aef1 	beq.w	8026608 <__ieee754_pow+0x770>
 8026826:	e7e7      	b.n	80267f8 <__ieee754_pow+0x960>
 8026828:	f04f 0a00 	mov.w	sl, #0
 802682c:	e718      	b.n	8026660 <__ieee754_pow+0x7c8>
 802682e:	4621      	mov	r1, r4
 8026830:	e7d4      	b.n	80267dc <__ieee754_pow+0x944>
 8026832:	2000      	movs	r0, #0
 8026834:	491a      	ldr	r1, [pc, #104]	; (80268a0 <__ieee754_pow+0xa08>)
 8026836:	f7ff bb8f 	b.w	8025f58 <__ieee754_pow+0xc0>
 802683a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802683e:	f7ff bb8b 	b.w	8025f58 <__ieee754_pow+0xc0>
 8026842:	4630      	mov	r0, r6
 8026844:	4639      	mov	r1, r7
 8026846:	f7ff bb87 	b.w	8025f58 <__ieee754_pow+0xc0>
 802684a:	4693      	mov	fp, r2
 802684c:	f7ff bb98 	b.w	8025f80 <__ieee754_pow+0xe8>
 8026850:	00000000 	.word	0x00000000
 8026854:	3fe62e43 	.word	0x3fe62e43
 8026858:	fefa39ef 	.word	0xfefa39ef
 802685c:	3fe62e42 	.word	0x3fe62e42
 8026860:	0ca86c39 	.word	0x0ca86c39
 8026864:	be205c61 	.word	0xbe205c61
 8026868:	72bea4d0 	.word	0x72bea4d0
 802686c:	3e663769 	.word	0x3e663769
 8026870:	c5d26bf1 	.word	0xc5d26bf1
 8026874:	3ebbbd41 	.word	0x3ebbbd41
 8026878:	af25de2c 	.word	0xaf25de2c
 802687c:	3f11566a 	.word	0x3f11566a
 8026880:	16bebd93 	.word	0x16bebd93
 8026884:	3f66c16c 	.word	0x3f66c16c
 8026888:	5555553e 	.word	0x5555553e
 802688c:	3fc55555 	.word	0x3fc55555
 8026890:	c2f8f359 	.word	0xc2f8f359
 8026894:	01a56e1f 	.word	0x01a56e1f
 8026898:	3fe00000 	.word	0x3fe00000
 802689c:	000fffff 	.word	0x000fffff
 80268a0:	3ff00000 	.word	0x3ff00000
 80268a4:	4090cbff 	.word	0x4090cbff
 80268a8:	3f6f3400 	.word	0x3f6f3400
 80268ac:	652b82fe 	.word	0x652b82fe
 80268b0:	3c971547 	.word	0x3c971547
 80268b4:	00000000 	.word	0x00000000

080268b8 <__ieee754_rem_pio2>:
 80268b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80268bc:	ec57 6b10 	vmov	r6, r7, d0
 80268c0:	4bc3      	ldr	r3, [pc, #780]	; (8026bd0 <__ieee754_rem_pio2+0x318>)
 80268c2:	b08d      	sub	sp, #52	; 0x34
 80268c4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80268c8:	4598      	cmp	r8, r3
 80268ca:	4604      	mov	r4, r0
 80268cc:	9704      	str	r7, [sp, #16]
 80268ce:	dc07      	bgt.n	80268e0 <__ieee754_rem_pio2+0x28>
 80268d0:	2200      	movs	r2, #0
 80268d2:	2300      	movs	r3, #0
 80268d4:	ed84 0b00 	vstr	d0, [r4]
 80268d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80268dc:	2500      	movs	r5, #0
 80268de:	e027      	b.n	8026930 <__ieee754_rem_pio2+0x78>
 80268e0:	4bbc      	ldr	r3, [pc, #752]	; (8026bd4 <__ieee754_rem_pio2+0x31c>)
 80268e2:	4598      	cmp	r8, r3
 80268e4:	dc75      	bgt.n	80269d2 <__ieee754_rem_pio2+0x11a>
 80268e6:	9b04      	ldr	r3, [sp, #16]
 80268e8:	4dbb      	ldr	r5, [pc, #748]	; (8026bd8 <__ieee754_rem_pio2+0x320>)
 80268ea:	2b00      	cmp	r3, #0
 80268ec:	ee10 0a10 	vmov	r0, s0
 80268f0:	a3a9      	add	r3, pc, #676	; (adr r3, 8026b98 <__ieee754_rem_pio2+0x2e0>)
 80268f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80268f6:	4639      	mov	r1, r7
 80268f8:	dd36      	ble.n	8026968 <__ieee754_rem_pio2+0xb0>
 80268fa:	f7d9 fccd 	bl	8000298 <__aeabi_dsub>
 80268fe:	45a8      	cmp	r8, r5
 8026900:	4606      	mov	r6, r0
 8026902:	460f      	mov	r7, r1
 8026904:	d018      	beq.n	8026938 <__ieee754_rem_pio2+0x80>
 8026906:	a3a6      	add	r3, pc, #664	; (adr r3, 8026ba0 <__ieee754_rem_pio2+0x2e8>)
 8026908:	e9d3 2300 	ldrd	r2, r3, [r3]
 802690c:	f7d9 fcc4 	bl	8000298 <__aeabi_dsub>
 8026910:	4602      	mov	r2, r0
 8026912:	460b      	mov	r3, r1
 8026914:	e9c4 2300 	strd	r2, r3, [r4]
 8026918:	4630      	mov	r0, r6
 802691a:	4639      	mov	r1, r7
 802691c:	f7d9 fcbc 	bl	8000298 <__aeabi_dsub>
 8026920:	a39f      	add	r3, pc, #636	; (adr r3, 8026ba0 <__ieee754_rem_pio2+0x2e8>)
 8026922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026926:	f7d9 fcb7 	bl	8000298 <__aeabi_dsub>
 802692a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 802692e:	2501      	movs	r5, #1
 8026930:	4628      	mov	r0, r5
 8026932:	b00d      	add	sp, #52	; 0x34
 8026934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026938:	a39b      	add	r3, pc, #620	; (adr r3, 8026ba8 <__ieee754_rem_pio2+0x2f0>)
 802693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802693e:	f7d9 fcab 	bl	8000298 <__aeabi_dsub>
 8026942:	a39b      	add	r3, pc, #620	; (adr r3, 8026bb0 <__ieee754_rem_pio2+0x2f8>)
 8026944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026948:	4606      	mov	r6, r0
 802694a:	460f      	mov	r7, r1
 802694c:	f7d9 fca4 	bl	8000298 <__aeabi_dsub>
 8026950:	4602      	mov	r2, r0
 8026952:	460b      	mov	r3, r1
 8026954:	e9c4 2300 	strd	r2, r3, [r4]
 8026958:	4630      	mov	r0, r6
 802695a:	4639      	mov	r1, r7
 802695c:	f7d9 fc9c 	bl	8000298 <__aeabi_dsub>
 8026960:	a393      	add	r3, pc, #588	; (adr r3, 8026bb0 <__ieee754_rem_pio2+0x2f8>)
 8026962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026966:	e7de      	b.n	8026926 <__ieee754_rem_pio2+0x6e>
 8026968:	f7d9 fc98 	bl	800029c <__adddf3>
 802696c:	45a8      	cmp	r8, r5
 802696e:	4606      	mov	r6, r0
 8026970:	460f      	mov	r7, r1
 8026972:	d016      	beq.n	80269a2 <__ieee754_rem_pio2+0xea>
 8026974:	a38a      	add	r3, pc, #552	; (adr r3, 8026ba0 <__ieee754_rem_pio2+0x2e8>)
 8026976:	e9d3 2300 	ldrd	r2, r3, [r3]
 802697a:	f7d9 fc8f 	bl	800029c <__adddf3>
 802697e:	4602      	mov	r2, r0
 8026980:	460b      	mov	r3, r1
 8026982:	e9c4 2300 	strd	r2, r3, [r4]
 8026986:	4630      	mov	r0, r6
 8026988:	4639      	mov	r1, r7
 802698a:	f7d9 fc85 	bl	8000298 <__aeabi_dsub>
 802698e:	a384      	add	r3, pc, #528	; (adr r3, 8026ba0 <__ieee754_rem_pio2+0x2e8>)
 8026990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026994:	f7d9 fc82 	bl	800029c <__adddf3>
 8026998:	f04f 35ff 	mov.w	r5, #4294967295
 802699c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80269a0:	e7c6      	b.n	8026930 <__ieee754_rem_pio2+0x78>
 80269a2:	a381      	add	r3, pc, #516	; (adr r3, 8026ba8 <__ieee754_rem_pio2+0x2f0>)
 80269a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80269a8:	f7d9 fc78 	bl	800029c <__adddf3>
 80269ac:	a380      	add	r3, pc, #512	; (adr r3, 8026bb0 <__ieee754_rem_pio2+0x2f8>)
 80269ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80269b2:	4606      	mov	r6, r0
 80269b4:	460f      	mov	r7, r1
 80269b6:	f7d9 fc71 	bl	800029c <__adddf3>
 80269ba:	4602      	mov	r2, r0
 80269bc:	460b      	mov	r3, r1
 80269be:	e9c4 2300 	strd	r2, r3, [r4]
 80269c2:	4630      	mov	r0, r6
 80269c4:	4639      	mov	r1, r7
 80269c6:	f7d9 fc67 	bl	8000298 <__aeabi_dsub>
 80269ca:	a379      	add	r3, pc, #484	; (adr r3, 8026bb0 <__ieee754_rem_pio2+0x2f8>)
 80269cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80269d0:	e7e0      	b.n	8026994 <__ieee754_rem_pio2+0xdc>
 80269d2:	4b82      	ldr	r3, [pc, #520]	; (8026bdc <__ieee754_rem_pio2+0x324>)
 80269d4:	4598      	cmp	r8, r3
 80269d6:	f300 80d0 	bgt.w	8026b7a <__ieee754_rem_pio2+0x2c2>
 80269da:	f001 fcc9 	bl	8028370 <fabs>
 80269de:	ec57 6b10 	vmov	r6, r7, d0
 80269e2:	ee10 0a10 	vmov	r0, s0
 80269e6:	a374      	add	r3, pc, #464	; (adr r3, 8026bb8 <__ieee754_rem_pio2+0x300>)
 80269e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80269ec:	4639      	mov	r1, r7
 80269ee:	f7d9 fe0b 	bl	8000608 <__aeabi_dmul>
 80269f2:	2200      	movs	r2, #0
 80269f4:	4b7a      	ldr	r3, [pc, #488]	; (8026be0 <__ieee754_rem_pio2+0x328>)
 80269f6:	f7d9 fc51 	bl	800029c <__adddf3>
 80269fa:	f7da f8b5 	bl	8000b68 <__aeabi_d2iz>
 80269fe:	4605      	mov	r5, r0
 8026a00:	f7d9 fd98 	bl	8000534 <__aeabi_i2d>
 8026a04:	a364      	add	r3, pc, #400	; (adr r3, 8026b98 <__ieee754_rem_pio2+0x2e0>)
 8026a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026a0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8026a0e:	f7d9 fdfb 	bl	8000608 <__aeabi_dmul>
 8026a12:	4602      	mov	r2, r0
 8026a14:	460b      	mov	r3, r1
 8026a16:	4630      	mov	r0, r6
 8026a18:	4639      	mov	r1, r7
 8026a1a:	f7d9 fc3d 	bl	8000298 <__aeabi_dsub>
 8026a1e:	a360      	add	r3, pc, #384	; (adr r3, 8026ba0 <__ieee754_rem_pio2+0x2e8>)
 8026a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026a24:	4682      	mov	sl, r0
 8026a26:	468b      	mov	fp, r1
 8026a28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8026a2c:	f7d9 fdec 	bl	8000608 <__aeabi_dmul>
 8026a30:	2d1f      	cmp	r5, #31
 8026a32:	4606      	mov	r6, r0
 8026a34:	460f      	mov	r7, r1
 8026a36:	dc0c      	bgt.n	8026a52 <__ieee754_rem_pio2+0x19a>
 8026a38:	1e6a      	subs	r2, r5, #1
 8026a3a:	4b6a      	ldr	r3, [pc, #424]	; (8026be4 <__ieee754_rem_pio2+0x32c>)
 8026a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8026a40:	4543      	cmp	r3, r8
 8026a42:	d006      	beq.n	8026a52 <__ieee754_rem_pio2+0x19a>
 8026a44:	4632      	mov	r2, r6
 8026a46:	463b      	mov	r3, r7
 8026a48:	4650      	mov	r0, sl
 8026a4a:	4659      	mov	r1, fp
 8026a4c:	f7d9 fc24 	bl	8000298 <__aeabi_dsub>
 8026a50:	e00e      	b.n	8026a70 <__ieee754_rem_pio2+0x1b8>
 8026a52:	4632      	mov	r2, r6
 8026a54:	463b      	mov	r3, r7
 8026a56:	4650      	mov	r0, sl
 8026a58:	4659      	mov	r1, fp
 8026a5a:	f7d9 fc1d 	bl	8000298 <__aeabi_dsub>
 8026a5e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8026a62:	9305      	str	r3, [sp, #20]
 8026a64:	9a05      	ldr	r2, [sp, #20]
 8026a66:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8026a6a:	1ad3      	subs	r3, r2, r3
 8026a6c:	2b10      	cmp	r3, #16
 8026a6e:	dc02      	bgt.n	8026a76 <__ieee754_rem_pio2+0x1be>
 8026a70:	e9c4 0100 	strd	r0, r1, [r4]
 8026a74:	e039      	b.n	8026aea <__ieee754_rem_pio2+0x232>
 8026a76:	a34c      	add	r3, pc, #304	; (adr r3, 8026ba8 <__ieee754_rem_pio2+0x2f0>)
 8026a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026a7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8026a80:	f7d9 fdc2 	bl	8000608 <__aeabi_dmul>
 8026a84:	4606      	mov	r6, r0
 8026a86:	460f      	mov	r7, r1
 8026a88:	4602      	mov	r2, r0
 8026a8a:	460b      	mov	r3, r1
 8026a8c:	4650      	mov	r0, sl
 8026a8e:	4659      	mov	r1, fp
 8026a90:	f7d9 fc02 	bl	8000298 <__aeabi_dsub>
 8026a94:	4602      	mov	r2, r0
 8026a96:	460b      	mov	r3, r1
 8026a98:	4680      	mov	r8, r0
 8026a9a:	4689      	mov	r9, r1
 8026a9c:	4650      	mov	r0, sl
 8026a9e:	4659      	mov	r1, fp
 8026aa0:	f7d9 fbfa 	bl	8000298 <__aeabi_dsub>
 8026aa4:	4632      	mov	r2, r6
 8026aa6:	463b      	mov	r3, r7
 8026aa8:	f7d9 fbf6 	bl	8000298 <__aeabi_dsub>
 8026aac:	a340      	add	r3, pc, #256	; (adr r3, 8026bb0 <__ieee754_rem_pio2+0x2f8>)
 8026aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026ab2:	4606      	mov	r6, r0
 8026ab4:	460f      	mov	r7, r1
 8026ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8026aba:	f7d9 fda5 	bl	8000608 <__aeabi_dmul>
 8026abe:	4632      	mov	r2, r6
 8026ac0:	463b      	mov	r3, r7
 8026ac2:	f7d9 fbe9 	bl	8000298 <__aeabi_dsub>
 8026ac6:	4602      	mov	r2, r0
 8026ac8:	460b      	mov	r3, r1
 8026aca:	4606      	mov	r6, r0
 8026acc:	460f      	mov	r7, r1
 8026ace:	4640      	mov	r0, r8
 8026ad0:	4649      	mov	r1, r9
 8026ad2:	f7d9 fbe1 	bl	8000298 <__aeabi_dsub>
 8026ad6:	9a05      	ldr	r2, [sp, #20]
 8026ad8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8026adc:	1ad3      	subs	r3, r2, r3
 8026ade:	2b31      	cmp	r3, #49	; 0x31
 8026ae0:	dc20      	bgt.n	8026b24 <__ieee754_rem_pio2+0x26c>
 8026ae2:	e9c4 0100 	strd	r0, r1, [r4]
 8026ae6:	46c2      	mov	sl, r8
 8026ae8:	46cb      	mov	fp, r9
 8026aea:	e9d4 8900 	ldrd	r8, r9, [r4]
 8026aee:	4650      	mov	r0, sl
 8026af0:	4642      	mov	r2, r8
 8026af2:	464b      	mov	r3, r9
 8026af4:	4659      	mov	r1, fp
 8026af6:	f7d9 fbcf 	bl	8000298 <__aeabi_dsub>
 8026afa:	463b      	mov	r3, r7
 8026afc:	4632      	mov	r2, r6
 8026afe:	f7d9 fbcb 	bl	8000298 <__aeabi_dsub>
 8026b02:	9b04      	ldr	r3, [sp, #16]
 8026b04:	2b00      	cmp	r3, #0
 8026b06:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8026b0a:	f6bf af11 	bge.w	8026930 <__ieee754_rem_pio2+0x78>
 8026b0e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8026b12:	6063      	str	r3, [r4, #4]
 8026b14:	f8c4 8000 	str.w	r8, [r4]
 8026b18:	60a0      	str	r0, [r4, #8]
 8026b1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8026b1e:	60e3      	str	r3, [r4, #12]
 8026b20:	426d      	negs	r5, r5
 8026b22:	e705      	b.n	8026930 <__ieee754_rem_pio2+0x78>
 8026b24:	a326      	add	r3, pc, #152	; (adr r3, 8026bc0 <__ieee754_rem_pio2+0x308>)
 8026b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026b2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8026b2e:	f7d9 fd6b 	bl	8000608 <__aeabi_dmul>
 8026b32:	4606      	mov	r6, r0
 8026b34:	460f      	mov	r7, r1
 8026b36:	4602      	mov	r2, r0
 8026b38:	460b      	mov	r3, r1
 8026b3a:	4640      	mov	r0, r8
 8026b3c:	4649      	mov	r1, r9
 8026b3e:	f7d9 fbab 	bl	8000298 <__aeabi_dsub>
 8026b42:	4602      	mov	r2, r0
 8026b44:	460b      	mov	r3, r1
 8026b46:	4682      	mov	sl, r0
 8026b48:	468b      	mov	fp, r1
 8026b4a:	4640      	mov	r0, r8
 8026b4c:	4649      	mov	r1, r9
 8026b4e:	f7d9 fba3 	bl	8000298 <__aeabi_dsub>
 8026b52:	4632      	mov	r2, r6
 8026b54:	463b      	mov	r3, r7
 8026b56:	f7d9 fb9f 	bl	8000298 <__aeabi_dsub>
 8026b5a:	a31b      	add	r3, pc, #108	; (adr r3, 8026bc8 <__ieee754_rem_pio2+0x310>)
 8026b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026b60:	4606      	mov	r6, r0
 8026b62:	460f      	mov	r7, r1
 8026b64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8026b68:	f7d9 fd4e 	bl	8000608 <__aeabi_dmul>
 8026b6c:	4632      	mov	r2, r6
 8026b6e:	463b      	mov	r3, r7
 8026b70:	f7d9 fb92 	bl	8000298 <__aeabi_dsub>
 8026b74:	4606      	mov	r6, r0
 8026b76:	460f      	mov	r7, r1
 8026b78:	e764      	b.n	8026a44 <__ieee754_rem_pio2+0x18c>
 8026b7a:	4b1b      	ldr	r3, [pc, #108]	; (8026be8 <__ieee754_rem_pio2+0x330>)
 8026b7c:	4598      	cmp	r8, r3
 8026b7e:	dd35      	ble.n	8026bec <__ieee754_rem_pio2+0x334>
 8026b80:	ee10 2a10 	vmov	r2, s0
 8026b84:	463b      	mov	r3, r7
 8026b86:	4630      	mov	r0, r6
 8026b88:	4639      	mov	r1, r7
 8026b8a:	f7d9 fb85 	bl	8000298 <__aeabi_dsub>
 8026b8e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8026b92:	e9c4 0100 	strd	r0, r1, [r4]
 8026b96:	e6a1      	b.n	80268dc <__ieee754_rem_pio2+0x24>
 8026b98:	54400000 	.word	0x54400000
 8026b9c:	3ff921fb 	.word	0x3ff921fb
 8026ba0:	1a626331 	.word	0x1a626331
 8026ba4:	3dd0b461 	.word	0x3dd0b461
 8026ba8:	1a600000 	.word	0x1a600000
 8026bac:	3dd0b461 	.word	0x3dd0b461
 8026bb0:	2e037073 	.word	0x2e037073
 8026bb4:	3ba3198a 	.word	0x3ba3198a
 8026bb8:	6dc9c883 	.word	0x6dc9c883
 8026bbc:	3fe45f30 	.word	0x3fe45f30
 8026bc0:	2e000000 	.word	0x2e000000
 8026bc4:	3ba3198a 	.word	0x3ba3198a
 8026bc8:	252049c1 	.word	0x252049c1
 8026bcc:	397b839a 	.word	0x397b839a
 8026bd0:	3fe921fb 	.word	0x3fe921fb
 8026bd4:	4002d97b 	.word	0x4002d97b
 8026bd8:	3ff921fb 	.word	0x3ff921fb
 8026bdc:	413921fb 	.word	0x413921fb
 8026be0:	3fe00000 	.word	0x3fe00000
 8026be4:	0802df98 	.word	0x0802df98
 8026be8:	7fefffff 	.word	0x7fefffff
 8026bec:	ea4f 5528 	mov.w	r5, r8, asr #20
 8026bf0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8026bf4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8026bf8:	4630      	mov	r0, r6
 8026bfa:	460f      	mov	r7, r1
 8026bfc:	f7d9 ffb4 	bl	8000b68 <__aeabi_d2iz>
 8026c00:	f7d9 fc98 	bl	8000534 <__aeabi_i2d>
 8026c04:	4602      	mov	r2, r0
 8026c06:	460b      	mov	r3, r1
 8026c08:	4630      	mov	r0, r6
 8026c0a:	4639      	mov	r1, r7
 8026c0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8026c10:	f7d9 fb42 	bl	8000298 <__aeabi_dsub>
 8026c14:	2200      	movs	r2, #0
 8026c16:	4b1f      	ldr	r3, [pc, #124]	; (8026c94 <__ieee754_rem_pio2+0x3dc>)
 8026c18:	f7d9 fcf6 	bl	8000608 <__aeabi_dmul>
 8026c1c:	460f      	mov	r7, r1
 8026c1e:	4606      	mov	r6, r0
 8026c20:	f7d9 ffa2 	bl	8000b68 <__aeabi_d2iz>
 8026c24:	f7d9 fc86 	bl	8000534 <__aeabi_i2d>
 8026c28:	4602      	mov	r2, r0
 8026c2a:	460b      	mov	r3, r1
 8026c2c:	4630      	mov	r0, r6
 8026c2e:	4639      	mov	r1, r7
 8026c30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8026c34:	f7d9 fb30 	bl	8000298 <__aeabi_dsub>
 8026c38:	2200      	movs	r2, #0
 8026c3a:	4b16      	ldr	r3, [pc, #88]	; (8026c94 <__ieee754_rem_pio2+0x3dc>)
 8026c3c:	f7d9 fce4 	bl	8000608 <__aeabi_dmul>
 8026c40:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8026c44:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8026c48:	f04f 0803 	mov.w	r8, #3
 8026c4c:	2600      	movs	r6, #0
 8026c4e:	2700      	movs	r7, #0
 8026c50:	4632      	mov	r2, r6
 8026c52:	463b      	mov	r3, r7
 8026c54:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8026c58:	f108 3aff 	add.w	sl, r8, #4294967295
 8026c5c:	f7d9 ff3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8026c60:	b9b0      	cbnz	r0, 8026c90 <__ieee754_rem_pio2+0x3d8>
 8026c62:	4b0d      	ldr	r3, [pc, #52]	; (8026c98 <__ieee754_rem_pio2+0x3e0>)
 8026c64:	9301      	str	r3, [sp, #4]
 8026c66:	2302      	movs	r3, #2
 8026c68:	9300      	str	r3, [sp, #0]
 8026c6a:	462a      	mov	r2, r5
 8026c6c:	4643      	mov	r3, r8
 8026c6e:	4621      	mov	r1, r4
 8026c70:	a806      	add	r0, sp, #24
 8026c72:	f000 fab9 	bl	80271e8 <__kernel_rem_pio2>
 8026c76:	9b04      	ldr	r3, [sp, #16]
 8026c78:	2b00      	cmp	r3, #0
 8026c7a:	4605      	mov	r5, r0
 8026c7c:	f6bf ae58 	bge.w	8026930 <__ieee754_rem_pio2+0x78>
 8026c80:	6863      	ldr	r3, [r4, #4]
 8026c82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8026c86:	6063      	str	r3, [r4, #4]
 8026c88:	68e3      	ldr	r3, [r4, #12]
 8026c8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8026c8e:	e746      	b.n	8026b1e <__ieee754_rem_pio2+0x266>
 8026c90:	46d0      	mov	r8, sl
 8026c92:	e7dd      	b.n	8026c50 <__ieee754_rem_pio2+0x398>
 8026c94:	41700000 	.word	0x41700000
 8026c98:	0802e018 	.word	0x0802e018

08026c9c <__ieee754_sqrt>:
 8026c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026ca0:	4955      	ldr	r1, [pc, #340]	; (8026df8 <__ieee754_sqrt+0x15c>)
 8026ca2:	ec55 4b10 	vmov	r4, r5, d0
 8026ca6:	43a9      	bics	r1, r5
 8026ca8:	462b      	mov	r3, r5
 8026caa:	462a      	mov	r2, r5
 8026cac:	d112      	bne.n	8026cd4 <__ieee754_sqrt+0x38>
 8026cae:	ee10 2a10 	vmov	r2, s0
 8026cb2:	ee10 0a10 	vmov	r0, s0
 8026cb6:	4629      	mov	r1, r5
 8026cb8:	f7d9 fca6 	bl	8000608 <__aeabi_dmul>
 8026cbc:	4602      	mov	r2, r0
 8026cbe:	460b      	mov	r3, r1
 8026cc0:	4620      	mov	r0, r4
 8026cc2:	4629      	mov	r1, r5
 8026cc4:	f7d9 faea 	bl	800029c <__adddf3>
 8026cc8:	4604      	mov	r4, r0
 8026cca:	460d      	mov	r5, r1
 8026ccc:	ec45 4b10 	vmov	d0, r4, r5
 8026cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026cd4:	2d00      	cmp	r5, #0
 8026cd6:	ee10 0a10 	vmov	r0, s0
 8026cda:	4621      	mov	r1, r4
 8026cdc:	dc0f      	bgt.n	8026cfe <__ieee754_sqrt+0x62>
 8026cde:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8026ce2:	4330      	orrs	r0, r6
 8026ce4:	d0f2      	beq.n	8026ccc <__ieee754_sqrt+0x30>
 8026ce6:	b155      	cbz	r5, 8026cfe <__ieee754_sqrt+0x62>
 8026ce8:	ee10 2a10 	vmov	r2, s0
 8026cec:	4620      	mov	r0, r4
 8026cee:	4629      	mov	r1, r5
 8026cf0:	f7d9 fad2 	bl	8000298 <__aeabi_dsub>
 8026cf4:	4602      	mov	r2, r0
 8026cf6:	460b      	mov	r3, r1
 8026cf8:	f7d9 fdb0 	bl	800085c <__aeabi_ddiv>
 8026cfc:	e7e4      	b.n	8026cc8 <__ieee754_sqrt+0x2c>
 8026cfe:	151b      	asrs	r3, r3, #20
 8026d00:	d073      	beq.n	8026dea <__ieee754_sqrt+0x14e>
 8026d02:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8026d06:	07dd      	lsls	r5, r3, #31
 8026d08:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8026d0c:	bf48      	it	mi
 8026d0e:	0fc8      	lsrmi	r0, r1, #31
 8026d10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8026d14:	bf44      	itt	mi
 8026d16:	0049      	lslmi	r1, r1, #1
 8026d18:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8026d1c:	2500      	movs	r5, #0
 8026d1e:	1058      	asrs	r0, r3, #1
 8026d20:	0fcb      	lsrs	r3, r1, #31
 8026d22:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8026d26:	0049      	lsls	r1, r1, #1
 8026d28:	2316      	movs	r3, #22
 8026d2a:	462c      	mov	r4, r5
 8026d2c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8026d30:	19a7      	adds	r7, r4, r6
 8026d32:	4297      	cmp	r7, r2
 8026d34:	bfde      	ittt	le
 8026d36:	19bc      	addle	r4, r7, r6
 8026d38:	1bd2      	suble	r2, r2, r7
 8026d3a:	19ad      	addle	r5, r5, r6
 8026d3c:	0fcf      	lsrs	r7, r1, #31
 8026d3e:	3b01      	subs	r3, #1
 8026d40:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8026d44:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8026d48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8026d4c:	d1f0      	bne.n	8026d30 <__ieee754_sqrt+0x94>
 8026d4e:	f04f 0c20 	mov.w	ip, #32
 8026d52:	469e      	mov	lr, r3
 8026d54:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8026d58:	42a2      	cmp	r2, r4
 8026d5a:	eb06 070e 	add.w	r7, r6, lr
 8026d5e:	dc02      	bgt.n	8026d66 <__ieee754_sqrt+0xca>
 8026d60:	d112      	bne.n	8026d88 <__ieee754_sqrt+0xec>
 8026d62:	428f      	cmp	r7, r1
 8026d64:	d810      	bhi.n	8026d88 <__ieee754_sqrt+0xec>
 8026d66:	2f00      	cmp	r7, #0
 8026d68:	eb07 0e06 	add.w	lr, r7, r6
 8026d6c:	da42      	bge.n	8026df4 <__ieee754_sqrt+0x158>
 8026d6e:	f1be 0f00 	cmp.w	lr, #0
 8026d72:	db3f      	blt.n	8026df4 <__ieee754_sqrt+0x158>
 8026d74:	f104 0801 	add.w	r8, r4, #1
 8026d78:	1b12      	subs	r2, r2, r4
 8026d7a:	428f      	cmp	r7, r1
 8026d7c:	bf88      	it	hi
 8026d7e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8026d82:	1bc9      	subs	r1, r1, r7
 8026d84:	4433      	add	r3, r6
 8026d86:	4644      	mov	r4, r8
 8026d88:	0052      	lsls	r2, r2, #1
 8026d8a:	f1bc 0c01 	subs.w	ip, ip, #1
 8026d8e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8026d92:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8026d96:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8026d9a:	d1dd      	bne.n	8026d58 <__ieee754_sqrt+0xbc>
 8026d9c:	430a      	orrs	r2, r1
 8026d9e:	d006      	beq.n	8026dae <__ieee754_sqrt+0x112>
 8026da0:	1c5c      	adds	r4, r3, #1
 8026da2:	bf13      	iteet	ne
 8026da4:	3301      	addne	r3, #1
 8026da6:	3501      	addeq	r5, #1
 8026da8:	4663      	moveq	r3, ip
 8026daa:	f023 0301 	bicne.w	r3, r3, #1
 8026dae:	106a      	asrs	r2, r5, #1
 8026db0:	085b      	lsrs	r3, r3, #1
 8026db2:	07e9      	lsls	r1, r5, #31
 8026db4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8026db8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8026dbc:	bf48      	it	mi
 8026dbe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8026dc2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8026dc6:	461c      	mov	r4, r3
 8026dc8:	e780      	b.n	8026ccc <__ieee754_sqrt+0x30>
 8026dca:	0aca      	lsrs	r2, r1, #11
 8026dcc:	3815      	subs	r0, #21
 8026dce:	0549      	lsls	r1, r1, #21
 8026dd0:	2a00      	cmp	r2, #0
 8026dd2:	d0fa      	beq.n	8026dca <__ieee754_sqrt+0x12e>
 8026dd4:	02d6      	lsls	r6, r2, #11
 8026dd6:	d50a      	bpl.n	8026dee <__ieee754_sqrt+0x152>
 8026dd8:	f1c3 0420 	rsb	r4, r3, #32
 8026ddc:	fa21 f404 	lsr.w	r4, r1, r4
 8026de0:	1e5d      	subs	r5, r3, #1
 8026de2:	4099      	lsls	r1, r3
 8026de4:	4322      	orrs	r2, r4
 8026de6:	1b43      	subs	r3, r0, r5
 8026de8:	e78b      	b.n	8026d02 <__ieee754_sqrt+0x66>
 8026dea:	4618      	mov	r0, r3
 8026dec:	e7f0      	b.n	8026dd0 <__ieee754_sqrt+0x134>
 8026dee:	0052      	lsls	r2, r2, #1
 8026df0:	3301      	adds	r3, #1
 8026df2:	e7ef      	b.n	8026dd4 <__ieee754_sqrt+0x138>
 8026df4:	46a0      	mov	r8, r4
 8026df6:	e7bf      	b.n	8026d78 <__ieee754_sqrt+0xdc>
 8026df8:	7ff00000 	.word	0x7ff00000

08026dfc <__ieee754_rem_pio2f>:
 8026dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026dfe:	ee10 6a10 	vmov	r6, s0
 8026e02:	4b86      	ldr	r3, [pc, #536]	; (802701c <__ieee754_rem_pio2f+0x220>)
 8026e04:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8026e08:	429c      	cmp	r4, r3
 8026e0a:	b087      	sub	sp, #28
 8026e0c:	4605      	mov	r5, r0
 8026e0e:	dc05      	bgt.n	8026e1c <__ieee754_rem_pio2f+0x20>
 8026e10:	2300      	movs	r3, #0
 8026e12:	ed85 0a00 	vstr	s0, [r5]
 8026e16:	6043      	str	r3, [r0, #4]
 8026e18:	2000      	movs	r0, #0
 8026e1a:	e020      	b.n	8026e5e <__ieee754_rem_pio2f+0x62>
 8026e1c:	4b80      	ldr	r3, [pc, #512]	; (8027020 <__ieee754_rem_pio2f+0x224>)
 8026e1e:	429c      	cmp	r4, r3
 8026e20:	dc38      	bgt.n	8026e94 <__ieee754_rem_pio2f+0x98>
 8026e22:	2e00      	cmp	r6, #0
 8026e24:	f024 040f 	bic.w	r4, r4, #15
 8026e28:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8027024 <__ieee754_rem_pio2f+0x228>
 8026e2c:	4b7e      	ldr	r3, [pc, #504]	; (8027028 <__ieee754_rem_pio2f+0x22c>)
 8026e2e:	dd18      	ble.n	8026e62 <__ieee754_rem_pio2f+0x66>
 8026e30:	429c      	cmp	r4, r3
 8026e32:	ee70 7a47 	vsub.f32	s15, s0, s14
 8026e36:	bf09      	itett	eq
 8026e38:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 802702c <__ieee754_rem_pio2f+0x230>
 8026e3c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8027030 <__ieee754_rem_pio2f+0x234>
 8026e40:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8026e44:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8027034 <__ieee754_rem_pio2f+0x238>
 8026e48:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8026e4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8026e50:	edc0 6a00 	vstr	s13, [r0]
 8026e54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026e58:	edc0 7a01 	vstr	s15, [r0, #4]
 8026e5c:	2001      	movs	r0, #1
 8026e5e:	b007      	add	sp, #28
 8026e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026e62:	429c      	cmp	r4, r3
 8026e64:	ee70 7a07 	vadd.f32	s15, s0, s14
 8026e68:	bf09      	itett	eq
 8026e6a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 802702c <__ieee754_rem_pio2f+0x230>
 8026e6e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8027030 <__ieee754_rem_pio2f+0x234>
 8026e72:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8026e76:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8027034 <__ieee754_rem_pio2f+0x238>
 8026e7a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8026e7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8026e82:	edc0 6a00 	vstr	s13, [r0]
 8026e86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026e8a:	edc0 7a01 	vstr	s15, [r0, #4]
 8026e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8026e92:	e7e4      	b.n	8026e5e <__ieee754_rem_pio2f+0x62>
 8026e94:	4b68      	ldr	r3, [pc, #416]	; (8027038 <__ieee754_rem_pio2f+0x23c>)
 8026e96:	429c      	cmp	r4, r3
 8026e98:	dc71      	bgt.n	8026f7e <__ieee754_rem_pio2f+0x182>
 8026e9a:	f001 fb7f 	bl	802859c <fabsf>
 8026e9e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 802703c <__ieee754_rem_pio2f+0x240>
 8026ea2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8026ea6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8026eaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8026eae:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8026eb2:	ee17 0a90 	vmov	r0, s15
 8026eb6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8027024 <__ieee754_rem_pio2f+0x228>
 8026eba:	eeb1 7a46 	vneg.f32	s14, s12
 8026ebe:	eea7 0a27 	vfma.f32	s0, s14, s15
 8026ec2:	281f      	cmp	r0, #31
 8026ec4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8027030 <__ieee754_rem_pio2f+0x234>
 8026ec8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8026ecc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8026ed0:	ee16 3a90 	vmov	r3, s13
 8026ed4:	dc1c      	bgt.n	8026f10 <__ieee754_rem_pio2f+0x114>
 8026ed6:	1e47      	subs	r7, r0, #1
 8026ed8:	4959      	ldr	r1, [pc, #356]	; (8027040 <__ieee754_rem_pio2f+0x244>)
 8026eda:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8026ede:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8026ee2:	428a      	cmp	r2, r1
 8026ee4:	d014      	beq.n	8026f10 <__ieee754_rem_pio2f+0x114>
 8026ee6:	602b      	str	r3, [r5, #0]
 8026ee8:	ed95 7a00 	vldr	s14, [r5]
 8026eec:	ee30 0a47 	vsub.f32	s0, s0, s14
 8026ef0:	2e00      	cmp	r6, #0
 8026ef2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8026ef6:	ed85 0a01 	vstr	s0, [r5, #4]
 8026efa:	dab0      	bge.n	8026e5e <__ieee754_rem_pio2f+0x62>
 8026efc:	eeb1 7a47 	vneg.f32	s14, s14
 8026f00:	eeb1 0a40 	vneg.f32	s0, s0
 8026f04:	ed85 7a00 	vstr	s14, [r5]
 8026f08:	ed85 0a01 	vstr	s0, [r5, #4]
 8026f0c:	4240      	negs	r0, r0
 8026f0e:	e7a6      	b.n	8026e5e <__ieee754_rem_pio2f+0x62>
 8026f10:	15e4      	asrs	r4, r4, #23
 8026f12:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8026f16:	1aa2      	subs	r2, r4, r2
 8026f18:	2a08      	cmp	r2, #8
 8026f1a:	dde4      	ble.n	8026ee6 <__ieee754_rem_pio2f+0xea>
 8026f1c:	eddf 7a43 	vldr	s15, [pc, #268]	; 802702c <__ieee754_rem_pio2f+0x230>
 8026f20:	eef0 6a40 	vmov.f32	s13, s0
 8026f24:	eee7 6a27 	vfma.f32	s13, s14, s15
 8026f28:	ee30 0a66 	vsub.f32	s0, s0, s13
 8026f2c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8026f30:	eddf 7a40 	vldr	s15, [pc, #256]	; 8027034 <__ieee754_rem_pio2f+0x238>
 8026f34:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8026f38:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8026f3c:	eef0 7a40 	vmov.f32	s15, s0
 8026f40:	ee15 3a90 	vmov	r3, s11
 8026f44:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8026f48:	1aa4      	subs	r4, r4, r2
 8026f4a:	2c19      	cmp	r4, #25
 8026f4c:	dc04      	bgt.n	8026f58 <__ieee754_rem_pio2f+0x15c>
 8026f4e:	edc5 5a00 	vstr	s11, [r5]
 8026f52:	eeb0 0a66 	vmov.f32	s0, s13
 8026f56:	e7c7      	b.n	8026ee8 <__ieee754_rem_pio2f+0xec>
 8026f58:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8027044 <__ieee754_rem_pio2f+0x248>
 8026f5c:	eeb0 0a66 	vmov.f32	s0, s13
 8026f60:	eea7 0a25 	vfma.f32	s0, s14, s11
 8026f64:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8026f68:	eee7 7a25 	vfma.f32	s15, s14, s11
 8026f6c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8027048 <__ieee754_rem_pio2f+0x24c>
 8026f70:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8026f74:	ee30 7a67 	vsub.f32	s14, s0, s15
 8026f78:	ed85 7a00 	vstr	s14, [r5]
 8026f7c:	e7b4      	b.n	8026ee8 <__ieee754_rem_pio2f+0xec>
 8026f7e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8026f82:	db06      	blt.n	8026f92 <__ieee754_rem_pio2f+0x196>
 8026f84:	ee70 7a40 	vsub.f32	s15, s0, s0
 8026f88:	edc0 7a01 	vstr	s15, [r0, #4]
 8026f8c:	edc0 7a00 	vstr	s15, [r0]
 8026f90:	e742      	b.n	8026e18 <__ieee754_rem_pio2f+0x1c>
 8026f92:	15e2      	asrs	r2, r4, #23
 8026f94:	3a86      	subs	r2, #134	; 0x86
 8026f96:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8026f9a:	ee07 3a90 	vmov	s15, r3
 8026f9e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8026fa2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 802704c <__ieee754_rem_pio2f+0x250>
 8026fa6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026faa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026fae:	ed8d 7a03 	vstr	s14, [sp, #12]
 8026fb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8026fb6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8026fba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026fbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026fc2:	ed8d 7a04 	vstr	s14, [sp, #16]
 8026fc6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8026fca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8026fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026fd2:	edcd 7a05 	vstr	s15, [sp, #20]
 8026fd6:	d11e      	bne.n	8027016 <__ieee754_rem_pio2f+0x21a>
 8026fd8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8026fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026fe0:	bf0c      	ite	eq
 8026fe2:	2301      	moveq	r3, #1
 8026fe4:	2302      	movne	r3, #2
 8026fe6:	491a      	ldr	r1, [pc, #104]	; (8027050 <__ieee754_rem_pio2f+0x254>)
 8026fe8:	9101      	str	r1, [sp, #4]
 8026fea:	2102      	movs	r1, #2
 8026fec:	9100      	str	r1, [sp, #0]
 8026fee:	a803      	add	r0, sp, #12
 8026ff0:	4629      	mov	r1, r5
 8026ff2:	f000 fd51 	bl	8027a98 <__kernel_rem_pio2f>
 8026ff6:	2e00      	cmp	r6, #0
 8026ff8:	f6bf af31 	bge.w	8026e5e <__ieee754_rem_pio2f+0x62>
 8026ffc:	edd5 7a00 	vldr	s15, [r5]
 8027000:	eef1 7a67 	vneg.f32	s15, s15
 8027004:	edc5 7a00 	vstr	s15, [r5]
 8027008:	edd5 7a01 	vldr	s15, [r5, #4]
 802700c:	eef1 7a67 	vneg.f32	s15, s15
 8027010:	edc5 7a01 	vstr	s15, [r5, #4]
 8027014:	e77a      	b.n	8026f0c <__ieee754_rem_pio2f+0x110>
 8027016:	2303      	movs	r3, #3
 8027018:	e7e5      	b.n	8026fe6 <__ieee754_rem_pio2f+0x1ea>
 802701a:	bf00      	nop
 802701c:	3f490fd8 	.word	0x3f490fd8
 8027020:	4016cbe3 	.word	0x4016cbe3
 8027024:	3fc90f80 	.word	0x3fc90f80
 8027028:	3fc90fd0 	.word	0x3fc90fd0
 802702c:	37354400 	.word	0x37354400
 8027030:	37354443 	.word	0x37354443
 8027034:	2e85a308 	.word	0x2e85a308
 8027038:	43490f80 	.word	0x43490f80
 802703c:	3f22f984 	.word	0x3f22f984
 8027040:	0802e120 	.word	0x0802e120
 8027044:	2e85a300 	.word	0x2e85a300
 8027048:	248d3132 	.word	0x248d3132
 802704c:	43800000 	.word	0x43800000
 8027050:	0802e1a0 	.word	0x0802e1a0
 8027054:	00000000 	.word	0x00000000

08027058 <__kernel_cos>:
 8027058:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802705c:	ec59 8b10 	vmov	r8, r9, d0
 8027060:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8027064:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8027068:	ed2d 8b02 	vpush	{d8}
 802706c:	eeb0 8a41 	vmov.f32	s16, s2
 8027070:	eef0 8a61 	vmov.f32	s17, s3
 8027074:	da07      	bge.n	8027086 <__kernel_cos+0x2e>
 8027076:	ee10 0a10 	vmov	r0, s0
 802707a:	4649      	mov	r1, r9
 802707c:	f7d9 fd74 	bl	8000b68 <__aeabi_d2iz>
 8027080:	2800      	cmp	r0, #0
 8027082:	f000 8089 	beq.w	8027198 <__kernel_cos+0x140>
 8027086:	4642      	mov	r2, r8
 8027088:	464b      	mov	r3, r9
 802708a:	4640      	mov	r0, r8
 802708c:	4649      	mov	r1, r9
 802708e:	f7d9 fabb 	bl	8000608 <__aeabi_dmul>
 8027092:	2200      	movs	r2, #0
 8027094:	4b4e      	ldr	r3, [pc, #312]	; (80271d0 <__kernel_cos+0x178>)
 8027096:	4604      	mov	r4, r0
 8027098:	460d      	mov	r5, r1
 802709a:	f7d9 fab5 	bl	8000608 <__aeabi_dmul>
 802709e:	a340      	add	r3, pc, #256	; (adr r3, 80271a0 <__kernel_cos+0x148>)
 80270a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80270a4:	4682      	mov	sl, r0
 80270a6:	468b      	mov	fp, r1
 80270a8:	4620      	mov	r0, r4
 80270aa:	4629      	mov	r1, r5
 80270ac:	f7d9 faac 	bl	8000608 <__aeabi_dmul>
 80270b0:	a33d      	add	r3, pc, #244	; (adr r3, 80271a8 <__kernel_cos+0x150>)
 80270b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80270b6:	f7d9 f8f1 	bl	800029c <__adddf3>
 80270ba:	4622      	mov	r2, r4
 80270bc:	462b      	mov	r3, r5
 80270be:	f7d9 faa3 	bl	8000608 <__aeabi_dmul>
 80270c2:	a33b      	add	r3, pc, #236	; (adr r3, 80271b0 <__kernel_cos+0x158>)
 80270c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80270c8:	f7d9 f8e6 	bl	8000298 <__aeabi_dsub>
 80270cc:	4622      	mov	r2, r4
 80270ce:	462b      	mov	r3, r5
 80270d0:	f7d9 fa9a 	bl	8000608 <__aeabi_dmul>
 80270d4:	a338      	add	r3, pc, #224	; (adr r3, 80271b8 <__kernel_cos+0x160>)
 80270d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80270da:	f7d9 f8df 	bl	800029c <__adddf3>
 80270de:	4622      	mov	r2, r4
 80270e0:	462b      	mov	r3, r5
 80270e2:	f7d9 fa91 	bl	8000608 <__aeabi_dmul>
 80270e6:	a336      	add	r3, pc, #216	; (adr r3, 80271c0 <__kernel_cos+0x168>)
 80270e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80270ec:	f7d9 f8d4 	bl	8000298 <__aeabi_dsub>
 80270f0:	4622      	mov	r2, r4
 80270f2:	462b      	mov	r3, r5
 80270f4:	f7d9 fa88 	bl	8000608 <__aeabi_dmul>
 80270f8:	a333      	add	r3, pc, #204	; (adr r3, 80271c8 <__kernel_cos+0x170>)
 80270fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80270fe:	f7d9 f8cd 	bl	800029c <__adddf3>
 8027102:	4622      	mov	r2, r4
 8027104:	462b      	mov	r3, r5
 8027106:	f7d9 fa7f 	bl	8000608 <__aeabi_dmul>
 802710a:	4622      	mov	r2, r4
 802710c:	462b      	mov	r3, r5
 802710e:	f7d9 fa7b 	bl	8000608 <__aeabi_dmul>
 8027112:	ec53 2b18 	vmov	r2, r3, d8
 8027116:	4604      	mov	r4, r0
 8027118:	460d      	mov	r5, r1
 802711a:	4640      	mov	r0, r8
 802711c:	4649      	mov	r1, r9
 802711e:	f7d9 fa73 	bl	8000608 <__aeabi_dmul>
 8027122:	460b      	mov	r3, r1
 8027124:	4602      	mov	r2, r0
 8027126:	4629      	mov	r1, r5
 8027128:	4620      	mov	r0, r4
 802712a:	f7d9 f8b5 	bl	8000298 <__aeabi_dsub>
 802712e:	4b29      	ldr	r3, [pc, #164]	; (80271d4 <__kernel_cos+0x17c>)
 8027130:	429e      	cmp	r6, r3
 8027132:	4680      	mov	r8, r0
 8027134:	4689      	mov	r9, r1
 8027136:	dc11      	bgt.n	802715c <__kernel_cos+0x104>
 8027138:	4602      	mov	r2, r0
 802713a:	460b      	mov	r3, r1
 802713c:	4650      	mov	r0, sl
 802713e:	4659      	mov	r1, fp
 8027140:	f7d9 f8aa 	bl	8000298 <__aeabi_dsub>
 8027144:	460b      	mov	r3, r1
 8027146:	4924      	ldr	r1, [pc, #144]	; (80271d8 <__kernel_cos+0x180>)
 8027148:	4602      	mov	r2, r0
 802714a:	2000      	movs	r0, #0
 802714c:	f7d9 f8a4 	bl	8000298 <__aeabi_dsub>
 8027150:	ecbd 8b02 	vpop	{d8}
 8027154:	ec41 0b10 	vmov	d0, r0, r1
 8027158:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802715c:	4b1f      	ldr	r3, [pc, #124]	; (80271dc <__kernel_cos+0x184>)
 802715e:	491e      	ldr	r1, [pc, #120]	; (80271d8 <__kernel_cos+0x180>)
 8027160:	429e      	cmp	r6, r3
 8027162:	bfcc      	ite	gt
 8027164:	4d1e      	ldrgt	r5, [pc, #120]	; (80271e0 <__kernel_cos+0x188>)
 8027166:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 802716a:	2400      	movs	r4, #0
 802716c:	4622      	mov	r2, r4
 802716e:	462b      	mov	r3, r5
 8027170:	2000      	movs	r0, #0
 8027172:	f7d9 f891 	bl	8000298 <__aeabi_dsub>
 8027176:	4622      	mov	r2, r4
 8027178:	4606      	mov	r6, r0
 802717a:	460f      	mov	r7, r1
 802717c:	462b      	mov	r3, r5
 802717e:	4650      	mov	r0, sl
 8027180:	4659      	mov	r1, fp
 8027182:	f7d9 f889 	bl	8000298 <__aeabi_dsub>
 8027186:	4642      	mov	r2, r8
 8027188:	464b      	mov	r3, r9
 802718a:	f7d9 f885 	bl	8000298 <__aeabi_dsub>
 802718e:	4602      	mov	r2, r0
 8027190:	460b      	mov	r3, r1
 8027192:	4630      	mov	r0, r6
 8027194:	4639      	mov	r1, r7
 8027196:	e7d9      	b.n	802714c <__kernel_cos+0xf4>
 8027198:	2000      	movs	r0, #0
 802719a:	490f      	ldr	r1, [pc, #60]	; (80271d8 <__kernel_cos+0x180>)
 802719c:	e7d8      	b.n	8027150 <__kernel_cos+0xf8>
 802719e:	bf00      	nop
 80271a0:	be8838d4 	.word	0xbe8838d4
 80271a4:	bda8fae9 	.word	0xbda8fae9
 80271a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80271ac:	3e21ee9e 	.word	0x3e21ee9e
 80271b0:	809c52ad 	.word	0x809c52ad
 80271b4:	3e927e4f 	.word	0x3e927e4f
 80271b8:	19cb1590 	.word	0x19cb1590
 80271bc:	3efa01a0 	.word	0x3efa01a0
 80271c0:	16c15177 	.word	0x16c15177
 80271c4:	3f56c16c 	.word	0x3f56c16c
 80271c8:	5555554c 	.word	0x5555554c
 80271cc:	3fa55555 	.word	0x3fa55555
 80271d0:	3fe00000 	.word	0x3fe00000
 80271d4:	3fd33332 	.word	0x3fd33332
 80271d8:	3ff00000 	.word	0x3ff00000
 80271dc:	3fe90000 	.word	0x3fe90000
 80271e0:	3fd20000 	.word	0x3fd20000
 80271e4:	00000000 	.word	0x00000000

080271e8 <__kernel_rem_pio2>:
 80271e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80271ec:	ed2d 8b02 	vpush	{d8}
 80271f0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80271f4:	1ed4      	subs	r4, r2, #3
 80271f6:	9308      	str	r3, [sp, #32]
 80271f8:	9101      	str	r1, [sp, #4]
 80271fa:	4bc5      	ldr	r3, [pc, #788]	; (8027510 <__kernel_rem_pio2+0x328>)
 80271fc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80271fe:	9009      	str	r0, [sp, #36]	; 0x24
 8027200:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8027204:	9304      	str	r3, [sp, #16]
 8027206:	9b08      	ldr	r3, [sp, #32]
 8027208:	3b01      	subs	r3, #1
 802720a:	9307      	str	r3, [sp, #28]
 802720c:	2318      	movs	r3, #24
 802720e:	fb94 f4f3 	sdiv	r4, r4, r3
 8027212:	f06f 0317 	mvn.w	r3, #23
 8027216:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802721a:	fb04 3303 	mla	r3, r4, r3, r3
 802721e:	eb03 0a02 	add.w	sl, r3, r2
 8027222:	9b04      	ldr	r3, [sp, #16]
 8027224:	9a07      	ldr	r2, [sp, #28]
 8027226:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8027500 <__kernel_rem_pio2+0x318>
 802722a:	eb03 0802 	add.w	r8, r3, r2
 802722e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8027230:	1aa7      	subs	r7, r4, r2
 8027232:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8027236:	ae22      	add	r6, sp, #136	; 0x88
 8027238:	2500      	movs	r5, #0
 802723a:	4545      	cmp	r5, r8
 802723c:	dd13      	ble.n	8027266 <__kernel_rem_pio2+0x7e>
 802723e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8027500 <__kernel_rem_pio2+0x318>
 8027242:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8027246:	2600      	movs	r6, #0
 8027248:	9b04      	ldr	r3, [sp, #16]
 802724a:	429e      	cmp	r6, r3
 802724c:	dc32      	bgt.n	80272b4 <__kernel_rem_pio2+0xcc>
 802724e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027250:	9302      	str	r3, [sp, #8]
 8027252:	9b08      	ldr	r3, [sp, #32]
 8027254:	199d      	adds	r5, r3, r6
 8027256:	ab22      	add	r3, sp, #136	; 0x88
 8027258:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802725c:	9306      	str	r3, [sp, #24]
 802725e:	ec59 8b18 	vmov	r8, r9, d8
 8027262:	2700      	movs	r7, #0
 8027264:	e01f      	b.n	80272a6 <__kernel_rem_pio2+0xbe>
 8027266:	42ef      	cmn	r7, r5
 8027268:	d407      	bmi.n	802727a <__kernel_rem_pio2+0x92>
 802726a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 802726e:	f7d9 f961 	bl	8000534 <__aeabi_i2d>
 8027272:	e8e6 0102 	strd	r0, r1, [r6], #8
 8027276:	3501      	adds	r5, #1
 8027278:	e7df      	b.n	802723a <__kernel_rem_pio2+0x52>
 802727a:	ec51 0b18 	vmov	r0, r1, d8
 802727e:	e7f8      	b.n	8027272 <__kernel_rem_pio2+0x8a>
 8027280:	9906      	ldr	r1, [sp, #24]
 8027282:	9d02      	ldr	r5, [sp, #8]
 8027284:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8027288:	9106      	str	r1, [sp, #24]
 802728a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 802728e:	9502      	str	r5, [sp, #8]
 8027290:	f7d9 f9ba 	bl	8000608 <__aeabi_dmul>
 8027294:	4602      	mov	r2, r0
 8027296:	460b      	mov	r3, r1
 8027298:	4640      	mov	r0, r8
 802729a:	4649      	mov	r1, r9
 802729c:	f7d8 fffe 	bl	800029c <__adddf3>
 80272a0:	3701      	adds	r7, #1
 80272a2:	4680      	mov	r8, r0
 80272a4:	4689      	mov	r9, r1
 80272a6:	9b07      	ldr	r3, [sp, #28]
 80272a8:	429f      	cmp	r7, r3
 80272aa:	dde9      	ble.n	8027280 <__kernel_rem_pio2+0x98>
 80272ac:	e8eb 8902 	strd	r8, r9, [fp], #8
 80272b0:	3601      	adds	r6, #1
 80272b2:	e7c9      	b.n	8027248 <__kernel_rem_pio2+0x60>
 80272b4:	9b04      	ldr	r3, [sp, #16]
 80272b6:	aa0e      	add	r2, sp, #56	; 0x38
 80272b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80272bc:	930c      	str	r3, [sp, #48]	; 0x30
 80272be:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80272c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80272c4:	9c04      	ldr	r4, [sp, #16]
 80272c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80272c8:	ab9a      	add	r3, sp, #616	; 0x268
 80272ca:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80272ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80272d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80272d6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80272da:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80272de:	ab9a      	add	r3, sp, #616	; 0x268
 80272e0:	445b      	add	r3, fp
 80272e2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80272e6:	2500      	movs	r5, #0
 80272e8:	1b63      	subs	r3, r4, r5
 80272ea:	2b00      	cmp	r3, #0
 80272ec:	dc78      	bgt.n	80273e0 <__kernel_rem_pio2+0x1f8>
 80272ee:	4650      	mov	r0, sl
 80272f0:	ec49 8b10 	vmov	d0, r8, r9
 80272f4:	f001 f8dc 	bl	80284b0 <scalbn>
 80272f8:	ec57 6b10 	vmov	r6, r7, d0
 80272fc:	2200      	movs	r2, #0
 80272fe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8027302:	ee10 0a10 	vmov	r0, s0
 8027306:	4639      	mov	r1, r7
 8027308:	f7d9 f97e 	bl	8000608 <__aeabi_dmul>
 802730c:	ec41 0b10 	vmov	d0, r0, r1
 8027310:	f7fd fd6a 	bl	8024de8 <floor>
 8027314:	2200      	movs	r2, #0
 8027316:	ec51 0b10 	vmov	r0, r1, d0
 802731a:	4b7e      	ldr	r3, [pc, #504]	; (8027514 <__kernel_rem_pio2+0x32c>)
 802731c:	f7d9 f974 	bl	8000608 <__aeabi_dmul>
 8027320:	4602      	mov	r2, r0
 8027322:	460b      	mov	r3, r1
 8027324:	4630      	mov	r0, r6
 8027326:	4639      	mov	r1, r7
 8027328:	f7d8 ffb6 	bl	8000298 <__aeabi_dsub>
 802732c:	460f      	mov	r7, r1
 802732e:	4606      	mov	r6, r0
 8027330:	f7d9 fc1a 	bl	8000b68 <__aeabi_d2iz>
 8027334:	9006      	str	r0, [sp, #24]
 8027336:	f7d9 f8fd 	bl	8000534 <__aeabi_i2d>
 802733a:	4602      	mov	r2, r0
 802733c:	460b      	mov	r3, r1
 802733e:	4630      	mov	r0, r6
 8027340:	4639      	mov	r1, r7
 8027342:	f7d8 ffa9 	bl	8000298 <__aeabi_dsub>
 8027346:	f1ba 0f00 	cmp.w	sl, #0
 802734a:	4606      	mov	r6, r0
 802734c:	460f      	mov	r7, r1
 802734e:	dd6c      	ble.n	802742a <__kernel_rem_pio2+0x242>
 8027350:	1e62      	subs	r2, r4, #1
 8027352:	ab0e      	add	r3, sp, #56	; 0x38
 8027354:	f1ca 0118 	rsb	r1, sl, #24
 8027358:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802735c:	9d06      	ldr	r5, [sp, #24]
 802735e:	fa40 f301 	asr.w	r3, r0, r1
 8027362:	441d      	add	r5, r3
 8027364:	408b      	lsls	r3, r1
 8027366:	1ac0      	subs	r0, r0, r3
 8027368:	ab0e      	add	r3, sp, #56	; 0x38
 802736a:	9506      	str	r5, [sp, #24]
 802736c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8027370:	f1ca 0317 	rsb	r3, sl, #23
 8027374:	fa40 f303 	asr.w	r3, r0, r3
 8027378:	9302      	str	r3, [sp, #8]
 802737a:	9b02      	ldr	r3, [sp, #8]
 802737c:	2b00      	cmp	r3, #0
 802737e:	dd62      	ble.n	8027446 <__kernel_rem_pio2+0x25e>
 8027380:	9b06      	ldr	r3, [sp, #24]
 8027382:	2200      	movs	r2, #0
 8027384:	3301      	adds	r3, #1
 8027386:	9306      	str	r3, [sp, #24]
 8027388:	4615      	mov	r5, r2
 802738a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 802738e:	4294      	cmp	r4, r2
 8027390:	f300 8095 	bgt.w	80274be <__kernel_rem_pio2+0x2d6>
 8027394:	f1ba 0f00 	cmp.w	sl, #0
 8027398:	dd07      	ble.n	80273aa <__kernel_rem_pio2+0x1c2>
 802739a:	f1ba 0f01 	cmp.w	sl, #1
 802739e:	f000 80a2 	beq.w	80274e6 <__kernel_rem_pio2+0x2fe>
 80273a2:	f1ba 0f02 	cmp.w	sl, #2
 80273a6:	f000 80c1 	beq.w	802752c <__kernel_rem_pio2+0x344>
 80273aa:	9b02      	ldr	r3, [sp, #8]
 80273ac:	2b02      	cmp	r3, #2
 80273ae:	d14a      	bne.n	8027446 <__kernel_rem_pio2+0x25e>
 80273b0:	4632      	mov	r2, r6
 80273b2:	463b      	mov	r3, r7
 80273b4:	2000      	movs	r0, #0
 80273b6:	4958      	ldr	r1, [pc, #352]	; (8027518 <__kernel_rem_pio2+0x330>)
 80273b8:	f7d8 ff6e 	bl	8000298 <__aeabi_dsub>
 80273bc:	4606      	mov	r6, r0
 80273be:	460f      	mov	r7, r1
 80273c0:	2d00      	cmp	r5, #0
 80273c2:	d040      	beq.n	8027446 <__kernel_rem_pio2+0x25e>
 80273c4:	4650      	mov	r0, sl
 80273c6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8027508 <__kernel_rem_pio2+0x320>
 80273ca:	f001 f871 	bl	80284b0 <scalbn>
 80273ce:	4630      	mov	r0, r6
 80273d0:	4639      	mov	r1, r7
 80273d2:	ec53 2b10 	vmov	r2, r3, d0
 80273d6:	f7d8 ff5f 	bl	8000298 <__aeabi_dsub>
 80273da:	4606      	mov	r6, r0
 80273dc:	460f      	mov	r7, r1
 80273de:	e032      	b.n	8027446 <__kernel_rem_pio2+0x25e>
 80273e0:	2200      	movs	r2, #0
 80273e2:	4b4e      	ldr	r3, [pc, #312]	; (802751c <__kernel_rem_pio2+0x334>)
 80273e4:	4640      	mov	r0, r8
 80273e6:	4649      	mov	r1, r9
 80273e8:	f7d9 f90e 	bl	8000608 <__aeabi_dmul>
 80273ec:	f7d9 fbbc 	bl	8000b68 <__aeabi_d2iz>
 80273f0:	f7d9 f8a0 	bl	8000534 <__aeabi_i2d>
 80273f4:	2200      	movs	r2, #0
 80273f6:	4b4a      	ldr	r3, [pc, #296]	; (8027520 <__kernel_rem_pio2+0x338>)
 80273f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80273fc:	f7d9 f904 	bl	8000608 <__aeabi_dmul>
 8027400:	4602      	mov	r2, r0
 8027402:	460b      	mov	r3, r1
 8027404:	4640      	mov	r0, r8
 8027406:	4649      	mov	r1, r9
 8027408:	f7d8 ff46 	bl	8000298 <__aeabi_dsub>
 802740c:	f7d9 fbac 	bl	8000b68 <__aeabi_d2iz>
 8027410:	ab0e      	add	r3, sp, #56	; 0x38
 8027412:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8027416:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 802741a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802741e:	f7d8 ff3d 	bl	800029c <__adddf3>
 8027422:	3501      	adds	r5, #1
 8027424:	4680      	mov	r8, r0
 8027426:	4689      	mov	r9, r1
 8027428:	e75e      	b.n	80272e8 <__kernel_rem_pio2+0x100>
 802742a:	d105      	bne.n	8027438 <__kernel_rem_pio2+0x250>
 802742c:	1e63      	subs	r3, r4, #1
 802742e:	aa0e      	add	r2, sp, #56	; 0x38
 8027430:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8027434:	15c3      	asrs	r3, r0, #23
 8027436:	e79f      	b.n	8027378 <__kernel_rem_pio2+0x190>
 8027438:	2200      	movs	r2, #0
 802743a:	4b3a      	ldr	r3, [pc, #232]	; (8027524 <__kernel_rem_pio2+0x33c>)
 802743c:	f7d9 fb6a 	bl	8000b14 <__aeabi_dcmpge>
 8027440:	2800      	cmp	r0, #0
 8027442:	d139      	bne.n	80274b8 <__kernel_rem_pio2+0x2d0>
 8027444:	9002      	str	r0, [sp, #8]
 8027446:	2200      	movs	r2, #0
 8027448:	2300      	movs	r3, #0
 802744a:	4630      	mov	r0, r6
 802744c:	4639      	mov	r1, r7
 802744e:	f7d9 fb43 	bl	8000ad8 <__aeabi_dcmpeq>
 8027452:	2800      	cmp	r0, #0
 8027454:	f000 80c7 	beq.w	80275e6 <__kernel_rem_pio2+0x3fe>
 8027458:	1e65      	subs	r5, r4, #1
 802745a:	462b      	mov	r3, r5
 802745c:	2200      	movs	r2, #0
 802745e:	9904      	ldr	r1, [sp, #16]
 8027460:	428b      	cmp	r3, r1
 8027462:	da6a      	bge.n	802753a <__kernel_rem_pio2+0x352>
 8027464:	2a00      	cmp	r2, #0
 8027466:	f000 8088 	beq.w	802757a <__kernel_rem_pio2+0x392>
 802746a:	ab0e      	add	r3, sp, #56	; 0x38
 802746c:	f1aa 0a18 	sub.w	sl, sl, #24
 8027470:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8027474:	2b00      	cmp	r3, #0
 8027476:	f000 80b4 	beq.w	80275e2 <__kernel_rem_pio2+0x3fa>
 802747a:	4650      	mov	r0, sl
 802747c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8027508 <__kernel_rem_pio2+0x320>
 8027480:	f001 f816 	bl	80284b0 <scalbn>
 8027484:	00ec      	lsls	r4, r5, #3
 8027486:	ab72      	add	r3, sp, #456	; 0x1c8
 8027488:	191e      	adds	r6, r3, r4
 802748a:	ec59 8b10 	vmov	r8, r9, d0
 802748e:	f106 0a08 	add.w	sl, r6, #8
 8027492:	462f      	mov	r7, r5
 8027494:	2f00      	cmp	r7, #0
 8027496:	f280 80df 	bge.w	8027658 <__kernel_rem_pio2+0x470>
 802749a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8027500 <__kernel_rem_pio2+0x318>
 802749e:	f04f 0a00 	mov.w	sl, #0
 80274a2:	eba5 030a 	sub.w	r3, r5, sl
 80274a6:	2b00      	cmp	r3, #0
 80274a8:	f2c0 810a 	blt.w	80276c0 <__kernel_rem_pio2+0x4d8>
 80274ac:	f8df b078 	ldr.w	fp, [pc, #120]	; 8027528 <__kernel_rem_pio2+0x340>
 80274b0:	ec59 8b18 	vmov	r8, r9, d8
 80274b4:	2700      	movs	r7, #0
 80274b6:	e0f5      	b.n	80276a4 <__kernel_rem_pio2+0x4bc>
 80274b8:	2302      	movs	r3, #2
 80274ba:	9302      	str	r3, [sp, #8]
 80274bc:	e760      	b.n	8027380 <__kernel_rem_pio2+0x198>
 80274be:	ab0e      	add	r3, sp, #56	; 0x38
 80274c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80274c4:	b94d      	cbnz	r5, 80274da <__kernel_rem_pio2+0x2f2>
 80274c6:	b12b      	cbz	r3, 80274d4 <__kernel_rem_pio2+0x2ec>
 80274c8:	a80e      	add	r0, sp, #56	; 0x38
 80274ca:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80274ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80274d2:	2301      	movs	r3, #1
 80274d4:	3201      	adds	r2, #1
 80274d6:	461d      	mov	r5, r3
 80274d8:	e759      	b.n	802738e <__kernel_rem_pio2+0x1a6>
 80274da:	a80e      	add	r0, sp, #56	; 0x38
 80274dc:	1acb      	subs	r3, r1, r3
 80274de:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80274e2:	462b      	mov	r3, r5
 80274e4:	e7f6      	b.n	80274d4 <__kernel_rem_pio2+0x2ec>
 80274e6:	1e62      	subs	r2, r4, #1
 80274e8:	ab0e      	add	r3, sp, #56	; 0x38
 80274ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80274ee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80274f2:	a90e      	add	r1, sp, #56	; 0x38
 80274f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80274f8:	e757      	b.n	80273aa <__kernel_rem_pio2+0x1c2>
 80274fa:	bf00      	nop
 80274fc:	f3af 8000 	nop.w
	...
 802750c:	3ff00000 	.word	0x3ff00000
 8027510:	0802e4f8 	.word	0x0802e4f8
 8027514:	40200000 	.word	0x40200000
 8027518:	3ff00000 	.word	0x3ff00000
 802751c:	3e700000 	.word	0x3e700000
 8027520:	41700000 	.word	0x41700000
 8027524:	3fe00000 	.word	0x3fe00000
 8027528:	0802e4b8 	.word	0x0802e4b8
 802752c:	1e62      	subs	r2, r4, #1
 802752e:	ab0e      	add	r3, sp, #56	; 0x38
 8027530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8027534:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8027538:	e7db      	b.n	80274f2 <__kernel_rem_pio2+0x30a>
 802753a:	a90e      	add	r1, sp, #56	; 0x38
 802753c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8027540:	3b01      	subs	r3, #1
 8027542:	430a      	orrs	r2, r1
 8027544:	e78b      	b.n	802745e <__kernel_rem_pio2+0x276>
 8027546:	3301      	adds	r3, #1
 8027548:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 802754c:	2900      	cmp	r1, #0
 802754e:	d0fa      	beq.n	8027546 <__kernel_rem_pio2+0x35e>
 8027550:	9a08      	ldr	r2, [sp, #32]
 8027552:	4422      	add	r2, r4
 8027554:	00d2      	lsls	r2, r2, #3
 8027556:	a922      	add	r1, sp, #136	; 0x88
 8027558:	18e3      	adds	r3, r4, r3
 802755a:	9206      	str	r2, [sp, #24]
 802755c:	440a      	add	r2, r1
 802755e:	9302      	str	r3, [sp, #8]
 8027560:	f10b 0108 	add.w	r1, fp, #8
 8027564:	f102 0308 	add.w	r3, r2, #8
 8027568:	1c66      	adds	r6, r4, #1
 802756a:	910a      	str	r1, [sp, #40]	; 0x28
 802756c:	2500      	movs	r5, #0
 802756e:	930d      	str	r3, [sp, #52]	; 0x34
 8027570:	9b02      	ldr	r3, [sp, #8]
 8027572:	42b3      	cmp	r3, r6
 8027574:	da04      	bge.n	8027580 <__kernel_rem_pio2+0x398>
 8027576:	461c      	mov	r4, r3
 8027578:	e6a6      	b.n	80272c8 <__kernel_rem_pio2+0xe0>
 802757a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802757c:	2301      	movs	r3, #1
 802757e:	e7e3      	b.n	8027548 <__kernel_rem_pio2+0x360>
 8027580:	9b06      	ldr	r3, [sp, #24]
 8027582:	18ef      	adds	r7, r5, r3
 8027584:	ab22      	add	r3, sp, #136	; 0x88
 8027586:	441f      	add	r7, r3
 8027588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802758a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 802758e:	f7d8 ffd1 	bl	8000534 <__aeabi_i2d>
 8027592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027594:	461c      	mov	r4, r3
 8027596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027598:	e9c7 0100 	strd	r0, r1, [r7]
 802759c:	eb03 0b05 	add.w	fp, r3, r5
 80275a0:	2700      	movs	r7, #0
 80275a2:	f04f 0800 	mov.w	r8, #0
 80275a6:	f04f 0900 	mov.w	r9, #0
 80275aa:	9b07      	ldr	r3, [sp, #28]
 80275ac:	429f      	cmp	r7, r3
 80275ae:	dd08      	ble.n	80275c2 <__kernel_rem_pio2+0x3da>
 80275b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80275b2:	aa72      	add	r2, sp, #456	; 0x1c8
 80275b4:	18eb      	adds	r3, r5, r3
 80275b6:	4413      	add	r3, r2
 80275b8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80275bc:	3601      	adds	r6, #1
 80275be:	3508      	adds	r5, #8
 80275c0:	e7d6      	b.n	8027570 <__kernel_rem_pio2+0x388>
 80275c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80275c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80275ca:	f7d9 f81d 	bl	8000608 <__aeabi_dmul>
 80275ce:	4602      	mov	r2, r0
 80275d0:	460b      	mov	r3, r1
 80275d2:	4640      	mov	r0, r8
 80275d4:	4649      	mov	r1, r9
 80275d6:	f7d8 fe61 	bl	800029c <__adddf3>
 80275da:	3701      	adds	r7, #1
 80275dc:	4680      	mov	r8, r0
 80275de:	4689      	mov	r9, r1
 80275e0:	e7e3      	b.n	80275aa <__kernel_rem_pio2+0x3c2>
 80275e2:	3d01      	subs	r5, #1
 80275e4:	e741      	b.n	802746a <__kernel_rem_pio2+0x282>
 80275e6:	f1ca 0000 	rsb	r0, sl, #0
 80275ea:	ec47 6b10 	vmov	d0, r6, r7
 80275ee:	f000 ff5f 	bl	80284b0 <scalbn>
 80275f2:	ec57 6b10 	vmov	r6, r7, d0
 80275f6:	2200      	movs	r2, #0
 80275f8:	4b99      	ldr	r3, [pc, #612]	; (8027860 <__kernel_rem_pio2+0x678>)
 80275fa:	ee10 0a10 	vmov	r0, s0
 80275fe:	4639      	mov	r1, r7
 8027600:	f7d9 fa88 	bl	8000b14 <__aeabi_dcmpge>
 8027604:	b1f8      	cbz	r0, 8027646 <__kernel_rem_pio2+0x45e>
 8027606:	2200      	movs	r2, #0
 8027608:	4b96      	ldr	r3, [pc, #600]	; (8027864 <__kernel_rem_pio2+0x67c>)
 802760a:	4630      	mov	r0, r6
 802760c:	4639      	mov	r1, r7
 802760e:	f7d8 fffb 	bl	8000608 <__aeabi_dmul>
 8027612:	f7d9 faa9 	bl	8000b68 <__aeabi_d2iz>
 8027616:	4680      	mov	r8, r0
 8027618:	f7d8 ff8c 	bl	8000534 <__aeabi_i2d>
 802761c:	2200      	movs	r2, #0
 802761e:	4b90      	ldr	r3, [pc, #576]	; (8027860 <__kernel_rem_pio2+0x678>)
 8027620:	f7d8 fff2 	bl	8000608 <__aeabi_dmul>
 8027624:	460b      	mov	r3, r1
 8027626:	4602      	mov	r2, r0
 8027628:	4639      	mov	r1, r7
 802762a:	4630      	mov	r0, r6
 802762c:	f7d8 fe34 	bl	8000298 <__aeabi_dsub>
 8027630:	f7d9 fa9a 	bl	8000b68 <__aeabi_d2iz>
 8027634:	1c65      	adds	r5, r4, #1
 8027636:	ab0e      	add	r3, sp, #56	; 0x38
 8027638:	f10a 0a18 	add.w	sl, sl, #24
 802763c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8027640:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8027644:	e719      	b.n	802747a <__kernel_rem_pio2+0x292>
 8027646:	4630      	mov	r0, r6
 8027648:	4639      	mov	r1, r7
 802764a:	f7d9 fa8d 	bl	8000b68 <__aeabi_d2iz>
 802764e:	ab0e      	add	r3, sp, #56	; 0x38
 8027650:	4625      	mov	r5, r4
 8027652:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8027656:	e710      	b.n	802747a <__kernel_rem_pio2+0x292>
 8027658:	ab0e      	add	r3, sp, #56	; 0x38
 802765a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 802765e:	f7d8 ff69 	bl	8000534 <__aeabi_i2d>
 8027662:	4642      	mov	r2, r8
 8027664:	464b      	mov	r3, r9
 8027666:	f7d8 ffcf 	bl	8000608 <__aeabi_dmul>
 802766a:	2200      	movs	r2, #0
 802766c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8027670:	4b7c      	ldr	r3, [pc, #496]	; (8027864 <__kernel_rem_pio2+0x67c>)
 8027672:	4640      	mov	r0, r8
 8027674:	4649      	mov	r1, r9
 8027676:	f7d8 ffc7 	bl	8000608 <__aeabi_dmul>
 802767a:	3f01      	subs	r7, #1
 802767c:	4680      	mov	r8, r0
 802767e:	4689      	mov	r9, r1
 8027680:	e708      	b.n	8027494 <__kernel_rem_pio2+0x2ac>
 8027682:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8027686:	e9d3 2300 	ldrd	r2, r3, [r3]
 802768a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 802768e:	f7d8 ffbb 	bl	8000608 <__aeabi_dmul>
 8027692:	4602      	mov	r2, r0
 8027694:	460b      	mov	r3, r1
 8027696:	4640      	mov	r0, r8
 8027698:	4649      	mov	r1, r9
 802769a:	f7d8 fdff 	bl	800029c <__adddf3>
 802769e:	3701      	adds	r7, #1
 80276a0:	4680      	mov	r8, r0
 80276a2:	4689      	mov	r9, r1
 80276a4:	9b04      	ldr	r3, [sp, #16]
 80276a6:	429f      	cmp	r7, r3
 80276a8:	dc01      	bgt.n	80276ae <__kernel_rem_pio2+0x4c6>
 80276aa:	45ba      	cmp	sl, r7
 80276ac:	dae9      	bge.n	8027682 <__kernel_rem_pio2+0x49a>
 80276ae:	ab4a      	add	r3, sp, #296	; 0x128
 80276b0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80276b4:	e9c3 8900 	strd	r8, r9, [r3]
 80276b8:	f10a 0a01 	add.w	sl, sl, #1
 80276bc:	3e08      	subs	r6, #8
 80276be:	e6f0      	b.n	80274a2 <__kernel_rem_pio2+0x2ba>
 80276c0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80276c2:	2b03      	cmp	r3, #3
 80276c4:	d85b      	bhi.n	802777e <__kernel_rem_pio2+0x596>
 80276c6:	e8df f003 	tbb	[pc, r3]
 80276ca:	264a      	.short	0x264a
 80276cc:	0226      	.short	0x0226
 80276ce:	ab9a      	add	r3, sp, #616	; 0x268
 80276d0:	441c      	add	r4, r3
 80276d2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80276d6:	46a2      	mov	sl, r4
 80276d8:	46ab      	mov	fp, r5
 80276da:	f1bb 0f00 	cmp.w	fp, #0
 80276de:	dc6c      	bgt.n	80277ba <__kernel_rem_pio2+0x5d2>
 80276e0:	46a2      	mov	sl, r4
 80276e2:	46ab      	mov	fp, r5
 80276e4:	f1bb 0f01 	cmp.w	fp, #1
 80276e8:	f300 8086 	bgt.w	80277f8 <__kernel_rem_pio2+0x610>
 80276ec:	2000      	movs	r0, #0
 80276ee:	2100      	movs	r1, #0
 80276f0:	2d01      	cmp	r5, #1
 80276f2:	f300 80a0 	bgt.w	8027836 <__kernel_rem_pio2+0x64e>
 80276f6:	9b02      	ldr	r3, [sp, #8]
 80276f8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80276fc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8027700:	2b00      	cmp	r3, #0
 8027702:	f040 809e 	bne.w	8027842 <__kernel_rem_pio2+0x65a>
 8027706:	9b01      	ldr	r3, [sp, #4]
 8027708:	e9c3 7800 	strd	r7, r8, [r3]
 802770c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8027710:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8027714:	e033      	b.n	802777e <__kernel_rem_pio2+0x596>
 8027716:	3408      	adds	r4, #8
 8027718:	ab4a      	add	r3, sp, #296	; 0x128
 802771a:	441c      	add	r4, r3
 802771c:	462e      	mov	r6, r5
 802771e:	2000      	movs	r0, #0
 8027720:	2100      	movs	r1, #0
 8027722:	2e00      	cmp	r6, #0
 8027724:	da3a      	bge.n	802779c <__kernel_rem_pio2+0x5b4>
 8027726:	9b02      	ldr	r3, [sp, #8]
 8027728:	2b00      	cmp	r3, #0
 802772a:	d03d      	beq.n	80277a8 <__kernel_rem_pio2+0x5c0>
 802772c:	4602      	mov	r2, r0
 802772e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8027732:	9c01      	ldr	r4, [sp, #4]
 8027734:	e9c4 2300 	strd	r2, r3, [r4]
 8027738:	4602      	mov	r2, r0
 802773a:	460b      	mov	r3, r1
 802773c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8027740:	f7d8 fdaa 	bl	8000298 <__aeabi_dsub>
 8027744:	ae4c      	add	r6, sp, #304	; 0x130
 8027746:	2401      	movs	r4, #1
 8027748:	42a5      	cmp	r5, r4
 802774a:	da30      	bge.n	80277ae <__kernel_rem_pio2+0x5c6>
 802774c:	9b02      	ldr	r3, [sp, #8]
 802774e:	b113      	cbz	r3, 8027756 <__kernel_rem_pio2+0x56e>
 8027750:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8027754:	4619      	mov	r1, r3
 8027756:	9b01      	ldr	r3, [sp, #4]
 8027758:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802775c:	e00f      	b.n	802777e <__kernel_rem_pio2+0x596>
 802775e:	ab9a      	add	r3, sp, #616	; 0x268
 8027760:	441c      	add	r4, r3
 8027762:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8027766:	2000      	movs	r0, #0
 8027768:	2100      	movs	r1, #0
 802776a:	2d00      	cmp	r5, #0
 802776c:	da10      	bge.n	8027790 <__kernel_rem_pio2+0x5a8>
 802776e:	9b02      	ldr	r3, [sp, #8]
 8027770:	b113      	cbz	r3, 8027778 <__kernel_rem_pio2+0x590>
 8027772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8027776:	4619      	mov	r1, r3
 8027778:	9b01      	ldr	r3, [sp, #4]
 802777a:	e9c3 0100 	strd	r0, r1, [r3]
 802777e:	9b06      	ldr	r3, [sp, #24]
 8027780:	f003 0007 	and.w	r0, r3, #7
 8027784:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8027788:	ecbd 8b02 	vpop	{d8}
 802778c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027790:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8027794:	f7d8 fd82 	bl	800029c <__adddf3>
 8027798:	3d01      	subs	r5, #1
 802779a:	e7e6      	b.n	802776a <__kernel_rem_pio2+0x582>
 802779c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80277a0:	f7d8 fd7c 	bl	800029c <__adddf3>
 80277a4:	3e01      	subs	r6, #1
 80277a6:	e7bc      	b.n	8027722 <__kernel_rem_pio2+0x53a>
 80277a8:	4602      	mov	r2, r0
 80277aa:	460b      	mov	r3, r1
 80277ac:	e7c1      	b.n	8027732 <__kernel_rem_pio2+0x54a>
 80277ae:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80277b2:	f7d8 fd73 	bl	800029c <__adddf3>
 80277b6:	3401      	adds	r4, #1
 80277b8:	e7c6      	b.n	8027748 <__kernel_rem_pio2+0x560>
 80277ba:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80277be:	ed3a 7b02 	vldmdb	sl!, {d7}
 80277c2:	4640      	mov	r0, r8
 80277c4:	ec53 2b17 	vmov	r2, r3, d7
 80277c8:	4649      	mov	r1, r9
 80277ca:	ed8d 7b04 	vstr	d7, [sp, #16]
 80277ce:	f7d8 fd65 	bl	800029c <__adddf3>
 80277d2:	4602      	mov	r2, r0
 80277d4:	460b      	mov	r3, r1
 80277d6:	4606      	mov	r6, r0
 80277d8:	460f      	mov	r7, r1
 80277da:	4640      	mov	r0, r8
 80277dc:	4649      	mov	r1, r9
 80277de:	f7d8 fd5b 	bl	8000298 <__aeabi_dsub>
 80277e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80277e6:	f7d8 fd59 	bl	800029c <__adddf3>
 80277ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80277ee:	e9ca 0100 	strd	r0, r1, [sl]
 80277f2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80277f6:	e770      	b.n	80276da <__kernel_rem_pio2+0x4f2>
 80277f8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80277fc:	ed3a 7b02 	vldmdb	sl!, {d7}
 8027800:	4630      	mov	r0, r6
 8027802:	ec53 2b17 	vmov	r2, r3, d7
 8027806:	4639      	mov	r1, r7
 8027808:	ed8d 7b04 	vstr	d7, [sp, #16]
 802780c:	f7d8 fd46 	bl	800029c <__adddf3>
 8027810:	4602      	mov	r2, r0
 8027812:	460b      	mov	r3, r1
 8027814:	4680      	mov	r8, r0
 8027816:	4689      	mov	r9, r1
 8027818:	4630      	mov	r0, r6
 802781a:	4639      	mov	r1, r7
 802781c:	f7d8 fd3c 	bl	8000298 <__aeabi_dsub>
 8027820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8027824:	f7d8 fd3a 	bl	800029c <__adddf3>
 8027828:	f10b 3bff 	add.w	fp, fp, #4294967295
 802782c:	e9ca 0100 	strd	r0, r1, [sl]
 8027830:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8027834:	e756      	b.n	80276e4 <__kernel_rem_pio2+0x4fc>
 8027836:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802783a:	f7d8 fd2f 	bl	800029c <__adddf3>
 802783e:	3d01      	subs	r5, #1
 8027840:	e756      	b.n	80276f0 <__kernel_rem_pio2+0x508>
 8027842:	9b01      	ldr	r3, [sp, #4]
 8027844:	9a01      	ldr	r2, [sp, #4]
 8027846:	601f      	str	r7, [r3, #0]
 8027848:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 802784c:	605c      	str	r4, [r3, #4]
 802784e:	609d      	str	r5, [r3, #8]
 8027850:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8027854:	60d3      	str	r3, [r2, #12]
 8027856:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802785a:	6110      	str	r0, [r2, #16]
 802785c:	6153      	str	r3, [r2, #20]
 802785e:	e78e      	b.n	802777e <__kernel_rem_pio2+0x596>
 8027860:	41700000 	.word	0x41700000
 8027864:	3e700000 	.word	0x3e700000

08027868 <__kernel_sin>:
 8027868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802786c:	ec55 4b10 	vmov	r4, r5, d0
 8027870:	b085      	sub	sp, #20
 8027872:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8027876:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 802787a:	ed8d 1b00 	vstr	d1, [sp]
 802787e:	9002      	str	r0, [sp, #8]
 8027880:	da06      	bge.n	8027890 <__kernel_sin+0x28>
 8027882:	ee10 0a10 	vmov	r0, s0
 8027886:	4629      	mov	r1, r5
 8027888:	f7d9 f96e 	bl	8000b68 <__aeabi_d2iz>
 802788c:	2800      	cmp	r0, #0
 802788e:	d051      	beq.n	8027934 <__kernel_sin+0xcc>
 8027890:	4622      	mov	r2, r4
 8027892:	462b      	mov	r3, r5
 8027894:	4620      	mov	r0, r4
 8027896:	4629      	mov	r1, r5
 8027898:	f7d8 feb6 	bl	8000608 <__aeabi_dmul>
 802789c:	4682      	mov	sl, r0
 802789e:	468b      	mov	fp, r1
 80278a0:	4602      	mov	r2, r0
 80278a2:	460b      	mov	r3, r1
 80278a4:	4620      	mov	r0, r4
 80278a6:	4629      	mov	r1, r5
 80278a8:	f7d8 feae 	bl	8000608 <__aeabi_dmul>
 80278ac:	a341      	add	r3, pc, #260	; (adr r3, 80279b4 <__kernel_sin+0x14c>)
 80278ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80278b2:	4680      	mov	r8, r0
 80278b4:	4689      	mov	r9, r1
 80278b6:	4650      	mov	r0, sl
 80278b8:	4659      	mov	r1, fp
 80278ba:	f7d8 fea5 	bl	8000608 <__aeabi_dmul>
 80278be:	a33f      	add	r3, pc, #252	; (adr r3, 80279bc <__kernel_sin+0x154>)
 80278c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80278c4:	f7d8 fce8 	bl	8000298 <__aeabi_dsub>
 80278c8:	4652      	mov	r2, sl
 80278ca:	465b      	mov	r3, fp
 80278cc:	f7d8 fe9c 	bl	8000608 <__aeabi_dmul>
 80278d0:	a33c      	add	r3, pc, #240	; (adr r3, 80279c4 <__kernel_sin+0x15c>)
 80278d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80278d6:	f7d8 fce1 	bl	800029c <__adddf3>
 80278da:	4652      	mov	r2, sl
 80278dc:	465b      	mov	r3, fp
 80278de:	f7d8 fe93 	bl	8000608 <__aeabi_dmul>
 80278e2:	a33a      	add	r3, pc, #232	; (adr r3, 80279cc <__kernel_sin+0x164>)
 80278e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80278e8:	f7d8 fcd6 	bl	8000298 <__aeabi_dsub>
 80278ec:	4652      	mov	r2, sl
 80278ee:	465b      	mov	r3, fp
 80278f0:	f7d8 fe8a 	bl	8000608 <__aeabi_dmul>
 80278f4:	a337      	add	r3, pc, #220	; (adr r3, 80279d4 <__kernel_sin+0x16c>)
 80278f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80278fa:	f7d8 fccf 	bl	800029c <__adddf3>
 80278fe:	9b02      	ldr	r3, [sp, #8]
 8027900:	4606      	mov	r6, r0
 8027902:	460f      	mov	r7, r1
 8027904:	b9db      	cbnz	r3, 802793e <__kernel_sin+0xd6>
 8027906:	4602      	mov	r2, r0
 8027908:	460b      	mov	r3, r1
 802790a:	4650      	mov	r0, sl
 802790c:	4659      	mov	r1, fp
 802790e:	f7d8 fe7b 	bl	8000608 <__aeabi_dmul>
 8027912:	a325      	add	r3, pc, #148	; (adr r3, 80279a8 <__kernel_sin+0x140>)
 8027914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027918:	f7d8 fcbe 	bl	8000298 <__aeabi_dsub>
 802791c:	4642      	mov	r2, r8
 802791e:	464b      	mov	r3, r9
 8027920:	f7d8 fe72 	bl	8000608 <__aeabi_dmul>
 8027924:	4602      	mov	r2, r0
 8027926:	460b      	mov	r3, r1
 8027928:	4620      	mov	r0, r4
 802792a:	4629      	mov	r1, r5
 802792c:	f7d8 fcb6 	bl	800029c <__adddf3>
 8027930:	4604      	mov	r4, r0
 8027932:	460d      	mov	r5, r1
 8027934:	ec45 4b10 	vmov	d0, r4, r5
 8027938:	b005      	add	sp, #20
 802793a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802793e:	2200      	movs	r2, #0
 8027940:	4b1b      	ldr	r3, [pc, #108]	; (80279b0 <__kernel_sin+0x148>)
 8027942:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027946:	f7d8 fe5f 	bl	8000608 <__aeabi_dmul>
 802794a:	4632      	mov	r2, r6
 802794c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027950:	463b      	mov	r3, r7
 8027952:	4640      	mov	r0, r8
 8027954:	4649      	mov	r1, r9
 8027956:	f7d8 fe57 	bl	8000608 <__aeabi_dmul>
 802795a:	4602      	mov	r2, r0
 802795c:	460b      	mov	r3, r1
 802795e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027962:	f7d8 fc99 	bl	8000298 <__aeabi_dsub>
 8027966:	4652      	mov	r2, sl
 8027968:	465b      	mov	r3, fp
 802796a:	f7d8 fe4d 	bl	8000608 <__aeabi_dmul>
 802796e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027972:	f7d8 fc91 	bl	8000298 <__aeabi_dsub>
 8027976:	a30c      	add	r3, pc, #48	; (adr r3, 80279a8 <__kernel_sin+0x140>)
 8027978:	e9d3 2300 	ldrd	r2, r3, [r3]
 802797c:	4606      	mov	r6, r0
 802797e:	460f      	mov	r7, r1
 8027980:	4640      	mov	r0, r8
 8027982:	4649      	mov	r1, r9
 8027984:	f7d8 fe40 	bl	8000608 <__aeabi_dmul>
 8027988:	4602      	mov	r2, r0
 802798a:	460b      	mov	r3, r1
 802798c:	4630      	mov	r0, r6
 802798e:	4639      	mov	r1, r7
 8027990:	f7d8 fc84 	bl	800029c <__adddf3>
 8027994:	4602      	mov	r2, r0
 8027996:	460b      	mov	r3, r1
 8027998:	4620      	mov	r0, r4
 802799a:	4629      	mov	r1, r5
 802799c:	f7d8 fc7c 	bl	8000298 <__aeabi_dsub>
 80279a0:	e7c6      	b.n	8027930 <__kernel_sin+0xc8>
 80279a2:	bf00      	nop
 80279a4:	f3af 8000 	nop.w
 80279a8:	55555549 	.word	0x55555549
 80279ac:	3fc55555 	.word	0x3fc55555
 80279b0:	3fe00000 	.word	0x3fe00000
 80279b4:	5acfd57c 	.word	0x5acfd57c
 80279b8:	3de5d93a 	.word	0x3de5d93a
 80279bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80279c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80279c4:	57b1fe7d 	.word	0x57b1fe7d
 80279c8:	3ec71de3 	.word	0x3ec71de3
 80279cc:	19c161d5 	.word	0x19c161d5
 80279d0:	3f2a01a0 	.word	0x3f2a01a0
 80279d4:	1110f8a6 	.word	0x1110f8a6
 80279d8:	3f811111 	.word	0x3f811111

080279dc <__kernel_cosf>:
 80279dc:	ee10 3a10 	vmov	r3, s0
 80279e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80279e4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80279e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80279ec:	da05      	bge.n	80279fa <__kernel_cosf+0x1e>
 80279ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80279f2:	ee17 2a90 	vmov	r2, s15
 80279f6:	2a00      	cmp	r2, #0
 80279f8:	d03b      	beq.n	8027a72 <__kernel_cosf+0x96>
 80279fa:	ee20 6a00 	vmul.f32	s12, s0, s0
 80279fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8027a02:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8027a78 <__kernel_cosf+0x9c>
 8027a06:	4a1d      	ldr	r2, [pc, #116]	; (8027a7c <__kernel_cosf+0xa0>)
 8027a08:	ee66 7a07 	vmul.f32	s15, s12, s14
 8027a0c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8027a80 <__kernel_cosf+0xa4>
 8027a10:	eea6 7a25 	vfma.f32	s14, s12, s11
 8027a14:	4293      	cmp	r3, r2
 8027a16:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8027a84 <__kernel_cosf+0xa8>
 8027a1a:	eee7 5a06 	vfma.f32	s11, s14, s12
 8027a1e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8027a88 <__kernel_cosf+0xac>
 8027a22:	eea5 7a86 	vfma.f32	s14, s11, s12
 8027a26:	eddf 5a19 	vldr	s11, [pc, #100]	; 8027a8c <__kernel_cosf+0xb0>
 8027a2a:	eee7 5a06 	vfma.f32	s11, s14, s12
 8027a2e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8027a90 <__kernel_cosf+0xb4>
 8027a32:	eea5 7a86 	vfma.f32	s14, s11, s12
 8027a36:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8027a3a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8027a3e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8027a42:	dc04      	bgt.n	8027a4e <__kernel_cosf+0x72>
 8027a44:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8027a48:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8027a4c:	4770      	bx	lr
 8027a4e:	4a11      	ldr	r2, [pc, #68]	; (8027a94 <__kernel_cosf+0xb8>)
 8027a50:	4293      	cmp	r3, r2
 8027a52:	bfda      	itte	le
 8027a54:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8027a58:	ee07 3a10 	vmovle	s14, r3
 8027a5c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8027a60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027a64:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8027a68:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8027a6c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8027a70:	4770      	bx	lr
 8027a72:	eeb0 0a66 	vmov.f32	s0, s13
 8027a76:	4770      	bx	lr
 8027a78:	ad47d74e 	.word	0xad47d74e
 8027a7c:	3e999999 	.word	0x3e999999
 8027a80:	310f74f6 	.word	0x310f74f6
 8027a84:	b493f27c 	.word	0xb493f27c
 8027a88:	37d00d01 	.word	0x37d00d01
 8027a8c:	bab60b61 	.word	0xbab60b61
 8027a90:	3d2aaaab 	.word	0x3d2aaaab
 8027a94:	3f480000 	.word	0x3f480000

08027a98 <__kernel_rem_pio2f>:
 8027a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a9c:	ed2d 8b04 	vpush	{d8-d9}
 8027aa0:	b0d7      	sub	sp, #348	; 0x15c
 8027aa2:	469b      	mov	fp, r3
 8027aa4:	460e      	mov	r6, r1
 8027aa6:	4bbe      	ldr	r3, [pc, #760]	; (8027da0 <__kernel_rem_pio2f+0x308>)
 8027aa8:	9964      	ldr	r1, [sp, #400]	; 0x190
 8027aaa:	9002      	str	r0, [sp, #8]
 8027aac:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8027ab0:	9865      	ldr	r0, [sp, #404]	; 0x194
 8027ab2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8027db0 <__kernel_rem_pio2f+0x318>
 8027ab6:	1ed1      	subs	r1, r2, #3
 8027ab8:	2308      	movs	r3, #8
 8027aba:	fb91 f1f3 	sdiv	r1, r1, r3
 8027abe:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8027ac2:	f10b 3aff 	add.w	sl, fp, #4294967295
 8027ac6:	1c4c      	adds	r4, r1, #1
 8027ac8:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8027acc:	eba1 050a 	sub.w	r5, r1, sl
 8027ad0:	aa1a      	add	r2, sp, #104	; 0x68
 8027ad2:	eb09 070a 	add.w	r7, r9, sl
 8027ad6:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8027ada:	4696      	mov	lr, r2
 8027adc:	2300      	movs	r3, #0
 8027ade:	42bb      	cmp	r3, r7
 8027ae0:	dd0f      	ble.n	8027b02 <__kernel_rem_pio2f+0x6a>
 8027ae2:	af42      	add	r7, sp, #264	; 0x108
 8027ae4:	2200      	movs	r2, #0
 8027ae6:	454a      	cmp	r2, r9
 8027ae8:	dc27      	bgt.n	8027b3a <__kernel_rem_pio2f+0xa2>
 8027aea:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8027aee:	eb0b 0302 	add.w	r3, fp, r2
 8027af2:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8027af6:	9d02      	ldr	r5, [sp, #8]
 8027af8:	eddf 7aad 	vldr	s15, [pc, #692]	; 8027db0 <__kernel_rem_pio2f+0x318>
 8027afc:	f04f 0c00 	mov.w	ip, #0
 8027b00:	e015      	b.n	8027b2e <__kernel_rem_pio2f+0x96>
 8027b02:	42dd      	cmn	r5, r3
 8027b04:	bf5d      	ittte	pl
 8027b06:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8027b0a:	ee07 2a90 	vmovpl	s15, r2
 8027b0e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8027b12:	eef0 7a47 	vmovmi.f32	s15, s14
 8027b16:	ecee 7a01 	vstmia	lr!, {s15}
 8027b1a:	3301      	adds	r3, #1
 8027b1c:	e7df      	b.n	8027ade <__kernel_rem_pio2f+0x46>
 8027b1e:	ecf5 6a01 	vldmia	r5!, {s13}
 8027b22:	ed33 7a01 	vldmdb	r3!, {s14}
 8027b26:	eee6 7a87 	vfma.f32	s15, s13, s14
 8027b2a:	f10c 0c01 	add.w	ip, ip, #1
 8027b2e:	45d4      	cmp	ip, sl
 8027b30:	ddf5      	ble.n	8027b1e <__kernel_rem_pio2f+0x86>
 8027b32:	ece7 7a01 	vstmia	r7!, {s15}
 8027b36:	3201      	adds	r2, #1
 8027b38:	e7d5      	b.n	8027ae6 <__kernel_rem_pio2f+0x4e>
 8027b3a:	ab06      	add	r3, sp, #24
 8027b3c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8027b40:	9304      	str	r3, [sp, #16]
 8027b42:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8027dac <__kernel_rem_pio2f+0x314>
 8027b46:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8027da8 <__kernel_rem_pio2f+0x310>
 8027b4a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8027b4e:	9303      	str	r3, [sp, #12]
 8027b50:	464d      	mov	r5, r9
 8027b52:	ab56      	add	r3, sp, #344	; 0x158
 8027b54:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8027b58:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8027b5c:	3f01      	subs	r7, #1
 8027b5e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8027b62:	00bf      	lsls	r7, r7, #2
 8027b64:	ab56      	add	r3, sp, #344	; 0x158
 8027b66:	19da      	adds	r2, r3, r7
 8027b68:	3a4c      	subs	r2, #76	; 0x4c
 8027b6a:	2300      	movs	r3, #0
 8027b6c:	1ae9      	subs	r1, r5, r3
 8027b6e:	2900      	cmp	r1, #0
 8027b70:	dc4c      	bgt.n	8027c0c <__kernel_rem_pio2f+0x174>
 8027b72:	4620      	mov	r0, r4
 8027b74:	f000 fd1a 	bl	80285ac <scalbnf>
 8027b78:	eeb0 8a40 	vmov.f32	s16, s0
 8027b7c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8027b80:	ee28 0a00 	vmul.f32	s0, s16, s0
 8027b84:	f7fd fa7c 	bl	8025080 <floorf>
 8027b88:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8027b8c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8027b90:	2c00      	cmp	r4, #0
 8027b92:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8027b96:	edcd 7a01 	vstr	s15, [sp, #4]
 8027b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027b9e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8027ba2:	dd48      	ble.n	8027c36 <__kernel_rem_pio2f+0x19e>
 8027ba4:	1e69      	subs	r1, r5, #1
 8027ba6:	ab06      	add	r3, sp, #24
 8027ba8:	f1c4 0008 	rsb	r0, r4, #8
 8027bac:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8027bb0:	9a01      	ldr	r2, [sp, #4]
 8027bb2:	fa4c f300 	asr.w	r3, ip, r0
 8027bb6:	441a      	add	r2, r3
 8027bb8:	4083      	lsls	r3, r0
 8027bba:	9201      	str	r2, [sp, #4]
 8027bbc:	ebac 0203 	sub.w	r2, ip, r3
 8027bc0:	ab06      	add	r3, sp, #24
 8027bc2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8027bc6:	f1c4 0307 	rsb	r3, r4, #7
 8027bca:	fa42 f803 	asr.w	r8, r2, r3
 8027bce:	f1b8 0f00 	cmp.w	r8, #0
 8027bd2:	dd41      	ble.n	8027c58 <__kernel_rem_pio2f+0x1c0>
 8027bd4:	9b01      	ldr	r3, [sp, #4]
 8027bd6:	2000      	movs	r0, #0
 8027bd8:	3301      	adds	r3, #1
 8027bda:	9301      	str	r3, [sp, #4]
 8027bdc:	4601      	mov	r1, r0
 8027bde:	4285      	cmp	r5, r0
 8027be0:	dc6d      	bgt.n	8027cbe <__kernel_rem_pio2f+0x226>
 8027be2:	2c00      	cmp	r4, #0
 8027be4:	dd04      	ble.n	8027bf0 <__kernel_rem_pio2f+0x158>
 8027be6:	2c01      	cmp	r4, #1
 8027be8:	d07e      	beq.n	8027ce8 <__kernel_rem_pio2f+0x250>
 8027bea:	2c02      	cmp	r4, #2
 8027bec:	f000 8086 	beq.w	8027cfc <__kernel_rem_pio2f+0x264>
 8027bf0:	f1b8 0f02 	cmp.w	r8, #2
 8027bf4:	d130      	bne.n	8027c58 <__kernel_rem_pio2f+0x1c0>
 8027bf6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027bfa:	ee30 8a48 	vsub.f32	s16, s0, s16
 8027bfe:	b359      	cbz	r1, 8027c58 <__kernel_rem_pio2f+0x1c0>
 8027c00:	4620      	mov	r0, r4
 8027c02:	f000 fcd3 	bl	80285ac <scalbnf>
 8027c06:	ee38 8a40 	vsub.f32	s16, s16, s0
 8027c0a:	e025      	b.n	8027c58 <__kernel_rem_pio2f+0x1c0>
 8027c0c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8027c10:	a806      	add	r0, sp, #24
 8027c12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027c1a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8027c1e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8027c22:	ee10 1a10 	vmov	r1, s0
 8027c26:	ed32 0a01 	vldmdb	r2!, {s0}
 8027c2a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8027c2e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8027c32:	3301      	adds	r3, #1
 8027c34:	e79a      	b.n	8027b6c <__kernel_rem_pio2f+0xd4>
 8027c36:	d106      	bne.n	8027c46 <__kernel_rem_pio2f+0x1ae>
 8027c38:	1e6b      	subs	r3, r5, #1
 8027c3a:	aa06      	add	r2, sp, #24
 8027c3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8027c40:	ea4f 2822 	mov.w	r8, r2, asr #8
 8027c44:	e7c3      	b.n	8027bce <__kernel_rem_pio2f+0x136>
 8027c46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8027c4a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8027c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c52:	da31      	bge.n	8027cb8 <__kernel_rem_pio2f+0x220>
 8027c54:	f04f 0800 	mov.w	r8, #0
 8027c58:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8027c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c60:	f040 80a8 	bne.w	8027db4 <__kernel_rem_pio2f+0x31c>
 8027c64:	1e6b      	subs	r3, r5, #1
 8027c66:	4618      	mov	r0, r3
 8027c68:	2200      	movs	r2, #0
 8027c6a:	4548      	cmp	r0, r9
 8027c6c:	da4d      	bge.n	8027d0a <__kernel_rem_pio2f+0x272>
 8027c6e:	2a00      	cmp	r2, #0
 8027c70:	f000 8087 	beq.w	8027d82 <__kernel_rem_pio2f+0x2ea>
 8027c74:	aa06      	add	r2, sp, #24
 8027c76:	3c08      	subs	r4, #8
 8027c78:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8027c7c:	2900      	cmp	r1, #0
 8027c7e:	f000 808d 	beq.w	8027d9c <__kernel_rem_pio2f+0x304>
 8027c82:	4620      	mov	r0, r4
 8027c84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027c88:	9302      	str	r3, [sp, #8]
 8027c8a:	f000 fc8f 	bl	80285ac <scalbnf>
 8027c8e:	9b02      	ldr	r3, [sp, #8]
 8027c90:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8027dac <__kernel_rem_pio2f+0x314>
 8027c94:	0099      	lsls	r1, r3, #2
 8027c96:	aa42      	add	r2, sp, #264	; 0x108
 8027c98:	1850      	adds	r0, r2, r1
 8027c9a:	1d05      	adds	r5, r0, #4
 8027c9c:	461c      	mov	r4, r3
 8027c9e:	2c00      	cmp	r4, #0
 8027ca0:	f280 80b8 	bge.w	8027e14 <__kernel_rem_pio2f+0x37c>
 8027ca4:	2500      	movs	r5, #0
 8027ca6:	1b5c      	subs	r4, r3, r5
 8027ca8:	2c00      	cmp	r4, #0
 8027caa:	f2c0 80d8 	blt.w	8027e5e <__kernel_rem_pio2f+0x3c6>
 8027cae:	4f3d      	ldr	r7, [pc, #244]	; (8027da4 <__kernel_rem_pio2f+0x30c>)
 8027cb0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8027db0 <__kernel_rem_pio2f+0x318>
 8027cb4:	2400      	movs	r4, #0
 8027cb6:	e0c6      	b.n	8027e46 <__kernel_rem_pio2f+0x3ae>
 8027cb8:	f04f 0802 	mov.w	r8, #2
 8027cbc:	e78a      	b.n	8027bd4 <__kernel_rem_pio2f+0x13c>
 8027cbe:	ab06      	add	r3, sp, #24
 8027cc0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8027cc4:	b949      	cbnz	r1, 8027cda <__kernel_rem_pio2f+0x242>
 8027cc6:	b12b      	cbz	r3, 8027cd4 <__kernel_rem_pio2f+0x23c>
 8027cc8:	aa06      	add	r2, sp, #24
 8027cca:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8027cce:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8027cd2:	2301      	movs	r3, #1
 8027cd4:	3001      	adds	r0, #1
 8027cd6:	4619      	mov	r1, r3
 8027cd8:	e781      	b.n	8027bde <__kernel_rem_pio2f+0x146>
 8027cda:	aa06      	add	r2, sp, #24
 8027cdc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8027ce0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8027ce4:	460b      	mov	r3, r1
 8027ce6:	e7f5      	b.n	8027cd4 <__kernel_rem_pio2f+0x23c>
 8027ce8:	1e68      	subs	r0, r5, #1
 8027cea:	ab06      	add	r3, sp, #24
 8027cec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8027cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8027cf4:	aa06      	add	r2, sp, #24
 8027cf6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8027cfa:	e779      	b.n	8027bf0 <__kernel_rem_pio2f+0x158>
 8027cfc:	1e68      	subs	r0, r5, #1
 8027cfe:	ab06      	add	r3, sp, #24
 8027d00:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8027d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8027d08:	e7f4      	b.n	8027cf4 <__kernel_rem_pio2f+0x25c>
 8027d0a:	a906      	add	r1, sp, #24
 8027d0c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8027d10:	3801      	subs	r0, #1
 8027d12:	430a      	orrs	r2, r1
 8027d14:	e7a9      	b.n	8027c6a <__kernel_rem_pio2f+0x1d2>
 8027d16:	f10c 0c01 	add.w	ip, ip, #1
 8027d1a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8027d1e:	2a00      	cmp	r2, #0
 8027d20:	d0f9      	beq.n	8027d16 <__kernel_rem_pio2f+0x27e>
 8027d22:	eb0b 0305 	add.w	r3, fp, r5
 8027d26:	aa1a      	add	r2, sp, #104	; 0x68
 8027d28:	009b      	lsls	r3, r3, #2
 8027d2a:	1898      	adds	r0, r3, r2
 8027d2c:	3004      	adds	r0, #4
 8027d2e:	1c69      	adds	r1, r5, #1
 8027d30:	3704      	adds	r7, #4
 8027d32:	2200      	movs	r2, #0
 8027d34:	4465      	add	r5, ip
 8027d36:	9005      	str	r0, [sp, #20]
 8027d38:	428d      	cmp	r5, r1
 8027d3a:	f6ff af0a 	blt.w	8027b52 <__kernel_rem_pio2f+0xba>
 8027d3e:	a81a      	add	r0, sp, #104	; 0x68
 8027d40:	eb02 0c03 	add.w	ip, r2, r3
 8027d44:	4484      	add	ip, r0
 8027d46:	9803      	ldr	r0, [sp, #12]
 8027d48:	f8dd e008 	ldr.w	lr, [sp, #8]
 8027d4c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8027d50:	9001      	str	r0, [sp, #4]
 8027d52:	ee07 0a90 	vmov	s15, r0
 8027d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027d5a:	9805      	ldr	r0, [sp, #20]
 8027d5c:	edcc 7a00 	vstr	s15, [ip]
 8027d60:	eddf 7a13 	vldr	s15, [pc, #76]	; 8027db0 <__kernel_rem_pio2f+0x318>
 8027d64:	eb00 0802 	add.w	r8, r0, r2
 8027d68:	f04f 0c00 	mov.w	ip, #0
 8027d6c:	45d4      	cmp	ip, sl
 8027d6e:	dd0c      	ble.n	8027d8a <__kernel_rem_pio2f+0x2f2>
 8027d70:	eb02 0c07 	add.w	ip, r2, r7
 8027d74:	a842      	add	r0, sp, #264	; 0x108
 8027d76:	4484      	add	ip, r0
 8027d78:	edcc 7a01 	vstr	s15, [ip, #4]
 8027d7c:	3101      	adds	r1, #1
 8027d7e:	3204      	adds	r2, #4
 8027d80:	e7da      	b.n	8027d38 <__kernel_rem_pio2f+0x2a0>
 8027d82:	9b04      	ldr	r3, [sp, #16]
 8027d84:	f04f 0c01 	mov.w	ip, #1
 8027d88:	e7c7      	b.n	8027d1a <__kernel_rem_pio2f+0x282>
 8027d8a:	ecfe 6a01 	vldmia	lr!, {s13}
 8027d8e:	ed38 7a01 	vldmdb	r8!, {s14}
 8027d92:	f10c 0c01 	add.w	ip, ip, #1
 8027d96:	eee6 7a87 	vfma.f32	s15, s13, s14
 8027d9a:	e7e7      	b.n	8027d6c <__kernel_rem_pio2f+0x2d4>
 8027d9c:	3b01      	subs	r3, #1
 8027d9e:	e769      	b.n	8027c74 <__kernel_rem_pio2f+0x1dc>
 8027da0:	0802e534 	.word	0x0802e534
 8027da4:	0802e508 	.word	0x0802e508
 8027da8:	43800000 	.word	0x43800000
 8027dac:	3b800000 	.word	0x3b800000
 8027db0:	00000000 	.word	0x00000000
 8027db4:	4260      	negs	r0, r4
 8027db6:	eeb0 0a48 	vmov.f32	s0, s16
 8027dba:	f000 fbf7 	bl	80285ac <scalbnf>
 8027dbe:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8027da8 <__kernel_rem_pio2f+0x310>
 8027dc2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8027dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027dca:	db1a      	blt.n	8027e02 <__kernel_rem_pio2f+0x36a>
 8027dcc:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8027dac <__kernel_rem_pio2f+0x314>
 8027dd0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8027dd4:	aa06      	add	r2, sp, #24
 8027dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027dda:	a906      	add	r1, sp, #24
 8027ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027de0:	3408      	adds	r4, #8
 8027de2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8027de6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027dea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8027dee:	ee10 3a10 	vmov	r3, s0
 8027df2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8027df6:	1c6b      	adds	r3, r5, #1
 8027df8:	ee17 2a90 	vmov	r2, s15
 8027dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8027e00:	e73f      	b.n	8027c82 <__kernel_rem_pio2f+0x1ea>
 8027e02:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8027e06:	aa06      	add	r2, sp, #24
 8027e08:	ee10 3a10 	vmov	r3, s0
 8027e0c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8027e10:	462b      	mov	r3, r5
 8027e12:	e736      	b.n	8027c82 <__kernel_rem_pio2f+0x1ea>
 8027e14:	aa06      	add	r2, sp, #24
 8027e16:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8027e1a:	9202      	str	r2, [sp, #8]
 8027e1c:	ee07 2a90 	vmov	s15, r2
 8027e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027e24:	3c01      	subs	r4, #1
 8027e26:	ee67 7a80 	vmul.f32	s15, s15, s0
 8027e2a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8027e2e:	ed65 7a01 	vstmdb	r5!, {s15}
 8027e32:	e734      	b.n	8027c9e <__kernel_rem_pio2f+0x206>
 8027e34:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8027e38:	ecf7 6a01 	vldmia	r7!, {s13}
 8027e3c:	ed9c 7a00 	vldr	s14, [ip]
 8027e40:	eee6 7a87 	vfma.f32	s15, s13, s14
 8027e44:	3401      	adds	r4, #1
 8027e46:	454c      	cmp	r4, r9
 8027e48:	dc01      	bgt.n	8027e4e <__kernel_rem_pio2f+0x3b6>
 8027e4a:	42a5      	cmp	r5, r4
 8027e4c:	daf2      	bge.n	8027e34 <__kernel_rem_pio2f+0x39c>
 8027e4e:	aa56      	add	r2, sp, #344	; 0x158
 8027e50:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8027e54:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8027e58:	3501      	adds	r5, #1
 8027e5a:	3804      	subs	r0, #4
 8027e5c:	e723      	b.n	8027ca6 <__kernel_rem_pio2f+0x20e>
 8027e5e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8027e60:	2a03      	cmp	r2, #3
 8027e62:	d84d      	bhi.n	8027f00 <__kernel_rem_pio2f+0x468>
 8027e64:	e8df f002 	tbb	[pc, r2]
 8027e68:	021f1f3e 	.word	0x021f1f3e
 8027e6c:	aa56      	add	r2, sp, #344	; 0x158
 8027e6e:	4411      	add	r1, r2
 8027e70:	399c      	subs	r1, #156	; 0x9c
 8027e72:	4608      	mov	r0, r1
 8027e74:	461c      	mov	r4, r3
 8027e76:	2c00      	cmp	r4, #0
 8027e78:	dc5f      	bgt.n	8027f3a <__kernel_rem_pio2f+0x4a2>
 8027e7a:	4608      	mov	r0, r1
 8027e7c:	461c      	mov	r4, r3
 8027e7e:	2c01      	cmp	r4, #1
 8027e80:	dc6b      	bgt.n	8027f5a <__kernel_rem_pio2f+0x4c2>
 8027e82:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8027db0 <__kernel_rem_pio2f+0x318>
 8027e86:	2b01      	cmp	r3, #1
 8027e88:	dc77      	bgt.n	8027f7a <__kernel_rem_pio2f+0x4e2>
 8027e8a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8027e8e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8027e92:	f1b8 0f00 	cmp.w	r8, #0
 8027e96:	d176      	bne.n	8027f86 <__kernel_rem_pio2f+0x4ee>
 8027e98:	edc6 6a00 	vstr	s13, [r6]
 8027e9c:	ed86 7a01 	vstr	s14, [r6, #4]
 8027ea0:	edc6 7a02 	vstr	s15, [r6, #8]
 8027ea4:	e02c      	b.n	8027f00 <__kernel_rem_pio2f+0x468>
 8027ea6:	aa56      	add	r2, sp, #344	; 0x158
 8027ea8:	4411      	add	r1, r2
 8027eaa:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8027db0 <__kernel_rem_pio2f+0x318>
 8027eae:	399c      	subs	r1, #156	; 0x9c
 8027eb0:	4618      	mov	r0, r3
 8027eb2:	2800      	cmp	r0, #0
 8027eb4:	da32      	bge.n	8027f1c <__kernel_rem_pio2f+0x484>
 8027eb6:	f1b8 0f00 	cmp.w	r8, #0
 8027eba:	d035      	beq.n	8027f28 <__kernel_rem_pio2f+0x490>
 8027ebc:	eef1 7a47 	vneg.f32	s15, s14
 8027ec0:	edc6 7a00 	vstr	s15, [r6]
 8027ec4:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8027ec8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027ecc:	a82f      	add	r0, sp, #188	; 0xbc
 8027ece:	2101      	movs	r1, #1
 8027ed0:	428b      	cmp	r3, r1
 8027ed2:	da2c      	bge.n	8027f2e <__kernel_rem_pio2f+0x496>
 8027ed4:	f1b8 0f00 	cmp.w	r8, #0
 8027ed8:	d001      	beq.n	8027ede <__kernel_rem_pio2f+0x446>
 8027eda:	eef1 7a67 	vneg.f32	s15, s15
 8027ede:	edc6 7a01 	vstr	s15, [r6, #4]
 8027ee2:	e00d      	b.n	8027f00 <__kernel_rem_pio2f+0x468>
 8027ee4:	aa56      	add	r2, sp, #344	; 0x158
 8027ee6:	4411      	add	r1, r2
 8027ee8:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8027db0 <__kernel_rem_pio2f+0x318>
 8027eec:	399c      	subs	r1, #156	; 0x9c
 8027eee:	2b00      	cmp	r3, #0
 8027ef0:	da0e      	bge.n	8027f10 <__kernel_rem_pio2f+0x478>
 8027ef2:	f1b8 0f00 	cmp.w	r8, #0
 8027ef6:	d001      	beq.n	8027efc <__kernel_rem_pio2f+0x464>
 8027ef8:	eef1 7a67 	vneg.f32	s15, s15
 8027efc:	edc6 7a00 	vstr	s15, [r6]
 8027f00:	9b01      	ldr	r3, [sp, #4]
 8027f02:	f003 0007 	and.w	r0, r3, #7
 8027f06:	b057      	add	sp, #348	; 0x15c
 8027f08:	ecbd 8b04 	vpop	{d8-d9}
 8027f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027f10:	ed31 7a01 	vldmdb	r1!, {s14}
 8027f14:	3b01      	subs	r3, #1
 8027f16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027f1a:	e7e8      	b.n	8027eee <__kernel_rem_pio2f+0x456>
 8027f1c:	ed71 7a01 	vldmdb	r1!, {s15}
 8027f20:	3801      	subs	r0, #1
 8027f22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8027f26:	e7c4      	b.n	8027eb2 <__kernel_rem_pio2f+0x41a>
 8027f28:	eef0 7a47 	vmov.f32	s15, s14
 8027f2c:	e7c8      	b.n	8027ec0 <__kernel_rem_pio2f+0x428>
 8027f2e:	ecb0 7a01 	vldmia	r0!, {s14}
 8027f32:	3101      	adds	r1, #1
 8027f34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027f38:	e7ca      	b.n	8027ed0 <__kernel_rem_pio2f+0x438>
 8027f3a:	ed50 7a02 	vldr	s15, [r0, #-8]
 8027f3e:	ed70 6a01 	vldmdb	r0!, {s13}
 8027f42:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8027f46:	3c01      	subs	r4, #1
 8027f48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027f4c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8027f50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8027f54:	edc0 7a00 	vstr	s15, [r0]
 8027f58:	e78d      	b.n	8027e76 <__kernel_rem_pio2f+0x3de>
 8027f5a:	ed50 7a02 	vldr	s15, [r0, #-8]
 8027f5e:	ed70 6a01 	vldmdb	r0!, {s13}
 8027f62:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8027f66:	3c01      	subs	r4, #1
 8027f68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027f6c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8027f70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8027f74:	edc0 7a00 	vstr	s15, [r0]
 8027f78:	e781      	b.n	8027e7e <__kernel_rem_pio2f+0x3e6>
 8027f7a:	ed31 7a01 	vldmdb	r1!, {s14}
 8027f7e:	3b01      	subs	r3, #1
 8027f80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027f84:	e77f      	b.n	8027e86 <__kernel_rem_pio2f+0x3ee>
 8027f86:	eef1 6a66 	vneg.f32	s13, s13
 8027f8a:	eeb1 7a47 	vneg.f32	s14, s14
 8027f8e:	edc6 6a00 	vstr	s13, [r6]
 8027f92:	ed86 7a01 	vstr	s14, [r6, #4]
 8027f96:	eef1 7a67 	vneg.f32	s15, s15
 8027f9a:	e781      	b.n	8027ea0 <__kernel_rem_pio2f+0x408>

08027f9c <__kernel_sinf>:
 8027f9c:	ee10 3a10 	vmov	r3, s0
 8027fa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027fa4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8027fa8:	da04      	bge.n	8027fb4 <__kernel_sinf+0x18>
 8027faa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8027fae:	ee17 3a90 	vmov	r3, s15
 8027fb2:	b35b      	cbz	r3, 802800c <__kernel_sinf+0x70>
 8027fb4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8027fb8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8028010 <__kernel_sinf+0x74>
 8027fbc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8028014 <__kernel_sinf+0x78>
 8027fc0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8027fc4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8028018 <__kernel_sinf+0x7c>
 8027fc8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8027fcc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 802801c <__kernel_sinf+0x80>
 8027fd0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8027fd4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8028020 <__kernel_sinf+0x84>
 8027fd8:	ee60 6a07 	vmul.f32	s13, s0, s14
 8027fdc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8027fe0:	b930      	cbnz	r0, 8027ff0 <__kernel_sinf+0x54>
 8027fe2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8028024 <__kernel_sinf+0x88>
 8027fe6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8027fea:	eea6 0a26 	vfma.f32	s0, s12, s13
 8027fee:	4770      	bx	lr
 8027ff0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8027ff4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8027ff8:	eee0 7a86 	vfma.f32	s15, s1, s12
 8027ffc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8028000:	eddf 7a09 	vldr	s15, [pc, #36]	; 8028028 <__kernel_sinf+0x8c>
 8028004:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8028008:	ee30 0a60 	vsub.f32	s0, s0, s1
 802800c:	4770      	bx	lr
 802800e:	bf00      	nop
 8028010:	2f2ec9d3 	.word	0x2f2ec9d3
 8028014:	b2d72f34 	.word	0xb2d72f34
 8028018:	3638ef1b 	.word	0x3638ef1b
 802801c:	b9500d01 	.word	0xb9500d01
 8028020:	3c088889 	.word	0x3c088889
 8028024:	be2aaaab 	.word	0xbe2aaaab
 8028028:	3e2aaaab 	.word	0x3e2aaaab
 802802c:	00000000 	.word	0x00000000

08028030 <atan>:
 8028030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028034:	ec55 4b10 	vmov	r4, r5, d0
 8028038:	4bc3      	ldr	r3, [pc, #780]	; (8028348 <atan+0x318>)
 802803a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802803e:	429e      	cmp	r6, r3
 8028040:	46ab      	mov	fp, r5
 8028042:	dd18      	ble.n	8028076 <atan+0x46>
 8028044:	4bc1      	ldr	r3, [pc, #772]	; (802834c <atan+0x31c>)
 8028046:	429e      	cmp	r6, r3
 8028048:	dc01      	bgt.n	802804e <atan+0x1e>
 802804a:	d109      	bne.n	8028060 <atan+0x30>
 802804c:	b144      	cbz	r4, 8028060 <atan+0x30>
 802804e:	4622      	mov	r2, r4
 8028050:	462b      	mov	r3, r5
 8028052:	4620      	mov	r0, r4
 8028054:	4629      	mov	r1, r5
 8028056:	f7d8 f921 	bl	800029c <__adddf3>
 802805a:	4604      	mov	r4, r0
 802805c:	460d      	mov	r5, r1
 802805e:	e006      	b.n	802806e <atan+0x3e>
 8028060:	f1bb 0f00 	cmp.w	fp, #0
 8028064:	f340 8131 	ble.w	80282ca <atan+0x29a>
 8028068:	a59b      	add	r5, pc, #620	; (adr r5, 80282d8 <atan+0x2a8>)
 802806a:	e9d5 4500 	ldrd	r4, r5, [r5]
 802806e:	ec45 4b10 	vmov	d0, r4, r5
 8028072:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028076:	4bb6      	ldr	r3, [pc, #728]	; (8028350 <atan+0x320>)
 8028078:	429e      	cmp	r6, r3
 802807a:	dc14      	bgt.n	80280a6 <atan+0x76>
 802807c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8028080:	429e      	cmp	r6, r3
 8028082:	dc0d      	bgt.n	80280a0 <atan+0x70>
 8028084:	a396      	add	r3, pc, #600	; (adr r3, 80282e0 <atan+0x2b0>)
 8028086:	e9d3 2300 	ldrd	r2, r3, [r3]
 802808a:	ee10 0a10 	vmov	r0, s0
 802808e:	4629      	mov	r1, r5
 8028090:	f7d8 f904 	bl	800029c <__adddf3>
 8028094:	2200      	movs	r2, #0
 8028096:	4baf      	ldr	r3, [pc, #700]	; (8028354 <atan+0x324>)
 8028098:	f7d8 fd46 	bl	8000b28 <__aeabi_dcmpgt>
 802809c:	2800      	cmp	r0, #0
 802809e:	d1e6      	bne.n	802806e <atan+0x3e>
 80280a0:	f04f 3aff 	mov.w	sl, #4294967295
 80280a4:	e02b      	b.n	80280fe <atan+0xce>
 80280a6:	f000 f963 	bl	8028370 <fabs>
 80280aa:	4bab      	ldr	r3, [pc, #684]	; (8028358 <atan+0x328>)
 80280ac:	429e      	cmp	r6, r3
 80280ae:	ec55 4b10 	vmov	r4, r5, d0
 80280b2:	f300 80bf 	bgt.w	8028234 <atan+0x204>
 80280b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80280ba:	429e      	cmp	r6, r3
 80280bc:	f300 80a0 	bgt.w	8028200 <atan+0x1d0>
 80280c0:	ee10 2a10 	vmov	r2, s0
 80280c4:	ee10 0a10 	vmov	r0, s0
 80280c8:	462b      	mov	r3, r5
 80280ca:	4629      	mov	r1, r5
 80280cc:	f7d8 f8e6 	bl	800029c <__adddf3>
 80280d0:	2200      	movs	r2, #0
 80280d2:	4ba0      	ldr	r3, [pc, #640]	; (8028354 <atan+0x324>)
 80280d4:	f7d8 f8e0 	bl	8000298 <__aeabi_dsub>
 80280d8:	2200      	movs	r2, #0
 80280da:	4606      	mov	r6, r0
 80280dc:	460f      	mov	r7, r1
 80280de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80280e2:	4620      	mov	r0, r4
 80280e4:	4629      	mov	r1, r5
 80280e6:	f7d8 f8d9 	bl	800029c <__adddf3>
 80280ea:	4602      	mov	r2, r0
 80280ec:	460b      	mov	r3, r1
 80280ee:	4630      	mov	r0, r6
 80280f0:	4639      	mov	r1, r7
 80280f2:	f7d8 fbb3 	bl	800085c <__aeabi_ddiv>
 80280f6:	f04f 0a00 	mov.w	sl, #0
 80280fa:	4604      	mov	r4, r0
 80280fc:	460d      	mov	r5, r1
 80280fe:	4622      	mov	r2, r4
 8028100:	462b      	mov	r3, r5
 8028102:	4620      	mov	r0, r4
 8028104:	4629      	mov	r1, r5
 8028106:	f7d8 fa7f 	bl	8000608 <__aeabi_dmul>
 802810a:	4602      	mov	r2, r0
 802810c:	460b      	mov	r3, r1
 802810e:	4680      	mov	r8, r0
 8028110:	4689      	mov	r9, r1
 8028112:	f7d8 fa79 	bl	8000608 <__aeabi_dmul>
 8028116:	a374      	add	r3, pc, #464	; (adr r3, 80282e8 <atan+0x2b8>)
 8028118:	e9d3 2300 	ldrd	r2, r3, [r3]
 802811c:	4606      	mov	r6, r0
 802811e:	460f      	mov	r7, r1
 8028120:	f7d8 fa72 	bl	8000608 <__aeabi_dmul>
 8028124:	a372      	add	r3, pc, #456	; (adr r3, 80282f0 <atan+0x2c0>)
 8028126:	e9d3 2300 	ldrd	r2, r3, [r3]
 802812a:	f7d8 f8b7 	bl	800029c <__adddf3>
 802812e:	4632      	mov	r2, r6
 8028130:	463b      	mov	r3, r7
 8028132:	f7d8 fa69 	bl	8000608 <__aeabi_dmul>
 8028136:	a370      	add	r3, pc, #448	; (adr r3, 80282f8 <atan+0x2c8>)
 8028138:	e9d3 2300 	ldrd	r2, r3, [r3]
 802813c:	f7d8 f8ae 	bl	800029c <__adddf3>
 8028140:	4632      	mov	r2, r6
 8028142:	463b      	mov	r3, r7
 8028144:	f7d8 fa60 	bl	8000608 <__aeabi_dmul>
 8028148:	a36d      	add	r3, pc, #436	; (adr r3, 8028300 <atan+0x2d0>)
 802814a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802814e:	f7d8 f8a5 	bl	800029c <__adddf3>
 8028152:	4632      	mov	r2, r6
 8028154:	463b      	mov	r3, r7
 8028156:	f7d8 fa57 	bl	8000608 <__aeabi_dmul>
 802815a:	a36b      	add	r3, pc, #428	; (adr r3, 8028308 <atan+0x2d8>)
 802815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028160:	f7d8 f89c 	bl	800029c <__adddf3>
 8028164:	4632      	mov	r2, r6
 8028166:	463b      	mov	r3, r7
 8028168:	f7d8 fa4e 	bl	8000608 <__aeabi_dmul>
 802816c:	a368      	add	r3, pc, #416	; (adr r3, 8028310 <atan+0x2e0>)
 802816e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028172:	f7d8 f893 	bl	800029c <__adddf3>
 8028176:	4642      	mov	r2, r8
 8028178:	464b      	mov	r3, r9
 802817a:	f7d8 fa45 	bl	8000608 <__aeabi_dmul>
 802817e:	a366      	add	r3, pc, #408	; (adr r3, 8028318 <atan+0x2e8>)
 8028180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028184:	4680      	mov	r8, r0
 8028186:	4689      	mov	r9, r1
 8028188:	4630      	mov	r0, r6
 802818a:	4639      	mov	r1, r7
 802818c:	f7d8 fa3c 	bl	8000608 <__aeabi_dmul>
 8028190:	a363      	add	r3, pc, #396	; (adr r3, 8028320 <atan+0x2f0>)
 8028192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028196:	f7d8 f87f 	bl	8000298 <__aeabi_dsub>
 802819a:	4632      	mov	r2, r6
 802819c:	463b      	mov	r3, r7
 802819e:	f7d8 fa33 	bl	8000608 <__aeabi_dmul>
 80281a2:	a361      	add	r3, pc, #388	; (adr r3, 8028328 <atan+0x2f8>)
 80281a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80281a8:	f7d8 f876 	bl	8000298 <__aeabi_dsub>
 80281ac:	4632      	mov	r2, r6
 80281ae:	463b      	mov	r3, r7
 80281b0:	f7d8 fa2a 	bl	8000608 <__aeabi_dmul>
 80281b4:	a35e      	add	r3, pc, #376	; (adr r3, 8028330 <atan+0x300>)
 80281b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80281ba:	f7d8 f86d 	bl	8000298 <__aeabi_dsub>
 80281be:	4632      	mov	r2, r6
 80281c0:	463b      	mov	r3, r7
 80281c2:	f7d8 fa21 	bl	8000608 <__aeabi_dmul>
 80281c6:	a35c      	add	r3, pc, #368	; (adr r3, 8028338 <atan+0x308>)
 80281c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80281cc:	f7d8 f864 	bl	8000298 <__aeabi_dsub>
 80281d0:	4632      	mov	r2, r6
 80281d2:	463b      	mov	r3, r7
 80281d4:	f7d8 fa18 	bl	8000608 <__aeabi_dmul>
 80281d8:	4602      	mov	r2, r0
 80281da:	460b      	mov	r3, r1
 80281dc:	4640      	mov	r0, r8
 80281de:	4649      	mov	r1, r9
 80281e0:	f7d8 f85c 	bl	800029c <__adddf3>
 80281e4:	4622      	mov	r2, r4
 80281e6:	462b      	mov	r3, r5
 80281e8:	f7d8 fa0e 	bl	8000608 <__aeabi_dmul>
 80281ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80281f0:	4602      	mov	r2, r0
 80281f2:	460b      	mov	r3, r1
 80281f4:	d14b      	bne.n	802828e <atan+0x25e>
 80281f6:	4620      	mov	r0, r4
 80281f8:	4629      	mov	r1, r5
 80281fa:	f7d8 f84d 	bl	8000298 <__aeabi_dsub>
 80281fe:	e72c      	b.n	802805a <atan+0x2a>
 8028200:	ee10 0a10 	vmov	r0, s0
 8028204:	2200      	movs	r2, #0
 8028206:	4b53      	ldr	r3, [pc, #332]	; (8028354 <atan+0x324>)
 8028208:	4629      	mov	r1, r5
 802820a:	f7d8 f845 	bl	8000298 <__aeabi_dsub>
 802820e:	2200      	movs	r2, #0
 8028210:	4606      	mov	r6, r0
 8028212:	460f      	mov	r7, r1
 8028214:	4b4f      	ldr	r3, [pc, #316]	; (8028354 <atan+0x324>)
 8028216:	4620      	mov	r0, r4
 8028218:	4629      	mov	r1, r5
 802821a:	f7d8 f83f 	bl	800029c <__adddf3>
 802821e:	4602      	mov	r2, r0
 8028220:	460b      	mov	r3, r1
 8028222:	4630      	mov	r0, r6
 8028224:	4639      	mov	r1, r7
 8028226:	f7d8 fb19 	bl	800085c <__aeabi_ddiv>
 802822a:	f04f 0a01 	mov.w	sl, #1
 802822e:	4604      	mov	r4, r0
 8028230:	460d      	mov	r5, r1
 8028232:	e764      	b.n	80280fe <atan+0xce>
 8028234:	4b49      	ldr	r3, [pc, #292]	; (802835c <atan+0x32c>)
 8028236:	429e      	cmp	r6, r3
 8028238:	dc1d      	bgt.n	8028276 <atan+0x246>
 802823a:	ee10 0a10 	vmov	r0, s0
 802823e:	2200      	movs	r2, #0
 8028240:	4b47      	ldr	r3, [pc, #284]	; (8028360 <atan+0x330>)
 8028242:	4629      	mov	r1, r5
 8028244:	f7d8 f828 	bl	8000298 <__aeabi_dsub>
 8028248:	2200      	movs	r2, #0
 802824a:	4606      	mov	r6, r0
 802824c:	460f      	mov	r7, r1
 802824e:	4b44      	ldr	r3, [pc, #272]	; (8028360 <atan+0x330>)
 8028250:	4620      	mov	r0, r4
 8028252:	4629      	mov	r1, r5
 8028254:	f7d8 f9d8 	bl	8000608 <__aeabi_dmul>
 8028258:	2200      	movs	r2, #0
 802825a:	4b3e      	ldr	r3, [pc, #248]	; (8028354 <atan+0x324>)
 802825c:	f7d8 f81e 	bl	800029c <__adddf3>
 8028260:	4602      	mov	r2, r0
 8028262:	460b      	mov	r3, r1
 8028264:	4630      	mov	r0, r6
 8028266:	4639      	mov	r1, r7
 8028268:	f7d8 faf8 	bl	800085c <__aeabi_ddiv>
 802826c:	f04f 0a02 	mov.w	sl, #2
 8028270:	4604      	mov	r4, r0
 8028272:	460d      	mov	r5, r1
 8028274:	e743      	b.n	80280fe <atan+0xce>
 8028276:	462b      	mov	r3, r5
 8028278:	ee10 2a10 	vmov	r2, s0
 802827c:	2000      	movs	r0, #0
 802827e:	4939      	ldr	r1, [pc, #228]	; (8028364 <atan+0x334>)
 8028280:	f7d8 faec 	bl	800085c <__aeabi_ddiv>
 8028284:	f04f 0a03 	mov.w	sl, #3
 8028288:	4604      	mov	r4, r0
 802828a:	460d      	mov	r5, r1
 802828c:	e737      	b.n	80280fe <atan+0xce>
 802828e:	4b36      	ldr	r3, [pc, #216]	; (8028368 <atan+0x338>)
 8028290:	4e36      	ldr	r6, [pc, #216]	; (802836c <atan+0x33c>)
 8028292:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8028296:	4456      	add	r6, sl
 8028298:	449a      	add	sl, r3
 802829a:	e9da 2300 	ldrd	r2, r3, [sl]
 802829e:	f7d7 fffb 	bl	8000298 <__aeabi_dsub>
 80282a2:	4622      	mov	r2, r4
 80282a4:	462b      	mov	r3, r5
 80282a6:	f7d7 fff7 	bl	8000298 <__aeabi_dsub>
 80282aa:	4602      	mov	r2, r0
 80282ac:	460b      	mov	r3, r1
 80282ae:	e9d6 0100 	ldrd	r0, r1, [r6]
 80282b2:	f7d7 fff1 	bl	8000298 <__aeabi_dsub>
 80282b6:	f1bb 0f00 	cmp.w	fp, #0
 80282ba:	4604      	mov	r4, r0
 80282bc:	460d      	mov	r5, r1
 80282be:	f6bf aed6 	bge.w	802806e <atan+0x3e>
 80282c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80282c6:	461d      	mov	r5, r3
 80282c8:	e6d1      	b.n	802806e <atan+0x3e>
 80282ca:	a51d      	add	r5, pc, #116	; (adr r5, 8028340 <atan+0x310>)
 80282cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80282d0:	e6cd      	b.n	802806e <atan+0x3e>
 80282d2:	bf00      	nop
 80282d4:	f3af 8000 	nop.w
 80282d8:	54442d18 	.word	0x54442d18
 80282dc:	3ff921fb 	.word	0x3ff921fb
 80282e0:	8800759c 	.word	0x8800759c
 80282e4:	7e37e43c 	.word	0x7e37e43c
 80282e8:	e322da11 	.word	0xe322da11
 80282ec:	3f90ad3a 	.word	0x3f90ad3a
 80282f0:	24760deb 	.word	0x24760deb
 80282f4:	3fa97b4b 	.word	0x3fa97b4b
 80282f8:	a0d03d51 	.word	0xa0d03d51
 80282fc:	3fb10d66 	.word	0x3fb10d66
 8028300:	c54c206e 	.word	0xc54c206e
 8028304:	3fb745cd 	.word	0x3fb745cd
 8028308:	920083ff 	.word	0x920083ff
 802830c:	3fc24924 	.word	0x3fc24924
 8028310:	5555550d 	.word	0x5555550d
 8028314:	3fd55555 	.word	0x3fd55555
 8028318:	2c6a6c2f 	.word	0x2c6a6c2f
 802831c:	bfa2b444 	.word	0xbfa2b444
 8028320:	52defd9a 	.word	0x52defd9a
 8028324:	3fadde2d 	.word	0x3fadde2d
 8028328:	af749a6d 	.word	0xaf749a6d
 802832c:	3fb3b0f2 	.word	0x3fb3b0f2
 8028330:	fe231671 	.word	0xfe231671
 8028334:	3fbc71c6 	.word	0x3fbc71c6
 8028338:	9998ebc4 	.word	0x9998ebc4
 802833c:	3fc99999 	.word	0x3fc99999
 8028340:	54442d18 	.word	0x54442d18
 8028344:	bff921fb 	.word	0xbff921fb
 8028348:	440fffff 	.word	0x440fffff
 802834c:	7ff00000 	.word	0x7ff00000
 8028350:	3fdbffff 	.word	0x3fdbffff
 8028354:	3ff00000 	.word	0x3ff00000
 8028358:	3ff2ffff 	.word	0x3ff2ffff
 802835c:	40037fff 	.word	0x40037fff
 8028360:	3ff80000 	.word	0x3ff80000
 8028364:	bff00000 	.word	0xbff00000
 8028368:	0802e560 	.word	0x0802e560
 802836c:	0802e540 	.word	0x0802e540

08028370 <fabs>:
 8028370:	ec51 0b10 	vmov	r0, r1, d0
 8028374:	ee10 2a10 	vmov	r2, s0
 8028378:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802837c:	ec43 2b10 	vmov	d0, r2, r3
 8028380:	4770      	bx	lr

08028382 <finite>:
 8028382:	ee10 3a90 	vmov	r3, s1
 8028386:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 802838a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802838e:	0fc0      	lsrs	r0, r0, #31
 8028390:	4770      	bx	lr

08028392 <matherr>:
 8028392:	2000      	movs	r0, #0
 8028394:	4770      	bx	lr
	...

08028398 <nan>:
 8028398:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80283a0 <nan+0x8>
 802839c:	4770      	bx	lr
 802839e:	bf00      	nop
 80283a0:	00000000 	.word	0x00000000
 80283a4:	7ff80000 	.word	0x7ff80000

080283a8 <rint>:
 80283a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80283aa:	ec51 0b10 	vmov	r0, r1, d0
 80283ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80283b2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80283b6:	2e13      	cmp	r6, #19
 80283b8:	460b      	mov	r3, r1
 80283ba:	ee10 4a10 	vmov	r4, s0
 80283be:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80283c2:	dc56      	bgt.n	8028472 <rint+0xca>
 80283c4:	2e00      	cmp	r6, #0
 80283c6:	da2b      	bge.n	8028420 <rint+0x78>
 80283c8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80283cc:	4302      	orrs	r2, r0
 80283ce:	d023      	beq.n	8028418 <rint+0x70>
 80283d0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80283d4:	4302      	orrs	r2, r0
 80283d6:	4254      	negs	r4, r2
 80283d8:	4314      	orrs	r4, r2
 80283da:	0c4b      	lsrs	r3, r1, #17
 80283dc:	0b24      	lsrs	r4, r4, #12
 80283de:	045b      	lsls	r3, r3, #17
 80283e0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80283e4:	ea44 0103 	orr.w	r1, r4, r3
 80283e8:	460b      	mov	r3, r1
 80283ea:	492f      	ldr	r1, [pc, #188]	; (80284a8 <rint+0x100>)
 80283ec:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80283f0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80283f4:	4602      	mov	r2, r0
 80283f6:	4639      	mov	r1, r7
 80283f8:	4630      	mov	r0, r6
 80283fa:	f7d7 ff4f 	bl	800029c <__adddf3>
 80283fe:	e9cd 0100 	strd	r0, r1, [sp]
 8028402:	463b      	mov	r3, r7
 8028404:	4632      	mov	r2, r6
 8028406:	e9dd 0100 	ldrd	r0, r1, [sp]
 802840a:	f7d7 ff45 	bl	8000298 <__aeabi_dsub>
 802840e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8028412:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8028416:	4639      	mov	r1, r7
 8028418:	ec41 0b10 	vmov	d0, r0, r1
 802841c:	b003      	add	sp, #12
 802841e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028420:	4a22      	ldr	r2, [pc, #136]	; (80284ac <rint+0x104>)
 8028422:	4132      	asrs	r2, r6
 8028424:	ea01 0702 	and.w	r7, r1, r2
 8028428:	4307      	orrs	r7, r0
 802842a:	d0f5      	beq.n	8028418 <rint+0x70>
 802842c:	0852      	lsrs	r2, r2, #1
 802842e:	4011      	ands	r1, r2
 8028430:	430c      	orrs	r4, r1
 8028432:	d00b      	beq.n	802844c <rint+0xa4>
 8028434:	ea23 0202 	bic.w	r2, r3, r2
 8028438:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802843c:	2e13      	cmp	r6, #19
 802843e:	fa43 f306 	asr.w	r3, r3, r6
 8028442:	bf0c      	ite	eq
 8028444:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8028448:	2400      	movne	r4, #0
 802844a:	4313      	orrs	r3, r2
 802844c:	4916      	ldr	r1, [pc, #88]	; (80284a8 <rint+0x100>)
 802844e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8028452:	4622      	mov	r2, r4
 8028454:	e9d5 4500 	ldrd	r4, r5, [r5]
 8028458:	4620      	mov	r0, r4
 802845a:	4629      	mov	r1, r5
 802845c:	f7d7 ff1e 	bl	800029c <__adddf3>
 8028460:	e9cd 0100 	strd	r0, r1, [sp]
 8028464:	4622      	mov	r2, r4
 8028466:	462b      	mov	r3, r5
 8028468:	e9dd 0100 	ldrd	r0, r1, [sp]
 802846c:	f7d7 ff14 	bl	8000298 <__aeabi_dsub>
 8028470:	e7d2      	b.n	8028418 <rint+0x70>
 8028472:	2e33      	cmp	r6, #51	; 0x33
 8028474:	dd07      	ble.n	8028486 <rint+0xde>
 8028476:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802847a:	d1cd      	bne.n	8028418 <rint+0x70>
 802847c:	ee10 2a10 	vmov	r2, s0
 8028480:	f7d7 ff0c 	bl	800029c <__adddf3>
 8028484:	e7c8      	b.n	8028418 <rint+0x70>
 8028486:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 802848a:	f04f 32ff 	mov.w	r2, #4294967295
 802848e:	40f2      	lsrs	r2, r6
 8028490:	4210      	tst	r0, r2
 8028492:	d0c1      	beq.n	8028418 <rint+0x70>
 8028494:	0852      	lsrs	r2, r2, #1
 8028496:	4210      	tst	r0, r2
 8028498:	bf1f      	itttt	ne
 802849a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 802849e:	ea20 0202 	bicne.w	r2, r0, r2
 80284a2:	4134      	asrne	r4, r6
 80284a4:	4314      	orrne	r4, r2
 80284a6:	e7d1      	b.n	802844c <rint+0xa4>
 80284a8:	0802e580 	.word	0x0802e580
 80284ac:	000fffff 	.word	0x000fffff

080284b0 <scalbn>:
 80284b0:	b570      	push	{r4, r5, r6, lr}
 80284b2:	ec55 4b10 	vmov	r4, r5, d0
 80284b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80284ba:	4606      	mov	r6, r0
 80284bc:	462b      	mov	r3, r5
 80284be:	b9aa      	cbnz	r2, 80284ec <scalbn+0x3c>
 80284c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80284c4:	4323      	orrs	r3, r4
 80284c6:	d03b      	beq.n	8028540 <scalbn+0x90>
 80284c8:	4b31      	ldr	r3, [pc, #196]	; (8028590 <scalbn+0xe0>)
 80284ca:	4629      	mov	r1, r5
 80284cc:	2200      	movs	r2, #0
 80284ce:	ee10 0a10 	vmov	r0, s0
 80284d2:	f7d8 f899 	bl	8000608 <__aeabi_dmul>
 80284d6:	4b2f      	ldr	r3, [pc, #188]	; (8028594 <scalbn+0xe4>)
 80284d8:	429e      	cmp	r6, r3
 80284da:	4604      	mov	r4, r0
 80284dc:	460d      	mov	r5, r1
 80284de:	da12      	bge.n	8028506 <scalbn+0x56>
 80284e0:	a327      	add	r3, pc, #156	; (adr r3, 8028580 <scalbn+0xd0>)
 80284e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80284e6:	f7d8 f88f 	bl	8000608 <__aeabi_dmul>
 80284ea:	e009      	b.n	8028500 <scalbn+0x50>
 80284ec:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80284f0:	428a      	cmp	r2, r1
 80284f2:	d10c      	bne.n	802850e <scalbn+0x5e>
 80284f4:	ee10 2a10 	vmov	r2, s0
 80284f8:	4620      	mov	r0, r4
 80284fa:	4629      	mov	r1, r5
 80284fc:	f7d7 fece 	bl	800029c <__adddf3>
 8028500:	4604      	mov	r4, r0
 8028502:	460d      	mov	r5, r1
 8028504:	e01c      	b.n	8028540 <scalbn+0x90>
 8028506:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802850a:	460b      	mov	r3, r1
 802850c:	3a36      	subs	r2, #54	; 0x36
 802850e:	4432      	add	r2, r6
 8028510:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8028514:	428a      	cmp	r2, r1
 8028516:	dd0b      	ble.n	8028530 <scalbn+0x80>
 8028518:	ec45 4b11 	vmov	d1, r4, r5
 802851c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8028588 <scalbn+0xd8>
 8028520:	f000 f8a4 	bl	802866c <copysign>
 8028524:	a318      	add	r3, pc, #96	; (adr r3, 8028588 <scalbn+0xd8>)
 8028526:	e9d3 2300 	ldrd	r2, r3, [r3]
 802852a:	ec51 0b10 	vmov	r0, r1, d0
 802852e:	e7da      	b.n	80284e6 <scalbn+0x36>
 8028530:	2a00      	cmp	r2, #0
 8028532:	dd08      	ble.n	8028546 <scalbn+0x96>
 8028534:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8028538:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802853c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8028540:	ec45 4b10 	vmov	d0, r4, r5
 8028544:	bd70      	pop	{r4, r5, r6, pc}
 8028546:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802854a:	da0d      	bge.n	8028568 <scalbn+0xb8>
 802854c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8028550:	429e      	cmp	r6, r3
 8028552:	ec45 4b11 	vmov	d1, r4, r5
 8028556:	dce1      	bgt.n	802851c <scalbn+0x6c>
 8028558:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8028580 <scalbn+0xd0>
 802855c:	f000 f886 	bl	802866c <copysign>
 8028560:	a307      	add	r3, pc, #28	; (adr r3, 8028580 <scalbn+0xd0>)
 8028562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028566:	e7e0      	b.n	802852a <scalbn+0x7a>
 8028568:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802856c:	3236      	adds	r2, #54	; 0x36
 802856e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8028572:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8028576:	4620      	mov	r0, r4
 8028578:	4629      	mov	r1, r5
 802857a:	2200      	movs	r2, #0
 802857c:	4b06      	ldr	r3, [pc, #24]	; (8028598 <scalbn+0xe8>)
 802857e:	e7b2      	b.n	80284e6 <scalbn+0x36>
 8028580:	c2f8f359 	.word	0xc2f8f359
 8028584:	01a56e1f 	.word	0x01a56e1f
 8028588:	8800759c 	.word	0x8800759c
 802858c:	7e37e43c 	.word	0x7e37e43c
 8028590:	43500000 	.word	0x43500000
 8028594:	ffff3cb0 	.word	0xffff3cb0
 8028598:	3c900000 	.word	0x3c900000

0802859c <fabsf>:
 802859c:	ee10 3a10 	vmov	r3, s0
 80285a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80285a4:	ee00 3a10 	vmov	s0, r3
 80285a8:	4770      	bx	lr
	...

080285ac <scalbnf>:
 80285ac:	b508      	push	{r3, lr}
 80285ae:	ee10 2a10 	vmov	r2, s0
 80285b2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80285b6:	ed2d 8b02 	vpush	{d8}
 80285ba:	eef0 0a40 	vmov.f32	s1, s0
 80285be:	d004      	beq.n	80285ca <scalbnf+0x1e>
 80285c0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80285c4:	d306      	bcc.n	80285d4 <scalbnf+0x28>
 80285c6:	ee70 0a00 	vadd.f32	s1, s0, s0
 80285ca:	ecbd 8b02 	vpop	{d8}
 80285ce:	eeb0 0a60 	vmov.f32	s0, s1
 80285d2:	bd08      	pop	{r3, pc}
 80285d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80285d8:	d21c      	bcs.n	8028614 <scalbnf+0x68>
 80285da:	4b1f      	ldr	r3, [pc, #124]	; (8028658 <scalbnf+0xac>)
 80285dc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802865c <scalbnf+0xb0>
 80285e0:	4298      	cmp	r0, r3
 80285e2:	ee60 0a27 	vmul.f32	s1, s0, s15
 80285e6:	db10      	blt.n	802860a <scalbnf+0x5e>
 80285e8:	ee10 2a90 	vmov	r2, s1
 80285ec:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80285f0:	3b19      	subs	r3, #25
 80285f2:	4403      	add	r3, r0
 80285f4:	2bfe      	cmp	r3, #254	; 0xfe
 80285f6:	dd0f      	ble.n	8028618 <scalbnf+0x6c>
 80285f8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8028660 <scalbnf+0xb4>
 80285fc:	eeb0 0a48 	vmov.f32	s0, s16
 8028600:	f000 f843 	bl	802868a <copysignf>
 8028604:	ee60 0a08 	vmul.f32	s1, s0, s16
 8028608:	e7df      	b.n	80285ca <scalbnf+0x1e>
 802860a:	eddf 7a16 	vldr	s15, [pc, #88]	; 8028664 <scalbnf+0xb8>
 802860e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8028612:	e7da      	b.n	80285ca <scalbnf+0x1e>
 8028614:	0ddb      	lsrs	r3, r3, #23
 8028616:	e7ec      	b.n	80285f2 <scalbnf+0x46>
 8028618:	2b00      	cmp	r3, #0
 802861a:	dd06      	ble.n	802862a <scalbnf+0x7e>
 802861c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8028620:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8028624:	ee00 3a90 	vmov	s1, r3
 8028628:	e7cf      	b.n	80285ca <scalbnf+0x1e>
 802862a:	f113 0f16 	cmn.w	r3, #22
 802862e:	da06      	bge.n	802863e <scalbnf+0x92>
 8028630:	f24c 3350 	movw	r3, #50000	; 0xc350
 8028634:	4298      	cmp	r0, r3
 8028636:	dcdf      	bgt.n	80285f8 <scalbnf+0x4c>
 8028638:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8028664 <scalbnf+0xb8>
 802863c:	e7de      	b.n	80285fc <scalbnf+0x50>
 802863e:	3319      	adds	r3, #25
 8028640:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8028644:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8028648:	eddf 7a07 	vldr	s15, [pc, #28]	; 8028668 <scalbnf+0xbc>
 802864c:	ee07 3a10 	vmov	s14, r3
 8028650:	ee67 0a27 	vmul.f32	s1, s14, s15
 8028654:	e7b9      	b.n	80285ca <scalbnf+0x1e>
 8028656:	bf00      	nop
 8028658:	ffff3cb0 	.word	0xffff3cb0
 802865c:	4c000000 	.word	0x4c000000
 8028660:	7149f2ca 	.word	0x7149f2ca
 8028664:	0da24260 	.word	0x0da24260
 8028668:	33000000 	.word	0x33000000

0802866c <copysign>:
 802866c:	ec51 0b10 	vmov	r0, r1, d0
 8028670:	ee11 0a90 	vmov	r0, s3
 8028674:	ee10 2a10 	vmov	r2, s0
 8028678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802867c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8028680:	ea41 0300 	orr.w	r3, r1, r0
 8028684:	ec43 2b10 	vmov	d0, r2, r3
 8028688:	4770      	bx	lr

0802868a <copysignf>:
 802868a:	ee10 3a10 	vmov	r3, s0
 802868e:	ee10 2a90 	vmov	r2, s1
 8028692:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8028696:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 802869a:	4313      	orrs	r3, r2
 802869c:	ee00 3a10 	vmov	s0, r3
 80286a0:	4770      	bx	lr
	...

080286a4 <__assert_func>:
 80286a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80286a6:	461c      	mov	r4, r3
 80286a8:	4b09      	ldr	r3, [pc, #36]	; (80286d0 <__assert_func+0x2c>)
 80286aa:	681b      	ldr	r3, [r3, #0]
 80286ac:	4605      	mov	r5, r0
 80286ae:	68d8      	ldr	r0, [r3, #12]
 80286b0:	b152      	cbz	r2, 80286c8 <__assert_func+0x24>
 80286b2:	4b08      	ldr	r3, [pc, #32]	; (80286d4 <__assert_func+0x30>)
 80286b4:	9100      	str	r1, [sp, #0]
 80286b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80286ba:	4907      	ldr	r1, [pc, #28]	; (80286d8 <__assert_func+0x34>)
 80286bc:	462b      	mov	r3, r5
 80286be:	4622      	mov	r2, r4
 80286c0:	f000 f814 	bl	80286ec <fiprintf>
 80286c4:	f002 f89e 	bl	802a804 <abort>
 80286c8:	4b04      	ldr	r3, [pc, #16]	; (80286dc <__assert_func+0x38>)
 80286ca:	461a      	mov	r2, r3
 80286cc:	e7f2      	b.n	80286b4 <__assert_func+0x10>
 80286ce:	bf00      	nop
 80286d0:	2000068c 	.word	0x2000068c
 80286d4:	0802e590 	.word	0x0802e590
 80286d8:	0802e59d 	.word	0x0802e59d
 80286dc:	0802e5cb 	.word	0x0802e5cb

080286e0 <__errno>:
 80286e0:	4b01      	ldr	r3, [pc, #4]	; (80286e8 <__errno+0x8>)
 80286e2:	6818      	ldr	r0, [r3, #0]
 80286e4:	4770      	bx	lr
 80286e6:	bf00      	nop
 80286e8:	2000068c 	.word	0x2000068c

080286ec <fiprintf>:
 80286ec:	b40e      	push	{r1, r2, r3}
 80286ee:	b503      	push	{r0, r1, lr}
 80286f0:	4601      	mov	r1, r0
 80286f2:	ab03      	add	r3, sp, #12
 80286f4:	4805      	ldr	r0, [pc, #20]	; (802870c <fiprintf+0x20>)
 80286f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80286fa:	6800      	ldr	r0, [r0, #0]
 80286fc:	9301      	str	r3, [sp, #4]
 80286fe:	f000 f867 	bl	80287d0 <_vfiprintf_r>
 8028702:	b002      	add	sp, #8
 8028704:	f85d eb04 	ldr.w	lr, [sp], #4
 8028708:	b003      	add	sp, #12
 802870a:	4770      	bx	lr
 802870c:	2000068c 	.word	0x2000068c

08028710 <__libc_init_array>:
 8028710:	b570      	push	{r4, r5, r6, lr}
 8028712:	4e0d      	ldr	r6, [pc, #52]	; (8028748 <__libc_init_array+0x38>)
 8028714:	4c0d      	ldr	r4, [pc, #52]	; (802874c <__libc_init_array+0x3c>)
 8028716:	1ba4      	subs	r4, r4, r6
 8028718:	10a4      	asrs	r4, r4, #2
 802871a:	2500      	movs	r5, #0
 802871c:	42a5      	cmp	r5, r4
 802871e:	d109      	bne.n	8028734 <__libc_init_array+0x24>
 8028720:	4e0b      	ldr	r6, [pc, #44]	; (8028750 <__libc_init_array+0x40>)
 8028722:	4c0c      	ldr	r4, [pc, #48]	; (8028754 <__libc_init_array+0x44>)
 8028724:	f004 fb5c 	bl	802cde0 <_init>
 8028728:	1ba4      	subs	r4, r4, r6
 802872a:	10a4      	asrs	r4, r4, #2
 802872c:	2500      	movs	r5, #0
 802872e:	42a5      	cmp	r5, r4
 8028730:	d105      	bne.n	802873e <__libc_init_array+0x2e>
 8028732:	bd70      	pop	{r4, r5, r6, pc}
 8028734:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8028738:	4798      	blx	r3
 802873a:	3501      	adds	r5, #1
 802873c:	e7ee      	b.n	802871c <__libc_init_array+0xc>
 802873e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8028742:	4798      	blx	r3
 8028744:	3501      	adds	r5, #1
 8028746:	e7f2      	b.n	802872e <__libc_init_array+0x1e>
 8028748:	0802e8f8 	.word	0x0802e8f8
 802874c:	0802e8f8 	.word	0x0802e8f8
 8028750:	0802e8f8 	.word	0x0802e8f8
 8028754:	0802e91c 	.word	0x0802e91c

08028758 <memcpy>:
 8028758:	b510      	push	{r4, lr}
 802875a:	1e43      	subs	r3, r0, #1
 802875c:	440a      	add	r2, r1
 802875e:	4291      	cmp	r1, r2
 8028760:	d100      	bne.n	8028764 <memcpy+0xc>
 8028762:	bd10      	pop	{r4, pc}
 8028764:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028768:	f803 4f01 	strb.w	r4, [r3, #1]!
 802876c:	e7f7      	b.n	802875e <memcpy+0x6>

0802876e <memset>:
 802876e:	4402      	add	r2, r0
 8028770:	4603      	mov	r3, r0
 8028772:	4293      	cmp	r3, r2
 8028774:	d100      	bne.n	8028778 <memset+0xa>
 8028776:	4770      	bx	lr
 8028778:	f803 1b01 	strb.w	r1, [r3], #1
 802877c:	e7f9      	b.n	8028772 <memset+0x4>

0802877e <__sfputc_r>:
 802877e:	6893      	ldr	r3, [r2, #8]
 8028780:	3b01      	subs	r3, #1
 8028782:	2b00      	cmp	r3, #0
 8028784:	b410      	push	{r4}
 8028786:	6093      	str	r3, [r2, #8]
 8028788:	da08      	bge.n	802879c <__sfputc_r+0x1e>
 802878a:	6994      	ldr	r4, [r2, #24]
 802878c:	42a3      	cmp	r3, r4
 802878e:	db01      	blt.n	8028794 <__sfputc_r+0x16>
 8028790:	290a      	cmp	r1, #10
 8028792:	d103      	bne.n	802879c <__sfputc_r+0x1e>
 8028794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028798:	f001 bf74 	b.w	802a684 <__swbuf_r>
 802879c:	6813      	ldr	r3, [r2, #0]
 802879e:	1c58      	adds	r0, r3, #1
 80287a0:	6010      	str	r0, [r2, #0]
 80287a2:	7019      	strb	r1, [r3, #0]
 80287a4:	4608      	mov	r0, r1
 80287a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80287aa:	4770      	bx	lr

080287ac <__sfputs_r>:
 80287ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80287ae:	4606      	mov	r6, r0
 80287b0:	460f      	mov	r7, r1
 80287b2:	4614      	mov	r4, r2
 80287b4:	18d5      	adds	r5, r2, r3
 80287b6:	42ac      	cmp	r4, r5
 80287b8:	d101      	bne.n	80287be <__sfputs_r+0x12>
 80287ba:	2000      	movs	r0, #0
 80287bc:	e007      	b.n	80287ce <__sfputs_r+0x22>
 80287be:	463a      	mov	r2, r7
 80287c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80287c4:	4630      	mov	r0, r6
 80287c6:	f7ff ffda 	bl	802877e <__sfputc_r>
 80287ca:	1c43      	adds	r3, r0, #1
 80287cc:	d1f3      	bne.n	80287b6 <__sfputs_r+0xa>
 80287ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080287d0 <_vfiprintf_r>:
 80287d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80287d4:	460c      	mov	r4, r1
 80287d6:	b09d      	sub	sp, #116	; 0x74
 80287d8:	4617      	mov	r7, r2
 80287da:	461d      	mov	r5, r3
 80287dc:	4606      	mov	r6, r0
 80287de:	b118      	cbz	r0, 80287e8 <_vfiprintf_r+0x18>
 80287e0:	6983      	ldr	r3, [r0, #24]
 80287e2:	b90b      	cbnz	r3, 80287e8 <_vfiprintf_r+0x18>
 80287e4:	f002 ff4c 	bl	802b680 <__sinit>
 80287e8:	4b7c      	ldr	r3, [pc, #496]	; (80289dc <_vfiprintf_r+0x20c>)
 80287ea:	429c      	cmp	r4, r3
 80287ec:	d158      	bne.n	80288a0 <_vfiprintf_r+0xd0>
 80287ee:	6874      	ldr	r4, [r6, #4]
 80287f0:	89a3      	ldrh	r3, [r4, #12]
 80287f2:	0718      	lsls	r0, r3, #28
 80287f4:	d55e      	bpl.n	80288b4 <_vfiprintf_r+0xe4>
 80287f6:	6923      	ldr	r3, [r4, #16]
 80287f8:	2b00      	cmp	r3, #0
 80287fa:	d05b      	beq.n	80288b4 <_vfiprintf_r+0xe4>
 80287fc:	2300      	movs	r3, #0
 80287fe:	9309      	str	r3, [sp, #36]	; 0x24
 8028800:	2320      	movs	r3, #32
 8028802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028806:	2330      	movs	r3, #48	; 0x30
 8028808:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802880c:	9503      	str	r5, [sp, #12]
 802880e:	f04f 0b01 	mov.w	fp, #1
 8028812:	46b8      	mov	r8, r7
 8028814:	4645      	mov	r5, r8
 8028816:	f815 3b01 	ldrb.w	r3, [r5], #1
 802881a:	b10b      	cbz	r3, 8028820 <_vfiprintf_r+0x50>
 802881c:	2b25      	cmp	r3, #37	; 0x25
 802881e:	d154      	bne.n	80288ca <_vfiprintf_r+0xfa>
 8028820:	ebb8 0a07 	subs.w	sl, r8, r7
 8028824:	d00b      	beq.n	802883e <_vfiprintf_r+0x6e>
 8028826:	4653      	mov	r3, sl
 8028828:	463a      	mov	r2, r7
 802882a:	4621      	mov	r1, r4
 802882c:	4630      	mov	r0, r6
 802882e:	f7ff ffbd 	bl	80287ac <__sfputs_r>
 8028832:	3001      	adds	r0, #1
 8028834:	f000 80c2 	beq.w	80289bc <_vfiprintf_r+0x1ec>
 8028838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802883a:	4453      	add	r3, sl
 802883c:	9309      	str	r3, [sp, #36]	; 0x24
 802883e:	f898 3000 	ldrb.w	r3, [r8]
 8028842:	2b00      	cmp	r3, #0
 8028844:	f000 80ba 	beq.w	80289bc <_vfiprintf_r+0x1ec>
 8028848:	2300      	movs	r3, #0
 802884a:	f04f 32ff 	mov.w	r2, #4294967295
 802884e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028852:	9304      	str	r3, [sp, #16]
 8028854:	9307      	str	r3, [sp, #28]
 8028856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802885a:	931a      	str	r3, [sp, #104]	; 0x68
 802885c:	46a8      	mov	r8, r5
 802885e:	2205      	movs	r2, #5
 8028860:	f818 1b01 	ldrb.w	r1, [r8], #1
 8028864:	485e      	ldr	r0, [pc, #376]	; (80289e0 <_vfiprintf_r+0x210>)
 8028866:	f7d7 fcc3 	bl	80001f0 <memchr>
 802886a:	9b04      	ldr	r3, [sp, #16]
 802886c:	bb78      	cbnz	r0, 80288ce <_vfiprintf_r+0xfe>
 802886e:	06d9      	lsls	r1, r3, #27
 8028870:	bf44      	itt	mi
 8028872:	2220      	movmi	r2, #32
 8028874:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8028878:	071a      	lsls	r2, r3, #28
 802887a:	bf44      	itt	mi
 802887c:	222b      	movmi	r2, #43	; 0x2b
 802887e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8028882:	782a      	ldrb	r2, [r5, #0]
 8028884:	2a2a      	cmp	r2, #42	; 0x2a
 8028886:	d02a      	beq.n	80288de <_vfiprintf_r+0x10e>
 8028888:	9a07      	ldr	r2, [sp, #28]
 802888a:	46a8      	mov	r8, r5
 802888c:	2000      	movs	r0, #0
 802888e:	250a      	movs	r5, #10
 8028890:	4641      	mov	r1, r8
 8028892:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028896:	3b30      	subs	r3, #48	; 0x30
 8028898:	2b09      	cmp	r3, #9
 802889a:	d969      	bls.n	8028970 <_vfiprintf_r+0x1a0>
 802889c:	b360      	cbz	r0, 80288f8 <_vfiprintf_r+0x128>
 802889e:	e024      	b.n	80288ea <_vfiprintf_r+0x11a>
 80288a0:	4b50      	ldr	r3, [pc, #320]	; (80289e4 <_vfiprintf_r+0x214>)
 80288a2:	429c      	cmp	r4, r3
 80288a4:	d101      	bne.n	80288aa <_vfiprintf_r+0xda>
 80288a6:	68b4      	ldr	r4, [r6, #8]
 80288a8:	e7a2      	b.n	80287f0 <_vfiprintf_r+0x20>
 80288aa:	4b4f      	ldr	r3, [pc, #316]	; (80289e8 <_vfiprintf_r+0x218>)
 80288ac:	429c      	cmp	r4, r3
 80288ae:	bf08      	it	eq
 80288b0:	68f4      	ldreq	r4, [r6, #12]
 80288b2:	e79d      	b.n	80287f0 <_vfiprintf_r+0x20>
 80288b4:	4621      	mov	r1, r4
 80288b6:	4630      	mov	r0, r6
 80288b8:	f001 ff36 	bl	802a728 <__swsetup_r>
 80288bc:	2800      	cmp	r0, #0
 80288be:	d09d      	beq.n	80287fc <_vfiprintf_r+0x2c>
 80288c0:	f04f 30ff 	mov.w	r0, #4294967295
 80288c4:	b01d      	add	sp, #116	; 0x74
 80288c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80288ca:	46a8      	mov	r8, r5
 80288cc:	e7a2      	b.n	8028814 <_vfiprintf_r+0x44>
 80288ce:	4a44      	ldr	r2, [pc, #272]	; (80289e0 <_vfiprintf_r+0x210>)
 80288d0:	1a80      	subs	r0, r0, r2
 80288d2:	fa0b f000 	lsl.w	r0, fp, r0
 80288d6:	4318      	orrs	r0, r3
 80288d8:	9004      	str	r0, [sp, #16]
 80288da:	4645      	mov	r5, r8
 80288dc:	e7be      	b.n	802885c <_vfiprintf_r+0x8c>
 80288de:	9a03      	ldr	r2, [sp, #12]
 80288e0:	1d11      	adds	r1, r2, #4
 80288e2:	6812      	ldr	r2, [r2, #0]
 80288e4:	9103      	str	r1, [sp, #12]
 80288e6:	2a00      	cmp	r2, #0
 80288e8:	db01      	blt.n	80288ee <_vfiprintf_r+0x11e>
 80288ea:	9207      	str	r2, [sp, #28]
 80288ec:	e004      	b.n	80288f8 <_vfiprintf_r+0x128>
 80288ee:	4252      	negs	r2, r2
 80288f0:	f043 0302 	orr.w	r3, r3, #2
 80288f4:	9207      	str	r2, [sp, #28]
 80288f6:	9304      	str	r3, [sp, #16]
 80288f8:	f898 3000 	ldrb.w	r3, [r8]
 80288fc:	2b2e      	cmp	r3, #46	; 0x2e
 80288fe:	d10e      	bne.n	802891e <_vfiprintf_r+0x14e>
 8028900:	f898 3001 	ldrb.w	r3, [r8, #1]
 8028904:	2b2a      	cmp	r3, #42	; 0x2a
 8028906:	d138      	bne.n	802897a <_vfiprintf_r+0x1aa>
 8028908:	9b03      	ldr	r3, [sp, #12]
 802890a:	1d1a      	adds	r2, r3, #4
 802890c:	681b      	ldr	r3, [r3, #0]
 802890e:	9203      	str	r2, [sp, #12]
 8028910:	2b00      	cmp	r3, #0
 8028912:	bfb8      	it	lt
 8028914:	f04f 33ff 	movlt.w	r3, #4294967295
 8028918:	f108 0802 	add.w	r8, r8, #2
 802891c:	9305      	str	r3, [sp, #20]
 802891e:	4d33      	ldr	r5, [pc, #204]	; (80289ec <_vfiprintf_r+0x21c>)
 8028920:	f898 1000 	ldrb.w	r1, [r8]
 8028924:	2203      	movs	r2, #3
 8028926:	4628      	mov	r0, r5
 8028928:	f7d7 fc62 	bl	80001f0 <memchr>
 802892c:	b140      	cbz	r0, 8028940 <_vfiprintf_r+0x170>
 802892e:	2340      	movs	r3, #64	; 0x40
 8028930:	1b40      	subs	r0, r0, r5
 8028932:	fa03 f000 	lsl.w	r0, r3, r0
 8028936:	9b04      	ldr	r3, [sp, #16]
 8028938:	4303      	orrs	r3, r0
 802893a:	f108 0801 	add.w	r8, r8, #1
 802893e:	9304      	str	r3, [sp, #16]
 8028940:	f898 1000 	ldrb.w	r1, [r8]
 8028944:	482a      	ldr	r0, [pc, #168]	; (80289f0 <_vfiprintf_r+0x220>)
 8028946:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802894a:	2206      	movs	r2, #6
 802894c:	f108 0701 	add.w	r7, r8, #1
 8028950:	f7d7 fc4e 	bl	80001f0 <memchr>
 8028954:	2800      	cmp	r0, #0
 8028956:	d037      	beq.n	80289c8 <_vfiprintf_r+0x1f8>
 8028958:	4b26      	ldr	r3, [pc, #152]	; (80289f4 <_vfiprintf_r+0x224>)
 802895a:	bb1b      	cbnz	r3, 80289a4 <_vfiprintf_r+0x1d4>
 802895c:	9b03      	ldr	r3, [sp, #12]
 802895e:	3307      	adds	r3, #7
 8028960:	f023 0307 	bic.w	r3, r3, #7
 8028964:	3308      	adds	r3, #8
 8028966:	9303      	str	r3, [sp, #12]
 8028968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802896a:	444b      	add	r3, r9
 802896c:	9309      	str	r3, [sp, #36]	; 0x24
 802896e:	e750      	b.n	8028812 <_vfiprintf_r+0x42>
 8028970:	fb05 3202 	mla	r2, r5, r2, r3
 8028974:	2001      	movs	r0, #1
 8028976:	4688      	mov	r8, r1
 8028978:	e78a      	b.n	8028890 <_vfiprintf_r+0xc0>
 802897a:	2300      	movs	r3, #0
 802897c:	f108 0801 	add.w	r8, r8, #1
 8028980:	9305      	str	r3, [sp, #20]
 8028982:	4619      	mov	r1, r3
 8028984:	250a      	movs	r5, #10
 8028986:	4640      	mov	r0, r8
 8028988:	f810 2b01 	ldrb.w	r2, [r0], #1
 802898c:	3a30      	subs	r2, #48	; 0x30
 802898e:	2a09      	cmp	r2, #9
 8028990:	d903      	bls.n	802899a <_vfiprintf_r+0x1ca>
 8028992:	2b00      	cmp	r3, #0
 8028994:	d0c3      	beq.n	802891e <_vfiprintf_r+0x14e>
 8028996:	9105      	str	r1, [sp, #20]
 8028998:	e7c1      	b.n	802891e <_vfiprintf_r+0x14e>
 802899a:	fb05 2101 	mla	r1, r5, r1, r2
 802899e:	2301      	movs	r3, #1
 80289a0:	4680      	mov	r8, r0
 80289a2:	e7f0      	b.n	8028986 <_vfiprintf_r+0x1b6>
 80289a4:	ab03      	add	r3, sp, #12
 80289a6:	9300      	str	r3, [sp, #0]
 80289a8:	4622      	mov	r2, r4
 80289aa:	4b13      	ldr	r3, [pc, #76]	; (80289f8 <_vfiprintf_r+0x228>)
 80289ac:	a904      	add	r1, sp, #16
 80289ae:	4630      	mov	r0, r6
 80289b0:	f000 f8b8 	bl	8028b24 <_printf_float>
 80289b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80289b8:	4681      	mov	r9, r0
 80289ba:	d1d5      	bne.n	8028968 <_vfiprintf_r+0x198>
 80289bc:	89a3      	ldrh	r3, [r4, #12]
 80289be:	065b      	lsls	r3, r3, #25
 80289c0:	f53f af7e 	bmi.w	80288c0 <_vfiprintf_r+0xf0>
 80289c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80289c6:	e77d      	b.n	80288c4 <_vfiprintf_r+0xf4>
 80289c8:	ab03      	add	r3, sp, #12
 80289ca:	9300      	str	r3, [sp, #0]
 80289cc:	4622      	mov	r2, r4
 80289ce:	4b0a      	ldr	r3, [pc, #40]	; (80289f8 <_vfiprintf_r+0x228>)
 80289d0:	a904      	add	r1, sp, #16
 80289d2:	4630      	mov	r0, r6
 80289d4:	f000 fb5c 	bl	8029090 <_printf_i>
 80289d8:	e7ec      	b.n	80289b4 <_vfiprintf_r+0x1e4>
 80289da:	bf00      	nop
 80289dc:	0802e6a0 	.word	0x0802e6a0
 80289e0:	0802e5d0 	.word	0x0802e5d0
 80289e4:	0802e6c0 	.word	0x0802e6c0
 80289e8:	0802e680 	.word	0x0802e680
 80289ec:	0802e5d6 	.word	0x0802e5d6
 80289f0:	0802e5da 	.word	0x0802e5da
 80289f4:	08028b25 	.word	0x08028b25
 80289f8:	080287ad 	.word	0x080287ad

080289fc <__cvt>:
 80289fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028a00:	ec55 4b10 	vmov	r4, r5, d0
 8028a04:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8028a06:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8028a0a:	2d00      	cmp	r5, #0
 8028a0c:	460e      	mov	r6, r1
 8028a0e:	4691      	mov	r9, r2
 8028a10:	4619      	mov	r1, r3
 8028a12:	bfb8      	it	lt
 8028a14:	4622      	movlt	r2, r4
 8028a16:	462b      	mov	r3, r5
 8028a18:	f027 0720 	bic.w	r7, r7, #32
 8028a1c:	bfbb      	ittet	lt
 8028a1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8028a22:	461d      	movlt	r5, r3
 8028a24:	2300      	movge	r3, #0
 8028a26:	232d      	movlt	r3, #45	; 0x2d
 8028a28:	bfb8      	it	lt
 8028a2a:	4614      	movlt	r4, r2
 8028a2c:	2f46      	cmp	r7, #70	; 0x46
 8028a2e:	700b      	strb	r3, [r1, #0]
 8028a30:	d004      	beq.n	8028a3c <__cvt+0x40>
 8028a32:	2f45      	cmp	r7, #69	; 0x45
 8028a34:	d100      	bne.n	8028a38 <__cvt+0x3c>
 8028a36:	3601      	adds	r6, #1
 8028a38:	2102      	movs	r1, #2
 8028a3a:	e000      	b.n	8028a3e <__cvt+0x42>
 8028a3c:	2103      	movs	r1, #3
 8028a3e:	ab03      	add	r3, sp, #12
 8028a40:	9301      	str	r3, [sp, #4]
 8028a42:	ab02      	add	r3, sp, #8
 8028a44:	9300      	str	r3, [sp, #0]
 8028a46:	4632      	mov	r2, r6
 8028a48:	4653      	mov	r3, sl
 8028a4a:	ec45 4b10 	vmov	d0, r4, r5
 8028a4e:	f001 ff6f 	bl	802a930 <_dtoa_r>
 8028a52:	2f47      	cmp	r7, #71	; 0x47
 8028a54:	4680      	mov	r8, r0
 8028a56:	d102      	bne.n	8028a5e <__cvt+0x62>
 8028a58:	f019 0f01 	tst.w	r9, #1
 8028a5c:	d026      	beq.n	8028aac <__cvt+0xb0>
 8028a5e:	2f46      	cmp	r7, #70	; 0x46
 8028a60:	eb08 0906 	add.w	r9, r8, r6
 8028a64:	d111      	bne.n	8028a8a <__cvt+0x8e>
 8028a66:	f898 3000 	ldrb.w	r3, [r8]
 8028a6a:	2b30      	cmp	r3, #48	; 0x30
 8028a6c:	d10a      	bne.n	8028a84 <__cvt+0x88>
 8028a6e:	2200      	movs	r2, #0
 8028a70:	2300      	movs	r3, #0
 8028a72:	4620      	mov	r0, r4
 8028a74:	4629      	mov	r1, r5
 8028a76:	f7d8 f82f 	bl	8000ad8 <__aeabi_dcmpeq>
 8028a7a:	b918      	cbnz	r0, 8028a84 <__cvt+0x88>
 8028a7c:	f1c6 0601 	rsb	r6, r6, #1
 8028a80:	f8ca 6000 	str.w	r6, [sl]
 8028a84:	f8da 3000 	ldr.w	r3, [sl]
 8028a88:	4499      	add	r9, r3
 8028a8a:	2200      	movs	r2, #0
 8028a8c:	2300      	movs	r3, #0
 8028a8e:	4620      	mov	r0, r4
 8028a90:	4629      	mov	r1, r5
 8028a92:	f7d8 f821 	bl	8000ad8 <__aeabi_dcmpeq>
 8028a96:	b938      	cbnz	r0, 8028aa8 <__cvt+0xac>
 8028a98:	2230      	movs	r2, #48	; 0x30
 8028a9a:	9b03      	ldr	r3, [sp, #12]
 8028a9c:	454b      	cmp	r3, r9
 8028a9e:	d205      	bcs.n	8028aac <__cvt+0xb0>
 8028aa0:	1c59      	adds	r1, r3, #1
 8028aa2:	9103      	str	r1, [sp, #12]
 8028aa4:	701a      	strb	r2, [r3, #0]
 8028aa6:	e7f8      	b.n	8028a9a <__cvt+0x9e>
 8028aa8:	f8cd 900c 	str.w	r9, [sp, #12]
 8028aac:	9b03      	ldr	r3, [sp, #12]
 8028aae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028ab0:	eba3 0308 	sub.w	r3, r3, r8
 8028ab4:	4640      	mov	r0, r8
 8028ab6:	6013      	str	r3, [r2, #0]
 8028ab8:	b004      	add	sp, #16
 8028aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08028abe <__exponent>:
 8028abe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028ac0:	2900      	cmp	r1, #0
 8028ac2:	4604      	mov	r4, r0
 8028ac4:	bfba      	itte	lt
 8028ac6:	4249      	neglt	r1, r1
 8028ac8:	232d      	movlt	r3, #45	; 0x2d
 8028aca:	232b      	movge	r3, #43	; 0x2b
 8028acc:	2909      	cmp	r1, #9
 8028ace:	f804 2b02 	strb.w	r2, [r4], #2
 8028ad2:	7043      	strb	r3, [r0, #1]
 8028ad4:	dd20      	ble.n	8028b18 <__exponent+0x5a>
 8028ad6:	f10d 0307 	add.w	r3, sp, #7
 8028ada:	461f      	mov	r7, r3
 8028adc:	260a      	movs	r6, #10
 8028ade:	fb91 f5f6 	sdiv	r5, r1, r6
 8028ae2:	fb06 1115 	mls	r1, r6, r5, r1
 8028ae6:	3130      	adds	r1, #48	; 0x30
 8028ae8:	2d09      	cmp	r5, #9
 8028aea:	f803 1c01 	strb.w	r1, [r3, #-1]
 8028aee:	f103 32ff 	add.w	r2, r3, #4294967295
 8028af2:	4629      	mov	r1, r5
 8028af4:	dc09      	bgt.n	8028b0a <__exponent+0x4c>
 8028af6:	3130      	adds	r1, #48	; 0x30
 8028af8:	3b02      	subs	r3, #2
 8028afa:	f802 1c01 	strb.w	r1, [r2, #-1]
 8028afe:	42bb      	cmp	r3, r7
 8028b00:	4622      	mov	r2, r4
 8028b02:	d304      	bcc.n	8028b0e <__exponent+0x50>
 8028b04:	1a10      	subs	r0, r2, r0
 8028b06:	b003      	add	sp, #12
 8028b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028b0a:	4613      	mov	r3, r2
 8028b0c:	e7e7      	b.n	8028ade <__exponent+0x20>
 8028b0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028b12:	f804 2b01 	strb.w	r2, [r4], #1
 8028b16:	e7f2      	b.n	8028afe <__exponent+0x40>
 8028b18:	2330      	movs	r3, #48	; 0x30
 8028b1a:	4419      	add	r1, r3
 8028b1c:	7083      	strb	r3, [r0, #2]
 8028b1e:	1d02      	adds	r2, r0, #4
 8028b20:	70c1      	strb	r1, [r0, #3]
 8028b22:	e7ef      	b.n	8028b04 <__exponent+0x46>

08028b24 <_printf_float>:
 8028b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b28:	b08d      	sub	sp, #52	; 0x34
 8028b2a:	460c      	mov	r4, r1
 8028b2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8028b30:	4616      	mov	r6, r2
 8028b32:	461f      	mov	r7, r3
 8028b34:	4605      	mov	r5, r0
 8028b36:	f003 f959 	bl	802bdec <_localeconv_r>
 8028b3a:	6803      	ldr	r3, [r0, #0]
 8028b3c:	9304      	str	r3, [sp, #16]
 8028b3e:	4618      	mov	r0, r3
 8028b40:	f7d7 fb4e 	bl	80001e0 <strlen>
 8028b44:	2300      	movs	r3, #0
 8028b46:	930a      	str	r3, [sp, #40]	; 0x28
 8028b48:	f8d8 3000 	ldr.w	r3, [r8]
 8028b4c:	9005      	str	r0, [sp, #20]
 8028b4e:	3307      	adds	r3, #7
 8028b50:	f023 0307 	bic.w	r3, r3, #7
 8028b54:	f103 0208 	add.w	r2, r3, #8
 8028b58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8028b5c:	f8d4 b000 	ldr.w	fp, [r4]
 8028b60:	f8c8 2000 	str.w	r2, [r8]
 8028b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028b68:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8028b6c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8028b70:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8028b74:	9307      	str	r3, [sp, #28]
 8028b76:	f8cd 8018 	str.w	r8, [sp, #24]
 8028b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8028b7e:	4ba7      	ldr	r3, [pc, #668]	; (8028e1c <_printf_float+0x2f8>)
 8028b80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8028b84:	f7d7 ffda 	bl	8000b3c <__aeabi_dcmpun>
 8028b88:	bb70      	cbnz	r0, 8028be8 <_printf_float+0xc4>
 8028b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8028b8e:	4ba3      	ldr	r3, [pc, #652]	; (8028e1c <_printf_float+0x2f8>)
 8028b90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8028b94:	f7d7 ffb4 	bl	8000b00 <__aeabi_dcmple>
 8028b98:	bb30      	cbnz	r0, 8028be8 <_printf_float+0xc4>
 8028b9a:	2200      	movs	r2, #0
 8028b9c:	2300      	movs	r3, #0
 8028b9e:	4640      	mov	r0, r8
 8028ba0:	4649      	mov	r1, r9
 8028ba2:	f7d7 ffa3 	bl	8000aec <__aeabi_dcmplt>
 8028ba6:	b110      	cbz	r0, 8028bae <_printf_float+0x8a>
 8028ba8:	232d      	movs	r3, #45	; 0x2d
 8028baa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028bae:	4a9c      	ldr	r2, [pc, #624]	; (8028e20 <_printf_float+0x2fc>)
 8028bb0:	4b9c      	ldr	r3, [pc, #624]	; (8028e24 <_printf_float+0x300>)
 8028bb2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8028bb6:	bf8c      	ite	hi
 8028bb8:	4690      	movhi	r8, r2
 8028bba:	4698      	movls	r8, r3
 8028bbc:	2303      	movs	r3, #3
 8028bbe:	f02b 0204 	bic.w	r2, fp, #4
 8028bc2:	6123      	str	r3, [r4, #16]
 8028bc4:	6022      	str	r2, [r4, #0]
 8028bc6:	f04f 0900 	mov.w	r9, #0
 8028bca:	9700      	str	r7, [sp, #0]
 8028bcc:	4633      	mov	r3, r6
 8028bce:	aa0b      	add	r2, sp, #44	; 0x2c
 8028bd0:	4621      	mov	r1, r4
 8028bd2:	4628      	mov	r0, r5
 8028bd4:	f000 f9e6 	bl	8028fa4 <_printf_common>
 8028bd8:	3001      	adds	r0, #1
 8028bda:	f040 808d 	bne.w	8028cf8 <_printf_float+0x1d4>
 8028bde:	f04f 30ff 	mov.w	r0, #4294967295
 8028be2:	b00d      	add	sp, #52	; 0x34
 8028be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028be8:	4642      	mov	r2, r8
 8028bea:	464b      	mov	r3, r9
 8028bec:	4640      	mov	r0, r8
 8028bee:	4649      	mov	r1, r9
 8028bf0:	f7d7 ffa4 	bl	8000b3c <__aeabi_dcmpun>
 8028bf4:	b110      	cbz	r0, 8028bfc <_printf_float+0xd8>
 8028bf6:	4a8c      	ldr	r2, [pc, #560]	; (8028e28 <_printf_float+0x304>)
 8028bf8:	4b8c      	ldr	r3, [pc, #560]	; (8028e2c <_printf_float+0x308>)
 8028bfa:	e7da      	b.n	8028bb2 <_printf_float+0x8e>
 8028bfc:	6861      	ldr	r1, [r4, #4]
 8028bfe:	1c4b      	adds	r3, r1, #1
 8028c00:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8028c04:	a80a      	add	r0, sp, #40	; 0x28
 8028c06:	d13e      	bne.n	8028c86 <_printf_float+0x162>
 8028c08:	2306      	movs	r3, #6
 8028c0a:	6063      	str	r3, [r4, #4]
 8028c0c:	2300      	movs	r3, #0
 8028c0e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8028c12:	ab09      	add	r3, sp, #36	; 0x24
 8028c14:	9300      	str	r3, [sp, #0]
 8028c16:	ec49 8b10 	vmov	d0, r8, r9
 8028c1a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8028c1e:	6022      	str	r2, [r4, #0]
 8028c20:	f8cd a004 	str.w	sl, [sp, #4]
 8028c24:	6861      	ldr	r1, [r4, #4]
 8028c26:	4628      	mov	r0, r5
 8028c28:	f7ff fee8 	bl	80289fc <__cvt>
 8028c2c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8028c30:	2b47      	cmp	r3, #71	; 0x47
 8028c32:	4680      	mov	r8, r0
 8028c34:	d109      	bne.n	8028c4a <_printf_float+0x126>
 8028c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028c38:	1cd8      	adds	r0, r3, #3
 8028c3a:	db02      	blt.n	8028c42 <_printf_float+0x11e>
 8028c3c:	6862      	ldr	r2, [r4, #4]
 8028c3e:	4293      	cmp	r3, r2
 8028c40:	dd47      	ble.n	8028cd2 <_printf_float+0x1ae>
 8028c42:	f1aa 0a02 	sub.w	sl, sl, #2
 8028c46:	fa5f fa8a 	uxtb.w	sl, sl
 8028c4a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8028c4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028c50:	d824      	bhi.n	8028c9c <_printf_float+0x178>
 8028c52:	3901      	subs	r1, #1
 8028c54:	4652      	mov	r2, sl
 8028c56:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8028c5a:	9109      	str	r1, [sp, #36]	; 0x24
 8028c5c:	f7ff ff2f 	bl	8028abe <__exponent>
 8028c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028c62:	1813      	adds	r3, r2, r0
 8028c64:	2a01      	cmp	r2, #1
 8028c66:	4681      	mov	r9, r0
 8028c68:	6123      	str	r3, [r4, #16]
 8028c6a:	dc02      	bgt.n	8028c72 <_printf_float+0x14e>
 8028c6c:	6822      	ldr	r2, [r4, #0]
 8028c6e:	07d1      	lsls	r1, r2, #31
 8028c70:	d501      	bpl.n	8028c76 <_printf_float+0x152>
 8028c72:	3301      	adds	r3, #1
 8028c74:	6123      	str	r3, [r4, #16]
 8028c76:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8028c7a:	2b00      	cmp	r3, #0
 8028c7c:	d0a5      	beq.n	8028bca <_printf_float+0xa6>
 8028c7e:	232d      	movs	r3, #45	; 0x2d
 8028c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028c84:	e7a1      	b.n	8028bca <_printf_float+0xa6>
 8028c86:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8028c8a:	f000 8177 	beq.w	8028f7c <_printf_float+0x458>
 8028c8e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8028c92:	d1bb      	bne.n	8028c0c <_printf_float+0xe8>
 8028c94:	2900      	cmp	r1, #0
 8028c96:	d1b9      	bne.n	8028c0c <_printf_float+0xe8>
 8028c98:	2301      	movs	r3, #1
 8028c9a:	e7b6      	b.n	8028c0a <_printf_float+0xe6>
 8028c9c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8028ca0:	d119      	bne.n	8028cd6 <_printf_float+0x1b2>
 8028ca2:	2900      	cmp	r1, #0
 8028ca4:	6863      	ldr	r3, [r4, #4]
 8028ca6:	dd0c      	ble.n	8028cc2 <_printf_float+0x19e>
 8028ca8:	6121      	str	r1, [r4, #16]
 8028caa:	b913      	cbnz	r3, 8028cb2 <_printf_float+0x18e>
 8028cac:	6822      	ldr	r2, [r4, #0]
 8028cae:	07d2      	lsls	r2, r2, #31
 8028cb0:	d502      	bpl.n	8028cb8 <_printf_float+0x194>
 8028cb2:	3301      	adds	r3, #1
 8028cb4:	440b      	add	r3, r1
 8028cb6:	6123      	str	r3, [r4, #16]
 8028cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028cba:	65a3      	str	r3, [r4, #88]	; 0x58
 8028cbc:	f04f 0900 	mov.w	r9, #0
 8028cc0:	e7d9      	b.n	8028c76 <_printf_float+0x152>
 8028cc2:	b913      	cbnz	r3, 8028cca <_printf_float+0x1a6>
 8028cc4:	6822      	ldr	r2, [r4, #0]
 8028cc6:	07d0      	lsls	r0, r2, #31
 8028cc8:	d501      	bpl.n	8028cce <_printf_float+0x1aa>
 8028cca:	3302      	adds	r3, #2
 8028ccc:	e7f3      	b.n	8028cb6 <_printf_float+0x192>
 8028cce:	2301      	movs	r3, #1
 8028cd0:	e7f1      	b.n	8028cb6 <_printf_float+0x192>
 8028cd2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8028cd6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8028cda:	4293      	cmp	r3, r2
 8028cdc:	db05      	blt.n	8028cea <_printf_float+0x1c6>
 8028cde:	6822      	ldr	r2, [r4, #0]
 8028ce0:	6123      	str	r3, [r4, #16]
 8028ce2:	07d1      	lsls	r1, r2, #31
 8028ce4:	d5e8      	bpl.n	8028cb8 <_printf_float+0x194>
 8028ce6:	3301      	adds	r3, #1
 8028ce8:	e7e5      	b.n	8028cb6 <_printf_float+0x192>
 8028cea:	2b00      	cmp	r3, #0
 8028cec:	bfd4      	ite	le
 8028cee:	f1c3 0302 	rsble	r3, r3, #2
 8028cf2:	2301      	movgt	r3, #1
 8028cf4:	4413      	add	r3, r2
 8028cf6:	e7de      	b.n	8028cb6 <_printf_float+0x192>
 8028cf8:	6823      	ldr	r3, [r4, #0]
 8028cfa:	055a      	lsls	r2, r3, #21
 8028cfc:	d407      	bmi.n	8028d0e <_printf_float+0x1ea>
 8028cfe:	6923      	ldr	r3, [r4, #16]
 8028d00:	4642      	mov	r2, r8
 8028d02:	4631      	mov	r1, r6
 8028d04:	4628      	mov	r0, r5
 8028d06:	47b8      	blx	r7
 8028d08:	3001      	adds	r0, #1
 8028d0a:	d12b      	bne.n	8028d64 <_printf_float+0x240>
 8028d0c:	e767      	b.n	8028bde <_printf_float+0xba>
 8028d0e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8028d12:	f240 80dc 	bls.w	8028ece <_printf_float+0x3aa>
 8028d16:	2200      	movs	r2, #0
 8028d18:	2300      	movs	r3, #0
 8028d1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8028d1e:	f7d7 fedb 	bl	8000ad8 <__aeabi_dcmpeq>
 8028d22:	2800      	cmp	r0, #0
 8028d24:	d033      	beq.n	8028d8e <_printf_float+0x26a>
 8028d26:	2301      	movs	r3, #1
 8028d28:	4a41      	ldr	r2, [pc, #260]	; (8028e30 <_printf_float+0x30c>)
 8028d2a:	4631      	mov	r1, r6
 8028d2c:	4628      	mov	r0, r5
 8028d2e:	47b8      	blx	r7
 8028d30:	3001      	adds	r0, #1
 8028d32:	f43f af54 	beq.w	8028bde <_printf_float+0xba>
 8028d36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8028d3a:	429a      	cmp	r2, r3
 8028d3c:	db02      	blt.n	8028d44 <_printf_float+0x220>
 8028d3e:	6823      	ldr	r3, [r4, #0]
 8028d40:	07d8      	lsls	r0, r3, #31
 8028d42:	d50f      	bpl.n	8028d64 <_printf_float+0x240>
 8028d44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8028d48:	4631      	mov	r1, r6
 8028d4a:	4628      	mov	r0, r5
 8028d4c:	47b8      	blx	r7
 8028d4e:	3001      	adds	r0, #1
 8028d50:	f43f af45 	beq.w	8028bde <_printf_float+0xba>
 8028d54:	f04f 0800 	mov.w	r8, #0
 8028d58:	f104 091a 	add.w	r9, r4, #26
 8028d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028d5e:	3b01      	subs	r3, #1
 8028d60:	4543      	cmp	r3, r8
 8028d62:	dc09      	bgt.n	8028d78 <_printf_float+0x254>
 8028d64:	6823      	ldr	r3, [r4, #0]
 8028d66:	079b      	lsls	r3, r3, #30
 8028d68:	f100 8103 	bmi.w	8028f72 <_printf_float+0x44e>
 8028d6c:	68e0      	ldr	r0, [r4, #12]
 8028d6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028d70:	4298      	cmp	r0, r3
 8028d72:	bfb8      	it	lt
 8028d74:	4618      	movlt	r0, r3
 8028d76:	e734      	b.n	8028be2 <_printf_float+0xbe>
 8028d78:	2301      	movs	r3, #1
 8028d7a:	464a      	mov	r2, r9
 8028d7c:	4631      	mov	r1, r6
 8028d7e:	4628      	mov	r0, r5
 8028d80:	47b8      	blx	r7
 8028d82:	3001      	adds	r0, #1
 8028d84:	f43f af2b 	beq.w	8028bde <_printf_float+0xba>
 8028d88:	f108 0801 	add.w	r8, r8, #1
 8028d8c:	e7e6      	b.n	8028d5c <_printf_float+0x238>
 8028d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028d90:	2b00      	cmp	r3, #0
 8028d92:	dc2b      	bgt.n	8028dec <_printf_float+0x2c8>
 8028d94:	2301      	movs	r3, #1
 8028d96:	4a26      	ldr	r2, [pc, #152]	; (8028e30 <_printf_float+0x30c>)
 8028d98:	4631      	mov	r1, r6
 8028d9a:	4628      	mov	r0, r5
 8028d9c:	47b8      	blx	r7
 8028d9e:	3001      	adds	r0, #1
 8028da0:	f43f af1d 	beq.w	8028bde <_printf_float+0xba>
 8028da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028da6:	b923      	cbnz	r3, 8028db2 <_printf_float+0x28e>
 8028da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028daa:	b913      	cbnz	r3, 8028db2 <_printf_float+0x28e>
 8028dac:	6823      	ldr	r3, [r4, #0]
 8028dae:	07d9      	lsls	r1, r3, #31
 8028db0:	d5d8      	bpl.n	8028d64 <_printf_float+0x240>
 8028db2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8028db6:	4631      	mov	r1, r6
 8028db8:	4628      	mov	r0, r5
 8028dba:	47b8      	blx	r7
 8028dbc:	3001      	adds	r0, #1
 8028dbe:	f43f af0e 	beq.w	8028bde <_printf_float+0xba>
 8028dc2:	f04f 0900 	mov.w	r9, #0
 8028dc6:	f104 0a1a 	add.w	sl, r4, #26
 8028dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028dcc:	425b      	negs	r3, r3
 8028dce:	454b      	cmp	r3, r9
 8028dd0:	dc01      	bgt.n	8028dd6 <_printf_float+0x2b2>
 8028dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028dd4:	e794      	b.n	8028d00 <_printf_float+0x1dc>
 8028dd6:	2301      	movs	r3, #1
 8028dd8:	4652      	mov	r2, sl
 8028dda:	4631      	mov	r1, r6
 8028ddc:	4628      	mov	r0, r5
 8028dde:	47b8      	blx	r7
 8028de0:	3001      	adds	r0, #1
 8028de2:	f43f aefc 	beq.w	8028bde <_printf_float+0xba>
 8028de6:	f109 0901 	add.w	r9, r9, #1
 8028dea:	e7ee      	b.n	8028dca <_printf_float+0x2a6>
 8028dec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028dee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8028df0:	429a      	cmp	r2, r3
 8028df2:	bfa8      	it	ge
 8028df4:	461a      	movge	r2, r3
 8028df6:	2a00      	cmp	r2, #0
 8028df8:	4691      	mov	r9, r2
 8028dfa:	dd07      	ble.n	8028e0c <_printf_float+0x2e8>
 8028dfc:	4613      	mov	r3, r2
 8028dfe:	4631      	mov	r1, r6
 8028e00:	4642      	mov	r2, r8
 8028e02:	4628      	mov	r0, r5
 8028e04:	47b8      	blx	r7
 8028e06:	3001      	adds	r0, #1
 8028e08:	f43f aee9 	beq.w	8028bde <_printf_float+0xba>
 8028e0c:	f104 031a 	add.w	r3, r4, #26
 8028e10:	f04f 0b00 	mov.w	fp, #0
 8028e14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8028e18:	9306      	str	r3, [sp, #24]
 8028e1a:	e015      	b.n	8028e48 <_printf_float+0x324>
 8028e1c:	7fefffff 	.word	0x7fefffff
 8028e20:	0802e5e5 	.word	0x0802e5e5
 8028e24:	0802e5e1 	.word	0x0802e5e1
 8028e28:	0802e5ed 	.word	0x0802e5ed
 8028e2c:	0802e5e9 	.word	0x0802e5e9
 8028e30:	0802e5f1 	.word	0x0802e5f1
 8028e34:	2301      	movs	r3, #1
 8028e36:	9a06      	ldr	r2, [sp, #24]
 8028e38:	4631      	mov	r1, r6
 8028e3a:	4628      	mov	r0, r5
 8028e3c:	47b8      	blx	r7
 8028e3e:	3001      	adds	r0, #1
 8028e40:	f43f aecd 	beq.w	8028bde <_printf_float+0xba>
 8028e44:	f10b 0b01 	add.w	fp, fp, #1
 8028e48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8028e4c:	ebaa 0309 	sub.w	r3, sl, r9
 8028e50:	455b      	cmp	r3, fp
 8028e52:	dcef      	bgt.n	8028e34 <_printf_float+0x310>
 8028e54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8028e58:	429a      	cmp	r2, r3
 8028e5a:	44d0      	add	r8, sl
 8028e5c:	db15      	blt.n	8028e8a <_printf_float+0x366>
 8028e5e:	6823      	ldr	r3, [r4, #0]
 8028e60:	07da      	lsls	r2, r3, #31
 8028e62:	d412      	bmi.n	8028e8a <_printf_float+0x366>
 8028e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028e66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028e68:	eba3 020a 	sub.w	r2, r3, sl
 8028e6c:	eba3 0a01 	sub.w	sl, r3, r1
 8028e70:	4592      	cmp	sl, r2
 8028e72:	bfa8      	it	ge
 8028e74:	4692      	movge	sl, r2
 8028e76:	f1ba 0f00 	cmp.w	sl, #0
 8028e7a:	dc0e      	bgt.n	8028e9a <_printf_float+0x376>
 8028e7c:	f04f 0800 	mov.w	r8, #0
 8028e80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8028e84:	f104 091a 	add.w	r9, r4, #26
 8028e88:	e019      	b.n	8028ebe <_printf_float+0x39a>
 8028e8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8028e8e:	4631      	mov	r1, r6
 8028e90:	4628      	mov	r0, r5
 8028e92:	47b8      	blx	r7
 8028e94:	3001      	adds	r0, #1
 8028e96:	d1e5      	bne.n	8028e64 <_printf_float+0x340>
 8028e98:	e6a1      	b.n	8028bde <_printf_float+0xba>
 8028e9a:	4653      	mov	r3, sl
 8028e9c:	4642      	mov	r2, r8
 8028e9e:	4631      	mov	r1, r6
 8028ea0:	4628      	mov	r0, r5
 8028ea2:	47b8      	blx	r7
 8028ea4:	3001      	adds	r0, #1
 8028ea6:	d1e9      	bne.n	8028e7c <_printf_float+0x358>
 8028ea8:	e699      	b.n	8028bde <_printf_float+0xba>
 8028eaa:	2301      	movs	r3, #1
 8028eac:	464a      	mov	r2, r9
 8028eae:	4631      	mov	r1, r6
 8028eb0:	4628      	mov	r0, r5
 8028eb2:	47b8      	blx	r7
 8028eb4:	3001      	adds	r0, #1
 8028eb6:	f43f ae92 	beq.w	8028bde <_printf_float+0xba>
 8028eba:	f108 0801 	add.w	r8, r8, #1
 8028ebe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8028ec2:	1a9b      	subs	r3, r3, r2
 8028ec4:	eba3 030a 	sub.w	r3, r3, sl
 8028ec8:	4543      	cmp	r3, r8
 8028eca:	dcee      	bgt.n	8028eaa <_printf_float+0x386>
 8028ecc:	e74a      	b.n	8028d64 <_printf_float+0x240>
 8028ece:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028ed0:	2a01      	cmp	r2, #1
 8028ed2:	dc01      	bgt.n	8028ed8 <_printf_float+0x3b4>
 8028ed4:	07db      	lsls	r3, r3, #31
 8028ed6:	d53a      	bpl.n	8028f4e <_printf_float+0x42a>
 8028ed8:	2301      	movs	r3, #1
 8028eda:	4642      	mov	r2, r8
 8028edc:	4631      	mov	r1, r6
 8028ede:	4628      	mov	r0, r5
 8028ee0:	47b8      	blx	r7
 8028ee2:	3001      	adds	r0, #1
 8028ee4:	f43f ae7b 	beq.w	8028bde <_printf_float+0xba>
 8028ee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8028eec:	4631      	mov	r1, r6
 8028eee:	4628      	mov	r0, r5
 8028ef0:	47b8      	blx	r7
 8028ef2:	3001      	adds	r0, #1
 8028ef4:	f108 0801 	add.w	r8, r8, #1
 8028ef8:	f43f ae71 	beq.w	8028bde <_printf_float+0xba>
 8028efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028efe:	2200      	movs	r2, #0
 8028f00:	f103 3aff 	add.w	sl, r3, #4294967295
 8028f04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8028f08:	2300      	movs	r3, #0
 8028f0a:	f7d7 fde5 	bl	8000ad8 <__aeabi_dcmpeq>
 8028f0e:	b9c8      	cbnz	r0, 8028f44 <_printf_float+0x420>
 8028f10:	4653      	mov	r3, sl
 8028f12:	4642      	mov	r2, r8
 8028f14:	4631      	mov	r1, r6
 8028f16:	4628      	mov	r0, r5
 8028f18:	47b8      	blx	r7
 8028f1a:	3001      	adds	r0, #1
 8028f1c:	d10e      	bne.n	8028f3c <_printf_float+0x418>
 8028f1e:	e65e      	b.n	8028bde <_printf_float+0xba>
 8028f20:	2301      	movs	r3, #1
 8028f22:	4652      	mov	r2, sl
 8028f24:	4631      	mov	r1, r6
 8028f26:	4628      	mov	r0, r5
 8028f28:	47b8      	blx	r7
 8028f2a:	3001      	adds	r0, #1
 8028f2c:	f43f ae57 	beq.w	8028bde <_printf_float+0xba>
 8028f30:	f108 0801 	add.w	r8, r8, #1
 8028f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028f36:	3b01      	subs	r3, #1
 8028f38:	4543      	cmp	r3, r8
 8028f3a:	dcf1      	bgt.n	8028f20 <_printf_float+0x3fc>
 8028f3c:	464b      	mov	r3, r9
 8028f3e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8028f42:	e6de      	b.n	8028d02 <_printf_float+0x1de>
 8028f44:	f04f 0800 	mov.w	r8, #0
 8028f48:	f104 0a1a 	add.w	sl, r4, #26
 8028f4c:	e7f2      	b.n	8028f34 <_printf_float+0x410>
 8028f4e:	2301      	movs	r3, #1
 8028f50:	e7df      	b.n	8028f12 <_printf_float+0x3ee>
 8028f52:	2301      	movs	r3, #1
 8028f54:	464a      	mov	r2, r9
 8028f56:	4631      	mov	r1, r6
 8028f58:	4628      	mov	r0, r5
 8028f5a:	47b8      	blx	r7
 8028f5c:	3001      	adds	r0, #1
 8028f5e:	f43f ae3e 	beq.w	8028bde <_printf_float+0xba>
 8028f62:	f108 0801 	add.w	r8, r8, #1
 8028f66:	68e3      	ldr	r3, [r4, #12]
 8028f68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028f6a:	1a9b      	subs	r3, r3, r2
 8028f6c:	4543      	cmp	r3, r8
 8028f6e:	dcf0      	bgt.n	8028f52 <_printf_float+0x42e>
 8028f70:	e6fc      	b.n	8028d6c <_printf_float+0x248>
 8028f72:	f04f 0800 	mov.w	r8, #0
 8028f76:	f104 0919 	add.w	r9, r4, #25
 8028f7a:	e7f4      	b.n	8028f66 <_printf_float+0x442>
 8028f7c:	2900      	cmp	r1, #0
 8028f7e:	f43f ae8b 	beq.w	8028c98 <_printf_float+0x174>
 8028f82:	2300      	movs	r3, #0
 8028f84:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8028f88:	ab09      	add	r3, sp, #36	; 0x24
 8028f8a:	9300      	str	r3, [sp, #0]
 8028f8c:	ec49 8b10 	vmov	d0, r8, r9
 8028f90:	6022      	str	r2, [r4, #0]
 8028f92:	f8cd a004 	str.w	sl, [sp, #4]
 8028f96:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8028f9a:	4628      	mov	r0, r5
 8028f9c:	f7ff fd2e 	bl	80289fc <__cvt>
 8028fa0:	4680      	mov	r8, r0
 8028fa2:	e648      	b.n	8028c36 <_printf_float+0x112>

08028fa4 <_printf_common>:
 8028fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028fa8:	4691      	mov	r9, r2
 8028faa:	461f      	mov	r7, r3
 8028fac:	688a      	ldr	r2, [r1, #8]
 8028fae:	690b      	ldr	r3, [r1, #16]
 8028fb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8028fb4:	4293      	cmp	r3, r2
 8028fb6:	bfb8      	it	lt
 8028fb8:	4613      	movlt	r3, r2
 8028fba:	f8c9 3000 	str.w	r3, [r9]
 8028fbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8028fc2:	4606      	mov	r6, r0
 8028fc4:	460c      	mov	r4, r1
 8028fc6:	b112      	cbz	r2, 8028fce <_printf_common+0x2a>
 8028fc8:	3301      	adds	r3, #1
 8028fca:	f8c9 3000 	str.w	r3, [r9]
 8028fce:	6823      	ldr	r3, [r4, #0]
 8028fd0:	0699      	lsls	r1, r3, #26
 8028fd2:	bf42      	ittt	mi
 8028fd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8028fd8:	3302      	addmi	r3, #2
 8028fda:	f8c9 3000 	strmi.w	r3, [r9]
 8028fde:	6825      	ldr	r5, [r4, #0]
 8028fe0:	f015 0506 	ands.w	r5, r5, #6
 8028fe4:	d107      	bne.n	8028ff6 <_printf_common+0x52>
 8028fe6:	f104 0a19 	add.w	sl, r4, #25
 8028fea:	68e3      	ldr	r3, [r4, #12]
 8028fec:	f8d9 2000 	ldr.w	r2, [r9]
 8028ff0:	1a9b      	subs	r3, r3, r2
 8028ff2:	42ab      	cmp	r3, r5
 8028ff4:	dc28      	bgt.n	8029048 <_printf_common+0xa4>
 8028ff6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8028ffa:	6822      	ldr	r2, [r4, #0]
 8028ffc:	3300      	adds	r3, #0
 8028ffe:	bf18      	it	ne
 8029000:	2301      	movne	r3, #1
 8029002:	0692      	lsls	r2, r2, #26
 8029004:	d42d      	bmi.n	8029062 <_printf_common+0xbe>
 8029006:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802900a:	4639      	mov	r1, r7
 802900c:	4630      	mov	r0, r6
 802900e:	47c0      	blx	r8
 8029010:	3001      	adds	r0, #1
 8029012:	d020      	beq.n	8029056 <_printf_common+0xb2>
 8029014:	6823      	ldr	r3, [r4, #0]
 8029016:	68e5      	ldr	r5, [r4, #12]
 8029018:	f8d9 2000 	ldr.w	r2, [r9]
 802901c:	f003 0306 	and.w	r3, r3, #6
 8029020:	2b04      	cmp	r3, #4
 8029022:	bf08      	it	eq
 8029024:	1aad      	subeq	r5, r5, r2
 8029026:	68a3      	ldr	r3, [r4, #8]
 8029028:	6922      	ldr	r2, [r4, #16]
 802902a:	bf0c      	ite	eq
 802902c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029030:	2500      	movne	r5, #0
 8029032:	4293      	cmp	r3, r2
 8029034:	bfc4      	itt	gt
 8029036:	1a9b      	subgt	r3, r3, r2
 8029038:	18ed      	addgt	r5, r5, r3
 802903a:	f04f 0900 	mov.w	r9, #0
 802903e:	341a      	adds	r4, #26
 8029040:	454d      	cmp	r5, r9
 8029042:	d11a      	bne.n	802907a <_printf_common+0xd6>
 8029044:	2000      	movs	r0, #0
 8029046:	e008      	b.n	802905a <_printf_common+0xb6>
 8029048:	2301      	movs	r3, #1
 802904a:	4652      	mov	r2, sl
 802904c:	4639      	mov	r1, r7
 802904e:	4630      	mov	r0, r6
 8029050:	47c0      	blx	r8
 8029052:	3001      	adds	r0, #1
 8029054:	d103      	bne.n	802905e <_printf_common+0xba>
 8029056:	f04f 30ff 	mov.w	r0, #4294967295
 802905a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802905e:	3501      	adds	r5, #1
 8029060:	e7c3      	b.n	8028fea <_printf_common+0x46>
 8029062:	18e1      	adds	r1, r4, r3
 8029064:	1c5a      	adds	r2, r3, #1
 8029066:	2030      	movs	r0, #48	; 0x30
 8029068:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802906c:	4422      	add	r2, r4
 802906e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8029072:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8029076:	3302      	adds	r3, #2
 8029078:	e7c5      	b.n	8029006 <_printf_common+0x62>
 802907a:	2301      	movs	r3, #1
 802907c:	4622      	mov	r2, r4
 802907e:	4639      	mov	r1, r7
 8029080:	4630      	mov	r0, r6
 8029082:	47c0      	blx	r8
 8029084:	3001      	adds	r0, #1
 8029086:	d0e6      	beq.n	8029056 <_printf_common+0xb2>
 8029088:	f109 0901 	add.w	r9, r9, #1
 802908c:	e7d8      	b.n	8029040 <_printf_common+0x9c>
	...

08029090 <_printf_i>:
 8029090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029094:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8029098:	460c      	mov	r4, r1
 802909a:	7e09      	ldrb	r1, [r1, #24]
 802909c:	b085      	sub	sp, #20
 802909e:	296e      	cmp	r1, #110	; 0x6e
 80290a0:	4617      	mov	r7, r2
 80290a2:	4606      	mov	r6, r0
 80290a4:	4698      	mov	r8, r3
 80290a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80290a8:	f000 80b3 	beq.w	8029212 <_printf_i+0x182>
 80290ac:	d822      	bhi.n	80290f4 <_printf_i+0x64>
 80290ae:	2963      	cmp	r1, #99	; 0x63
 80290b0:	d036      	beq.n	8029120 <_printf_i+0x90>
 80290b2:	d80a      	bhi.n	80290ca <_printf_i+0x3a>
 80290b4:	2900      	cmp	r1, #0
 80290b6:	f000 80b9 	beq.w	802922c <_printf_i+0x19c>
 80290ba:	2958      	cmp	r1, #88	; 0x58
 80290bc:	f000 8083 	beq.w	80291c6 <_printf_i+0x136>
 80290c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80290c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80290c8:	e032      	b.n	8029130 <_printf_i+0xa0>
 80290ca:	2964      	cmp	r1, #100	; 0x64
 80290cc:	d001      	beq.n	80290d2 <_printf_i+0x42>
 80290ce:	2969      	cmp	r1, #105	; 0x69
 80290d0:	d1f6      	bne.n	80290c0 <_printf_i+0x30>
 80290d2:	6820      	ldr	r0, [r4, #0]
 80290d4:	6813      	ldr	r3, [r2, #0]
 80290d6:	0605      	lsls	r5, r0, #24
 80290d8:	f103 0104 	add.w	r1, r3, #4
 80290dc:	d52a      	bpl.n	8029134 <_printf_i+0xa4>
 80290de:	681b      	ldr	r3, [r3, #0]
 80290e0:	6011      	str	r1, [r2, #0]
 80290e2:	2b00      	cmp	r3, #0
 80290e4:	da03      	bge.n	80290ee <_printf_i+0x5e>
 80290e6:	222d      	movs	r2, #45	; 0x2d
 80290e8:	425b      	negs	r3, r3
 80290ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80290ee:	486f      	ldr	r0, [pc, #444]	; (80292ac <_printf_i+0x21c>)
 80290f0:	220a      	movs	r2, #10
 80290f2:	e039      	b.n	8029168 <_printf_i+0xd8>
 80290f4:	2973      	cmp	r1, #115	; 0x73
 80290f6:	f000 809d 	beq.w	8029234 <_printf_i+0x1a4>
 80290fa:	d808      	bhi.n	802910e <_printf_i+0x7e>
 80290fc:	296f      	cmp	r1, #111	; 0x6f
 80290fe:	d020      	beq.n	8029142 <_printf_i+0xb2>
 8029100:	2970      	cmp	r1, #112	; 0x70
 8029102:	d1dd      	bne.n	80290c0 <_printf_i+0x30>
 8029104:	6823      	ldr	r3, [r4, #0]
 8029106:	f043 0320 	orr.w	r3, r3, #32
 802910a:	6023      	str	r3, [r4, #0]
 802910c:	e003      	b.n	8029116 <_printf_i+0x86>
 802910e:	2975      	cmp	r1, #117	; 0x75
 8029110:	d017      	beq.n	8029142 <_printf_i+0xb2>
 8029112:	2978      	cmp	r1, #120	; 0x78
 8029114:	d1d4      	bne.n	80290c0 <_printf_i+0x30>
 8029116:	2378      	movs	r3, #120	; 0x78
 8029118:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802911c:	4864      	ldr	r0, [pc, #400]	; (80292b0 <_printf_i+0x220>)
 802911e:	e055      	b.n	80291cc <_printf_i+0x13c>
 8029120:	6813      	ldr	r3, [r2, #0]
 8029122:	1d19      	adds	r1, r3, #4
 8029124:	681b      	ldr	r3, [r3, #0]
 8029126:	6011      	str	r1, [r2, #0]
 8029128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802912c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8029130:	2301      	movs	r3, #1
 8029132:	e08c      	b.n	802924e <_printf_i+0x1be>
 8029134:	681b      	ldr	r3, [r3, #0]
 8029136:	6011      	str	r1, [r2, #0]
 8029138:	f010 0f40 	tst.w	r0, #64	; 0x40
 802913c:	bf18      	it	ne
 802913e:	b21b      	sxthne	r3, r3
 8029140:	e7cf      	b.n	80290e2 <_printf_i+0x52>
 8029142:	6813      	ldr	r3, [r2, #0]
 8029144:	6825      	ldr	r5, [r4, #0]
 8029146:	1d18      	adds	r0, r3, #4
 8029148:	6010      	str	r0, [r2, #0]
 802914a:	0628      	lsls	r0, r5, #24
 802914c:	d501      	bpl.n	8029152 <_printf_i+0xc2>
 802914e:	681b      	ldr	r3, [r3, #0]
 8029150:	e002      	b.n	8029158 <_printf_i+0xc8>
 8029152:	0668      	lsls	r0, r5, #25
 8029154:	d5fb      	bpl.n	802914e <_printf_i+0xbe>
 8029156:	881b      	ldrh	r3, [r3, #0]
 8029158:	4854      	ldr	r0, [pc, #336]	; (80292ac <_printf_i+0x21c>)
 802915a:	296f      	cmp	r1, #111	; 0x6f
 802915c:	bf14      	ite	ne
 802915e:	220a      	movne	r2, #10
 8029160:	2208      	moveq	r2, #8
 8029162:	2100      	movs	r1, #0
 8029164:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8029168:	6865      	ldr	r5, [r4, #4]
 802916a:	60a5      	str	r5, [r4, #8]
 802916c:	2d00      	cmp	r5, #0
 802916e:	f2c0 8095 	blt.w	802929c <_printf_i+0x20c>
 8029172:	6821      	ldr	r1, [r4, #0]
 8029174:	f021 0104 	bic.w	r1, r1, #4
 8029178:	6021      	str	r1, [r4, #0]
 802917a:	2b00      	cmp	r3, #0
 802917c:	d13d      	bne.n	80291fa <_printf_i+0x16a>
 802917e:	2d00      	cmp	r5, #0
 8029180:	f040 808e 	bne.w	80292a0 <_printf_i+0x210>
 8029184:	4665      	mov	r5, ip
 8029186:	2a08      	cmp	r2, #8
 8029188:	d10b      	bne.n	80291a2 <_printf_i+0x112>
 802918a:	6823      	ldr	r3, [r4, #0]
 802918c:	07db      	lsls	r3, r3, #31
 802918e:	d508      	bpl.n	80291a2 <_printf_i+0x112>
 8029190:	6923      	ldr	r3, [r4, #16]
 8029192:	6862      	ldr	r2, [r4, #4]
 8029194:	429a      	cmp	r2, r3
 8029196:	bfde      	ittt	le
 8029198:	2330      	movle	r3, #48	; 0x30
 802919a:	f805 3c01 	strble.w	r3, [r5, #-1]
 802919e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80291a2:	ebac 0305 	sub.w	r3, ip, r5
 80291a6:	6123      	str	r3, [r4, #16]
 80291a8:	f8cd 8000 	str.w	r8, [sp]
 80291ac:	463b      	mov	r3, r7
 80291ae:	aa03      	add	r2, sp, #12
 80291b0:	4621      	mov	r1, r4
 80291b2:	4630      	mov	r0, r6
 80291b4:	f7ff fef6 	bl	8028fa4 <_printf_common>
 80291b8:	3001      	adds	r0, #1
 80291ba:	d14d      	bne.n	8029258 <_printf_i+0x1c8>
 80291bc:	f04f 30ff 	mov.w	r0, #4294967295
 80291c0:	b005      	add	sp, #20
 80291c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80291c6:	4839      	ldr	r0, [pc, #228]	; (80292ac <_printf_i+0x21c>)
 80291c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80291cc:	6813      	ldr	r3, [r2, #0]
 80291ce:	6821      	ldr	r1, [r4, #0]
 80291d0:	1d1d      	adds	r5, r3, #4
 80291d2:	681b      	ldr	r3, [r3, #0]
 80291d4:	6015      	str	r5, [r2, #0]
 80291d6:	060a      	lsls	r2, r1, #24
 80291d8:	d50b      	bpl.n	80291f2 <_printf_i+0x162>
 80291da:	07ca      	lsls	r2, r1, #31
 80291dc:	bf44      	itt	mi
 80291de:	f041 0120 	orrmi.w	r1, r1, #32
 80291e2:	6021      	strmi	r1, [r4, #0]
 80291e4:	b91b      	cbnz	r3, 80291ee <_printf_i+0x15e>
 80291e6:	6822      	ldr	r2, [r4, #0]
 80291e8:	f022 0220 	bic.w	r2, r2, #32
 80291ec:	6022      	str	r2, [r4, #0]
 80291ee:	2210      	movs	r2, #16
 80291f0:	e7b7      	b.n	8029162 <_printf_i+0xd2>
 80291f2:	064d      	lsls	r5, r1, #25
 80291f4:	bf48      	it	mi
 80291f6:	b29b      	uxthmi	r3, r3
 80291f8:	e7ef      	b.n	80291da <_printf_i+0x14a>
 80291fa:	4665      	mov	r5, ip
 80291fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8029200:	fb02 3311 	mls	r3, r2, r1, r3
 8029204:	5cc3      	ldrb	r3, [r0, r3]
 8029206:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802920a:	460b      	mov	r3, r1
 802920c:	2900      	cmp	r1, #0
 802920e:	d1f5      	bne.n	80291fc <_printf_i+0x16c>
 8029210:	e7b9      	b.n	8029186 <_printf_i+0xf6>
 8029212:	6813      	ldr	r3, [r2, #0]
 8029214:	6825      	ldr	r5, [r4, #0]
 8029216:	6961      	ldr	r1, [r4, #20]
 8029218:	1d18      	adds	r0, r3, #4
 802921a:	6010      	str	r0, [r2, #0]
 802921c:	0628      	lsls	r0, r5, #24
 802921e:	681b      	ldr	r3, [r3, #0]
 8029220:	d501      	bpl.n	8029226 <_printf_i+0x196>
 8029222:	6019      	str	r1, [r3, #0]
 8029224:	e002      	b.n	802922c <_printf_i+0x19c>
 8029226:	066a      	lsls	r2, r5, #25
 8029228:	d5fb      	bpl.n	8029222 <_printf_i+0x192>
 802922a:	8019      	strh	r1, [r3, #0]
 802922c:	2300      	movs	r3, #0
 802922e:	6123      	str	r3, [r4, #16]
 8029230:	4665      	mov	r5, ip
 8029232:	e7b9      	b.n	80291a8 <_printf_i+0x118>
 8029234:	6813      	ldr	r3, [r2, #0]
 8029236:	1d19      	adds	r1, r3, #4
 8029238:	6011      	str	r1, [r2, #0]
 802923a:	681d      	ldr	r5, [r3, #0]
 802923c:	6862      	ldr	r2, [r4, #4]
 802923e:	2100      	movs	r1, #0
 8029240:	4628      	mov	r0, r5
 8029242:	f7d6 ffd5 	bl	80001f0 <memchr>
 8029246:	b108      	cbz	r0, 802924c <_printf_i+0x1bc>
 8029248:	1b40      	subs	r0, r0, r5
 802924a:	6060      	str	r0, [r4, #4]
 802924c:	6863      	ldr	r3, [r4, #4]
 802924e:	6123      	str	r3, [r4, #16]
 8029250:	2300      	movs	r3, #0
 8029252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8029256:	e7a7      	b.n	80291a8 <_printf_i+0x118>
 8029258:	6923      	ldr	r3, [r4, #16]
 802925a:	462a      	mov	r2, r5
 802925c:	4639      	mov	r1, r7
 802925e:	4630      	mov	r0, r6
 8029260:	47c0      	blx	r8
 8029262:	3001      	adds	r0, #1
 8029264:	d0aa      	beq.n	80291bc <_printf_i+0x12c>
 8029266:	6823      	ldr	r3, [r4, #0]
 8029268:	079b      	lsls	r3, r3, #30
 802926a:	d413      	bmi.n	8029294 <_printf_i+0x204>
 802926c:	68e0      	ldr	r0, [r4, #12]
 802926e:	9b03      	ldr	r3, [sp, #12]
 8029270:	4298      	cmp	r0, r3
 8029272:	bfb8      	it	lt
 8029274:	4618      	movlt	r0, r3
 8029276:	e7a3      	b.n	80291c0 <_printf_i+0x130>
 8029278:	2301      	movs	r3, #1
 802927a:	464a      	mov	r2, r9
 802927c:	4639      	mov	r1, r7
 802927e:	4630      	mov	r0, r6
 8029280:	47c0      	blx	r8
 8029282:	3001      	adds	r0, #1
 8029284:	d09a      	beq.n	80291bc <_printf_i+0x12c>
 8029286:	3501      	adds	r5, #1
 8029288:	68e3      	ldr	r3, [r4, #12]
 802928a:	9a03      	ldr	r2, [sp, #12]
 802928c:	1a9b      	subs	r3, r3, r2
 802928e:	42ab      	cmp	r3, r5
 8029290:	dcf2      	bgt.n	8029278 <_printf_i+0x1e8>
 8029292:	e7eb      	b.n	802926c <_printf_i+0x1dc>
 8029294:	2500      	movs	r5, #0
 8029296:	f104 0919 	add.w	r9, r4, #25
 802929a:	e7f5      	b.n	8029288 <_printf_i+0x1f8>
 802929c:	2b00      	cmp	r3, #0
 802929e:	d1ac      	bne.n	80291fa <_printf_i+0x16a>
 80292a0:	7803      	ldrb	r3, [r0, #0]
 80292a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80292a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80292aa:	e76c      	b.n	8029186 <_printf_i+0xf6>
 80292ac:	0802e5f3 	.word	0x0802e5f3
 80292b0:	0802e604 	.word	0x0802e604

080292b4 <_scanf_float>:
 80292b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80292b8:	469a      	mov	sl, r3
 80292ba:	688b      	ldr	r3, [r1, #8]
 80292bc:	4616      	mov	r6, r2
 80292be:	1e5a      	subs	r2, r3, #1
 80292c0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80292c4:	b087      	sub	sp, #28
 80292c6:	bf83      	ittte	hi
 80292c8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80292cc:	189b      	addhi	r3, r3, r2
 80292ce:	9301      	strhi	r3, [sp, #4]
 80292d0:	2300      	movls	r3, #0
 80292d2:	bf86      	itte	hi
 80292d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80292d8:	608b      	strhi	r3, [r1, #8]
 80292da:	9301      	strls	r3, [sp, #4]
 80292dc:	680b      	ldr	r3, [r1, #0]
 80292de:	4688      	mov	r8, r1
 80292e0:	f04f 0b00 	mov.w	fp, #0
 80292e4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80292e8:	f848 3b1c 	str.w	r3, [r8], #28
 80292ec:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80292f0:	4607      	mov	r7, r0
 80292f2:	460c      	mov	r4, r1
 80292f4:	4645      	mov	r5, r8
 80292f6:	465a      	mov	r2, fp
 80292f8:	46d9      	mov	r9, fp
 80292fa:	f8cd b008 	str.w	fp, [sp, #8]
 80292fe:	68a1      	ldr	r1, [r4, #8]
 8029300:	b181      	cbz	r1, 8029324 <_scanf_float+0x70>
 8029302:	6833      	ldr	r3, [r6, #0]
 8029304:	781b      	ldrb	r3, [r3, #0]
 8029306:	2b49      	cmp	r3, #73	; 0x49
 8029308:	d071      	beq.n	80293ee <_scanf_float+0x13a>
 802930a:	d84d      	bhi.n	80293a8 <_scanf_float+0xf4>
 802930c:	2b39      	cmp	r3, #57	; 0x39
 802930e:	d840      	bhi.n	8029392 <_scanf_float+0xde>
 8029310:	2b31      	cmp	r3, #49	; 0x31
 8029312:	f080 8088 	bcs.w	8029426 <_scanf_float+0x172>
 8029316:	2b2d      	cmp	r3, #45	; 0x2d
 8029318:	f000 8090 	beq.w	802943c <_scanf_float+0x188>
 802931c:	d815      	bhi.n	802934a <_scanf_float+0x96>
 802931e:	2b2b      	cmp	r3, #43	; 0x2b
 8029320:	f000 808c 	beq.w	802943c <_scanf_float+0x188>
 8029324:	f1b9 0f00 	cmp.w	r9, #0
 8029328:	d003      	beq.n	8029332 <_scanf_float+0x7e>
 802932a:	6823      	ldr	r3, [r4, #0]
 802932c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029330:	6023      	str	r3, [r4, #0]
 8029332:	3a01      	subs	r2, #1
 8029334:	2a01      	cmp	r2, #1
 8029336:	f200 80ea 	bhi.w	802950e <_scanf_float+0x25a>
 802933a:	4545      	cmp	r5, r8
 802933c:	f200 80dc 	bhi.w	80294f8 <_scanf_float+0x244>
 8029340:	2601      	movs	r6, #1
 8029342:	4630      	mov	r0, r6
 8029344:	b007      	add	sp, #28
 8029346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802934a:	2b2e      	cmp	r3, #46	; 0x2e
 802934c:	f000 809f 	beq.w	802948e <_scanf_float+0x1da>
 8029350:	2b30      	cmp	r3, #48	; 0x30
 8029352:	d1e7      	bne.n	8029324 <_scanf_float+0x70>
 8029354:	6820      	ldr	r0, [r4, #0]
 8029356:	f410 7f80 	tst.w	r0, #256	; 0x100
 802935a:	d064      	beq.n	8029426 <_scanf_float+0x172>
 802935c:	9b01      	ldr	r3, [sp, #4]
 802935e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8029362:	6020      	str	r0, [r4, #0]
 8029364:	f109 0901 	add.w	r9, r9, #1
 8029368:	b11b      	cbz	r3, 8029372 <_scanf_float+0xbe>
 802936a:	3b01      	subs	r3, #1
 802936c:	3101      	adds	r1, #1
 802936e:	9301      	str	r3, [sp, #4]
 8029370:	60a1      	str	r1, [r4, #8]
 8029372:	68a3      	ldr	r3, [r4, #8]
 8029374:	3b01      	subs	r3, #1
 8029376:	60a3      	str	r3, [r4, #8]
 8029378:	6923      	ldr	r3, [r4, #16]
 802937a:	3301      	adds	r3, #1
 802937c:	6123      	str	r3, [r4, #16]
 802937e:	6873      	ldr	r3, [r6, #4]
 8029380:	3b01      	subs	r3, #1
 8029382:	2b00      	cmp	r3, #0
 8029384:	6073      	str	r3, [r6, #4]
 8029386:	f340 80ac 	ble.w	80294e2 <_scanf_float+0x22e>
 802938a:	6833      	ldr	r3, [r6, #0]
 802938c:	3301      	adds	r3, #1
 802938e:	6033      	str	r3, [r6, #0]
 8029390:	e7b5      	b.n	80292fe <_scanf_float+0x4a>
 8029392:	2b45      	cmp	r3, #69	; 0x45
 8029394:	f000 8085 	beq.w	80294a2 <_scanf_float+0x1ee>
 8029398:	2b46      	cmp	r3, #70	; 0x46
 802939a:	d06a      	beq.n	8029472 <_scanf_float+0x1be>
 802939c:	2b41      	cmp	r3, #65	; 0x41
 802939e:	d1c1      	bne.n	8029324 <_scanf_float+0x70>
 80293a0:	2a01      	cmp	r2, #1
 80293a2:	d1bf      	bne.n	8029324 <_scanf_float+0x70>
 80293a4:	2202      	movs	r2, #2
 80293a6:	e046      	b.n	8029436 <_scanf_float+0x182>
 80293a8:	2b65      	cmp	r3, #101	; 0x65
 80293aa:	d07a      	beq.n	80294a2 <_scanf_float+0x1ee>
 80293ac:	d818      	bhi.n	80293e0 <_scanf_float+0x12c>
 80293ae:	2b54      	cmp	r3, #84	; 0x54
 80293b0:	d066      	beq.n	8029480 <_scanf_float+0x1cc>
 80293b2:	d811      	bhi.n	80293d8 <_scanf_float+0x124>
 80293b4:	2b4e      	cmp	r3, #78	; 0x4e
 80293b6:	d1b5      	bne.n	8029324 <_scanf_float+0x70>
 80293b8:	2a00      	cmp	r2, #0
 80293ba:	d146      	bne.n	802944a <_scanf_float+0x196>
 80293bc:	f1b9 0f00 	cmp.w	r9, #0
 80293c0:	d145      	bne.n	802944e <_scanf_float+0x19a>
 80293c2:	6821      	ldr	r1, [r4, #0]
 80293c4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80293c8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80293cc:	d13f      	bne.n	802944e <_scanf_float+0x19a>
 80293ce:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80293d2:	6021      	str	r1, [r4, #0]
 80293d4:	2201      	movs	r2, #1
 80293d6:	e02e      	b.n	8029436 <_scanf_float+0x182>
 80293d8:	2b59      	cmp	r3, #89	; 0x59
 80293da:	d01e      	beq.n	802941a <_scanf_float+0x166>
 80293dc:	2b61      	cmp	r3, #97	; 0x61
 80293de:	e7de      	b.n	802939e <_scanf_float+0xea>
 80293e0:	2b6e      	cmp	r3, #110	; 0x6e
 80293e2:	d0e9      	beq.n	80293b8 <_scanf_float+0x104>
 80293e4:	d815      	bhi.n	8029412 <_scanf_float+0x15e>
 80293e6:	2b66      	cmp	r3, #102	; 0x66
 80293e8:	d043      	beq.n	8029472 <_scanf_float+0x1be>
 80293ea:	2b69      	cmp	r3, #105	; 0x69
 80293ec:	d19a      	bne.n	8029324 <_scanf_float+0x70>
 80293ee:	f1bb 0f00 	cmp.w	fp, #0
 80293f2:	d138      	bne.n	8029466 <_scanf_float+0x1b2>
 80293f4:	f1b9 0f00 	cmp.w	r9, #0
 80293f8:	d197      	bne.n	802932a <_scanf_float+0x76>
 80293fa:	6821      	ldr	r1, [r4, #0]
 80293fc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8029400:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8029404:	d195      	bne.n	8029332 <_scanf_float+0x7e>
 8029406:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 802940a:	6021      	str	r1, [r4, #0]
 802940c:	f04f 0b01 	mov.w	fp, #1
 8029410:	e011      	b.n	8029436 <_scanf_float+0x182>
 8029412:	2b74      	cmp	r3, #116	; 0x74
 8029414:	d034      	beq.n	8029480 <_scanf_float+0x1cc>
 8029416:	2b79      	cmp	r3, #121	; 0x79
 8029418:	d184      	bne.n	8029324 <_scanf_float+0x70>
 802941a:	f1bb 0f07 	cmp.w	fp, #7
 802941e:	d181      	bne.n	8029324 <_scanf_float+0x70>
 8029420:	f04f 0b08 	mov.w	fp, #8
 8029424:	e007      	b.n	8029436 <_scanf_float+0x182>
 8029426:	eb12 0f0b 	cmn.w	r2, fp
 802942a:	f47f af7b 	bne.w	8029324 <_scanf_float+0x70>
 802942e:	6821      	ldr	r1, [r4, #0]
 8029430:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8029434:	6021      	str	r1, [r4, #0]
 8029436:	702b      	strb	r3, [r5, #0]
 8029438:	3501      	adds	r5, #1
 802943a:	e79a      	b.n	8029372 <_scanf_float+0xbe>
 802943c:	6821      	ldr	r1, [r4, #0]
 802943e:	0608      	lsls	r0, r1, #24
 8029440:	f57f af70 	bpl.w	8029324 <_scanf_float+0x70>
 8029444:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8029448:	e7f4      	b.n	8029434 <_scanf_float+0x180>
 802944a:	2a02      	cmp	r2, #2
 802944c:	d047      	beq.n	80294de <_scanf_float+0x22a>
 802944e:	f1bb 0f01 	cmp.w	fp, #1
 8029452:	d003      	beq.n	802945c <_scanf_float+0x1a8>
 8029454:	f1bb 0f04 	cmp.w	fp, #4
 8029458:	f47f af64 	bne.w	8029324 <_scanf_float+0x70>
 802945c:	f10b 0b01 	add.w	fp, fp, #1
 8029460:	fa5f fb8b 	uxtb.w	fp, fp
 8029464:	e7e7      	b.n	8029436 <_scanf_float+0x182>
 8029466:	f1bb 0f03 	cmp.w	fp, #3
 802946a:	d0f7      	beq.n	802945c <_scanf_float+0x1a8>
 802946c:	f1bb 0f05 	cmp.w	fp, #5
 8029470:	e7f2      	b.n	8029458 <_scanf_float+0x1a4>
 8029472:	f1bb 0f02 	cmp.w	fp, #2
 8029476:	f47f af55 	bne.w	8029324 <_scanf_float+0x70>
 802947a:	f04f 0b03 	mov.w	fp, #3
 802947e:	e7da      	b.n	8029436 <_scanf_float+0x182>
 8029480:	f1bb 0f06 	cmp.w	fp, #6
 8029484:	f47f af4e 	bne.w	8029324 <_scanf_float+0x70>
 8029488:	f04f 0b07 	mov.w	fp, #7
 802948c:	e7d3      	b.n	8029436 <_scanf_float+0x182>
 802948e:	6821      	ldr	r1, [r4, #0]
 8029490:	0588      	lsls	r0, r1, #22
 8029492:	f57f af47 	bpl.w	8029324 <_scanf_float+0x70>
 8029496:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 802949a:	6021      	str	r1, [r4, #0]
 802949c:	f8cd 9008 	str.w	r9, [sp, #8]
 80294a0:	e7c9      	b.n	8029436 <_scanf_float+0x182>
 80294a2:	6821      	ldr	r1, [r4, #0]
 80294a4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80294a8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80294ac:	d006      	beq.n	80294bc <_scanf_float+0x208>
 80294ae:	0548      	lsls	r0, r1, #21
 80294b0:	f57f af38 	bpl.w	8029324 <_scanf_float+0x70>
 80294b4:	f1b9 0f00 	cmp.w	r9, #0
 80294b8:	f43f af3b 	beq.w	8029332 <_scanf_float+0x7e>
 80294bc:	0588      	lsls	r0, r1, #22
 80294be:	bf58      	it	pl
 80294c0:	9802      	ldrpl	r0, [sp, #8]
 80294c2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80294c6:	bf58      	it	pl
 80294c8:	eba9 0000 	subpl.w	r0, r9, r0
 80294cc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80294d0:	bf58      	it	pl
 80294d2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80294d6:	6021      	str	r1, [r4, #0]
 80294d8:	f04f 0900 	mov.w	r9, #0
 80294dc:	e7ab      	b.n	8029436 <_scanf_float+0x182>
 80294de:	2203      	movs	r2, #3
 80294e0:	e7a9      	b.n	8029436 <_scanf_float+0x182>
 80294e2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80294e6:	9205      	str	r2, [sp, #20]
 80294e8:	4631      	mov	r1, r6
 80294ea:	4638      	mov	r0, r7
 80294ec:	4798      	blx	r3
 80294ee:	9a05      	ldr	r2, [sp, #20]
 80294f0:	2800      	cmp	r0, #0
 80294f2:	f43f af04 	beq.w	80292fe <_scanf_float+0x4a>
 80294f6:	e715      	b.n	8029324 <_scanf_float+0x70>
 80294f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80294fc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8029500:	4632      	mov	r2, r6
 8029502:	4638      	mov	r0, r7
 8029504:	4798      	blx	r3
 8029506:	6923      	ldr	r3, [r4, #16]
 8029508:	3b01      	subs	r3, #1
 802950a:	6123      	str	r3, [r4, #16]
 802950c:	e715      	b.n	802933a <_scanf_float+0x86>
 802950e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8029512:	2b06      	cmp	r3, #6
 8029514:	d80a      	bhi.n	802952c <_scanf_float+0x278>
 8029516:	f1bb 0f02 	cmp.w	fp, #2
 802951a:	d968      	bls.n	80295ee <_scanf_float+0x33a>
 802951c:	f1ab 0b03 	sub.w	fp, fp, #3
 8029520:	fa5f fb8b 	uxtb.w	fp, fp
 8029524:	eba5 0b0b 	sub.w	fp, r5, fp
 8029528:	455d      	cmp	r5, fp
 802952a:	d14b      	bne.n	80295c4 <_scanf_float+0x310>
 802952c:	6823      	ldr	r3, [r4, #0]
 802952e:	05da      	lsls	r2, r3, #23
 8029530:	d51f      	bpl.n	8029572 <_scanf_float+0x2be>
 8029532:	055b      	lsls	r3, r3, #21
 8029534:	d468      	bmi.n	8029608 <_scanf_float+0x354>
 8029536:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802953a:	6923      	ldr	r3, [r4, #16]
 802953c:	2965      	cmp	r1, #101	; 0x65
 802953e:	f103 33ff 	add.w	r3, r3, #4294967295
 8029542:	f105 3bff 	add.w	fp, r5, #4294967295
 8029546:	6123      	str	r3, [r4, #16]
 8029548:	d00d      	beq.n	8029566 <_scanf_float+0x2b2>
 802954a:	2945      	cmp	r1, #69	; 0x45
 802954c:	d00b      	beq.n	8029566 <_scanf_float+0x2b2>
 802954e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8029552:	4632      	mov	r2, r6
 8029554:	4638      	mov	r0, r7
 8029556:	4798      	blx	r3
 8029558:	6923      	ldr	r3, [r4, #16]
 802955a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 802955e:	3b01      	subs	r3, #1
 8029560:	f1a5 0b02 	sub.w	fp, r5, #2
 8029564:	6123      	str	r3, [r4, #16]
 8029566:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802956a:	4632      	mov	r2, r6
 802956c:	4638      	mov	r0, r7
 802956e:	4798      	blx	r3
 8029570:	465d      	mov	r5, fp
 8029572:	6826      	ldr	r6, [r4, #0]
 8029574:	f016 0610 	ands.w	r6, r6, #16
 8029578:	d17a      	bne.n	8029670 <_scanf_float+0x3bc>
 802957a:	702e      	strb	r6, [r5, #0]
 802957c:	6823      	ldr	r3, [r4, #0]
 802957e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8029582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029586:	d142      	bne.n	802960e <_scanf_float+0x35a>
 8029588:	9b02      	ldr	r3, [sp, #8]
 802958a:	eba9 0303 	sub.w	r3, r9, r3
 802958e:	425a      	negs	r2, r3
 8029590:	2b00      	cmp	r3, #0
 8029592:	d149      	bne.n	8029628 <_scanf_float+0x374>
 8029594:	2200      	movs	r2, #0
 8029596:	4641      	mov	r1, r8
 8029598:	4638      	mov	r0, r7
 802959a:	f000 ffd5 	bl	802a548 <_strtod_r>
 802959e:	6825      	ldr	r5, [r4, #0]
 80295a0:	f8da 3000 	ldr.w	r3, [sl]
 80295a4:	f015 0f02 	tst.w	r5, #2
 80295a8:	f103 0204 	add.w	r2, r3, #4
 80295ac:	ec59 8b10 	vmov	r8, r9, d0
 80295b0:	f8ca 2000 	str.w	r2, [sl]
 80295b4:	d043      	beq.n	802963e <_scanf_float+0x38a>
 80295b6:	681b      	ldr	r3, [r3, #0]
 80295b8:	e9c3 8900 	strd	r8, r9, [r3]
 80295bc:	68e3      	ldr	r3, [r4, #12]
 80295be:	3301      	adds	r3, #1
 80295c0:	60e3      	str	r3, [r4, #12]
 80295c2:	e6be      	b.n	8029342 <_scanf_float+0x8e>
 80295c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80295c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80295cc:	4632      	mov	r2, r6
 80295ce:	4638      	mov	r0, r7
 80295d0:	4798      	blx	r3
 80295d2:	6923      	ldr	r3, [r4, #16]
 80295d4:	3b01      	subs	r3, #1
 80295d6:	6123      	str	r3, [r4, #16]
 80295d8:	e7a6      	b.n	8029528 <_scanf_float+0x274>
 80295da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80295de:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80295e2:	4632      	mov	r2, r6
 80295e4:	4638      	mov	r0, r7
 80295e6:	4798      	blx	r3
 80295e8:	6923      	ldr	r3, [r4, #16]
 80295ea:	3b01      	subs	r3, #1
 80295ec:	6123      	str	r3, [r4, #16]
 80295ee:	4545      	cmp	r5, r8
 80295f0:	d8f3      	bhi.n	80295da <_scanf_float+0x326>
 80295f2:	e6a5      	b.n	8029340 <_scanf_float+0x8c>
 80295f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80295f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80295fc:	4632      	mov	r2, r6
 80295fe:	4638      	mov	r0, r7
 8029600:	4798      	blx	r3
 8029602:	6923      	ldr	r3, [r4, #16]
 8029604:	3b01      	subs	r3, #1
 8029606:	6123      	str	r3, [r4, #16]
 8029608:	4545      	cmp	r5, r8
 802960a:	d8f3      	bhi.n	80295f4 <_scanf_float+0x340>
 802960c:	e698      	b.n	8029340 <_scanf_float+0x8c>
 802960e:	9b03      	ldr	r3, [sp, #12]
 8029610:	2b00      	cmp	r3, #0
 8029612:	d0bf      	beq.n	8029594 <_scanf_float+0x2e0>
 8029614:	9904      	ldr	r1, [sp, #16]
 8029616:	230a      	movs	r3, #10
 8029618:	4632      	mov	r2, r6
 802961a:	3101      	adds	r1, #1
 802961c:	4638      	mov	r0, r7
 802961e:	f001 f81f 	bl	802a660 <_strtol_r>
 8029622:	9b03      	ldr	r3, [sp, #12]
 8029624:	9d04      	ldr	r5, [sp, #16]
 8029626:	1ac2      	subs	r2, r0, r3
 8029628:	f204 136f 	addw	r3, r4, #367	; 0x16f
 802962c:	429d      	cmp	r5, r3
 802962e:	bf28      	it	cs
 8029630:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8029634:	490f      	ldr	r1, [pc, #60]	; (8029674 <_scanf_float+0x3c0>)
 8029636:	4628      	mov	r0, r5
 8029638:	f000 f94e 	bl	80298d8 <siprintf>
 802963c:	e7aa      	b.n	8029594 <_scanf_float+0x2e0>
 802963e:	f015 0504 	ands.w	r5, r5, #4
 8029642:	d1b8      	bne.n	80295b6 <_scanf_float+0x302>
 8029644:	681f      	ldr	r7, [r3, #0]
 8029646:	ee10 2a10 	vmov	r2, s0
 802964a:	464b      	mov	r3, r9
 802964c:	ee10 0a10 	vmov	r0, s0
 8029650:	4649      	mov	r1, r9
 8029652:	f7d7 fa73 	bl	8000b3c <__aeabi_dcmpun>
 8029656:	b128      	cbz	r0, 8029664 <_scanf_float+0x3b0>
 8029658:	4628      	mov	r0, r5
 802965a:	f000 f937 	bl	80298cc <nanf>
 802965e:	ed87 0a00 	vstr	s0, [r7]
 8029662:	e7ab      	b.n	80295bc <_scanf_float+0x308>
 8029664:	4640      	mov	r0, r8
 8029666:	4649      	mov	r1, r9
 8029668:	f7d7 fac6 	bl	8000bf8 <__aeabi_d2f>
 802966c:	6038      	str	r0, [r7, #0]
 802966e:	e7a5      	b.n	80295bc <_scanf_float+0x308>
 8029670:	2600      	movs	r6, #0
 8029672:	e666      	b.n	8029342 <_scanf_float+0x8e>
 8029674:	0802e615 	.word	0x0802e615

08029678 <iprintf>:
 8029678:	b40f      	push	{r0, r1, r2, r3}
 802967a:	4b0a      	ldr	r3, [pc, #40]	; (80296a4 <iprintf+0x2c>)
 802967c:	b513      	push	{r0, r1, r4, lr}
 802967e:	681c      	ldr	r4, [r3, #0]
 8029680:	b124      	cbz	r4, 802968c <iprintf+0x14>
 8029682:	69a3      	ldr	r3, [r4, #24]
 8029684:	b913      	cbnz	r3, 802968c <iprintf+0x14>
 8029686:	4620      	mov	r0, r4
 8029688:	f001 fffa 	bl	802b680 <__sinit>
 802968c:	ab05      	add	r3, sp, #20
 802968e:	9a04      	ldr	r2, [sp, #16]
 8029690:	68a1      	ldr	r1, [r4, #8]
 8029692:	9301      	str	r3, [sp, #4]
 8029694:	4620      	mov	r0, r4
 8029696:	f7ff f89b 	bl	80287d0 <_vfiprintf_r>
 802969a:	b002      	add	sp, #8
 802969c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80296a0:	b004      	add	sp, #16
 80296a2:	4770      	bx	lr
 80296a4:	2000068c 	.word	0x2000068c

080296a8 <_puts_r>:
 80296a8:	b570      	push	{r4, r5, r6, lr}
 80296aa:	460e      	mov	r6, r1
 80296ac:	4605      	mov	r5, r0
 80296ae:	b118      	cbz	r0, 80296b8 <_puts_r+0x10>
 80296b0:	6983      	ldr	r3, [r0, #24]
 80296b2:	b90b      	cbnz	r3, 80296b8 <_puts_r+0x10>
 80296b4:	f001 ffe4 	bl	802b680 <__sinit>
 80296b8:	69ab      	ldr	r3, [r5, #24]
 80296ba:	68ac      	ldr	r4, [r5, #8]
 80296bc:	b913      	cbnz	r3, 80296c4 <_puts_r+0x1c>
 80296be:	4628      	mov	r0, r5
 80296c0:	f001 ffde 	bl	802b680 <__sinit>
 80296c4:	4b23      	ldr	r3, [pc, #140]	; (8029754 <_puts_r+0xac>)
 80296c6:	429c      	cmp	r4, r3
 80296c8:	d117      	bne.n	80296fa <_puts_r+0x52>
 80296ca:	686c      	ldr	r4, [r5, #4]
 80296cc:	89a3      	ldrh	r3, [r4, #12]
 80296ce:	071b      	lsls	r3, r3, #28
 80296d0:	d51d      	bpl.n	802970e <_puts_r+0x66>
 80296d2:	6923      	ldr	r3, [r4, #16]
 80296d4:	b1db      	cbz	r3, 802970e <_puts_r+0x66>
 80296d6:	3e01      	subs	r6, #1
 80296d8:	68a3      	ldr	r3, [r4, #8]
 80296da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80296de:	3b01      	subs	r3, #1
 80296e0:	60a3      	str	r3, [r4, #8]
 80296e2:	b9e9      	cbnz	r1, 8029720 <_puts_r+0x78>
 80296e4:	2b00      	cmp	r3, #0
 80296e6:	da2e      	bge.n	8029746 <_puts_r+0x9e>
 80296e8:	4622      	mov	r2, r4
 80296ea:	210a      	movs	r1, #10
 80296ec:	4628      	mov	r0, r5
 80296ee:	f000 ffc9 	bl	802a684 <__swbuf_r>
 80296f2:	3001      	adds	r0, #1
 80296f4:	d011      	beq.n	802971a <_puts_r+0x72>
 80296f6:	200a      	movs	r0, #10
 80296f8:	e011      	b.n	802971e <_puts_r+0x76>
 80296fa:	4b17      	ldr	r3, [pc, #92]	; (8029758 <_puts_r+0xb0>)
 80296fc:	429c      	cmp	r4, r3
 80296fe:	d101      	bne.n	8029704 <_puts_r+0x5c>
 8029700:	68ac      	ldr	r4, [r5, #8]
 8029702:	e7e3      	b.n	80296cc <_puts_r+0x24>
 8029704:	4b15      	ldr	r3, [pc, #84]	; (802975c <_puts_r+0xb4>)
 8029706:	429c      	cmp	r4, r3
 8029708:	bf08      	it	eq
 802970a:	68ec      	ldreq	r4, [r5, #12]
 802970c:	e7de      	b.n	80296cc <_puts_r+0x24>
 802970e:	4621      	mov	r1, r4
 8029710:	4628      	mov	r0, r5
 8029712:	f001 f809 	bl	802a728 <__swsetup_r>
 8029716:	2800      	cmp	r0, #0
 8029718:	d0dd      	beq.n	80296d6 <_puts_r+0x2e>
 802971a:	f04f 30ff 	mov.w	r0, #4294967295
 802971e:	bd70      	pop	{r4, r5, r6, pc}
 8029720:	2b00      	cmp	r3, #0
 8029722:	da04      	bge.n	802972e <_puts_r+0x86>
 8029724:	69a2      	ldr	r2, [r4, #24]
 8029726:	429a      	cmp	r2, r3
 8029728:	dc06      	bgt.n	8029738 <_puts_r+0x90>
 802972a:	290a      	cmp	r1, #10
 802972c:	d004      	beq.n	8029738 <_puts_r+0x90>
 802972e:	6823      	ldr	r3, [r4, #0]
 8029730:	1c5a      	adds	r2, r3, #1
 8029732:	6022      	str	r2, [r4, #0]
 8029734:	7019      	strb	r1, [r3, #0]
 8029736:	e7cf      	b.n	80296d8 <_puts_r+0x30>
 8029738:	4622      	mov	r2, r4
 802973a:	4628      	mov	r0, r5
 802973c:	f000 ffa2 	bl	802a684 <__swbuf_r>
 8029740:	3001      	adds	r0, #1
 8029742:	d1c9      	bne.n	80296d8 <_puts_r+0x30>
 8029744:	e7e9      	b.n	802971a <_puts_r+0x72>
 8029746:	6823      	ldr	r3, [r4, #0]
 8029748:	200a      	movs	r0, #10
 802974a:	1c5a      	adds	r2, r3, #1
 802974c:	6022      	str	r2, [r4, #0]
 802974e:	7018      	strb	r0, [r3, #0]
 8029750:	e7e5      	b.n	802971e <_puts_r+0x76>
 8029752:	bf00      	nop
 8029754:	0802e6a0 	.word	0x0802e6a0
 8029758:	0802e6c0 	.word	0x0802e6c0
 802975c:	0802e680 	.word	0x0802e680

08029760 <puts>:
 8029760:	4b02      	ldr	r3, [pc, #8]	; (802976c <puts+0xc>)
 8029762:	4601      	mov	r1, r0
 8029764:	6818      	ldr	r0, [r3, #0]
 8029766:	f7ff bf9f 	b.w	80296a8 <_puts_r>
 802976a:	bf00      	nop
 802976c:	2000068c 	.word	0x2000068c

08029770 <setvbuf>:
 8029770:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8029774:	461d      	mov	r5, r3
 8029776:	4b51      	ldr	r3, [pc, #324]	; (80298bc <setvbuf+0x14c>)
 8029778:	681e      	ldr	r6, [r3, #0]
 802977a:	4604      	mov	r4, r0
 802977c:	460f      	mov	r7, r1
 802977e:	4690      	mov	r8, r2
 8029780:	b126      	cbz	r6, 802978c <setvbuf+0x1c>
 8029782:	69b3      	ldr	r3, [r6, #24]
 8029784:	b913      	cbnz	r3, 802978c <setvbuf+0x1c>
 8029786:	4630      	mov	r0, r6
 8029788:	f001 ff7a 	bl	802b680 <__sinit>
 802978c:	4b4c      	ldr	r3, [pc, #304]	; (80298c0 <setvbuf+0x150>)
 802978e:	429c      	cmp	r4, r3
 8029790:	d152      	bne.n	8029838 <setvbuf+0xc8>
 8029792:	6874      	ldr	r4, [r6, #4]
 8029794:	f1b8 0f02 	cmp.w	r8, #2
 8029798:	d006      	beq.n	80297a8 <setvbuf+0x38>
 802979a:	f1b8 0f01 	cmp.w	r8, #1
 802979e:	f200 8089 	bhi.w	80298b4 <setvbuf+0x144>
 80297a2:	2d00      	cmp	r5, #0
 80297a4:	f2c0 8086 	blt.w	80298b4 <setvbuf+0x144>
 80297a8:	4621      	mov	r1, r4
 80297aa:	4630      	mov	r0, r6
 80297ac:	f001 fefe 	bl	802b5ac <_fflush_r>
 80297b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80297b2:	b141      	cbz	r1, 80297c6 <setvbuf+0x56>
 80297b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80297b8:	4299      	cmp	r1, r3
 80297ba:	d002      	beq.n	80297c2 <setvbuf+0x52>
 80297bc:	4630      	mov	r0, r6
 80297be:	f002 ffc7 	bl	802c750 <_free_r>
 80297c2:	2300      	movs	r3, #0
 80297c4:	6363      	str	r3, [r4, #52]	; 0x34
 80297c6:	2300      	movs	r3, #0
 80297c8:	61a3      	str	r3, [r4, #24]
 80297ca:	6063      	str	r3, [r4, #4]
 80297cc:	89a3      	ldrh	r3, [r4, #12]
 80297ce:	061b      	lsls	r3, r3, #24
 80297d0:	d503      	bpl.n	80297da <setvbuf+0x6a>
 80297d2:	6921      	ldr	r1, [r4, #16]
 80297d4:	4630      	mov	r0, r6
 80297d6:	f002 ffbb 	bl	802c750 <_free_r>
 80297da:	89a3      	ldrh	r3, [r4, #12]
 80297dc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80297e0:	f023 0303 	bic.w	r3, r3, #3
 80297e4:	f1b8 0f02 	cmp.w	r8, #2
 80297e8:	81a3      	strh	r3, [r4, #12]
 80297ea:	d05d      	beq.n	80298a8 <setvbuf+0x138>
 80297ec:	ab01      	add	r3, sp, #4
 80297ee:	466a      	mov	r2, sp
 80297f0:	4621      	mov	r1, r4
 80297f2:	4630      	mov	r0, r6
 80297f4:	f002 fb08 	bl	802be08 <__swhatbuf_r>
 80297f8:	89a3      	ldrh	r3, [r4, #12]
 80297fa:	4318      	orrs	r0, r3
 80297fc:	81a0      	strh	r0, [r4, #12]
 80297fe:	bb2d      	cbnz	r5, 802984c <setvbuf+0xdc>
 8029800:	9d00      	ldr	r5, [sp, #0]
 8029802:	4628      	mov	r0, r5
 8029804:	f002 fb64 	bl	802bed0 <malloc>
 8029808:	4607      	mov	r7, r0
 802980a:	2800      	cmp	r0, #0
 802980c:	d14e      	bne.n	80298ac <setvbuf+0x13c>
 802980e:	f8dd 9000 	ldr.w	r9, [sp]
 8029812:	45a9      	cmp	r9, r5
 8029814:	d13c      	bne.n	8029890 <setvbuf+0x120>
 8029816:	f04f 30ff 	mov.w	r0, #4294967295
 802981a:	89a3      	ldrh	r3, [r4, #12]
 802981c:	f043 0302 	orr.w	r3, r3, #2
 8029820:	81a3      	strh	r3, [r4, #12]
 8029822:	2300      	movs	r3, #0
 8029824:	60a3      	str	r3, [r4, #8]
 8029826:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802982a:	6023      	str	r3, [r4, #0]
 802982c:	6123      	str	r3, [r4, #16]
 802982e:	2301      	movs	r3, #1
 8029830:	6163      	str	r3, [r4, #20]
 8029832:	b003      	add	sp, #12
 8029834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029838:	4b22      	ldr	r3, [pc, #136]	; (80298c4 <setvbuf+0x154>)
 802983a:	429c      	cmp	r4, r3
 802983c:	d101      	bne.n	8029842 <setvbuf+0xd2>
 802983e:	68b4      	ldr	r4, [r6, #8]
 8029840:	e7a8      	b.n	8029794 <setvbuf+0x24>
 8029842:	4b21      	ldr	r3, [pc, #132]	; (80298c8 <setvbuf+0x158>)
 8029844:	429c      	cmp	r4, r3
 8029846:	bf08      	it	eq
 8029848:	68f4      	ldreq	r4, [r6, #12]
 802984a:	e7a3      	b.n	8029794 <setvbuf+0x24>
 802984c:	2f00      	cmp	r7, #0
 802984e:	d0d8      	beq.n	8029802 <setvbuf+0x92>
 8029850:	69b3      	ldr	r3, [r6, #24]
 8029852:	b913      	cbnz	r3, 802985a <setvbuf+0xea>
 8029854:	4630      	mov	r0, r6
 8029856:	f001 ff13 	bl	802b680 <__sinit>
 802985a:	f1b8 0f01 	cmp.w	r8, #1
 802985e:	bf08      	it	eq
 8029860:	89a3      	ldrheq	r3, [r4, #12]
 8029862:	6027      	str	r7, [r4, #0]
 8029864:	bf04      	itt	eq
 8029866:	f043 0301 	orreq.w	r3, r3, #1
 802986a:	81a3      	strheq	r3, [r4, #12]
 802986c:	89a3      	ldrh	r3, [r4, #12]
 802986e:	f013 0008 	ands.w	r0, r3, #8
 8029872:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8029876:	d01b      	beq.n	80298b0 <setvbuf+0x140>
 8029878:	f013 0001 	ands.w	r0, r3, #1
 802987c:	bf18      	it	ne
 802987e:	426d      	negne	r5, r5
 8029880:	f04f 0300 	mov.w	r3, #0
 8029884:	bf1d      	ittte	ne
 8029886:	60a3      	strne	r3, [r4, #8]
 8029888:	61a5      	strne	r5, [r4, #24]
 802988a:	4618      	movne	r0, r3
 802988c:	60a5      	streq	r5, [r4, #8]
 802988e:	e7d0      	b.n	8029832 <setvbuf+0xc2>
 8029890:	4648      	mov	r0, r9
 8029892:	f002 fb1d 	bl	802bed0 <malloc>
 8029896:	4607      	mov	r7, r0
 8029898:	2800      	cmp	r0, #0
 802989a:	d0bc      	beq.n	8029816 <setvbuf+0xa6>
 802989c:	89a3      	ldrh	r3, [r4, #12]
 802989e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80298a2:	81a3      	strh	r3, [r4, #12]
 80298a4:	464d      	mov	r5, r9
 80298a6:	e7d3      	b.n	8029850 <setvbuf+0xe0>
 80298a8:	2000      	movs	r0, #0
 80298aa:	e7b6      	b.n	802981a <setvbuf+0xaa>
 80298ac:	46a9      	mov	r9, r5
 80298ae:	e7f5      	b.n	802989c <setvbuf+0x12c>
 80298b0:	60a0      	str	r0, [r4, #8]
 80298b2:	e7be      	b.n	8029832 <setvbuf+0xc2>
 80298b4:	f04f 30ff 	mov.w	r0, #4294967295
 80298b8:	e7bb      	b.n	8029832 <setvbuf+0xc2>
 80298ba:	bf00      	nop
 80298bc:	2000068c 	.word	0x2000068c
 80298c0:	0802e6a0 	.word	0x0802e6a0
 80298c4:	0802e6c0 	.word	0x0802e6c0
 80298c8:	0802e680 	.word	0x0802e680

080298cc <nanf>:
 80298cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80298d4 <nanf+0x8>
 80298d0:	4770      	bx	lr
 80298d2:	bf00      	nop
 80298d4:	7fc00000 	.word	0x7fc00000

080298d8 <siprintf>:
 80298d8:	b40e      	push	{r1, r2, r3}
 80298da:	b500      	push	{lr}
 80298dc:	b09c      	sub	sp, #112	; 0x70
 80298de:	ab1d      	add	r3, sp, #116	; 0x74
 80298e0:	9002      	str	r0, [sp, #8]
 80298e2:	9006      	str	r0, [sp, #24]
 80298e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80298e8:	4809      	ldr	r0, [pc, #36]	; (8029910 <siprintf+0x38>)
 80298ea:	9107      	str	r1, [sp, #28]
 80298ec:	9104      	str	r1, [sp, #16]
 80298ee:	4909      	ldr	r1, [pc, #36]	; (8029914 <siprintf+0x3c>)
 80298f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80298f4:	9105      	str	r1, [sp, #20]
 80298f6:	6800      	ldr	r0, [r0, #0]
 80298f8:	9301      	str	r3, [sp, #4]
 80298fa:	a902      	add	r1, sp, #8
 80298fc:	f003 f850 	bl	802c9a0 <_svfiprintf_r>
 8029900:	9b02      	ldr	r3, [sp, #8]
 8029902:	2200      	movs	r2, #0
 8029904:	701a      	strb	r2, [r3, #0]
 8029906:	b01c      	add	sp, #112	; 0x70
 8029908:	f85d eb04 	ldr.w	lr, [sp], #4
 802990c:	b003      	add	sp, #12
 802990e:	4770      	bx	lr
 8029910:	2000068c 	.word	0x2000068c
 8029914:	ffff0208 	.word	0xffff0208

08029918 <strcpy>:
 8029918:	4603      	mov	r3, r0
 802991a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802991e:	f803 2b01 	strb.w	r2, [r3], #1
 8029922:	2a00      	cmp	r2, #0
 8029924:	d1f9      	bne.n	802991a <strcpy+0x2>
 8029926:	4770      	bx	lr

08029928 <sulp>:
 8029928:	b570      	push	{r4, r5, r6, lr}
 802992a:	4604      	mov	r4, r0
 802992c:	460d      	mov	r5, r1
 802992e:	ec45 4b10 	vmov	d0, r4, r5
 8029932:	4616      	mov	r6, r2
 8029934:	f002 fdca 	bl	802c4cc <__ulp>
 8029938:	ec51 0b10 	vmov	r0, r1, d0
 802993c:	b17e      	cbz	r6, 802995e <sulp+0x36>
 802993e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8029942:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8029946:	2b00      	cmp	r3, #0
 8029948:	dd09      	ble.n	802995e <sulp+0x36>
 802994a:	051b      	lsls	r3, r3, #20
 802994c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8029950:	2400      	movs	r4, #0
 8029952:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8029956:	4622      	mov	r2, r4
 8029958:	462b      	mov	r3, r5
 802995a:	f7d6 fe55 	bl	8000608 <__aeabi_dmul>
 802995e:	bd70      	pop	{r4, r5, r6, pc}

08029960 <_strtod_l>:
 8029960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029964:	461f      	mov	r7, r3
 8029966:	b0a1      	sub	sp, #132	; 0x84
 8029968:	2300      	movs	r3, #0
 802996a:	4681      	mov	r9, r0
 802996c:	4638      	mov	r0, r7
 802996e:	460e      	mov	r6, r1
 8029970:	9217      	str	r2, [sp, #92]	; 0x5c
 8029972:	931c      	str	r3, [sp, #112]	; 0x70
 8029974:	f002 fa37 	bl	802bde6 <__localeconv_l>
 8029978:	4680      	mov	r8, r0
 802997a:	6800      	ldr	r0, [r0, #0]
 802997c:	f7d6 fc30 	bl	80001e0 <strlen>
 8029980:	f04f 0a00 	mov.w	sl, #0
 8029984:	4604      	mov	r4, r0
 8029986:	f04f 0b00 	mov.w	fp, #0
 802998a:	961b      	str	r6, [sp, #108]	; 0x6c
 802998c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802998e:	781a      	ldrb	r2, [r3, #0]
 8029990:	2a0d      	cmp	r2, #13
 8029992:	d832      	bhi.n	80299fa <_strtod_l+0x9a>
 8029994:	2a09      	cmp	r2, #9
 8029996:	d236      	bcs.n	8029a06 <_strtod_l+0xa6>
 8029998:	2a00      	cmp	r2, #0
 802999a:	d03e      	beq.n	8029a1a <_strtod_l+0xba>
 802999c:	2300      	movs	r3, #0
 802999e:	930d      	str	r3, [sp, #52]	; 0x34
 80299a0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80299a2:	782b      	ldrb	r3, [r5, #0]
 80299a4:	2b30      	cmp	r3, #48	; 0x30
 80299a6:	f040 80ac 	bne.w	8029b02 <_strtod_l+0x1a2>
 80299aa:	786b      	ldrb	r3, [r5, #1]
 80299ac:	2b58      	cmp	r3, #88	; 0x58
 80299ae:	d001      	beq.n	80299b4 <_strtod_l+0x54>
 80299b0:	2b78      	cmp	r3, #120	; 0x78
 80299b2:	d167      	bne.n	8029a84 <_strtod_l+0x124>
 80299b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80299b6:	9301      	str	r3, [sp, #4]
 80299b8:	ab1c      	add	r3, sp, #112	; 0x70
 80299ba:	9300      	str	r3, [sp, #0]
 80299bc:	9702      	str	r7, [sp, #8]
 80299be:	ab1d      	add	r3, sp, #116	; 0x74
 80299c0:	4a88      	ldr	r2, [pc, #544]	; (8029be4 <_strtod_l+0x284>)
 80299c2:	a91b      	add	r1, sp, #108	; 0x6c
 80299c4:	4648      	mov	r0, r9
 80299c6:	f001 ff34 	bl	802b832 <__gethex>
 80299ca:	f010 0407 	ands.w	r4, r0, #7
 80299ce:	4606      	mov	r6, r0
 80299d0:	d005      	beq.n	80299de <_strtod_l+0x7e>
 80299d2:	2c06      	cmp	r4, #6
 80299d4:	d12b      	bne.n	8029a2e <_strtod_l+0xce>
 80299d6:	3501      	adds	r5, #1
 80299d8:	2300      	movs	r3, #0
 80299da:	951b      	str	r5, [sp, #108]	; 0x6c
 80299dc:	930d      	str	r3, [sp, #52]	; 0x34
 80299de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80299e0:	2b00      	cmp	r3, #0
 80299e2:	f040 859a 	bne.w	802a51a <_strtod_l+0xbba>
 80299e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80299e8:	b1e3      	cbz	r3, 8029a24 <_strtod_l+0xc4>
 80299ea:	4652      	mov	r2, sl
 80299ec:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80299f0:	ec43 2b10 	vmov	d0, r2, r3
 80299f4:	b021      	add	sp, #132	; 0x84
 80299f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80299fa:	2a2b      	cmp	r2, #43	; 0x2b
 80299fc:	d015      	beq.n	8029a2a <_strtod_l+0xca>
 80299fe:	2a2d      	cmp	r2, #45	; 0x2d
 8029a00:	d004      	beq.n	8029a0c <_strtod_l+0xac>
 8029a02:	2a20      	cmp	r2, #32
 8029a04:	d1ca      	bne.n	802999c <_strtod_l+0x3c>
 8029a06:	3301      	adds	r3, #1
 8029a08:	931b      	str	r3, [sp, #108]	; 0x6c
 8029a0a:	e7bf      	b.n	802998c <_strtod_l+0x2c>
 8029a0c:	2201      	movs	r2, #1
 8029a0e:	920d      	str	r2, [sp, #52]	; 0x34
 8029a10:	1c5a      	adds	r2, r3, #1
 8029a12:	921b      	str	r2, [sp, #108]	; 0x6c
 8029a14:	785b      	ldrb	r3, [r3, #1]
 8029a16:	2b00      	cmp	r3, #0
 8029a18:	d1c2      	bne.n	80299a0 <_strtod_l+0x40>
 8029a1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029a1c:	961b      	str	r6, [sp, #108]	; 0x6c
 8029a1e:	2b00      	cmp	r3, #0
 8029a20:	f040 8579 	bne.w	802a516 <_strtod_l+0xbb6>
 8029a24:	4652      	mov	r2, sl
 8029a26:	465b      	mov	r3, fp
 8029a28:	e7e2      	b.n	80299f0 <_strtod_l+0x90>
 8029a2a:	2200      	movs	r2, #0
 8029a2c:	e7ef      	b.n	8029a0e <_strtod_l+0xae>
 8029a2e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8029a30:	b13a      	cbz	r2, 8029a42 <_strtod_l+0xe2>
 8029a32:	2135      	movs	r1, #53	; 0x35
 8029a34:	a81e      	add	r0, sp, #120	; 0x78
 8029a36:	f002 fe41 	bl	802c6bc <__copybits>
 8029a3a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8029a3c:	4648      	mov	r0, r9
 8029a3e:	f002 faae 	bl	802bf9e <_Bfree>
 8029a42:	3c01      	subs	r4, #1
 8029a44:	2c04      	cmp	r4, #4
 8029a46:	d806      	bhi.n	8029a56 <_strtod_l+0xf6>
 8029a48:	e8df f004 	tbb	[pc, r4]
 8029a4c:	1714030a 	.word	0x1714030a
 8029a50:	0a          	.byte	0x0a
 8029a51:	00          	.byte	0x00
 8029a52:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8029a56:	0730      	lsls	r0, r6, #28
 8029a58:	d5c1      	bpl.n	80299de <_strtod_l+0x7e>
 8029a5a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8029a5e:	e7be      	b.n	80299de <_strtod_l+0x7e>
 8029a60:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8029a64:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8029a66:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8029a6a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8029a6e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8029a72:	e7f0      	b.n	8029a56 <_strtod_l+0xf6>
 8029a74:	f8df b170 	ldr.w	fp, [pc, #368]	; 8029be8 <_strtod_l+0x288>
 8029a78:	e7ed      	b.n	8029a56 <_strtod_l+0xf6>
 8029a7a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8029a7e:	f04f 3aff 	mov.w	sl, #4294967295
 8029a82:	e7e8      	b.n	8029a56 <_strtod_l+0xf6>
 8029a84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8029a86:	1c5a      	adds	r2, r3, #1
 8029a88:	921b      	str	r2, [sp, #108]	; 0x6c
 8029a8a:	785b      	ldrb	r3, [r3, #1]
 8029a8c:	2b30      	cmp	r3, #48	; 0x30
 8029a8e:	d0f9      	beq.n	8029a84 <_strtod_l+0x124>
 8029a90:	2b00      	cmp	r3, #0
 8029a92:	d0a4      	beq.n	80299de <_strtod_l+0x7e>
 8029a94:	2301      	movs	r3, #1
 8029a96:	2500      	movs	r5, #0
 8029a98:	9306      	str	r3, [sp, #24]
 8029a9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8029a9c:	9308      	str	r3, [sp, #32]
 8029a9e:	9507      	str	r5, [sp, #28]
 8029aa0:	9505      	str	r5, [sp, #20]
 8029aa2:	220a      	movs	r2, #10
 8029aa4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8029aa6:	7807      	ldrb	r7, [r0, #0]
 8029aa8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8029aac:	b2d9      	uxtb	r1, r3
 8029aae:	2909      	cmp	r1, #9
 8029ab0:	d929      	bls.n	8029b06 <_strtod_l+0x1a6>
 8029ab2:	4622      	mov	r2, r4
 8029ab4:	f8d8 1000 	ldr.w	r1, [r8]
 8029ab8:	f003 f901 	bl	802ccbe <strncmp>
 8029abc:	2800      	cmp	r0, #0
 8029abe:	d031      	beq.n	8029b24 <_strtod_l+0x1c4>
 8029ac0:	2000      	movs	r0, #0
 8029ac2:	9c05      	ldr	r4, [sp, #20]
 8029ac4:	9004      	str	r0, [sp, #16]
 8029ac6:	463b      	mov	r3, r7
 8029ac8:	4602      	mov	r2, r0
 8029aca:	2b65      	cmp	r3, #101	; 0x65
 8029acc:	d001      	beq.n	8029ad2 <_strtod_l+0x172>
 8029ace:	2b45      	cmp	r3, #69	; 0x45
 8029ad0:	d114      	bne.n	8029afc <_strtod_l+0x19c>
 8029ad2:	b924      	cbnz	r4, 8029ade <_strtod_l+0x17e>
 8029ad4:	b910      	cbnz	r0, 8029adc <_strtod_l+0x17c>
 8029ad6:	9b06      	ldr	r3, [sp, #24]
 8029ad8:	2b00      	cmp	r3, #0
 8029ada:	d09e      	beq.n	8029a1a <_strtod_l+0xba>
 8029adc:	2400      	movs	r4, #0
 8029ade:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8029ae0:	1c73      	adds	r3, r6, #1
 8029ae2:	931b      	str	r3, [sp, #108]	; 0x6c
 8029ae4:	7873      	ldrb	r3, [r6, #1]
 8029ae6:	2b2b      	cmp	r3, #43	; 0x2b
 8029ae8:	d078      	beq.n	8029bdc <_strtod_l+0x27c>
 8029aea:	2b2d      	cmp	r3, #45	; 0x2d
 8029aec:	d070      	beq.n	8029bd0 <_strtod_l+0x270>
 8029aee:	f04f 0c00 	mov.w	ip, #0
 8029af2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8029af6:	2f09      	cmp	r7, #9
 8029af8:	d97c      	bls.n	8029bf4 <_strtod_l+0x294>
 8029afa:	961b      	str	r6, [sp, #108]	; 0x6c
 8029afc:	f04f 0e00 	mov.w	lr, #0
 8029b00:	e09a      	b.n	8029c38 <_strtod_l+0x2d8>
 8029b02:	2300      	movs	r3, #0
 8029b04:	e7c7      	b.n	8029a96 <_strtod_l+0x136>
 8029b06:	9905      	ldr	r1, [sp, #20]
 8029b08:	2908      	cmp	r1, #8
 8029b0a:	bfdd      	ittte	le
 8029b0c:	9907      	ldrle	r1, [sp, #28]
 8029b0e:	fb02 3301 	mlale	r3, r2, r1, r3
 8029b12:	9307      	strle	r3, [sp, #28]
 8029b14:	fb02 3505 	mlagt	r5, r2, r5, r3
 8029b18:	9b05      	ldr	r3, [sp, #20]
 8029b1a:	3001      	adds	r0, #1
 8029b1c:	3301      	adds	r3, #1
 8029b1e:	9305      	str	r3, [sp, #20]
 8029b20:	901b      	str	r0, [sp, #108]	; 0x6c
 8029b22:	e7bf      	b.n	8029aa4 <_strtod_l+0x144>
 8029b24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8029b26:	191a      	adds	r2, r3, r4
 8029b28:	921b      	str	r2, [sp, #108]	; 0x6c
 8029b2a:	9a05      	ldr	r2, [sp, #20]
 8029b2c:	5d1b      	ldrb	r3, [r3, r4]
 8029b2e:	2a00      	cmp	r2, #0
 8029b30:	d037      	beq.n	8029ba2 <_strtod_l+0x242>
 8029b32:	9c05      	ldr	r4, [sp, #20]
 8029b34:	4602      	mov	r2, r0
 8029b36:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8029b3a:	2909      	cmp	r1, #9
 8029b3c:	d913      	bls.n	8029b66 <_strtod_l+0x206>
 8029b3e:	2101      	movs	r1, #1
 8029b40:	9104      	str	r1, [sp, #16]
 8029b42:	e7c2      	b.n	8029aca <_strtod_l+0x16a>
 8029b44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8029b46:	1c5a      	adds	r2, r3, #1
 8029b48:	921b      	str	r2, [sp, #108]	; 0x6c
 8029b4a:	785b      	ldrb	r3, [r3, #1]
 8029b4c:	3001      	adds	r0, #1
 8029b4e:	2b30      	cmp	r3, #48	; 0x30
 8029b50:	d0f8      	beq.n	8029b44 <_strtod_l+0x1e4>
 8029b52:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8029b56:	2a08      	cmp	r2, #8
 8029b58:	f200 84e4 	bhi.w	802a524 <_strtod_l+0xbc4>
 8029b5c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8029b5e:	9208      	str	r2, [sp, #32]
 8029b60:	4602      	mov	r2, r0
 8029b62:	2000      	movs	r0, #0
 8029b64:	4604      	mov	r4, r0
 8029b66:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8029b6a:	f100 0101 	add.w	r1, r0, #1
 8029b6e:	d012      	beq.n	8029b96 <_strtod_l+0x236>
 8029b70:	440a      	add	r2, r1
 8029b72:	eb00 0c04 	add.w	ip, r0, r4
 8029b76:	4621      	mov	r1, r4
 8029b78:	270a      	movs	r7, #10
 8029b7a:	458c      	cmp	ip, r1
 8029b7c:	d113      	bne.n	8029ba6 <_strtod_l+0x246>
 8029b7e:	1821      	adds	r1, r4, r0
 8029b80:	2908      	cmp	r1, #8
 8029b82:	f104 0401 	add.w	r4, r4, #1
 8029b86:	4404      	add	r4, r0
 8029b88:	dc19      	bgt.n	8029bbe <_strtod_l+0x25e>
 8029b8a:	9b07      	ldr	r3, [sp, #28]
 8029b8c:	210a      	movs	r1, #10
 8029b8e:	fb01 e303 	mla	r3, r1, r3, lr
 8029b92:	9307      	str	r3, [sp, #28]
 8029b94:	2100      	movs	r1, #0
 8029b96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8029b98:	1c58      	adds	r0, r3, #1
 8029b9a:	901b      	str	r0, [sp, #108]	; 0x6c
 8029b9c:	785b      	ldrb	r3, [r3, #1]
 8029b9e:	4608      	mov	r0, r1
 8029ba0:	e7c9      	b.n	8029b36 <_strtod_l+0x1d6>
 8029ba2:	9805      	ldr	r0, [sp, #20]
 8029ba4:	e7d3      	b.n	8029b4e <_strtod_l+0x1ee>
 8029ba6:	2908      	cmp	r1, #8
 8029ba8:	f101 0101 	add.w	r1, r1, #1
 8029bac:	dc03      	bgt.n	8029bb6 <_strtod_l+0x256>
 8029bae:	9b07      	ldr	r3, [sp, #28]
 8029bb0:	437b      	muls	r3, r7
 8029bb2:	9307      	str	r3, [sp, #28]
 8029bb4:	e7e1      	b.n	8029b7a <_strtod_l+0x21a>
 8029bb6:	2910      	cmp	r1, #16
 8029bb8:	bfd8      	it	le
 8029bba:	437d      	mulle	r5, r7
 8029bbc:	e7dd      	b.n	8029b7a <_strtod_l+0x21a>
 8029bbe:	2c10      	cmp	r4, #16
 8029bc0:	bfdc      	itt	le
 8029bc2:	210a      	movle	r1, #10
 8029bc4:	fb01 e505 	mlale	r5, r1, r5, lr
 8029bc8:	e7e4      	b.n	8029b94 <_strtod_l+0x234>
 8029bca:	2301      	movs	r3, #1
 8029bcc:	9304      	str	r3, [sp, #16]
 8029bce:	e781      	b.n	8029ad4 <_strtod_l+0x174>
 8029bd0:	f04f 0c01 	mov.w	ip, #1
 8029bd4:	1cb3      	adds	r3, r6, #2
 8029bd6:	931b      	str	r3, [sp, #108]	; 0x6c
 8029bd8:	78b3      	ldrb	r3, [r6, #2]
 8029bda:	e78a      	b.n	8029af2 <_strtod_l+0x192>
 8029bdc:	f04f 0c00 	mov.w	ip, #0
 8029be0:	e7f8      	b.n	8029bd4 <_strtod_l+0x274>
 8029be2:	bf00      	nop
 8029be4:	0802e61c 	.word	0x0802e61c
 8029be8:	7ff00000 	.word	0x7ff00000
 8029bec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8029bee:	1c5f      	adds	r7, r3, #1
 8029bf0:	971b      	str	r7, [sp, #108]	; 0x6c
 8029bf2:	785b      	ldrb	r3, [r3, #1]
 8029bf4:	2b30      	cmp	r3, #48	; 0x30
 8029bf6:	d0f9      	beq.n	8029bec <_strtod_l+0x28c>
 8029bf8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8029bfc:	2f08      	cmp	r7, #8
 8029bfe:	f63f af7d 	bhi.w	8029afc <_strtod_l+0x19c>
 8029c02:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8029c06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8029c08:	930a      	str	r3, [sp, #40]	; 0x28
 8029c0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8029c0c:	1c5f      	adds	r7, r3, #1
 8029c0e:	971b      	str	r7, [sp, #108]	; 0x6c
 8029c10:	785b      	ldrb	r3, [r3, #1]
 8029c12:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8029c16:	f1b8 0f09 	cmp.w	r8, #9
 8029c1a:	d937      	bls.n	8029c8c <_strtod_l+0x32c>
 8029c1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8029c1e:	1a7f      	subs	r7, r7, r1
 8029c20:	2f08      	cmp	r7, #8
 8029c22:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8029c26:	dc37      	bgt.n	8029c98 <_strtod_l+0x338>
 8029c28:	45be      	cmp	lr, r7
 8029c2a:	bfa8      	it	ge
 8029c2c:	46be      	movge	lr, r7
 8029c2e:	f1bc 0f00 	cmp.w	ip, #0
 8029c32:	d001      	beq.n	8029c38 <_strtod_l+0x2d8>
 8029c34:	f1ce 0e00 	rsb	lr, lr, #0
 8029c38:	2c00      	cmp	r4, #0
 8029c3a:	d151      	bne.n	8029ce0 <_strtod_l+0x380>
 8029c3c:	2800      	cmp	r0, #0
 8029c3e:	f47f aece 	bne.w	80299de <_strtod_l+0x7e>
 8029c42:	9a06      	ldr	r2, [sp, #24]
 8029c44:	2a00      	cmp	r2, #0
 8029c46:	f47f aeca 	bne.w	80299de <_strtod_l+0x7e>
 8029c4a:	9a04      	ldr	r2, [sp, #16]
 8029c4c:	2a00      	cmp	r2, #0
 8029c4e:	f47f aee4 	bne.w	8029a1a <_strtod_l+0xba>
 8029c52:	2b4e      	cmp	r3, #78	; 0x4e
 8029c54:	d027      	beq.n	8029ca6 <_strtod_l+0x346>
 8029c56:	dc21      	bgt.n	8029c9c <_strtod_l+0x33c>
 8029c58:	2b49      	cmp	r3, #73	; 0x49
 8029c5a:	f47f aede 	bne.w	8029a1a <_strtod_l+0xba>
 8029c5e:	49a0      	ldr	r1, [pc, #640]	; (8029ee0 <_strtod_l+0x580>)
 8029c60:	a81b      	add	r0, sp, #108	; 0x6c
 8029c62:	f002 f819 	bl	802bc98 <__match>
 8029c66:	2800      	cmp	r0, #0
 8029c68:	f43f aed7 	beq.w	8029a1a <_strtod_l+0xba>
 8029c6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8029c6e:	499d      	ldr	r1, [pc, #628]	; (8029ee4 <_strtod_l+0x584>)
 8029c70:	3b01      	subs	r3, #1
 8029c72:	a81b      	add	r0, sp, #108	; 0x6c
 8029c74:	931b      	str	r3, [sp, #108]	; 0x6c
 8029c76:	f002 f80f 	bl	802bc98 <__match>
 8029c7a:	b910      	cbnz	r0, 8029c82 <_strtod_l+0x322>
 8029c7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8029c7e:	3301      	adds	r3, #1
 8029c80:	931b      	str	r3, [sp, #108]	; 0x6c
 8029c82:	f8df b274 	ldr.w	fp, [pc, #628]	; 8029ef8 <_strtod_l+0x598>
 8029c86:	f04f 0a00 	mov.w	sl, #0
 8029c8a:	e6a8      	b.n	80299de <_strtod_l+0x7e>
 8029c8c:	210a      	movs	r1, #10
 8029c8e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8029c92:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8029c96:	e7b8      	b.n	8029c0a <_strtod_l+0x2aa>
 8029c98:	46be      	mov	lr, r7
 8029c9a:	e7c8      	b.n	8029c2e <_strtod_l+0x2ce>
 8029c9c:	2b69      	cmp	r3, #105	; 0x69
 8029c9e:	d0de      	beq.n	8029c5e <_strtod_l+0x2fe>
 8029ca0:	2b6e      	cmp	r3, #110	; 0x6e
 8029ca2:	f47f aeba 	bne.w	8029a1a <_strtod_l+0xba>
 8029ca6:	4990      	ldr	r1, [pc, #576]	; (8029ee8 <_strtod_l+0x588>)
 8029ca8:	a81b      	add	r0, sp, #108	; 0x6c
 8029caa:	f001 fff5 	bl	802bc98 <__match>
 8029cae:	2800      	cmp	r0, #0
 8029cb0:	f43f aeb3 	beq.w	8029a1a <_strtod_l+0xba>
 8029cb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8029cb6:	781b      	ldrb	r3, [r3, #0]
 8029cb8:	2b28      	cmp	r3, #40	; 0x28
 8029cba:	d10e      	bne.n	8029cda <_strtod_l+0x37a>
 8029cbc:	aa1e      	add	r2, sp, #120	; 0x78
 8029cbe:	498b      	ldr	r1, [pc, #556]	; (8029eec <_strtod_l+0x58c>)
 8029cc0:	a81b      	add	r0, sp, #108	; 0x6c
 8029cc2:	f001 fffd 	bl	802bcc0 <__hexnan>
 8029cc6:	2805      	cmp	r0, #5
 8029cc8:	d107      	bne.n	8029cda <_strtod_l+0x37a>
 8029cca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8029ccc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8029cd0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8029cd4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8029cd8:	e681      	b.n	80299de <_strtod_l+0x7e>
 8029cda:	f8df b224 	ldr.w	fp, [pc, #548]	; 8029f00 <_strtod_l+0x5a0>
 8029cde:	e7d2      	b.n	8029c86 <_strtod_l+0x326>
 8029ce0:	ebae 0302 	sub.w	r3, lr, r2
 8029ce4:	9306      	str	r3, [sp, #24]
 8029ce6:	9b05      	ldr	r3, [sp, #20]
 8029ce8:	9807      	ldr	r0, [sp, #28]
 8029cea:	2b00      	cmp	r3, #0
 8029cec:	bf08      	it	eq
 8029cee:	4623      	moveq	r3, r4
 8029cf0:	2c10      	cmp	r4, #16
 8029cf2:	9305      	str	r3, [sp, #20]
 8029cf4:	46a0      	mov	r8, r4
 8029cf6:	bfa8      	it	ge
 8029cf8:	f04f 0810 	movge.w	r8, #16
 8029cfc:	f7d6 fc0a 	bl	8000514 <__aeabi_ui2d>
 8029d00:	2c09      	cmp	r4, #9
 8029d02:	4682      	mov	sl, r0
 8029d04:	468b      	mov	fp, r1
 8029d06:	dc13      	bgt.n	8029d30 <_strtod_l+0x3d0>
 8029d08:	9b06      	ldr	r3, [sp, #24]
 8029d0a:	2b00      	cmp	r3, #0
 8029d0c:	f43f ae67 	beq.w	80299de <_strtod_l+0x7e>
 8029d10:	9b06      	ldr	r3, [sp, #24]
 8029d12:	dd7a      	ble.n	8029e0a <_strtod_l+0x4aa>
 8029d14:	2b16      	cmp	r3, #22
 8029d16:	dc61      	bgt.n	8029ddc <_strtod_l+0x47c>
 8029d18:	4a75      	ldr	r2, [pc, #468]	; (8029ef0 <_strtod_l+0x590>)
 8029d1a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8029d1e:	e9de 0100 	ldrd	r0, r1, [lr]
 8029d22:	4652      	mov	r2, sl
 8029d24:	465b      	mov	r3, fp
 8029d26:	f7d6 fc6f 	bl	8000608 <__aeabi_dmul>
 8029d2a:	4682      	mov	sl, r0
 8029d2c:	468b      	mov	fp, r1
 8029d2e:	e656      	b.n	80299de <_strtod_l+0x7e>
 8029d30:	4b6f      	ldr	r3, [pc, #444]	; (8029ef0 <_strtod_l+0x590>)
 8029d32:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8029d36:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8029d3a:	f7d6 fc65 	bl	8000608 <__aeabi_dmul>
 8029d3e:	4606      	mov	r6, r0
 8029d40:	4628      	mov	r0, r5
 8029d42:	460f      	mov	r7, r1
 8029d44:	f7d6 fbe6 	bl	8000514 <__aeabi_ui2d>
 8029d48:	4602      	mov	r2, r0
 8029d4a:	460b      	mov	r3, r1
 8029d4c:	4630      	mov	r0, r6
 8029d4e:	4639      	mov	r1, r7
 8029d50:	f7d6 faa4 	bl	800029c <__adddf3>
 8029d54:	2c0f      	cmp	r4, #15
 8029d56:	4682      	mov	sl, r0
 8029d58:	468b      	mov	fp, r1
 8029d5a:	ddd5      	ble.n	8029d08 <_strtod_l+0x3a8>
 8029d5c:	9b06      	ldr	r3, [sp, #24]
 8029d5e:	eba4 0808 	sub.w	r8, r4, r8
 8029d62:	4498      	add	r8, r3
 8029d64:	f1b8 0f00 	cmp.w	r8, #0
 8029d68:	f340 8096 	ble.w	8029e98 <_strtod_l+0x538>
 8029d6c:	f018 030f 	ands.w	r3, r8, #15
 8029d70:	d00a      	beq.n	8029d88 <_strtod_l+0x428>
 8029d72:	495f      	ldr	r1, [pc, #380]	; (8029ef0 <_strtod_l+0x590>)
 8029d74:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8029d78:	4652      	mov	r2, sl
 8029d7a:	465b      	mov	r3, fp
 8029d7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8029d80:	f7d6 fc42 	bl	8000608 <__aeabi_dmul>
 8029d84:	4682      	mov	sl, r0
 8029d86:	468b      	mov	fp, r1
 8029d88:	f038 080f 	bics.w	r8, r8, #15
 8029d8c:	d073      	beq.n	8029e76 <_strtod_l+0x516>
 8029d8e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8029d92:	dd47      	ble.n	8029e24 <_strtod_l+0x4c4>
 8029d94:	2400      	movs	r4, #0
 8029d96:	46a0      	mov	r8, r4
 8029d98:	9407      	str	r4, [sp, #28]
 8029d9a:	9405      	str	r4, [sp, #20]
 8029d9c:	2322      	movs	r3, #34	; 0x22
 8029d9e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8029ef8 <_strtod_l+0x598>
 8029da2:	f8c9 3000 	str.w	r3, [r9]
 8029da6:	f04f 0a00 	mov.w	sl, #0
 8029daa:	9b07      	ldr	r3, [sp, #28]
 8029dac:	2b00      	cmp	r3, #0
 8029dae:	f43f ae16 	beq.w	80299de <_strtod_l+0x7e>
 8029db2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8029db4:	4648      	mov	r0, r9
 8029db6:	f002 f8f2 	bl	802bf9e <_Bfree>
 8029dba:	9905      	ldr	r1, [sp, #20]
 8029dbc:	4648      	mov	r0, r9
 8029dbe:	f002 f8ee 	bl	802bf9e <_Bfree>
 8029dc2:	4641      	mov	r1, r8
 8029dc4:	4648      	mov	r0, r9
 8029dc6:	f002 f8ea 	bl	802bf9e <_Bfree>
 8029dca:	9907      	ldr	r1, [sp, #28]
 8029dcc:	4648      	mov	r0, r9
 8029dce:	f002 f8e6 	bl	802bf9e <_Bfree>
 8029dd2:	4621      	mov	r1, r4
 8029dd4:	4648      	mov	r0, r9
 8029dd6:	f002 f8e2 	bl	802bf9e <_Bfree>
 8029dda:	e600      	b.n	80299de <_strtod_l+0x7e>
 8029ddc:	9a06      	ldr	r2, [sp, #24]
 8029dde:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8029de2:	4293      	cmp	r3, r2
 8029de4:	dbba      	blt.n	8029d5c <_strtod_l+0x3fc>
 8029de6:	4d42      	ldr	r5, [pc, #264]	; (8029ef0 <_strtod_l+0x590>)
 8029de8:	f1c4 040f 	rsb	r4, r4, #15
 8029dec:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8029df0:	4652      	mov	r2, sl
 8029df2:	465b      	mov	r3, fp
 8029df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8029df8:	f7d6 fc06 	bl	8000608 <__aeabi_dmul>
 8029dfc:	9b06      	ldr	r3, [sp, #24]
 8029dfe:	1b1c      	subs	r4, r3, r4
 8029e00:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8029e04:	e9d5 2300 	ldrd	r2, r3, [r5]
 8029e08:	e78d      	b.n	8029d26 <_strtod_l+0x3c6>
 8029e0a:	f113 0f16 	cmn.w	r3, #22
 8029e0e:	dba5      	blt.n	8029d5c <_strtod_l+0x3fc>
 8029e10:	4a37      	ldr	r2, [pc, #220]	; (8029ef0 <_strtod_l+0x590>)
 8029e12:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8029e16:	e9d2 2300 	ldrd	r2, r3, [r2]
 8029e1a:	4650      	mov	r0, sl
 8029e1c:	4659      	mov	r1, fp
 8029e1e:	f7d6 fd1d 	bl	800085c <__aeabi_ddiv>
 8029e22:	e782      	b.n	8029d2a <_strtod_l+0x3ca>
 8029e24:	2300      	movs	r3, #0
 8029e26:	4e33      	ldr	r6, [pc, #204]	; (8029ef4 <_strtod_l+0x594>)
 8029e28:	ea4f 1828 	mov.w	r8, r8, asr #4
 8029e2c:	4650      	mov	r0, sl
 8029e2e:	4659      	mov	r1, fp
 8029e30:	461d      	mov	r5, r3
 8029e32:	f1b8 0f01 	cmp.w	r8, #1
 8029e36:	dc21      	bgt.n	8029e7c <_strtod_l+0x51c>
 8029e38:	b10b      	cbz	r3, 8029e3e <_strtod_l+0x4de>
 8029e3a:	4682      	mov	sl, r0
 8029e3c:	468b      	mov	fp, r1
 8029e3e:	4b2d      	ldr	r3, [pc, #180]	; (8029ef4 <_strtod_l+0x594>)
 8029e40:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8029e44:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8029e48:	4652      	mov	r2, sl
 8029e4a:	465b      	mov	r3, fp
 8029e4c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8029e50:	f7d6 fbda 	bl	8000608 <__aeabi_dmul>
 8029e54:	4b28      	ldr	r3, [pc, #160]	; (8029ef8 <_strtod_l+0x598>)
 8029e56:	460a      	mov	r2, r1
 8029e58:	400b      	ands	r3, r1
 8029e5a:	4928      	ldr	r1, [pc, #160]	; (8029efc <_strtod_l+0x59c>)
 8029e5c:	428b      	cmp	r3, r1
 8029e5e:	4682      	mov	sl, r0
 8029e60:	d898      	bhi.n	8029d94 <_strtod_l+0x434>
 8029e62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8029e66:	428b      	cmp	r3, r1
 8029e68:	bf86      	itte	hi
 8029e6a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8029f04 <_strtod_l+0x5a4>
 8029e6e:	f04f 3aff 	movhi.w	sl, #4294967295
 8029e72:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8029e76:	2300      	movs	r3, #0
 8029e78:	9304      	str	r3, [sp, #16]
 8029e7a:	e077      	b.n	8029f6c <_strtod_l+0x60c>
 8029e7c:	f018 0f01 	tst.w	r8, #1
 8029e80:	d006      	beq.n	8029e90 <_strtod_l+0x530>
 8029e82:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8029e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029e8a:	f7d6 fbbd 	bl	8000608 <__aeabi_dmul>
 8029e8e:	2301      	movs	r3, #1
 8029e90:	3501      	adds	r5, #1
 8029e92:	ea4f 0868 	mov.w	r8, r8, asr #1
 8029e96:	e7cc      	b.n	8029e32 <_strtod_l+0x4d2>
 8029e98:	d0ed      	beq.n	8029e76 <_strtod_l+0x516>
 8029e9a:	f1c8 0800 	rsb	r8, r8, #0
 8029e9e:	f018 020f 	ands.w	r2, r8, #15
 8029ea2:	d00a      	beq.n	8029eba <_strtod_l+0x55a>
 8029ea4:	4b12      	ldr	r3, [pc, #72]	; (8029ef0 <_strtod_l+0x590>)
 8029ea6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8029eaa:	4650      	mov	r0, sl
 8029eac:	4659      	mov	r1, fp
 8029eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029eb2:	f7d6 fcd3 	bl	800085c <__aeabi_ddiv>
 8029eb6:	4682      	mov	sl, r0
 8029eb8:	468b      	mov	fp, r1
 8029eba:	ea5f 1828 	movs.w	r8, r8, asr #4
 8029ebe:	d0da      	beq.n	8029e76 <_strtod_l+0x516>
 8029ec0:	f1b8 0f1f 	cmp.w	r8, #31
 8029ec4:	dd20      	ble.n	8029f08 <_strtod_l+0x5a8>
 8029ec6:	2400      	movs	r4, #0
 8029ec8:	46a0      	mov	r8, r4
 8029eca:	9407      	str	r4, [sp, #28]
 8029ecc:	9405      	str	r4, [sp, #20]
 8029ece:	2322      	movs	r3, #34	; 0x22
 8029ed0:	f04f 0a00 	mov.w	sl, #0
 8029ed4:	f04f 0b00 	mov.w	fp, #0
 8029ed8:	f8c9 3000 	str.w	r3, [r9]
 8029edc:	e765      	b.n	8029daa <_strtod_l+0x44a>
 8029ede:	bf00      	nop
 8029ee0:	0802e5e6 	.word	0x0802e5e6
 8029ee4:	0802e673 	.word	0x0802e673
 8029ee8:	0802e5ee 	.word	0x0802e5ee
 8029eec:	0802e630 	.word	0x0802e630
 8029ef0:	0802e718 	.word	0x0802e718
 8029ef4:	0802e6f0 	.word	0x0802e6f0
 8029ef8:	7ff00000 	.word	0x7ff00000
 8029efc:	7ca00000 	.word	0x7ca00000
 8029f00:	fff80000 	.word	0xfff80000
 8029f04:	7fefffff 	.word	0x7fefffff
 8029f08:	f018 0310 	ands.w	r3, r8, #16
 8029f0c:	bf18      	it	ne
 8029f0e:	236a      	movne	r3, #106	; 0x6a
 8029f10:	4da0      	ldr	r5, [pc, #640]	; (802a194 <_strtod_l+0x834>)
 8029f12:	9304      	str	r3, [sp, #16]
 8029f14:	4650      	mov	r0, sl
 8029f16:	4659      	mov	r1, fp
 8029f18:	2300      	movs	r3, #0
 8029f1a:	f1b8 0f00 	cmp.w	r8, #0
 8029f1e:	f300 810a 	bgt.w	802a136 <_strtod_l+0x7d6>
 8029f22:	b10b      	cbz	r3, 8029f28 <_strtod_l+0x5c8>
 8029f24:	4682      	mov	sl, r0
 8029f26:	468b      	mov	fp, r1
 8029f28:	9b04      	ldr	r3, [sp, #16]
 8029f2a:	b1bb      	cbz	r3, 8029f5c <_strtod_l+0x5fc>
 8029f2c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8029f30:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8029f34:	2b00      	cmp	r3, #0
 8029f36:	4659      	mov	r1, fp
 8029f38:	dd10      	ble.n	8029f5c <_strtod_l+0x5fc>
 8029f3a:	2b1f      	cmp	r3, #31
 8029f3c:	f340 8107 	ble.w	802a14e <_strtod_l+0x7ee>
 8029f40:	2b34      	cmp	r3, #52	; 0x34
 8029f42:	bfde      	ittt	le
 8029f44:	3b20      	suble	r3, #32
 8029f46:	f04f 32ff 	movle.w	r2, #4294967295
 8029f4a:	fa02 f303 	lslle.w	r3, r2, r3
 8029f4e:	f04f 0a00 	mov.w	sl, #0
 8029f52:	bfcc      	ite	gt
 8029f54:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8029f58:	ea03 0b01 	andle.w	fp, r3, r1
 8029f5c:	2200      	movs	r2, #0
 8029f5e:	2300      	movs	r3, #0
 8029f60:	4650      	mov	r0, sl
 8029f62:	4659      	mov	r1, fp
 8029f64:	f7d6 fdb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8029f68:	2800      	cmp	r0, #0
 8029f6a:	d1ac      	bne.n	8029ec6 <_strtod_l+0x566>
 8029f6c:	9b07      	ldr	r3, [sp, #28]
 8029f6e:	9300      	str	r3, [sp, #0]
 8029f70:	9a05      	ldr	r2, [sp, #20]
 8029f72:	9908      	ldr	r1, [sp, #32]
 8029f74:	4623      	mov	r3, r4
 8029f76:	4648      	mov	r0, r9
 8029f78:	f002 f863 	bl	802c042 <__s2b>
 8029f7c:	9007      	str	r0, [sp, #28]
 8029f7e:	2800      	cmp	r0, #0
 8029f80:	f43f af08 	beq.w	8029d94 <_strtod_l+0x434>
 8029f84:	9a06      	ldr	r2, [sp, #24]
 8029f86:	9b06      	ldr	r3, [sp, #24]
 8029f88:	2a00      	cmp	r2, #0
 8029f8a:	f1c3 0300 	rsb	r3, r3, #0
 8029f8e:	bfa8      	it	ge
 8029f90:	2300      	movge	r3, #0
 8029f92:	930e      	str	r3, [sp, #56]	; 0x38
 8029f94:	2400      	movs	r4, #0
 8029f96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8029f9a:	9316      	str	r3, [sp, #88]	; 0x58
 8029f9c:	46a0      	mov	r8, r4
 8029f9e:	9b07      	ldr	r3, [sp, #28]
 8029fa0:	4648      	mov	r0, r9
 8029fa2:	6859      	ldr	r1, [r3, #4]
 8029fa4:	f001 ffc7 	bl	802bf36 <_Balloc>
 8029fa8:	9005      	str	r0, [sp, #20]
 8029faa:	2800      	cmp	r0, #0
 8029fac:	f43f aef6 	beq.w	8029d9c <_strtod_l+0x43c>
 8029fb0:	9b07      	ldr	r3, [sp, #28]
 8029fb2:	691a      	ldr	r2, [r3, #16]
 8029fb4:	3202      	adds	r2, #2
 8029fb6:	f103 010c 	add.w	r1, r3, #12
 8029fba:	0092      	lsls	r2, r2, #2
 8029fbc:	300c      	adds	r0, #12
 8029fbe:	f7fe fbcb 	bl	8028758 <memcpy>
 8029fc2:	aa1e      	add	r2, sp, #120	; 0x78
 8029fc4:	a91d      	add	r1, sp, #116	; 0x74
 8029fc6:	ec4b ab10 	vmov	d0, sl, fp
 8029fca:	4648      	mov	r0, r9
 8029fcc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8029fd0:	f002 faf2 	bl	802c5b8 <__d2b>
 8029fd4:	901c      	str	r0, [sp, #112]	; 0x70
 8029fd6:	2800      	cmp	r0, #0
 8029fd8:	f43f aee0 	beq.w	8029d9c <_strtod_l+0x43c>
 8029fdc:	2101      	movs	r1, #1
 8029fde:	4648      	mov	r0, r9
 8029fe0:	f002 f8bb 	bl	802c15a <__i2b>
 8029fe4:	4680      	mov	r8, r0
 8029fe6:	2800      	cmp	r0, #0
 8029fe8:	f43f aed8 	beq.w	8029d9c <_strtod_l+0x43c>
 8029fec:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8029fee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8029ff0:	2e00      	cmp	r6, #0
 8029ff2:	bfab      	itete	ge
 8029ff4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8029ff6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8029ff8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8029ffa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8029ffc:	bfac      	ite	ge
 8029ffe:	18f7      	addge	r7, r6, r3
 802a000:	1b9d      	sublt	r5, r3, r6
 802a002:	9b04      	ldr	r3, [sp, #16]
 802a004:	1af6      	subs	r6, r6, r3
 802a006:	4416      	add	r6, r2
 802a008:	4b63      	ldr	r3, [pc, #396]	; (802a198 <_strtod_l+0x838>)
 802a00a:	3e01      	subs	r6, #1
 802a00c:	429e      	cmp	r6, r3
 802a00e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802a012:	f280 80af 	bge.w	802a174 <_strtod_l+0x814>
 802a016:	1b9b      	subs	r3, r3, r6
 802a018:	2b1f      	cmp	r3, #31
 802a01a:	eba2 0203 	sub.w	r2, r2, r3
 802a01e:	f04f 0101 	mov.w	r1, #1
 802a022:	f300 809b 	bgt.w	802a15c <_strtod_l+0x7fc>
 802a026:	fa01 f303 	lsl.w	r3, r1, r3
 802a02a:	930f      	str	r3, [sp, #60]	; 0x3c
 802a02c:	2300      	movs	r3, #0
 802a02e:	930a      	str	r3, [sp, #40]	; 0x28
 802a030:	18be      	adds	r6, r7, r2
 802a032:	9b04      	ldr	r3, [sp, #16]
 802a034:	42b7      	cmp	r7, r6
 802a036:	4415      	add	r5, r2
 802a038:	441d      	add	r5, r3
 802a03a:	463b      	mov	r3, r7
 802a03c:	bfa8      	it	ge
 802a03e:	4633      	movge	r3, r6
 802a040:	42ab      	cmp	r3, r5
 802a042:	bfa8      	it	ge
 802a044:	462b      	movge	r3, r5
 802a046:	2b00      	cmp	r3, #0
 802a048:	bfc2      	ittt	gt
 802a04a:	1af6      	subgt	r6, r6, r3
 802a04c:	1aed      	subgt	r5, r5, r3
 802a04e:	1aff      	subgt	r7, r7, r3
 802a050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802a052:	b1bb      	cbz	r3, 802a084 <_strtod_l+0x724>
 802a054:	4641      	mov	r1, r8
 802a056:	461a      	mov	r2, r3
 802a058:	4648      	mov	r0, r9
 802a05a:	f002 f91d 	bl	802c298 <__pow5mult>
 802a05e:	4680      	mov	r8, r0
 802a060:	2800      	cmp	r0, #0
 802a062:	f43f ae9b 	beq.w	8029d9c <_strtod_l+0x43c>
 802a066:	4601      	mov	r1, r0
 802a068:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 802a06a:	4648      	mov	r0, r9
 802a06c:	f002 f87e 	bl	802c16c <__multiply>
 802a070:	900c      	str	r0, [sp, #48]	; 0x30
 802a072:	2800      	cmp	r0, #0
 802a074:	f43f ae92 	beq.w	8029d9c <_strtod_l+0x43c>
 802a078:	991c      	ldr	r1, [sp, #112]	; 0x70
 802a07a:	4648      	mov	r0, r9
 802a07c:	f001 ff8f 	bl	802bf9e <_Bfree>
 802a080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a082:	931c      	str	r3, [sp, #112]	; 0x70
 802a084:	2e00      	cmp	r6, #0
 802a086:	dc7a      	bgt.n	802a17e <_strtod_l+0x81e>
 802a088:	9b06      	ldr	r3, [sp, #24]
 802a08a:	2b00      	cmp	r3, #0
 802a08c:	dd08      	ble.n	802a0a0 <_strtod_l+0x740>
 802a08e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802a090:	9905      	ldr	r1, [sp, #20]
 802a092:	4648      	mov	r0, r9
 802a094:	f002 f900 	bl	802c298 <__pow5mult>
 802a098:	9005      	str	r0, [sp, #20]
 802a09a:	2800      	cmp	r0, #0
 802a09c:	f43f ae7e 	beq.w	8029d9c <_strtod_l+0x43c>
 802a0a0:	2d00      	cmp	r5, #0
 802a0a2:	dd08      	ble.n	802a0b6 <_strtod_l+0x756>
 802a0a4:	462a      	mov	r2, r5
 802a0a6:	9905      	ldr	r1, [sp, #20]
 802a0a8:	4648      	mov	r0, r9
 802a0aa:	f002 f943 	bl	802c334 <__lshift>
 802a0ae:	9005      	str	r0, [sp, #20]
 802a0b0:	2800      	cmp	r0, #0
 802a0b2:	f43f ae73 	beq.w	8029d9c <_strtod_l+0x43c>
 802a0b6:	2f00      	cmp	r7, #0
 802a0b8:	dd08      	ble.n	802a0cc <_strtod_l+0x76c>
 802a0ba:	4641      	mov	r1, r8
 802a0bc:	463a      	mov	r2, r7
 802a0be:	4648      	mov	r0, r9
 802a0c0:	f002 f938 	bl	802c334 <__lshift>
 802a0c4:	4680      	mov	r8, r0
 802a0c6:	2800      	cmp	r0, #0
 802a0c8:	f43f ae68 	beq.w	8029d9c <_strtod_l+0x43c>
 802a0cc:	9a05      	ldr	r2, [sp, #20]
 802a0ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 802a0d0:	4648      	mov	r0, r9
 802a0d2:	f002 f99d 	bl	802c410 <__mdiff>
 802a0d6:	4604      	mov	r4, r0
 802a0d8:	2800      	cmp	r0, #0
 802a0da:	f43f ae5f 	beq.w	8029d9c <_strtod_l+0x43c>
 802a0de:	68c3      	ldr	r3, [r0, #12]
 802a0e0:	930c      	str	r3, [sp, #48]	; 0x30
 802a0e2:	2300      	movs	r3, #0
 802a0e4:	60c3      	str	r3, [r0, #12]
 802a0e6:	4641      	mov	r1, r8
 802a0e8:	f002 f978 	bl	802c3dc <__mcmp>
 802a0ec:	2800      	cmp	r0, #0
 802a0ee:	da55      	bge.n	802a19c <_strtod_l+0x83c>
 802a0f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a0f2:	b9e3      	cbnz	r3, 802a12e <_strtod_l+0x7ce>
 802a0f4:	f1ba 0f00 	cmp.w	sl, #0
 802a0f8:	d119      	bne.n	802a12e <_strtod_l+0x7ce>
 802a0fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802a0fe:	b9b3      	cbnz	r3, 802a12e <_strtod_l+0x7ce>
 802a100:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802a104:	0d1b      	lsrs	r3, r3, #20
 802a106:	051b      	lsls	r3, r3, #20
 802a108:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 802a10c:	d90f      	bls.n	802a12e <_strtod_l+0x7ce>
 802a10e:	6963      	ldr	r3, [r4, #20]
 802a110:	b913      	cbnz	r3, 802a118 <_strtod_l+0x7b8>
 802a112:	6923      	ldr	r3, [r4, #16]
 802a114:	2b01      	cmp	r3, #1
 802a116:	dd0a      	ble.n	802a12e <_strtod_l+0x7ce>
 802a118:	4621      	mov	r1, r4
 802a11a:	2201      	movs	r2, #1
 802a11c:	4648      	mov	r0, r9
 802a11e:	f002 f909 	bl	802c334 <__lshift>
 802a122:	4641      	mov	r1, r8
 802a124:	4604      	mov	r4, r0
 802a126:	f002 f959 	bl	802c3dc <__mcmp>
 802a12a:	2800      	cmp	r0, #0
 802a12c:	dc67      	bgt.n	802a1fe <_strtod_l+0x89e>
 802a12e:	9b04      	ldr	r3, [sp, #16]
 802a130:	2b00      	cmp	r3, #0
 802a132:	d171      	bne.n	802a218 <_strtod_l+0x8b8>
 802a134:	e63d      	b.n	8029db2 <_strtod_l+0x452>
 802a136:	f018 0f01 	tst.w	r8, #1
 802a13a:	d004      	beq.n	802a146 <_strtod_l+0x7e6>
 802a13c:	e9d5 2300 	ldrd	r2, r3, [r5]
 802a140:	f7d6 fa62 	bl	8000608 <__aeabi_dmul>
 802a144:	2301      	movs	r3, #1
 802a146:	ea4f 0868 	mov.w	r8, r8, asr #1
 802a14a:	3508      	adds	r5, #8
 802a14c:	e6e5      	b.n	8029f1a <_strtod_l+0x5ba>
 802a14e:	f04f 32ff 	mov.w	r2, #4294967295
 802a152:	fa02 f303 	lsl.w	r3, r2, r3
 802a156:	ea03 0a0a 	and.w	sl, r3, sl
 802a15a:	e6ff      	b.n	8029f5c <_strtod_l+0x5fc>
 802a15c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 802a160:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 802a164:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 802a168:	36e2      	adds	r6, #226	; 0xe2
 802a16a:	fa01 f306 	lsl.w	r3, r1, r6
 802a16e:	930a      	str	r3, [sp, #40]	; 0x28
 802a170:	910f      	str	r1, [sp, #60]	; 0x3c
 802a172:	e75d      	b.n	802a030 <_strtod_l+0x6d0>
 802a174:	2300      	movs	r3, #0
 802a176:	930a      	str	r3, [sp, #40]	; 0x28
 802a178:	2301      	movs	r3, #1
 802a17a:	930f      	str	r3, [sp, #60]	; 0x3c
 802a17c:	e758      	b.n	802a030 <_strtod_l+0x6d0>
 802a17e:	4632      	mov	r2, r6
 802a180:	991c      	ldr	r1, [sp, #112]	; 0x70
 802a182:	4648      	mov	r0, r9
 802a184:	f002 f8d6 	bl	802c334 <__lshift>
 802a188:	901c      	str	r0, [sp, #112]	; 0x70
 802a18a:	2800      	cmp	r0, #0
 802a18c:	f47f af7c 	bne.w	802a088 <_strtod_l+0x728>
 802a190:	e604      	b.n	8029d9c <_strtod_l+0x43c>
 802a192:	bf00      	nop
 802a194:	0802e648 	.word	0x0802e648
 802a198:	fffffc02 	.word	0xfffffc02
 802a19c:	465d      	mov	r5, fp
 802a19e:	f040 8086 	bne.w	802a2ae <_strtod_l+0x94e>
 802a1a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802a1a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802a1a8:	b32a      	cbz	r2, 802a1f6 <_strtod_l+0x896>
 802a1aa:	4aaf      	ldr	r2, [pc, #700]	; (802a468 <_strtod_l+0xb08>)
 802a1ac:	4293      	cmp	r3, r2
 802a1ae:	d153      	bne.n	802a258 <_strtod_l+0x8f8>
 802a1b0:	9b04      	ldr	r3, [sp, #16]
 802a1b2:	4650      	mov	r0, sl
 802a1b4:	b1d3      	cbz	r3, 802a1ec <_strtod_l+0x88c>
 802a1b6:	4aad      	ldr	r2, [pc, #692]	; (802a46c <_strtod_l+0xb0c>)
 802a1b8:	402a      	ands	r2, r5
 802a1ba:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 802a1be:	f04f 31ff 	mov.w	r1, #4294967295
 802a1c2:	d816      	bhi.n	802a1f2 <_strtod_l+0x892>
 802a1c4:	0d12      	lsrs	r2, r2, #20
 802a1c6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 802a1ca:	fa01 f303 	lsl.w	r3, r1, r3
 802a1ce:	4298      	cmp	r0, r3
 802a1d0:	d142      	bne.n	802a258 <_strtod_l+0x8f8>
 802a1d2:	4ba7      	ldr	r3, [pc, #668]	; (802a470 <_strtod_l+0xb10>)
 802a1d4:	429d      	cmp	r5, r3
 802a1d6:	d102      	bne.n	802a1de <_strtod_l+0x87e>
 802a1d8:	3001      	adds	r0, #1
 802a1da:	f43f addf 	beq.w	8029d9c <_strtod_l+0x43c>
 802a1de:	4ba3      	ldr	r3, [pc, #652]	; (802a46c <_strtod_l+0xb0c>)
 802a1e0:	402b      	ands	r3, r5
 802a1e2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 802a1e6:	f04f 0a00 	mov.w	sl, #0
 802a1ea:	e7a0      	b.n	802a12e <_strtod_l+0x7ce>
 802a1ec:	f04f 33ff 	mov.w	r3, #4294967295
 802a1f0:	e7ed      	b.n	802a1ce <_strtod_l+0x86e>
 802a1f2:	460b      	mov	r3, r1
 802a1f4:	e7eb      	b.n	802a1ce <_strtod_l+0x86e>
 802a1f6:	bb7b      	cbnz	r3, 802a258 <_strtod_l+0x8f8>
 802a1f8:	f1ba 0f00 	cmp.w	sl, #0
 802a1fc:	d12c      	bne.n	802a258 <_strtod_l+0x8f8>
 802a1fe:	9904      	ldr	r1, [sp, #16]
 802a200:	4a9a      	ldr	r2, [pc, #616]	; (802a46c <_strtod_l+0xb0c>)
 802a202:	465b      	mov	r3, fp
 802a204:	b1f1      	cbz	r1, 802a244 <_strtod_l+0x8e4>
 802a206:	ea02 010b 	and.w	r1, r2, fp
 802a20a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 802a20e:	dc19      	bgt.n	802a244 <_strtod_l+0x8e4>
 802a210:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802a214:	f77f ae5b 	ble.w	8029ece <_strtod_l+0x56e>
 802a218:	4a96      	ldr	r2, [pc, #600]	; (802a474 <_strtod_l+0xb14>)
 802a21a:	2300      	movs	r3, #0
 802a21c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 802a220:	4650      	mov	r0, sl
 802a222:	4659      	mov	r1, fp
 802a224:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 802a228:	f7d6 f9ee 	bl	8000608 <__aeabi_dmul>
 802a22c:	4682      	mov	sl, r0
 802a22e:	468b      	mov	fp, r1
 802a230:	2900      	cmp	r1, #0
 802a232:	f47f adbe 	bne.w	8029db2 <_strtod_l+0x452>
 802a236:	2800      	cmp	r0, #0
 802a238:	f47f adbb 	bne.w	8029db2 <_strtod_l+0x452>
 802a23c:	2322      	movs	r3, #34	; 0x22
 802a23e:	f8c9 3000 	str.w	r3, [r9]
 802a242:	e5b6      	b.n	8029db2 <_strtod_l+0x452>
 802a244:	4013      	ands	r3, r2
 802a246:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802a24a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 802a24e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802a252:	f04f 3aff 	mov.w	sl, #4294967295
 802a256:	e76a      	b.n	802a12e <_strtod_l+0x7ce>
 802a258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a25a:	b193      	cbz	r3, 802a282 <_strtod_l+0x922>
 802a25c:	422b      	tst	r3, r5
 802a25e:	f43f af66 	beq.w	802a12e <_strtod_l+0x7ce>
 802a262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a264:	9a04      	ldr	r2, [sp, #16]
 802a266:	4650      	mov	r0, sl
 802a268:	4659      	mov	r1, fp
 802a26a:	b173      	cbz	r3, 802a28a <_strtod_l+0x92a>
 802a26c:	f7ff fb5c 	bl	8029928 <sulp>
 802a270:	4602      	mov	r2, r0
 802a272:	460b      	mov	r3, r1
 802a274:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802a278:	f7d6 f810 	bl	800029c <__adddf3>
 802a27c:	4682      	mov	sl, r0
 802a27e:	468b      	mov	fp, r1
 802a280:	e755      	b.n	802a12e <_strtod_l+0x7ce>
 802a282:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802a284:	ea13 0f0a 	tst.w	r3, sl
 802a288:	e7e9      	b.n	802a25e <_strtod_l+0x8fe>
 802a28a:	f7ff fb4d 	bl	8029928 <sulp>
 802a28e:	4602      	mov	r2, r0
 802a290:	460b      	mov	r3, r1
 802a292:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802a296:	f7d5 ffff 	bl	8000298 <__aeabi_dsub>
 802a29a:	2200      	movs	r2, #0
 802a29c:	2300      	movs	r3, #0
 802a29e:	4682      	mov	sl, r0
 802a2a0:	468b      	mov	fp, r1
 802a2a2:	f7d6 fc19 	bl	8000ad8 <__aeabi_dcmpeq>
 802a2a6:	2800      	cmp	r0, #0
 802a2a8:	f47f ae11 	bne.w	8029ece <_strtod_l+0x56e>
 802a2ac:	e73f      	b.n	802a12e <_strtod_l+0x7ce>
 802a2ae:	4641      	mov	r1, r8
 802a2b0:	4620      	mov	r0, r4
 802a2b2:	f002 f9d0 	bl	802c656 <__ratio>
 802a2b6:	ec57 6b10 	vmov	r6, r7, d0
 802a2ba:	2200      	movs	r2, #0
 802a2bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802a2c0:	ee10 0a10 	vmov	r0, s0
 802a2c4:	4639      	mov	r1, r7
 802a2c6:	f7d6 fc1b 	bl	8000b00 <__aeabi_dcmple>
 802a2ca:	2800      	cmp	r0, #0
 802a2cc:	d077      	beq.n	802a3be <_strtod_l+0xa5e>
 802a2ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a2d0:	2b00      	cmp	r3, #0
 802a2d2:	d04a      	beq.n	802a36a <_strtod_l+0xa0a>
 802a2d4:	4b68      	ldr	r3, [pc, #416]	; (802a478 <_strtod_l+0xb18>)
 802a2d6:	2200      	movs	r2, #0
 802a2d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 802a2dc:	4f66      	ldr	r7, [pc, #408]	; (802a478 <_strtod_l+0xb18>)
 802a2de:	2600      	movs	r6, #0
 802a2e0:	4b62      	ldr	r3, [pc, #392]	; (802a46c <_strtod_l+0xb0c>)
 802a2e2:	402b      	ands	r3, r5
 802a2e4:	930f      	str	r3, [sp, #60]	; 0x3c
 802a2e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a2e8:	4b64      	ldr	r3, [pc, #400]	; (802a47c <_strtod_l+0xb1c>)
 802a2ea:	429a      	cmp	r2, r3
 802a2ec:	f040 80ce 	bne.w	802a48c <_strtod_l+0xb2c>
 802a2f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802a2f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802a2f8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 802a2fc:	ec4b ab10 	vmov	d0, sl, fp
 802a300:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 802a304:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 802a308:	f002 f8e0 	bl	802c4cc <__ulp>
 802a30c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802a310:	ec53 2b10 	vmov	r2, r3, d0
 802a314:	f7d6 f978 	bl	8000608 <__aeabi_dmul>
 802a318:	4652      	mov	r2, sl
 802a31a:	465b      	mov	r3, fp
 802a31c:	f7d5 ffbe 	bl	800029c <__adddf3>
 802a320:	460b      	mov	r3, r1
 802a322:	4952      	ldr	r1, [pc, #328]	; (802a46c <_strtod_l+0xb0c>)
 802a324:	4a56      	ldr	r2, [pc, #344]	; (802a480 <_strtod_l+0xb20>)
 802a326:	4019      	ands	r1, r3
 802a328:	4291      	cmp	r1, r2
 802a32a:	4682      	mov	sl, r0
 802a32c:	d95b      	bls.n	802a3e6 <_strtod_l+0xa86>
 802a32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a330:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 802a334:	4293      	cmp	r3, r2
 802a336:	d103      	bne.n	802a340 <_strtod_l+0x9e0>
 802a338:	9b08      	ldr	r3, [sp, #32]
 802a33a:	3301      	adds	r3, #1
 802a33c:	f43f ad2e 	beq.w	8029d9c <_strtod_l+0x43c>
 802a340:	f8df b12c 	ldr.w	fp, [pc, #300]	; 802a470 <_strtod_l+0xb10>
 802a344:	f04f 3aff 	mov.w	sl, #4294967295
 802a348:	991c      	ldr	r1, [sp, #112]	; 0x70
 802a34a:	4648      	mov	r0, r9
 802a34c:	f001 fe27 	bl	802bf9e <_Bfree>
 802a350:	9905      	ldr	r1, [sp, #20]
 802a352:	4648      	mov	r0, r9
 802a354:	f001 fe23 	bl	802bf9e <_Bfree>
 802a358:	4641      	mov	r1, r8
 802a35a:	4648      	mov	r0, r9
 802a35c:	f001 fe1f 	bl	802bf9e <_Bfree>
 802a360:	4621      	mov	r1, r4
 802a362:	4648      	mov	r0, r9
 802a364:	f001 fe1b 	bl	802bf9e <_Bfree>
 802a368:	e619      	b.n	8029f9e <_strtod_l+0x63e>
 802a36a:	f1ba 0f00 	cmp.w	sl, #0
 802a36e:	d11a      	bne.n	802a3a6 <_strtod_l+0xa46>
 802a370:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802a374:	b9eb      	cbnz	r3, 802a3b2 <_strtod_l+0xa52>
 802a376:	2200      	movs	r2, #0
 802a378:	4b3f      	ldr	r3, [pc, #252]	; (802a478 <_strtod_l+0xb18>)
 802a37a:	4630      	mov	r0, r6
 802a37c:	4639      	mov	r1, r7
 802a37e:	f7d6 fbb5 	bl	8000aec <__aeabi_dcmplt>
 802a382:	b9c8      	cbnz	r0, 802a3b8 <_strtod_l+0xa58>
 802a384:	4630      	mov	r0, r6
 802a386:	4639      	mov	r1, r7
 802a388:	2200      	movs	r2, #0
 802a38a:	4b3e      	ldr	r3, [pc, #248]	; (802a484 <_strtod_l+0xb24>)
 802a38c:	f7d6 f93c 	bl	8000608 <__aeabi_dmul>
 802a390:	4606      	mov	r6, r0
 802a392:	460f      	mov	r7, r1
 802a394:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 802a398:	9618      	str	r6, [sp, #96]	; 0x60
 802a39a:	9319      	str	r3, [sp, #100]	; 0x64
 802a39c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 802a3a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 802a3a4:	e79c      	b.n	802a2e0 <_strtod_l+0x980>
 802a3a6:	f1ba 0f01 	cmp.w	sl, #1
 802a3aa:	d102      	bne.n	802a3b2 <_strtod_l+0xa52>
 802a3ac:	2d00      	cmp	r5, #0
 802a3ae:	f43f ad8e 	beq.w	8029ece <_strtod_l+0x56e>
 802a3b2:	2200      	movs	r2, #0
 802a3b4:	4b34      	ldr	r3, [pc, #208]	; (802a488 <_strtod_l+0xb28>)
 802a3b6:	e78f      	b.n	802a2d8 <_strtod_l+0x978>
 802a3b8:	2600      	movs	r6, #0
 802a3ba:	4f32      	ldr	r7, [pc, #200]	; (802a484 <_strtod_l+0xb24>)
 802a3bc:	e7ea      	b.n	802a394 <_strtod_l+0xa34>
 802a3be:	4b31      	ldr	r3, [pc, #196]	; (802a484 <_strtod_l+0xb24>)
 802a3c0:	4630      	mov	r0, r6
 802a3c2:	4639      	mov	r1, r7
 802a3c4:	2200      	movs	r2, #0
 802a3c6:	f7d6 f91f 	bl	8000608 <__aeabi_dmul>
 802a3ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a3cc:	4606      	mov	r6, r0
 802a3ce:	460f      	mov	r7, r1
 802a3d0:	b933      	cbnz	r3, 802a3e0 <_strtod_l+0xa80>
 802a3d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802a3d6:	9010      	str	r0, [sp, #64]	; 0x40
 802a3d8:	9311      	str	r3, [sp, #68]	; 0x44
 802a3da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802a3de:	e7df      	b.n	802a3a0 <_strtod_l+0xa40>
 802a3e0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 802a3e4:	e7f9      	b.n	802a3da <_strtod_l+0xa7a>
 802a3e6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 802a3ea:	9b04      	ldr	r3, [sp, #16]
 802a3ec:	2b00      	cmp	r3, #0
 802a3ee:	d1ab      	bne.n	802a348 <_strtod_l+0x9e8>
 802a3f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802a3f4:	0d1b      	lsrs	r3, r3, #20
 802a3f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a3f8:	051b      	lsls	r3, r3, #20
 802a3fa:	429a      	cmp	r2, r3
 802a3fc:	465d      	mov	r5, fp
 802a3fe:	d1a3      	bne.n	802a348 <_strtod_l+0x9e8>
 802a400:	4639      	mov	r1, r7
 802a402:	4630      	mov	r0, r6
 802a404:	f7d6 fbb0 	bl	8000b68 <__aeabi_d2iz>
 802a408:	f7d6 f894 	bl	8000534 <__aeabi_i2d>
 802a40c:	460b      	mov	r3, r1
 802a40e:	4602      	mov	r2, r0
 802a410:	4639      	mov	r1, r7
 802a412:	4630      	mov	r0, r6
 802a414:	f7d5 ff40 	bl	8000298 <__aeabi_dsub>
 802a418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a41a:	4606      	mov	r6, r0
 802a41c:	460f      	mov	r7, r1
 802a41e:	b933      	cbnz	r3, 802a42e <_strtod_l+0xace>
 802a420:	f1ba 0f00 	cmp.w	sl, #0
 802a424:	d103      	bne.n	802a42e <_strtod_l+0xace>
 802a426:	f3cb 0513 	ubfx	r5, fp, #0, #20
 802a42a:	2d00      	cmp	r5, #0
 802a42c:	d06d      	beq.n	802a50a <_strtod_l+0xbaa>
 802a42e:	a30a      	add	r3, pc, #40	; (adr r3, 802a458 <_strtod_l+0xaf8>)
 802a430:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a434:	4630      	mov	r0, r6
 802a436:	4639      	mov	r1, r7
 802a438:	f7d6 fb58 	bl	8000aec <__aeabi_dcmplt>
 802a43c:	2800      	cmp	r0, #0
 802a43e:	f47f acb8 	bne.w	8029db2 <_strtod_l+0x452>
 802a442:	a307      	add	r3, pc, #28	; (adr r3, 802a460 <_strtod_l+0xb00>)
 802a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a448:	4630      	mov	r0, r6
 802a44a:	4639      	mov	r1, r7
 802a44c:	f7d6 fb6c 	bl	8000b28 <__aeabi_dcmpgt>
 802a450:	2800      	cmp	r0, #0
 802a452:	f43f af79 	beq.w	802a348 <_strtod_l+0x9e8>
 802a456:	e4ac      	b.n	8029db2 <_strtod_l+0x452>
 802a458:	94a03595 	.word	0x94a03595
 802a45c:	3fdfffff 	.word	0x3fdfffff
 802a460:	35afe535 	.word	0x35afe535
 802a464:	3fe00000 	.word	0x3fe00000
 802a468:	000fffff 	.word	0x000fffff
 802a46c:	7ff00000 	.word	0x7ff00000
 802a470:	7fefffff 	.word	0x7fefffff
 802a474:	39500000 	.word	0x39500000
 802a478:	3ff00000 	.word	0x3ff00000
 802a47c:	7fe00000 	.word	0x7fe00000
 802a480:	7c9fffff 	.word	0x7c9fffff
 802a484:	3fe00000 	.word	0x3fe00000
 802a488:	bff00000 	.word	0xbff00000
 802a48c:	9b04      	ldr	r3, [sp, #16]
 802a48e:	b333      	cbz	r3, 802a4de <_strtod_l+0xb7e>
 802a490:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802a492:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802a496:	d822      	bhi.n	802a4de <_strtod_l+0xb7e>
 802a498:	a327      	add	r3, pc, #156	; (adr r3, 802a538 <_strtod_l+0xbd8>)
 802a49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a49e:	4630      	mov	r0, r6
 802a4a0:	4639      	mov	r1, r7
 802a4a2:	f7d6 fb2d 	bl	8000b00 <__aeabi_dcmple>
 802a4a6:	b1a0      	cbz	r0, 802a4d2 <_strtod_l+0xb72>
 802a4a8:	4639      	mov	r1, r7
 802a4aa:	4630      	mov	r0, r6
 802a4ac:	f7d6 fb84 	bl	8000bb8 <__aeabi_d2uiz>
 802a4b0:	2800      	cmp	r0, #0
 802a4b2:	bf08      	it	eq
 802a4b4:	2001      	moveq	r0, #1
 802a4b6:	f7d6 f82d 	bl	8000514 <__aeabi_ui2d>
 802a4ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a4bc:	4606      	mov	r6, r0
 802a4be:	460f      	mov	r7, r1
 802a4c0:	bb03      	cbnz	r3, 802a504 <_strtod_l+0xba4>
 802a4c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802a4c6:	9012      	str	r0, [sp, #72]	; 0x48
 802a4c8:	9313      	str	r3, [sp, #76]	; 0x4c
 802a4ca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 802a4ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 802a4d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a4d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a4d6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 802a4da:	1a9b      	subs	r3, r3, r2
 802a4dc:	930b      	str	r3, [sp, #44]	; 0x2c
 802a4de:	ed9d 0b08 	vldr	d0, [sp, #32]
 802a4e2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 802a4e6:	f001 fff1 	bl	802c4cc <__ulp>
 802a4ea:	4650      	mov	r0, sl
 802a4ec:	ec53 2b10 	vmov	r2, r3, d0
 802a4f0:	4659      	mov	r1, fp
 802a4f2:	f7d6 f889 	bl	8000608 <__aeabi_dmul>
 802a4f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802a4fa:	f7d5 fecf 	bl	800029c <__adddf3>
 802a4fe:	4682      	mov	sl, r0
 802a500:	468b      	mov	fp, r1
 802a502:	e772      	b.n	802a3ea <_strtod_l+0xa8a>
 802a504:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 802a508:	e7df      	b.n	802a4ca <_strtod_l+0xb6a>
 802a50a:	a30d      	add	r3, pc, #52	; (adr r3, 802a540 <_strtod_l+0xbe0>)
 802a50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a510:	f7d6 faec 	bl	8000aec <__aeabi_dcmplt>
 802a514:	e79c      	b.n	802a450 <_strtod_l+0xaf0>
 802a516:	2300      	movs	r3, #0
 802a518:	930d      	str	r3, [sp, #52]	; 0x34
 802a51a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802a51c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802a51e:	6013      	str	r3, [r2, #0]
 802a520:	f7ff ba61 	b.w	80299e6 <_strtod_l+0x86>
 802a524:	2b65      	cmp	r3, #101	; 0x65
 802a526:	f04f 0200 	mov.w	r2, #0
 802a52a:	f43f ab4e 	beq.w	8029bca <_strtod_l+0x26a>
 802a52e:	2101      	movs	r1, #1
 802a530:	4614      	mov	r4, r2
 802a532:	9104      	str	r1, [sp, #16]
 802a534:	f7ff bacb 	b.w	8029ace <_strtod_l+0x16e>
 802a538:	ffc00000 	.word	0xffc00000
 802a53c:	41dfffff 	.word	0x41dfffff
 802a540:	94a03595 	.word	0x94a03595
 802a544:	3fcfffff 	.word	0x3fcfffff

0802a548 <_strtod_r>:
 802a548:	4b05      	ldr	r3, [pc, #20]	; (802a560 <_strtod_r+0x18>)
 802a54a:	681b      	ldr	r3, [r3, #0]
 802a54c:	b410      	push	{r4}
 802a54e:	6a1b      	ldr	r3, [r3, #32]
 802a550:	4c04      	ldr	r4, [pc, #16]	; (802a564 <_strtod_r+0x1c>)
 802a552:	2b00      	cmp	r3, #0
 802a554:	bf08      	it	eq
 802a556:	4623      	moveq	r3, r4
 802a558:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a55c:	f7ff ba00 	b.w	8029960 <_strtod_l>
 802a560:	2000068c 	.word	0x2000068c
 802a564:	200006f0 	.word	0x200006f0

0802a568 <_strtol_l.isra.0>:
 802a568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a56c:	4680      	mov	r8, r0
 802a56e:	4689      	mov	r9, r1
 802a570:	4692      	mov	sl, r2
 802a572:	461e      	mov	r6, r3
 802a574:	460f      	mov	r7, r1
 802a576:	463d      	mov	r5, r7
 802a578:	9808      	ldr	r0, [sp, #32]
 802a57a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802a57e:	f001 fc2f 	bl	802bde0 <__locale_ctype_ptr_l>
 802a582:	4420      	add	r0, r4
 802a584:	7843      	ldrb	r3, [r0, #1]
 802a586:	f013 0308 	ands.w	r3, r3, #8
 802a58a:	d132      	bne.n	802a5f2 <_strtol_l.isra.0+0x8a>
 802a58c:	2c2d      	cmp	r4, #45	; 0x2d
 802a58e:	d132      	bne.n	802a5f6 <_strtol_l.isra.0+0x8e>
 802a590:	787c      	ldrb	r4, [r7, #1]
 802a592:	1cbd      	adds	r5, r7, #2
 802a594:	2201      	movs	r2, #1
 802a596:	2e00      	cmp	r6, #0
 802a598:	d05d      	beq.n	802a656 <_strtol_l.isra.0+0xee>
 802a59a:	2e10      	cmp	r6, #16
 802a59c:	d109      	bne.n	802a5b2 <_strtol_l.isra.0+0x4a>
 802a59e:	2c30      	cmp	r4, #48	; 0x30
 802a5a0:	d107      	bne.n	802a5b2 <_strtol_l.isra.0+0x4a>
 802a5a2:	782b      	ldrb	r3, [r5, #0]
 802a5a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802a5a8:	2b58      	cmp	r3, #88	; 0x58
 802a5aa:	d14f      	bne.n	802a64c <_strtol_l.isra.0+0xe4>
 802a5ac:	786c      	ldrb	r4, [r5, #1]
 802a5ae:	2610      	movs	r6, #16
 802a5b0:	3502      	adds	r5, #2
 802a5b2:	2a00      	cmp	r2, #0
 802a5b4:	bf14      	ite	ne
 802a5b6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 802a5ba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 802a5be:	2700      	movs	r7, #0
 802a5c0:	fbb1 fcf6 	udiv	ip, r1, r6
 802a5c4:	4638      	mov	r0, r7
 802a5c6:	fb06 1e1c 	mls	lr, r6, ip, r1
 802a5ca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 802a5ce:	2b09      	cmp	r3, #9
 802a5d0:	d817      	bhi.n	802a602 <_strtol_l.isra.0+0x9a>
 802a5d2:	461c      	mov	r4, r3
 802a5d4:	42a6      	cmp	r6, r4
 802a5d6:	dd23      	ble.n	802a620 <_strtol_l.isra.0+0xb8>
 802a5d8:	1c7b      	adds	r3, r7, #1
 802a5da:	d007      	beq.n	802a5ec <_strtol_l.isra.0+0x84>
 802a5dc:	4584      	cmp	ip, r0
 802a5de:	d31c      	bcc.n	802a61a <_strtol_l.isra.0+0xb2>
 802a5e0:	d101      	bne.n	802a5e6 <_strtol_l.isra.0+0x7e>
 802a5e2:	45a6      	cmp	lr, r4
 802a5e4:	db19      	blt.n	802a61a <_strtol_l.isra.0+0xb2>
 802a5e6:	fb00 4006 	mla	r0, r0, r6, r4
 802a5ea:	2701      	movs	r7, #1
 802a5ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 802a5f0:	e7eb      	b.n	802a5ca <_strtol_l.isra.0+0x62>
 802a5f2:	462f      	mov	r7, r5
 802a5f4:	e7bf      	b.n	802a576 <_strtol_l.isra.0+0xe>
 802a5f6:	2c2b      	cmp	r4, #43	; 0x2b
 802a5f8:	bf04      	itt	eq
 802a5fa:	1cbd      	addeq	r5, r7, #2
 802a5fc:	787c      	ldrbeq	r4, [r7, #1]
 802a5fe:	461a      	mov	r2, r3
 802a600:	e7c9      	b.n	802a596 <_strtol_l.isra.0+0x2e>
 802a602:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 802a606:	2b19      	cmp	r3, #25
 802a608:	d801      	bhi.n	802a60e <_strtol_l.isra.0+0xa6>
 802a60a:	3c37      	subs	r4, #55	; 0x37
 802a60c:	e7e2      	b.n	802a5d4 <_strtol_l.isra.0+0x6c>
 802a60e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 802a612:	2b19      	cmp	r3, #25
 802a614:	d804      	bhi.n	802a620 <_strtol_l.isra.0+0xb8>
 802a616:	3c57      	subs	r4, #87	; 0x57
 802a618:	e7dc      	b.n	802a5d4 <_strtol_l.isra.0+0x6c>
 802a61a:	f04f 37ff 	mov.w	r7, #4294967295
 802a61e:	e7e5      	b.n	802a5ec <_strtol_l.isra.0+0x84>
 802a620:	1c7b      	adds	r3, r7, #1
 802a622:	d108      	bne.n	802a636 <_strtol_l.isra.0+0xce>
 802a624:	2322      	movs	r3, #34	; 0x22
 802a626:	f8c8 3000 	str.w	r3, [r8]
 802a62a:	4608      	mov	r0, r1
 802a62c:	f1ba 0f00 	cmp.w	sl, #0
 802a630:	d107      	bne.n	802a642 <_strtol_l.isra.0+0xda>
 802a632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a636:	b102      	cbz	r2, 802a63a <_strtol_l.isra.0+0xd2>
 802a638:	4240      	negs	r0, r0
 802a63a:	f1ba 0f00 	cmp.w	sl, #0
 802a63e:	d0f8      	beq.n	802a632 <_strtol_l.isra.0+0xca>
 802a640:	b10f      	cbz	r7, 802a646 <_strtol_l.isra.0+0xde>
 802a642:	f105 39ff 	add.w	r9, r5, #4294967295
 802a646:	f8ca 9000 	str.w	r9, [sl]
 802a64a:	e7f2      	b.n	802a632 <_strtol_l.isra.0+0xca>
 802a64c:	2430      	movs	r4, #48	; 0x30
 802a64e:	2e00      	cmp	r6, #0
 802a650:	d1af      	bne.n	802a5b2 <_strtol_l.isra.0+0x4a>
 802a652:	2608      	movs	r6, #8
 802a654:	e7ad      	b.n	802a5b2 <_strtol_l.isra.0+0x4a>
 802a656:	2c30      	cmp	r4, #48	; 0x30
 802a658:	d0a3      	beq.n	802a5a2 <_strtol_l.isra.0+0x3a>
 802a65a:	260a      	movs	r6, #10
 802a65c:	e7a9      	b.n	802a5b2 <_strtol_l.isra.0+0x4a>
	...

0802a660 <_strtol_r>:
 802a660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a662:	4c06      	ldr	r4, [pc, #24]	; (802a67c <_strtol_r+0x1c>)
 802a664:	4d06      	ldr	r5, [pc, #24]	; (802a680 <_strtol_r+0x20>)
 802a666:	6824      	ldr	r4, [r4, #0]
 802a668:	6a24      	ldr	r4, [r4, #32]
 802a66a:	2c00      	cmp	r4, #0
 802a66c:	bf08      	it	eq
 802a66e:	462c      	moveq	r4, r5
 802a670:	9400      	str	r4, [sp, #0]
 802a672:	f7ff ff79 	bl	802a568 <_strtol_l.isra.0>
 802a676:	b003      	add	sp, #12
 802a678:	bd30      	pop	{r4, r5, pc}
 802a67a:	bf00      	nop
 802a67c:	2000068c 	.word	0x2000068c
 802a680:	200006f0 	.word	0x200006f0

0802a684 <__swbuf_r>:
 802a684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a686:	460e      	mov	r6, r1
 802a688:	4614      	mov	r4, r2
 802a68a:	4605      	mov	r5, r0
 802a68c:	b118      	cbz	r0, 802a696 <__swbuf_r+0x12>
 802a68e:	6983      	ldr	r3, [r0, #24]
 802a690:	b90b      	cbnz	r3, 802a696 <__swbuf_r+0x12>
 802a692:	f000 fff5 	bl	802b680 <__sinit>
 802a696:	4b21      	ldr	r3, [pc, #132]	; (802a71c <__swbuf_r+0x98>)
 802a698:	429c      	cmp	r4, r3
 802a69a:	d12a      	bne.n	802a6f2 <__swbuf_r+0x6e>
 802a69c:	686c      	ldr	r4, [r5, #4]
 802a69e:	69a3      	ldr	r3, [r4, #24]
 802a6a0:	60a3      	str	r3, [r4, #8]
 802a6a2:	89a3      	ldrh	r3, [r4, #12]
 802a6a4:	071a      	lsls	r2, r3, #28
 802a6a6:	d52e      	bpl.n	802a706 <__swbuf_r+0x82>
 802a6a8:	6923      	ldr	r3, [r4, #16]
 802a6aa:	b363      	cbz	r3, 802a706 <__swbuf_r+0x82>
 802a6ac:	6923      	ldr	r3, [r4, #16]
 802a6ae:	6820      	ldr	r0, [r4, #0]
 802a6b0:	1ac0      	subs	r0, r0, r3
 802a6b2:	6963      	ldr	r3, [r4, #20]
 802a6b4:	b2f6      	uxtb	r6, r6
 802a6b6:	4283      	cmp	r3, r0
 802a6b8:	4637      	mov	r7, r6
 802a6ba:	dc04      	bgt.n	802a6c6 <__swbuf_r+0x42>
 802a6bc:	4621      	mov	r1, r4
 802a6be:	4628      	mov	r0, r5
 802a6c0:	f000 ff74 	bl	802b5ac <_fflush_r>
 802a6c4:	bb28      	cbnz	r0, 802a712 <__swbuf_r+0x8e>
 802a6c6:	68a3      	ldr	r3, [r4, #8]
 802a6c8:	3b01      	subs	r3, #1
 802a6ca:	60a3      	str	r3, [r4, #8]
 802a6cc:	6823      	ldr	r3, [r4, #0]
 802a6ce:	1c5a      	adds	r2, r3, #1
 802a6d0:	6022      	str	r2, [r4, #0]
 802a6d2:	701e      	strb	r6, [r3, #0]
 802a6d4:	6963      	ldr	r3, [r4, #20]
 802a6d6:	3001      	adds	r0, #1
 802a6d8:	4283      	cmp	r3, r0
 802a6da:	d004      	beq.n	802a6e6 <__swbuf_r+0x62>
 802a6dc:	89a3      	ldrh	r3, [r4, #12]
 802a6de:	07db      	lsls	r3, r3, #31
 802a6e0:	d519      	bpl.n	802a716 <__swbuf_r+0x92>
 802a6e2:	2e0a      	cmp	r6, #10
 802a6e4:	d117      	bne.n	802a716 <__swbuf_r+0x92>
 802a6e6:	4621      	mov	r1, r4
 802a6e8:	4628      	mov	r0, r5
 802a6ea:	f000 ff5f 	bl	802b5ac <_fflush_r>
 802a6ee:	b190      	cbz	r0, 802a716 <__swbuf_r+0x92>
 802a6f0:	e00f      	b.n	802a712 <__swbuf_r+0x8e>
 802a6f2:	4b0b      	ldr	r3, [pc, #44]	; (802a720 <__swbuf_r+0x9c>)
 802a6f4:	429c      	cmp	r4, r3
 802a6f6:	d101      	bne.n	802a6fc <__swbuf_r+0x78>
 802a6f8:	68ac      	ldr	r4, [r5, #8]
 802a6fa:	e7d0      	b.n	802a69e <__swbuf_r+0x1a>
 802a6fc:	4b09      	ldr	r3, [pc, #36]	; (802a724 <__swbuf_r+0xa0>)
 802a6fe:	429c      	cmp	r4, r3
 802a700:	bf08      	it	eq
 802a702:	68ec      	ldreq	r4, [r5, #12]
 802a704:	e7cb      	b.n	802a69e <__swbuf_r+0x1a>
 802a706:	4621      	mov	r1, r4
 802a708:	4628      	mov	r0, r5
 802a70a:	f000 f80d 	bl	802a728 <__swsetup_r>
 802a70e:	2800      	cmp	r0, #0
 802a710:	d0cc      	beq.n	802a6ac <__swbuf_r+0x28>
 802a712:	f04f 37ff 	mov.w	r7, #4294967295
 802a716:	4638      	mov	r0, r7
 802a718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a71a:	bf00      	nop
 802a71c:	0802e6a0 	.word	0x0802e6a0
 802a720:	0802e6c0 	.word	0x0802e6c0
 802a724:	0802e680 	.word	0x0802e680

0802a728 <__swsetup_r>:
 802a728:	4b32      	ldr	r3, [pc, #200]	; (802a7f4 <__swsetup_r+0xcc>)
 802a72a:	b570      	push	{r4, r5, r6, lr}
 802a72c:	681d      	ldr	r5, [r3, #0]
 802a72e:	4606      	mov	r6, r0
 802a730:	460c      	mov	r4, r1
 802a732:	b125      	cbz	r5, 802a73e <__swsetup_r+0x16>
 802a734:	69ab      	ldr	r3, [r5, #24]
 802a736:	b913      	cbnz	r3, 802a73e <__swsetup_r+0x16>
 802a738:	4628      	mov	r0, r5
 802a73a:	f000 ffa1 	bl	802b680 <__sinit>
 802a73e:	4b2e      	ldr	r3, [pc, #184]	; (802a7f8 <__swsetup_r+0xd0>)
 802a740:	429c      	cmp	r4, r3
 802a742:	d10f      	bne.n	802a764 <__swsetup_r+0x3c>
 802a744:	686c      	ldr	r4, [r5, #4]
 802a746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a74a:	b29a      	uxth	r2, r3
 802a74c:	0715      	lsls	r5, r2, #28
 802a74e:	d42c      	bmi.n	802a7aa <__swsetup_r+0x82>
 802a750:	06d0      	lsls	r0, r2, #27
 802a752:	d411      	bmi.n	802a778 <__swsetup_r+0x50>
 802a754:	2209      	movs	r2, #9
 802a756:	6032      	str	r2, [r6, #0]
 802a758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a75c:	81a3      	strh	r3, [r4, #12]
 802a75e:	f04f 30ff 	mov.w	r0, #4294967295
 802a762:	e03e      	b.n	802a7e2 <__swsetup_r+0xba>
 802a764:	4b25      	ldr	r3, [pc, #148]	; (802a7fc <__swsetup_r+0xd4>)
 802a766:	429c      	cmp	r4, r3
 802a768:	d101      	bne.n	802a76e <__swsetup_r+0x46>
 802a76a:	68ac      	ldr	r4, [r5, #8]
 802a76c:	e7eb      	b.n	802a746 <__swsetup_r+0x1e>
 802a76e:	4b24      	ldr	r3, [pc, #144]	; (802a800 <__swsetup_r+0xd8>)
 802a770:	429c      	cmp	r4, r3
 802a772:	bf08      	it	eq
 802a774:	68ec      	ldreq	r4, [r5, #12]
 802a776:	e7e6      	b.n	802a746 <__swsetup_r+0x1e>
 802a778:	0751      	lsls	r1, r2, #29
 802a77a:	d512      	bpl.n	802a7a2 <__swsetup_r+0x7a>
 802a77c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a77e:	b141      	cbz	r1, 802a792 <__swsetup_r+0x6a>
 802a780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a784:	4299      	cmp	r1, r3
 802a786:	d002      	beq.n	802a78e <__swsetup_r+0x66>
 802a788:	4630      	mov	r0, r6
 802a78a:	f001 ffe1 	bl	802c750 <_free_r>
 802a78e:	2300      	movs	r3, #0
 802a790:	6363      	str	r3, [r4, #52]	; 0x34
 802a792:	89a3      	ldrh	r3, [r4, #12]
 802a794:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802a798:	81a3      	strh	r3, [r4, #12]
 802a79a:	2300      	movs	r3, #0
 802a79c:	6063      	str	r3, [r4, #4]
 802a79e:	6923      	ldr	r3, [r4, #16]
 802a7a0:	6023      	str	r3, [r4, #0]
 802a7a2:	89a3      	ldrh	r3, [r4, #12]
 802a7a4:	f043 0308 	orr.w	r3, r3, #8
 802a7a8:	81a3      	strh	r3, [r4, #12]
 802a7aa:	6923      	ldr	r3, [r4, #16]
 802a7ac:	b94b      	cbnz	r3, 802a7c2 <__swsetup_r+0x9a>
 802a7ae:	89a3      	ldrh	r3, [r4, #12]
 802a7b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802a7b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802a7b8:	d003      	beq.n	802a7c2 <__swsetup_r+0x9a>
 802a7ba:	4621      	mov	r1, r4
 802a7bc:	4630      	mov	r0, r6
 802a7be:	f001 fb47 	bl	802be50 <__smakebuf_r>
 802a7c2:	89a2      	ldrh	r2, [r4, #12]
 802a7c4:	f012 0301 	ands.w	r3, r2, #1
 802a7c8:	d00c      	beq.n	802a7e4 <__swsetup_r+0xbc>
 802a7ca:	2300      	movs	r3, #0
 802a7cc:	60a3      	str	r3, [r4, #8]
 802a7ce:	6963      	ldr	r3, [r4, #20]
 802a7d0:	425b      	negs	r3, r3
 802a7d2:	61a3      	str	r3, [r4, #24]
 802a7d4:	6923      	ldr	r3, [r4, #16]
 802a7d6:	b953      	cbnz	r3, 802a7ee <__swsetup_r+0xc6>
 802a7d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a7dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802a7e0:	d1ba      	bne.n	802a758 <__swsetup_r+0x30>
 802a7e2:	bd70      	pop	{r4, r5, r6, pc}
 802a7e4:	0792      	lsls	r2, r2, #30
 802a7e6:	bf58      	it	pl
 802a7e8:	6963      	ldrpl	r3, [r4, #20]
 802a7ea:	60a3      	str	r3, [r4, #8]
 802a7ec:	e7f2      	b.n	802a7d4 <__swsetup_r+0xac>
 802a7ee:	2000      	movs	r0, #0
 802a7f0:	e7f7      	b.n	802a7e2 <__swsetup_r+0xba>
 802a7f2:	bf00      	nop
 802a7f4:	2000068c 	.word	0x2000068c
 802a7f8:	0802e6a0 	.word	0x0802e6a0
 802a7fc:	0802e6c0 	.word	0x0802e6c0
 802a800:	0802e680 	.word	0x0802e680

0802a804 <abort>:
 802a804:	b508      	push	{r3, lr}
 802a806:	2006      	movs	r0, #6
 802a808:	f002 f9fa 	bl	802cc00 <raise>
 802a80c:	2001      	movs	r0, #1
 802a80e:	f7e9 fc7b 	bl	8014108 <_exit>

0802a812 <quorem>:
 802a812:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a816:	6903      	ldr	r3, [r0, #16]
 802a818:	690c      	ldr	r4, [r1, #16]
 802a81a:	42a3      	cmp	r3, r4
 802a81c:	4680      	mov	r8, r0
 802a81e:	f2c0 8082 	blt.w	802a926 <quorem+0x114>
 802a822:	3c01      	subs	r4, #1
 802a824:	f101 0714 	add.w	r7, r1, #20
 802a828:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 802a82c:	f100 0614 	add.w	r6, r0, #20
 802a830:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 802a834:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 802a838:	eb06 030c 	add.w	r3, r6, ip
 802a83c:	3501      	adds	r5, #1
 802a83e:	eb07 090c 	add.w	r9, r7, ip
 802a842:	9301      	str	r3, [sp, #4]
 802a844:	fbb0 f5f5 	udiv	r5, r0, r5
 802a848:	b395      	cbz	r5, 802a8b0 <quorem+0x9e>
 802a84a:	f04f 0a00 	mov.w	sl, #0
 802a84e:	4638      	mov	r0, r7
 802a850:	46b6      	mov	lr, r6
 802a852:	46d3      	mov	fp, sl
 802a854:	f850 2b04 	ldr.w	r2, [r0], #4
 802a858:	b293      	uxth	r3, r2
 802a85a:	fb05 a303 	mla	r3, r5, r3, sl
 802a85e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802a862:	b29b      	uxth	r3, r3
 802a864:	ebab 0303 	sub.w	r3, fp, r3
 802a868:	0c12      	lsrs	r2, r2, #16
 802a86a:	f8de b000 	ldr.w	fp, [lr]
 802a86e:	fb05 a202 	mla	r2, r5, r2, sl
 802a872:	fa13 f38b 	uxtah	r3, r3, fp
 802a876:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 802a87a:	fa1f fb82 	uxth.w	fp, r2
 802a87e:	f8de 2000 	ldr.w	r2, [lr]
 802a882:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 802a886:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802a88a:	b29b      	uxth	r3, r3
 802a88c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802a890:	4581      	cmp	r9, r0
 802a892:	ea4f 4b22 	mov.w	fp, r2, asr #16
 802a896:	f84e 3b04 	str.w	r3, [lr], #4
 802a89a:	d2db      	bcs.n	802a854 <quorem+0x42>
 802a89c:	f856 300c 	ldr.w	r3, [r6, ip]
 802a8a0:	b933      	cbnz	r3, 802a8b0 <quorem+0x9e>
 802a8a2:	9b01      	ldr	r3, [sp, #4]
 802a8a4:	3b04      	subs	r3, #4
 802a8a6:	429e      	cmp	r6, r3
 802a8a8:	461a      	mov	r2, r3
 802a8aa:	d330      	bcc.n	802a90e <quorem+0xfc>
 802a8ac:	f8c8 4010 	str.w	r4, [r8, #16]
 802a8b0:	4640      	mov	r0, r8
 802a8b2:	f001 fd93 	bl	802c3dc <__mcmp>
 802a8b6:	2800      	cmp	r0, #0
 802a8b8:	db25      	blt.n	802a906 <quorem+0xf4>
 802a8ba:	3501      	adds	r5, #1
 802a8bc:	4630      	mov	r0, r6
 802a8be:	f04f 0c00 	mov.w	ip, #0
 802a8c2:	f857 2b04 	ldr.w	r2, [r7], #4
 802a8c6:	f8d0 e000 	ldr.w	lr, [r0]
 802a8ca:	b293      	uxth	r3, r2
 802a8cc:	ebac 0303 	sub.w	r3, ip, r3
 802a8d0:	0c12      	lsrs	r2, r2, #16
 802a8d2:	fa13 f38e 	uxtah	r3, r3, lr
 802a8d6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 802a8da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802a8de:	b29b      	uxth	r3, r3
 802a8e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802a8e4:	45b9      	cmp	r9, r7
 802a8e6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802a8ea:	f840 3b04 	str.w	r3, [r0], #4
 802a8ee:	d2e8      	bcs.n	802a8c2 <quorem+0xb0>
 802a8f0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 802a8f4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 802a8f8:	b92a      	cbnz	r2, 802a906 <quorem+0xf4>
 802a8fa:	3b04      	subs	r3, #4
 802a8fc:	429e      	cmp	r6, r3
 802a8fe:	461a      	mov	r2, r3
 802a900:	d30b      	bcc.n	802a91a <quorem+0x108>
 802a902:	f8c8 4010 	str.w	r4, [r8, #16]
 802a906:	4628      	mov	r0, r5
 802a908:	b003      	add	sp, #12
 802a90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a90e:	6812      	ldr	r2, [r2, #0]
 802a910:	3b04      	subs	r3, #4
 802a912:	2a00      	cmp	r2, #0
 802a914:	d1ca      	bne.n	802a8ac <quorem+0x9a>
 802a916:	3c01      	subs	r4, #1
 802a918:	e7c5      	b.n	802a8a6 <quorem+0x94>
 802a91a:	6812      	ldr	r2, [r2, #0]
 802a91c:	3b04      	subs	r3, #4
 802a91e:	2a00      	cmp	r2, #0
 802a920:	d1ef      	bne.n	802a902 <quorem+0xf0>
 802a922:	3c01      	subs	r4, #1
 802a924:	e7ea      	b.n	802a8fc <quorem+0xea>
 802a926:	2000      	movs	r0, #0
 802a928:	e7ee      	b.n	802a908 <quorem+0xf6>
 802a92a:	0000      	movs	r0, r0
 802a92c:	0000      	movs	r0, r0
	...

0802a930 <_dtoa_r>:
 802a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a934:	ec57 6b10 	vmov	r6, r7, d0
 802a938:	b097      	sub	sp, #92	; 0x5c
 802a93a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802a93c:	9106      	str	r1, [sp, #24]
 802a93e:	4604      	mov	r4, r0
 802a940:	920b      	str	r2, [sp, #44]	; 0x2c
 802a942:	9312      	str	r3, [sp, #72]	; 0x48
 802a944:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802a948:	e9cd 6700 	strd	r6, r7, [sp]
 802a94c:	b93d      	cbnz	r5, 802a95e <_dtoa_r+0x2e>
 802a94e:	2010      	movs	r0, #16
 802a950:	f001 fabe 	bl	802bed0 <malloc>
 802a954:	6260      	str	r0, [r4, #36]	; 0x24
 802a956:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802a95a:	6005      	str	r5, [r0, #0]
 802a95c:	60c5      	str	r5, [r0, #12]
 802a95e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802a960:	6819      	ldr	r1, [r3, #0]
 802a962:	b151      	cbz	r1, 802a97a <_dtoa_r+0x4a>
 802a964:	685a      	ldr	r2, [r3, #4]
 802a966:	604a      	str	r2, [r1, #4]
 802a968:	2301      	movs	r3, #1
 802a96a:	4093      	lsls	r3, r2
 802a96c:	608b      	str	r3, [r1, #8]
 802a96e:	4620      	mov	r0, r4
 802a970:	f001 fb15 	bl	802bf9e <_Bfree>
 802a974:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802a976:	2200      	movs	r2, #0
 802a978:	601a      	str	r2, [r3, #0]
 802a97a:	1e3b      	subs	r3, r7, #0
 802a97c:	bfbb      	ittet	lt
 802a97e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802a982:	9301      	strlt	r3, [sp, #4]
 802a984:	2300      	movge	r3, #0
 802a986:	2201      	movlt	r2, #1
 802a988:	bfac      	ite	ge
 802a98a:	f8c8 3000 	strge.w	r3, [r8]
 802a98e:	f8c8 2000 	strlt.w	r2, [r8]
 802a992:	4baf      	ldr	r3, [pc, #700]	; (802ac50 <_dtoa_r+0x320>)
 802a994:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802a998:	ea33 0308 	bics.w	r3, r3, r8
 802a99c:	d114      	bne.n	802a9c8 <_dtoa_r+0x98>
 802a99e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802a9a0:	f242 730f 	movw	r3, #9999	; 0x270f
 802a9a4:	6013      	str	r3, [r2, #0]
 802a9a6:	9b00      	ldr	r3, [sp, #0]
 802a9a8:	b923      	cbnz	r3, 802a9b4 <_dtoa_r+0x84>
 802a9aa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 802a9ae:	2800      	cmp	r0, #0
 802a9b0:	f000 8542 	beq.w	802b438 <_dtoa_r+0xb08>
 802a9b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802a9b6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 802ac64 <_dtoa_r+0x334>
 802a9ba:	2b00      	cmp	r3, #0
 802a9bc:	f000 8544 	beq.w	802b448 <_dtoa_r+0xb18>
 802a9c0:	f10b 0303 	add.w	r3, fp, #3
 802a9c4:	f000 bd3e 	b.w	802b444 <_dtoa_r+0xb14>
 802a9c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 802a9cc:	2200      	movs	r2, #0
 802a9ce:	2300      	movs	r3, #0
 802a9d0:	4630      	mov	r0, r6
 802a9d2:	4639      	mov	r1, r7
 802a9d4:	f7d6 f880 	bl	8000ad8 <__aeabi_dcmpeq>
 802a9d8:	4681      	mov	r9, r0
 802a9da:	b168      	cbz	r0, 802a9f8 <_dtoa_r+0xc8>
 802a9dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802a9de:	2301      	movs	r3, #1
 802a9e0:	6013      	str	r3, [r2, #0]
 802a9e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802a9e4:	2b00      	cmp	r3, #0
 802a9e6:	f000 8524 	beq.w	802b432 <_dtoa_r+0xb02>
 802a9ea:	4b9a      	ldr	r3, [pc, #616]	; (802ac54 <_dtoa_r+0x324>)
 802a9ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802a9ee:	f103 3bff 	add.w	fp, r3, #4294967295
 802a9f2:	6013      	str	r3, [r2, #0]
 802a9f4:	f000 bd28 	b.w	802b448 <_dtoa_r+0xb18>
 802a9f8:	aa14      	add	r2, sp, #80	; 0x50
 802a9fa:	a915      	add	r1, sp, #84	; 0x54
 802a9fc:	ec47 6b10 	vmov	d0, r6, r7
 802aa00:	4620      	mov	r0, r4
 802aa02:	f001 fdd9 	bl	802c5b8 <__d2b>
 802aa06:	f3c8 550a 	ubfx	r5, r8, #20, #11
 802aa0a:	9004      	str	r0, [sp, #16]
 802aa0c:	2d00      	cmp	r5, #0
 802aa0e:	d07c      	beq.n	802ab0a <_dtoa_r+0x1da>
 802aa10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802aa14:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 802aa18:	46b2      	mov	sl, r6
 802aa1a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 802aa1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802aa22:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 802aa26:	2200      	movs	r2, #0
 802aa28:	4b8b      	ldr	r3, [pc, #556]	; (802ac58 <_dtoa_r+0x328>)
 802aa2a:	4650      	mov	r0, sl
 802aa2c:	4659      	mov	r1, fp
 802aa2e:	f7d5 fc33 	bl	8000298 <__aeabi_dsub>
 802aa32:	a381      	add	r3, pc, #516	; (adr r3, 802ac38 <_dtoa_r+0x308>)
 802aa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 802aa38:	f7d5 fde6 	bl	8000608 <__aeabi_dmul>
 802aa3c:	a380      	add	r3, pc, #512	; (adr r3, 802ac40 <_dtoa_r+0x310>)
 802aa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802aa42:	f7d5 fc2b 	bl	800029c <__adddf3>
 802aa46:	4606      	mov	r6, r0
 802aa48:	4628      	mov	r0, r5
 802aa4a:	460f      	mov	r7, r1
 802aa4c:	f7d5 fd72 	bl	8000534 <__aeabi_i2d>
 802aa50:	a37d      	add	r3, pc, #500	; (adr r3, 802ac48 <_dtoa_r+0x318>)
 802aa52:	e9d3 2300 	ldrd	r2, r3, [r3]
 802aa56:	f7d5 fdd7 	bl	8000608 <__aeabi_dmul>
 802aa5a:	4602      	mov	r2, r0
 802aa5c:	460b      	mov	r3, r1
 802aa5e:	4630      	mov	r0, r6
 802aa60:	4639      	mov	r1, r7
 802aa62:	f7d5 fc1b 	bl	800029c <__adddf3>
 802aa66:	4606      	mov	r6, r0
 802aa68:	460f      	mov	r7, r1
 802aa6a:	f7d6 f87d 	bl	8000b68 <__aeabi_d2iz>
 802aa6e:	2200      	movs	r2, #0
 802aa70:	4682      	mov	sl, r0
 802aa72:	2300      	movs	r3, #0
 802aa74:	4630      	mov	r0, r6
 802aa76:	4639      	mov	r1, r7
 802aa78:	f7d6 f838 	bl	8000aec <__aeabi_dcmplt>
 802aa7c:	b148      	cbz	r0, 802aa92 <_dtoa_r+0x162>
 802aa7e:	4650      	mov	r0, sl
 802aa80:	f7d5 fd58 	bl	8000534 <__aeabi_i2d>
 802aa84:	4632      	mov	r2, r6
 802aa86:	463b      	mov	r3, r7
 802aa88:	f7d6 f826 	bl	8000ad8 <__aeabi_dcmpeq>
 802aa8c:	b908      	cbnz	r0, 802aa92 <_dtoa_r+0x162>
 802aa8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 802aa92:	f1ba 0f16 	cmp.w	sl, #22
 802aa96:	d859      	bhi.n	802ab4c <_dtoa_r+0x21c>
 802aa98:	4970      	ldr	r1, [pc, #448]	; (802ac5c <_dtoa_r+0x32c>)
 802aa9a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 802aa9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 802aaa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 802aaa6:	f7d6 f83f 	bl	8000b28 <__aeabi_dcmpgt>
 802aaaa:	2800      	cmp	r0, #0
 802aaac:	d050      	beq.n	802ab50 <_dtoa_r+0x220>
 802aaae:	f10a 3aff 	add.w	sl, sl, #4294967295
 802aab2:	2300      	movs	r3, #0
 802aab4:	930f      	str	r3, [sp, #60]	; 0x3c
 802aab6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802aab8:	1b5d      	subs	r5, r3, r5
 802aaba:	f1b5 0801 	subs.w	r8, r5, #1
 802aabe:	bf49      	itett	mi
 802aac0:	f1c5 0301 	rsbmi	r3, r5, #1
 802aac4:	2300      	movpl	r3, #0
 802aac6:	9305      	strmi	r3, [sp, #20]
 802aac8:	f04f 0800 	movmi.w	r8, #0
 802aacc:	bf58      	it	pl
 802aace:	9305      	strpl	r3, [sp, #20]
 802aad0:	f1ba 0f00 	cmp.w	sl, #0
 802aad4:	db3e      	blt.n	802ab54 <_dtoa_r+0x224>
 802aad6:	2300      	movs	r3, #0
 802aad8:	44d0      	add	r8, sl
 802aada:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 802aade:	9307      	str	r3, [sp, #28]
 802aae0:	9b06      	ldr	r3, [sp, #24]
 802aae2:	2b09      	cmp	r3, #9
 802aae4:	f200 8090 	bhi.w	802ac08 <_dtoa_r+0x2d8>
 802aae8:	2b05      	cmp	r3, #5
 802aaea:	bfc4      	itt	gt
 802aaec:	3b04      	subgt	r3, #4
 802aaee:	9306      	strgt	r3, [sp, #24]
 802aaf0:	9b06      	ldr	r3, [sp, #24]
 802aaf2:	f1a3 0302 	sub.w	r3, r3, #2
 802aaf6:	bfcc      	ite	gt
 802aaf8:	2500      	movgt	r5, #0
 802aafa:	2501      	movle	r5, #1
 802aafc:	2b03      	cmp	r3, #3
 802aafe:	f200 808f 	bhi.w	802ac20 <_dtoa_r+0x2f0>
 802ab02:	e8df f003 	tbb	[pc, r3]
 802ab06:	7f7d      	.short	0x7f7d
 802ab08:	7131      	.short	0x7131
 802ab0a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 802ab0e:	441d      	add	r5, r3
 802ab10:	f205 4032 	addw	r0, r5, #1074	; 0x432
 802ab14:	2820      	cmp	r0, #32
 802ab16:	dd13      	ble.n	802ab40 <_dtoa_r+0x210>
 802ab18:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 802ab1c:	9b00      	ldr	r3, [sp, #0]
 802ab1e:	fa08 f800 	lsl.w	r8, r8, r0
 802ab22:	f205 4012 	addw	r0, r5, #1042	; 0x412
 802ab26:	fa23 f000 	lsr.w	r0, r3, r0
 802ab2a:	ea48 0000 	orr.w	r0, r8, r0
 802ab2e:	f7d5 fcf1 	bl	8000514 <__aeabi_ui2d>
 802ab32:	2301      	movs	r3, #1
 802ab34:	4682      	mov	sl, r0
 802ab36:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 802ab3a:	3d01      	subs	r5, #1
 802ab3c:	9313      	str	r3, [sp, #76]	; 0x4c
 802ab3e:	e772      	b.n	802aa26 <_dtoa_r+0xf6>
 802ab40:	9b00      	ldr	r3, [sp, #0]
 802ab42:	f1c0 0020 	rsb	r0, r0, #32
 802ab46:	fa03 f000 	lsl.w	r0, r3, r0
 802ab4a:	e7f0      	b.n	802ab2e <_dtoa_r+0x1fe>
 802ab4c:	2301      	movs	r3, #1
 802ab4e:	e7b1      	b.n	802aab4 <_dtoa_r+0x184>
 802ab50:	900f      	str	r0, [sp, #60]	; 0x3c
 802ab52:	e7b0      	b.n	802aab6 <_dtoa_r+0x186>
 802ab54:	9b05      	ldr	r3, [sp, #20]
 802ab56:	eba3 030a 	sub.w	r3, r3, sl
 802ab5a:	9305      	str	r3, [sp, #20]
 802ab5c:	f1ca 0300 	rsb	r3, sl, #0
 802ab60:	9307      	str	r3, [sp, #28]
 802ab62:	2300      	movs	r3, #0
 802ab64:	930e      	str	r3, [sp, #56]	; 0x38
 802ab66:	e7bb      	b.n	802aae0 <_dtoa_r+0x1b0>
 802ab68:	2301      	movs	r3, #1
 802ab6a:	930a      	str	r3, [sp, #40]	; 0x28
 802ab6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ab6e:	2b00      	cmp	r3, #0
 802ab70:	dd59      	ble.n	802ac26 <_dtoa_r+0x2f6>
 802ab72:	9302      	str	r3, [sp, #8]
 802ab74:	4699      	mov	r9, r3
 802ab76:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802ab78:	2200      	movs	r2, #0
 802ab7a:	6072      	str	r2, [r6, #4]
 802ab7c:	2204      	movs	r2, #4
 802ab7e:	f102 0014 	add.w	r0, r2, #20
 802ab82:	4298      	cmp	r0, r3
 802ab84:	6871      	ldr	r1, [r6, #4]
 802ab86:	d953      	bls.n	802ac30 <_dtoa_r+0x300>
 802ab88:	4620      	mov	r0, r4
 802ab8a:	f001 f9d4 	bl	802bf36 <_Balloc>
 802ab8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802ab90:	6030      	str	r0, [r6, #0]
 802ab92:	f1b9 0f0e 	cmp.w	r9, #14
 802ab96:	f8d3 b000 	ldr.w	fp, [r3]
 802ab9a:	f200 80e6 	bhi.w	802ad6a <_dtoa_r+0x43a>
 802ab9e:	2d00      	cmp	r5, #0
 802aba0:	f000 80e3 	beq.w	802ad6a <_dtoa_r+0x43a>
 802aba4:	ed9d 7b00 	vldr	d7, [sp]
 802aba8:	f1ba 0f00 	cmp.w	sl, #0
 802abac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 802abb0:	dd74      	ble.n	802ac9c <_dtoa_r+0x36c>
 802abb2:	4a2a      	ldr	r2, [pc, #168]	; (802ac5c <_dtoa_r+0x32c>)
 802abb4:	f00a 030f 	and.w	r3, sl, #15
 802abb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802abbc:	ed93 7b00 	vldr	d7, [r3]
 802abc0:	ea4f 162a 	mov.w	r6, sl, asr #4
 802abc4:	06f0      	lsls	r0, r6, #27
 802abc6:	ed8d 7b08 	vstr	d7, [sp, #32]
 802abca:	d565      	bpl.n	802ac98 <_dtoa_r+0x368>
 802abcc:	4b24      	ldr	r3, [pc, #144]	; (802ac60 <_dtoa_r+0x330>)
 802abce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802abd2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802abd6:	f7d5 fe41 	bl	800085c <__aeabi_ddiv>
 802abda:	e9cd 0100 	strd	r0, r1, [sp]
 802abde:	f006 060f 	and.w	r6, r6, #15
 802abe2:	2503      	movs	r5, #3
 802abe4:	4f1e      	ldr	r7, [pc, #120]	; (802ac60 <_dtoa_r+0x330>)
 802abe6:	e04c      	b.n	802ac82 <_dtoa_r+0x352>
 802abe8:	2301      	movs	r3, #1
 802abea:	930a      	str	r3, [sp, #40]	; 0x28
 802abec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802abee:	4453      	add	r3, sl
 802abf0:	f103 0901 	add.w	r9, r3, #1
 802abf4:	9302      	str	r3, [sp, #8]
 802abf6:	464b      	mov	r3, r9
 802abf8:	2b01      	cmp	r3, #1
 802abfa:	bfb8      	it	lt
 802abfc:	2301      	movlt	r3, #1
 802abfe:	e7ba      	b.n	802ab76 <_dtoa_r+0x246>
 802ac00:	2300      	movs	r3, #0
 802ac02:	e7b2      	b.n	802ab6a <_dtoa_r+0x23a>
 802ac04:	2300      	movs	r3, #0
 802ac06:	e7f0      	b.n	802abea <_dtoa_r+0x2ba>
 802ac08:	2501      	movs	r5, #1
 802ac0a:	2300      	movs	r3, #0
 802ac0c:	9306      	str	r3, [sp, #24]
 802ac0e:	950a      	str	r5, [sp, #40]	; 0x28
 802ac10:	f04f 33ff 	mov.w	r3, #4294967295
 802ac14:	9302      	str	r3, [sp, #8]
 802ac16:	4699      	mov	r9, r3
 802ac18:	2200      	movs	r2, #0
 802ac1a:	2312      	movs	r3, #18
 802ac1c:	920b      	str	r2, [sp, #44]	; 0x2c
 802ac1e:	e7aa      	b.n	802ab76 <_dtoa_r+0x246>
 802ac20:	2301      	movs	r3, #1
 802ac22:	930a      	str	r3, [sp, #40]	; 0x28
 802ac24:	e7f4      	b.n	802ac10 <_dtoa_r+0x2e0>
 802ac26:	2301      	movs	r3, #1
 802ac28:	9302      	str	r3, [sp, #8]
 802ac2a:	4699      	mov	r9, r3
 802ac2c:	461a      	mov	r2, r3
 802ac2e:	e7f5      	b.n	802ac1c <_dtoa_r+0x2ec>
 802ac30:	3101      	adds	r1, #1
 802ac32:	6071      	str	r1, [r6, #4]
 802ac34:	0052      	lsls	r2, r2, #1
 802ac36:	e7a2      	b.n	802ab7e <_dtoa_r+0x24e>
 802ac38:	636f4361 	.word	0x636f4361
 802ac3c:	3fd287a7 	.word	0x3fd287a7
 802ac40:	8b60c8b3 	.word	0x8b60c8b3
 802ac44:	3fc68a28 	.word	0x3fc68a28
 802ac48:	509f79fb 	.word	0x509f79fb
 802ac4c:	3fd34413 	.word	0x3fd34413
 802ac50:	7ff00000 	.word	0x7ff00000
 802ac54:	0802e5f2 	.word	0x0802e5f2
 802ac58:	3ff80000 	.word	0x3ff80000
 802ac5c:	0802e718 	.word	0x0802e718
 802ac60:	0802e6f0 	.word	0x0802e6f0
 802ac64:	0802e679 	.word	0x0802e679
 802ac68:	07f1      	lsls	r1, r6, #31
 802ac6a:	d508      	bpl.n	802ac7e <_dtoa_r+0x34e>
 802ac6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802ac70:	e9d7 2300 	ldrd	r2, r3, [r7]
 802ac74:	f7d5 fcc8 	bl	8000608 <__aeabi_dmul>
 802ac78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802ac7c:	3501      	adds	r5, #1
 802ac7e:	1076      	asrs	r6, r6, #1
 802ac80:	3708      	adds	r7, #8
 802ac82:	2e00      	cmp	r6, #0
 802ac84:	d1f0      	bne.n	802ac68 <_dtoa_r+0x338>
 802ac86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802ac8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802ac8e:	f7d5 fde5 	bl	800085c <__aeabi_ddiv>
 802ac92:	e9cd 0100 	strd	r0, r1, [sp]
 802ac96:	e01a      	b.n	802acce <_dtoa_r+0x39e>
 802ac98:	2502      	movs	r5, #2
 802ac9a:	e7a3      	b.n	802abe4 <_dtoa_r+0x2b4>
 802ac9c:	f000 80a0 	beq.w	802ade0 <_dtoa_r+0x4b0>
 802aca0:	f1ca 0600 	rsb	r6, sl, #0
 802aca4:	4b9f      	ldr	r3, [pc, #636]	; (802af24 <_dtoa_r+0x5f4>)
 802aca6:	4fa0      	ldr	r7, [pc, #640]	; (802af28 <_dtoa_r+0x5f8>)
 802aca8:	f006 020f 	and.w	r2, r6, #15
 802acac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802acb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802acb8:	f7d5 fca6 	bl	8000608 <__aeabi_dmul>
 802acbc:	e9cd 0100 	strd	r0, r1, [sp]
 802acc0:	1136      	asrs	r6, r6, #4
 802acc2:	2300      	movs	r3, #0
 802acc4:	2502      	movs	r5, #2
 802acc6:	2e00      	cmp	r6, #0
 802acc8:	d17f      	bne.n	802adca <_dtoa_r+0x49a>
 802acca:	2b00      	cmp	r3, #0
 802accc:	d1e1      	bne.n	802ac92 <_dtoa_r+0x362>
 802acce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802acd0:	2b00      	cmp	r3, #0
 802acd2:	f000 8087 	beq.w	802ade4 <_dtoa_r+0x4b4>
 802acd6:	e9dd 6700 	ldrd	r6, r7, [sp]
 802acda:	2200      	movs	r2, #0
 802acdc:	4b93      	ldr	r3, [pc, #588]	; (802af2c <_dtoa_r+0x5fc>)
 802acde:	4630      	mov	r0, r6
 802ace0:	4639      	mov	r1, r7
 802ace2:	f7d5 ff03 	bl	8000aec <__aeabi_dcmplt>
 802ace6:	2800      	cmp	r0, #0
 802ace8:	d07c      	beq.n	802ade4 <_dtoa_r+0x4b4>
 802acea:	f1b9 0f00 	cmp.w	r9, #0
 802acee:	d079      	beq.n	802ade4 <_dtoa_r+0x4b4>
 802acf0:	9b02      	ldr	r3, [sp, #8]
 802acf2:	2b00      	cmp	r3, #0
 802acf4:	dd35      	ble.n	802ad62 <_dtoa_r+0x432>
 802acf6:	f10a 33ff 	add.w	r3, sl, #4294967295
 802acfa:	9308      	str	r3, [sp, #32]
 802acfc:	4639      	mov	r1, r7
 802acfe:	2200      	movs	r2, #0
 802ad00:	4b8b      	ldr	r3, [pc, #556]	; (802af30 <_dtoa_r+0x600>)
 802ad02:	4630      	mov	r0, r6
 802ad04:	f7d5 fc80 	bl	8000608 <__aeabi_dmul>
 802ad08:	e9cd 0100 	strd	r0, r1, [sp]
 802ad0c:	9f02      	ldr	r7, [sp, #8]
 802ad0e:	3501      	adds	r5, #1
 802ad10:	4628      	mov	r0, r5
 802ad12:	f7d5 fc0f 	bl	8000534 <__aeabi_i2d>
 802ad16:	e9dd 2300 	ldrd	r2, r3, [sp]
 802ad1a:	f7d5 fc75 	bl	8000608 <__aeabi_dmul>
 802ad1e:	2200      	movs	r2, #0
 802ad20:	4b84      	ldr	r3, [pc, #528]	; (802af34 <_dtoa_r+0x604>)
 802ad22:	f7d5 fabb 	bl	800029c <__adddf3>
 802ad26:	4605      	mov	r5, r0
 802ad28:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 802ad2c:	2f00      	cmp	r7, #0
 802ad2e:	d15d      	bne.n	802adec <_dtoa_r+0x4bc>
 802ad30:	2200      	movs	r2, #0
 802ad32:	4b81      	ldr	r3, [pc, #516]	; (802af38 <_dtoa_r+0x608>)
 802ad34:	e9dd 0100 	ldrd	r0, r1, [sp]
 802ad38:	f7d5 faae 	bl	8000298 <__aeabi_dsub>
 802ad3c:	462a      	mov	r2, r5
 802ad3e:	4633      	mov	r3, r6
 802ad40:	e9cd 0100 	strd	r0, r1, [sp]
 802ad44:	f7d5 fef0 	bl	8000b28 <__aeabi_dcmpgt>
 802ad48:	2800      	cmp	r0, #0
 802ad4a:	f040 8288 	bne.w	802b25e <_dtoa_r+0x92e>
 802ad4e:	462a      	mov	r2, r5
 802ad50:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 802ad54:	e9dd 0100 	ldrd	r0, r1, [sp]
 802ad58:	f7d5 fec8 	bl	8000aec <__aeabi_dcmplt>
 802ad5c:	2800      	cmp	r0, #0
 802ad5e:	f040 827c 	bne.w	802b25a <_dtoa_r+0x92a>
 802ad62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802ad66:	e9cd 2300 	strd	r2, r3, [sp]
 802ad6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802ad6c:	2b00      	cmp	r3, #0
 802ad6e:	f2c0 8150 	blt.w	802b012 <_dtoa_r+0x6e2>
 802ad72:	f1ba 0f0e 	cmp.w	sl, #14
 802ad76:	f300 814c 	bgt.w	802b012 <_dtoa_r+0x6e2>
 802ad7a:	4b6a      	ldr	r3, [pc, #424]	; (802af24 <_dtoa_r+0x5f4>)
 802ad7c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802ad80:	ed93 7b00 	vldr	d7, [r3]
 802ad84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ad86:	2b00      	cmp	r3, #0
 802ad88:	ed8d 7b02 	vstr	d7, [sp, #8]
 802ad8c:	f280 80d8 	bge.w	802af40 <_dtoa_r+0x610>
 802ad90:	f1b9 0f00 	cmp.w	r9, #0
 802ad94:	f300 80d4 	bgt.w	802af40 <_dtoa_r+0x610>
 802ad98:	f040 825e 	bne.w	802b258 <_dtoa_r+0x928>
 802ad9c:	2200      	movs	r2, #0
 802ad9e:	4b66      	ldr	r3, [pc, #408]	; (802af38 <_dtoa_r+0x608>)
 802ada0:	ec51 0b17 	vmov	r0, r1, d7
 802ada4:	f7d5 fc30 	bl	8000608 <__aeabi_dmul>
 802ada8:	e9dd 2300 	ldrd	r2, r3, [sp]
 802adac:	f7d5 feb2 	bl	8000b14 <__aeabi_dcmpge>
 802adb0:	464f      	mov	r7, r9
 802adb2:	464e      	mov	r6, r9
 802adb4:	2800      	cmp	r0, #0
 802adb6:	f040 8234 	bne.w	802b222 <_dtoa_r+0x8f2>
 802adba:	2331      	movs	r3, #49	; 0x31
 802adbc:	f10b 0501 	add.w	r5, fp, #1
 802adc0:	f88b 3000 	strb.w	r3, [fp]
 802adc4:	f10a 0a01 	add.w	sl, sl, #1
 802adc8:	e22f      	b.n	802b22a <_dtoa_r+0x8fa>
 802adca:	07f2      	lsls	r2, r6, #31
 802adcc:	d505      	bpl.n	802adda <_dtoa_r+0x4aa>
 802adce:	e9d7 2300 	ldrd	r2, r3, [r7]
 802add2:	f7d5 fc19 	bl	8000608 <__aeabi_dmul>
 802add6:	3501      	adds	r5, #1
 802add8:	2301      	movs	r3, #1
 802adda:	1076      	asrs	r6, r6, #1
 802addc:	3708      	adds	r7, #8
 802adde:	e772      	b.n	802acc6 <_dtoa_r+0x396>
 802ade0:	2502      	movs	r5, #2
 802ade2:	e774      	b.n	802acce <_dtoa_r+0x39e>
 802ade4:	f8cd a020 	str.w	sl, [sp, #32]
 802ade8:	464f      	mov	r7, r9
 802adea:	e791      	b.n	802ad10 <_dtoa_r+0x3e0>
 802adec:	4b4d      	ldr	r3, [pc, #308]	; (802af24 <_dtoa_r+0x5f4>)
 802adee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802adf2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 802adf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802adf8:	2b00      	cmp	r3, #0
 802adfa:	d047      	beq.n	802ae8c <_dtoa_r+0x55c>
 802adfc:	4602      	mov	r2, r0
 802adfe:	460b      	mov	r3, r1
 802ae00:	2000      	movs	r0, #0
 802ae02:	494e      	ldr	r1, [pc, #312]	; (802af3c <_dtoa_r+0x60c>)
 802ae04:	f7d5 fd2a 	bl	800085c <__aeabi_ddiv>
 802ae08:	462a      	mov	r2, r5
 802ae0a:	4633      	mov	r3, r6
 802ae0c:	f7d5 fa44 	bl	8000298 <__aeabi_dsub>
 802ae10:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802ae14:	465d      	mov	r5, fp
 802ae16:	e9dd 0100 	ldrd	r0, r1, [sp]
 802ae1a:	f7d5 fea5 	bl	8000b68 <__aeabi_d2iz>
 802ae1e:	4606      	mov	r6, r0
 802ae20:	f7d5 fb88 	bl	8000534 <__aeabi_i2d>
 802ae24:	4602      	mov	r2, r0
 802ae26:	460b      	mov	r3, r1
 802ae28:	e9dd 0100 	ldrd	r0, r1, [sp]
 802ae2c:	f7d5 fa34 	bl	8000298 <__aeabi_dsub>
 802ae30:	3630      	adds	r6, #48	; 0x30
 802ae32:	f805 6b01 	strb.w	r6, [r5], #1
 802ae36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802ae3a:	e9cd 0100 	strd	r0, r1, [sp]
 802ae3e:	f7d5 fe55 	bl	8000aec <__aeabi_dcmplt>
 802ae42:	2800      	cmp	r0, #0
 802ae44:	d163      	bne.n	802af0e <_dtoa_r+0x5de>
 802ae46:	e9dd 2300 	ldrd	r2, r3, [sp]
 802ae4a:	2000      	movs	r0, #0
 802ae4c:	4937      	ldr	r1, [pc, #220]	; (802af2c <_dtoa_r+0x5fc>)
 802ae4e:	f7d5 fa23 	bl	8000298 <__aeabi_dsub>
 802ae52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802ae56:	f7d5 fe49 	bl	8000aec <__aeabi_dcmplt>
 802ae5a:	2800      	cmp	r0, #0
 802ae5c:	f040 80b7 	bne.w	802afce <_dtoa_r+0x69e>
 802ae60:	eba5 030b 	sub.w	r3, r5, fp
 802ae64:	429f      	cmp	r7, r3
 802ae66:	f77f af7c 	ble.w	802ad62 <_dtoa_r+0x432>
 802ae6a:	2200      	movs	r2, #0
 802ae6c:	4b30      	ldr	r3, [pc, #192]	; (802af30 <_dtoa_r+0x600>)
 802ae6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802ae72:	f7d5 fbc9 	bl	8000608 <__aeabi_dmul>
 802ae76:	2200      	movs	r2, #0
 802ae78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802ae7c:	4b2c      	ldr	r3, [pc, #176]	; (802af30 <_dtoa_r+0x600>)
 802ae7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 802ae82:	f7d5 fbc1 	bl	8000608 <__aeabi_dmul>
 802ae86:	e9cd 0100 	strd	r0, r1, [sp]
 802ae8a:	e7c4      	b.n	802ae16 <_dtoa_r+0x4e6>
 802ae8c:	462a      	mov	r2, r5
 802ae8e:	4633      	mov	r3, r6
 802ae90:	f7d5 fbba 	bl	8000608 <__aeabi_dmul>
 802ae94:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802ae98:	eb0b 0507 	add.w	r5, fp, r7
 802ae9c:	465e      	mov	r6, fp
 802ae9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 802aea2:	f7d5 fe61 	bl	8000b68 <__aeabi_d2iz>
 802aea6:	4607      	mov	r7, r0
 802aea8:	f7d5 fb44 	bl	8000534 <__aeabi_i2d>
 802aeac:	3730      	adds	r7, #48	; 0x30
 802aeae:	4602      	mov	r2, r0
 802aeb0:	460b      	mov	r3, r1
 802aeb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 802aeb6:	f7d5 f9ef 	bl	8000298 <__aeabi_dsub>
 802aeba:	f806 7b01 	strb.w	r7, [r6], #1
 802aebe:	42ae      	cmp	r6, r5
 802aec0:	e9cd 0100 	strd	r0, r1, [sp]
 802aec4:	f04f 0200 	mov.w	r2, #0
 802aec8:	d126      	bne.n	802af18 <_dtoa_r+0x5e8>
 802aeca:	4b1c      	ldr	r3, [pc, #112]	; (802af3c <_dtoa_r+0x60c>)
 802aecc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802aed0:	f7d5 f9e4 	bl	800029c <__adddf3>
 802aed4:	4602      	mov	r2, r0
 802aed6:	460b      	mov	r3, r1
 802aed8:	e9dd 0100 	ldrd	r0, r1, [sp]
 802aedc:	f7d5 fe24 	bl	8000b28 <__aeabi_dcmpgt>
 802aee0:	2800      	cmp	r0, #0
 802aee2:	d174      	bne.n	802afce <_dtoa_r+0x69e>
 802aee4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802aee8:	2000      	movs	r0, #0
 802aeea:	4914      	ldr	r1, [pc, #80]	; (802af3c <_dtoa_r+0x60c>)
 802aeec:	f7d5 f9d4 	bl	8000298 <__aeabi_dsub>
 802aef0:	4602      	mov	r2, r0
 802aef2:	460b      	mov	r3, r1
 802aef4:	e9dd 0100 	ldrd	r0, r1, [sp]
 802aef8:	f7d5 fdf8 	bl	8000aec <__aeabi_dcmplt>
 802aefc:	2800      	cmp	r0, #0
 802aefe:	f43f af30 	beq.w	802ad62 <_dtoa_r+0x432>
 802af02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802af06:	2b30      	cmp	r3, #48	; 0x30
 802af08:	f105 32ff 	add.w	r2, r5, #4294967295
 802af0c:	d002      	beq.n	802af14 <_dtoa_r+0x5e4>
 802af0e:	f8dd a020 	ldr.w	sl, [sp, #32]
 802af12:	e04a      	b.n	802afaa <_dtoa_r+0x67a>
 802af14:	4615      	mov	r5, r2
 802af16:	e7f4      	b.n	802af02 <_dtoa_r+0x5d2>
 802af18:	4b05      	ldr	r3, [pc, #20]	; (802af30 <_dtoa_r+0x600>)
 802af1a:	f7d5 fb75 	bl	8000608 <__aeabi_dmul>
 802af1e:	e9cd 0100 	strd	r0, r1, [sp]
 802af22:	e7bc      	b.n	802ae9e <_dtoa_r+0x56e>
 802af24:	0802e718 	.word	0x0802e718
 802af28:	0802e6f0 	.word	0x0802e6f0
 802af2c:	3ff00000 	.word	0x3ff00000
 802af30:	40240000 	.word	0x40240000
 802af34:	401c0000 	.word	0x401c0000
 802af38:	40140000 	.word	0x40140000
 802af3c:	3fe00000 	.word	0x3fe00000
 802af40:	e9dd 6700 	ldrd	r6, r7, [sp]
 802af44:	465d      	mov	r5, fp
 802af46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802af4a:	4630      	mov	r0, r6
 802af4c:	4639      	mov	r1, r7
 802af4e:	f7d5 fc85 	bl	800085c <__aeabi_ddiv>
 802af52:	f7d5 fe09 	bl	8000b68 <__aeabi_d2iz>
 802af56:	4680      	mov	r8, r0
 802af58:	f7d5 faec 	bl	8000534 <__aeabi_i2d>
 802af5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802af60:	f7d5 fb52 	bl	8000608 <__aeabi_dmul>
 802af64:	4602      	mov	r2, r0
 802af66:	460b      	mov	r3, r1
 802af68:	4630      	mov	r0, r6
 802af6a:	4639      	mov	r1, r7
 802af6c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 802af70:	f7d5 f992 	bl	8000298 <__aeabi_dsub>
 802af74:	f805 6b01 	strb.w	r6, [r5], #1
 802af78:	eba5 060b 	sub.w	r6, r5, fp
 802af7c:	45b1      	cmp	r9, r6
 802af7e:	4602      	mov	r2, r0
 802af80:	460b      	mov	r3, r1
 802af82:	d139      	bne.n	802aff8 <_dtoa_r+0x6c8>
 802af84:	f7d5 f98a 	bl	800029c <__adddf3>
 802af88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802af8c:	4606      	mov	r6, r0
 802af8e:	460f      	mov	r7, r1
 802af90:	f7d5 fdca 	bl	8000b28 <__aeabi_dcmpgt>
 802af94:	b9c8      	cbnz	r0, 802afca <_dtoa_r+0x69a>
 802af96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802af9a:	4630      	mov	r0, r6
 802af9c:	4639      	mov	r1, r7
 802af9e:	f7d5 fd9b 	bl	8000ad8 <__aeabi_dcmpeq>
 802afa2:	b110      	cbz	r0, 802afaa <_dtoa_r+0x67a>
 802afa4:	f018 0f01 	tst.w	r8, #1
 802afa8:	d10f      	bne.n	802afca <_dtoa_r+0x69a>
 802afaa:	9904      	ldr	r1, [sp, #16]
 802afac:	4620      	mov	r0, r4
 802afae:	f000 fff6 	bl	802bf9e <_Bfree>
 802afb2:	2300      	movs	r3, #0
 802afb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802afb6:	702b      	strb	r3, [r5, #0]
 802afb8:	f10a 0301 	add.w	r3, sl, #1
 802afbc:	6013      	str	r3, [r2, #0]
 802afbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802afc0:	2b00      	cmp	r3, #0
 802afc2:	f000 8241 	beq.w	802b448 <_dtoa_r+0xb18>
 802afc6:	601d      	str	r5, [r3, #0]
 802afc8:	e23e      	b.n	802b448 <_dtoa_r+0xb18>
 802afca:	f8cd a020 	str.w	sl, [sp, #32]
 802afce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802afd2:	2a39      	cmp	r2, #57	; 0x39
 802afd4:	f105 33ff 	add.w	r3, r5, #4294967295
 802afd8:	d108      	bne.n	802afec <_dtoa_r+0x6bc>
 802afda:	459b      	cmp	fp, r3
 802afdc:	d10a      	bne.n	802aff4 <_dtoa_r+0x6c4>
 802afde:	9b08      	ldr	r3, [sp, #32]
 802afe0:	3301      	adds	r3, #1
 802afe2:	9308      	str	r3, [sp, #32]
 802afe4:	2330      	movs	r3, #48	; 0x30
 802afe6:	f88b 3000 	strb.w	r3, [fp]
 802afea:	465b      	mov	r3, fp
 802afec:	781a      	ldrb	r2, [r3, #0]
 802afee:	3201      	adds	r2, #1
 802aff0:	701a      	strb	r2, [r3, #0]
 802aff2:	e78c      	b.n	802af0e <_dtoa_r+0x5de>
 802aff4:	461d      	mov	r5, r3
 802aff6:	e7ea      	b.n	802afce <_dtoa_r+0x69e>
 802aff8:	2200      	movs	r2, #0
 802affa:	4b9b      	ldr	r3, [pc, #620]	; (802b268 <_dtoa_r+0x938>)
 802affc:	f7d5 fb04 	bl	8000608 <__aeabi_dmul>
 802b000:	2200      	movs	r2, #0
 802b002:	2300      	movs	r3, #0
 802b004:	4606      	mov	r6, r0
 802b006:	460f      	mov	r7, r1
 802b008:	f7d5 fd66 	bl	8000ad8 <__aeabi_dcmpeq>
 802b00c:	2800      	cmp	r0, #0
 802b00e:	d09a      	beq.n	802af46 <_dtoa_r+0x616>
 802b010:	e7cb      	b.n	802afaa <_dtoa_r+0x67a>
 802b012:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802b014:	2a00      	cmp	r2, #0
 802b016:	f000 808b 	beq.w	802b130 <_dtoa_r+0x800>
 802b01a:	9a06      	ldr	r2, [sp, #24]
 802b01c:	2a01      	cmp	r2, #1
 802b01e:	dc6e      	bgt.n	802b0fe <_dtoa_r+0x7ce>
 802b020:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802b022:	2a00      	cmp	r2, #0
 802b024:	d067      	beq.n	802b0f6 <_dtoa_r+0x7c6>
 802b026:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802b02a:	9f07      	ldr	r7, [sp, #28]
 802b02c:	9d05      	ldr	r5, [sp, #20]
 802b02e:	9a05      	ldr	r2, [sp, #20]
 802b030:	2101      	movs	r1, #1
 802b032:	441a      	add	r2, r3
 802b034:	4620      	mov	r0, r4
 802b036:	9205      	str	r2, [sp, #20]
 802b038:	4498      	add	r8, r3
 802b03a:	f001 f88e 	bl	802c15a <__i2b>
 802b03e:	4606      	mov	r6, r0
 802b040:	2d00      	cmp	r5, #0
 802b042:	dd0c      	ble.n	802b05e <_dtoa_r+0x72e>
 802b044:	f1b8 0f00 	cmp.w	r8, #0
 802b048:	dd09      	ble.n	802b05e <_dtoa_r+0x72e>
 802b04a:	4545      	cmp	r5, r8
 802b04c:	9a05      	ldr	r2, [sp, #20]
 802b04e:	462b      	mov	r3, r5
 802b050:	bfa8      	it	ge
 802b052:	4643      	movge	r3, r8
 802b054:	1ad2      	subs	r2, r2, r3
 802b056:	9205      	str	r2, [sp, #20]
 802b058:	1aed      	subs	r5, r5, r3
 802b05a:	eba8 0803 	sub.w	r8, r8, r3
 802b05e:	9b07      	ldr	r3, [sp, #28]
 802b060:	b1eb      	cbz	r3, 802b09e <_dtoa_r+0x76e>
 802b062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b064:	2b00      	cmp	r3, #0
 802b066:	d067      	beq.n	802b138 <_dtoa_r+0x808>
 802b068:	b18f      	cbz	r7, 802b08e <_dtoa_r+0x75e>
 802b06a:	4631      	mov	r1, r6
 802b06c:	463a      	mov	r2, r7
 802b06e:	4620      	mov	r0, r4
 802b070:	f001 f912 	bl	802c298 <__pow5mult>
 802b074:	9a04      	ldr	r2, [sp, #16]
 802b076:	4601      	mov	r1, r0
 802b078:	4606      	mov	r6, r0
 802b07a:	4620      	mov	r0, r4
 802b07c:	f001 f876 	bl	802c16c <__multiply>
 802b080:	9904      	ldr	r1, [sp, #16]
 802b082:	9008      	str	r0, [sp, #32]
 802b084:	4620      	mov	r0, r4
 802b086:	f000 ff8a 	bl	802bf9e <_Bfree>
 802b08a:	9b08      	ldr	r3, [sp, #32]
 802b08c:	9304      	str	r3, [sp, #16]
 802b08e:	9b07      	ldr	r3, [sp, #28]
 802b090:	1bda      	subs	r2, r3, r7
 802b092:	d004      	beq.n	802b09e <_dtoa_r+0x76e>
 802b094:	9904      	ldr	r1, [sp, #16]
 802b096:	4620      	mov	r0, r4
 802b098:	f001 f8fe 	bl	802c298 <__pow5mult>
 802b09c:	9004      	str	r0, [sp, #16]
 802b09e:	2101      	movs	r1, #1
 802b0a0:	4620      	mov	r0, r4
 802b0a2:	f001 f85a 	bl	802c15a <__i2b>
 802b0a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b0a8:	4607      	mov	r7, r0
 802b0aa:	2b00      	cmp	r3, #0
 802b0ac:	f000 81d0 	beq.w	802b450 <_dtoa_r+0xb20>
 802b0b0:	461a      	mov	r2, r3
 802b0b2:	4601      	mov	r1, r0
 802b0b4:	4620      	mov	r0, r4
 802b0b6:	f001 f8ef 	bl	802c298 <__pow5mult>
 802b0ba:	9b06      	ldr	r3, [sp, #24]
 802b0bc:	2b01      	cmp	r3, #1
 802b0be:	4607      	mov	r7, r0
 802b0c0:	dc40      	bgt.n	802b144 <_dtoa_r+0x814>
 802b0c2:	9b00      	ldr	r3, [sp, #0]
 802b0c4:	2b00      	cmp	r3, #0
 802b0c6:	d139      	bne.n	802b13c <_dtoa_r+0x80c>
 802b0c8:	9b01      	ldr	r3, [sp, #4]
 802b0ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802b0ce:	2b00      	cmp	r3, #0
 802b0d0:	d136      	bne.n	802b140 <_dtoa_r+0x810>
 802b0d2:	9b01      	ldr	r3, [sp, #4]
 802b0d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b0d8:	0d1b      	lsrs	r3, r3, #20
 802b0da:	051b      	lsls	r3, r3, #20
 802b0dc:	b12b      	cbz	r3, 802b0ea <_dtoa_r+0x7ba>
 802b0de:	9b05      	ldr	r3, [sp, #20]
 802b0e0:	3301      	adds	r3, #1
 802b0e2:	9305      	str	r3, [sp, #20]
 802b0e4:	f108 0801 	add.w	r8, r8, #1
 802b0e8:	2301      	movs	r3, #1
 802b0ea:	9307      	str	r3, [sp, #28]
 802b0ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b0ee:	2b00      	cmp	r3, #0
 802b0f0:	d12a      	bne.n	802b148 <_dtoa_r+0x818>
 802b0f2:	2001      	movs	r0, #1
 802b0f4:	e030      	b.n	802b158 <_dtoa_r+0x828>
 802b0f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802b0f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802b0fc:	e795      	b.n	802b02a <_dtoa_r+0x6fa>
 802b0fe:	9b07      	ldr	r3, [sp, #28]
 802b100:	f109 37ff 	add.w	r7, r9, #4294967295
 802b104:	42bb      	cmp	r3, r7
 802b106:	bfbf      	itttt	lt
 802b108:	9b07      	ldrlt	r3, [sp, #28]
 802b10a:	9707      	strlt	r7, [sp, #28]
 802b10c:	1afa      	sublt	r2, r7, r3
 802b10e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 802b110:	bfbb      	ittet	lt
 802b112:	189b      	addlt	r3, r3, r2
 802b114:	930e      	strlt	r3, [sp, #56]	; 0x38
 802b116:	1bdf      	subge	r7, r3, r7
 802b118:	2700      	movlt	r7, #0
 802b11a:	f1b9 0f00 	cmp.w	r9, #0
 802b11e:	bfb5      	itete	lt
 802b120:	9b05      	ldrlt	r3, [sp, #20]
 802b122:	9d05      	ldrge	r5, [sp, #20]
 802b124:	eba3 0509 	sublt.w	r5, r3, r9
 802b128:	464b      	movge	r3, r9
 802b12a:	bfb8      	it	lt
 802b12c:	2300      	movlt	r3, #0
 802b12e:	e77e      	b.n	802b02e <_dtoa_r+0x6fe>
 802b130:	9f07      	ldr	r7, [sp, #28]
 802b132:	9d05      	ldr	r5, [sp, #20]
 802b134:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802b136:	e783      	b.n	802b040 <_dtoa_r+0x710>
 802b138:	9a07      	ldr	r2, [sp, #28]
 802b13a:	e7ab      	b.n	802b094 <_dtoa_r+0x764>
 802b13c:	2300      	movs	r3, #0
 802b13e:	e7d4      	b.n	802b0ea <_dtoa_r+0x7ba>
 802b140:	9b00      	ldr	r3, [sp, #0]
 802b142:	e7d2      	b.n	802b0ea <_dtoa_r+0x7ba>
 802b144:	2300      	movs	r3, #0
 802b146:	9307      	str	r3, [sp, #28]
 802b148:	693b      	ldr	r3, [r7, #16]
 802b14a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 802b14e:	6918      	ldr	r0, [r3, #16]
 802b150:	f000 ffb5 	bl	802c0be <__hi0bits>
 802b154:	f1c0 0020 	rsb	r0, r0, #32
 802b158:	4440      	add	r0, r8
 802b15a:	f010 001f 	ands.w	r0, r0, #31
 802b15e:	d047      	beq.n	802b1f0 <_dtoa_r+0x8c0>
 802b160:	f1c0 0320 	rsb	r3, r0, #32
 802b164:	2b04      	cmp	r3, #4
 802b166:	dd3b      	ble.n	802b1e0 <_dtoa_r+0x8b0>
 802b168:	9b05      	ldr	r3, [sp, #20]
 802b16a:	f1c0 001c 	rsb	r0, r0, #28
 802b16e:	4403      	add	r3, r0
 802b170:	9305      	str	r3, [sp, #20]
 802b172:	4405      	add	r5, r0
 802b174:	4480      	add	r8, r0
 802b176:	9b05      	ldr	r3, [sp, #20]
 802b178:	2b00      	cmp	r3, #0
 802b17a:	dd05      	ble.n	802b188 <_dtoa_r+0x858>
 802b17c:	461a      	mov	r2, r3
 802b17e:	9904      	ldr	r1, [sp, #16]
 802b180:	4620      	mov	r0, r4
 802b182:	f001 f8d7 	bl	802c334 <__lshift>
 802b186:	9004      	str	r0, [sp, #16]
 802b188:	f1b8 0f00 	cmp.w	r8, #0
 802b18c:	dd05      	ble.n	802b19a <_dtoa_r+0x86a>
 802b18e:	4639      	mov	r1, r7
 802b190:	4642      	mov	r2, r8
 802b192:	4620      	mov	r0, r4
 802b194:	f001 f8ce 	bl	802c334 <__lshift>
 802b198:	4607      	mov	r7, r0
 802b19a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802b19c:	b353      	cbz	r3, 802b1f4 <_dtoa_r+0x8c4>
 802b19e:	4639      	mov	r1, r7
 802b1a0:	9804      	ldr	r0, [sp, #16]
 802b1a2:	f001 f91b 	bl	802c3dc <__mcmp>
 802b1a6:	2800      	cmp	r0, #0
 802b1a8:	da24      	bge.n	802b1f4 <_dtoa_r+0x8c4>
 802b1aa:	2300      	movs	r3, #0
 802b1ac:	220a      	movs	r2, #10
 802b1ae:	9904      	ldr	r1, [sp, #16]
 802b1b0:	4620      	mov	r0, r4
 802b1b2:	f000 ff0b 	bl	802bfcc <__multadd>
 802b1b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b1b8:	9004      	str	r0, [sp, #16]
 802b1ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 802b1be:	2b00      	cmp	r3, #0
 802b1c0:	f000 814d 	beq.w	802b45e <_dtoa_r+0xb2e>
 802b1c4:	2300      	movs	r3, #0
 802b1c6:	4631      	mov	r1, r6
 802b1c8:	220a      	movs	r2, #10
 802b1ca:	4620      	mov	r0, r4
 802b1cc:	f000 fefe 	bl	802bfcc <__multadd>
 802b1d0:	9b02      	ldr	r3, [sp, #8]
 802b1d2:	2b00      	cmp	r3, #0
 802b1d4:	4606      	mov	r6, r0
 802b1d6:	dc4f      	bgt.n	802b278 <_dtoa_r+0x948>
 802b1d8:	9b06      	ldr	r3, [sp, #24]
 802b1da:	2b02      	cmp	r3, #2
 802b1dc:	dd4c      	ble.n	802b278 <_dtoa_r+0x948>
 802b1de:	e011      	b.n	802b204 <_dtoa_r+0x8d4>
 802b1e0:	d0c9      	beq.n	802b176 <_dtoa_r+0x846>
 802b1e2:	9a05      	ldr	r2, [sp, #20]
 802b1e4:	331c      	adds	r3, #28
 802b1e6:	441a      	add	r2, r3
 802b1e8:	9205      	str	r2, [sp, #20]
 802b1ea:	441d      	add	r5, r3
 802b1ec:	4498      	add	r8, r3
 802b1ee:	e7c2      	b.n	802b176 <_dtoa_r+0x846>
 802b1f0:	4603      	mov	r3, r0
 802b1f2:	e7f6      	b.n	802b1e2 <_dtoa_r+0x8b2>
 802b1f4:	f1b9 0f00 	cmp.w	r9, #0
 802b1f8:	dc38      	bgt.n	802b26c <_dtoa_r+0x93c>
 802b1fa:	9b06      	ldr	r3, [sp, #24]
 802b1fc:	2b02      	cmp	r3, #2
 802b1fe:	dd35      	ble.n	802b26c <_dtoa_r+0x93c>
 802b200:	f8cd 9008 	str.w	r9, [sp, #8]
 802b204:	9b02      	ldr	r3, [sp, #8]
 802b206:	b963      	cbnz	r3, 802b222 <_dtoa_r+0x8f2>
 802b208:	4639      	mov	r1, r7
 802b20a:	2205      	movs	r2, #5
 802b20c:	4620      	mov	r0, r4
 802b20e:	f000 fedd 	bl	802bfcc <__multadd>
 802b212:	4601      	mov	r1, r0
 802b214:	4607      	mov	r7, r0
 802b216:	9804      	ldr	r0, [sp, #16]
 802b218:	f001 f8e0 	bl	802c3dc <__mcmp>
 802b21c:	2800      	cmp	r0, #0
 802b21e:	f73f adcc 	bgt.w	802adba <_dtoa_r+0x48a>
 802b222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802b224:	465d      	mov	r5, fp
 802b226:	ea6f 0a03 	mvn.w	sl, r3
 802b22a:	f04f 0900 	mov.w	r9, #0
 802b22e:	4639      	mov	r1, r7
 802b230:	4620      	mov	r0, r4
 802b232:	f000 feb4 	bl	802bf9e <_Bfree>
 802b236:	2e00      	cmp	r6, #0
 802b238:	f43f aeb7 	beq.w	802afaa <_dtoa_r+0x67a>
 802b23c:	f1b9 0f00 	cmp.w	r9, #0
 802b240:	d005      	beq.n	802b24e <_dtoa_r+0x91e>
 802b242:	45b1      	cmp	r9, r6
 802b244:	d003      	beq.n	802b24e <_dtoa_r+0x91e>
 802b246:	4649      	mov	r1, r9
 802b248:	4620      	mov	r0, r4
 802b24a:	f000 fea8 	bl	802bf9e <_Bfree>
 802b24e:	4631      	mov	r1, r6
 802b250:	4620      	mov	r0, r4
 802b252:	f000 fea4 	bl	802bf9e <_Bfree>
 802b256:	e6a8      	b.n	802afaa <_dtoa_r+0x67a>
 802b258:	2700      	movs	r7, #0
 802b25a:	463e      	mov	r6, r7
 802b25c:	e7e1      	b.n	802b222 <_dtoa_r+0x8f2>
 802b25e:	f8dd a020 	ldr.w	sl, [sp, #32]
 802b262:	463e      	mov	r6, r7
 802b264:	e5a9      	b.n	802adba <_dtoa_r+0x48a>
 802b266:	bf00      	nop
 802b268:	40240000 	.word	0x40240000
 802b26c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b26e:	f8cd 9008 	str.w	r9, [sp, #8]
 802b272:	2b00      	cmp	r3, #0
 802b274:	f000 80fa 	beq.w	802b46c <_dtoa_r+0xb3c>
 802b278:	2d00      	cmp	r5, #0
 802b27a:	dd05      	ble.n	802b288 <_dtoa_r+0x958>
 802b27c:	4631      	mov	r1, r6
 802b27e:	462a      	mov	r2, r5
 802b280:	4620      	mov	r0, r4
 802b282:	f001 f857 	bl	802c334 <__lshift>
 802b286:	4606      	mov	r6, r0
 802b288:	9b07      	ldr	r3, [sp, #28]
 802b28a:	2b00      	cmp	r3, #0
 802b28c:	d04c      	beq.n	802b328 <_dtoa_r+0x9f8>
 802b28e:	6871      	ldr	r1, [r6, #4]
 802b290:	4620      	mov	r0, r4
 802b292:	f000 fe50 	bl	802bf36 <_Balloc>
 802b296:	6932      	ldr	r2, [r6, #16]
 802b298:	3202      	adds	r2, #2
 802b29a:	4605      	mov	r5, r0
 802b29c:	0092      	lsls	r2, r2, #2
 802b29e:	f106 010c 	add.w	r1, r6, #12
 802b2a2:	300c      	adds	r0, #12
 802b2a4:	f7fd fa58 	bl	8028758 <memcpy>
 802b2a8:	2201      	movs	r2, #1
 802b2aa:	4629      	mov	r1, r5
 802b2ac:	4620      	mov	r0, r4
 802b2ae:	f001 f841 	bl	802c334 <__lshift>
 802b2b2:	9b00      	ldr	r3, [sp, #0]
 802b2b4:	f8cd b014 	str.w	fp, [sp, #20]
 802b2b8:	f003 0301 	and.w	r3, r3, #1
 802b2bc:	46b1      	mov	r9, r6
 802b2be:	9307      	str	r3, [sp, #28]
 802b2c0:	4606      	mov	r6, r0
 802b2c2:	4639      	mov	r1, r7
 802b2c4:	9804      	ldr	r0, [sp, #16]
 802b2c6:	f7ff faa4 	bl	802a812 <quorem>
 802b2ca:	4649      	mov	r1, r9
 802b2cc:	4605      	mov	r5, r0
 802b2ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 802b2d2:	9804      	ldr	r0, [sp, #16]
 802b2d4:	f001 f882 	bl	802c3dc <__mcmp>
 802b2d8:	4632      	mov	r2, r6
 802b2da:	9000      	str	r0, [sp, #0]
 802b2dc:	4639      	mov	r1, r7
 802b2de:	4620      	mov	r0, r4
 802b2e0:	f001 f896 	bl	802c410 <__mdiff>
 802b2e4:	68c3      	ldr	r3, [r0, #12]
 802b2e6:	4602      	mov	r2, r0
 802b2e8:	bb03      	cbnz	r3, 802b32c <_dtoa_r+0x9fc>
 802b2ea:	4601      	mov	r1, r0
 802b2ec:	9008      	str	r0, [sp, #32]
 802b2ee:	9804      	ldr	r0, [sp, #16]
 802b2f0:	f001 f874 	bl	802c3dc <__mcmp>
 802b2f4:	9a08      	ldr	r2, [sp, #32]
 802b2f6:	4603      	mov	r3, r0
 802b2f8:	4611      	mov	r1, r2
 802b2fa:	4620      	mov	r0, r4
 802b2fc:	9308      	str	r3, [sp, #32]
 802b2fe:	f000 fe4e 	bl	802bf9e <_Bfree>
 802b302:	9b08      	ldr	r3, [sp, #32]
 802b304:	b9a3      	cbnz	r3, 802b330 <_dtoa_r+0xa00>
 802b306:	9a06      	ldr	r2, [sp, #24]
 802b308:	b992      	cbnz	r2, 802b330 <_dtoa_r+0xa00>
 802b30a:	9a07      	ldr	r2, [sp, #28]
 802b30c:	b982      	cbnz	r2, 802b330 <_dtoa_r+0xa00>
 802b30e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802b312:	d029      	beq.n	802b368 <_dtoa_r+0xa38>
 802b314:	9b00      	ldr	r3, [sp, #0]
 802b316:	2b00      	cmp	r3, #0
 802b318:	dd01      	ble.n	802b31e <_dtoa_r+0x9ee>
 802b31a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 802b31e:	9b05      	ldr	r3, [sp, #20]
 802b320:	1c5d      	adds	r5, r3, #1
 802b322:	f883 8000 	strb.w	r8, [r3]
 802b326:	e782      	b.n	802b22e <_dtoa_r+0x8fe>
 802b328:	4630      	mov	r0, r6
 802b32a:	e7c2      	b.n	802b2b2 <_dtoa_r+0x982>
 802b32c:	2301      	movs	r3, #1
 802b32e:	e7e3      	b.n	802b2f8 <_dtoa_r+0x9c8>
 802b330:	9a00      	ldr	r2, [sp, #0]
 802b332:	2a00      	cmp	r2, #0
 802b334:	db04      	blt.n	802b340 <_dtoa_r+0xa10>
 802b336:	d125      	bne.n	802b384 <_dtoa_r+0xa54>
 802b338:	9a06      	ldr	r2, [sp, #24]
 802b33a:	bb1a      	cbnz	r2, 802b384 <_dtoa_r+0xa54>
 802b33c:	9a07      	ldr	r2, [sp, #28]
 802b33e:	bb0a      	cbnz	r2, 802b384 <_dtoa_r+0xa54>
 802b340:	2b00      	cmp	r3, #0
 802b342:	ddec      	ble.n	802b31e <_dtoa_r+0x9ee>
 802b344:	2201      	movs	r2, #1
 802b346:	9904      	ldr	r1, [sp, #16]
 802b348:	4620      	mov	r0, r4
 802b34a:	f000 fff3 	bl	802c334 <__lshift>
 802b34e:	4639      	mov	r1, r7
 802b350:	9004      	str	r0, [sp, #16]
 802b352:	f001 f843 	bl	802c3dc <__mcmp>
 802b356:	2800      	cmp	r0, #0
 802b358:	dc03      	bgt.n	802b362 <_dtoa_r+0xa32>
 802b35a:	d1e0      	bne.n	802b31e <_dtoa_r+0x9ee>
 802b35c:	f018 0f01 	tst.w	r8, #1
 802b360:	d0dd      	beq.n	802b31e <_dtoa_r+0x9ee>
 802b362:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802b366:	d1d8      	bne.n	802b31a <_dtoa_r+0x9ea>
 802b368:	9b05      	ldr	r3, [sp, #20]
 802b36a:	9a05      	ldr	r2, [sp, #20]
 802b36c:	1c5d      	adds	r5, r3, #1
 802b36e:	2339      	movs	r3, #57	; 0x39
 802b370:	7013      	strb	r3, [r2, #0]
 802b372:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802b376:	2b39      	cmp	r3, #57	; 0x39
 802b378:	f105 32ff 	add.w	r2, r5, #4294967295
 802b37c:	d04f      	beq.n	802b41e <_dtoa_r+0xaee>
 802b37e:	3301      	adds	r3, #1
 802b380:	7013      	strb	r3, [r2, #0]
 802b382:	e754      	b.n	802b22e <_dtoa_r+0x8fe>
 802b384:	9a05      	ldr	r2, [sp, #20]
 802b386:	2b00      	cmp	r3, #0
 802b388:	f102 0501 	add.w	r5, r2, #1
 802b38c:	dd06      	ble.n	802b39c <_dtoa_r+0xa6c>
 802b38e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802b392:	d0e9      	beq.n	802b368 <_dtoa_r+0xa38>
 802b394:	f108 0801 	add.w	r8, r8, #1
 802b398:	9b05      	ldr	r3, [sp, #20]
 802b39a:	e7c2      	b.n	802b322 <_dtoa_r+0x9f2>
 802b39c:	9a02      	ldr	r2, [sp, #8]
 802b39e:	f805 8c01 	strb.w	r8, [r5, #-1]
 802b3a2:	eba5 030b 	sub.w	r3, r5, fp
 802b3a6:	4293      	cmp	r3, r2
 802b3a8:	d021      	beq.n	802b3ee <_dtoa_r+0xabe>
 802b3aa:	2300      	movs	r3, #0
 802b3ac:	220a      	movs	r2, #10
 802b3ae:	9904      	ldr	r1, [sp, #16]
 802b3b0:	4620      	mov	r0, r4
 802b3b2:	f000 fe0b 	bl	802bfcc <__multadd>
 802b3b6:	45b1      	cmp	r9, r6
 802b3b8:	9004      	str	r0, [sp, #16]
 802b3ba:	f04f 0300 	mov.w	r3, #0
 802b3be:	f04f 020a 	mov.w	r2, #10
 802b3c2:	4649      	mov	r1, r9
 802b3c4:	4620      	mov	r0, r4
 802b3c6:	d105      	bne.n	802b3d4 <_dtoa_r+0xaa4>
 802b3c8:	f000 fe00 	bl	802bfcc <__multadd>
 802b3cc:	4681      	mov	r9, r0
 802b3ce:	4606      	mov	r6, r0
 802b3d0:	9505      	str	r5, [sp, #20]
 802b3d2:	e776      	b.n	802b2c2 <_dtoa_r+0x992>
 802b3d4:	f000 fdfa 	bl	802bfcc <__multadd>
 802b3d8:	4631      	mov	r1, r6
 802b3da:	4681      	mov	r9, r0
 802b3dc:	2300      	movs	r3, #0
 802b3de:	220a      	movs	r2, #10
 802b3e0:	4620      	mov	r0, r4
 802b3e2:	f000 fdf3 	bl	802bfcc <__multadd>
 802b3e6:	4606      	mov	r6, r0
 802b3e8:	e7f2      	b.n	802b3d0 <_dtoa_r+0xaa0>
 802b3ea:	f04f 0900 	mov.w	r9, #0
 802b3ee:	2201      	movs	r2, #1
 802b3f0:	9904      	ldr	r1, [sp, #16]
 802b3f2:	4620      	mov	r0, r4
 802b3f4:	f000 ff9e 	bl	802c334 <__lshift>
 802b3f8:	4639      	mov	r1, r7
 802b3fa:	9004      	str	r0, [sp, #16]
 802b3fc:	f000 ffee 	bl	802c3dc <__mcmp>
 802b400:	2800      	cmp	r0, #0
 802b402:	dcb6      	bgt.n	802b372 <_dtoa_r+0xa42>
 802b404:	d102      	bne.n	802b40c <_dtoa_r+0xadc>
 802b406:	f018 0f01 	tst.w	r8, #1
 802b40a:	d1b2      	bne.n	802b372 <_dtoa_r+0xa42>
 802b40c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802b410:	2b30      	cmp	r3, #48	; 0x30
 802b412:	f105 32ff 	add.w	r2, r5, #4294967295
 802b416:	f47f af0a 	bne.w	802b22e <_dtoa_r+0x8fe>
 802b41a:	4615      	mov	r5, r2
 802b41c:	e7f6      	b.n	802b40c <_dtoa_r+0xadc>
 802b41e:	4593      	cmp	fp, r2
 802b420:	d105      	bne.n	802b42e <_dtoa_r+0xafe>
 802b422:	2331      	movs	r3, #49	; 0x31
 802b424:	f10a 0a01 	add.w	sl, sl, #1
 802b428:	f88b 3000 	strb.w	r3, [fp]
 802b42c:	e6ff      	b.n	802b22e <_dtoa_r+0x8fe>
 802b42e:	4615      	mov	r5, r2
 802b430:	e79f      	b.n	802b372 <_dtoa_r+0xa42>
 802b432:	f8df b064 	ldr.w	fp, [pc, #100]	; 802b498 <_dtoa_r+0xb68>
 802b436:	e007      	b.n	802b448 <_dtoa_r+0xb18>
 802b438:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b43a:	f8df b060 	ldr.w	fp, [pc, #96]	; 802b49c <_dtoa_r+0xb6c>
 802b43e:	b11b      	cbz	r3, 802b448 <_dtoa_r+0xb18>
 802b440:	f10b 0308 	add.w	r3, fp, #8
 802b444:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802b446:	6013      	str	r3, [r2, #0]
 802b448:	4658      	mov	r0, fp
 802b44a:	b017      	add	sp, #92	; 0x5c
 802b44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b450:	9b06      	ldr	r3, [sp, #24]
 802b452:	2b01      	cmp	r3, #1
 802b454:	f77f ae35 	ble.w	802b0c2 <_dtoa_r+0x792>
 802b458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b45a:	9307      	str	r3, [sp, #28]
 802b45c:	e649      	b.n	802b0f2 <_dtoa_r+0x7c2>
 802b45e:	9b02      	ldr	r3, [sp, #8]
 802b460:	2b00      	cmp	r3, #0
 802b462:	dc03      	bgt.n	802b46c <_dtoa_r+0xb3c>
 802b464:	9b06      	ldr	r3, [sp, #24]
 802b466:	2b02      	cmp	r3, #2
 802b468:	f73f aecc 	bgt.w	802b204 <_dtoa_r+0x8d4>
 802b46c:	465d      	mov	r5, fp
 802b46e:	4639      	mov	r1, r7
 802b470:	9804      	ldr	r0, [sp, #16]
 802b472:	f7ff f9ce 	bl	802a812 <quorem>
 802b476:	f100 0830 	add.w	r8, r0, #48	; 0x30
 802b47a:	f805 8b01 	strb.w	r8, [r5], #1
 802b47e:	9a02      	ldr	r2, [sp, #8]
 802b480:	eba5 030b 	sub.w	r3, r5, fp
 802b484:	429a      	cmp	r2, r3
 802b486:	ddb0      	ble.n	802b3ea <_dtoa_r+0xaba>
 802b488:	2300      	movs	r3, #0
 802b48a:	220a      	movs	r2, #10
 802b48c:	9904      	ldr	r1, [sp, #16]
 802b48e:	4620      	mov	r0, r4
 802b490:	f000 fd9c 	bl	802bfcc <__multadd>
 802b494:	9004      	str	r0, [sp, #16]
 802b496:	e7ea      	b.n	802b46e <_dtoa_r+0xb3e>
 802b498:	0802e5f1 	.word	0x0802e5f1
 802b49c:	0802e670 	.word	0x0802e670

0802b4a0 <__sflush_r>:
 802b4a0:	898a      	ldrh	r2, [r1, #12]
 802b4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b4a6:	4605      	mov	r5, r0
 802b4a8:	0710      	lsls	r0, r2, #28
 802b4aa:	460c      	mov	r4, r1
 802b4ac:	d458      	bmi.n	802b560 <__sflush_r+0xc0>
 802b4ae:	684b      	ldr	r3, [r1, #4]
 802b4b0:	2b00      	cmp	r3, #0
 802b4b2:	dc05      	bgt.n	802b4c0 <__sflush_r+0x20>
 802b4b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802b4b6:	2b00      	cmp	r3, #0
 802b4b8:	dc02      	bgt.n	802b4c0 <__sflush_r+0x20>
 802b4ba:	2000      	movs	r0, #0
 802b4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b4c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b4c2:	2e00      	cmp	r6, #0
 802b4c4:	d0f9      	beq.n	802b4ba <__sflush_r+0x1a>
 802b4c6:	2300      	movs	r3, #0
 802b4c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802b4cc:	682f      	ldr	r7, [r5, #0]
 802b4ce:	6a21      	ldr	r1, [r4, #32]
 802b4d0:	602b      	str	r3, [r5, #0]
 802b4d2:	d032      	beq.n	802b53a <__sflush_r+0x9a>
 802b4d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802b4d6:	89a3      	ldrh	r3, [r4, #12]
 802b4d8:	075a      	lsls	r2, r3, #29
 802b4da:	d505      	bpl.n	802b4e8 <__sflush_r+0x48>
 802b4dc:	6863      	ldr	r3, [r4, #4]
 802b4de:	1ac0      	subs	r0, r0, r3
 802b4e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b4e2:	b10b      	cbz	r3, 802b4e8 <__sflush_r+0x48>
 802b4e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802b4e6:	1ac0      	subs	r0, r0, r3
 802b4e8:	2300      	movs	r3, #0
 802b4ea:	4602      	mov	r2, r0
 802b4ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b4ee:	6a21      	ldr	r1, [r4, #32]
 802b4f0:	4628      	mov	r0, r5
 802b4f2:	47b0      	blx	r6
 802b4f4:	1c43      	adds	r3, r0, #1
 802b4f6:	89a3      	ldrh	r3, [r4, #12]
 802b4f8:	d106      	bne.n	802b508 <__sflush_r+0x68>
 802b4fa:	6829      	ldr	r1, [r5, #0]
 802b4fc:	291d      	cmp	r1, #29
 802b4fe:	d848      	bhi.n	802b592 <__sflush_r+0xf2>
 802b500:	4a29      	ldr	r2, [pc, #164]	; (802b5a8 <__sflush_r+0x108>)
 802b502:	40ca      	lsrs	r2, r1
 802b504:	07d6      	lsls	r6, r2, #31
 802b506:	d544      	bpl.n	802b592 <__sflush_r+0xf2>
 802b508:	2200      	movs	r2, #0
 802b50a:	6062      	str	r2, [r4, #4]
 802b50c:	04d9      	lsls	r1, r3, #19
 802b50e:	6922      	ldr	r2, [r4, #16]
 802b510:	6022      	str	r2, [r4, #0]
 802b512:	d504      	bpl.n	802b51e <__sflush_r+0x7e>
 802b514:	1c42      	adds	r2, r0, #1
 802b516:	d101      	bne.n	802b51c <__sflush_r+0x7c>
 802b518:	682b      	ldr	r3, [r5, #0]
 802b51a:	b903      	cbnz	r3, 802b51e <__sflush_r+0x7e>
 802b51c:	6560      	str	r0, [r4, #84]	; 0x54
 802b51e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b520:	602f      	str	r7, [r5, #0]
 802b522:	2900      	cmp	r1, #0
 802b524:	d0c9      	beq.n	802b4ba <__sflush_r+0x1a>
 802b526:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b52a:	4299      	cmp	r1, r3
 802b52c:	d002      	beq.n	802b534 <__sflush_r+0x94>
 802b52e:	4628      	mov	r0, r5
 802b530:	f001 f90e 	bl	802c750 <_free_r>
 802b534:	2000      	movs	r0, #0
 802b536:	6360      	str	r0, [r4, #52]	; 0x34
 802b538:	e7c0      	b.n	802b4bc <__sflush_r+0x1c>
 802b53a:	2301      	movs	r3, #1
 802b53c:	4628      	mov	r0, r5
 802b53e:	47b0      	blx	r6
 802b540:	1c41      	adds	r1, r0, #1
 802b542:	d1c8      	bne.n	802b4d6 <__sflush_r+0x36>
 802b544:	682b      	ldr	r3, [r5, #0]
 802b546:	2b00      	cmp	r3, #0
 802b548:	d0c5      	beq.n	802b4d6 <__sflush_r+0x36>
 802b54a:	2b1d      	cmp	r3, #29
 802b54c:	d001      	beq.n	802b552 <__sflush_r+0xb2>
 802b54e:	2b16      	cmp	r3, #22
 802b550:	d101      	bne.n	802b556 <__sflush_r+0xb6>
 802b552:	602f      	str	r7, [r5, #0]
 802b554:	e7b1      	b.n	802b4ba <__sflush_r+0x1a>
 802b556:	89a3      	ldrh	r3, [r4, #12]
 802b558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b55c:	81a3      	strh	r3, [r4, #12]
 802b55e:	e7ad      	b.n	802b4bc <__sflush_r+0x1c>
 802b560:	690f      	ldr	r7, [r1, #16]
 802b562:	2f00      	cmp	r7, #0
 802b564:	d0a9      	beq.n	802b4ba <__sflush_r+0x1a>
 802b566:	0793      	lsls	r3, r2, #30
 802b568:	680e      	ldr	r6, [r1, #0]
 802b56a:	bf08      	it	eq
 802b56c:	694b      	ldreq	r3, [r1, #20]
 802b56e:	600f      	str	r7, [r1, #0]
 802b570:	bf18      	it	ne
 802b572:	2300      	movne	r3, #0
 802b574:	eba6 0807 	sub.w	r8, r6, r7
 802b578:	608b      	str	r3, [r1, #8]
 802b57a:	f1b8 0f00 	cmp.w	r8, #0
 802b57e:	dd9c      	ble.n	802b4ba <__sflush_r+0x1a>
 802b580:	4643      	mov	r3, r8
 802b582:	463a      	mov	r2, r7
 802b584:	6a21      	ldr	r1, [r4, #32]
 802b586:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802b588:	4628      	mov	r0, r5
 802b58a:	47b0      	blx	r6
 802b58c:	2800      	cmp	r0, #0
 802b58e:	dc06      	bgt.n	802b59e <__sflush_r+0xfe>
 802b590:	89a3      	ldrh	r3, [r4, #12]
 802b592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b596:	81a3      	strh	r3, [r4, #12]
 802b598:	f04f 30ff 	mov.w	r0, #4294967295
 802b59c:	e78e      	b.n	802b4bc <__sflush_r+0x1c>
 802b59e:	4407      	add	r7, r0
 802b5a0:	eba8 0800 	sub.w	r8, r8, r0
 802b5a4:	e7e9      	b.n	802b57a <__sflush_r+0xda>
 802b5a6:	bf00      	nop
 802b5a8:	20400001 	.word	0x20400001

0802b5ac <_fflush_r>:
 802b5ac:	b538      	push	{r3, r4, r5, lr}
 802b5ae:	690b      	ldr	r3, [r1, #16]
 802b5b0:	4605      	mov	r5, r0
 802b5b2:	460c      	mov	r4, r1
 802b5b4:	b1db      	cbz	r3, 802b5ee <_fflush_r+0x42>
 802b5b6:	b118      	cbz	r0, 802b5c0 <_fflush_r+0x14>
 802b5b8:	6983      	ldr	r3, [r0, #24]
 802b5ba:	b90b      	cbnz	r3, 802b5c0 <_fflush_r+0x14>
 802b5bc:	f000 f860 	bl	802b680 <__sinit>
 802b5c0:	4b0c      	ldr	r3, [pc, #48]	; (802b5f4 <_fflush_r+0x48>)
 802b5c2:	429c      	cmp	r4, r3
 802b5c4:	d109      	bne.n	802b5da <_fflush_r+0x2e>
 802b5c6:	686c      	ldr	r4, [r5, #4]
 802b5c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b5cc:	b17b      	cbz	r3, 802b5ee <_fflush_r+0x42>
 802b5ce:	4621      	mov	r1, r4
 802b5d0:	4628      	mov	r0, r5
 802b5d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b5d6:	f7ff bf63 	b.w	802b4a0 <__sflush_r>
 802b5da:	4b07      	ldr	r3, [pc, #28]	; (802b5f8 <_fflush_r+0x4c>)
 802b5dc:	429c      	cmp	r4, r3
 802b5de:	d101      	bne.n	802b5e4 <_fflush_r+0x38>
 802b5e0:	68ac      	ldr	r4, [r5, #8]
 802b5e2:	e7f1      	b.n	802b5c8 <_fflush_r+0x1c>
 802b5e4:	4b05      	ldr	r3, [pc, #20]	; (802b5fc <_fflush_r+0x50>)
 802b5e6:	429c      	cmp	r4, r3
 802b5e8:	bf08      	it	eq
 802b5ea:	68ec      	ldreq	r4, [r5, #12]
 802b5ec:	e7ec      	b.n	802b5c8 <_fflush_r+0x1c>
 802b5ee:	2000      	movs	r0, #0
 802b5f0:	bd38      	pop	{r3, r4, r5, pc}
 802b5f2:	bf00      	nop
 802b5f4:	0802e6a0 	.word	0x0802e6a0
 802b5f8:	0802e6c0 	.word	0x0802e6c0
 802b5fc:	0802e680 	.word	0x0802e680

0802b600 <std>:
 802b600:	2300      	movs	r3, #0
 802b602:	b510      	push	{r4, lr}
 802b604:	4604      	mov	r4, r0
 802b606:	e9c0 3300 	strd	r3, r3, [r0]
 802b60a:	6083      	str	r3, [r0, #8]
 802b60c:	8181      	strh	r1, [r0, #12]
 802b60e:	6643      	str	r3, [r0, #100]	; 0x64
 802b610:	81c2      	strh	r2, [r0, #14]
 802b612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b616:	6183      	str	r3, [r0, #24]
 802b618:	4619      	mov	r1, r3
 802b61a:	2208      	movs	r2, #8
 802b61c:	305c      	adds	r0, #92	; 0x5c
 802b61e:	f7fd f8a6 	bl	802876e <memset>
 802b622:	4b05      	ldr	r3, [pc, #20]	; (802b638 <std+0x38>)
 802b624:	6263      	str	r3, [r4, #36]	; 0x24
 802b626:	4b05      	ldr	r3, [pc, #20]	; (802b63c <std+0x3c>)
 802b628:	62a3      	str	r3, [r4, #40]	; 0x28
 802b62a:	4b05      	ldr	r3, [pc, #20]	; (802b640 <std+0x40>)
 802b62c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802b62e:	4b05      	ldr	r3, [pc, #20]	; (802b644 <std+0x44>)
 802b630:	6224      	str	r4, [r4, #32]
 802b632:	6323      	str	r3, [r4, #48]	; 0x30
 802b634:	bd10      	pop	{r4, pc}
 802b636:	bf00      	nop
 802b638:	0802cc39 	.word	0x0802cc39
 802b63c:	0802cc5b 	.word	0x0802cc5b
 802b640:	0802cc93 	.word	0x0802cc93
 802b644:	0802ccb7 	.word	0x0802ccb7

0802b648 <_cleanup_r>:
 802b648:	4901      	ldr	r1, [pc, #4]	; (802b650 <_cleanup_r+0x8>)
 802b64a:	f000 b885 	b.w	802b758 <_fwalk_reent>
 802b64e:	bf00      	nop
 802b650:	0802b5ad 	.word	0x0802b5ad

0802b654 <__sfmoreglue>:
 802b654:	b570      	push	{r4, r5, r6, lr}
 802b656:	1e4a      	subs	r2, r1, #1
 802b658:	2568      	movs	r5, #104	; 0x68
 802b65a:	4355      	muls	r5, r2
 802b65c:	460e      	mov	r6, r1
 802b65e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802b662:	f001 f8c3 	bl	802c7ec <_malloc_r>
 802b666:	4604      	mov	r4, r0
 802b668:	b140      	cbz	r0, 802b67c <__sfmoreglue+0x28>
 802b66a:	2100      	movs	r1, #0
 802b66c:	e9c0 1600 	strd	r1, r6, [r0]
 802b670:	300c      	adds	r0, #12
 802b672:	60a0      	str	r0, [r4, #8]
 802b674:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802b678:	f7fd f879 	bl	802876e <memset>
 802b67c:	4620      	mov	r0, r4
 802b67e:	bd70      	pop	{r4, r5, r6, pc}

0802b680 <__sinit>:
 802b680:	6983      	ldr	r3, [r0, #24]
 802b682:	b510      	push	{r4, lr}
 802b684:	4604      	mov	r4, r0
 802b686:	bb33      	cbnz	r3, 802b6d6 <__sinit+0x56>
 802b688:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802b68c:	6503      	str	r3, [r0, #80]	; 0x50
 802b68e:	4b12      	ldr	r3, [pc, #72]	; (802b6d8 <__sinit+0x58>)
 802b690:	4a12      	ldr	r2, [pc, #72]	; (802b6dc <__sinit+0x5c>)
 802b692:	681b      	ldr	r3, [r3, #0]
 802b694:	6282      	str	r2, [r0, #40]	; 0x28
 802b696:	4298      	cmp	r0, r3
 802b698:	bf04      	itt	eq
 802b69a:	2301      	moveq	r3, #1
 802b69c:	6183      	streq	r3, [r0, #24]
 802b69e:	f000 f81f 	bl	802b6e0 <__sfp>
 802b6a2:	6060      	str	r0, [r4, #4]
 802b6a4:	4620      	mov	r0, r4
 802b6a6:	f000 f81b 	bl	802b6e0 <__sfp>
 802b6aa:	60a0      	str	r0, [r4, #8]
 802b6ac:	4620      	mov	r0, r4
 802b6ae:	f000 f817 	bl	802b6e0 <__sfp>
 802b6b2:	2200      	movs	r2, #0
 802b6b4:	60e0      	str	r0, [r4, #12]
 802b6b6:	2104      	movs	r1, #4
 802b6b8:	6860      	ldr	r0, [r4, #4]
 802b6ba:	f7ff ffa1 	bl	802b600 <std>
 802b6be:	2201      	movs	r2, #1
 802b6c0:	2109      	movs	r1, #9
 802b6c2:	68a0      	ldr	r0, [r4, #8]
 802b6c4:	f7ff ff9c 	bl	802b600 <std>
 802b6c8:	2202      	movs	r2, #2
 802b6ca:	2112      	movs	r1, #18
 802b6cc:	68e0      	ldr	r0, [r4, #12]
 802b6ce:	f7ff ff97 	bl	802b600 <std>
 802b6d2:	2301      	movs	r3, #1
 802b6d4:	61a3      	str	r3, [r4, #24]
 802b6d6:	bd10      	pop	{r4, pc}
 802b6d8:	0802e5cc 	.word	0x0802e5cc
 802b6dc:	0802b649 	.word	0x0802b649

0802b6e0 <__sfp>:
 802b6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b6e2:	4b1b      	ldr	r3, [pc, #108]	; (802b750 <__sfp+0x70>)
 802b6e4:	681e      	ldr	r6, [r3, #0]
 802b6e6:	69b3      	ldr	r3, [r6, #24]
 802b6e8:	4607      	mov	r7, r0
 802b6ea:	b913      	cbnz	r3, 802b6f2 <__sfp+0x12>
 802b6ec:	4630      	mov	r0, r6
 802b6ee:	f7ff ffc7 	bl	802b680 <__sinit>
 802b6f2:	3648      	adds	r6, #72	; 0x48
 802b6f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802b6f8:	3b01      	subs	r3, #1
 802b6fa:	d503      	bpl.n	802b704 <__sfp+0x24>
 802b6fc:	6833      	ldr	r3, [r6, #0]
 802b6fe:	b133      	cbz	r3, 802b70e <__sfp+0x2e>
 802b700:	6836      	ldr	r6, [r6, #0]
 802b702:	e7f7      	b.n	802b6f4 <__sfp+0x14>
 802b704:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802b708:	b16d      	cbz	r5, 802b726 <__sfp+0x46>
 802b70a:	3468      	adds	r4, #104	; 0x68
 802b70c:	e7f4      	b.n	802b6f8 <__sfp+0x18>
 802b70e:	2104      	movs	r1, #4
 802b710:	4638      	mov	r0, r7
 802b712:	f7ff ff9f 	bl	802b654 <__sfmoreglue>
 802b716:	6030      	str	r0, [r6, #0]
 802b718:	2800      	cmp	r0, #0
 802b71a:	d1f1      	bne.n	802b700 <__sfp+0x20>
 802b71c:	230c      	movs	r3, #12
 802b71e:	603b      	str	r3, [r7, #0]
 802b720:	4604      	mov	r4, r0
 802b722:	4620      	mov	r0, r4
 802b724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b726:	4b0b      	ldr	r3, [pc, #44]	; (802b754 <__sfp+0x74>)
 802b728:	6665      	str	r5, [r4, #100]	; 0x64
 802b72a:	e9c4 5500 	strd	r5, r5, [r4]
 802b72e:	60a5      	str	r5, [r4, #8]
 802b730:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802b734:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802b738:	2208      	movs	r2, #8
 802b73a:	4629      	mov	r1, r5
 802b73c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802b740:	f7fd f815 	bl	802876e <memset>
 802b744:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802b748:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802b74c:	e7e9      	b.n	802b722 <__sfp+0x42>
 802b74e:	bf00      	nop
 802b750:	0802e5cc 	.word	0x0802e5cc
 802b754:	ffff0001 	.word	0xffff0001

0802b758 <_fwalk_reent>:
 802b758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b75c:	4680      	mov	r8, r0
 802b75e:	4689      	mov	r9, r1
 802b760:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802b764:	2600      	movs	r6, #0
 802b766:	b914      	cbnz	r4, 802b76e <_fwalk_reent+0x16>
 802b768:	4630      	mov	r0, r6
 802b76a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b76e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802b772:	3f01      	subs	r7, #1
 802b774:	d501      	bpl.n	802b77a <_fwalk_reent+0x22>
 802b776:	6824      	ldr	r4, [r4, #0]
 802b778:	e7f5      	b.n	802b766 <_fwalk_reent+0xe>
 802b77a:	89ab      	ldrh	r3, [r5, #12]
 802b77c:	2b01      	cmp	r3, #1
 802b77e:	d907      	bls.n	802b790 <_fwalk_reent+0x38>
 802b780:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b784:	3301      	adds	r3, #1
 802b786:	d003      	beq.n	802b790 <_fwalk_reent+0x38>
 802b788:	4629      	mov	r1, r5
 802b78a:	4640      	mov	r0, r8
 802b78c:	47c8      	blx	r9
 802b78e:	4306      	orrs	r6, r0
 802b790:	3568      	adds	r5, #104	; 0x68
 802b792:	e7ee      	b.n	802b772 <_fwalk_reent+0x1a>

0802b794 <rshift>:
 802b794:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b796:	6906      	ldr	r6, [r0, #16]
 802b798:	114b      	asrs	r3, r1, #5
 802b79a:	429e      	cmp	r6, r3
 802b79c:	f100 0414 	add.w	r4, r0, #20
 802b7a0:	dd30      	ble.n	802b804 <rshift+0x70>
 802b7a2:	f011 011f 	ands.w	r1, r1, #31
 802b7a6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 802b7aa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 802b7ae:	d108      	bne.n	802b7c2 <rshift+0x2e>
 802b7b0:	4621      	mov	r1, r4
 802b7b2:	42b2      	cmp	r2, r6
 802b7b4:	460b      	mov	r3, r1
 802b7b6:	d211      	bcs.n	802b7dc <rshift+0x48>
 802b7b8:	f852 3b04 	ldr.w	r3, [r2], #4
 802b7bc:	f841 3b04 	str.w	r3, [r1], #4
 802b7c0:	e7f7      	b.n	802b7b2 <rshift+0x1e>
 802b7c2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 802b7c6:	f1c1 0c20 	rsb	ip, r1, #32
 802b7ca:	40cd      	lsrs	r5, r1
 802b7cc:	3204      	adds	r2, #4
 802b7ce:	4623      	mov	r3, r4
 802b7d0:	42b2      	cmp	r2, r6
 802b7d2:	4617      	mov	r7, r2
 802b7d4:	d30c      	bcc.n	802b7f0 <rshift+0x5c>
 802b7d6:	601d      	str	r5, [r3, #0]
 802b7d8:	b105      	cbz	r5, 802b7dc <rshift+0x48>
 802b7da:	3304      	adds	r3, #4
 802b7dc:	1b1a      	subs	r2, r3, r4
 802b7de:	42a3      	cmp	r3, r4
 802b7e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 802b7e4:	bf08      	it	eq
 802b7e6:	2300      	moveq	r3, #0
 802b7e8:	6102      	str	r2, [r0, #16]
 802b7ea:	bf08      	it	eq
 802b7ec:	6143      	streq	r3, [r0, #20]
 802b7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b7f0:	683f      	ldr	r7, [r7, #0]
 802b7f2:	fa07 f70c 	lsl.w	r7, r7, ip
 802b7f6:	433d      	orrs	r5, r7
 802b7f8:	f843 5b04 	str.w	r5, [r3], #4
 802b7fc:	f852 5b04 	ldr.w	r5, [r2], #4
 802b800:	40cd      	lsrs	r5, r1
 802b802:	e7e5      	b.n	802b7d0 <rshift+0x3c>
 802b804:	4623      	mov	r3, r4
 802b806:	e7e9      	b.n	802b7dc <rshift+0x48>

0802b808 <__hexdig_fun>:
 802b808:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 802b80c:	2b09      	cmp	r3, #9
 802b80e:	d802      	bhi.n	802b816 <__hexdig_fun+0xe>
 802b810:	3820      	subs	r0, #32
 802b812:	b2c0      	uxtb	r0, r0
 802b814:	4770      	bx	lr
 802b816:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 802b81a:	2b05      	cmp	r3, #5
 802b81c:	d801      	bhi.n	802b822 <__hexdig_fun+0x1a>
 802b81e:	3847      	subs	r0, #71	; 0x47
 802b820:	e7f7      	b.n	802b812 <__hexdig_fun+0xa>
 802b822:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 802b826:	2b05      	cmp	r3, #5
 802b828:	d801      	bhi.n	802b82e <__hexdig_fun+0x26>
 802b82a:	3827      	subs	r0, #39	; 0x27
 802b82c:	e7f1      	b.n	802b812 <__hexdig_fun+0xa>
 802b82e:	2000      	movs	r0, #0
 802b830:	4770      	bx	lr

0802b832 <__gethex>:
 802b832:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b836:	b08b      	sub	sp, #44	; 0x2c
 802b838:	468a      	mov	sl, r1
 802b83a:	9002      	str	r0, [sp, #8]
 802b83c:	9816      	ldr	r0, [sp, #88]	; 0x58
 802b83e:	9306      	str	r3, [sp, #24]
 802b840:	4690      	mov	r8, r2
 802b842:	f000 fad0 	bl	802bde6 <__localeconv_l>
 802b846:	6803      	ldr	r3, [r0, #0]
 802b848:	9303      	str	r3, [sp, #12]
 802b84a:	4618      	mov	r0, r3
 802b84c:	f7d4 fcc8 	bl	80001e0 <strlen>
 802b850:	9b03      	ldr	r3, [sp, #12]
 802b852:	9001      	str	r0, [sp, #4]
 802b854:	4403      	add	r3, r0
 802b856:	f04f 0b00 	mov.w	fp, #0
 802b85a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802b85e:	9307      	str	r3, [sp, #28]
 802b860:	f8da 3000 	ldr.w	r3, [sl]
 802b864:	3302      	adds	r3, #2
 802b866:	461f      	mov	r7, r3
 802b868:	f813 0b01 	ldrb.w	r0, [r3], #1
 802b86c:	2830      	cmp	r0, #48	; 0x30
 802b86e:	d06c      	beq.n	802b94a <__gethex+0x118>
 802b870:	f7ff ffca 	bl	802b808 <__hexdig_fun>
 802b874:	4604      	mov	r4, r0
 802b876:	2800      	cmp	r0, #0
 802b878:	d16a      	bne.n	802b950 <__gethex+0x11e>
 802b87a:	9a01      	ldr	r2, [sp, #4]
 802b87c:	9903      	ldr	r1, [sp, #12]
 802b87e:	4638      	mov	r0, r7
 802b880:	f001 fa1d 	bl	802ccbe <strncmp>
 802b884:	2800      	cmp	r0, #0
 802b886:	d166      	bne.n	802b956 <__gethex+0x124>
 802b888:	9b01      	ldr	r3, [sp, #4]
 802b88a:	5cf8      	ldrb	r0, [r7, r3]
 802b88c:	18fe      	adds	r6, r7, r3
 802b88e:	f7ff ffbb 	bl	802b808 <__hexdig_fun>
 802b892:	2800      	cmp	r0, #0
 802b894:	d062      	beq.n	802b95c <__gethex+0x12a>
 802b896:	4633      	mov	r3, r6
 802b898:	7818      	ldrb	r0, [r3, #0]
 802b89a:	2830      	cmp	r0, #48	; 0x30
 802b89c:	461f      	mov	r7, r3
 802b89e:	f103 0301 	add.w	r3, r3, #1
 802b8a2:	d0f9      	beq.n	802b898 <__gethex+0x66>
 802b8a4:	f7ff ffb0 	bl	802b808 <__hexdig_fun>
 802b8a8:	fab0 f580 	clz	r5, r0
 802b8ac:	096d      	lsrs	r5, r5, #5
 802b8ae:	4634      	mov	r4, r6
 802b8b0:	f04f 0b01 	mov.w	fp, #1
 802b8b4:	463a      	mov	r2, r7
 802b8b6:	4616      	mov	r6, r2
 802b8b8:	3201      	adds	r2, #1
 802b8ba:	7830      	ldrb	r0, [r6, #0]
 802b8bc:	f7ff ffa4 	bl	802b808 <__hexdig_fun>
 802b8c0:	2800      	cmp	r0, #0
 802b8c2:	d1f8      	bne.n	802b8b6 <__gethex+0x84>
 802b8c4:	9a01      	ldr	r2, [sp, #4]
 802b8c6:	9903      	ldr	r1, [sp, #12]
 802b8c8:	4630      	mov	r0, r6
 802b8ca:	f001 f9f8 	bl	802ccbe <strncmp>
 802b8ce:	b950      	cbnz	r0, 802b8e6 <__gethex+0xb4>
 802b8d0:	b954      	cbnz	r4, 802b8e8 <__gethex+0xb6>
 802b8d2:	9b01      	ldr	r3, [sp, #4]
 802b8d4:	18f4      	adds	r4, r6, r3
 802b8d6:	4622      	mov	r2, r4
 802b8d8:	4616      	mov	r6, r2
 802b8da:	3201      	adds	r2, #1
 802b8dc:	7830      	ldrb	r0, [r6, #0]
 802b8de:	f7ff ff93 	bl	802b808 <__hexdig_fun>
 802b8e2:	2800      	cmp	r0, #0
 802b8e4:	d1f8      	bne.n	802b8d8 <__gethex+0xa6>
 802b8e6:	b10c      	cbz	r4, 802b8ec <__gethex+0xba>
 802b8e8:	1ba4      	subs	r4, r4, r6
 802b8ea:	00a4      	lsls	r4, r4, #2
 802b8ec:	7833      	ldrb	r3, [r6, #0]
 802b8ee:	2b50      	cmp	r3, #80	; 0x50
 802b8f0:	d001      	beq.n	802b8f6 <__gethex+0xc4>
 802b8f2:	2b70      	cmp	r3, #112	; 0x70
 802b8f4:	d140      	bne.n	802b978 <__gethex+0x146>
 802b8f6:	7873      	ldrb	r3, [r6, #1]
 802b8f8:	2b2b      	cmp	r3, #43	; 0x2b
 802b8fa:	d031      	beq.n	802b960 <__gethex+0x12e>
 802b8fc:	2b2d      	cmp	r3, #45	; 0x2d
 802b8fe:	d033      	beq.n	802b968 <__gethex+0x136>
 802b900:	1c71      	adds	r1, r6, #1
 802b902:	f04f 0900 	mov.w	r9, #0
 802b906:	7808      	ldrb	r0, [r1, #0]
 802b908:	f7ff ff7e 	bl	802b808 <__hexdig_fun>
 802b90c:	1e43      	subs	r3, r0, #1
 802b90e:	b2db      	uxtb	r3, r3
 802b910:	2b18      	cmp	r3, #24
 802b912:	d831      	bhi.n	802b978 <__gethex+0x146>
 802b914:	f1a0 0210 	sub.w	r2, r0, #16
 802b918:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 802b91c:	f7ff ff74 	bl	802b808 <__hexdig_fun>
 802b920:	1e43      	subs	r3, r0, #1
 802b922:	b2db      	uxtb	r3, r3
 802b924:	2b18      	cmp	r3, #24
 802b926:	d922      	bls.n	802b96e <__gethex+0x13c>
 802b928:	f1b9 0f00 	cmp.w	r9, #0
 802b92c:	d000      	beq.n	802b930 <__gethex+0xfe>
 802b92e:	4252      	negs	r2, r2
 802b930:	4414      	add	r4, r2
 802b932:	f8ca 1000 	str.w	r1, [sl]
 802b936:	b30d      	cbz	r5, 802b97c <__gethex+0x14a>
 802b938:	f1bb 0f00 	cmp.w	fp, #0
 802b93c:	bf0c      	ite	eq
 802b93e:	2706      	moveq	r7, #6
 802b940:	2700      	movne	r7, #0
 802b942:	4638      	mov	r0, r7
 802b944:	b00b      	add	sp, #44	; 0x2c
 802b946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b94a:	f10b 0b01 	add.w	fp, fp, #1
 802b94e:	e78a      	b.n	802b866 <__gethex+0x34>
 802b950:	2500      	movs	r5, #0
 802b952:	462c      	mov	r4, r5
 802b954:	e7ae      	b.n	802b8b4 <__gethex+0x82>
 802b956:	463e      	mov	r6, r7
 802b958:	2501      	movs	r5, #1
 802b95a:	e7c7      	b.n	802b8ec <__gethex+0xba>
 802b95c:	4604      	mov	r4, r0
 802b95e:	e7fb      	b.n	802b958 <__gethex+0x126>
 802b960:	f04f 0900 	mov.w	r9, #0
 802b964:	1cb1      	adds	r1, r6, #2
 802b966:	e7ce      	b.n	802b906 <__gethex+0xd4>
 802b968:	f04f 0901 	mov.w	r9, #1
 802b96c:	e7fa      	b.n	802b964 <__gethex+0x132>
 802b96e:	230a      	movs	r3, #10
 802b970:	fb03 0202 	mla	r2, r3, r2, r0
 802b974:	3a10      	subs	r2, #16
 802b976:	e7cf      	b.n	802b918 <__gethex+0xe6>
 802b978:	4631      	mov	r1, r6
 802b97a:	e7da      	b.n	802b932 <__gethex+0x100>
 802b97c:	1bf3      	subs	r3, r6, r7
 802b97e:	3b01      	subs	r3, #1
 802b980:	4629      	mov	r1, r5
 802b982:	2b07      	cmp	r3, #7
 802b984:	dc49      	bgt.n	802ba1a <__gethex+0x1e8>
 802b986:	9802      	ldr	r0, [sp, #8]
 802b988:	f000 fad5 	bl	802bf36 <_Balloc>
 802b98c:	9b01      	ldr	r3, [sp, #4]
 802b98e:	f100 0914 	add.w	r9, r0, #20
 802b992:	f04f 0b00 	mov.w	fp, #0
 802b996:	f1c3 0301 	rsb	r3, r3, #1
 802b99a:	4605      	mov	r5, r0
 802b99c:	f8cd 9010 	str.w	r9, [sp, #16]
 802b9a0:	46da      	mov	sl, fp
 802b9a2:	9308      	str	r3, [sp, #32]
 802b9a4:	42b7      	cmp	r7, r6
 802b9a6:	d33b      	bcc.n	802ba20 <__gethex+0x1ee>
 802b9a8:	9804      	ldr	r0, [sp, #16]
 802b9aa:	f840 ab04 	str.w	sl, [r0], #4
 802b9ae:	eba0 0009 	sub.w	r0, r0, r9
 802b9b2:	1080      	asrs	r0, r0, #2
 802b9b4:	6128      	str	r0, [r5, #16]
 802b9b6:	0147      	lsls	r7, r0, #5
 802b9b8:	4650      	mov	r0, sl
 802b9ba:	f000 fb80 	bl	802c0be <__hi0bits>
 802b9be:	f8d8 6000 	ldr.w	r6, [r8]
 802b9c2:	1a3f      	subs	r7, r7, r0
 802b9c4:	42b7      	cmp	r7, r6
 802b9c6:	dd64      	ble.n	802ba92 <__gethex+0x260>
 802b9c8:	1bbf      	subs	r7, r7, r6
 802b9ca:	4639      	mov	r1, r7
 802b9cc:	4628      	mov	r0, r5
 802b9ce:	f000 fe8f 	bl	802c6f0 <__any_on>
 802b9d2:	4682      	mov	sl, r0
 802b9d4:	b178      	cbz	r0, 802b9f6 <__gethex+0x1c4>
 802b9d6:	1e7b      	subs	r3, r7, #1
 802b9d8:	1159      	asrs	r1, r3, #5
 802b9da:	f003 021f 	and.w	r2, r3, #31
 802b9de:	f04f 0a01 	mov.w	sl, #1
 802b9e2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 802b9e6:	fa0a f202 	lsl.w	r2, sl, r2
 802b9ea:	420a      	tst	r2, r1
 802b9ec:	d003      	beq.n	802b9f6 <__gethex+0x1c4>
 802b9ee:	4553      	cmp	r3, sl
 802b9f0:	dc46      	bgt.n	802ba80 <__gethex+0x24e>
 802b9f2:	f04f 0a02 	mov.w	sl, #2
 802b9f6:	4639      	mov	r1, r7
 802b9f8:	4628      	mov	r0, r5
 802b9fa:	f7ff fecb 	bl	802b794 <rshift>
 802b9fe:	443c      	add	r4, r7
 802ba00:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802ba04:	42a3      	cmp	r3, r4
 802ba06:	da52      	bge.n	802baae <__gethex+0x27c>
 802ba08:	4629      	mov	r1, r5
 802ba0a:	9802      	ldr	r0, [sp, #8]
 802ba0c:	f000 fac7 	bl	802bf9e <_Bfree>
 802ba10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802ba12:	2300      	movs	r3, #0
 802ba14:	6013      	str	r3, [r2, #0]
 802ba16:	27a3      	movs	r7, #163	; 0xa3
 802ba18:	e793      	b.n	802b942 <__gethex+0x110>
 802ba1a:	3101      	adds	r1, #1
 802ba1c:	105b      	asrs	r3, r3, #1
 802ba1e:	e7b0      	b.n	802b982 <__gethex+0x150>
 802ba20:	1e73      	subs	r3, r6, #1
 802ba22:	9305      	str	r3, [sp, #20]
 802ba24:	9a07      	ldr	r2, [sp, #28]
 802ba26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802ba2a:	4293      	cmp	r3, r2
 802ba2c:	d018      	beq.n	802ba60 <__gethex+0x22e>
 802ba2e:	f1bb 0f20 	cmp.w	fp, #32
 802ba32:	d107      	bne.n	802ba44 <__gethex+0x212>
 802ba34:	9b04      	ldr	r3, [sp, #16]
 802ba36:	f8c3 a000 	str.w	sl, [r3]
 802ba3a:	3304      	adds	r3, #4
 802ba3c:	f04f 0a00 	mov.w	sl, #0
 802ba40:	9304      	str	r3, [sp, #16]
 802ba42:	46d3      	mov	fp, sl
 802ba44:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 802ba48:	f7ff fede 	bl	802b808 <__hexdig_fun>
 802ba4c:	f000 000f 	and.w	r0, r0, #15
 802ba50:	fa00 f00b 	lsl.w	r0, r0, fp
 802ba54:	ea4a 0a00 	orr.w	sl, sl, r0
 802ba58:	f10b 0b04 	add.w	fp, fp, #4
 802ba5c:	9b05      	ldr	r3, [sp, #20]
 802ba5e:	e00d      	b.n	802ba7c <__gethex+0x24a>
 802ba60:	9b05      	ldr	r3, [sp, #20]
 802ba62:	9a08      	ldr	r2, [sp, #32]
 802ba64:	4413      	add	r3, r2
 802ba66:	42bb      	cmp	r3, r7
 802ba68:	d3e1      	bcc.n	802ba2e <__gethex+0x1fc>
 802ba6a:	4618      	mov	r0, r3
 802ba6c:	9a01      	ldr	r2, [sp, #4]
 802ba6e:	9903      	ldr	r1, [sp, #12]
 802ba70:	9309      	str	r3, [sp, #36]	; 0x24
 802ba72:	f001 f924 	bl	802ccbe <strncmp>
 802ba76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ba78:	2800      	cmp	r0, #0
 802ba7a:	d1d8      	bne.n	802ba2e <__gethex+0x1fc>
 802ba7c:	461e      	mov	r6, r3
 802ba7e:	e791      	b.n	802b9a4 <__gethex+0x172>
 802ba80:	1eb9      	subs	r1, r7, #2
 802ba82:	4628      	mov	r0, r5
 802ba84:	f000 fe34 	bl	802c6f0 <__any_on>
 802ba88:	2800      	cmp	r0, #0
 802ba8a:	d0b2      	beq.n	802b9f2 <__gethex+0x1c0>
 802ba8c:	f04f 0a03 	mov.w	sl, #3
 802ba90:	e7b1      	b.n	802b9f6 <__gethex+0x1c4>
 802ba92:	da09      	bge.n	802baa8 <__gethex+0x276>
 802ba94:	1bf7      	subs	r7, r6, r7
 802ba96:	4629      	mov	r1, r5
 802ba98:	463a      	mov	r2, r7
 802ba9a:	9802      	ldr	r0, [sp, #8]
 802ba9c:	f000 fc4a 	bl	802c334 <__lshift>
 802baa0:	1be4      	subs	r4, r4, r7
 802baa2:	4605      	mov	r5, r0
 802baa4:	f100 0914 	add.w	r9, r0, #20
 802baa8:	f04f 0a00 	mov.w	sl, #0
 802baac:	e7a8      	b.n	802ba00 <__gethex+0x1ce>
 802baae:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802bab2:	42a0      	cmp	r0, r4
 802bab4:	dd6a      	ble.n	802bb8c <__gethex+0x35a>
 802bab6:	1b04      	subs	r4, r0, r4
 802bab8:	42a6      	cmp	r6, r4
 802baba:	dc2e      	bgt.n	802bb1a <__gethex+0x2e8>
 802babc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802bac0:	2b02      	cmp	r3, #2
 802bac2:	d022      	beq.n	802bb0a <__gethex+0x2d8>
 802bac4:	2b03      	cmp	r3, #3
 802bac6:	d024      	beq.n	802bb12 <__gethex+0x2e0>
 802bac8:	2b01      	cmp	r3, #1
 802baca:	d115      	bne.n	802baf8 <__gethex+0x2c6>
 802bacc:	42a6      	cmp	r6, r4
 802bace:	d113      	bne.n	802baf8 <__gethex+0x2c6>
 802bad0:	2e01      	cmp	r6, #1
 802bad2:	dc0b      	bgt.n	802baec <__gethex+0x2ba>
 802bad4:	9a06      	ldr	r2, [sp, #24]
 802bad6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802bada:	6013      	str	r3, [r2, #0]
 802badc:	2301      	movs	r3, #1
 802bade:	612b      	str	r3, [r5, #16]
 802bae0:	f8c9 3000 	str.w	r3, [r9]
 802bae4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802bae6:	2762      	movs	r7, #98	; 0x62
 802bae8:	601d      	str	r5, [r3, #0]
 802baea:	e72a      	b.n	802b942 <__gethex+0x110>
 802baec:	1e71      	subs	r1, r6, #1
 802baee:	4628      	mov	r0, r5
 802baf0:	f000 fdfe 	bl	802c6f0 <__any_on>
 802baf4:	2800      	cmp	r0, #0
 802baf6:	d1ed      	bne.n	802bad4 <__gethex+0x2a2>
 802baf8:	4629      	mov	r1, r5
 802bafa:	9802      	ldr	r0, [sp, #8]
 802bafc:	f000 fa4f 	bl	802bf9e <_Bfree>
 802bb00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802bb02:	2300      	movs	r3, #0
 802bb04:	6013      	str	r3, [r2, #0]
 802bb06:	2750      	movs	r7, #80	; 0x50
 802bb08:	e71b      	b.n	802b942 <__gethex+0x110>
 802bb0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802bb0c:	2b00      	cmp	r3, #0
 802bb0e:	d0e1      	beq.n	802bad4 <__gethex+0x2a2>
 802bb10:	e7f2      	b.n	802baf8 <__gethex+0x2c6>
 802bb12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802bb14:	2b00      	cmp	r3, #0
 802bb16:	d1dd      	bne.n	802bad4 <__gethex+0x2a2>
 802bb18:	e7ee      	b.n	802baf8 <__gethex+0x2c6>
 802bb1a:	1e67      	subs	r7, r4, #1
 802bb1c:	f1ba 0f00 	cmp.w	sl, #0
 802bb20:	d131      	bne.n	802bb86 <__gethex+0x354>
 802bb22:	b127      	cbz	r7, 802bb2e <__gethex+0x2fc>
 802bb24:	4639      	mov	r1, r7
 802bb26:	4628      	mov	r0, r5
 802bb28:	f000 fde2 	bl	802c6f0 <__any_on>
 802bb2c:	4682      	mov	sl, r0
 802bb2e:	117a      	asrs	r2, r7, #5
 802bb30:	2301      	movs	r3, #1
 802bb32:	f007 071f 	and.w	r7, r7, #31
 802bb36:	fa03 f707 	lsl.w	r7, r3, r7
 802bb3a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 802bb3e:	4621      	mov	r1, r4
 802bb40:	421f      	tst	r7, r3
 802bb42:	4628      	mov	r0, r5
 802bb44:	bf18      	it	ne
 802bb46:	f04a 0a02 	orrne.w	sl, sl, #2
 802bb4a:	1b36      	subs	r6, r6, r4
 802bb4c:	f7ff fe22 	bl	802b794 <rshift>
 802bb50:	f8d8 4004 	ldr.w	r4, [r8, #4]
 802bb54:	2702      	movs	r7, #2
 802bb56:	f1ba 0f00 	cmp.w	sl, #0
 802bb5a:	d048      	beq.n	802bbee <__gethex+0x3bc>
 802bb5c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802bb60:	2b02      	cmp	r3, #2
 802bb62:	d015      	beq.n	802bb90 <__gethex+0x35e>
 802bb64:	2b03      	cmp	r3, #3
 802bb66:	d017      	beq.n	802bb98 <__gethex+0x366>
 802bb68:	2b01      	cmp	r3, #1
 802bb6a:	d109      	bne.n	802bb80 <__gethex+0x34e>
 802bb6c:	f01a 0f02 	tst.w	sl, #2
 802bb70:	d006      	beq.n	802bb80 <__gethex+0x34e>
 802bb72:	f8d9 3000 	ldr.w	r3, [r9]
 802bb76:	ea4a 0a03 	orr.w	sl, sl, r3
 802bb7a:	f01a 0f01 	tst.w	sl, #1
 802bb7e:	d10e      	bne.n	802bb9e <__gethex+0x36c>
 802bb80:	f047 0710 	orr.w	r7, r7, #16
 802bb84:	e033      	b.n	802bbee <__gethex+0x3bc>
 802bb86:	f04f 0a01 	mov.w	sl, #1
 802bb8a:	e7d0      	b.n	802bb2e <__gethex+0x2fc>
 802bb8c:	2701      	movs	r7, #1
 802bb8e:	e7e2      	b.n	802bb56 <__gethex+0x324>
 802bb90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802bb92:	f1c3 0301 	rsb	r3, r3, #1
 802bb96:	9315      	str	r3, [sp, #84]	; 0x54
 802bb98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802bb9a:	2b00      	cmp	r3, #0
 802bb9c:	d0f0      	beq.n	802bb80 <__gethex+0x34e>
 802bb9e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 802bba2:	f105 0314 	add.w	r3, r5, #20
 802bba6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 802bbaa:	eb03 010a 	add.w	r1, r3, sl
 802bbae:	f04f 0c00 	mov.w	ip, #0
 802bbb2:	4618      	mov	r0, r3
 802bbb4:	f853 2b04 	ldr.w	r2, [r3], #4
 802bbb8:	f1b2 3fff 	cmp.w	r2, #4294967295
 802bbbc:	d01c      	beq.n	802bbf8 <__gethex+0x3c6>
 802bbbe:	3201      	adds	r2, #1
 802bbc0:	6002      	str	r2, [r0, #0]
 802bbc2:	2f02      	cmp	r7, #2
 802bbc4:	f105 0314 	add.w	r3, r5, #20
 802bbc8:	d138      	bne.n	802bc3c <__gethex+0x40a>
 802bbca:	f8d8 2000 	ldr.w	r2, [r8]
 802bbce:	3a01      	subs	r2, #1
 802bbd0:	42b2      	cmp	r2, r6
 802bbd2:	d10a      	bne.n	802bbea <__gethex+0x3b8>
 802bbd4:	1171      	asrs	r1, r6, #5
 802bbd6:	2201      	movs	r2, #1
 802bbd8:	f006 061f 	and.w	r6, r6, #31
 802bbdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802bbe0:	fa02 f606 	lsl.w	r6, r2, r6
 802bbe4:	421e      	tst	r6, r3
 802bbe6:	bf18      	it	ne
 802bbe8:	4617      	movne	r7, r2
 802bbea:	f047 0720 	orr.w	r7, r7, #32
 802bbee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802bbf0:	601d      	str	r5, [r3, #0]
 802bbf2:	9b06      	ldr	r3, [sp, #24]
 802bbf4:	601c      	str	r4, [r3, #0]
 802bbf6:	e6a4      	b.n	802b942 <__gethex+0x110>
 802bbf8:	4299      	cmp	r1, r3
 802bbfa:	f843 cc04 	str.w	ip, [r3, #-4]
 802bbfe:	d8d8      	bhi.n	802bbb2 <__gethex+0x380>
 802bc00:	68ab      	ldr	r3, [r5, #8]
 802bc02:	4599      	cmp	r9, r3
 802bc04:	db12      	blt.n	802bc2c <__gethex+0x3fa>
 802bc06:	6869      	ldr	r1, [r5, #4]
 802bc08:	9802      	ldr	r0, [sp, #8]
 802bc0a:	3101      	adds	r1, #1
 802bc0c:	f000 f993 	bl	802bf36 <_Balloc>
 802bc10:	692a      	ldr	r2, [r5, #16]
 802bc12:	3202      	adds	r2, #2
 802bc14:	f105 010c 	add.w	r1, r5, #12
 802bc18:	4683      	mov	fp, r0
 802bc1a:	0092      	lsls	r2, r2, #2
 802bc1c:	300c      	adds	r0, #12
 802bc1e:	f7fc fd9b 	bl	8028758 <memcpy>
 802bc22:	4629      	mov	r1, r5
 802bc24:	9802      	ldr	r0, [sp, #8]
 802bc26:	f000 f9ba 	bl	802bf9e <_Bfree>
 802bc2a:	465d      	mov	r5, fp
 802bc2c:	692b      	ldr	r3, [r5, #16]
 802bc2e:	1c5a      	adds	r2, r3, #1
 802bc30:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 802bc34:	612a      	str	r2, [r5, #16]
 802bc36:	2201      	movs	r2, #1
 802bc38:	615a      	str	r2, [r3, #20]
 802bc3a:	e7c2      	b.n	802bbc2 <__gethex+0x390>
 802bc3c:	692a      	ldr	r2, [r5, #16]
 802bc3e:	454a      	cmp	r2, r9
 802bc40:	dd0b      	ble.n	802bc5a <__gethex+0x428>
 802bc42:	2101      	movs	r1, #1
 802bc44:	4628      	mov	r0, r5
 802bc46:	f7ff fda5 	bl	802b794 <rshift>
 802bc4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802bc4e:	3401      	adds	r4, #1
 802bc50:	42a3      	cmp	r3, r4
 802bc52:	f6ff aed9 	blt.w	802ba08 <__gethex+0x1d6>
 802bc56:	2701      	movs	r7, #1
 802bc58:	e7c7      	b.n	802bbea <__gethex+0x3b8>
 802bc5a:	f016 061f 	ands.w	r6, r6, #31
 802bc5e:	d0fa      	beq.n	802bc56 <__gethex+0x424>
 802bc60:	449a      	add	sl, r3
 802bc62:	f1c6 0620 	rsb	r6, r6, #32
 802bc66:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 802bc6a:	f000 fa28 	bl	802c0be <__hi0bits>
 802bc6e:	42b0      	cmp	r0, r6
 802bc70:	dbe7      	blt.n	802bc42 <__gethex+0x410>
 802bc72:	e7f0      	b.n	802bc56 <__gethex+0x424>

0802bc74 <L_shift>:
 802bc74:	f1c2 0208 	rsb	r2, r2, #8
 802bc78:	0092      	lsls	r2, r2, #2
 802bc7a:	b570      	push	{r4, r5, r6, lr}
 802bc7c:	f1c2 0620 	rsb	r6, r2, #32
 802bc80:	6843      	ldr	r3, [r0, #4]
 802bc82:	6804      	ldr	r4, [r0, #0]
 802bc84:	fa03 f506 	lsl.w	r5, r3, r6
 802bc88:	432c      	orrs	r4, r5
 802bc8a:	40d3      	lsrs	r3, r2
 802bc8c:	6004      	str	r4, [r0, #0]
 802bc8e:	f840 3f04 	str.w	r3, [r0, #4]!
 802bc92:	4288      	cmp	r0, r1
 802bc94:	d3f4      	bcc.n	802bc80 <L_shift+0xc>
 802bc96:	bd70      	pop	{r4, r5, r6, pc}

0802bc98 <__match>:
 802bc98:	b530      	push	{r4, r5, lr}
 802bc9a:	6803      	ldr	r3, [r0, #0]
 802bc9c:	3301      	adds	r3, #1
 802bc9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 802bca2:	b914      	cbnz	r4, 802bcaa <__match+0x12>
 802bca4:	6003      	str	r3, [r0, #0]
 802bca6:	2001      	movs	r0, #1
 802bca8:	bd30      	pop	{r4, r5, pc}
 802bcaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 802bcae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 802bcb2:	2d19      	cmp	r5, #25
 802bcb4:	bf98      	it	ls
 802bcb6:	3220      	addls	r2, #32
 802bcb8:	42a2      	cmp	r2, r4
 802bcba:	d0f0      	beq.n	802bc9e <__match+0x6>
 802bcbc:	2000      	movs	r0, #0
 802bcbe:	e7f3      	b.n	802bca8 <__match+0x10>

0802bcc0 <__hexnan>:
 802bcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bcc4:	680b      	ldr	r3, [r1, #0]
 802bcc6:	6801      	ldr	r1, [r0, #0]
 802bcc8:	115f      	asrs	r7, r3, #5
 802bcca:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 802bcce:	f013 031f 	ands.w	r3, r3, #31
 802bcd2:	b087      	sub	sp, #28
 802bcd4:	bf18      	it	ne
 802bcd6:	3704      	addne	r7, #4
 802bcd8:	2500      	movs	r5, #0
 802bcda:	1f3e      	subs	r6, r7, #4
 802bcdc:	4682      	mov	sl, r0
 802bcde:	4690      	mov	r8, r2
 802bce0:	9301      	str	r3, [sp, #4]
 802bce2:	f847 5c04 	str.w	r5, [r7, #-4]
 802bce6:	46b1      	mov	r9, r6
 802bce8:	4634      	mov	r4, r6
 802bcea:	9502      	str	r5, [sp, #8]
 802bcec:	46ab      	mov	fp, r5
 802bcee:	784a      	ldrb	r2, [r1, #1]
 802bcf0:	1c4b      	adds	r3, r1, #1
 802bcf2:	9303      	str	r3, [sp, #12]
 802bcf4:	b342      	cbz	r2, 802bd48 <__hexnan+0x88>
 802bcf6:	4610      	mov	r0, r2
 802bcf8:	9105      	str	r1, [sp, #20]
 802bcfa:	9204      	str	r2, [sp, #16]
 802bcfc:	f7ff fd84 	bl	802b808 <__hexdig_fun>
 802bd00:	2800      	cmp	r0, #0
 802bd02:	d143      	bne.n	802bd8c <__hexnan+0xcc>
 802bd04:	9a04      	ldr	r2, [sp, #16]
 802bd06:	9905      	ldr	r1, [sp, #20]
 802bd08:	2a20      	cmp	r2, #32
 802bd0a:	d818      	bhi.n	802bd3e <__hexnan+0x7e>
 802bd0c:	9b02      	ldr	r3, [sp, #8]
 802bd0e:	459b      	cmp	fp, r3
 802bd10:	dd13      	ble.n	802bd3a <__hexnan+0x7a>
 802bd12:	454c      	cmp	r4, r9
 802bd14:	d206      	bcs.n	802bd24 <__hexnan+0x64>
 802bd16:	2d07      	cmp	r5, #7
 802bd18:	dc04      	bgt.n	802bd24 <__hexnan+0x64>
 802bd1a:	462a      	mov	r2, r5
 802bd1c:	4649      	mov	r1, r9
 802bd1e:	4620      	mov	r0, r4
 802bd20:	f7ff ffa8 	bl	802bc74 <L_shift>
 802bd24:	4544      	cmp	r4, r8
 802bd26:	d944      	bls.n	802bdb2 <__hexnan+0xf2>
 802bd28:	2300      	movs	r3, #0
 802bd2a:	f1a4 0904 	sub.w	r9, r4, #4
 802bd2e:	f844 3c04 	str.w	r3, [r4, #-4]
 802bd32:	f8cd b008 	str.w	fp, [sp, #8]
 802bd36:	464c      	mov	r4, r9
 802bd38:	461d      	mov	r5, r3
 802bd3a:	9903      	ldr	r1, [sp, #12]
 802bd3c:	e7d7      	b.n	802bcee <__hexnan+0x2e>
 802bd3e:	2a29      	cmp	r2, #41	; 0x29
 802bd40:	d14a      	bne.n	802bdd8 <__hexnan+0x118>
 802bd42:	3102      	adds	r1, #2
 802bd44:	f8ca 1000 	str.w	r1, [sl]
 802bd48:	f1bb 0f00 	cmp.w	fp, #0
 802bd4c:	d044      	beq.n	802bdd8 <__hexnan+0x118>
 802bd4e:	454c      	cmp	r4, r9
 802bd50:	d206      	bcs.n	802bd60 <__hexnan+0xa0>
 802bd52:	2d07      	cmp	r5, #7
 802bd54:	dc04      	bgt.n	802bd60 <__hexnan+0xa0>
 802bd56:	462a      	mov	r2, r5
 802bd58:	4649      	mov	r1, r9
 802bd5a:	4620      	mov	r0, r4
 802bd5c:	f7ff ff8a 	bl	802bc74 <L_shift>
 802bd60:	4544      	cmp	r4, r8
 802bd62:	d928      	bls.n	802bdb6 <__hexnan+0xf6>
 802bd64:	4643      	mov	r3, r8
 802bd66:	f854 2b04 	ldr.w	r2, [r4], #4
 802bd6a:	f843 2b04 	str.w	r2, [r3], #4
 802bd6e:	42a6      	cmp	r6, r4
 802bd70:	d2f9      	bcs.n	802bd66 <__hexnan+0xa6>
 802bd72:	2200      	movs	r2, #0
 802bd74:	f843 2b04 	str.w	r2, [r3], #4
 802bd78:	429e      	cmp	r6, r3
 802bd7a:	d2fb      	bcs.n	802bd74 <__hexnan+0xb4>
 802bd7c:	6833      	ldr	r3, [r6, #0]
 802bd7e:	b91b      	cbnz	r3, 802bd88 <__hexnan+0xc8>
 802bd80:	4546      	cmp	r6, r8
 802bd82:	d127      	bne.n	802bdd4 <__hexnan+0x114>
 802bd84:	2301      	movs	r3, #1
 802bd86:	6033      	str	r3, [r6, #0]
 802bd88:	2005      	movs	r0, #5
 802bd8a:	e026      	b.n	802bdda <__hexnan+0x11a>
 802bd8c:	3501      	adds	r5, #1
 802bd8e:	2d08      	cmp	r5, #8
 802bd90:	f10b 0b01 	add.w	fp, fp, #1
 802bd94:	dd06      	ble.n	802bda4 <__hexnan+0xe4>
 802bd96:	4544      	cmp	r4, r8
 802bd98:	d9cf      	bls.n	802bd3a <__hexnan+0x7a>
 802bd9a:	2300      	movs	r3, #0
 802bd9c:	f844 3c04 	str.w	r3, [r4, #-4]
 802bda0:	2501      	movs	r5, #1
 802bda2:	3c04      	subs	r4, #4
 802bda4:	6822      	ldr	r2, [r4, #0]
 802bda6:	f000 000f 	and.w	r0, r0, #15
 802bdaa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 802bdae:	6020      	str	r0, [r4, #0]
 802bdb0:	e7c3      	b.n	802bd3a <__hexnan+0x7a>
 802bdb2:	2508      	movs	r5, #8
 802bdb4:	e7c1      	b.n	802bd3a <__hexnan+0x7a>
 802bdb6:	9b01      	ldr	r3, [sp, #4]
 802bdb8:	2b00      	cmp	r3, #0
 802bdba:	d0df      	beq.n	802bd7c <__hexnan+0xbc>
 802bdbc:	f04f 32ff 	mov.w	r2, #4294967295
 802bdc0:	f1c3 0320 	rsb	r3, r3, #32
 802bdc4:	fa22 f303 	lsr.w	r3, r2, r3
 802bdc8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 802bdcc:	401a      	ands	r2, r3
 802bdce:	f847 2c04 	str.w	r2, [r7, #-4]
 802bdd2:	e7d3      	b.n	802bd7c <__hexnan+0xbc>
 802bdd4:	3e04      	subs	r6, #4
 802bdd6:	e7d1      	b.n	802bd7c <__hexnan+0xbc>
 802bdd8:	2004      	movs	r0, #4
 802bdda:	b007      	add	sp, #28
 802bddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802bde0 <__locale_ctype_ptr_l>:
 802bde0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 802bde4:	4770      	bx	lr

0802bde6 <__localeconv_l>:
 802bde6:	30f0      	adds	r0, #240	; 0xf0
 802bde8:	4770      	bx	lr
	...

0802bdec <_localeconv_r>:
 802bdec:	4b04      	ldr	r3, [pc, #16]	; (802be00 <_localeconv_r+0x14>)
 802bdee:	681b      	ldr	r3, [r3, #0]
 802bdf0:	6a18      	ldr	r0, [r3, #32]
 802bdf2:	4b04      	ldr	r3, [pc, #16]	; (802be04 <_localeconv_r+0x18>)
 802bdf4:	2800      	cmp	r0, #0
 802bdf6:	bf08      	it	eq
 802bdf8:	4618      	moveq	r0, r3
 802bdfa:	30f0      	adds	r0, #240	; 0xf0
 802bdfc:	4770      	bx	lr
 802bdfe:	bf00      	nop
 802be00:	2000068c 	.word	0x2000068c
 802be04:	200006f0 	.word	0x200006f0

0802be08 <__swhatbuf_r>:
 802be08:	b570      	push	{r4, r5, r6, lr}
 802be0a:	460e      	mov	r6, r1
 802be0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802be10:	2900      	cmp	r1, #0
 802be12:	b096      	sub	sp, #88	; 0x58
 802be14:	4614      	mov	r4, r2
 802be16:	461d      	mov	r5, r3
 802be18:	da07      	bge.n	802be2a <__swhatbuf_r+0x22>
 802be1a:	2300      	movs	r3, #0
 802be1c:	602b      	str	r3, [r5, #0]
 802be1e:	89b3      	ldrh	r3, [r6, #12]
 802be20:	061a      	lsls	r2, r3, #24
 802be22:	d410      	bmi.n	802be46 <__swhatbuf_r+0x3e>
 802be24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802be28:	e00e      	b.n	802be48 <__swhatbuf_r+0x40>
 802be2a:	466a      	mov	r2, sp
 802be2c:	f000 ff88 	bl	802cd40 <_fstat_r>
 802be30:	2800      	cmp	r0, #0
 802be32:	dbf2      	blt.n	802be1a <__swhatbuf_r+0x12>
 802be34:	9a01      	ldr	r2, [sp, #4]
 802be36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802be3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802be3e:	425a      	negs	r2, r3
 802be40:	415a      	adcs	r2, r3
 802be42:	602a      	str	r2, [r5, #0]
 802be44:	e7ee      	b.n	802be24 <__swhatbuf_r+0x1c>
 802be46:	2340      	movs	r3, #64	; 0x40
 802be48:	2000      	movs	r0, #0
 802be4a:	6023      	str	r3, [r4, #0]
 802be4c:	b016      	add	sp, #88	; 0x58
 802be4e:	bd70      	pop	{r4, r5, r6, pc}

0802be50 <__smakebuf_r>:
 802be50:	898b      	ldrh	r3, [r1, #12]
 802be52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802be54:	079d      	lsls	r5, r3, #30
 802be56:	4606      	mov	r6, r0
 802be58:	460c      	mov	r4, r1
 802be5a:	d507      	bpl.n	802be6c <__smakebuf_r+0x1c>
 802be5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802be60:	6023      	str	r3, [r4, #0]
 802be62:	6123      	str	r3, [r4, #16]
 802be64:	2301      	movs	r3, #1
 802be66:	6163      	str	r3, [r4, #20]
 802be68:	b002      	add	sp, #8
 802be6a:	bd70      	pop	{r4, r5, r6, pc}
 802be6c:	ab01      	add	r3, sp, #4
 802be6e:	466a      	mov	r2, sp
 802be70:	f7ff ffca 	bl	802be08 <__swhatbuf_r>
 802be74:	9900      	ldr	r1, [sp, #0]
 802be76:	4605      	mov	r5, r0
 802be78:	4630      	mov	r0, r6
 802be7a:	f000 fcb7 	bl	802c7ec <_malloc_r>
 802be7e:	b948      	cbnz	r0, 802be94 <__smakebuf_r+0x44>
 802be80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802be84:	059a      	lsls	r2, r3, #22
 802be86:	d4ef      	bmi.n	802be68 <__smakebuf_r+0x18>
 802be88:	f023 0303 	bic.w	r3, r3, #3
 802be8c:	f043 0302 	orr.w	r3, r3, #2
 802be90:	81a3      	strh	r3, [r4, #12]
 802be92:	e7e3      	b.n	802be5c <__smakebuf_r+0xc>
 802be94:	4b0d      	ldr	r3, [pc, #52]	; (802becc <__smakebuf_r+0x7c>)
 802be96:	62b3      	str	r3, [r6, #40]	; 0x28
 802be98:	89a3      	ldrh	r3, [r4, #12]
 802be9a:	6020      	str	r0, [r4, #0]
 802be9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802bea0:	81a3      	strh	r3, [r4, #12]
 802bea2:	9b00      	ldr	r3, [sp, #0]
 802bea4:	6163      	str	r3, [r4, #20]
 802bea6:	9b01      	ldr	r3, [sp, #4]
 802bea8:	6120      	str	r0, [r4, #16]
 802beaa:	b15b      	cbz	r3, 802bec4 <__smakebuf_r+0x74>
 802beac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802beb0:	4630      	mov	r0, r6
 802beb2:	f000 ff57 	bl	802cd64 <_isatty_r>
 802beb6:	b128      	cbz	r0, 802bec4 <__smakebuf_r+0x74>
 802beb8:	89a3      	ldrh	r3, [r4, #12]
 802beba:	f023 0303 	bic.w	r3, r3, #3
 802bebe:	f043 0301 	orr.w	r3, r3, #1
 802bec2:	81a3      	strh	r3, [r4, #12]
 802bec4:	89a3      	ldrh	r3, [r4, #12]
 802bec6:	431d      	orrs	r5, r3
 802bec8:	81a5      	strh	r5, [r4, #12]
 802beca:	e7cd      	b.n	802be68 <__smakebuf_r+0x18>
 802becc:	0802b649 	.word	0x0802b649

0802bed0 <malloc>:
 802bed0:	4b02      	ldr	r3, [pc, #8]	; (802bedc <malloc+0xc>)
 802bed2:	4601      	mov	r1, r0
 802bed4:	6818      	ldr	r0, [r3, #0]
 802bed6:	f000 bc89 	b.w	802c7ec <_malloc_r>
 802beda:	bf00      	nop
 802bedc:	2000068c 	.word	0x2000068c

0802bee0 <__ascii_mbtowc>:
 802bee0:	b082      	sub	sp, #8
 802bee2:	b901      	cbnz	r1, 802bee6 <__ascii_mbtowc+0x6>
 802bee4:	a901      	add	r1, sp, #4
 802bee6:	b142      	cbz	r2, 802befa <__ascii_mbtowc+0x1a>
 802bee8:	b14b      	cbz	r3, 802befe <__ascii_mbtowc+0x1e>
 802beea:	7813      	ldrb	r3, [r2, #0]
 802beec:	600b      	str	r3, [r1, #0]
 802beee:	7812      	ldrb	r2, [r2, #0]
 802bef0:	1c10      	adds	r0, r2, #0
 802bef2:	bf18      	it	ne
 802bef4:	2001      	movne	r0, #1
 802bef6:	b002      	add	sp, #8
 802bef8:	4770      	bx	lr
 802befa:	4610      	mov	r0, r2
 802befc:	e7fb      	b.n	802bef6 <__ascii_mbtowc+0x16>
 802befe:	f06f 0001 	mvn.w	r0, #1
 802bf02:	e7f8      	b.n	802bef6 <__ascii_mbtowc+0x16>

0802bf04 <memmove>:
 802bf04:	4288      	cmp	r0, r1
 802bf06:	b510      	push	{r4, lr}
 802bf08:	eb01 0302 	add.w	r3, r1, r2
 802bf0c:	d807      	bhi.n	802bf1e <memmove+0x1a>
 802bf0e:	1e42      	subs	r2, r0, #1
 802bf10:	4299      	cmp	r1, r3
 802bf12:	d00a      	beq.n	802bf2a <memmove+0x26>
 802bf14:	f811 4b01 	ldrb.w	r4, [r1], #1
 802bf18:	f802 4f01 	strb.w	r4, [r2, #1]!
 802bf1c:	e7f8      	b.n	802bf10 <memmove+0xc>
 802bf1e:	4283      	cmp	r3, r0
 802bf20:	d9f5      	bls.n	802bf0e <memmove+0xa>
 802bf22:	1881      	adds	r1, r0, r2
 802bf24:	1ad2      	subs	r2, r2, r3
 802bf26:	42d3      	cmn	r3, r2
 802bf28:	d100      	bne.n	802bf2c <memmove+0x28>
 802bf2a:	bd10      	pop	{r4, pc}
 802bf2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802bf30:	f801 4d01 	strb.w	r4, [r1, #-1]!
 802bf34:	e7f7      	b.n	802bf26 <memmove+0x22>

0802bf36 <_Balloc>:
 802bf36:	b570      	push	{r4, r5, r6, lr}
 802bf38:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802bf3a:	4604      	mov	r4, r0
 802bf3c:	460e      	mov	r6, r1
 802bf3e:	b93d      	cbnz	r5, 802bf50 <_Balloc+0x1a>
 802bf40:	2010      	movs	r0, #16
 802bf42:	f7ff ffc5 	bl	802bed0 <malloc>
 802bf46:	6260      	str	r0, [r4, #36]	; 0x24
 802bf48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802bf4c:	6005      	str	r5, [r0, #0]
 802bf4e:	60c5      	str	r5, [r0, #12]
 802bf50:	6a65      	ldr	r5, [r4, #36]	; 0x24
 802bf52:	68eb      	ldr	r3, [r5, #12]
 802bf54:	b183      	cbz	r3, 802bf78 <_Balloc+0x42>
 802bf56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802bf58:	68db      	ldr	r3, [r3, #12]
 802bf5a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 802bf5e:	b9b8      	cbnz	r0, 802bf90 <_Balloc+0x5a>
 802bf60:	2101      	movs	r1, #1
 802bf62:	fa01 f506 	lsl.w	r5, r1, r6
 802bf66:	1d6a      	adds	r2, r5, #5
 802bf68:	0092      	lsls	r2, r2, #2
 802bf6a:	4620      	mov	r0, r4
 802bf6c:	f000 fbe1 	bl	802c732 <_calloc_r>
 802bf70:	b160      	cbz	r0, 802bf8c <_Balloc+0x56>
 802bf72:	e9c0 6501 	strd	r6, r5, [r0, #4]
 802bf76:	e00e      	b.n	802bf96 <_Balloc+0x60>
 802bf78:	2221      	movs	r2, #33	; 0x21
 802bf7a:	2104      	movs	r1, #4
 802bf7c:	4620      	mov	r0, r4
 802bf7e:	f000 fbd8 	bl	802c732 <_calloc_r>
 802bf82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802bf84:	60e8      	str	r0, [r5, #12]
 802bf86:	68db      	ldr	r3, [r3, #12]
 802bf88:	2b00      	cmp	r3, #0
 802bf8a:	d1e4      	bne.n	802bf56 <_Balloc+0x20>
 802bf8c:	2000      	movs	r0, #0
 802bf8e:	bd70      	pop	{r4, r5, r6, pc}
 802bf90:	6802      	ldr	r2, [r0, #0]
 802bf92:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 802bf96:	2300      	movs	r3, #0
 802bf98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802bf9c:	e7f7      	b.n	802bf8e <_Balloc+0x58>

0802bf9e <_Bfree>:
 802bf9e:	b570      	push	{r4, r5, r6, lr}
 802bfa0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 802bfa2:	4606      	mov	r6, r0
 802bfa4:	460d      	mov	r5, r1
 802bfa6:	b93c      	cbnz	r4, 802bfb8 <_Bfree+0x1a>
 802bfa8:	2010      	movs	r0, #16
 802bfaa:	f7ff ff91 	bl	802bed0 <malloc>
 802bfae:	6270      	str	r0, [r6, #36]	; 0x24
 802bfb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802bfb4:	6004      	str	r4, [r0, #0]
 802bfb6:	60c4      	str	r4, [r0, #12]
 802bfb8:	b13d      	cbz	r5, 802bfca <_Bfree+0x2c>
 802bfba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802bfbc:	686a      	ldr	r2, [r5, #4]
 802bfbe:	68db      	ldr	r3, [r3, #12]
 802bfc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802bfc4:	6029      	str	r1, [r5, #0]
 802bfc6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 802bfca:	bd70      	pop	{r4, r5, r6, pc}

0802bfcc <__multadd>:
 802bfcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bfd0:	690d      	ldr	r5, [r1, #16]
 802bfd2:	461f      	mov	r7, r3
 802bfd4:	4606      	mov	r6, r0
 802bfd6:	460c      	mov	r4, r1
 802bfd8:	f101 0c14 	add.w	ip, r1, #20
 802bfdc:	2300      	movs	r3, #0
 802bfde:	f8dc 0000 	ldr.w	r0, [ip]
 802bfe2:	b281      	uxth	r1, r0
 802bfe4:	fb02 7101 	mla	r1, r2, r1, r7
 802bfe8:	0c0f      	lsrs	r7, r1, #16
 802bfea:	0c00      	lsrs	r0, r0, #16
 802bfec:	fb02 7000 	mla	r0, r2, r0, r7
 802bff0:	b289      	uxth	r1, r1
 802bff2:	3301      	adds	r3, #1
 802bff4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 802bff8:	429d      	cmp	r5, r3
 802bffa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 802bffe:	f84c 1b04 	str.w	r1, [ip], #4
 802c002:	dcec      	bgt.n	802bfde <__multadd+0x12>
 802c004:	b1d7      	cbz	r7, 802c03c <__multadd+0x70>
 802c006:	68a3      	ldr	r3, [r4, #8]
 802c008:	42ab      	cmp	r3, r5
 802c00a:	dc12      	bgt.n	802c032 <__multadd+0x66>
 802c00c:	6861      	ldr	r1, [r4, #4]
 802c00e:	4630      	mov	r0, r6
 802c010:	3101      	adds	r1, #1
 802c012:	f7ff ff90 	bl	802bf36 <_Balloc>
 802c016:	6922      	ldr	r2, [r4, #16]
 802c018:	3202      	adds	r2, #2
 802c01a:	f104 010c 	add.w	r1, r4, #12
 802c01e:	4680      	mov	r8, r0
 802c020:	0092      	lsls	r2, r2, #2
 802c022:	300c      	adds	r0, #12
 802c024:	f7fc fb98 	bl	8028758 <memcpy>
 802c028:	4621      	mov	r1, r4
 802c02a:	4630      	mov	r0, r6
 802c02c:	f7ff ffb7 	bl	802bf9e <_Bfree>
 802c030:	4644      	mov	r4, r8
 802c032:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802c036:	3501      	adds	r5, #1
 802c038:	615f      	str	r7, [r3, #20]
 802c03a:	6125      	str	r5, [r4, #16]
 802c03c:	4620      	mov	r0, r4
 802c03e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802c042 <__s2b>:
 802c042:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c046:	460c      	mov	r4, r1
 802c048:	4615      	mov	r5, r2
 802c04a:	461f      	mov	r7, r3
 802c04c:	2209      	movs	r2, #9
 802c04e:	3308      	adds	r3, #8
 802c050:	4606      	mov	r6, r0
 802c052:	fb93 f3f2 	sdiv	r3, r3, r2
 802c056:	2100      	movs	r1, #0
 802c058:	2201      	movs	r2, #1
 802c05a:	429a      	cmp	r2, r3
 802c05c:	db20      	blt.n	802c0a0 <__s2b+0x5e>
 802c05e:	4630      	mov	r0, r6
 802c060:	f7ff ff69 	bl	802bf36 <_Balloc>
 802c064:	9b08      	ldr	r3, [sp, #32]
 802c066:	6143      	str	r3, [r0, #20]
 802c068:	2d09      	cmp	r5, #9
 802c06a:	f04f 0301 	mov.w	r3, #1
 802c06e:	6103      	str	r3, [r0, #16]
 802c070:	dd19      	ble.n	802c0a6 <__s2b+0x64>
 802c072:	f104 0809 	add.w	r8, r4, #9
 802c076:	46c1      	mov	r9, r8
 802c078:	442c      	add	r4, r5
 802c07a:	f819 3b01 	ldrb.w	r3, [r9], #1
 802c07e:	4601      	mov	r1, r0
 802c080:	3b30      	subs	r3, #48	; 0x30
 802c082:	220a      	movs	r2, #10
 802c084:	4630      	mov	r0, r6
 802c086:	f7ff ffa1 	bl	802bfcc <__multadd>
 802c08a:	45a1      	cmp	r9, r4
 802c08c:	d1f5      	bne.n	802c07a <__s2b+0x38>
 802c08e:	eb08 0405 	add.w	r4, r8, r5
 802c092:	3c08      	subs	r4, #8
 802c094:	1b2d      	subs	r5, r5, r4
 802c096:	1963      	adds	r3, r4, r5
 802c098:	42bb      	cmp	r3, r7
 802c09a:	db07      	blt.n	802c0ac <__s2b+0x6a>
 802c09c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c0a0:	0052      	lsls	r2, r2, #1
 802c0a2:	3101      	adds	r1, #1
 802c0a4:	e7d9      	b.n	802c05a <__s2b+0x18>
 802c0a6:	340a      	adds	r4, #10
 802c0a8:	2509      	movs	r5, #9
 802c0aa:	e7f3      	b.n	802c094 <__s2b+0x52>
 802c0ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 802c0b0:	4601      	mov	r1, r0
 802c0b2:	3b30      	subs	r3, #48	; 0x30
 802c0b4:	220a      	movs	r2, #10
 802c0b6:	4630      	mov	r0, r6
 802c0b8:	f7ff ff88 	bl	802bfcc <__multadd>
 802c0bc:	e7eb      	b.n	802c096 <__s2b+0x54>

0802c0be <__hi0bits>:
 802c0be:	0c02      	lsrs	r2, r0, #16
 802c0c0:	0412      	lsls	r2, r2, #16
 802c0c2:	4603      	mov	r3, r0
 802c0c4:	b9b2      	cbnz	r2, 802c0f4 <__hi0bits+0x36>
 802c0c6:	0403      	lsls	r3, r0, #16
 802c0c8:	2010      	movs	r0, #16
 802c0ca:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 802c0ce:	bf04      	itt	eq
 802c0d0:	021b      	lsleq	r3, r3, #8
 802c0d2:	3008      	addeq	r0, #8
 802c0d4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 802c0d8:	bf04      	itt	eq
 802c0da:	011b      	lsleq	r3, r3, #4
 802c0dc:	3004      	addeq	r0, #4
 802c0de:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 802c0e2:	bf04      	itt	eq
 802c0e4:	009b      	lsleq	r3, r3, #2
 802c0e6:	3002      	addeq	r0, #2
 802c0e8:	2b00      	cmp	r3, #0
 802c0ea:	db06      	blt.n	802c0fa <__hi0bits+0x3c>
 802c0ec:	005b      	lsls	r3, r3, #1
 802c0ee:	d503      	bpl.n	802c0f8 <__hi0bits+0x3a>
 802c0f0:	3001      	adds	r0, #1
 802c0f2:	4770      	bx	lr
 802c0f4:	2000      	movs	r0, #0
 802c0f6:	e7e8      	b.n	802c0ca <__hi0bits+0xc>
 802c0f8:	2020      	movs	r0, #32
 802c0fa:	4770      	bx	lr

0802c0fc <__lo0bits>:
 802c0fc:	6803      	ldr	r3, [r0, #0]
 802c0fe:	f013 0207 	ands.w	r2, r3, #7
 802c102:	4601      	mov	r1, r0
 802c104:	d00b      	beq.n	802c11e <__lo0bits+0x22>
 802c106:	07da      	lsls	r2, r3, #31
 802c108:	d423      	bmi.n	802c152 <__lo0bits+0x56>
 802c10a:	0798      	lsls	r0, r3, #30
 802c10c:	bf49      	itett	mi
 802c10e:	085b      	lsrmi	r3, r3, #1
 802c110:	089b      	lsrpl	r3, r3, #2
 802c112:	2001      	movmi	r0, #1
 802c114:	600b      	strmi	r3, [r1, #0]
 802c116:	bf5c      	itt	pl
 802c118:	600b      	strpl	r3, [r1, #0]
 802c11a:	2002      	movpl	r0, #2
 802c11c:	4770      	bx	lr
 802c11e:	b298      	uxth	r0, r3
 802c120:	b9a8      	cbnz	r0, 802c14e <__lo0bits+0x52>
 802c122:	0c1b      	lsrs	r3, r3, #16
 802c124:	2010      	movs	r0, #16
 802c126:	f013 0fff 	tst.w	r3, #255	; 0xff
 802c12a:	bf04      	itt	eq
 802c12c:	0a1b      	lsreq	r3, r3, #8
 802c12e:	3008      	addeq	r0, #8
 802c130:	071a      	lsls	r2, r3, #28
 802c132:	bf04      	itt	eq
 802c134:	091b      	lsreq	r3, r3, #4
 802c136:	3004      	addeq	r0, #4
 802c138:	079a      	lsls	r2, r3, #30
 802c13a:	bf04      	itt	eq
 802c13c:	089b      	lsreq	r3, r3, #2
 802c13e:	3002      	addeq	r0, #2
 802c140:	07da      	lsls	r2, r3, #31
 802c142:	d402      	bmi.n	802c14a <__lo0bits+0x4e>
 802c144:	085b      	lsrs	r3, r3, #1
 802c146:	d006      	beq.n	802c156 <__lo0bits+0x5a>
 802c148:	3001      	adds	r0, #1
 802c14a:	600b      	str	r3, [r1, #0]
 802c14c:	4770      	bx	lr
 802c14e:	4610      	mov	r0, r2
 802c150:	e7e9      	b.n	802c126 <__lo0bits+0x2a>
 802c152:	2000      	movs	r0, #0
 802c154:	4770      	bx	lr
 802c156:	2020      	movs	r0, #32
 802c158:	4770      	bx	lr

0802c15a <__i2b>:
 802c15a:	b510      	push	{r4, lr}
 802c15c:	460c      	mov	r4, r1
 802c15e:	2101      	movs	r1, #1
 802c160:	f7ff fee9 	bl	802bf36 <_Balloc>
 802c164:	2201      	movs	r2, #1
 802c166:	6144      	str	r4, [r0, #20]
 802c168:	6102      	str	r2, [r0, #16]
 802c16a:	bd10      	pop	{r4, pc}

0802c16c <__multiply>:
 802c16c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c170:	4614      	mov	r4, r2
 802c172:	690a      	ldr	r2, [r1, #16]
 802c174:	6923      	ldr	r3, [r4, #16]
 802c176:	429a      	cmp	r2, r3
 802c178:	bfb8      	it	lt
 802c17a:	460b      	movlt	r3, r1
 802c17c:	4688      	mov	r8, r1
 802c17e:	bfbc      	itt	lt
 802c180:	46a0      	movlt	r8, r4
 802c182:	461c      	movlt	r4, r3
 802c184:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802c188:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802c18c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802c190:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802c194:	eb07 0609 	add.w	r6, r7, r9
 802c198:	42b3      	cmp	r3, r6
 802c19a:	bfb8      	it	lt
 802c19c:	3101      	addlt	r1, #1
 802c19e:	f7ff feca 	bl	802bf36 <_Balloc>
 802c1a2:	f100 0514 	add.w	r5, r0, #20
 802c1a6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 802c1aa:	462b      	mov	r3, r5
 802c1ac:	2200      	movs	r2, #0
 802c1ae:	4573      	cmp	r3, lr
 802c1b0:	d316      	bcc.n	802c1e0 <__multiply+0x74>
 802c1b2:	f104 0214 	add.w	r2, r4, #20
 802c1b6:	f108 0114 	add.w	r1, r8, #20
 802c1ba:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 802c1be:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 802c1c2:	9300      	str	r3, [sp, #0]
 802c1c4:	9b00      	ldr	r3, [sp, #0]
 802c1c6:	9201      	str	r2, [sp, #4]
 802c1c8:	4293      	cmp	r3, r2
 802c1ca:	d80c      	bhi.n	802c1e6 <__multiply+0x7a>
 802c1cc:	2e00      	cmp	r6, #0
 802c1ce:	dd03      	ble.n	802c1d8 <__multiply+0x6c>
 802c1d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 802c1d4:	2b00      	cmp	r3, #0
 802c1d6:	d05d      	beq.n	802c294 <__multiply+0x128>
 802c1d8:	6106      	str	r6, [r0, #16]
 802c1da:	b003      	add	sp, #12
 802c1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c1e0:	f843 2b04 	str.w	r2, [r3], #4
 802c1e4:	e7e3      	b.n	802c1ae <__multiply+0x42>
 802c1e6:	f8b2 b000 	ldrh.w	fp, [r2]
 802c1ea:	f1bb 0f00 	cmp.w	fp, #0
 802c1ee:	d023      	beq.n	802c238 <__multiply+0xcc>
 802c1f0:	4689      	mov	r9, r1
 802c1f2:	46ac      	mov	ip, r5
 802c1f4:	f04f 0800 	mov.w	r8, #0
 802c1f8:	f859 4b04 	ldr.w	r4, [r9], #4
 802c1fc:	f8dc a000 	ldr.w	sl, [ip]
 802c200:	b2a3      	uxth	r3, r4
 802c202:	fa1f fa8a 	uxth.w	sl, sl
 802c206:	fb0b a303 	mla	r3, fp, r3, sl
 802c20a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802c20e:	f8dc 4000 	ldr.w	r4, [ip]
 802c212:	4443      	add	r3, r8
 802c214:	ea4f 4814 	mov.w	r8, r4, lsr #16
 802c218:	fb0b 840a 	mla	r4, fp, sl, r8
 802c21c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 802c220:	46e2      	mov	sl, ip
 802c222:	b29b      	uxth	r3, r3
 802c224:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802c228:	454f      	cmp	r7, r9
 802c22a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 802c22e:	f84a 3b04 	str.w	r3, [sl], #4
 802c232:	d82b      	bhi.n	802c28c <__multiply+0x120>
 802c234:	f8cc 8004 	str.w	r8, [ip, #4]
 802c238:	9b01      	ldr	r3, [sp, #4]
 802c23a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 802c23e:	3204      	adds	r2, #4
 802c240:	f1ba 0f00 	cmp.w	sl, #0
 802c244:	d020      	beq.n	802c288 <__multiply+0x11c>
 802c246:	682b      	ldr	r3, [r5, #0]
 802c248:	4689      	mov	r9, r1
 802c24a:	46a8      	mov	r8, r5
 802c24c:	f04f 0b00 	mov.w	fp, #0
 802c250:	f8b9 c000 	ldrh.w	ip, [r9]
 802c254:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 802c258:	fb0a 440c 	mla	r4, sl, ip, r4
 802c25c:	445c      	add	r4, fp
 802c25e:	46c4      	mov	ip, r8
 802c260:	b29b      	uxth	r3, r3
 802c262:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802c266:	f84c 3b04 	str.w	r3, [ip], #4
 802c26a:	f859 3b04 	ldr.w	r3, [r9], #4
 802c26e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 802c272:	0c1b      	lsrs	r3, r3, #16
 802c274:	fb0a b303 	mla	r3, sl, r3, fp
 802c278:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 802c27c:	454f      	cmp	r7, r9
 802c27e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 802c282:	d805      	bhi.n	802c290 <__multiply+0x124>
 802c284:	f8c8 3004 	str.w	r3, [r8, #4]
 802c288:	3504      	adds	r5, #4
 802c28a:	e79b      	b.n	802c1c4 <__multiply+0x58>
 802c28c:	46d4      	mov	ip, sl
 802c28e:	e7b3      	b.n	802c1f8 <__multiply+0x8c>
 802c290:	46e0      	mov	r8, ip
 802c292:	e7dd      	b.n	802c250 <__multiply+0xe4>
 802c294:	3e01      	subs	r6, #1
 802c296:	e799      	b.n	802c1cc <__multiply+0x60>

0802c298 <__pow5mult>:
 802c298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c29c:	4615      	mov	r5, r2
 802c29e:	f012 0203 	ands.w	r2, r2, #3
 802c2a2:	4606      	mov	r6, r0
 802c2a4:	460f      	mov	r7, r1
 802c2a6:	d007      	beq.n	802c2b8 <__pow5mult+0x20>
 802c2a8:	3a01      	subs	r2, #1
 802c2aa:	4c21      	ldr	r4, [pc, #132]	; (802c330 <__pow5mult+0x98>)
 802c2ac:	2300      	movs	r3, #0
 802c2ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802c2b2:	f7ff fe8b 	bl	802bfcc <__multadd>
 802c2b6:	4607      	mov	r7, r0
 802c2b8:	10ad      	asrs	r5, r5, #2
 802c2ba:	d035      	beq.n	802c328 <__pow5mult+0x90>
 802c2bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802c2be:	b93c      	cbnz	r4, 802c2d0 <__pow5mult+0x38>
 802c2c0:	2010      	movs	r0, #16
 802c2c2:	f7ff fe05 	bl	802bed0 <malloc>
 802c2c6:	6270      	str	r0, [r6, #36]	; 0x24
 802c2c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802c2cc:	6004      	str	r4, [r0, #0]
 802c2ce:	60c4      	str	r4, [r0, #12]
 802c2d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802c2d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802c2d8:	b94c      	cbnz	r4, 802c2ee <__pow5mult+0x56>
 802c2da:	f240 2171 	movw	r1, #625	; 0x271
 802c2de:	4630      	mov	r0, r6
 802c2e0:	f7ff ff3b 	bl	802c15a <__i2b>
 802c2e4:	2300      	movs	r3, #0
 802c2e6:	f8c8 0008 	str.w	r0, [r8, #8]
 802c2ea:	4604      	mov	r4, r0
 802c2ec:	6003      	str	r3, [r0, #0]
 802c2ee:	f04f 0800 	mov.w	r8, #0
 802c2f2:	07eb      	lsls	r3, r5, #31
 802c2f4:	d50a      	bpl.n	802c30c <__pow5mult+0x74>
 802c2f6:	4639      	mov	r1, r7
 802c2f8:	4622      	mov	r2, r4
 802c2fa:	4630      	mov	r0, r6
 802c2fc:	f7ff ff36 	bl	802c16c <__multiply>
 802c300:	4639      	mov	r1, r7
 802c302:	4681      	mov	r9, r0
 802c304:	4630      	mov	r0, r6
 802c306:	f7ff fe4a 	bl	802bf9e <_Bfree>
 802c30a:	464f      	mov	r7, r9
 802c30c:	106d      	asrs	r5, r5, #1
 802c30e:	d00b      	beq.n	802c328 <__pow5mult+0x90>
 802c310:	6820      	ldr	r0, [r4, #0]
 802c312:	b938      	cbnz	r0, 802c324 <__pow5mult+0x8c>
 802c314:	4622      	mov	r2, r4
 802c316:	4621      	mov	r1, r4
 802c318:	4630      	mov	r0, r6
 802c31a:	f7ff ff27 	bl	802c16c <__multiply>
 802c31e:	6020      	str	r0, [r4, #0]
 802c320:	f8c0 8000 	str.w	r8, [r0]
 802c324:	4604      	mov	r4, r0
 802c326:	e7e4      	b.n	802c2f2 <__pow5mult+0x5a>
 802c328:	4638      	mov	r0, r7
 802c32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c32e:	bf00      	nop
 802c330:	0802e7e0 	.word	0x0802e7e0

0802c334 <__lshift>:
 802c334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c338:	460c      	mov	r4, r1
 802c33a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802c33e:	6923      	ldr	r3, [r4, #16]
 802c340:	6849      	ldr	r1, [r1, #4]
 802c342:	eb0a 0903 	add.w	r9, sl, r3
 802c346:	68a3      	ldr	r3, [r4, #8]
 802c348:	4607      	mov	r7, r0
 802c34a:	4616      	mov	r6, r2
 802c34c:	f109 0501 	add.w	r5, r9, #1
 802c350:	42ab      	cmp	r3, r5
 802c352:	db32      	blt.n	802c3ba <__lshift+0x86>
 802c354:	4638      	mov	r0, r7
 802c356:	f7ff fdee 	bl	802bf36 <_Balloc>
 802c35a:	2300      	movs	r3, #0
 802c35c:	4680      	mov	r8, r0
 802c35e:	f100 0114 	add.w	r1, r0, #20
 802c362:	461a      	mov	r2, r3
 802c364:	4553      	cmp	r3, sl
 802c366:	db2b      	blt.n	802c3c0 <__lshift+0x8c>
 802c368:	6920      	ldr	r0, [r4, #16]
 802c36a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802c36e:	f104 0314 	add.w	r3, r4, #20
 802c372:	f016 021f 	ands.w	r2, r6, #31
 802c376:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802c37a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802c37e:	d025      	beq.n	802c3cc <__lshift+0x98>
 802c380:	f1c2 0e20 	rsb	lr, r2, #32
 802c384:	2000      	movs	r0, #0
 802c386:	681e      	ldr	r6, [r3, #0]
 802c388:	468a      	mov	sl, r1
 802c38a:	4096      	lsls	r6, r2
 802c38c:	4330      	orrs	r0, r6
 802c38e:	f84a 0b04 	str.w	r0, [sl], #4
 802c392:	f853 0b04 	ldr.w	r0, [r3], #4
 802c396:	459c      	cmp	ip, r3
 802c398:	fa20 f00e 	lsr.w	r0, r0, lr
 802c39c:	d814      	bhi.n	802c3c8 <__lshift+0x94>
 802c39e:	6048      	str	r0, [r1, #4]
 802c3a0:	b108      	cbz	r0, 802c3a6 <__lshift+0x72>
 802c3a2:	f109 0502 	add.w	r5, r9, #2
 802c3a6:	3d01      	subs	r5, #1
 802c3a8:	4638      	mov	r0, r7
 802c3aa:	f8c8 5010 	str.w	r5, [r8, #16]
 802c3ae:	4621      	mov	r1, r4
 802c3b0:	f7ff fdf5 	bl	802bf9e <_Bfree>
 802c3b4:	4640      	mov	r0, r8
 802c3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c3ba:	3101      	adds	r1, #1
 802c3bc:	005b      	lsls	r3, r3, #1
 802c3be:	e7c7      	b.n	802c350 <__lshift+0x1c>
 802c3c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 802c3c4:	3301      	adds	r3, #1
 802c3c6:	e7cd      	b.n	802c364 <__lshift+0x30>
 802c3c8:	4651      	mov	r1, sl
 802c3ca:	e7dc      	b.n	802c386 <__lshift+0x52>
 802c3cc:	3904      	subs	r1, #4
 802c3ce:	f853 2b04 	ldr.w	r2, [r3], #4
 802c3d2:	f841 2f04 	str.w	r2, [r1, #4]!
 802c3d6:	459c      	cmp	ip, r3
 802c3d8:	d8f9      	bhi.n	802c3ce <__lshift+0x9a>
 802c3da:	e7e4      	b.n	802c3a6 <__lshift+0x72>

0802c3dc <__mcmp>:
 802c3dc:	6903      	ldr	r3, [r0, #16]
 802c3de:	690a      	ldr	r2, [r1, #16]
 802c3e0:	1a9b      	subs	r3, r3, r2
 802c3e2:	b530      	push	{r4, r5, lr}
 802c3e4:	d10c      	bne.n	802c400 <__mcmp+0x24>
 802c3e6:	0092      	lsls	r2, r2, #2
 802c3e8:	3014      	adds	r0, #20
 802c3ea:	3114      	adds	r1, #20
 802c3ec:	1884      	adds	r4, r0, r2
 802c3ee:	4411      	add	r1, r2
 802c3f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802c3f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802c3f8:	4295      	cmp	r5, r2
 802c3fa:	d003      	beq.n	802c404 <__mcmp+0x28>
 802c3fc:	d305      	bcc.n	802c40a <__mcmp+0x2e>
 802c3fe:	2301      	movs	r3, #1
 802c400:	4618      	mov	r0, r3
 802c402:	bd30      	pop	{r4, r5, pc}
 802c404:	42a0      	cmp	r0, r4
 802c406:	d3f3      	bcc.n	802c3f0 <__mcmp+0x14>
 802c408:	e7fa      	b.n	802c400 <__mcmp+0x24>
 802c40a:	f04f 33ff 	mov.w	r3, #4294967295
 802c40e:	e7f7      	b.n	802c400 <__mcmp+0x24>

0802c410 <__mdiff>:
 802c410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c414:	460d      	mov	r5, r1
 802c416:	4607      	mov	r7, r0
 802c418:	4611      	mov	r1, r2
 802c41a:	4628      	mov	r0, r5
 802c41c:	4614      	mov	r4, r2
 802c41e:	f7ff ffdd 	bl	802c3dc <__mcmp>
 802c422:	1e06      	subs	r6, r0, #0
 802c424:	d108      	bne.n	802c438 <__mdiff+0x28>
 802c426:	4631      	mov	r1, r6
 802c428:	4638      	mov	r0, r7
 802c42a:	f7ff fd84 	bl	802bf36 <_Balloc>
 802c42e:	2301      	movs	r3, #1
 802c430:	e9c0 3604 	strd	r3, r6, [r0, #16]
 802c434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c438:	bfa4      	itt	ge
 802c43a:	4623      	movge	r3, r4
 802c43c:	462c      	movge	r4, r5
 802c43e:	4638      	mov	r0, r7
 802c440:	6861      	ldr	r1, [r4, #4]
 802c442:	bfa6      	itte	ge
 802c444:	461d      	movge	r5, r3
 802c446:	2600      	movge	r6, #0
 802c448:	2601      	movlt	r6, #1
 802c44a:	f7ff fd74 	bl	802bf36 <_Balloc>
 802c44e:	692b      	ldr	r3, [r5, #16]
 802c450:	60c6      	str	r6, [r0, #12]
 802c452:	6926      	ldr	r6, [r4, #16]
 802c454:	f105 0914 	add.w	r9, r5, #20
 802c458:	f104 0214 	add.w	r2, r4, #20
 802c45c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 802c460:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 802c464:	f100 0514 	add.w	r5, r0, #20
 802c468:	f04f 0e00 	mov.w	lr, #0
 802c46c:	f852 ab04 	ldr.w	sl, [r2], #4
 802c470:	f859 4b04 	ldr.w	r4, [r9], #4
 802c474:	fa1e f18a 	uxtah	r1, lr, sl
 802c478:	b2a3      	uxth	r3, r4
 802c47a:	1ac9      	subs	r1, r1, r3
 802c47c:	0c23      	lsrs	r3, r4, #16
 802c47e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 802c482:	eb03 4321 	add.w	r3, r3, r1, asr #16
 802c486:	b289      	uxth	r1, r1
 802c488:	ea4f 4e23 	mov.w	lr, r3, asr #16
 802c48c:	45c8      	cmp	r8, r9
 802c48e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 802c492:	4694      	mov	ip, r2
 802c494:	f845 3b04 	str.w	r3, [r5], #4
 802c498:	d8e8      	bhi.n	802c46c <__mdiff+0x5c>
 802c49a:	45bc      	cmp	ip, r7
 802c49c:	d304      	bcc.n	802c4a8 <__mdiff+0x98>
 802c49e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 802c4a2:	b183      	cbz	r3, 802c4c6 <__mdiff+0xb6>
 802c4a4:	6106      	str	r6, [r0, #16]
 802c4a6:	e7c5      	b.n	802c434 <__mdiff+0x24>
 802c4a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 802c4ac:	fa1e f381 	uxtah	r3, lr, r1
 802c4b0:	141a      	asrs	r2, r3, #16
 802c4b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802c4b6:	b29b      	uxth	r3, r3
 802c4b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802c4bc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 802c4c0:	f845 3b04 	str.w	r3, [r5], #4
 802c4c4:	e7e9      	b.n	802c49a <__mdiff+0x8a>
 802c4c6:	3e01      	subs	r6, #1
 802c4c8:	e7e9      	b.n	802c49e <__mdiff+0x8e>
	...

0802c4cc <__ulp>:
 802c4cc:	4b12      	ldr	r3, [pc, #72]	; (802c518 <__ulp+0x4c>)
 802c4ce:	ee10 2a90 	vmov	r2, s1
 802c4d2:	401a      	ands	r2, r3
 802c4d4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 802c4d8:	2b00      	cmp	r3, #0
 802c4da:	dd04      	ble.n	802c4e6 <__ulp+0x1a>
 802c4dc:	2000      	movs	r0, #0
 802c4de:	4619      	mov	r1, r3
 802c4e0:	ec41 0b10 	vmov	d0, r0, r1
 802c4e4:	4770      	bx	lr
 802c4e6:	425b      	negs	r3, r3
 802c4e8:	151b      	asrs	r3, r3, #20
 802c4ea:	2b13      	cmp	r3, #19
 802c4ec:	f04f 0000 	mov.w	r0, #0
 802c4f0:	f04f 0100 	mov.w	r1, #0
 802c4f4:	dc04      	bgt.n	802c500 <__ulp+0x34>
 802c4f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 802c4fa:	fa42 f103 	asr.w	r1, r2, r3
 802c4fe:	e7ef      	b.n	802c4e0 <__ulp+0x14>
 802c500:	3b14      	subs	r3, #20
 802c502:	2b1e      	cmp	r3, #30
 802c504:	f04f 0201 	mov.w	r2, #1
 802c508:	bfda      	itte	le
 802c50a:	f1c3 031f 	rsble	r3, r3, #31
 802c50e:	fa02 f303 	lslle.w	r3, r2, r3
 802c512:	4613      	movgt	r3, r2
 802c514:	4618      	mov	r0, r3
 802c516:	e7e3      	b.n	802c4e0 <__ulp+0x14>
 802c518:	7ff00000 	.word	0x7ff00000

0802c51c <__b2d>:
 802c51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c51e:	6905      	ldr	r5, [r0, #16]
 802c520:	f100 0714 	add.w	r7, r0, #20
 802c524:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 802c528:	1f2e      	subs	r6, r5, #4
 802c52a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802c52e:	4620      	mov	r0, r4
 802c530:	f7ff fdc5 	bl	802c0be <__hi0bits>
 802c534:	f1c0 0320 	rsb	r3, r0, #32
 802c538:	280a      	cmp	r0, #10
 802c53a:	600b      	str	r3, [r1, #0]
 802c53c:	f8df c074 	ldr.w	ip, [pc, #116]	; 802c5b4 <__b2d+0x98>
 802c540:	dc14      	bgt.n	802c56c <__b2d+0x50>
 802c542:	f1c0 0e0b 	rsb	lr, r0, #11
 802c546:	fa24 f10e 	lsr.w	r1, r4, lr
 802c54a:	42b7      	cmp	r7, r6
 802c54c:	ea41 030c 	orr.w	r3, r1, ip
 802c550:	bf34      	ite	cc
 802c552:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802c556:	2100      	movcs	r1, #0
 802c558:	3015      	adds	r0, #21
 802c55a:	fa04 f000 	lsl.w	r0, r4, r0
 802c55e:	fa21 f10e 	lsr.w	r1, r1, lr
 802c562:	ea40 0201 	orr.w	r2, r0, r1
 802c566:	ec43 2b10 	vmov	d0, r2, r3
 802c56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c56c:	42b7      	cmp	r7, r6
 802c56e:	bf3a      	itte	cc
 802c570:	f1a5 0608 	subcc.w	r6, r5, #8
 802c574:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802c578:	2100      	movcs	r1, #0
 802c57a:	380b      	subs	r0, #11
 802c57c:	d015      	beq.n	802c5aa <__b2d+0x8e>
 802c57e:	4084      	lsls	r4, r0
 802c580:	f1c0 0520 	rsb	r5, r0, #32
 802c584:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 802c588:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 802c58c:	42be      	cmp	r6, r7
 802c58e:	fa21 fc05 	lsr.w	ip, r1, r5
 802c592:	ea44 030c 	orr.w	r3, r4, ip
 802c596:	bf8c      	ite	hi
 802c598:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 802c59c:	2400      	movls	r4, #0
 802c59e:	fa01 f000 	lsl.w	r0, r1, r0
 802c5a2:	40ec      	lsrs	r4, r5
 802c5a4:	ea40 0204 	orr.w	r2, r0, r4
 802c5a8:	e7dd      	b.n	802c566 <__b2d+0x4a>
 802c5aa:	ea44 030c 	orr.w	r3, r4, ip
 802c5ae:	460a      	mov	r2, r1
 802c5b0:	e7d9      	b.n	802c566 <__b2d+0x4a>
 802c5b2:	bf00      	nop
 802c5b4:	3ff00000 	.word	0x3ff00000

0802c5b8 <__d2b>:
 802c5b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802c5bc:	460e      	mov	r6, r1
 802c5be:	2101      	movs	r1, #1
 802c5c0:	ec59 8b10 	vmov	r8, r9, d0
 802c5c4:	4615      	mov	r5, r2
 802c5c6:	f7ff fcb6 	bl	802bf36 <_Balloc>
 802c5ca:	f3c9 540a 	ubfx	r4, r9, #20, #11
 802c5ce:	4607      	mov	r7, r0
 802c5d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802c5d4:	bb34      	cbnz	r4, 802c624 <__d2b+0x6c>
 802c5d6:	9301      	str	r3, [sp, #4]
 802c5d8:	f1b8 0300 	subs.w	r3, r8, #0
 802c5dc:	d027      	beq.n	802c62e <__d2b+0x76>
 802c5de:	a802      	add	r0, sp, #8
 802c5e0:	f840 3d08 	str.w	r3, [r0, #-8]!
 802c5e4:	f7ff fd8a 	bl	802c0fc <__lo0bits>
 802c5e8:	9900      	ldr	r1, [sp, #0]
 802c5ea:	b1f0      	cbz	r0, 802c62a <__d2b+0x72>
 802c5ec:	9a01      	ldr	r2, [sp, #4]
 802c5ee:	f1c0 0320 	rsb	r3, r0, #32
 802c5f2:	fa02 f303 	lsl.w	r3, r2, r3
 802c5f6:	430b      	orrs	r3, r1
 802c5f8:	40c2      	lsrs	r2, r0
 802c5fa:	617b      	str	r3, [r7, #20]
 802c5fc:	9201      	str	r2, [sp, #4]
 802c5fe:	9b01      	ldr	r3, [sp, #4]
 802c600:	61bb      	str	r3, [r7, #24]
 802c602:	2b00      	cmp	r3, #0
 802c604:	bf14      	ite	ne
 802c606:	2102      	movne	r1, #2
 802c608:	2101      	moveq	r1, #1
 802c60a:	6139      	str	r1, [r7, #16]
 802c60c:	b1c4      	cbz	r4, 802c640 <__d2b+0x88>
 802c60e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 802c612:	4404      	add	r4, r0
 802c614:	6034      	str	r4, [r6, #0]
 802c616:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802c61a:	6028      	str	r0, [r5, #0]
 802c61c:	4638      	mov	r0, r7
 802c61e:	b003      	add	sp, #12
 802c620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802c624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802c628:	e7d5      	b.n	802c5d6 <__d2b+0x1e>
 802c62a:	6179      	str	r1, [r7, #20]
 802c62c:	e7e7      	b.n	802c5fe <__d2b+0x46>
 802c62e:	a801      	add	r0, sp, #4
 802c630:	f7ff fd64 	bl	802c0fc <__lo0bits>
 802c634:	9b01      	ldr	r3, [sp, #4]
 802c636:	617b      	str	r3, [r7, #20]
 802c638:	2101      	movs	r1, #1
 802c63a:	6139      	str	r1, [r7, #16]
 802c63c:	3020      	adds	r0, #32
 802c63e:	e7e5      	b.n	802c60c <__d2b+0x54>
 802c640:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 802c644:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802c648:	6030      	str	r0, [r6, #0]
 802c64a:	6918      	ldr	r0, [r3, #16]
 802c64c:	f7ff fd37 	bl	802c0be <__hi0bits>
 802c650:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 802c654:	e7e1      	b.n	802c61a <__d2b+0x62>

0802c656 <__ratio>:
 802c656:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c65a:	4688      	mov	r8, r1
 802c65c:	4669      	mov	r1, sp
 802c65e:	4681      	mov	r9, r0
 802c660:	f7ff ff5c 	bl	802c51c <__b2d>
 802c664:	a901      	add	r1, sp, #4
 802c666:	4640      	mov	r0, r8
 802c668:	ec57 6b10 	vmov	r6, r7, d0
 802c66c:	f7ff ff56 	bl	802c51c <__b2d>
 802c670:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802c674:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802c678:	eba3 0c02 	sub.w	ip, r3, r2
 802c67c:	e9dd 3200 	ldrd	r3, r2, [sp]
 802c680:	1a9b      	subs	r3, r3, r2
 802c682:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802c686:	ec5b ab10 	vmov	sl, fp, d0
 802c68a:	2b00      	cmp	r3, #0
 802c68c:	bfce      	itee	gt
 802c68e:	463a      	movgt	r2, r7
 802c690:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802c694:	465a      	movle	r2, fp
 802c696:	4659      	mov	r1, fp
 802c698:	463d      	mov	r5, r7
 802c69a:	bfd4      	ite	le
 802c69c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 802c6a0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 802c6a4:	4630      	mov	r0, r6
 802c6a6:	ee10 2a10 	vmov	r2, s0
 802c6aa:	460b      	mov	r3, r1
 802c6ac:	4629      	mov	r1, r5
 802c6ae:	f7d4 f8d5 	bl	800085c <__aeabi_ddiv>
 802c6b2:	ec41 0b10 	vmov	d0, r0, r1
 802c6b6:	b003      	add	sp, #12
 802c6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802c6bc <__copybits>:
 802c6bc:	3901      	subs	r1, #1
 802c6be:	b510      	push	{r4, lr}
 802c6c0:	1149      	asrs	r1, r1, #5
 802c6c2:	6914      	ldr	r4, [r2, #16]
 802c6c4:	3101      	adds	r1, #1
 802c6c6:	f102 0314 	add.w	r3, r2, #20
 802c6ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802c6ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802c6d2:	42a3      	cmp	r3, r4
 802c6d4:	4602      	mov	r2, r0
 802c6d6:	d303      	bcc.n	802c6e0 <__copybits+0x24>
 802c6d8:	2300      	movs	r3, #0
 802c6da:	428a      	cmp	r2, r1
 802c6dc:	d305      	bcc.n	802c6ea <__copybits+0x2e>
 802c6de:	bd10      	pop	{r4, pc}
 802c6e0:	f853 2b04 	ldr.w	r2, [r3], #4
 802c6e4:	f840 2b04 	str.w	r2, [r0], #4
 802c6e8:	e7f3      	b.n	802c6d2 <__copybits+0x16>
 802c6ea:	f842 3b04 	str.w	r3, [r2], #4
 802c6ee:	e7f4      	b.n	802c6da <__copybits+0x1e>

0802c6f0 <__any_on>:
 802c6f0:	f100 0214 	add.w	r2, r0, #20
 802c6f4:	6900      	ldr	r0, [r0, #16]
 802c6f6:	114b      	asrs	r3, r1, #5
 802c6f8:	4298      	cmp	r0, r3
 802c6fa:	b510      	push	{r4, lr}
 802c6fc:	db11      	blt.n	802c722 <__any_on+0x32>
 802c6fe:	dd0a      	ble.n	802c716 <__any_on+0x26>
 802c700:	f011 011f 	ands.w	r1, r1, #31
 802c704:	d007      	beq.n	802c716 <__any_on+0x26>
 802c706:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802c70a:	fa24 f001 	lsr.w	r0, r4, r1
 802c70e:	fa00 f101 	lsl.w	r1, r0, r1
 802c712:	428c      	cmp	r4, r1
 802c714:	d10b      	bne.n	802c72e <__any_on+0x3e>
 802c716:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802c71a:	4293      	cmp	r3, r2
 802c71c:	d803      	bhi.n	802c726 <__any_on+0x36>
 802c71e:	2000      	movs	r0, #0
 802c720:	bd10      	pop	{r4, pc}
 802c722:	4603      	mov	r3, r0
 802c724:	e7f7      	b.n	802c716 <__any_on+0x26>
 802c726:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802c72a:	2900      	cmp	r1, #0
 802c72c:	d0f5      	beq.n	802c71a <__any_on+0x2a>
 802c72e:	2001      	movs	r0, #1
 802c730:	e7f6      	b.n	802c720 <__any_on+0x30>

0802c732 <_calloc_r>:
 802c732:	b538      	push	{r3, r4, r5, lr}
 802c734:	fb02 f401 	mul.w	r4, r2, r1
 802c738:	4621      	mov	r1, r4
 802c73a:	f000 f857 	bl	802c7ec <_malloc_r>
 802c73e:	4605      	mov	r5, r0
 802c740:	b118      	cbz	r0, 802c74a <_calloc_r+0x18>
 802c742:	4622      	mov	r2, r4
 802c744:	2100      	movs	r1, #0
 802c746:	f7fc f812 	bl	802876e <memset>
 802c74a:	4628      	mov	r0, r5
 802c74c:	bd38      	pop	{r3, r4, r5, pc}
	...

0802c750 <_free_r>:
 802c750:	b538      	push	{r3, r4, r5, lr}
 802c752:	4605      	mov	r5, r0
 802c754:	2900      	cmp	r1, #0
 802c756:	d045      	beq.n	802c7e4 <_free_r+0x94>
 802c758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c75c:	1f0c      	subs	r4, r1, #4
 802c75e:	2b00      	cmp	r3, #0
 802c760:	bfb8      	it	lt
 802c762:	18e4      	addlt	r4, r4, r3
 802c764:	f000 fb20 	bl	802cda8 <__malloc_lock>
 802c768:	4a1f      	ldr	r2, [pc, #124]	; (802c7e8 <_free_r+0x98>)
 802c76a:	6813      	ldr	r3, [r2, #0]
 802c76c:	4610      	mov	r0, r2
 802c76e:	b933      	cbnz	r3, 802c77e <_free_r+0x2e>
 802c770:	6063      	str	r3, [r4, #4]
 802c772:	6014      	str	r4, [r2, #0]
 802c774:	4628      	mov	r0, r5
 802c776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c77a:	f000 bb16 	b.w	802cdaa <__malloc_unlock>
 802c77e:	42a3      	cmp	r3, r4
 802c780:	d90c      	bls.n	802c79c <_free_r+0x4c>
 802c782:	6821      	ldr	r1, [r4, #0]
 802c784:	1862      	adds	r2, r4, r1
 802c786:	4293      	cmp	r3, r2
 802c788:	bf04      	itt	eq
 802c78a:	681a      	ldreq	r2, [r3, #0]
 802c78c:	685b      	ldreq	r3, [r3, #4]
 802c78e:	6063      	str	r3, [r4, #4]
 802c790:	bf04      	itt	eq
 802c792:	1852      	addeq	r2, r2, r1
 802c794:	6022      	streq	r2, [r4, #0]
 802c796:	6004      	str	r4, [r0, #0]
 802c798:	e7ec      	b.n	802c774 <_free_r+0x24>
 802c79a:	4613      	mov	r3, r2
 802c79c:	685a      	ldr	r2, [r3, #4]
 802c79e:	b10a      	cbz	r2, 802c7a4 <_free_r+0x54>
 802c7a0:	42a2      	cmp	r2, r4
 802c7a2:	d9fa      	bls.n	802c79a <_free_r+0x4a>
 802c7a4:	6819      	ldr	r1, [r3, #0]
 802c7a6:	1858      	adds	r0, r3, r1
 802c7a8:	42a0      	cmp	r0, r4
 802c7aa:	d10b      	bne.n	802c7c4 <_free_r+0x74>
 802c7ac:	6820      	ldr	r0, [r4, #0]
 802c7ae:	4401      	add	r1, r0
 802c7b0:	1858      	adds	r0, r3, r1
 802c7b2:	4282      	cmp	r2, r0
 802c7b4:	6019      	str	r1, [r3, #0]
 802c7b6:	d1dd      	bne.n	802c774 <_free_r+0x24>
 802c7b8:	6810      	ldr	r0, [r2, #0]
 802c7ba:	6852      	ldr	r2, [r2, #4]
 802c7bc:	605a      	str	r2, [r3, #4]
 802c7be:	4401      	add	r1, r0
 802c7c0:	6019      	str	r1, [r3, #0]
 802c7c2:	e7d7      	b.n	802c774 <_free_r+0x24>
 802c7c4:	d902      	bls.n	802c7cc <_free_r+0x7c>
 802c7c6:	230c      	movs	r3, #12
 802c7c8:	602b      	str	r3, [r5, #0]
 802c7ca:	e7d3      	b.n	802c774 <_free_r+0x24>
 802c7cc:	6820      	ldr	r0, [r4, #0]
 802c7ce:	1821      	adds	r1, r4, r0
 802c7d0:	428a      	cmp	r2, r1
 802c7d2:	bf04      	itt	eq
 802c7d4:	6811      	ldreq	r1, [r2, #0]
 802c7d6:	6852      	ldreq	r2, [r2, #4]
 802c7d8:	6062      	str	r2, [r4, #4]
 802c7da:	bf04      	itt	eq
 802c7dc:	1809      	addeq	r1, r1, r0
 802c7de:	6021      	streq	r1, [r4, #0]
 802c7e0:	605c      	str	r4, [r3, #4]
 802c7e2:	e7c7      	b.n	802c774 <_free_r+0x24>
 802c7e4:	bd38      	pop	{r3, r4, r5, pc}
 802c7e6:	bf00      	nop
 802c7e8:	200097ac 	.word	0x200097ac

0802c7ec <_malloc_r>:
 802c7ec:	b570      	push	{r4, r5, r6, lr}
 802c7ee:	1ccd      	adds	r5, r1, #3
 802c7f0:	f025 0503 	bic.w	r5, r5, #3
 802c7f4:	3508      	adds	r5, #8
 802c7f6:	2d0c      	cmp	r5, #12
 802c7f8:	bf38      	it	cc
 802c7fa:	250c      	movcc	r5, #12
 802c7fc:	2d00      	cmp	r5, #0
 802c7fe:	4606      	mov	r6, r0
 802c800:	db01      	blt.n	802c806 <_malloc_r+0x1a>
 802c802:	42a9      	cmp	r1, r5
 802c804:	d903      	bls.n	802c80e <_malloc_r+0x22>
 802c806:	230c      	movs	r3, #12
 802c808:	6033      	str	r3, [r6, #0]
 802c80a:	2000      	movs	r0, #0
 802c80c:	bd70      	pop	{r4, r5, r6, pc}
 802c80e:	f000 facb 	bl	802cda8 <__malloc_lock>
 802c812:	4a21      	ldr	r2, [pc, #132]	; (802c898 <_malloc_r+0xac>)
 802c814:	6814      	ldr	r4, [r2, #0]
 802c816:	4621      	mov	r1, r4
 802c818:	b991      	cbnz	r1, 802c840 <_malloc_r+0x54>
 802c81a:	4c20      	ldr	r4, [pc, #128]	; (802c89c <_malloc_r+0xb0>)
 802c81c:	6823      	ldr	r3, [r4, #0]
 802c81e:	b91b      	cbnz	r3, 802c828 <_malloc_r+0x3c>
 802c820:	4630      	mov	r0, r6
 802c822:	f000 f9b5 	bl	802cb90 <_sbrk_r>
 802c826:	6020      	str	r0, [r4, #0]
 802c828:	4629      	mov	r1, r5
 802c82a:	4630      	mov	r0, r6
 802c82c:	f000 f9b0 	bl	802cb90 <_sbrk_r>
 802c830:	1c43      	adds	r3, r0, #1
 802c832:	d124      	bne.n	802c87e <_malloc_r+0x92>
 802c834:	230c      	movs	r3, #12
 802c836:	6033      	str	r3, [r6, #0]
 802c838:	4630      	mov	r0, r6
 802c83a:	f000 fab6 	bl	802cdaa <__malloc_unlock>
 802c83e:	e7e4      	b.n	802c80a <_malloc_r+0x1e>
 802c840:	680b      	ldr	r3, [r1, #0]
 802c842:	1b5b      	subs	r3, r3, r5
 802c844:	d418      	bmi.n	802c878 <_malloc_r+0x8c>
 802c846:	2b0b      	cmp	r3, #11
 802c848:	d90f      	bls.n	802c86a <_malloc_r+0x7e>
 802c84a:	600b      	str	r3, [r1, #0]
 802c84c:	50cd      	str	r5, [r1, r3]
 802c84e:	18cc      	adds	r4, r1, r3
 802c850:	4630      	mov	r0, r6
 802c852:	f000 faaa 	bl	802cdaa <__malloc_unlock>
 802c856:	f104 000b 	add.w	r0, r4, #11
 802c85a:	1d23      	adds	r3, r4, #4
 802c85c:	f020 0007 	bic.w	r0, r0, #7
 802c860:	1ac3      	subs	r3, r0, r3
 802c862:	d0d3      	beq.n	802c80c <_malloc_r+0x20>
 802c864:	425a      	negs	r2, r3
 802c866:	50e2      	str	r2, [r4, r3]
 802c868:	e7d0      	b.n	802c80c <_malloc_r+0x20>
 802c86a:	428c      	cmp	r4, r1
 802c86c:	684b      	ldr	r3, [r1, #4]
 802c86e:	bf16      	itet	ne
 802c870:	6063      	strne	r3, [r4, #4]
 802c872:	6013      	streq	r3, [r2, #0]
 802c874:	460c      	movne	r4, r1
 802c876:	e7eb      	b.n	802c850 <_malloc_r+0x64>
 802c878:	460c      	mov	r4, r1
 802c87a:	6849      	ldr	r1, [r1, #4]
 802c87c:	e7cc      	b.n	802c818 <_malloc_r+0x2c>
 802c87e:	1cc4      	adds	r4, r0, #3
 802c880:	f024 0403 	bic.w	r4, r4, #3
 802c884:	42a0      	cmp	r0, r4
 802c886:	d005      	beq.n	802c894 <_malloc_r+0xa8>
 802c888:	1a21      	subs	r1, r4, r0
 802c88a:	4630      	mov	r0, r6
 802c88c:	f000 f980 	bl	802cb90 <_sbrk_r>
 802c890:	3001      	adds	r0, #1
 802c892:	d0cf      	beq.n	802c834 <_malloc_r+0x48>
 802c894:	6025      	str	r5, [r4, #0]
 802c896:	e7db      	b.n	802c850 <_malloc_r+0x64>
 802c898:	200097ac 	.word	0x200097ac
 802c89c:	200097b0 	.word	0x200097b0

0802c8a0 <_realloc_r>:
 802c8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c8a2:	4607      	mov	r7, r0
 802c8a4:	4614      	mov	r4, r2
 802c8a6:	460e      	mov	r6, r1
 802c8a8:	b921      	cbnz	r1, 802c8b4 <_realloc_r+0x14>
 802c8aa:	4611      	mov	r1, r2
 802c8ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802c8b0:	f7ff bf9c 	b.w	802c7ec <_malloc_r>
 802c8b4:	b922      	cbnz	r2, 802c8c0 <_realloc_r+0x20>
 802c8b6:	f7ff ff4b 	bl	802c750 <_free_r>
 802c8ba:	4625      	mov	r5, r4
 802c8bc:	4628      	mov	r0, r5
 802c8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c8c0:	f000 fa74 	bl	802cdac <_malloc_usable_size_r>
 802c8c4:	42a0      	cmp	r0, r4
 802c8c6:	d20f      	bcs.n	802c8e8 <_realloc_r+0x48>
 802c8c8:	4621      	mov	r1, r4
 802c8ca:	4638      	mov	r0, r7
 802c8cc:	f7ff ff8e 	bl	802c7ec <_malloc_r>
 802c8d0:	4605      	mov	r5, r0
 802c8d2:	2800      	cmp	r0, #0
 802c8d4:	d0f2      	beq.n	802c8bc <_realloc_r+0x1c>
 802c8d6:	4631      	mov	r1, r6
 802c8d8:	4622      	mov	r2, r4
 802c8da:	f7fb ff3d 	bl	8028758 <memcpy>
 802c8de:	4631      	mov	r1, r6
 802c8e0:	4638      	mov	r0, r7
 802c8e2:	f7ff ff35 	bl	802c750 <_free_r>
 802c8e6:	e7e9      	b.n	802c8bc <_realloc_r+0x1c>
 802c8e8:	4635      	mov	r5, r6
 802c8ea:	e7e7      	b.n	802c8bc <_realloc_r+0x1c>

0802c8ec <__ssputs_r>:
 802c8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c8f0:	688e      	ldr	r6, [r1, #8]
 802c8f2:	429e      	cmp	r6, r3
 802c8f4:	4682      	mov	sl, r0
 802c8f6:	460c      	mov	r4, r1
 802c8f8:	4690      	mov	r8, r2
 802c8fa:	4699      	mov	r9, r3
 802c8fc:	d837      	bhi.n	802c96e <__ssputs_r+0x82>
 802c8fe:	898a      	ldrh	r2, [r1, #12]
 802c900:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802c904:	d031      	beq.n	802c96a <__ssputs_r+0x7e>
 802c906:	6825      	ldr	r5, [r4, #0]
 802c908:	6909      	ldr	r1, [r1, #16]
 802c90a:	1a6f      	subs	r7, r5, r1
 802c90c:	6965      	ldr	r5, [r4, #20]
 802c90e:	2302      	movs	r3, #2
 802c910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802c914:	fb95 f5f3 	sdiv	r5, r5, r3
 802c918:	f109 0301 	add.w	r3, r9, #1
 802c91c:	443b      	add	r3, r7
 802c91e:	429d      	cmp	r5, r3
 802c920:	bf38      	it	cc
 802c922:	461d      	movcc	r5, r3
 802c924:	0553      	lsls	r3, r2, #21
 802c926:	d530      	bpl.n	802c98a <__ssputs_r+0x9e>
 802c928:	4629      	mov	r1, r5
 802c92a:	f7ff ff5f 	bl	802c7ec <_malloc_r>
 802c92e:	4606      	mov	r6, r0
 802c930:	b950      	cbnz	r0, 802c948 <__ssputs_r+0x5c>
 802c932:	230c      	movs	r3, #12
 802c934:	f8ca 3000 	str.w	r3, [sl]
 802c938:	89a3      	ldrh	r3, [r4, #12]
 802c93a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c93e:	81a3      	strh	r3, [r4, #12]
 802c940:	f04f 30ff 	mov.w	r0, #4294967295
 802c944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c948:	463a      	mov	r2, r7
 802c94a:	6921      	ldr	r1, [r4, #16]
 802c94c:	f7fb ff04 	bl	8028758 <memcpy>
 802c950:	89a3      	ldrh	r3, [r4, #12]
 802c952:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802c956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802c95a:	81a3      	strh	r3, [r4, #12]
 802c95c:	6126      	str	r6, [r4, #16]
 802c95e:	6165      	str	r5, [r4, #20]
 802c960:	443e      	add	r6, r7
 802c962:	1bed      	subs	r5, r5, r7
 802c964:	6026      	str	r6, [r4, #0]
 802c966:	60a5      	str	r5, [r4, #8]
 802c968:	464e      	mov	r6, r9
 802c96a:	454e      	cmp	r6, r9
 802c96c:	d900      	bls.n	802c970 <__ssputs_r+0x84>
 802c96e:	464e      	mov	r6, r9
 802c970:	4632      	mov	r2, r6
 802c972:	4641      	mov	r1, r8
 802c974:	6820      	ldr	r0, [r4, #0]
 802c976:	f7ff fac5 	bl	802bf04 <memmove>
 802c97a:	68a3      	ldr	r3, [r4, #8]
 802c97c:	1b9b      	subs	r3, r3, r6
 802c97e:	60a3      	str	r3, [r4, #8]
 802c980:	6823      	ldr	r3, [r4, #0]
 802c982:	441e      	add	r6, r3
 802c984:	6026      	str	r6, [r4, #0]
 802c986:	2000      	movs	r0, #0
 802c988:	e7dc      	b.n	802c944 <__ssputs_r+0x58>
 802c98a:	462a      	mov	r2, r5
 802c98c:	f7ff ff88 	bl	802c8a0 <_realloc_r>
 802c990:	4606      	mov	r6, r0
 802c992:	2800      	cmp	r0, #0
 802c994:	d1e2      	bne.n	802c95c <__ssputs_r+0x70>
 802c996:	6921      	ldr	r1, [r4, #16]
 802c998:	4650      	mov	r0, sl
 802c99a:	f7ff fed9 	bl	802c750 <_free_r>
 802c99e:	e7c8      	b.n	802c932 <__ssputs_r+0x46>

0802c9a0 <_svfiprintf_r>:
 802c9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c9a4:	461d      	mov	r5, r3
 802c9a6:	898b      	ldrh	r3, [r1, #12]
 802c9a8:	061f      	lsls	r7, r3, #24
 802c9aa:	b09d      	sub	sp, #116	; 0x74
 802c9ac:	4680      	mov	r8, r0
 802c9ae:	460c      	mov	r4, r1
 802c9b0:	4616      	mov	r6, r2
 802c9b2:	d50f      	bpl.n	802c9d4 <_svfiprintf_r+0x34>
 802c9b4:	690b      	ldr	r3, [r1, #16]
 802c9b6:	b96b      	cbnz	r3, 802c9d4 <_svfiprintf_r+0x34>
 802c9b8:	2140      	movs	r1, #64	; 0x40
 802c9ba:	f7ff ff17 	bl	802c7ec <_malloc_r>
 802c9be:	6020      	str	r0, [r4, #0]
 802c9c0:	6120      	str	r0, [r4, #16]
 802c9c2:	b928      	cbnz	r0, 802c9d0 <_svfiprintf_r+0x30>
 802c9c4:	230c      	movs	r3, #12
 802c9c6:	f8c8 3000 	str.w	r3, [r8]
 802c9ca:	f04f 30ff 	mov.w	r0, #4294967295
 802c9ce:	e0c8      	b.n	802cb62 <_svfiprintf_r+0x1c2>
 802c9d0:	2340      	movs	r3, #64	; 0x40
 802c9d2:	6163      	str	r3, [r4, #20]
 802c9d4:	2300      	movs	r3, #0
 802c9d6:	9309      	str	r3, [sp, #36]	; 0x24
 802c9d8:	2320      	movs	r3, #32
 802c9da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802c9de:	2330      	movs	r3, #48	; 0x30
 802c9e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802c9e4:	9503      	str	r5, [sp, #12]
 802c9e6:	f04f 0b01 	mov.w	fp, #1
 802c9ea:	4637      	mov	r7, r6
 802c9ec:	463d      	mov	r5, r7
 802c9ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 802c9f2:	b10b      	cbz	r3, 802c9f8 <_svfiprintf_r+0x58>
 802c9f4:	2b25      	cmp	r3, #37	; 0x25
 802c9f6:	d13e      	bne.n	802ca76 <_svfiprintf_r+0xd6>
 802c9f8:	ebb7 0a06 	subs.w	sl, r7, r6
 802c9fc:	d00b      	beq.n	802ca16 <_svfiprintf_r+0x76>
 802c9fe:	4653      	mov	r3, sl
 802ca00:	4632      	mov	r2, r6
 802ca02:	4621      	mov	r1, r4
 802ca04:	4640      	mov	r0, r8
 802ca06:	f7ff ff71 	bl	802c8ec <__ssputs_r>
 802ca0a:	3001      	adds	r0, #1
 802ca0c:	f000 80a4 	beq.w	802cb58 <_svfiprintf_r+0x1b8>
 802ca10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ca12:	4453      	add	r3, sl
 802ca14:	9309      	str	r3, [sp, #36]	; 0x24
 802ca16:	783b      	ldrb	r3, [r7, #0]
 802ca18:	2b00      	cmp	r3, #0
 802ca1a:	f000 809d 	beq.w	802cb58 <_svfiprintf_r+0x1b8>
 802ca1e:	2300      	movs	r3, #0
 802ca20:	f04f 32ff 	mov.w	r2, #4294967295
 802ca24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802ca28:	9304      	str	r3, [sp, #16]
 802ca2a:	9307      	str	r3, [sp, #28]
 802ca2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802ca30:	931a      	str	r3, [sp, #104]	; 0x68
 802ca32:	462f      	mov	r7, r5
 802ca34:	2205      	movs	r2, #5
 802ca36:	f817 1b01 	ldrb.w	r1, [r7], #1
 802ca3a:	4850      	ldr	r0, [pc, #320]	; (802cb7c <_svfiprintf_r+0x1dc>)
 802ca3c:	f7d3 fbd8 	bl	80001f0 <memchr>
 802ca40:	9b04      	ldr	r3, [sp, #16]
 802ca42:	b9d0      	cbnz	r0, 802ca7a <_svfiprintf_r+0xda>
 802ca44:	06d9      	lsls	r1, r3, #27
 802ca46:	bf44      	itt	mi
 802ca48:	2220      	movmi	r2, #32
 802ca4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802ca4e:	071a      	lsls	r2, r3, #28
 802ca50:	bf44      	itt	mi
 802ca52:	222b      	movmi	r2, #43	; 0x2b
 802ca54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802ca58:	782a      	ldrb	r2, [r5, #0]
 802ca5a:	2a2a      	cmp	r2, #42	; 0x2a
 802ca5c:	d015      	beq.n	802ca8a <_svfiprintf_r+0xea>
 802ca5e:	9a07      	ldr	r2, [sp, #28]
 802ca60:	462f      	mov	r7, r5
 802ca62:	2000      	movs	r0, #0
 802ca64:	250a      	movs	r5, #10
 802ca66:	4639      	mov	r1, r7
 802ca68:	f811 3b01 	ldrb.w	r3, [r1], #1
 802ca6c:	3b30      	subs	r3, #48	; 0x30
 802ca6e:	2b09      	cmp	r3, #9
 802ca70:	d94d      	bls.n	802cb0e <_svfiprintf_r+0x16e>
 802ca72:	b1b8      	cbz	r0, 802caa4 <_svfiprintf_r+0x104>
 802ca74:	e00f      	b.n	802ca96 <_svfiprintf_r+0xf6>
 802ca76:	462f      	mov	r7, r5
 802ca78:	e7b8      	b.n	802c9ec <_svfiprintf_r+0x4c>
 802ca7a:	4a40      	ldr	r2, [pc, #256]	; (802cb7c <_svfiprintf_r+0x1dc>)
 802ca7c:	1a80      	subs	r0, r0, r2
 802ca7e:	fa0b f000 	lsl.w	r0, fp, r0
 802ca82:	4318      	orrs	r0, r3
 802ca84:	9004      	str	r0, [sp, #16]
 802ca86:	463d      	mov	r5, r7
 802ca88:	e7d3      	b.n	802ca32 <_svfiprintf_r+0x92>
 802ca8a:	9a03      	ldr	r2, [sp, #12]
 802ca8c:	1d11      	adds	r1, r2, #4
 802ca8e:	6812      	ldr	r2, [r2, #0]
 802ca90:	9103      	str	r1, [sp, #12]
 802ca92:	2a00      	cmp	r2, #0
 802ca94:	db01      	blt.n	802ca9a <_svfiprintf_r+0xfa>
 802ca96:	9207      	str	r2, [sp, #28]
 802ca98:	e004      	b.n	802caa4 <_svfiprintf_r+0x104>
 802ca9a:	4252      	negs	r2, r2
 802ca9c:	f043 0302 	orr.w	r3, r3, #2
 802caa0:	9207      	str	r2, [sp, #28]
 802caa2:	9304      	str	r3, [sp, #16]
 802caa4:	783b      	ldrb	r3, [r7, #0]
 802caa6:	2b2e      	cmp	r3, #46	; 0x2e
 802caa8:	d10c      	bne.n	802cac4 <_svfiprintf_r+0x124>
 802caaa:	787b      	ldrb	r3, [r7, #1]
 802caac:	2b2a      	cmp	r3, #42	; 0x2a
 802caae:	d133      	bne.n	802cb18 <_svfiprintf_r+0x178>
 802cab0:	9b03      	ldr	r3, [sp, #12]
 802cab2:	1d1a      	adds	r2, r3, #4
 802cab4:	681b      	ldr	r3, [r3, #0]
 802cab6:	9203      	str	r2, [sp, #12]
 802cab8:	2b00      	cmp	r3, #0
 802caba:	bfb8      	it	lt
 802cabc:	f04f 33ff 	movlt.w	r3, #4294967295
 802cac0:	3702      	adds	r7, #2
 802cac2:	9305      	str	r3, [sp, #20]
 802cac4:	4d2e      	ldr	r5, [pc, #184]	; (802cb80 <_svfiprintf_r+0x1e0>)
 802cac6:	7839      	ldrb	r1, [r7, #0]
 802cac8:	2203      	movs	r2, #3
 802caca:	4628      	mov	r0, r5
 802cacc:	f7d3 fb90 	bl	80001f0 <memchr>
 802cad0:	b138      	cbz	r0, 802cae2 <_svfiprintf_r+0x142>
 802cad2:	2340      	movs	r3, #64	; 0x40
 802cad4:	1b40      	subs	r0, r0, r5
 802cad6:	fa03 f000 	lsl.w	r0, r3, r0
 802cada:	9b04      	ldr	r3, [sp, #16]
 802cadc:	4303      	orrs	r3, r0
 802cade:	3701      	adds	r7, #1
 802cae0:	9304      	str	r3, [sp, #16]
 802cae2:	7839      	ldrb	r1, [r7, #0]
 802cae4:	4827      	ldr	r0, [pc, #156]	; (802cb84 <_svfiprintf_r+0x1e4>)
 802cae6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802caea:	2206      	movs	r2, #6
 802caec:	1c7e      	adds	r6, r7, #1
 802caee:	f7d3 fb7f 	bl	80001f0 <memchr>
 802caf2:	2800      	cmp	r0, #0
 802caf4:	d038      	beq.n	802cb68 <_svfiprintf_r+0x1c8>
 802caf6:	4b24      	ldr	r3, [pc, #144]	; (802cb88 <_svfiprintf_r+0x1e8>)
 802caf8:	bb13      	cbnz	r3, 802cb40 <_svfiprintf_r+0x1a0>
 802cafa:	9b03      	ldr	r3, [sp, #12]
 802cafc:	3307      	adds	r3, #7
 802cafe:	f023 0307 	bic.w	r3, r3, #7
 802cb02:	3308      	adds	r3, #8
 802cb04:	9303      	str	r3, [sp, #12]
 802cb06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cb08:	444b      	add	r3, r9
 802cb0a:	9309      	str	r3, [sp, #36]	; 0x24
 802cb0c:	e76d      	b.n	802c9ea <_svfiprintf_r+0x4a>
 802cb0e:	fb05 3202 	mla	r2, r5, r2, r3
 802cb12:	2001      	movs	r0, #1
 802cb14:	460f      	mov	r7, r1
 802cb16:	e7a6      	b.n	802ca66 <_svfiprintf_r+0xc6>
 802cb18:	2300      	movs	r3, #0
 802cb1a:	3701      	adds	r7, #1
 802cb1c:	9305      	str	r3, [sp, #20]
 802cb1e:	4619      	mov	r1, r3
 802cb20:	250a      	movs	r5, #10
 802cb22:	4638      	mov	r0, r7
 802cb24:	f810 2b01 	ldrb.w	r2, [r0], #1
 802cb28:	3a30      	subs	r2, #48	; 0x30
 802cb2a:	2a09      	cmp	r2, #9
 802cb2c:	d903      	bls.n	802cb36 <_svfiprintf_r+0x196>
 802cb2e:	2b00      	cmp	r3, #0
 802cb30:	d0c8      	beq.n	802cac4 <_svfiprintf_r+0x124>
 802cb32:	9105      	str	r1, [sp, #20]
 802cb34:	e7c6      	b.n	802cac4 <_svfiprintf_r+0x124>
 802cb36:	fb05 2101 	mla	r1, r5, r1, r2
 802cb3a:	2301      	movs	r3, #1
 802cb3c:	4607      	mov	r7, r0
 802cb3e:	e7f0      	b.n	802cb22 <_svfiprintf_r+0x182>
 802cb40:	ab03      	add	r3, sp, #12
 802cb42:	9300      	str	r3, [sp, #0]
 802cb44:	4622      	mov	r2, r4
 802cb46:	4b11      	ldr	r3, [pc, #68]	; (802cb8c <_svfiprintf_r+0x1ec>)
 802cb48:	a904      	add	r1, sp, #16
 802cb4a:	4640      	mov	r0, r8
 802cb4c:	f7fb ffea 	bl	8028b24 <_printf_float>
 802cb50:	f1b0 3fff 	cmp.w	r0, #4294967295
 802cb54:	4681      	mov	r9, r0
 802cb56:	d1d6      	bne.n	802cb06 <_svfiprintf_r+0x166>
 802cb58:	89a3      	ldrh	r3, [r4, #12]
 802cb5a:	065b      	lsls	r3, r3, #25
 802cb5c:	f53f af35 	bmi.w	802c9ca <_svfiprintf_r+0x2a>
 802cb60:	9809      	ldr	r0, [sp, #36]	; 0x24
 802cb62:	b01d      	add	sp, #116	; 0x74
 802cb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cb68:	ab03      	add	r3, sp, #12
 802cb6a:	9300      	str	r3, [sp, #0]
 802cb6c:	4622      	mov	r2, r4
 802cb6e:	4b07      	ldr	r3, [pc, #28]	; (802cb8c <_svfiprintf_r+0x1ec>)
 802cb70:	a904      	add	r1, sp, #16
 802cb72:	4640      	mov	r0, r8
 802cb74:	f7fc fa8c 	bl	8029090 <_printf_i>
 802cb78:	e7ea      	b.n	802cb50 <_svfiprintf_r+0x1b0>
 802cb7a:	bf00      	nop
 802cb7c:	0802e5d0 	.word	0x0802e5d0
 802cb80:	0802e5d6 	.word	0x0802e5d6
 802cb84:	0802e5da 	.word	0x0802e5da
 802cb88:	08028b25 	.word	0x08028b25
 802cb8c:	0802c8ed 	.word	0x0802c8ed

0802cb90 <_sbrk_r>:
 802cb90:	b538      	push	{r3, r4, r5, lr}
 802cb92:	4c06      	ldr	r4, [pc, #24]	; (802cbac <_sbrk_r+0x1c>)
 802cb94:	2300      	movs	r3, #0
 802cb96:	4605      	mov	r5, r0
 802cb98:	4608      	mov	r0, r1
 802cb9a:	6023      	str	r3, [r4, #0]
 802cb9c:	f7e7 fb2c 	bl	80141f8 <_sbrk>
 802cba0:	1c43      	adds	r3, r0, #1
 802cba2:	d102      	bne.n	802cbaa <_sbrk_r+0x1a>
 802cba4:	6823      	ldr	r3, [r4, #0]
 802cba6:	b103      	cbz	r3, 802cbaa <_sbrk_r+0x1a>
 802cba8:	602b      	str	r3, [r5, #0]
 802cbaa:	bd38      	pop	{r3, r4, r5, pc}
 802cbac:	200131e0 	.word	0x200131e0

0802cbb0 <_raise_r>:
 802cbb0:	291f      	cmp	r1, #31
 802cbb2:	b538      	push	{r3, r4, r5, lr}
 802cbb4:	4604      	mov	r4, r0
 802cbb6:	460d      	mov	r5, r1
 802cbb8:	d904      	bls.n	802cbc4 <_raise_r+0x14>
 802cbba:	2316      	movs	r3, #22
 802cbbc:	6003      	str	r3, [r0, #0]
 802cbbe:	f04f 30ff 	mov.w	r0, #4294967295
 802cbc2:	bd38      	pop	{r3, r4, r5, pc}
 802cbc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802cbc6:	b112      	cbz	r2, 802cbce <_raise_r+0x1e>
 802cbc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802cbcc:	b94b      	cbnz	r3, 802cbe2 <_raise_r+0x32>
 802cbce:	4620      	mov	r0, r4
 802cbd0:	f000 f830 	bl	802cc34 <_getpid_r>
 802cbd4:	462a      	mov	r2, r5
 802cbd6:	4601      	mov	r1, r0
 802cbd8:	4620      	mov	r0, r4
 802cbda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802cbde:	f000 b817 	b.w	802cc10 <_kill_r>
 802cbe2:	2b01      	cmp	r3, #1
 802cbe4:	d00a      	beq.n	802cbfc <_raise_r+0x4c>
 802cbe6:	1c59      	adds	r1, r3, #1
 802cbe8:	d103      	bne.n	802cbf2 <_raise_r+0x42>
 802cbea:	2316      	movs	r3, #22
 802cbec:	6003      	str	r3, [r0, #0]
 802cbee:	2001      	movs	r0, #1
 802cbf0:	e7e7      	b.n	802cbc2 <_raise_r+0x12>
 802cbf2:	2400      	movs	r4, #0
 802cbf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802cbf8:	4628      	mov	r0, r5
 802cbfa:	4798      	blx	r3
 802cbfc:	2000      	movs	r0, #0
 802cbfe:	e7e0      	b.n	802cbc2 <_raise_r+0x12>

0802cc00 <raise>:
 802cc00:	4b02      	ldr	r3, [pc, #8]	; (802cc0c <raise+0xc>)
 802cc02:	4601      	mov	r1, r0
 802cc04:	6818      	ldr	r0, [r3, #0]
 802cc06:	f7ff bfd3 	b.w	802cbb0 <_raise_r>
 802cc0a:	bf00      	nop
 802cc0c:	2000068c 	.word	0x2000068c

0802cc10 <_kill_r>:
 802cc10:	b538      	push	{r3, r4, r5, lr}
 802cc12:	4c07      	ldr	r4, [pc, #28]	; (802cc30 <_kill_r+0x20>)
 802cc14:	2300      	movs	r3, #0
 802cc16:	4605      	mov	r5, r0
 802cc18:	4608      	mov	r0, r1
 802cc1a:	4611      	mov	r1, r2
 802cc1c:	6023      	str	r3, [r4, #0]
 802cc1e:	f7e7 fa63 	bl	80140e8 <_kill>
 802cc22:	1c43      	adds	r3, r0, #1
 802cc24:	d102      	bne.n	802cc2c <_kill_r+0x1c>
 802cc26:	6823      	ldr	r3, [r4, #0]
 802cc28:	b103      	cbz	r3, 802cc2c <_kill_r+0x1c>
 802cc2a:	602b      	str	r3, [r5, #0]
 802cc2c:	bd38      	pop	{r3, r4, r5, pc}
 802cc2e:	bf00      	nop
 802cc30:	200131e0 	.word	0x200131e0

0802cc34 <_getpid_r>:
 802cc34:	f7e7 ba50 	b.w	80140d8 <_getpid>

0802cc38 <__sread>:
 802cc38:	b510      	push	{r4, lr}
 802cc3a:	460c      	mov	r4, r1
 802cc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cc40:	f000 f8bc 	bl	802cdbc <_read_r>
 802cc44:	2800      	cmp	r0, #0
 802cc46:	bfab      	itete	ge
 802cc48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802cc4a:	89a3      	ldrhlt	r3, [r4, #12]
 802cc4c:	181b      	addge	r3, r3, r0
 802cc4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802cc52:	bfac      	ite	ge
 802cc54:	6563      	strge	r3, [r4, #84]	; 0x54
 802cc56:	81a3      	strhlt	r3, [r4, #12]
 802cc58:	bd10      	pop	{r4, pc}

0802cc5a <__swrite>:
 802cc5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cc5e:	461f      	mov	r7, r3
 802cc60:	898b      	ldrh	r3, [r1, #12]
 802cc62:	05db      	lsls	r3, r3, #23
 802cc64:	4605      	mov	r5, r0
 802cc66:	460c      	mov	r4, r1
 802cc68:	4616      	mov	r6, r2
 802cc6a:	d505      	bpl.n	802cc78 <__swrite+0x1e>
 802cc6c:	2302      	movs	r3, #2
 802cc6e:	2200      	movs	r2, #0
 802cc70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cc74:	f000 f886 	bl	802cd84 <_lseek_r>
 802cc78:	89a3      	ldrh	r3, [r4, #12]
 802cc7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802cc7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802cc82:	81a3      	strh	r3, [r4, #12]
 802cc84:	4632      	mov	r2, r6
 802cc86:	463b      	mov	r3, r7
 802cc88:	4628      	mov	r0, r5
 802cc8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802cc8e:	f000 b835 	b.w	802ccfc <_write_r>

0802cc92 <__sseek>:
 802cc92:	b510      	push	{r4, lr}
 802cc94:	460c      	mov	r4, r1
 802cc96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cc9a:	f000 f873 	bl	802cd84 <_lseek_r>
 802cc9e:	1c43      	adds	r3, r0, #1
 802cca0:	89a3      	ldrh	r3, [r4, #12]
 802cca2:	bf15      	itete	ne
 802cca4:	6560      	strne	r0, [r4, #84]	; 0x54
 802cca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802ccaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802ccae:	81a3      	strheq	r3, [r4, #12]
 802ccb0:	bf18      	it	ne
 802ccb2:	81a3      	strhne	r3, [r4, #12]
 802ccb4:	bd10      	pop	{r4, pc}

0802ccb6 <__sclose>:
 802ccb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ccba:	f000 b831 	b.w	802cd20 <_close_r>

0802ccbe <strncmp>:
 802ccbe:	b510      	push	{r4, lr}
 802ccc0:	b16a      	cbz	r2, 802ccde <strncmp+0x20>
 802ccc2:	3901      	subs	r1, #1
 802ccc4:	1884      	adds	r4, r0, r2
 802ccc6:	f810 3b01 	ldrb.w	r3, [r0], #1
 802ccca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802ccce:	4293      	cmp	r3, r2
 802ccd0:	d103      	bne.n	802ccda <strncmp+0x1c>
 802ccd2:	42a0      	cmp	r0, r4
 802ccd4:	d001      	beq.n	802ccda <strncmp+0x1c>
 802ccd6:	2b00      	cmp	r3, #0
 802ccd8:	d1f5      	bne.n	802ccc6 <strncmp+0x8>
 802ccda:	1a98      	subs	r0, r3, r2
 802ccdc:	bd10      	pop	{r4, pc}
 802ccde:	4610      	mov	r0, r2
 802cce0:	e7fc      	b.n	802ccdc <strncmp+0x1e>

0802cce2 <__ascii_wctomb>:
 802cce2:	b149      	cbz	r1, 802ccf8 <__ascii_wctomb+0x16>
 802cce4:	2aff      	cmp	r2, #255	; 0xff
 802cce6:	bf85      	ittet	hi
 802cce8:	238a      	movhi	r3, #138	; 0x8a
 802ccea:	6003      	strhi	r3, [r0, #0]
 802ccec:	700a      	strbls	r2, [r1, #0]
 802ccee:	f04f 30ff 	movhi.w	r0, #4294967295
 802ccf2:	bf98      	it	ls
 802ccf4:	2001      	movls	r0, #1
 802ccf6:	4770      	bx	lr
 802ccf8:	4608      	mov	r0, r1
 802ccfa:	4770      	bx	lr

0802ccfc <_write_r>:
 802ccfc:	b538      	push	{r3, r4, r5, lr}
 802ccfe:	4c07      	ldr	r4, [pc, #28]	; (802cd1c <_write_r+0x20>)
 802cd00:	4605      	mov	r5, r0
 802cd02:	4608      	mov	r0, r1
 802cd04:	4611      	mov	r1, r2
 802cd06:	2200      	movs	r2, #0
 802cd08:	6022      	str	r2, [r4, #0]
 802cd0a:	461a      	mov	r2, r3
 802cd0c:	f7e7 fa23 	bl	8014156 <_write>
 802cd10:	1c43      	adds	r3, r0, #1
 802cd12:	d102      	bne.n	802cd1a <_write_r+0x1e>
 802cd14:	6823      	ldr	r3, [r4, #0]
 802cd16:	b103      	cbz	r3, 802cd1a <_write_r+0x1e>
 802cd18:	602b      	str	r3, [r5, #0]
 802cd1a:	bd38      	pop	{r3, r4, r5, pc}
 802cd1c:	200131e0 	.word	0x200131e0

0802cd20 <_close_r>:
 802cd20:	b538      	push	{r3, r4, r5, lr}
 802cd22:	4c06      	ldr	r4, [pc, #24]	; (802cd3c <_close_r+0x1c>)
 802cd24:	2300      	movs	r3, #0
 802cd26:	4605      	mov	r5, r0
 802cd28:	4608      	mov	r0, r1
 802cd2a:	6023      	str	r3, [r4, #0]
 802cd2c:	f7e7 fa2f 	bl	801418e <_close>
 802cd30:	1c43      	adds	r3, r0, #1
 802cd32:	d102      	bne.n	802cd3a <_close_r+0x1a>
 802cd34:	6823      	ldr	r3, [r4, #0]
 802cd36:	b103      	cbz	r3, 802cd3a <_close_r+0x1a>
 802cd38:	602b      	str	r3, [r5, #0]
 802cd3a:	bd38      	pop	{r3, r4, r5, pc}
 802cd3c:	200131e0 	.word	0x200131e0

0802cd40 <_fstat_r>:
 802cd40:	b538      	push	{r3, r4, r5, lr}
 802cd42:	4c07      	ldr	r4, [pc, #28]	; (802cd60 <_fstat_r+0x20>)
 802cd44:	2300      	movs	r3, #0
 802cd46:	4605      	mov	r5, r0
 802cd48:	4608      	mov	r0, r1
 802cd4a:	4611      	mov	r1, r2
 802cd4c:	6023      	str	r3, [r4, #0]
 802cd4e:	f7e7 fa2a 	bl	80141a6 <_fstat>
 802cd52:	1c43      	adds	r3, r0, #1
 802cd54:	d102      	bne.n	802cd5c <_fstat_r+0x1c>
 802cd56:	6823      	ldr	r3, [r4, #0]
 802cd58:	b103      	cbz	r3, 802cd5c <_fstat_r+0x1c>
 802cd5a:	602b      	str	r3, [r5, #0]
 802cd5c:	bd38      	pop	{r3, r4, r5, pc}
 802cd5e:	bf00      	nop
 802cd60:	200131e0 	.word	0x200131e0

0802cd64 <_isatty_r>:
 802cd64:	b538      	push	{r3, r4, r5, lr}
 802cd66:	4c06      	ldr	r4, [pc, #24]	; (802cd80 <_isatty_r+0x1c>)
 802cd68:	2300      	movs	r3, #0
 802cd6a:	4605      	mov	r5, r0
 802cd6c:	4608      	mov	r0, r1
 802cd6e:	6023      	str	r3, [r4, #0]
 802cd70:	f7e7 fa29 	bl	80141c6 <_isatty>
 802cd74:	1c43      	adds	r3, r0, #1
 802cd76:	d102      	bne.n	802cd7e <_isatty_r+0x1a>
 802cd78:	6823      	ldr	r3, [r4, #0]
 802cd7a:	b103      	cbz	r3, 802cd7e <_isatty_r+0x1a>
 802cd7c:	602b      	str	r3, [r5, #0]
 802cd7e:	bd38      	pop	{r3, r4, r5, pc}
 802cd80:	200131e0 	.word	0x200131e0

0802cd84 <_lseek_r>:
 802cd84:	b538      	push	{r3, r4, r5, lr}
 802cd86:	4c07      	ldr	r4, [pc, #28]	; (802cda4 <_lseek_r+0x20>)
 802cd88:	4605      	mov	r5, r0
 802cd8a:	4608      	mov	r0, r1
 802cd8c:	4611      	mov	r1, r2
 802cd8e:	2200      	movs	r2, #0
 802cd90:	6022      	str	r2, [r4, #0]
 802cd92:	461a      	mov	r2, r3
 802cd94:	f7e7 fa22 	bl	80141dc <_lseek>
 802cd98:	1c43      	adds	r3, r0, #1
 802cd9a:	d102      	bne.n	802cda2 <_lseek_r+0x1e>
 802cd9c:	6823      	ldr	r3, [r4, #0]
 802cd9e:	b103      	cbz	r3, 802cda2 <_lseek_r+0x1e>
 802cda0:	602b      	str	r3, [r5, #0]
 802cda2:	bd38      	pop	{r3, r4, r5, pc}
 802cda4:	200131e0 	.word	0x200131e0

0802cda8 <__malloc_lock>:
 802cda8:	4770      	bx	lr

0802cdaa <__malloc_unlock>:
 802cdaa:	4770      	bx	lr

0802cdac <_malloc_usable_size_r>:
 802cdac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802cdb0:	1f18      	subs	r0, r3, #4
 802cdb2:	2b00      	cmp	r3, #0
 802cdb4:	bfbc      	itt	lt
 802cdb6:	580b      	ldrlt	r3, [r1, r0]
 802cdb8:	18c0      	addlt	r0, r0, r3
 802cdba:	4770      	bx	lr

0802cdbc <_read_r>:
 802cdbc:	b538      	push	{r3, r4, r5, lr}
 802cdbe:	4c07      	ldr	r4, [pc, #28]	; (802cddc <_read_r+0x20>)
 802cdc0:	4605      	mov	r5, r0
 802cdc2:	4608      	mov	r0, r1
 802cdc4:	4611      	mov	r1, r2
 802cdc6:	2200      	movs	r2, #0
 802cdc8:	6022      	str	r2, [r4, #0]
 802cdca:	461a      	mov	r2, r3
 802cdcc:	f7e7 f9a6 	bl	801411c <_read>
 802cdd0:	1c43      	adds	r3, r0, #1
 802cdd2:	d102      	bne.n	802cdda <_read_r+0x1e>
 802cdd4:	6823      	ldr	r3, [r4, #0]
 802cdd6:	b103      	cbz	r3, 802cdda <_read_r+0x1e>
 802cdd8:	602b      	str	r3, [r5, #0]
 802cdda:	bd38      	pop	{r3, r4, r5, pc}
 802cddc:	200131e0 	.word	0x200131e0

0802cde0 <_init>:
 802cde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cde2:	bf00      	nop
 802cde4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cde6:	bc08      	pop	{r3}
 802cde8:	469e      	mov	lr, r3
 802cdea:	4770      	bx	lr

0802cdec <_fini>:
 802cdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cdee:	bf00      	nop
 802cdf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cdf2:	bc08      	pop	{r3}
 802cdf4:	469e      	mov	lr, r3
 802cdf6:	4770      	bx	lr
