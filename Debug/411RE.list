
411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002d4c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001af8  0802d668  0802d668  0003d668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f160  0802f160  0004087c  2**0
                  CONTENTS
  4 .ARM          00000008  0802f160  0802f160  0003f160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802f168  0802f168  0004087c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000024  0802f168  0802f168  0003f168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802f18c  0802f18c  0003f18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000087c  20000000  0802f190  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012984  20000880  0802fa0c  00040880  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20013204  0802fa0c  00043204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004087c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000660cc  00000000  00000000  000408ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000c1f2  00000000  00000000  000a6978  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002c68  00000000  00000000  000b2b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002838  00000000  00000000  000b57d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002772d  00000000  00000000  000b8010  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00033492  00000000  00000000  000df73d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b33a2  00000000  00000000  00112bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c5f71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d328  00000000  00000000  001c5fec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000880 	.word	0x20000880
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0802d650 	.word	0x0802d650

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000884 	.word	0x20000884
 80001dc:	0802d650 	.word	0x0802d650

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9bd 	b.w	8001034 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f84d 	bl	8000d68 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f840 	bl	8000d68 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f82f 	bl	8000d68 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f821 	bl	8000d68 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b972 	b.w	8001034 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f806 	bl	8000d68 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__udivmoddi4>:
 8000d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d6c:	9e08      	ldr	r6, [sp, #32]
 8000d6e:	4604      	mov	r4, r0
 8000d70:	4688      	mov	r8, r1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d14b      	bne.n	8000e0e <__udivmoddi4+0xa6>
 8000d76:	428a      	cmp	r2, r1
 8000d78:	4615      	mov	r5, r2
 8000d7a:	d967      	bls.n	8000e4c <__udivmoddi4+0xe4>
 8000d7c:	fab2 f282 	clz	r2, r2
 8000d80:	b14a      	cbz	r2, 8000d96 <__udivmoddi4+0x2e>
 8000d82:	f1c2 0720 	rsb	r7, r2, #32
 8000d86:	fa01 f302 	lsl.w	r3, r1, r2
 8000d8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d8e:	4095      	lsls	r5, r2
 8000d90:	ea47 0803 	orr.w	r8, r7, r3
 8000d94:	4094      	lsls	r4, r2
 8000d96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000da0:	fa1f fc85 	uxth.w	ip, r5
 8000da4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000da8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dac:	fb07 f10c 	mul.w	r1, r7, ip
 8000db0:	4299      	cmp	r1, r3
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x60>
 8000db4:	18eb      	adds	r3, r5, r3
 8000db6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dba:	f080 811b 	bcs.w	8000ff4 <__udivmoddi4+0x28c>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 8118 	bls.w	8000ff4 <__udivmoddi4+0x28c>
 8000dc4:	3f02      	subs	r7, #2
 8000dc6:	442b      	add	r3, r5
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d909      	bls.n	8000df4 <__udivmoddi4+0x8c>
 8000de0:	192c      	adds	r4, r5, r4
 8000de2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x290>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x290>
 8000df0:	3802      	subs	r0, #2
 8000df2:	442c      	add	r4, r5
 8000df4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000df8:	eba4 040c 	sub.w	r4, r4, ip
 8000dfc:	2700      	movs	r7, #0
 8000dfe:	b11e      	cbz	r6, 8000e08 <__udivmoddi4+0xa0>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c6 4300 	strd	r4, r3, [r6]
 8000e08:	4639      	mov	r1, r7
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xbe>
 8000e12:	2e00      	cmp	r6, #0
 8000e14:	f000 80eb 	beq.w	8000fee <__udivmoddi4+0x286>
 8000e18:	2700      	movs	r7, #0
 8000e1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e1e:	4638      	mov	r0, r7
 8000e20:	4639      	mov	r1, r7
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f783 	clz	r7, r3
 8000e2a:	2f00      	cmp	r7, #0
 8000e2c:	d147      	bne.n	8000ebe <__udivmoddi4+0x156>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd0>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80fa 	bhi.w	800102c <__udivmoddi4+0x2c4>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	4698      	mov	r8, r3
 8000e42:	2e00      	cmp	r6, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa0>
 8000e46:	e9c6 4800 	strd	r4, r8, [r6]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa0>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xe8>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 808f 	bne.w	8000f78 <__udivmoddi4+0x210>
 8000e5a:	1b49      	subs	r1, r1, r5
 8000e5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e60:	fa1f f885 	uxth.w	r8, r5
 8000e64:	2701      	movs	r7, #1
 8000e66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e6a:	0c23      	lsrs	r3, r4, #16
 8000e6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e74:	fb08 f10c 	mul.w	r1, r8, ip
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x124>
 8000e7c:	18eb      	adds	r3, r5, r3
 8000e7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x122>
 8000e84:	4299      	cmp	r1, r3
 8000e86:	f200 80cd 	bhi.w	8001024 <__udivmoddi4+0x2bc>
 8000e8a:	4684      	mov	ip, r0
 8000e8c:	1a59      	subs	r1, r3, r1
 8000e8e:	b2a3      	uxth	r3, r4
 8000e90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e9c:	fb08 f800 	mul.w	r8, r8, r0
 8000ea0:	45a0      	cmp	r8, r4
 8000ea2:	d907      	bls.n	8000eb4 <__udivmoddi4+0x14c>
 8000ea4:	192c      	adds	r4, r5, r4
 8000ea6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eaa:	d202      	bcs.n	8000eb2 <__udivmoddi4+0x14a>
 8000eac:	45a0      	cmp	r8, r4
 8000eae:	f200 80b6 	bhi.w	800101e <__udivmoddi4+0x2b6>
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	eba4 0408 	sub.w	r4, r4, r8
 8000eb8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ebc:	e79f      	b.n	8000dfe <__udivmoddi4+0x96>
 8000ebe:	f1c7 0c20 	rsb	ip, r7, #32
 8000ec2:	40bb      	lsls	r3, r7
 8000ec4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ec8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ecc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ed0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ed4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ed8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000edc:	4325      	orrs	r5, r4
 8000ede:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ee2:	0c2c      	lsrs	r4, r5, #16
 8000ee4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ee8:	fa1f fa8e 	uxth.w	sl, lr
 8000eec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ef0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ef4:	429c      	cmp	r4, r3
 8000ef6:	fa02 f207 	lsl.w	r2, r2, r7
 8000efa:	fa00 f107 	lsl.w	r1, r0, r7
 8000efe:	d90b      	bls.n	8000f18 <__udivmoddi4+0x1b0>
 8000f00:	eb1e 0303 	adds.w	r3, lr, r3
 8000f04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f08:	f080 8087 	bcs.w	800101a <__udivmoddi4+0x2b2>
 8000f0c:	429c      	cmp	r4, r3
 8000f0e:	f240 8084 	bls.w	800101a <__udivmoddi4+0x2b2>
 8000f12:	f1a9 0902 	sub.w	r9, r9, #2
 8000f16:	4473      	add	r3, lr
 8000f18:	1b1b      	subs	r3, r3, r4
 8000f1a:	b2ad      	uxth	r5, r5
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3310 	mls	r3, r8, r0, r3
 8000f24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f2c:	45a2      	cmp	sl, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1da>
 8000f30:	eb1e 0404 	adds.w	r4, lr, r4
 8000f34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f38:	d26b      	bcs.n	8001012 <__udivmoddi4+0x2aa>
 8000f3a:	45a2      	cmp	sl, r4
 8000f3c:	d969      	bls.n	8001012 <__udivmoddi4+0x2aa>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	4474      	add	r4, lr
 8000f42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f46:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4a:	eba4 040a 	sub.w	r4, r4, sl
 8000f4e:	454c      	cmp	r4, r9
 8000f50:	46c2      	mov	sl, r8
 8000f52:	464b      	mov	r3, r9
 8000f54:	d354      	bcc.n	8001000 <__udivmoddi4+0x298>
 8000f56:	d051      	beq.n	8000ffc <__udivmoddi4+0x294>
 8000f58:	2e00      	cmp	r6, #0
 8000f5a:	d069      	beq.n	8001030 <__udivmoddi4+0x2c8>
 8000f5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f60:	eb64 0403 	sbc.w	r4, r4, r3
 8000f64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f68:	40fd      	lsrs	r5, r7
 8000f6a:	40fc      	lsrs	r4, r7
 8000f6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f70:	e9c6 5400 	strd	r5, r4, [r6]
 8000f74:	2700      	movs	r7, #0
 8000f76:	e747      	b.n	8000e08 <__udivmoddi4+0xa0>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f80:	4095      	lsls	r5, r2
 8000f82:	fa01 f002 	lsl.w	r0, r1, r2
 8000f86:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f8e:	4338      	orrs	r0, r7
 8000f90:	0c01      	lsrs	r1, r0, #16
 8000f92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f96:	fa1f f885 	uxth.w	r8, r5
 8000f9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa2:	fb07 f308 	mul.w	r3, r7, r8
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	fa04 f402 	lsl.w	r4, r4, r2
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x256>
 8000fae:	1869      	adds	r1, r5, r1
 8000fb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fb4:	d22f      	bcs.n	8001016 <__udivmoddi4+0x2ae>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d92d      	bls.n	8001016 <__udivmoddi4+0x2ae>
 8000fba:	3f02      	subs	r7, #2
 8000fbc:	4429      	add	r1, r5
 8000fbe:	1acb      	subs	r3, r1, r3
 8000fc0:	b281      	uxth	r1, r0
 8000fc2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fc6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb00 f308 	mul.w	r3, r0, r8
 8000fd2:	428b      	cmp	r3, r1
 8000fd4:	d907      	bls.n	8000fe6 <__udivmoddi4+0x27e>
 8000fd6:	1869      	adds	r1, r5, r1
 8000fd8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fdc:	d217      	bcs.n	800100e <__udivmoddi4+0x2a6>
 8000fde:	428b      	cmp	r3, r1
 8000fe0:	d915      	bls.n	800100e <__udivmoddi4+0x2a6>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	4429      	add	r1, r5
 8000fe6:	1ac9      	subs	r1, r1, r3
 8000fe8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fec:	e73b      	b.n	8000e66 <__udivmoddi4+0xfe>
 8000fee:	4637      	mov	r7, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e709      	b.n	8000e08 <__udivmoddi4+0xa0>
 8000ff4:	4607      	mov	r7, r0
 8000ff6:	e6e7      	b.n	8000dc8 <__udivmoddi4+0x60>
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x8c>
 8000ffc:	4541      	cmp	r1, r8
 8000ffe:	d2ab      	bcs.n	8000f58 <__udivmoddi4+0x1f0>
 8001000:	ebb8 0a02 	subs.w	sl, r8, r2
 8001004:	eb69 020e 	sbc.w	r2, r9, lr
 8001008:	3801      	subs	r0, #1
 800100a:	4613      	mov	r3, r2
 800100c:	e7a4      	b.n	8000f58 <__udivmoddi4+0x1f0>
 800100e:	4660      	mov	r0, ip
 8001010:	e7e9      	b.n	8000fe6 <__udivmoddi4+0x27e>
 8001012:	4618      	mov	r0, r3
 8001014:	e795      	b.n	8000f42 <__udivmoddi4+0x1da>
 8001016:	4667      	mov	r7, ip
 8001018:	e7d1      	b.n	8000fbe <__udivmoddi4+0x256>
 800101a:	4681      	mov	r9, r0
 800101c:	e77c      	b.n	8000f18 <__udivmoddi4+0x1b0>
 800101e:	3802      	subs	r0, #2
 8001020:	442c      	add	r4, r5
 8001022:	e747      	b.n	8000eb4 <__udivmoddi4+0x14c>
 8001024:	f1ac 0c02 	sub.w	ip, ip, #2
 8001028:	442b      	add	r3, r5
 800102a:	e72f      	b.n	8000e8c <__udivmoddi4+0x124>
 800102c:	4638      	mov	r0, r7
 800102e:	e708      	b.n	8000e42 <__udivmoddi4+0xda>
 8001030:	4637      	mov	r7, r6
 8001032:	e6e9      	b.n	8000e08 <__udivmoddi4+0xa0>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>:
Motor m3(&htim3, TIM_CHANNEL_2);
Motor m4(&htim5, TIM_CHANNEL_1);
Motor m5(&htim5, TIM_CHANNEL_2);
Motor m6(&htim3, TIM_CHANNEL_3);

Motor::Motor(TIM_HandleTypeDef *htim, uint32_t Channel)
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
	: htim(htim)
	, Channel(Channel)
	, pwm(1000)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	68ba      	ldr	r2, [r7, #8]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001056:	811a      	strh	r2, [r3, #8]
{ }
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4618      	mov	r0, r3
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <_ZN2FC5Motor5startEv>:

void Motor::start(){
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(htim, Channel);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4619      	mov	r1, r3
 8001078:	4610      	mov	r0, r2
 800107a:	f01a f81f 	bl	801b0bc <HAL_TIM_PWM_Start>
	setPWM(1000);
 800107e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 f804 	bl	8001090 <_ZN2FC5Motor6setPWMEt>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZN2FC5Motor6setPWMEt>:

void Motor::stop(){
	HAL_TIMEx_PWMN_Stop(htim, Channel);
}

void Motor::setPWM(uint16_t pwm){
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
	if(pwm < MIN_PWM) 			pwm = MIN_PWM;
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010a2:	d203      	bcs.n	80010ac <_ZN2FC5Motor6setPWMEt+0x1c>
 80010a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a8:	807b      	strh	r3, [r7, #2]
 80010aa:	e006      	b.n	80010ba <_ZN2FC5Motor6setPWMEt+0x2a>
	else if(pwm > MAX_PWM)		pwm = MAX_PWM;
 80010ac:	887b      	ldrh	r3, [r7, #2]
 80010ae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010b2:	d902      	bls.n	80010ba <_ZN2FC5Motor6setPWMEt+0x2a>
 80010b4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010b8:	807b      	strh	r3, [r7, #2]

	this->pwm = pwm;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	887a      	ldrh	r2, [r7, #2]
 80010be:	811a      	strh	r2, [r3, #8]

	/*
	 *  pwm(1000 ~ 2000) scale to CCR register value(10500 ~ 21000);
	 */
	uint16_t output = (pwm - MIN_PWM) * ((MAX_CCR - MIN_CCR) / (MAX_PWM - MIN_PWM)) + MIN_CCR;
 80010c0:	887b      	ldrh	r3, [r7, #2]
 80010c2:	461a      	mov	r2, r3
 80010c4:	0092      	lsls	r2, r2, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d105      	bne.n	80010e2 <_ZN2FC5Motor6setPWMEt+0x52>
 80010d6:	89fa      	ldrh	r2, [r7, #14]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010e0:	e018      	b.n	8001114 <_ZN2FC5Motor6setPWMEt+0x84>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d105      	bne.n	80010f6 <_ZN2FC5Motor6setPWMEt+0x66>
 80010ea:	89fa      	ldrh	r2, [r7, #14]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80010f4:	e00e      	b.n	8001114 <_ZN2FC5Motor6setPWMEt+0x84>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b08      	cmp	r3, #8
 80010fc:	d105      	bne.n	800110a <_ZN2FC5Motor6setPWMEt+0x7a>
 80010fe:	89fa      	ldrh	r2, [r7, #14]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001108:	e004      	b.n	8001114 <_ZN2FC5Motor6setPWMEt+0x84>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 800110a:	89fa      	ldrh	r2, [r7, #14]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <_Z41__static_initialization_and_destruction_0ii>:

} /* namespace FC */
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d122      	bne.n	8001176 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001136:	4293      	cmp	r3, r2
 8001138:	d11d      	bne.n	8001176 <_Z41__static_initialization_and_destruction_0ii+0x56>
Motor m1(&htim3, TIM_CHANNEL_4);
 800113a:	220c      	movs	r2, #12
 800113c:	4910      	ldr	r1, [pc, #64]	; (8001180 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800113e:	4811      	ldr	r0, [pc, #68]	; (8001184 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001140:	f7ff ff7a 	bl	8001038 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m2(&htim3, TIM_CHANNEL_1);
 8001144:	2200      	movs	r2, #0
 8001146:	490e      	ldr	r1, [pc, #56]	; (8001180 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001148:	480f      	ldr	r0, [pc, #60]	; (8001188 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800114a:	f7ff ff75 	bl	8001038 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m3(&htim3, TIM_CHANNEL_2);
 800114e:	2204      	movs	r2, #4
 8001150:	490b      	ldr	r1, [pc, #44]	; (8001180 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001152:	480e      	ldr	r0, [pc, #56]	; (800118c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001154:	f7ff ff70 	bl	8001038 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m4(&htim5, TIM_CHANNEL_1);
 8001158:	2200      	movs	r2, #0
 800115a:	490d      	ldr	r1, [pc, #52]	; (8001190 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800115e:	f7ff ff6b 	bl	8001038 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m5(&htim5, TIM_CHANNEL_2);
 8001162:	2204      	movs	r2, #4
 8001164:	490a      	ldr	r1, [pc, #40]	; (8001190 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001166:	480c      	ldr	r0, [pc, #48]	; (8001198 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001168:	f7ff ff66 	bl	8001038 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m6(&htim3, TIM_CHANNEL_3);
 800116c:	2208      	movs	r2, #8
 800116e:	4904      	ldr	r1, [pc, #16]	; (8001180 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001170:	480a      	ldr	r0, [pc, #40]	; (800119c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001172:	f7ff ff61 	bl	8001038 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
} /* namespace FC */
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20010f08 	.word	0x20010f08
 8001184:	2000089c 	.word	0x2000089c
 8001188:	200008a8 	.word	0x200008a8
 800118c:	200008b4 	.word	0x200008b4
 8001190:	20010ec8 	.word	0x20010ec8
 8001194:	200008c0 	.word	0x200008c0
 8001198:	200008cc 	.word	0x200008cc
 800119c:	200008d8 	.word	0x200008d8

080011a0 <_GLOBAL__sub_I__ZN2FC2m1E>:
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011a8:	2001      	movs	r0, #1
 80011aa:	f7ff ffb9 	bl	8001120 <_Z41__static_initialization_and_destruction_0ii>
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <IST8310>:
#define IST8310_MAX_VAL_XY ((1600 / IST8310_RESOLUTION) + 1)
#define IST8310_MIN_VAL_XY (-IST8310_MAX_VAL_XY)
#define IST8310_MAX_VAL_Z ((2500 / IST8310_RESOLUTION) + 1)
#define IST8310_MIN_VAL_Z (-IST8310_MAX_VAL_Z)

void IST8310(I2C_HandleTypeDef *hi2c){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	IST8310_I2C = hi2c;
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <IST8310+0x24>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
	IST8310_reset();
 80011be:	f000 f8f3 	bl	80013a8 <IST8310_reset>
	IST8310_write_reg(IST8310_ADDR_CTRL1, IST8310_CTRL1_MODE_CONT_200HZ);
 80011c2:	210b      	movs	r1, #11
 80011c4:	200a      	movs	r0, #10
 80011c6:	f000 f8dd 	bl	8001384 <IST8310_write_reg>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20001488 	.word	0x20001488

080011d8 <IST8310_i2cRxCpltCallback>:

	HAL_I2C_Mem_Read_IT(IST8310_I2C, IST8310_BUS_I2C_ADDR, IST8310_ADDR_DATA_OUT_X_LSB, 1, (uint8_t*)&ist8310.buf, sizeof(ist8310.buf));
	bm_i2cFlag = bm_i2cIST8310;

}
uint8_t IST8310_i2cRxCpltCallback(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	if(bm_i2cFlag != bm_i2cIST8310) return 0;
 80011dc:	4b58      	ldr	r3, [pc, #352]	; (8001340 <IST8310_i2cRxCpltCallback+0x168>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d001      	beq.n	80011e8 <IST8310_i2cRxCpltCallback+0x10>
 80011e4:	2300      	movs	r3, #0
 80011e6:	e098      	b.n	800131a <IST8310_i2cRxCpltCallback+0x142>

	bm_i2cFlag = bm_i2cIdle;
 80011e8:	4b55      	ldr	r3, [pc, #340]	; (8001340 <IST8310_i2cRxCpltCallback+0x168>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]

	/* swap the data we just received */
	ist8310.count.x = (((int16_t)ist8310.buf.x[1]) << 8) | (int16_t)ist8310.buf.x[0];
 80011ee:	4b55      	ldr	r3, [pc, #340]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 80011f0:	795b      	ldrb	r3, [r3, #5]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	4b53      	ldr	r3, [pc, #332]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 80011f8:	791b      	ldrb	r3, [r3, #4]
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b21a      	sxth	r2, r3
 8001200:	4b50      	ldr	r3, [pc, #320]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 8001202:	815a      	strh	r2, [r3, #10]
	ist8310.count.y = (((int16_t)ist8310.buf.y[1]) << 8) | (int16_t)ist8310.buf.y[0];
 8001204:	4b4f      	ldr	r3, [pc, #316]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 8001206:	79db      	ldrb	r3, [r3, #7]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b4d      	ldr	r3, [pc, #308]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 800120e:	799b      	ldrb	r3, [r3, #6]
 8001210:	b21b      	sxth	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	b21a      	sxth	r2, r3
 8001216:	4b4b      	ldr	r3, [pc, #300]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 8001218:	819a      	strh	r2, [r3, #12]
	ist8310.count.z = (((int16_t)ist8310.buf.z[1]) << 8) | (int16_t)ist8310.buf.z[0];
 800121a:	4b4a      	ldr	r3, [pc, #296]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 800121c:	7a5b      	ldrb	r3, [r3, #9]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b48      	ldr	r3, [pc, #288]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 8001224:	7a1b      	ldrb	r3, [r3, #8]
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b21a      	sxth	r2, r3
 800122c:	4b45      	ldr	r3, [pc, #276]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 800122e:	81da      	strh	r2, [r3, #14]

	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 8001230:	4b44      	ldr	r3, [pc, #272]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 8001232:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f97c 	bl	8000534 <__aeabi_i2d>
 800123c:	a338      	add	r3, pc, #224	; (adr r3, 8001320 <IST8310_i2cRxCpltCallback+0x148>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff fc71 	bl	8000b28 <__aeabi_dcmpgt>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d145      	bne.n	80012d8 <IST8310_i2cRxCpltCallback+0x100>
 800124c:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 800124e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f96e 	bl	8000534 <__aeabi_i2d>
 8001258:	a333      	add	r3, pc, #204	; (adr r3, 8001328 <IST8310_i2cRxCpltCallback+0x150>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125e:	f7ff fc45 	bl	8000aec <__aeabi_dcmplt>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d137      	bne.n	80012d8 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 8001268:	4b36      	ldr	r3, [pc, #216]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 800126a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f960 	bl	8000534 <__aeabi_i2d>
	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 8001274:	a32a      	add	r3, pc, #168	; (adr r3, 8001320 <IST8310_i2cRxCpltCallback+0x148>)
 8001276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127a:	f7ff fc55 	bl	8000b28 <__aeabi_dcmpgt>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d129      	bne.n	80012d8 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 8001284:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 8001286:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f952 	bl	8000534 <__aeabi_i2d>
 8001290:	a325      	add	r3, pc, #148	; (adr r3, 8001328 <IST8310_i2cRxCpltCallback+0x150>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	f7ff fc29 	bl	8000aec <__aeabi_dcmplt>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d11b      	bne.n	80012d8 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z)
 80012a0:	4b28      	ldr	r3, [pc, #160]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 80012a2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f944 	bl	8000534 <__aeabi_i2d>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 80012ac:	a320      	add	r3, pc, #128	; (adr r3, 8001330 <IST8310_i2cRxCpltCallback+0x158>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	f7ff fc39 	bl	8000b28 <__aeabi_dcmpgt>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10d      	bne.n	80012d8 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z)
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 80012be:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f936 	bl	8000534 <__aeabi_i2d>
 80012c8:	a31b      	add	r3, pc, #108	; (adr r3, 8001338 <IST8310_i2cRxCpltCallback+0x160>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7ff fc0d 	bl	8000aec <__aeabi_dcmplt>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <IST8310_i2cRxCpltCallback+0x104>
	{
		return 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	e01e      	b.n	800131a <IST8310_i2cRxCpltCallback+0x142>
	 * raw outputs
	 *
	 * Sensor doesn't follow right hand rule, swap x and y to make it obey
	 * it.
	 */
	ist8310.raw[0] = (float)(ist8310.count.y);
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 80012de:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 80012ec:	edc3 7a04 	vstr	s15, [r3, #16]
	ist8310.raw[1] = (float)(ist8310.count.x);
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 80012f2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 8001300:	edc3 7a05 	vstr	s15, [r3, #20]
	ist8310.raw[2] = (float)(ist8310.count.z);
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 8001306:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <IST8310_i2cRxCpltCallback+0x16c>)
 8001314:	edc3 7a06 	vstr	s15, [r3, #24]
	return 1;
 8001318:	2301      	movs	r3, #1
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	55555556 	.word	0x55555556
 8001324:	40b4d655 	.word	0x40b4d655
 8001328:	55555556 	.word	0x55555556
 800132c:	c0b4d655 	.word	0xc0b4d655
 8001330:	aaaaaaab 	.word	0xaaaaaaab
 8001334:	40c0472a 	.word	0x40c0472a
 8001338:	aaaaaaab 	.word	0xaaaaaaab
 800133c:	c0c0472a 	.word	0xc0c0472a
 8001340:	200014a4 	.word	0x200014a4
 8001344:	20001488 	.word	0x20001488

08001348 <IST8310_write>:

void IST8310_write(uint8_t address, uint8_t *data, uint8_t count){
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af04      	add	r7, sp, #16
 800134e:	4603      	mov	r3, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	4613      	mov	r3, r2
 8001356:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(IST8310_I2C, IST8310_BUS_I2C_ADDR, address, 1, data, count, IST8310_DEFAULT_TIMEOUT);
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <IST8310_write+0x38>)
 800135a:	6818      	ldr	r0, [r3, #0]
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	b299      	uxth	r1, r3
 8001360:	79bb      	ldrb	r3, [r7, #6]
 8001362:	b29b      	uxth	r3, r3
 8001364:	2264      	movs	r2, #100	; 0x64
 8001366:	9202      	str	r2, [sp, #8]
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2301      	movs	r3, #1
 8001370:	460a      	mov	r2, r1
 8001372:	211c      	movs	r1, #28
 8001374:	f015 f8fc 	bl	8016570 <HAL_I2C_Mem_Write>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20001488 	.word	0x20001488

08001384 <IST8310_write_reg>:

void IST8310_write_reg(uint8_t reg, uint8_t val){
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	460a      	mov	r2, r1
 800138e:	71fb      	strb	r3, [r7, #7]
 8001390:	4613      	mov	r3, r2
 8001392:	71bb      	strb	r3, [r7, #6]
	IST8310_write(reg, &val, 1);
 8001394:	1db9      	adds	r1, r7, #6
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	2201      	movs	r2, #1
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ffd4 	bl	8001348 <IST8310_write>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <IST8310_reset>:

void IST8310_read_reg(uint8_t reg, uint8_t* val){
	IST8310_read(reg, val, 1);
}

void IST8310_reset(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	/* software reset */
	IST8310_write_reg(IST8310_ADDR_CTRL2, IST8310_CTRL2_SRST);
 80013ac:	2101      	movs	r1, #1
 80013ae:	200b      	movs	r0, #11
 80013b0:	f7ff ffe8 	bl	8001384 <IST8310_write_reg>

	/* configure control register 3 */
	IST8310_write_reg(IST8310_ADDR_CTRL3, IST8310_CTRL3_SAMPLEAVG_16);
 80013b4:	2124      	movs	r1, #36	; 0x24
 80013b6:	2041      	movs	r0, #65	; 0x41
 80013b8:	f7ff ffe4 	bl	8001384 <IST8310_write_reg>

	/* configure control register 4 */
	IST8310_write_reg(IST8310_ADDR_CTRL4, IST8310_CTRL4_SRPD);
 80013bc:	21c0      	movs	r1, #192	; 0xc0
 80013be:	2042      	movs	r0, #66	; 0x42
 80013c0:	f7ff ffe0 	bl	8001384 <IST8310_write_reg>
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <Lidar1D_CaptureCallback>:
	if(HAL_TIM_IC_Start_IT(lidar1D.htim, lidar1D.indirectChannel) != HAL_OK) Error_Handler();
	return HAL_OK;
}


void Lidar1D_CaptureCallback(TIM_HandleTypeDef *htim){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance != lidar1D.htim->Instance) return;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <Lidar1D_CaptureCallback+0x4c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d116      	bne.n	800140c <Lidar1D_CaptureCallback+0x44>

	if(htim->Channel == lidar1D.activeChannel1){
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7f1a      	ldrb	r2, [r3, #28]
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <Lidar1D_CaptureCallback+0x4c>)
 80013e4:	7b1b      	ldrb	r3, [r3, #12]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d102      	bne.n	80013f0 <Lidar1D_CaptureCallback+0x28>
//		IC1Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
		TIM9->CNT = 0;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <Lidar1D_CaptureCallback+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if(htim->Channel == lidar1D.activeChannel2){
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7f1a      	ldrb	r2, [r3, #28]
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <Lidar1D_CaptureCallback+0x4c>)
 80013f6:	7b5b      	ldrb	r3, [r3, #13]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d108      	bne.n	800140e <Lidar1D_CaptureCallback+0x46>
		lidar1D.distance_mm = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80013fc:	2104      	movs	r1, #4
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f01a fa32 	bl	801b868 <HAL_TIM_ReadCapturedValue>
 8001404:	4602      	mov	r2, r0
 8001406:	4b03      	ldr	r3, [pc, #12]	; (8001414 <Lidar1D_CaptureCallback+0x4c>)
 8001408:	611a      	str	r2, [r3, #16]
 800140a:	e000      	b.n	800140e <Lidar1D_CaptureCallback+0x46>
	if(htim->Instance != lidar1D.htim->Instance) return;
 800140c:	bf00      	nop
	}
}
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200008e4 	.word	0x200008e4
 8001418:	40014000 	.word	0x40014000

0800141c <MPU9250>:
#include "stdio.h"
#include "i2c.h"
#include "cmsis_os.h"
#include "math.h"

void MPU9250(I2C_HandleTypeDef *hi2c){
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	//configuration
	mpu9250.hi2c = hi2c;
 8001424:	4a38      	ldr	r2, [pc, #224]	; (8001508 <MPU9250+0xec>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6013      	str	r3, [r2, #0]
	mpu9250.Ascale = MPU9250_AFS_8G;
 800142a:	4b37      	ldr	r3, [pc, #220]	; (8001508 <MPU9250+0xec>)
 800142c:	2202      	movs	r2, #2
 800142e:	711a      	strb	r2, [r3, #4]
	mpu9250.Gscale = MPU9250_GFS_2000DPS;
 8001430:	4b35      	ldr	r3, [pc, #212]	; (8001508 <MPU9250+0xec>)
 8001432:	2203      	movs	r2, #3
 8001434:	715a      	strb	r2, [r3, #5]
	mpu9250.Mscale = MPU9250_MFS_14BITS;
 8001436:	4b34      	ldr	r3, [pc, #208]	; (8001508 <MPU9250+0xec>)
 8001438:	2200      	movs	r2, #0
 800143a:	719a      	strb	r2, [r3, #6]
	mpu9250.Mmode = MPU9250_M_100HZ;
 800143c:	4b32      	ldr	r3, [pc, #200]	; (8001508 <MPU9250+0xec>)
 800143e:	2206      	movs	r2, #6
 8001440:	71da      	strb	r2, [r3, #7]

	// set to 0
	mpu9250.aRes = 0; mpu9250.gRes = 0; mpu9250.mRes = 0;
 8001442:	4b31      	ldr	r3, [pc, #196]	; (8001508 <MPU9250+0xec>)
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	4b2f      	ldr	r3, [pc, #188]	; (8001508 <MPU9250+0xec>)
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <MPU9250+0xec>)
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
	memset(mpu9250.accelCount, 0, sizeof(mpu9250.accelCount));
 800145a:	2206      	movs	r2, #6
 800145c:	2100      	movs	r1, #0
 800145e:	482b      	ldr	r0, [pc, #172]	; (800150c <MPU9250+0xf0>)
 8001460:	f027 fdbd 	bl	8028fde <memset>
	memset(mpu9250.gyroCount, 0, sizeof(mpu9250.gyroCount));
 8001464:	2206      	movs	r2, #6
 8001466:	2100      	movs	r1, #0
 8001468:	4829      	ldr	r0, [pc, #164]	; (8001510 <MPU9250+0xf4>)
 800146a:	f027 fdb8 	bl	8028fde <memset>
	memset(mpu9250.magCount, 0, sizeof(mpu9250.magCount));
 800146e:	2206      	movs	r2, #6
 8001470:	2100      	movs	r1, #0
 8001472:	4828      	ldr	r0, [pc, #160]	; (8001514 <MPU9250+0xf8>)
 8001474:	f027 fdb3 	bl	8028fde <memset>
	mpu9250.tmpCount = 0;
 8001478:	4b23      	ldr	r3, [pc, #140]	; (8001508 <MPU9250+0xec>)
 800147a:	2200      	movs	r2, #0
 800147c:	84da      	strh	r2, [r3, #38]	; 0x26
	memset(mpu9250.magBias, 0, sizeof(mpu9250.magBias));
 800147e:	220c      	movs	r2, #12
 8001480:	2100      	movs	r1, #0
 8001482:	4825      	ldr	r0, [pc, #148]	; (8001518 <MPU9250+0xfc>)
 8001484:	f027 fdab 	bl	8028fde <memset>
	memset(mpu9250.accel, 0, sizeof(mpu9250.accel));
 8001488:	220c      	movs	r2, #12
 800148a:	2100      	movs	r1, #0
 800148c:	4823      	ldr	r0, [pc, #140]	; (800151c <MPU9250+0x100>)
 800148e:	f027 fda6 	bl	8028fde <memset>
	memset(mpu9250.gyro, 0, sizeof(mpu9250.gyro));
 8001492:	220c      	movs	r2, #12
 8001494:	2100      	movs	r1, #0
 8001496:	4822      	ldr	r0, [pc, #136]	; (8001520 <MPU9250+0x104>)
 8001498:	f027 fda1 	bl	8028fde <memset>
	memset(mpu9250.mag, 0, sizeof(mpu9250.mag));
 800149c:	220c      	movs	r2, #12
 800149e:	2100      	movs	r1, #0
 80014a0:	4820      	ldr	r0, [pc, #128]	; (8001524 <MPU9250+0x108>)
 80014a2:	f027 fd9c 	bl	8028fde <memset>
	mpu9250.tmp = 0;
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <MPU9250+0xec>)
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	665a      	str	r2, [r3, #100]	; 0x64
	memset(mpu9250.MPU9250_buffer, 0, sizeof(mpu9250.MPU9250_buffer));
 80014ae:	220e      	movs	r2, #14
 80014b0:	2100      	movs	r1, #0
 80014b2:	481d      	ldr	r0, [pc, #116]	; (8001528 <MPU9250+0x10c>)
 80014b4:	f027 fd93 	bl	8028fde <memset>
	memset(mpu9250.AK8963_buffer, 0, sizeof(mpu9250.AK8963_buffer));
 80014b8:	2207      	movs	r2, #7
 80014ba:	2100      	movs	r1, #0
 80014bc:	481b      	ldr	r0, [pc, #108]	; (800152c <MPU9250+0x110>)
 80014be:	f027 fd8e 	bl	8028fde <memset>
	mpu9250.AK8963_lastUpdate = 0;
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MPU9250+0xec>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	mpu9250.dmaFlag = MPU9250_dmaIdle;
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <MPU9250+0xec>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	mpu9250.magBias[0] = 280.0f;
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <MPU9250+0xec>)
 80014d4:	4a16      	ldr	r2, [pc, #88]	; (8001530 <MPU9250+0x114>)
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
	mpu9250.magBias[1] = 285.0f;
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <MPU9250+0xec>)
 80014da:	4a16      	ldr	r2, [pc, #88]	; (8001534 <MPU9250+0x118>)
 80014dc:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu9250.magBias[2] = 330.0f;
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <MPU9250+0xec>)
 80014e0:	4a15      	ldr	r2, [pc, #84]	; (8001538 <MPU9250+0x11c>)
 80014e2:	631a      	str	r2, [r3, #48]	; 0x30

	MPU9250_getMres();
 80014e4:	f000 fa22 	bl	800192c <MPU9250_getMres>
	MPU9250_getGres();
 80014e8:	f000 fa3c 	bl	8001964 <MPU9250_getGres>
	MPU9250_getAres();
 80014ec:	f000 fa6c 	bl	80019c8 <MPU9250_getAres>

	MPU9250_resetMPU9250();
 80014f0:	f000 fa98 	bl	8001a24 <MPU9250_resetMPU9250>
	MPU9250_calibrateMPU9250();
 80014f4:	f000 fb84 	bl	8001c00 <MPU9250_calibrateMPU9250>

	MPU9250_initMPU9250();	// calculate ay, ac bias
 80014f8:	f000 fb0e 	bl	8001b18 <MPU9250_initMPU9250>
	MPU9250_initAK8963();	//
 80014fc:	f000 fa9e 	bl	8001a3c <MPU9250_initAK8963>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	2000110c 	.word	0x2000110c
 800150c:	20001120 	.word	0x20001120
 8001510:	20001126 	.word	0x20001126
 8001514:	2000112c 	.word	0x2000112c
 8001518:	20001134 	.word	0x20001134
 800151c:	2000114c 	.word	0x2000114c
 8001520:	20001158 	.word	0x20001158
 8001524:	20001164 	.word	0x20001164
 8001528:	20001174 	.word	0x20001174
 800152c:	20001182 	.word	0x20001182
 8001530:	438c0000 	.word	0x438c0000
 8001534:	438e8000 	.word	0x438e8000
 8001538:	43a50000 	.word	0x43a50000

0800153c <MPU9250_updateDMA>:

void MPU9250_updateDMA(){
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af02      	add	r7, sp, #8
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MPU9250_updateDMA+0x38>)
 8001544:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10f      	bne.n	800156c <MPU9250_updateDMA+0x30>
	mpu9250.dmaFlag = MPU9250_dmaMPU9250;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MPU9250_updateDMA+0x38>)
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	HAL_I2C_Mem_Read_DMA(mpu9250.hi2c, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, mpu9250.MPU9250_buffer, 14);
 8001554:	4b07      	ldr	r3, [pc, #28]	; (8001574 <MPU9250_updateDMA+0x38>)
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	230e      	movs	r3, #14
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MPU9250_updateDMA+0x3c>)
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	2301      	movs	r3, #1
 8001562:	223b      	movs	r2, #59	; 0x3b
 8001564:	21d0      	movs	r1, #208	; 0xd0
 8001566:	f015 fbe1 	bl	8016d2c <HAL_I2C_Mem_Read_DMA>
 800156a:	e000      	b.n	800156e <MPU9250_updateDMA+0x32>
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 800156c:	bf00      	nop
}
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2000110c 	.word	0x2000110c
 8001578:	20001174 	.word	0x20001174

0800157c <MPU9250_i2cRxCpltCallback>:

uint8_t MPU9250_i2cRxCpltCallback(){
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af02      	add	r7, sp, #8
	static uint8_t res = 0;
	if(mpu9250.dmaFlag == MPU9250_dmaMPU9250){
 8001582:	4b24      	ldr	r3, [pc, #144]	; (8001614 <MPU9250_i2cRxCpltCallback+0x98>)
 8001584:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001588:	2b01      	cmp	r3, #1
 800158a:	d12a      	bne.n	80015e2 <MPU9250_i2cRxCpltCallback+0x66>
		if(MPU9250_calRawData() != MPU9250_Fail){
 800158c:	f000 f848 	bl	8001620 <MPU9250_calRawData>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d004      	beq.n	80015a0 <MPU9250_i2cRxCpltCallback+0x24>
			MPU9250_calCalibValue();
 8001596:	f000 f8c5 	bl	8001724 <MPU9250_calCalibValue>
			res = 1;
 800159a:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <MPU9250_i2cRxCpltCallback+0x9c>)
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
		}
		if(xTaskGetTickCount() - mpu9250.AK8963_lastUpdate > AK8963_UPDATE_TICK){
 80015a0:	f022 f9ac 	bl	80238fc <xTaskGetTickCount>
 80015a4:	4602      	mov	r2, r0
 80015a6:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <MPU9250_i2cRxCpltCallback+0x98>)
 80015a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b0a      	cmp	r3, #10
 80015b0:	d926      	bls.n	8001600 <MPU9250_i2cRxCpltCallback+0x84>
			mpu9250.dmaFlag = MPU9250_dmaAK8963;
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <MPU9250_i2cRxCpltCallback+0x98>)
 80015b4:	2202      	movs	r2, #2
 80015b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			HAL_I2C_Mem_Read_DMA(mpu9250.hi2c, AK8963_ADDRESS, AK8963_XOUT_L, 1, mpu9250.AK8963_buffer, 7);
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <MPU9250_i2cRxCpltCallback+0x98>)
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	2307      	movs	r3, #7
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <MPU9250_i2cRxCpltCallback+0xa0>)
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2301      	movs	r3, #1
 80015c8:	2203      	movs	r2, #3
 80015ca:	2118      	movs	r1, #24
 80015cc:	f015 fbae 	bl	8016d2c <HAL_I2C_Mem_Read_DMA>
			mpu9250.AK8963_lastUpdate = xTaskGetTickCount();
 80015d0:	f022 f994 	bl	80238fc <xTaskGetTickCount>
 80015d4:	4602      	mov	r2, r0
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <MPU9250_i2cRxCpltCallback+0x98>)
 80015d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			return res;
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MPU9250_i2cRxCpltCallback+0x9c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	e014      	b.n	800160c <MPU9250_i2cRxCpltCallback+0x90>
		}
	}
	else if(mpu9250.dmaFlag == MPU9250_dmaAK8963){
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <MPU9250_i2cRxCpltCallback+0x98>)
 80015e4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d109      	bne.n	8001600 <MPU9250_i2cRxCpltCallback+0x84>
		if(AK8963_calRawData() == MPU9250_Success){
 80015ec:	f000 f90c 	bl	8001808 <AK8963_calRawData>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d104      	bne.n	8001600 <MPU9250_i2cRxCpltCallback+0x84>
			AK8963_calCalibValue();
 80015f6:	f000 f945 	bl	8001884 <AK8963_calCalibValue>
			res = 2;
 80015fa:	4b07      	ldr	r3, [pc, #28]	; (8001618 <MPU9250_i2cRxCpltCallback+0x9c>)
 80015fc:	2202      	movs	r2, #2
 80015fe:	701a      	strb	r2, [r3, #0]
		}
	}
	mpu9250.dmaFlag = MPU9250_dmaIdle;
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <MPU9250_i2cRxCpltCallback+0x98>)
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	return res;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <MPU9250_i2cRxCpltCallback+0x9c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000110c 	.word	0x2000110c
 8001618:	200008f8 	.word	0x200008f8
 800161c:	20001182 	.word	0x20001182

08001620 <MPU9250_calRawData>:

MPU9250_Result_t MPU9250_calRawData(){
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
	// accel axis reverse
	mpu9250.accelCount[0] = -((((int16_t)mpu9250.MPU9250_buffer[0]) << 8) | mpu9250.MPU9250_buffer[1]);
 8001624:	4b3e      	ldr	r3, [pc, #248]	; (8001720 <MPU9250_calRawData+0x100>)
 8001626:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	b21a      	sxth	r2, r3
 800162e:	4b3c      	ldr	r3, [pc, #240]	; (8001720 <MPU9250_calRawData+0x100>)
 8001630:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001634:	b21b      	sxth	r3, r3
 8001636:	4313      	orrs	r3, r2
 8001638:	b21b      	sxth	r3, r3
 800163a:	b29b      	uxth	r3, r3
 800163c:	425b      	negs	r3, r3
 800163e:	b29b      	uxth	r3, r3
 8001640:	b21a      	sxth	r2, r3
 8001642:	4b37      	ldr	r3, [pc, #220]	; (8001720 <MPU9250_calRawData+0x100>)
 8001644:	829a      	strh	r2, [r3, #20]
	mpu9250.accelCount[1] = -((((int16_t)mpu9250.MPU9250_buffer[2]) << 8) | mpu9250.MPU9250_buffer[3]);
 8001646:	4b36      	ldr	r3, [pc, #216]	; (8001720 <MPU9250_calRawData+0x100>)
 8001648:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	b21a      	sxth	r2, r3
 8001650:	4b33      	ldr	r3, [pc, #204]	; (8001720 <MPU9250_calRawData+0x100>)
 8001652:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001656:	b21b      	sxth	r3, r3
 8001658:	4313      	orrs	r3, r2
 800165a:	b21b      	sxth	r3, r3
 800165c:	b29b      	uxth	r3, r3
 800165e:	425b      	negs	r3, r3
 8001660:	b29b      	uxth	r3, r3
 8001662:	b21a      	sxth	r2, r3
 8001664:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <MPU9250_calRawData+0x100>)
 8001666:	82da      	strh	r2, [r3, #22]
	mpu9250.accelCount[2] = -((((int16_t)mpu9250.MPU9250_buffer[4]) << 8) | mpu9250.MPU9250_buffer[5]);
 8001668:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <MPU9250_calRawData+0x100>)
 800166a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	b21a      	sxth	r2, r3
 8001672:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <MPU9250_calRawData+0x100>)
 8001674:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8001678:	b21b      	sxth	r3, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	b21b      	sxth	r3, r3
 800167e:	b29b      	uxth	r3, r3
 8001680:	425b      	negs	r3, r3
 8001682:	b29b      	uxth	r3, r3
 8001684:	b21a      	sxth	r2, r3
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <MPU9250_calRawData+0x100>)
 8001688:	831a      	strh	r2, [r3, #24]
	mpu9250.tmpCount = (int16_t) (mpu9250.MPU9250_buffer[6] << 8 | mpu9250.MPU9250_buffer[7]);
 800168a:	4b25      	ldr	r3, [pc, #148]	; (8001720 <MPU9250_calRawData+0x100>)
 800168c:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21a      	sxth	r2, r3
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <MPU9250_calRawData+0x100>)
 8001696:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800169a:	b21b      	sxth	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	b21a      	sxth	r2, r3
 80016a0:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <MPU9250_calRawData+0x100>)
 80016a2:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu9250.gyroCount[0] = (((int16_t)mpu9250.MPU9250_buffer[8]) << 8) | mpu9250.MPU9250_buffer[9];
 80016a4:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <MPU9250_calRawData+0x100>)
 80016a6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	b21a      	sxth	r2, r3
 80016ae:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <MPU9250_calRawData+0x100>)
 80016b0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b21a      	sxth	r2, r3
 80016ba:	4b19      	ldr	r3, [pc, #100]	; (8001720 <MPU9250_calRawData+0x100>)
 80016bc:	835a      	strh	r2, [r3, #26]
	mpu9250.gyroCount[1] = (((int16_t)mpu9250.MPU9250_buffer[10]) << 8) | mpu9250.MPU9250_buffer[11];
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <MPU9250_calRawData+0x100>)
 80016c0:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	b21a      	sxth	r2, r3
 80016c8:	4b15      	ldr	r3, [pc, #84]	; (8001720 <MPU9250_calRawData+0x100>)
 80016ca:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b21a      	sxth	r2, r3
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <MPU9250_calRawData+0x100>)
 80016d6:	839a      	strh	r2, [r3, #28]
	mpu9250.gyroCount[2] = (((int16_t)mpu9250.MPU9250_buffer[12]) << 8) | mpu9250.MPU9250_buffer[13];
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MPU9250_calRawData+0x100>)
 80016da:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	b21a      	sxth	r2, r3
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <MPU9250_calRawData+0x100>)
 80016e4:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b21a      	sxth	r2, r3
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MPU9250_calRawData+0x100>)
 80016f0:	83da      	strh	r2, [r3, #30]

	if(mpu9250.accelCount[0] == 0 && mpu9250.accelCount[1] == 0 && mpu9250.accelCount[2] == 0) return MPU9250_Fail;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <MPU9250_calRawData+0x100>)
 80016f4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10b      	bne.n	8001714 <MPU9250_calRawData+0xf4>
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <MPU9250_calRawData+0x100>)
 80016fe:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d106      	bne.n	8001714 <MPU9250_calRawData+0xf4>
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MPU9250_calRawData+0x100>)
 8001708:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <MPU9250_calRawData+0xf4>
 8001710:	2300      	movs	r3, #0
 8001712:	e000      	b.n	8001716 <MPU9250_calRawData+0xf6>

	return MPU9250_Success;
 8001714:	2301      	movs	r3, #1
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	2000110c 	.word	0x2000110c

08001724 <MPU9250_calCalibValue>:

void MPU9250_calCalibValue(){
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
//	// Calculate the gyro value into actual degrees per second
//	MPU9250_g[0] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[0]*MPU9250_gRes - MPU9250_gyroBias[0]);  // get actual gyro value, this depends on scale being set
//	MPU9250_g[1] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[1]*MPU9250_gRes - MPU9250_gyroBias[1]);
//	MPU9250_g[2] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[2]*MPU9250_gRes - MPU9250_gyroBias[2]);

	mpu9250.accel[0] = ((float)mpu9250.accelCount[0]*mpu9250.aRes);  // get actual g value, this depends on scale being set
 8001728:	4b35      	ldr	r3, [pc, #212]	; (8001800 <MPU9250_calCalibValue+0xdc>)
 800172a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800172e:	ee07 3a90 	vmov	s15, r3
 8001732:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001736:	4b32      	ldr	r3, [pc, #200]	; (8001800 <MPU9250_calCalibValue+0xdc>)
 8001738:	edd3 7a02 	vldr	s15, [r3, #8]
 800173c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001740:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <MPU9250_calCalibValue+0xdc>)
 8001742:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	mpu9250.accel[1] = ((float)mpu9250.accelCount[1]*mpu9250.aRes);
 8001746:	4b2e      	ldr	r3, [pc, #184]	; (8001800 <MPU9250_calCalibValue+0xdc>)
 8001748:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001754:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <MPU9250_calCalibValue+0xdc>)
 8001756:	edd3 7a02 	vldr	s15, [r3, #8]
 800175a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175e:	4b28      	ldr	r3, [pc, #160]	; (8001800 <MPU9250_calCalibValue+0xdc>)
 8001760:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	mpu9250.accel[2] = ((float)mpu9250.accelCount[2]*mpu9250.aRes);
 8001764:	4b26      	ldr	r3, [pc, #152]	; (8001800 <MPU9250_calCalibValue+0xdc>)
 8001766:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001772:	4b23      	ldr	r3, [pc, #140]	; (8001800 <MPU9250_calCalibValue+0xdc>)
 8001774:	edd3 7a02 	vldr	s15, [r3, #8]
 8001778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177c:	4b20      	ldr	r3, [pc, #128]	; (8001800 <MPU9250_calCalibValue+0xdc>)
 800177e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	// Calculate the gyro value into actual degrees per second
	mpu9250.gyro[0] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[0]*mpu9250.gRes);  // get actual gyro value, this depends on scale being set
 8001782:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <MPU9250_calCalibValue+0xdc>)
 8001784:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001788:	ee07 3a90 	vmov	s15, r3
 800178c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <MPU9250_calCalibValue+0xdc>)
 8001792:	edd3 7a03 	vldr	s15, [r3, #12]
 8001796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001804 <MPU9250_calCalibValue+0xe0>
 800179e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <MPU9250_calCalibValue+0xdc>)
 80017a4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	mpu9250.gyro[1] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[1]*mpu9250.gRes);
 80017a8:	4b15      	ldr	r3, [pc, #84]	; (8001800 <MPU9250_calCalibValue+0xdc>)
 80017aa:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80017ae:	ee07 3a90 	vmov	s15, r3
 80017b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <MPU9250_calCalibValue+0xdc>)
 80017b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80017bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001804 <MPU9250_calCalibValue+0xe0>
 80017c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <MPU9250_calCalibValue+0xdc>)
 80017ca:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu9250.gyro[2] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[2]*mpu9250.gRes);
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <MPU9250_calCalibValue+0xdc>)
 80017d0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <MPU9250_calCalibValue+0xdc>)
 80017de:	edd3 7a03 	vldr	s15, [r3, #12]
 80017e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001804 <MPU9250_calCalibValue+0xe0>
 80017ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <MPU9250_calCalibValue+0xdc>)
 80017f0:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	2000110c 	.word	0x2000110c
 8001804:	3c8efa35 	.word	0x3c8efa35

08001808 <AK8963_calRawData>:

MPU9250_Result_t AK8963_calRawData(){
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
	if(mpu9250.AK8963_buffer[6] & 0x08) return MPU9250_Fail; // Check if magnetic sensor overflow set, if not then report data
 800180c:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <AK8963_calRawData+0x78>)
 800180e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <AK8963_calRawData+0x16>
 800181a:	2300      	movs	r3, #0
 800181c:	e02b      	b.n	8001876 <AK8963_calRawData+0x6e>

	mpu9250.magCount[1] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[1] << 8) | mpu9250.AK8963_buffer[0]);  // Turn the MSB and LSB into a signed 16-bit value
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <AK8963_calRawData+0x78>)
 8001820:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001824:	021b      	lsls	r3, r3, #8
 8001826:	b21a      	sxth	r2, r3
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <AK8963_calRawData+0x78>)
 800182a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800182e:	b21b      	sxth	r3, r3
 8001830:	4313      	orrs	r3, r2
 8001832:	b21a      	sxth	r2, r3
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <AK8963_calRawData+0x78>)
 8001836:	845a      	strh	r2, [r3, #34]	; 0x22
	mpu9250.magCount[0] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[3] << 8) | mpu9250.AK8963_buffer[2]);  // Data stored as little Endian
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <AK8963_calRawData+0x78>)
 800183a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	b21a      	sxth	r2, r3
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <AK8963_calRawData+0x78>)
 8001844:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001848:	b21b      	sxth	r3, r3
 800184a:	4313      	orrs	r3, r2
 800184c:	b21a      	sxth	r2, r3
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <AK8963_calRawData+0x78>)
 8001850:	841a      	strh	r2, [r3, #32]
	mpu9250.magCount[2] = -(int16_t)(((int16_t)mpu9250.AK8963_buffer[5] << 8) | mpu9250.AK8963_buffer[4]);
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <AK8963_calRawData+0x78>)
 8001854:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	b21a      	sxth	r2, r3
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <AK8963_calRawData+0x78>)
 800185e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001862:	b21b      	sxth	r3, r3
 8001864:	4313      	orrs	r3, r2
 8001866:	b21b      	sxth	r3, r3
 8001868:	b29b      	uxth	r3, r3
 800186a:	425b      	negs	r3, r3
 800186c:	b29b      	uxth	r3, r3
 800186e:	b21a      	sxth	r2, r3
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <AK8963_calRawData+0x78>)
 8001872:	849a      	strh	r2, [r3, #36]	; 0x24
	return MPU9250_Success;
 8001874:	2301      	movs	r3, #1
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	2000110c 	.word	0x2000110c

08001884 <AK8963_calCalibValue>:

void AK8963_calCalibValue(){
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
	// mag have different axis with acc, gyr -> ax = my, ay = mx, az = -mz
    mpu9250.mag[0] = (float)mpu9250.magCount[0]*mpu9250.mRes*mpu9250.magCalibration[0] - mpu9250.magBias[1];  // get actual magnetometer value, this depends on scale being set
 8001888:	4b27      	ldr	r3, [pc, #156]	; (8001928 <AK8963_calCalibValue+0xa4>)
 800188a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800188e:	ee07 3a90 	vmov	s15, r3
 8001892:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001896:	4b24      	ldr	r3, [pc, #144]	; (8001928 <AK8963_calCalibValue+0xa4>)
 8001898:	edd3 7a04 	vldr	s15, [r3, #16]
 800189c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018a0:	4b21      	ldr	r3, [pc, #132]	; (8001928 <AK8963_calCalibValue+0xa4>)
 80018a2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80018a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018aa:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <AK8963_calCalibValue+0xa4>)
 80018ac:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80018b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b4:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <AK8963_calCalibValue+0xa4>)
 80018b6:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    mpu9250.mag[1] = (float)mpu9250.magCount[1]*mpu9250.mRes*mpu9250.magCalibration[1] - mpu9250.magBias[0];
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <AK8963_calCalibValue+0xa4>)
 80018bc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80018c0:	ee07 3a90 	vmov	s15, r3
 80018c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018c8:	4b17      	ldr	r3, [pc, #92]	; (8001928 <AK8963_calCalibValue+0xa4>)
 80018ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80018ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <AK8963_calCalibValue+0xa4>)
 80018d4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80018d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <AK8963_calCalibValue+0xa4>)
 80018de:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <AK8963_calCalibValue+0xa4>)
 80018e8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    mpu9250.mag[2] = ((float)mpu9250.magCount[2]*mpu9250.mRes*mpu9250.magCalibration[2] - mpu9250.magBias[2]);
 80018ec:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <AK8963_calCalibValue+0xa4>)
 80018ee:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <AK8963_calCalibValue+0xa4>)
 80018fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001900:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <AK8963_calCalibValue+0xa4>)
 8001906:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800190a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <AK8963_calCalibValue+0xa4>)
 8001910:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <AK8963_calCalibValue+0xa4>)
 800191a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	2000110c 	.word	0x2000110c

0800192c <MPU9250_getMres>:

void MPU9250_getMres() {
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
	switch (mpu9250.Mscale)
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <MPU9250_getMres+0x2c>)
 8001932:	799b      	ldrb	r3, [r3, #6]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <MPU9250_getMres+0x12>
 8001938:	2b01      	cmp	r3, #1
 800193a:	d004      	beq.n	8001946 <MPU9250_getMres+0x1a>
		  break;
	case MPU9250_MFS_16BITS:
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
		  break;
	}
}
 800193c:	e007      	b.n	800194e <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <MPU9250_getMres+0x2c>)
 8001940:	4a06      	ldr	r2, [pc, #24]	; (800195c <MPU9250_getMres+0x30>)
 8001942:	611a      	str	r2, [r3, #16]
		  break;
 8001944:	e003      	b.n	800194e <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <MPU9250_getMres+0x2c>)
 8001948:	4a05      	ldr	r2, [pc, #20]	; (8001960 <MPU9250_getMres+0x34>)
 800194a:	611a      	str	r2, [r3, #16]
		  break;
 800194c:	bf00      	nop
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	2000110c 	.word	0x2000110c
 800195c:	40bfebff 	.word	0x40bfebff
 8001960:	3fbfebff 	.word	0x3fbfebff

08001964 <MPU9250_getGres>:

void MPU9250_getGres() {
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  switch (mpu9250.Gscale)
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <MPU9250_getGres+0x50>)
 800196a:	795b      	ldrb	r3, [r3, #5]
 800196c:	2b03      	cmp	r3, #3
 800196e:	d81b      	bhi.n	80019a8 <MPU9250_getGres+0x44>
 8001970:	a201      	add	r2, pc, #4	; (adr r2, 8001978 <MPU9250_getGres+0x14>)
 8001972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001976:	bf00      	nop
 8001978:	08001989 	.word	0x08001989
 800197c:	08001991 	.word	0x08001991
 8001980:	08001999 	.word	0x08001999
 8001984:	080019a1 	.word	0x080019a1
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_GFS_250DPS:
    	  mpu9250.gRes = 250.0/32768.0;
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <MPU9250_getGres+0x50>)
 800198a:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <MPU9250_getGres+0x54>)
 800198c:	60da      	str	r2, [r3, #12]
          break;
 800198e:	e00b      	b.n	80019a8 <MPU9250_getGres+0x44>
    case MPU9250_GFS_500DPS:
    	  mpu9250.gRes = 500.0/32768.0;
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <MPU9250_getGres+0x50>)
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <MPU9250_getGres+0x58>)
 8001994:	60da      	str	r2, [r3, #12]
          break;
 8001996:	e007      	b.n	80019a8 <MPU9250_getGres+0x44>
    case MPU9250_GFS_1000DPS:
    	  mpu9250.gRes = 1000.0/32768.0;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MPU9250_getGres+0x50>)
 800199a:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <MPU9250_getGres+0x5c>)
 800199c:	60da      	str	r2, [r3, #12]
          break;
 800199e:	e003      	b.n	80019a8 <MPU9250_getGres+0x44>
    case MPU9250_GFS_2000DPS:
    	  mpu9250.gRes = 2000.0/32768.0;
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <MPU9250_getGres+0x50>)
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <MPU9250_getGres+0x60>)
 80019a4:	60da      	str	r2, [r3, #12]
          break;
 80019a6:	bf00      	nop
  }
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	2000110c 	.word	0x2000110c
 80019b8:	3bfa0000 	.word	0x3bfa0000
 80019bc:	3c7a0000 	.word	0x3c7a0000
 80019c0:	3cfa0000 	.word	0x3cfa0000
 80019c4:	3d7a0000 	.word	0x3d7a0000

080019c8 <MPU9250_getAres>:


void MPU9250_getAres() {
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  switch (mpu9250.Ascale)
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MPU9250_getAres+0x58>)
 80019ce:	791b      	ldrb	r3, [r3, #4]
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d81f      	bhi.n	8001a14 <MPU9250_getAres+0x4c>
 80019d4:	a201      	add	r2, pc, #4	; (adr r2, 80019dc <MPU9250_getAres+0x14>)
 80019d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019da:	bf00      	nop
 80019dc:	080019ed 	.word	0x080019ed
 80019e0:	080019f7 	.word	0x080019f7
 80019e4:	08001a01 	.word	0x08001a01
 80019e8:	08001a0b 	.word	0x08001a0b
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_AFS_2G:
    	  mpu9250.aRes = 2.0/32768.0;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MPU9250_getAres+0x58>)
 80019ee:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80019f2:	609a      	str	r2, [r3, #8]
          break;
 80019f4:	e00e      	b.n	8001a14 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_4G:
    	  mpu9250.aRes = 4.0/32768.0;
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <MPU9250_getAres+0x58>)
 80019f8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80019fc:	609a      	str	r2, [r3, #8]
          break;
 80019fe:	e009      	b.n	8001a14 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_8G:
    	  mpu9250.aRes = 8.0/32768.0;
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <MPU9250_getAres+0x58>)
 8001a02:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001a06:	609a      	str	r2, [r3, #8]
          break;
 8001a08:	e004      	b.n	8001a14 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_16G:
    	  mpu9250.aRes = 16.0/32768.0;
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <MPU9250_getAres+0x58>)
 8001a0c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001a10:	609a      	str	r2, [r3, #8]
          break;
 8001a12:	bf00      	nop
  }
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	2000110c 	.word	0x2000110c

08001a24 <MPU9250_resetMPU9250>:
  mpu9250.tmpCount = (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]) ;  // Turn the MSB and LSB into a 16-bit value
  return mpu9250.tmpCount;
}


void MPU9250_resetMPU9250() {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
    // reset device
    MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001a28:	2280      	movs	r2, #128	; 0x80
 8001a2a:	216b      	movs	r1, #107	; 0x6b
 8001a2c:	20d0      	movs	r0, #208	; 0xd0
 8001a2e:	f000 fb3f 	bl	80020b0 <MPU9250_writeByte>
    HAL_Delay(10);
 8001a32:	200a      	movs	r0, #10
 8001a34:	f013 fe02 	bl	801563c <HAL_Delay>
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <MPU9250_initAK8963>:

void MPU9250_initAK8963()
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001a42:	2200      	movs	r2, #0
 8001a44:	210a      	movs	r1, #10
 8001a46:	2018      	movs	r0, #24
 8001a48:	f000 fb32 	bl	80020b0 <MPU9250_writeByte>
	HAL_Delay(10);
 8001a4c:	200a      	movs	r0, #10
 8001a4e:	f013 fdf5 	bl	801563c <HAL_Delay>
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8001a52:	220f      	movs	r2, #15
 8001a54:	210a      	movs	r1, #10
 8001a56:	2018      	movs	r0, #24
 8001a58:	f000 fb2a 	bl	80020b0 <MPU9250_writeByte>
	HAL_Delay(10);
 8001a5c:	200a      	movs	r0, #10
 8001a5e:	f013 fded 	bl	801563c <HAL_Delay>
	MPU9250_readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	2203      	movs	r2, #3
 8001a66:	2110      	movs	r1, #16
 8001a68:	2018      	movs	r0, #24
 8001a6a:	f000 fb3f 	bl	80020ec <MPU9250_readBytes>

	// set axis to accel axis
	mpu9250.magCalibration[1] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8001a6e:	793b      	ldrb	r3, [r7, #4]
 8001a70:	3b80      	subs	r3, #128	; 0x80
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a7a:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001b10 <MPU9250_initAK8963+0xd4>
 8001a7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a8a:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <MPU9250_initAK8963+0xd8>)
 8001a8c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	mpu9250.magCalibration[0] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8001a90:	797b      	ldrb	r3, [r7, #5]
 8001a92:	3b80      	subs	r3, #128	; 0x80
 8001a94:	ee07 3a90 	vmov	s15, r3
 8001a98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a9c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001b10 <MPU9250_initAK8963+0xd4>
 8001aa0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001aa8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <MPU9250_initAK8963+0xd8>)
 8001aae:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	mpu9250.magCalibration[2] =  ((float)(rawData[2] - 128)/256.0f + 1.0f);
 8001ab2:	79bb      	ldrb	r3, [r7, #6]
 8001ab4:	3b80      	subs	r3, #128	; 0x80
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001abe:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001b10 <MPU9250_initAK8963+0xd4>
 8001ac2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001aca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <MPU9250_initAK8963+0xd8>)
 8001ad0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	210a      	movs	r1, #10
 8001ad8:	2018      	movs	r0, #24
 8001ada:	f000 fae9 	bl	80020b0 <MPU9250_writeByte>
	HAL_Delay(10);
 8001ade:	200a      	movs	r0, #10
 8001ae0:	f013 fdac 	bl	801563c <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, mpu9250.Mscale << 4 | mpu9250.Mmode); // Set magnetometer data resolution and sample ODR
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <MPU9250_initAK8963+0xd8>)
 8001ae6:	799b      	ldrb	r3, [r3, #6]
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	b25a      	sxtb	r2, r3
 8001aec:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <MPU9250_initAK8963+0xd8>)
 8001aee:	79db      	ldrb	r3, [r3, #7]
 8001af0:	b25b      	sxtb	r3, r3
 8001af2:	4313      	orrs	r3, r2
 8001af4:	b25b      	sxtb	r3, r3
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	210a      	movs	r1, #10
 8001afc:	2018      	movs	r0, #24
 8001afe:	f000 fad7 	bl	80020b0 <MPU9250_writeByte>
	HAL_Delay(10);
 8001b02:	200a      	movs	r0, #10
 8001b04:	f013 fd9a 	bl	801563c <HAL_Delay>
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	43800000 	.word	0x43800000
 8001b14:	2000110c 	.word	0x2000110c

08001b18 <MPU9250_initMPU9250>:


void MPU9250_initMPU9250()
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 // Initialize MPU9250 device
 // wake up device
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 8001b1e:	2200      	movs	r2, #0
 8001b20:	216b      	movs	r1, #107	; 0x6b
 8001b22:	20d0      	movs	r0, #208	; 0xd0
 8001b24:	f000 fac4 	bl	80020b0 <MPU9250_writeByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8001b28:	2064      	movs	r0, #100	; 0x64
 8001b2a:	f013 fd87 	bl	801563c <HAL_Delay>

 // get stable time source
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8001b2e:	2201      	movs	r2, #1
 8001b30:	216b      	movs	r1, #107	; 0x6b
 8001b32:	20d0      	movs	r0, #208	; 0xd0
 8001b34:	f000 fabc 	bl	80020b0 <MPU9250_writeByte>

 // Configure Gyro and Accelerometer
 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 8001b38:	2203      	movs	r2, #3
 8001b3a:	211a      	movs	r1, #26
 8001b3c:	20d0      	movs	r0, #208	; 0xd0
 8001b3e:	f000 fab7 	bl	80020b0 <MPU9250_writeByte>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8001b42:	2204      	movs	r2, #4
 8001b44:	2119      	movs	r1, #25
 8001b46:	20d0      	movs	r0, #208	; 0xd0
 8001b48:	f000 fab2 	bl	80020b0 <MPU9250_writeByte>

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c = MPU9250_readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 8001b4c:	211b      	movs	r1, #27
 8001b4e:	20d0      	movs	r0, #208	; 0xd0
 8001b50:	f000 faee 	bl	8002130 <MPU9250_readByte>
 8001b54:	4603      	mov	r3, r0
 8001b56:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	f023 0302 	bic.w	r3, r3, #2
 8001b5e:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x18; // Clear AFS bits [4:3]
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	f023 0318 	bic.w	r3, r3, #24
 8001b66:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Gscale << 3; // Set full scale range for the gyro
 8001b68:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <MPU9250_initMPU9250+0xe4>)
 8001b6a:	795b      	ldrb	r3, [r3, #5]
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	b25a      	sxtb	r2, r3
 8001b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b25b      	sxtb	r3, r3
 8001b78:	71fb      	strb	r3, [r7, #7]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing i
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to regts inverse to bits 1:0 of GYRO_CONFIGister
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	211b      	movs	r1, #27
 8001b80:	20d0      	movs	r0, #208	; 0xd0
 8001b82:	f000 fa95 	bl	80020b0 <MPU9250_writeByte>

 // Set accelerometer full-scale range configuration
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 8001b86:	211c      	movs	r1, #28
 8001b88:	20d0      	movs	r0, #208	; 0xd0
 8001b8a:	f000 fad1 	bl	8002130 <MPU9250_readByte>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	f023 0318 	bic.w	r3, r3, #24
 8001b98:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Ascale << 3; // Set full scale range for the accelerometer
 8001b9a:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <MPU9250_initMPU9250+0xe4>)
 8001b9c:	791b      	ldrb	r3, [r3, #4]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	b25a      	sxtb	r2, r3
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	b25b      	sxtb	r3, r3
 8001baa:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	211c      	movs	r1, #28
 8001bb2:	20d0      	movs	r0, #208	; 0xd0
 8001bb4:	f000 fa7c 	bl	80020b0 <MPU9250_writeByte>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 8001bb8:	211d      	movs	r1, #29
 8001bba:	20d0      	movs	r0, #208	; 0xd0
 8001bbc:	f000 fab8 	bl	8002130 <MPU9250_readByte>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f023 030f 	bic.w	r3, r3, #15
 8001bca:	71fb      	strb	r3, [r7, #7]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f043 0303 	orr.w	r3, r3, #3
 8001bd2:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	211d      	movs	r1, #29
 8001bda:	20d0      	movs	r0, #208	; 0xd0
 8001bdc:	f000 fa68 	bl	80020b0 <MPU9250_writeByte>
 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
  MPU9250_writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 8001be0:	2222      	movs	r2, #34	; 0x22
 8001be2:	2137      	movs	r1, #55	; 0x37
 8001be4:	20d0      	movs	r0, #208	; 0xd0
 8001be6:	f000 fa63 	bl	80020b0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8001bea:	2201      	movs	r2, #1
 8001bec:	2138      	movs	r1, #56	; 0x38
 8001bee:	20d0      	movs	r0, #208	; 0xd0
 8001bf0:	f000 fa5e 	bl	80020b0 <MPU9250_writeByte>
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	2000110c 	.word	0x2000110c

08001c00 <MPU9250_calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250_calibrateMPU9250()
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b094      	sub	sp, #80	; 0x50
 8001c04:	af00      	add	r7, sp, #0
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8001c06:	2300      	movs	r3, #0
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c0e:	2300      	movs	r3, #0
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
 8001c12:	2300      	movs	r3, #0
 8001c14:	623b      	str	r3, [r7, #32]
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28

// reset device, reset all registers, clear gyro and accelerometer bias registers
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	216b      	movs	r1, #107	; 0x6b
 8001c22:	20d0      	movs	r0, #208	; 0xd0
 8001c24:	f000 fa44 	bl	80020b0 <MPU9250_writeByte>
  HAL_Delay(100);
 8001c28:	2064      	movs	r0, #100	; 0x64
 8001c2a:	f013 fd07 	bl	801563c <HAL_Delay>

// get stable time source
// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	216b      	movs	r1, #107	; 0x6b
 8001c32:	20d0      	movs	r0, #208	; 0xd0
 8001c34:	f000 fa3c 	bl	80020b0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	216c      	movs	r1, #108	; 0x6c
 8001c3c:	20d0      	movs	r0, #208	; 0xd0
 8001c3e:	f000 fa37 	bl	80020b0 <MPU9250_writeByte>
  HAL_Delay(200);
 8001c42:	20c8      	movs	r0, #200	; 0xc8
 8001c44:	f013 fcfa 	bl	801563c <HAL_Delay>

// Configure device for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2138      	movs	r1, #56	; 0x38
 8001c4c:	20d0      	movs	r0, #208	; 0xd0
 8001c4e:	f000 fa2f 	bl	80020b0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 8001c52:	2200      	movs	r2, #0
 8001c54:	2123      	movs	r1, #35	; 0x23
 8001c56:	20d0      	movs	r0, #208	; 0xd0
 8001c58:	f000 fa2a 	bl	80020b0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	216b      	movs	r1, #107	; 0x6b
 8001c60:	20d0      	movs	r0, #208	; 0xd0
 8001c62:	f000 fa25 	bl	80020b0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8001c66:	2200      	movs	r2, #0
 8001c68:	2124      	movs	r1, #36	; 0x24
 8001c6a:	20d0      	movs	r0, #208	; 0xd0
 8001c6c:	f000 fa20 	bl	80020b0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8001c70:	2200      	movs	r2, #0
 8001c72:	216a      	movs	r1, #106	; 0x6a
 8001c74:	20d0      	movs	r0, #208	; 0xd0
 8001c76:	f000 fa1b 	bl	80020b0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	216a      	movs	r1, #106	; 0x6a
 8001c7e:	20d0      	movs	r0, #208	; 0xd0
 8001c80:	f000 fa16 	bl	80020b0 <MPU9250_writeByte>
  HAL_Delay(15);
 8001c84:	200f      	movs	r0, #15
 8001c86:	f013 fcd9 	bl	801563c <HAL_Delay>

// Configure MPU9250 gyro and accelerometer for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	211a      	movs	r1, #26
 8001c8e:	20d0      	movs	r0, #208	; 0xd0
 8001c90:	f000 fa0e 	bl	80020b0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8001c94:	2200      	movs	r2, #0
 8001c96:	2119      	movs	r1, #25
 8001c98:	20d0      	movs	r0, #208	; 0xd0
 8001c9a:	f000 fa09 	bl	80020b0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	211b      	movs	r1, #27
 8001ca2:	20d0      	movs	r0, #208	; 0xd0
 8001ca4:	f000 fa04 	bl	80020b0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001ca8:	2200      	movs	r2, #0
 8001caa:	211c      	movs	r1, #28
 8001cac:	20d0      	movs	r0, #208	; 0xd0
 8001cae:	f000 f9ff 	bl	80020b0 <MPU9250_writeByte>

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 8001cb2:	2240      	movs	r2, #64	; 0x40
 8001cb4:	216a      	movs	r1, #106	; 0x6a
 8001cb6:	20d0      	movs	r0, #208	; 0xd0
 8001cb8:	f000 f9fa 	bl	80020b0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8001cbc:	2278      	movs	r2, #120	; 0x78
 8001cbe:	2123      	movs	r1, #35	; 0x23
 8001cc0:	20d0      	movs	r0, #208	; 0xd0
 8001cc2:	f000 f9f5 	bl	80020b0 <MPU9250_writeByte>
  HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8001cc6:	2028      	movs	r0, #40	; 0x28
 8001cc8:	f013 fcb8 	bl	801563c <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2123      	movs	r1, #35	; 0x23
 8001cd0:	20d0      	movs	r0, #208	; 0xd0
 8001cd2:	f000 f9ed 	bl	80020b0 <MPU9250_writeByte>
  MPU9250_readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8001cd6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cda:	2202      	movs	r2, #2
 8001cdc:	2172      	movs	r1, #114	; 0x72
 8001cde:	20d0      	movs	r0, #208	; 0xd0
 8001ce0:	f000 fa04 	bl	80020ec <MPU9250_readBytes>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8001ce4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	b21a      	sxth	r2, r3
 8001cec:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001cf0:	b21b      	sxth	r3, r3
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	b21b      	sxth	r3, r3
 8001cf6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8001cfa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001cfe:	4ab3      	ldr	r2, [pc, #716]	; (8001fcc <MPU9250_calibrateMPU9250+0x3cc>)
 8001d00:	fba2 2303 	umull	r2, r3, r2, r3
 8001d04:	08db      	lsrs	r3, r3, #3
 8001d06:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

  for (ii = 0; ii < packet_count; ii++) {
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001d10:	e071      	b.n	8001df6 <MPU9250_calibrateMPU9250+0x1f6>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8001d12:	2300      	movs	r3, #0
 8001d14:	813b      	strh	r3, [r7, #8]
 8001d16:	2300      	movs	r3, #0
 8001d18:	817b      	strh	r3, [r7, #10]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	81bb      	strh	r3, [r7, #12]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	803b      	strh	r3, [r7, #0]
 8001d22:	2300      	movs	r3, #0
 8001d24:	807b      	strh	r3, [r7, #2]
 8001d26:	2300      	movs	r3, #0
 8001d28:	80bb      	strh	r3, [r7, #4]
    MPU9250_readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 8001d2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d2e:	220c      	movs	r2, #12
 8001d30:	2174      	movs	r1, #116	; 0x74
 8001d32:	20d0      	movs	r0, #208	; 0xd0
 8001d34:	f000 f9da 	bl	80020ec <MPU9250_readBytes>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8001d38:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	b21a      	sxth	r2, r3
 8001d40:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	4313      	orrs	r3, r2
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	813b      	strh	r3, [r7, #8]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8001d4c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	b21a      	sxth	r2, r3
 8001d54:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	b21b      	sxth	r3, r3
 8001d5e:	817b      	strh	r3, [r7, #10]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8001d60:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	b21a      	sxth	r2, r3
 8001d68:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	81bb      	strh	r3, [r7, #12]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8001d74:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001d78:	021b      	lsls	r3, r3, #8
 8001d7a:	b21a      	sxth	r2, r3
 8001d7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d80:	b21b      	sxth	r3, r3
 8001d82:	4313      	orrs	r3, r2
 8001d84:	b21b      	sxth	r3, r3
 8001d86:	803b      	strh	r3, [r7, #0]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8001d88:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	b21a      	sxth	r2, r3
 8001d90:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001d94:	b21b      	sxth	r3, r3
 8001d96:	4313      	orrs	r3, r2
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	807b      	strh	r3, [r7, #2]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001d9c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	b21a      	sxth	r2, r3
 8001da4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	4313      	orrs	r3, r2
 8001dac:	b21b      	sxth	r3, r3
 8001dae:	80bb      	strh	r3, [r7, #4]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001db6:	4413      	add	r3, r2
 8001db8:	623b      	str	r3, [r7, #32]
    accel_bias[1] += (int32_t) accel_temp[1];
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] += (int32_t) accel_temp[2];
 8001dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001dca:	4413      	add	r3, r2
 8001dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 8001dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd0:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 8001dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dda:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001dde:	4413      	add	r3, r2
 8001de0:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8001de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	637b      	str	r3, [r7, #52]	; 0x34
  for (ii = 0; ii < packet_count; ii++) {
 8001dec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001df0:	3301      	adds	r3, #1
 8001df2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001df6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001dfa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d387      	bcc.n	8001d12 <MPU9250_calibrateMPU9250+0x112>

  }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8001e02:	6a3a      	ldr	r2, [r7, #32]
 8001e04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e08:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e0c:	623b      	str	r3, [r7, #32]
    accel_bias[1] /= (int32_t) packet_count;
 8001e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e14:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] /= (int32_t) packet_count;
 8001e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e20:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  /= (int32_t) packet_count;
 8001e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  /= (int32_t) packet_count;
 8001e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e38:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  /= (int32_t) packet_count;
 8001e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e44:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e48:	637b      	str	r3, [r7, #52]	; 0x34

    uint16_t accelsensitivity = (uint16_t)(1/mpu9250.aRes);
 8001e4a:	4b61      	ldr	r3, [pc, #388]	; (8001fd0 <MPU9250_calibrateMPU9250+0x3d0>)
 8001e4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e5c:	ee17 3a90 	vmov	r3, s15
 8001e60:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
//    uint16_t gyrosensitivity = (uint16_t)(1/mpu9250.gRes);
//    printf("%u, %u", accelsensitivity, gyrosensitivity);

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	dd05      	ble.n	8001e76 <MPU9250_calibrateMPU9250+0x276>
 8001e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e6c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e74:	e004      	b.n	8001e80 <MPU9250_calibrateMPU9250+0x280>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 8001e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001e7c:	4413      	add	r3, r2
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e82:	425b      	negs	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	da00      	bge.n	8001e8a <MPU9250_calibrateMPU9250+0x28a>
 8001e88:	3303      	adds	r3, #3
 8001e8a:	109b      	asrs	r3, r3, #2
 8001e8c:	121b      	asrs	r3, r3, #8
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8001e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e96:	425b      	negs	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	da00      	bge.n	8001e9e <MPU9250_calibrateMPU9250+0x29e>
 8001e9c:	3303      	adds	r3, #3
 8001e9e:	109b      	asrs	r3, r3, #2
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	da00      	bge.n	8001eb0 <MPU9250_calibrateMPU9250+0x2b0>
 8001eae:	3303      	adds	r3, #3
 8001eb0:	109b      	asrs	r3, r3, #2
 8001eb2:	121b      	asrs	r3, r3, #8
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 8001eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebc:	425b      	negs	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	da00      	bge.n	8001ec4 <MPU9250_calibrateMPU9250+0x2c4>
 8001ec2:	3303      	adds	r3, #3
 8001ec4:	109b      	asrs	r3, r3, #2
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8001ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ece:	425b      	negs	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	da00      	bge.n	8001ed6 <MPU9250_calibrateMPU9250+0x2d6>
 8001ed4:	3303      	adds	r3, #3
 8001ed6:	109b      	asrs	r3, r3, #2
 8001ed8:	121b      	asrs	r3, r3, #8
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8001ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee2:	425b      	negs	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	da00      	bge.n	8001eea <MPU9250_calibrateMPU9250+0x2ea>
 8001ee8:	3303      	adds	r3, #3
 8001eea:	109b      	asrs	r3, r3, #2
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

/// Push gyro biases to hardware registers
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 8001ef2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	2113      	movs	r1, #19
 8001efa:	20d0      	movs	r0, #208	; 0xd0
 8001efc:	f000 f8d8 	bl	80020b0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 8001f00:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001f04:	461a      	mov	r2, r3
 8001f06:	2114      	movs	r1, #20
 8001f08:	20d0      	movs	r0, #208	; 0xd0
 8001f0a:	f000 f8d1 	bl	80020b0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 8001f0e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001f12:	461a      	mov	r2, r3
 8001f14:	2115      	movs	r1, #21
 8001f16:	20d0      	movs	r0, #208	; 0xd0
 8001f18:	f000 f8ca 	bl	80020b0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 8001f1c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001f20:	461a      	mov	r2, r3
 8001f22:	2116      	movs	r1, #22
 8001f24:	20d0      	movs	r0, #208	; 0xd0
 8001f26:	f000 f8c3 	bl	80020b0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 8001f2a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2117      	movs	r1, #23
 8001f32:	20d0      	movs	r0, #208	; 0xd0
 8001f34:	f000 f8bc 	bl	80020b0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 8001f38:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2118      	movs	r1, #24
 8001f40:	20d0      	movs	r0, #208	; 0xd0
 8001f42:	f000 f8b5 	bl	80020b0 <MPU9250_writeByte>
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
  MPU9250_readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 8001f52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f56:	2202      	movs	r2, #2
 8001f58:	2177      	movs	r1, #119	; 0x77
 8001f5a:	20d0      	movs	r0, #208	; 0xd0
 8001f5c:	f000 f8c6 	bl	80020ec <MPU9250_readBytes>
  accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001f60:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001f64:	021b      	lsls	r3, r3, #8
 8001f66:	b21b      	sxth	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	617b      	str	r3, [r7, #20]
  MPU9250_readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 8001f72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f76:	2202      	movs	r2, #2
 8001f78:	217a      	movs	r1, #122	; 0x7a
 8001f7a:	20d0      	movs	r0, #208	; 0xd0
 8001f7c:	f000 f8b6 	bl	80020ec <MPU9250_readBytes>
  accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001f80:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
  MPU9250_readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 8001f92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f96:	2202      	movs	r2, #2
 8001f98:	217d      	movs	r1, #125	; 0x7d
 8001f9a:	20d0      	movs	r0, #208	; 0xd0
 8001f9c:	f000 f8a6 	bl	80020ec <MPU9250_readBytes>
  accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001fa0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61fb      	str	r3, [r7, #28]

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	743b      	strb	r3, [r7, #16]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	747b      	strb	r3, [r7, #17]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	74bb      	strb	r3, [r7, #18]

  for(ii = 0; ii < 3; ii++) {
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001fc8:	e01e      	b.n	8002008 <MPU9250_calibrateMPU9250+0x408>
 8001fca:	bf00      	nop
 8001fcc:	aaaaaaab 	.word	0xaaaaaaab
 8001fd0:	2000110c 	.word	0x2000110c
    if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 8001fd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001fde:	4413      	add	r3, r2
 8001fe0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <MPU9250_calibrateMPU9250+0x3fe>
 8001fee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ff2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001ff6:	4413      	add	r3, r2
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f803 2c40 	strb.w	r2, [r3, #-64]
  for(ii = 0; ii < 3; ii++) {
 8001ffe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002002:	3301      	adds	r3, #1
 8002004:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002008:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800200c:	2b02      	cmp	r3, #2
 800200e:	d9e1      	bls.n	8001fd4 <MPU9250_calibrateMPU9250+0x3d4>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	6a3b      	ldr	r3, [r7, #32]
 8002014:	2b00      	cmp	r3, #0
 8002016:	da00      	bge.n	800201a <MPU9250_calibrateMPU9250+0x41a>
 8002018:	3307      	adds	r3, #7
 800201a:	10db      	asrs	r3, r3, #3
 800201c:	425b      	negs	r3, r3
 800201e:	4413      	add	r3, r2
 8002020:	617b      	str	r3, [r7, #20]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	2b00      	cmp	r3, #0
 8002028:	da00      	bge.n	800202c <MPU9250_calibrateMPU9250+0x42c>
 800202a:	3307      	adds	r3, #7
 800202c:	10db      	asrs	r3, r3, #3
 800202e:	425b      	negs	r3, r3
 8002030:	4413      	add	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
  accel_bias_reg[2] -= (accel_bias[2]/8);
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002038:	2b00      	cmp	r3, #0
 800203a:	da00      	bge.n	800203e <MPU9250_calibrateMPU9250+0x43e>
 800203c:	3307      	adds	r3, #7
 800203e:	10db      	asrs	r3, r3, #3
 8002040:	425b      	negs	r3, r3
 8002042:	4413      	add	r3, r2
 8002044:	61fb      	str	r3, [r7, #28]

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	121b      	asrs	r3, r3, #8
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (accel_bias_reg[0])      & 0xFF;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002058:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800205c:	7c3b      	ldrb	r3, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	121b      	asrs	r3, r3, #8
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (accel_bias_reg[1])      & 0xFF;
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002078:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800207c:	7c7b      	ldrb	r3, [r7, #17]
 800207e:	4313      	orrs	r3, r2
 8002080:	b2db      	uxtb	r3, r3
 8002082:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	121b      	asrs	r3, r3, #8
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (accel_bias_reg[2])      & 0xFF;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002098:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800209c:	7cbb      	ldrb	r3, [r7, #18]
 800209e:	4313      	orrs	r3, r2
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

// Output scaled accelerometer biases for manual subtraction in the main program
//    MPU9250_accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
//    MPU9250_accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
//    MPU9250_accelBias[2] = (float)accel_bias[2]/(float)accelsensitivity;
}
 80020a6:	bf00      	nop
 80020a8:	3750      	adds	r7, #80	; 0x50
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop

080020b0 <MPU9250_writeByte>:
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
   }
}

void MPU9250_writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af04      	add	r7, sp, #16
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
 80020ba:	460b      	mov	r3, r1
 80020bc:	71bb      	strb	r3, [r7, #6]
 80020be:	4613      	mov	r3, r2
 80020c0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(mpu9250.hi2c, address, subAddress, 1, &data, 1, MPU9250_DEFAULT_TIMEOUT);
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <MPU9250_writeByte+0x38>)
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	b299      	uxth	r1, r3
 80020ca:	79bb      	ldrb	r3, [r7, #6]
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	2364      	movs	r3, #100	; 0x64
 80020d0:	9302      	str	r3, [sp, #8]
 80020d2:	2301      	movs	r3, #1
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	1d7b      	adds	r3, r7, #5
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2301      	movs	r3, #1
 80020dc:	f014 fa48 	bl	8016570 <HAL_I2C_Mem_Write>
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	2000110c 	.word	0x2000110c

080020ec <MPU9250_readBytes>:

void MPU9250_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af04      	add	r7, sp, #16
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	4603      	mov	r3, r0
 80020f6:	71fb      	strb	r3, [r7, #7]
 80020f8:	460b      	mov	r3, r1
 80020fa:	71bb      	strb	r3, [r7, #6]
 80020fc:	4613      	mov	r3, r2
 80020fe:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(mpu9250.hi2c, address, subAddress, 1, (uint8_t*)dest, count, MPU9250_DEFAULT_TIMEOUT);
 8002100:	4b0a      	ldr	r3, [pc, #40]	; (800212c <MPU9250_readBytes+0x40>)
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	b299      	uxth	r1, r3
 8002108:	79bb      	ldrb	r3, [r7, #6]
 800210a:	b29c      	uxth	r4, r3
 800210c:	797b      	ldrb	r3, [r7, #5]
 800210e:	b29b      	uxth	r3, r3
 8002110:	2264      	movs	r2, #100	; 0x64
 8002112:	9202      	str	r2, [sp, #8]
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2301      	movs	r3, #1
 800211c:	4622      	mov	r2, r4
 800211e:	f014 fb21 	bl	8016764 <HAL_I2C_Mem_Read>
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bd90      	pop	{r4, r7, pc}
 800212a:	bf00      	nop
 800212c:	2000110c 	.word	0x2000110c

08002130 <MPU9250_readByte>:

char MPU9250_readByte(uint8_t address, uint8_t subAddress)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	460a      	mov	r2, r1
 800213a:	71fb      	strb	r3, [r7, #7]
 800213c:	4613      	mov	r3, r2
 800213e:	71bb      	strb	r3, [r7, #6]
	char data; // `data` will store the register data
	MPU9250_readBytes(address, subAddress, 1, (uint8_t*)&data);
 8002140:	f107 030f 	add.w	r3, r7, #15
 8002144:	79b9      	ldrb	r1, [r7, #6]
 8002146:	79f8      	ldrb	r0, [r7, #7]
 8002148:	2201      	movs	r2, #1
 800214a:	f7ff ffcf 	bl	80020ec <MPU9250_readBytes>
	return data;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <BME280_init>:
#include "bme280.h"
#include "math.h"

BME280_t bme280 = {0,};

void BME280_init(I2C_HandleTypeDef *hi2c, uint8_t Posr, uint8_t Hosr, uint8_t Tosr, uint8_t Mode, uint8_t IIRFilter, uint8_t SBy){
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	; 0x28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	4608      	mov	r0, r1
 8002162:	4611      	mov	r1, r2
 8002164:	461a      	mov	r2, r3
 8002166:	4603      	mov	r3, r0
 8002168:	70fb      	strb	r3, [r7, #3]
 800216a:	460b      	mov	r3, r1
 800216c:	70bb      	strb	r3, [r7, #2]
 800216e:	4613      	mov	r3, r2
 8002170:	707b      	strb	r3, [r7, #1]
	bme280.hi2c = hi2c;
 8002172:	4a74      	ldr	r2, [pc, #464]	; (8002344 <BME280_init+0x1ec>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6013      	str	r3, [r2, #0]
	BME280_reset();
 8002178:	f000 f966 	bl	8002448 <BME280_reset>
	// Configure the BME280
	// Set H oversampling rate
	BME280_writeByte(BME280_ADDRESS, BME280_CTRL_HUM, 0x07 & Hosr);
 800217c:	78bb      	ldrb	r3, [r7, #2]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	b2db      	uxtb	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	21f2      	movs	r1, #242	; 0xf2
 8002188:	20ec      	movs	r0, #236	; 0xec
 800218a:	f000 fb91 	bl	80028b0 <BME280_writeByte>
	// Set T and P oversampling rates and sensor mode
	BME280_writeByte(BME280_ADDRESS, BME280_CTRL_MEAS, Tosr << 5 | Posr << 2 | Mode);
 800218e:	787b      	ldrb	r3, [r7, #1]
 8002190:	015b      	lsls	r3, r3, #5
 8002192:	b25a      	sxtb	r2, r3
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	b25b      	sxtb	r3, r3
 800219a:	4313      	orrs	r3, r2
 800219c:	b25a      	sxtb	r2, r3
 800219e:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 80021a2:	4313      	orrs	r3, r2
 80021a4:	b25b      	sxtb	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	21f4      	movs	r1, #244	; 0xf4
 80021ac:	20ec      	movs	r0, #236	; 0xec
 80021ae:	f000 fb7f 	bl	80028b0 <BME280_writeByte>
	// Set standby time interval in normal mode and bandwidth
	BME280_writeByte(BME280_ADDRESS, BME280_CONFIG, SBy << 5 | IIRFilter << 2);
 80021b2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80021b6:	015b      	lsls	r3, r3, #5
 80021b8:	b25a      	sxtb	r2, r3
 80021ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	b25b      	sxtb	r3, r3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b25b      	sxtb	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	21f5      	movs	r1, #245	; 0xf5
 80021cc:	20ec      	movs	r0, #236	; 0xec
 80021ce:	f000 fb6f 	bl	80028b0 <BME280_writeByte>

	//wait.
	HAL_Delay(50);
 80021d2:	2032      	movs	r0, #50	; 0x32
 80021d4:	f013 fa32 	bl	801563c <HAL_Delay>
	uint8_t calib[26];
	BME280_readBytes(BME280_ADDRESS, BME280_CALIB00, 26, &calib[0]);
 80021d8:	f107 0308 	add.w	r3, r7, #8
 80021dc:	221a      	movs	r2, #26
 80021de:	2188      	movs	r1, #136	; 0x88
 80021e0:	20ec      	movs	r0, #236	; 0xec
 80021e2:	f000 fb83 	bl	80028ec <BME280_readBytes>
	bme280._dig_T1 = (uint16_t)(((uint16_t) calib[1] << 8) | calib[0]);
 80021e6:	7a7b      	ldrb	r3, [r7, #9]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	7a3b      	ldrb	r3, [r7, #8]
 80021ee:	b21b      	sxth	r3, r3
 80021f0:	4313      	orrs	r3, r2
 80021f2:	b21b      	sxth	r3, r3
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	4b53      	ldr	r3, [pc, #332]	; (8002344 <BME280_init+0x1ec>)
 80021f8:	821a      	strh	r2, [r3, #16]
	bme280._dig_T2 = ( int16_t)((( int16_t) calib[3] << 8) | calib[2]);
 80021fa:	7afb      	ldrb	r3, [r7, #11]
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	b21a      	sxth	r2, r3
 8002200:	7abb      	ldrb	r3, [r7, #10]
 8002202:	b21b      	sxth	r3, r3
 8002204:	4313      	orrs	r3, r2
 8002206:	b21a      	sxth	r2, r3
 8002208:	4b4e      	ldr	r3, [pc, #312]	; (8002344 <BME280_init+0x1ec>)
 800220a:	831a      	strh	r2, [r3, #24]
	bme280._dig_T3 = ( int16_t)((( int16_t) calib[5] << 8) | calib[4]);
 800220c:	7b7b      	ldrb	r3, [r7, #13]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	b21a      	sxth	r2, r3
 8002212:	7b3b      	ldrb	r3, [r7, #12]
 8002214:	b21b      	sxth	r3, r3
 8002216:	4313      	orrs	r3, r2
 8002218:	b21a      	sxth	r2, r3
 800221a:	4b4a      	ldr	r3, [pc, #296]	; (8002344 <BME280_init+0x1ec>)
 800221c:	835a      	strh	r2, [r3, #26]
	bme280._dig_P1 = (uint16_t)(((uint16_t) calib[7] << 8) | calib[6]);
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	b21a      	sxth	r2, r3
 8002224:	7bbb      	ldrb	r3, [r7, #14]
 8002226:	b21b      	sxth	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	b21b      	sxth	r3, r3
 800222c:	b29a      	uxth	r2, r3
 800222e:	4b45      	ldr	r3, [pc, #276]	; (8002344 <BME280_init+0x1ec>)
 8002230:	825a      	strh	r2, [r3, #18]
	bme280._dig_P2 = ( int16_t)((( int16_t) calib[9] << 8) | calib[8]);
 8002232:	7c7b      	ldrb	r3, [r7, #17]
 8002234:	021b      	lsls	r3, r3, #8
 8002236:	b21a      	sxth	r2, r3
 8002238:	7c3b      	ldrb	r3, [r7, #16]
 800223a:	b21b      	sxth	r3, r3
 800223c:	4313      	orrs	r3, r2
 800223e:	b21a      	sxth	r2, r3
 8002240:	4b40      	ldr	r3, [pc, #256]	; (8002344 <BME280_init+0x1ec>)
 8002242:	839a      	strh	r2, [r3, #28]
	bme280._dig_P3 = ( int16_t)((( int16_t) calib[11] << 8) | calib[10]);
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	b21a      	sxth	r2, r3
 800224a:	7cbb      	ldrb	r3, [r7, #18]
 800224c:	b21b      	sxth	r3, r3
 800224e:	4313      	orrs	r3, r2
 8002250:	b21a      	sxth	r2, r3
 8002252:	4b3c      	ldr	r3, [pc, #240]	; (8002344 <BME280_init+0x1ec>)
 8002254:	83da      	strh	r2, [r3, #30]
	bme280._dig_P4 = ( int16_t)((( int16_t) calib[13] << 8) | calib[12]);
 8002256:	7d7b      	ldrb	r3, [r7, #21]
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	b21a      	sxth	r2, r3
 800225c:	7d3b      	ldrb	r3, [r7, #20]
 800225e:	b21b      	sxth	r3, r3
 8002260:	4313      	orrs	r3, r2
 8002262:	b21a      	sxth	r2, r3
 8002264:	4b37      	ldr	r3, [pc, #220]	; (8002344 <BME280_init+0x1ec>)
 8002266:	841a      	strh	r2, [r3, #32]
	bme280._dig_P5 = ( int16_t)((( int16_t) calib[15] << 8) | calib[14]);
 8002268:	7dfb      	ldrb	r3, [r7, #23]
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	b21a      	sxth	r2, r3
 800226e:	7dbb      	ldrb	r3, [r7, #22]
 8002270:	b21b      	sxth	r3, r3
 8002272:	4313      	orrs	r3, r2
 8002274:	b21a      	sxth	r2, r3
 8002276:	4b33      	ldr	r3, [pc, #204]	; (8002344 <BME280_init+0x1ec>)
 8002278:	845a      	strh	r2, [r3, #34]	; 0x22
	bme280._dig_P6 = ( int16_t)((( int16_t) calib[17] << 8) | calib[16]);
 800227a:	7e7b      	ldrb	r3, [r7, #25]
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	b21a      	sxth	r2, r3
 8002280:	7e3b      	ldrb	r3, [r7, #24]
 8002282:	b21b      	sxth	r3, r3
 8002284:	4313      	orrs	r3, r2
 8002286:	b21a      	sxth	r2, r3
 8002288:	4b2e      	ldr	r3, [pc, #184]	; (8002344 <BME280_init+0x1ec>)
 800228a:	849a      	strh	r2, [r3, #36]	; 0x24
	bme280._dig_P7 = ( int16_t)((( int16_t) calib[19] << 8) | calib[18]);
 800228c:	7efb      	ldrb	r3, [r7, #27]
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	b21a      	sxth	r2, r3
 8002292:	7ebb      	ldrb	r3, [r7, #26]
 8002294:	b21b      	sxth	r3, r3
 8002296:	4313      	orrs	r3, r2
 8002298:	b21a      	sxth	r2, r3
 800229a:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <BME280_init+0x1ec>)
 800229c:	84da      	strh	r2, [r3, #38]	; 0x26
	bme280._dig_P8 = ( int16_t)((( int16_t) calib[21] << 8) | calib[20]);
 800229e:	7f7b      	ldrb	r3, [r7, #29]
 80022a0:	021b      	lsls	r3, r3, #8
 80022a2:	b21a      	sxth	r2, r3
 80022a4:	7f3b      	ldrb	r3, [r7, #28]
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	4313      	orrs	r3, r2
 80022aa:	b21a      	sxth	r2, r3
 80022ac:	4b25      	ldr	r3, [pc, #148]	; (8002344 <BME280_init+0x1ec>)
 80022ae:	851a      	strh	r2, [r3, #40]	; 0x28
	bme280._dig_P9 = ( int16_t)((( int16_t) calib[23] << 8) | calib[22]);
 80022b0:	7ffb      	ldrb	r3, [r7, #31]
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	7fbb      	ldrb	r3, [r7, #30]
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	4313      	orrs	r3, r2
 80022bc:	b21a      	sxth	r2, r3
 80022be:	4b21      	ldr	r3, [pc, #132]	; (8002344 <BME280_init+0x1ec>)
 80022c0:	855a      	strh	r2, [r3, #42]	; 0x2a
	bme280._dig_H1 = calib[25];
 80022c2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80022c6:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <BME280_init+0x1ec>)
 80022c8:	735a      	strb	r2, [r3, #13]
	BME280_readBytes(BME280_ADDRESS, BME280_CALIB26, 7, &calib[0]);
 80022ca:	f107 0308 	add.w	r3, r7, #8
 80022ce:	2207      	movs	r2, #7
 80022d0:	21e1      	movs	r1, #225	; 0xe1
 80022d2:	20ec      	movs	r0, #236	; 0xec
 80022d4:	f000 fb0a 	bl	80028ec <BME280_readBytes>
	bme280._dig_H2 = ( int16_t)((( int16_t) calib[1] << 8) | calib[0]);
 80022d8:	7a7b      	ldrb	r3, [r7, #9]
 80022da:	021b      	lsls	r3, r3, #8
 80022dc:	b21a      	sxth	r2, r3
 80022de:	7a3b      	ldrb	r3, [r7, #8]
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	4313      	orrs	r3, r2
 80022e4:	b21a      	sxth	r2, r3
 80022e6:	4b17      	ldr	r3, [pc, #92]	; (8002344 <BME280_init+0x1ec>)
 80022e8:	859a      	strh	r2, [r3, #44]	; 0x2c
	bme280._dig_H3 = calib[2];
 80022ea:	7aba      	ldrb	r2, [r7, #10]
 80022ec:	4b15      	ldr	r3, [pc, #84]	; (8002344 <BME280_init+0x1ec>)
 80022ee:	739a      	strb	r2, [r3, #14]
	bme280._dig_H4 = ( int16_t)(((( int16_t) calib[3] << 8) | (0x0F & calib[4]) << 4) >> 4);
 80022f0:	7afb      	ldrb	r3, [r7, #11]
 80022f2:	021a      	lsls	r2, r3, #8
 80022f4:	7b3b      	ldrb	r3, [r7, #12]
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	4313      	orrs	r3, r2
 80022fc:	111b      	asrs	r3, r3, #4
 80022fe:	b29a      	uxth	r2, r3
 8002300:	4b10      	ldr	r3, [pc, #64]	; (8002344 <BME280_init+0x1ec>)
 8002302:	829a      	strh	r2, [r3, #20]
	bme280._dig_H5 = ( int16_t)(((( int16_t) calib[5] << 8) | (0xF0 & calib[4]) ) >> 4 );
 8002304:	7b7b      	ldrb	r3, [r7, #13]
 8002306:	021a      	lsls	r2, r3, #8
 8002308:	7b3b      	ldrb	r3, [r7, #12]
 800230a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800230e:	4313      	orrs	r3, r2
 8002310:	111b      	asrs	r3, r3, #4
 8002312:	b29a      	uxth	r2, r3
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <BME280_init+0x1ec>)
 8002316:	82da      	strh	r2, [r3, #22]
	bme280._dig_H6 = calib[6];
 8002318:	7bba      	ldrb	r2, [r7, #14]
 800231a:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <BME280_init+0x1ec>)
 800231c:	73da      	strb	r2, [r3, #15]

	/* dump trash value */
	for(int i=0; i<10; i++){
 800231e:	2300      	movs	r3, #0
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
 8002322:	e008      	b.n	8002336 <BME280_init+0x1de>
		BME280_readTemperature();
 8002324:	f000 f899 	bl	800245a <BME280_readTemperature>
		BME280_readPressure();
 8002328:	f000 f8ad 	bl	8002486 <BME280_readPressure>
		BME280_readHumidity();
 800232c:	f000 f8c1 	bl	80024b2 <BME280_readHumidity>
	for(int i=0; i<10; i++){
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	3301      	adds	r3, #1
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	2b09      	cmp	r3, #9
 800233a:	ddf3      	ble.n	8002324 <BME280_init+0x1cc>
	}
}
 800233c:	bf00      	nop
 800233e:	3728      	adds	r7, #40	; 0x28
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	200008fc 	.word	0x200008fc

08002348 <BME280_readIT>:

void BME280_readIT(){
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af02      	add	r7, sp, #8
	if(bm_i2cFlag == bm_i2cIdle){
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <BME280_readIT+0x30>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10e      	bne.n	8002374 <BME280_readIT+0x2c>
		HAL_I2C_Mem_Read_IT(bme280.hi2c, BME280_ADDRESS, BME280_PRESS_MSB, 1, bme280.buf, 6);
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <BME280_readIT+0x34>)
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	2306      	movs	r3, #6
 800235c:	9301      	str	r3, [sp, #4]
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <BME280_readIT+0x38>)
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2301      	movs	r3, #1
 8002364:	22f7      	movs	r2, #247	; 0xf7
 8002366:	21ec      	movs	r1, #236	; 0xec
 8002368:	f014 fc22 	bl	8016bb0 <HAL_I2C_Mem_Read_IT>
		bm_i2cFlag = bm_i2cBME280;
 800236c:	4b02      	ldr	r3, [pc, #8]	; (8002378 <BME280_readIT+0x30>)
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
		return;
 8002372:	bf00      	nop
	}
}
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200014a4 	.word	0x200014a4
 800237c:	200008fc 	.word	0x200008fc
 8002380:	20000900 	.word	0x20000900

08002384 <BME280_i2cRxCpltCallback>:

uint8_t BME280_i2cRxCpltCallback(){
 8002384:	b598      	push	{r3, r4, r7, lr}
 8002386:	af00      	add	r7, sp, #0
	if(bm_i2cFlag != bm_i2cBME280) return 0;
 8002388:	4b2b      	ldr	r3, [pc, #172]	; (8002438 <BME280_i2cRxCpltCallback+0xb4>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d001      	beq.n	8002394 <BME280_i2cRxCpltCallback+0x10>
 8002390:	2300      	movs	r3, #0
 8002392:	e04e      	b.n	8002432 <BME280_i2cRxCpltCallback+0xae>
    bme280.countP = (int32_t) (((int32_t) bme280.buf[0] << 24 | (int32_t) bme280.buf[1] << 16 | (int32_t) bme280.buf[2] << 8) >> 12);
 8002394:	4b29      	ldr	r3, [pc, #164]	; (800243c <BME280_i2cRxCpltCallback+0xb8>)
 8002396:	791b      	ldrb	r3, [r3, #4]
 8002398:	061a      	lsls	r2, r3, #24
 800239a:	4b28      	ldr	r3, [pc, #160]	; (800243c <BME280_i2cRxCpltCallback+0xb8>)
 800239c:	795b      	ldrb	r3, [r3, #5]
 800239e:	041b      	lsls	r3, r3, #16
 80023a0:	431a      	orrs	r2, r3
 80023a2:	4b26      	ldr	r3, [pc, #152]	; (800243c <BME280_i2cRxCpltCallback+0xb8>)
 80023a4:	799b      	ldrb	r3, [r3, #6]
 80023a6:	021b      	lsls	r3, r3, #8
 80023a8:	4313      	orrs	r3, r2
 80023aa:	131b      	asrs	r3, r3, #12
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b23      	ldr	r3, [pc, #140]	; (800243c <BME280_i2cRxCpltCallback+0xb8>)
 80023b0:	639a      	str	r2, [r3, #56]	; 0x38
    bme280.countT = (int32_t) (((int32_t) bme280.buf[3] << 24 | (int32_t) bme280.buf[4] << 16 | (int32_t) bme280.buf[5] << 8) >> 12);
 80023b2:	4b22      	ldr	r3, [pc, #136]	; (800243c <BME280_i2cRxCpltCallback+0xb8>)
 80023b4:	79db      	ldrb	r3, [r3, #7]
 80023b6:	061a      	lsls	r2, r3, #24
 80023b8:	4b20      	ldr	r3, [pc, #128]	; (800243c <BME280_i2cRxCpltCallback+0xb8>)
 80023ba:	7a1b      	ldrb	r3, [r3, #8]
 80023bc:	041b      	lsls	r3, r3, #16
 80023be:	431a      	orrs	r2, r3
 80023c0:	4b1e      	ldr	r3, [pc, #120]	; (800243c <BME280_i2cRxCpltCallback+0xb8>)
 80023c2:	7a5b      	ldrb	r3, [r3, #9]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	4313      	orrs	r3, r2
 80023c8:	131b      	asrs	r3, r3, #12
 80023ca:	4a1c      	ldr	r2, [pc, #112]	; (800243c <BME280_i2cRxCpltCallback+0xb8>)
 80023cc:	6353      	str	r3, [r2, #52]	; 0x34

    // change to hPa
    bme280.P = BME280_compensate_P(bme280.countP)/25600.0;	/*[hPa]*/
 80023ce:	4b1b      	ldr	r3, [pc, #108]	; (800243c <BME280_i2cRxCpltCallback+0xb8>)
 80023d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f8be 	bl	8002554 <BME280_compensate_P>
 80023d8:	4603      	mov	r3, r0
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe f89a 	bl	8000514 <__aeabi_ui2d>
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	4b16      	ldr	r3, [pc, #88]	; (8002440 <BME280_i2cRxCpltCallback+0xbc>)
 80023e6:	f7fe fa39 	bl	800085c <__aeabi_ddiv>
 80023ea:	4603      	mov	r3, r0
 80023ec:	460c      	mov	r4, r1
 80023ee:	4618      	mov	r0, r3
 80023f0:	4621      	mov	r1, r4
 80023f2:	f7fe fc01 	bl	8000bf8 <__aeabi_d2f>
 80023f6:	4602      	mov	r2, r0
 80023f8:	4b10      	ldr	r3, [pc, #64]	; (800243c <BME280_i2cRxCpltCallback+0xb8>)
 80023fa:	645a      	str	r2, [r3, #68]	; 0x44
    bme280.T = BME280_compensate_T(bme280.countT)/100.0;	/*[degC]*/
 80023fc:	4b0f      	ldr	r3, [pc, #60]	; (800243c <BME280_i2cRxCpltCallback+0xb8>)
 80023fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002400:	4618      	mov	r0, r3
 8002402:	f000 f86b 	bl	80024dc <BME280_compensate_T>
 8002406:	4603      	mov	r3, r0
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f893 	bl	8000534 <__aeabi_i2d>
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <BME280_i2cRxCpltCallback+0xc0>)
 8002414:	f7fe fa22 	bl	800085c <__aeabi_ddiv>
 8002418:	4603      	mov	r3, r0
 800241a:	460c      	mov	r4, r1
 800241c:	4618      	mov	r0, r3
 800241e:	4621      	mov	r1, r4
 8002420:	f7fe fbea 	bl	8000bf8 <__aeabi_d2f>
 8002424:	4602      	mov	r2, r0
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <BME280_i2cRxCpltCallback+0xb8>)
 8002428:	641a      	str	r2, [r3, #64]	; 0x40

    bm_i2cFlag = bm_i2cIdle;
 800242a:	4b03      	ldr	r3, [pc, #12]	; (8002438 <BME280_i2cRxCpltCallback+0xb4>)
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
    return 1;
 8002430:	2301      	movs	r3, #1
}
 8002432:	4618      	mov	r0, r3
 8002434:	bd98      	pop	{r3, r4, r7, pc}
 8002436:	bf00      	nop
 8002438:	200014a4 	.word	0x200014a4
 800243c:	200008fc 	.word	0x200008fc
 8002440:	40d90000 	.word	0x40d90000
 8002444:	40590000 	.word	0x40590000

08002448 <BME280_reset>:

uint8_t BME280_getChipID(){
	  uint8_t c = BME280_readByte(BME280_ADDRESS, BME280_ID);
	  return c;
}
void BME280_reset(){
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
	BME280_writeByte(BME280_ADDRESS, BME280_RESET, 0xB6);
 800244c:	22b6      	movs	r2, #182	; 0xb6
 800244e:	21e0      	movs	r1, #224	; 0xe0
 8002450:	20ec      	movs	r0, #236	; 0xec
 8002452:	f000 fa2d 	bl	80028b0 <BME280_writeByte>
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}

0800245a <BME280_readTemperature>:

int32_t BME280_readTemperature(){
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_TEMP_MSB, 3, &rawData[0]);
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	2203      	movs	r2, #3
 8002464:	21fa      	movs	r1, #250	; 0xfa
 8002466:	20ec      	movs	r0, #236	; 0xec
 8002468:	f000 fa40 	bl	80028ec <BME280_readBytes>
	  return (int32_t) (((int32_t) rawData[0] << 24 | (int32_t) rawData[1] << 16 | (int32_t) rawData[2] << 8) >> 12);
 800246c:	793b      	ldrb	r3, [r7, #4]
 800246e:	061a      	lsls	r2, r3, #24
 8002470:	797b      	ldrb	r3, [r7, #5]
 8002472:	041b      	lsls	r3, r3, #16
 8002474:	431a      	orrs	r2, r3
 8002476:	79bb      	ldrb	r3, [r7, #6]
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	4313      	orrs	r3, r2
 800247c:	131b      	asrs	r3, r3, #12
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <BME280_readPressure>:

int32_t BME280_readPressure(){
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_PRESS_MSB, 3, &rawData[0]);
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	2203      	movs	r2, #3
 8002490:	21f7      	movs	r1, #247	; 0xf7
 8002492:	20ec      	movs	r0, #236	; 0xec
 8002494:	f000 fa2a 	bl	80028ec <BME280_readBytes>
	  return (int32_t) (((int32_t) rawData[0] << 24 | (int32_t) rawData[1] << 16 | (int32_t) rawData[2] << 8) >> 12);
 8002498:	793b      	ldrb	r3, [r7, #4]
 800249a:	061a      	lsls	r2, r3, #24
 800249c:	797b      	ldrb	r3, [r7, #5]
 800249e:	041b      	lsls	r3, r3, #16
 80024a0:	431a      	orrs	r2, r3
 80024a2:	79bb      	ldrb	r3, [r7, #6]
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	4313      	orrs	r3, r2
 80024a8:	131b      	asrs	r3, r3, #12
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <BME280_readHumidity>:
int16_t BME280_readHumidity(){
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_HUM_MSB, 2, &rawData[0]);
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	2202      	movs	r2, #2
 80024bc:	21fd      	movs	r1, #253	; 0xfd
 80024be:	20ec      	movs	r0, #236	; 0xec
 80024c0:	f000 fa14 	bl	80028ec <BME280_readBytes>
	  return (int16_t) (((int16_t) rawData[0] << 8 | rawData[1]) );
 80024c4:	793b      	ldrb	r3, [r7, #4]
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	b21a      	sxth	r2, r3
 80024ca:	797b      	ldrb	r3, [r7, #5]
 80024cc:	b21b      	sxth	r3, r3
 80024ce:	4313      	orrs	r3, r2
 80024d0:	b21b      	sxth	r3, r3
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <BME280_compensate_T>:



// Returns temperature in DegC, resolution is 0.01 DegC. Output value of
// “5123” equals 51.23 DegC.
int32_t BME280_compensate_T(int32_t adc_T){
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	  int32_t var1, var2, T;
	  var1 = ((((adc_T >> 3) - ((int32_t)bme280._dig_T1 << 1))) * ((int32_t)bme280._dig_T2)) >> 11;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	10da      	asrs	r2, r3, #3
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <BME280_compensate_T+0x74>)
 80024ea:	8a1b      	ldrh	r3, [r3, #16]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	4a17      	ldr	r2, [pc, #92]	; (8002550 <BME280_compensate_T+0x74>)
 80024f2:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	12db      	asrs	r3, r3, #11
 80024fc:	617b      	str	r3, [r7, #20]
	  var2 = (((((adc_T >> 4) - ((int32_t)bme280._dig_T1)) * ((adc_T >> 4) - ((int32_t)bme280._dig_T1))) >> 12) * ((int32_t)bme280._dig_T3)) >> 14;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	111b      	asrs	r3, r3, #4
 8002502:	4a13      	ldr	r2, [pc, #76]	; (8002550 <BME280_compensate_T+0x74>)
 8002504:	8a12      	ldrh	r2, [r2, #16]
 8002506:	1a9b      	subs	r3, r3, r2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	1112      	asrs	r2, r2, #4
 800250c:	4910      	ldr	r1, [pc, #64]	; (8002550 <BME280_compensate_T+0x74>)
 800250e:	8a09      	ldrh	r1, [r1, #16]
 8002510:	1a52      	subs	r2, r2, r1
 8002512:	fb02 f303 	mul.w	r3, r2, r3
 8002516:	131b      	asrs	r3, r3, #12
 8002518:	4a0d      	ldr	r2, [pc, #52]	; (8002550 <BME280_compensate_T+0x74>)
 800251a:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	139b      	asrs	r3, r3, #14
 8002524:	613b      	str	r3, [r7, #16]
	  bme280._t_fine = var1 + var2;
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4413      	add	r3, r2
 800252c:	4a08      	ldr	r2, [pc, #32]	; (8002550 <BME280_compensate_T+0x74>)
 800252e:	6313      	str	r3, [r2, #48]	; 0x30
	  T = (bme280._t_fine * 5 + 128) >> 8;
 8002530:	4b07      	ldr	r3, [pc, #28]	; (8002550 <BME280_compensate_T+0x74>)
 8002532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	3380      	adds	r3, #128	; 0x80
 800253c:	121b      	asrs	r3, r3, #8
 800253e:	60fb      	str	r3, [r7, #12]
	  return T;
 8002540:	68fb      	ldr	r3, [r7, #12]
}
 8002542:	4618      	mov	r0, r3
 8002544:	371c      	adds	r7, #28
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	200008fc 	.word	0x200008fc

08002554 <BME280_compensate_P>:

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8
//fractional bits).
//Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t BME280_compensate_P(int32_t adc_P){
 8002554:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8002558:	b088      	sub	sp, #32
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
	  int64_t var1, var2, p;
	  var1 = ((int64_t)bme280._t_fine) - 128000;
 800255e:	4b65      	ldr	r3, [pc, #404]	; (80026f4 <BME280_compensate_P+0x1a0>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	4619      	mov	r1, r3
 8002564:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002568:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 800256c:	f142 34ff 	adc.w	r4, r2, #4294967295
 8002570:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = var1 * var1 * (int64_t)bme280._dig_P6;
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	fb02 f203 	mul.w	r2, r2, r3
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	69b9      	ldr	r1, [r7, #24]
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	441a      	add	r2, r3
 8002586:	69b9      	ldr	r1, [r7, #24]
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	fba1 3403 	umull	r3, r4, r1, r3
 800258e:	4422      	add	r2, r4
 8002590:	4614      	mov	r4, r2
 8002592:	4a58      	ldr	r2, [pc, #352]	; (80026f4 <BME280_compensate_P+0x1a0>)
 8002594:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 8002598:	b211      	sxth	r1, r2
 800259a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800259e:	fb01 f504 	mul.w	r5, r1, r4
 80025a2:	fb03 f002 	mul.w	r0, r3, r2
 80025a6:	4428      	add	r0, r5
 80025a8:	fba3 3401 	umull	r3, r4, r3, r1
 80025ac:	1902      	adds	r2, r0, r4
 80025ae:	4614      	mov	r4, r2
 80025b0:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80025b4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + ((var1*(int64_t)bme280._dig_P5)<<17);
 80025b8:	4b4e      	ldr	r3, [pc, #312]	; (80026f4 <BME280_compensate_P+0x1a0>)
 80025ba:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80025be:	b21b      	sxth	r3, r3
 80025c0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	fb04 f102 	mul.w	r1, r4, r2
 80025ca:	69fa      	ldr	r2, [r7, #28]
 80025cc:	fb03 f202 	mul.w	r2, r3, r2
 80025d0:	1888      	adds	r0, r1, r2
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	fba2 1203 	umull	r1, r2, r2, r3
 80025d8:	1883      	adds	r3, r0, r2
 80025da:	461a      	mov	r2, r3
 80025dc:	f04f 0500 	mov.w	r5, #0
 80025e0:	f04f 0600 	mov.w	r6, #0
 80025e4:	0456      	lsls	r6, r2, #17
 80025e6:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80025ea:	044d      	lsls	r5, r1, #17
 80025ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80025f0:	186b      	adds	r3, r5, r1
 80025f2:	eb46 0402 	adc.w	r4, r6, r2
 80025f6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + (((int64_t)bme280._dig_P4)<<35);
 80025fa:	4b3e      	ldr	r3, [pc, #248]	; (80026f4 <BME280_compensate_P+0x1a0>)
 80025fc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002600:	b219      	sxth	r1, r3
 8002602:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002606:	f04f 0500 	mov.w	r5, #0
 800260a:	f04f 0600 	mov.w	r6, #0
 800260e:	00ce      	lsls	r6, r1, #3
 8002610:	2500      	movs	r5, #0
 8002612:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002616:	186b      	adds	r3, r5, r1
 8002618:	eb46 0402 	adc.w	r4, r6, r2
 800261c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var1 = ((var1 * var1 * (int64_t)bme280._dig_P3)>>8) + ((var1 * (int64_t)bme280._dig_P2)<<12);
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	fb02 f203 	mul.w	r2, r2, r3
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	69b9      	ldr	r1, [r7, #24]
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	441a      	add	r2, r3
 8002632:	69b9      	ldr	r1, [r7, #24]
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fba1 3403 	umull	r3, r4, r1, r3
 800263a:	4422      	add	r2, r4
 800263c:	4614      	mov	r4, r2
 800263e:	4a2d      	ldr	r2, [pc, #180]	; (80026f4 <BME280_compensate_P+0x1a0>)
 8002640:	f9b2 201e 	ldrsh.w	r2, [r2, #30]
 8002644:	b211      	sxth	r1, r2
 8002646:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800264a:	fb01 f504 	mul.w	r5, r1, r4
 800264e:	fb03 f002 	mul.w	r0, r3, r2
 8002652:	4428      	add	r0, r5
 8002654:	fba3 3401 	umull	r3, r4, r3, r1
 8002658:	1902      	adds	r2, r0, r4
 800265a:	4614      	mov	r4, r2
 800265c:	f04f 0100 	mov.w	r1, #0
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	0a19      	lsrs	r1, r3, #8
 8002666:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800266a:	1222      	asrs	r2, r4, #8
 800266c:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <BME280_compensate_P+0x1a0>)
 800266e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002672:	b21b      	sxth	r3, r3
 8002674:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002678:	69b8      	ldr	r0, [r7, #24]
 800267a:	fb04 f500 	mul.w	r5, r4, r0
 800267e:	69f8      	ldr	r0, [r7, #28]
 8002680:	fb03 f000 	mul.w	r0, r3, r0
 8002684:	4428      	add	r0, r5
 8002686:	69bd      	ldr	r5, [r7, #24]
 8002688:	fba5 5603 	umull	r5, r6, r5, r3
 800268c:	1983      	adds	r3, r0, r6
 800268e:	461e      	mov	r6, r3
 8002690:	f04f 0b00 	mov.w	fp, #0
 8002694:	f04f 0c00 	mov.w	ip, #0
 8002698:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 800269c:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 80026a0:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 80026a4:	eb1b 0301 	adds.w	r3, fp, r1
 80026a8:	eb4c 0402 	adc.w	r4, ip, r2
 80026ac:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)bme280._dig_P1)>>33;
 80026b0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80026b4:	1c19      	adds	r1, r3, #0
 80026b6:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <BME280_compensate_P+0x1a0>)
 80026bc:	8a5b      	ldrh	r3, [r3, #18]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	f04f 0400 	mov.w	r4, #0
 80026c4:	fb03 f502 	mul.w	r5, r3, r2
 80026c8:	fb01 f004 	mul.w	r0, r1, r4
 80026cc:	4428      	add	r0, r5
 80026ce:	fba1 3403 	umull	r3, r4, r1, r3
 80026d2:	1902      	adds	r2, r0, r4
 80026d4:	4614      	mov	r4, r2
 80026d6:	f04f 0100 	mov.w	r1, #0
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	1061      	asrs	r1, r4, #1
 80026e0:	17e2      	asrs	r2, r4, #31
 80026e2:	e9c7 1206 	strd	r1, r2, [r7, #24]
	  if(var1 == 0)
 80026e6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80026ea:	4323      	orrs	r3, r4
 80026ec:	d104      	bne.n	80026f8 <BME280_compensate_P+0x1a4>
	  {
	    return 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e0d7      	b.n	80028a2 <BME280_compensate_P+0x34e>
 80026f2:	bf00      	nop
 80026f4:	200008fc 	.word	0x200008fc
	    // avoid exception caused by division by zero
	  }
	  p = 1048576 - adc_P;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80026fe:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002702:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  p = (((p<<31) - var2)*3125)/var1;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	ea4f 0963 	mov.w	r9, r3, asr #1
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8002712:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002716:	4645      	mov	r5, r8
 8002718:	464e      	mov	r6, r9
 800271a:	1aed      	subs	r5, r5, r3
 800271c:	eb66 0604 	sbc.w	r6, r6, r4
 8002720:	46a8      	mov	r8, r5
 8002722:	46b1      	mov	r9, r6
 8002724:	eb18 0308 	adds.w	r3, r8, r8
 8002728:	eb49 0409 	adc.w	r4, r9, r9
 800272c:	4698      	mov	r8, r3
 800272e:	46a1      	mov	r9, r4
 8002730:	eb18 0805 	adds.w	r8, r8, r5
 8002734:	eb49 0906 	adc.w	r9, r9, r6
 8002738:	f04f 0100 	mov.w	r1, #0
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8002744:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8002748:	ea4f 1188 	mov.w	r1, r8, lsl #6
 800274c:	eb18 0801 	adds.w	r8, r8, r1
 8002750:	eb49 0902 	adc.w	r9, r9, r2
 8002754:	f04f 0100 	mov.w	r1, #0
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002760:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8002764:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002768:	4688      	mov	r8, r1
 800276a:	4691      	mov	r9, r2
 800276c:	eb18 0805 	adds.w	r8, r8, r5
 8002770:	eb49 0906 	adc.w	r9, r9, r6
 8002774:	f04f 0100 	mov.w	r1, #0
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002780:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8002784:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002788:	4688      	mov	r8, r1
 800278a:	4691      	mov	r9, r2
 800278c:	eb18 0005 	adds.w	r0, r8, r5
 8002790:	eb49 0106 	adc.w	r1, r9, r6
 8002794:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002798:	f7fe fa7e 	bl	8000c98 <__aeabi_ldivmod>
 800279c:	4603      	mov	r3, r0
 800279e:	460c      	mov	r4, r1
 80027a0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  var1 = (((int64_t)bme280._dig_P9) * (p>>13) * (p>>13)) >> 25;
 80027a4:	4b41      	ldr	r3, [pc, #260]	; (80028ac <BME280_compensate_P+0x358>)
 80027a6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80027aa:	b219      	sxth	r1, r3
 80027ac:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80027b0:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	f04f 0400 	mov.w	r4, #0
 80027bc:	0b6b      	lsrs	r3, r5, #13
 80027be:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80027c2:	1374      	asrs	r4, r6, #13
 80027c4:	fb03 f502 	mul.w	r5, r3, r2
 80027c8:	fb01 f004 	mul.w	r0, r1, r4
 80027cc:	4428      	add	r0, r5
 80027ce:	fba1 1203 	umull	r1, r2, r1, r3
 80027d2:	1883      	adds	r3, r0, r2
 80027d4:	461a      	mov	r2, r3
 80027d6:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	f04f 0400 	mov.w	r4, #0
 80027e2:	0b6b      	lsrs	r3, r5, #13
 80027e4:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80027e8:	1374      	asrs	r4, r6, #13
 80027ea:	fb03 f502 	mul.w	r5, r3, r2
 80027ee:	fb01 f004 	mul.w	r0, r1, r4
 80027f2:	4428      	add	r0, r5
 80027f4:	fba1 1203 	umull	r1, r2, r1, r3
 80027f8:	1883      	adds	r3, r0, r2
 80027fa:	461a      	mov	r2, r3
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	f04f 0400 	mov.w	r4, #0
 8002804:	0e4b      	lsrs	r3, r1, #25
 8002806:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800280a:	1654      	asrs	r4, r2, #25
 800280c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = (((int64_t)bme280._dig_P8) * p)>> 19;
 8002810:	4b26      	ldr	r3, [pc, #152]	; (80028ac <BME280_compensate_P+0x358>)
 8002812:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002816:	b21b      	sxth	r3, r3
 8002818:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	fb04 f102 	mul.w	r1, r4, r2
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	fb03 f202 	mul.w	r2, r3, r2
 8002828:	1888      	adds	r0, r1, r2
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	fba2 1203 	umull	r1, r2, r2, r3
 8002830:	1883      	adds	r3, r0, r2
 8002832:	461a      	mov	r2, r3
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	f04f 0400 	mov.w	r4, #0
 800283c:	0ccb      	lsrs	r3, r1, #19
 800283e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002842:	14d4      	asrs	r4, r2, #19
 8002844:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  p = ((p + var1 + var2) >> 8) + (((int64_t)bme280._dig_P7)<<4);
 8002848:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800284c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002850:	eb11 0803 	adds.w	r8, r1, r3
 8002854:	eb42 0904 	adc.w	r9, r2, r4
 8002858:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800285c:	eb13 0508 	adds.w	r5, r3, r8
 8002860:	eb44 0609 	adc.w	r6, r4, r9
 8002864:	f04f 0100 	mov.w	r1, #0
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	0a29      	lsrs	r1, r5, #8
 800286e:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8002872:	1232      	asrs	r2, r6, #8
 8002874:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <BME280_compensate_P+0x358>)
 8002876:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800287a:	b21d      	sxth	r5, r3
 800287c:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8002880:	f04f 0800 	mov.w	r8, #0
 8002884:	f04f 0900 	mov.w	r9, #0
 8002888:	ea4f 1906 	mov.w	r9, r6, lsl #4
 800288c:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8002890:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8002894:	eb18 0301 	adds.w	r3, r8, r1
 8002898:	eb49 0402 	adc.w	r4, r9, r2
 800289c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  return (uint32_t)p;
 80028a0:	68bb      	ldr	r3, [r7, #8]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3720      	adds	r7, #32
 80028a6:	46bd      	mov	sp, r7
 80028a8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 80028ac:	200008fc 	.word	0x200008fc

080028b0 <BME280_writeByte>:
	var = (var < 0 ? 0 : var);
	var = (var > 419430400 ? 419430400 : var);
	return(uint32_t)(var >> 12);
}

void BME280_writeByte(uint8_t address, uint8_t subAddress, uint8_t data){
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af04      	add	r7, sp, #16
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
 80028ba:	460b      	mov	r3, r1
 80028bc:	71bb      	strb	r3, [r7, #6]
 80028be:	4613      	mov	r3, r2
 80028c0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(bme280.hi2c, address, subAddress, 1, &data, 1, BME_DEFAULT_TIMEOUT);
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <BME280_writeByte+0x38>)
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	b299      	uxth	r1, r3
 80028ca:	79bb      	ldrb	r3, [r7, #6]
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	2364      	movs	r3, #100	; 0x64
 80028d0:	9302      	str	r3, [sp, #8]
 80028d2:	2301      	movs	r3, #1
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	1d7b      	adds	r3, r7, #5
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	2301      	movs	r3, #1
 80028dc:	f013 fe48 	bl	8016570 <HAL_I2C_Mem_Write>
}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	200008fc 	.word	0x200008fc

080028ec <BME280_readBytes>:
void BME280_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest){
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af04      	add	r7, sp, #16
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	4603      	mov	r3, r0
 80028f6:	71fb      	strb	r3, [r7, #7]
 80028f8:	460b      	mov	r3, r1
 80028fa:	71bb      	strb	r3, [r7, #6]
 80028fc:	4613      	mov	r3, r2
 80028fe:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(bme280.hi2c, address, subAddress, 1, (uint8_t*)dest, count, BME_DEFAULT_TIMEOUT);
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <BME280_readBytes+0x40>)
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	b299      	uxth	r1, r3
 8002908:	79bb      	ldrb	r3, [r7, #6]
 800290a:	b29c      	uxth	r4, r3
 800290c:	797b      	ldrb	r3, [r7, #5]
 800290e:	b29b      	uxth	r3, r3
 8002910:	2264      	movs	r2, #100	; 0x64
 8002912:	9202      	str	r2, [sp, #8]
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2301      	movs	r3, #1
 800291c:	4622      	mov	r2, r4
 800291e:	f013 ff21 	bl	8016764 <HAL_I2C_Mem_Read>
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	bd90      	pop	{r4, r7, pc}
 800292a:	bf00      	nop
 800292c:	200008fc 	.word	0x200008fc

08002930 <TM_GPS_Init>:
#define TM_GPS_INT_Add2CRC(c)                            (TM_GPS_CRC ^= c)
#define TM_GPS_INT_ReturnWithStatus(GPS_Data, status)    (GPS_Data)->Status = status; return status;
#define TM_GPS_INT_SetFlag(flag)                         (GPS_Flags |= (flag))

/* Public */
void TM_GPS_Init(UART_HandleTypeDef* huart) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
	/* Initialize USART */
	TM_GPS_FirstTime = 1;
 8002938:	4b46      	ldr	r3, [pc, #280]	; (8002a54 <TM_GPS_Init+0x124>)
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
	
	/* Reset everything */
	gpsUart.gpsData.CustomStatementsCount = 0;
 800293e:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <TM_GPS_Init+0x128>)
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	
	/* Clear all flags */
	TM_GPS_INT_ClearFlags(&gpsUart.gpsData);
 8002946:	4844      	ldr	r0, [pc, #272]	; (8002a58 <TM_GPS_Init+0x128>)
 8002948:	f001 f9f6 	bl	8003d38 <TM_GPS_INT_ClearFlags>
	
	/* Set flags used */
#ifndef GPS_DISABLE_GPGGA
	GPS_Flags_OK |= GPS_FLAG_LATITUDE;
 800294c:	4b43      	ldr	r3, [pc, #268]	; (8002a5c <TM_GPS_Init+0x12c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	4a41      	ldr	r2, [pc, #260]	; (8002a5c <TM_GPS_Init+0x12c>)
 8002956:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_NS;
 8002958:	4b40      	ldr	r3, [pc, #256]	; (8002a5c <TM_GPS_Init+0x12c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002960:	4a3e      	ldr	r2, [pc, #248]	; (8002a5c <TM_GPS_Init+0x12c>)
 8002962:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_LONGITUDE;
 8002964:	4b3d      	ldr	r3, [pc, #244]	; (8002a5c <TM_GPS_Init+0x12c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	4a3b      	ldr	r2, [pc, #236]	; (8002a5c <TM_GPS_Init+0x12c>)
 800296e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_EW;
 8002970:	4b3a      	ldr	r3, [pc, #232]	; (8002a5c <TM_GPS_Init+0x12c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f043 0320 	orr.w	r3, r3, #32
 8002978:	4a38      	ldr	r2, [pc, #224]	; (8002a5c <TM_GPS_Init+0x12c>)
 800297a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS;
 800297c:	4b37      	ldr	r3, [pc, #220]	; (8002a5c <TM_GPS_Init+0x12c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	4a35      	ldr	r2, [pc, #212]	; (8002a5c <TM_GPS_Init+0x12c>)
 8002986:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIX;
 8002988:	4b34      	ldr	r3, [pc, #208]	; (8002a5c <TM_GPS_Init+0x12c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f043 0308 	orr.w	r3, r3, #8
 8002990:	4a32      	ldr	r2, [pc, #200]	; (8002a5c <TM_GPS_Init+0x12c>)
 8002992:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_ALTITUDE;
 8002994:	4b31      	ldr	r3, [pc, #196]	; (8002a5c <TM_GPS_Init+0x12c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f043 0310 	orr.w	r3, r3, #16
 800299c:	4a2f      	ldr	r2, [pc, #188]	; (8002a5c <TM_GPS_Init+0x12c>)
 800299e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_TIME;
 80029a0:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <TM_GPS_Init+0x12c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a8:	4a2c      	ldr	r2, [pc, #176]	; (8002a5c <TM_GPS_Init+0x12c>)
 80029aa:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPRMC
	GPS_Flags_OK |= GPS_FLAG_SPEED;
 80029ac:	4b2b      	ldr	r3, [pc, #172]	; (8002a5c <TM_GPS_Init+0x12c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b4:	4a29      	ldr	r2, [pc, #164]	; (8002a5c <TM_GPS_Init+0x12c>)
 80029b6:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DATE;
 80029b8:	4b28      	ldr	r3, [pc, #160]	; (8002a5c <TM_GPS_Init+0x12c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029c0:	4a26      	ldr	r2, [pc, #152]	; (8002a5c <TM_GPS_Init+0x12c>)
 80029c2:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VALIDITY;
 80029c4:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <TM_GPS_Init+0x12c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029cc:	4a23      	ldr	r2, [pc, #140]	; (8002a5c <TM_GPS_Init+0x12c>)
 80029ce:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DIRECTION;
 80029d0:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <TM_GPS_Init+0x12c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d8:	4a20      	ldr	r2, [pc, #128]	; (8002a5c <TM_GPS_Init+0x12c>)
 80029da:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSA
	GPS_Flags_OK |= GPS_FLAG_HDOP;
 80029dc:	4b1f      	ldr	r3, [pc, #124]	; (8002a5c <TM_GPS_Init+0x12c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029e4:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <TM_GPS_Init+0x12c>)
 80029e6:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VDOP;
 80029e8:	4b1c      	ldr	r3, [pc, #112]	; (8002a5c <TM_GPS_Init+0x12c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029f0:	4a1a      	ldr	r2, [pc, #104]	; (8002a5c <TM_GPS_Init+0x12c>)
 80029f2:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_PDOP;
 80029f4:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <TM_GPS_Init+0x12c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029fc:	4a17      	ldr	r2, [pc, #92]	; (8002a5c <TM_GPS_Init+0x12c>)
 80029fe:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIXMODE;
 8002a00:	4b16      	ldr	r3, [pc, #88]	; (8002a5c <TM_GPS_Init+0x12c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a08:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <TM_GPS_Init+0x12c>)
 8002a0a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS1_12;
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <TM_GPS_Init+0x12c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a14:	4a11      	ldr	r2, [pc, #68]	; (8002a5c <TM_GPS_Init+0x12c>)
 8002a16:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSV	
	GPS_Flags_OK |= GPS_FLAG_SATSINVIEW;
 8002a18:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <TM_GPS_Init+0x12c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	4a0e      	ldr	r2, [pc, #56]	; (8002a5c <TM_GPS_Init+0x12c>)
 8002a22:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATSDESC;
 8002a24:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <TM_GPS_Init+0x12c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a2c:	4a0b      	ldr	r2, [pc, #44]	; (8002a5c <TM_GPS_Init+0x12c>)
 8002a2e:	6013      	str	r3, [r2, #0]
#endif
	gpsUart.huart = huart;
 8002a30:	4a09      	ldr	r2, [pc, #36]	; (8002a58 <TM_GPS_Init+0x128>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
	HAL_UART_Receive_DMA(gpsUart.huart, gpsUart.GPS_DmaBuf, GPS_DMA_BUF_SIZE);
 8002a38:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <TM_GPS_Init+0x128>)
 8002a3a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8002a3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a42:	4907      	ldr	r1, [pc, #28]	; (8002a60 <TM_GPS_Init+0x130>)
 8002a44:	4618      	mov	r0, r3
 8002a46:	f019 fcc3 	bl	801c3d0 <HAL_UART_Receive_DMA>
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000a90 	.word	0x20000a90
 8002a58:	20001230 	.word	0x20001230
 8002a5c:	20000960 	.word	0x20000960
 8002a60:	2000135c 	.word	0x2000135c

08002a64 <TM_GPS_Update>:

TM_GPS_Result_t TM_GPS_Update() {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0

	TM_GPS_Result_t result = TM_GPS_Result_OldData;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	71fb      	strb	r3, [r7, #7]
//	HAL_UART_Transmit(&huart3, GPS_DmaBuf, GPS_DMA_BUF_SIZE, 100);
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 8002a6e:	2300      	movs	r3, #0
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	e013      	b.n	8002a9c <TM_GPS_Update+0x38>
		TM_GPS_INT_Do(&gpsUart.gpsData, (char)gpsUart.GPS_DmaBuf[i]);
 8002a74:	4a13      	ldr	r2, [pc, #76]	; (8002ac4 <TM_GPS_Update+0x60>)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4619      	mov	r1, r3
 8002a82:	4810      	ldr	r0, [pc, #64]	; (8002ac4 <TM_GPS_Update+0x60>)
 8002a84:	f000 f8da 	bl	8002c3c <TM_GPS_INT_Do>
		if (gpsUart.gpsData.Status == TM_GPS_Result_NewData) {
 8002a88:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <TM_GPS_Update+0x60>)
 8002a8a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <TM_GPS_Update+0x32>
//			return gps.Status;
//			gps->Status = TM_GPS_Result_OldData;
			result = TM_GPS_Result_NewData;
 8002a92:	2300      	movs	r3, #0
 8002a94:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002aa2:	dbe7      	blt.n	8002a74 <TM_GPS_Update+0x10>
		}
	}
//	}
	
	if (TM_GPS_FirstTime) {
 8002aa4:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <TM_GPS_Update+0x64>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <TM_GPS_Update+0x54>
		/* No any valid data, return First Data Waiting */
		/* Returning only after power up and calling when no all data is received */
		TM_GPS_INT_ReturnWithStatus(&gpsUart.gpsData, TM_GPS_Result_FirstDataWaiting);
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <TM_GPS_Update+0x60>)
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e000      	b.n	8002aba <TM_GPS_Update+0x56>
	}
	
	/* We have old data */
//	TM_GPS_INT_ReturnWithStatus(&gpsUart.gpsData, TM_GPS_Result_OldData);

	return result;
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20001230 	.word	0x20001230
 8002ac8:	20000a90 	.word	0x20000a90

08002acc <TM_GPS_ConvertSpeed>:
	
	return temp;										/* Return pointer */
}
#endif

float TM_GPS_ConvertSpeed(float SpeedInKnots, TM_GPS_Speed_t toSpeed) {
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	ed87 0a01 	vstr	s0, [r7, #4]
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	70fb      	strb	r3, [r7, #3]
	switch ((uint8_t)toSpeed) {
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	2b0e      	cmp	r3, #14
 8002ade:	f200 8086 	bhi.w	8002bee <TM_GPS_ConvertSpeed+0x122>
 8002ae2:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <TM_GPS_ConvertSpeed+0x1c>)
 8002ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae8:	08002b25 	.word	0x08002b25
 8002aec:	08002b33 	.word	0x08002b33
 8002af0:	08002b41 	.word	0x08002b41
 8002af4:	08002b4f 	.word	0x08002b4f
 8002af8:	08002b5d 	.word	0x08002b5d
 8002afc:	08002b6b 	.word	0x08002b6b
 8002b00:	08002b79 	.word	0x08002b79
 8002b04:	08002b87 	.word	0x08002b87
 8002b08:	08002b95 	.word	0x08002b95
 8002b0c:	08002ba3 	.word	0x08002ba3
 8002b10:	08002bb1 	.word	0x08002bb1
 8002b14:	08002bbf 	.word	0x08002bbf
 8002b18:	08002bcd 	.word	0x08002bcd
 8002b1c:	08002bdb 	.word	0x08002bdb
 8002b20:	08002be9 	.word	0x08002be9
		/* Metric */
		case TM_GPS_Speed_KilometerPerSecond:	return SpeedInKnots * 0.000514f;
 8002b24:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b28:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002c00 <TM_GPS_ConvertSpeed+0x134>
 8002b2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b30:	e05f      	b.n	8002bf2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MeterPerSecond: 		return SpeedInKnots * 0.5144f;
 8002b32:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b36:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002c04 <TM_GPS_ConvertSpeed+0x138>
 8002b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b3e:	e058      	b.n	8002bf2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_KilometerPerHour:	 	return SpeedInKnots * 1.852f;
 8002b40:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b44:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002c08 <TM_GPS_ConvertSpeed+0x13c>
 8002b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b4c:	e051      	b.n	8002bf2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MeterPerMinute: 		return SpeedInKnots * 30.87f;
 8002b4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b52:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002c0c <TM_GPS_ConvertSpeed+0x140>
 8002b56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b5a:	e04a      	b.n	8002bf2 <TM_GPS_ConvertSpeed+0x126>
		
		/* Imperial */
		case TM_GPS_Speed_MilePerSecond: 		return SpeedInKnots * 0.0003197f;
 8002b5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b60:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002c10 <TM_GPS_ConvertSpeed+0x144>
 8002b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b68:	e043      	b.n	8002bf2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MilePerHour: 			return SpeedInKnots * 1.151f;
 8002b6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b6e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002c14 <TM_GPS_ConvertSpeed+0x148>
 8002b72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b76:	e03c      	b.n	8002bf2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_FootPerSecond: 		return SpeedInKnots * 1.688f;
 8002b78:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b7c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002c18 <TM_GPS_ConvertSpeed+0x14c>
 8002b80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b84:	e035      	b.n	8002bf2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_FootPerMinute: 		return SpeedInKnots * 101.3f;
 8002b86:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b8a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002c1c <TM_GPS_ConvertSpeed+0x150>
 8002b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b92:	e02e      	b.n	8002bf2 <TM_GPS_ConvertSpeed+0x126>
		
		/* For Runners and Joggers */
		case TM_GPS_Speed_MinutePerKilometer: 	return SpeedInKnots * 32.4f;
 8002b94:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b98:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002c20 <TM_GPS_ConvertSpeed+0x154>
 8002b9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ba0:	e027      	b.n	8002bf2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPerKilometer: 	return SpeedInKnots * 1944.0f;
 8002ba2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ba6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002c24 <TM_GPS_ConvertSpeed+0x158>
 8002baa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bae:	e020      	b.n	8002bf2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPer100Meters: 	return SpeedInKnots * 194.4f;
 8002bb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bb4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002c28 <TM_GPS_ConvertSpeed+0x15c>
 8002bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bbc:	e019      	b.n	8002bf2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MinutePerMile: 		return SpeedInKnots * 52.14f;
 8002bbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bc2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002c2c <TM_GPS_ConvertSpeed+0x160>
 8002bc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bca:	e012      	b.n	8002bf2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPerMile: 		return SpeedInKnots * 3128.0f;
 8002bcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bd0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002c30 <TM_GPS_ConvertSpeed+0x164>
 8002bd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bd8:	e00b      	b.n	8002bf2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPer100Yards: 	return SpeedInKnots * 177.7f;
 8002bda:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bde:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002c34 <TM_GPS_ConvertSpeed+0x168>
 8002be2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002be6:	e004      	b.n	8002bf2 <TM_GPS_ConvertSpeed+0x126>
		
		/* Nautical */
		case TM_GPS_Speed_SeaMilePerHour: 		return SpeedInKnots * 1.0f;
 8002be8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bec:	e001      	b.n	8002bf2 <TM_GPS_ConvertSpeed+0x126>
		default:
			return 0;
 8002bee:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002c38 <TM_GPS_ConvertSpeed+0x16c>
	}
}
 8002bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	3a06bdf5 	.word	0x3a06bdf5
 8002c04:	3f03afb8 	.word	0x3f03afb8
 8002c08:	3fed0e56 	.word	0x3fed0e56
 8002c0c:	41f6f5c3 	.word	0x41f6f5c3
 8002c10:	39a79d68 	.word	0x39a79d68
 8002c14:	3f9353f8 	.word	0x3f9353f8
 8002c18:	3fd81062 	.word	0x3fd81062
 8002c1c:	42ca999a 	.word	0x42ca999a
 8002c20:	4201999a 	.word	0x4201999a
 8002c24:	44f30000 	.word	0x44f30000
 8002c28:	43426666 	.word	0x43426666
 8002c2c:	42508f5c 	.word	0x42508f5c
 8002c30:	45438000 	.word	0x45438000
 8002c34:	4331b333 	.word	0x4331b333
 8002c38:	00000000 	.word	0x00000000

08002c3c <TM_GPS_INT_Do>:
		Distance_Data->Bearing += 360;
	}
}

/* Private */
TM_GPS_Result_t TM_GPS_INT_Do(TM_GPS_t* GPS_Data, char c) {
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	70fb      	strb	r3, [r7, #3]
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f001 f847 	bl	8003cdc <TM_GPS_INT_FlagsOk>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d006      	beq.n	8002c62 <TM_GPS_INT_Do+0x26>
		TM_GPS_INT_ClearFlags(GPS_Data);				/* Data were valid before, new data are coming, not new anymore */
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f001 f86f 	bl	8003d38 <TM_GPS_INT_ClearFlags>
		GPS_Data->Status = TM_GPS_Result_OldData;		/* Data were "new" on last call, now are only "Old data", no NEW data */
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	}
	if (c == '$') {										/* Start of string detected */
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	2b24      	cmp	r3, #36	; 0x24
 8002c66:	d116      	bne.n	8002c96 <TM_GPS_INT_Do+0x5a>
		TM_GPS_Star = 0;								/* Star detection reset */
 8002c68:	4b5d      	ldr	r3, [pc, #372]	; (8002de0 <TM_GPS_INT_Do+0x1a4>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
		TM_GPS_CRC = 0;									/* Reset CRC */
 8002c6e:	4b5d      	ldr	r3, [pc, #372]	; (8002de4 <TM_GPS_INT_Do+0x1a8>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
		GPS_Term_Number = 0;							/* First term in new statement */
 8002c74:	4b5c      	ldr	r3, [pc, #368]	; (8002de8 <TM_GPS_INT_Do+0x1ac>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002c7a:	4b5c      	ldr	r3, [pc, #368]	; (8002dec <TM_GPS_INT_Do+0x1b0>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = c;					/* Add character to first term */
 8002c80:	4b5a      	ldr	r3, [pc, #360]	; (8002dec <TM_GPS_INT_Do+0x1b0>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	b2d1      	uxtb	r1, r2
 8002c88:	4a58      	ldr	r2, [pc, #352]	; (8002dec <TM_GPS_INT_Do+0x1b0>)
 8002c8a:	7011      	strb	r1, [r2, #0]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4a58      	ldr	r2, [pc, #352]	; (8002df0 <TM_GPS_INT_Do+0x1b4>)
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	5453      	strb	r3, [r2, r1]
 8002c94:	e09b      	b.n	8002dce <TM_GPS_INT_Do+0x192>
	} else if (c == ',') {
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	2b2c      	cmp	r3, #44	; 0x2c
 8002c9a:	d120      	bne.n	8002cde <TM_GPS_INT_Do+0xa2>
		TM_GPS_INT_Add2CRC(c);							/* Add to parity */
 8002c9c:	4b51      	ldr	r3, [pc, #324]	; (8002de4 <TM_GPS_INT_Do+0x1a8>)
 8002c9e:	781a      	ldrb	r2, [r3, #0]
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	4053      	eors	r3, r2
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	4b4f      	ldr	r3, [pc, #316]	; (8002de4 <TM_GPS_INT_Do+0x1a8>)
 8002ca8:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of term */
 8002caa:	4b50      	ldr	r3, [pc, #320]	; (8002dec <TM_GPS_INT_Do+0x1b0>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	b2d1      	uxtb	r1, r2
 8002cb2:	4a4e      	ldr	r2, [pc, #312]	; (8002dec <TM_GPS_INT_Do+0x1b0>)
 8002cb4:	7011      	strb	r1, [r2, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	4b4d      	ldr	r3, [pc, #308]	; (8002df0 <TM_GPS_INT_Do+0x1b4>)
 8002cba:	2100      	movs	r1, #0
 8002cbc:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check if term is empty */
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f001 f85e 	bl	8003d80 <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f89f 	bl	8002e08 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 8002cca:	4b47      	ldr	r3, [pc, #284]	; (8002de8 <TM_GPS_INT_Do+0x1ac>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	4b45      	ldr	r3, [pc, #276]	; (8002de8 <TM_GPS_INT_Do+0x1ac>)
 8002cd4:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002cd6:	4b45      	ldr	r3, [pc, #276]	; (8002dec <TM_GPS_INT_Do+0x1b0>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
 8002cdc:	e077      	b.n	8002dce <TM_GPS_INT_Do+0x192>
	} else if (c == '\n') {
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	2b0a      	cmp	r3, #10
 8002ce2:	d113      	bne.n	8002d0c <TM_GPS_INT_Do+0xd0>
		GPS_Term_Number = 0;							/* Reset term number */
 8002ce4:	4b40      	ldr	r3, [pc, #256]	; (8002de8 <TM_GPS_INT_Do+0x1ac>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
#ifndef GPS_DISABLE_GPGSV
		/* Check for GPGSV statement */
		if (TM_GPS_Statement == GPS_GPGSV && GPGSV_StatementsCount == GPSGV_StatementNumber) {
 8002cea:	4b42      	ldr	r3, [pc, #264]	; (8002df4 <TM_GPS_INT_Do+0x1b8>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d16d      	bne.n	8002dce <TM_GPS_INT_Do+0x192>
 8002cf2:	4b41      	ldr	r3, [pc, #260]	; (8002df8 <TM_GPS_INT_Do+0x1bc>)
 8002cf4:	781a      	ldrb	r2, [r3, #0]
 8002cf6:	4b41      	ldr	r3, [pc, #260]	; (8002dfc <TM_GPS_INT_Do+0x1c0>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d167      	bne.n	8002dce <TM_GPS_INT_Do+0x192>
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSDESC);		/* Set flag */
 8002cfe:	4b40      	ldr	r3, [pc, #256]	; (8002e00 <TM_GPS_INT_Do+0x1c4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d06:	4a3e      	ldr	r2, [pc, #248]	; (8002e00 <TM_GPS_INT_Do+0x1c4>)
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e060      	b.n	8002dce <TM_GPS_INT_Do+0x192>
		}
#endif
	} else if (c == '\r') {
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	2b0d      	cmp	r3, #13
 8002d10:	d128      	bne.n	8002d64 <TM_GPS_INT_Do+0x128>
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of character string */
 8002d12:	4b36      	ldr	r3, [pc, #216]	; (8002dec <TM_GPS_INT_Do+0x1b0>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	b2d1      	uxtb	r1, r2
 8002d1a:	4a34      	ldr	r2, [pc, #208]	; (8002dec <TM_GPS_INT_Do+0x1b0>)
 8002d1c:	7011      	strb	r1, [r2, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4b33      	ldr	r3, [pc, #204]	; (8002df0 <TM_GPS_INT_Do+0x1b4>)
 8002d22:	2100      	movs	r1, #0
 8002d24:	5499      	strb	r1, [r3, r2]
		TM_GPS_CRC_Received = TM_GPS_INT_Hex2Dec(GPS_Term[0]) * 16 + TM_GPS_INT_Hex2Dec(GPS_Term[1]);	/* Between * and \r are 2 characters of Checksum */
 8002d26:	4b32      	ldr	r3, [pc, #200]	; (8002df0 <TM_GPS_INT_Do+0x1b4>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 ffac 	bl	8003c88 <TM_GPS_INT_Hex2Dec>
 8002d30:	4603      	mov	r3, r0
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	b2dc      	uxtb	r4, r3
 8002d36:	4b2e      	ldr	r3, [pc, #184]	; (8002df0 <TM_GPS_INT_Do+0x1b4>)
 8002d38:	785b      	ldrb	r3, [r3, #1]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 ffa4 	bl	8003c88 <TM_GPS_INT_Hex2Dec>
 8002d40:	4603      	mov	r3, r0
 8002d42:	4423      	add	r3, r4
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	4b2f      	ldr	r3, [pc, #188]	; (8002e04 <TM_GPS_INT_Do+0x1c8>)
 8002d48:	701a      	strb	r2, [r3, #0]
		if (TM_GPS_CRC_Received != TM_GPS_CRC) {		/* CRC is not OK, data failed somewhere */			
 8002d4a:	4b2e      	ldr	r3, [pc, #184]	; (8002e04 <TM_GPS_INT_Do+0x1c8>)
 8002d4c:	781a      	ldrb	r2, [r3, #0]
 8002d4e:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <TM_GPS_INT_Do+0x1a8>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d002      	beq.n	8002d5c <TM_GPS_INT_Do+0x120>
			TM_GPS_INT_ClearFlags(GPS_Data);			/* Clear all flags */
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 ffee 	bl	8003d38 <TM_GPS_INT_ClearFlags>
		}
		GPS_Term_Number = 0;							/* Reset term number */
 8002d5c:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <TM_GPS_INT_Do+0x1ac>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	e034      	b.n	8002dce <TM_GPS_INT_Do+0x192>
	} else if (c == '*') {
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	2b2a      	cmp	r3, #42	; 0x2a
 8002d68:	d11c      	bne.n	8002da4 <TM_GPS_INT_Do+0x168>
		TM_GPS_Star = 1;								/* Star detected */
 8002d6a:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <TM_GPS_INT_Do+0x1a4>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* Add 0 at the end */
 8002d70:	4b1e      	ldr	r3, [pc, #120]	; (8002dec <TM_GPS_INT_Do+0x1b0>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	b2d1      	uxtb	r1, r2
 8002d78:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <TM_GPS_INT_Do+0x1b0>)
 8002d7a:	7011      	strb	r1, [r2, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4b1c      	ldr	r3, [pc, #112]	; (8002df0 <TM_GPS_INT_Do+0x1b4>)
 8002d80:	2100      	movs	r1, #0
 8002d82:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check empty */
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fffb 	bl	8003d80 <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */		
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f83c 	bl	8002e08 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 8002d90:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <TM_GPS_INT_Do+0x1ac>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	3301      	adds	r3, #1
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <TM_GPS_INT_Do+0x1ac>)
 8002d9a:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002d9c:	4b13      	ldr	r3, [pc, #76]	; (8002dec <TM_GPS_INT_Do+0x1b0>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
 8002da2:	e014      	b.n	8002dce <TM_GPS_INT_Do+0x192>
	} else {
		/* Other characters detected */
		if (!TM_GPS_Star) {								/* If star is not detected yet */
 8002da4:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <TM_GPS_INT_Do+0x1a4>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d106      	bne.n	8002dba <TM_GPS_INT_Do+0x17e>
			TM_GPS_INT_Add2CRC(c);						/* Add to parity */
 8002dac:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <TM_GPS_INT_Do+0x1a8>)
 8002dae:	781a      	ldrb	r2, [r3, #0]
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	4053      	eors	r3, r2
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <TM_GPS_INT_Do+0x1a8>)
 8002db8:	701a      	strb	r2, [r3, #0]
		}
		GPS_Term[GPS_Term_Pos++] = c;					/* Add to term */
 8002dba:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <TM_GPS_INT_Do+0x1b0>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	b2d1      	uxtb	r1, r2
 8002dc2:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <TM_GPS_INT_Do+0x1b0>)
 8002dc4:	7011      	strb	r1, [r2, #0]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4a09      	ldr	r2, [pc, #36]	; (8002df0 <TM_GPS_INT_Do+0x1b4>)
 8002dca:	78fb      	ldrb	r3, [r7, #3]
 8002dcc:	5453      	strb	r3, [r2, r1]
	}
	return TM_GPS_INT_Return(GPS_Data);					/* Return current GPS status */
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fe44 	bl	8003a5c <TM_GPS_INT_Return>
 8002dd4:	4603      	mov	r3, r0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd90      	pop	{r4, r7, pc}
 8002dde:	bf00      	nop
 8002de0:	2000095b 	.word	0x2000095b
 8002de4:	20000959 	.word	0x20000959
 8002de8:	20000957 	.word	0x20000957
 8002dec:	20000958 	.word	0x20000958
 8002df0:	20000948 	.word	0x20000948
 8002df4:	20000000 	.word	0x20000000
 8002df8:	20000a9b 	.word	0x20000a9b
 8002dfc:	20000a9c 	.word	0x20000a9c
 8002e00:	2000095c 	.word	0x2000095c
 8002e04:	2000095a 	.word	0x2000095a

08002e08 <TM_GPS_INT_CheckTerm>:

void TM_GPS_INT_CheckTerm(TM_GPS_t* GPS_Data) {
 8002e08:	b5b0      	push	{r4, r5, r7, lr}
 8002e0a:	ed2d 8b02 	vpush	{d8}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	uint32_t temp;
#ifndef GPS_DISABLE_GPGSA
	static uint8_t ids_count = 0;
#endif
	uint8_t count, i;
	if (GPS_Term_Number == 0) {
 8002e14:	48cb      	ldr	r0, [pc, #812]	; (8003144 <TM_GPS_INT_CheckTerm+0x33c>)
 8002e16:	7800      	ldrb	r0, [r0, #0]
 8002e18:	2800      	cmp	r0, #0
 8002e1a:	d134      	bne.n	8002e86 <TM_GPS_INT_CheckTerm+0x7e>
		/* Statement indicator */
		if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGGA")) {
 8002e1c:	49ca      	ldr	r1, [pc, #808]	; (8003148 <TM_GPS_INT_CheckTerm+0x340>)
 8002e1e:	48cb      	ldr	r0, [pc, #812]	; (800314c <TM_GPS_INT_CheckTerm+0x344>)
 8002e20:	f000 fecc 	bl	8003bbc <TM_GPS_INT_StringStartsWith>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <TM_GPS_INT_CheckTerm+0x2a>
			TM_GPS_Statement = GPS_GPGGA;
 8002e2a:	4bc9      	ldr	r3, [pc, #804]	; (8003150 <TM_GPS_INT_CheckTerm+0x348>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
 8002e30:	e023      	b.n	8002e7a <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPRMC")) {
 8002e32:	49c8      	ldr	r1, [pc, #800]	; (8003154 <TM_GPS_INT_CheckTerm+0x34c>)
 8002e34:	48c5      	ldr	r0, [pc, #788]	; (800314c <TM_GPS_INT_CheckTerm+0x344>)
 8002e36:	f000 fec1 	bl	8003bbc <TM_GPS_INT_StringStartsWith>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <TM_GPS_INT_CheckTerm+0x40>
			TM_GPS_Statement = GPS_GPRMC;
 8002e40:	4bc3      	ldr	r3, [pc, #780]	; (8003150 <TM_GPS_INT_CheckTerm+0x348>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
 8002e46:	e018      	b.n	8002e7a <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSA")) {
 8002e48:	49c3      	ldr	r1, [pc, #780]	; (8003158 <TM_GPS_INT_CheckTerm+0x350>)
 8002e4a:	48c0      	ldr	r0, [pc, #768]	; (800314c <TM_GPS_INT_CheckTerm+0x344>)
 8002e4c:	f000 feb6 	bl	8003bbc <TM_GPS_INT_StringStartsWith>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <TM_GPS_INT_CheckTerm+0x56>
			TM_GPS_Statement = GPS_GPGSA;
 8002e56:	4bbe      	ldr	r3, [pc, #760]	; (8003150 <TM_GPS_INT_CheckTerm+0x348>)
 8002e58:	2202      	movs	r2, #2
 8002e5a:	701a      	strb	r2, [r3, #0]
 8002e5c:	e00d      	b.n	8002e7a <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSV")) {
 8002e5e:	49bf      	ldr	r1, [pc, #764]	; (800315c <TM_GPS_INT_CheckTerm+0x354>)
 8002e60:	48ba      	ldr	r0, [pc, #744]	; (800314c <TM_GPS_INT_CheckTerm+0x344>)
 8002e62:	f000 feab 	bl	8003bbc <TM_GPS_INT_StringStartsWith>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <TM_GPS_INT_CheckTerm+0x6c>
			TM_GPS_Statement = GPS_GPGSV;
 8002e6c:	4bb8      	ldr	r3, [pc, #736]	; (8003150 <TM_GPS_INT_CheckTerm+0x348>)
 8002e6e:	2203      	movs	r2, #3
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	e002      	b.n	8002e7a <TM_GPS_INT_CheckTerm+0x72>
		} else {
			TM_GPS_Statement = GPS_ERR;
 8002e74:	4bb6      	ldr	r3, [pc, #728]	; (8003150 <TM_GPS_INT_CheckTerm+0x348>)
 8002e76:	2204      	movs	r2, #4
 8002e78:	701a      	strb	r2, [r3, #0]
		}
		
		strcpy(GPS_Statement_Name, GPS_Term);			/* Copy term to variable */
 8002e7a:	49b4      	ldr	r1, [pc, #720]	; (800314c <TM_GPS_INT_CheckTerm+0x344>)
 8002e7c:	48b8      	ldr	r0, [pc, #736]	; (8003160 <TM_GPS_INT_CheckTerm+0x358>)
 8002e7e:	f027 f983 	bl	802a188 <strcpy>
 8002e82:	f000 bdd1 	b.w	8003a28 <TM_GPS_INT_CheckTerm+0xc20>
			}
		}
	}
#endif
	
	switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 8002e86:	48b2      	ldr	r0, [pc, #712]	; (8003150 <TM_GPS_INT_CheckTerm+0x348>)
 8002e88:	7800      	ldrb	r0, [r0, #0]
 8002e8a:	0140      	lsls	r0, r0, #5
 8002e8c:	4dad      	ldr	r5, [pc, #692]	; (8003144 <TM_GPS_INT_CheckTerm+0x33c>)
 8002e8e:	782d      	ldrb	r5, [r5, #0]
 8002e90:	4328      	orrs	r0, r5
 8002e92:	3801      	subs	r0, #1
 8002e94:	2862      	cmp	r0, #98	; 0x62
 8002e96:	f200 852f 	bhi.w	80038f8 <TM_GPS_INT_CheckTerm+0xaf0>
 8002e9a:	a501      	add	r5, pc, #4	; (adr r5, 8002ea0 <TM_GPS_INT_CheckTerm+0x98>)
 8002e9c:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 8002ea0:	08003449 	.word	0x08003449
 8002ea4:	0800302d 	.word	0x0800302d
 8002ea8:	0800311b 	.word	0x0800311b
 8002eac:	08003179 	.word	0x08003179
 8002eb0:	08003267 	.word	0x08003267
 8002eb4:	080032b1 	.word	0x080032b1
 8002eb8:	0800328f 	.word	0x0800328f
 8002ebc:	080038f9 	.word	0x080038f9
 8002ec0:	080032d3 	.word	0x080032d3
 8002ec4:	080038f9 	.word	0x080038f9
 8002ec8:	080038f9 	.word	0x080038f9
 8002ecc:	080038f9 	.word	0x080038f9
 8002ed0:	080038f9 	.word	0x080038f9
 8002ed4:	080038f9 	.word	0x080038f9
 8002ed8:	080038f9 	.word	0x080038f9
 8002edc:	080038f9 	.word	0x080038f9
 8002ee0:	080038f9 	.word	0x080038f9
 8002ee4:	080038f9 	.word	0x080038f9
 8002ee8:	080038f9 	.word	0x080038f9
 8002eec:	080038f9 	.word	0x080038f9
 8002ef0:	080038f9 	.word	0x080038f9
 8002ef4:	080038f9 	.word	0x080038f9
 8002ef8:	080038f9 	.word	0x080038f9
 8002efc:	080038f9 	.word	0x080038f9
 8002f00:	080038f9 	.word	0x080038f9
 8002f04:	080038f9 	.word	0x080038f9
 8002f08:	080038f9 	.word	0x080038f9
 8002f0c:	080038f9 	.word	0x080038f9
 8002f10:	080038f9 	.word	0x080038f9
 8002f14:	080038f9 	.word	0x080038f9
 8002f18:	080038f9 	.word	0x080038f9
 8002f1c:	080038f9 	.word	0x080038f9
 8002f20:	080038f9 	.word	0x080038f9
 8002f24:	0800363f 	.word	0x0800363f
 8002f28:	080038f9 	.word	0x080038f9
 8002f2c:	080038f9 	.word	0x080038f9
 8002f30:	080038f9 	.word	0x080038f9
 8002f34:	080038f9 	.word	0x080038f9
 8002f38:	08003507 	.word	0x08003507
 8002f3c:	08003663 	.word	0x08003663
 8002f40:	080035a5 	.word	0x080035a5
 8002f44:	080038f9 	.word	0x080038f9
 8002f48:	080038f9 	.word	0x080038f9
 8002f4c:	080038f9 	.word	0x080038f9
 8002f50:	080038f9 	.word	0x080038f9
 8002f54:	080038f9 	.word	0x080038f9
 8002f58:	080038f9 	.word	0x080038f9
 8002f5c:	080038f9 	.word	0x080038f9
 8002f60:	080038f9 	.word	0x080038f9
 8002f64:	080038f9 	.word	0x080038f9
 8002f68:	080038f9 	.word	0x080038f9
 8002f6c:	080038f9 	.word	0x080038f9
 8002f70:	080038f9 	.word	0x080038f9
 8002f74:	080038f9 	.word	0x080038f9
 8002f78:	080038f9 	.word	0x080038f9
 8002f7c:	080038f9 	.word	0x080038f9
 8002f80:	080038f9 	.word	0x080038f9
 8002f84:	080038f9 	.word	0x080038f9
 8002f88:	080038f9 	.word	0x080038f9
 8002f8c:	080038f9 	.word	0x080038f9
 8002f90:	080038f9 	.word	0x080038f9
 8002f94:	080038f9 	.word	0x080038f9
 8002f98:	080038f9 	.word	0x080038f9
 8002f9c:	080038f9 	.word	0x080038f9
 8002fa0:	080038f9 	.word	0x080038f9
 8002fa4:	08003865 	.word	0x08003865
 8002fa8:	08003889 	.word	0x08003889
 8002fac:	08003889 	.word	0x08003889
 8002fb0:	08003889 	.word	0x08003889
 8002fb4:	08003889 	.word	0x08003889
 8002fb8:	08003889 	.word	0x08003889
 8002fbc:	08003889 	.word	0x08003889
 8002fc0:	08003889 	.word	0x08003889
 8002fc4:	08003889 	.word	0x08003889
 8002fc8:	08003889 	.word	0x08003889
 8002fcc:	08003889 	.word	0x08003889
 8002fd0:	08003889 	.word	0x08003889
 8002fd4:	08003889 	.word	0x08003889
 8002fd8:	08003771 	.word	0x08003771
 8002fdc:	080036dd 	.word	0x080036dd
 8002fe0:	080037eb 	.word	0x080037eb
 8002fe4:	080038f9 	.word	0x080038f9
 8002fe8:	080038f9 	.word	0x080038f9
 8002fec:	080038f9 	.word	0x080038f9
 8002ff0:	080038f9 	.word	0x080038f9
 8002ff4:	080038f9 	.word	0x080038f9
 8002ff8:	080038f9 	.word	0x080038f9
 8002ffc:	080038f9 	.word	0x080038f9
 8003000:	080038f9 	.word	0x080038f9
 8003004:	080038f9 	.word	0x080038f9
 8003008:	080038f9 	.word	0x080038f9
 800300c:	080038f9 	.word	0x080038f9
 8003010:	080038f9 	.word	0x080038f9
 8003014:	080038f9 	.word	0x080038f9
 8003018:	080038f9 	.word	0x080038f9
 800301c:	080038f9 	.word	0x080038f9
 8003020:	080038f9 	.word	0x080038f9
 8003024:	080038f9 	.word	0x080038f9
 8003028:	080038d5 	.word	0x080038d5
#ifndef GPS_DISABLE_GPGGA
		case GPS_POS_LATITUDE:	/* GPGGA */
			/* Convert latitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800302c:	f107 0308 	add.w	r3, r7, #8
 8003030:	4619      	mov	r1, r3
 8003032:	4846      	ldr	r0, [pc, #280]	; (800314c <TM_GPS_INT_CheckTerm+0x344>)
 8003034:	f000 fddf 	bl	8003bf6 <TM_GPS_INT_Atoi>
 8003038:	4603      	mov	r3, r0
 800303a:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude = temp / 100;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4a49      	ldr	r2, [pc, #292]	; (8003164 <TM_GPS_INT_CheckTerm+0x35c>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	095b      	lsrs	r3, r3, #5
 8003046:	4618      	mov	r0, r3
 8003048:	f7fd fa64 	bl	8000514 <__aeabi_ui2d>
 800304c:	4603      	mov	r3, r0
 800304e:	460c      	mov	r4, r1
 8003050:	4a45      	ldr	r2, [pc, #276]	; (8003168 <TM_GPS_INT_CheckTerm+0x360>)
 8003052:	e9c2 3400 	strd	r3, r4, [r2]
			TM_GPS_INT_Data.Latitude += (float)(temp % 100) / (float)60;
 8003056:	4b44      	ldr	r3, [pc, #272]	; (8003168 <TM_GPS_INT_CheckTerm+0x360>)
 8003058:	e9d3 4500 	ldrd	r4, r5, [r3]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	4b41      	ldr	r3, [pc, #260]	; (8003164 <TM_GPS_INT_CheckTerm+0x35c>)
 8003060:	fba3 1302 	umull	r1, r3, r3, r2
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	2164      	movs	r1, #100	; 0x64
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003076:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800316c <TM_GPS_INT_CheckTerm+0x364>
 800307a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800307e:	ee16 0a90 	vmov	r0, s13
 8003082:	f7fd fa69 	bl	8000558 <__aeabi_f2d>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4620      	mov	r0, r4
 800308c:	4629      	mov	r1, r5
 800308e:	f7fd f905 	bl	800029c <__adddf3>
 8003092:	4603      	mov	r3, r0
 8003094:	460c      	mov	r4, r1
 8003096:	4a34      	ldr	r2, [pc, #208]	; (8003168 <TM_GPS_INT_CheckTerm+0x360>)
 8003098:	e9c2 3400 	strd	r3, r4, [r2]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	3301      	adds	r3, #1
 80030a0:	73fb      	strb	r3, [r7, #15]
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	4a29      	ldr	r2, [pc, #164]	; (800314c <TM_GPS_INT_CheckTerm+0x344>)
 80030a6:	4413      	add	r3, r2
 80030a8:	f107 0208 	add.w	r2, r7, #8
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fda1 	bl	8003bf6 <TM_GPS_INT_Atoi>
 80030b4:	4603      	mov	r3, r0
 80030b6:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fa2a 	bl	8000514 <__aeabi_ui2d>
 80030c0:	4604      	mov	r4, r0
 80030c2:	460d      	mov	r5, r1
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	4619      	mov	r1, r3
 80030c8:	200a      	movs	r0, #10
 80030ca:	f000 fdc1 	bl	8003c50 <TM_GPS_INT_Pow>
 80030ce:	4603      	mov	r3, r0
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fd fa1f 	bl	8000514 <__aeabi_ui2d>
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	4b25      	ldr	r3, [pc, #148]	; (8003170 <TM_GPS_INT_CheckTerm+0x368>)
 80030dc:	f7fd fa94 	bl	8000608 <__aeabi_dmul>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4620      	mov	r0, r4
 80030e6:	4629      	mov	r1, r5
 80030e8:	f7fd fbb8 	bl	800085c <__aeabi_ddiv>
 80030ec:	4603      	mov	r3, r0
 80030ee:	460c      	mov	r4, r1
 80030f0:	4618      	mov	r0, r3
 80030f2:	4621      	mov	r1, r4
 80030f4:	4b1c      	ldr	r3, [pc, #112]	; (8003168 <TM_GPS_INT_CheckTerm+0x360>)
 80030f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030fa:	461a      	mov	r2, r3
 80030fc:	4623      	mov	r3, r4
 80030fe:	f7fd f8cd 	bl	800029c <__adddf3>
 8003102:	4603      	mov	r3, r0
 8003104:	460c      	mov	r4, r1
 8003106:	4a18      	ldr	r2, [pc, #96]	; (8003168 <TM_GPS_INT_CheckTerm+0x360>)
 8003108:	e9c2 3400 	strd	r3, r4, [r2]
			TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE);
 800310c:	4b19      	ldr	r3, [pc, #100]	; (8003174 <TM_GPS_INT_CheckTerm+0x36c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	4a17      	ldr	r2, [pc, #92]	; (8003174 <TM_GPS_INT_CheckTerm+0x36c>)
 8003116:	6013      	str	r3, [r2, #0]
			break;
 8003118:	e3f1      	b.n	80038fe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_NS: /* GPGGA */
			if (GPS_Term[0] == 'S') {
 800311a:	4b0c      	ldr	r3, [pc, #48]	; (800314c <TM_GPS_INT_CheckTerm+0x344>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b53      	cmp	r3, #83	; 0x53
 8003120:	d108      	bne.n	8003134 <TM_GPS_INT_CheckTerm+0x32c>
				TM_GPS_INT_Data.Latitude = -TM_GPS_INT_Data.Latitude;	/* South has negative coordinate */
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <TM_GPS_INT_CheckTerm+0x360>)
 8003124:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003128:	4619      	mov	r1, r3
 800312a:	f084 4200 	eor.w	r2, r4, #2147483648	; 0x80000000
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <TM_GPS_INT_CheckTerm+0x360>)
 8003130:	e9c3 1200 	strd	r1, r2, [r3]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_NS);
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <TM_GPS_INT_CheckTerm+0x36c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800313c:	4a0d      	ldr	r2, [pc, #52]	; (8003174 <TM_GPS_INT_CheckTerm+0x36c>)
 800313e:	6013      	str	r3, [r2, #0]
			break;
 8003140:	e3dd      	b.n	80038fe <TM_GPS_INT_CheckTerm+0xaf6>
 8003142:	bf00      	nop
 8003144:	20000957 	.word	0x20000957
 8003148:	0802d668 	.word	0x0802d668
 800314c:	20000948 	.word	0x20000948
 8003150:	20000000 	.word	0x20000000
 8003154:	0802d670 	.word	0x0802d670
 8003158:	0802d678 	.word	0x0802d678
 800315c:	0802d680 	.word	0x0802d680
 8003160:	20000a94 	.word	0x20000a94
 8003164:	51eb851f 	.word	0x51eb851f
 8003168:	20000968 	.word	0x20000968
 800316c:	42700000 	.word	0x42700000
 8003170:	404e0000 	.word	0x404e0000
 8003174:	2000095c 	.word	0x2000095c
		case GPS_POS_LONGITUDE: /* GPGGA */
			/* Convert longitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003178:	f107 0308 	add.w	r3, r7, #8
 800317c:	4619      	mov	r1, r3
 800317e:	48ab      	ldr	r0, [pc, #684]	; (800342c <TM_GPS_INT_CheckTerm+0x624>)
 8003180:	f000 fd39 	bl	8003bf6 <TM_GPS_INT_Atoi>
 8003184:	4603      	mov	r3, r0
 8003186:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude = temp / 100; /* Degrees */
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4aa9      	ldr	r2, [pc, #676]	; (8003430 <TM_GPS_INT_CheckTerm+0x628>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd f9be 	bl	8000514 <__aeabi_ui2d>
 8003198:	4603      	mov	r3, r0
 800319a:	460c      	mov	r4, r1
 800319c:	4aa5      	ldr	r2, [pc, #660]	; (8003434 <TM_GPS_INT_CheckTerm+0x62c>)
 800319e:	e9c2 3402 	strd	r3, r4, [r2, #8]
			TM_GPS_INT_Data.Longitude += (float)(temp % 100) / (float)60;
 80031a2:	4ba4      	ldr	r3, [pc, #656]	; (8003434 <TM_GPS_INT_CheckTerm+0x62c>)
 80031a4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	4ba1      	ldr	r3, [pc, #644]	; (8003430 <TM_GPS_INT_CheckTerm+0x628>)
 80031ac:	fba3 1302 	umull	r1, r3, r3, r2
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	2164      	movs	r1, #100	; 0x64
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c2:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8003438 <TM_GPS_INT_CheckTerm+0x630>
 80031c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80031ca:	ee16 0a90 	vmov	r0, s13
 80031ce:	f7fd f9c3 	bl	8000558 <__aeabi_f2d>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4620      	mov	r0, r4
 80031d8:	4629      	mov	r1, r5
 80031da:	f7fd f85f 	bl	800029c <__adddf3>
 80031de:	4603      	mov	r3, r0
 80031e0:	460c      	mov	r4, r1
 80031e2:	4a94      	ldr	r2, [pc, #592]	; (8003434 <TM_GPS_INT_CheckTerm+0x62c>)
 80031e4:	e9c2 3402 	strd	r3, r4, [r2, #8]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	3301      	adds	r3, #1
 80031ec:	73fb      	strb	r3, [r7, #15]
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	4a8e      	ldr	r2, [pc, #568]	; (800342c <TM_GPS_INT_CheckTerm+0x624>)
 80031f2:	4413      	add	r3, r2
 80031f4:	f107 0208 	add.w	r2, r7, #8
 80031f8:	4611      	mov	r1, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fcfb 	bl	8003bf6 <TM_GPS_INT_Atoi>
 8003200:	4603      	mov	r3, r0
 8003202:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4618      	mov	r0, r3
 8003208:	f7fd f984 	bl	8000514 <__aeabi_ui2d>
 800320c:	4604      	mov	r4, r0
 800320e:	460d      	mov	r5, r1
 8003210:	7bfb      	ldrb	r3, [r7, #15]
 8003212:	4619      	mov	r1, r3
 8003214:	200a      	movs	r0, #10
 8003216:	f000 fd1b 	bl	8003c50 <TM_GPS_INT_Pow>
 800321a:	4603      	mov	r3, r0
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd f979 	bl	8000514 <__aeabi_ui2d>
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	4b85      	ldr	r3, [pc, #532]	; (800343c <TM_GPS_INT_CheckTerm+0x634>)
 8003228:	f7fd f9ee 	bl	8000608 <__aeabi_dmul>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4620      	mov	r0, r4
 8003232:	4629      	mov	r1, r5
 8003234:	f7fd fb12 	bl	800085c <__aeabi_ddiv>
 8003238:	4603      	mov	r3, r0
 800323a:	460c      	mov	r4, r1
 800323c:	4618      	mov	r0, r3
 800323e:	4621      	mov	r1, r4
 8003240:	4b7c      	ldr	r3, [pc, #496]	; (8003434 <TM_GPS_INT_CheckTerm+0x62c>)
 8003242:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003246:	461a      	mov	r2, r3
 8003248:	4623      	mov	r3, r4
 800324a:	f7fd f827 	bl	800029c <__adddf3>
 800324e:	4603      	mov	r3, r0
 8003250:	460c      	mov	r4, r1
 8003252:	4a78      	ldr	r2, [pc, #480]	; (8003434 <TM_GPS_INT_CheckTerm+0x62c>)
 8003254:	e9c2 3402 	strd	r3, r4, [r2, #8]
			TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE);
 8003258:	4b79      	ldr	r3, [pc, #484]	; (8003440 <TM_GPS_INT_CheckTerm+0x638>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f043 0302 	orr.w	r3, r3, #2
 8003260:	4a77      	ldr	r2, [pc, #476]	; (8003440 <TM_GPS_INT_CheckTerm+0x638>)
 8003262:	6013      	str	r3, [r2, #0]
			break;
 8003264:	e34b      	b.n	80038fe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_EW: /* GPGGA */
			if (GPS_Term[0] == 'W') {
 8003266:	4a71      	ldr	r2, [pc, #452]	; (800342c <TM_GPS_INT_CheckTerm+0x624>)
 8003268:	7812      	ldrb	r2, [r2, #0]
 800326a:	2a57      	cmp	r2, #87	; 0x57
 800326c:	d108      	bne.n	8003280 <TM_GPS_INT_CheckTerm+0x478>
				TM_GPS_INT_Data.Longitude = -TM_GPS_INT_Data.Longitude;	/* West has negative coordinate */
 800326e:	4a71      	ldr	r2, [pc, #452]	; (8003434 <TM_GPS_INT_CheckTerm+0x62c>)
 8003270:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 8003274:	460b      	mov	r3, r1
 8003276:	f082 4400 	eor.w	r4, r2, #2147483648	; 0x80000000
 800327a:	4a6e      	ldr	r2, [pc, #440]	; (8003434 <TM_GPS_INT_CheckTerm+0x62c>)
 800327c:	e9c2 3402 	strd	r3, r4, [r2, #8]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_EW);
 8003280:	4b6f      	ldr	r3, [pc, #444]	; (8003440 <TM_GPS_INT_CheckTerm+0x638>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f043 0320 	orr.w	r3, r3, #32
 8003288:	4a6d      	ldr	r2, [pc, #436]	; (8003440 <TM_GPS_INT_CheckTerm+0x638>)
 800328a:	6013      	str	r3, [r2, #0]
			break;
 800328c:	e337      	b.n	80038fe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_SATS: /* GPGGA */
			/* Satellites in use */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 800328e:	f107 0308 	add.w	r3, r7, #8
 8003292:	4619      	mov	r1, r3
 8003294:	4865      	ldr	r0, [pc, #404]	; (800342c <TM_GPS_INT_CheckTerm+0x624>)
 8003296:	f000 fcae 	bl	8003bf6 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Satellites = temp;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	4b65      	ldr	r3, [pc, #404]	; (8003434 <TM_GPS_INT_CheckTerm+0x62c>)
 80032a0:	751a      	strb	r2, [r3, #20]
			TM_GPS_INT_SetFlag(GPS_FLAG_SATS);
 80032a2:	4b67      	ldr	r3, [pc, #412]	; (8003440 <TM_GPS_INT_CheckTerm+0x638>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f043 0304 	orr.w	r3, r3, #4
 80032aa:	4a65      	ldr	r2, [pc, #404]	; (8003440 <TM_GPS_INT_CheckTerm+0x638>)
 80032ac:	6013      	str	r3, [r2, #0]
			break;
 80032ae:	e326      	b.n	80038fe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_FIX: /* GPGGA */
			/* GPS Fix */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 80032b0:	f107 0308 	add.w	r3, r7, #8
 80032b4:	4619      	mov	r1, r3
 80032b6:	485d      	ldr	r0, [pc, #372]	; (800342c <TM_GPS_INT_CheckTerm+0x624>)
 80032b8:	f000 fc9d 	bl	8003bf6 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Fix = temp;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	4b5c      	ldr	r3, [pc, #368]	; (8003434 <TM_GPS_INT_CheckTerm+0x62c>)
 80032c2:	755a      	strb	r2, [r3, #21]
			TM_GPS_INT_SetFlag(GPS_FLAG_FIX);
 80032c4:	4b5e      	ldr	r3, [pc, #376]	; (8003440 <TM_GPS_INT_CheckTerm+0x638>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f043 0308 	orr.w	r3, r3, #8
 80032cc:	4a5c      	ldr	r2, [pc, #368]	; (8003440 <TM_GPS_INT_CheckTerm+0x638>)
 80032ce:	6013      	str	r3, [r2, #0]
			break;
 80032d0:	e315      	b.n	80038fe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_ALTITUDE: /* GPGGA */
			/* Convert altitude above sea */
			if (GPS_Term[0] == '-') {
 80032d2:	4b56      	ldr	r3, [pc, #344]	; (800342c <TM_GPS_INT_CheckTerm+0x624>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b2d      	cmp	r3, #45	; 0x2d
 80032d8:	d156      	bne.n	8003388 <TM_GPS_INT_CheckTerm+0x580>
				count = TM_GPS_INT_Atoi(&GPS_Term[1], &temp);
 80032da:	f107 0308 	add.w	r3, r7, #8
 80032de:	4619      	mov	r1, r3
 80032e0:	4858      	ldr	r0, [pc, #352]	; (8003444 <TM_GPS_INT_CheckTerm+0x63c>)
 80032e2:	f000 fc88 	bl	8003bf6 <TM_GPS_INT_Atoi>
 80032e6:	4603      	mov	r3, r0
 80032e8:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	ee07 3a90 	vmov	s15, r3
 80032f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f4:	4b4f      	ldr	r3, [pc, #316]	; (8003434 <TM_GPS_INT_CheckTerm+0x62c>)
 80032f6:	edc3 7a04 	vstr	s15, [r3, #16]
				
				count++;
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	3301      	adds	r3, #1
 80032fe:	73fb      	strb	r3, [r7, #15]
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	3301      	adds	r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	4a48      	ldr	r2, [pc, #288]	; (800342c <TM_GPS_INT_CheckTerm+0x624>)
 800330a:	4413      	add	r3, r2
 800330c:	f107 0208 	add.w	r2, r7, #8
 8003310:	4611      	mov	r1, r2
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fc6f 	bl	8003bf6 <TM_GPS_INT_Atoi>
 8003318:	4603      	mov	r3, r0
 800331a:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd f8f8 	bl	8000514 <__aeabi_ui2d>
 8003324:	4604      	mov	r4, r0
 8003326:	460d      	mov	r5, r1
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	4619      	mov	r1, r3
 800332c:	200a      	movs	r0, #10
 800332e:	f000 fc8f 	bl	8003c50 <TM_GPS_INT_Pow>
 8003332:	4603      	mov	r3, r0
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd f8ed 	bl	8000514 <__aeabi_ui2d>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4620      	mov	r0, r4
 8003340:	4629      	mov	r1, r5
 8003342:	f7fd fa8b 	bl	800085c <__aeabi_ddiv>
 8003346:	4603      	mov	r3, r0
 8003348:	460c      	mov	r4, r1
 800334a:	4625      	mov	r5, r4
 800334c:	461c      	mov	r4, r3
 800334e:	4b39      	ldr	r3, [pc, #228]	; (8003434 <TM_GPS_INT_CheckTerm+0x62c>)
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd f900 	bl	8000558 <__aeabi_f2d>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4620      	mov	r0, r4
 800335e:	4629      	mov	r1, r5
 8003360:	f7fc ff9c 	bl	800029c <__adddf3>
 8003364:	4603      	mov	r3, r0
 8003366:	460c      	mov	r4, r1
 8003368:	4618      	mov	r0, r3
 800336a:	4621      	mov	r1, r4
 800336c:	f7fd fc44 	bl	8000bf8 <__aeabi_d2f>
 8003370:	4602      	mov	r2, r0
 8003372:	4b30      	ldr	r3, [pc, #192]	; (8003434 <TM_GPS_INT_CheckTerm+0x62c>)
 8003374:	611a      	str	r2, [r3, #16]
				
				TM_GPS_INT_Data.Altitude = -TM_GPS_INT_Data.Altitude;
 8003376:	4b2f      	ldr	r3, [pc, #188]	; (8003434 <TM_GPS_INT_CheckTerm+0x62c>)
 8003378:	edd3 7a04 	vldr	s15, [r3, #16]
 800337c:	eef1 7a67 	vneg.f32	s15, s15
 8003380:	4b2c      	ldr	r3, [pc, #176]	; (8003434 <TM_GPS_INT_CheckTerm+0x62c>)
 8003382:	edc3 7a04 	vstr	s15, [r3, #16]
 8003386:	e04a      	b.n	800341e <TM_GPS_INT_CheckTerm+0x616>
			} else {
				count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003388:	f107 0308 	add.w	r3, r7, #8
 800338c:	4619      	mov	r1, r3
 800338e:	4827      	ldr	r0, [pc, #156]	; (800342c <TM_GPS_INT_CheckTerm+0x624>)
 8003390:	f000 fc31 	bl	8003bf6 <TM_GPS_INT_Atoi>
 8003394:	4603      	mov	r3, r0
 8003396:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	ee07 3a90 	vmov	s15, r3
 800339e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a2:	4b24      	ldr	r3, [pc, #144]	; (8003434 <TM_GPS_INT_CheckTerm+0x62c>)
 80033a4:	edc3 7a04 	vstr	s15, [r3, #16]
		
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
 80033aa:	3301      	adds	r3, #1
 80033ac:	73fb      	strb	r3, [r7, #15]
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
 80033b0:	4a1e      	ldr	r2, [pc, #120]	; (800342c <TM_GPS_INT_CheckTerm+0x624>)
 80033b2:	4413      	add	r3, r2
 80033b4:	f107 0208 	add.w	r2, r7, #8
 80033b8:	4611      	mov	r1, r2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fc1b 	bl	8003bf6 <TM_GPS_INT_Atoi>
 80033c0:	4603      	mov	r3, r0
 80033c2:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd f8a4 	bl	8000514 <__aeabi_ui2d>
 80033cc:	4604      	mov	r4, r0
 80033ce:	460d      	mov	r5, r1
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	4619      	mov	r1, r3
 80033d4:	200a      	movs	r0, #10
 80033d6:	f000 fc3b 	bl	8003c50 <TM_GPS_INT_Pow>
 80033da:	4603      	mov	r3, r0
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fd f899 	bl	8000514 <__aeabi_ui2d>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4620      	mov	r0, r4
 80033e8:	4629      	mov	r1, r5
 80033ea:	f7fd fa37 	bl	800085c <__aeabi_ddiv>
 80033ee:	4603      	mov	r3, r0
 80033f0:	460c      	mov	r4, r1
 80033f2:	4625      	mov	r5, r4
 80033f4:	461c      	mov	r4, r3
 80033f6:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <TM_GPS_INT_CheckTerm+0x62c>)
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd f8ac 	bl	8000558 <__aeabi_f2d>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4620      	mov	r0, r4
 8003406:	4629      	mov	r1, r5
 8003408:	f7fc ff48 	bl	800029c <__adddf3>
 800340c:	4603      	mov	r3, r0
 800340e:	460c      	mov	r4, r1
 8003410:	4618      	mov	r0, r3
 8003412:	4621      	mov	r1, r4
 8003414:	f7fd fbf0 	bl	8000bf8 <__aeabi_d2f>
 8003418:	4602      	mov	r2, r0
 800341a:	4b06      	ldr	r3, [pc, #24]	; (8003434 <TM_GPS_INT_CheckTerm+0x62c>)
 800341c:	611a      	str	r2, [r3, #16]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE);
 800341e:	4b08      	ldr	r3, [pc, #32]	; (8003440 <TM_GPS_INT_CheckTerm+0x638>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f043 0310 	orr.w	r3, r3, #16
 8003426:	4a06      	ldr	r2, [pc, #24]	; (8003440 <TM_GPS_INT_CheckTerm+0x638>)
 8003428:	6013      	str	r3, [r2, #0]
			break;
 800342a:	e268      	b.n	80038fe <TM_GPS_INT_CheckTerm+0xaf6>
 800342c:	20000948 	.word	0x20000948
 8003430:	51eb851f 	.word	0x51eb851f
 8003434:	20000968 	.word	0x20000968
 8003438:	42700000 	.word	0x42700000
 800343c:	404e0000 	.word	0x404e0000
 8003440:	2000095c 	.word	0x2000095c
 8003444:	20000949 	.word	0x20000949
		case GPS_POS_TIME: /* GPGGA */
			/* Set time */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003448:	f107 0308 	add.w	r3, r7, #8
 800344c:	4619      	mov	r1, r3
 800344e:	48c2      	ldr	r0, [pc, #776]	; (8003758 <TM_GPS_INT_CheckTerm+0x950>)
 8003450:	f000 fbd1 	bl	8003bf6 <TM_GPS_INT_Atoi>
 8003454:	4603      	mov	r3, r0
 8003456:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Time.Seconds = temp % 100;
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	4bc0      	ldr	r3, [pc, #768]	; (800375c <TM_GPS_INT_CheckTerm+0x954>)
 800345c:	fba3 1302 	umull	r1, r3, r3, r2
 8003460:	095b      	lsrs	r3, r3, #5
 8003462:	2164      	movs	r1, #100	; 0x64
 8003464:	fb01 f303 	mul.w	r3, r1, r3
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	b2da      	uxtb	r2, r3
 800346c:	4bbc      	ldr	r3, [pc, #752]	; (8003760 <TM_GPS_INT_CheckTerm+0x958>)
 800346e:	761a      	strb	r2, [r3, #24]
			TM_GPS_INT_Data.Time.Minutes = (int)(temp * (float) 0.01) % 100;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800347a:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8003764 <TM_GPS_INT_CheckTerm+0x95c>
 800347e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003482:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003486:	ee17 2a90 	vmov	r2, s15
 800348a:	4bb4      	ldr	r3, [pc, #720]	; (800375c <TM_GPS_INT_CheckTerm+0x954>)
 800348c:	fb83 1302 	smull	r1, r3, r3, r2
 8003490:	1159      	asrs	r1, r3, #5
 8003492:	17d3      	asrs	r3, r2, #31
 8003494:	1acb      	subs	r3, r1, r3
 8003496:	2164      	movs	r1, #100	; 0x64
 8003498:	fb01 f303 	mul.w	r3, r1, r3
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	4baf      	ldr	r3, [pc, #700]	; (8003760 <TM_GPS_INT_CheckTerm+0x958>)
 80034a2:	75da      	strb	r2, [r3, #23]
			TM_GPS_INT_Data.Time.Hours = (int)(temp * (float)0.0001) % 100;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	ee07 3a90 	vmov	s15, r3
 80034aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ae:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8003768 <TM_GPS_INT_CheckTerm+0x960>
 80034b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034ba:	ee17 2a90 	vmov	r2, s15
 80034be:	4ba7      	ldr	r3, [pc, #668]	; (800375c <TM_GPS_INT_CheckTerm+0x954>)
 80034c0:	fb83 1302 	smull	r1, r3, r3, r2
 80034c4:	1159      	asrs	r1, r3, #5
 80034c6:	17d3      	asrs	r3, r2, #31
 80034c8:	1acb      	subs	r3, r1, r3
 80034ca:	2164      	movs	r1, #100	; 0x64
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	4ba2      	ldr	r3, [pc, #648]	; (8003760 <TM_GPS_INT_CheckTerm+0x958>)
 80034d6:	759a      	strb	r2, [r3, #22]
			/* Hundredths */
			TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	3301      	adds	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	4a9d      	ldr	r2, [pc, #628]	; (8003758 <TM_GPS_INT_CheckTerm+0x950>)
 80034e2:	4413      	add	r3, r2
 80034e4:	f107 0208 	add.w	r2, r7, #8
 80034e8:	4611      	mov	r1, r2
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fb83 	bl	8003bf6 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Time.Hundredths = temp;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	4b9a      	ldr	r3, [pc, #616]	; (8003760 <TM_GPS_INT_CheckTerm+0x958>)
 80034f6:	835a      	strh	r2, [r3, #26]
			TM_GPS_INT_SetFlag(GPS_FLAG_TIME);
 80034f8:	4b9c      	ldr	r3, [pc, #624]	; (800376c <TM_GPS_INT_CheckTerm+0x964>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003500:	4a9a      	ldr	r2, [pc, #616]	; (800376c <TM_GPS_INT_CheckTerm+0x964>)
 8003502:	6013      	str	r3, [r2, #0]
			break;
 8003504:	e1fb      	b.n	80038fe <TM_GPS_INT_CheckTerm+0xaf6>
#endif
#ifndef GPS_DISABLE_GPRMC
		case GPS_POS_SPEED:	/* GPRMC */	
			/* Convert speed */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003506:	f107 0308 	add.w	r3, r7, #8
 800350a:	4619      	mov	r1, r3
 800350c:	4892      	ldr	r0, [pc, #584]	; (8003758 <TM_GPS_INT_CheckTerm+0x950>)
 800350e:	f000 fb72 	bl	8003bf6 <TM_GPS_INT_Atoi>
 8003512:	4603      	mov	r3, r0
 8003514:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed = (float)temp;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	ee07 3a90 	vmov	s15, r3
 800351c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003520:	4b8f      	ldr	r3, [pc, #572]	; (8003760 <TM_GPS_INT_CheckTerm+0x958>)
 8003522:	edc3 7a08 	vstr	s15, [r3, #32]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	3301      	adds	r3, #1
 800352a:	73fb      	strb	r3, [r7, #15]
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	4a8a      	ldr	r2, [pc, #552]	; (8003758 <TM_GPS_INT_CheckTerm+0x950>)
 8003530:	4413      	add	r3, r2
 8003532:	f107 0208 	add.w	r2, r7, #8
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fb5c 	bl	8003bf6 <TM_GPS_INT_Atoi>
 800353e:	4603      	mov	r3, r0
 8003540:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0));
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	ee07 3a90 	vmov	s15, r3
 8003548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800354c:	ee17 0a90 	vmov	r0, s15
 8003550:	f7fd f802 	bl	8000558 <__aeabi_f2d>
 8003554:	4604      	mov	r4, r0
 8003556:	460d      	mov	r5, r1
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	4619      	mov	r1, r3
 800355c:	200a      	movs	r0, #10
 800355e:	f000 fb77 	bl	8003c50 <TM_GPS_INT_Pow>
 8003562:	4603      	mov	r3, r0
 8003564:	4618      	mov	r0, r3
 8003566:	f7fc ffd5 	bl	8000514 <__aeabi_ui2d>
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	4620      	mov	r0, r4
 8003570:	4629      	mov	r1, r5
 8003572:	f7fd f973 	bl	800085c <__aeabi_ddiv>
 8003576:	4603      	mov	r3, r0
 8003578:	460c      	mov	r4, r1
 800357a:	4618      	mov	r0, r3
 800357c:	4621      	mov	r1, r4
 800357e:	f7fd fb3b 	bl	8000bf8 <__aeabi_d2f>
 8003582:	ee07 0a10 	vmov	s14, r0
 8003586:	4b76      	ldr	r3, [pc, #472]	; (8003760 <TM_GPS_INT_CheckTerm+0x958>)
 8003588:	edd3 7a08 	vldr	s15, [r3, #32]
 800358c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003590:	4b73      	ldr	r3, [pc, #460]	; (8003760 <TM_GPS_INT_CheckTerm+0x958>)
 8003592:	edc3 7a08 	vstr	s15, [r3, #32]
		
			/* Set flag */
			TM_GPS_INT_SetFlag(GPS_FLAG_SPEED);
 8003596:	4b75      	ldr	r3, [pc, #468]	; (800376c <TM_GPS_INT_CheckTerm+0x964>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800359e:	4a73      	ldr	r2, [pc, #460]	; (800376c <TM_GPS_INT_CheckTerm+0x964>)
 80035a0:	6013      	str	r3, [r2, #0]
			break;
 80035a2:	e1ac      	b.n	80038fe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_DATE: /* GPRMC */	
			/* Set date */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 80035a4:	f107 0308 	add.w	r3, r7, #8
 80035a8:	4619      	mov	r1, r3
 80035aa:	486b      	ldr	r0, [pc, #428]	; (8003758 <TM_GPS_INT_CheckTerm+0x950>)
 80035ac:	f000 fb23 	bl	8003bf6 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Date.Year = temp % 100;
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	4b6a      	ldr	r3, [pc, #424]	; (800375c <TM_GPS_INT_CheckTerm+0x954>)
 80035b4:	fba3 1302 	umull	r1, r3, r3, r2
 80035b8:	095b      	lsrs	r3, r3, #5
 80035ba:	2164      	movs	r1, #100	; 0x64
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	4b66      	ldr	r3, [pc, #408]	; (8003760 <TM_GPS_INT_CheckTerm+0x958>)
 80035c6:	779a      	strb	r2, [r3, #30]
			TM_GPS_INT_Data.Date.Month = (int)(temp * 0.01f) % 100;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	ee07 3a90 	vmov	s15, r3
 80035ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d2:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8003764 <TM_GPS_INT_CheckTerm+0x95c>
 80035d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035de:	ee17 2a90 	vmov	r2, s15
 80035e2:	4b5e      	ldr	r3, [pc, #376]	; (800375c <TM_GPS_INT_CheckTerm+0x954>)
 80035e4:	fb83 1302 	smull	r1, r3, r3, r2
 80035e8:	1159      	asrs	r1, r3, #5
 80035ea:	17d3      	asrs	r3, r2, #31
 80035ec:	1acb      	subs	r3, r1, r3
 80035ee:	2164      	movs	r1, #100	; 0x64
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	4b59      	ldr	r3, [pc, #356]	; (8003760 <TM_GPS_INT_CheckTerm+0x958>)
 80035fa:	775a      	strb	r2, [r3, #29]
			TM_GPS_INT_Data.Date.Date = (int)(temp * 0.0001f) % 100;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003606:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003768 <TM_GPS_INT_CheckTerm+0x960>
 800360a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800360e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003612:	ee17 2a90 	vmov	r2, s15
 8003616:	4b51      	ldr	r3, [pc, #324]	; (800375c <TM_GPS_INT_CheckTerm+0x954>)
 8003618:	fb83 1302 	smull	r1, r3, r3, r2
 800361c:	1159      	asrs	r1, r3, #5
 800361e:	17d3      	asrs	r3, r2, #31
 8003620:	1acb      	subs	r3, r1, r3
 8003622:	2164      	movs	r1, #100	; 0x64
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	b2da      	uxtb	r2, r3
 800362c:	4b4c      	ldr	r3, [pc, #304]	; (8003760 <TM_GPS_INT_CheckTerm+0x958>)
 800362e:	771a      	strb	r2, [r3, #28]
			TM_GPS_INT_SetFlag(GPS_FLAG_DATE);
 8003630:	4b4e      	ldr	r3, [pc, #312]	; (800376c <TM_GPS_INT_CheckTerm+0x964>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003638:	4a4c      	ldr	r2, [pc, #304]	; (800376c <TM_GPS_INT_CheckTerm+0x964>)
 800363a:	6013      	str	r3, [r2, #0]
			break;
 800363c:	e15f      	b.n	80038fe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_VALIDITY: /* GPRMC */	
			/* GPS valid status */
			TM_GPS_INT_Data.Validity = GPS_Term[0] == 'A';
 800363e:	4b46      	ldr	r3, [pc, #280]	; (8003758 <TM_GPS_INT_CheckTerm+0x950>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b41      	cmp	r3, #65	; 0x41
 8003644:	bf0c      	ite	eq
 8003646:	2301      	moveq	r3, #1
 8003648:	2300      	movne	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	4b44      	ldr	r3, [pc, #272]	; (8003760 <TM_GPS_INT_CheckTerm+0x958>)
 8003650:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY);
 8003654:	4b45      	ldr	r3, [pc, #276]	; (800376c <TM_GPS_INT_CheckTerm+0x964>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800365c:	4a43      	ldr	r2, [pc, #268]	; (800376c <TM_GPS_INT_CheckTerm+0x964>)
 800365e:	6013      	str	r3, [r2, #0]
			break;
 8003660:	e14d      	b.n	80038fe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_DIRECTION: /* GPRMC */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003662:	f107 0308 	add.w	r3, r7, #8
 8003666:	4619      	mov	r1, r3
 8003668:	483b      	ldr	r0, [pc, #236]	; (8003758 <TM_GPS_INT_CheckTerm+0x950>)
 800366a:	f000 fac4 	bl	8003bf6 <TM_GPS_INT_Atoi>
 800366e:	4603      	mov	r3, r0
 8003670:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction = (float)temp;
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	ee07 3a90 	vmov	s15, r3
 8003678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800367c:	4b38      	ldr	r3, [pc, #224]	; (8003760 <TM_GPS_INT_CheckTerm+0x958>)
 800367e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	3301      	adds	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	4a33      	ldr	r2, [pc, #204]	; (8003758 <TM_GPS_INT_CheckTerm+0x950>)
 800368c:	4413      	add	r3, r2
 800368e:	f107 0208 	add.w	r2, r7, #8
 8003692:	4611      	mov	r1, r2
 8003694:	4618      	mov	r0, r3
 8003696:	f000 faae 	bl	8003bf6 <TM_GPS_INT_Atoi>
 800369a:	4603      	mov	r3, r0
 800369c:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	ee07 3a90 	vmov	s15, r3
 80036a4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	4619      	mov	r1, r3
 80036ac:	200a      	movs	r0, #10
 80036ae:	f000 facf 	bl	8003c50 <TM_GPS_INT_Pow>
 80036b2:	ee07 0a90 	vmov	s15, r0
 80036b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ba:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80036be:	4b28      	ldr	r3, [pc, #160]	; (8003760 <TM_GPS_INT_CheckTerm+0x958>)
 80036c0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80036c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036c8:	4b25      	ldr	r3, [pc, #148]	; (8003760 <TM_GPS_INT_CheckTerm+0x958>)
 80036ca:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION);
 80036ce:	4b27      	ldr	r3, [pc, #156]	; (800376c <TM_GPS_INT_CheckTerm+0x964>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036d6:	4a25      	ldr	r2, [pc, #148]	; (800376c <TM_GPS_INT_CheckTerm+0x964>)
 80036d8:	6013      	str	r3, [r2, #0]
			break;
 80036da:	e110      	b.n	80038fe <TM_GPS_INT_CheckTerm+0xaf6>
#endif
#ifndef GPS_DISABLE_GPGSA
		case GPS_POS_HDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80036dc:	f107 0308 	add.w	r3, r7, #8
 80036e0:	4619      	mov	r1, r3
 80036e2:	481d      	ldr	r0, [pc, #116]	; (8003758 <TM_GPS_INT_CheckTerm+0x950>)
 80036e4:	f000 fa87 	bl	8003bf6 <TM_GPS_INT_Atoi>
 80036e8:	4603      	mov	r3, r0
 80036ea:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP = (float)temp;
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	ee07 3a90 	vmov	s15, r3
 80036f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f6:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <TM_GPS_INT_CheckTerm+0x958>)
 80036f8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	3301      	adds	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	4a14      	ldr	r2, [pc, #80]	; (8003758 <TM_GPS_INT_CheckTerm+0x950>)
 8003706:	4413      	add	r3, r2
 8003708:	f107 0208 	add.w	r2, r7, #8
 800370c:	4611      	mov	r1, r2
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fa71 	bl	8003bf6 <TM_GPS_INT_Atoi>
 8003714:	4603      	mov	r3, r0
 8003716:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	4619      	mov	r1, r3
 8003726:	200a      	movs	r0, #10
 8003728:	f000 fa92 	bl	8003c50 <TM_GPS_INT_Pow>
 800372c:	ee07 0a90 	vmov	s15, r0
 8003730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003734:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003738:	4b09      	ldr	r3, [pc, #36]	; (8003760 <TM_GPS_INT_CheckTerm+0x958>)
 800373a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800373e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003742:	4b07      	ldr	r3, [pc, #28]	; (8003760 <TM_GPS_INT_CheckTerm+0x958>)
 8003744:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			TM_GPS_INT_SetFlag(GPS_FLAG_HDOP);
 8003748:	4b08      	ldr	r3, [pc, #32]	; (800376c <TM_GPS_INT_CheckTerm+0x964>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003750:	4a06      	ldr	r2, [pc, #24]	; (800376c <TM_GPS_INT_CheckTerm+0x964>)
 8003752:	6013      	str	r3, [r2, #0]
			break;
 8003754:	e0d3      	b.n	80038fe <TM_GPS_INT_CheckTerm+0xaf6>
 8003756:	bf00      	nop
 8003758:	20000948 	.word	0x20000948
 800375c:	51eb851f 	.word	0x51eb851f
 8003760:	20000968 	.word	0x20000968
 8003764:	3c23d70a 	.word	0x3c23d70a
 8003768:	38d1b717 	.word	0x38d1b717
 800376c:	2000095c 	.word	0x2000095c
		case GPS_POS_PDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003770:	f107 0308 	add.w	r3, r7, #8
 8003774:	4619      	mov	r1, r3
 8003776:	48af      	ldr	r0, [pc, #700]	; (8003a34 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003778:	f000 fa3d 	bl	8003bf6 <TM_GPS_INT_Atoi>
 800377c:	4603      	mov	r3, r0
 800377e:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP = (float)temp;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800378a:	4bab      	ldr	r3, [pc, #684]	; (8003a38 <TM_GPS_INT_CheckTerm+0xc30>)
 800378c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	3301      	adds	r3, #1
 8003794:	73fb      	strb	r3, [r7, #15]
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	4aa6      	ldr	r2, [pc, #664]	; (8003a34 <TM_GPS_INT_CheckTerm+0xc2c>)
 800379a:	4413      	add	r3, r2
 800379c:	f107 0208 	add.w	r2, r7, #8
 80037a0:	4611      	mov	r1, r2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fa27 	bl	8003bf6 <TM_GPS_INT_Atoi>
 80037a8:	4603      	mov	r3, r0
 80037aa:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	4619      	mov	r1, r3
 80037ba:	200a      	movs	r0, #10
 80037bc:	f000 fa48 	bl	8003c50 <TM_GPS_INT_Pow>
 80037c0:	ee07 0a90 	vmov	s15, r0
 80037c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c8:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80037cc:	4b9a      	ldr	r3, [pc, #616]	; (8003a38 <TM_GPS_INT_CheckTerm+0xc30>)
 80037ce:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80037d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d6:	4b98      	ldr	r3, [pc, #608]	; (8003a38 <TM_GPS_INT_CheckTerm+0xc30>)
 80037d8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			TM_GPS_INT_SetFlag(GPS_FLAG_PDOP);
 80037dc:	4b97      	ldr	r3, [pc, #604]	; (8003a3c <TM_GPS_INT_CheckTerm+0xc34>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037e4:	4a95      	ldr	r2, [pc, #596]	; (8003a3c <TM_GPS_INT_CheckTerm+0xc34>)
 80037e6:	6013      	str	r3, [r2, #0]
			break;
 80037e8:	e089      	b.n	80038fe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_VDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80037ea:	f107 0308 	add.w	r3, r7, #8
 80037ee:	4619      	mov	r1, r3
 80037f0:	4890      	ldr	r0, [pc, #576]	; (8003a34 <TM_GPS_INT_CheckTerm+0xc2c>)
 80037f2:	f000 fa00 	bl	8003bf6 <TM_GPS_INT_Atoi>
 80037f6:	4603      	mov	r3, r0
 80037f8:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP = (float)temp;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	ee07 3a90 	vmov	s15, r3
 8003800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003804:	4b8c      	ldr	r3, [pc, #560]	; (8003a38 <TM_GPS_INT_CheckTerm+0xc30>)
 8003806:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	3301      	adds	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	4a88      	ldr	r2, [pc, #544]	; (8003a34 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003814:	4413      	add	r3, r2
 8003816:	f107 0208 	add.w	r2, r7, #8
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f000 f9ea 	bl	8003bf6 <TM_GPS_INT_Atoi>
 8003822:	4603      	mov	r3, r0
 8003824:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	ee07 3a90 	vmov	s15, r3
 800382c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	4619      	mov	r1, r3
 8003834:	200a      	movs	r0, #10
 8003836:	f000 fa0b 	bl	8003c50 <TM_GPS_INT_Pow>
 800383a:	ee07 0a90 	vmov	s15, r0
 800383e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003842:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003846:	4b7c      	ldr	r3, [pc, #496]	; (8003a38 <TM_GPS_INT_CheckTerm+0xc30>)
 8003848:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800384c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003850:	4b79      	ldr	r3, [pc, #484]	; (8003a38 <TM_GPS_INT_CheckTerm+0xc30>)
 8003852:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			TM_GPS_INT_SetFlag(GPS_FLAG_VDOP);
 8003856:	4b79      	ldr	r3, [pc, #484]	; (8003a3c <TM_GPS_INT_CheckTerm+0xc34>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800385e:	4a77      	ldr	r2, [pc, #476]	; (8003a3c <TM_GPS_INT_CheckTerm+0xc34>)
 8003860:	6013      	str	r3, [r2, #0]
			break;
 8003862:	e04c      	b.n	80038fe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_FIXMODE: /* GPGSA */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003864:	f107 0308 	add.w	r3, r7, #8
 8003868:	4619      	mov	r1, r3
 800386a:	4872      	ldr	r0, [pc, #456]	; (8003a34 <TM_GPS_INT_CheckTerm+0xc2c>)
 800386c:	f000 f9c3 	bl	8003bf6 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.FixMode = temp;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	b2da      	uxtb	r2, r3
 8003874:	4b70      	ldr	r3, [pc, #448]	; (8003a38 <TM_GPS_INT_CheckTerm+0xc30>)
 8003876:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE);
 800387a:	4b70      	ldr	r3, [pc, #448]	; (8003a3c <TM_GPS_INT_CheckTerm+0xc34>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003882:	4a6e      	ldr	r2, [pc, #440]	; (8003a3c <TM_GPS_INT_CheckTerm+0xc34>)
 8003884:	6013      	str	r3, [r2, #0]
			break;
 8003886:	e03a      	b.n	80038fe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_SAT9:
		case GPS_POS_SAT10:
		case GPS_POS_SAT11:
		case GPS_POS_SAT12:
			/* Satellite numbers */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003888:	f107 0308 	add.w	r3, r7, #8
 800388c:	4619      	mov	r1, r3
 800388e:	4869      	ldr	r0, [pc, #420]	; (8003a34 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003890:	f000 f9b1 	bl	8003bf6 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatelliteIDs[GPS_Term_Number - 3] = temp;
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	4b6a      	ldr	r3, [pc, #424]	; (8003a40 <TM_GPS_INT_CheckTerm+0xc38>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	3b03      	subs	r3, #3
 800389c:	b2d1      	uxtb	r1, r2
 800389e:	4a66      	ldr	r2, [pc, #408]	; (8003a38 <TM_GPS_INT_CheckTerm+0xc30>)
 80038a0:	4413      	add	r3, r2
 80038a2:	460a      	mov	r2, r1
 80038a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			ids_count++;							/* Increase number of satellites found */
 80038a8:	4b66      	ldr	r3, [pc, #408]	; (8003a44 <TM_GPS_INT_CheckTerm+0xc3c>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	3301      	adds	r3, #1
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	4b64      	ldr	r3, [pc, #400]	; (8003a44 <TM_GPS_INT_CheckTerm+0xc3c>)
 80038b2:	701a      	strb	r2, [r3, #0]
		
			if (ids_count == TM_GPS_INT_Data.Satellites) {
 80038b4:	4b60      	ldr	r3, [pc, #384]	; (8003a38 <TM_GPS_INT_CheckTerm+0xc30>)
 80038b6:	7d1a      	ldrb	r2, [r3, #20]
 80038b8:	4b62      	ldr	r3, [pc, #392]	; (8003a44 <TM_GPS_INT_CheckTerm+0xc3c>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d11d      	bne.n	80038fc <TM_GPS_INT_CheckTerm+0xaf4>
				ids_count = 0;						/* Reset count, we have all statements */
 80038c0:	4b60      	ldr	r3, [pc, #384]	; (8003a44 <TM_GPS_INT_CheckTerm+0xc3c>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 80038c6:	4b5d      	ldr	r3, [pc, #372]	; (8003a3c <TM_GPS_INT_CheckTerm+0xc34>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ce:	4a5b      	ldr	r2, [pc, #364]	; (8003a3c <TM_GPS_INT_CheckTerm+0xc34>)
 80038d0:	6013      	str	r3, [r2, #0]
			}
			break;
 80038d2:	e013      	b.n	80038fc <TM_GPS_INT_CheckTerm+0xaf4>
#endif
#ifndef GPS_DISABLE_GPGSV
		case GPS_POS_SATSINVIEW: /* GPGSV */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 80038d4:	f107 0308 	add.w	r3, r7, #8
 80038d8:	4619      	mov	r1, r3
 80038da:	4856      	ldr	r0, [pc, #344]	; (8003a34 <TM_GPS_INT_CheckTerm+0xc2c>)
 80038dc:	f000 f98b 	bl	8003bf6 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatellitesInView = temp;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	4b54      	ldr	r3, [pc, #336]	; (8003a38 <TM_GPS_INT_CheckTerm+0xc30>)
 80038e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW);
 80038ea:	4b54      	ldr	r3, [pc, #336]	; (8003a3c <TM_GPS_INT_CheckTerm+0xc34>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f2:	4a52      	ldr	r2, [pc, #328]	; (8003a3c <TM_GPS_INT_CheckTerm+0xc34>)
 80038f4:	6013      	str	r3, [r2, #0]
			break;
 80038f6:	e002      	b.n	80038fe <TM_GPS_INT_CheckTerm+0xaf6>
#endif
		default: 
			break;
 80038f8:	bf00      	nop
 80038fa:	e000      	b.n	80038fe <TM_GPS_INT_CheckTerm+0xaf6>
			break;
 80038fc:	bf00      	nop
	}
	
#ifndef GPS_DISABLE_GPGSV
	/* Check for GPGSV statement separatelly */
	if (TM_GPS_Statement == GPS_GPGSV) {	
 80038fe:	4b52      	ldr	r3, [pc, #328]	; (8003a48 <TM_GPS_INT_CheckTerm+0xc40>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b03      	cmp	r3, #3
 8003904:	f040 8090 	bne.w	8003a28 <TM_GPS_INT_CheckTerm+0xc20>
		if (GPS_Term_Number == 1) {
 8003908:	4b4d      	ldr	r3, [pc, #308]	; (8003a40 <TM_GPS_INT_CheckTerm+0xc38>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d109      	bne.n	8003924 <TM_GPS_INT_CheckTerm+0xb1c>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save number of GPGSV statements */
 8003910:	f107 0308 	add.w	r3, r7, #8
 8003914:	4619      	mov	r1, r3
 8003916:	4847      	ldr	r0, [pc, #284]	; (8003a34 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003918:	f000 f96d 	bl	8003bf6 <TM_GPS_INT_Atoi>
			GPGSV_StatementsCount = temp;
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	b2da      	uxtb	r2, r3
 8003920:	4b4a      	ldr	r3, [pc, #296]	; (8003a4c <TM_GPS_INT_CheckTerm+0xc44>)
 8003922:	701a      	strb	r2, [r3, #0]
		}
		if (GPS_Term_Number == 2) {
 8003924:	4b46      	ldr	r3, [pc, #280]	; (8003a40 <TM_GPS_INT_CheckTerm+0xc38>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d109      	bne.n	8003940 <TM_GPS_INT_CheckTerm+0xb38>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save current of GPGSV statement number */
 800392c:	f107 0308 	add.w	r3, r7, #8
 8003930:	4619      	mov	r1, r3
 8003932:	4840      	ldr	r0, [pc, #256]	; (8003a34 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003934:	f000 f95f 	bl	8003bf6 <TM_GPS_INT_Atoi>
			GPSGV_StatementNumber = temp;
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	4b44      	ldr	r3, [pc, #272]	; (8003a50 <TM_GPS_INT_CheckTerm+0xc48>)
 800393e:	701a      	strb	r2, [r3, #0]
		}
		
		/* Data */
		if (GPS_Term_Number >= 4) {
 8003940:	4b3f      	ldr	r3, [pc, #252]	; (8003a40 <TM_GPS_INT_CheckTerm+0xc38>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d96f      	bls.n	8003a28 <TM_GPS_INT_CheckTerm+0xc20>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Convert to number */
 8003948:	f107 0308 	add.w	r3, r7, #8
 800394c:	4619      	mov	r1, r3
 800394e:	4839      	ldr	r0, [pc, #228]	; (8003a34 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003950:	f000 f951 	bl	8003bf6 <TM_GPS_INT_Atoi>
			
			GPGSV_Term_Number = GPS_Term_Number - 4;	/* Get proper value */
 8003954:	4b3a      	ldr	r3, [pc, #232]	; (8003a40 <TM_GPS_INT_CheckTerm+0xc38>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	3b04      	subs	r3, #4
 800395a:	b2da      	uxtb	r2, r3
 800395c:	4b3d      	ldr	r3, [pc, #244]	; (8003a54 <TM_GPS_INT_CheckTerm+0xc4c>)
 800395e:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Mod = GPGSV_Term_Number % 4;
 8003960:	4b3c      	ldr	r3, [pc, #240]	; (8003a54 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	b2da      	uxtb	r2, r3
 800396a:	4b3b      	ldr	r3, [pc, #236]	; (8003a58 <TM_GPS_INT_CheckTerm+0xc50>)
 800396c:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Number = (GPSGV_StatementNumber - 1) * 4 + (GPGSV_Term_Number / 4);
 800396e:	4b38      	ldr	r3, [pc, #224]	; (8003a50 <TM_GPS_INT_CheckTerm+0xc48>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	333f      	adds	r3, #63	; 0x3f
 8003974:	b2db      	uxtb	r3, r3
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	b2da      	uxtb	r2, r3
 800397a:	4b36      	ldr	r3, [pc, #216]	; (8003a54 <TM_GPS_INT_CheckTerm+0xc4c>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	089b      	lsrs	r3, r3, #2
 8003980:	b2db      	uxtb	r3, r3
 8003982:	4413      	add	r3, r2
 8003984:	b2da      	uxtb	r2, r3
 8003986:	4b33      	ldr	r3, [pc, #204]	; (8003a54 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003988:	701a      	strb	r2, [r3, #0]
			
			if (GPGSV_Term_Number < GPS_MAX_SATS_IN_VIEW) {	/* If still memory available */
 800398a:	4b32      	ldr	r3, [pc, #200]	; (8003a54 <TM_GPS_INT_CheckTerm+0xc4c>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b17      	cmp	r3, #23
 8003990:	d84a      	bhi.n	8003a28 <TM_GPS_INT_CheckTerm+0xc20>
				/* Check offset from 4 */
				if (GPGSV_Term_Mod == 0) {
 8003992:	4b31      	ldr	r3, [pc, #196]	; (8003a58 <TM_GPS_INT_CheckTerm+0xc50>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10e      	bne.n	80039b8 <TM_GPS_INT_CheckTerm+0xbb0>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].ID = temp;
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	4b2d      	ldr	r3, [pc, #180]	; (8003a54 <TM_GPS_INT_CheckTerm+0xc4c>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	4619      	mov	r1, r3
 80039a2:	b2d0      	uxtb	r0, r2
 80039a4:	4a24      	ldr	r2, [pc, #144]	; (8003a38 <TM_GPS_INT_CheckTerm+0xc30>)
 80039a6:	460b      	mov	r3, r1
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	440b      	add	r3, r1
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	4413      	add	r3, r2
 80039b0:	3346      	adds	r3, #70	; 0x46
 80039b2:	4602      	mov	r2, r0
 80039b4:	701a      	strb	r2, [r3, #0]
 80039b6:	e037      	b.n	8003a28 <TM_GPS_INT_CheckTerm+0xc20>
				} else if (GPGSV_Term_Mod == 1) {
 80039b8:	4b27      	ldr	r3, [pc, #156]	; (8003a58 <TM_GPS_INT_CheckTerm+0xc50>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d10e      	bne.n	80039de <TM_GPS_INT_CheckTerm+0xbd6>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Elevation = temp;
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	4b24      	ldr	r3, [pc, #144]	; (8003a54 <TM_GPS_INT_CheckTerm+0xc4c>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	4619      	mov	r1, r3
 80039c8:	b2d0      	uxtb	r0, r2
 80039ca:	4a1b      	ldr	r2, [pc, #108]	; (8003a38 <TM_GPS_INT_CheckTerm+0xc30>)
 80039cc:	460b      	mov	r3, r1
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	440b      	add	r3, r1
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4413      	add	r3, r2
 80039d6:	3347      	adds	r3, #71	; 0x47
 80039d8:	4602      	mov	r2, r0
 80039da:	701a      	strb	r2, [r3, #0]
 80039dc:	e024      	b.n	8003a28 <TM_GPS_INT_CheckTerm+0xc20>
				} else if (GPGSV_Term_Mod == 2) {
 80039de:	4b1e      	ldr	r3, [pc, #120]	; (8003a58 <TM_GPS_INT_CheckTerm+0xc50>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d10e      	bne.n	8003a04 <TM_GPS_INT_CheckTerm+0xbfc>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Azimuth = temp;
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	4b1a      	ldr	r3, [pc, #104]	; (8003a54 <TM_GPS_INT_CheckTerm+0xc4c>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	4619      	mov	r1, r3
 80039ee:	b290      	uxth	r0, r2
 80039f0:	4a11      	ldr	r2, [pc, #68]	; (8003a38 <TM_GPS_INT_CheckTerm+0xc30>)
 80039f2:	460b      	mov	r3, r1
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	440b      	add	r3, r1
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	4413      	add	r3, r2
 80039fc:	3348      	adds	r3, #72	; 0x48
 80039fe:	4602      	mov	r2, r0
 8003a00:	801a      	strh	r2, [r3, #0]
 8003a02:	e011      	b.n	8003a28 <TM_GPS_INT_CheckTerm+0xc20>
				} else if (GPGSV_Term_Mod == 3) {
 8003a04:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <TM_GPS_INT_CheckTerm+0xc50>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d10d      	bne.n	8003a28 <TM_GPS_INT_CheckTerm+0xc20>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].SNR = temp;
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	4619      	mov	r1, r3
 8003a14:	b2d0      	uxtb	r0, r2
 8003a16:	4a08      	ldr	r2, [pc, #32]	; (8003a38 <TM_GPS_INT_CheckTerm+0xc30>)
 8003a18:	460b      	mov	r3, r1
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	440b      	add	r3, r1
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	4413      	add	r3, r2
 8003a22:	334a      	adds	r3, #74	; 0x4a
 8003a24:	4602      	mov	r2, r0
 8003a26:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	ecbd 8b02 	vpop	{d8}
 8003a30:	bdb0      	pop	{r4, r5, r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000948 	.word	0x20000948
 8003a38:	20000968 	.word	0x20000968
 8003a3c:	2000095c 	.word	0x2000095c
 8003a40:	20000957 	.word	0x20000957
 8003a44:	20000a9f 	.word	0x20000a9f
 8003a48:	20000000 	.word	0x20000000
 8003a4c:	20000a9b 	.word	0x20000a9b
 8003a50:	20000a9c 	.word	0x20000a9c
 8003a54:	20000a9d 	.word	0x20000a9d
 8003a58:	20000a9e 	.word	0x20000a9e

08003a5c <TM_GPS_INT_Return>:

TM_GPS_Result_t TM_GPS_INT_Return(TM_GPS_t* GPS_Data) {
 8003a5c:	b590      	push	{r4, r7, lr}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f939 	bl	8003cdc <TM_GPS_INT_FlagsOk>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 808d 	beq.w	8003b8c <TM_GPS_INT_Return+0x130>
		TM_GPS_FirstTime = 0;							/* Clear first time */
 8003a72:	4b50      	ldr	r3, [pc, #320]	; (8003bb4 <TM_GPS_INT_Return+0x158>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
		
		/* Set data */
#ifndef GPS_DISABLE_GPGGA
		GPS_Data->Latitude = TM_GPS_INT_Data.Latitude;
 8003a78:	4b4f      	ldr	r3, [pc, #316]	; (8003bb8 <TM_GPS_INT_Return+0x15c>)
 8003a7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	e9c2 3400 	strd	r3, r4, [r2]
		GPS_Data->Longitude = TM_GPS_INT_Data.Longitude;
 8003a84:	4b4c      	ldr	r3, [pc, #304]	; (8003bb8 <TM_GPS_INT_Return+0x15c>)
 8003a86:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	e9c2 3402 	strd	r3, r4, [r2, #8]
		GPS_Data->Satellites = TM_GPS_INT_Data.Satellites;
 8003a90:	4b49      	ldr	r3, [pc, #292]	; (8003bb8 <TM_GPS_INT_Return+0x15c>)
 8003a92:	7d1a      	ldrb	r2, [r3, #20]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	751a      	strb	r2, [r3, #20]
		GPS_Data->Fix = TM_GPS_INT_Data.Fix;
 8003a98:	4b47      	ldr	r3, [pc, #284]	; (8003bb8 <TM_GPS_INT_Return+0x15c>)
 8003a9a:	7d5a      	ldrb	r2, [r3, #21]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	755a      	strb	r2, [r3, #21]
		GPS_Data->Altitude = TM_GPS_INT_Data.Altitude;
 8003aa0:	4b45      	ldr	r3, [pc, #276]	; (8003bb8 <TM_GPS_INT_Return+0x15c>)
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	611a      	str	r2, [r3, #16]
		GPS_Data->Time = TM_GPS_INT_Data.Time;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a43      	ldr	r2, [pc, #268]	; (8003bb8 <TM_GPS_INT_Return+0x15c>)
 8003aac:	3316      	adds	r3, #22
 8003aae:	3216      	adds	r2, #22
 8003ab0:	6811      	ldr	r1, [r2, #0]
 8003ab2:	6019      	str	r1, [r3, #0]
 8003ab4:	8892      	ldrh	r2, [r2, #4]
 8003ab6:	809a      	strh	r2, [r3, #4]
#endif
#ifndef GPS_DISABLE_GPRMC
		GPS_Data->Speed = TM_GPS_INT_Data.Speed;
 8003ab8:	4b3f      	ldr	r3, [pc, #252]	; (8003bb8 <TM_GPS_INT_Return+0x15c>)
 8003aba:	6a1a      	ldr	r2, [r3, #32]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	621a      	str	r2, [r3, #32]
		GPS_Data->Date = TM_GPS_INT_Data.Date;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a3d      	ldr	r2, [pc, #244]	; (8003bb8 <TM_GPS_INT_Return+0x15c>)
 8003ac4:	331c      	adds	r3, #28
 8003ac6:	321c      	adds	r2, #28
 8003ac8:	6812      	ldr	r2, [r2, #0]
 8003aca:	4611      	mov	r1, r2
 8003acc:	8019      	strh	r1, [r3, #0]
 8003ace:	3302      	adds	r3, #2
 8003ad0:	0c12      	lsrs	r2, r2, #16
 8003ad2:	701a      	strb	r2, [r3, #0]
		GPS_Data->Validity = TM_GPS_INT_Data.Validity;
 8003ad4:	4b38      	ldr	r3, [pc, #224]	; (8003bb8 <TM_GPS_INT_Return+0x15c>)
 8003ad6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		GPS_Data->Direction = TM_GPS_INT_Data.Direction;
 8003ae0:	4b35      	ldr	r3, [pc, #212]	; (8003bb8 <TM_GPS_INT_Return+0x15c>)
 8003ae2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#ifndef GPS_DISABLE_GPGSA
		GPS_Data->HDOP = TM_GPS_INT_Data.HDOP;
 8003ae8:	4b33      	ldr	r3, [pc, #204]	; (8003bb8 <TM_GPS_INT_Return+0x15c>)
 8003aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	62da      	str	r2, [r3, #44]	; 0x2c
		GPS_Data->VDOP = TM_GPS_INT_Data.VDOP;
 8003af0:	4b31      	ldr	r3, [pc, #196]	; (8003bb8 <TM_GPS_INT_Return+0x15c>)
 8003af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	635a      	str	r2, [r3, #52]	; 0x34
		GPS_Data->PDOP = TM_GPS_INT_Data.PDOP;
 8003af8:	4b2f      	ldr	r3, [pc, #188]	; (8003bb8 <TM_GPS_INT_Return+0x15c>)
 8003afa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
		GPS_Data->FixMode = TM_GPS_INT_Data.FixMode;
 8003b00:	4b2d      	ldr	r3, [pc, #180]	; (8003bb8 <TM_GPS_INT_Return+0x15c>)
 8003b02:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		for (i = 0; i < 12; i++) {
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	73fb      	strb	r3, [r7, #15]
 8003b10:	e00d      	b.n	8003b2e <TM_GPS_INT_Return+0xd2>
			GPS_Data->SatelliteIDs[i] = TM_GPS_INT_Data.SatelliteIDs[i];
 8003b12:	7bfa      	ldrb	r2, [r7, #15]
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	4928      	ldr	r1, [pc, #160]	; (8003bb8 <TM_GPS_INT_Return+0x15c>)
 8003b18:	440a      	add	r2, r1
 8003b1a:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	4413      	add	r3, r2
 8003b22:	460a      	mov	r2, r1
 8003b24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		for (i = 0; i < 12; i++) {
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	2b0b      	cmp	r3, #11
 8003b32:	d9ee      	bls.n	8003b12 <TM_GPS_INT_Return+0xb6>
		}
#endif
#ifndef GPS_DISABLE_GPGSV
		GPS_Data->SatellitesInView = TM_GPS_INT_Data.SatellitesInView;
 8003b34:	4b20      	ldr	r3, [pc, #128]	; (8003bb8 <TM_GPS_INT_Return+0x15c>)
 8003b36:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 8003b40:	2300      	movs	r3, #0
 8003b42:	73fb      	strb	r3, [r7, #15]
 8003b44:	e019      	b.n	8003b7a <TM_GPS_INT_Return+0x11e>
			GPS_Data->SatDesc[i] = TM_GPS_INT_Data.SatDesc[i];
 8003b46:	7bfa      	ldrb	r2, [r7, #15]
 8003b48:	7bf9      	ldrb	r1, [r7, #15]
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	440b      	add	r3, r1
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4403      	add	r3, r0
 8003b56:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8003b5a:	4917      	ldr	r1, [pc, #92]	; (8003bb8 <TM_GPS_INT_Return+0x15c>)
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4413      	add	r3, r2
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	440b      	add	r3, r1
 8003b66:	f103 0246 	add.w	r2, r3, #70	; 0x46
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	6811      	ldr	r1, [r2, #0]
 8003b6e:	6019      	str	r1, [r3, #0]
 8003b70:	8892      	ldrh	r2, [r2, #4]
 8003b72:	809a      	strh	r2, [r3, #4]
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	3301      	adds	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	2b17      	cmp	r3, #23
 8003b7e:	d9e2      	bls.n	8003b46 <TM_GPS_INT_Return+0xea>
		}
#endif
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_NewData);	/* Return new data */
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e00e      	b.n	8003baa <TM_GPS_INT_Return+0x14e>
	}
	
	if (TM_GPS_FirstTime) {
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <TM_GPS_INT_Return+0x158>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <TM_GPS_INT_Return+0x144>
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_FirstDataWaiting);	/* We are first time */
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e004      	b.n	8003baa <TM_GPS_INT_Return+0x14e>
	}
	TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_OldData);	/* Return old data */
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003ba8:	2301      	movs	r3, #1
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd90      	pop	{r4, r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000a90 	.word	0x20000a90
 8003bb8:	20000968 	.word	0x20000968

08003bbc <TM_GPS_INT_StringStartsWith>:

uint8_t TM_GPS_INT_StringStartsWith(char* string, const char* str) {
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
	while (*str) {
 8003bc6:	e00b      	b.n	8003be0 <TM_GPS_INT_StringStartsWith+0x24>
		if (*str++ != *string++) {
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	603a      	str	r2, [r7, #0]
 8003bce:	781a      	ldrb	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	1c59      	adds	r1, r3, #1
 8003bd4:	6079      	str	r1, [r7, #4]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d001      	beq.n	8003be0 <TM_GPS_INT_StringStartsWith+0x24>
			return 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	e004      	b.n	8003bea <TM_GPS_INT_StringStartsWith+0x2e>
	while (*str) {
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1ef      	bne.n	8003bc8 <TM_GPS_INT_StringStartsWith+0xc>
		}
	}
	return 1;
 8003be8:	2301      	movs	r3, #1
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <TM_GPS_INT_Atoi>:

uint8_t TM_GPS_INT_Atoi(char* str, uint32_t* val) {
 8003bf6:	b480      	push	{r7}
 8003bf8:	b085      	sub	sp, #20
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	6039      	str	r1, [r7, #0]
	uint8_t count = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	73fb      	strb	r3, [r7, #15]
	*val = 0;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
	while (GPS_IS_DIGIT(*str)) {
 8003c0a:	e012      	b.n	8003c32 <TM_GPS_INT_Atoi+0x3c>
		*val = *val * 10 + GPS_C2N(*str++);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	4619      	mov	r1, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	607a      	str	r2, [r7, #4]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	440b      	add	r3, r1
 8003c24:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	601a      	str	r2, [r3, #0]
		count++;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	73fb      	strb	r3, [r7, #15]
	while (GPS_IS_DIGIT(*str)) {
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b2f      	cmp	r3, #47	; 0x2f
 8003c38:	d903      	bls.n	8003c42 <TM_GPS_INT_Atoi+0x4c>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b39      	cmp	r3, #57	; 0x39
 8003c40:	d9e4      	bls.n	8003c0c <TM_GPS_INT_Atoi+0x16>
	}
	return count;
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <TM_GPS_INT_Pow>:

uint32_t TM_GPS_INT_Pow(uint8_t x, uint8_t y) {
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	460a      	mov	r2, r1
 8003c5a:	71fb      	strb	r3, [r7, #7]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	71bb      	strb	r3, [r7, #6]
	uint32_t ret = 1;
 8003c60:	2301      	movs	r3, #1
 8003c62:	60fb      	str	r3, [r7, #12]
	while (y--) {
 8003c64:	e004      	b.n	8003c70 <TM_GPS_INT_Pow+0x20>
		ret *= x;
 8003c66:	79fa      	ldrb	r2, [r7, #7]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	60fb      	str	r3, [r7, #12]
	while (y--) {
 8003c70:	79bb      	ldrb	r3, [r7, #6]
 8003c72:	1e5a      	subs	r2, r3, #1
 8003c74:	71ba      	strb	r2, [r7, #6]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f5      	bne.n	8003c66 <TM_GPS_INT_Pow+0x16>
	}
	return ret;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <TM_GPS_INT_Hex2Dec>:

uint8_t TM_GPS_INT_Hex2Dec(char c) {
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9') {
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	2b2f      	cmp	r3, #47	; 0x2f
 8003c96:	d906      	bls.n	8003ca6 <TM_GPS_INT_Hex2Dec+0x1e>
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	2b39      	cmp	r3, #57	; 0x39
 8003c9c:	d803      	bhi.n	8003ca6 <TM_GPS_INT_Hex2Dec+0x1e>
		return c - '0';									/* 0 - 9 */
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	3b30      	subs	r3, #48	; 0x30
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	e014      	b.n	8003cd0 <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'A' && c <= 'F') {
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	2b40      	cmp	r3, #64	; 0x40
 8003caa:	d906      	bls.n	8003cba <TM_GPS_INT_Hex2Dec+0x32>
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	2b46      	cmp	r3, #70	; 0x46
 8003cb0:	d803      	bhi.n	8003cba <TM_GPS_INT_Hex2Dec+0x32>
		return c - 'A' + 10; 							/* 10 - 15 */
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	3b37      	subs	r3, #55	; 0x37
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	e00a      	b.n	8003cd0 <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'a' && c <= 'f') {
 8003cba:	79fb      	ldrb	r3, [r7, #7]
 8003cbc:	2b60      	cmp	r3, #96	; 0x60
 8003cbe:	d906      	bls.n	8003cce <TM_GPS_INT_Hex2Dec+0x46>
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	2b66      	cmp	r3, #102	; 0x66
 8003cc4:	d803      	bhi.n	8003cce <TM_GPS_INT_Hex2Dec+0x46>
		return c - 'a' + 10; 							/* 10 - 15 */
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	3b57      	subs	r3, #87	; 0x57
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	e000      	b.n	8003cd0 <TM_GPS_INT_Hex2Dec+0x48>
	}
	return 0;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <TM_GPS_INT_FlagsOk>:

uint8_t TM_GPS_INT_FlagsOk(TM_GPS_t* GPS_Data) {
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
	if (GPS_Flags == GPS_Flags_OK) {					/* Check main flags */
 8003ce4:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <TM_GPS_INT_FlagsOk+0x54>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <TM_GPS_INT_FlagsOk+0x58>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d118      	bne.n	8003d22 <TM_GPS_INT_FlagsOk+0x46>
		uint8_t i;
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	73fb      	strb	r3, [r7, #15]
 8003cf4:	e00d      	b.n	8003d12 <TM_GPS_INT_FlagsOk+0x36>
			if (GPS_Data->CustomStatements[i]->Updated == 0) {	/* If not flag set */
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	333e      	adds	r3, #62	; 0x3e
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	7ddb      	ldrb	r3, [r3, #23]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <TM_GPS_INT_FlagsOk+0x30>
				return 0;								/* Return, flags not OK */
 8003d08:	2300      	movs	r3, #0
 8003d0a:	e00b      	b.n	8003d24 <TM_GPS_INT_FlagsOk+0x48>
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003d18:	7bfa      	ldrb	r2, [r7, #15]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d3eb      	bcc.n	8003cf6 <TM_GPS_INT_FlagsOk+0x1a>
			}
		}
		return 1;										/* Flags valid */
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <TM_GPS_INT_FlagsOk+0x48>
	}
	return 0;											/* Not valid */
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	2000095c 	.word	0x2000095c
 8003d34:	20000960 	.word	0x20000960

08003d38 <TM_GPS_INT_ClearFlags>:

void TM_GPS_INT_ClearFlags(TM_GPS_t* GPS_Data) {
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	GPS_Flags = 0;						/* Reset main flags */
 8003d40:	4b0e      	ldr	r3, [pc, #56]	; (8003d7c <TM_GPS_INT_ClearFlags+0x44>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 8003d46:	2300      	movs	r3, #0
 8003d48:	73fb      	strb	r3, [r7, #15]
 8003d4a:	e00a      	b.n	8003d62 <TM_GPS_INT_ClearFlags+0x2a>
		GPS_Data->CustomStatements[i]->Updated = 0;		/* If not flag set */
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	333e      	adds	r3, #62	; 0x3e
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	75da      	strb	r2, [r3, #23]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	73fb      	strb	r3, [r7, #15]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003d68:	7bfa      	ldrb	r2, [r7, #15]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d3ee      	bcc.n	8003d4c <TM_GPS_INT_ClearFlags+0x14>
	}
}
 8003d6e:	bf00      	nop
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	2000095c 	.word	0x2000095c

08003d80 <TM_GPS_INT_CheckEmpty>:

void TM_GPS_INT_CheckEmpty(TM_GPS_t* GPS_Data) {
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	if (GPS_Term_Pos == 1) {
 8003d88:	4baf      	ldr	r3, [pc, #700]	; (8004048 <TM_GPS_INT_CheckEmpty+0x2c8>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	f040 8151 	bne.w	8004034 <TM_GPS_INT_CheckEmpty+0x2b4>
		switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 8003d92:	4bae      	ldr	r3, [pc, #696]	; (800404c <TM_GPS_INT_CheckEmpty+0x2cc>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	015b      	lsls	r3, r3, #5
 8003d98:	4aad      	ldr	r2, [pc, #692]	; (8004050 <TM_GPS_INT_CheckEmpty+0x2d0>)
 8003d9a:	7812      	ldrb	r2, [r2, #0]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	2b62      	cmp	r3, #98	; 0x62
 8003da2:	f200 8149 	bhi.w	8004038 <TM_GPS_INT_CheckEmpty+0x2b8>
 8003da6:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <TM_GPS_INT_CheckEmpty+0x2c>)
 8003da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dac:	08003f9b 	.word	0x08003f9b
 8003db0:	08003f39 	.word	0x08003f39
 8003db4:	08003f47 	.word	0x08003f47
 8003db8:	08003f55 	.word	0x08003f55
 8003dbc:	08003f63 	.word	0x08003f63
 8003dc0:	08003f7f 	.word	0x08003f7f
 8003dc4:	08003f71 	.word	0x08003f71
 8003dc8:	08004039 	.word	0x08004039
 8003dcc:	08003f8d 	.word	0x08003f8d
 8003dd0:	08004039 	.word	0x08004039
 8003dd4:	08004039 	.word	0x08004039
 8003dd8:	08004039 	.word	0x08004039
 8003ddc:	08004039 	.word	0x08004039
 8003de0:	08004039 	.word	0x08004039
 8003de4:	08004039 	.word	0x08004039
 8003de8:	08004039 	.word	0x08004039
 8003dec:	08004039 	.word	0x08004039
 8003df0:	08004039 	.word	0x08004039
 8003df4:	08004039 	.word	0x08004039
 8003df8:	08004039 	.word	0x08004039
 8003dfc:	08004039 	.word	0x08004039
 8003e00:	08004039 	.word	0x08004039
 8003e04:	08004039 	.word	0x08004039
 8003e08:	08004039 	.word	0x08004039
 8003e0c:	08004039 	.word	0x08004039
 8003e10:	08004039 	.word	0x08004039
 8003e14:	08004039 	.word	0x08004039
 8003e18:	08004039 	.word	0x08004039
 8003e1c:	08004039 	.word	0x08004039
 8003e20:	08004039 	.word	0x08004039
 8003e24:	08004039 	.word	0x08004039
 8003e28:	08004039 	.word	0x08004039
 8003e2c:	08004039 	.word	0x08004039
 8003e30:	08003fc5 	.word	0x08003fc5
 8003e34:	08004039 	.word	0x08004039
 8003e38:	08004039 	.word	0x08004039
 8003e3c:	08004039 	.word	0x08004039
 8003e40:	08004039 	.word	0x08004039
 8003e44:	08003fa9 	.word	0x08003fa9
 8003e48:	08003fd3 	.word	0x08003fd3
 8003e4c:	08003fb7 	.word	0x08003fb7
 8003e50:	08004039 	.word	0x08004039
 8003e54:	08004039 	.word	0x08004039
 8003e58:	08004039 	.word	0x08004039
 8003e5c:	08004039 	.word	0x08004039
 8003e60:	08004039 	.word	0x08004039
 8003e64:	08004039 	.word	0x08004039
 8003e68:	08004039 	.word	0x08004039
 8003e6c:	08004039 	.word	0x08004039
 8003e70:	08004039 	.word	0x08004039
 8003e74:	08004039 	.word	0x08004039
 8003e78:	08004039 	.word	0x08004039
 8003e7c:	08004039 	.word	0x08004039
 8003e80:	08004039 	.word	0x08004039
 8003e84:	08004039 	.word	0x08004039
 8003e88:	08004039 	.word	0x08004039
 8003e8c:	08004039 	.word	0x08004039
 8003e90:	08004039 	.word	0x08004039
 8003e94:	08004039 	.word	0x08004039
 8003e98:	08004039 	.word	0x08004039
 8003e9c:	08004039 	.word	0x08004039
 8003ea0:	08004039 	.word	0x08004039
 8003ea4:	08004039 	.word	0x08004039
 8003ea8:	08004039 	.word	0x08004039
 8003eac:	08004039 	.word	0x08004039
 8003eb0:	0800400b 	.word	0x0800400b
 8003eb4:	08004019 	.word	0x08004019
 8003eb8:	08004019 	.word	0x08004019
 8003ebc:	08004019 	.word	0x08004019
 8003ec0:	08004019 	.word	0x08004019
 8003ec4:	08004019 	.word	0x08004019
 8003ec8:	08004019 	.word	0x08004019
 8003ecc:	08004019 	.word	0x08004019
 8003ed0:	08004019 	.word	0x08004019
 8003ed4:	08004019 	.word	0x08004019
 8003ed8:	08004019 	.word	0x08004019
 8003edc:	08004019 	.word	0x08004019
 8003ee0:	08004019 	.word	0x08004019
 8003ee4:	08003fef 	.word	0x08003fef
 8003ee8:	08003fe1 	.word	0x08003fe1
 8003eec:	08003ffd 	.word	0x08003ffd
 8003ef0:	08004039 	.word	0x08004039
 8003ef4:	08004039 	.word	0x08004039
 8003ef8:	08004039 	.word	0x08004039
 8003efc:	08004039 	.word	0x08004039
 8003f00:	08004039 	.word	0x08004039
 8003f04:	08004039 	.word	0x08004039
 8003f08:	08004039 	.word	0x08004039
 8003f0c:	08004039 	.word	0x08004039
 8003f10:	08004039 	.word	0x08004039
 8003f14:	08004039 	.word	0x08004039
 8003f18:	08004039 	.word	0x08004039
 8003f1c:	08004039 	.word	0x08004039
 8003f20:	08004039 	.word	0x08004039
 8003f24:	08004039 	.word	0x08004039
 8003f28:	08004039 	.word	0x08004039
 8003f2c:	08004039 	.word	0x08004039
 8003f30:	08004039 	.word	0x08004039
 8003f34:	08004027 	.word	0x08004027
#ifndef GPS_DISABLE_GPGGA
			case GPS_POS_LATITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE); break;
 8003f38:	4b46      	ldr	r3, [pc, #280]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	4a44      	ldr	r2, [pc, #272]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	e079      	b.n	800403a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_NS: 		TM_GPS_INT_SetFlag(GPS_FLAG_NS); break;
 8003f46:	4b43      	ldr	r3, [pc, #268]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f4e:	4a41      	ldr	r2, [pc, #260]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	e072      	b.n	800403a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_LONGITUDE: TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE); break;
 8003f54:	4b3f      	ldr	r3, [pc, #252]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f043 0302 	orr.w	r3, r3, #2
 8003f5c:	4a3d      	ldr	r2, [pc, #244]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	e06b      	b.n	800403a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_EW: 		TM_GPS_INT_SetFlag(GPS_FLAG_EW); break;
 8003f62:	4b3c      	ldr	r3, [pc, #240]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f043 0320 	orr.w	r3, r3, #32
 8003f6a:	4a3a      	ldr	r2, [pc, #232]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e064      	b.n	800403a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SATS:		TM_GPS_INT_SetFlag(GPS_FLAG_SATS); break;
 8003f70:	4b38      	ldr	r3, [pc, #224]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f043 0304 	orr.w	r3, r3, #4
 8003f78:	4a36      	ldr	r2, [pc, #216]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	e05d      	b.n	800403a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIX: 		TM_GPS_INT_SetFlag(GPS_FLAG_FIX); break;
 8003f7e:	4b35      	ldr	r3, [pc, #212]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f043 0308 	orr.w	r3, r3, #8
 8003f86:	4a33      	ldr	r2, [pc, #204]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	e056      	b.n	800403a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_ALTITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE); break;
 8003f8c:	4b31      	ldr	r3, [pc, #196]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f043 0310 	orr.w	r3, r3, #16
 8003f94:	4a2f      	ldr	r2, [pc, #188]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	e04f      	b.n	800403a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_TIME: 		TM_GPS_INT_SetFlag(GPS_FLAG_TIME); break;
 8003f9a:	4b2e      	ldr	r3, [pc, #184]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa2:	4a2c      	ldr	r2, [pc, #176]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	e048      	b.n	800403a <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPRMC
			case GPS_POS_SPEED: 	TM_GPS_INT_SetFlag(GPS_FLAG_SPEED); break;
 8003fa8:	4b2a      	ldr	r3, [pc, #168]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb0:	4a28      	ldr	r2, [pc, #160]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	e041      	b.n	800403a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DATE: 		TM_GPS_INT_SetFlag(GPS_FLAG_DATE); break;
 8003fb6:	4b27      	ldr	r3, [pc, #156]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fbe:	4a25      	ldr	r2, [pc, #148]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	e03a      	b.n	800403a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VALIDITY: 	TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY); break;
 8003fc4:	4b23      	ldr	r3, [pc, #140]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fcc:	4a21      	ldr	r2, [pc, #132]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	e033      	b.n	800403a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DIRECTION: TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION); break;
 8003fd2:	4b20      	ldr	r3, [pc, #128]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fda:	4a1e      	ldr	r2, [pc, #120]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	e02c      	b.n	800403a <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSA
			case GPS_POS_HDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_HDOP); break;
 8003fe0:	4b1c      	ldr	r3, [pc, #112]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fe8:	4a1a      	ldr	r2, [pc, #104]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	e025      	b.n	800403a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_PDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_PDOP); break;
 8003fee:	4b19      	ldr	r3, [pc, #100]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ff6:	4a17      	ldr	r2, [pc, #92]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e01e      	b.n	800403a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_VDOP); break;
 8003ffc:	4b15      	ldr	r3, [pc, #84]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004004:	4a13      	ldr	r2, [pc, #76]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	e017      	b.n	800403a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIXMODE: 	TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE); break;
 800400a:	4b12      	ldr	r3, [pc, #72]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004012:	4a10      	ldr	r2, [pc, #64]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e010      	b.n	800403a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SAT8:
			case GPS_POS_SAT9:
			case GPS_POS_SAT10:
			case GPS_POS_SAT11:
			case GPS_POS_SAT12:
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 8004018:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004020:	4a0c      	ldr	r2, [pc, #48]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004022:	6013      	str	r3, [r2, #0]
				break;
 8004024:	e009      	b.n	800403a <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSV
			case GPS_POS_SATSINVIEW: TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW); break;
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402e:	4a09      	ldr	r2, [pc, #36]	; (8004054 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	e002      	b.n	800403a <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
			default: 
				break;
		}
	}
 8004034:	bf00      	nop
 8004036:	e000      	b.n	800403a <TM_GPS_INT_CheckEmpty+0x2ba>
				break;
 8004038:	bf00      	nop
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20000958 	.word	0x20000958
 800404c:	20000000 	.word	0x20000000
 8004050:	20000957 	.word	0x20000957
 8004054:	2000095c 	.word	0x2000095c

08004058 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004062:	edd7 7a01 	vldr	s15, [r7, #4]
 8004066:	eef0 7ae7 	vabs.f32	s15, s15
 800406a:	eeb0 0a67 	vmov.f32	s0, s15
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004082:	ed97 0a01 	vldr	s0, [r7, #4]
 8004086:	f021 fbb3 	bl	80257f0 <ceilf>
 800408a:	eef0 7a40 	vmov.f32	s15, s0
 800408e:	eeb0 0a67 	vmov.f32	s0, s15
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	ed87 0a01 	vstr	s0, [r7, #4]
 80040a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80040a6:	f021 fc23 	bl	80258f0 <floorf>
 80040aa:	eef0 7a40 	vmov.f32	s15, s0
 80040ae:	eeb0 0a67 	vmov.f32	s0, s15
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <_Z13rt_roundf_snff>:

// Const memory section
// Definition for custom storage class: Const
const real32_T Max_angle_coef = 0.5F;  // Referenced by: '<S1>/Max_angle_coef'
real32_T rt_roundf_snf(real32_T u)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	ed87 0a01 	vstr	s0, [r7, #4]
  real32_T y;
  if (std::abs(u) < 8.388608E+6F) {
 80040c2:	ed97 0a01 	vldr	s0, [r7, #4]
 80040c6:	f7ff ffc7 	bl	8004058 <_ZSt3absf>
 80040ca:	eeb0 7a40 	vmov.f32	s14, s0
 80040ce:	eddf 7a25 	vldr	s15, [pc, #148]	; 8004164 <_Z13rt_roundf_snff+0xac>
 80040d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040da:	bf4c      	ite	mi
 80040dc:	2301      	movmi	r3, #1
 80040de:	2300      	movpl	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d034      	beq.n	8004150 <_Z13rt_roundf_snff+0x98>
    if (u >= 0.5F) {
 80040e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80040ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80040ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f6:	db0c      	blt.n	8004112 <_Z13rt_roundf_snff+0x5a>
      y = std::floor(u + 0.5F);
 80040f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80040fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004100:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004104:	eeb0 0a67 	vmov.f32	s0, s15
 8004108:	f7ff ffc6 	bl	8004098 <_ZSt5floorf>
 800410c:	ed87 0a03 	vstr	s0, [r7, #12]
 8004110:	e020      	b.n	8004154 <_Z13rt_roundf_snff+0x9c>
    } else if (u > -0.5F) {
 8004112:	edd7 7a01 	vldr	s15, [r7, #4]
 8004116:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800411a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800411e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004122:	dd08      	ble.n	8004136 <_Z13rt_roundf_snff+0x7e>
      y = u * 0.0F;
 8004124:	edd7 7a01 	vldr	s15, [r7, #4]
 8004128:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004168 <_Z13rt_roundf_snff+0xb0>
 800412c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004130:	edc7 7a03 	vstr	s15, [r7, #12]
 8004134:	e00e      	b.n	8004154 <_Z13rt_roundf_snff+0x9c>
    } else {
      y = std::ceil(u - 0.5F);
 8004136:	edd7 7a01 	vldr	s15, [r7, #4]
 800413a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800413e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004142:	eeb0 0a67 	vmov.f32	s0, s15
 8004146:	f7ff ff97 	bl	8004078 <_ZSt4ceilf>
 800414a:	ed87 0a03 	vstr	s0, [r7, #12]
 800414e:	e001      	b.n	8004154 <_Z13rt_roundf_snff+0x9c>
    }
  } else {
    y = u;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	60fb      	str	r3, [r7, #12]
  }

  return y;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	ee07 3a90 	vmov	s15, r3
}
 800415a:	eeb0 0a67 	vmov.f32	s0, s15
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	4b000000 	.word	0x4b000000
 8004168:	00000000 	.word	0x00000000

0800416c <_ZN23px4_AlgorithmModelClass4stepEv>:

// Model step function
void px4_AlgorithmModelClass::step()
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  // Gain: '<S1>/Max_angle_coef' incorporates:
  //   Inport: '<Root>/set_pitch'
  //   Inport: '<Root>/set_roll'

  Second_att_control_codeblock__B.Max_angle_coef_m[0] = Max_angle_coef *
    Second_att_control_codeblock__U.set_roll;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
  Second_att_control_codeblock__B.Max_angle_coef_m[0] = Max_angle_coef *
 800417a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800417e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	edc3 7a00 	vstr	s15, [r3]
  Second_att_control_codeblock__B.Max_angle_coef_m[1] = Max_angle_coef *
    Second_att_control_codeblock__U.set_pitch;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
  Second_att_control_codeblock__B.Max_angle_coef_m[1] = Max_angle_coef *
 800418e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004192:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	edc3 7a01 	vstr	s15, [r3, #4]

  // Sum: '<S4>/Sum' incorporates:
  //   Inport: '<Root>/Roll'

  Second_att_control_codeblock__B.pitchrollerror =
    Second_att_control_codeblock__B.Max_angle_coef_m[0] -
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	ed93 7a00 	vldr	s14, [r3]
    Second_att_control_codeblock__U.Roll;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
    Second_att_control_codeblock__B.Max_angle_coef_m[0] -
 80041a8:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror =
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	edc3 7a02 	vstr	s15, [r3, #8]

  // Gain: '<S4>/P_pr'
  Second_att_control_codeblock__B.P_pr = Angle_rate_roll_PI_kP *
    Second_att_control_codeblock__B.pitchrollerror;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	ed93 7a02 	vldr	s14, [r3, #8]
  Second_att_control_codeblock__B.P_pr = Angle_rate_roll_PI_kP *
 80041b8:	4bb0      	ldr	r3, [pc, #704]	; (800447c <_ZN23px4_AlgorithmModelClass4stepEv+0x310>)
 80041ba:	edd3 7a00 	vldr	s15, [r3]
 80041be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	edc3 7a03 	vstr	s15, [r3, #12]

  // DiscreteIntegrator: '<S4>/Discrete-Time Integrator'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
  Second_att_control_codeblock__B.DiscreteTimeIntegrator =
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	611a      	str	r2, [r3, #16]

  // Gain: '<S4>/I_pr'
  Second_att_control_codeblock__B.I_pr = Angle_rate_roll_PI_kI *
    Second_att_control_codeblock__B.DiscreteTimeIntegrator;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	ed93 7a04 	vldr	s14, [r3, #16]
  Second_att_control_codeblock__B.I_pr = Angle_rate_roll_PI_kI *
 80041d8:	4ba9      	ldr	r3, [pc, #676]	; (8004480 <_ZN23px4_AlgorithmModelClass4stepEv+0x314>)
 80041da:	edd3 7a00 	vldr	s15, [r3]
 80041de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	edc3 7a05 	vstr	s15, [r3, #20]

  // Sum: '<S4>/Sum16'
  Second_att_control_codeblock__B.P_pr_m = Second_att_control_codeblock__B.P_pr
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	ed93 7a03 	vldr	s14, [r3, #12]
    + Second_att_control_codeblock__B.I_pr;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80041f4:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_m = Second_att_control_codeblock__B.P_pr
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	edc3 7a06 	vstr	s15, [r3, #24]

  // Sum: '<S5>/Sum' incorporates:
  //   Inport: '<Root>/p'

  Second_att_control_codeblock__B.pitchrollerror_b =
    Second_att_control_codeblock__B.P_pr_m - Second_att_control_codeblock__U.p;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	ed93 7a06 	vldr	s14, [r3, #24]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 800420a:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_b =
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	edc3 7a07 	vstr	s15, [r3, #28]

  // Gain: '<S5>/P_pr'
  Second_att_control_codeblock__B.P_pr_b = kP_Roll_rate_PID *
    Second_att_control_codeblock__B.pitchrollerror_b;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	ed93 7a07 	vldr	s14, [r3, #28]
  Second_att_control_codeblock__B.P_pr_b = kP_Roll_rate_PID *
 800421a:	4b9a      	ldr	r3, [pc, #616]	; (8004484 <_ZN23px4_AlgorithmModelClass4stepEv+0x318>)
 800421c:	edd3 7a00 	vldr	s15, [r3]
 8004220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	edc3 7a08 	vstr	s15, [r3, #32]

  // DiscreteIntegrator: '<S5>/Discrete-Time Integrator'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator_h =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
  Second_att_control_codeblock__B.DiscreteTimeIntegrator_h =
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	625a      	str	r2, [r3, #36]	; 0x24

  // Gain: '<S5>/I_pr'
  Second_att_control_codeblock__B.I_pr_d = kI_Roll_rate_PID *
    Second_att_control_codeblock__B.DiscreteTimeIntegrator_h;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
  Second_att_control_codeblock__B.I_pr_d = kI_Roll_rate_PID *
 800423a:	4b93      	ldr	r3, [pc, #588]	; (8004488 <_ZN23px4_AlgorithmModelClass4stepEv+0x31c>)
 800423c:	edd3 7a00 	vldr	s15, [r3]
 8004240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  //
  //  About '<S7>/TSamp':
  //   y = u * K where K = 1 / ( w * Ts )

  Second_att_control_codeblock__B.TSamp =
    Second_att_control_codeblock__B.pitchrollerror_b *
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	ed93 7a07 	vldr	s14, [r3, #28]
    Second_att_control_codeblock__P.TSamp_WtEt;
 8004250:	4b8e      	ldr	r3, [pc, #568]	; (800448c <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 8004252:	edd3 7a07 	vldr	s15, [r3, #28]
    Second_att_control_codeblock__B.pitchrollerror_b *
 8004256:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.TSamp =
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  //  Block description for '<S7>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock__B.Uk1 =
    Second_att_control_codeblock_DW.UD_DSTATE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
  Second_att_control_codeblock__B.Uk1 =
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	631a      	str	r2, [r3, #48]	; 0x30
  //
  //  Block description for '<S7>/Diff':
  //
  //   Add in CPU

  Second_att_control_codeblock__B.Diff = Second_att_control_codeblock__B.TSamp -
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
    Second_att_control_codeblock__B.Uk1;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
  Second_att_control_codeblock__B.Diff = Second_att_control_codeblock__B.TSamp -
 8004276:	ee77 7a67 	vsub.f32	s15, s14, s15
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

  // Gain: '<S5>/D_pr'
  Second_att_control_codeblock__B.D_pr = kD_Roll_rate_PID *
    Second_att_control_codeblock__B.Diff;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
  Second_att_control_codeblock__B.D_pr = kD_Roll_rate_PID *
 8004286:	4b82      	ldr	r3, [pc, #520]	; (8004490 <_ZN23px4_AlgorithmModelClass4stepEv+0x324>)
 8004288:	edd3 7a00 	vldr	s15, [r3]
 800428c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

  // Sum: '<S5>/Sum16'
  Second_att_control_codeblock__B.P_pr_d =
    (Second_att_control_codeblock__B.P_pr_b +
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	ed93 7a08 	vldr	s14, [r3, #32]
     Second_att_control_codeblock__B.I_pr_d) +
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    (Second_att_control_codeblock__B.P_pr_b +
 80042a2:	ee37 7a27 	vadd.f32	s14, s14, s15
    Second_att_control_codeblock__B.D_pr;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
     Second_att_control_codeblock__B.I_pr_d) +
 80042ac:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_d =
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

  // Saturate: '<S5>/Saturation'
  u0 = Second_att_control_codeblock__B.P_pr_d;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ba:	617b      	str	r3, [r7, #20]
  u1 = Second_att_control_codeblock__P.Saturation_LowerSat;
 80042bc:	4b73      	ldr	r3, [pc, #460]	; (800448c <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	613b      	str	r3, [r7, #16]
  u2 = Second_att_control_codeblock__P.Saturation_UpperSat;
 80042c2:	4b72      	ldr	r3, [pc, #456]	; (800448c <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	60fb      	str	r3, [r7, #12]
  if (u0 > u2) {
 80042c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80042cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80042d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d8:	dd03      	ble.n	80042e2 <_ZN23px4_AlgorithmModelClass4stepEv+0x176>
    Second_att_control_codeblock__B.Saturation = u2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	641a      	str	r2, [r3, #64]	; 0x40
 80042e0:	e00f      	b.n	8004302 <_ZN23px4_AlgorithmModelClass4stepEv+0x196>
  } else if (u0 < u1) {
 80042e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80042e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80042ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f2:	d503      	bpl.n	80042fc <_ZN23px4_AlgorithmModelClass4stepEv+0x190>
    Second_att_control_codeblock__B.Saturation = u1;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40
 80042fa:	e002      	b.n	8004302 <_ZN23px4_AlgorithmModelClass4stepEv+0x196>
  } else {
    Second_att_control_codeblock__B.Saturation = u0;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	641a      	str	r2, [r3, #64]	; 0x40

  // End of Saturate: '<S5>/Saturation'

  // Gain: '<S5>/Gain'
  Second_att_control_codeblock__B.Gain =
    Second_att_control_codeblock__P.Gain_Gain *
 8004302:	4b62      	ldr	r3, [pc, #392]	; (800448c <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 8004304:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
    Second_att_control_codeblock__B.Saturation;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    Second_att_control_codeblock__P.Gain_Gain *
 800430e:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain =
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

  // Sum: '<S4>/Sum2' incorporates:
  //   Inport: '<Root>/Pitch'

  Second_att_control_codeblock__B.pitchrollerror_m =
    Second_att_control_codeblock__B.Max_angle_coef_m[1] -
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	ed93 7a01 	vldr	s14, [r3, #4]
    Second_att_control_codeblock__U.Pitch;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
    Second_att_control_codeblock__B.Max_angle_coef_m[1] -
 8004324:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_m =
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

  // Gain: '<S4>/P_pr1'
  Second_att_control_codeblock__B.P_pr1 = Angle_rate_pitch_kP *
    Second_att_control_codeblock__B.pitchrollerror_m;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
  Second_att_control_codeblock__B.P_pr1 = Angle_rate_pitch_kP *
 8004334:	4b57      	ldr	r3, [pc, #348]	; (8004494 <_ZN23px4_AlgorithmModelClass4stepEv+0x328>)
 8004336:	edd3 7a00 	vldr	s15, [r3]
 800433a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

  // DiscreteIntegrator: '<S4>/Discrete-Time Integrator1'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1 =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1 =
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	651a      	str	r2, [r3, #80]	; 0x50

  // Gain: '<S4>/I_pr1'
  Second_att_control_codeblock__B.I_pr1 = Angle_rate_pitch_kI *
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
  Second_att_control_codeblock__B.I_pr1 = Angle_rate_pitch_kI *
 8004354:	4b50      	ldr	r3, [pc, #320]	; (8004498 <_ZN23px4_AlgorithmModelClass4stepEv+0x32c>)
 8004356:	edd3 7a00 	vldr	s15, [r3]
 800435a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  // Sum: '<S4>/Sum1'
  Second_att_control_codeblock__B.P_pr_o = Second_att_control_codeblock__B.P_pr1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
    + Second_att_control_codeblock__B.I_pr1;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004370:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_o = Second_att_control_codeblock__B.P_pr1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  // Sum: '<S5>/Sum1' incorporates:
  //   Inport: '<Root>/q'

  Second_att_control_codeblock__B.pitchrollerror_i =
    Second_att_control_codeblock__B.P_pr_o - Second_att_control_codeblock__U.q;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8004386:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_i =
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

  // Gain: '<S5>/P_pr1'
  Second_att_control_codeblock__B.P_pr1_p = kP_Pitch_rate_PID *
    Second_att_control_codeblock__B.pitchrollerror_i;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
  Second_att_control_codeblock__B.P_pr1_p = kP_Pitch_rate_PID *
 8004396:	4b41      	ldr	r3, [pc, #260]	; (800449c <_ZN23px4_AlgorithmModelClass4stepEv+0x330>)
 8004398:	edd3 7a00 	vldr	s15, [r3]
 800439c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

  // DiscreteIntegrator: '<S5>/Discrete-Time Integrator1'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p =
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	665a      	str	r2, [r3, #100]	; 0x64

  // Gain: '<S5>/I_pr1'
  Second_att_control_codeblock__B.I_pr1_j = kI_Pitch_rate_PID *
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
  Second_att_control_codeblock__B.I_pr1_j = kI_Pitch_rate_PID *
 80043b6:	4b3a      	ldr	r3, [pc, #232]	; (80044a0 <_ZN23px4_AlgorithmModelClass4stepEv+0x334>)
 80043b8:	edd3 7a00 	vldr	s15, [r3]
 80043bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
  //
  //  About '<S8>/TSamp':
  //   y = u * K where K = 1 / ( w * Ts )

  Second_att_control_codeblock__B.TSamp_h =
    Second_att_control_codeblock__B.pitchrollerror_i *
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
    Second_att_control_codeblock__P.TSamp_WtEt_l;
 80043cc:	4b2f      	ldr	r3, [pc, #188]	; (800448c <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 80043ce:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
    Second_att_control_codeblock__B.pitchrollerror_i *
 80043d2:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.TSamp_h =
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock__B.Uk1_i =
    Second_att_control_codeblock_DW.UD_DSTATE_e;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
  Second_att_control_codeblock__B.Uk1_i =
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	671a      	str	r2, [r3, #112]	; 0x70
  //  Block description for '<S8>/Diff':
  //
  //   Add in CPU

  Second_att_control_codeblock__B.Diff_l =
    Second_att_control_codeblock__B.TSamp_h -
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
    Second_att_control_codeblock__B.Uk1_i;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
    Second_att_control_codeblock__B.TSamp_h -
 80043f2:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Diff_l =
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

  // Gain: '<S5>/D_pr1'
  Second_att_control_codeblock__B.D_pr1 = kD_Pitch_rate_PID *
    Second_att_control_codeblock__B.Diff_l;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
  Second_att_control_codeblock__B.D_pr1 = kD_Pitch_rate_PID *
 8004402:	4b28      	ldr	r3, [pc, #160]	; (80044a4 <_ZN23px4_AlgorithmModelClass4stepEv+0x338>)
 8004404:	edd3 7a00 	vldr	s15, [r3]
 8004408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

  // Sum: '<S5>/Sum2'
  Second_att_control_codeblock__B.P_pr_j =
    (Second_att_control_codeblock__B.P_pr1_p +
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
     Second_att_control_codeblock__B.I_pr1_j) +
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
    (Second_att_control_codeblock__B.P_pr1_p +
 800441e:	ee37 7a27 	vadd.f32	s14, s14, s15
    Second_att_control_codeblock__B.D_pr1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
     Second_att_control_codeblock__B.I_pr1_j) +
 8004428:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_j =
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

  // Saturate: '<S5>/Saturation1'
  u0 = Second_att_control_codeblock__B.P_pr_j;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004436:	617b      	str	r3, [r7, #20]
  u1 = Second_att_control_codeblock__P.Saturation1_LowerSat;
 8004438:	4b14      	ldr	r3, [pc, #80]	; (800448c <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	613b      	str	r3, [r7, #16]
  u2 = Second_att_control_codeblock__P.Saturation1_UpperSat;
 800443e:	4b13      	ldr	r3, [pc, #76]	; (800448c <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	60fb      	str	r3, [r7, #12]
  if (u0 > u2) {
 8004444:	ed97 7a05 	vldr	s14, [r7, #20]
 8004448:	edd7 7a03 	vldr	s15, [r7, #12]
 800444c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004454:	dd04      	ble.n	8004460 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f4>
    Second_att_control_codeblock__B.Saturation1 = u2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800445e:	e027      	b.n	80044b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x344>
  } else if (u0 < u1) {
 8004460:	ed97 7a05 	vldr	s14, [r7, #20]
 8004464:	edd7 7a04 	vldr	s15, [r7, #16]
 8004468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800446c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004470:	d51a      	bpl.n	80044a8 <_ZN23px4_AlgorithmModelClass4stepEv+0x33c>
    Second_att_control_codeblock__B.Saturation1 = u1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800447a:	e019      	b.n	80044b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x344>
 800447c:	20000010 	.word	0x20000010
 8004480:	2000000c 	.word	0x2000000c
 8004484:	20000030 	.word	0x20000030
 8004488:	20000024 	.word	0x20000024
 800448c:	20000038 	.word	0x20000038
 8004490:	2000001c 	.word	0x2000001c
 8004494:	20000008 	.word	0x20000008
 8004498:	20000004 	.word	0x20000004
 800449c:	2000002c 	.word	0x2000002c
 80044a0:	20000020 	.word	0x20000020
 80044a4:	20000018 	.word	0x20000018
  } else {
    Second_att_control_codeblock__B.Saturation1 = u0;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  // End of Saturate: '<S5>/Saturation1'

  // Gain: '<S5>/Gain1'
  Second_att_control_codeblock__B.Gain1 =
    Second_att_control_codeblock__P.Gain1_Gain *
 80044b0:	4bbb      	ldr	r3, [pc, #748]	; (80047a0 <_ZN23px4_AlgorithmModelClass4stepEv+0x634>)
 80044b2:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
    Second_att_control_codeblock__B.Saturation1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
    Second_att_control_codeblock__P.Gain1_Gain *
 80044bc:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain1 =
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

  // Sum: '<S6>/Sum' incorporates:
  //   Inport: '<Root>/r'
  //   Inport: '<Root>/set_yaw'

  Second_att_control_codeblock__B.Sum = Second_att_control_codeblock__U.set_yaw
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
    - Second_att_control_codeblock__U.r;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 80044d2:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Sum = Second_att_control_codeblock__U.set_yaw
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

  // Gain: '<S6>/Gain'
  Second_att_control_codeblock__B.Gain_f = Yaw_angel_rate_P *
    Second_att_control_codeblock__B.Sum;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
  Second_att_control_codeblock__B.Gain_f = Yaw_angel_rate_P *
 80044e2:	4bb0      	ldr	r3, [pc, #704]	; (80047a4 <_ZN23px4_AlgorithmModelClass4stepEv+0x638>)
 80044e4:	edd3 7a00 	vldr	s15, [r3]
 80044e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

  // Gain: '<S46>/Proportional Gain'
  Second_att_control_codeblock__B.ProportionalGain = kP_Yaw_rate_PID *
    Second_att_control_codeblock__B.Gain_f;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
  Second_att_control_codeblock__B.ProportionalGain = kP_Yaw_rate_PID *
 80044f8:	4bab      	ldr	r3, [pc, #684]	; (80047a8 <_ZN23px4_AlgorithmModelClass4stepEv+0x63c>)
 80044fa:	edd3 7a00 	vldr	s15, [r3]
 80044fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

  // DiscreteIntegrator: '<S41>/Integrator'
  Second_att_control_codeblock__B.Integrator =
    Second_att_control_codeblock_DW.Integrator_DSTATE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
  Second_att_control_codeblock__B.Integrator =
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  // Sum: '<S50>/Sum'
  Second_att_control_codeblock__B.Sum_f =
    Second_att_control_codeblock__B.ProportionalGain +
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
    Second_att_control_codeblock__B.Integrator;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
    Second_att_control_codeblock__B.ProportionalGain +
 8004520:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.Sum_f =
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

  // MATLAB Function: '<S1>/pwm_out1' incorporates:
  //   Inport: '<Root>/set_thrust'

  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain -
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004530:	eeb1 7a67 	vneg.f32	s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain -
 800453a:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 8004544:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004548:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800454c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004556:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain -
 800455a:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80047ac <_ZN23px4_AlgorithmModelClass4stepEv+0x640>
 800455e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004562:	eeb0 0a67 	vmov.f32	s0, s15
 8004566:	f7ff fda7 	bl	80040b8 <_Z13rt_roundf_snff>
 800456a:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 800456e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004572:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80047b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x644>
 8004576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800457a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800457e:	d511      	bpl.n	80045a4 <_ZN23px4_AlgorithmModelClass4stepEv+0x438>
    if (u0 >= 0.0F) {
 8004580:	edd7 7a05 	vldr	s15, [r7, #20]
 8004584:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458c:	db07      	blt.n	800459e <_ZN23px4_AlgorithmModelClass4stepEv+0x432>
      y = static_cast<uint16_T>(u0);
 800458e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004596:	ee17 3a90 	vmov	r3, s15
 800459a:	837b      	strh	r3, [r7, #26]
 800459c:	e005      	b.n	80045aa <_ZN23px4_AlgorithmModelClass4stepEv+0x43e>
    } else {
      y = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	837b      	strh	r3, [r7, #26]
 80045a2:	e002      	b.n	80045aa <_ZN23px4_AlgorithmModelClass4stepEv+0x43e>
    }
  } else {
    y = MAX_uint16_T;
 80045a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045a8:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 80045aa:	8b7b      	ldrh	r3, [r7, #26]
 80045ac:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80045b0:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b8:	d302      	bcc.n	80045c0 <_ZN23px4_AlgorithmModelClass4stepEv+0x454>
    tmp = 65535U;
 80045ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045be:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M1 = static_cast<uint16_T>(tmp);
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain +
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
                       Second_att_control_codeblock__B.Sum_f) *
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain +
 80045d6:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 80045e0:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80045e4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80045e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80045f2:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain +
 80045f6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80047ac <_ZN23px4_AlgorithmModelClass4stepEv+0x640>
 80045fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004602:	f7ff fd59 	bl	80040b8 <_Z13rt_roundf_snff>
 8004606:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 800460a:	edd7 7a05 	vldr	s15, [r7, #20]
 800460e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80047b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x644>
 8004612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461a:	d511      	bpl.n	8004640 <_ZN23px4_AlgorithmModelClass4stepEv+0x4d4>
    if (u0 >= 0.0F) {
 800461c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004620:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004628:	db07      	blt.n	800463a <_ZN23px4_AlgorithmModelClass4stepEv+0x4ce>
      y = static_cast<uint16_T>(u0);
 800462a:	edd7 7a05 	vldr	s15, [r7, #20]
 800462e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004632:	ee17 3a90 	vmov	r3, s15
 8004636:	837b      	strh	r3, [r7, #26]
 8004638:	e005      	b.n	8004646 <_ZN23px4_AlgorithmModelClass4stepEv+0x4da>
    } else {
      y = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	837b      	strh	r3, [r7, #26]
 800463e:	e002      	b.n	8004646 <_ZN23px4_AlgorithmModelClass4stepEv+0x4da>
    }
  } else {
    y = MAX_uint16_T;
 8004640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004644:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 8004646:	8b7b      	ldrh	r3, [r7, #26]
 8004648:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800464c:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004654:	d302      	bcc.n	800465c <_ZN23px4_AlgorithmModelClass4stepEv+0x4f0>
    tmp = 65535U;
 8004656:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800465a:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M2 = static_cast<uint16_T>(tmp);
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	b29a      	uxth	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800466c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004670:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                        Second_att_control_codeblock__B.Gain1) -
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 800467a:	ee37 7a27 	vadd.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
                        Second_att_control_codeblock__B.Gain1) -
 8004684:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 800468e:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004692:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004696:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80046a0:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 80046a4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80047ac <_ZN23px4_AlgorithmModelClass4stepEv+0x640>
 80046a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046ac:	eeb0 0a67 	vmov.f32	s0, s15
 80046b0:	f7ff fd02 	bl	80040b8 <_Z13rt_roundf_snff>
 80046b4:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 80046b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80046bc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80047b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x644>
 80046c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c8:	d511      	bpl.n	80046ee <_ZN23px4_AlgorithmModelClass4stepEv+0x582>
    if (u0 >= 0.0F) {
 80046ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80046ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d6:	db07      	blt.n	80046e8 <_ZN23px4_AlgorithmModelClass4stepEv+0x57c>
      y = static_cast<uint16_T>(u0);
 80046d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80046dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e0:	ee17 3a90 	vmov	r3, s15
 80046e4:	837b      	strh	r3, [r7, #26]
 80046e6:	e005      	b.n	80046f4 <_ZN23px4_AlgorithmModelClass4stepEv+0x588>
    } else {
      y = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	837b      	strh	r3, [r7, #26]
 80046ec:	e002      	b.n	80046f4 <_ZN23px4_AlgorithmModelClass4stepEv+0x588>
    }
  } else {
    y = MAX_uint16_T;
 80046ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046f2:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 80046f4:	8b7b      	ldrh	r3, [r7, #26]
 80046f6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80046fa:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004702:	d302      	bcc.n	800470a <_ZN23px4_AlgorithmModelClass4stepEv+0x59e>
    tmp = 65535U;
 8004704:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004708:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M3 = static_cast<uint16_T>(tmp);
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	b29a      	uxth	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800471a:	eeb1 7a67 	vneg.f32	s14, s15
                        Second_att_control_codeblock__B.Gain / 2.0F) +
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8004724:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8004728:	eec6 7a86 	vdiv.f32	s15, s13, s12
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 800472c:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
                        Second_att_control_codeblock__B.Gain / 2.0F) +
 8004736:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 8004740:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004744:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004748:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004752:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 8004756:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80047ac <_ZN23px4_AlgorithmModelClass4stepEv+0x640>
 800475a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800475e:	eeb0 0a67 	vmov.f32	s0, s15
 8004762:	f7ff fca9 	bl	80040b8 <_Z13rt_roundf_snff>
 8004766:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 800476a:	edd7 7a05 	vldr	s15, [r7, #20]
 800476e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80047b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x644>
 8004772:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477a:	d51b      	bpl.n	80047b4 <_ZN23px4_AlgorithmModelClass4stepEv+0x648>
    if (u0 >= 0.0F) {
 800477c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004780:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004788:	db07      	blt.n	800479a <_ZN23px4_AlgorithmModelClass4stepEv+0x62e>
      y = static_cast<uint16_T>(u0);
 800478a:	edd7 7a05 	vldr	s15, [r7, #20]
 800478e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004792:	ee17 3a90 	vmov	r3, s15
 8004796:	837b      	strh	r3, [r7, #26]
 8004798:	e00f      	b.n	80047ba <_ZN23px4_AlgorithmModelClass4stepEv+0x64e>
    } else {
      y = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	837b      	strh	r3, [r7, #26]
 800479e:	e00c      	b.n	80047ba <_ZN23px4_AlgorithmModelClass4stepEv+0x64e>
 80047a0:	20000038 	.word	0x20000038
 80047a4:	20000014 	.word	0x20000014
 80047a8:	20000034 	.word	0x20000034
 80047ac:	447a0000 	.word	0x447a0000
 80047b0:	47800000 	.word	0x47800000
    }
  } else {
    y = MAX_uint16_T;
 80047b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047b8:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 80047ba:	8b7b      	ldrh	r3, [r7, #26]
 80047bc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80047c0:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c8:	d302      	bcc.n	80047d0 <_ZN23px4_AlgorithmModelClass4stepEv+0x664>
    tmp = 65535U;
 80047ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047ce:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M4 = static_cast<uint16_T>(tmp);
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
                        Second_att_control_codeblock__B.Gain / 2.0F) +
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 80047e6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80047ea:	eec6 7a86 	vdiv.f32	s15, s13, s12
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 80047ee:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
                        Second_att_control_codeblock__B.Gain / 2.0F) +
 80047f8:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 8004802:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004806:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800480a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004814:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 8004818:	ed1f 7a1c 	vldr	s14, [pc, #-112]	; 80047ac <_ZN23px4_AlgorithmModelClass4stepEv+0x640>
 800481c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004820:	eeb0 0a67 	vmov.f32	s0, s15
 8004824:	f7ff fc48 	bl	80040b8 <_Z13rt_roundf_snff>
 8004828:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 800482c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004830:	ed1f 7a21 	vldr	s14, [pc, #-132]	; 80047b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x644>
 8004834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483c:	d511      	bpl.n	8004862 <_ZN23px4_AlgorithmModelClass4stepEv+0x6f6>
    if (u0 >= 0.0F) {
 800483e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004842:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484a:	db07      	blt.n	800485c <_ZN23px4_AlgorithmModelClass4stepEv+0x6f0>
      y = static_cast<uint16_T>(u0);
 800484c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004854:	ee17 3a90 	vmov	r3, s15
 8004858:	837b      	strh	r3, [r7, #26]
 800485a:	e005      	b.n	8004868 <_ZN23px4_AlgorithmModelClass4stepEv+0x6fc>
    } else {
      y = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	837b      	strh	r3, [r7, #26]
 8004860:	e002      	b.n	8004868 <_ZN23px4_AlgorithmModelClass4stepEv+0x6fc>
    }
  } else {
    y = MAX_uint16_T;
 8004862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004866:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 8004868:	8b7b      	ldrh	r3, [r7, #26]
 800486a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800486e:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004876:	d302      	bcc.n	800487e <_ZN23px4_AlgorithmModelClass4stepEv+0x712>
    tmp = 65535U;
 8004878:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800487c:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M5 = static_cast<uint16_T>(tmp);
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	b29a      	uxth	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800488e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004892:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                        -Second_att_control_codeblock__B.Gain1) -
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 800489c:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
                        -Second_att_control_codeblock__B.Gain1) -
 80048a6:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 80048b0:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80048b4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80048b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80048c2:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 80048c6:	ed1f 7a47 	vldr	s14, [pc, #-284]	; 80047ac <_ZN23px4_AlgorithmModelClass4stepEv+0x640>
 80048ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048ce:	eeb0 0a67 	vmov.f32	s0, s15
 80048d2:	f7ff fbf1 	bl	80040b8 <_Z13rt_roundf_snff>
 80048d6:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 80048da:	edd7 7a05 	vldr	s15, [r7, #20]
 80048de:	ed1f 7a4c 	vldr	s14, [pc, #-304]	; 80047b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x644>
 80048e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ea:	d511      	bpl.n	8004910 <_ZN23px4_AlgorithmModelClass4stepEv+0x7a4>
    if (u0 >= 0.0F) {
 80048ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80048f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f8:	db07      	blt.n	800490a <_ZN23px4_AlgorithmModelClass4stepEv+0x79e>
      y = static_cast<uint16_T>(u0);
 80048fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80048fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004902:	ee17 3a90 	vmov	r3, s15
 8004906:	837b      	strh	r3, [r7, #26]
 8004908:	e005      	b.n	8004916 <_ZN23px4_AlgorithmModelClass4stepEv+0x7aa>
    } else {
      y = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	837b      	strh	r3, [r7, #26]
 800490e:	e002      	b.n	8004916 <_ZN23px4_AlgorithmModelClass4stepEv+0x7aa>
    }
  } else {
    y = MAX_uint16_T;
 8004910:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004914:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 8004916:	8b7b      	ldrh	r3, [r7, #26]
 8004918:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800491c:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004924:	d302      	bcc.n	800492c <_ZN23px4_AlgorithmModelClass4stepEv+0x7c0>
    tmp = 65535U;
 8004926:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800492a:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M6 = static_cast<uint16_T>(tmp);
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	b29a      	uxth	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2

  // End of MATLAB Function: '<S1>/pwm_out1'

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M1 >
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8b3 20b8 	ldrh.w	r2, [r3, #184]	; 0xb8
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 800493c:	4b60      	ldr	r3, [pc, #384]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 800493e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  if (Second_att_control_codeblock__B.M1 >
 8004942:	429a      	cmp	r2, r3
 8004944:	d904      	bls.n	8004950 <_ZN23px4_AlgorithmModelClass4stepEv+0x7e4>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004946:	4b5e      	ldr	r3, [pc, #376]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004948:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800494c:	837b      	strh	r3, [r7, #26]
 800494e:	e010      	b.n	8004972 <_ZN23px4_AlgorithmModelClass4stepEv+0x806>
  } else if (Second_att_control_codeblock__B.M1 <
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8b3 20b8 	ldrh.w	r2, [r3, #184]	; 0xb8
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004956:	4b5a      	ldr	r3, [pc, #360]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004958:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  } else if (Second_att_control_codeblock__B.M1 <
 800495c:	429a      	cmp	r2, r3
 800495e:	d204      	bcs.n	800496a <_ZN23px4_AlgorithmModelClass4stepEv+0x7fe>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004960:	4b57      	ldr	r3, [pc, #348]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004962:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004966:	837b      	strh	r3, [r7, #26]
 8004968:	e003      	b.n	8004972 <_ZN23px4_AlgorithmModelClass4stepEv+0x806>
  } else {
    y = Second_att_control_codeblock__B.M1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8004970:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[0] = y;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	8b7a      	ldrh	r2, [r7, #26]
 8004976:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M2 >
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004980:	4b4f      	ldr	r3, [pc, #316]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004982:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  if (Second_att_control_codeblock__B.M2 >
 8004986:	429a      	cmp	r2, r3
 8004988:	d904      	bls.n	8004994 <_ZN23px4_AlgorithmModelClass4stepEv+0x828>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 800498a:	4b4d      	ldr	r3, [pc, #308]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 800498c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004990:	837b      	strh	r3, [r7, #26]
 8004992:	e010      	b.n	80049b6 <_ZN23px4_AlgorithmModelClass4stepEv+0x84a>
  } else if (Second_att_control_codeblock__B.M2 <
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 800499a:	4b49      	ldr	r3, [pc, #292]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 800499c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  } else if (Second_att_control_codeblock__B.M2 <
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d204      	bcs.n	80049ae <_ZN23px4_AlgorithmModelClass4stepEv+0x842>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 80049a4:	4b46      	ldr	r3, [pc, #280]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80049a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80049aa:	837b      	strh	r3, [r7, #26]
 80049ac:	e003      	b.n	80049b6 <_ZN23px4_AlgorithmModelClass4stepEv+0x84a>
  } else {
    y = Second_att_control_codeblock__B.M2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 80049b4:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[1] = y;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8b7a      	ldrh	r2, [r7, #26]
 80049ba:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M3 >
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 80049c4:	4b3e      	ldr	r3, [pc, #248]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80049c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  if (Second_att_control_codeblock__B.M3 >
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d904      	bls.n	80049d8 <_ZN23px4_AlgorithmModelClass4stepEv+0x86c>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 80049ce:	4b3c      	ldr	r3, [pc, #240]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80049d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80049d4:	837b      	strh	r3, [r7, #26]
 80049d6:	e010      	b.n	80049fa <_ZN23px4_AlgorithmModelClass4stepEv+0x88e>
  } else if (Second_att_control_codeblock__B.M3 <
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 80049de:	4b38      	ldr	r3, [pc, #224]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80049e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  } else if (Second_att_control_codeblock__B.M3 <
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d204      	bcs.n	80049f2 <_ZN23px4_AlgorithmModelClass4stepEv+0x886>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 80049e8:	4b35      	ldr	r3, [pc, #212]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80049ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80049ee:	837b      	strh	r3, [r7, #26]
 80049f0:	e003      	b.n	80049fa <_ZN23px4_AlgorithmModelClass4stepEv+0x88e>
  } else {
    y = Second_att_control_codeblock__B.M3;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80049f8:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[2] = y;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8b7a      	ldrh	r2, [r7, #26]
 80049fe:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M4 >
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8b3 20be 	ldrh.w	r2, [r3, #190]	; 0xbe
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004a08:	4b2d      	ldr	r3, [pc, #180]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004a0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  if (Second_att_control_codeblock__B.M4 >
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d904      	bls.n	8004a1c <_ZN23px4_AlgorithmModelClass4stepEv+0x8b0>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004a12:	4b2b      	ldr	r3, [pc, #172]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004a14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004a18:	837b      	strh	r3, [r7, #26]
 8004a1a:	e010      	b.n	8004a3e <_ZN23px4_AlgorithmModelClass4stepEv+0x8d2>
  } else if (Second_att_control_codeblock__B.M4 <
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8b3 20be 	ldrh.w	r2, [r3, #190]	; 0xbe
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004a22:	4b27      	ldr	r3, [pc, #156]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004a24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  } else if (Second_att_control_codeblock__B.M4 <
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d204      	bcs.n	8004a36 <_ZN23px4_AlgorithmModelClass4stepEv+0x8ca>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004a2c:	4b24      	ldr	r3, [pc, #144]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004a2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a32:	837b      	strh	r3, [r7, #26]
 8004a34:	e003      	b.n	8004a3e <_ZN23px4_AlgorithmModelClass4stepEv+0x8d2>
  } else {
    y = Second_att_control_codeblock__B.M4;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8004a3c:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[3] = y;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	8b7a      	ldrh	r2, [r7, #26]
 8004a42:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M5 >
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004a4c:	4b1c      	ldr	r3, [pc, #112]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004a4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  if (Second_att_control_codeblock__B.M5 >
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d904      	bls.n	8004a60 <_ZN23px4_AlgorithmModelClass4stepEv+0x8f4>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004a56:	4b1a      	ldr	r3, [pc, #104]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004a58:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004a5c:	837b      	strh	r3, [r7, #26]
 8004a5e:	e010      	b.n	8004a82 <_ZN23px4_AlgorithmModelClass4stepEv+0x916>
  } else if (Second_att_control_codeblock__B.M5 <
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004a66:	4b16      	ldr	r3, [pc, #88]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004a68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  } else if (Second_att_control_codeblock__B.M5 <
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d204      	bcs.n	8004a7a <_ZN23px4_AlgorithmModelClass4stepEv+0x90e>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004a70:	4b13      	ldr	r3, [pc, #76]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004a72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a76:	837b      	strh	r3, [r7, #26]
 8004a78:	e003      	b.n	8004a82 <_ZN23px4_AlgorithmModelClass4stepEv+0x916>
  } else {
    y = Second_att_control_codeblock__B.M5;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004a80:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[4] = y;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	8b7a      	ldrh	r2, [r7, #26]
 8004a86:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M6 >
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004a90:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004a92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  if (Second_att_control_codeblock__B.M6 >
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d904      	bls.n	8004aa4 <_ZN23px4_AlgorithmModelClass4stepEv+0x938>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004a9a:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004a9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004aa0:	837b      	strh	r3, [r7, #26]
 8004aa2:	e013      	b.n	8004acc <_ZN23px4_AlgorithmModelClass4stepEv+0x960>
  } else if (Second_att_control_codeblock__B.M6 <
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004aaa:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004aac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  } else if (Second_att_control_codeblock__B.M6 <
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d207      	bcs.n	8004ac4 <_ZN23px4_AlgorithmModelClass4stepEv+0x958>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004ab4:	4b02      	ldr	r3, [pc, #8]	; (8004ac0 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004ab6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004aba:	837b      	strh	r3, [r7, #26]
 8004abc:	e006      	b.n	8004acc <_ZN23px4_AlgorithmModelClass4stepEv+0x960>
 8004abe:	bf00      	nop
 8004ac0:	20000038 	.word	0x20000038
  } else {
    y = Second_att_control_codeblock__B.M6;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004aca:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[5] = y;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8b7a      	ldrh	r2, [r7, #26]
 8004ad0:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

  // Delay: '<S5>/Delay'
  Second_att_control_codeblock__B.Delay =
    Second_att_control_codeblock_DW.Delay_DSTATE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  Second_att_control_codeblock__B.Delay =
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  // Gain: '<S5>/antiWU_Gain'
  Second_att_control_codeblock__B.antiWU_Gain =
    Second_att_control_codeblock__P.antiWU_Gain_Gain *
 8004ae0:	4b52      	ldr	r3, [pc, #328]	; (8004c2c <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 8004ae2:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
    Second_att_control_codeblock__B.Delay;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
    Second_att_control_codeblock__P.antiWU_Gain_Gain *
 8004aec:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.antiWU_Gain =
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

  // Sum: '<S5>/Add'
  Second_att_control_codeblock__B.Add =
    Second_att_control_codeblock__B.pitchrollerror_b -
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	ed93 7a07 	vldr	s14, [r3, #28]
    Second_att_control_codeblock__B.antiWU_Gain;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
    Second_att_control_codeblock__B.pitchrollerror_b -
 8004b02:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Add =
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

  // Delay: '<S5>/Delay1'
  Second_att_control_codeblock__B.Delay1 =
    Second_att_control_codeblock_DW.Delay1_DSTATE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
  Second_att_control_codeblock__B.Delay1 =
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  // Gain: '<S5>/antiWU_Gain1'
  Second_att_control_codeblock__B.antiWU_Gain1 =
    Second_att_control_codeblock__P.antiWU_Gain1_Gain *
 8004b18:	4b44      	ldr	r3, [pc, #272]	; (8004c2c <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 8004b1a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
    Second_att_control_codeblock__B.Delay1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
    Second_att_control_codeblock__P.antiWU_Gain1_Gain *
 8004b24:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.antiWU_Gain1 =
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac

  // Sum: '<S5>/Add1'
  Second_att_control_codeblock__B.Add1 =
    Second_att_control_codeblock__B.pitchrollerror_i -
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
    Second_att_control_codeblock__B.antiWU_Gain1;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
    Second_att_control_codeblock__B.pitchrollerror_i -
 8004b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Add1 =
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0

  // Gain: '<S38>/Integral Gain'
  Second_att_control_codeblock__B.IntegralGain = kI_Yaw_rate_PID *
    Second_att_control_codeblock__B.Gain_f;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
  Second_att_control_codeblock__B.IntegralGain = kI_Yaw_rate_PID *
 8004b4a:	4b39      	ldr	r3, [pc, #228]	; (8004c30 <_ZN23px4_AlgorithmModelClass4stepEv+0xac4>)
 8004b4c:	edd3 7a00 	vldr	s15, [r3]
 8004b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

  // Update for DiscreteIntegrator: '<S4>/Discrete-Time Integrator'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE +=
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainval *
 8004b60:	4b32      	ldr	r3, [pc, #200]	; (8004c2c <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 8004b62:	edd3 6a03 	vldr	s13, [r3, #12]
    Second_att_control_codeblock__B.pitchrollerror;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	edd3 7a02 	vldr	s15, [r3, #8]
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainval *
 8004b6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE +=
 8004b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

  // Update for DiscreteIntegrator: '<S5>/Discrete-Time Integrator'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k +=
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainva_l *
 8004b80:	4b2a      	ldr	r3, [pc, #168]	; (8004c2c <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 8004b82:	edd3 6a05 	vldr	s13, [r3, #20]
    Second_att_control_codeblock__B.Add;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainva_l *
 8004b8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k +=
 8004b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
  //  Block description for '<S7>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE =
    Second_att_control_codeblock__B.TSamp;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  Second_att_control_codeblock_DW.UD_DSTATE =
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

  // Update for DiscreteIntegrator: '<S4>/Discrete-Time Integrator1'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE +=
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainval *
 8004baa:	4b20      	ldr	r3, [pc, #128]	; (8004c2c <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 8004bac:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
    Second_att_control_codeblock__B.pitchrollerror_m;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainval *
 8004bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE +=
 8004bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

  // Update for DiscreteIntegrator: '<S5>/Discrete-Time Integrator1'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d +=
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainv_k *
 8004bca:	4b18      	ldr	r3, [pc, #96]	; (8004c2c <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 8004bcc:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
    Second_att_control_codeblock__B.Add1;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainv_k *
 8004bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d +=
 8004bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE_e =
    Second_att_control_codeblock__B.TSamp_h;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  Second_att_control_codeblock_DW.UD_DSTATE_e =
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  // Update for DiscreteIntegrator: '<S41>/Integrator'
  Second_att_control_codeblock_DW.Integrator_DSTATE +=
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
    Second_att_control_codeblock__P.Integrator_gainval *
 8004bf4:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 8004bf6:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
    Second_att_control_codeblock__B.IntegralGain;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
    Second_att_control_codeblock__P.Integrator_gainval *
 8004c00:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.Integrator_DSTATE +=
 8004c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc

  // Update for Delay: '<S5>/Delay'
  Second_att_control_codeblock_DW.Delay_DSTATE =
    Second_att_control_codeblock__B.DiscreteTimeIntegrator_h;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  Second_att_control_codeblock_DW.Delay_DSTATE =
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

  // Update for Delay: '<S5>/Delay1'
  Second_att_control_codeblock_DW.Delay1_DSTATE =
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  Second_att_control_codeblock_DW.Delay1_DSTATE =
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
 8004c22:	bf00      	nop
 8004c24:	3720      	adds	r7, #32
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000038 	.word	0x20000038
 8004c30:	20000028 	.word	0x20000028

08004c34 <_ZN23px4_AlgorithmModelClass10initializeEv>:

// Model initialize function
void px4_AlgorithmModelClass::initialize()
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  // InitializeConditions for DiscreteIntegrator: '<S4>/Discrete-Time Integrator' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_IC;
 8004c3c:	4b19      	ldr	r3, [pc, #100]	; (8004ca4 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004c3e:	691a      	ldr	r2, [r3, #16]
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE =
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

  // InitializeConditions for DiscreteIntegrator: '<S5>/Discrete-Time Integrator' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_IC_k;
 8004c46:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004c48:	699a      	ldr	r2, [r3, #24]
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k =
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  //  Block description for '<S7>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE =
    Second_att_control_codeblock__P.DiscreteDerivative_ICPrevScaled;
 8004c50:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004c52:	681a      	ldr	r2, [r3, #0]
  Second_att_control_codeblock_DW.UD_DSTATE =
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

  // InitializeConditions for DiscreteIntegrator: '<S4>/Discrete-Time Integrator1' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_IC;
 8004c5a:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE =
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

  // InitializeConditions for DiscreteIntegrator: '<S5>/Discrete-Time Integrator1' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_IC_j;
 8004c64:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d =
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE_e =
    Second_att_control_codeblock__P.DiscreteDerivative1_ICPrevScale;
 8004c6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004c70:	685a      	ldr	r2, [r3, #4]
  Second_att_control_codeblock_DW.UD_DSTATE_e =
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  // InitializeConditions for DiscreteIntegrator: '<S41>/Integrator'
  Second_att_control_codeblock_DW.Integrator_DSTATE =
    Second_att_control_codeblock__P.DiscretePIDController_InitialCo;
 8004c78:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004c7a:	689a      	ldr	r2, [r3, #8]
  Second_att_control_codeblock_DW.Integrator_DSTATE =
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  // InitializeConditions for Delay: '<S5>/Delay'
  Second_att_control_codeblock_DW.Delay_DSTATE =
    Second_att_control_codeblock__P.Delay_InitialCondition;
 8004c82:	4b08      	ldr	r3, [pc, #32]	; (8004ca4 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004c84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  Second_att_control_codeblock_DW.Delay_DSTATE =
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

  // InitializeConditions for Delay: '<S5>/Delay1'
  Second_att_control_codeblock_DW.Delay1_DSTATE =
    Second_att_control_codeblock__P.Delay1_InitialCondition;
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004c8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  Second_att_control_codeblock_DW.Delay1_DSTATE =
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	20000038 	.word	0x20000038

08004ca8 <_ZN23px4_AlgorithmModelClassC1Ev>:
{
  // (no terminate code required)
}

// Constructor
px4_AlgorithmModelClass::px4_AlgorithmModelClass():
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  Second_att_control_codeblock__B()
  ,Second_att_control_codeblock_DW()
  ,Second_att_control_codeblock__U()
  ,Second_att_control_codeblock__Y()
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	23c4      	movs	r3, #196	; 0xc4
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	2100      	movs	r1, #0
 8004cba:	f024 f990 	bl	8028fde <memset>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	33c4      	adds	r3, #196	; 0xc4
 8004cc2:	2224      	movs	r2, #36	; 0x24
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f024 f989 	bl	8028fde <memset>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	33e8      	adds	r3, #232	; 0xe8
 8004cd0:	2224      	movs	r2, #36	; 0x24
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f024 f982 	bl	8028fde <memset>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	605a      	str	r2, [r3, #4]
 8004ce6:	609a      	str	r2, [r3, #8]
{
  // Currently there is no constructor body generated.
}
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	0000      	movs	r0, r0
 8004cf4:	0000      	movs	r0, r0
	...

08004cf8 <_ZN25positionControlModelClass4stepEv>:
                                          //  Referenced by: '<S189>/Proportional Gain'


// Model step function
void positionControlModelClass::step()
{
 8004cf8:	b5b0      	push	{r4, r5, r7, lr}
 8004cfa:	b09a      	sub	sp, #104	; 0x68
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6378      	str	r0, [r7, #52]	; 0x34
  real_T u2;

  // DataTypeConversion: '<S1>/Data Type Conversion' incorporates:
  //   Inport: '<Root>/estim_yaw'

  positionControl_B.DataTypeConversion = positionControl_U.estim_yaw;
 8004d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d02:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fb fc26 	bl	8000558 <__aeabi_f2d>
 8004d0c:	460a      	mov	r2, r1
 8004d0e:	4601      	mov	r1, r0
 8004d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d12:	e9c3 1200 	strd	r1, r2, [r3]

  // Trigonometry: '<S8>/Trigonometric Function'
  cosOut = positionControl_B.DataTypeConversion;
 8004d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d1c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  sinOut = std::sin(cosOut);
 8004d20:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8004d24:	f020 fd1c 	bl	8025760 <sin>
 8004d28:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58
  cosOut = std::cos(cosOut);
 8004d2c:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8004d30:	f020 fc4e 	bl	80255d0 <cos>
 8004d34:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
  positionControl_B.TrigonometricFunction_o1 = sinOut;
 8004d38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d3a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8004d3e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  positionControl_B.TrigonometricFunction_o2 = cosOut;
 8004d42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d44:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8004d48:	e9c2 3404 	strd	r3, r4, [r2, #16]

  // SignalConversion generated from: '<S8>/Vector Concatenate'
  positionControl_B.MatrixConcatenate[0] =
    positionControl_B.TrigonometricFunction_o2;
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
  positionControl_B.MatrixConcatenate[0] =
 8004d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d54:	e9c3 1206 	strd	r1, r2, [r3, #24]

  // Gain: '<S8>/Gain'
  positionControl_B.MatrixConcatenate[1] = positionControl_P.Gain_Gain *
 8004d58:	4b63      	ldr	r3, [pc, #396]	; (8004ee8 <_ZN25positionControlModelClass4stepEv+0x1f0>)
 8004d5a:	e9d3 0144 	ldrd	r0, r1, [r3, #272]	; 0x110
    positionControl_B.TrigonometricFunction_o1;
 8004d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d60:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
  positionControl_B.MatrixConcatenate[1] = positionControl_P.Gain_Gain *
 8004d64:	461a      	mov	r2, r3
 8004d66:	4623      	mov	r3, r4
 8004d68:	f7fb fc4e 	bl	8000608 <__aeabi_dmul>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	460c      	mov	r4, r1
 8004d70:	4619      	mov	r1, r3
 8004d72:	4622      	mov	r2, r4
 8004d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d76:	e9c3 1208 	strd	r1, r2, [r3, #32]

  // SignalConversion generated from: '<S8>/Vector Concatenate1'
  positionControl_B.MatrixConcatenate[2] =
    positionControl_B.TrigonometricFunction_o1;
 8004d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
  positionControl_B.MatrixConcatenate[2] =
 8004d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d82:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

  // SignalConversion generated from: '<S8>/Vector Concatenate1'
  positionControl_B.MatrixConcatenate[3] =
    positionControl_B.TrigonometricFunction_o2;
 8004d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d88:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
  positionControl_B.MatrixConcatenate[3] =
 8004d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8e:	e9c3 120c 	strd	r1, r2, [r3, #48]	; 0x30

  // Sum: '<S1>/Add' incorporates:
  //   Inport: '<Root>/estim_x'
  //   Inport: '<Root>/set_x'

  positionControl_B.x_error = positionControl_U.set_x -
 8004d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d94:	e9d3 01ce 	ldrd	r0, r1, [r3, #824]	; 0x338
    positionControl_U.estim_x;
 8004d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9a:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
  positionControl_B.x_error = positionControl_U.set_x -
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4623      	mov	r3, r4
 8004da2:	f7fb fa79 	bl	8000298 <__aeabi_dsub>
 8004da6:	4603      	mov	r3, r0
 8004da8:	460c      	mov	r4, r1
 8004daa:	4619      	mov	r1, r3
 8004dac:	4622      	mov	r2, r4
 8004dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db0:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38

  // Gain: '<S45>/Proportional Gain'
  positionControl_B.ProportionalGain = pos_x_P * positionControl_B.x_error;
 8004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004dba:	4b4c      	ldr	r3, [pc, #304]	; (8004eec <_ZN25positionControlModelClass4stepEv+0x1f4>)
 8004dbc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4623      	mov	r3, r4
 8004dc4:	f7fb fc20 	bl	8000608 <__aeabi_dmul>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	460c      	mov	r4, r1
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4622      	mov	r2, r4
 8004dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd2:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

  // DiscreteIntegrator: '<S40>/Integrator'
  positionControl_B.Integrator = positionControl_DW.Integrator_DSTATE;
 8004dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd8:	e9d3 12b2 	ldrd	r1, r2, [r3, #712]	; 0x2c8
 8004ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dde:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48

  // Gain: '<S34>/Derivative Gain'
  positionControl_B.DerivativeGain = pos_x_D * positionControl_B.x_error;
 8004de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004de8:	4b41      	ldr	r3, [pc, #260]	; (8004ef0 <_ZN25positionControlModelClass4stepEv+0x1f8>)
 8004dea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004dee:	461a      	mov	r2, r3
 8004df0:	4623      	mov	r3, r4
 8004df2:	f7fb fc09 	bl	8000608 <__aeabi_dmul>
 8004df6:	4603      	mov	r3, r0
 8004df8:	460c      	mov	r4, r1
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4622      	mov	r2, r4
 8004dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e00:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50

  // DiscreteIntegrator: '<S35>/Filter'
  positionControl_B.Filter = positionControl_DW.Filter_DSTATE;
 8004e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e06:	e9d3 12b4 	ldrd	r1, r2, [r3, #720]	; 0x2d0
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0c:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58

  // Sum: '<S35>/SumD'
  positionControl_B.SumD = positionControl_B.DerivativeGain -
 8004e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e12:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
    positionControl_B.Filter;
 8004e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e18:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
  positionControl_B.SumD = positionControl_B.DerivativeGain -
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	4623      	mov	r3, r4
 8004e20:	f7fb fa3a 	bl	8000298 <__aeabi_dsub>
 8004e24:	4603      	mov	r3, r0
 8004e26:	460c      	mov	r4, r1
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4622      	mov	r2, r4
 8004e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2e:	e9c3 1218 	strd	r1, r2, [r3, #96]	; 0x60

  // Gain: '<S43>/Filter Coefficient'
  positionControl_B.FilterCoefficient = positionControl_P.PIDController_N *
 8004e32:	4b2d      	ldr	r3, [pc, #180]	; (8004ee8 <_ZN25positionControlModelClass4stepEv+0x1f0>)
 8004e34:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
    positionControl_B.SumD;
 8004e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3a:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
  positionControl_B.FilterCoefficient = positionControl_P.PIDController_N *
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4623      	mov	r3, r4
 8004e42:	f7fb fbe1 	bl	8000608 <__aeabi_dmul>
 8004e46:	4603      	mov	r3, r0
 8004e48:	460c      	mov	r4, r1
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4622      	mov	r2, r4
 8004e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e50:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68

  // Sum: '<S49>/Sum'
  positionControl_B.Sum = positionControl_B.ProportionalGain +
 8004e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e56:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
    positionControl_B.Integrator + positionControl_B.FilterCoefficient;
 8004e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5c:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
  positionControl_B.Sum = positionControl_B.ProportionalGain +
 8004e60:	461a      	mov	r2, r3
 8004e62:	4623      	mov	r3, r4
 8004e64:	f7fb fa1a 	bl	800029c <__adddf3>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	4621      	mov	r1, r4
    positionControl_B.Integrator + positionControl_B.FilterCoefficient;
 8004e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e72:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8004e76:	461a      	mov	r2, r3
 8004e78:	4623      	mov	r3, r4
 8004e7a:	f7fb fa0f 	bl	800029c <__adddf3>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	460c      	mov	r4, r1
 8004e82:	4619      	mov	r1, r3
 8004e84:	4622      	mov	r2, r4
  positionControl_B.Sum = positionControl_B.ProportionalGain +
 8004e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e88:	e9c3 121c 	strd	r1, r2, [r3, #112]	; 0x70

  // Saturate: '<S47>/Saturation'
  cosOut = positionControl_B.Sum;
 8004e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8e:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8004e92:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  sinOut = positionControl_P.PIDController_LowerSaturationLi;
 8004e96:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <_ZN25positionControlModelClass4stepEv+0x1f0>)
 8004e98:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8004e9c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
  u2 = positionControl_P.PIDController_UpperSaturationLi;
 8004ea0:	4b11      	ldr	r3, [pc, #68]	; (8004ee8 <_ZN25positionControlModelClass4stepEv+0x1f0>)
 8004ea2:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8004ea6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
  if (cosOut > u2) {
 8004eaa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004eae:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004eb2:	f7fb fe39 	bl	8000b28 <__aeabi_dcmpgt>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <_ZN25positionControlModelClass4stepEv+0x1d0>
    positionControl_B.Saturation = u2;
 8004ebc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ebe:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004ec2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8004ec6:	e01a      	b.n	8004efe <_ZN25positionControlModelClass4stepEv+0x206>
  } else if (cosOut < sinOut) {
 8004ec8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ecc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004ed0:	f7fb fe0c 	bl	8000aec <__aeabi_dcmplt>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00c      	beq.n	8004ef4 <_ZN25positionControlModelClass4stepEv+0x1fc>
    positionControl_B.Saturation = sinOut;
 8004eda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004edc:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8004ee0:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8004ee4:	e00b      	b.n	8004efe <_ZN25positionControlModelClass4stepEv+0x206>
 8004ee6:	bf00      	nop
 8004ee8:	20000118 	.word	0x20000118
 8004eec:	200000b0 	.word	0x200000b0
 8004ef0:	20000aa0 	.word	0x20000aa0
  } else {
    positionControl_B.Saturation = cosOut;
 8004ef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ef6:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8004efa:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

  // Sum: '<S1>/Add4' incorporates:
  //   Inport: '<Root>/estim_y'
  //   Inport: '<Root>/set_y'

  positionControl_B.y_error = positionControl_U.set_y -
 8004efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f00:	e9d3 01d0 	ldrd	r0, r1, [r3, #832]	; 0x340
    positionControl_U.estim_y;
 8004f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f06:	e9d3 34d6 	ldrd	r3, r4, [r3, #856]	; 0x358
  positionControl_B.y_error = positionControl_U.set_y -
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	4623      	mov	r3, r4
 8004f0e:	f7fb f9c3 	bl	8000298 <__aeabi_dsub>
 8004f12:	4603      	mov	r3, r0
 8004f14:	460c      	mov	r4, r1
 8004f16:	4619      	mov	r1, r3
 8004f18:	4622      	mov	r2, r4
 8004f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1c:	e9c3 1220 	strd	r1, r2, [r3, #128]	; 0x80

  // Gain: '<S237>/Proportional Gain'
  positionControl_B.ProportionalGain_p = pos_y_P * positionControl_B.y_error;
 8004f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f22:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8004f26:	4b4b      	ldr	r3, [pc, #300]	; (8005054 <_ZN25positionControlModelClass4stepEv+0x35c>)
 8004f28:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	4623      	mov	r3, r4
 8004f30:	f7fb fb6a 	bl	8000608 <__aeabi_dmul>
 8004f34:	4603      	mov	r3, r0
 8004f36:	460c      	mov	r4, r1
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4622      	mov	r2, r4
 8004f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3e:	e9c3 1222 	strd	r1, r2, [r3, #136]	; 0x88

  // DiscreteIntegrator: '<S232>/Integrator'
  positionControl_B.Integrator_f = positionControl_DW.Integrator_DSTATE_k;
 8004f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f44:	e9d3 12b6 	ldrd	r1, r2, [r3, #728]	; 0x2d8
 8004f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4a:	e9c3 1224 	strd	r1, r2, [r3, #144]	; 0x90

  // Gain: '<S226>/Derivative Gain'
  positionControl_B.DerivativeGain_n = positionControl_P.pos_y_D *
 8004f4e:	4b42      	ldr	r3, [pc, #264]	; (8005058 <_ZN25positionControlModelClass4stepEv+0x360>)
 8004f50:	e9d3 0100 	ldrd	r0, r1, [r3]
    positionControl_B.y_error;
 8004f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f56:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
  positionControl_B.DerivativeGain_n = positionControl_P.pos_y_D *
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	4623      	mov	r3, r4
 8004f5e:	f7fb fb53 	bl	8000608 <__aeabi_dmul>
 8004f62:	4603      	mov	r3, r0
 8004f64:	460c      	mov	r4, r1
 8004f66:	4619      	mov	r1, r3
 8004f68:	4622      	mov	r2, r4
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6c:	e9c3 1226 	strd	r1, r2, [r3, #152]	; 0x98

  // DiscreteIntegrator: '<S227>/Filter'
  positionControl_B.Filter_p = positionControl_DW.Filter_DSTATE_m;
 8004f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f72:	e9d3 12b8 	ldrd	r1, r2, [r3, #736]	; 0x2e0
 8004f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f78:	e9c3 1228 	strd	r1, r2, [r3, #160]	; 0xa0

  // Sum: '<S227>/SumD'
  positionControl_B.SumD_k = positionControl_B.DerivativeGain_n -
 8004f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7e:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
    positionControl_B.Filter_p;
 8004f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f84:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
  positionControl_B.SumD_k = positionControl_B.DerivativeGain_n -
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4623      	mov	r3, r4
 8004f8c:	f7fb f984 	bl	8000298 <__aeabi_dsub>
 8004f90:	4603      	mov	r3, r0
 8004f92:	460c      	mov	r4, r1
 8004f94:	4619      	mov	r1, r3
 8004f96:	4622      	mov	r2, r4
 8004f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9a:	e9c3 122a 	strd	r1, r2, [r3, #168]	; 0xa8

  // Gain: '<S235>/Filter Coefficient'
  positionControl_B.FilterCoefficient_n = positionControl_P.PIDController4_N *
 8004f9e:	4b2e      	ldr	r3, [pc, #184]	; (8005058 <_ZN25positionControlModelClass4stepEv+0x360>)
 8004fa0:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
    positionControl_B.SumD_k;
 8004fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa6:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
  positionControl_B.FilterCoefficient_n = positionControl_P.PIDController4_N *
 8004faa:	461a      	mov	r2, r3
 8004fac:	4623      	mov	r3, r4
 8004fae:	f7fb fb2b 	bl	8000608 <__aeabi_dmul>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4622      	mov	r2, r4
 8004fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fbc:	e9c3 122c 	strd	r1, r2, [r3, #176]	; 0xb0

  // Sum: '<S241>/Sum'
  positionControl_B.Sum_k = positionControl_B.ProportionalGain_p +
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc2:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
    positionControl_B.Integrator_f + positionControl_B.FilterCoefficient_n;
 8004fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc8:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
  positionControl_B.Sum_k = positionControl_B.ProportionalGain_p +
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4623      	mov	r3, r4
 8004fd0:	f7fb f964 	bl	800029c <__adddf3>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	460c      	mov	r4, r1
 8004fd8:	4618      	mov	r0, r3
 8004fda:	4621      	mov	r1, r4
    positionControl_B.Integrator_f + positionControl_B.FilterCoefficient_n;
 8004fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fde:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	4623      	mov	r3, r4
 8004fe6:	f7fb f959 	bl	800029c <__adddf3>
 8004fea:	4603      	mov	r3, r0
 8004fec:	460c      	mov	r4, r1
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4622      	mov	r2, r4
  positionControl_B.Sum_k = positionControl_B.ProportionalGain_p +
 8004ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff4:	e9c3 122e 	strd	r1, r2, [r3, #184]	; 0xb8

  // Saturate: '<S239>/Saturation'
  cosOut = positionControl_B.Sum_k;
 8004ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffa:	e9d3 342e 	ldrd	r3, r4, [r3, #184]	; 0xb8
 8004ffe:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  sinOut = positionControl_P.PIDController4_LowerSaturationL;
 8005002:	4b15      	ldr	r3, [pc, #84]	; (8005058 <_ZN25positionControlModelClass4stepEv+0x360>)
 8005004:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8005008:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
  u2 = positionControl_P.PIDController4_UpperSaturationL;
 800500c:	4b12      	ldr	r3, [pc, #72]	; (8005058 <_ZN25positionControlModelClass4stepEv+0x360>)
 800500e:	e9d3 3434 	ldrd	r3, r4, [r3, #208]	; 0xd0
 8005012:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
  if (cosOut > u2) {
 8005016:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800501a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800501e:	f7fb fd83 	bl	8000b28 <__aeabi_dcmpgt>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <_ZN25positionControlModelClass4stepEv+0x33c>
    positionControl_B.Saturation_o = u2;
 8005028:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800502a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800502e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
 8005032:	e018      	b.n	8005066 <_ZN25positionControlModelClass4stepEv+0x36e>
  } else if (cosOut < sinOut) {
 8005034:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005038:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800503c:	f7fb fd56 	bl	8000aec <__aeabi_dcmplt>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <_ZN25positionControlModelClass4stepEv+0x364>
    positionControl_B.Saturation_o = sinOut;
 8005046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005048:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800504c:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
 8005050:	e009      	b.n	8005066 <_ZN25positionControlModelClass4stepEv+0x36e>
 8005052:	bf00      	nop
 8005054:	200000d8 	.word	0x200000d8
 8005058:	20000118 	.word	0x20000118
  } else {
    positionControl_B.Saturation_o = cosOut;
 800505c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800505e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8005062:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0

  // Sum: '<S1>/Add1' incorporates:
  //   Inport: '<Root>/estim_dx'
  //   Inport: '<Root>/estim_dy'

  positionControl_B.Add1[0] = positionControl_U.estim_dx -
 8005066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005068:	e9d3 01da 	ldrd	r0, r1, [r3, #872]	; 0x368
    positionControl_B.Saturation;
 800506c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
  positionControl_B.Add1[0] = positionControl_U.estim_dx -
 8005072:	461a      	mov	r2, r3
 8005074:	4623      	mov	r3, r4
 8005076:	f7fb f90f 	bl	8000298 <__aeabi_dsub>
 800507a:	4603      	mov	r3, r0
 800507c:	460c      	mov	r4, r1
 800507e:	4619      	mov	r1, r3
 8005080:	4622      	mov	r2, r4
 8005082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005084:	e9c3 1232 	strd	r1, r2, [r3, #200]	; 0xc8
  positionControl_B.Add1[1] = positionControl_U.estim_dy -
 8005088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508a:	e9d3 01dc 	ldrd	r0, r1, [r3, #880]	; 0x370
    positionControl_B.Saturation_o;
 800508e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005090:	e9d3 3430 	ldrd	r3, r4, [r3, #192]	; 0xc0
  positionControl_B.Add1[1] = positionControl_U.estim_dy -
 8005094:	461a      	mov	r2, r3
 8005096:	4623      	mov	r3, r4
 8005098:	f7fb f8fe 	bl	8000298 <__aeabi_dsub>
 800509c:	4603      	mov	r3, r0
 800509e:	460c      	mov	r4, r1
 80050a0:	4619      	mov	r1, r3
 80050a2:	4622      	mov	r2, r4
 80050a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a6:	e9c3 1234 	strd	r1, r2, [r3, #208]	; 0xd0

  // Product: '<S1>/Matrix Multiply'
  cosOut = positionControl_B.MatrixConcatenate[0];
 80050aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ac:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80050b0:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  sinOut = positionControl_B.MatrixConcatenate[1];
 80050b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b6:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80050ba:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
  u2 = positionControl_B.MatrixConcatenate[2];
 80050be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c0:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80050c4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
  tmp = positionControl_B.MatrixConcatenate[3];
 80050c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ca:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80050ce:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
  tmp_0 = positionControl_B.Add1[0];
 80050d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d4:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 80050d8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
  tmp_1 = positionControl_B.Add1[1];
 80050dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050de:	e9d3 3434 	ldrd	r3, r4, [r3, #208]	; 0xd0
 80050e2:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  cosOut *= tmp_0;
 80050e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050ea:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80050ee:	f7fb fa8b 	bl	8000608 <__aeabi_dmul>
 80050f2:	4603      	mov	r3, r0
 80050f4:	460c      	mov	r4, r1
 80050f6:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  cosOut += u2 * tmp_1;
 80050fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005102:	f7fb fa81 	bl	8000608 <__aeabi_dmul>
 8005106:	4603      	mov	r3, r0
 8005108:	460c      	mov	r4, r1
 800510a:	461a      	mov	r2, r3
 800510c:	4623      	mov	r3, r4
 800510e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005112:	f7fb f8c3 	bl	800029c <__adddf3>
 8005116:	4603      	mov	r3, r0
 8005118:	460c      	mov	r4, r1
 800511a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  positionControl_B.vel_error[0] = cosOut;
 800511e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005120:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8005124:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
  sinOut *= tmp_0;
 8005128:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800512c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005130:	f7fb fa6a 	bl	8000608 <__aeabi_dmul>
 8005134:	4603      	mov	r3, r0
 8005136:	460c      	mov	r4, r1
 8005138:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
  sinOut += tmp * tmp_1;
 800513c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005140:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005144:	f7fb fa60 	bl	8000608 <__aeabi_dmul>
 8005148:	4603      	mov	r3, r0
 800514a:	460c      	mov	r4, r1
 800514c:	461a      	mov	r2, r3
 800514e:	4623      	mov	r3, r4
 8005150:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005154:	f7fb f8a2 	bl	800029c <__adddf3>
 8005158:	4603      	mov	r3, r0
 800515a:	460c      	mov	r4, r1
 800515c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
  positionControl_B.vel_error[1] = sinOut;
 8005160:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005162:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005166:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0

  // Gain: '<S285>/Proportional Gain'
  positionControl_B.ProportionalGain_m = pos_y_vel_P *
    positionControl_B.vel_error[1];
 800516a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516c:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
  positionControl_B.ProportionalGain_m = pos_y_vel_P *
 8005170:	4b4a      	ldr	r3, [pc, #296]	; (800529c <_ZN25positionControlModelClass4stepEv+0x5a4>)
 8005172:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005176:	461a      	mov	r2, r3
 8005178:	4623      	mov	r3, r4
 800517a:	f7fb fa45 	bl	8000608 <__aeabi_dmul>
 800517e:	4603      	mov	r3, r0
 8005180:	460c      	mov	r4, r1
 8005182:	4619      	mov	r1, r3
 8005184:	4622      	mov	r2, r4
 8005186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005188:	e9c3 123a 	strd	r1, r2, [r3, #232]	; 0xe8

  // DiscreteIntegrator: '<S280>/Integrator'
  positionControl_B.Integrator_h = positionControl_DW.Integrator_DSTATE_f;
 800518c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518e:	e9d3 12ba 	ldrd	r1, r2, [r3, #744]	; 0x2e8
 8005192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005194:	e9c3 123c 	strd	r1, r2, [r3, #240]	; 0xf0

  // Gain: '<S274>/Derivative Gain'
  positionControl_B.DerivativeGain_c = pos_y_vel_D *
    positionControl_B.vel_error[1];
 8005198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519a:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
  positionControl_B.DerivativeGain_c = pos_y_vel_D *
 800519e:	4b40      	ldr	r3, [pc, #256]	; (80052a0 <_ZN25positionControlModelClass4stepEv+0x5a8>)
 80051a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051a4:	461a      	mov	r2, r3
 80051a6:	4623      	mov	r3, r4
 80051a8:	f7fb fa2e 	bl	8000608 <__aeabi_dmul>
 80051ac:	4603      	mov	r3, r0
 80051ae:	460c      	mov	r4, r1
 80051b0:	4619      	mov	r1, r3
 80051b2:	4622      	mov	r2, r4
 80051b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b6:	e9c3 123e 	strd	r1, r2, [r3, #248]	; 0xf8

  // DiscreteIntegrator: '<S275>/Filter'
  positionControl_B.Filter_g = positionControl_DW.Filter_DSTATE_j;
 80051ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051bc:	e9d3 12bc 	ldrd	r1, r2, [r3, #752]	; 0x2f0
 80051c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c2:	e9c3 1240 	strd	r1, r2, [r3, #256]	; 0x100

  // Sum: '<S275>/SumD'
  positionControl_B.SumD_f = positionControl_B.DerivativeGain_c -
 80051c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c8:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	; 0xf8
    positionControl_B.Filter_g;
 80051cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ce:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
  positionControl_B.SumD_f = positionControl_B.DerivativeGain_c -
 80051d2:	461a      	mov	r2, r3
 80051d4:	4623      	mov	r3, r4
 80051d6:	f7fb f85f 	bl	8000298 <__aeabi_dsub>
 80051da:	4603      	mov	r3, r0
 80051dc:	460c      	mov	r4, r1
 80051de:	4619      	mov	r1, r3
 80051e0:	4622      	mov	r2, r4
 80051e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e4:	e9c3 1242 	strd	r1, r2, [r3, #264]	; 0x108

  // Gain: '<S283>/Filter Coefficient'
  positionControl_B.FilterCoefficient_e = positionControl_P.PIDController5_N *
 80051e8:	4b2e      	ldr	r3, [pc, #184]	; (80052a4 <_ZN25positionControlModelClass4stepEv+0x5ac>)
 80051ea:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
    positionControl_B.SumD_f;
 80051ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f0:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
  positionControl_B.FilterCoefficient_e = positionControl_P.PIDController5_N *
 80051f4:	461a      	mov	r2, r3
 80051f6:	4623      	mov	r3, r4
 80051f8:	f7fb fa06 	bl	8000608 <__aeabi_dmul>
 80051fc:	4603      	mov	r3, r0
 80051fe:	460c      	mov	r4, r1
 8005200:	4619      	mov	r1, r3
 8005202:	4622      	mov	r2, r4
 8005204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005206:	e9c3 1244 	strd	r1, r2, [r3, #272]	; 0x110

  // Sum: '<S289>/Sum'
  positionControl_B.Sum_m = positionControl_B.ProportionalGain_m +
 800520a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520c:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
    positionControl_B.Integrator_h + positionControl_B.FilterCoefficient_e;
 8005210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005212:	e9d3 343c 	ldrd	r3, r4, [r3, #240]	; 0xf0
  positionControl_B.Sum_m = positionControl_B.ProportionalGain_m +
 8005216:	461a      	mov	r2, r3
 8005218:	4623      	mov	r3, r4
 800521a:	f7fb f83f 	bl	800029c <__adddf3>
 800521e:	4603      	mov	r3, r0
 8005220:	460c      	mov	r4, r1
 8005222:	4618      	mov	r0, r3
 8005224:	4621      	mov	r1, r4
    positionControl_B.Integrator_h + positionControl_B.FilterCoefficient_e;
 8005226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005228:	e9d3 3444 	ldrd	r3, r4, [r3, #272]	; 0x110
 800522c:	461a      	mov	r2, r3
 800522e:	4623      	mov	r3, r4
 8005230:	f7fb f834 	bl	800029c <__adddf3>
 8005234:	4603      	mov	r3, r0
 8005236:	460c      	mov	r4, r1
 8005238:	4619      	mov	r1, r3
 800523a:	4622      	mov	r2, r4
  positionControl_B.Sum_m = positionControl_B.ProportionalGain_m +
 800523c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523e:	e9c3 1246 	strd	r1, r2, [r3, #280]	; 0x118

  // Saturate: '<S287>/Saturation'
  cosOut = positionControl_B.Sum_m;
 8005242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005244:	e9d3 3446 	ldrd	r3, r4, [r3, #280]	; 0x118
 8005248:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  sinOut = positionControl_P.PIDController5_LowerSaturationL;
 800524c:	4b15      	ldr	r3, [pc, #84]	; (80052a4 <_ZN25positionControlModelClass4stepEv+0x5ac>)
 800524e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8005252:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
  u2 = positionControl_P.PIDController5_UpperSaturationL;
 8005256:	4b13      	ldr	r3, [pc, #76]	; (80052a4 <_ZN25positionControlModelClass4stepEv+0x5ac>)
 8005258:	e9d3 3436 	ldrd	r3, r4, [r3, #216]	; 0xd8
 800525c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
  if (cosOut > u2) {
 8005260:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005264:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005268:	f7fb fc5e 	bl	8000b28 <__aeabi_dcmpgt>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <_ZN25positionControlModelClass4stepEv+0x586>
    positionControl_B.Saturation_l = u2;
 8005272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005274:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8005278:	e9c2 3448 	strd	r3, r4, [r2, #288]	; 0x120
 800527c:	e019      	b.n	80052b2 <_ZN25positionControlModelClass4stepEv+0x5ba>
  } else if (cosOut < sinOut) {
 800527e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005282:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005286:	f7fb fc31 	bl	8000aec <__aeabi_dcmplt>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00b      	beq.n	80052a8 <_ZN25positionControlModelClass4stepEv+0x5b0>
    positionControl_B.Saturation_l = sinOut;
 8005290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005292:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005296:	e9c2 3448 	strd	r3, r4, [r2, #288]	; 0x120
 800529a:	e00a      	b.n	80052b2 <_ZN25positionControlModelClass4stepEv+0x5ba>
 800529c:	200000f0 	.word	0x200000f0
 80052a0:	200000e0 	.word	0x200000e0
 80052a4:	20000118 	.word	0x20000118
  } else {
    positionControl_B.Saturation_l = cosOut;
 80052a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052aa:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80052ae:	e9c2 3448 	strd	r3, r4, [r2, #288]	; 0x120
  }

  // End of Saturate: '<S287>/Saturation'

  // Gain: '<S1>/Gain1'
  positionControl_B.Gain1 = positionControl_P.Gain1_Gain *
 80052b2:	4b5a      	ldr	r3, [pc, #360]	; (800541c <_ZN25positionControlModelClass4stepEv+0x724>)
 80052b4:	e9d3 0152 	ldrd	r0, r1, [r3, #328]	; 0x148
    positionControl_B.Saturation_l;
 80052b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ba:	e9d3 3448 	ldrd	r3, r4, [r3, #288]	; 0x120
  positionControl_B.Gain1 = positionControl_P.Gain1_Gain *
 80052be:	461a      	mov	r2, r3
 80052c0:	4623      	mov	r3, r4
 80052c2:	f7fb f9a1 	bl	8000608 <__aeabi_dmul>
 80052c6:	4603      	mov	r3, r0
 80052c8:	460c      	mov	r4, r1
 80052ca:	4619      	mov	r1, r3
 80052cc:	4622      	mov	r2, r4
 80052ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d0:	e9c3 124a 	strd	r1, r2, [r3, #296]	; 0x128

  // Outport: '<Root>/des_roll' incorporates:
  //   DataTypeConversion: '<S1>/Data Type Conversion3'

  positionControl_Y.des_roll = static_cast<real32_T>(positionControl_B.Gain1);
 80052d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d6:	e9d3 344a 	ldrd	r3, r4, [r3, #296]	; 0x128
 80052da:	4618      	mov	r0, r3
 80052dc:	4621      	mov	r1, r4
 80052de:	f7fb fc8b 	bl	8000bf8 <__aeabi_d2f>
 80052e2:	4602      	mov	r2, r0
 80052e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e6:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  // Gain: '<S93>/Proportional Gain'
  positionControl_B.ProportionalGain_h = pos_x_vel_P *
    positionControl_B.vel_error[0];
 80052ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ec:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
  positionControl_B.ProportionalGain_h = pos_x_vel_P *
 80052f0:	4b4b      	ldr	r3, [pc, #300]	; (8005420 <_ZN25positionControlModelClass4stepEv+0x728>)
 80052f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052f6:	461a      	mov	r2, r3
 80052f8:	4623      	mov	r3, r4
 80052fa:	f7fb f985 	bl	8000608 <__aeabi_dmul>
 80052fe:	4603      	mov	r3, r0
 8005300:	460c      	mov	r4, r1
 8005302:	4619      	mov	r1, r3
 8005304:	4622      	mov	r2, r4
 8005306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005308:	e9c3 124c 	strd	r1, r2, [r3, #304]	; 0x130

  // DiscreteIntegrator: '<S88>/Integrator'
  positionControl_B.Integrator_c = positionControl_DW.Integrator_DSTATE_m;
 800530c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530e:	e9d3 12be 	ldrd	r1, r2, [r3, #760]	; 0x2f8
 8005312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005314:	e9c3 124e 	strd	r1, r2, [r3, #312]	; 0x138

  // Gain: '<S82>/Derivative Gain'
  positionControl_B.DerivativeGain_p = pos_x_vel_D *
    positionControl_B.vel_error[0];
 8005318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531a:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
  positionControl_B.DerivativeGain_p = pos_x_vel_D *
 800531e:	4b41      	ldr	r3, [pc, #260]	; (8005424 <_ZN25positionControlModelClass4stepEv+0x72c>)
 8005320:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005324:	461a      	mov	r2, r3
 8005326:	4623      	mov	r3, r4
 8005328:	f7fb f96e 	bl	8000608 <__aeabi_dmul>
 800532c:	4603      	mov	r3, r0
 800532e:	460c      	mov	r4, r1
 8005330:	4619      	mov	r1, r3
 8005332:	4622      	mov	r2, r4
 8005334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005336:	e9c3 1250 	strd	r1, r2, [r3, #320]	; 0x140

  // DiscreteIntegrator: '<S83>/Filter'
  positionControl_B.Filter_i = positionControl_DW.Filter_DSTATE_d;
 800533a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533c:	e9d3 12c0 	ldrd	r1, r2, [r3, #768]	; 0x300
 8005340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005342:	e9c3 1252 	strd	r1, r2, [r3, #328]	; 0x148

  // Sum: '<S83>/SumD'
  positionControl_B.SumD_h = positionControl_B.DerivativeGain_p -
 8005346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005348:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
    positionControl_B.Filter_i;
 800534c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534e:	e9d3 3452 	ldrd	r3, r4, [r3, #328]	; 0x148
  positionControl_B.SumD_h = positionControl_B.DerivativeGain_p -
 8005352:	461a      	mov	r2, r3
 8005354:	4623      	mov	r3, r4
 8005356:	f7fa ff9f 	bl	8000298 <__aeabi_dsub>
 800535a:	4603      	mov	r3, r0
 800535c:	460c      	mov	r4, r1
 800535e:	4619      	mov	r1, r3
 8005360:	4622      	mov	r2, r4
 8005362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005364:	e9c3 1254 	strd	r1, r2, [r3, #336]	; 0x150

  // Gain: '<S91>/Filter Coefficient'
  positionControl_B.FilterCoefficient_f = positionControl_P.PIDController1_N *
 8005368:	4b2c      	ldr	r3, [pc, #176]	; (800541c <_ZN25positionControlModelClass4stepEv+0x724>)
 800536a:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
    positionControl_B.SumD_h;
 800536e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005370:	e9d3 3454 	ldrd	r3, r4, [r3, #336]	; 0x150
  positionControl_B.FilterCoefficient_f = positionControl_P.PIDController1_N *
 8005374:	461a      	mov	r2, r3
 8005376:	4623      	mov	r3, r4
 8005378:	f7fb f946 	bl	8000608 <__aeabi_dmul>
 800537c:	4603      	mov	r3, r0
 800537e:	460c      	mov	r4, r1
 8005380:	4619      	mov	r1, r3
 8005382:	4622      	mov	r2, r4
 8005384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005386:	e9c3 1256 	strd	r1, r2, [r3, #344]	; 0x158

  // Sum: '<S97>/Sum'
  positionControl_B.Sum_o = positionControl_B.ProportionalGain_h +
 800538a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538c:	e9d3 014c 	ldrd	r0, r1, [r3, #304]	; 0x130
    positionControl_B.Integrator_c + positionControl_B.FilterCoefficient_f;
 8005390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005392:	e9d3 344e 	ldrd	r3, r4, [r3, #312]	; 0x138
  positionControl_B.Sum_o = positionControl_B.ProportionalGain_h +
 8005396:	461a      	mov	r2, r3
 8005398:	4623      	mov	r3, r4
 800539a:	f7fa ff7f 	bl	800029c <__adddf3>
 800539e:	4603      	mov	r3, r0
 80053a0:	460c      	mov	r4, r1
 80053a2:	4618      	mov	r0, r3
 80053a4:	4621      	mov	r1, r4
    positionControl_B.Integrator_c + positionControl_B.FilterCoefficient_f;
 80053a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a8:	e9d3 3456 	ldrd	r3, r4, [r3, #344]	; 0x158
 80053ac:	461a      	mov	r2, r3
 80053ae:	4623      	mov	r3, r4
 80053b0:	f7fa ff74 	bl	800029c <__adddf3>
 80053b4:	4603      	mov	r3, r0
 80053b6:	460c      	mov	r4, r1
 80053b8:	4619      	mov	r1, r3
 80053ba:	4622      	mov	r2, r4
  positionControl_B.Sum_o = positionControl_B.ProportionalGain_h +
 80053bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053be:	e9c3 1258 	strd	r1, r2, [r3, #352]	; 0x160

  // Saturate: '<S95>/Saturation'
  cosOut = positionControl_B.Sum_o;
 80053c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c4:	e9d3 3458 	ldrd	r3, r4, [r3, #352]	; 0x160
 80053c8:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  sinOut = positionControl_P.PIDController1_LowerSaturationL;
 80053cc:	4b13      	ldr	r3, [pc, #76]	; (800541c <_ZN25positionControlModelClass4stepEv+0x724>)
 80053ce:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80053d2:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
  u2 = positionControl_P.PIDController1_UpperSaturationL;
 80053d6:	4b11      	ldr	r3, [pc, #68]	; (800541c <_ZN25positionControlModelClass4stepEv+0x724>)
 80053d8:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 80053dc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
  if (cosOut > u2) {
 80053e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80053e8:	f7fb fb9e 	bl	8000b28 <__aeabi_dcmpgt>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d005      	beq.n	80053fe <_ZN25positionControlModelClass4stepEv+0x706>
    positionControl_B.Saturation_j = u2;
 80053f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053f4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80053f8:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
 80053fc:	e019      	b.n	8005432 <_ZN25positionControlModelClass4stepEv+0x73a>
  } else if (cosOut < sinOut) {
 80053fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005402:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005406:	f7fb fb71 	bl	8000aec <__aeabi_dcmplt>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00b      	beq.n	8005428 <_ZN25positionControlModelClass4stepEv+0x730>
    positionControl_B.Saturation_j = sinOut;
 8005410:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005412:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005416:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
 800541a:	e00a      	b.n	8005432 <_ZN25positionControlModelClass4stepEv+0x73a>
 800541c:	20000118 	.word	0x20000118
 8005420:	200000c8 	.word	0x200000c8
 8005424:	200000b8 	.word	0x200000b8
  } else {
    positionControl_B.Saturation_j = cosOut;
 8005428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800542a:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800542e:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168

  // Outport: '<Root>/des_pitch' incorporates:
  //   DataTypeConversion: '<S1>/Data Type Conversion2'

  positionControl_Y.des_pitch = static_cast<real32_T>
    (positionControl_B.Saturation_j);
 8005432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005434:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
  positionControl_Y.des_pitch = static_cast<real32_T>
 8005438:	4618      	mov	r0, r3
 800543a:	4621      	mov	r1, r4
 800543c:	f7fb fbdc 	bl	8000bf8 <__aeabi_d2f>
 8005440:	4602      	mov	r2, r0
 8005442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005444:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384

  // Sum: '<S1>/Sum' incorporates:
  //   Inport: '<Root>/set_yaw'

  positionControl_B.Sum_my = positionControl_U.set_yaw -
 8005448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544a:	e9d3 01cc 	ldrd	r0, r1, [r3, #816]	; 0x330
    positionControl_B.DataTypeConversion;
 800544e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005450:	e9d3 3400 	ldrd	r3, r4, [r3]
  positionControl_B.Sum_my = positionControl_U.set_yaw -
 8005454:	461a      	mov	r2, r3
 8005456:	4623      	mov	r3, r4
 8005458:	f7fa ff1e 	bl	8000298 <__aeabi_dsub>
 800545c:	4603      	mov	r3, r0
 800545e:	460c      	mov	r4, r1
 8005460:	4619      	mov	r1, r3
 8005462:	4622      	mov	r2, r4
 8005464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005466:	e9c3 125c 	strd	r1, r2, [r3, #368]	; 0x170

  // Gain: '<S1>/Gain'
  positionControl_B.Gain = Yaw_angleToRate_P * positionControl_B.Sum_my;
 800546a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546c:	e9d3 015c 	ldrd	r0, r1, [r3, #368]	; 0x170
 8005470:	4b61      	ldr	r3, [pc, #388]	; (80055f8 <_ZN25positionControlModelClass4stepEv+0x900>)
 8005472:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005476:	461a      	mov	r2, r3
 8005478:	4623      	mov	r3, r4
 800547a:	f7fb f8c5 	bl	8000608 <__aeabi_dmul>
 800547e:	4603      	mov	r3, r0
 8005480:	460c      	mov	r4, r1
 8005482:	4619      	mov	r1, r3
 8005484:	4622      	mov	r2, r4
 8005486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005488:	e9c3 125e 	strd	r1, r2, [r3, #376]	; 0x178

  // Outport: '<Root>/des_yaw_rate' incorporates:
  //   DataTypeConversion: '<S1>/Data Type Conversion1'

  positionControl_Y.des_yaw_rate = static_cast<real32_T>(positionControl_B.Gain);
 800548c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548e:	e9d3 345e 	ldrd	r3, r4, [r3, #376]	; 0x178
 8005492:	4618      	mov	r0, r3
 8005494:	4621      	mov	r1, r4
 8005496:	f7fb fbaf 	bl	8000bf8 <__aeabi_d2f>
 800549a:	4602      	mov	r2, r0
 800549c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549e:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388

  // Sum: '<S1>/Add2' incorporates:
  //   Inport: '<Root>/estim_z'
  //   Inport: '<Root>/set_z'

  positionControl_B.alt_error = positionControl_U.set_z -
 80054a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a4:	e9d3 01d2 	ldrd	r0, r1, [r3, #840]	; 0x348
    positionControl_U.estim_z;
 80054a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054aa:	e9d3 34d8 	ldrd	r3, r4, [r3, #864]	; 0x360
  positionControl_B.alt_error = positionControl_U.set_z -
 80054ae:	461a      	mov	r2, r3
 80054b0:	4623      	mov	r3, r4
 80054b2:	f7fa fef1 	bl	8000298 <__aeabi_dsub>
 80054b6:	4603      	mov	r3, r0
 80054b8:	460c      	mov	r4, r1
 80054ba:	4619      	mov	r1, r3
 80054bc:	4622      	mov	r2, r4
 80054be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c0:	e9c3 1260 	strd	r1, r2, [r3, #384]	; 0x180

  // Gain: '<S141>/Proportional Gain'
  positionControl_B.ProportionalGain_p4 = pos_z_P * positionControl_B.alt_error;
 80054c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c6:	e9d3 0160 	ldrd	r0, r1, [r3, #384]	; 0x180
 80054ca:	4b4c      	ldr	r3, [pc, #304]	; (80055fc <_ZN25positionControlModelClass4stepEv+0x904>)
 80054cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054d0:	461a      	mov	r2, r3
 80054d2:	4623      	mov	r3, r4
 80054d4:	f7fb f898 	bl	8000608 <__aeabi_dmul>
 80054d8:	4603      	mov	r3, r0
 80054da:	460c      	mov	r4, r1
 80054dc:	4619      	mov	r1, r3
 80054de:	4622      	mov	r2, r4
 80054e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e2:	e9c3 1262 	strd	r1, r2, [r3, #392]	; 0x188

  // DiscreteIntegrator: '<S136>/Integrator'
  positionControl_B.Integrator_b = positionControl_DW.Integrator_DSTATE_j;
 80054e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e8:	e9d3 12c2 	ldrd	r1, r2, [r3, #776]	; 0x308
 80054ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ee:	e9c3 1264 	strd	r1, r2, [r3, #400]	; 0x190

  // Gain: '<S130>/Derivative Gain'
  positionControl_B.DerivativeGain_b = pos_z_D * positionControl_B.alt_error;
 80054f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f4:	e9d3 0160 	ldrd	r0, r1, [r3, #384]	; 0x180
 80054f8:	4b41      	ldr	r3, [pc, #260]	; (8005600 <_ZN25positionControlModelClass4stepEv+0x908>)
 80054fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054fe:	461a      	mov	r2, r3
 8005500:	4623      	mov	r3, r4
 8005502:	f7fb f881 	bl	8000608 <__aeabi_dmul>
 8005506:	4603      	mov	r3, r0
 8005508:	460c      	mov	r4, r1
 800550a:	4619      	mov	r1, r3
 800550c:	4622      	mov	r2, r4
 800550e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005510:	e9c3 1266 	strd	r1, r2, [r3, #408]	; 0x198

  // DiscreteIntegrator: '<S131>/Filter'
  positionControl_B.Filter_o = positionControl_DW.Filter_DSTATE_mf;
 8005514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005516:	e9d3 12c4 	ldrd	r1, r2, [r3, #784]	; 0x310
 800551a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551c:	e9c3 1268 	strd	r1, r2, [r3, #416]	; 0x1a0

  // Sum: '<S131>/SumD'
  positionControl_B.SumD_m = positionControl_B.DerivativeGain_b -
 8005520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005522:	e9d3 0166 	ldrd	r0, r1, [r3, #408]	; 0x198
    positionControl_B.Filter_o;
 8005526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005528:	e9d3 3468 	ldrd	r3, r4, [r3, #416]	; 0x1a0
  positionControl_B.SumD_m = positionControl_B.DerivativeGain_b -
 800552c:	461a      	mov	r2, r3
 800552e:	4623      	mov	r3, r4
 8005530:	f7fa feb2 	bl	8000298 <__aeabi_dsub>
 8005534:	4603      	mov	r3, r0
 8005536:	460c      	mov	r4, r1
 8005538:	4619      	mov	r1, r3
 800553a:	4622      	mov	r2, r4
 800553c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553e:	e9c3 126a 	strd	r1, r2, [r3, #424]	; 0x1a8

  // Gain: '<S139>/Filter Coefficient'
  positionControl_B.FilterCoefficient_d = positionControl_P.PIDController2_N *
 8005542:	4b30      	ldr	r3, [pc, #192]	; (8005604 <_ZN25positionControlModelClass4stepEv+0x90c>)
 8005544:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
    positionControl_B.SumD_m;
 8005548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554a:	e9d3 346a 	ldrd	r3, r4, [r3, #424]	; 0x1a8
  positionControl_B.FilterCoefficient_d = positionControl_P.PIDController2_N *
 800554e:	461a      	mov	r2, r3
 8005550:	4623      	mov	r3, r4
 8005552:	f7fb f859 	bl	8000608 <__aeabi_dmul>
 8005556:	4603      	mov	r3, r0
 8005558:	460c      	mov	r4, r1
 800555a:	4619      	mov	r1, r3
 800555c:	4622      	mov	r2, r4
 800555e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005560:	e9c3 126c 	strd	r1, r2, [r3, #432]	; 0x1b0

  // Sum: '<S145>/Sum'
  positionControl_B.Sum_f = positionControl_B.ProportionalGain_p4 +
 8005564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005566:	e9d3 0162 	ldrd	r0, r1, [r3, #392]	; 0x188
    positionControl_B.Integrator_b + positionControl_B.FilterCoefficient_d;
 800556a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556c:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
  positionControl_B.Sum_f = positionControl_B.ProportionalGain_p4 +
 8005570:	461a      	mov	r2, r3
 8005572:	4623      	mov	r3, r4
 8005574:	f7fa fe92 	bl	800029c <__adddf3>
 8005578:	4603      	mov	r3, r0
 800557a:	460c      	mov	r4, r1
 800557c:	4618      	mov	r0, r3
 800557e:	4621      	mov	r1, r4
    positionControl_B.Integrator_b + positionControl_B.FilterCoefficient_d;
 8005580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005582:	e9d3 346c 	ldrd	r3, r4, [r3, #432]	; 0x1b0
 8005586:	461a      	mov	r2, r3
 8005588:	4623      	mov	r3, r4
 800558a:	f7fa fe87 	bl	800029c <__adddf3>
 800558e:	4603      	mov	r3, r0
 8005590:	460c      	mov	r4, r1
 8005592:	4619      	mov	r1, r3
 8005594:	4622      	mov	r2, r4
  positionControl_B.Sum_f = positionControl_B.ProportionalGain_p4 +
 8005596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005598:	e9c3 126e 	strd	r1, r2, [r3, #440]	; 0x1b8

  // Saturate: '<S143>/Saturation'
  cosOut = positionControl_B.Sum_f;
 800559c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559e:	e9d3 346e 	ldrd	r3, r4, [r3, #440]	; 0x1b8
 80055a2:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  sinOut = positionControl_P.PIDController2_LowerSaturationL;
 80055a6:	4b17      	ldr	r3, [pc, #92]	; (8005604 <_ZN25positionControlModelClass4stepEv+0x90c>)
 80055a8:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 80055ac:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
  u2 = positionControl_P.PIDController2_UpperSaturationL;
 80055b0:	4b14      	ldr	r3, [pc, #80]	; (8005604 <_ZN25positionControlModelClass4stepEv+0x90c>)
 80055b2:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 80055b6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
  if (cosOut > u2) {
 80055ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80055be:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80055c2:	f7fb fab1 	bl	8000b28 <__aeabi_dcmpgt>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d005      	beq.n	80055d8 <_ZN25positionControlModelClass4stepEv+0x8e0>
    positionControl_B.Saturation_m = u2;
 80055cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055ce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80055d2:	e9c2 3470 	strd	r3, r4, [r2, #448]	; 0x1c0
 80055d6:	e01c      	b.n	8005612 <_ZN25positionControlModelClass4stepEv+0x91a>
  } else if (cosOut < sinOut) {
 80055d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80055e0:	f7fb fa84 	bl	8000aec <__aeabi_dcmplt>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00e      	beq.n	8005608 <_ZN25positionControlModelClass4stepEv+0x910>
    positionControl_B.Saturation_m = sinOut;
 80055ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055ec:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80055f0:	e9c2 3470 	strd	r3, r4, [r2, #448]	; 0x1c0
 80055f4:	e00d      	b.n	8005612 <_ZN25positionControlModelClass4stepEv+0x91a>
 80055f6:	bf00      	nop
 80055f8:	200000a0 	.word	0x200000a0
 80055fc:	200000f8 	.word	0x200000f8
 8005600:	20000aa8 	.word	0x20000aa8
 8005604:	20000118 	.word	0x20000118
  } else {
    positionControl_B.Saturation_m = cosOut;
 8005608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800560a:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800560e:	e9c2 3470 	strd	r3, r4, [r2, #448]	; 0x1c0
  // End of Saturate: '<S143>/Saturation'

  // Sum: '<S1>/Add3' incorporates:
  //   Inport: '<Root>/estim_dz'

  positionControl_B.vz_error = positionControl_B.Saturation_m -
 8005612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005614:	e9d3 0170 	ldrd	r0, r1, [r3, #448]	; 0x1c0
    positionControl_U.estim_dz;
 8005618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561a:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
  positionControl_B.vz_error = positionControl_B.Saturation_m -
 800561e:	461a      	mov	r2, r3
 8005620:	4623      	mov	r3, r4
 8005622:	f7fa fe39 	bl	8000298 <__aeabi_dsub>
 8005626:	4603      	mov	r3, r0
 8005628:	460c      	mov	r4, r1
 800562a:	4619      	mov	r1, r3
 800562c:	4622      	mov	r2, r4
 800562e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005630:	e9c3 1272 	strd	r1, r2, [r3, #456]	; 0x1c8

  // Gain: '<S189>/Proportional Gain'
  positionControl_B.ProportionalGain_k = pos_z_vel_P *
    positionControl_B.vz_error;
 8005634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005636:	e9d3 0172 	ldrd	r0, r1, [r3, #456]	; 0x1c8
  positionControl_B.ProportionalGain_k = pos_z_vel_P *
 800563a:	4b9c      	ldr	r3, [pc, #624]	; (80058ac <_ZN25positionControlModelClass4stepEv+0xbb4>)
 800563c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005640:	461a      	mov	r2, r3
 8005642:	4623      	mov	r3, r4
 8005644:	f7fa ffe0 	bl	8000608 <__aeabi_dmul>
 8005648:	4603      	mov	r3, r0
 800564a:	460c      	mov	r4, r1
 800564c:	4619      	mov	r1, r3
 800564e:	4622      	mov	r2, r4
 8005650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005652:	e9c3 1274 	strd	r1, r2, [r3, #464]	; 0x1d0

  // DiscreteIntegrator: '<S184>/Integrator'
  positionControl_B.Integrator_p = positionControl_DW.Integrator_DSTATE_b;
 8005656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005658:	e9d3 12c6 	ldrd	r1, r2, [r3, #792]	; 0x318
 800565c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565e:	e9c3 1276 	strd	r1, r2, [r3, #472]	; 0x1d8

  // Gain: '<S178>/Derivative Gain'
  positionControl_B.DerivativeGain_pu = pos_z_vel_D * positionControl_B.vz_error;
 8005662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005664:	e9d3 0172 	ldrd	r0, r1, [r3, #456]	; 0x1c8
 8005668:	4b91      	ldr	r3, [pc, #580]	; (80058b0 <_ZN25positionControlModelClass4stepEv+0xbb8>)
 800566a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800566e:	461a      	mov	r2, r3
 8005670:	4623      	mov	r3, r4
 8005672:	f7fa ffc9 	bl	8000608 <__aeabi_dmul>
 8005676:	4603      	mov	r3, r0
 8005678:	460c      	mov	r4, r1
 800567a:	4619      	mov	r1, r3
 800567c:	4622      	mov	r2, r4
 800567e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005680:	e9c3 1278 	strd	r1, r2, [r3, #480]	; 0x1e0

  // DiscreteIntegrator: '<S179>/Filter'
  positionControl_B.Filter_m = positionControl_DW.Filter_DSTATE_e;
 8005684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005686:	e9d3 12c8 	ldrd	r1, r2, [r3, #800]	; 0x320
 800568a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568c:	e9c3 127a 	strd	r1, r2, [r3, #488]	; 0x1e8

  // Sum: '<S179>/SumD'
  positionControl_B.SumD_b = positionControl_B.DerivativeGain_pu -
 8005690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005692:	e9d3 0178 	ldrd	r0, r1, [r3, #480]	; 0x1e0
    positionControl_B.Filter_m;
 8005696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005698:	e9d3 347a 	ldrd	r3, r4, [r3, #488]	; 0x1e8
  positionControl_B.SumD_b = positionControl_B.DerivativeGain_pu -
 800569c:	461a      	mov	r2, r3
 800569e:	4623      	mov	r3, r4
 80056a0:	f7fa fdfa 	bl	8000298 <__aeabi_dsub>
 80056a4:	4603      	mov	r3, r0
 80056a6:	460c      	mov	r4, r1
 80056a8:	4619      	mov	r1, r3
 80056aa:	4622      	mov	r2, r4
 80056ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ae:	e9c3 127c 	strd	r1, r2, [r3, #496]	; 0x1f0

  // Gain: '<S187>/Filter Coefficient'
  positionControl_B.FilterCoefficient_a = positionControl_P.PIDController3_N *
 80056b2:	4b80      	ldr	r3, [pc, #512]	; (80058b4 <_ZN25positionControlModelClass4stepEv+0xbbc>)
 80056b4:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
    positionControl_B.SumD_b;
 80056b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ba:	e9d3 347c 	ldrd	r3, r4, [r3, #496]	; 0x1f0
  positionControl_B.FilterCoefficient_a = positionControl_P.PIDController3_N *
 80056be:	461a      	mov	r2, r3
 80056c0:	4623      	mov	r3, r4
 80056c2:	f7fa ffa1 	bl	8000608 <__aeabi_dmul>
 80056c6:	4603      	mov	r3, r0
 80056c8:	460c      	mov	r4, r1
 80056ca:	4619      	mov	r1, r3
 80056cc:	4622      	mov	r2, r4
 80056ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d0:	e9c3 127e 	strd	r1, r2, [r3, #504]	; 0x1f8

  // Sum: '<S193>/Sum'
  positionControl_B.Sum_c = positionControl_B.ProportionalGain_k +
 80056d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d6:	e9d3 0174 	ldrd	r0, r1, [r3, #464]	; 0x1d0
    positionControl_B.Integrator_p + positionControl_B.FilterCoefficient_a;
 80056da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056dc:	e9d3 3476 	ldrd	r3, r4, [r3, #472]	; 0x1d8
  positionControl_B.Sum_c = positionControl_B.ProportionalGain_k +
 80056e0:	461a      	mov	r2, r3
 80056e2:	4623      	mov	r3, r4
 80056e4:	f7fa fdda 	bl	800029c <__adddf3>
 80056e8:	4603      	mov	r3, r0
 80056ea:	460c      	mov	r4, r1
 80056ec:	4618      	mov	r0, r3
 80056ee:	4621      	mov	r1, r4
    positionControl_B.Integrator_p + positionControl_B.FilterCoefficient_a;
 80056f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f2:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 80056f6:	461a      	mov	r2, r3
 80056f8:	4623      	mov	r3, r4
 80056fa:	f7fa fdcf 	bl	800029c <__adddf3>
 80056fe:	4603      	mov	r3, r0
 8005700:	460c      	mov	r4, r1
 8005702:	4619      	mov	r1, r3
 8005704:	4622      	mov	r2, r4
  positionControl_B.Sum_c = positionControl_B.ProportionalGain_k +
 8005706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005708:	e9c3 1280 	strd	r1, r2, [r3, #512]	; 0x200

  // Saturate: '<S191>/Saturation'
  cosOut = positionControl_B.Sum_c;
 800570c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570e:	e9d3 3480 	ldrd	r3, r4, [r3, #512]	; 0x200
 8005712:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  sinOut = positionControl_P.PIDController3_LowerSaturationL;
 8005716:	4b67      	ldr	r3, [pc, #412]	; (80058b4 <_ZN25positionControlModelClass4stepEv+0xbbc>)
 8005718:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 800571c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
  u2 = positionControl_P.PIDController3_UpperSaturationL;
 8005720:	4b64      	ldr	r3, [pc, #400]	; (80058b4 <_ZN25positionControlModelClass4stepEv+0xbbc>)
 8005722:	e9d3 343c 	ldrd	r3, r4, [r3, #240]	; 0xf0
 8005726:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
  if (cosOut > u2) {
 800572a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800572e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005732:	f7fb f9f9 	bl	8000b28 <__aeabi_dcmpgt>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d005      	beq.n	8005748 <_ZN25positionControlModelClass4stepEv+0xa50>
    positionControl_B.Saturation_li = u2;
 800573c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800573e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8005742:	e9c2 3482 	strd	r3, r4, [r2, #520]	; 0x208
 8005746:	e013      	b.n	8005770 <_ZN25positionControlModelClass4stepEv+0xa78>
  } else if (cosOut < sinOut) {
 8005748:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800574c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005750:	f7fb f9cc 	bl	8000aec <__aeabi_dcmplt>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <_ZN25positionControlModelClass4stepEv+0xa6e>
    positionControl_B.Saturation_li = sinOut;
 800575a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800575c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005760:	e9c2 3482 	strd	r3, r4, [r2, #520]	; 0x208
 8005764:	e004      	b.n	8005770 <_ZN25positionControlModelClass4stepEv+0xa78>
  } else {
    positionControl_B.Saturation_li = cosOut;
 8005766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005768:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800576c:	e9c2 3482 	strd	r3, r4, [r2, #520]	; 0x208

  // Outport: '<Root>/des_Thrust' incorporates:
  //   DataTypeConversion: '<S1>/Data Type Conversion4'

  positionControl_Y.des_Thrust = static_cast<real32_T>
    (positionControl_B.Saturation_li);
 8005770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005772:	e9d3 3482 	ldrd	r3, r4, [r3, #520]	; 0x208
  positionControl_Y.des_Thrust = static_cast<real32_T>
 8005776:	4618      	mov	r0, r3
 8005778:	4621      	mov	r1, r4
 800577a:	f7fb fa3d 	bl	8000bf8 <__aeabi_d2f>
 800577e:	4602      	mov	r2, r0
 8005780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005782:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

  // Gain: '<S37>/Integral Gain'
  positionControl_B.IntegralGain = pos_x_I * positionControl_B.x_error;
 8005786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005788:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800578c:	4b4a      	ldr	r3, [pc, #296]	; (80058b8 <_ZN25positionControlModelClass4stepEv+0xbc0>)
 800578e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005792:	461a      	mov	r2, r3
 8005794:	4623      	mov	r3, r4
 8005796:	f7fa ff37 	bl	8000608 <__aeabi_dmul>
 800579a:	4603      	mov	r3, r0
 800579c:	460c      	mov	r4, r1
 800579e:	4619      	mov	r1, r3
 80057a0:	4622      	mov	r2, r4
 80057a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a4:	e9c3 1284 	strd	r1, r2, [r3, #528]	; 0x210

  // Gain: '<S81>/ZeroGain'
  positionControl_B.ZeroGain = positionControl_P.ZeroGain_Gain *
 80057a8:	4b42      	ldr	r3, [pc, #264]	; (80058b4 <_ZN25positionControlModelClass4stepEv+0xbbc>)
 80057aa:	e9d3 0160 	ldrd	r0, r1, [r3, #384]	; 0x180
    positionControl_B.Sum_o;
 80057ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b0:	e9d3 3458 	ldrd	r3, r4, [r3, #352]	; 0x160
  positionControl_B.ZeroGain = positionControl_P.ZeroGain_Gain *
 80057b4:	461a      	mov	r2, r3
 80057b6:	4623      	mov	r3, r4
 80057b8:	f7fa ff26 	bl	8000608 <__aeabi_dmul>
 80057bc:	4603      	mov	r3, r0
 80057be:	460c      	mov	r4, r1
 80057c0:	4619      	mov	r1, r3
 80057c2:	4622      	mov	r2, r4
 80057c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c6:	e9c3 1286 	strd	r1, r2, [r3, #536]	; 0x218

  // DeadZone: '<S81>/DeadZone'
  if (positionControl_B.Sum_o >
 80057ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057cc:	e9d3 0158 	ldrd	r0, r1, [r3, #352]	; 0x160
      positionControl_P.PIDController1_UpperSaturationL) {
 80057d0:	4b38      	ldr	r3, [pc, #224]	; (80058b4 <_ZN25positionControlModelClass4stepEv+0xbbc>)
 80057d2:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
  if (positionControl_B.Sum_o >
 80057d6:	461a      	mov	r2, r3
 80057d8:	4623      	mov	r3, r4
 80057da:	f7fb f9a5 	bl	8000b28 <__aeabi_dcmpgt>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d011      	beq.n	8005808 <_ZN25positionControlModelClass4stepEv+0xb10>
    positionControl_B.DeadZone = positionControl_B.Sum_o -
 80057e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e6:	e9d3 0158 	ldrd	r0, r1, [r3, #352]	; 0x160
      positionControl_P.PIDController1_UpperSaturationL;
 80057ea:	4b32      	ldr	r3, [pc, #200]	; (80058b4 <_ZN25positionControlModelClass4stepEv+0xbbc>)
 80057ec:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
    positionControl_B.DeadZone = positionControl_B.Sum_o -
 80057f0:	461a      	mov	r2, r3
 80057f2:	4623      	mov	r3, r4
 80057f4:	f7fa fd50 	bl	8000298 <__aeabi_dsub>
 80057f8:	4603      	mov	r3, r0
 80057fa:	460c      	mov	r4, r1
 80057fc:	4619      	mov	r1, r3
 80057fe:	4622      	mov	r2, r4
 8005800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005802:	e9c3 1288 	strd	r1, r2, [r3, #544]	; 0x220
 8005806:	e025      	b.n	8005854 <_ZN25positionControlModelClass4stepEv+0xb5c>
  } else if (positionControl_B.Sum_o >=
 8005808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580a:	e9d3 0158 	ldrd	r0, r1, [r3, #352]	; 0x160
             positionControl_P.PIDController1_LowerSaturationL) {
 800580e:	4b29      	ldr	r3, [pc, #164]	; (80058b4 <_ZN25positionControlModelClass4stepEv+0xbbc>)
 8005810:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
  } else if (positionControl_B.Sum_o >=
 8005814:	461a      	mov	r2, r3
 8005816:	4623      	mov	r3, r4
 8005818:	f7fb f97c 	bl	8000b14 <__aeabi_dcmpge>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d007      	beq.n	8005832 <_ZN25positionControlModelClass4stepEv+0xb3a>
    positionControl_B.DeadZone = 0.0;
 8005822:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	f04f 0400 	mov.w	r4, #0
 800582c:	e9c2 3488 	strd	r3, r4, [r2, #544]	; 0x220
 8005830:	e010      	b.n	8005854 <_ZN25positionControlModelClass4stepEv+0xb5c>
  } else {
    positionControl_B.DeadZone = positionControl_B.Sum_o -
 8005832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005834:	e9d3 0158 	ldrd	r0, r1, [r3, #352]	; 0x160
      positionControl_P.PIDController1_LowerSaturationL;
 8005838:	4b1e      	ldr	r3, [pc, #120]	; (80058b4 <_ZN25positionControlModelClass4stepEv+0xbbc>)
 800583a:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
    positionControl_B.DeadZone = positionControl_B.Sum_o -
 800583e:	461a      	mov	r2, r3
 8005840:	4623      	mov	r3, r4
 8005842:	f7fa fd29 	bl	8000298 <__aeabi_dsub>
 8005846:	4603      	mov	r3, r0
 8005848:	460c      	mov	r4, r1
 800584a:	4619      	mov	r1, r3
 800584c:	4622      	mov	r2, r4
 800584e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005850:	e9c3 1288 	strd	r1, r2, [r3, #544]	; 0x220
  }

  // End of DeadZone: '<S81>/DeadZone'

  // RelationalOperator: '<S81>/NotEqual'
  positionControl_B.NotEqual = positionControl_B.ZeroGain !=
 8005854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005856:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	; 0x218
    positionControl_B.DeadZone;
 800585a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585c:	e9d3 3488 	ldrd	r3, r4, [r3, #544]	; 0x220
  positionControl_B.NotEqual = positionControl_B.ZeroGain !=
 8005860:	2201      	movs	r2, #1
 8005862:	4615      	mov	r5, r2
 8005864:	461a      	mov	r2, r3
 8005866:	4623      	mov	r3, r4
 8005868:	f7fb f936 	bl	8000ad8 <__aeabi_dcmpeq>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <_ZN25positionControlModelClass4stepEv+0xb7e>
 8005872:	2300      	movs	r3, #0
 8005874:	461d      	mov	r5, r3
 8005876:	b2eb      	uxtb	r3, r5
 8005878:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800587a:	f882 32be 	strb.w	r3, [r2, #702]	; 0x2be

  // Signum: '<S81>/SignPreSat'
  cosOut = positionControl_B.DeadZone;
 800587e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005880:	e9d3 3488 	ldrd	r3, r4, [r3, #544]	; 0x220
 8005884:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  if (cosOut < 0.0) {
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005894:	f7fb f92a 	bl	8000aec <__aeabi_dcmplt>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d010      	beq.n	80058c0 <_ZN25positionControlModelClass4stepEv+0xbc8>
    positionControl_B.SignPreSat = -1.0;
 800589e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	4c05      	ldr	r4, [pc, #20]	; (80058bc <_ZN25positionControlModelClass4stepEv+0xbc4>)
 80058a6:	e9c2 348a 	strd	r3, r4, [r2, #552]	; 0x228
 80058aa:	e020      	b.n	80058ee <_ZN25positionControlModelClass4stepEv+0xbf6>
 80058ac:	20000110 	.word	0x20000110
 80058b0:	20000100 	.word	0x20000100
 80058b4:	20000118 	.word	0x20000118
 80058b8:	200000a8 	.word	0x200000a8
 80058bc:	bff00000 	.word	0xbff00000
  } else if (cosOut > 0.0) {
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	f04f 0300 	mov.w	r3, #0
 80058c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80058cc:	f7fb f92c 	bl	8000b28 <__aeabi_dcmpgt>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d006      	beq.n	80058e4 <_ZN25positionControlModelClass4stepEv+0xbec>
    positionControl_B.SignPreSat = 1.0;
 80058d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058d8:	f04f 0300 	mov.w	r3, #0
 80058dc:	4ca2      	ldr	r4, [pc, #648]	; (8005b68 <_ZN25positionControlModelClass4stepEv+0xe70>)
 80058de:	e9c2 348a 	strd	r3, r4, [r2, #552]	; 0x228
 80058e2:	e004      	b.n	80058ee <_ZN25positionControlModelClass4stepEv+0xbf6>
  } else {
    positionControl_B.SignPreSat = cosOut;
 80058e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058e6:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80058ea:	e9c2 348a 	strd	r3, r4, [r2, #552]	; 0x228
  }

  // End of Signum: '<S81>/SignPreSat'

  // DataTypeConversion: '<S81>/DataTypeConv1'
  cosOut = std::fmod(std::floor(positionControl_B.SignPreSat), 256.0);
 80058ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f0:	ed93 7b8a 	vldr	d7, [r3, #552]	; 0x228
 80058f4:	eeb0 0a47 	vmov.f32	s0, s14
 80058f8:	eef0 0a67 	vmov.f32	s1, s15
 80058fc:	f01f feac 	bl	8025658 <floor>
 8005900:	eeb0 7a40 	vmov.f32	s14, s0
 8005904:	eef0 7a60 	vmov.f32	s15, s1
 8005908:	ed9f 1b95 	vldr	d1, [pc, #596]	; 8005b60 <_ZN25positionControlModelClass4stepEv+0xe68>
 800590c:	eeb0 0a47 	vmov.f32	s0, s14
 8005910:	eef0 0a67 	vmov.f32	s1, s15
 8005914:	f020 f8ca 	bl	8025aac <fmod>
 8005918:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
  positionControl_B.DataTypeConv1 = static_cast<int8_T>(cosOut < 0.0 ?
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	f04f 0300 	mov.w	r3, #0
 8005924:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005928:	f7fb f8e0 	bl	8000aec <__aeabi_dcmplt>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00f      	beq.n	8005952 <_ZN25positionControlModelClass4stepEv+0xc5a>
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>
    (static_cast<uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>
 8005932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005934:	62bb      	str	r3, [r7, #40]	; 0x28
 8005936:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005938:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800593c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800593e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005942:	f7fb f939 	bl	8000bb8 <__aeabi_d2uiz>
 8005946:	4603      	mov	r3, r0
 8005948:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv1 = static_cast<int8_T>(cosOut < 0.0 ?
 800594a:	425b      	negs	r3, r3
 800594c:	b2db      	uxtb	r3, r3
 800594e:	b25b      	sxtb	r3, r3
 8005950:	e006      	b.n	8005960 <_ZN25positionControlModelClass4stepEv+0xc68>
    (static_cast<uint8_T>(cosOut))));
 8005952:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005956:	f7fb f92f 	bl	8000bb8 <__aeabi_d2uiz>
 800595a:	4603      	mov	r3, r0
 800595c:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv1 = static_cast<int8_T>(cosOut < 0.0 ?
 800595e:	b25b      	sxtb	r3, r3
 8005960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005962:	f882 32b8 	strb.w	r3, [r2, #696]	; 0x2b8

  // Gain: '<S85>/Integral Gain'
  positionControl_B.IntegralGain_k = pos_x_vel_I * positionControl_B.vel_error[0];
 8005966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005968:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 800596c:	4b7f      	ldr	r3, [pc, #508]	; (8005b6c <_ZN25positionControlModelClass4stepEv+0xe74>)
 800596e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005972:	461a      	mov	r2, r3
 8005974:	4623      	mov	r3, r4
 8005976:	f7fa fe47 	bl	8000608 <__aeabi_dmul>
 800597a:	4603      	mov	r3, r0
 800597c:	460c      	mov	r4, r1
 800597e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005980:	e9c2 348c 	strd	r3, r4, [r2, #560]	; 0x230

  // Signum: '<S81>/SignPreIntegrator'
  cosOut = positionControl_B.IntegralGain_k;
 8005984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005986:	e9d3 348c 	ldrd	r3, r4, [r3, #560]	; 0x230
 800598a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  if (cosOut < 0.0) {
 800598e:	f04f 0200 	mov.w	r2, #0
 8005992:	f04f 0300 	mov.w	r3, #0
 8005996:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800599a:	f7fb f8a7 	bl	8000aec <__aeabi_dcmplt>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d006      	beq.n	80059b2 <_ZN25positionControlModelClass4stepEv+0xcba>
    positionControl_B.SignPreIntegrator = -1.0;
 80059a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059a6:	f04f 0300 	mov.w	r3, #0
 80059aa:	4c71      	ldr	r4, [pc, #452]	; (8005b70 <_ZN25positionControlModelClass4stepEv+0xe78>)
 80059ac:	e9c2 348e 	strd	r3, r4, [r2, #568]	; 0x238
 80059b0:	e016      	b.n	80059e0 <_ZN25positionControlModelClass4stepEv+0xce8>
  } else if (cosOut > 0.0) {
 80059b2:	f04f 0200 	mov.w	r2, #0
 80059b6:	f04f 0300 	mov.w	r3, #0
 80059ba:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80059be:	f7fb f8b3 	bl	8000b28 <__aeabi_dcmpgt>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d006      	beq.n	80059d6 <_ZN25positionControlModelClass4stepEv+0xcde>
    positionControl_B.SignPreIntegrator = 1.0;
 80059c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059ca:	f04f 0300 	mov.w	r3, #0
 80059ce:	4c66      	ldr	r4, [pc, #408]	; (8005b68 <_ZN25positionControlModelClass4stepEv+0xe70>)
 80059d0:	e9c2 348e 	strd	r3, r4, [r2, #568]	; 0x238
 80059d4:	e004      	b.n	80059e0 <_ZN25positionControlModelClass4stepEv+0xce8>
  } else {
    positionControl_B.SignPreIntegrator = cosOut;
 80059d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059d8:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80059dc:	e9c2 348e 	strd	r3, r4, [r2, #568]	; 0x238
  }

  // End of Signum: '<S81>/SignPreIntegrator'

  // DataTypeConversion: '<S81>/DataTypeConv2'
  cosOut = std::fmod(std::floor(positionControl_B.SignPreIntegrator), 256.0);
 80059e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e2:	ed93 7b8e 	vldr	d7, [r3, #568]	; 0x238
 80059e6:	eeb0 0a47 	vmov.f32	s0, s14
 80059ea:	eef0 0a67 	vmov.f32	s1, s15
 80059ee:	f01f fe33 	bl	8025658 <floor>
 80059f2:	eeb0 7a40 	vmov.f32	s14, s0
 80059f6:	eef0 7a60 	vmov.f32	s15, s1
 80059fa:	ed9f 1b59 	vldr	d1, [pc, #356]	; 8005b60 <_ZN25positionControlModelClass4stepEv+0xe68>
 80059fe:	eeb0 0a47 	vmov.f32	s0, s14
 8005a02:	eef0 0a67 	vmov.f32	s1, s15
 8005a06:	f020 f851 	bl	8025aac <fmod>
 8005a0a:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
  positionControl_B.DataTypeConv2 = static_cast<int8_T>(cosOut < 0.0 ?
 8005a0e:	f04f 0200 	mov.w	r2, #0
 8005a12:	f04f 0300 	mov.w	r3, #0
 8005a16:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005a1a:	f7fb f867 	bl	8000aec <__aeabi_dcmplt>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00f      	beq.n	8005a44 <_ZN25positionControlModelClass4stepEv+0xd4c>
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>(static_cast<
    uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>(static_cast<
 8005a24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a26:	623b      	str	r3, [r7, #32]
 8005a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a2a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>(static_cast<
 8005a30:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005a34:	f7fb f8c0 	bl	8000bb8 <__aeabi_d2uiz>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv2 = static_cast<int8_T>(cosOut < 0.0 ?
 8005a3c:	425b      	negs	r3, r3
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	b25b      	sxtb	r3, r3
 8005a42:	e006      	b.n	8005a52 <_ZN25positionControlModelClass4stepEv+0xd5a>
    uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>(static_cast<
 8005a44:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005a48:	f7fb f8b6 	bl	8000bb8 <__aeabi_d2uiz>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv2 = static_cast<int8_T>(cosOut < 0.0 ?
 8005a50:	b25b      	sxtb	r3, r3
 8005a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a54:	f882 32b9 	strb.w	r3, [r2, #697]	; 0x2b9
    uint8_T>(cosOut))));

  // RelationalOperator: '<S81>/Equal1'
  positionControl_B.Equal1 = positionControl_B.DataTypeConv1 ==
 8005a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5a:	f993 22b8 	ldrsb.w	r2, [r3, #696]	; 0x2b8
    positionControl_B.DataTypeConv2;
 8005a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a60:	f993 32b9 	ldrsb.w	r3, [r3, #697]	; 0x2b9
  positionControl_B.Equal1 = positionControl_B.DataTypeConv1 ==
 8005a64:	429a      	cmp	r2, r3
 8005a66:	bf0c      	ite	eq
 8005a68:	2301      	moveq	r3, #1
 8005a6a:	2300      	movne	r3, #0
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	461a      	mov	r2, r3
 8005a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a72:	f883 22bf 	strb.w	r2, [r3, #703]	; 0x2bf

  // Logic: '<S81>/AND3'
  positionControl_B.AND3 = positionControl_B.NotEqual &&
 8005a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a78:	f893 32be 	ldrb.w	r3, [r3, #702]	; 0x2be
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d006      	beq.n	8005a8e <_ZN25positionControlModelClass4stepEv+0xd96>
    positionControl_B.Equal1;
 8005a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a82:	f893 32bf 	ldrb.w	r3, [r3, #703]	; 0x2bf
  positionControl_B.AND3 = positionControl_B.NotEqual &&
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <_ZN25positionControlModelClass4stepEv+0xd96>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <_ZN25positionControlModelClass4stepEv+0xd98>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	461a      	mov	r2, r3
 8005a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a94:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0

  // Switch: '<S81>/Switch' incorporates:
  //   Constant: '<S81>/Constant1'

  if (positionControl_B.AND3) {
 8005a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9a:	f893 32c0 	ldrb.w	r3, [r3, #704]	; 0x2c0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d006      	beq.n	8005ab0 <_ZN25positionControlModelClass4stepEv+0xdb8>
    positionControl_B.Switch = positionControl_P.Constant1_Value;
 8005aa2:	4b34      	ldr	r3, [pc, #208]	; (8005b74 <_ZN25positionControlModelClass4stepEv+0xe7c>)
 8005aa4:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 8005aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005aaa:	e9c2 3490 	strd	r3, r4, [r2, #576]	; 0x240
 8005aae:	e005      	b.n	8005abc <_ZN25positionControlModelClass4stepEv+0xdc4>
  } else {
    positionControl_B.Switch = positionControl_B.IntegralGain_k;
 8005ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab2:	e9d3 348c 	ldrd	r3, r4, [r3, #560]	; 0x230
 8005ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ab8:	e9c2 3490 	strd	r3, r4, [r2, #576]	; 0x240
  }

  // End of Switch: '<S81>/Switch'

  // Gain: '<S229>/Integral Gain'
  positionControl_B.IntegralGain_o = pos_y_I * positionControl_B.y_error;
 8005abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005abe:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8005ac2:	4b2d      	ldr	r3, [pc, #180]	; (8005b78 <_ZN25positionControlModelClass4stepEv+0xe80>)
 8005ac4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	4623      	mov	r3, r4
 8005acc:	f7fa fd9c 	bl	8000608 <__aeabi_dmul>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ad6:	e9c2 3492 	strd	r3, r4, [r2, #584]	; 0x248

  // Gain: '<S273>/ZeroGain'
  positionControl_B.ZeroGain_b = positionControl_P.ZeroGain_Gain_m *
 8005ada:	4b26      	ldr	r3, [pc, #152]	; (8005b74 <_ZN25positionControlModelClass4stepEv+0xe7c>)
 8005adc:	e9d3 0162 	ldrd	r0, r1, [r3, #392]	; 0x188
    positionControl_B.Sum_m;
 8005ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae2:	e9d3 3446 	ldrd	r3, r4, [r3, #280]	; 0x118
  positionControl_B.ZeroGain_b = positionControl_P.ZeroGain_Gain_m *
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	4623      	mov	r3, r4
 8005aea:	f7fa fd8d 	bl	8000608 <__aeabi_dmul>
 8005aee:	4603      	mov	r3, r0
 8005af0:	460c      	mov	r4, r1
 8005af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005af4:	e9c2 3494 	strd	r3, r4, [r2, #592]	; 0x250

  // DeadZone: '<S273>/DeadZone'
  if (positionControl_B.Sum_m >
 8005af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afa:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
      positionControl_P.PIDController5_UpperSaturationL) {
 8005afe:	4b1d      	ldr	r3, [pc, #116]	; (8005b74 <_ZN25positionControlModelClass4stepEv+0xe7c>)
 8005b00:	e9d3 3436 	ldrd	r3, r4, [r3, #216]	; 0xd8
  if (positionControl_B.Sum_m >
 8005b04:	461a      	mov	r2, r3
 8005b06:	4623      	mov	r3, r4
 8005b08:	f7fb f80e 	bl	8000b28 <__aeabi_dcmpgt>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00f      	beq.n	8005b32 <_ZN25positionControlModelClass4stepEv+0xe3a>
    positionControl_B.DeadZone_m = positionControl_B.Sum_m -
 8005b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b14:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
      positionControl_P.PIDController5_UpperSaturationL;
 8005b18:	4b16      	ldr	r3, [pc, #88]	; (8005b74 <_ZN25positionControlModelClass4stepEv+0xe7c>)
 8005b1a:	e9d3 3436 	ldrd	r3, r4, [r3, #216]	; 0xd8
    positionControl_B.DeadZone_m = positionControl_B.Sum_m -
 8005b1e:	461a      	mov	r2, r3
 8005b20:	4623      	mov	r3, r4
 8005b22:	f7fa fbb9 	bl	8000298 <__aeabi_dsub>
 8005b26:	4603      	mov	r3, r0
 8005b28:	460c      	mov	r4, r1
 8005b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b2c:	e9c2 3496 	strd	r3, r4, [r2, #600]	; 0x258
 8005b30:	e033      	b.n	8005b9a <_ZN25positionControlModelClass4stepEv+0xea2>
  } else if (positionControl_B.Sum_m >=
 8005b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b34:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
             positionControl_P.PIDController5_LowerSaturationL) {
 8005b38:	4b0e      	ldr	r3, [pc, #56]	; (8005b74 <_ZN25positionControlModelClass4stepEv+0xe7c>)
 8005b3a:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
  } else if (positionControl_B.Sum_m >=
 8005b3e:	461a      	mov	r2, r3
 8005b40:	4623      	mov	r3, r4
 8005b42:	f7fa ffe7 	bl	8000b14 <__aeabi_dcmpge>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d017      	beq.n	8005b7c <_ZN25positionControlModelClass4stepEv+0xe84>
    positionControl_B.DeadZone_m = 0.0;
 8005b4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b4e:	f04f 0300 	mov.w	r3, #0
 8005b52:	f04f 0400 	mov.w	r4, #0
 8005b56:	e9c2 3496 	strd	r3, r4, [r2, #600]	; 0x258
 8005b5a:	e01e      	b.n	8005b9a <_ZN25positionControlModelClass4stepEv+0xea2>
 8005b5c:	f3af 8000 	nop.w
 8005b60:	00000000 	.word	0x00000000
 8005b64:	40700000 	.word	0x40700000
 8005b68:	3ff00000 	.word	0x3ff00000
 8005b6c:	200000c0 	.word	0x200000c0
 8005b70:	bff00000 	.word	0xbff00000
 8005b74:	20000118 	.word	0x20000118
 8005b78:	200000d0 	.word	0x200000d0
  } else {
    positionControl_B.DeadZone_m = positionControl_B.Sum_m -
 8005b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7e:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
      positionControl_P.PIDController5_LowerSaturationL;
 8005b82:	4b9b      	ldr	r3, [pc, #620]	; (8005df0 <_ZN25positionControlModelClass4stepEv+0x10f8>)
 8005b84:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
    positionControl_B.DeadZone_m = positionControl_B.Sum_m -
 8005b88:	461a      	mov	r2, r3
 8005b8a:	4623      	mov	r3, r4
 8005b8c:	f7fa fb84 	bl	8000298 <__aeabi_dsub>
 8005b90:	4603      	mov	r3, r0
 8005b92:	460c      	mov	r4, r1
 8005b94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b96:	e9c2 3496 	strd	r3, r4, [r2, #600]	; 0x258
  }

  // End of DeadZone: '<S273>/DeadZone'

  // RelationalOperator: '<S273>/NotEqual'
  positionControl_B.NotEqual_p = positionControl_B.ZeroGain_b !=
 8005b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b9c:	e9d3 0194 	ldrd	r0, r1, [r3, #592]	; 0x250
    positionControl_B.DeadZone_m;
 8005ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba2:	e9d3 3496 	ldrd	r3, r4, [r3, #600]	; 0x258
  positionControl_B.NotEqual_p = positionControl_B.ZeroGain_b !=
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	4615      	mov	r5, r2
 8005baa:	461a      	mov	r2, r3
 8005bac:	4623      	mov	r3, r4
 8005bae:	f7fa ff93 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <_ZN25positionControlModelClass4stepEv+0xec4>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	461d      	mov	r5, r3
 8005bbc:	b2eb      	uxtb	r3, r5
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc2:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1

  // Signum: '<S273>/SignPreSat'
  cosOut = positionControl_B.DeadZone_m;
 8005bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc8:	e9d3 3496 	ldrd	r3, r4, [r3, #600]	; 0x258
 8005bcc:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  if (cosOut < 0.0) {
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005bdc:	f7fa ff86 	bl	8000aec <__aeabi_dcmplt>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d006      	beq.n	8005bf4 <_ZN25positionControlModelClass4stepEv+0xefc>
    positionControl_B.SignPreSat_n = -1.0;
 8005be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005be8:	f04f 0300 	mov.w	r3, #0
 8005bec:	4c81      	ldr	r4, [pc, #516]	; (8005df4 <_ZN25positionControlModelClass4stepEv+0x10fc>)
 8005bee:	e9c2 3498 	strd	r3, r4, [r2, #608]	; 0x260
 8005bf2:	e016      	b.n	8005c22 <_ZN25positionControlModelClass4stepEv+0xf2a>
  } else if (cosOut > 0.0) {
 8005bf4:	f04f 0200 	mov.w	r2, #0
 8005bf8:	f04f 0300 	mov.w	r3, #0
 8005bfc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005c00:	f7fa ff92 	bl	8000b28 <__aeabi_dcmpgt>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d006      	beq.n	8005c18 <_ZN25positionControlModelClass4stepEv+0xf20>
    positionControl_B.SignPreSat_n = 1.0;
 8005c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	4c79      	ldr	r4, [pc, #484]	; (8005df8 <_ZN25positionControlModelClass4stepEv+0x1100>)
 8005c12:	e9c2 3498 	strd	r3, r4, [r2, #608]	; 0x260
 8005c16:	e004      	b.n	8005c22 <_ZN25positionControlModelClass4stepEv+0xf2a>
  } else {
    positionControl_B.SignPreSat_n = cosOut;
 8005c18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c1a:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8005c1e:	e9c2 3498 	strd	r3, r4, [r2, #608]	; 0x260
  }

  // End of Signum: '<S273>/SignPreSat'

  // DataTypeConversion: '<S273>/DataTypeConv1'
  cosOut = std::fmod(std::floor(positionControl_B.SignPreSat_n), 256.0);
 8005c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c24:	ed93 7b98 	vldr	d7, [r3, #608]	; 0x260
 8005c28:	eeb0 0a47 	vmov.f32	s0, s14
 8005c2c:	eef0 0a67 	vmov.f32	s1, s15
 8005c30:	f01f fd12 	bl	8025658 <floor>
 8005c34:	eeb0 7a40 	vmov.f32	s14, s0
 8005c38:	eef0 7a60 	vmov.f32	s15, s1
 8005c3c:	ed9f 1b6a 	vldr	d1, [pc, #424]	; 8005de8 <_ZN25positionControlModelClass4stepEv+0x10f0>
 8005c40:	eeb0 0a47 	vmov.f32	s0, s14
 8005c44:	eef0 0a67 	vmov.f32	s1, s15
 8005c48:	f01f ff30 	bl	8025aac <fmod>
 8005c4c:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
  positionControl_B.DataTypeConv1_e = static_cast<int8_T>(cosOut < 0.0 ?
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005c5c:	f7fa ff46 	bl	8000aec <__aeabi_dcmplt>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00f      	beq.n	8005c86 <_ZN25positionControlModelClass4stepEv+0xf8e>
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>
    (static_cast<uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>
 8005c66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c68:	61bb      	str	r3, [r7, #24]
 8005c6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005c70:	61fb      	str	r3, [r7, #28]
 8005c72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005c76:	f7fa ff9f 	bl	8000bb8 <__aeabi_d2uiz>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv1_e = static_cast<int8_T>(cosOut < 0.0 ?
 8005c7e:	425b      	negs	r3, r3
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	b25b      	sxtb	r3, r3
 8005c84:	e006      	b.n	8005c94 <_ZN25positionControlModelClass4stepEv+0xf9c>
    (static_cast<uint8_T>(cosOut))));
 8005c86:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005c8a:	f7fa ff95 	bl	8000bb8 <__aeabi_d2uiz>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv1_e = static_cast<int8_T>(cosOut < 0.0 ?
 8005c92:	b25b      	sxtb	r3, r3
 8005c94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c96:	f882 32ba 	strb.w	r3, [r2, #698]	; 0x2ba

  // Gain: '<S277>/Integral Gain'
  positionControl_B.IntegralGain_b = pos_y_vel_I * positionControl_B.vel_error[1];
 8005c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9c:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 8005ca0:	4b56      	ldr	r3, [pc, #344]	; (8005dfc <_ZN25positionControlModelClass4stepEv+0x1104>)
 8005ca2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	4623      	mov	r3, r4
 8005caa:	f7fa fcad 	bl	8000608 <__aeabi_dmul>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	460c      	mov	r4, r1
 8005cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cb4:	e9c2 349a 	strd	r3, r4, [r2, #616]	; 0x268

  // Signum: '<S273>/SignPreIntegrator'
  cosOut = positionControl_B.IntegralGain_b;
 8005cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cba:	e9d3 349a 	ldrd	r3, r4, [r3, #616]	; 0x268
 8005cbe:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  if (cosOut < 0.0) {
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	f04f 0300 	mov.w	r3, #0
 8005cca:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005cce:	f7fa ff0d 	bl	8000aec <__aeabi_dcmplt>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d006      	beq.n	8005ce6 <_ZN25positionControlModelClass4stepEv+0xfee>
    positionControl_B.SignPreIntegrator_n = -1.0;
 8005cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cda:	f04f 0300 	mov.w	r3, #0
 8005cde:	4c45      	ldr	r4, [pc, #276]	; (8005df4 <_ZN25positionControlModelClass4stepEv+0x10fc>)
 8005ce0:	e9c2 349c 	strd	r3, r4, [r2, #624]	; 0x270
 8005ce4:	e016      	b.n	8005d14 <_ZN25positionControlModelClass4stepEv+0x101c>
  } else if (cosOut > 0.0) {
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005cf2:	f7fa ff19 	bl	8000b28 <__aeabi_dcmpgt>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d006      	beq.n	8005d0a <_ZN25positionControlModelClass4stepEv+0x1012>
    positionControl_B.SignPreIntegrator_n = 1.0;
 8005cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cfe:	f04f 0300 	mov.w	r3, #0
 8005d02:	4c3d      	ldr	r4, [pc, #244]	; (8005df8 <_ZN25positionControlModelClass4stepEv+0x1100>)
 8005d04:	e9c2 349c 	strd	r3, r4, [r2, #624]	; 0x270
 8005d08:	e004      	b.n	8005d14 <_ZN25positionControlModelClass4stepEv+0x101c>
  } else {
    positionControl_B.SignPreIntegrator_n = cosOut;
 8005d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d0c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8005d10:	e9c2 349c 	strd	r3, r4, [r2, #624]	; 0x270
  }

  // End of Signum: '<S273>/SignPreIntegrator'

  // DataTypeConversion: '<S273>/DataTypeConv2'
  cosOut = std::fmod(std::floor(positionControl_B.SignPreIntegrator_n), 256.0);
 8005d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d16:	ed93 7b9c 	vldr	d7, [r3, #624]	; 0x270
 8005d1a:	eeb0 0a47 	vmov.f32	s0, s14
 8005d1e:	eef0 0a67 	vmov.f32	s1, s15
 8005d22:	f01f fc99 	bl	8025658 <floor>
 8005d26:	eeb0 7a40 	vmov.f32	s14, s0
 8005d2a:	eef0 7a60 	vmov.f32	s15, s1
 8005d2e:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 8005de8 <_ZN25positionControlModelClass4stepEv+0x10f0>
 8005d32:	eeb0 0a47 	vmov.f32	s0, s14
 8005d36:	eef0 0a67 	vmov.f32	s1, s15
 8005d3a:	f01f feb7 	bl	8025aac <fmod>
 8005d3e:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
  positionControl_B.DataTypeConv2_a = static_cast<int8_T>(cosOut < 0.0 ?
 8005d42:	f04f 0200 	mov.w	r2, #0
 8005d46:	f04f 0300 	mov.w	r3, #0
 8005d4a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005d4e:	f7fa fecd 	bl	8000aec <__aeabi_dcmplt>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00f      	beq.n	8005d78 <_ZN25positionControlModelClass4stepEv+0x1080>
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>
    (static_cast<uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>
 8005d58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d5a:	613b      	str	r3, [r7, #16]
 8005d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d5e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005d68:	f7fa ff26 	bl	8000bb8 <__aeabi_d2uiz>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv2_a = static_cast<int8_T>(cosOut < 0.0 ?
 8005d70:	425b      	negs	r3, r3
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	b25b      	sxtb	r3, r3
 8005d76:	e006      	b.n	8005d86 <_ZN25positionControlModelClass4stepEv+0x108e>
    (static_cast<uint8_T>(cosOut))));
 8005d78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005d7c:	f7fa ff1c 	bl	8000bb8 <__aeabi_d2uiz>
 8005d80:	4603      	mov	r3, r0
 8005d82:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv2_a = static_cast<int8_T>(cosOut < 0.0 ?
 8005d84:	b25b      	sxtb	r3, r3
 8005d86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d88:	f882 32bb 	strb.w	r3, [r2, #699]	; 0x2bb

  // RelationalOperator: '<S273>/Equal1'
  positionControl_B.Equal1_c = positionControl_B.DataTypeConv1_e ==
 8005d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8e:	f993 22ba 	ldrsb.w	r2, [r3, #698]	; 0x2ba
    positionControl_B.DataTypeConv2_a;
 8005d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d94:	f993 32bb 	ldrsb.w	r3, [r3, #699]	; 0x2bb
  positionControl_B.Equal1_c = positionControl_B.DataTypeConv1_e ==
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	bf0c      	ite	eq
 8005d9c:	2301      	moveq	r3, #1
 8005d9e:	2300      	movne	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	461a      	mov	r2, r3
 8005da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da6:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2

  // Logic: '<S273>/AND3'
  positionControl_B.AND3_n = positionControl_B.NotEqual_p &&
 8005daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dac:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d006      	beq.n	8005dc2 <_ZN25positionControlModelClass4stepEv+0x10ca>
    positionControl_B.Equal1_c;
 8005db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db6:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
  positionControl_B.AND3_n = positionControl_B.NotEqual_p &&
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <_ZN25positionControlModelClass4stepEv+0x10ca>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <_ZN25positionControlModelClass4stepEv+0x10cc>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc8:	f883 22c3 	strb.w	r2, [r3, #707]	; 0x2c3

  // Switch: '<S273>/Switch' incorporates:
  //   Constant: '<S273>/Constant1'

  if (positionControl_B.AND3_n) {
 8005dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dce:	f893 32c3 	ldrb.w	r3, [r3, #707]	; 0x2c3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d014      	beq.n	8005e00 <_ZN25positionControlModelClass4stepEv+0x1108>
    positionControl_B.Switch_m = positionControl_P.Constant1_Value_n;
 8005dd6:	4b06      	ldr	r3, [pc, #24]	; (8005df0 <_ZN25positionControlModelClass4stepEv+0x10f8>)
 8005dd8:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 8005ddc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dde:	e9c2 349e 	strd	r3, r4, [r2, #632]	; 0x278
 8005de2:	e013      	b.n	8005e0c <_ZN25positionControlModelClass4stepEv+0x1114>
 8005de4:	f3af 8000 	nop.w
 8005de8:	00000000 	.word	0x00000000
 8005dec:	40700000 	.word	0x40700000
 8005df0:	20000118 	.word	0x20000118
 8005df4:	bff00000 	.word	0xbff00000
 8005df8:	3ff00000 	.word	0x3ff00000
 8005dfc:	200000e8 	.word	0x200000e8
  } else {
    positionControl_B.Switch_m = positionControl_B.IntegralGain_b;
 8005e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e02:	e9d3 349a 	ldrd	r3, r4, [r3, #616]	; 0x268
 8005e06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e08:	e9c2 349e 	strd	r3, r4, [r2, #632]	; 0x278
  }

  // End of Switch: '<S273>/Switch'

  // Gain: '<S133>/Integral Gain'
  positionControl_B.IntegralGain_f = pos_z_I * positionControl_B.alt_error;
 8005e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0e:	e9d3 0160 	ldrd	r0, r1, [r3, #384]	; 0x180
 8005e12:	4ba7      	ldr	r3, [pc, #668]	; (80060b0 <_ZN25positionControlModelClass4stepEv+0x13b8>)
 8005e14:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	4623      	mov	r3, r4
 8005e1c:	f7fa fbf4 	bl	8000608 <__aeabi_dmul>
 8005e20:	4603      	mov	r3, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e26:	e9c2 34a0 	strd	r3, r4, [r2, #640]	; 0x280

  // Gain: '<S177>/ZeroGain'
  positionControl_B.ZeroGain_e = positionControl_P.ZeroGain_Gain_h *
 8005e2a:	4ba2      	ldr	r3, [pc, #648]	; (80060b4 <_ZN25positionControlModelClass4stepEv+0x13bc>)
 8005e2c:	e9d3 0164 	ldrd	r0, r1, [r3, #400]	; 0x190
    positionControl_B.Sum_c;
 8005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e32:	e9d3 3480 	ldrd	r3, r4, [r3, #512]	; 0x200
  positionControl_B.ZeroGain_e = positionControl_P.ZeroGain_Gain_h *
 8005e36:	461a      	mov	r2, r3
 8005e38:	4623      	mov	r3, r4
 8005e3a:	f7fa fbe5 	bl	8000608 <__aeabi_dmul>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	460c      	mov	r4, r1
 8005e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e44:	e9c2 34a2 	strd	r3, r4, [r2, #648]	; 0x288

  // DeadZone: '<S177>/DeadZone'
  if (positionControl_B.Sum_c >
 8005e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4a:	e9d3 0180 	ldrd	r0, r1, [r3, #512]	; 0x200
      positionControl_P.PIDController3_UpperSaturationL) {
 8005e4e:	4b99      	ldr	r3, [pc, #612]	; (80060b4 <_ZN25positionControlModelClass4stepEv+0x13bc>)
 8005e50:	e9d3 343c 	ldrd	r3, r4, [r3, #240]	; 0xf0
  if (positionControl_B.Sum_c >
 8005e54:	461a      	mov	r2, r3
 8005e56:	4623      	mov	r3, r4
 8005e58:	f7fa fe66 	bl	8000b28 <__aeabi_dcmpgt>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00f      	beq.n	8005e82 <_ZN25positionControlModelClass4stepEv+0x118a>
    positionControl_B.DeadZone_e = positionControl_B.Sum_c -
 8005e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e64:	e9d3 0180 	ldrd	r0, r1, [r3, #512]	; 0x200
      positionControl_P.PIDController3_UpperSaturationL;
 8005e68:	4b92      	ldr	r3, [pc, #584]	; (80060b4 <_ZN25positionControlModelClass4stepEv+0x13bc>)
 8005e6a:	e9d3 343c 	ldrd	r3, r4, [r3, #240]	; 0xf0
    positionControl_B.DeadZone_e = positionControl_B.Sum_c -
 8005e6e:	461a      	mov	r2, r3
 8005e70:	4623      	mov	r3, r4
 8005e72:	f7fa fa11 	bl	8000298 <__aeabi_dsub>
 8005e76:	4603      	mov	r3, r0
 8005e78:	460c      	mov	r4, r1
 8005e7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e7c:	e9c2 34a4 	strd	r3, r4, [r2, #656]	; 0x290
 8005e80:	e023      	b.n	8005eca <_ZN25positionControlModelClass4stepEv+0x11d2>
  } else if (positionControl_B.Sum_c >=
 8005e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e84:	e9d3 0180 	ldrd	r0, r1, [r3, #512]	; 0x200
             positionControl_P.PIDController3_LowerSaturationL) {
 8005e88:	4b8a      	ldr	r3, [pc, #552]	; (80060b4 <_ZN25positionControlModelClass4stepEv+0x13bc>)
 8005e8a:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
  } else if (positionControl_B.Sum_c >=
 8005e8e:	461a      	mov	r2, r3
 8005e90:	4623      	mov	r3, r4
 8005e92:	f7fa fe3f 	bl	8000b14 <__aeabi_dcmpge>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d007      	beq.n	8005eac <_ZN25positionControlModelClass4stepEv+0x11b4>
    positionControl_B.DeadZone_e = 0.0;
 8005e9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e9e:	f04f 0300 	mov.w	r3, #0
 8005ea2:	f04f 0400 	mov.w	r4, #0
 8005ea6:	e9c2 34a4 	strd	r3, r4, [r2, #656]	; 0x290
 8005eaa:	e00e      	b.n	8005eca <_ZN25positionControlModelClass4stepEv+0x11d2>
  } else {
    positionControl_B.DeadZone_e = positionControl_B.Sum_c -
 8005eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eae:	e9d3 0180 	ldrd	r0, r1, [r3, #512]	; 0x200
      positionControl_P.PIDController3_LowerSaturationL;
 8005eb2:	4b80      	ldr	r3, [pc, #512]	; (80060b4 <_ZN25positionControlModelClass4stepEv+0x13bc>)
 8005eb4:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
    positionControl_B.DeadZone_e = positionControl_B.Sum_c -
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4623      	mov	r3, r4
 8005ebc:	f7fa f9ec 	bl	8000298 <__aeabi_dsub>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ec6:	e9c2 34a4 	strd	r3, r4, [r2, #656]	; 0x290
  }

  // End of DeadZone: '<S177>/DeadZone'

  // RelationalOperator: '<S177>/NotEqual'
  positionControl_B.NotEqual_o = positionControl_B.ZeroGain_e !=
 8005eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ecc:	e9d3 01a2 	ldrd	r0, r1, [r3, #648]	; 0x288
    positionControl_B.DeadZone_e;
 8005ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed2:	e9d3 34a4 	ldrd	r3, r4, [r3, #656]	; 0x290
  positionControl_B.NotEqual_o = positionControl_B.ZeroGain_e !=
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	4615      	mov	r5, r2
 8005eda:	461a      	mov	r2, r3
 8005edc:	4623      	mov	r3, r4
 8005ede:	f7fa fdfb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <_ZN25positionControlModelClass4stepEv+0x11f4>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	461d      	mov	r5, r3
 8005eec:	b2eb      	uxtb	r3, r5
 8005eee:	461a      	mov	r2, r3
 8005ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef2:	f883 22c4 	strb.w	r2, [r3, #708]	; 0x2c4

  // Signum: '<S177>/SignPreSat'
  cosOut = positionControl_B.DeadZone_e;
 8005ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef8:	e9d3 34a4 	ldrd	r3, r4, [r3, #656]	; 0x290
 8005efc:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  if (cosOut < 0.0) {
 8005f00:	f04f 0200 	mov.w	r2, #0
 8005f04:	f04f 0300 	mov.w	r3, #0
 8005f08:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005f0c:	f7fa fdee 	bl	8000aec <__aeabi_dcmplt>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d006      	beq.n	8005f24 <_ZN25positionControlModelClass4stepEv+0x122c>
    positionControl_B.SignPreSat_h = -1.0;
 8005f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f18:	f04f 0300 	mov.w	r3, #0
 8005f1c:	4c66      	ldr	r4, [pc, #408]	; (80060b8 <_ZN25positionControlModelClass4stepEv+0x13c0>)
 8005f1e:	e9c2 34a6 	strd	r3, r4, [r2, #664]	; 0x298
 8005f22:	e016      	b.n	8005f52 <_ZN25positionControlModelClass4stepEv+0x125a>
  } else if (cosOut > 0.0) {
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005f30:	f7fa fdfa 	bl	8000b28 <__aeabi_dcmpgt>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d006      	beq.n	8005f48 <_ZN25positionControlModelClass4stepEv+0x1250>
    positionControl_B.SignPreSat_h = 1.0;
 8005f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f3c:	f04f 0300 	mov.w	r3, #0
 8005f40:	4c5e      	ldr	r4, [pc, #376]	; (80060bc <_ZN25positionControlModelClass4stepEv+0x13c4>)
 8005f42:	e9c2 34a6 	strd	r3, r4, [r2, #664]	; 0x298
 8005f46:	e004      	b.n	8005f52 <_ZN25positionControlModelClass4stepEv+0x125a>
  } else {
    positionControl_B.SignPreSat_h = cosOut;
 8005f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f4a:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8005f4e:	e9c2 34a6 	strd	r3, r4, [r2, #664]	; 0x298
  }

  // End of Signum: '<S177>/SignPreSat'

  // DataTypeConversion: '<S177>/DataTypeConv1'
  cosOut = std::fmod(std::floor(positionControl_B.SignPreSat_h), 256.0);
 8005f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f54:	ed93 7ba6 	vldr	d7, [r3, #664]	; 0x298
 8005f58:	eeb0 0a47 	vmov.f32	s0, s14
 8005f5c:	eef0 0a67 	vmov.f32	s1, s15
 8005f60:	f01f fb7a 	bl	8025658 <floor>
 8005f64:	eeb0 7a40 	vmov.f32	s14, s0
 8005f68:	eef0 7a60 	vmov.f32	s15, s1
 8005f6c:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 80060a8 <_ZN25positionControlModelClass4stepEv+0x13b0>
 8005f70:	eeb0 0a47 	vmov.f32	s0, s14
 8005f74:	eef0 0a67 	vmov.f32	s1, s15
 8005f78:	f01f fd98 	bl	8025aac <fmod>
 8005f7c:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
  positionControl_B.DataTypeConv1_m = static_cast<int8_T>(cosOut < 0.0 ?
 8005f80:	f04f 0200 	mov.w	r2, #0
 8005f84:	f04f 0300 	mov.w	r3, #0
 8005f88:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005f8c:	f7fa fdae 	bl	8000aec <__aeabi_dcmplt>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00f      	beq.n	8005fb6 <_ZN25positionControlModelClass4stepEv+0x12be>
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>
    (static_cast<uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>
 8005f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f98:	60bb      	str	r3, [r7, #8]
 8005f9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005fa6:	f7fa fe07 	bl	8000bb8 <__aeabi_d2uiz>
 8005faa:	4603      	mov	r3, r0
 8005fac:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv1_m = static_cast<int8_T>(cosOut < 0.0 ?
 8005fae:	425b      	negs	r3, r3
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	b25b      	sxtb	r3, r3
 8005fb4:	e006      	b.n	8005fc4 <_ZN25positionControlModelClass4stepEv+0x12cc>
    (static_cast<uint8_T>(cosOut))));
 8005fb6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005fba:	f7fa fdfd 	bl	8000bb8 <__aeabi_d2uiz>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv1_m = static_cast<int8_T>(cosOut < 0.0 ?
 8005fc2:	b25b      	sxtb	r3, r3
 8005fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fc6:	f882 32bc 	strb.w	r3, [r2, #700]	; 0x2bc

  // Gain: '<S181>/Integral Gain'
  positionControl_B.IntegralGain_l = pos_z_vel_I * positionControl_B.vz_error;
 8005fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fcc:	e9d3 0172 	ldrd	r0, r1, [r3, #456]	; 0x1c8
 8005fd0:	4b3b      	ldr	r3, [pc, #236]	; (80060c0 <_ZN25positionControlModelClass4stepEv+0x13c8>)
 8005fd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	4623      	mov	r3, r4
 8005fda:	f7fa fb15 	bl	8000608 <__aeabi_dmul>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fe4:	e9c2 34a8 	strd	r3, r4, [r2, #672]	; 0x2a0

  // Signum: '<S177>/SignPreIntegrator'
  cosOut = positionControl_B.IntegralGain_l;
 8005fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fea:	e9d3 34a8 	ldrd	r3, r4, [r3, #672]	; 0x2a0
 8005fee:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  if (cosOut < 0.0) {
 8005ff2:	f04f 0200 	mov.w	r2, #0
 8005ff6:	f04f 0300 	mov.w	r3, #0
 8005ffa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005ffe:	f7fa fd75 	bl	8000aec <__aeabi_dcmplt>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d006      	beq.n	8006016 <_ZN25positionControlModelClass4stepEv+0x131e>
    positionControl_B.SignPreIntegrator_d = -1.0;
 8006008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800600a:	f04f 0300 	mov.w	r3, #0
 800600e:	4c2a      	ldr	r4, [pc, #168]	; (80060b8 <_ZN25positionControlModelClass4stepEv+0x13c0>)
 8006010:	e9c2 34aa 	strd	r3, r4, [r2, #680]	; 0x2a8
 8006014:	e016      	b.n	8006044 <_ZN25positionControlModelClass4stepEv+0x134c>
  } else if (cosOut > 0.0) {
 8006016:	f04f 0200 	mov.w	r2, #0
 800601a:	f04f 0300 	mov.w	r3, #0
 800601e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006022:	f7fa fd81 	bl	8000b28 <__aeabi_dcmpgt>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d006      	beq.n	800603a <_ZN25positionControlModelClass4stepEv+0x1342>
    positionControl_B.SignPreIntegrator_d = 1.0;
 800602c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800602e:	f04f 0300 	mov.w	r3, #0
 8006032:	4c22      	ldr	r4, [pc, #136]	; (80060bc <_ZN25positionControlModelClass4stepEv+0x13c4>)
 8006034:	e9c2 34aa 	strd	r3, r4, [r2, #680]	; 0x2a8
 8006038:	e004      	b.n	8006044 <_ZN25positionControlModelClass4stepEv+0x134c>
  } else {
    positionControl_B.SignPreIntegrator_d = cosOut;
 800603a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800603c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8006040:	e9c2 34aa 	strd	r3, r4, [r2, #680]	; 0x2a8
  }

  // End of Signum: '<S177>/SignPreIntegrator'

  // DataTypeConversion: '<S177>/DataTypeConv2'
  cosOut = std::fmod(std::floor(positionControl_B.SignPreIntegrator_d), 256.0);
 8006044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006046:	ed93 7baa 	vldr	d7, [r3, #680]	; 0x2a8
 800604a:	eeb0 0a47 	vmov.f32	s0, s14
 800604e:	eef0 0a67 	vmov.f32	s1, s15
 8006052:	f01f fb01 	bl	8025658 <floor>
 8006056:	eeb0 7a40 	vmov.f32	s14, s0
 800605a:	eef0 7a60 	vmov.f32	s15, s1
 800605e:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80060a8 <_ZN25positionControlModelClass4stepEv+0x13b0>
 8006062:	eeb0 0a47 	vmov.f32	s0, s14
 8006066:	eef0 0a67 	vmov.f32	s1, s15
 800606a:	f01f fd1f 	bl	8025aac <fmod>
 800606e:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
  positionControl_B.DataTypeConv2_j = static_cast<int8_T>(cosOut < 0.0 ?
 8006072:	f04f 0200 	mov.w	r2, #0
 8006076:	f04f 0300 	mov.w	r3, #0
 800607a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800607e:	f7fa fd35 	bl	8000aec <__aeabi_dcmplt>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01d      	beq.n	80060c4 <_ZN25positionControlModelClass4stepEv+0x13cc>
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>
    (static_cast<uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>
 8006088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800608e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006092:	607b      	str	r3, [r7, #4]
 8006094:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006098:	f7fa fd8e 	bl	8000bb8 <__aeabi_d2uiz>
 800609c:	4603      	mov	r3, r0
 800609e:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv2_j = static_cast<int8_T>(cosOut < 0.0 ?
 80060a0:	425b      	negs	r3, r3
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	b25b      	sxtb	r3, r3
 80060a6:	e014      	b.n	80060d2 <_ZN25positionControlModelClass4stepEv+0x13da>
 80060a8:	00000000 	.word	0x00000000
 80060ac:	40700000 	.word	0x40700000
 80060b0:	20000ab0 	.word	0x20000ab0
 80060b4:	20000118 	.word	0x20000118
 80060b8:	bff00000 	.word	0xbff00000
 80060bc:	3ff00000 	.word	0x3ff00000
 80060c0:	20000108 	.word	0x20000108
    (static_cast<uint8_T>(cosOut))));
 80060c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80060c8:	f7fa fd76 	bl	8000bb8 <__aeabi_d2uiz>
 80060cc:	4603      	mov	r3, r0
 80060ce:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv2_j = static_cast<int8_T>(cosOut < 0.0 ?
 80060d0:	b25b      	sxtb	r3, r3
 80060d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060d4:	f882 32bd 	strb.w	r3, [r2, #701]	; 0x2bd

  // RelationalOperator: '<S177>/Equal1'
  positionControl_B.Equal1_i = positionControl_B.DataTypeConv1_m ==
 80060d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060da:	f993 22bc 	ldrsb.w	r2, [r3, #700]	; 0x2bc
    positionControl_B.DataTypeConv2_j;
 80060de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e0:	f993 32bd 	ldrsb.w	r3, [r3, #701]	; 0x2bd
  positionControl_B.Equal1_i = positionControl_B.DataTypeConv1_m ==
 80060e4:	429a      	cmp	r2, r3
 80060e6:	bf0c      	ite	eq
 80060e8:	2301      	moveq	r3, #1
 80060ea:	2300      	movne	r3, #0
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	461a      	mov	r2, r3
 80060f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f2:	f883 22c5 	strb.w	r2, [r3, #709]	; 0x2c5

  // Logic: '<S177>/AND3'
  positionControl_B.AND3_nv = positionControl_B.NotEqual_o &&
 80060f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f8:	f893 32c4 	ldrb.w	r3, [r3, #708]	; 0x2c4
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d006      	beq.n	800610e <_ZN25positionControlModelClass4stepEv+0x1416>
    positionControl_B.Equal1_i;
 8006100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006102:	f893 32c5 	ldrb.w	r3, [r3, #709]	; 0x2c5
  positionControl_B.AND3_nv = positionControl_B.NotEqual_o &&
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <_ZN25positionControlModelClass4stepEv+0x1416>
 800610a:	2301      	movs	r3, #1
 800610c:	e000      	b.n	8006110 <_ZN25positionControlModelClass4stepEv+0x1418>
 800610e:	2300      	movs	r3, #0
 8006110:	461a      	mov	r2, r3
 8006112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006114:	f883 22c6 	strb.w	r2, [r3, #710]	; 0x2c6

  // Switch: '<S177>/Switch' incorporates:
  //   Constant: '<S177>/Constant1'

  if (positionControl_B.AND3_nv) {
 8006118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800611a:	f893 32c6 	ldrb.w	r3, [r3, #710]	; 0x2c6
 800611e:	2b00      	cmp	r3, #0
 8006120:	d006      	beq.n	8006130 <_ZN25positionControlModelClass4stepEv+0x1438>
    positionControl_B.Switch_e = positionControl_P.Constant1_Value_k;
 8006122:	4b8c      	ldr	r3, [pc, #560]	; (8006354 <_ZN25positionControlModelClass4stepEv+0x165c>)
 8006124:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 8006128:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800612a:	e9c2 34ac 	strd	r3, r4, [r2, #688]	; 0x2b0
 800612e:	e005      	b.n	800613c <_ZN25positionControlModelClass4stepEv+0x1444>
  } else {
    positionControl_B.Switch_e = positionControl_B.IntegralGain_l;
 8006130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006132:	e9d3 34a8 	ldrd	r3, r4, [r3, #672]	; 0x2a0
 8006136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006138:	e9c2 34ac 	strd	r3, r4, [r2, #688]	; 0x2b0
  }

  // End of Switch: '<S177>/Switch'

  // Update for DiscreteIntegrator: '<S40>/Integrator'
  positionControl_DW.Integrator_DSTATE += positionControl_P.Integrator_gainval *
 800613c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613e:	e9d3 45b2 	ldrd	r4, r5, [r3, #712]	; 0x2c8
 8006142:	4b84      	ldr	r3, [pc, #528]	; (8006354 <_ZN25positionControlModelClass4stepEv+0x165c>)
 8006144:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
    positionControl_B.IntegralGain;
 8006148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614a:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	; 0x210
  positionControl_DW.Integrator_DSTATE += positionControl_P.Integrator_gainval *
 800614e:	f7fa fa5b 	bl	8000608 <__aeabi_dmul>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4620      	mov	r0, r4
 8006158:	4629      	mov	r1, r5
 800615a:	f7fa f89f 	bl	800029c <__adddf3>
 800615e:	4603      	mov	r3, r0
 8006160:	460c      	mov	r4, r1
 8006162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006164:	e9c2 34b2 	strd	r3, r4, [r2, #712]	; 0x2c8

  // Update for DiscreteIntegrator: '<S35>/Filter'
  positionControl_DW.Filter_DSTATE += positionControl_P.Filter_gainval *
 8006168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616a:	e9d3 45b4 	ldrd	r4, r5, [r3, #720]	; 0x2d0
 800616e:	4b79      	ldr	r3, [pc, #484]	; (8006354 <_ZN25positionControlModelClass4stepEv+0x165c>)
 8006170:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
    positionControl_B.FilterCoefficient;
 8006174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006176:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
  positionControl_DW.Filter_DSTATE += positionControl_P.Filter_gainval *
 800617a:	f7fa fa45 	bl	8000608 <__aeabi_dmul>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	4620      	mov	r0, r4
 8006184:	4629      	mov	r1, r5
 8006186:	f7fa f889 	bl	800029c <__adddf3>
 800618a:	4603      	mov	r3, r0
 800618c:	460c      	mov	r4, r1
 800618e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006190:	e9c2 34b4 	strd	r3, r4, [r2, #720]	; 0x2d0

  // Update for DiscreteIntegrator: '<S232>/Integrator'
  positionControl_DW.Integrator_DSTATE_k +=
 8006194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006196:	e9d3 45b6 	ldrd	r4, r5, [r3, #728]	; 0x2d8
    positionControl_P.Integrator_gainval_l * positionControl_B.IntegralGain_o;
 800619a:	4b6e      	ldr	r3, [pc, #440]	; (8006354 <_ZN25positionControlModelClass4stepEv+0x165c>)
 800619c:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	; 0x128
 80061a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a2:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	; 0x248
 80061a6:	f7fa fa2f 	bl	8000608 <__aeabi_dmul>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
  positionControl_DW.Integrator_DSTATE_k +=
 80061ae:	4620      	mov	r0, r4
 80061b0:	4629      	mov	r1, r5
 80061b2:	f7fa f873 	bl	800029c <__adddf3>
 80061b6:	4603      	mov	r3, r0
 80061b8:	460c      	mov	r4, r1
 80061ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061bc:	e9c2 34b6 	strd	r3, r4, [r2, #728]	; 0x2d8

  // Update for DiscreteIntegrator: '<S227>/Filter'
  positionControl_DW.Filter_DSTATE_m += positionControl_P.Filter_gainval_l *
 80061c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c2:	e9d3 45b8 	ldrd	r4, r5, [r3, #736]	; 0x2e0
 80061c6:	4b63      	ldr	r3, [pc, #396]	; (8006354 <_ZN25positionControlModelClass4stepEv+0x165c>)
 80061c8:	e9d3 014c 	ldrd	r0, r1, [r3, #304]	; 0x130
    positionControl_B.FilterCoefficient_n;
 80061cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ce:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
  positionControl_DW.Filter_DSTATE_m += positionControl_P.Filter_gainval_l *
 80061d2:	f7fa fa19 	bl	8000608 <__aeabi_dmul>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	4620      	mov	r0, r4
 80061dc:	4629      	mov	r1, r5
 80061de:	f7fa f85d 	bl	800029c <__adddf3>
 80061e2:	4603      	mov	r3, r0
 80061e4:	460c      	mov	r4, r1
 80061e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061e8:	e9c2 34b8 	strd	r3, r4, [r2, #736]	; 0x2e0

  // Update for DiscreteIntegrator: '<S280>/Integrator'
  positionControl_DW.Integrator_DSTATE_f +=
 80061ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ee:	e9d3 45ba 	ldrd	r4, r5, [r3, #744]	; 0x2e8
    positionControl_P.Integrator_gainval_k * positionControl_B.Switch_m;
 80061f2:	4b58      	ldr	r3, [pc, #352]	; (8006354 <_ZN25positionControlModelClass4stepEv+0x165c>)
 80061f4:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	; 0x138
 80061f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fa:	e9d3 239e 	ldrd	r2, r3, [r3, #632]	; 0x278
 80061fe:	f7fa fa03 	bl	8000608 <__aeabi_dmul>
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
  positionControl_DW.Integrator_DSTATE_f +=
 8006206:	4620      	mov	r0, r4
 8006208:	4629      	mov	r1, r5
 800620a:	f7fa f847 	bl	800029c <__adddf3>
 800620e:	4603      	mov	r3, r0
 8006210:	460c      	mov	r4, r1
 8006212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006214:	e9c2 34ba 	strd	r3, r4, [r2, #744]	; 0x2e8

  // Update for DiscreteIntegrator: '<S275>/Filter'
  positionControl_DW.Filter_DSTATE_j += positionControl_P.Filter_gainval_i *
 8006218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621a:	e9d3 45bc 	ldrd	r4, r5, [r3, #752]	; 0x2f0
 800621e:	4b4d      	ldr	r3, [pc, #308]	; (8006354 <_ZN25positionControlModelClass4stepEv+0x165c>)
 8006220:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
    positionControl_B.FilterCoefficient_e;
 8006224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006226:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	; 0x110
  positionControl_DW.Filter_DSTATE_j += positionControl_P.Filter_gainval_i *
 800622a:	f7fa f9ed 	bl	8000608 <__aeabi_dmul>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4620      	mov	r0, r4
 8006234:	4629      	mov	r1, r5
 8006236:	f7fa f831 	bl	800029c <__adddf3>
 800623a:	4603      	mov	r3, r0
 800623c:	460c      	mov	r4, r1
 800623e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006240:	e9c2 34bc 	strd	r3, r4, [r2, #752]	; 0x2f0

  // Update for DiscreteIntegrator: '<S88>/Integrator'
  positionControl_DW.Integrator_DSTATE_m +=
 8006244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006246:	e9d3 45be 	ldrd	r4, r5, [r3, #760]	; 0x2f8
    positionControl_P.Integrator_gainval_lc * positionControl_B.Switch;
 800624a:	4b42      	ldr	r3, [pc, #264]	; (8006354 <_ZN25positionControlModelClass4stepEv+0x165c>)
 800624c:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
 8006250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006252:	e9d3 2390 	ldrd	r2, r3, [r3, #576]	; 0x240
 8006256:	f7fa f9d7 	bl	8000608 <__aeabi_dmul>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
  positionControl_DW.Integrator_DSTATE_m +=
 800625e:	4620      	mov	r0, r4
 8006260:	4629      	mov	r1, r5
 8006262:	f7fa f81b 	bl	800029c <__adddf3>
 8006266:	4603      	mov	r3, r0
 8006268:	460c      	mov	r4, r1
 800626a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800626c:	e9c2 34be 	strd	r3, r4, [r2, #760]	; 0x2f8

  // Update for DiscreteIntegrator: '<S83>/Filter'
  positionControl_DW.Filter_DSTATE_d += positionControl_P.Filter_gainval_l5 *
 8006270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006272:	e9d3 45c0 	ldrd	r4, r5, [r3, #768]	; 0x300
 8006276:	4b37      	ldr	r3, [pc, #220]	; (8006354 <_ZN25positionControlModelClass4stepEv+0x165c>)
 8006278:	e9d3 0156 	ldrd	r0, r1, [r3, #344]	; 0x158
    positionControl_B.FilterCoefficient_f;
 800627c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627e:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	; 0x158
  positionControl_DW.Filter_DSTATE_d += positionControl_P.Filter_gainval_l5 *
 8006282:	f7fa f9c1 	bl	8000608 <__aeabi_dmul>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	4620      	mov	r0, r4
 800628c:	4629      	mov	r1, r5
 800628e:	f7fa f805 	bl	800029c <__adddf3>
 8006292:	4603      	mov	r3, r0
 8006294:	460c      	mov	r4, r1
 8006296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006298:	e9c2 34c0 	strd	r3, r4, [r2, #768]	; 0x300

  // Update for DiscreteIntegrator: '<S136>/Integrator'
  positionControl_DW.Integrator_DSTATE_j +=
 800629c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629e:	e9d3 45c2 	ldrd	r4, r5, [r3, #776]	; 0x308
    positionControl_P.Integrator_gainval_o * positionControl_B.IntegralGain_f;
 80062a2:	4b2c      	ldr	r3, [pc, #176]	; (8006354 <_ZN25positionControlModelClass4stepEv+0x165c>)
 80062a4:	e9d3 0158 	ldrd	r0, r1, [r3, #352]	; 0x160
 80062a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062aa:	e9d3 23a0 	ldrd	r2, r3, [r3, #640]	; 0x280
 80062ae:	f7fa f9ab 	bl	8000608 <__aeabi_dmul>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
  positionControl_DW.Integrator_DSTATE_j +=
 80062b6:	4620      	mov	r0, r4
 80062b8:	4629      	mov	r1, r5
 80062ba:	f7f9 ffef 	bl	800029c <__adddf3>
 80062be:	4603      	mov	r3, r0
 80062c0:	460c      	mov	r4, r1
 80062c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062c4:	e9c2 34c2 	strd	r3, r4, [r2, #776]	; 0x308

  // Update for DiscreteIntegrator: '<S131>/Filter'
  positionControl_DW.Filter_DSTATE_mf += positionControl_P.Filter_gainval_f *
 80062c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ca:	e9d3 45c4 	ldrd	r4, r5, [r3, #784]	; 0x310
 80062ce:	4b21      	ldr	r3, [pc, #132]	; (8006354 <_ZN25positionControlModelClass4stepEv+0x165c>)
 80062d0:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
    positionControl_B.FilterCoefficient_d;
 80062d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d6:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
  positionControl_DW.Filter_DSTATE_mf += positionControl_P.Filter_gainval_f *
 80062da:	f7fa f995 	bl	8000608 <__aeabi_dmul>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	4620      	mov	r0, r4
 80062e4:	4629      	mov	r1, r5
 80062e6:	f7f9 ffd9 	bl	800029c <__adddf3>
 80062ea:	4603      	mov	r3, r0
 80062ec:	460c      	mov	r4, r1
 80062ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062f0:	e9c2 34c4 	strd	r3, r4, [r2, #784]	; 0x310

  // Update for DiscreteIntegrator: '<S184>/Integrator'
  positionControl_DW.Integrator_DSTATE_b +=
 80062f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f6:	e9d3 45c6 	ldrd	r4, r5, [r3, #792]	; 0x318
    positionControl_P.Integrator_gainval_a * positionControl_B.Switch_e;
 80062fa:	4b16      	ldr	r3, [pc, #88]	; (8006354 <_ZN25positionControlModelClass4stepEv+0x165c>)
 80062fc:	e9d3 015c 	ldrd	r0, r1, [r3, #368]	; 0x170
 8006300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006302:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 8006306:	f7fa f97f 	bl	8000608 <__aeabi_dmul>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
  positionControl_DW.Integrator_DSTATE_b +=
 800630e:	4620      	mov	r0, r4
 8006310:	4629      	mov	r1, r5
 8006312:	f7f9 ffc3 	bl	800029c <__adddf3>
 8006316:	4603      	mov	r3, r0
 8006318:	460c      	mov	r4, r1
 800631a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800631c:	e9c2 34c6 	strd	r3, r4, [r2, #792]	; 0x318

  // Update for DiscreteIntegrator: '<S179>/Filter'
  positionControl_DW.Filter_DSTATE_e += positionControl_P.Filter_gainval_g *
 8006320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006322:	e9d3 45c8 	ldrd	r4, r5, [r3, #800]	; 0x320
 8006326:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <_ZN25positionControlModelClass4stepEv+0x165c>)
 8006328:	e9d3 015e 	ldrd	r0, r1, [r3, #376]	; 0x178
    positionControl_B.FilterCoefficient_a;
 800632c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800632e:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
  positionControl_DW.Filter_DSTATE_e += positionControl_P.Filter_gainval_g *
 8006332:	f7fa f969 	bl	8000608 <__aeabi_dmul>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	4620      	mov	r0, r4
 800633c:	4629      	mov	r1, r5
 800633e:	f7f9 ffad 	bl	800029c <__adddf3>
 8006342:	4603      	mov	r3, r0
 8006344:	460c      	mov	r4, r1
 8006346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006348:	e9c2 34c8 	strd	r3, r4, [r2, #800]	; 0x320
}
 800634c:	bf00      	nop
 800634e:	3768      	adds	r7, #104	; 0x68
 8006350:	46bd      	mov	sp, r7
 8006352:	bdb0      	pop	{r4, r5, r7, pc}
 8006354:	20000118 	.word	0x20000118

08006358 <_ZN25positionControlModelClass10initializeEv>:

// Model initialize function
void positionControlModelClass::initialize()
{
 8006358:	b490      	push	{r4, r7}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  // InitializeConditions for DiscreteIntegrator: '<S40>/Integrator'
  positionControl_DW.Integrator_DSTATE =
    positionControl_P.PIDController_InitialConditio_c;
 8006360:	4b26      	ldr	r3, [pc, #152]	; (80063fc <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8006362:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
  positionControl_DW.Integrator_DSTATE =
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	e9c2 34b2 	strd	r3, r4, [r2, #712]	; 0x2c8

  // InitializeConditions for DiscreteIntegrator: '<S35>/Filter'
  positionControl_DW.Filter_DSTATE =
    positionControl_P.PIDController_InitialConditionF;
 800636c:	4b23      	ldr	r3, [pc, #140]	; (80063fc <_ZN25positionControlModelClass10initializeEv+0xa4>)
 800636e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
  positionControl_DW.Filter_DSTATE =
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	e9c2 34b4 	strd	r3, r4, [r2, #720]	; 0x2d0

  // InitializeConditions for DiscreteIntegrator: '<S232>/Integrator'
  positionControl_DW.Integrator_DSTATE_k =
    positionControl_P.PIDController4_InitialConditi_i;
 8006378:	4b20      	ldr	r3, [pc, #128]	; (80063fc <_ZN25positionControlModelClass10initializeEv+0xa4>)
 800637a:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
  positionControl_DW.Integrator_DSTATE_k =
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	e9c2 34b6 	strd	r3, r4, [r2, #728]	; 0x2d8

  // InitializeConditions for DiscreteIntegrator: '<S227>/Filter'
  positionControl_DW.Filter_DSTATE_m =
    positionControl_P.PIDController4_InitialCondition;
 8006384:	4b1d      	ldr	r3, [pc, #116]	; (80063fc <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8006386:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
  positionControl_DW.Filter_DSTATE_m =
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	e9c2 34b8 	strd	r3, r4, [r2, #736]	; 0x2e0

  // InitializeConditions for DiscreteIntegrator: '<S280>/Integrator'
  positionControl_DW.Integrator_DSTATE_f =
    positionControl_P.PIDController5_InitialConditi_c;
 8006390:	4b1a      	ldr	r3, [pc, #104]	; (80063fc <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8006392:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
  positionControl_DW.Integrator_DSTATE_f =
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	e9c2 34ba 	strd	r3, r4, [r2, #744]	; 0x2e8

  // InitializeConditions for DiscreteIntegrator: '<S275>/Filter'
  positionControl_DW.Filter_DSTATE_j =
    positionControl_P.PIDController5_InitialCondition;
 800639c:	4b17      	ldr	r3, [pc, #92]	; (80063fc <_ZN25positionControlModelClass10initializeEv+0xa4>)
 800639e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
  positionControl_DW.Filter_DSTATE_j =
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	e9c2 34bc 	strd	r3, r4, [r2, #752]	; 0x2f0

  // InitializeConditions for DiscreteIntegrator: '<S88>/Integrator'
  positionControl_DW.Integrator_DSTATE_m =
    positionControl_P.PIDController1_InitialConditi_a;
 80063a8:	4b14      	ldr	r3, [pc, #80]	; (80063fc <_ZN25positionControlModelClass10initializeEv+0xa4>)
 80063aa:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
  positionControl_DW.Integrator_DSTATE_m =
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	e9c2 34be 	strd	r3, r4, [r2, #760]	; 0x2f8

  // InitializeConditions for DiscreteIntegrator: '<S83>/Filter'
  positionControl_DW.Filter_DSTATE_d =
    positionControl_P.PIDController1_InitialCondition;
 80063b4:	4b11      	ldr	r3, [pc, #68]	; (80063fc <_ZN25positionControlModelClass10initializeEv+0xa4>)
 80063b6:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
  positionControl_DW.Filter_DSTATE_d =
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	e9c2 34c0 	strd	r3, r4, [r2, #768]	; 0x300

  // InitializeConditions for DiscreteIntegrator: '<S136>/Integrator'
  positionControl_DW.Integrator_DSTATE_j =
    positionControl_P.PIDController2_InitialConditi_n;
 80063c0:	4b0e      	ldr	r3, [pc, #56]	; (80063fc <_ZN25positionControlModelClass10initializeEv+0xa4>)
 80063c2:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
  positionControl_DW.Integrator_DSTATE_j =
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	e9c2 34c2 	strd	r3, r4, [r2, #776]	; 0x308

  // InitializeConditions for DiscreteIntegrator: '<S131>/Filter'
  positionControl_DW.Filter_DSTATE_mf =
    positionControl_P.PIDController2_InitialCondition;
 80063cc:	4b0b      	ldr	r3, [pc, #44]	; (80063fc <_ZN25positionControlModelClass10initializeEv+0xa4>)
 80063ce:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
  positionControl_DW.Filter_DSTATE_mf =
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	e9c2 34c4 	strd	r3, r4, [r2, #784]	; 0x310

  // InitializeConditions for DiscreteIntegrator: '<S184>/Integrator'
  positionControl_DW.Integrator_DSTATE_b =
    positionControl_P.PIDController3_InitialConditi_d;
 80063d8:	4b08      	ldr	r3, [pc, #32]	; (80063fc <_ZN25positionControlModelClass10initializeEv+0xa4>)
 80063da:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
  positionControl_DW.Integrator_DSTATE_b =
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	e9c2 34c6 	strd	r3, r4, [r2, #792]	; 0x318

  // InitializeConditions for DiscreteIntegrator: '<S179>/Filter'
  positionControl_DW.Filter_DSTATE_e =
    positionControl_P.PIDController3_InitialCondition;
 80063e4:	4b05      	ldr	r3, [pc, #20]	; (80063fc <_ZN25positionControlModelClass10initializeEv+0xa4>)
 80063e6:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
  positionControl_DW.Filter_DSTATE_e =
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	e9c2 34c8 	strd	r3, r4, [r2, #800]	; 0x320
}
 80063f0:	bf00      	nop
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bc90      	pop	{r4, r7}
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	20000118 	.word	0x20000118

08006400 <_ZN25positionControlModelClassC1Ev>:
{
  // (no terminate code required)
}

// Constructor
positionControlModelClass::positionControlModelClass():
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  positionControl_B()
  ,positionControl_DW()
  ,positionControl_U()
  ,positionControl_Y()
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4618      	mov	r0, r3
 800640c:	f44f 7332 	mov.w	r3, #712	; 0x2c8
 8006410:	461a      	mov	r2, r3
 8006412:	2100      	movs	r1, #0
 8006414:	f022 fde3 	bl	8028fde <memset>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 800641e:	2260      	movs	r2, #96	; 0x60
 8006420:	2100      	movs	r1, #0
 8006422:	4618      	mov	r0, r3
 8006424:	f022 fddb 	bl	8028fde <memset>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800642e:	2258      	movs	r2, #88	; 0x58
 8006430:	2100      	movs	r1, #0
 8006432:	4618      	mov	r0, r3
 8006434:	f022 fdd3 	bl	8028fde <memset>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f503 7360 	add.w	r3, r3, #896	; 0x380
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	605a      	str	r2, [r3, #4]
 8006444:	609a      	str	r2, [r3, #8]
 8006446:	60da      	str	r2, [r3, #12]
{
  // Currently there is no constructor body generated.
}
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4618      	mov	r0, r3
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 8006452:	b490      	push	{r4, r7}
 8006454:	b082      	sub	sp, #8
 8006456:	af00      	add	r7, sp, #0
 8006458:	ed87 0b00 	vstr	d0, [r7]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	f022 4400 	bic.w	r4, r2, #2147483648	; 0x80000000
 8006464:	ec44 3b17 	vmov	d7, r3, r4
 8006468:	eeb0 0a47 	vmov.f32	s0, s14
 800646c:	eef0 0a67 	vmov.f32	s1, s15
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bc90      	pop	{r4, r7}
 8006476:	4770      	bx	lr

08006478 <rtGetNaN>:
  //
  // Initialize rtNaN needed by the generated code.
  // NaN is initialized as non-signaling. Assumes IEEE.
  //
  static real_T rtGetNaN(void)
  {
 8006478:	b590      	push	{r4, r7, lr}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800647e:	2340      	movs	r3, #64	; 0x40
 8006480:	60fb      	str	r3, [r7, #12]
    real_T nan = 0.0;
 8006482:	f04f 0300 	mov.w	r3, #0
 8006486:	f04f 0400 	mov.w	r4, #0
 800648a:	e9c7 3404 	strd	r3, r4, [r7, #16]
    if (bitsPerReal == 32U) {
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b20      	cmp	r3, #32
 8006492:	d10b      	bne.n	80064ac <rtGetNaN+0x34>
      nan = rtGetNaNF();
 8006494:	f000 f820 	bl	80064d8 <rtGetNaNF>
 8006498:	ee10 3a10 	vmov	r3, s0
 800649c:	4618      	mov	r0, r3
 800649e:	f7fa f85b 	bl	8000558 <__aeabi_f2d>
 80064a2:	4603      	mov	r3, r0
 80064a4:	460c      	mov	r4, r1
 80064a6:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80064aa:	e007      	b.n	80064bc <rtGetNaN+0x44>
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.bitVal.words.wordH = 0xFFF80000U;
 80064ac:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <rtGetNaN+0x5c>)
 80064ae:	607b      	str	r3, [r7, #4]
      tmpVal.bitVal.words.wordL = 0x00000000U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	603b      	str	r3, [r7, #0]
      nan = tmpVal.fltVal;
 80064b4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80064b8:	e9c7 3404 	strd	r3, r4, [r7, #16]
    }

    return nan;
 80064bc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80064c0:	ec44 3b17 	vmov	d7, r3, r4
  }
 80064c4:	eeb0 0a47 	vmov.f32	s0, s14
 80064c8:	eef0 0a67 	vmov.f32	s1, s15
 80064cc:	371c      	adds	r7, #28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd90      	pop	{r4, r7, pc}
 80064d2:	bf00      	nop
 80064d4:	fff80000 	.word	0xfff80000

080064d8 <rtGetNaNF>:
  //
  // Initialize rtNaNF needed by the generated code.
  // NaN is initialized as non-signaling. Assumes IEEE.
  //
  static real32_T rtGetNaNF(void)
  {
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
    IEEESingle nanF = { { 0 } };
 80064de:	f04f 0300 	mov.w	r3, #0
 80064e2:	607b      	str	r3, [r7, #4]

    nanF.wordL.wordLuint = 0xFFC00000U;
 80064e4:	4b05      	ldr	r3, [pc, #20]	; (80064fc <rtGetNaNF+0x24>)
 80064e6:	607b      	str	r3, [r7, #4]
    return nanF.wordL.wordLreal;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	ee07 3a90 	vmov	s15, r3
  }
 80064ee:	eeb0 0a67 	vmov.f32	s0, s15
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	ffc00000 	.word	0xffc00000

08006500 <rt_InitInfAndNaN>:
  //
  // Initialize the rtInf, rtMinusInf, and rtNaN needed by the
  // generated code. NaN is initialized as non-signaling. Assumes IEEE.
  //
  static void rt_InitInfAndNaN(size_t realSize)
  {
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
    (void) (realSize);
    rtNaN = rtGetNaN();
 8006508:	f7ff ffb6 	bl	8006478 <rtGetNaN>
 800650c:	eeb0 7a40 	vmov.f32	s14, s0
 8006510:	eef0 7a60 	vmov.f32	s15, s1
 8006514:	4b16      	ldr	r3, [pc, #88]	; (8006570 <rt_InitInfAndNaN+0x70>)
 8006516:	ed83 7b00 	vstr	d7, [r3]
    rtNaNF = rtGetNaNF();
 800651a:	f7ff ffdd 	bl	80064d8 <rtGetNaNF>
 800651e:	eef0 7a40 	vmov.f32	s15, s0
 8006522:	4b14      	ldr	r3, [pc, #80]	; (8006574 <rt_InitInfAndNaN+0x74>)
 8006524:	edc3 7a00 	vstr	s15, [r3]
    rtInf = rtGetInf();
 8006528:	f000 f8a8 	bl	800667c <rtGetInf>
 800652c:	eeb0 7a40 	vmov.f32	s14, s0
 8006530:	eef0 7a60 	vmov.f32	s15, s1
 8006534:	4b10      	ldr	r3, [pc, #64]	; (8006578 <rt_InitInfAndNaN+0x78>)
 8006536:	ed83 7b00 	vstr	d7, [r3]
    rtInfF = rtGetInfF();
 800653a:	f000 f8cf 	bl	80066dc <rtGetInfF>
 800653e:	eef0 7a40 	vmov.f32	s15, s0
 8006542:	4b0e      	ldr	r3, [pc, #56]	; (800657c <rt_InitInfAndNaN+0x7c>)
 8006544:	edc3 7a00 	vstr	s15, [r3]
    rtMinusInf = rtGetMinusInf();
 8006548:	f000 f8d8 	bl	80066fc <rtGetMinusInf>
 800654c:	eeb0 7a40 	vmov.f32	s14, s0
 8006550:	eef0 7a60 	vmov.f32	s15, s1
 8006554:	4b0a      	ldr	r3, [pc, #40]	; (8006580 <rt_InitInfAndNaN+0x80>)
 8006556:	ed83 7b00 	vstr	d7, [r3]
    rtMinusInfF = rtGetMinusInfF();
 800655a:	f000 f8ff 	bl	800675c <rtGetMinusInfF>
 800655e:	eef0 7a40 	vmov.f32	s15, s0
 8006562:	4b08      	ldr	r3, [pc, #32]	; (8006584 <rt_InitInfAndNaN+0x84>)
 8006564:	edc3 7a00 	vstr	s15, [r3]
  }
 8006568:	bf00      	nop
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	20000ac8 	.word	0x20000ac8
 8006574:	20000ad8 	.word	0x20000ad8
 8006578:	20000ab8 	.word	0x20000ab8
 800657c:	20000ad0 	.word	0x20000ad0
 8006580:	20000ac0 	.word	0x20000ac0
 8006584:	20000ad4 	.word	0x20000ad4

08006588 <rtIsInf>:

  // Test if value is infinite
  static boolean_T rtIsInf(real_T value)
  {
 8006588:	b590      	push	{r4, r7, lr}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	ed87 0b00 	vstr	d0, [r7]
    return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 8006592:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <rtIsInf+0x48>)
 8006594:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006598:	461a      	mov	r2, r3
 800659a:	4623      	mov	r3, r4
 800659c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065a0:	f7fa fa9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10b      	bne.n	80065c2 <rtIsInf+0x3a>
 80065aa:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <rtIsInf+0x4c>)
 80065ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065b0:	461a      	mov	r2, r3
 80065b2:	4623      	mov	r3, r4
 80065b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065b8:	f7fa fa8e 	bl	8000ad8 <__aeabi_dcmpeq>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <rtIsInf+0x3e>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <rtIsInf+0x40>
 80065c6:	2300      	movs	r3, #0
  }
 80065c8:	4618      	mov	r0, r3
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd90      	pop	{r4, r7, pc}
 80065d0:	20000ab8 	.word	0x20000ab8
 80065d4:	20000ac0 	.word	0x20000ac0

080065d8 <rtIsNaN>:
    return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
  }

  // Test if value is not a number
  static boolean_T rtIsNaN(real_T value)
  {
 80065d8:	b590      	push	{r4, r7, lr}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	ed87 0b00 	vstr	d0, [r7]
    boolean_T result = (boolean_T) 0;
 80065e2:	2300      	movs	r3, #0
 80065e4:	75fb      	strb	r3, [r7, #23]
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80065e6:	2340      	movs	r3, #64	; 0x40
 80065e8:	613b      	str	r3, [r7, #16]
    if (bitsPerReal == 32U) {
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2b20      	cmp	r3, #32
 80065ee:	d10b      	bne.n	8006608 <rtIsNaN+0x30>
      result = rtIsNaNF((real32_T)value);
 80065f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065f4:	f7fa fb00 	bl	8000bf8 <__aeabi_d2f>
 80065f8:	4603      	mov	r3, r0
 80065fa:	ee00 3a10 	vmov	s0, r3
 80065fe:	f000 f821 	bl	8006644 <rtIsNaNF>
 8006602:	4603      	mov	r3, r0
 8006604:	75fb      	strb	r3, [r7, #23]
 8006606:	e015      	b.n	8006634 <rtIsNaN+0x5c>
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.fltVal = value;
 8006608:	e9d7 3400 	ldrd	r3, r4, [r7]
 800660c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <rtIsNaN+0x68>)
 8006614:	4013      	ands	r3, r2
                           0x7FF00000 &&
 8006616:	4a0a      	ldr	r2, [pc, #40]	; (8006640 <rtIsNaN+0x68>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d109      	bne.n	8006630 <rtIsNaN+0x58>
                           ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f3c3 0313 	ubfx	r3, r3, #0, #20
                           0x7FF00000 &&
 8006622:	2b00      	cmp	r3, #0
 8006624:	d102      	bne.n	800662c <rtIsNaN+0x54>
                            (tmpVal.bitVal.words.wordL != 0) ));
 8006626:	68bb      	ldr	r3, [r7, #8]
                           ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <rtIsNaN+0x58>
                           0x7FF00000 &&
 800662c:	2301      	movs	r3, #1
 800662e:	e000      	b.n	8006632 <rtIsNaN+0x5a>
 8006630:	2300      	movs	r3, #0
      result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8006632:	75fb      	strb	r3, [r7, #23]
    }

    return result;
 8006634:	7dfb      	ldrb	r3, [r7, #23]
  }
 8006636:	4618      	mov	r0, r3
 8006638:	371c      	adds	r7, #28
 800663a:	46bd      	mov	sp, r7
 800663c:	bd90      	pop	{r4, r7, pc}
 800663e:	bf00      	nop
 8006640:	7ff00000 	.word	0x7ff00000

08006644 <rtIsNaNF>:

  // Test if single-precision value is not a number
  static boolean_T rtIsNaNF(real32_T value)
  {
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	ed87 0a01 	vstr	s0, [r7, #4]
    IEEESingle tmp;
    tmp.wordL.wordLreal = value;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	60fb      	str	r3, [r7, #12]
    return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 8006658:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800665c:	d106      	bne.n	800666c <rtIsNaNF+0x28>
                       (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f3c3 0316 	ubfx	r3, r3, #0, #23
    return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <rtIsNaNF+0x28>
 8006668:	2301      	movs	r3, #1
 800666a:	e000      	b.n	800666e <rtIsNaNF+0x2a>
 800666c:	2300      	movs	r3, #0
  }
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
	...

0800667c <rtGetInf>:
  //
  // Initialize rtInf needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real_T rtGetInf(void)
  {
 800667c:	b590      	push	{r4, r7, lr}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8006682:	2340      	movs	r3, #64	; 0x40
 8006684:	60fb      	str	r3, [r7, #12]
    real_T inf = 0.0;
 8006686:	f04f 0300 	mov.w	r3, #0
 800668a:	f04f 0400 	mov.w	r4, #0
 800668e:	e9c7 3404 	strd	r3, r4, [r7, #16]
    if (bitsPerReal == 32U) {
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b20      	cmp	r3, #32
 8006696:	d10b      	bne.n	80066b0 <rtGetInf+0x34>
      inf = rtGetInfF();
 8006698:	f000 f820 	bl	80066dc <rtGetInfF>
 800669c:	ee10 3a10 	vmov	r3, s0
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7f9 ff59 	bl	8000558 <__aeabi_f2d>
 80066a6:	4603      	mov	r3, r0
 80066a8:	460c      	mov	r4, r1
 80066aa:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80066ae:	e007      	b.n	80066c0 <rtGetInf+0x44>
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.bitVal.words.wordH = 0x7FF00000U;
 80066b0:	4b09      	ldr	r3, [pc, #36]	; (80066d8 <rtGetInf+0x5c>)
 80066b2:	607b      	str	r3, [r7, #4]
      tmpVal.bitVal.words.wordL = 0x00000000U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	603b      	str	r3, [r7, #0]
      inf = tmpVal.fltVal;
 80066b8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80066bc:	e9c7 3404 	strd	r3, r4, [r7, #16]
    }

    return inf;
 80066c0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80066c4:	ec44 3b17 	vmov	d7, r3, r4
  }
 80066c8:	eeb0 0a47 	vmov.f32	s0, s14
 80066cc:	eef0 0a67 	vmov.f32	s1, s15
 80066d0:	371c      	adds	r7, #28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd90      	pop	{r4, r7, pc}
 80066d6:	bf00      	nop
 80066d8:	7ff00000 	.word	0x7ff00000

080066dc <rtGetInfF>:
  //
  // Initialize rtInfF needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real32_T rtGetInfF(void)
  {
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
    IEEESingle infF;
    infF.wordL.wordLuint = 0x7F800000U;
 80066e2:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80066e6:	607b      	str	r3, [r7, #4]
    return infF.wordL.wordLreal;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	ee07 3a90 	vmov	s15, r3
  }
 80066ee:	eeb0 0a67 	vmov.f32	s0, s15
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <rtGetMinusInf>:
  //
  // Initialize rtMinusInf needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real_T rtGetMinusInf(void)
  {
 80066fc:	b590      	push	{r4, r7, lr}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8006702:	2340      	movs	r3, #64	; 0x40
 8006704:	60fb      	str	r3, [r7, #12]
    real_T minf = 0.0;
 8006706:	f04f 0300 	mov.w	r3, #0
 800670a:	f04f 0400 	mov.w	r4, #0
 800670e:	e9c7 3404 	strd	r3, r4, [r7, #16]
    if (bitsPerReal == 32U) {
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2b20      	cmp	r3, #32
 8006716:	d10b      	bne.n	8006730 <rtGetMinusInf+0x34>
      minf = rtGetMinusInfF();
 8006718:	f000 f820 	bl	800675c <rtGetMinusInfF>
 800671c:	ee10 3a10 	vmov	r3, s0
 8006720:	4618      	mov	r0, r3
 8006722:	f7f9 ff19 	bl	8000558 <__aeabi_f2d>
 8006726:	4603      	mov	r3, r0
 8006728:	460c      	mov	r4, r1
 800672a:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800672e:	e007      	b.n	8006740 <rtGetMinusInf+0x44>
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8006730:	4b09      	ldr	r3, [pc, #36]	; (8006758 <rtGetMinusInf+0x5c>)
 8006732:	607b      	str	r3, [r7, #4]
      tmpVal.bitVal.words.wordL = 0x00000000U;
 8006734:	2300      	movs	r3, #0
 8006736:	603b      	str	r3, [r7, #0]
      minf = tmpVal.fltVal;
 8006738:	e9d7 3400 	ldrd	r3, r4, [r7]
 800673c:	e9c7 3404 	strd	r3, r4, [r7, #16]
    }

    return minf;
 8006740:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006744:	ec44 3b17 	vmov	d7, r3, r4
  }
 8006748:	eeb0 0a47 	vmov.f32	s0, s14
 800674c:	eef0 0a67 	vmov.f32	s1, s15
 8006750:	371c      	adds	r7, #28
 8006752:	46bd      	mov	sp, r7
 8006754:	bd90      	pop	{r4, r7, pc}
 8006756:	bf00      	nop
 8006758:	fff00000 	.word	0xfff00000

0800675c <rtGetMinusInfF>:
  //
  // Initialize rtMinusInfF needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real32_T rtGetMinusInfF(void)
  {
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
    IEEESingle minfF;
    minfF.wordL.wordLuint = 0xFF800000U;
 8006762:	4b06      	ldr	r3, [pc, #24]	; (800677c <rtGetMinusInfF+0x20>)
 8006764:	607b      	str	r3, [r7, #4]
    return minfF.wordL.wordLreal;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	ee07 3a90 	vmov	s15, r3
  }
 800676c:	eeb0 0a67 	vmov.f32	s0, s15
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	ff800000 	.word	0xff800000

08006780 <_Z11rt_modd_snfdd>:
}

real_T rt_modd_snf(real_T u0, real_T u1)
{
 8006780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006782:	b08b      	sub	sp, #44	; 0x2c
 8006784:	af00      	add	r7, sp, #0
 8006786:	ed87 0b02 	vstr	d0, [r7, #8]
 800678a:	ed87 1b00 	vstr	d1, [r7]
  real_T y;
  boolean_T yEq;
  real_T q;
  y = u0;
 800678e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006792:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (u1 == 0.0) {
 8006796:	f04f 0200 	mov.w	r2, #0
 800679a:	f04f 0300 	mov.w	r3, #0
 800679e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067a2:	f7fa f999 	bl	8000ad8 <__aeabi_dcmpeq>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d010      	beq.n	80067ce <_Z11rt_modd_snfdd+0x4e>
    if (u0 == 0.0) {
 80067ac:	f04f 0200 	mov.w	r2, #0
 80067b0:	f04f 0300 	mov.w	r3, #0
 80067b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067b8:	f7fa f98e 	bl	8000ad8 <__aeabi_dcmpeq>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 8130 	beq.w	8006a24 <_Z11rt_modd_snfdd+0x2a4>
      y = u1;
 80067c4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80067c8:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80067cc:	e12a      	b.n	8006a24 <_Z11rt_modd_snfdd+0x2a4>
    }
  } else if (rtIsNaN(u0) || rtIsNaN(u1) || rtIsInf(u0)) {
 80067ce:	ed97 0b02 	vldr	d0, [r7, #8]
 80067d2:	f7ff ff01 	bl	80065d8 <rtIsNaN>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10d      	bne.n	80067f8 <_Z11rt_modd_snfdd+0x78>
 80067dc:	ed97 0b00 	vldr	d0, [r7]
 80067e0:	f7ff fefa 	bl	80065d8 <rtIsNaN>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d106      	bne.n	80067f8 <_Z11rt_modd_snfdd+0x78>
 80067ea:	ed97 0b02 	vldr	d0, [r7, #8]
 80067ee:	f7ff fecb 	bl	8006588 <rtIsInf>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <_Z11rt_modd_snfdd+0x7c>
 80067f8:	2301      	movs	r3, #1
 80067fa:	e000      	b.n	80067fe <_Z11rt_modd_snfdd+0x7e>
 80067fc:	2300      	movs	r3, #0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <_Z11rt_modd_snfdd+0x8e>
    y = (rtNaN);
 8006802:	4b8e      	ldr	r3, [pc, #568]	; (8006a3c <_Z11rt_modd_snfdd+0x2bc>)
 8006804:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006808:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800680c:	e10a      	b.n	8006a24 <_Z11rt_modd_snfdd+0x2a4>
  } else if (u0 == 0.0) {
 800680e:	f04f 0200 	mov.w	r2, #0
 8006812:	f04f 0300 	mov.w	r3, #0
 8006816:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800681a:	f7fa f95d 	bl	8000ad8 <__aeabi_dcmpeq>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00c      	beq.n	800683e <_Z11rt_modd_snfdd+0xbe>
    y = 0.0 / u1;
 8006824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006828:	f04f 0000 	mov.w	r0, #0
 800682c:	f04f 0100 	mov.w	r1, #0
 8006830:	f7fa f814 	bl	800085c <__aeabi_ddiv>
 8006834:	4603      	mov	r3, r0
 8006836:	460c      	mov	r4, r1
 8006838:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800683c:	e0f2      	b.n	8006a24 <_Z11rt_modd_snfdd+0x2a4>
  } else if (rtIsInf(u1)) {
 800683e:	ed97 0b00 	vldr	d0, [r7]
 8006842:	f7ff fea1 	bl	8006588 <rtIsInf>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	bf14      	ite	ne
 800684c:	2301      	movne	r3, #1
 800684e:	2300      	moveq	r3, #0
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d029      	beq.n	80068aa <_Z11rt_modd_snfdd+0x12a>
    if ((u1 < 0.0) != (u0 < 0.0)) {
 8006856:	2301      	movs	r3, #1
 8006858:	461c      	mov	r4, r3
 800685a:	f04f 0200 	mov.w	r2, #0
 800685e:	f04f 0300 	mov.w	r3, #0
 8006862:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006866:	f7fa f941 	bl	8000aec <__aeabi_dcmplt>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <_Z11rt_modd_snfdd+0xf4>
 8006870:	2300      	movs	r3, #0
 8006872:	461c      	mov	r4, r3
 8006874:	b2e4      	uxtb	r4, r4
 8006876:	2301      	movs	r3, #1
 8006878:	461d      	mov	r5, r3
 800687a:	f04f 0200 	mov.w	r2, #0
 800687e:	f04f 0300 	mov.w	r3, #0
 8006882:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006886:	f7fa f931 	bl	8000aec <__aeabi_dcmplt>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <_Z11rt_modd_snfdd+0x114>
 8006890:	2300      	movs	r3, #0
 8006892:	461d      	mov	r5, r3
 8006894:	b2eb      	uxtb	r3, r5
 8006896:	4063      	eors	r3, r4
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80c2 	beq.w	8006a24 <_Z11rt_modd_snfdd+0x2a4>
      y = u1;
 80068a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80068a4:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80068a8:	e0bc      	b.n	8006a24 <_Z11rt_modd_snfdd+0x2a4>
    }
  } else {
    y = std::fmod(u0, u1);
 80068aa:	ed97 1b00 	vldr	d1, [r7]
 80068ae:	ed97 0b02 	vldr	d0, [r7, #8]
 80068b2:	f01f f8fb 	bl	8025aac <fmod>
 80068b6:	ed87 0b08 	vstr	d0, [r7, #32]
    yEq = (y == 0.0);
 80068ba:	2301      	movs	r3, #1
 80068bc:	461c      	mov	r4, r3
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	f04f 0300 	mov.w	r3, #0
 80068c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80068ca:	f7fa f905 	bl	8000ad8 <__aeabi_dcmpeq>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <_Z11rt_modd_snfdd+0x158>
 80068d4:	2300      	movs	r3, #0
 80068d6:	461c      	mov	r4, r3
 80068d8:	b2e3      	uxtb	r3, r4
 80068da:	77fb      	strb	r3, [r7, #31]
    if ((!yEq) && (u1 > std::floor(u1))) {
 80068dc:	7ffb      	ldrb	r3, [r7, #31]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d162      	bne.n	80069a8 <_Z11rt_modd_snfdd+0x228>
 80068e2:	ed97 0b00 	vldr	d0, [r7]
 80068e6:	f01e feb7 	bl	8025658 <floor>
 80068ea:	ec54 3b10 	vmov	r3, r4, d0
 80068ee:	461a      	mov	r2, r3
 80068f0:	4623      	mov	r3, r4
 80068f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068f6:	f7fa f917 	bl	8000b28 <__aeabi_dcmpgt>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d053      	beq.n	80069a8 <_Z11rt_modd_snfdd+0x228>
      q = std::abs(u0 / u1);
 8006900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006904:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006908:	f7f9 ffa8 	bl	800085c <__aeabi_ddiv>
 800690c:	4603      	mov	r3, r0
 800690e:	460c      	mov	r4, r1
 8006910:	ec44 3b17 	vmov	d7, r3, r4
 8006914:	eeb0 0a47 	vmov.f32	s0, s14
 8006918:	eef0 0a67 	vmov.f32	s1, s15
 800691c:	f7ff fd99 	bl	8006452 <_ZSt3absd>
 8006920:	ed87 0b04 	vstr	d0, [r7, #16]
      yEq = !(std::abs(q - std::floor(q + 0.5)) > DBL_EPSILON * q);
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	4b45      	ldr	r3, [pc, #276]	; (8006a40 <_Z11rt_modd_snfdd+0x2c0>)
 800692a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800692e:	f7f9 fcb5 	bl	800029c <__adddf3>
 8006932:	4603      	mov	r3, r0
 8006934:	460c      	mov	r4, r1
 8006936:	ec44 3b17 	vmov	d7, r3, r4
 800693a:	eeb0 0a47 	vmov.f32	s0, s14
 800693e:	eef0 0a67 	vmov.f32	s1, s15
 8006942:	f01e fe89 	bl	8025658 <floor>
 8006946:	ec54 3b10 	vmov	r3, r4, d0
 800694a:	461a      	mov	r2, r3
 800694c:	4623      	mov	r3, r4
 800694e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006952:	f7f9 fca1 	bl	8000298 <__aeabi_dsub>
 8006956:	4603      	mov	r3, r0
 8006958:	460c      	mov	r4, r1
 800695a:	ec44 3b17 	vmov	d7, r3, r4
 800695e:	eeb0 0a47 	vmov.f32	s0, s14
 8006962:	eef0 0a67 	vmov.f32	s1, s15
 8006966:	f7ff fd74 	bl	8006452 <_ZSt3absd>
 800696a:	ec56 5b10 	vmov	r5, r6, d0
 800696e:	f04f 0200 	mov.w	r2, #0
 8006972:	4b34      	ldr	r3, [pc, #208]	; (8006a44 <_Z11rt_modd_snfdd+0x2c4>)
 8006974:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006978:	f7f9 fe46 	bl	8000608 <__aeabi_dmul>
 800697c:	4603      	mov	r3, r0
 800697e:	460c      	mov	r4, r1
 8006980:	4619      	mov	r1, r3
 8006982:	4622      	mov	r2, r4
 8006984:	2301      	movs	r3, #1
 8006986:	461c      	mov	r4, r3
 8006988:	4613      	mov	r3, r2
 800698a:	460a      	mov	r2, r1
 800698c:	4628      	mov	r0, r5
 800698e:	4631      	mov	r1, r6
 8006990:	f7fa f8ca 	bl	8000b28 <__aeabi_dcmpgt>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <_Z11rt_modd_snfdd+0x21e>
 800699a:	2300      	movs	r3, #0
 800699c:	461c      	mov	r4, r3
 800699e:	b2e3      	uxtb	r3, r4
 80069a0:	f083 0301 	eor.w	r3, r3, #1
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	77fb      	strb	r3, [r7, #31]
    }

    if (yEq) {
 80069a8:	7ffb      	ldrb	r3, [r7, #31]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00c      	beq.n	80069c8 <_Z11rt_modd_snfdd+0x248>
      y = u1 * 0.0;
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	f04f 0300 	mov.w	r3, #0
 80069b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069ba:	f7f9 fe25 	bl	8000608 <__aeabi_dmul>
 80069be:	4603      	mov	r3, r0
 80069c0:	460c      	mov	r4, r1
 80069c2:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80069c6:	e02d      	b.n	8006a24 <_Z11rt_modd_snfdd+0x2a4>
    } else {
      if ((u0 < 0.0) != (u1 < 0.0)) {
 80069c8:	2301      	movs	r3, #1
 80069ca:	461c      	mov	r4, r3
 80069cc:	f04f 0200 	mov.w	r2, #0
 80069d0:	f04f 0300 	mov.w	r3, #0
 80069d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069d8:	f7fa f888 	bl	8000aec <__aeabi_dcmplt>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <_Z11rt_modd_snfdd+0x266>
 80069e2:	2300      	movs	r3, #0
 80069e4:	461c      	mov	r4, r3
 80069e6:	b2e4      	uxtb	r4, r4
 80069e8:	2301      	movs	r3, #1
 80069ea:	461d      	mov	r5, r3
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069f8:	f7fa f878 	bl	8000aec <__aeabi_dcmplt>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <_Z11rt_modd_snfdd+0x286>
 8006a02:	2300      	movs	r3, #0
 8006a04:	461d      	mov	r5, r3
 8006a06:	b2eb      	uxtb	r3, r5
 8006a08:	4063      	eors	r3, r4
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d009      	beq.n	8006a24 <_Z11rt_modd_snfdd+0x2a4>
        y += u1;
 8006a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006a18:	f7f9 fc40 	bl	800029c <__adddf3>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	460c      	mov	r4, r1
 8006a20:	e9c7 3408 	strd	r3, r4, [r7, #32]
      }
    }
  }

  return y;
 8006a24:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006a28:	ec44 3b17 	vmov	d7, r3, r4
}
 8006a2c:	eeb0 0a47 	vmov.f32	s0, s14
 8006a30:	eef0 0a67 	vmov.f32	s1, s15
 8006a34:	372c      	adds	r7, #44	; 0x2c
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000ac8 	.word	0x20000ac8
 8006a40:	3fe00000 	.word	0x3fe00000
 8006a44:	3cb00000 	.word	0x3cb00000

08006a48 <_Z13rt_atan2d_snfdd>:

real_T rt_atan2d_snf(real_T u0, real_T u1)
{
 8006a48:	b5b0      	push	{r4, r5, r7, lr}
 8006a4a:	b088      	sub	sp, #32
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	ed87 0b02 	vstr	d0, [r7, #8]
 8006a52:	ed87 1b00 	vstr	d1, [r7]
  real_T y;
  int32_T tmp;
  int32_T tmp_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 8006a56:	ed97 0b02 	vldr	d0, [r7, #8]
 8006a5a:	f7ff fdbd 	bl	80065d8 <rtIsNaN>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d106      	bne.n	8006a72 <_Z13rt_atan2d_snfdd+0x2a>
 8006a64:	ed97 0b00 	vldr	d0, [r7]
 8006a68:	f7ff fdb6 	bl	80065d8 <rtIsNaN>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <_Z13rt_atan2d_snfdd+0x2e>
 8006a72:	2301      	movs	r3, #1
 8006a74:	e000      	b.n	8006a78 <_Z13rt_atan2d_snfdd+0x30>
 8006a76:	2300      	movs	r3, #0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d005      	beq.n	8006a88 <_Z13rt_atan2d_snfdd+0x40>
    y = (rtNaN);
 8006a7c:	4b4e      	ldr	r3, [pc, #312]	; (8006bb8 <_Z13rt_atan2d_snfdd+0x170>)
 8006a7e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a82:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8006a86:	e083      	b.n	8006b90 <_Z13rt_atan2d_snfdd+0x148>
  } else if (rtIsInf(u0) && rtIsInf(u1)) {
 8006a88:	ed97 0b02 	vldr	d0, [r7, #8]
 8006a8c:	f7ff fd7c 	bl	8006588 <rtIsInf>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d008      	beq.n	8006aa8 <_Z13rt_atan2d_snfdd+0x60>
 8006a96:	ed97 0b00 	vldr	d0, [r7]
 8006a9a:	f7ff fd75 	bl	8006588 <rtIsInf>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <_Z13rt_atan2d_snfdd+0x60>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e000      	b.n	8006aaa <_Z13rt_atan2d_snfdd+0x62>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d034      	beq.n	8006b18 <_Z13rt_atan2d_snfdd+0xd0>
    if (u1 > 0.0) {
 8006aae:	f04f 0200 	mov.w	r2, #0
 8006ab2:	f04f 0300 	mov.w	r3, #0
 8006ab6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006aba:	f7fa f835 	bl	8000b28 <__aeabi_dcmpgt>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d002      	beq.n	8006aca <_Z13rt_atan2d_snfdd+0x82>
      tmp = 1;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	e002      	b.n	8006ad0 <_Z13rt_atan2d_snfdd+0x88>
    } else {
      tmp = -1;
 8006aca:	f04f 33ff 	mov.w	r3, #4294967295
 8006ace:	617b      	str	r3, [r7, #20]
    }

    if (u0 > 0.0) {
 8006ad0:	f04f 0200 	mov.w	r2, #0
 8006ad4:	f04f 0300 	mov.w	r3, #0
 8006ad8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006adc:	f7fa f824 	bl	8000b28 <__aeabi_dcmpgt>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d002      	beq.n	8006aec <_Z13rt_atan2d_snfdd+0xa4>
      tmp_0 = 1;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	613b      	str	r3, [r7, #16]
 8006aea:	e002      	b.n	8006af2 <_Z13rt_atan2d_snfdd+0xaa>
    } else {
      tmp_0 = -1;
 8006aec:	f04f 33ff 	mov.w	r3, #4294967295
 8006af0:	613b      	str	r3, [r7, #16]
    }

    y = atan2(static_cast<real_T>(tmp_0), static_cast<real_T>(tmp));
 8006af2:	6938      	ldr	r0, [r7, #16]
 8006af4:	f7f9 fd1e 	bl	8000534 <__aeabi_i2d>
 8006af8:	4604      	mov	r4, r0
 8006afa:	460d      	mov	r5, r1
 8006afc:	6978      	ldr	r0, [r7, #20]
 8006afe:	f7f9 fd19 	bl	8000534 <__aeabi_i2d>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	ec43 2b11 	vmov	d1, r2, r3
 8006b0a:	ec45 4b10 	vmov	d0, r4, r5
 8006b0e:	f01e ffcb 	bl	8025aa8 <atan2>
 8006b12:	ed87 0b06 	vstr	d0, [r7, #24]
 8006b16:	e03b      	b.n	8006b90 <_Z13rt_atan2d_snfdd+0x148>
  } else if (u1 == 0.0) {
 8006b18:	f04f 0200 	mov.w	r2, #0
 8006b1c:	f04f 0300 	mov.w	r3, #0
 8006b20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b24:	f7f9 ffd8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d028      	beq.n	8006b80 <_Z13rt_atan2d_snfdd+0x138>
    if (u0 > 0.0) {
 8006b2e:	f04f 0200 	mov.w	r2, #0
 8006b32:	f04f 0300 	mov.w	r3, #0
 8006b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b3a:	f7f9 fff5 	bl	8000b28 <__aeabi_dcmpgt>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d005      	beq.n	8006b50 <_Z13rt_atan2d_snfdd+0x108>
      y = RT_PI / 2.0;
 8006b44:	a418      	add	r4, pc, #96	; (adr r4, 8006ba8 <_Z13rt_atan2d_snfdd+0x160>)
 8006b46:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006b4a:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8006b4e:	e01f      	b.n	8006b90 <_Z13rt_atan2d_snfdd+0x148>
    } else if (u0 < 0.0) {
 8006b50:	f04f 0200 	mov.w	r2, #0
 8006b54:	f04f 0300 	mov.w	r3, #0
 8006b58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b5c:	f7f9 ffc6 	bl	8000aec <__aeabi_dcmplt>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d005      	beq.n	8006b72 <_Z13rt_atan2d_snfdd+0x12a>
      y = -(RT_PI / 2.0);
 8006b66:	a412      	add	r4, pc, #72	; (adr r4, 8006bb0 <_Z13rt_atan2d_snfdd+0x168>)
 8006b68:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006b6c:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8006b70:	e00e      	b.n	8006b90 <_Z13rt_atan2d_snfdd+0x148>
    } else {
      y = 0.0;
 8006b72:	f04f 0300 	mov.w	r3, #0
 8006b76:	f04f 0400 	mov.w	r4, #0
 8006b7a:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8006b7e:	e007      	b.n	8006b90 <_Z13rt_atan2d_snfdd+0x148>
    }
  } else {
    y = atan2(u0, u1);
 8006b80:	ed97 1b00 	vldr	d1, [r7]
 8006b84:	ed97 0b02 	vldr	d0, [r7, #8]
 8006b88:	f01e ff8e 	bl	8025aa8 <atan2>
 8006b8c:	ed87 0b06 	vstr	d0, [r7, #24]
  }

  return y;
 8006b90:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006b94:	ec44 3b17 	vmov	d7, r3, r4
}
 8006b98:	eeb0 0a47 	vmov.f32	s0, s14
 8006b9c:	eef0 0a67 	vmov.f32	s1, s15
 8006ba0:	3720      	adds	r7, #32
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	54442d18 	.word	0x54442d18
 8006bac:	3ff921fb 	.word	0x3ff921fb
 8006bb0:	54442d18 	.word	0x54442d18
 8006bb4:	bff921fb 	.word	0xbff921fb
 8006bb8:	20000ac8 	.word	0x20000ac8

08006bbc <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_>:

// Function for MATLAB Function: '<S14>/Correct'
void positionEstimatorModelClass::EKFCorrector_correctStateAndCov(real_T x[6],
  real_T P_0[36], const real_T y[4], const real_T Pxy[24], const real_T Pyy[16],
  const real_T dHdx[24])
{
 8006bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bbe:	f5ad 7d75 	sub.w	sp, sp, #980	; 0x3d4
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	f107 040c 	add.w	r4, r7, #12
 8006bc8:	6020      	str	r0, [r4, #0]
 8006bca:	f107 0008 	add.w	r0, r7, #8
 8006bce:	6001      	str	r1, [r0, #0]
 8006bd0:	1d39      	adds	r1, r7, #4
 8006bd2:	600a      	str	r2, [r1, #0]
 8006bd4:	463a      	mov	r2, r7
 8006bd6:	6013      	str	r3, [r2, #0]
  int32_T d;
  int32_T ijA;
  real_T X_1[36];
  real_T P_1[36];
  int8_T ipiv_0;
  for (b_j = 0; b_j < 16; b_j++) {
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006bde:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006be2:	2b0f      	cmp	r3, #15
 8006be4:	dc15      	bgt.n	8006c12 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x56>
    A[b_j] = Pyy[b_j];
 8006be6:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8006bf0:	4413      	add	r3, r2
 8006bf2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006bf6:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8006bfa:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8006bfe:	00d2      	lsls	r2, r2, #3
 8006c00:	440a      	add	r2, r1
 8006c02:	e9c2 3400 	strd	r3, r4, [r2]
  for (b_j = 0; b_j < 16; b_j++) {
 8006c06:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006c10:	e7e5      	b.n	8006bde <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x22>
  }

  ipiv[0] = 1;
 8006c12:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8006c16:	2201      	movs	r2, #1
 8006c18:	701a      	strb	r2, [r3, #0]
  ipiv[1] = 2;
 8006c1a:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8006c1e:	2202      	movs	r2, #2
 8006c20:	705a      	strb	r2, [r3, #1]
  ipiv[2] = 3;
 8006c22:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8006c26:	2203      	movs	r2, #3
 8006c28:	709a      	strb	r2, [r3, #2]
  ipiv[3] = 4;
 8006c2a:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8006c2e:	2204      	movs	r2, #4
 8006c30:	70da      	strb	r2, [r3, #3]
  for (b_j = 0; b_j < 3; b_j++) {
 8006c32:	2300      	movs	r3, #0
 8006c34:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006c38:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	f300 8203 	bgt.w	8007048 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x48c>
    c = b_j * 5;
 8006c42:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
    jA = 0;
 8006c50:	2300      	movs	r3, #0
 8006c52:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    ix = c;
 8006c56:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006c5a:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    smax = std::abs(A[c]);
 8006c5e:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006c62:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	4413      	add	r3, r2
 8006c6a:	ed93 7b00 	vldr	d7, [r3]
 8006c6e:	eeb0 0a47 	vmov.f32	s0, s14
 8006c72:	eef0 0a67 	vmov.f32	s1, s15
 8006c76:	f7ff fbec 	bl	8006452 <_ZSt3absd>
 8006c7a:	ed87 0bee 	vstr	d0, [r7, #952]	; 0x3b8
    for (iy = 2; iy <= 4 - b_j; iy++) {
 8006c7e:	2302      	movs	r3, #2
 8006c80:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8006c84:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c88:	f1c3 0304 	rsb	r3, r3, #4
 8006c8c:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8006c90:	429a      	cmp	r2, r3
 8006c92:	dc2c      	bgt.n	8006cee <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x132>
      ix++;
 8006c94:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006c98:	3301      	adds	r3, #1
 8006c9a:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
      b_y = std::abs(A[ix]);
 8006c9e:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006ca2:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	4413      	add	r3, r2
 8006caa:	ed93 7b00 	vldr	d7, [r3]
 8006cae:	eeb0 0a47 	vmov.f32	s0, s14
 8006cb2:	eef0 0a67 	vmov.f32	s1, s15
 8006cb6:	f7ff fbcc 	bl	8006452 <_ZSt3absd>
 8006cba:	ed87 0be8 	vstr	d0, [r7, #928]	; 0x3a0
      if (b_y > smax) {
 8006cbe:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8006cc2:	e9d7 01e8 	ldrd	r0, r1, [r7, #928]	; 0x3a0
 8006cc6:	f7f9 ff2f 	bl	8000b28 <__aeabi_dcmpgt>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d008      	beq.n	8006ce2 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x126>
        jA = iy - 1;
 8006cd0:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
        smax = b_y;
 8006cda:	e9d7 34e8 	ldrd	r3, r4, [r7, #928]	; 0x3a0
 8006cde:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    for (iy = 2; iy <= 4 - b_j; iy++) {
 8006ce2:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8006cec:	e7ca      	b.n	8006c84 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc8>
      }
    }

    if (A[c + jA] != 0.0) {
 8006cee:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006cf2:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	4413      	add	r3, r2
 8006d00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	f04f 0300 	mov.w	r3, #0
 8006d0c:	f7f9 fee4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f040 8107 	bne.w	8006f26 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x36a>
      if (jA != 0) {
 8006d18:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 80cb 	beq.w	8006eb8 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x2fc>
        ipiv[b_j] = static_cast<int8_T>((b_j + jA) + 1);
 8006d22:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	4413      	add	r3, r2
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	3301      	adds	r3, #1
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	b259      	sxtb	r1, r3
 8006d38:	f507 7215 	add.w	r2, r7, #596	; 0x254
 8006d3c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006d40:	4413      	add	r3, r2
 8006d42:	460a      	mov	r2, r1
 8006d44:	701a      	strb	r2, [r3, #0]
        ix = b_j;
 8006d46:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006d4a:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        iy = b_j + jA;
 8006d4e:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8006d52:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006d56:	4413      	add	r3, r2
 8006d58:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        smax = A[ix];
 8006d5c:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006d60:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006d64:	00db      	lsls	r3, r3, #3
 8006d66:	4413      	add	r3, r2
 8006d68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d6c:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        A[ix] = A[iy];
 8006d70:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006d74:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006d78:	00db      	lsls	r3, r3, #3
 8006d7a:	4413      	add	r3, r2
 8006d7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d80:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8006d84:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8006d88:	00d2      	lsls	r2, r2, #3
 8006d8a:	440a      	add	r2, r1
 8006d8c:	e9c2 3400 	strd	r3, r4, [r2]
        A[iy] = smax;
 8006d90:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006d94:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	441a      	add	r2, r3
 8006d9c:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006da0:	e9c2 3400 	strd	r3, r4, [r2]
        ix += 4;
 8006da4:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006da8:	3304      	adds	r3, #4
 8006daa:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        iy += 4;
 8006dae:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006db2:	3304      	adds	r3, #4
 8006db4:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        smax = A[ix];
 8006db8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006dbc:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006dc0:	00db      	lsls	r3, r3, #3
 8006dc2:	4413      	add	r3, r2
 8006dc4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006dc8:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        A[ix] = A[iy];
 8006dcc:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006dd0:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	4413      	add	r3, r2
 8006dd8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ddc:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8006de0:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8006de4:	00d2      	lsls	r2, r2, #3
 8006de6:	440a      	add	r2, r1
 8006de8:	e9c2 3400 	strd	r3, r4, [r2]
        A[iy] = smax;
 8006dec:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006df0:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006df4:	00db      	lsls	r3, r3, #3
 8006df6:	441a      	add	r2, r3
 8006df8:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006dfc:	e9c2 3400 	strd	r3, r4, [r2]
        ix += 4;
 8006e00:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006e04:	3304      	adds	r3, #4
 8006e06:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        iy += 4;
 8006e0a:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006e0e:	3304      	adds	r3, #4
 8006e10:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        smax = A[ix];
 8006e14:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006e18:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006e1c:	00db      	lsls	r3, r3, #3
 8006e1e:	4413      	add	r3, r2
 8006e20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e24:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        A[ix] = A[iy];
 8006e28:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006e2c:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	4413      	add	r3, r2
 8006e34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e38:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8006e3c:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8006e40:	00d2      	lsls	r2, r2, #3
 8006e42:	440a      	add	r2, r1
 8006e44:	e9c2 3400 	strd	r3, r4, [r2]
        A[iy] = smax;
 8006e48:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006e4c:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	441a      	add	r2, r3
 8006e54:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006e58:	e9c2 3400 	strd	r3, r4, [r2]
        ix += 4;
 8006e5c:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006e60:	3304      	adds	r3, #4
 8006e62:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        iy += 4;
 8006e66:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        smax = A[ix];
 8006e70:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006e74:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	4413      	add	r3, r2
 8006e7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e80:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        A[ix] = A[iy];
 8006e84:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006e88:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006e8c:	00db      	lsls	r3, r3, #3
 8006e8e:	4413      	add	r3, r2
 8006e90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e94:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8006e98:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8006e9c:	00d2      	lsls	r2, r2, #3
 8006e9e:	440a      	add	r2, r1
 8006ea0:	e9c2 3400 	strd	r3, r4, [r2]
        A[iy] = smax;
 8006ea4:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006ea8:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006eac:	00db      	lsls	r3, r3, #3
 8006eae:	441a      	add	r2, r3
 8006eb0:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006eb4:	e9c2 3400 	strd	r3, r4, [r2]
      }

      jA = (c - b_j) + 4;
 8006eb8:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006ebc:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
      for (ix = c + 1; ix < jA; ix++) {
 8006ec8:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006ecc:	3301      	adds	r3, #1
 8006ece:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8006ed2:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8006ed6:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006eda:	429a      	cmp	r2, r3
 8006edc:	da23      	bge.n	8006f26 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x36a>
        A[ix] /= A[c];
 8006ede:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006ee2:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	4413      	add	r3, r2
 8006eea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006eee:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006ef2:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	4413      	add	r3, r2
 8006efa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006efe:	461a      	mov	r2, r3
 8006f00:	4623      	mov	r3, r4
 8006f02:	f7f9 fcab 	bl	800085c <__aeabi_ddiv>
 8006f06:	4603      	mov	r3, r0
 8006f08:	460c      	mov	r4, r1
 8006f0a:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8006f0e:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8006f12:	00d2      	lsls	r2, r2, #3
 8006f14:	440a      	add	r2, r1
 8006f16:	e9c2 3400 	strd	r3, r4, [r2]
      for (ix = c + 1; ix < jA; ix++) {
 8006f1a:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006f1e:	3301      	adds	r3, #1
 8006f20:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8006f24:	e7d5      	b.n	8006ed2 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x316>
      }
    }

    jA = c;
 8006f26:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006f2a:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    ix = c + 4;
 8006f2e:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006f32:	3304      	adds	r3, #4
 8006f34:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    for (iy = 0; iy <= 2 - b_j; iy++) {
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8006f3e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006f42:	f1c3 0302 	rsb	r3, r3, #2
 8006f46:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	dc76      	bgt.n	800703c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x480>
      if (A[ix] != 0.0) {
 8006f4e:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006f52:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	4413      	add	r3, r2
 8006f5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f5e:	f04f 0200 	mov.w	r2, #0
 8006f62:	f04f 0300 	mov.w	r3, #0
 8006f66:	f7f9 fdb7 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d155      	bne.n	800701c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x460>
        smax = -A[ix];
 8006f70:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006f74:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	4413      	add	r3, r2
 8006f7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f80:	461a      	mov	r2, r3
 8006f82:	f8c7 23b8 	str.w	r2, [r7, #952]	; 0x3b8
 8006f86:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8006f8a:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
        c_ix = c + 1;
 8006f8e:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006f92:	3301      	adds	r3, #1
 8006f94:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
        d = (jA - b_j) + 8;
 8006f98:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 8006f9c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
        for (ijA = jA + 5; ijA < d; ijA++) {
 8006fa8:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006fac:	3305      	adds	r3, #5
 8006fae:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8006fb2:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 8006fb6:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	da2e      	bge.n	800701c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x460>
          A[ijA] += A[c_ix] * smax;
 8006fbe:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006fc2:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	4413      	add	r3, r2
 8006fca:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006fce:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006fd2:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	4413      	add	r3, r2
 8006fda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006fde:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8006fe2:	f7f9 fb11 	bl	8000608 <__aeabi_dmul>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4620      	mov	r0, r4
 8006fec:	4629      	mov	r1, r5
 8006fee:	f7f9 f955 	bl	800029c <__adddf3>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8006ffa:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 8006ffe:	00d2      	lsls	r2, r2, #3
 8007000:	440a      	add	r2, r1
 8007002:	e9c2 3400 	strd	r3, r4, [r2]
          c_ix++;
 8007006:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800700a:	3301      	adds	r3, #1
 800700c:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
        for (ijA = jA + 5; ijA < d; ijA++) {
 8007010:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8007014:	3301      	adds	r3, #1
 8007016:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 800701a:	e7ca      	b.n	8006fb2 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x3f6>
        }
      }

      ix += 4;
 800701c:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8007020:	3304      	adds	r3, #4
 8007022:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
      jA += 4;
 8007026:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800702a:	3304      	adds	r3, #4
 800702c:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    for (iy = 0; iy <= 2 - b_j; iy++) {
 8007030:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8007034:	3301      	adds	r3, #1
 8007036:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800703a:	e780      	b.n	8006f3e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x382>
  for (b_j = 0; b_j < 3; b_j++) {
 800703c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007040:	3301      	adds	r3, #1
 8007042:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8007046:	e5f7      	b.n	8006c38 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x7c>
    }
  }

  for (b_j = 0; b_j < 24; b_j++) {
 8007048:	2300      	movs	r3, #0
 800704a:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800704e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007052:	2b17      	cmp	r3, #23
 8007054:	dc16      	bgt.n	8007084 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x4c8>
    X_0[b_j] = Pxy[b_j];
 8007056:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8007060:	4413      	add	r3, r2
 8007062:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007066:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 800706a:	00d2      	lsls	r2, r2, #3
 800706c:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 8007070:	440a      	add	r2, r1
 8007072:	3af8      	subs	r2, #248	; 0xf8
 8007074:	e9c2 3400 	strd	r3, r4, [r2]
  for (b_j = 0; b_j < 24; b_j++) {
 8007078:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800707c:	3301      	adds	r3, #1
 800707e:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8007082:	e7e4      	b.n	800704e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x492>
  }

  for (b_j = 0; b_j < 4; b_j++) {
 8007084:	2300      	movs	r3, #0
 8007086:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800708a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800708e:	2b03      	cmp	r3, #3
 8007090:	f300 80c9 	bgt.w	8007226 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x66a>
    jA = 6 * b_j;
 8007094:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8007098:	4613      	mov	r3, r2
 800709a:	005b      	lsls	r3, r3, #1
 800709c:	4413      	add	r3, r2
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    ix = b_j << 2;
 80070a4:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    for (iy = 0; iy < b_j; iy++) {
 80070ae:	2300      	movs	r3, #0
 80070b0:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80070b4:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80070b8:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80070bc:	429a      	cmp	r2, r3
 80070be:	da6b      	bge.n	8007198 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x5dc>
      c_ix = 6 * iy;
 80070c0:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80070c4:	4613      	mov	r3, r2
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	4413      	add	r3, r2
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
      if (A[iy + ix] != 0.0) {
 80070d0:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80070d4:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80070d8:	4413      	add	r3, r2
 80070da:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	4413      	add	r3, r2
 80070e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80070e6:	f04f 0200 	mov.w	r2, #0
 80070ea:	f04f 0300 	mov.w	r3, #0
 80070ee:	f7f9 fcf3 	bl	8000ad8 <__aeabi_dcmpeq>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d149      	bne.n	800718c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x5d0>
        for (c = 0; c < 6; c++) {
 80070f8:	2300      	movs	r3, #0
 80070fa:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80070fe:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8007102:	2b05      	cmp	r3, #5
 8007104:	dc42      	bgt.n	800718c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x5d0>
          X_0[c + jA] -= A[iy + ix] * X_0[c + c_ix];
 8007106:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 800710a:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800710e:	4413      	add	r3, r2
 8007110:	00db      	lsls	r3, r3, #3
 8007112:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8007116:	4413      	add	r3, r2
 8007118:	3bf8      	subs	r3, #248	; 0xf8
 800711a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800711e:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8007122:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8007126:	4413      	add	r3, r2
 8007128:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800712c:	00db      	lsls	r3, r3, #3
 800712e:	4413      	add	r3, r2
 8007130:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007134:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8007138:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800713c:	4413      	add	r3, r2
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8007144:	4413      	add	r3, r2
 8007146:	3bf8      	subs	r3, #248	; 0xf8
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	f7f9 fa5c 	bl	8000608 <__aeabi_dmul>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4610      	mov	r0, r2
 8007156:	4619      	mov	r1, r3
 8007158:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 800715c:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8007160:	18d6      	adds	r6, r2, r3
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	4620      	mov	r0, r4
 8007168:	4629      	mov	r1, r5
 800716a:	f7f9 f895 	bl	8000298 <__aeabi_dsub>
 800716e:	4603      	mov	r3, r0
 8007170:	460c      	mov	r4, r1
 8007172:	00f2      	lsls	r2, r6, #3
 8007174:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 8007178:	440a      	add	r2, r1
 800717a:	3af8      	subs	r2, #248	; 0xf8
 800717c:	e9c2 3400 	strd	r3, r4, [r2]
        for (c = 0; c < 6; c++) {
 8007180:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8007184:	3301      	adds	r3, #1
 8007186:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 800718a:	e7b8      	b.n	80070fe <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x542>
    for (iy = 0; iy < b_j; iy++) {
 800718c:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8007190:	3301      	adds	r3, #1
 8007192:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8007196:	e78d      	b.n	80070b4 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x4f8>
        }
      }
    }

    smax = 1.0 / A[b_j + ix];
 8007198:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 800719c:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80071a0:	4413      	add	r3, r2
 80071a2:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	4413      	add	r3, r2
 80071aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071ae:	461a      	mov	r2, r3
 80071b0:	4623      	mov	r3, r4
 80071b2:	f04f 0000 	mov.w	r0, #0
 80071b6:	49a0      	ldr	r1, [pc, #640]	; (8007438 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x87c>)
 80071b8:	f7f9 fb50 	bl	800085c <__aeabi_ddiv>
 80071bc:	4603      	mov	r3, r0
 80071be:	460c      	mov	r4, r1
 80071c0:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    for (c = 0; c < 6; c++) {
 80071c4:	2300      	movs	r3, #0
 80071c6:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80071ca:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80071ce:	2b05      	cmp	r3, #5
 80071d0:	dc23      	bgt.n	800721a <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x65e>
      X_0[c + jA] *= smax;
 80071d2:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80071d6:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 80071da:	4413      	add	r3, r2
 80071dc:	00db      	lsls	r3, r3, #3
 80071de:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80071e2:	4413      	add	r3, r2
 80071e4:	3bf8      	subs	r3, #248	; 0xf8
 80071e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80071ea:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80071ee:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 80071f2:	18d5      	adds	r5, r2, r3
 80071f4:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 80071f8:	f7f9 fa06 	bl	8000608 <__aeabi_dmul>
 80071fc:	4603      	mov	r3, r0
 80071fe:	460c      	mov	r4, r1
 8007200:	00ea      	lsls	r2, r5, #3
 8007202:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 8007206:	440a      	add	r2, r1
 8007208:	3af8      	subs	r2, #248	; 0xf8
 800720a:	e9c2 3400 	strd	r3, r4, [r2]
    for (c = 0; c < 6; c++) {
 800720e:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8007212:	3301      	adds	r3, #1
 8007214:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8007218:	e7d7      	b.n	80071ca <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x60e>
  for (b_j = 0; b_j < 4; b_j++) {
 800721a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800721e:	3301      	adds	r3, #1
 8007220:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8007224:	e731      	b.n	800708a <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x4ce>
    }
  }

  for (b_j = 3; b_j >= 0; b_j--) {
 8007226:	2303      	movs	r3, #3
 8007228:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800722c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007230:	2b00      	cmp	r3, #0
 8007232:	f2c0 808a 	blt.w	800734a <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x78e>
    jA = 6 * b_j;
 8007236:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 800723a:	4613      	mov	r3, r2
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	4413      	add	r3, r2
 8007240:	005b      	lsls	r3, r3, #1
 8007242:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    ix = (b_j << 2) - 1;
 8007246:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	3b01      	subs	r3, #1
 800724e:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    for (iy = b_j + 2; iy < 5; iy++) {
 8007252:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007256:	3302      	adds	r3, #2
 8007258:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800725c:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8007260:	2b04      	cmp	r3, #4
 8007262:	dc6c      	bgt.n	800733e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x782>
      c_ix = (iy - 1) * 6;
 8007264:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8007268:	1e5a      	subs	r2, r3, #1
 800726a:	4613      	mov	r3, r2
 800726c:	005b      	lsls	r3, r3, #1
 800726e:	4413      	add	r3, r2
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
      if (A[iy + ix] != 0.0) {
 8007276:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 800727a:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800727e:	4413      	add	r3, r2
 8007280:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8007284:	00db      	lsls	r3, r3, #3
 8007286:	4413      	add	r3, r2
 8007288:	e9d3 0100 	ldrd	r0, r1, [r3]
 800728c:	f04f 0200 	mov.w	r2, #0
 8007290:	f04f 0300 	mov.w	r3, #0
 8007294:	f7f9 fc20 	bl	8000ad8 <__aeabi_dcmpeq>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d149      	bne.n	8007332 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x776>
        for (c = 0; c < 6; c++) {
 800729e:	2300      	movs	r3, #0
 80072a0:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80072a4:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80072a8:	2b05      	cmp	r3, #5
 80072aa:	dc42      	bgt.n	8007332 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x776>
          X_0[c + jA] -= A[iy + ix] * X_0[c + c_ix];
 80072ac:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80072b0:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 80072b4:	4413      	add	r3, r2
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80072bc:	4413      	add	r3, r2
 80072be:	3bf8      	subs	r3, #248	; 0xf8
 80072c0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80072c4:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80072c8:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80072cc:	4413      	add	r3, r2
 80072ce:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	4413      	add	r3, r2
 80072d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80072da:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80072de:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 80072e2:	4413      	add	r3, r2
 80072e4:	00db      	lsls	r3, r3, #3
 80072e6:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80072ea:	4413      	add	r3, r2
 80072ec:	3bf8      	subs	r3, #248	; 0xf8
 80072ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f2:	f7f9 f989 	bl	8000608 <__aeabi_dmul>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	4610      	mov	r0, r2
 80072fc:	4619      	mov	r1, r3
 80072fe:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8007302:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8007306:	18d6      	adds	r6, r2, r3
 8007308:	4602      	mov	r2, r0
 800730a:	460b      	mov	r3, r1
 800730c:	4620      	mov	r0, r4
 800730e:	4629      	mov	r1, r5
 8007310:	f7f8 ffc2 	bl	8000298 <__aeabi_dsub>
 8007314:	4603      	mov	r3, r0
 8007316:	460c      	mov	r4, r1
 8007318:	00f2      	lsls	r2, r6, #3
 800731a:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 800731e:	440a      	add	r2, r1
 8007320:	3af8      	subs	r2, #248	; 0xf8
 8007322:	e9c2 3400 	strd	r3, r4, [r2]
        for (c = 0; c < 6; c++) {
 8007326:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800732a:	3301      	adds	r3, #1
 800732c:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8007330:	e7b8      	b.n	80072a4 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x6e8>
    for (iy = b_j + 2; iy < 5; iy++) {
 8007332:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8007336:	3301      	adds	r3, #1
 8007338:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800733c:	e78e      	b.n	800725c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x6a0>
  for (b_j = 3; b_j >= 0; b_j--) {
 800733e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007342:	3b01      	subs	r3, #1
 8007344:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8007348:	e770      	b.n	800722c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x670>
        }
      }
    }
  }

  for (b_j = 2; b_j >= 0; b_j--) {
 800734a:	2302      	movs	r3, #2
 800734c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8007350:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007354:	2b00      	cmp	r3, #0
 8007356:	db71      	blt.n	800743c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x880>
    ipiv_0 = ipiv[b_j];
 8007358:	f507 7215 	add.w	r2, r7, #596	; 0x254
 800735c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007360:	4413      	add	r3, r2
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	f887 339b 	strb.w	r3, [r7, #923]	; 0x39b
    if (b_j + 1 != ipiv_0) {
 8007368:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	f997 339b 	ldrsb.w	r3, [r7, #923]	; 0x39b
 8007372:	429a      	cmp	r2, r3
 8007374:	d05a      	beq.n	800742c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x870>
      jA = ipiv_0 - 1;
 8007376:	f997 339b 	ldrsb.w	r3, [r7, #923]	; 0x39b
 800737a:	3b01      	subs	r3, #1
 800737c:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
      for (c = 0; c < 6; c++) {
 8007380:	2300      	movs	r3, #0
 8007382:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8007386:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800738a:	2b05      	cmp	r3, #5
 800738c:	dc4e      	bgt.n	800742c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x870>
        smax = X_0[6 * b_j + c];
 800738e:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8007392:	4613      	mov	r3, r2
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	4413      	add	r3, r2
 8007398:	005b      	lsls	r3, r3, #1
 800739a:	461a      	mov	r2, r3
 800739c:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80073a0:	4413      	add	r3, r2
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80073a8:	4413      	add	r3, r2
 80073aa:	3bf8      	subs	r3, #248	; 0xf8
 80073ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073b0:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        X_0[c + 6 * b_j] = X_0[6 * jA + c];
 80073b4:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80073b8:	4613      	mov	r3, r2
 80073ba:	005b      	lsls	r3, r3, #1
 80073bc:	4413      	add	r3, r2
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	461a      	mov	r2, r3
 80073c2:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80073c6:	18d1      	adds	r1, r2, r3
 80073c8:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80073cc:	4613      	mov	r3, r2
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	4413      	add	r3, r2
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	461a      	mov	r2, r3
 80073d6:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80073da:	441a      	add	r2, r3
 80073dc:	00cb      	lsls	r3, r1, #3
 80073de:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 80073e2:	440b      	add	r3, r1
 80073e4:	3bf8      	subs	r3, #248	; 0xf8
 80073e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073ea:	00d2      	lsls	r2, r2, #3
 80073ec:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 80073f0:	440a      	add	r2, r1
 80073f2:	3af8      	subs	r2, #248	; 0xf8
 80073f4:	e9c2 3400 	strd	r3, r4, [r2]
        X_0[c + 6 * jA] = smax;
 80073f8:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80073fc:	4613      	mov	r3, r2
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	4413      	add	r3, r2
 8007402:	005b      	lsls	r3, r3, #1
 8007404:	461a      	mov	r2, r3
 8007406:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800740a:	4413      	add	r3, r2
 800740c:	00db      	lsls	r3, r3, #3
 800740e:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8007412:	4413      	add	r3, r2
 8007414:	f1a3 02f8 	sub.w	r2, r3, #248	; 0xf8
 8007418:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 800741c:	e9c2 3400 	strd	r3, r4, [r2]
      for (c = 0; c < 6; c++) {
 8007420:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8007424:	3301      	adds	r3, #1
 8007426:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 800742a:	e7ac      	b.n	8007386 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x7ca>
  for (b_j = 2; b_j >= 0; b_j--) {
 800742c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007430:	3b01      	subs	r3, #1
 8007432:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8007436:	e78b      	b.n	8007350 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x794>
 8007438:	3ff00000 	.word	0x3ff00000
      }
    }
  }

  for (b_j = 0; b_j < 6; b_j++) {
 800743c:	2300      	movs	r3, #0
 800743e:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8007442:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007446:	2b05      	cmp	r3, #5
 8007448:	f300 8246 	bgt.w	80078d8 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xd1c>
    smax = X_0[b_j] * y[0];
 800744c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007450:	00db      	lsls	r3, r3, #3
 8007452:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8007456:	4413      	add	r3, r2
 8007458:	3bf8      	subs	r3, #248	; 0xf8
 800745a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800745e:	463b      	mov	r3, r7
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007466:	461a      	mov	r2, r3
 8007468:	4623      	mov	r3, r4
 800746a:	f7f9 f8cd 	bl	8000608 <__aeabi_dmul>
 800746e:	4603      	mov	r3, r0
 8007470:	460c      	mov	r4, r1
 8007472:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    smax += X_0[b_j + 6] * y[1];
 8007476:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800747a:	3306      	adds	r3, #6
 800747c:	00db      	lsls	r3, r3, #3
 800747e:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8007482:	4413      	add	r3, r2
 8007484:	3bf8      	subs	r3, #248	; 0xf8
 8007486:	e9d3 0100 	ldrd	r0, r1, [r3]
 800748a:	463b      	mov	r3, r7
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3308      	adds	r3, #8
 8007490:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007494:	461a      	mov	r2, r3
 8007496:	4623      	mov	r3, r4
 8007498:	f7f9 f8b6 	bl	8000608 <__aeabi_dmul>
 800749c:	4603      	mov	r3, r0
 800749e:	460c      	mov	r4, r1
 80074a0:	461a      	mov	r2, r3
 80074a2:	4623      	mov	r3, r4
 80074a4:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 80074a8:	f7f8 fef8 	bl	800029c <__adddf3>
 80074ac:	4603      	mov	r3, r0
 80074ae:	460c      	mov	r4, r1
 80074b0:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    smax += X_0[b_j + 12] * y[2];
 80074b4:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80074b8:	330c      	adds	r3, #12
 80074ba:	00db      	lsls	r3, r3, #3
 80074bc:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80074c0:	4413      	add	r3, r2
 80074c2:	3bf8      	subs	r3, #248	; 0xf8
 80074c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80074c8:	463b      	mov	r3, r7
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3310      	adds	r3, #16
 80074ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074d2:	461a      	mov	r2, r3
 80074d4:	4623      	mov	r3, r4
 80074d6:	f7f9 f897 	bl	8000608 <__aeabi_dmul>
 80074da:	4603      	mov	r3, r0
 80074dc:	460c      	mov	r4, r1
 80074de:	461a      	mov	r2, r3
 80074e0:	4623      	mov	r3, r4
 80074e2:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 80074e6:	f7f8 fed9 	bl	800029c <__adddf3>
 80074ea:	4603      	mov	r3, r0
 80074ec:	460c      	mov	r4, r1
 80074ee:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    smax += X_0[b_j + 18] * y[3];
 80074f2:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80074f6:	3312      	adds	r3, #18
 80074f8:	00db      	lsls	r3, r3, #3
 80074fa:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80074fe:	4413      	add	r3, r2
 8007500:	3bf8      	subs	r3, #248	; 0xf8
 8007502:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007506:	463b      	mov	r3, r7
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3318      	adds	r3, #24
 800750c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007510:	461a      	mov	r2, r3
 8007512:	4623      	mov	r3, r4
 8007514:	f7f9 f878 	bl	8000608 <__aeabi_dmul>
 8007518:	4603      	mov	r3, r0
 800751a:	460c      	mov	r4, r1
 800751c:	461a      	mov	r2, r3
 800751e:	4623      	mov	r3, r4
 8007520:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 8007524:	f7f8 feba 	bl	800029c <__adddf3>
 8007528:	4603      	mov	r3, r0
 800752a:	460c      	mov	r4, r1
 800752c:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    x[b_j] += smax;
 8007530:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	f107 0208 	add.w	r2, r7, #8
 800753a:	6812      	ldr	r2, [r2, #0]
 800753c:	4413      	add	r3, r2
 800753e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007542:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007546:	00db      	lsls	r3, r3, #3
 8007548:	f107 0208 	add.w	r2, r7, #8
 800754c:	6812      	ldr	r2, [r2, #0]
 800754e:	18d5      	adds	r5, r2, r3
 8007550:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8007554:	f7f8 fea2 	bl	800029c <__adddf3>
 8007558:	4603      	mov	r3, r0
 800755a:	460c      	mov	r4, r1
 800755c:	e9c5 3400 	strd	r3, r4, [r5]
    for (c = 0; c < 6; c++) {
 8007560:	2300      	movs	r3, #0
 8007562:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8007566:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800756a:	2b05      	cmp	r3, #5
 800756c:	f300 8138 	bgt.w	80077e0 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc24>
      X_1[b_j + 6 * c] = 0.0;
 8007570:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8007574:	4613      	mov	r3, r2
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	4413      	add	r3, r2
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	461a      	mov	r2, r3
 800757e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007582:	4413      	add	r3, r2
 8007584:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007588:	00db      	lsls	r3, r3, #3
 800758a:	441a      	add	r2, r3
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	f04f 0400 	mov.w	r4, #0
 8007594:	e9c2 3400 	strd	r3, r4, [r2]
      smax = X_1[6 * c + b_j];
 8007598:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 800759c:	4613      	mov	r3, r2
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	4413      	add	r3, r2
 80075a2:	005b      	lsls	r3, r3, #1
 80075a4:	461a      	mov	r2, r3
 80075a6:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80075aa:	4413      	add	r3, r2
 80075ac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	4413      	add	r3, r2
 80075b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075b8:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      smax += dHdx[c << 2] * X_0[b_j];
 80075bc:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	00db      	lsls	r3, r3, #3
 80075c4:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 80075c8:	4413      	add	r3, r2
 80075ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075ce:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80075d2:	00db      	lsls	r3, r3, #3
 80075d4:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80075d8:	4413      	add	r3, r2
 80075da:	3bf8      	subs	r3, #248	; 0xf8
 80075dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075e0:	461a      	mov	r2, r3
 80075e2:	4623      	mov	r3, r4
 80075e4:	f7f9 f810 	bl	8000608 <__aeabi_dmul>
 80075e8:	4603      	mov	r3, r0
 80075ea:	460c      	mov	r4, r1
 80075ec:	461a      	mov	r2, r3
 80075ee:	4623      	mov	r3, r4
 80075f0:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 80075f4:	f7f8 fe52 	bl	800029c <__adddf3>
 80075f8:	4603      	mov	r3, r0
 80075fa:	460c      	mov	r4, r1
 80075fc:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      X_1[b_j + 6 * c] = smax;
 8007600:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8007604:	4613      	mov	r3, r2
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	4413      	add	r3, r2
 800760a:	005b      	lsls	r3, r3, #1
 800760c:	461a      	mov	r2, r3
 800760e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007612:	4413      	add	r3, r2
 8007614:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007618:	00db      	lsls	r3, r3, #3
 800761a:	441a      	add	r2, r3
 800761c:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8007620:	e9c2 3400 	strd	r3, r4, [r2]
      smax = X_1[6 * c + b_j];
 8007624:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8007628:	4613      	mov	r3, r2
 800762a:	005b      	lsls	r3, r3, #1
 800762c:	4413      	add	r3, r2
 800762e:	005b      	lsls	r3, r3, #1
 8007630:	461a      	mov	r2, r3
 8007632:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007636:	4413      	add	r3, r2
 8007638:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800763c:	00db      	lsls	r3, r3, #3
 800763e:	4413      	add	r3, r2
 8007640:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007644:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      smax += dHdx[(c << 2) + 1] * X_0[b_j + 6];
 8007648:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	3301      	adds	r3, #1
 8007650:	00db      	lsls	r3, r3, #3
 8007652:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8007656:	4413      	add	r3, r2
 8007658:	e9d3 0100 	ldrd	r0, r1, [r3]
 800765c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007660:	3306      	adds	r3, #6
 8007662:	00db      	lsls	r3, r3, #3
 8007664:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8007668:	4413      	add	r3, r2
 800766a:	3bf8      	subs	r3, #248	; 0xf8
 800766c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007670:	461a      	mov	r2, r3
 8007672:	4623      	mov	r3, r4
 8007674:	f7f8 ffc8 	bl	8000608 <__aeabi_dmul>
 8007678:	4603      	mov	r3, r0
 800767a:	460c      	mov	r4, r1
 800767c:	461a      	mov	r2, r3
 800767e:	4623      	mov	r3, r4
 8007680:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 8007684:	f7f8 fe0a 	bl	800029c <__adddf3>
 8007688:	4603      	mov	r3, r0
 800768a:	460c      	mov	r4, r1
 800768c:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      X_1[b_j + 6 * c] = smax;
 8007690:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8007694:	4613      	mov	r3, r2
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	4413      	add	r3, r2
 800769a:	005b      	lsls	r3, r3, #1
 800769c:	461a      	mov	r2, r3
 800769e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80076a2:	4413      	add	r3, r2
 80076a4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076a8:	00db      	lsls	r3, r3, #3
 80076aa:	441a      	add	r2, r3
 80076ac:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 80076b0:	e9c2 3400 	strd	r3, r4, [r2]
      smax = X_1[6 * c + b_j];
 80076b4:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80076b8:	4613      	mov	r3, r2
 80076ba:	005b      	lsls	r3, r3, #1
 80076bc:	4413      	add	r3, r2
 80076be:	005b      	lsls	r3, r3, #1
 80076c0:	461a      	mov	r2, r3
 80076c2:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80076c6:	4413      	add	r3, r2
 80076c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076cc:	00db      	lsls	r3, r3, #3
 80076ce:	4413      	add	r3, r2
 80076d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076d4:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      smax += dHdx[(c << 2) + 2] * X_0[b_j + 12];
 80076d8:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	3302      	adds	r3, #2
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 80076e6:	4413      	add	r3, r2
 80076e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076ec:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80076f0:	330c      	adds	r3, #12
 80076f2:	00db      	lsls	r3, r3, #3
 80076f4:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80076f8:	4413      	add	r3, r2
 80076fa:	3bf8      	subs	r3, #248	; 0xf8
 80076fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007700:	461a      	mov	r2, r3
 8007702:	4623      	mov	r3, r4
 8007704:	f7f8 ff80 	bl	8000608 <__aeabi_dmul>
 8007708:	4603      	mov	r3, r0
 800770a:	460c      	mov	r4, r1
 800770c:	461a      	mov	r2, r3
 800770e:	4623      	mov	r3, r4
 8007710:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 8007714:	f7f8 fdc2 	bl	800029c <__adddf3>
 8007718:	4603      	mov	r3, r0
 800771a:	460c      	mov	r4, r1
 800771c:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      X_1[b_j + 6 * c] = smax;
 8007720:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8007724:	4613      	mov	r3, r2
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	4413      	add	r3, r2
 800772a:	005b      	lsls	r3, r3, #1
 800772c:	461a      	mov	r2, r3
 800772e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007732:	4413      	add	r3, r2
 8007734:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007738:	00db      	lsls	r3, r3, #3
 800773a:	441a      	add	r2, r3
 800773c:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8007740:	e9c2 3400 	strd	r3, r4, [r2]
      smax = X_1[6 * c + b_j];
 8007744:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8007748:	4613      	mov	r3, r2
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	4413      	add	r3, r2
 800774e:	005b      	lsls	r3, r3, #1
 8007750:	461a      	mov	r2, r3
 8007752:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007756:	4413      	add	r3, r2
 8007758:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800775c:	00db      	lsls	r3, r3, #3
 800775e:	4413      	add	r3, r2
 8007760:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007764:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      smax += dHdx[(c << 2) + 3] * X_0[b_j + 18];
 8007768:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	3303      	adds	r3, #3
 8007770:	00db      	lsls	r3, r3, #3
 8007772:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8007776:	4413      	add	r3, r2
 8007778:	e9d3 0100 	ldrd	r0, r1, [r3]
 800777c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007780:	3312      	adds	r3, #18
 8007782:	00db      	lsls	r3, r3, #3
 8007784:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8007788:	4413      	add	r3, r2
 800778a:	3bf8      	subs	r3, #248	; 0xf8
 800778c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007790:	461a      	mov	r2, r3
 8007792:	4623      	mov	r3, r4
 8007794:	f7f8 ff38 	bl	8000608 <__aeabi_dmul>
 8007798:	4603      	mov	r3, r0
 800779a:	460c      	mov	r4, r1
 800779c:	461a      	mov	r2, r3
 800779e:	4623      	mov	r3, r4
 80077a0:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 80077a4:	f7f8 fd7a 	bl	800029c <__adddf3>
 80077a8:	4603      	mov	r3, r0
 80077aa:	460c      	mov	r4, r1
 80077ac:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      X_1[b_j + 6 * c] = smax;
 80077b0:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80077b4:	4613      	mov	r3, r2
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	4413      	add	r3, r2
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	461a      	mov	r2, r3
 80077be:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80077c2:	4413      	add	r3, r2
 80077c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80077c8:	00db      	lsls	r3, r3, #3
 80077ca:	441a      	add	r2, r3
 80077cc:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 80077d0:	e9c2 3400 	strd	r3, r4, [r2]
    for (c = 0; c < 6; c++) {
 80077d4:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80077d8:	3301      	adds	r3, #1
 80077da:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80077de:	e6c2      	b.n	8007566 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x9aa>
    }

    for (c = 0; c < 6; c++) {
 80077e0:	2300      	movs	r3, #0
 80077e2:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80077e6:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80077ea:	2b05      	cmp	r3, #5
 80077ec:	dc6e      	bgt.n	80078cc <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xd10>
      smax = 0.0;
 80077ee:	f04f 0300 	mov.w	r3, #0
 80077f2:	f04f 0400 	mov.w	r4, #0
 80077f6:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      for (jA = 0; jA < 6; jA++) {
 80077fa:	2300      	movs	r3, #0
 80077fc:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8007800:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8007804:	2b05      	cmp	r3, #5
 8007806:	dc35      	bgt.n	8007874 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xcb8>
        smax += X_1[6 * jA + b_j] * P_0[6 * c + jA];
 8007808:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 800780c:	4613      	mov	r3, r2
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	4413      	add	r3, r2
 8007812:	005b      	lsls	r3, r3, #1
 8007814:	461a      	mov	r2, r3
 8007816:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800781a:	4413      	add	r3, r2
 800781c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007820:	00db      	lsls	r3, r3, #3
 8007822:	4413      	add	r3, r2
 8007824:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007828:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 800782c:	4613      	mov	r3, r2
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	4413      	add	r3, r2
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	461a      	mov	r2, r3
 8007836:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800783a:	4413      	add	r3, r2
 800783c:	00db      	lsls	r3, r3, #3
 800783e:	1d3a      	adds	r2, r7, #4
 8007840:	6812      	ldr	r2, [r2, #0]
 8007842:	4413      	add	r3, r2
 8007844:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007848:	461a      	mov	r2, r3
 800784a:	4623      	mov	r3, r4
 800784c:	f7f8 fedc 	bl	8000608 <__aeabi_dmul>
 8007850:	4603      	mov	r3, r0
 8007852:	460c      	mov	r4, r1
 8007854:	461a      	mov	r2, r3
 8007856:	4623      	mov	r3, r4
 8007858:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 800785c:	f7f8 fd1e 	bl	800029c <__adddf3>
 8007860:	4603      	mov	r3, r0
 8007862:	460c      	mov	r4, r1
 8007864:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      for (jA = 0; jA < 6; jA++) {
 8007868:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800786c:	3301      	adds	r3, #1
 800786e:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8007872:	e7c5      	b.n	8007800 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc44>
      }

      P_1[b_j + 6 * c] = P_0[6 * c + b_j] - smax;
 8007874:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8007878:	4613      	mov	r3, r2
 800787a:	005b      	lsls	r3, r3, #1
 800787c:	4413      	add	r3, r2
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	461a      	mov	r2, r3
 8007882:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8007886:	4413      	add	r3, r2
 8007888:	00db      	lsls	r3, r3, #3
 800788a:	1d3a      	adds	r2, r7, #4
 800788c:	6812      	ldr	r2, [r2, #0]
 800788e:	4413      	add	r3, r2
 8007890:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007894:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8007898:	4613      	mov	r3, r2
 800789a:	005b      	lsls	r3, r3, #1
 800789c:	4413      	add	r3, r2
 800789e:	005b      	lsls	r3, r3, #1
 80078a0:	461a      	mov	r2, r3
 80078a2:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80078a6:	18d5      	adds	r5, r2, r3
 80078a8:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 80078ac:	f7f8 fcf4 	bl	8000298 <__aeabi_dsub>
 80078b0:	4603      	mov	r3, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	f107 0110 	add.w	r1, r7, #16
 80078b8:	00ea      	lsls	r2, r5, #3
 80078ba:	440a      	add	r2, r1
 80078bc:	e9c2 3400 	strd	r3, r4, [r2]
    for (c = 0; c < 6; c++) {
 80078c0:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80078c4:	3301      	adds	r3, #1
 80078c6:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80078ca:	e78c      	b.n	80077e6 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc2a>
  for (b_j = 0; b_j < 6; b_j++) {
 80078cc:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80078d0:	3301      	adds	r3, #1
 80078d2:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80078d6:	e5b4      	b.n	8007442 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x886>
    }
  }

  for (b_j = 0; b_j < 36; b_j++) {
 80078d8:	2300      	movs	r3, #0
 80078da:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80078de:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80078e2:	2b23      	cmp	r3, #35	; 0x23
 80078e4:	dc15      	bgt.n	8007912 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xd56>
    P_0[b_j] = P_1[b_j];
 80078e6:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80078ea:	00db      	lsls	r3, r3, #3
 80078ec:	1d3a      	adds	r2, r7, #4
 80078ee:	6812      	ldr	r2, [r2, #0]
 80078f0:	441a      	add	r2, r3
 80078f2:	f107 0110 	add.w	r1, r7, #16
 80078f6:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	440b      	add	r3, r1
 80078fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007902:	e9c2 3400 	strd	r3, r4, [r2]
  for (b_j = 0; b_j < 36; b_j++) {
 8007906:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800790a:	3301      	adds	r3, #1
 800790c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8007910:	e7e5      	b.n	80078de <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xd22>
  }
}
 8007912:	bf00      	nop
 8007914:	f507 7775 	add.w	r7, r7, #980	; 0x3d4
 8007918:	46bd      	mov	sp, r7
 800791a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800791c:	0000      	movs	r0, r0
	...

08007920 <_ZN27positionEstimatorModelClass4stepEv>:

// Model step function
void positionEstimatorModelClass::step()
{
 8007920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007924:	f6ad 0de4 	subw	sp, sp, #2276	; 0x8e4
 8007928:	af04      	add	r7, sp, #16
 800792a:	1d3b      	adds	r3, r7, #4
 800792c:	6018      	str	r0, [r3, #0]
    0.0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  // Abs: '<S34>/Abs' incorporates:
  //   Inport: '<Root>/HOME_lla'

  rtDW.Abs = std::abs(rtU.HOME_lla[0]);
 800792e:	1d3b      	adds	r3, r7, #4
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f503 634b 	add.w	r3, r3, #3248	; 0xcb0
 8007936:	ed93 7b00 	vldr	d7, [r3]
 800793a:	eeb0 0a47 	vmov.f32	s0, s14
 800793e:	eef0 0a67 	vmov.f32	s1, s15
 8007942:	f7fe fd86 	bl	8006452 <_ZSt3absd>
 8007946:	eeb0 7a40 	vmov.f32	s14, s0
 800794a:	eef0 7a60 	vmov.f32	s15, s1
 800794e:	1d3b      	adds	r3, r7, #4
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f503 6321 	add.w	r3, r3, #2576	; 0xa10
 8007956:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S35>/Compare' incorporates:
  //   Constant: '<S35>/Constant'

  rtDW.Compare = (rtDW.Abs > rtP.CompareToConstant_const);
 800795a:	1d3b      	adds	r3, r7, #4
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f503 6321 	add.w	r3, r3, #2576	; 0xa10
 8007962:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007966:	4bb2      	ldr	r3, [pc, #712]	; (8007c30 <_ZN27positionEstimatorModelClass4stepEv+0x310>)
 8007968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796c:	2601      	movs	r6, #1
 800796e:	f7f9 f8db 	bl	8000b28 <__aeabi_dcmpgt>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d101      	bne.n	800797c <_ZN27positionEstimatorModelClass4stepEv+0x5c>
 8007978:	2300      	movs	r3, #0
 800797a:	461e      	mov	r6, r3
 800797c:	b2f3      	uxtb	r3, r6
 800797e:	461a      	mov	r2, r3
 8007980:	1d3b      	adds	r3, r7, #4
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f883 2c38 	strb.w	r2, [r3, #3128]	; 0xc38

  // Switch: '<S34>/Switch' incorporates:
  //   Inport: '<Root>/HOME_lla'

  if (rtDW.Compare) {
 8007988:	1d3b      	adds	r3, r7, #4
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f893 3c38 	ldrb.w	r3, [r3, #3128]	; 0xc38
 8007990:	2b00      	cmp	r3, #0
 8007992:	d04f      	beq.n	8007a34 <_ZN27positionEstimatorModelClass4stepEv+0x114>
    // Bias: '<S34>/Bias' incorporates:
    //   Inport: '<Root>/HOME_lla'

    rtDW.Bias_m = rtU.HOME_lla[0] + rtP.Bias_Bias_al;
 8007994:	1d3b      	adds	r3, r7, #4
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f503 634b 	add.w	r3, r3, #3248	; 0xcb0
 800799c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079a0:	4ba3      	ldr	r3, [pc, #652]	; (8007c30 <_ZN27positionEstimatorModelClass4stepEv+0x310>)
 80079a2:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80079a6:	f7f8 fc79 	bl	800029c <__adddf3>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	1d39      	adds	r1, r7, #4
 80079b0:	6809      	ldr	r1, [r1, #0]
 80079b2:	f501 613a 	add.w	r1, r1, #2976	; 0xba0
 80079b6:	e9c1 2300 	strd	r2, r3, [r1]

    // Math: '<S34>/Math Function1' incorporates:
    //   Constant: '<S34>/Constant2'

    rtDW.MathFunction1_i = rt_modd_snf(rtDW.Bias_m, rtP.Constant2_Value_j);
 80079ba:	1d3b      	adds	r3, r7, #4
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 80079c2:	ed93 7b00 	vldr	d7, [r3]
 80079c6:	4b9a      	ldr	r3, [pc, #616]	; (8007c30 <_ZN27positionEstimatorModelClass4stepEv+0x310>)
 80079c8:	ed93 6b2c 	vldr	d6, [r3, #176]	; 0xb0
 80079cc:	eeb0 1a46 	vmov.f32	s2, s12
 80079d0:	eef0 1a66 	vmov.f32	s3, s13
 80079d4:	eeb0 0a47 	vmov.f32	s0, s14
 80079d8:	eef0 0a67 	vmov.f32	s1, s15
 80079dc:	f7fe fed0 	bl	8006780 <_Z11rt_modd_snfdd>
 80079e0:	eeb0 7a40 	vmov.f32	s14, s0
 80079e4:	eef0 7a60 	vmov.f32	s15, s1
 80079e8:	1d3b      	adds	r3, r7, #4
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 80079f0:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S34>/Bias1'
    rtDW.Bias1_k = rtDW.MathFunction1_i + rtP.Bias1_Bias_k;
 80079f4:	1d3b      	adds	r3, r7, #4
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 80079fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a00:	4b8b      	ldr	r3, [pc, #556]	; (8007c30 <_ZN27positionEstimatorModelClass4stepEv+0x310>)
 8007a02:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8007a06:	f7f8 fc49 	bl	800029c <__adddf3>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	1d39      	adds	r1, r7, #4
 8007a10:	6809      	ldr	r1, [r1, #0]
 8007a12:	f501 613b 	add.w	r1, r1, #2992	; 0xbb0
 8007a16:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.Switch = rtDW.Bias1_k;
 8007a1a:	1d3b      	adds	r3, r7, #4
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f503 633b 	add.w	r3, r3, #2992	; 0xbb0
 8007a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a26:	1d39      	adds	r1, r7, #4
 8007a28:	6809      	ldr	r1, [r1, #0]
 8007a2a:	f601 2118 	addw	r1, r1, #2584	; 0xa18
 8007a2e:	e9c1 2300 	strd	r2, r3, [r1]
 8007a32:	e00b      	b.n	8007a4c <_ZN27positionEstimatorModelClass4stepEv+0x12c>
  } else {
    rtDW.Switch = rtU.HOME_lla[0];
 8007a34:	1d3b      	adds	r3, r7, #4
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f503 634b 	add.w	r3, r3, #3248	; 0xcb0
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	1d39      	adds	r1, r7, #4
 8007a42:	6809      	ldr	r1, [r1, #0]
 8007a44:	f601 2118 	addw	r1, r1, #2584	; 0xa18
 8007a48:	e9c1 2300 	strd	r2, r3, [r1]
  }

  // End of Switch: '<S34>/Switch'

  // Abs: '<S31>/Abs1'
  rtDW.Abs1 = std::abs(rtDW.Switch);
 8007a4c:	1d3b      	adds	r3, r7, #4
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8007a54:	ed93 7b00 	vldr	d7, [r3]
 8007a58:	eeb0 0a47 	vmov.f32	s0, s14
 8007a5c:	eef0 0a67 	vmov.f32	s1, s15
 8007a60:	f7fe fcf7 	bl	8006452 <_ZSt3absd>
 8007a64:	eeb0 7a40 	vmov.f32	s14, s0
 8007a68:	eef0 7a60 	vmov.f32	s15, s1
 8007a6c:	1d3b      	adds	r3, r7, #4
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8007a74:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S33>/Compare' incorporates:
  //   Constant: '<S33>/Constant'

  rtDW.Compare_c = (rtDW.Abs1 > rtP.CompareToConstant_const_d);
 8007a78:	1d3b      	adds	r3, r7, #4
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8007a80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a84:	4b6a      	ldr	r3, [pc, #424]	; (8007c30 <_ZN27positionEstimatorModelClass4stepEv+0x310>)
 8007a86:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007a8a:	2601      	movs	r6, #1
 8007a8c:	f7f9 f84c 	bl	8000b28 <__aeabi_dcmpgt>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <_ZN27positionEstimatorModelClass4stepEv+0x17a>
 8007a96:	2300      	movs	r3, #0
 8007a98:	461e      	mov	r6, r3
 8007a9a:	b2f3      	uxtb	r3, r6
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	1d3b      	adds	r3, r7, #4
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f883 2c39 	strb.w	r2, [r3, #3129]	; 0xc39
  // Switch: '<S31>/Switch' incorporates:
  //   Constant: '<S22>/Constant'
  //   Constant: '<S22>/Constant1'
  //   Switch: '<S22>/Switch1'

  if (rtDW.Compare_c) {
 8007aa6:	1d3b      	adds	r3, r7, #4
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f893 3c39 	ldrb.w	r3, [r3, #3129]	; 0xc39
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f000 80c6 	beq.w	8007c40 <_ZN27positionEstimatorModelClass4stepEv+0x320>
    // Bias: '<S31>/Bias'
    rtDW.Bias_d = rtDW.Abs1 + rtP.Bias_Bias_e;
 8007ab4:	1d3b      	adds	r3, r7, #4
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8007abc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ac0:	4b5b      	ldr	r3, [pc, #364]	; (8007c30 <_ZN27positionEstimatorModelClass4stepEv+0x310>)
 8007ac2:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8007ac6:	f7f8 fbe9 	bl	800029c <__adddf3>
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	1d39      	adds	r1, r7, #4
 8007ad0:	6809      	ldr	r1, [r1, #0]
 8007ad2:	f601 31b8 	addw	r1, r1, #3000	; 0xbb8
 8007ad6:	e9c1 2300 	strd	r2, r3, [r1]

    // Gain: '<S31>/Gain'
    rtDW.Gain = rtP.Gain_Gain_n * rtDW.Bias_d;
 8007ada:	4b55      	ldr	r3, [pc, #340]	; (8007c30 <_ZN27positionEstimatorModelClass4stepEv+0x310>)
 8007adc:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8007ae0:	1d3b      	adds	r3, r7, #4
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8007ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aec:	f7f8 fd8c 	bl	8000608 <__aeabi_dmul>
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	1d39      	adds	r1, r7, #4
 8007af6:	6809      	ldr	r1, [r1, #0]
 8007af8:	f501 613c 	add.w	r1, r1, #3008	; 0xbc0
 8007afc:	e9c1 2300 	strd	r2, r3, [r1]

    // Bias: '<S31>/Bias1'
    rtDW.Bias1_o = rtDW.Gain + rtP.Bias1_Bias_c;
 8007b00:	1d3b      	adds	r3, r7, #4
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f503 633c 	add.w	r3, r3, #3008	; 0xbc0
 8007b08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b0c:	4b48      	ldr	r3, [pc, #288]	; (8007c30 <_ZN27positionEstimatorModelClass4stepEv+0x310>)
 8007b0e:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8007b12:	f7f8 fbc3 	bl	800029c <__adddf3>
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	1d39      	adds	r1, r7, #4
 8007b1c:	6809      	ldr	r1, [r1, #0]
 8007b1e:	f601 31c8 	addw	r1, r1, #3016	; 0xbc8
 8007b22:	e9c1 2300 	strd	r2, r3, [r1]

    // Signum: '<S31>/Sign1'
    u = rtDW.Switch;
 8007b26:	1d3b      	adds	r3, r7, #4
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8007b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b32:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8007b36:	e9c1 2300 	strd	r2, r3, [r1]
    if (u < 0.0) {
 8007b3a:	f04f 0200 	mov.w	r2, #0
 8007b3e:	f04f 0300 	mov.w	r3, #0
 8007b42:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8007b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b4a:	f7f8 ffcf 	bl	8000aec <__aeabi_dcmplt>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d009      	beq.n	8007b68 <_ZN27positionEstimatorModelClass4stepEv+0x248>
      rtDW.Sign1 = -1.0;
 8007b54:	1d3b      	adds	r3, r7, #4
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f503 613d 	add.w	r1, r3, #3024	; 0xbd0
 8007b5c:	f04f 0200 	mov.w	r2, #0
 8007b60:	4b34      	ldr	r3, [pc, #208]	; (8007c34 <_ZN27positionEstimatorModelClass4stepEv+0x314>)
 8007b62:	e9c1 2300 	strd	r2, r3, [r1]
 8007b66:	e037      	b.n	8007bd8 <_ZN27positionEstimatorModelClass4stepEv+0x2b8>
    } else if (u > 0.0) {
 8007b68:	f04f 0200 	mov.w	r2, #0
 8007b6c:	f04f 0300 	mov.w	r3, #0
 8007b70:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8007b74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b78:	f7f8 ffd6 	bl	8000b28 <__aeabi_dcmpgt>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d009      	beq.n	8007b96 <_ZN27positionEstimatorModelClass4stepEv+0x276>
      rtDW.Sign1 = 1.0;
 8007b82:	1d3b      	adds	r3, r7, #4
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f503 613d 	add.w	r1, r3, #3024	; 0xbd0
 8007b8a:	f04f 0200 	mov.w	r2, #0
 8007b8e:	4b2a      	ldr	r3, [pc, #168]	; (8007c38 <_ZN27positionEstimatorModelClass4stepEv+0x318>)
 8007b90:	e9c1 2300 	strd	r2, r3, [r1]
 8007b94:	e020      	b.n	8007bd8 <_ZN27positionEstimatorModelClass4stepEv+0x2b8>
    } else if (u == 0.0) {
 8007b96:	f04f 0200 	mov.w	r2, #0
 8007b9a:	f04f 0300 	mov.w	r3, #0
 8007b9e:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8007ba2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ba6:	f7f8 ff97 	bl	8000ad8 <__aeabi_dcmpeq>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00a      	beq.n	8007bc6 <_ZN27positionEstimatorModelClass4stepEv+0x2a6>
      rtDW.Sign1 = 0.0;
 8007bb0:	1d3b      	adds	r3, r7, #4
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f503 613d 	add.w	r1, r3, #3024	; 0xbd0
 8007bb8:	f04f 0200 	mov.w	r2, #0
 8007bbc:	f04f 0300 	mov.w	r3, #0
 8007bc0:	e9c1 2300 	strd	r2, r3, [r1]
 8007bc4:	e008      	b.n	8007bd8 <_ZN27positionEstimatorModelClass4stepEv+0x2b8>
    } else {
      rtDW.Sign1 = (rtNaN);
 8007bc6:	4b1d      	ldr	r3, [pc, #116]	; (8007c3c <_ZN27positionEstimatorModelClass4stepEv+0x31c>)
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	1d39      	adds	r1, r7, #4
 8007bce:	6809      	ldr	r1, [r1, #0]
 8007bd0:	f501 613d 	add.w	r1, r1, #3024	; 0xbd0
 8007bd4:	e9c1 2300 	strd	r2, r3, [r1]
    }

    // End of Signum: '<S31>/Sign1'

    // Product: '<S31>/Divide1'
    rtDW.Divide1 = rtDW.Sign1 * rtDW.Bias1_o;
 8007bd8:	1d3b      	adds	r3, r7, #4
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f503 633d 	add.w	r3, r3, #3024	; 0xbd0
 8007be0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007be4:	1d3b      	adds	r3, r7, #4
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	f7f8 fd0a 	bl	8000608 <__aeabi_dmul>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	1d39      	adds	r1, r7, #4
 8007bfa:	6809      	ldr	r1, [r1, #0]
 8007bfc:	f601 31d8 	addw	r1, r1, #3032	; 0xbd8
 8007c00:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.Switch_b = rtDW.Divide1;
 8007c04:	1d3b      	adds	r3, r7, #4
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	1d39      	adds	r1, r7, #4
 8007c12:	6809      	ldr	r1, [r1, #0]
 8007c14:	f601 2128 	addw	r1, r1, #2600	; 0xa28
 8007c18:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.Switch1 = rtP.Constant_Value_m;
 8007c1c:	4b04      	ldr	r3, [pc, #16]	; (8007c30 <_ZN27positionEstimatorModelClass4stepEv+0x310>)
 8007c1e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8007c22:	1d39      	adds	r1, r7, #4
 8007c24:	6809      	ldr	r1, [r1, #0]
 8007c26:	f501 6123 	add.w	r1, r1, #2608	; 0xa30
 8007c2a:	e9c1 2300 	strd	r2, r3, [r1]
 8007c2e:	e01c      	b.n	8007c6a <_ZN27positionEstimatorModelClass4stepEv+0x34a>
 8007c30:	200002b0 	.word	0x200002b0
 8007c34:	bff00000 	.word	0xbff00000
 8007c38:	3ff00000 	.word	0x3ff00000
 8007c3c:	20000ac8 	.word	0x20000ac8
  } else {
    rtDW.Switch_b = rtDW.Switch;
 8007c40:	1d3b      	adds	r3, r7, #4
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8007c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4c:	1d39      	adds	r1, r7, #4
 8007c4e:	6809      	ldr	r1, [r1, #0]
 8007c50:	f601 2128 	addw	r1, r1, #2600	; 0xa28
 8007c54:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.Switch1 = rtP.Constant1_Value_f;
 8007c58:	4baa      	ldr	r3, [pc, #680]	; (8007f04 <_ZN27positionEstimatorModelClass4stepEv+0x5e4>)
 8007c5a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8007c5e:	1d39      	adds	r1, r7, #4
 8007c60:	6809      	ldr	r1, [r1, #0]
 8007c62:	f501 6123 	add.w	r1, r1, #2608	; 0xa30
 8007c66:	e9c1 2300 	strd	r2, r3, [r1]
  // End of Switch: '<S31>/Switch'

  // Sum: '<S22>/Sum' incorporates:
  //   Inport: '<Root>/HOME_lla'

  rtDW.Sum = rtDW.Switch1 + rtU.HOME_lla[1];
 8007c6a:	1d3b      	adds	r3, r7, #4
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8007c72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c76:	1d3b      	adds	r3, r7, #4
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	f7f8 fb0b 	bl	800029c <__adddf3>
 8007c86:	4602      	mov	r2, r0
 8007c88:	460b      	mov	r3, r1
 8007c8a:	1d39      	adds	r1, r7, #4
 8007c8c:	6809      	ldr	r1, [r1, #0]
 8007c8e:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007c92:	e9c1 2300 	strd	r2, r3, [r1]

  // Abs: '<S32>/Abs'
  rtDW.Abs_i = std::abs(rtDW.Sum);
 8007c96:	1d3b      	adds	r3, r7, #4
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007c9e:	ed93 7b00 	vldr	d7, [r3]
 8007ca2:	eeb0 0a47 	vmov.f32	s0, s14
 8007ca6:	eef0 0a67 	vmov.f32	s1, s15
 8007caa:	f7fe fbd2 	bl	8006452 <_ZSt3absd>
 8007cae:	eeb0 7a40 	vmov.f32	s14, s0
 8007cb2:	eef0 7a60 	vmov.f32	s15, s1
 8007cb6:	1d3b      	adds	r3, r7, #4
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 8007cbe:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S36>/Compare' incorporates:
  //   Constant: '<S36>/Constant'

  rtDW.Compare_d = (rtDW.Abs_i > rtP.CompareToConstant_const_j);
 8007cc2:	1d3b      	adds	r3, r7, #4
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 8007cca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cce:	4b8d      	ldr	r3, [pc, #564]	; (8007f04 <_ZN27positionEstimatorModelClass4stepEv+0x5e4>)
 8007cd0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007cd4:	2601      	movs	r6, #1
 8007cd6:	f7f8 ff27 	bl	8000b28 <__aeabi_dcmpgt>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d101      	bne.n	8007ce4 <_ZN27positionEstimatorModelClass4stepEv+0x3c4>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	461e      	mov	r6, r3
 8007ce4:	b2f3      	uxtb	r3, r6
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	1d3b      	adds	r3, r7, #4
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f883 2c3a 	strb.w	r2, [r3, #3130]	; 0xc3a

  // Switch: '<S32>/Switch'
  if (rtDW.Compare_d) {
 8007cf0:	1d3b      	adds	r3, r7, #4
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f893 3c3a 	ldrb.w	r3, [r3, #3130]	; 0xc3a
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d04f      	beq.n	8007d9c <_ZN27positionEstimatorModelClass4stepEv+0x47c>
    // Bias: '<S32>/Bias'
    rtDW.Bias = rtDW.Sum + rtP.Bias_Bias_d;
 8007cfc:	1d3b      	adds	r3, r7, #4
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007d04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d08:	4b7e      	ldr	r3, [pc, #504]	; (8007f04 <_ZN27positionEstimatorModelClass4stepEv+0x5e4>)
 8007d0a:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8007d0e:	f7f8 fac5 	bl	800029c <__adddf3>
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	1d39      	adds	r1, r7, #4
 8007d18:	6809      	ldr	r1, [r1, #0]
 8007d1a:	f601 3188 	addw	r1, r1, #2952	; 0xb88
 8007d1e:	e9c1 2300 	strd	r2, r3, [r1]

    // Math: '<S32>/Math Function1' incorporates:
    //   Constant: '<S32>/Constant2'

    rtDW.MathFunction1 = rt_modd_snf(rtDW.Bias, rtP.Constant2_Value_k);
 8007d22:	1d3b      	adds	r3, r7, #4
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f603 3388 	addw	r3, r3, #2952	; 0xb88
 8007d2a:	ed93 7b00 	vldr	d7, [r3]
 8007d2e:	4b75      	ldr	r3, [pc, #468]	; (8007f04 <_ZN27positionEstimatorModelClass4stepEv+0x5e4>)
 8007d30:	ed93 6b32 	vldr	d6, [r3, #200]	; 0xc8
 8007d34:	eeb0 1a46 	vmov.f32	s2, s12
 8007d38:	eef0 1a66 	vmov.f32	s3, s13
 8007d3c:	eeb0 0a47 	vmov.f32	s0, s14
 8007d40:	eef0 0a67 	vmov.f32	s1, s15
 8007d44:	f7fe fd1c 	bl	8006780 <_Z11rt_modd_snfdd>
 8007d48:	eeb0 7a40 	vmov.f32	s14, s0
 8007d4c:	eef0 7a60 	vmov.f32	s15, s1
 8007d50:	1d3b      	adds	r3, r7, #4
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8007d58:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S32>/Bias1'
    rtDW.Bias1 = rtDW.MathFunction1 + rtP.Bias1_Bias_cz;
 8007d5c:	1d3b      	adds	r3, r7, #4
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8007d64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d68:	4b66      	ldr	r3, [pc, #408]	; (8007f04 <_ZN27positionEstimatorModelClass4stepEv+0x5e4>)
 8007d6a:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8007d6e:	f7f8 fa95 	bl	800029c <__adddf3>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	1d39      	adds	r1, r7, #4
 8007d78:	6809      	ldr	r1, [r1, #0]
 8007d7a:	f601 3198 	addw	r1, r1, #2968	; 0xb98
 8007d7e:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.Switch_h = rtDW.Bias1;
 8007d82:	1d3b      	adds	r3, r7, #4
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 8007d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8e:	1d39      	adds	r1, r7, #4
 8007d90:	6809      	ldr	r1, [r1, #0]
 8007d92:	f601 2148 	addw	r1, r1, #2632	; 0xa48
 8007d96:	e9c1 2300 	strd	r2, r3, [r1]
 8007d9a:	e00b      	b.n	8007db4 <_ZN27positionEstimatorModelClass4stepEv+0x494>
  } else {
    rtDW.Switch_h = rtDW.Sum;
 8007d9c:	1d3b      	adds	r3, r7, #4
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da8:	1d39      	adds	r1, r7, #4
 8007daa:	6809      	ldr	r1, [r1, #0]
 8007dac:	f601 2148 	addw	r1, r1, #2632	; 0xa48
 8007db0:	e9c1 2300 	strd	r2, r3, [r1]

  // Sum: '<S20>/Sum1' incorporates:
  //   Inport: '<Root>/lat'
  //   Inport: '<Root>/lon'

  rtDW.Sum1[0] = rtU.lat - rtDW.Switch_b;
 8007db4:	1d3b      	adds	r3, r7, #4
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f603 4378 	addw	r3, r3, #3192	; 0xc78
 8007dbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007dc0:	1d3b      	adds	r3, r7, #4
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8007dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dcc:	f7f8 fa64 	bl	8000298 <__aeabi_dsub>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	1d39      	adds	r1, r7, #4
 8007dd6:	6809      	ldr	r1, [r1, #0]
 8007dd8:	e9c1 2300 	strd	r2, r3, [r1]
  rtDW.Sum1[1] = rtU.lon - rtDW.Switch_h;
 8007ddc:	1d3b      	adds	r3, r7, #4
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8007de4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007de8:	1d3b      	adds	r3, r7, #4
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f603 2348 	addw	r3, r3, #2632	; 0xa48
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	f7f8 fa50 	bl	8000298 <__aeabi_dsub>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	1d39      	adds	r1, r7, #4
 8007dfe:	6809      	ldr	r1, [r1, #0]
 8007e00:	e9c1 2302 	strd	r2, r3, [r1, #8]

  // Abs: '<S28>/Abs'
  rtDW.Abs_b = std::abs(rtDW.Sum1[0]);
 8007e04:	1d3b      	adds	r3, r7, #4
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	ed93 7b00 	vldr	d7, [r3]
 8007e0c:	eeb0 0a47 	vmov.f32	s0, s14
 8007e10:	eef0 0a67 	vmov.f32	s1, s15
 8007e14:	f7fe fb1d 	bl	8006452 <_ZSt3absd>
 8007e18:	eeb0 7a40 	vmov.f32	s14, s0
 8007e1c:	eef0 7a60 	vmov.f32	s15, s1
 8007e20:	1d3b      	adds	r3, r7, #4
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f503 6325 	add.w	r3, r3, #2640	; 0xa50
 8007e28:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S29>/Compare' incorporates:
  //   Constant: '<S29>/Constant'

  rtDW.Compare_ds = (rtDW.Abs_b > rtP.CompareToConstant_const_n);
 8007e2c:	1d3b      	adds	r3, r7, #4
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f503 6325 	add.w	r3, r3, #2640	; 0xa50
 8007e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e38:	4b32      	ldr	r3, [pc, #200]	; (8007f04 <_ZN27positionEstimatorModelClass4stepEv+0x5e4>)
 8007e3a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007e3e:	2601      	movs	r6, #1
 8007e40:	f7f8 fe72 	bl	8000b28 <__aeabi_dcmpgt>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <_ZN27positionEstimatorModelClass4stepEv+0x52e>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	461e      	mov	r6, r3
 8007e4e:	b2f3      	uxtb	r3, r6
 8007e50:	461a      	mov	r2, r3
 8007e52:	1d3b      	adds	r3, r7, #4
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f883 2c3b 	strb.w	r2, [r3, #3131]	; 0xc3b

  // Switch: '<S28>/Switch'
  if (rtDW.Compare_ds) {
 8007e5a:	1d3b      	adds	r3, r7, #4
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f893 3c3b 	ldrb.w	r3, [r3, #3131]	; 0xc3b
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d050      	beq.n	8007f08 <_ZN27positionEstimatorModelClass4stepEv+0x5e8>
    // Bias: '<S28>/Bias'
    rtDW.Bias_e = rtDW.Sum1[0] + rtP.Bias_Bias_b;
 8007e66:	1d3b      	adds	r3, r7, #4
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e6e:	4b25      	ldr	r3, [pc, #148]	; (8007f04 <_ZN27positionEstimatorModelClass4stepEv+0x5e4>)
 8007e70:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007e74:	f7f8 fa12 	bl	800029c <__adddf3>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	1d39      	adds	r1, r7, #4
 8007e7e:	6809      	ldr	r1, [r1, #0]
 8007e80:	f601 31f8 	addw	r1, r1, #3064	; 0xbf8
 8007e84:	e9c1 2300 	strd	r2, r3, [r1]

    // Math: '<S28>/Math Function1' incorporates:
    //   Constant: '<S28>/Constant2'

    rtDW.MathFunction1_o = rt_modd_snf(rtDW.Bias_e, rtP.Constant2_Value);
 8007e88:	1d3b      	adds	r3, r7, #4
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 8007e90:	ed93 7b00 	vldr	d7, [r3]
 8007e94:	4b1b      	ldr	r3, [pc, #108]	; (8007f04 <_ZN27positionEstimatorModelClass4stepEv+0x5e4>)
 8007e96:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8007e9a:	eeb0 1a46 	vmov.f32	s2, s12
 8007e9e:	eef0 1a66 	vmov.f32	s3, s13
 8007ea2:	eeb0 0a47 	vmov.f32	s0, s14
 8007ea6:	eef0 0a67 	vmov.f32	s1, s15
 8007eaa:	f7fe fc69 	bl	8006780 <_Z11rt_modd_snfdd>
 8007eae:	eeb0 7a40 	vmov.f32	s14, s0
 8007eb2:	eef0 7a60 	vmov.f32	s15, s1
 8007eb6:	1d3b      	adds	r3, r7, #4
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007ebe:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S28>/Bias1'
    rtDW.Bias1_oh = rtDW.MathFunction1_o + rtP.Bias1_Bias_p;
 8007ec2:	1d3b      	adds	r3, r7, #4
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007eca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ece:	4b0d      	ldr	r3, [pc, #52]	; (8007f04 <_ZN27positionEstimatorModelClass4stepEv+0x5e4>)
 8007ed0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007ed4:	f7f8 f9e2 	bl	800029c <__adddf3>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	1d39      	adds	r1, r7, #4
 8007ede:	6809      	ldr	r1, [r1, #0]
 8007ee0:	f601 4108 	addw	r1, r1, #3080	; 0xc08
 8007ee4:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.Switch_f = rtDW.Bias1_oh;
 8007ee8:	1d3b      	adds	r3, r7, #4
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	1d39      	adds	r1, r7, #4
 8007ef6:	6809      	ldr	r1, [r1, #0]
 8007ef8:	f601 2158 	addw	r1, r1, #2648	; 0xa58
 8007efc:	e9c1 2300 	strd	r2, r3, [r1]
 8007f00:	e00c      	b.n	8007f1c <_ZN27positionEstimatorModelClass4stepEv+0x5fc>
 8007f02:	bf00      	nop
 8007f04:	200002b0 	.word	0x200002b0
  } else {
    rtDW.Switch_f = rtDW.Sum1[0];
 8007f08:	1d3b      	adds	r3, r7, #4
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f10:	1d39      	adds	r1, r7, #4
 8007f12:	6809      	ldr	r1, [r1, #0]
 8007f14:	f601 2158 	addw	r1, r1, #2648	; 0xa58
 8007f18:	e9c1 2300 	strd	r2, r3, [r1]
  }

  // End of Switch: '<S28>/Switch'

  // Abs: '<S25>/Abs1'
  rtDW.Abs1_j = std::abs(rtDW.Switch_f);
 8007f1c:	1d3b      	adds	r3, r7, #4
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 8007f24:	ed93 7b00 	vldr	d7, [r3]
 8007f28:	eeb0 0a47 	vmov.f32	s0, s14
 8007f2c:	eef0 0a67 	vmov.f32	s1, s15
 8007f30:	f7fe fa8f 	bl	8006452 <_ZSt3absd>
 8007f34:	eeb0 7a40 	vmov.f32	s14, s0
 8007f38:	eef0 7a60 	vmov.f32	s15, s1
 8007f3c:	1d3b      	adds	r3, r7, #4
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 8007f44:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S27>/Compare' incorporates:
  //   Constant: '<S27>/Constant'

  rtDW.Compare_m = (rtDW.Abs1_j > rtP.CompareToConstant_const_e);
 8007f48:	1d3b      	adds	r3, r7, #4
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 8007f50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f54:	4b6a      	ldr	r3, [pc, #424]	; (8008100 <_ZN27positionEstimatorModelClass4stepEv+0x7e0>)
 8007f56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f5a:	2601      	movs	r6, #1
 8007f5c:	f7f8 fde4 	bl	8000b28 <__aeabi_dcmpgt>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d101      	bne.n	8007f6a <_ZN27positionEstimatorModelClass4stepEv+0x64a>
 8007f66:	2300      	movs	r3, #0
 8007f68:	461e      	mov	r6, r3
 8007f6a:	b2f3      	uxtb	r3, r6
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	1d3b      	adds	r3, r7, #4
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f883 2c3c 	strb.w	r2, [r3, #3132]	; 0xc3c
  // Switch: '<S25>/Switch' incorporates:
  //   Constant: '<S21>/Constant'
  //   Constant: '<S21>/Constant1'
  //   Switch: '<S21>/Switch1'

  if (rtDW.Compare_m) {
 8007f76:	1d3b      	adds	r3, r7, #4
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f893 3c3c 	ldrb.w	r3, [r3, #3132]	; 0xc3c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 80c6 	beq.w	8008110 <_ZN27positionEstimatorModelClass4stepEv+0x7f0>
    // Bias: '<S25>/Bias'
    rtDW.Bias_mj = rtDW.Abs1_j + rtP.Bias_Bias;
 8007f84:	1d3b      	adds	r3, r7, #4
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 8007f8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f90:	4b5b      	ldr	r3, [pc, #364]	; (8008100 <_ZN27positionEstimatorModelClass4stepEv+0x7e0>)
 8007f92:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8007f96:	f7f8 f981 	bl	800029c <__adddf3>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	1d39      	adds	r1, r7, #4
 8007fa0:	6809      	ldr	r1, [r1, #0]
 8007fa2:	f501 6141 	add.w	r1, r1, #3088	; 0xc10
 8007fa6:	e9c1 2300 	strd	r2, r3, [r1]

    // Gain: '<S25>/Gain'
    rtDW.Gain_c = rtP.Gain_Gain * rtDW.Bias_mj;
 8007faa:	4b55      	ldr	r3, [pc, #340]	; (8008100 <_ZN27positionEstimatorModelClass4stepEv+0x7e0>)
 8007fac:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8007fb0:	1d3b      	adds	r3, r7, #4
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 8007fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbc:	f7f8 fb24 	bl	8000608 <__aeabi_dmul>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	1d39      	adds	r1, r7, #4
 8007fc6:	6809      	ldr	r1, [r1, #0]
 8007fc8:	f601 4118 	addw	r1, r1, #3096	; 0xc18
 8007fcc:	e9c1 2300 	strd	r2, r3, [r1]

    // Bias: '<S25>/Bias1'
    rtDW.Bias1_n = rtDW.Gain_c + rtP.Bias1_Bias;
 8007fd0:	1d3b      	adds	r3, r7, #4
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f603 4318 	addw	r3, r3, #3096	; 0xc18
 8007fd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fdc:	4b48      	ldr	r3, [pc, #288]	; (8008100 <_ZN27positionEstimatorModelClass4stepEv+0x7e0>)
 8007fde:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007fe2:	f7f8 f95b 	bl	800029c <__adddf3>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	460b      	mov	r3, r1
 8007fea:	1d39      	adds	r1, r7, #4
 8007fec:	6809      	ldr	r1, [r1, #0]
 8007fee:	f501 6142 	add.w	r1, r1, #3104	; 0xc20
 8007ff2:	e9c1 2300 	strd	r2, r3, [r1]

    // Signum: '<S25>/Sign1'
    u = rtDW.Switch_f;
 8007ff6:	1d3b      	adds	r3, r7, #4
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008006:	e9c1 2300 	strd	r2, r3, [r1]
    if (u < 0.0) {
 800800a:	f04f 0200 	mov.w	r2, #0
 800800e:	f04f 0300 	mov.w	r3, #0
 8008012:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008016:	e9d1 0100 	ldrd	r0, r1, [r1]
 800801a:	f7f8 fd67 	bl	8000aec <__aeabi_dcmplt>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d009      	beq.n	8008038 <_ZN27positionEstimatorModelClass4stepEv+0x718>
      rtDW.Sign1_g = -1.0;
 8008024:	1d3b      	adds	r3, r7, #4
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f603 4128 	addw	r1, r3, #3112	; 0xc28
 800802c:	f04f 0200 	mov.w	r2, #0
 8008030:	4b34      	ldr	r3, [pc, #208]	; (8008104 <_ZN27positionEstimatorModelClass4stepEv+0x7e4>)
 8008032:	e9c1 2300 	strd	r2, r3, [r1]
 8008036:	e037      	b.n	80080a8 <_ZN27positionEstimatorModelClass4stepEv+0x788>
    } else if (u > 0.0) {
 8008038:	f04f 0200 	mov.w	r2, #0
 800803c:	f04f 0300 	mov.w	r3, #0
 8008040:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008048:	f7f8 fd6e 	bl	8000b28 <__aeabi_dcmpgt>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d009      	beq.n	8008066 <_ZN27positionEstimatorModelClass4stepEv+0x746>
      rtDW.Sign1_g = 1.0;
 8008052:	1d3b      	adds	r3, r7, #4
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f603 4128 	addw	r1, r3, #3112	; 0xc28
 800805a:	f04f 0200 	mov.w	r2, #0
 800805e:	4b2a      	ldr	r3, [pc, #168]	; (8008108 <_ZN27positionEstimatorModelClass4stepEv+0x7e8>)
 8008060:	e9c1 2300 	strd	r2, r3, [r1]
 8008064:	e020      	b.n	80080a8 <_ZN27positionEstimatorModelClass4stepEv+0x788>
    } else if (u == 0.0) {
 8008066:	f04f 0200 	mov.w	r2, #0
 800806a:	f04f 0300 	mov.w	r3, #0
 800806e:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008072:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008076:	f7f8 fd2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00a      	beq.n	8008096 <_ZN27positionEstimatorModelClass4stepEv+0x776>
      rtDW.Sign1_g = 0.0;
 8008080:	1d3b      	adds	r3, r7, #4
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f603 4128 	addw	r1, r3, #3112	; 0xc28
 8008088:	f04f 0200 	mov.w	r2, #0
 800808c:	f04f 0300 	mov.w	r3, #0
 8008090:	e9c1 2300 	strd	r2, r3, [r1]
 8008094:	e008      	b.n	80080a8 <_ZN27positionEstimatorModelClass4stepEv+0x788>
    } else {
      rtDW.Sign1_g = (rtNaN);
 8008096:	4b1d      	ldr	r3, [pc, #116]	; (800810c <_ZN27positionEstimatorModelClass4stepEv+0x7ec>)
 8008098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809c:	1d39      	adds	r1, r7, #4
 800809e:	6809      	ldr	r1, [r1, #0]
 80080a0:	f601 4128 	addw	r1, r1, #3112	; 0xc28
 80080a4:	e9c1 2300 	strd	r2, r3, [r1]
    }

    // End of Signum: '<S25>/Sign1'

    // Product: '<S25>/Divide1'
    rtDW.Divide1_h = rtDW.Sign1_g * rtDW.Bias1_n;
 80080a8:	1d3b      	adds	r3, r7, #4
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 80080b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80080b4:	1d3b      	adds	r3, r7, #4
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 80080bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c0:	f7f8 faa2 	bl	8000608 <__aeabi_dmul>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	1d39      	adds	r1, r7, #4
 80080ca:	6809      	ldr	r1, [r1, #0]
 80080cc:	f501 6143 	add.w	r1, r1, #3120	; 0xc30
 80080d0:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.Switch_j = rtDW.Divide1_h;
 80080d4:	1d3b      	adds	r3, r7, #4
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 80080dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e0:	1d39      	adds	r1, r7, #4
 80080e2:	6809      	ldr	r1, [r1, #0]
 80080e4:	f601 2168 	addw	r1, r1, #2664	; 0xa68
 80080e8:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.Switch1_b = rtP.Constant_Value;
 80080ec:	4b04      	ldr	r3, [pc, #16]	; (8008100 <_ZN27positionEstimatorModelClass4stepEv+0x7e0>)
 80080ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80080f2:	1d39      	adds	r1, r7, #4
 80080f4:	6809      	ldr	r1, [r1, #0]
 80080f6:	f501 6127 	add.w	r1, r1, #2672	; 0xa70
 80080fa:	e9c1 2300 	strd	r2, r3, [r1]
 80080fe:	e01c      	b.n	800813a <_ZN27positionEstimatorModelClass4stepEv+0x81a>
 8008100:	200002b0 	.word	0x200002b0
 8008104:	bff00000 	.word	0xbff00000
 8008108:	3ff00000 	.word	0x3ff00000
 800810c:	20000ac8 	.word	0x20000ac8
  } else {
    rtDW.Switch_j = rtDW.Switch_f;
 8008110:	1d3b      	adds	r3, r7, #4
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 8008118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811c:	1d39      	adds	r1, r7, #4
 800811e:	6809      	ldr	r1, [r1, #0]
 8008120:	f601 2168 	addw	r1, r1, #2664	; 0xa68
 8008124:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.Switch1_b = rtP.Constant1_Value;
 8008128:	4b4f      	ldr	r3, [pc, #316]	; (8008268 <_ZN27positionEstimatorModelClass4stepEv+0x948>)
 800812a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800812e:	1d39      	adds	r1, r7, #4
 8008130:	6809      	ldr	r1, [r1, #0]
 8008132:	f501 6127 	add.w	r1, r1, #2672	; 0xa70
 8008136:	e9c1 2300 	strd	r2, r3, [r1]
  }

  // End of Switch: '<S25>/Switch'

  // Sum: '<S21>/Sum'
  rtDW.Sum_j = rtDW.Switch1_b + rtDW.Sum1[1];
 800813a:	1d3b      	adds	r3, r7, #4
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f503 6327 	add.w	r3, r3, #2672	; 0xa70
 8008142:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008146:	1d3b      	adds	r3, r7, #4
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800814e:	f7f8 f8a5 	bl	800029c <__adddf3>
 8008152:	4602      	mov	r2, r0
 8008154:	460b      	mov	r3, r1
 8008156:	1d39      	adds	r1, r7, #4
 8008158:	6809      	ldr	r1, [r1, #0]
 800815a:	f601 2178 	addw	r1, r1, #2680	; 0xa78
 800815e:	e9c1 2300 	strd	r2, r3, [r1]

  // Abs: '<S26>/Abs'
  rtDW.Abs_b0 = std::abs(rtDW.Sum_j);
 8008162:	1d3b      	adds	r3, r7, #4
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 800816a:	ed93 7b00 	vldr	d7, [r3]
 800816e:	eeb0 0a47 	vmov.f32	s0, s14
 8008172:	eef0 0a67 	vmov.f32	s1, s15
 8008176:	f7fe f96c 	bl	8006452 <_ZSt3absd>
 800817a:	eeb0 7a40 	vmov.f32	s14, s0
 800817e:	eef0 7a60 	vmov.f32	s15, s1
 8008182:	1d3b      	adds	r3, r7, #4
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 800818a:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S30>/Compare' incorporates:
  //   Constant: '<S30>/Constant'

  rtDW.Compare_k = (rtDW.Abs_b0 > rtP.CompareToConstant_const_ei);
 800818e:	1d3b      	adds	r3, r7, #4
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 8008196:	e9d3 0100 	ldrd	r0, r1, [r3]
 800819a:	4b33      	ldr	r3, [pc, #204]	; (8008268 <_ZN27positionEstimatorModelClass4stepEv+0x948>)
 800819c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80081a0:	2601      	movs	r6, #1
 80081a2:	f7f8 fcc1 	bl	8000b28 <__aeabi_dcmpgt>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d101      	bne.n	80081b0 <_ZN27positionEstimatorModelClass4stepEv+0x890>
 80081ac:	2300      	movs	r3, #0
 80081ae:	461e      	mov	r6, r3
 80081b0:	b2f3      	uxtb	r3, r6
 80081b2:	461a      	mov	r2, r3
 80081b4:	1d3b      	adds	r3, r7, #4
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f883 2c3d 	strb.w	r2, [r3, #3133]	; 0xc3d

  // Switch: '<S26>/Switch'
  if (rtDW.Compare_k) {
 80081bc:	1d3b      	adds	r3, r7, #4
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f893 3c3d 	ldrb.w	r3, [r3, #3133]	; 0xc3d
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d051      	beq.n	800826c <_ZN27positionEstimatorModelClass4stepEv+0x94c>
    // Bias: '<S26>/Bias'
    rtDW.Bias_j = rtDW.Sum_j + rtP.Bias_Bias_a;
 80081c8:	1d3b      	adds	r3, r7, #4
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 80081d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80081d4:	4b24      	ldr	r3, [pc, #144]	; (8008268 <_ZN27positionEstimatorModelClass4stepEv+0x948>)
 80081d6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80081da:	f7f8 f85f 	bl	800029c <__adddf3>
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	1d39      	adds	r1, r7, #4
 80081e4:	6809      	ldr	r1, [r1, #0]
 80081e6:	f501 613e 	add.w	r1, r1, #3040	; 0xbe0
 80081ea:	e9c1 2300 	strd	r2, r3, [r1]

    // Math: '<S26>/Math Function1' incorporates:
    //   Constant: '<S26>/Constant2'

    rtDW.MathFunction1_h = rt_modd_snf(rtDW.Bias_j, rtP.Constant2_Value_g);
 80081ee:	1d3b      	adds	r3, r7, #4
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 80081f6:	ed93 7b00 	vldr	d7, [r3]
 80081fa:	4b1b      	ldr	r3, [pc, #108]	; (8008268 <_ZN27positionEstimatorModelClass4stepEv+0x948>)
 80081fc:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 8008200:	eeb0 1a46 	vmov.f32	s2, s12
 8008204:	eef0 1a66 	vmov.f32	s3, s13
 8008208:	eeb0 0a47 	vmov.f32	s0, s14
 800820c:	eef0 0a67 	vmov.f32	s1, s15
 8008210:	f7fe fab6 	bl	8006780 <_Z11rt_modd_snfdd>
 8008214:	eeb0 7a40 	vmov.f32	s14, s0
 8008218:	eef0 7a60 	vmov.f32	s15, s1
 800821c:	1d3b      	adds	r3, r7, #4
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f603 33e8 	addw	r3, r3, #3048	; 0xbe8
 8008224:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S26>/Bias1'
    rtDW.Bias1_p = rtDW.MathFunction1_h + rtP.Bias1_Bias_l;
 8008228:	1d3b      	adds	r3, r7, #4
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f603 33e8 	addw	r3, r3, #3048	; 0xbe8
 8008230:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008234:	4b0c      	ldr	r3, [pc, #48]	; (8008268 <_ZN27positionEstimatorModelClass4stepEv+0x948>)
 8008236:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800823a:	f7f8 f82f 	bl	800029c <__adddf3>
 800823e:	4602      	mov	r2, r0
 8008240:	460b      	mov	r3, r1
 8008242:	1d39      	adds	r1, r7, #4
 8008244:	6809      	ldr	r1, [r1, #0]
 8008246:	f501 613f 	add.w	r1, r1, #3056	; 0xbf0
 800824a:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.Switch_m = rtDW.Bias1_p;
 800824e:	1d3b      	adds	r3, r7, #4
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	1d39      	adds	r1, r7, #4
 800825c:	6809      	ldr	r1, [r1, #0]
 800825e:	f601 2188 	addw	r1, r1, #2696	; 0xa88
 8008262:	e9c1 2300 	strd	r2, r3, [r1]
 8008266:	e00d      	b.n	8008284 <_ZN27positionEstimatorModelClass4stepEv+0x964>
 8008268:	200002b0 	.word	0x200002b0
  } else {
    rtDW.Switch_m = rtDW.Sum_j;
 800826c:	1d3b      	adds	r3, r7, #4
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 8008274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008278:	1d39      	adds	r1, r7, #4
 800827a:	6809      	ldr	r1, [r1, #0]
 800827c:	f601 2188 	addw	r1, r1, #2696	; 0xa88
 8008280:	e9c1 2300 	strd	r2, r3, [r1]
  // End of Switch: '<S26>/Switch'

  // UnitConversion: '<S24>/Unit Conversion'
  // Unit Conversion - from: deg to: rad
  // Expression: output = (0.0174533*input) + (0)
  rtDW.UnitConversion[0] = 0.017453292519943295 * rtDW.Switch_j;
 8008284:	1d3b      	adds	r3, r7, #4
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f603 2368 	addw	r3, r3, #2664	; 0xa68
 800828c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008290:	a3c9      	add	r3, pc, #804	; (adr r3, 80085b8 <_ZN27positionEstimatorModelClass4stepEv+0xc98>)
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	f7f8 f9b7 	bl	8000608 <__aeabi_dmul>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	1d39      	adds	r1, r7, #4
 80082a0:	6809      	ldr	r1, [r1, #0]
 80082a2:	e9c1 2304 	strd	r2, r3, [r1, #16]
  rtDW.UnitConversion[1] = 0.017453292519943295 * rtDW.Switch_m;
 80082a6:	1d3b      	adds	r3, r7, #4
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 80082ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80082b2:	a3c1      	add	r3, pc, #772	; (adr r3, 80085b8 <_ZN27positionEstimatorModelClass4stepEv+0xc98>)
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	f7f8 f9a6 	bl	8000608 <__aeabi_dmul>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	1d39      	adds	r1, r7, #4
 80082c2:	6809      	ldr	r1, [r1, #0]
 80082c4:	e9c1 2306 	strd	r2, r3, [r1, #24]

  // Sum: '<S41>/Sum' incorporates:
  //   Constant: '<S41>/Constant'
  //   Constant: '<S41>/f'

  rtDW.Sum_a = rtP.f_Value - rtP.Constant_Value_c;
 80082c8:	4bbd      	ldr	r3, [pc, #756]	; (80085c0 <_ZN27positionEstimatorModelClass4stepEv+0xca0>)
 80082ca:	e9d3 0142 	ldrd	r0, r1, [r3, #264]	; 0x108
 80082ce:	4bbc      	ldr	r3, [pc, #752]	; (80085c0 <_ZN27positionEstimatorModelClass4stepEv+0xca0>)
 80082d0:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 80082d4:	f7f7 ffe0 	bl	8000298 <__aeabi_dsub>
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	1d39      	adds	r1, r7, #4
 80082de:	6809      	ldr	r1, [r1, #0]
 80082e0:	f501 6129 	add.w	r1, r1, #2704	; 0xa90
 80082e4:	e9c1 2300 	strd	r2, r3, [r1]

  // Product: '<S42>/Product1'
  rtDW.Product1 = rtDW.Sum_a * rtDW.Sum_a;
 80082e8:	1d3b      	adds	r3, r7, #4
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f503 6329 	add.w	r3, r3, #2704	; 0xa90
 80082f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80082f4:	1d3b      	adds	r3, r7, #4
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f503 6329 	add.w	r3, r3, #2704	; 0xa90
 80082fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008300:	f7f8 f982 	bl	8000608 <__aeabi_dmul>
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	1d39      	adds	r1, r7, #4
 800830a:	6809      	ldr	r1, [r1, #0]
 800830c:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8008310:	e9c1 2300 	strd	r2, r3, [r1]

  // Sum: '<S42>/Sum1' incorporates:
  //   Constant: '<S42>/Constant'

  rtDW.Sum1_e = rtP.Constant_Value_a - rtDW.Product1;
 8008314:	4baa      	ldr	r3, [pc, #680]	; (80085c0 <_ZN27positionEstimatorModelClass4stepEv+0xca0>)
 8008316:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	; 0xf8
 800831a:	1d3b      	adds	r3, r7, #4
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f603 2398 	addw	r3, r3, #2712	; 0xa98
 8008322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008326:	f7f7 ffb7 	bl	8000298 <__aeabi_dsub>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	1d39      	adds	r1, r7, #4
 8008330:	6809      	ldr	r1, [r1, #0]
 8008332:	f501 612a 	add.w	r1, r1, #2720	; 0xaa0
 8008336:	e9c1 2300 	strd	r2, r3, [r1]

  // Sqrt: '<S42>/sqrt'
  rtDW.sqrt_c = std::sqrt(rtDW.Sum1_e);
 800833a:	1d3b      	adds	r3, r7, #4
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f503 632a 	add.w	r3, r3, #2720	; 0xaa0
 8008342:	ed93 7b00 	vldr	d7, [r3]
 8008346:	eeb0 0a47 	vmov.f32	s0, s14
 800834a:	eef0 0a67 	vmov.f32	s1, s15
 800834e:	f01d fd81 	bl	8025e54 <sqrt>
 8008352:	eeb0 7a40 	vmov.f32	s14, s0
 8008356:	eef0 7a60 	vmov.f32	s15, s1
 800835a:	1d3b      	adds	r3, r7, #4
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f603 23a8 	addw	r3, r3, #2728	; 0xaa8
 8008362:	ed83 7b00 	vstr	d7, [r3]

  // UnitConversion: '<S39>/Unit Conversion'
  // Unit Conversion - from: deg to: rad
  // Expression: output = (0.0174533*input) + (0)
  rtDW.UnitConversion_m = 0.017453292519943295 * rtDW.Switch_b;
 8008366:	1d3b      	adds	r3, r7, #4
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800836e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008372:	a391      	add	r3, pc, #580	; (adr r3, 80085b8 <_ZN27positionEstimatorModelClass4stepEv+0xc98>)
 8008374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008378:	f7f8 f946 	bl	8000608 <__aeabi_dmul>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	1d39      	adds	r1, r7, #4
 8008382:	6809      	ldr	r1, [r1, #0]
 8008384:	f501 612b 	add.w	r1, r1, #2736	; 0xab0
 8008388:	e9c1 2300 	strd	r2, r3, [r1]

  // Trigonometry: '<S40>/Trigonometric Function1'
  rtDW.TrigonometricFunction1 = std::sin(rtDW.UnitConversion_m);
 800838c:	1d3b      	adds	r3, r7, #4
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f503 632b 	add.w	r3, r3, #2736	; 0xab0
 8008394:	ed93 7b00 	vldr	d7, [r3]
 8008398:	eeb0 0a47 	vmov.f32	s0, s14
 800839c:	eef0 0a67 	vmov.f32	s1, s15
 80083a0:	f01d f9de 	bl	8025760 <sin>
 80083a4:	eeb0 7a40 	vmov.f32	s14, s0
 80083a8:	eef0 7a60 	vmov.f32	s15, s1
 80083ac:	1d3b      	adds	r3, r7, #4
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 80083b4:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S40>/Product1'
  rtDW.Product1_n = rtDW.sqrt_c * rtDW.sqrt_c * rtDW.TrigonometricFunction1 *
 80083b8:	1d3b      	adds	r3, r7, #4
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f603 23a8 	addw	r3, r3, #2728	; 0xaa8
 80083c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083c4:	1d3b      	adds	r3, r7, #4
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f603 23a8 	addw	r3, r3, #2728	; 0xaa8
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	f7f8 f91a 	bl	8000608 <__aeabi_dmul>
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	4610      	mov	r0, r2
 80083da:	4619      	mov	r1, r3
 80083dc:	1d3b      	adds	r3, r7, #4
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 80083e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e8:	f7f8 f90e 	bl	8000608 <__aeabi_dmul>
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	4610      	mov	r0, r2
 80083f2:	4619      	mov	r1, r3
    rtDW.TrigonometricFunction1;
 80083f4:	1d3b      	adds	r3, r7, #4
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 80083fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtDW.Product1_n = rtDW.sqrt_c * rtDW.sqrt_c * rtDW.TrigonometricFunction1 *
 8008400:	f7f8 f902 	bl	8000608 <__aeabi_dmul>
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	1d39      	adds	r1, r7, #4
 800840a:	6809      	ldr	r1, [r1, #0]
 800840c:	f501 612c 	add.w	r1, r1, #2752	; 0xac0
 8008410:	e9c1 2300 	strd	r2, r3, [r1]

  // Sum: '<S40>/Sum1' incorporates:
  //   Constant: '<S40>/Constant'

  rtDW.Sum1_c = rtP.Constant_Value_f - rtDW.Product1_n;
 8008414:	4b6a      	ldr	r3, [pc, #424]	; (80085c0 <_ZN27positionEstimatorModelClass4stepEv+0xca0>)
 8008416:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 800841a:	1d3b      	adds	r3, r7, #4
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8008422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008426:	f7f7 ff37 	bl	8000298 <__aeabi_dsub>
 800842a:	4602      	mov	r2, r0
 800842c:	460b      	mov	r3, r1
 800842e:	1d39      	adds	r1, r7, #4
 8008430:	6809      	ldr	r1, [r1, #0]
 8008432:	f601 21c8 	addw	r1, r1, #2760	; 0xac8
 8008436:	e9c1 2300 	strd	r2, r3, [r1]

  // Sqrt: '<S38>/sqrt'
  rtDW.sqrt_d = std::sqrt(rtDW.Sum1_c);
 800843a:	1d3b      	adds	r3, r7, #4
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 8008442:	ed93 7b00 	vldr	d7, [r3]
 8008446:	eeb0 0a47 	vmov.f32	s0, s14
 800844a:	eef0 0a67 	vmov.f32	s1, s15
 800844e:	f01d fd01 	bl	8025e54 <sqrt>
 8008452:	eeb0 7a40 	vmov.f32	s14, s0
 8008456:	eef0 7a60 	vmov.f32	s15, s1
 800845a:	1d3b      	adds	r3, r7, #4
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f503 632d 	add.w	r3, r3, #2768	; 0xad0
 8008462:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S38>/Product1' incorporates:
  //   Constant: '<S38>/Constant1'

  rtDW.Rn = rtP.Constant1_Value_d / rtDW.sqrt_d;
 8008466:	4b56      	ldr	r3, [pc, #344]	; (80085c0 <_ZN27positionEstimatorModelClass4stepEv+0xca0>)
 8008468:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 800846c:	1d3b      	adds	r3, r7, #4
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f503 632d 	add.w	r3, r3, #2768	; 0xad0
 8008474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008478:	f7f8 f9f0 	bl	800085c <__aeabi_ddiv>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	1d39      	adds	r1, r7, #4
 8008482:	6809      	ldr	r1, [r1, #0]
 8008484:	f601 21d8 	addw	r1, r1, #2776	; 0xad8
 8008488:	e9c1 2300 	strd	r2, r3, [r1]

  // Product: '<S38>/Product2'
  rtDW.Product2 = rtDW.sqrt_c * rtDW.sqrt_c;
 800848c:	1d3b      	adds	r3, r7, #4
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f603 23a8 	addw	r3, r3, #2728	; 0xaa8
 8008494:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008498:	1d3b      	adds	r3, r7, #4
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f603 23a8 	addw	r3, r3, #2728	; 0xaa8
 80084a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a4:	f7f8 f8b0 	bl	8000608 <__aeabi_dmul>
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	1d39      	adds	r1, r7, #4
 80084ae:	6809      	ldr	r1, [r1, #0]
 80084b0:	f501 612e 	add.w	r1, r1, #2784	; 0xae0
 80084b4:	e9c1 2300 	strd	r2, r3, [r1]

  // Sum: '<S38>/Sum1' incorporates:
  //   Constant: '<S38>/Constant'

  rtDW.Sum1_g = rtP.Constant_Value_ch - rtDW.Product2;
 80084b8:	4b41      	ldr	r3, [pc, #260]	; (80085c0 <_ZN27positionEstimatorModelClass4stepEv+0xca0>)
 80084ba:	e9d3 0144 	ldrd	r0, r1, [r3, #272]	; 0x110
 80084be:	1d3b      	adds	r3, r7, #4
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f503 632e 	add.w	r3, r3, #2784	; 0xae0
 80084c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ca:	f7f7 fee5 	bl	8000298 <__aeabi_dsub>
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	1d39      	adds	r1, r7, #4
 80084d4:	6809      	ldr	r1, [r1, #0]
 80084d6:	f601 21e8 	addw	r1, r1, #2792	; 0xae8
 80084da:	e9c1 2300 	strd	r2, r3, [r1]

  // Product: '<S38>/Product3'
  rtDW.Rm = rtDW.Rn * rtDW.Sum1_g / rtDW.Sum1_c;
 80084de:	1d3b      	adds	r3, r7, #4
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f603 23d8 	addw	r3, r3, #2776	; 0xad8
 80084e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084ea:	1d3b      	adds	r3, r7, #4
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f603 23e8 	addw	r3, r3, #2792	; 0xae8
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	f7f8 f887 	bl	8000608 <__aeabi_dmul>
 80084fa:	4602      	mov	r2, r0
 80084fc:	460b      	mov	r3, r1
 80084fe:	4610      	mov	r0, r2
 8008500:	4619      	mov	r1, r3
 8008502:	1d3b      	adds	r3, r7, #4
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 800850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850e:	f7f8 f9a5 	bl	800085c <__aeabi_ddiv>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	1d39      	adds	r1, r7, #4
 8008518:	6809      	ldr	r1, [r1, #0]
 800851a:	f501 612f 	add.w	r1, r1, #2800	; 0xaf0
 800851e:	e9c1 2300 	strd	r2, r3, [r1]

  // Trigonometry: '<S38>/Trigonometric Function1' incorporates:
  //   Constant: '<S38>/Constant2'

  rtDW.TrigonometricFunction1_l = rt_atan2d_snf(rtP.Constant2_Value_h, rtDW.Rm);
 8008522:	4b27      	ldr	r3, [pc, #156]	; (80085c0 <_ZN27positionEstimatorModelClass4stepEv+0xca0>)
 8008524:	ed93 7b38 	vldr	d7, [r3, #224]	; 0xe0
 8008528:	1d3b      	adds	r3, r7, #4
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 8008530:	ed93 6b00 	vldr	d6, [r3]
 8008534:	eeb0 1a46 	vmov.f32	s2, s12
 8008538:	eef0 1a66 	vmov.f32	s3, s13
 800853c:	eeb0 0a47 	vmov.f32	s0, s14
 8008540:	eef0 0a67 	vmov.f32	s1, s15
 8008544:	f7fe fa80 	bl	8006a48 <_Z13rt_atan2d_snfdd>
 8008548:	eeb0 7a40 	vmov.f32	s14, s0
 800854c:	eef0 7a60 	vmov.f32	s15, s1
 8008550:	1d3b      	adds	r3, r7, #4
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8008558:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S23>/dNorth'
  rtDW.dNorth = rtDW.UnitConversion[0] / rtDW.TrigonometricFunction1_l;
 800855c:	1d3b      	adds	r3, r7, #4
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008564:	1d3b      	adds	r3, r7, #4
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 800856c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008570:	f7f8 f974 	bl	800085c <__aeabi_ddiv>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	1d39      	adds	r1, r7, #4
 800857a:	6809      	ldr	r1, [r1, #0]
 800857c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008580:	e9c1 2300 	strd	r2, r3, [r1]
  // UnitConversion: '<S37>/Unit Conversion' incorporates:
  //   Constant: '<S3>/flat-x_from_N'

  // Unit Conversion - from: deg to: rad
  // Expression: output = (0.0174533*input) + (0)
  rtDW.UnitConversion_p = 0.017453292519943295 * rtP.flatx_from_N_Value;
 8008584:	4b0e      	ldr	r3, [pc, #56]	; (80085c0 <_ZN27positionEstimatorModelClass4stepEv+0xca0>)
 8008586:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 800858a:	a30b      	add	r3, pc, #44	; (adr r3, 80085b8 <_ZN27positionEstimatorModelClass4stepEv+0xc98>)
 800858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008590:	f7f8 f83a 	bl	8000608 <__aeabi_dmul>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	1d39      	adds	r1, r7, #4
 800859a:	6809      	ldr	r1, [r1, #0]
 800859c:	f601 3108 	addw	r1, r1, #2824	; 0xb08
 80085a0:	e9c1 2300 	strd	r2, r3, [r1]

  // Trigonometry: '<S23>/SinCos'
  a22 = rtDW.UnitConversion_p;
 80085a4:	1d3b      	adds	r3, r7, #4
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 80085ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b0:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 80085b4:	e006      	b.n	80085c4 <_ZN27positionEstimatorModelClass4stepEv+0xca4>
 80085b6:	bf00      	nop
 80085b8:	a2529d39 	.word	0xa2529d39
 80085bc:	3f91df46 	.word	0x3f91df46
 80085c0:	200002b0 	.word	0x200002b0
 80085c4:	e9c1 2300 	strd	r2, r3, [r1]
  epsilon = std::sin(a22);
 80085c8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80085cc:	ed93 0b00 	vldr	d0, [r3]
 80085d0:	f01d f8c6 	bl	8025760 <sin>
 80085d4:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80085d8:	ed83 0b00 	vstr	d0, [r3]
  a22 = std::cos(a22);
 80085dc:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80085e0:	ed93 0b00 	vldr	d0, [r3]
 80085e4:	f01c fff4 	bl	80255d0 <cos>
 80085e8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80085ec:	ed83 0b00 	vstr	d0, [r3]
  rtDW.SinCos_o1 = epsilon;
 80085f0:	1d3b      	adds	r3, r7, #4
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f503 6131 	add.w	r1, r3, #2832	; 0xb10
 80085f8:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80085fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008600:	e9c1 2300 	strd	r2, r3, [r1]
  rtDW.SinCos_o2 = a22;
 8008604:	1d3b      	adds	r3, r7, #4
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f603 3118 	addw	r1, r3, #2840	; 0xb18
 800860c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8008610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008614:	e9c1 2300 	strd	r2, r3, [r1]

  // Product: '<S23>/x*cos'
  rtDW.xcos = rtDW.dNorth * rtDW.SinCos_o2;
 8008618:	1d3b      	adds	r3, r7, #4
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008620:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008624:	1d3b      	adds	r3, r7, #4
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f603 3318 	addw	r3, r3, #2840	; 0xb18
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	f7f7 ffea 	bl	8000608 <__aeabi_dmul>
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	1d39      	adds	r1, r7, #4
 800863a:	6809      	ldr	r1, [r1, #0]
 800863c:	f501 6132 	add.w	r1, r1, #2848	; 0xb20
 8008640:	e9c1 2300 	strd	r2, r3, [r1]

  // Trigonometry: '<S38>/Trigonometric Function'
  rtDW.TrigonometricFunction = std::cos(rtDW.UnitConversion_m);
 8008644:	1d3b      	adds	r3, r7, #4
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f503 632b 	add.w	r3, r3, #2736	; 0xab0
 800864c:	ed93 7b00 	vldr	d7, [r3]
 8008650:	eeb0 0a47 	vmov.f32	s0, s14
 8008654:	eef0 0a67 	vmov.f32	s1, s15
 8008658:	f01c ffba 	bl	80255d0 <cos>
 800865c:	eeb0 7a40 	vmov.f32	s14, s0
 8008660:	eef0 7a60 	vmov.f32	s15, s1
 8008664:	1d3b      	adds	r3, r7, #4
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 800866c:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S38>/Product4'
  rtDW.Product4 = rtDW.Rn * rtDW.TrigonometricFunction;
 8008670:	1d3b      	adds	r3, r7, #4
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f603 23d8 	addw	r3, r3, #2776	; 0xad8
 8008678:	e9d3 0100 	ldrd	r0, r1, [r3]
 800867c:	1d3b      	adds	r3, r7, #4
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 8008684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008688:	f7f7 ffbe 	bl	8000608 <__aeabi_dmul>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	1d39      	adds	r1, r7, #4
 8008692:	6809      	ldr	r1, [r1, #0]
 8008694:	f501 6133 	add.w	r1, r1, #2864	; 0xb30
 8008698:	e9c1 2300 	strd	r2, r3, [r1]

  // Trigonometry: '<S38>/Trigonometric Function2' incorporates:
  //   Constant: '<S38>/Constant3'

  rtDW.TrigonometricFunction2 = rt_atan2d_snf(rtP.Constant3_Value, rtDW.Product4);
 800869c:	4bb9      	ldr	r3, [pc, #740]	; (8008984 <_ZN27positionEstimatorModelClass4stepEv+0x1064>)
 800869e:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 80086a2:	1d3b      	adds	r3, r7, #4
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
 80086aa:	ed93 6b00 	vldr	d6, [r3]
 80086ae:	eeb0 1a46 	vmov.f32	s2, s12
 80086b2:	eef0 1a66 	vmov.f32	s3, s13
 80086b6:	eeb0 0a47 	vmov.f32	s0, s14
 80086ba:	eef0 0a67 	vmov.f32	s1, s15
 80086be:	f7fe f9c3 	bl	8006a48 <_Z13rt_atan2d_snfdd>
 80086c2:	eeb0 7a40 	vmov.f32	s14, s0
 80086c6:	eef0 7a60 	vmov.f32	s15, s1
 80086ca:	1d3b      	adds	r3, r7, #4
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 80086d2:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S23>/dEast'
  rtDW.dEast = 1.0 / rtDW.TrigonometricFunction2 * rtDW.UnitConversion[1];
 80086d6:	1d3b      	adds	r3, r7, #4
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 80086de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e2:	f04f 0000 	mov.w	r0, #0
 80086e6:	49a8      	ldr	r1, [pc, #672]	; (8008988 <_ZN27positionEstimatorModelClass4stepEv+0x1068>)
 80086e8:	f7f8 f8b8 	bl	800085c <__aeabi_ddiv>
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	4610      	mov	r0, r2
 80086f2:	4619      	mov	r1, r3
 80086f4:	1d3b      	adds	r3, r7, #4
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80086fc:	f7f7 ff84 	bl	8000608 <__aeabi_dmul>
 8008700:	4602      	mov	r2, r0
 8008702:	460b      	mov	r3, r1
 8008704:	1d39      	adds	r1, r7, #4
 8008706:	6809      	ldr	r1, [r1, #0]
 8008708:	f501 6134 	add.w	r1, r1, #2880	; 0xb40
 800870c:	e9c1 2300 	strd	r2, r3, [r1]

  // Product: '<S23>/y*sin'
  rtDW.ysin = rtDW.dEast * rtDW.SinCos_o1;
 8008710:	1d3b      	adds	r3, r7, #4
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8008718:	e9d3 0100 	ldrd	r0, r1, [r3]
 800871c:	1d3b      	adds	r3, r7, #4
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 8008724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008728:	f7f7 ff6e 	bl	8000608 <__aeabi_dmul>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	1d39      	adds	r1, r7, #4
 8008732:	6809      	ldr	r1, [r1, #0]
 8008734:	f601 3148 	addw	r1, r1, #2888	; 0xb48
 8008738:	e9c1 2300 	strd	r2, r3, [r1]

  // Sum: '<S23>/Sum2'
  rtDW.Px = rtDW.xcos + rtDW.ysin;
 800873c:	1d3b      	adds	r3, r7, #4
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8008744:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008748:	1d3b      	adds	r3, r7, #4
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f603 3348 	addw	r3, r3, #2888	; 0xb48
 8008750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008754:	f7f7 fda2 	bl	800029c <__adddf3>
 8008758:	4602      	mov	r2, r0
 800875a:	460b      	mov	r3, r1
 800875c:	1d39      	adds	r1, r7, #4
 800875e:	6809      	ldr	r1, [r1, #0]
 8008760:	f501 6135 	add.w	r1, r1, #2896	; 0xb50
 8008764:	e9c1 2300 	strd	r2, r3, [r1]

  // Product: '<S23>/x*sin'
  rtDW.xsin = rtDW.dNorth * rtDW.SinCos_o1;
 8008768:	1d3b      	adds	r3, r7, #4
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008770:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008774:	1d3b      	adds	r3, r7, #4
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 800877c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008780:	f7f7 ff42 	bl	8000608 <__aeabi_dmul>
 8008784:	4602      	mov	r2, r0
 8008786:	460b      	mov	r3, r1
 8008788:	1d39      	adds	r1, r7, #4
 800878a:	6809      	ldr	r1, [r1, #0]
 800878c:	f601 3158 	addw	r1, r1, #2904	; 0xb58
 8008790:	e9c1 2300 	strd	r2, r3, [r1]

  // Product: '<S23>/y*cos'
  rtDW.ycos = rtDW.dEast * rtDW.SinCos_o2;
 8008794:	1d3b      	adds	r3, r7, #4
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 800879c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087a0:	1d3b      	adds	r3, r7, #4
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f603 3318 	addw	r3, r3, #2840	; 0xb18
 80087a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ac:	f7f7 ff2c 	bl	8000608 <__aeabi_dmul>
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	1d39      	adds	r1, r7, #4
 80087b6:	6809      	ldr	r1, [r1, #0]
 80087b8:	f501 6136 	add.w	r1, r1, #2912	; 0xb60
 80087bc:	e9c1 2300 	strd	r2, r3, [r1]

  // Sum: '<S23>/Sum3'
  rtDW.Py = rtDW.ycos - rtDW.xsin;
 80087c0:	1d3b      	adds	r3, r7, #4
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f503 6336 	add.w	r3, r3, #2912	; 0xb60
 80087c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087cc:	1d3b      	adds	r3, r7, #4
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 80087d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d8:	f7f7 fd5e 	bl	8000298 <__aeabi_dsub>
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	1d39      	adds	r1, r7, #4
 80087e2:	6809      	ldr	r1, [r1, #0]
 80087e4:	f601 3168 	addw	r1, r1, #2920	; 0xb68
 80087e8:	e9c1 2300 	strd	r2, r3, [r1]

  // DataTypeConversion: '<S2>/DataTypeConversion_Enable1' incorporates:
  //   Inport: '<Root>/AhrsFlag'

  rtDW.DataTypeConversion_Enable1 = (rtU.AhrsFlag != 0.0);
 80087ec:	1d3b      	adds	r3, r7, #4
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 80087f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087f8:	2301      	movs	r3, #1
 80087fa:	461e      	mov	r6, r3
 80087fc:	f04f 0200 	mov.w	r2, #0
 8008800:	f04f 0300 	mov.w	r3, #0
 8008804:	f7f8 f968 	bl	8000ad8 <__aeabi_dcmpeq>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d001      	beq.n	8008812 <_ZN27positionEstimatorModelClass4stepEv+0xef2>
 800880e:	2300      	movs	r3, #0
 8008810:	461e      	mov	r6, r3
 8008812:	b2f3      	uxtb	r3, r6
 8008814:	461a      	mov	r2, r3
 8008816:	1d3b      	adds	r3, r7, #4
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f883 2c3e 	strb.w	r2, [r3, #3134]	; 0xc3e

  // Outputs for Enabled SubSystem: '<S2>/Correct1' incorporates:
  //   EnablePort: '<S13>/Enable'

  if (rtDW.DataTypeConversion_Enable1) {
 800881e:	1d3b      	adds	r3, r7, #4
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f893 3c3e 	ldrb.w	r3, [r3, #3134]	; 0xc3e
 8008826:	2b00      	cmp	r3, #0
 8008828:	f000 8614 	beq.w	8009454 <_ZN27positionEstimatorModelClass4stepEv+0x1b34>
    // DataStoreRead: '<S13>/Data Store ReadX'
    for (i = 0; i < 6; i++) {
 800882c:	2300      	movs	r3, #0
 800882e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008832:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008836:	2b05      	cmp	r3, #5
 8008838:	dc18      	bgt.n	800886c <_ZN27positionEstimatorModelClass4stepEv+0xf4c>
      rtDW.DataStoreReadX_p[i] = rtDW.x_p[i];
 800883a:	1d3b      	adds	r3, r7, #4
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008842:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008846:	00db      	lsls	r3, r3, #3
 8008848:	4413      	add	r3, r2
 800884a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884e:	1d39      	adds	r1, r7, #4
 8008850:	6808      	ldr	r0, [r1, #0]
 8008852:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 8008856:	3192      	adds	r1, #146	; 0x92
 8008858:	00c9      	lsls	r1, r1, #3
 800885a:	4401      	add	r1, r0
 800885c:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 6; i++) {
 8008860:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008864:	3301      	adds	r3, #1
 8008866:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800886a:	e7e2      	b.n	8008832 <_ZN27positionEstimatorModelClass4stepEv+0xf12>
    // SignalConversion generated from: '<S17>/ SFunction ' incorporates:
    //   Inport: '<Root>/ax'
    //   Inport: '<Root>/ay'
    //   MATLAB Function: '<S13>/Correct'

    rtDW.TmpSignalConversionAtSFunctio_i[0] = rtU.ax;
 800886c:	1d3b      	adds	r3, r7, #4
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f603 4358 	addw	r3, r3, #3160	; 0xc58
 8008874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008878:	1d39      	adds	r1, r7, #4
 800887a:	6809      	ldr	r1, [r1, #0]
 800887c:	f501 6198 	add.w	r1, r1, #1216	; 0x4c0
 8008880:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.TmpSignalConversionAtSFunctio_i[1] = rtU.ay;
 8008884:	1d3b      	adds	r3, r7, #4
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 800888c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008890:	1d39      	adds	r1, r7, #4
 8008892:	6809      	ldr	r1, [r1, #0]
 8008894:	f501 6199 	add.w	r1, r1, #1224	; 0x4c8
 8008898:	e9c1 2300 	strd	r2, r3, [r1]

    // MATLAB Function: '<S13>/Correct' incorporates:
    //   Constant: '<S2>/BlockOrdering'

    rtDW.blockOrdering_f = rtP.BlockOrdering_Value;
 800889c:	4b39      	ldr	r3, [pc, #228]	; (8008984 <_ZN27positionEstimatorModelClass4stepEv+0x1064>)
 800889e:	f893 23e5 	ldrb.w	r2, [r3, #997]	; 0x3e5
 80088a2:	1d3b      	adds	r3, r7, #4
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44
    blockOrdering = rtDW.blockOrdering_f;
 80088aa:	1d3b      	adds	r3, r7, #4
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f893 3c44 	ldrb.w	r3, [r3, #3140]	; 0xc44
 80088b2:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering_f = blockOrdering;
 80088b6:	1d3b      	adds	r3, r7, #4
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 80088be:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44
    for (i = 0; i < 36; i++) {
 80088c2:	2300      	movs	r3, #0
 80088c4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80088c8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80088cc:	2b23      	cmp	r3, #35	; 0x23
 80088ce:	dc32      	bgt.n	8008936 <_ZN27positionEstimatorModelClass4stepEv+0x1016>
      // DataStoreRead: '<S13>/Data Store ReadP'
      rtDW.P_k[i] = rtDW.P_n_c[i];
 80088d0:	1d3b      	adds	r3, r7, #4
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80088d8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80088dc:	00db      	lsls	r3, r3, #3
 80088de:	4413      	add	r3, r2
 80088e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e4:	1d39      	adds	r1, r7, #4
 80088e6:	6808      	ldr	r0, [r1, #0]
 80088e8:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 80088ec:	31a0      	adds	r1, #160	; 0xa0
 80088ee:	00c9      	lsls	r1, r1, #3
 80088f0:	4401      	add	r1, r0
 80088f2:	e9c1 2300 	strd	r2, r3, [r1]

      // MATLAB Function: '<S13>/Correct'
      u = rtDW.P_k[i];
 80088f6:	1d3b      	adds	r3, r7, #4
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80088fe:	33a0      	adds	r3, #160	; 0xa0
 8008900:	00db      	lsls	r3, r3, #3
 8008902:	4413      	add	r3, r2
 8008904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008908:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800890c:	e9c1 2300 	strd	r2, r3, [r1]
      rtDW.P_k[i] = u;
 8008910:	1d3b      	adds	r3, r7, #4
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008918:	33a0      	adds	r3, #160	; 0xa0
 800891a:	00db      	lsls	r3, r3, #3
 800891c:	18d1      	adds	r1, r2, r3
 800891e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008926:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 36; i++) {
 800892a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800892e:	3301      	adds	r3, #1
 8008930:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008934:	e7c8      	b.n	80088c8 <_ZN27positionEstimatorModelClass4stepEv+0xfa8>
    }

    // MATLAB Function: '<S13>/Correct' incorporates:
    //   Constant: '<S2>/R1'

    for (r1 = 0; r1 < 6; r1++) {
 8008936:	2300      	movs	r3, #0
 8008938:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800893c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008940:	2b05      	cmp	r3, #5
 8008942:	f300 80c2 	bgt.w	8008aca <_ZN27positionEstimatorModelClass4stepEv+0x11aa>
      for (i = 0; i < 6; i++) {
 8008946:	2300      	movs	r3, #0
 8008948:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800894c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008950:	2b05      	cmp	r3, #5
 8008952:	dc1b      	bgt.n	800898c <_ZN27positionEstimatorModelClass4stepEv+0x106c>
        imvec[i] = rtDW.DataStoreReadX_p[i];
 8008954:	1d3b      	adds	r3, r7, #4
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800895c:	3392      	adds	r3, #146	; 0x92
 800895e:	00db      	lsls	r3, r3, #3
 8008960:	4413      	add	r3, r2
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	f507 60e6 	add.w	r0, r7, #1840	; 0x730
 800896a:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 800896e:	00c9      	lsls	r1, r1, #3
 8008970:	4401      	add	r1, r0
 8008972:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = 0; i < 6; i++) {
 8008976:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800897a:	3301      	adds	r3, #1
 800897c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008980:	e7e4      	b.n	800894c <_ZN27positionEstimatorModelClass4stepEv+0x102c>
 8008982:	bf00      	nop
 8008984:	200002b0 	.word	0x200002b0
 8008988:	3ff00000 	.word	0x3ff00000
      }

      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_p[r1]);
 800898c:	1d3b      	adds	r3, r7, #4
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008994:	3392      	adds	r3, #146	; 0x92
 8008996:	00db      	lsls	r3, r3, #3
 8008998:	4413      	add	r3, r2
 800899a:	ed93 7b00 	vldr	d7, [r3]
 800899e:	eeb0 0a47 	vmov.f32	s0, s14
 80089a2:	eef0 0a67 	vmov.f32	s1, s15
 80089a6:	f7fd fd54 	bl	8006452 <_ZSt3absd>
 80089aa:	ec51 0b10 	vmov	r0, r1, d0
 80089ae:	f04f 0200 	mov.w	r2, #0
 80089b2:	4bd1      	ldr	r3, [pc, #836]	; (8008cf8 <_ZN27positionEstimatorModelClass4stepEv+0x13d8>)
 80089b4:	f7f7 fe28 	bl	8000608 <__aeabi_dmul>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 80089c0:	e9c1 2300 	strd	r2, r3, [r1]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 80089c4:	f04f 0200 	mov.w	r2, #0
 80089c8:	4bcb      	ldr	r3, [pc, #812]	; (8008cf8 <_ZN27positionEstimatorModelClass4stepEv+0x13d8>)
 80089ca:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 80089ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089d2:	f7f8 f88b 	bl	8000aec <__aeabi_dcmplt>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d108      	bne.n	80089ee <_ZN27positionEstimatorModelClass4stepEv+0x10ce>
 80089dc:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80089e0:	ed93 0b00 	vldr	d0, [r3]
 80089e4:	f7fd fdf8 	bl	80065d8 <rtIsNaN>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <_ZN27positionEstimatorModelClass4stepEv+0x10d2>
 80089ee:	2301      	movs	r3, #1
 80089f0:	e000      	b.n	80089f4 <_ZN27positionEstimatorModelClass4stepEv+0x10d4>
 80089f2:	2300      	movs	r3, #0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d006      	beq.n	8008a06 <_ZN27positionEstimatorModelClass4stepEv+0x10e6>
        epsilon = 1.4901161193847656E-8;
 80089f8:	f04f 0200 	mov.w	r2, #0
 80089fc:	4bbe      	ldr	r3, [pc, #760]	; (8008cf8 <_ZN27positionEstimatorModelClass4stepEv+0x13d8>)
 80089fe:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8008a02:	e9c1 2300 	strd	r2, r3, [r1]
      }

      imvec[r1] = rtDW.DataStoreReadX_p[r1] + epsilon;
 8008a06:	1d3b      	adds	r3, r7, #4
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008a0e:	3392      	adds	r3, #146	; 0x92
 8008a10:	00db      	lsls	r3, r3, #3
 8008a12:	4413      	add	r3, r2
 8008a14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a18:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a20:	f7f7 fc3c 	bl	800029c <__adddf3>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	f507 60e6 	add.w	r0, r7, #1840	; 0x730
 8008a2c:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	; 0x8c4
 8008a30:	00c9      	lsls	r1, r1, #3
 8008a32:	4401      	add	r1, r0
 8008a34:	e9c1 2300 	strd	r2, r3, [r1]
      dHdx[r1 << 1] = (imvec[4] - rtDW.DataStoreReadX_p[4]) / epsilon;
 8008a38:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8008a3c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8008a40:	1d3b      	adds	r3, r7, #4
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8008a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4c:	f7f7 fc24 	bl	8000298 <__aeabi_dsub>
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	4610      	mov	r0, r2
 8008a56:	4619      	mov	r1, r3
 8008a58:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008a5c:	005e      	lsls	r6, r3, #1
 8008a5e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a66:	f7f7 fef9 	bl	800085c <__aeabi_ddiv>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	f507 60f8 	add.w	r0, r7, #1984	; 0x7c0
 8008a72:	00f1      	lsls	r1, r6, #3
 8008a74:	4401      	add	r1, r0
 8008a76:	e9c1 2300 	strd	r2, r3, [r1]
      dHdx[(r1 << 1) + 1] = (imvec[5] - rtDW.DataStoreReadX_p[5]) / epsilon;
 8008a7a:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8008a7e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8008a82:	1d3b      	adds	r3, r7, #4
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8008a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8e:	f7f7 fc03 	bl	8000298 <__aeabi_dsub>
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	4610      	mov	r0, r2
 8008a98:	4619      	mov	r1, r3
 8008a9a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008a9e:	005b      	lsls	r3, r3, #1
 8008aa0:	1c5e      	adds	r6, r3, #1
 8008aa2:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aaa:	f7f7 fed7 	bl	800085c <__aeabi_ddiv>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	f507 60f8 	add.w	r0, r7, #1984	; 0x7c0
 8008ab6:	00f1      	lsls	r1, r6, #3
 8008ab8:	4401      	add	r1, r0
 8008aba:	e9c1 2300 	strd	r2, r3, [r1]
    for (r1 = 0; r1 < 6; r1++) {
 8008abe:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008ac8:	e738      	b.n	800893c <_ZN27positionEstimatorModelClass4stepEv+0x101c>
    }

    for (r1 = 0; r1 < 6; r1++) {
 8008aca:	2300      	movs	r3, #0
 8008acc:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008ad0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008ad4:	2b05      	cmp	r3, #5
 8008ad6:	f300 808f 	bgt.w	8008bf8 <_ZN27positionEstimatorModelClass4stepEv+0x12d8>
      for (i = 0; i < 2; i++) {
 8008ada:	2300      	movs	r3, #0
 8008adc:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008ae0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	f300 8081 	bgt.w	8008bec <_ZN27positionEstimatorModelClass4stepEv+0x12cc>
        Pxy[r1 + 6 * i] = 0.0;
 8008aea:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008aee:	4613      	mov	r3, r2
 8008af0:	005b      	lsls	r3, r3, #1
 8008af2:	4413      	add	r3, r2
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	461a      	mov	r2, r3
 8008af8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008afc:	4413      	add	r3, r2
 8008afe:	00db      	lsls	r3, r3, #3
 8008b00:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008b04:	4413      	add	r3, r2
 8008b06:	f1a3 0190 	sub.w	r1, r3, #144	; 0x90
 8008b0a:	f04f 0200 	mov.w	r2, #0
 8008b0e:	f04f 0300 	mov.w	r3, #0
 8008b12:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 8008b16:	2300      	movs	r3, #0
 8008b18:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008b1c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008b20:	2b05      	cmp	r3, #5
 8008b22:	dc5d      	bgt.n	8008be0 <_ZN27positionEstimatorModelClass4stepEv+0x12c0>
          u = Pxy[6 * i + r1];
 8008b24:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008b28:	4613      	mov	r3, r2
 8008b2a:	005b      	lsls	r3, r3, #1
 8008b2c:	4413      	add	r3, r2
 8008b2e:	005b      	lsls	r3, r3, #1
 8008b30:	461a      	mov	r2, r3
 8008b32:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008b36:	4413      	add	r3, r2
 8008b38:	00db      	lsls	r3, r3, #3
 8008b3a:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008b3e:	4413      	add	r3, r2
 8008b40:	3b90      	subs	r3, #144	; 0x90
 8008b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b46:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008b4a:	e9c1 2300 	strd	r2, r3, [r1]
          u += rtDW.P_k[6 * k + r1] * dHdx[(k << 1) + i];
 8008b4e:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8008b52:	4613      	mov	r3, r2
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	4413      	add	r3, r2
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008b60:	4413      	add	r3, r2
 8008b62:	1d3a      	adds	r2, r7, #4
 8008b64:	6812      	ldr	r2, [r2, #0]
 8008b66:	33a0      	adds	r3, #160	; 0xa0
 8008b68:	00db      	lsls	r3, r3, #3
 8008b6a:	4413      	add	r3, r2
 8008b6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b70:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008b74:	005a      	lsls	r2, r3, #1
 8008b76:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8008b80:	00db      	lsls	r3, r3, #3
 8008b82:	4413      	add	r3, r2
 8008b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b88:	f7f7 fd3e 	bl	8000608 <__aeabi_dmul>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008b94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b98:	f7f7 fb80 	bl	800029c <__adddf3>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008ba4:	e9c1 2300 	strd	r2, r3, [r1]
          Pxy[r1 + 6 * i] = u;
 8008ba8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008bac:	4613      	mov	r3, r2
 8008bae:	005b      	lsls	r3, r3, #1
 8008bb0:	4413      	add	r3, r2
 8008bb2:	005b      	lsls	r3, r3, #1
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008bba:	4413      	add	r3, r2
 8008bbc:	00db      	lsls	r3, r3, #3
 8008bbe:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008bc2:	4413      	add	r3, r2
 8008bc4:	f1a3 0190 	sub.w	r1, r3, #144	; 0x90
 8008bc8:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd0:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 8008bd4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008bd8:	3301      	adds	r3, #1
 8008bda:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008bde:	e79d      	b.n	8008b1c <_ZN27positionEstimatorModelClass4stepEv+0x11fc>
      for (i = 0; i < 2; i++) {
 8008be0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008be4:	3301      	adds	r3, #1
 8008be6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008bea:	e779      	b.n	8008ae0 <_ZN27positionEstimatorModelClass4stepEv+0x11c0>
    for (r1 = 0; r1 < 6; r1++) {
 8008bec:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008bf6:	e76b      	b.n	8008ad0 <_ZN27positionEstimatorModelClass4stepEv+0x11b0>
        }
      }
    }

    for (r1 = 0; r1 < 2; r1++) {
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008bfe:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	f300 80eb 	bgt.w	8008dde <_ZN27positionEstimatorModelClass4stepEv+0x14be>
      for (i = 0; i < 6; i++) {
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008c0e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008c12:	2b05      	cmp	r3, #5
 8008c14:	dc72      	bgt.n	8008cfc <_ZN27positionEstimatorModelClass4stepEv+0x13dc>
        gain[r1 + (i << 1)] = 0.0;
 8008c16:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008c1a:	005a      	lsls	r2, r3, #1
 8008c1c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008c20:	4413      	add	r3, r2
 8008c22:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008c26:	00db      	lsls	r3, r3, #3
 8008c28:	18d1      	adds	r1, r2, r3
 8008c2a:	f04f 0200 	mov.w	r2, #0
 8008c2e:	f04f 0300 	mov.w	r3, #0
 8008c32:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 8008c36:	2300      	movs	r3, #0
 8008c38:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008c3c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008c40:	2b05      	cmp	r3, #5
 8008c42:	dc52      	bgt.n	8008cea <_ZN27positionEstimatorModelClass4stepEv+0x13ca>
          u = gain[(i << 1) + r1];
 8008c44:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008c48:	005a      	lsls	r2, r3, #1
 8008c4a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008c4e:	4413      	add	r3, r2
 8008c50:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008c54:	00db      	lsls	r3, r3, #3
 8008c56:	4413      	add	r3, r2
 8008c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5c:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008c60:	e9c1 2300 	strd	r2, r3, [r1]
          u += dHdx[(k << 1) + r1] * rtDW.P_k[6 * i + k];
 8008c64:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008c68:	005a      	lsls	r2, r3, #1
 8008c6a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008c6e:	4413      	add	r3, r2
 8008c70:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8008c74:	00db      	lsls	r3, r3, #3
 8008c76:	4413      	add	r3, r2
 8008c78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c7c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008c80:	4613      	mov	r3, r2
 8008c82:	005b      	lsls	r3, r3, #1
 8008c84:	4413      	add	r3, r2
 8008c86:	005b      	lsls	r3, r3, #1
 8008c88:	461a      	mov	r2, r3
 8008c8a:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008c8e:	4413      	add	r3, r2
 8008c90:	1d3a      	adds	r2, r7, #4
 8008c92:	6812      	ldr	r2, [r2, #0]
 8008c94:	33a0      	adds	r3, #160	; 0xa0
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	4413      	add	r3, r2
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	f7f7 fcb3 	bl	8000608 <__aeabi_dmul>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008caa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cae:	f7f7 faf5 	bl	800029c <__adddf3>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008cba:	e9c1 2300 	strd	r2, r3, [r1]
          gain[r1 + (i << 1)] = u;
 8008cbe:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008cc2:	005a      	lsls	r2, r3, #1
 8008cc4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008cc8:	4413      	add	r3, r2
 8008cca:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008cce:	00db      	lsls	r3, r3, #3
 8008cd0:	18d1      	adds	r1, r2, r3
 8008cd2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cda:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 8008cde:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008ce8:	e7a8      	b.n	8008c3c <_ZN27positionEstimatorModelClass4stepEv+0x131c>
      for (i = 0; i < 6; i++) {
 8008cea:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008cee:	3301      	adds	r3, #1
 8008cf0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008cf4:	e78b      	b.n	8008c0e <_ZN27positionEstimatorModelClass4stepEv+0x12ee>
 8008cf6:	bf00      	nop
 8008cf8:	3e500000 	.word	0x3e500000
        }
      }

      for (i = 0; i < 2; i++) {
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008d02:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	dc63      	bgt.n	8008dd2 <_ZN27positionEstimatorModelClass4stepEv+0x14b2>
        u = 0.0;
 8008d0a:	f04f 0200 	mov.w	r2, #0
 8008d0e:	f04f 0300 	mov.w	r3, #0
 8008d12:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008d16:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008d20:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008d24:	2b05      	cmp	r3, #5
 8008d26:	dc2d      	bgt.n	8008d84 <_ZN27positionEstimatorModelClass4stepEv+0x1464>
          u += gain[(k << 1) + r1] * dHdx[(k << 1) + i];
 8008d28:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008d2c:	005a      	lsls	r2, r3, #1
 8008d2e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008d32:	4413      	add	r3, r2
 8008d34:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008d38:	00db      	lsls	r3, r3, #3
 8008d3a:	4413      	add	r3, r2
 8008d3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d40:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008d44:	005a      	lsls	r2, r3, #1
 8008d46:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d4a:	4413      	add	r3, r2
 8008d4c:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8008d50:	00db      	lsls	r3, r3, #3
 8008d52:	4413      	add	r3, r2
 8008d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d58:	f7f7 fc56 	bl	8000608 <__aeabi_dmul>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008d64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d68:	f7f7 fa98 	bl	800029c <__adddf3>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	460b      	mov	r3, r1
 8008d70:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8008d74:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 8008d78:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008d82:	e7cd      	b.n	8008d20 <_ZN27positionEstimatorModelClass4stepEv+0x1400>
        }

        Pyy[r1 + (i << 1)] = rtP.R1_Value[(i << 1) + r1] + u;
 8008d84:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d88:	005a      	lsls	r2, r3, #1
 8008d8a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008d8e:	4413      	add	r3, r2
 8008d90:	4aad      	ldr	r2, [pc, #692]	; (8009048 <_ZN27positionEstimatorModelClass4stepEv+0x1728>)
 8008d92:	3336      	adds	r3, #54	; 0x36
 8008d94:	00db      	lsls	r3, r3, #3
 8008d96:	4413      	add	r3, r2
 8008d98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d9c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008da0:	005a      	lsls	r2, r3, #1
 8008da2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008da6:	18d6      	adds	r6, r2, r3
 8008da8:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db0:	f7f7 fa74 	bl	800029c <__adddf3>
 8008db4:	4602      	mov	r2, r0
 8008db6:	460b      	mov	r3, r1
 8008db8:	00f1      	lsls	r1, r6, #3
 8008dba:	f507 600d 	add.w	r0, r7, #2256	; 0x8d0
 8008dbe:	4401      	add	r1, r0
 8008dc0:	39b0      	subs	r1, #176	; 0xb0
 8008dc2:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = 0; i < 2; i++) {
 8008dc6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008dca:	3301      	adds	r3, #1
 8008dcc:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008dd0:	e797      	b.n	8008d02 <_ZN27positionEstimatorModelClass4stepEv+0x13e2>
    for (r1 = 0; r1 < 2; r1++) {
 8008dd2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008ddc:	e70f      	b.n	8008bfe <_ZN27positionEstimatorModelClass4stepEv+0x12de>
      }
    }

    if (std::abs(Pyy[1]) > std::abs(Pyy[0])) {
 8008dde:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8008de2:	ed93 7b00 	vldr	d7, [r3]
 8008de6:	eeb0 0a47 	vmov.f32	s0, s14
 8008dea:	eef0 0a67 	vmov.f32	s1, s15
 8008dee:	f7fd fb30 	bl	8006452 <_ZSt3absd>
 8008df2:	ec59 8b10 	vmov	r8, r9, d0
 8008df6:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8008dfa:	ed93 7b00 	vldr	d7, [r3]
 8008dfe:	eeb0 0a47 	vmov.f32	s0, s14
 8008e02:	eef0 0a67 	vmov.f32	s1, s15
 8008e06:	f7fd fb24 	bl	8006452 <_ZSt3absd>
 8008e0a:	ec52 1b10 	vmov	r1, r2, d0
 8008e0e:	2301      	movs	r3, #1
 8008e10:	461e      	mov	r6, r3
 8008e12:	4613      	mov	r3, r2
 8008e14:	460a      	mov	r2, r1
 8008e16:	4640      	mov	r0, r8
 8008e18:	4649      	mov	r1, r9
 8008e1a:	f7f7 fe85 	bl	8000b28 <__aeabi_dcmpgt>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <_ZN27positionEstimatorModelClass4stepEv+0x1508>
 8008e24:	2300      	movs	r3, #0
 8008e26:	461e      	mov	r6, r3
 8008e28:	b2f3      	uxtb	r3, r6
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d006      	beq.n	8008e3c <_ZN27positionEstimatorModelClass4stepEv+0x151c>
      r1 = 1;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
      i = 0;
 8008e34:	2300      	movs	r3, #0
 8008e36:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008e3a:	e005      	b.n	8008e48 <_ZN27positionEstimatorModelClass4stepEv+0x1528>
    } else {
      r1 = 0;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
      i = 1;
 8008e42:	2301      	movs	r3, #1
 8008e44:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    }

    epsilon = Pyy[i] / Pyy[r1];
 8008e48:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008e4c:	00db      	lsls	r3, r3, #3
 8008e4e:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008e52:	4413      	add	r3, r2
 8008e54:	3bb0      	subs	r3, #176	; 0xb0
 8008e56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e5a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008e5e:	00db      	lsls	r3, r3, #3
 8008e60:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008e64:	4413      	add	r3, r2
 8008e66:	3bb0      	subs	r3, #176	; 0xb0
 8008e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6c:	f7f7 fcf6 	bl	800085c <__aeabi_ddiv>
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8008e78:	e9c1 2300 	strd	r2, r3, [r1]
    a22 = Pyy[i + 2] - Pyy[r1 + 2] * epsilon;
 8008e7c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008e80:	3302      	adds	r3, #2
 8008e82:	00db      	lsls	r3, r3, #3
 8008e84:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008e88:	4413      	add	r3, r2
 8008e8a:	3bb0      	subs	r3, #176	; 0xb0
 8008e8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e90:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008e94:	3302      	adds	r3, #2
 8008e96:	00db      	lsls	r3, r3, #3
 8008e98:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008e9c:	4413      	add	r3, r2
 8008e9e:	3bb0      	subs	r3, #176	; 0xb0
 8008ea0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ea4:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eac:	f7f7 fbac 	bl	8000608 <__aeabi_dmul>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4640      	mov	r0, r8
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	f7f7 f9ee 	bl	8000298 <__aeabi_dsub>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 8008ec4:	e9c1 2300 	strd	r2, r3, [r1]
    for (k = 0; k < 6; k++) {
 8008ec8:	2300      	movs	r3, #0
 8008eca:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008ece:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008ed2:	2b05      	cmp	r3, #5
 8008ed4:	f300 80ba 	bgt.w	800904c <_ZN27positionEstimatorModelClass4stepEv+0x172c>
      gain[k + 6 * r1] = Pxy[k] / Pyy[r1];
 8008ed8:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008edc:	00db      	lsls	r3, r3, #3
 8008ede:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008ee2:	4413      	add	r3, r2
 8008ee4:	3b90      	subs	r3, #144	; 0x90
 8008ee6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008eea:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008eee:	00db      	lsls	r3, r3, #3
 8008ef0:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008ef4:	4413      	add	r3, r2
 8008ef6:	3bb0      	subs	r3, #176	; 0xb0
 8008ef8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008efc:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8008f00:	4613      	mov	r3, r2
 8008f02:	005b      	lsls	r3, r3, #1
 8008f04:	4413      	add	r3, r2
 8008f06:	005b      	lsls	r3, r3, #1
 8008f08:	461a      	mov	r2, r3
 8008f0a:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008f0e:	18d6      	adds	r6, r2, r3
 8008f10:	4642      	mov	r2, r8
 8008f12:	464b      	mov	r3, r9
 8008f14:	f7f7 fca2 	bl	800085c <__aeabi_ddiv>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	f507 60ec 	add.w	r0, r7, #1888	; 0x760
 8008f20:	00f1      	lsls	r1, r6, #3
 8008f22:	4401      	add	r1, r0
 8008f24:	e9c1 2300 	strd	r2, r3, [r1]
      gain[k + 6 * i] = (Pxy[k + 6] - gain[6 * r1 + k] * Pyy[r1 + 2]) / a22;
 8008f28:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008f2c:	3306      	adds	r3, #6
 8008f2e:	00db      	lsls	r3, r3, #3
 8008f30:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008f34:	4413      	add	r3, r2
 8008f36:	3b90      	subs	r3, #144	; 0x90
 8008f38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f3c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8008f40:	4613      	mov	r3, r2
 8008f42:	005b      	lsls	r3, r3, #1
 8008f44:	4413      	add	r3, r2
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	461a      	mov	r2, r3
 8008f4a:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008f4e:	4413      	add	r3, r2
 8008f50:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008f54:	00db      	lsls	r3, r3, #3
 8008f56:	4413      	add	r3, r2
 8008f58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f5c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008f60:	3302      	adds	r3, #2
 8008f62:	00db      	lsls	r3, r3, #3
 8008f64:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008f68:	4413      	add	r3, r2
 8008f6a:	3bb0      	subs	r3, #176	; 0xb0
 8008f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f70:	f7f7 fb4a 	bl	8000608 <__aeabi_dmul>
 8008f74:	4602      	mov	r2, r0
 8008f76:	460b      	mov	r3, r1
 8008f78:	4640      	mov	r0, r8
 8008f7a:	4649      	mov	r1, r9
 8008f7c:	f7f7 f98c 	bl	8000298 <__aeabi_dsub>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	4610      	mov	r0, r2
 8008f86:	4619      	mov	r1, r3
 8008f88:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	005b      	lsls	r3, r3, #1
 8008f90:	4413      	add	r3, r2
 8008f92:	005b      	lsls	r3, r3, #1
 8008f94:	461a      	mov	r2, r3
 8008f96:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008f9a:	18d6      	adds	r6, r2, r3
 8008f9c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8008fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa4:	f7f7 fc5a 	bl	800085c <__aeabi_ddiv>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
 8008fac:	f507 60ec 	add.w	r0, r7, #1888	; 0x760
 8008fb0:	00f1      	lsls	r1, r6, #3
 8008fb2:	4401      	add	r1, r0
 8008fb4:	e9c1 2300 	strd	r2, r3, [r1]
      gain[k + 6 * r1] -= gain[6 * i + k] * epsilon;
 8008fb8:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	005b      	lsls	r3, r3, #1
 8008fc0:	4413      	add	r3, r2
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008fca:	4413      	add	r3, r2
 8008fcc:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008fd0:	00db      	lsls	r3, r3, #3
 8008fd2:	4413      	add	r3, r2
 8008fd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fd8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008fdc:	4613      	mov	r3, r2
 8008fde:	005b      	lsls	r3, r3, #1
 8008fe0:	4413      	add	r3, r2
 8008fe2:	005b      	lsls	r3, r3, #1
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008fea:	4413      	add	r3, r2
 8008fec:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008ff0:	00db      	lsls	r3, r3, #3
 8008ff2:	4413      	add	r3, r2
 8008ff4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ff8:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009000:	f7f7 fb02 	bl	8000608 <__aeabi_dmul>
 8009004:	4602      	mov	r2, r0
 8009006:	460b      	mov	r3, r1
 8009008:	4610      	mov	r0, r2
 800900a:	4619      	mov	r1, r3
 800900c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009010:	4613      	mov	r3, r2
 8009012:	005b      	lsls	r3, r3, #1
 8009014:	4413      	add	r3, r2
 8009016:	005b      	lsls	r3, r3, #1
 8009018:	461a      	mov	r2, r3
 800901a:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800901e:	18d6      	adds	r6, r2, r3
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	4640      	mov	r0, r8
 8009026:	4649      	mov	r1, r9
 8009028:	f7f7 f936 	bl	8000298 <__aeabi_dsub>
 800902c:	4602      	mov	r2, r0
 800902e:	460b      	mov	r3, r1
 8009030:	f507 60ec 	add.w	r0, r7, #1888	; 0x760
 8009034:	00f1      	lsls	r1, r6, #3
 8009036:	4401      	add	r1, r0
 8009038:	e9c1 2300 	strd	r2, r3, [r1]
    for (k = 0; k < 6; k++) {
 800903c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8009040:	3301      	adds	r3, #1
 8009042:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8009046:	e742      	b.n	8008ece <_ZN27positionEstimatorModelClass4stepEv+0x15ae>
 8009048:	200002b0 	.word	0x200002b0
    }

    a22 = rtDW.TmpSignalConversionAtSFunctio_i[0] - rtDW.DataStoreReadX_p[4];
 800904c:	1d3b      	adds	r3, r7, #4
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8009054:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009058:	1d3b      	adds	r3, r7, #4
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8009060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009064:	f7f7 f918 	bl	8000298 <__aeabi_dsub>
 8009068:	4602      	mov	r2, r0
 800906a:	460b      	mov	r3, r1
 800906c:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 8009070:	e9c1 2300 	strd	r2, r3, [r1]
    epsilon = rtDW.TmpSignalConversionAtSFunctio_i[1] - rtDW.DataStoreReadX_p[5];
 8009074:	1d3b      	adds	r3, r7, #4
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 800907c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009080:	1d3b      	adds	r3, r7, #4
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8009088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908c:	f7f7 f904 	bl	8000298 <__aeabi_dsub>
 8009090:	4602      	mov	r2, r0
 8009092:	460b      	mov	r3, r1
 8009094:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8009098:	e9c1 2300 	strd	r2, r3, [r1]
    for (r1 = 0; r1 < 6; r1++) {
 800909c:	2300      	movs	r3, #0
 800909e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80090a2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80090a6:	2b05      	cmp	r3, #5
 80090a8:	f300 8183 	bgt.w	80093b2 <_ZN27positionEstimatorModelClass4stepEv+0x1a92>
      u = gain[r1] * a22;
 80090ac:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80090b0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80090b4:	00db      	lsls	r3, r3, #3
 80090b6:	4413      	add	r3, r2
 80090b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090bc:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 80090c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090c4:	f7f7 faa0 	bl	8000608 <__aeabi_dmul>
 80090c8:	4602      	mov	r2, r0
 80090ca:	460b      	mov	r3, r1
 80090cc:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80090d0:	e9c1 2300 	strd	r2, r3, [r1]
      u += gain[r1 + 6] * epsilon;
 80090d4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80090d8:	3306      	adds	r3, #6
 80090da:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80090de:	00db      	lsls	r3, r3, #3
 80090e0:	4413      	add	r3, r2
 80090e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80090e6:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80090ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ee:	f7f7 fa8b 	bl	8000608 <__aeabi_dmul>
 80090f2:	4602      	mov	r2, r0
 80090f4:	460b      	mov	r3, r1
 80090f6:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80090fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090fe:	f7f7 f8cd 	bl	800029c <__adddf3>
 8009102:	4602      	mov	r2, r0
 8009104:	460b      	mov	r3, r1
 8009106:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800910a:	e9c1 2300 	strd	r2, r3, [r1]
      rtDW.xNew_n[r1] = rtDW.DataStoreReadX_p[r1] + u;
 800910e:	1d3b      	adds	r3, r7, #4
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009116:	3392      	adds	r3, #146	; 0x92
 8009118:	00db      	lsls	r3, r3, #3
 800911a:	4413      	add	r3, r2
 800911c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009120:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009128:	f7f7 f8b8 	bl	800029c <__adddf3>
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	1d39      	adds	r1, r7, #4
 8009132:	6808      	ldr	r0, [r1, #0]
 8009134:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	; 0x8c4
 8009138:	319a      	adds	r1, #154	; 0x9a
 800913a:	00c9      	lsls	r1, r1, #3
 800913c:	4401      	add	r1, r0
 800913e:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = 0; i < 6; i++) {
 8009142:	2300      	movs	r3, #0
 8009144:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009148:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800914c:	2b05      	cmp	r3, #5
 800914e:	f300 80ae 	bgt.w	80092ae <_ZN27positionEstimatorModelClass4stepEv+0x198e>
        gain_0[r1 + 6 * i] = 0.0;
 8009152:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009156:	4613      	mov	r3, r2
 8009158:	005b      	lsls	r3, r3, #1
 800915a:	4413      	add	r3, r2
 800915c:	005b      	lsls	r3, r3, #1
 800915e:	461a      	mov	r2, r3
 8009160:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009164:	4413      	add	r3, r2
 8009166:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800916a:	00db      	lsls	r3, r3, #3
 800916c:	18d1      	adds	r1, r2, r3
 800916e:	f04f 0200 	mov.w	r2, #0
 8009172:	f04f 0300 	mov.w	r3, #0
 8009176:	e9c1 2300 	strd	r2, r3, [r1]
        u = gain_0[6 * i + r1];
 800917a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800917e:	4613      	mov	r3, r2
 8009180:	005b      	lsls	r3, r3, #1
 8009182:	4413      	add	r3, r2
 8009184:	005b      	lsls	r3, r3, #1
 8009186:	461a      	mov	r2, r3
 8009188:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800918c:	4413      	add	r3, r2
 800918e:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009192:	00db      	lsls	r3, r3, #3
 8009194:	4413      	add	r3, r2
 8009196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919a:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800919e:	e9c1 2300 	strd	r2, r3, [r1]
        u += dHdx[i << 1] * gain[r1];
 80091a2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 80091ac:	00db      	lsls	r3, r3, #3
 80091ae:	4413      	add	r3, r2
 80091b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091b4:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80091b8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80091bc:	00db      	lsls	r3, r3, #3
 80091be:	4413      	add	r3, r2
 80091c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c4:	f7f7 fa20 	bl	8000608 <__aeabi_dmul>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80091d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091d4:	f7f7 f862 	bl	800029c <__adddf3>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80091e0:	e9c1 2300 	strd	r2, r3, [r1]
        gain_0[r1 + 6 * i] = u;
 80091e4:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80091e8:	4613      	mov	r3, r2
 80091ea:	005b      	lsls	r3, r3, #1
 80091ec:	4413      	add	r3, r2
 80091ee:	005b      	lsls	r3, r3, #1
 80091f0:	461a      	mov	r2, r3
 80091f2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80091f6:	4413      	add	r3, r2
 80091f8:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80091fc:	00db      	lsls	r3, r3, #3
 80091fe:	18d1      	adds	r1, r2, r3
 8009200:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009208:	e9c1 2300 	strd	r2, r3, [r1]
        u = gain_0[6 * i + r1];
 800920c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009210:	4613      	mov	r3, r2
 8009212:	005b      	lsls	r3, r3, #1
 8009214:	4413      	add	r3, r2
 8009216:	005b      	lsls	r3, r3, #1
 8009218:	461a      	mov	r2, r3
 800921a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800921e:	4413      	add	r3, r2
 8009220:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009224:	00db      	lsls	r3, r3, #3
 8009226:	4413      	add	r3, r2
 8009228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922c:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009230:	e9c1 2300 	strd	r2, r3, [r1]
        u += dHdx[(i << 1) + 1] * gain[r1 + 6];
 8009234:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009238:	005b      	lsls	r3, r3, #1
 800923a:	3301      	adds	r3, #1
 800923c:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8009240:	00db      	lsls	r3, r3, #3
 8009242:	4413      	add	r3, r2
 8009244:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009248:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800924c:	3306      	adds	r3, #6
 800924e:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8009252:	00db      	lsls	r3, r3, #3
 8009254:	4413      	add	r3, r2
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	f7f7 f9d5 	bl	8000608 <__aeabi_dmul>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800926a:	f7f7 f817 	bl	800029c <__adddf3>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009276:	e9c1 2300 	strd	r2, r3, [r1]
        gain_0[r1 + 6 * i] = u;
 800927a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800927e:	4613      	mov	r3, r2
 8009280:	005b      	lsls	r3, r3, #1
 8009282:	4413      	add	r3, r2
 8009284:	005b      	lsls	r3, r3, #1
 8009286:	461a      	mov	r2, r3
 8009288:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800928c:	4413      	add	r3, r2
 800928e:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009292:	00db      	lsls	r3, r3, #3
 8009294:	18d1      	adds	r1, r2, r3
 8009296:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800929a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929e:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = 0; i < 6; i++) {
 80092a2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80092a6:	3301      	adds	r3, #1
 80092a8:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80092ac:	e74c      	b.n	8009148 <_ZN27positionEstimatorModelClass4stepEv+0x1828>
      }

      for (i = 0; i < 6; i++) {
 80092ae:	2300      	movs	r3, #0
 80092b0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80092b4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80092b8:	2b05      	cmp	r3, #5
 80092ba:	dc74      	bgt.n	80093a6 <_ZN27positionEstimatorModelClass4stepEv+0x1a86>
        u = 0.0;
 80092bc:	f04f 0200 	mov.w	r2, #0
 80092c0:	f04f 0300 	mov.w	r3, #0
 80092c4:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80092c8:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 80092cc:	2300      	movs	r3, #0
 80092ce:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 80092d2:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80092d6:	2b05      	cmp	r3, #5
 80092d8:	dc36      	bgt.n	8009348 <_ZN27positionEstimatorModelClass4stepEv+0x1a28>
          u += gain_0[6 * k + r1] * rtDW.P_k[6 * i + k];
 80092da:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 80092de:	4613      	mov	r3, r2
 80092e0:	005b      	lsls	r3, r3, #1
 80092e2:	4413      	add	r3, r2
 80092e4:	005b      	lsls	r3, r3, #1
 80092e6:	461a      	mov	r2, r3
 80092e8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80092ec:	4413      	add	r3, r2
 80092ee:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80092f2:	00db      	lsls	r3, r3, #3
 80092f4:	4413      	add	r3, r2
 80092f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80092fa:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80092fe:	4613      	mov	r3, r2
 8009300:	005b      	lsls	r3, r3, #1
 8009302:	4413      	add	r3, r2
 8009304:	005b      	lsls	r3, r3, #1
 8009306:	461a      	mov	r2, r3
 8009308:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800930c:	4413      	add	r3, r2
 800930e:	1d3a      	adds	r2, r7, #4
 8009310:	6812      	ldr	r2, [r2, #0]
 8009312:	33a0      	adds	r3, #160	; 0xa0
 8009314:	00db      	lsls	r3, r3, #3
 8009316:	4413      	add	r3, r2
 8009318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931c:	f7f7 f974 	bl	8000608 <__aeabi_dmul>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800932c:	f7f6 ffb6 	bl	800029c <__adddf3>
 8009330:	4602      	mov	r2, r0
 8009332:	460b      	mov	r3, r1
 8009334:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009338:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 800933c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8009340:	3301      	adds	r3, #1
 8009342:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8009346:	e7c4      	b.n	80092d2 <_ZN27positionEstimatorModelClass4stepEv+0x19b2>
        }

        a_0[r1 + 6 * i] = rtDW.P_k[6 * i + r1] - u;
 8009348:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800934c:	4613      	mov	r3, r2
 800934e:	005b      	lsls	r3, r3, #1
 8009350:	4413      	add	r3, r2
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	461a      	mov	r2, r3
 8009356:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800935a:	4413      	add	r3, r2
 800935c:	1d3a      	adds	r2, r7, #4
 800935e:	6812      	ldr	r2, [r2, #0]
 8009360:	33a0      	adds	r3, #160	; 0xa0
 8009362:	00db      	lsls	r3, r3, #3
 8009364:	4413      	add	r3, r2
 8009366:	e9d3 0100 	ldrd	r0, r1, [r3]
 800936a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800936e:	4613      	mov	r3, r2
 8009370:	005b      	lsls	r3, r3, #1
 8009372:	4413      	add	r3, r2
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	461a      	mov	r2, r3
 8009378:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800937c:	18d6      	adds	r6, r2, r3
 800937e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009386:	f7f6 ff87 	bl	8000298 <__aeabi_dsub>
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8009392:	00f1      	lsls	r1, r6, #3
 8009394:	4401      	add	r1, r0
 8009396:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = 0; i < 6; i++) {
 800939a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800939e:	3301      	adds	r3, #1
 80093a0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80093a4:	e786      	b.n	80092b4 <_ZN27positionEstimatorModelClass4stepEv+0x1994>
    for (r1 = 0; r1 < 6; r1++) {
 80093a6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80093aa:	3301      	adds	r3, #1
 80093ac:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80093b0:	e677      	b.n	80090a2 <_ZN27positionEstimatorModelClass4stepEv+0x1782>
      }
    }

    for (i = 0; i < 36; i++) {
 80093b2:	2300      	movs	r3, #0
 80093b4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80093b8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80093bc:	2b23      	cmp	r3, #35	; 0x23
 80093be:	dc29      	bgt.n	8009414 <_ZN27positionEstimatorModelClass4stepEv+0x1af4>
      rtDW.P_k[i] = a_0[i];
 80093c0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80093c4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80093c8:	00db      	lsls	r3, r3, #3
 80093ca:	4413      	add	r3, r2
 80093cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d0:	1d39      	adds	r1, r7, #4
 80093d2:	6808      	ldr	r0, [r1, #0]
 80093d4:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 80093d8:	31a0      	adds	r1, #160	; 0xa0
 80093da:	00c9      	lsls	r1, r1, #3
 80093dc:	4401      	add	r1, r0
 80093de:	e9c1 2300 	strd	r2, r3, [r1]

      // DataStoreWrite: '<S13>/Data Store WriteP'
      rtDW.P_n_c[i] = rtDW.P_k[i];
 80093e2:	1d3b      	adds	r3, r7, #4
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80093ea:	33a0      	adds	r3, #160	; 0xa0
 80093ec:	00db      	lsls	r3, r3, #3
 80093ee:	4413      	add	r3, r2
 80093f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f4:	1d39      	adds	r1, r7, #4
 80093f6:	6808      	ldr	r0, [r1, #0]
 80093f8:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 80093fc:	f501 718c 	add.w	r1, r1, #280	; 0x118
 8009400:	00c9      	lsls	r1, r1, #3
 8009402:	4401      	add	r1, r0
 8009404:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 36; i++) {
 8009408:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800940c:	3301      	adds	r3, #1
 800940e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009412:	e7d1      	b.n	80093b8 <_ZN27positionEstimatorModelClass4stepEv+0x1a98>
    }

    // DataStoreWrite: '<S13>/Data Store WriteX'
    for (i = 0; i < 6; i++) {
 8009414:	2300      	movs	r3, #0
 8009416:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800941a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800941e:	2b05      	cmp	r3, #5
 8009420:	dc18      	bgt.n	8009454 <_ZN27positionEstimatorModelClass4stepEv+0x1b34>
      rtDW.x_p[i] = rtDW.xNew_n[i];
 8009422:	1d3b      	adds	r3, r7, #4
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800942a:	339a      	adds	r3, #154	; 0x9a
 800942c:	00db      	lsls	r3, r3, #3
 800942e:	4413      	add	r3, r2
 8009430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009434:	1d39      	adds	r1, r7, #4
 8009436:	6808      	ldr	r0, [r1, #0]
 8009438:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 800943c:	f501 719e 	add.w	r1, r1, #316	; 0x13c
 8009440:	00c9      	lsls	r1, r1, #3
 8009442:	4401      	add	r1, r0
 8009444:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 6; i++) {
 8009448:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800944c:	3301      	adds	r3, #1
 800944e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009452:	e7e2      	b.n	800941a <_ZN27positionEstimatorModelClass4stepEv+0x1afa>

  // Logic: '<Root>/Logical Operator' incorporates:
  //   Inport: '<Root>/GPS_switch'
  //   Inport: '<Root>/GpsFlag'

  rtDW.LogicalOperator = ((rtU.GPS_switch != 0.0) && (rtU.GpsFlag != 0.0));
 8009454:	1d3b      	adds	r3, r7, #4
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 800945c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009460:	f04f 0200 	mov.w	r2, #0
 8009464:	f04f 0300 	mov.w	r3, #0
 8009468:	f7f7 fb36 	bl	8000ad8 <__aeabi_dcmpeq>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d110      	bne.n	8009494 <_ZN27positionEstimatorModelClass4stepEv+0x1b74>
 8009472:	1d3b      	adds	r3, r7, #4
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
 800947a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800947e:	f04f 0200 	mov.w	r2, #0
 8009482:	f04f 0300 	mov.w	r3, #0
 8009486:	f7f7 fb27 	bl	8000ad8 <__aeabi_dcmpeq>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d101      	bne.n	8009494 <_ZN27positionEstimatorModelClass4stepEv+0x1b74>
 8009490:	2301      	movs	r3, #1
 8009492:	e000      	b.n	8009496 <_ZN27positionEstimatorModelClass4stepEv+0x1b76>
 8009494:	2300      	movs	r3, #0
 8009496:	461a      	mov	r2, r3
 8009498:	1d3b      	adds	r3, r7, #4
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f883 2c3f 	strb.w	r2, [r3, #3135]	; 0xc3f

  // Outputs for Enabled SubSystem: '<S2>/Correct2' incorporates:
  //   EnablePort: '<S14>/Enable'

  if (rtDW.LogicalOperator) {
 80094a0:	1d3b      	adds	r3, r7, #4
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f893 3c3f 	ldrb.w	r3, [r3, #3135]	; 0xc3f
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 83d7 	beq.w	8009c5c <_ZN27positionEstimatorModelClass4stepEv+0x233c>
    // DataStoreRead: '<S14>/Data Store ReadX'
    for (i = 0; i < 6; i++) {
 80094ae:	2300      	movs	r3, #0
 80094b0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80094b4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80094b8:	2b05      	cmp	r3, #5
 80094ba:	dc18      	bgt.n	80094ee <_ZN27positionEstimatorModelClass4stepEv+0x1bce>
      rtDW.DataStoreReadX_j[i] = rtDW.x_p[i];
 80094bc:	1d3b      	adds	r3, r7, #4
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80094c4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80094c8:	00db      	lsls	r3, r3, #3
 80094ca:	4413      	add	r3, r2
 80094cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d0:	1d39      	adds	r1, r7, #4
 80094d2:	6808      	ldr	r0, [r1, #0]
 80094d4:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 80094d8:	315e      	adds	r1, #94	; 0x5e
 80094da:	00c9      	lsls	r1, r1, #3
 80094dc:	4401      	add	r1, r0
 80094de:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 6; i++) {
 80094e2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80094e6:	3301      	adds	r3, #1
 80094e8:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80094ec:	e7e2      	b.n	80094b4 <_ZN27positionEstimatorModelClass4stepEv+0x1b94>
    // SignalConversion generated from: '<S18>/ SFunction ' incorporates:
    //   Inport: '<Root>/vx'
    //   Inport: '<Root>/vy'
    //   MATLAB Function: '<S14>/Correct'

    rtDW.TmpSignalConversionAtSFunctionI[0] = rtDW.Px;
 80094ee:	1d3b      	adds	r3, r7, #4
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
 80094f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fa:	1d39      	adds	r1, r7, #4
 80094fc:	6809      	ldr	r1, [r1, #0]
 80094fe:	e9c1 23c8 	strd	r2, r3, [r1, #800]	; 0x320
    rtDW.TmpSignalConversionAtSFunctionI[1] = rtDW.Py;
 8009502:	1d3b      	adds	r3, r7, #4
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 800950a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950e:	1d39      	adds	r1, r7, #4
 8009510:	6809      	ldr	r1, [r1, #0]
 8009512:	e9c1 23ca 	strd	r2, r3, [r1, #808]	; 0x328
    rtDW.TmpSignalConversionAtSFunctionI[2] = rtU.vx;
 8009516:	1d3b      	adds	r3, r7, #4
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f503 6349 	add.w	r3, r3, #3216	; 0xc90
 800951e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009522:	1d39      	adds	r1, r7, #4
 8009524:	6809      	ldr	r1, [r1, #0]
 8009526:	e9c1 23cc 	strd	r2, r3, [r1, #816]	; 0x330
    rtDW.TmpSignalConversionAtSFunctionI[3] = rtU.vy;
 800952a:	1d3b      	adds	r3, r7, #4
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f603 4398 	addw	r3, r3, #3224	; 0xc98
 8009532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009536:	1d39      	adds	r1, r7, #4
 8009538:	6809      	ldr	r1, [r1, #0]
 800953a:	e9c1 23ce 	strd	r2, r3, [r1, #824]	; 0x338

    // MATLAB Function: '<S14>/Correct'
    rtDW.blockOrdering = rtDW.blockOrdering_f;
 800953e:	1d3b      	adds	r3, r7, #4
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f893 2c44 	ldrb.w	r2, [r3, #3140]	; 0xc44
 8009546:	1d3b      	adds	r3, r7, #4
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f883 2c43 	strb.w	r2, [r3, #3139]	; 0xc43
    blockOrdering = rtDW.blockOrdering;
 800954e:	1d3b      	adds	r3, r7, #4
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f893 3c43 	ldrb.w	r3, [r3, #3139]	; 0xc43
 8009556:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering = blockOrdering;
 800955a:	1d3b      	adds	r3, r7, #4
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 8009562:	f883 2c43 	strb.w	r2, [r3, #3139]	; 0xc43
    for (i = 0; i < 36; i++) {
 8009566:	2300      	movs	r3, #0
 8009568:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800956c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009570:	2b23      	cmp	r3, #35	; 0x23
 8009572:	dc32      	bgt.n	80095da <_ZN27positionEstimatorModelClass4stepEv+0x1cba>
      // DataStoreRead: '<S14>/Data Store ReadP'
      rtDW.P_f[i] = rtDW.P_n_c[i];
 8009574:	1d3b      	adds	r3, r7, #4
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800957c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8009580:	00db      	lsls	r3, r3, #3
 8009582:	4413      	add	r3, r2
 8009584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009588:	1d39      	adds	r1, r7, #4
 800958a:	6808      	ldr	r0, [r1, #0]
 800958c:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 8009590:	316e      	adds	r1, #110	; 0x6e
 8009592:	00c9      	lsls	r1, r1, #3
 8009594:	4401      	add	r1, r0
 8009596:	e9c1 2300 	strd	r2, r3, [r1]

      // MATLAB Function: '<S14>/Correct'
      u = rtDW.P_f[i];
 800959a:	1d3b      	adds	r3, r7, #4
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80095a2:	336e      	adds	r3, #110	; 0x6e
 80095a4:	00db      	lsls	r3, r3, #3
 80095a6:	4413      	add	r3, r2
 80095a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ac:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80095b0:	e9c1 2300 	strd	r2, r3, [r1]
      rtDW.P_f[i] = u;
 80095b4:	1d3b      	adds	r3, r7, #4
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80095bc:	336e      	adds	r3, #110	; 0x6e
 80095be:	00db      	lsls	r3, r3, #3
 80095c0:	18d1      	adds	r1, r2, r3
 80095c2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80095c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ca:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 36; i++) {
 80095ce:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80095d2:	3301      	adds	r3, #1
 80095d4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80095d8:	e7c8      	b.n	800956c <_ZN27positionEstimatorModelClass4stepEv+0x1c4c>
    }

    // MATLAB Function: '<S14>/Correct' incorporates:
    //   Constant: '<S2>/R2'

    for (r1 = 0; r1 < 6; r1++) {
 80095da:	2300      	movs	r3, #0
 80095dc:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80095e0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80095e4:	2b05      	cmp	r3, #5
 80095e6:	f300 80f9 	bgt.w	80097dc <_ZN27positionEstimatorModelClass4stepEv+0x1ebc>
      for (i = 0; i < 6; i++) {
 80095ea:	2300      	movs	r3, #0
 80095ec:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80095f0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80095f4:	2b05      	cmp	r3, #5
 80095f6:	dc16      	bgt.n	8009626 <_ZN27positionEstimatorModelClass4stepEv+0x1d06>
        imvec[i] = rtDW.DataStoreReadX_j[i];
 80095f8:	1d3b      	adds	r3, r7, #4
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009600:	335e      	adds	r3, #94	; 0x5e
 8009602:	00db      	lsls	r3, r3, #3
 8009604:	4413      	add	r3, r2
 8009606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960a:	f507 60e6 	add.w	r0, r7, #1840	; 0x730
 800960e:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 8009612:	00c9      	lsls	r1, r1, #3
 8009614:	4401      	add	r1, r0
 8009616:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = 0; i < 6; i++) {
 800961a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800961e:	3301      	adds	r3, #1
 8009620:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009624:	e7e4      	b.n	80095f0 <_ZN27positionEstimatorModelClass4stepEv+0x1cd0>
      }

      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_j[r1]);
 8009626:	1d3b      	adds	r3, r7, #4
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800962e:	335e      	adds	r3, #94	; 0x5e
 8009630:	00db      	lsls	r3, r3, #3
 8009632:	4413      	add	r3, r2
 8009634:	ed93 7b00 	vldr	d7, [r3]
 8009638:	eeb0 0a47 	vmov.f32	s0, s14
 800963c:	eef0 0a67 	vmov.f32	s1, s15
 8009640:	f7fc ff07 	bl	8006452 <_ZSt3absd>
 8009644:	ec51 0b10 	vmov	r0, r1, d0
 8009648:	f04f 0200 	mov.w	r2, #0
 800964c:	4bc4      	ldr	r3, [pc, #784]	; (8009960 <_ZN27positionEstimatorModelClass4stepEv+0x2040>)
 800964e:	f7f6 ffdb 	bl	8000608 <__aeabi_dmul>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 800965a:	e9c1 2300 	strd	r2, r3, [r1]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 800965e:	f04f 0200 	mov.w	r2, #0
 8009662:	4bbf      	ldr	r3, [pc, #764]	; (8009960 <_ZN27positionEstimatorModelClass4stepEv+0x2040>)
 8009664:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8009668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800966c:	f7f7 fa3e 	bl	8000aec <__aeabi_dcmplt>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d108      	bne.n	8009688 <_ZN27positionEstimatorModelClass4stepEv+0x1d68>
 8009676:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800967a:	ed93 0b00 	vldr	d0, [r3]
 800967e:	f7fc ffab 	bl	80065d8 <rtIsNaN>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d001      	beq.n	800968c <_ZN27positionEstimatorModelClass4stepEv+0x1d6c>
 8009688:	2301      	movs	r3, #1
 800968a:	e000      	b.n	800968e <_ZN27positionEstimatorModelClass4stepEv+0x1d6e>
 800968c:	2300      	movs	r3, #0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d006      	beq.n	80096a0 <_ZN27positionEstimatorModelClass4stepEv+0x1d80>
        epsilon = 1.4901161193847656E-8;
 8009692:	f04f 0200 	mov.w	r2, #0
 8009696:	4bb2      	ldr	r3, [pc, #712]	; (8009960 <_ZN27positionEstimatorModelClass4stepEv+0x2040>)
 8009698:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 800969c:	e9c1 2300 	strd	r2, r3, [r1]
      }

      imvec[r1] = rtDW.DataStoreReadX_j[r1] + epsilon;
 80096a0:	1d3b      	adds	r3, r7, #4
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80096a8:	335e      	adds	r3, #94	; 0x5e
 80096aa:	00db      	lsls	r3, r3, #3
 80096ac:	4413      	add	r3, r2
 80096ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096b2:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80096b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ba:	f7f6 fdef 	bl	800029c <__adddf3>
 80096be:	4602      	mov	r2, r0
 80096c0:	460b      	mov	r3, r1
 80096c2:	f507 60e6 	add.w	r0, r7, #1840	; 0x730
 80096c6:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	; 0x8c4
 80096ca:	00c9      	lsls	r1, r1, #3
 80096cc:	4401      	add	r1, r0
 80096ce:	e9c1 2300 	strd	r2, r3, [r1]
      dHdx_0[r1 << 2] = (imvec[0] - rtDW.DataStoreReadX_j[0]) / epsilon;
 80096d2:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 80096d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096da:	1d3b      	adds	r3, r7, #4
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	e9d3 23bc 	ldrd	r2, r3, [r3, #752]	; 0x2f0
 80096e2:	f7f6 fdd9 	bl	8000298 <__aeabi_dsub>
 80096e6:	4602      	mov	r2, r0
 80096e8:	460b      	mov	r3, r1
 80096ea:	4610      	mov	r0, r2
 80096ec:	4619      	mov	r1, r3
 80096ee:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80096f2:	009e      	lsls	r6, r3, #2
 80096f4:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80096f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fc:	f7f7 f8ae 	bl	800085c <__aeabi_ddiv>
 8009700:	4602      	mov	r2, r0
 8009702:	460b      	mov	r3, r1
 8009704:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 8009708:	00f1      	lsls	r1, r6, #3
 800970a:	4401      	add	r1, r0
 800970c:	e9c1 2300 	strd	r2, r3, [r1]
      dHdx_0[(r1 << 2) + 1] = (imvec[1] - rtDW.DataStoreReadX_j[1]) / epsilon;
 8009710:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8009714:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8009718:	1d3b      	adds	r3, r7, #4
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	e9d3 23be 	ldrd	r2, r3, [r3, #760]	; 0x2f8
 8009720:	f7f6 fdba 	bl	8000298 <__aeabi_dsub>
 8009724:	4602      	mov	r2, r0
 8009726:	460b      	mov	r3, r1
 8009728:	4610      	mov	r0, r2
 800972a:	4619      	mov	r1, r3
 800972c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	1c5e      	adds	r6, r3, #1
 8009734:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973c:	f7f7 f88e 	bl	800085c <__aeabi_ddiv>
 8009740:	4602      	mov	r2, r0
 8009742:	460b      	mov	r3, r1
 8009744:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 8009748:	00f1      	lsls	r1, r6, #3
 800974a:	4401      	add	r1, r0
 800974c:	e9c1 2300 	strd	r2, r3, [r1]
      dHdx_0[(r1 << 2) + 2] = (imvec[2] - rtDW.DataStoreReadX_j[2]) / epsilon;
 8009750:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8009754:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8009758:	1d3b      	adds	r3, r7, #4
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	e9d3 23c0 	ldrd	r2, r3, [r3, #768]	; 0x300
 8009760:	f7f6 fd9a 	bl	8000298 <__aeabi_dsub>
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	4610      	mov	r0, r2
 800976a:	4619      	mov	r1, r3
 800976c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	1c9e      	adds	r6, r3, #2
 8009774:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977c:	f7f7 f86e 	bl	800085c <__aeabi_ddiv>
 8009780:	4602      	mov	r2, r0
 8009782:	460b      	mov	r3, r1
 8009784:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 8009788:	00f1      	lsls	r1, r6, #3
 800978a:	4401      	add	r1, r0
 800978c:	e9c1 2300 	strd	r2, r3, [r1]
      dHdx_0[(r1 << 2) + 3] = (imvec[3] - rtDW.DataStoreReadX_j[3]) / epsilon;
 8009790:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8009794:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8009798:	1d3b      	adds	r3, r7, #4
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	e9d3 23c2 	ldrd	r2, r3, [r3, #776]	; 0x308
 80097a0:	f7f6 fd7a 	bl	8000298 <__aeabi_dsub>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	4610      	mov	r0, r2
 80097aa:	4619      	mov	r1, r3
 80097ac:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	1cde      	adds	r6, r3, #3
 80097b4:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80097b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097bc:	f7f7 f84e 	bl	800085c <__aeabi_ddiv>
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 80097c8:	00f1      	lsls	r1, r6, #3
 80097ca:	4401      	add	r1, r0
 80097cc:	e9c1 2300 	strd	r2, r3, [r1]
    for (r1 = 0; r1 < 6; r1++) {
 80097d0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80097d4:	3301      	adds	r3, #1
 80097d6:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80097da:	e701      	b.n	80095e0 <_ZN27positionEstimatorModelClass4stepEv+0x1cc0>
    }

    for (i = 0; i < 6; i++) {
 80097dc:	2300      	movs	r3, #0
 80097de:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80097e2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80097e6:	2b05      	cmp	r3, #5
 80097e8:	dc16      	bgt.n	8009818 <_ZN27positionEstimatorModelClass4stepEv+0x1ef8>
      imvec[i] = rtDW.DataStoreReadX_j[i];
 80097ea:	1d3b      	adds	r3, r7, #4
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80097f2:	335e      	adds	r3, #94	; 0x5e
 80097f4:	00db      	lsls	r3, r3, #3
 80097f6:	4413      	add	r3, r2
 80097f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fc:	f507 60e6 	add.w	r0, r7, #1840	; 0x730
 8009800:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 8009804:	00c9      	lsls	r1, r1, #3
 8009806:	4401      	add	r1, r0
 8009808:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 6; i++) {
 800980c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009810:	3301      	adds	r3, #1
 8009812:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009816:	e7e4      	b.n	80097e2 <_ZN27positionEstimatorModelClass4stepEv+0x1ec2>
    }

    for (r1 = 0; r1 < 4; r1++) {
 8009818:	2300      	movs	r3, #0
 800981a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800981e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009822:	2b03      	cmp	r3, #3
 8009824:	f300 809e 	bgt.w	8009964 <_ZN27positionEstimatorModelClass4stepEv+0x2044>
      for (i = 0; i < 6; i++) {
 8009828:	2300      	movs	r3, #0
 800982a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800982e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009832:	2b05      	cmp	r3, #5
 8009834:	dc6f      	bgt.n	8009916 <_ZN27positionEstimatorModelClass4stepEv+0x1ff6>
        dHdx_2[r1 + (i << 2)] = 0.0;
 8009836:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800983a:	009a      	lsls	r2, r3, #2
 800983c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009840:	4413      	add	r3, r2
 8009842:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8009846:	00db      	lsls	r3, r3, #3
 8009848:	18d1      	adds	r1, r2, r3
 800984a:	f04f 0200 	mov.w	r2, #0
 800984e:	f04f 0300 	mov.w	r3, #0
 8009852:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 8009856:	2300      	movs	r3, #0
 8009858:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800985c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8009860:	2b05      	cmp	r3, #5
 8009862:	dc52      	bgt.n	800990a <_ZN27positionEstimatorModelClass4stepEv+0x1fea>
          u = dHdx_2[(i << 2) + r1];
 8009864:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009868:	009a      	lsls	r2, r3, #2
 800986a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800986e:	4413      	add	r3, r2
 8009870:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8009874:	00db      	lsls	r3, r3, #3
 8009876:	4413      	add	r3, r2
 8009878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987c:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009880:	e9c1 2300 	strd	r2, r3, [r1]
          u += dHdx_0[(k << 2) + r1] * rtDW.P_f[6 * i + k];
 8009884:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8009888:	009a      	lsls	r2, r3, #2
 800988a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800988e:	4413      	add	r3, r2
 8009890:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8009894:	00db      	lsls	r3, r3, #3
 8009896:	4413      	add	r3, r2
 8009898:	e9d3 0100 	ldrd	r0, r1, [r3]
 800989c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80098a0:	4613      	mov	r3, r2
 80098a2:	005b      	lsls	r3, r3, #1
 80098a4:	4413      	add	r3, r2
 80098a6:	005b      	lsls	r3, r3, #1
 80098a8:	461a      	mov	r2, r3
 80098aa:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80098ae:	4413      	add	r3, r2
 80098b0:	1d3a      	adds	r2, r7, #4
 80098b2:	6812      	ldr	r2, [r2, #0]
 80098b4:	336e      	adds	r3, #110	; 0x6e
 80098b6:	00db      	lsls	r3, r3, #3
 80098b8:	4413      	add	r3, r2
 80098ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098be:	f7f6 fea3 	bl	8000608 <__aeabi_dmul>
 80098c2:	4602      	mov	r2, r0
 80098c4:	460b      	mov	r3, r1
 80098c6:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80098ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098ce:	f7f6 fce5 	bl	800029c <__adddf3>
 80098d2:	4602      	mov	r2, r0
 80098d4:	460b      	mov	r3, r1
 80098d6:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80098da:	e9c1 2300 	strd	r2, r3, [r1]
          dHdx_2[r1 + (i << 2)] = u;
 80098de:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80098e2:	009a      	lsls	r2, r3, #2
 80098e4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80098e8:	4413      	add	r3, r2
 80098ea:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80098ee:	00db      	lsls	r3, r3, #3
 80098f0:	18d1      	adds	r1, r2, r3
 80098f2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80098f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fa:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 80098fe:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8009902:	3301      	adds	r3, #1
 8009904:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8009908:	e7a8      	b.n	800985c <_ZN27positionEstimatorModelClass4stepEv+0x1f3c>
      for (i = 0; i < 6; i++) {
 800990a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800990e:	3301      	adds	r3, #1
 8009910:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009914:	e78b      	b.n	800982e <_ZN27positionEstimatorModelClass4stepEv+0x1f0e>
        }
      }

      Pyy[r1] = rtDW.TmpSignalConversionAtSFunctionI[r1] -
 8009916:	1d3b      	adds	r3, r7, #4
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800991e:	3364      	adds	r3, #100	; 0x64
 8009920:	00db      	lsls	r3, r3, #3
 8009922:	4413      	add	r3, r2
 8009924:	e9d3 0100 	ldrd	r0, r1, [r3]
        rtDW.DataStoreReadX_j[r1];
 8009928:	1d3b      	adds	r3, r7, #4
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009930:	335e      	adds	r3, #94	; 0x5e
 8009932:	00db      	lsls	r3, r3, #3
 8009934:	4413      	add	r3, r2
 8009936:	e9d3 2300 	ldrd	r2, r3, [r3]
      Pyy[r1] = rtDW.TmpSignalConversionAtSFunctionI[r1] -
 800993a:	f7f6 fcad 	bl	8000298 <__aeabi_dsub>
 800993e:	4602      	mov	r2, r0
 8009940:	460b      	mov	r3, r1
 8009942:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	; 0x8c4
 8009946:	00c9      	lsls	r1, r1, #3
 8009948:	f507 600d 	add.w	r0, r7, #2256	; 0x8d0
 800994c:	4401      	add	r1, r0
 800994e:	39b0      	subs	r1, #176	; 0xb0
 8009950:	e9c1 2300 	strd	r2, r3, [r1]
    for (r1 = 0; r1 < 4; r1++) {
 8009954:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009958:	3301      	adds	r3, #1
 800995a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800995e:	e75e      	b.n	800981e <_ZN27positionEstimatorModelClass4stepEv+0x1efe>
 8009960:	3e500000 	.word	0x3e500000
    }

    for (r1 = 0; r1 < 6; r1++) {
 8009964:	2300      	movs	r3, #0
 8009966:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800996a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800996e:	2b05      	cmp	r3, #5
 8009970:	f300 8089 	bgt.w	8009a86 <_ZN27positionEstimatorModelClass4stepEv+0x2166>
      for (i = 0; i < 4; i++) {
 8009974:	2300      	movs	r3, #0
 8009976:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800997a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800997e:	2b03      	cmp	r3, #3
 8009980:	dc7b      	bgt.n	8009a7a <_ZN27positionEstimatorModelClass4stepEv+0x215a>
        tmp[r1 + 6 * i] = 0.0;
 8009982:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009986:	4613      	mov	r3, r2
 8009988:	005b      	lsls	r3, r3, #1
 800998a:	4413      	add	r3, r2
 800998c:	005b      	lsls	r3, r3, #1
 800998e:	461a      	mov	r2, r3
 8009990:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009994:	4413      	add	r3, r2
 8009996:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 800999a:	00db      	lsls	r3, r3, #3
 800999c:	18d1      	adds	r1, r2, r3
 800999e:	f04f 0200 	mov.w	r2, #0
 80099a2:	f04f 0300 	mov.w	r3, #0
 80099a6:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 80099aa:	2300      	movs	r3, #0
 80099ac:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 80099b0:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80099b4:	2b05      	cmp	r3, #5
 80099b6:	dc5a      	bgt.n	8009a6e <_ZN27positionEstimatorModelClass4stepEv+0x214e>
          u = tmp[6 * i + r1];
 80099b8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80099bc:	4613      	mov	r3, r2
 80099be:	005b      	lsls	r3, r3, #1
 80099c0:	4413      	add	r3, r2
 80099c2:	005b      	lsls	r3, r3, #1
 80099c4:	461a      	mov	r2, r3
 80099c6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80099ca:	4413      	add	r3, r2
 80099cc:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 80099d0:	00db      	lsls	r3, r3, #3
 80099d2:	4413      	add	r3, r2
 80099d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d8:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80099dc:	e9c1 2300 	strd	r2, r3, [r1]
          u += rtDW.P_f[6 * k + r1] * dHdx_0[(k << 2) + i];
 80099e0:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 80099e4:	4613      	mov	r3, r2
 80099e6:	005b      	lsls	r3, r3, #1
 80099e8:	4413      	add	r3, r2
 80099ea:	005b      	lsls	r3, r3, #1
 80099ec:	461a      	mov	r2, r3
 80099ee:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80099f2:	4413      	add	r3, r2
 80099f4:	1d3a      	adds	r2, r7, #4
 80099f6:	6812      	ldr	r2, [r2, #0]
 80099f8:	336e      	adds	r3, #110	; 0x6e
 80099fa:	00db      	lsls	r3, r3, #3
 80099fc:	4413      	add	r3, r2
 80099fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a02:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8009a06:	009a      	lsls	r2, r3, #2
 8009a08:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	4413      	add	r3, r2
 8009a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1a:	f7f6 fdf5 	bl	8000608 <__aeabi_dmul>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	460b      	mov	r3, r1
 8009a22:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a2a:	f7f6 fc37 	bl	800029c <__adddf3>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	460b      	mov	r3, r1
 8009a32:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009a36:	e9c1 2300 	strd	r2, r3, [r1]
          tmp[r1 + 6 * i] = u;
 8009a3a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009a3e:	4613      	mov	r3, r2
 8009a40:	005b      	lsls	r3, r3, #1
 8009a42:	4413      	add	r3, r2
 8009a44:	005b      	lsls	r3, r3, #1
 8009a46:	461a      	mov	r2, r3
 8009a48:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009a4c:	4413      	add	r3, r2
 8009a4e:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8009a52:	00db      	lsls	r3, r3, #3
 8009a54:	18d1      	adds	r1, r2, r3
 8009a56:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5e:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 8009a62:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8009a66:	3301      	adds	r3, #1
 8009a68:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8009a6c:	e7a0      	b.n	80099b0 <_ZN27positionEstimatorModelClass4stepEv+0x2090>
      for (i = 0; i < 4; i++) {
 8009a6e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009a72:	3301      	adds	r3, #1
 8009a74:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009a78:	e77f      	b.n	800997a <_ZN27positionEstimatorModelClass4stepEv+0x205a>
    for (r1 = 0; r1 < 6; r1++) {
 8009a7a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009a7e:	3301      	adds	r3, #1
 8009a80:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009a84:	e771      	b.n	800996a <_ZN27positionEstimatorModelClass4stepEv+0x204a>
        }
      }
    }

    for (r1 = 0; r1 < 4; r1++) {
 8009a86:	2300      	movs	r3, #0
 8009a88:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009a8c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009a90:	2b03      	cmp	r3, #3
 8009a92:	dc6f      	bgt.n	8009b74 <_ZN27positionEstimatorModelClass4stepEv+0x2254>
      for (i = 0; i < 4; i++) {
 8009a94:	2300      	movs	r3, #0
 8009a96:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009a9a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009a9e:	2b03      	cmp	r3, #3
 8009aa0:	dc62      	bgt.n	8009b68 <_ZN27positionEstimatorModelClass4stepEv+0x2248>
        u = 0.0;
 8009aa2:	f04f 0200 	mov.w	r2, #0
 8009aa6:	f04f 0300 	mov.w	r3, #0
 8009aaa:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009aae:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8009ab8:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8009abc:	2b05      	cmp	r3, #5
 8009abe:	dc2d      	bgt.n	8009b1c <_ZN27positionEstimatorModelClass4stepEv+0x21fc>
          u += dHdx_2[(k << 2) + r1] * dHdx_0[(k << 2) + i];
 8009ac0:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8009ac4:	009a      	lsls	r2, r3, #2
 8009ac6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009aca:	4413      	add	r3, r2
 8009acc:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8009ad0:	00db      	lsls	r3, r3, #3
 8009ad2:	4413      	add	r3, r2
 8009ad4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009ad8:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8009adc:	009a      	lsls	r2, r3, #2
 8009ade:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8009ae8:	00db      	lsls	r3, r3, #3
 8009aea:	4413      	add	r3, r2
 8009aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af0:	f7f6 fd8a 	bl	8000608 <__aeabi_dmul>
 8009af4:	4602      	mov	r2, r0
 8009af6:	460b      	mov	r3, r1
 8009af8:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b00:	f7f6 fbcc 	bl	800029c <__adddf3>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8009b0c:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 6; k++) {
 8009b10:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8009b14:	3301      	adds	r3, #1
 8009b16:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8009b1a:	e7cd      	b.n	8009ab8 <_ZN27positionEstimatorModelClass4stepEv+0x2198>
        }

        dHdx_3[r1 + (i << 2)] = rtP.R2_Value[(i << 2) + r1] + u;
 8009b1c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009b20:	009a      	lsls	r2, r3, #2
 8009b22:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009b26:	4413      	add	r3, r2
 8009b28:	4a6c      	ldr	r2, [pc, #432]	; (8009cdc <_ZN27positionEstimatorModelClass4stepEv+0x23bc>)
 8009b2a:	3325      	adds	r3, #37	; 0x25
 8009b2c:	00db      	lsls	r3, r3, #3
 8009b2e:	4413      	add	r3, r2
 8009b30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b34:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009b38:	009a      	lsls	r2, r3, #2
 8009b3a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009b3e:	18d6      	adds	r6, r2, r3
 8009b40:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	f7f6 fba8 	bl	800029c <__adddf3>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	f507 6088 	add.w	r0, r7, #1088	; 0x440
 8009b54:	00f1      	lsls	r1, r6, #3
 8009b56:	4401      	add	r1, r0
 8009b58:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = 0; i < 4; i++) {
 8009b5c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009b60:	3301      	adds	r3, #1
 8009b62:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009b66:	e798      	b.n	8009a9a <_ZN27positionEstimatorModelClass4stepEv+0x217a>
    for (r1 = 0; r1 < 4; r1++) {
 8009b68:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009b72:	e78b      	b.n	8009a8c <_ZN27positionEstimatorModelClass4stepEv+0x216c>
      }
    }

    EKFCorrector_correctStateAndCov(imvec, rtDW.P_f, Pyy, tmp, dHdx_3, dHdx_0);
 8009b74:	1d3b      	adds	r3, r7, #4
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f503 725c 	add.w	r2, r3, #880	; 0x370
 8009b7c:	f507 6602 	add.w	r6, r7, #2080	; 0x820
 8009b80:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 8009b84:	1d38      	adds	r0, r7, #4
 8009b86:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8009b8a:	9302      	str	r3, [sp, #8]
 8009b8c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8009b90:	9301      	str	r3, [sp, #4]
 8009b92:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	4633      	mov	r3, r6
 8009b9a:	6800      	ldr	r0, [r0, #0]
 8009b9c:	f7fd f80e 	bl	8006bbc <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_>
    for (i = 0; i < 6; i++) {
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009ba6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009baa:	2b05      	cmp	r3, #5
 8009bac:	dc16      	bgt.n	8009bdc <_ZN27positionEstimatorModelClass4stepEv+0x22bc>
      rtDW.xNew_g[i] = imvec[i];
 8009bae:	f507 62e6 	add.w	r2, r7, #1840	; 0x730
 8009bb2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009bb6:	00db      	lsls	r3, r3, #3
 8009bb8:	4413      	add	r3, r2
 8009bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbe:	1d39      	adds	r1, r7, #4
 8009bc0:	6808      	ldr	r0, [r1, #0]
 8009bc2:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 8009bc6:	3168      	adds	r1, #104	; 0x68
 8009bc8:	00c9      	lsls	r1, r1, #3
 8009bca:	4401      	add	r1, r0
 8009bcc:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 6; i++) {
 8009bd0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009bda:	e7e4      	b.n	8009ba6 <_ZN27positionEstimatorModelClass4stepEv+0x2286>
    }

    // DataStoreWrite: '<S14>/Data Store WriteP'
    for (i = 0; i < 36; i++) {
 8009bdc:	2300      	movs	r3, #0
 8009bde:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009be2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009be6:	2b23      	cmp	r3, #35	; 0x23
 8009be8:	dc18      	bgt.n	8009c1c <_ZN27positionEstimatorModelClass4stepEv+0x22fc>
      rtDW.P_n_c[i] = rtDW.P_f[i];
 8009bea:	1d3b      	adds	r3, r7, #4
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009bf2:	336e      	adds	r3, #110	; 0x6e
 8009bf4:	00db      	lsls	r3, r3, #3
 8009bf6:	4413      	add	r3, r2
 8009bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfc:	1d39      	adds	r1, r7, #4
 8009bfe:	6808      	ldr	r0, [r1, #0]
 8009c00:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 8009c04:	f501 718c 	add.w	r1, r1, #280	; 0x118
 8009c08:	00c9      	lsls	r1, r1, #3
 8009c0a:	4401      	add	r1, r0
 8009c0c:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 36; i++) {
 8009c10:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009c14:	3301      	adds	r3, #1
 8009c16:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009c1a:	e7e2      	b.n	8009be2 <_ZN27positionEstimatorModelClass4stepEv+0x22c2>
    }

    // End of DataStoreWrite: '<S14>/Data Store WriteP'

    // DataStoreWrite: '<S14>/Data Store WriteX'
    for (i = 0; i < 6; i++) {
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009c22:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009c26:	2b05      	cmp	r3, #5
 8009c28:	dc18      	bgt.n	8009c5c <_ZN27positionEstimatorModelClass4stepEv+0x233c>
      rtDW.x_p[i] = rtDW.xNew_g[i];
 8009c2a:	1d3b      	adds	r3, r7, #4
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009c32:	3368      	adds	r3, #104	; 0x68
 8009c34:	00db      	lsls	r3, r3, #3
 8009c36:	4413      	add	r3, r2
 8009c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3c:	1d39      	adds	r1, r7, #4
 8009c3e:	6808      	ldr	r0, [r1, #0]
 8009c40:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 8009c44:	f501 719e 	add.w	r1, r1, #316	; 0x13c
 8009c48:	00c9      	lsls	r1, r1, #3
 8009c4a:	4401      	add	r1, r0
 8009c4c:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 6; i++) {
 8009c50:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009c54:	3301      	adds	r3, #1
 8009c56:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009c5a:	e7e2      	b.n	8009c22 <_ZN27positionEstimatorModelClass4stepEv+0x2302>

  // End of Outputs for SubSystem: '<S2>/Correct2'

  // Outputs for Atomic SubSystem: '<S2>/Output'
  // DataStoreRead: '<S15>/Data Store Read'
  for (i = 0; i < 6; i++) {
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009c62:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009c66:	2b05      	cmp	r3, #5
 8009c68:	dc18      	bgt.n	8009c9c <_ZN27positionEstimatorModelClass4stepEv+0x237c>
    rtDW.DataStoreRead[i] = rtDW.x_p[i];
 8009c6a:	1d3b      	adds	r3, r7, #4
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009c72:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009c76:	00db      	lsls	r3, r3, #3
 8009c78:	4413      	add	r3, r2
 8009c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7e:	1d39      	adds	r1, r7, #4
 8009c80:	6808      	ldr	r0, [r1, #0]
 8009c82:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 8009c86:	3134      	adds	r1, #52	; 0x34
 8009c88:	00c9      	lsls	r1, r1, #3
 8009c8a:	4401      	add	r1, r0
 8009c8c:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 6; i++) {
 8009c90:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009c94:	3301      	adds	r3, #1
 8009c96:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009c9a:	e7e2      	b.n	8009c62 <_ZN27positionEstimatorModelClass4stepEv+0x2342>
  }

  // End of DataStoreRead: '<S15>/Data Store Read'

  // DataStoreRead: '<S15>/Data Store Read1'
  for (i = 0; i < 36; i++) {
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009ca2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009ca6:	2b23      	cmp	r3, #35	; 0x23
 8009ca8:	dc1a      	bgt.n	8009ce0 <_ZN27positionEstimatorModelClass4stepEv+0x23c0>
    rtDW.DataStoreRead1[i] = rtDW.P_n_c[i];
 8009caa:	1d3b      	adds	r3, r7, #4
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009cb2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8009cb6:	00db      	lsls	r3, r3, #3
 8009cb8:	4413      	add	r3, r2
 8009cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbe:	1d39      	adds	r1, r7, #4
 8009cc0:	6808      	ldr	r0, [r1, #0]
 8009cc2:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 8009cc6:	313a      	adds	r1, #58	; 0x3a
 8009cc8:	00c9      	lsls	r1, r1, #3
 8009cca:	4401      	add	r1, r0
 8009ccc:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 36; i++) {
 8009cd0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009cda:	e7e2      	b.n	8009ca2 <_ZN27positionEstimatorModelClass4stepEv+0x2382>
 8009cdc:	200002b0 	.word	0x200002b0
  }

  // End of DataStoreRead: '<S15>/Data Store Read1'

  // Inport: '<S15>/uBlockOrdering'
  rtDW.uBlockOrdering = rtDW.blockOrdering;
 8009ce0:	1d3b      	adds	r3, r7, #4
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f893 2c43 	ldrb.w	r2, [r3, #3139]	; 0xc43
 8009ce8:	1d3b      	adds	r3, r7, #4
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f883 2c42 	strb.w	r2, [r3, #3138]	; 0xc42

  // End of Outputs for SubSystem: '<S2>/Output'

  // Outport: '<Root>/estiX'
  rtY.estiX = rtDW.DataStoreRead[0];
 8009cf0:	1d3b      	adds	r3, r7, #4
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 8009cf8:	1d39      	adds	r1, r7, #4
 8009cfa:	6809      	ldr	r1, [r1, #0]
 8009cfc:	f501 614d 	add.w	r1, r1, #3280	; 0xcd0
 8009d00:	e9c1 2300 	strd	r2, r3, [r1]

  // Outport: '<Root>/estiY'
  rtY.estiY = rtDW.DataStoreRead[1];
 8009d04:	1d3b      	adds	r3, r7, #4
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 8009d0c:	1d39      	adds	r1, r7, #4
 8009d0e:	6809      	ldr	r1, [r1, #0]
 8009d10:	f601 41d8 	addw	r1, r1, #3288	; 0xcd8
 8009d14:	e9c1 2300 	strd	r2, r3, [r1]

  // Gain: '<Root>/NED_convert' incorporates:
  //   Inport: '<Root>/baroZ'

  rtDW.NED_convert = rtP.NED_convert_Gain * rtU.baroZ;
 8009d18:	4bad      	ldr	r3, [pc, #692]	; (8009fd0 <_ZN27positionEstimatorModelClass4stepEv+0x26b0>)
 8009d1a:	e9d3 0176 	ldrd	r0, r1, [r3, #472]	; 0x1d8
 8009d1e:	1d3b      	adds	r3, r7, #4
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f603 43a8 	addw	r3, r3, #3240	; 0xca8
 8009d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2a:	f7f6 fc6d 	bl	8000608 <__aeabi_dmul>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	460b      	mov	r3, r1
 8009d32:	1d39      	adds	r1, r7, #4
 8009d34:	6809      	ldr	r1, [r1, #0]
 8009d36:	f501 6137 	add.w	r1, r1, #2928	; 0xb70
 8009d3a:	e9c1 2300 	strd	r2, r3, [r1]

  // Sum: '<S20>/Sum' incorporates:
  //   Inport: '<Root>/HOME_lla'
  //   Inport: '<Root>/alt'

  rtDW.alt = rtU.alt + rtU.HOME_lla[2];
 8009d3e:	1d3b      	adds	r3, r7, #4
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f603 4388 	addw	r3, r3, #3208	; 0xc88
 8009d46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d4a:	1d3b      	adds	r3, r7, #4
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f503 634c 	add.w	r3, r3, #3264	; 0xcc0
 8009d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d56:	f7f6 faa1 	bl	800029c <__adddf3>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	1d39      	adds	r1, r7, #4
 8009d60:	6809      	ldr	r1, [r1, #0]
 8009d62:	f601 3178 	addw	r1, r1, #2936	; 0xb78
 8009d66:	e9c1 2300 	strd	r2, r3, [r1]

  // UnaryMinus: '<S20>/Ze2height'
  rtDW.Pz = -rtDW.alt;
 8009d6a:	1d3b      	adds	r3, r7, #4
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f603 3378 	addw	r3, r3, #2936	; 0xb78
 8009d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d76:	4614      	mov	r4, r2
 8009d78:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8009d7c:	1d3b      	adds	r3, r7, #4
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f503 6338 	add.w	r3, r3, #2944	; 0xb80
 8009d84:	e9c3 4500 	strd	r4, r5, [r3]

  // DataTypeConversion: '<S1>/DataTypeConversion_Enable1' incorporates:
  //   Inport: '<Root>/AhrsFlag'

  rtDW.DataTypeConversion_Enable1_a = (rtU.AhrsFlag != 0.0);
 8009d88:	1d3b      	adds	r3, r7, #4
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 8009d90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d94:	2301      	movs	r3, #1
 8009d96:	461c      	mov	r4, r3
 8009d98:	f04f 0200 	mov.w	r2, #0
 8009d9c:	f04f 0300 	mov.w	r3, #0
 8009da0:	f7f6 fe9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d001      	beq.n	8009dae <_ZN27positionEstimatorModelClass4stepEv+0x248e>
 8009daa:	2300      	movs	r3, #0
 8009dac:	461c      	mov	r4, r3
 8009dae:	b2e3      	uxtb	r3, r4
 8009db0:	461a      	mov	r2, r3
 8009db2:	1d3b      	adds	r3, r7, #4
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f883 2c40 	strb.w	r2, [r3, #3136]	; 0xc40

  // Outputs for Enabled SubSystem: '<S1>/Correct1' incorporates:
  //   EnablePort: '<S4>/Enable'

  if (rtDW.DataTypeConversion_Enable1_a) {
 8009dba:	1d3b      	adds	r3, r7, #4
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f893 3c40 	ldrb.w	r3, [r3, #3136]	; 0xc40
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f000 83ea 	beq.w	800a59c <_ZN27positionEstimatorModelClass4stepEv+0x2c7c>
    // DataStoreRead: '<S4>/Data Store ReadX'
    rtDW.DataStoreReadX_o[0] = rtDW.x[0];
 8009dc8:	1d3b      	adds	r3, r7, #4
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 8009dd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009dd4:	1d3a      	adds	r2, r7, #4
 8009dd6:	6812      	ldr	r2, [r2, #0]
 8009dd8:	f502 62fd 	add.w	r2, r2, #2024	; 0x7e8
 8009ddc:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_o[1] = rtDW.x[1];
 8009de0:	1d3b      	adds	r3, r7, #4
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8009de8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009dec:	1d3a      	adds	r2, r7, #4
 8009dee:	6812      	ldr	r2, [r2, #0]
 8009df0:	f502 62fe 	add.w	r2, r2, #2032	; 0x7f0
 8009df4:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_o[2] = rtDW.x[2];
 8009df8:	1d3b      	adds	r3, r7, #4
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 8009e00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e04:	1d3a      	adds	r2, r7, #4
 8009e06:	6812      	ldr	r2, [r2, #0]
 8009e08:	f502 62ff 	add.w	r2, r2, #2040	; 0x7f8
 8009e0c:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S4>/Correct' incorporates:
    //   Constant: '<S1>/BlockOrdering'

    rtDW.blockOrdering_k = rtP.BlockOrdering_Value_b;
 8009e10:	4b6f      	ldr	r3, [pc, #444]	; (8009fd0 <_ZN27positionEstimatorModelClass4stepEv+0x26b0>)
 8009e12:	f893 23e6 	ldrb.w	r2, [r3, #998]	; 0x3e6
 8009e16:	1d3b      	adds	r3, r7, #4
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f883 2c48 	strb.w	r2, [r3, #3144]	; 0xc48
    blockOrdering = rtDW.blockOrdering_k;
 8009e1e:	1d3b      	adds	r3, r7, #4
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f893 3c48 	ldrb.w	r3, [r3, #3144]	; 0xc48
 8009e26:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering_k = blockOrdering;
 8009e2a:	1d3b      	adds	r3, r7, #4
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 8009e32:	f883 2c48 	strb.w	r2, [r3, #3144]	; 0xc48
    for (i = 0; i < 9; i++) {
 8009e36:	2300      	movs	r3, #0
 8009e38:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009e3c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009e40:	2b08      	cmp	r3, #8
 8009e42:	dc35      	bgt.n	8009eb0 <_ZN27positionEstimatorModelClass4stepEv+0x2590>
      // DataStoreRead: '<S4>/Data Store ReadP'
      rtDW.P_g[i] = rtDW.P_i_m[i];
 8009e44:	1d3b      	adds	r3, r7, #4
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009e4c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8009e50:	00db      	lsls	r3, r3, #3
 8009e52:	4413      	add	r3, r2
 8009e54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e58:	1d3a      	adds	r2, r7, #4
 8009e5a:	6811      	ldr	r1, [r2, #0]
 8009e5c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009e60:	f202 1203 	addw	r2, r2, #259	; 0x103
 8009e64:	00d2      	lsls	r2, r2, #3
 8009e66:	440a      	add	r2, r1
 8009e68:	e9c2 3400 	strd	r3, r4, [r2]

      // MATLAB Function: '<S4>/Correct'
      u = rtDW.P_g[i];
 8009e6c:	1d3b      	adds	r3, r7, #4
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009e74:	f203 1303 	addw	r3, r3, #259	; 0x103
 8009e78:	00db      	lsls	r3, r3, #3
 8009e7a:	4413      	add	r3, r2
 8009e7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e80:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009e84:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.P_g[i] = u;
 8009e88:	1d3b      	adds	r3, r7, #4
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009e90:	f203 1303 	addw	r3, r3, #259	; 0x103
 8009e94:	00db      	lsls	r3, r3, #3
 8009e96:	441a      	add	r2, r3
 8009e98:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009e9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ea0:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 8009ea4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009eae:	e7c5      	b.n	8009e3c <_ZN27positionEstimatorModelClass4stepEv+0x251c>

    // MATLAB Function: '<S4>/Correct' incorporates:
    //   Constant: '<S1>/R1'
    //   Inport: '<Root>/az'

    for (r1 = 0; r1 < 3; r1++) {
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009eb6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009eba:	2b02      	cmp	r3, #2
 8009ebc:	f300 808c 	bgt.w	8009fd8 <_ZN27positionEstimatorModelClass4stepEv+0x26b8>
      imvec_0[2] = rtDW.DataStoreReadX_o[2];
 8009ec0:	1d3b      	adds	r3, r7, #4
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8009ec8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ecc:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8009ed0:	e9c2 3404 	strd	r3, r4, [r2, #16]
      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_o[r1]);
 8009ed4:	1d3b      	adds	r3, r7, #4
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009edc:	33fd      	adds	r3, #253	; 0xfd
 8009ede:	00db      	lsls	r3, r3, #3
 8009ee0:	4413      	add	r3, r2
 8009ee2:	ed93 7b00 	vldr	d7, [r3]
 8009ee6:	eeb0 0a47 	vmov.f32	s0, s14
 8009eea:	eef0 0a67 	vmov.f32	s1, s15
 8009eee:	f7fc fab0 	bl	8006452 <_ZSt3absd>
 8009ef2:	ec51 0b10 	vmov	r0, r1, d0
 8009ef6:	f04f 0200 	mov.w	r2, #0
 8009efa:	4b36      	ldr	r3, [pc, #216]	; (8009fd4 <_ZN27positionEstimatorModelClass4stepEv+0x26b4>)
 8009efc:	f7f6 fb84 	bl	8000608 <__aeabi_dmul>
 8009f00:	4603      	mov	r3, r0
 8009f02:	460c      	mov	r4, r1
 8009f04:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8009f08:	e9c2 3400 	strd	r3, r4, [r2]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 8009f0c:	f04f 0200 	mov.w	r2, #0
 8009f10:	4b30      	ldr	r3, [pc, #192]	; (8009fd4 <_ZN27positionEstimatorModelClass4stepEv+0x26b4>)
 8009f12:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8009f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f1a:	f7f6 fde7 	bl	8000aec <__aeabi_dcmplt>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d108      	bne.n	8009f36 <_ZN27positionEstimatorModelClass4stepEv+0x2616>
 8009f24:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009f28:	ed93 0b00 	vldr	d0, [r3]
 8009f2c:	f7fc fb54 	bl	80065d8 <rtIsNaN>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <_ZN27positionEstimatorModelClass4stepEv+0x261a>
 8009f36:	2301      	movs	r3, #1
 8009f38:	e000      	b.n	8009f3c <_ZN27positionEstimatorModelClass4stepEv+0x261c>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d006      	beq.n	8009f4e <_ZN27positionEstimatorModelClass4stepEv+0x262e>
        epsilon = 1.4901161193847656E-8;
 8009f40:	f04f 0300 	mov.w	r3, #0
 8009f44:	4c23      	ldr	r4, [pc, #140]	; (8009fd4 <_ZN27positionEstimatorModelClass4stepEv+0x26b4>)
 8009f46:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8009f4a:	e9c2 3400 	strd	r3, r4, [r2]
      }

      imvec_0[r1] = rtDW.DataStoreReadX_o[r1] + epsilon;
 8009f4e:	1d3b      	adds	r3, r7, #4
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009f56:	33fd      	adds	r3, #253	; 0xfd
 8009f58:	00db      	lsls	r3, r3, #3
 8009f5a:	4413      	add	r3, r2
 8009f5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f60:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f68:	f7f6 f998 	bl	800029c <__adddf3>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	460c      	mov	r4, r1
 8009f70:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8009f74:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009f78:	00d2      	lsls	r2, r2, #3
 8009f7a:	440a      	add	r2, r1
 8009f7c:	e9c2 3400 	strd	r3, r4, [r2]
      dHdx_1[r1] = (imvec_0[2] - rtDW.DataStoreReadX_o[2]) / epsilon;
 8009f80:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8009f84:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8009f88:	1d3b      	adds	r3, r7, #4
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8009f90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f94:	461a      	mov	r2, r3
 8009f96:	4623      	mov	r3, r4
 8009f98:	f7f6 f97e 	bl	8000298 <__aeabi_dsub>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	4621      	mov	r1, r4
 8009fa4:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fac:	f7f6 fc56 	bl	800085c <__aeabi_ddiv>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	460c      	mov	r4, r1
 8009fb4:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 8009fb8:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009fbc:	00d2      	lsls	r2, r2, #3
 8009fbe:	440a      	add	r2, r1
 8009fc0:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 8009fc4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009fc8:	3301      	adds	r3, #1
 8009fca:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009fce:	e772      	b.n	8009eb6 <_ZN27positionEstimatorModelClass4stepEv+0x2596>
 8009fd0:	200002b0 	.word	0x200002b0
 8009fd4:	3e500000 	.word	0x3e500000
    }

    u = 0.0;
 8009fd8:	f04f 0300 	mov.w	r3, #0
 8009fdc:	f04f 0400 	mov.w	r4, #0
 8009fe0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009fe4:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 8009fe8:	2300      	movs	r3, #0
 8009fea:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009fee:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	f300 808b 	bgt.w	800a10e <_ZN27positionEstimatorModelClass4stepEv+0x27ee>
      a22 = rtDW.P_g[3 * r1] * dHdx_1[0];
 8009ff8:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	005b      	lsls	r3, r3, #1
 800a000:	4413      	add	r3, r2
 800a002:	1d3a      	adds	r2, r7, #4
 800a004:	6812      	ldr	r2, [r2, #0]
 800a006:	f203 1303 	addw	r3, r3, #259	; 0x103
 800a00a:	00db      	lsls	r3, r3, #3
 800a00c:	4413      	add	r3, r2
 800a00e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a012:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a016:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a01a:	461a      	mov	r2, r3
 800a01c:	4623      	mov	r3, r4
 800a01e:	f7f6 faf3 	bl	8000608 <__aeabi_dmul>
 800a022:	4603      	mov	r3, r0
 800a024:	460c      	mov	r4, r1
 800a026:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a02a:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_g[3 * r1 + 1] * dHdx_1[1];
 800a02e:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a032:	4613      	mov	r3, r2
 800a034:	005b      	lsls	r3, r3, #1
 800a036:	4413      	add	r3, r2
 800a038:	3301      	adds	r3, #1
 800a03a:	1d3a      	adds	r2, r7, #4
 800a03c:	6812      	ldr	r2, [r2, #0]
 800a03e:	f203 1303 	addw	r3, r3, #259	; 0x103
 800a042:	00db      	lsls	r3, r3, #3
 800a044:	4413      	add	r3, r2
 800a046:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a04a:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a04e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800a052:	461a      	mov	r2, r3
 800a054:	4623      	mov	r3, r4
 800a056:	f7f6 fad7 	bl	8000608 <__aeabi_dmul>
 800a05a:	4603      	mov	r3, r0
 800a05c:	460c      	mov	r4, r1
 800a05e:	461a      	mov	r2, r3
 800a060:	4623      	mov	r3, r4
 800a062:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800a066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a06a:	f7f6 f917 	bl	800029c <__adddf3>
 800a06e:	4603      	mov	r3, r0
 800a070:	460c      	mov	r4, r1
 800a072:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a076:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_g[3 * r1 + 2] * dHdx_1[2];
 800a07a:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a07e:	4613      	mov	r3, r2
 800a080:	005b      	lsls	r3, r3, #1
 800a082:	4413      	add	r3, r2
 800a084:	3302      	adds	r3, #2
 800a086:	1d3a      	adds	r2, r7, #4
 800a088:	6812      	ldr	r2, [r2, #0]
 800a08a:	f203 1303 	addw	r3, r3, #259	; 0x103
 800a08e:	00db      	lsls	r3, r3, #3
 800a090:	4413      	add	r3, r2
 800a092:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a096:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a09a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	4623      	mov	r3, r4
 800a0a2:	f7f6 fab1 	bl	8000608 <__aeabi_dmul>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	460c      	mov	r4, r1
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	4623      	mov	r3, r4
 800a0ae:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800a0b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0b6:	f7f6 f8f1 	bl	800029c <__adddf3>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	460c      	mov	r4, r1
 800a0be:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a0c2:	e9c2 3400 	strd	r3, r4, [r2]
      u += a22 * dHdx_1[r1];
 800a0c6:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800a0ca:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a0ce:	00db      	lsls	r3, r3, #3
 800a0d0:	4413      	add	r3, r2
 800a0d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a0d6:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0de:	f7f6 fa93 	bl	8000608 <__aeabi_dmul>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	460c      	mov	r4, r1
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	4623      	mov	r3, r4
 800a0ea:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a0ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0f2:	f7f6 f8d3 	bl	800029c <__adddf3>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a0fe:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 800a102:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a106:	3301      	adds	r3, #1
 800a108:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a10c:	e76f      	b.n	8009fee <_ZN27positionEstimatorModelClass4stepEv+0x26ce>
    }

    epsilon = u + rtP.R1_Value_j;
 800a10e:	4b9b      	ldr	r3, [pc, #620]	; (800a37c <_ZN27positionEstimatorModelClass4stepEv+0x2a5c>)
 800a110:	e9d3 3480 	ldrd	r3, r4, [r3, #512]	; 0x200
 800a114:	461a      	mov	r2, r3
 800a116:	4623      	mov	r3, r4
 800a118:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a11c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a120:	f7f6 f8bc 	bl	800029c <__adddf3>
 800a124:	4603      	mov	r3, r0
 800a126:	460c      	mov	r4, r1
 800a128:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800a12c:	e9c2 3400 	strd	r3, r4, [r2]
    a22 = rtU.az - rtDW.DataStoreReadX_o[2];
 800a130:	1d3b      	adds	r3, r7, #4
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f603 4368 	addw	r3, r3, #3176	; 0xc68
 800a138:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a13c:	1d3b      	adds	r3, r7, #4
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 800a144:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a148:	461a      	mov	r2, r3
 800a14a:	4623      	mov	r3, r4
 800a14c:	f7f6 f8a4 	bl	8000298 <__aeabi_dsub>
 800a150:	4603      	mov	r3, r0
 800a152:	460c      	mov	r4, r1
 800a154:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a158:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800a15c:	2300      	movs	r3, #0
 800a15e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a162:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a166:	2b02      	cmp	r3, #2
 800a168:	f300 80a7 	bgt.w	800a2ba <_ZN27positionEstimatorModelClass4stepEv+0x299a>
      u = rtDW.P_g[i] * dHdx_1[0];
 800a16c:	1d3b      	adds	r3, r7, #4
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a174:	f203 1303 	addw	r3, r3, #259	; 0x103
 800a178:	00db      	lsls	r3, r3, #3
 800a17a:	4413      	add	r3, r2
 800a17c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a180:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a184:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a188:	461a      	mov	r2, r3
 800a18a:	4623      	mov	r3, r4
 800a18c:	f7f6 fa3c 	bl	8000608 <__aeabi_dmul>
 800a190:	4603      	mov	r3, r0
 800a192:	460c      	mov	r4, r1
 800a194:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a198:	e9c2 3400 	strd	r3, r4, [r2]
      u += rtDW.P_g[i + 3] * dHdx_1[1];
 800a19c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a1a0:	3303      	adds	r3, #3
 800a1a2:	1d3a      	adds	r2, r7, #4
 800a1a4:	6812      	ldr	r2, [r2, #0]
 800a1a6:	f203 1303 	addw	r3, r3, #259	; 0x103
 800a1aa:	00db      	lsls	r3, r3, #3
 800a1ac:	4413      	add	r3, r2
 800a1ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a1b2:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a1b6:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	4623      	mov	r3, r4
 800a1be:	f7f6 fa23 	bl	8000608 <__aeabi_dmul>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	460c      	mov	r4, r1
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	4623      	mov	r3, r4
 800a1ca:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a1ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1d2:	f7f6 f863 	bl	800029c <__adddf3>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	460c      	mov	r4, r1
 800a1da:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a1de:	e9c2 3400 	strd	r3, r4, [r2]
      u += rtDW.P_g[i + 6] * dHdx_1[2];
 800a1e2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a1e6:	3306      	adds	r3, #6
 800a1e8:	1d3a      	adds	r2, r7, #4
 800a1ea:	6812      	ldr	r2, [r2, #0]
 800a1ec:	f203 1303 	addw	r3, r3, #259	; 0x103
 800a1f0:	00db      	lsls	r3, r3, #3
 800a1f2:	4413      	add	r3, r2
 800a1f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a1f8:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a1fc:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a200:	461a      	mov	r2, r3
 800a202:	4623      	mov	r3, r4
 800a204:	f7f6 fa00 	bl	8000608 <__aeabi_dmul>
 800a208:	4603      	mov	r3, r0
 800a20a:	460c      	mov	r4, r1
 800a20c:	461a      	mov	r2, r3
 800a20e:	4623      	mov	r3, r4
 800a210:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a214:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a218:	f7f6 f840 	bl	800029c <__adddf3>
 800a21c:	4603      	mov	r3, r0
 800a21e:	460c      	mov	r4, r1
 800a220:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a224:	e9c2 3400 	strd	r3, r4, [r2]
      u /= epsilon;
 800a228:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800a22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a230:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a234:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a238:	f7f6 fb10 	bl	800085c <__aeabi_ddiv>
 800a23c:	4603      	mov	r3, r0
 800a23e:	460c      	mov	r4, r1
 800a240:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a244:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.xNew_o[i] = u * a22 + rtDW.DataStoreReadX_o[i];
 800a248:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a250:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a254:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a258:	f7f6 f9d6 	bl	8000608 <__aeabi_dmul>
 800a25c:	4603      	mov	r3, r0
 800a25e:	460c      	mov	r4, r1
 800a260:	4618      	mov	r0, r3
 800a262:	4621      	mov	r1, r4
 800a264:	1d3b      	adds	r3, r7, #4
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a26c:	33fd      	adds	r3, #253	; 0xfd
 800a26e:	00db      	lsls	r3, r3, #3
 800a270:	4413      	add	r3, r2
 800a272:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a276:	461a      	mov	r2, r3
 800a278:	4623      	mov	r3, r4
 800a27a:	f7f6 f80f 	bl	800029c <__adddf3>
 800a27e:	4603      	mov	r3, r0
 800a280:	460c      	mov	r4, r1
 800a282:	1d3a      	adds	r2, r7, #4
 800a284:	6811      	ldr	r1, [r2, #0]
 800a286:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a28a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800a28e:	00d2      	lsls	r2, r2, #3
 800a290:	440a      	add	r2, r1
 800a292:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_0[i] = u;
 800a296:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 800a29a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a29e:	00db      	lsls	r3, r3, #3
 800a2a0:	441a      	add	r2, r3
 800a2a2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a2a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2aa:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800a2ae:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a2b8:	e753      	b.n	800a162 <_ZN27positionEstimatorModelClass4stepEv+0x2842>
    }

    for (r1 = 0; r1 < 3; r1++) {
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a2c0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	dc5b      	bgt.n	800a380 <_ZN27positionEstimatorModelClass4stepEv+0x2a60>
      u = dHdx_1[r1];
 800a2c8:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800a2cc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a2d0:	00db      	lsls	r3, r3, #3
 800a2d2:	4413      	add	r3, r2
 800a2d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2d8:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a2dc:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1] = imvec_0[0] * u;
 800a2e0:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800a2e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a2e8:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	005b      	lsls	r3, r3, #1
 800a2f0:	189d      	adds	r5, r3, r2
 800a2f2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fa:	f7f6 f985 	bl	8000608 <__aeabi_dmul>
 800a2fe:	4603      	mov	r3, r0
 800a300:	460c      	mov	r4, r1
 800a302:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 800a306:	00ea      	lsls	r2, r5, #3
 800a308:	440a      	add	r2, r1
 800a30a:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1 + 1] = imvec_0[1] * u;
 800a30e:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800a312:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a316:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a31a:	4613      	mov	r3, r2
 800a31c:	005b      	lsls	r3, r3, #1
 800a31e:	4413      	add	r3, r2
 800a320:	1c5d      	adds	r5, r3, #1
 800a322:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32a:	f7f6 f96d 	bl	8000608 <__aeabi_dmul>
 800a32e:	4603      	mov	r3, r0
 800a330:	460c      	mov	r4, r1
 800a332:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 800a336:	00ea      	lsls	r2, r5, #3
 800a338:	440a      	add	r2, r1
 800a33a:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1 + 2] = imvec_0[2] * u;
 800a33e:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800a342:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a346:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a34a:	4613      	mov	r3, r2
 800a34c:	005b      	lsls	r3, r3, #1
 800a34e:	4413      	add	r3, r2
 800a350:	1c9d      	adds	r5, r3, #2
 800a352:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35a:	f7f6 f955 	bl	8000608 <__aeabi_dmul>
 800a35e:	4603      	mov	r3, r0
 800a360:	460c      	mov	r4, r1
 800a362:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 800a366:	00ea      	lsls	r2, r5, #3
 800a368:	440a      	add	r2, r1
 800a36a:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 800a36e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a372:	3301      	adds	r3, #1
 800a374:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a378:	e7a2      	b.n	800a2c0 <_ZN27positionEstimatorModelClass4stepEv+0x29a0>
 800a37a:	bf00      	nop
 800a37c:	200002b0 	.word	0x200002b0
    }

    for (r1 = 0; r1 < 3; r1++) {
 800a380:	2300      	movs	r3, #0
 800a382:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a386:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	f300 80af 	bgt.w	800a4ee <_ZN27positionEstimatorModelClass4stepEv+0x2bce>
      for (i = 0; i < 3; i++) {
 800a390:	2300      	movs	r3, #0
 800a392:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a396:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a39a:	2b02      	cmp	r3, #2
 800a39c:	f300 80a1 	bgt.w	800a4e2 <_ZN27positionEstimatorModelClass4stepEv+0x2bc2>
        u = rtDW.P_g[3 * r1] * imvec_1[i];
 800a3a0:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a3a4:	4613      	mov	r3, r2
 800a3a6:	005b      	lsls	r3, r3, #1
 800a3a8:	4413      	add	r3, r2
 800a3aa:	1d3a      	adds	r2, r7, #4
 800a3ac:	6812      	ldr	r2, [r2, #0]
 800a3ae:	f203 1303 	addw	r3, r3, #259	; 0x103
 800a3b2:	00db      	lsls	r3, r3, #3
 800a3b4:	4413      	add	r3, r2
 800a3b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a3ba:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a3be:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a3c2:	00db      	lsls	r3, r3, #3
 800a3c4:	4413      	add	r3, r2
 800a3c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	4623      	mov	r3, r4
 800a3ce:	f7f6 f91b 	bl	8000608 <__aeabi_dmul>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	460c      	mov	r4, r1
 800a3d6:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a3da:	e9c2 3400 	strd	r3, r4, [r2]
        u += rtDW.P_g[3 * r1 + 1] * imvec_1[i + 3];
 800a3de:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	005b      	lsls	r3, r3, #1
 800a3e6:	4413      	add	r3, r2
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	1d3a      	adds	r2, r7, #4
 800a3ec:	6812      	ldr	r2, [r2, #0]
 800a3ee:	f203 1303 	addw	r3, r3, #259	; 0x103
 800a3f2:	00db      	lsls	r3, r3, #3
 800a3f4:	4413      	add	r3, r2
 800a3f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a3fa:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a3fe:	3303      	adds	r3, #3
 800a400:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a404:	00db      	lsls	r3, r3, #3
 800a406:	4413      	add	r3, r2
 800a408:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a40c:	461a      	mov	r2, r3
 800a40e:	4623      	mov	r3, r4
 800a410:	f7f6 f8fa 	bl	8000608 <__aeabi_dmul>
 800a414:	4603      	mov	r3, r0
 800a416:	460c      	mov	r4, r1
 800a418:	461a      	mov	r2, r3
 800a41a:	4623      	mov	r3, r4
 800a41c:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a420:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a424:	f7f5 ff3a 	bl	800029c <__adddf3>
 800a428:	4603      	mov	r3, r0
 800a42a:	460c      	mov	r4, r1
 800a42c:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a430:	e9c2 3400 	strd	r3, r4, [r2]
        u += rtDW.P_g[3 * r1 + 2] * imvec_1[i + 6];
 800a434:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a438:	4613      	mov	r3, r2
 800a43a:	005b      	lsls	r3, r3, #1
 800a43c:	4413      	add	r3, r2
 800a43e:	3302      	adds	r3, #2
 800a440:	1d3a      	adds	r2, r7, #4
 800a442:	6812      	ldr	r2, [r2, #0]
 800a444:	f203 1303 	addw	r3, r3, #259	; 0x103
 800a448:	00db      	lsls	r3, r3, #3
 800a44a:	4413      	add	r3, r2
 800a44c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a450:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a454:	3306      	adds	r3, #6
 800a456:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a45a:	00db      	lsls	r3, r3, #3
 800a45c:	4413      	add	r3, r2
 800a45e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a462:	461a      	mov	r2, r3
 800a464:	4623      	mov	r3, r4
 800a466:	f7f6 f8cf 	bl	8000608 <__aeabi_dmul>
 800a46a:	4603      	mov	r3, r0
 800a46c:	460c      	mov	r4, r1
 800a46e:	461a      	mov	r2, r3
 800a470:	4623      	mov	r3, r4
 800a472:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a476:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a47a:	f7f5 ff0f 	bl	800029c <__adddf3>
 800a47e:	4603      	mov	r3, r0
 800a480:	460c      	mov	r4, r1
 800a482:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a486:	e9c2 3400 	strd	r3, r4, [r2]
        a[i + 3 * r1] = rtDW.P_g[3 * r1 + i] - u;
 800a48a:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a48e:	4613      	mov	r3, r2
 800a490:	005b      	lsls	r3, r3, #1
 800a492:	441a      	add	r2, r3
 800a494:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a498:	4413      	add	r3, r2
 800a49a:	1d3a      	adds	r2, r7, #4
 800a49c:	6812      	ldr	r2, [r2, #0]
 800a49e:	f203 1303 	addw	r3, r3, #259	; 0x103
 800a4a2:	00db      	lsls	r3, r3, #3
 800a4a4:	4413      	add	r3, r2
 800a4a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a4aa:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	005b      	lsls	r3, r3, #1
 800a4b2:	441a      	add	r2, r3
 800a4b4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a4b8:	18d5      	adds	r5, r2, r3
 800a4ba:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c2:	f7f5 fee9 	bl	8000298 <__aeabi_dsub>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	460c      	mov	r4, r1
 800a4ca:	f507 7124 	add.w	r1, r7, #656	; 0x290
 800a4ce:	00ea      	lsls	r2, r5, #3
 800a4d0:	440a      	add	r2, r1
 800a4d2:	e9c2 3400 	strd	r3, r4, [r2]
      for (i = 0; i < 3; i++) {
 800a4d6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a4da:	3301      	adds	r3, #1
 800a4dc:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a4e0:	e759      	b.n	800a396 <_ZN27positionEstimatorModelClass4stepEv+0x2a76>
    for (r1 = 0; r1 < 3; r1++) {
 800a4e2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a4ec:	e74b      	b.n	800a386 <_ZN27positionEstimatorModelClass4stepEv+0x2a66>
      }
    }

    for (i = 0; i < 9; i++) {
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a4f4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a4f8:	2b08      	cmp	r3, #8
 800a4fa:	dc2b      	bgt.n	800a554 <_ZN27positionEstimatorModelClass4stepEv+0x2c34>
      rtDW.P_g[i] = a[i];
 800a4fc:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a500:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a504:	00db      	lsls	r3, r3, #3
 800a506:	4413      	add	r3, r2
 800a508:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a50c:	1d3a      	adds	r2, r7, #4
 800a50e:	6811      	ldr	r1, [r2, #0]
 800a510:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a514:	f202 1203 	addw	r2, r2, #259	; 0x103
 800a518:	00d2      	lsls	r2, r2, #3
 800a51a:	440a      	add	r2, r1
 800a51c:	e9c2 3400 	strd	r3, r4, [r2]

      // DataStoreWrite: '<S4>/Data Store WriteP'
      rtDW.P_i_m[i] = rtDW.P_g[i];
 800a520:	1d3b      	adds	r3, r7, #4
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a528:	f203 1303 	addw	r3, r3, #259	; 0x103
 800a52c:	00db      	lsls	r3, r3, #3
 800a52e:	4413      	add	r3, r2
 800a530:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a534:	1d3a      	adds	r2, r7, #4
 800a536:	6811      	ldr	r1, [r2, #0]
 800a538:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a53c:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800a540:	00d2      	lsls	r2, r2, #3
 800a542:	440a      	add	r2, r1
 800a544:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 800a548:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a54c:	3301      	adds	r3, #1
 800a54e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a552:	e7cf      	b.n	800a4f4 <_ZN27positionEstimatorModelClass4stepEv+0x2bd4>
    }

    // DataStoreWrite: '<S4>/Data Store WriteX'
    rtDW.x[0] = rtDW.xNew_o[0];
 800a554:	1d3b      	adds	r3, r7, #4
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a55c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a560:	1d3a      	adds	r2, r7, #4
 800a562:	6812      	ldr	r2, [r2, #0]
 800a564:	f602 02a8 	addw	r2, r2, #2216	; 0x8a8
 800a568:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[1] = rtDW.xNew_o[1];
 800a56c:	1d3b      	adds	r3, r7, #4
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800a574:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a578:	1d3a      	adds	r2, r7, #4
 800a57a:	6812      	ldr	r2, [r2, #0]
 800a57c:	f502 620b 	add.w	r2, r2, #2224	; 0x8b0
 800a580:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[2] = rtDW.xNew_o[2];
 800a584:	1d3b      	adds	r3, r7, #4
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 800a58c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a590:	1d3a      	adds	r2, r7, #4
 800a592:	6812      	ldr	r2, [r2, #0]
 800a594:	f602 02b8 	addw	r2, r2, #2232	; 0x8b8
 800a598:	e9c2 3400 	strd	r3, r4, [r2]
  // End of Outputs for SubSystem: '<S1>/Correct1'

  // Outputs for Enabled SubSystem: '<S1>/Correct2' incorporates:
  //   EnablePort: '<S5>/Enable'

  if (rtDW.LogicalOperator) {
 800a59c:	1d3b      	adds	r3, r7, #4
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f893 3c3f 	ldrb.w	r3, [r3, #3135]	; 0xc3f
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f000 83d9 	beq.w	800ad5c <_ZN27positionEstimatorModelClass4stepEv+0x343c>
    // DataStoreRead: '<S5>/Data Store ReadX'
    rtDW.DataStoreReadX_m[0] = rtDW.x[0];
 800a5aa:	1d3b      	adds	r3, r7, #4
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 800a5b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5b6:	1d3a      	adds	r2, r7, #4
 800a5b8:	6812      	ldr	r2, [r2, #0]
 800a5ba:	f502 62ee 	add.w	r2, r2, #1904	; 0x770
 800a5be:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_m[1] = rtDW.x[1];
 800a5c2:	1d3b      	adds	r3, r7, #4
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 800a5ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5ce:	1d3a      	adds	r2, r7, #4
 800a5d0:	6812      	ldr	r2, [r2, #0]
 800a5d2:	f502 62ef 	add.w	r2, r2, #1912	; 0x778
 800a5d6:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_m[2] = rtDW.x[2];
 800a5da:	1d3b      	adds	r3, r7, #4
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 800a5e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5e6:	1d3a      	adds	r2, r7, #4
 800a5e8:	6812      	ldr	r2, [r2, #0]
 800a5ea:	f502 62f0 	add.w	r2, r2, #1920	; 0x780
 800a5ee:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S5>/Correct'
    rtDW.blockOrdering_n = rtDW.blockOrdering_k;
 800a5f2:	1d3b      	adds	r3, r7, #4
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f893 2c48 	ldrb.w	r2, [r3, #3144]	; 0xc48
 800a5fa:	1d3b      	adds	r3, r7, #4
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f883 2c47 	strb.w	r2, [r3, #3143]	; 0xc47
    blockOrdering = rtDW.blockOrdering_n;
 800a602:	1d3b      	adds	r3, r7, #4
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f893 3c47 	ldrb.w	r3, [r3, #3143]	; 0xc47
 800a60a:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering_n = blockOrdering;
 800a60e:	1d3b      	adds	r3, r7, #4
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 800a616:	f883 2c47 	strb.w	r2, [r3, #3143]	; 0xc47
    for (i = 0; i < 9; i++) {
 800a61a:	2300      	movs	r3, #0
 800a61c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a620:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a624:	2b08      	cmp	r3, #8
 800a626:	dc32      	bgt.n	800a68e <_ZN27positionEstimatorModelClass4stepEv+0x2d6e>
      // DataStoreRead: '<S5>/Data Store ReadP'
      rtDW.P_c[i] = rtDW.P_i_m[i];
 800a628:	1d3b      	adds	r3, r7, #4
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a630:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800a634:	00db      	lsls	r3, r3, #3
 800a636:	4413      	add	r3, r2
 800a638:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a63c:	1d3a      	adds	r2, r7, #4
 800a63e:	6811      	ldr	r1, [r2, #0]
 800a640:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a644:	32f4      	adds	r2, #244	; 0xf4
 800a646:	00d2      	lsls	r2, r2, #3
 800a648:	440a      	add	r2, r1
 800a64a:	e9c2 3400 	strd	r3, r4, [r2]

      // MATLAB Function: '<S5>/Correct'
      u = rtDW.P_c[i];
 800a64e:	1d3b      	adds	r3, r7, #4
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a656:	33f4      	adds	r3, #244	; 0xf4
 800a658:	00db      	lsls	r3, r3, #3
 800a65a:	4413      	add	r3, r2
 800a65c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a660:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a664:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.P_c[i] = u;
 800a668:	1d3b      	adds	r3, r7, #4
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a670:	33f4      	adds	r3, #244	; 0xf4
 800a672:	00db      	lsls	r3, r3, #3
 800a674:	441a      	add	r2, r3
 800a676:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a67a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a67e:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 800a682:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a686:	3301      	adds	r3, #1
 800a688:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a68c:	e7c8      	b.n	800a620 <_ZN27positionEstimatorModelClass4stepEv+0x2d00>
    }

    // MATLAB Function: '<S5>/Correct' incorporates:
    //   Constant: '<S1>/R2'

    for (r1 = 0; r1 < 3; r1++) {
 800a68e:	2300      	movs	r3, #0
 800a690:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a694:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a698:	2b02      	cmp	r3, #2
 800a69a:	f300 8088 	bgt.w	800a7ae <_ZN27positionEstimatorModelClass4stepEv+0x2e8e>
      imvec_0[0] = rtDW.DataStoreReadX_m[0];
 800a69e:	1d3b      	adds	r3, r7, #4
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 800a6a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a6aa:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 800a6ae:	e9c2 3400 	strd	r3, r4, [r2]
      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_m[r1]);
 800a6b2:	1d3b      	adds	r3, r7, #4
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a6ba:	33ee      	adds	r3, #238	; 0xee
 800a6bc:	00db      	lsls	r3, r3, #3
 800a6be:	4413      	add	r3, r2
 800a6c0:	ed93 7b00 	vldr	d7, [r3]
 800a6c4:	eeb0 0a47 	vmov.f32	s0, s14
 800a6c8:	eef0 0a67 	vmov.f32	s1, s15
 800a6cc:	f7fb fec1 	bl	8006452 <_ZSt3absd>
 800a6d0:	ec51 0b10 	vmov	r0, r1, d0
 800a6d4:	f04f 0200 	mov.w	r2, #0
 800a6d8:	4b81      	ldr	r3, [pc, #516]	; (800a8e0 <_ZN27positionEstimatorModelClass4stepEv+0x2fc0>)
 800a6da:	f7f5 ff95 	bl	8000608 <__aeabi_dmul>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800a6e6:	e9c2 3400 	strd	r3, r4, [r2]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 800a6ea:	f04f 0200 	mov.w	r2, #0
 800a6ee:	4b7c      	ldr	r3, [pc, #496]	; (800a8e0 <_ZN27positionEstimatorModelClass4stepEv+0x2fc0>)
 800a6f0:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 800a6f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6f8:	f7f6 f9f8 	bl	8000aec <__aeabi_dcmplt>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d108      	bne.n	800a714 <_ZN27positionEstimatorModelClass4stepEv+0x2df4>
 800a702:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800a706:	ed93 0b00 	vldr	d0, [r3]
 800a70a:	f7fb ff65 	bl	80065d8 <rtIsNaN>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d001      	beq.n	800a718 <_ZN27positionEstimatorModelClass4stepEv+0x2df8>
 800a714:	2301      	movs	r3, #1
 800a716:	e000      	b.n	800a71a <_ZN27positionEstimatorModelClass4stepEv+0x2dfa>
 800a718:	2300      	movs	r3, #0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d006      	beq.n	800a72c <_ZN27positionEstimatorModelClass4stepEv+0x2e0c>
        epsilon = 1.4901161193847656E-8;
 800a71e:	f04f 0300 	mov.w	r3, #0
 800a722:	4c6f      	ldr	r4, [pc, #444]	; (800a8e0 <_ZN27positionEstimatorModelClass4stepEv+0x2fc0>)
 800a724:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800a728:	e9c2 3400 	strd	r3, r4, [r2]
      }

      imvec_0[r1] = rtDW.DataStoreReadX_m[r1] + epsilon;
 800a72c:	1d3b      	adds	r3, r7, #4
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a734:	33ee      	adds	r3, #238	; 0xee
 800a736:	00db      	lsls	r3, r3, #3
 800a738:	4413      	add	r3, r2
 800a73a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a73e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800a742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a746:	f7f5 fda9 	bl	800029c <__adddf3>
 800a74a:	4603      	mov	r3, r0
 800a74c:	460c      	mov	r4, r1
 800a74e:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 800a752:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a756:	00d2      	lsls	r2, r2, #3
 800a758:	440a      	add	r2, r1
 800a75a:	e9c2 3400 	strd	r3, r4, [r2]
      dHdx_1[r1] = (imvec_0[0] - rtDW.DataStoreReadX_m[0]) / epsilon;
 800a75e:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800a762:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a766:	1d3b      	adds	r3, r7, #4
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 800a76e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a772:	461a      	mov	r2, r3
 800a774:	4623      	mov	r3, r4
 800a776:	f7f5 fd8f 	bl	8000298 <__aeabi_dsub>
 800a77a:	4603      	mov	r3, r0
 800a77c:	460c      	mov	r4, r1
 800a77e:	4618      	mov	r0, r3
 800a780:	4621      	mov	r1, r4
 800a782:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	f7f6 f867 	bl	800085c <__aeabi_ddiv>
 800a78e:	4603      	mov	r3, r0
 800a790:	460c      	mov	r4, r1
 800a792:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 800a796:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a79a:	00d2      	lsls	r2, r2, #3
 800a79c:	440a      	add	r2, r1
 800a79e:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 800a7a2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a7ac:	e772      	b.n	800a694 <_ZN27positionEstimatorModelClass4stepEv+0x2d74>
    }

    u = 0.0;
 800a7ae:	f04f 0300 	mov.w	r3, #0
 800a7b2:	f04f 0400 	mov.w	r4, #0
 800a7b6:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a7ba:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 800a7be:	2300      	movs	r3, #0
 800a7c0:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a7c4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	f300 808b 	bgt.w	800a8e4 <_ZN27positionEstimatorModelClass4stepEv+0x2fc4>
      a22 = rtDW.P_c[3 * r1] * dHdx_1[0];
 800a7ce:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	005b      	lsls	r3, r3, #1
 800a7d6:	4413      	add	r3, r2
 800a7d8:	1d3a      	adds	r2, r7, #4
 800a7da:	6812      	ldr	r2, [r2, #0]
 800a7dc:	33f4      	adds	r3, #244	; 0xf4
 800a7de:	00db      	lsls	r3, r3, #3
 800a7e0:	4413      	add	r3, r2
 800a7e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a7e6:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a7ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	4623      	mov	r3, r4
 800a7f2:	f7f5 ff09 	bl	8000608 <__aeabi_dmul>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	460c      	mov	r4, r1
 800a7fa:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a7fe:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_c[3 * r1 + 1] * dHdx_1[1];
 800a802:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a806:	4613      	mov	r3, r2
 800a808:	005b      	lsls	r3, r3, #1
 800a80a:	4413      	add	r3, r2
 800a80c:	3301      	adds	r3, #1
 800a80e:	1d3a      	adds	r2, r7, #4
 800a810:	6812      	ldr	r2, [r2, #0]
 800a812:	33f4      	adds	r3, #244	; 0xf4
 800a814:	00db      	lsls	r3, r3, #3
 800a816:	4413      	add	r3, r2
 800a818:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a81c:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a820:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800a824:	461a      	mov	r2, r3
 800a826:	4623      	mov	r3, r4
 800a828:	f7f5 feee 	bl	8000608 <__aeabi_dmul>
 800a82c:	4603      	mov	r3, r0
 800a82e:	460c      	mov	r4, r1
 800a830:	461a      	mov	r2, r3
 800a832:	4623      	mov	r3, r4
 800a834:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800a838:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a83c:	f7f5 fd2e 	bl	800029c <__adddf3>
 800a840:	4603      	mov	r3, r0
 800a842:	460c      	mov	r4, r1
 800a844:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a848:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_c[3 * r1 + 2] * dHdx_1[2];
 800a84c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a850:	4613      	mov	r3, r2
 800a852:	005b      	lsls	r3, r3, #1
 800a854:	4413      	add	r3, r2
 800a856:	3302      	adds	r3, #2
 800a858:	1d3a      	adds	r2, r7, #4
 800a85a:	6812      	ldr	r2, [r2, #0]
 800a85c:	33f4      	adds	r3, #244	; 0xf4
 800a85e:	00db      	lsls	r3, r3, #3
 800a860:	4413      	add	r3, r2
 800a862:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a866:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a86a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a86e:	461a      	mov	r2, r3
 800a870:	4623      	mov	r3, r4
 800a872:	f7f5 fec9 	bl	8000608 <__aeabi_dmul>
 800a876:	4603      	mov	r3, r0
 800a878:	460c      	mov	r4, r1
 800a87a:	461a      	mov	r2, r3
 800a87c:	4623      	mov	r3, r4
 800a87e:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800a882:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a886:	f7f5 fd09 	bl	800029c <__adddf3>
 800a88a:	4603      	mov	r3, r0
 800a88c:	460c      	mov	r4, r1
 800a88e:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a892:	e9c2 3400 	strd	r3, r4, [r2]
      u += a22 * dHdx_1[r1];
 800a896:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800a89a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a89e:	00db      	lsls	r3, r3, #3
 800a8a0:	4413      	add	r3, r2
 800a8a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a8a6:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	f7f5 feab 	bl	8000608 <__aeabi_dmul>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	460c      	mov	r4, r1
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	4623      	mov	r3, r4
 800a8ba:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a8be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8c2:	f7f5 fceb 	bl	800029c <__adddf3>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	460c      	mov	r4, r1
 800a8ca:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a8ce:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 800a8d2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a8dc:	e772      	b.n	800a7c4 <_ZN27positionEstimatorModelClass4stepEv+0x2ea4>
 800a8de:	bf00      	nop
 800a8e0:	3e500000 	.word	0x3e500000
    }

    epsilon = u + rtP.R2_Value_g;
 800a8e4:	4b98      	ldr	r3, [pc, #608]	; (800ab48 <_ZN27positionEstimatorModelClass4stepEv+0x3228>)
 800a8e6:	e9d3 347c 	ldrd	r3, r4, [r3, #496]	; 0x1f0
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	4623      	mov	r3, r4
 800a8ee:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a8f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8f6:	f7f5 fcd1 	bl	800029c <__adddf3>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	460c      	mov	r4, r1
 800a8fe:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800a902:	e9c2 3400 	strd	r3, r4, [r2]
    a22 = rtDW.Pz - rtDW.DataStoreReadX_m[0];
 800a906:	1d3b      	adds	r3, r7, #4
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f503 6338 	add.w	r3, r3, #2944	; 0xb80
 800a90e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a912:	1d3b      	adds	r3, r7, #4
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 800a91a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a91e:	461a      	mov	r2, r3
 800a920:	4623      	mov	r3, r4
 800a922:	f7f5 fcb9 	bl	8000298 <__aeabi_dsub>
 800a926:	4603      	mov	r3, r0
 800a928:	460c      	mov	r4, r1
 800a92a:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a92e:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800a932:	2300      	movs	r3, #0
 800a934:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a938:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	f300 80a3 	bgt.w	800aa88 <_ZN27positionEstimatorModelClass4stepEv+0x3168>
      u = rtDW.P_c[i] * dHdx_1[0];
 800a942:	1d3b      	adds	r3, r7, #4
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a94a:	33f4      	adds	r3, #244	; 0xf4
 800a94c:	00db      	lsls	r3, r3, #3
 800a94e:	4413      	add	r3, r2
 800a950:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a954:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a958:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a95c:	461a      	mov	r2, r3
 800a95e:	4623      	mov	r3, r4
 800a960:	f7f5 fe52 	bl	8000608 <__aeabi_dmul>
 800a964:	4603      	mov	r3, r0
 800a966:	460c      	mov	r4, r1
 800a968:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a96c:	e9c2 3400 	strd	r3, r4, [r2]
      u += rtDW.P_c[i + 3] * dHdx_1[1];
 800a970:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a974:	3303      	adds	r3, #3
 800a976:	1d3a      	adds	r2, r7, #4
 800a978:	6812      	ldr	r2, [r2, #0]
 800a97a:	33f4      	adds	r3, #244	; 0xf4
 800a97c:	00db      	lsls	r3, r3, #3
 800a97e:	4413      	add	r3, r2
 800a980:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a984:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a988:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800a98c:	461a      	mov	r2, r3
 800a98e:	4623      	mov	r3, r4
 800a990:	f7f5 fe3a 	bl	8000608 <__aeabi_dmul>
 800a994:	4603      	mov	r3, r0
 800a996:	460c      	mov	r4, r1
 800a998:	461a      	mov	r2, r3
 800a99a:	4623      	mov	r3, r4
 800a99c:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a9a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9a4:	f7f5 fc7a 	bl	800029c <__adddf3>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	460c      	mov	r4, r1
 800a9ac:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a9b0:	e9c2 3400 	strd	r3, r4, [r2]
      u += rtDW.P_c[i + 6] * dHdx_1[2];
 800a9b4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a9b8:	3306      	adds	r3, #6
 800a9ba:	1d3a      	adds	r2, r7, #4
 800a9bc:	6812      	ldr	r2, [r2, #0]
 800a9be:	33f4      	adds	r3, #244	; 0xf4
 800a9c0:	00db      	lsls	r3, r3, #3
 800a9c2:	4413      	add	r3, r2
 800a9c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a9c8:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800a9cc:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	4623      	mov	r3, r4
 800a9d4:	f7f5 fe18 	bl	8000608 <__aeabi_dmul>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	460c      	mov	r4, r1
 800a9dc:	461a      	mov	r2, r3
 800a9de:	4623      	mov	r3, r4
 800a9e0:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800a9e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9e8:	f7f5 fc58 	bl	800029c <__adddf3>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a9f4:	e9c2 3400 	strd	r3, r4, [r2]
      u /= epsilon;
 800a9f8:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800a9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa00:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800aa04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa08:	f7f5 ff28 	bl	800085c <__aeabi_ddiv>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	460c      	mov	r4, r1
 800aa10:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800aa14:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.xNew_g1[i] = u * a22 + rtDW.DataStoreReadX_m[i];
 800aa18:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800aa1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa20:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800aa24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa28:	f7f5 fdee 	bl	8000608 <__aeabi_dmul>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	460c      	mov	r4, r1
 800aa30:	4618      	mov	r0, r3
 800aa32:	4621      	mov	r1, r4
 800aa34:	1d3b      	adds	r3, r7, #4
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aa3c:	33ee      	adds	r3, #238	; 0xee
 800aa3e:	00db      	lsls	r3, r3, #3
 800aa40:	4413      	add	r3, r2
 800aa42:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa46:	461a      	mov	r2, r3
 800aa48:	4623      	mov	r3, r4
 800aa4a:	f7f5 fc27 	bl	800029c <__adddf3>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	460c      	mov	r4, r1
 800aa52:	1d3a      	adds	r2, r7, #4
 800aa54:	6811      	ldr	r1, [r2, #0]
 800aa56:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800aa5a:	32f1      	adds	r2, #241	; 0xf1
 800aa5c:	00d2      	lsls	r2, r2, #3
 800aa5e:	440a      	add	r2, r1
 800aa60:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_0[i] = u;
 800aa64:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 800aa68:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aa6c:	00db      	lsls	r3, r3, #3
 800aa6e:	441a      	add	r2, r3
 800aa70:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800aa74:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa78:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800aa7c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aa80:	3301      	adds	r3, #1
 800aa82:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800aa86:	e757      	b.n	800a938 <_ZN27positionEstimatorModelClass4stepEv+0x3018>
    }

    for (r1 = 0; r1 < 3; r1++) {
 800aa88:	2300      	movs	r3, #0
 800aa8a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800aa8e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	dc5a      	bgt.n	800ab4c <_ZN27positionEstimatorModelClass4stepEv+0x322c>
      u = dHdx_1[r1];
 800aa96:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800aa9a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800aa9e:	00db      	lsls	r3, r3, #3
 800aaa0:	4413      	add	r3, r2
 800aaa2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aaa6:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800aaaa:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1] = imvec_0[0] * u;
 800aaae:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800aab2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aab6:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800aaba:	4613      	mov	r3, r2
 800aabc:	005b      	lsls	r3, r3, #1
 800aabe:	189d      	adds	r5, r3, r2
 800aac0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800aac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac8:	f7f5 fd9e 	bl	8000608 <__aeabi_dmul>
 800aacc:	4603      	mov	r3, r0
 800aace:	460c      	mov	r4, r1
 800aad0:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 800aad4:	00ea      	lsls	r2, r5, #3
 800aad6:	440a      	add	r2, r1
 800aad8:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1 + 1] = imvec_0[1] * u;
 800aadc:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800aae0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800aae4:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800aae8:	4613      	mov	r3, r2
 800aaea:	005b      	lsls	r3, r3, #1
 800aaec:	4413      	add	r3, r2
 800aaee:	1c5d      	adds	r5, r3, #1
 800aaf0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf8:	f7f5 fd86 	bl	8000608 <__aeabi_dmul>
 800aafc:	4603      	mov	r3, r0
 800aafe:	460c      	mov	r4, r1
 800ab00:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 800ab04:	00ea      	lsls	r2, r5, #3
 800ab06:	440a      	add	r2, r1
 800ab08:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1 + 2] = imvec_0[2] * u;
 800ab0c:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800ab10:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ab14:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800ab18:	4613      	mov	r3, r2
 800ab1a:	005b      	lsls	r3, r3, #1
 800ab1c:	4413      	add	r3, r2
 800ab1e:	1c9d      	adds	r5, r3, #2
 800ab20:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab28:	f7f5 fd6e 	bl	8000608 <__aeabi_dmul>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	460c      	mov	r4, r1
 800ab30:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 800ab34:	00ea      	lsls	r2, r5, #3
 800ab36:	440a      	add	r2, r1
 800ab38:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 800ab3c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ab40:	3301      	adds	r3, #1
 800ab42:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800ab46:	e7a2      	b.n	800aa8e <_ZN27positionEstimatorModelClass4stepEv+0x316e>
 800ab48:	200002b0 	.word	0x200002b0
    }

    for (r1 = 0; r1 < 3; r1++) {
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800ab52:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	f300 80ab 	bgt.w	800acb2 <_ZN27positionEstimatorModelClass4stepEv+0x3392>
      for (i = 0; i < 3; i++) {
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800ab62:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	f300 809d 	bgt.w	800aca6 <_ZN27positionEstimatorModelClass4stepEv+0x3386>
        u = rtDW.P_c[3 * r1] * imvec_1[i];
 800ab6c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800ab70:	4613      	mov	r3, r2
 800ab72:	005b      	lsls	r3, r3, #1
 800ab74:	4413      	add	r3, r2
 800ab76:	1d3a      	adds	r2, r7, #4
 800ab78:	6812      	ldr	r2, [r2, #0]
 800ab7a:	33f4      	adds	r3, #244	; 0xf4
 800ab7c:	00db      	lsls	r3, r3, #3
 800ab7e:	4413      	add	r3, r2
 800ab80:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ab84:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800ab88:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ab8c:	00db      	lsls	r3, r3, #3
 800ab8e:	4413      	add	r3, r2
 800ab90:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab94:	461a      	mov	r2, r3
 800ab96:	4623      	mov	r3, r4
 800ab98:	f7f5 fd36 	bl	8000608 <__aeabi_dmul>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	460c      	mov	r4, r1
 800aba0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800aba4:	e9c2 3400 	strd	r3, r4, [r2]
        u += rtDW.P_c[3 * r1 + 1] * imvec_1[i + 3];
 800aba8:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800abac:	4613      	mov	r3, r2
 800abae:	005b      	lsls	r3, r3, #1
 800abb0:	4413      	add	r3, r2
 800abb2:	3301      	adds	r3, #1
 800abb4:	1d3a      	adds	r2, r7, #4
 800abb6:	6812      	ldr	r2, [r2, #0]
 800abb8:	33f4      	adds	r3, #244	; 0xf4
 800abba:	00db      	lsls	r3, r3, #3
 800abbc:	4413      	add	r3, r2
 800abbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800abc2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800abc6:	3303      	adds	r3, #3
 800abc8:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800abcc:	00db      	lsls	r3, r3, #3
 800abce:	4413      	add	r3, r2
 800abd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800abd4:	461a      	mov	r2, r3
 800abd6:	4623      	mov	r3, r4
 800abd8:	f7f5 fd16 	bl	8000608 <__aeabi_dmul>
 800abdc:	4603      	mov	r3, r0
 800abde:	460c      	mov	r4, r1
 800abe0:	461a      	mov	r2, r3
 800abe2:	4623      	mov	r3, r4
 800abe4:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800abe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abec:	f7f5 fb56 	bl	800029c <__adddf3>
 800abf0:	4603      	mov	r3, r0
 800abf2:	460c      	mov	r4, r1
 800abf4:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800abf8:	e9c2 3400 	strd	r3, r4, [r2]
        u += rtDW.P_c[3 * r1 + 2] * imvec_1[i + 6];
 800abfc:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800ac00:	4613      	mov	r3, r2
 800ac02:	005b      	lsls	r3, r3, #1
 800ac04:	4413      	add	r3, r2
 800ac06:	3302      	adds	r3, #2
 800ac08:	1d3a      	adds	r2, r7, #4
 800ac0a:	6812      	ldr	r2, [r2, #0]
 800ac0c:	33f4      	adds	r3, #244	; 0xf4
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	4413      	add	r3, r2
 800ac12:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac16:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ac1a:	3306      	adds	r3, #6
 800ac1c:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800ac20:	00db      	lsls	r3, r3, #3
 800ac22:	4413      	add	r3, r2
 800ac24:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac28:	461a      	mov	r2, r3
 800ac2a:	4623      	mov	r3, r4
 800ac2c:	f7f5 fcec 	bl	8000608 <__aeabi_dmul>
 800ac30:	4603      	mov	r3, r0
 800ac32:	460c      	mov	r4, r1
 800ac34:	461a      	mov	r2, r3
 800ac36:	4623      	mov	r3, r4
 800ac38:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800ac3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac40:	f7f5 fb2c 	bl	800029c <__adddf3>
 800ac44:	4603      	mov	r3, r0
 800ac46:	460c      	mov	r4, r1
 800ac48:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800ac4c:	e9c2 3400 	strd	r3, r4, [r2]
        a[i + 3 * r1] = rtDW.P_c[3 * r1 + i] - u;
 800ac50:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800ac54:	4613      	mov	r3, r2
 800ac56:	005b      	lsls	r3, r3, #1
 800ac58:	441a      	add	r2, r3
 800ac5a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ac5e:	4413      	add	r3, r2
 800ac60:	1d3a      	adds	r2, r7, #4
 800ac62:	6812      	ldr	r2, [r2, #0]
 800ac64:	33f4      	adds	r3, #244	; 0xf4
 800ac66:	00db      	lsls	r3, r3, #3
 800ac68:	4413      	add	r3, r2
 800ac6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac6e:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800ac72:	4613      	mov	r3, r2
 800ac74:	005b      	lsls	r3, r3, #1
 800ac76:	441a      	add	r2, r3
 800ac78:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ac7c:	18d5      	adds	r5, r2, r3
 800ac7e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800ac82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac86:	f7f5 fb07 	bl	8000298 <__aeabi_dsub>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	460c      	mov	r4, r1
 800ac8e:	f507 7124 	add.w	r1, r7, #656	; 0x290
 800ac92:	00ea      	lsls	r2, r5, #3
 800ac94:	440a      	add	r2, r1
 800ac96:	e9c2 3400 	strd	r3, r4, [r2]
      for (i = 0; i < 3; i++) {
 800ac9a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ac9e:	3301      	adds	r3, #1
 800aca0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800aca4:	e75d      	b.n	800ab62 <_ZN27positionEstimatorModelClass4stepEv+0x3242>
    for (r1 = 0; r1 < 3; r1++) {
 800aca6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800acaa:	3301      	adds	r3, #1
 800acac:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800acb0:	e74f      	b.n	800ab52 <_ZN27positionEstimatorModelClass4stepEv+0x3232>
      }
    }

    for (i = 0; i < 9; i++) {
 800acb2:	2300      	movs	r3, #0
 800acb4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800acb8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800acbc:	2b08      	cmp	r3, #8
 800acbe:	dc29      	bgt.n	800ad14 <_ZN27positionEstimatorModelClass4stepEv+0x33f4>
      rtDW.P_c[i] = a[i];
 800acc0:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800acc4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800acc8:	00db      	lsls	r3, r3, #3
 800acca:	4413      	add	r3, r2
 800accc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800acd0:	1d3a      	adds	r2, r7, #4
 800acd2:	6811      	ldr	r1, [r2, #0]
 800acd4:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800acd8:	32f4      	adds	r2, #244	; 0xf4
 800acda:	00d2      	lsls	r2, r2, #3
 800acdc:	440a      	add	r2, r1
 800acde:	e9c2 3400 	strd	r3, r4, [r2]

      // DataStoreWrite: '<S5>/Data Store WriteP'
      rtDW.P_i_m[i] = rtDW.P_c[i];
 800ace2:	1d3b      	adds	r3, r7, #4
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800acea:	33f4      	adds	r3, #244	; 0xf4
 800acec:	00db      	lsls	r3, r3, #3
 800acee:	4413      	add	r3, r2
 800acf0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800acf4:	1d3a      	adds	r2, r7, #4
 800acf6:	6811      	ldr	r1, [r2, #0]
 800acf8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800acfc:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800ad00:	00d2      	lsls	r2, r2, #3
 800ad02:	440a      	add	r2, r1
 800ad04:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 800ad08:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800ad12:	e7d1      	b.n	800acb8 <_ZN27positionEstimatorModelClass4stepEv+0x3398>
    }

    // DataStoreWrite: '<S5>/Data Store WriteX'
    rtDW.x[0] = rtDW.xNew_g1[0];
 800ad14:	1d3b      	adds	r3, r7, #4
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 800ad1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad20:	1d3a      	adds	r2, r7, #4
 800ad22:	6812      	ldr	r2, [r2, #0]
 800ad24:	f602 02a8 	addw	r2, r2, #2216	; 0x8a8
 800ad28:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[1] = rtDW.xNew_g1[1];
 800ad2c:	1d3b      	adds	r3, r7, #4
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 800ad34:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad38:	1d3a      	adds	r2, r7, #4
 800ad3a:	6812      	ldr	r2, [r2, #0]
 800ad3c:	f502 620b 	add.w	r2, r2, #2224	; 0x8b0
 800ad40:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[2] = rtDW.xNew_g1[2];
 800ad44:	1d3b      	adds	r3, r7, #4
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 800ad4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad50:	1d3a      	adds	r2, r7, #4
 800ad52:	6812      	ldr	r2, [r2, #0]
 800ad54:	f602 02b8 	addw	r2, r2, #2232	; 0x8b8
 800ad58:	e9c2 3400 	strd	r3, r4, [r2]
  // End of Outputs for SubSystem: '<S1>/Correct2'

  // DataTypeConversion: '<S1>/DataTypeConversion_Enable3' incorporates:
  //   Inport: '<Root>/BaroFlag'

  rtDW.DataTypeConversion_Enable3 = (rtU.BaroFlag != 0.0);
 800ad5c:	1d3b      	adds	r3, r7, #4
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800ad64:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ad68:	2301      	movs	r3, #1
 800ad6a:	461c      	mov	r4, r3
 800ad6c:	f04f 0200 	mov.w	r2, #0
 800ad70:	f04f 0300 	mov.w	r3, #0
 800ad74:	f7f5 feb0 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d001      	beq.n	800ad82 <_ZN27positionEstimatorModelClass4stepEv+0x3462>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	461c      	mov	r4, r3
 800ad82:	b2e3      	uxtb	r3, r4
 800ad84:	461a      	mov	r2, r3
 800ad86:	1d3b      	adds	r3, r7, #4
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f883 2c41 	strb.w	r2, [r3, #3137]	; 0xc41

  // Outputs for Enabled SubSystem: '<S1>/Correct3' incorporates:
  //   EnablePort: '<S6>/Enable'

  if (rtDW.DataTypeConversion_Enable3) {
 800ad8e:	1d3b      	adds	r3, r7, #4
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f893 3c41 	ldrb.w	r3, [r3, #3137]	; 0xc41
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f000 83d8 	beq.w	800b54c <_ZN27positionEstimatorModelClass4stepEv+0x3c2c>
    // DataStoreRead: '<S6>/Data Store ReadX'
    rtDW.DataStoreReadX_i[0] = rtDW.x[0];
 800ad9c:	1d3b      	adds	r3, r7, #4
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 800ada4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ada8:	1d3a      	adds	r2, r7, #4
 800adaa:	6812      	ldr	r2, [r2, #0]
 800adac:	f502 62df 	add.w	r2, r2, #1784	; 0x6f8
 800adb0:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_i[1] = rtDW.x[1];
 800adb4:	1d3b      	adds	r3, r7, #4
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 800adbc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800adc0:	1d3a      	adds	r2, r7, #4
 800adc2:	6812      	ldr	r2, [r2, #0]
 800adc4:	f502 62e0 	add.w	r2, r2, #1792	; 0x700
 800adc8:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_i[2] = rtDW.x[2];
 800adcc:	1d3b      	adds	r3, r7, #4
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 800add4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800add8:	1d3a      	adds	r2, r7, #4
 800adda:	6812      	ldr	r2, [r2, #0]
 800addc:	f502 62e1 	add.w	r2, r2, #1800	; 0x708
 800ade0:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S6>/Correct'
    rtDW.blockOrdering_p = rtDW.blockOrdering_n;
 800ade4:	1d3b      	adds	r3, r7, #4
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f893 2c47 	ldrb.w	r2, [r3, #3143]	; 0xc47
 800adec:	1d3b      	adds	r3, r7, #4
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f883 2c46 	strb.w	r2, [r3, #3142]	; 0xc46
    blockOrdering = rtDW.blockOrdering_p;
 800adf4:	1d3b      	adds	r3, r7, #4
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f893 3c46 	ldrb.w	r3, [r3, #3142]	; 0xc46
 800adfc:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering_p = blockOrdering;
 800ae00:	1d3b      	adds	r3, r7, #4
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 800ae08:	f883 2c46 	strb.w	r2, [r3, #3142]	; 0xc46
    for (i = 0; i < 9; i++) {
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800ae12:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae16:	2b08      	cmp	r3, #8
 800ae18:	dc32      	bgt.n	800ae80 <_ZN27positionEstimatorModelClass4stepEv+0x3560>
      // DataStoreRead: '<S6>/Data Store ReadP'
      rtDW.P_a[i] = rtDW.P_i_m[i];
 800ae1a:	1d3b      	adds	r3, r7, #4
 800ae1c:	681a      	ldr	r2, [r3, #0]
 800ae1e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae22:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800ae26:	00db      	lsls	r3, r3, #3
 800ae28:	4413      	add	r3, r2
 800ae2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae2e:	1d3a      	adds	r2, r7, #4
 800ae30:	6811      	ldr	r1, [r2, #0]
 800ae32:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ae36:	32e5      	adds	r2, #229	; 0xe5
 800ae38:	00d2      	lsls	r2, r2, #3
 800ae3a:	440a      	add	r2, r1
 800ae3c:	e9c2 3400 	strd	r3, r4, [r2]

      // MATLAB Function: '<S6>/Correct'
      u = rtDW.P_a[i];
 800ae40:	1d3b      	adds	r3, r7, #4
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae48:	33e5      	adds	r3, #229	; 0xe5
 800ae4a:	00db      	lsls	r3, r3, #3
 800ae4c:	4413      	add	r3, r2
 800ae4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae52:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800ae56:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.P_a[i] = u;
 800ae5a:	1d3b      	adds	r3, r7, #4
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae62:	33e5      	adds	r3, #229	; 0xe5
 800ae64:	00db      	lsls	r3, r3, #3
 800ae66:	441a      	add	r2, r3
 800ae68:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800ae6c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae70:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 800ae74:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae78:	3301      	adds	r3, #1
 800ae7a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800ae7e:	e7c8      	b.n	800ae12 <_ZN27positionEstimatorModelClass4stepEv+0x34f2>
    }

    // MATLAB Function: '<S6>/Correct' incorporates:
    //   Constant: '<S1>/R3'

    for (r1 = 0; r1 < 3; r1++) {
 800ae80:	2300      	movs	r3, #0
 800ae82:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800ae86:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	f300 8088 	bgt.w	800afa0 <_ZN27positionEstimatorModelClass4stepEv+0x3680>
      imvec_0[0] = rtDW.DataStoreReadX_i[0];
 800ae90:	1d3b      	adds	r3, r7, #4
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 800ae98:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae9c:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 800aea0:	e9c2 3400 	strd	r3, r4, [r2]
      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_i[r1]);
 800aea4:	1d3b      	adds	r3, r7, #4
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800aeac:	33df      	adds	r3, #223	; 0xdf
 800aeae:	00db      	lsls	r3, r3, #3
 800aeb0:	4413      	add	r3, r2
 800aeb2:	ed93 7b00 	vldr	d7, [r3]
 800aeb6:	eeb0 0a47 	vmov.f32	s0, s14
 800aeba:	eef0 0a67 	vmov.f32	s1, s15
 800aebe:	f7fb fac8 	bl	8006452 <_ZSt3absd>
 800aec2:	ec51 0b10 	vmov	r0, r1, d0
 800aec6:	f04f 0200 	mov.w	r2, #0
 800aeca:	4b81      	ldr	r3, [pc, #516]	; (800b0d0 <_ZN27positionEstimatorModelClass4stepEv+0x37b0>)
 800aecc:	f7f5 fb9c 	bl	8000608 <__aeabi_dmul>
 800aed0:	4603      	mov	r3, r0
 800aed2:	460c      	mov	r4, r1
 800aed4:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800aed8:	e9c2 3400 	strd	r3, r4, [r2]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 800aedc:	f04f 0200 	mov.w	r2, #0
 800aee0:	4b7b      	ldr	r3, [pc, #492]	; (800b0d0 <_ZN27positionEstimatorModelClass4stepEv+0x37b0>)
 800aee2:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 800aee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeea:	f7f5 fdff 	bl	8000aec <__aeabi_dcmplt>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d108      	bne.n	800af06 <_ZN27positionEstimatorModelClass4stepEv+0x35e6>
 800aef4:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800aef8:	ed93 0b00 	vldr	d0, [r3]
 800aefc:	f7fb fb6c 	bl	80065d8 <rtIsNaN>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <_ZN27positionEstimatorModelClass4stepEv+0x35ea>
 800af06:	2301      	movs	r3, #1
 800af08:	e000      	b.n	800af0c <_ZN27positionEstimatorModelClass4stepEv+0x35ec>
 800af0a:	2300      	movs	r3, #0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d006      	beq.n	800af1e <_ZN27positionEstimatorModelClass4stepEv+0x35fe>
        epsilon = 1.4901161193847656E-8;
 800af10:	f04f 0300 	mov.w	r3, #0
 800af14:	4c6e      	ldr	r4, [pc, #440]	; (800b0d0 <_ZN27positionEstimatorModelClass4stepEv+0x37b0>)
 800af16:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800af1a:	e9c2 3400 	strd	r3, r4, [r2]
      }

      imvec_0[r1] = rtDW.DataStoreReadX_i[r1] + epsilon;
 800af1e:	1d3b      	adds	r3, r7, #4
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800af26:	33df      	adds	r3, #223	; 0xdf
 800af28:	00db      	lsls	r3, r3, #3
 800af2a:	4413      	add	r3, r2
 800af2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800af30:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800af34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af38:	f7f5 f9b0 	bl	800029c <__adddf3>
 800af3c:	4603      	mov	r3, r0
 800af3e:	460c      	mov	r4, r1
 800af40:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 800af44:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800af48:	00d2      	lsls	r2, r2, #3
 800af4a:	440a      	add	r2, r1
 800af4c:	e9c2 3400 	strd	r3, r4, [r2]
      dHdx_1[r1] = (imvec_0[0] - rtDW.DataStoreReadX_i[0]) / epsilon;
 800af50:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800af54:	e9d3 0100 	ldrd	r0, r1, [r3]
 800af58:	1d3b      	adds	r3, r7, #4
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 800af60:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af64:	461a      	mov	r2, r3
 800af66:	4623      	mov	r3, r4
 800af68:	f7f5 f996 	bl	8000298 <__aeabi_dsub>
 800af6c:	4603      	mov	r3, r0
 800af6e:	460c      	mov	r4, r1
 800af70:	4618      	mov	r0, r3
 800af72:	4621      	mov	r1, r4
 800af74:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800af78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7c:	f7f5 fc6e 	bl	800085c <__aeabi_ddiv>
 800af80:	4603      	mov	r3, r0
 800af82:	460c      	mov	r4, r1
 800af84:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 800af88:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800af8c:	00d2      	lsls	r2, r2, #3
 800af8e:	440a      	add	r2, r1
 800af90:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 800af94:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800af98:	3301      	adds	r3, #1
 800af9a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800af9e:	e772      	b.n	800ae86 <_ZN27positionEstimatorModelClass4stepEv+0x3566>
    }

    u = 0.0;
 800afa0:	f04f 0300 	mov.w	r3, #0
 800afa4:	f04f 0400 	mov.w	r4, #0
 800afa8:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800afac:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 800afb0:	2300      	movs	r3, #0
 800afb2:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800afb6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800afba:	2b02      	cmp	r3, #2
 800afbc:	f300 808a 	bgt.w	800b0d4 <_ZN27positionEstimatorModelClass4stepEv+0x37b4>
      a22 = rtDW.P_a[3 * r1] * dHdx_1[0];
 800afc0:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800afc4:	4613      	mov	r3, r2
 800afc6:	005b      	lsls	r3, r3, #1
 800afc8:	4413      	add	r3, r2
 800afca:	1d3a      	adds	r2, r7, #4
 800afcc:	6812      	ldr	r2, [r2, #0]
 800afce:	33e5      	adds	r3, #229	; 0xe5
 800afd0:	00db      	lsls	r3, r3, #3
 800afd2:	4413      	add	r3, r2
 800afd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800afd8:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800afdc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800afe0:	461a      	mov	r2, r3
 800afe2:	4623      	mov	r3, r4
 800afe4:	f7f5 fb10 	bl	8000608 <__aeabi_dmul>
 800afe8:	4603      	mov	r3, r0
 800afea:	460c      	mov	r4, r1
 800afec:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800aff0:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_a[3 * r1 + 1] * dHdx_1[1];
 800aff4:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800aff8:	4613      	mov	r3, r2
 800affa:	005b      	lsls	r3, r3, #1
 800affc:	4413      	add	r3, r2
 800affe:	3301      	adds	r3, #1
 800b000:	1d3a      	adds	r2, r7, #4
 800b002:	6812      	ldr	r2, [r2, #0]
 800b004:	33e5      	adds	r3, #229	; 0xe5
 800b006:	00db      	lsls	r3, r3, #3
 800b008:	4413      	add	r3, r2
 800b00a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b00e:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800b012:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800b016:	461a      	mov	r2, r3
 800b018:	4623      	mov	r3, r4
 800b01a:	f7f5 faf5 	bl	8000608 <__aeabi_dmul>
 800b01e:	4603      	mov	r3, r0
 800b020:	460c      	mov	r4, r1
 800b022:	461a      	mov	r2, r3
 800b024:	4623      	mov	r3, r4
 800b026:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800b02a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b02e:	f7f5 f935 	bl	800029c <__adddf3>
 800b032:	4603      	mov	r3, r0
 800b034:	460c      	mov	r4, r1
 800b036:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b03a:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_a[3 * r1 + 2] * dHdx_1[2];
 800b03e:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800b042:	4613      	mov	r3, r2
 800b044:	005b      	lsls	r3, r3, #1
 800b046:	4413      	add	r3, r2
 800b048:	3302      	adds	r3, #2
 800b04a:	1d3a      	adds	r2, r7, #4
 800b04c:	6812      	ldr	r2, [r2, #0]
 800b04e:	33e5      	adds	r3, #229	; 0xe5
 800b050:	00db      	lsls	r3, r3, #3
 800b052:	4413      	add	r3, r2
 800b054:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b058:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800b05c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800b060:	461a      	mov	r2, r3
 800b062:	4623      	mov	r3, r4
 800b064:	f7f5 fad0 	bl	8000608 <__aeabi_dmul>
 800b068:	4603      	mov	r3, r0
 800b06a:	460c      	mov	r4, r1
 800b06c:	461a      	mov	r2, r3
 800b06e:	4623      	mov	r3, r4
 800b070:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800b074:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b078:	f7f5 f910 	bl	800029c <__adddf3>
 800b07c:	4603      	mov	r3, r0
 800b07e:	460c      	mov	r4, r1
 800b080:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b084:	e9c2 3400 	strd	r3, r4, [r2]
      u += a22 * dHdx_1[r1];
 800b088:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800b08c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b090:	00db      	lsls	r3, r3, #3
 800b092:	4413      	add	r3, r2
 800b094:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b098:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800b09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a0:	f7f5 fab2 	bl	8000608 <__aeabi_dmul>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	460c      	mov	r4, r1
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	4623      	mov	r3, r4
 800b0ac:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800b0b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0b4:	f7f5 f8f2 	bl	800029c <__adddf3>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	460c      	mov	r4, r1
 800b0bc:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800b0c0:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 800b0c4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800b0ce:	e772      	b.n	800afb6 <_ZN27positionEstimatorModelClass4stepEv+0x3696>
 800b0d0:	3e500000 	.word	0x3e500000
    }

    epsilon = u + rtP.R3_Value;
 800b0d4:	4b98      	ldr	r3, [pc, #608]	; (800b338 <_ZN27positionEstimatorModelClass4stepEv+0x3a18>)
 800b0d6:	e9d3 3478 	ldrd	r3, r4, [r3, #480]	; 0x1e0
 800b0da:	461a      	mov	r2, r3
 800b0dc:	4623      	mov	r3, r4
 800b0de:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800b0e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0e6:	f7f5 f8d9 	bl	800029c <__adddf3>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	460c      	mov	r4, r1
 800b0ee:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800b0f2:	e9c2 3400 	strd	r3, r4, [r2]
    a22 = rtDW.NED_convert - rtDW.DataStoreReadX_i[0];
 800b0f6:	1d3b      	adds	r3, r7, #4
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 800b0fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b102:	1d3b      	adds	r3, r7, #4
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 800b10a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b10e:	461a      	mov	r2, r3
 800b110:	4623      	mov	r3, r4
 800b112:	f7f5 f8c1 	bl	8000298 <__aeabi_dsub>
 800b116:	4603      	mov	r3, r0
 800b118:	460c      	mov	r4, r1
 800b11a:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b11e:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800b122:	2300      	movs	r3, #0
 800b124:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b128:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b12c:	2b02      	cmp	r3, #2
 800b12e:	f300 80a3 	bgt.w	800b278 <_ZN27positionEstimatorModelClass4stepEv+0x3958>
      u = rtDW.P_a[i] * dHdx_1[0];
 800b132:	1d3b      	adds	r3, r7, #4
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b13a:	33e5      	adds	r3, #229	; 0xe5
 800b13c:	00db      	lsls	r3, r3, #3
 800b13e:	4413      	add	r3, r2
 800b140:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b144:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800b148:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b14c:	461a      	mov	r2, r3
 800b14e:	4623      	mov	r3, r4
 800b150:	f7f5 fa5a 	bl	8000608 <__aeabi_dmul>
 800b154:	4603      	mov	r3, r0
 800b156:	460c      	mov	r4, r1
 800b158:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800b15c:	e9c2 3400 	strd	r3, r4, [r2]
      u += rtDW.P_a[i + 3] * dHdx_1[1];
 800b160:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b164:	3303      	adds	r3, #3
 800b166:	1d3a      	adds	r2, r7, #4
 800b168:	6812      	ldr	r2, [r2, #0]
 800b16a:	33e5      	adds	r3, #229	; 0xe5
 800b16c:	00db      	lsls	r3, r3, #3
 800b16e:	4413      	add	r3, r2
 800b170:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b174:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800b178:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800b17c:	461a      	mov	r2, r3
 800b17e:	4623      	mov	r3, r4
 800b180:	f7f5 fa42 	bl	8000608 <__aeabi_dmul>
 800b184:	4603      	mov	r3, r0
 800b186:	460c      	mov	r4, r1
 800b188:	461a      	mov	r2, r3
 800b18a:	4623      	mov	r3, r4
 800b18c:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800b190:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b194:	f7f5 f882 	bl	800029c <__adddf3>
 800b198:	4603      	mov	r3, r0
 800b19a:	460c      	mov	r4, r1
 800b19c:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800b1a0:	e9c2 3400 	strd	r3, r4, [r2]
      u += rtDW.P_a[i + 6] * dHdx_1[2];
 800b1a4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b1a8:	3306      	adds	r3, #6
 800b1aa:	1d3a      	adds	r2, r7, #4
 800b1ac:	6812      	ldr	r2, [r2, #0]
 800b1ae:	33e5      	adds	r3, #229	; 0xe5
 800b1b0:	00db      	lsls	r3, r3, #3
 800b1b2:	4413      	add	r3, r2
 800b1b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b1b8:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800b1bc:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	4623      	mov	r3, r4
 800b1c4:	f7f5 fa20 	bl	8000608 <__aeabi_dmul>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	460c      	mov	r4, r1
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	4623      	mov	r3, r4
 800b1d0:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800b1d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1d8:	f7f5 f860 	bl	800029c <__adddf3>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	460c      	mov	r4, r1
 800b1e0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800b1e4:	e9c2 3400 	strd	r3, r4, [r2]
      u /= epsilon;
 800b1e8:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800b1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f0:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800b1f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1f8:	f7f5 fb30 	bl	800085c <__aeabi_ddiv>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	460c      	mov	r4, r1
 800b200:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800b204:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.xNew_p[i] = u * a22 + rtDW.DataStoreReadX_i[i];
 800b208:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800b20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b210:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800b214:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b218:	f7f5 f9f6 	bl	8000608 <__aeabi_dmul>
 800b21c:	4603      	mov	r3, r0
 800b21e:	460c      	mov	r4, r1
 800b220:	4618      	mov	r0, r3
 800b222:	4621      	mov	r1, r4
 800b224:	1d3b      	adds	r3, r7, #4
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b22c:	33df      	adds	r3, #223	; 0xdf
 800b22e:	00db      	lsls	r3, r3, #3
 800b230:	4413      	add	r3, r2
 800b232:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b236:	461a      	mov	r2, r3
 800b238:	4623      	mov	r3, r4
 800b23a:	f7f5 f82f 	bl	800029c <__adddf3>
 800b23e:	4603      	mov	r3, r0
 800b240:	460c      	mov	r4, r1
 800b242:	1d3a      	adds	r2, r7, #4
 800b244:	6811      	ldr	r1, [r2, #0]
 800b246:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b24a:	32e2      	adds	r2, #226	; 0xe2
 800b24c:	00d2      	lsls	r2, r2, #3
 800b24e:	440a      	add	r2, r1
 800b250:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_0[i] = u;
 800b254:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 800b258:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b25c:	00db      	lsls	r3, r3, #3
 800b25e:	441a      	add	r2, r3
 800b260:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800b264:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b268:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800b26c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b270:	3301      	adds	r3, #1
 800b272:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b276:	e757      	b.n	800b128 <_ZN27positionEstimatorModelClass4stepEv+0x3808>
    }

    for (r1 = 0; r1 < 3; r1++) {
 800b278:	2300      	movs	r3, #0
 800b27a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800b27e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b282:	2b02      	cmp	r3, #2
 800b284:	dc5a      	bgt.n	800b33c <_ZN27positionEstimatorModelClass4stepEv+0x3a1c>
      u = dHdx_1[r1];
 800b286:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800b28a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b28e:	00db      	lsls	r3, r3, #3
 800b290:	4413      	add	r3, r2
 800b292:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b296:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800b29a:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1] = imvec_0[0] * u;
 800b29e:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800b2a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b2a6:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	005b      	lsls	r3, r3, #1
 800b2ae:	189d      	adds	r5, r3, r2
 800b2b0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800b2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b8:	f7f5 f9a6 	bl	8000608 <__aeabi_dmul>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	460c      	mov	r4, r1
 800b2c0:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 800b2c4:	00ea      	lsls	r2, r5, #3
 800b2c6:	440a      	add	r2, r1
 800b2c8:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1 + 1] = imvec_0[1] * u;
 800b2cc:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800b2d0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b2d4:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800b2d8:	4613      	mov	r3, r2
 800b2da:	005b      	lsls	r3, r3, #1
 800b2dc:	4413      	add	r3, r2
 800b2de:	1c5d      	adds	r5, r3, #1
 800b2e0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800b2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e8:	f7f5 f98e 	bl	8000608 <__aeabi_dmul>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	460c      	mov	r4, r1
 800b2f0:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 800b2f4:	00ea      	lsls	r2, r5, #3
 800b2f6:	440a      	add	r2, r1
 800b2f8:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1 + 2] = imvec_0[2] * u;
 800b2fc:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800b300:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b304:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800b308:	4613      	mov	r3, r2
 800b30a:	005b      	lsls	r3, r3, #1
 800b30c:	4413      	add	r3, r2
 800b30e:	1c9d      	adds	r5, r3, #2
 800b310:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800b314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b318:	f7f5 f976 	bl	8000608 <__aeabi_dmul>
 800b31c:	4603      	mov	r3, r0
 800b31e:	460c      	mov	r4, r1
 800b320:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 800b324:	00ea      	lsls	r2, r5, #3
 800b326:	440a      	add	r2, r1
 800b328:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 800b32c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b330:	3301      	adds	r3, #1
 800b332:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800b336:	e7a2      	b.n	800b27e <_ZN27positionEstimatorModelClass4stepEv+0x395e>
 800b338:	200002b0 	.word	0x200002b0
    }

    for (r1 = 0; r1 < 3; r1++) {
 800b33c:	2300      	movs	r3, #0
 800b33e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800b342:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b346:	2b02      	cmp	r3, #2
 800b348:	f300 80ab 	bgt.w	800b4a2 <_ZN27positionEstimatorModelClass4stepEv+0x3b82>
      for (i = 0; i < 3; i++) {
 800b34c:	2300      	movs	r3, #0
 800b34e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b352:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b356:	2b02      	cmp	r3, #2
 800b358:	f300 809d 	bgt.w	800b496 <_ZN27positionEstimatorModelClass4stepEv+0x3b76>
        u = rtDW.P_a[3 * r1] * imvec_1[i];
 800b35c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800b360:	4613      	mov	r3, r2
 800b362:	005b      	lsls	r3, r3, #1
 800b364:	4413      	add	r3, r2
 800b366:	1d3a      	adds	r2, r7, #4
 800b368:	6812      	ldr	r2, [r2, #0]
 800b36a:	33e5      	adds	r3, #229	; 0xe5
 800b36c:	00db      	lsls	r3, r3, #3
 800b36e:	4413      	add	r3, r2
 800b370:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b374:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800b378:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b37c:	00db      	lsls	r3, r3, #3
 800b37e:	4413      	add	r3, r2
 800b380:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b384:	461a      	mov	r2, r3
 800b386:	4623      	mov	r3, r4
 800b388:	f7f5 f93e 	bl	8000608 <__aeabi_dmul>
 800b38c:	4603      	mov	r3, r0
 800b38e:	460c      	mov	r4, r1
 800b390:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800b394:	e9c2 3400 	strd	r3, r4, [r2]
        u += rtDW.P_a[3 * r1 + 1] * imvec_1[i + 3];
 800b398:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800b39c:	4613      	mov	r3, r2
 800b39e:	005b      	lsls	r3, r3, #1
 800b3a0:	4413      	add	r3, r2
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	1d3a      	adds	r2, r7, #4
 800b3a6:	6812      	ldr	r2, [r2, #0]
 800b3a8:	33e5      	adds	r3, #229	; 0xe5
 800b3aa:	00db      	lsls	r3, r3, #3
 800b3ac:	4413      	add	r3, r2
 800b3ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b3b2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b3b6:	3303      	adds	r3, #3
 800b3b8:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800b3bc:	00db      	lsls	r3, r3, #3
 800b3be:	4413      	add	r3, r2
 800b3c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	4623      	mov	r3, r4
 800b3c8:	f7f5 f91e 	bl	8000608 <__aeabi_dmul>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	460c      	mov	r4, r1
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	4623      	mov	r3, r4
 800b3d4:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800b3d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3dc:	f7f4 ff5e 	bl	800029c <__adddf3>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800b3e8:	e9c2 3400 	strd	r3, r4, [r2]
        u += rtDW.P_a[3 * r1 + 2] * imvec_1[i + 6];
 800b3ec:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	005b      	lsls	r3, r3, #1
 800b3f4:	4413      	add	r3, r2
 800b3f6:	3302      	adds	r3, #2
 800b3f8:	1d3a      	adds	r2, r7, #4
 800b3fa:	6812      	ldr	r2, [r2, #0]
 800b3fc:	33e5      	adds	r3, #229	; 0xe5
 800b3fe:	00db      	lsls	r3, r3, #3
 800b400:	4413      	add	r3, r2
 800b402:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b406:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b40a:	3306      	adds	r3, #6
 800b40c:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800b410:	00db      	lsls	r3, r3, #3
 800b412:	4413      	add	r3, r2
 800b414:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b418:	461a      	mov	r2, r3
 800b41a:	4623      	mov	r3, r4
 800b41c:	f7f5 f8f4 	bl	8000608 <__aeabi_dmul>
 800b420:	4603      	mov	r3, r0
 800b422:	460c      	mov	r4, r1
 800b424:	461a      	mov	r2, r3
 800b426:	4623      	mov	r3, r4
 800b428:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800b42c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b430:	f7f4 ff34 	bl	800029c <__adddf3>
 800b434:	4603      	mov	r3, r0
 800b436:	460c      	mov	r4, r1
 800b438:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800b43c:	e9c2 3400 	strd	r3, r4, [r2]
        a[i + 3 * r1] = rtDW.P_a[3 * r1 + i] - u;
 800b440:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800b444:	4613      	mov	r3, r2
 800b446:	005b      	lsls	r3, r3, #1
 800b448:	441a      	add	r2, r3
 800b44a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b44e:	4413      	add	r3, r2
 800b450:	1d3a      	adds	r2, r7, #4
 800b452:	6812      	ldr	r2, [r2, #0]
 800b454:	33e5      	adds	r3, #229	; 0xe5
 800b456:	00db      	lsls	r3, r3, #3
 800b458:	4413      	add	r3, r2
 800b45a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b45e:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800b462:	4613      	mov	r3, r2
 800b464:	005b      	lsls	r3, r3, #1
 800b466:	441a      	add	r2, r3
 800b468:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b46c:	18d5      	adds	r5, r2, r3
 800b46e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800b472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b476:	f7f4 ff0f 	bl	8000298 <__aeabi_dsub>
 800b47a:	4603      	mov	r3, r0
 800b47c:	460c      	mov	r4, r1
 800b47e:	f507 7124 	add.w	r1, r7, #656	; 0x290
 800b482:	00ea      	lsls	r2, r5, #3
 800b484:	440a      	add	r2, r1
 800b486:	e9c2 3400 	strd	r3, r4, [r2]
      for (i = 0; i < 3; i++) {
 800b48a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b48e:	3301      	adds	r3, #1
 800b490:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b494:	e75d      	b.n	800b352 <_ZN27positionEstimatorModelClass4stepEv+0x3a32>
    for (r1 = 0; r1 < 3; r1++) {
 800b496:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b49a:	3301      	adds	r3, #1
 800b49c:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800b4a0:	e74f      	b.n	800b342 <_ZN27positionEstimatorModelClass4stepEv+0x3a22>
      }
    }

    for (i = 0; i < 9; i++) {
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b4a8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b4ac:	2b08      	cmp	r3, #8
 800b4ae:	dc29      	bgt.n	800b504 <_ZN27positionEstimatorModelClass4stepEv+0x3be4>
      rtDW.P_a[i] = a[i];
 800b4b0:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800b4b4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b4b8:	00db      	lsls	r3, r3, #3
 800b4ba:	4413      	add	r3, r2
 800b4bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b4c0:	1d3a      	adds	r2, r7, #4
 800b4c2:	6811      	ldr	r1, [r2, #0]
 800b4c4:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b4c8:	32e5      	adds	r2, #229	; 0xe5
 800b4ca:	00d2      	lsls	r2, r2, #3
 800b4cc:	440a      	add	r2, r1
 800b4ce:	e9c2 3400 	strd	r3, r4, [r2]

      // DataStoreWrite: '<S6>/Data Store WriteP'
      rtDW.P_i_m[i] = rtDW.P_a[i];
 800b4d2:	1d3b      	adds	r3, r7, #4
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b4da:	33e5      	adds	r3, #229	; 0xe5
 800b4dc:	00db      	lsls	r3, r3, #3
 800b4de:	4413      	add	r3, r2
 800b4e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b4e4:	1d3a      	adds	r2, r7, #4
 800b4e6:	6811      	ldr	r1, [r2, #0]
 800b4e8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b4ec:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800b4f0:	00d2      	lsls	r2, r2, #3
 800b4f2:	440a      	add	r2, r1
 800b4f4:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 800b4f8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b502:	e7d1      	b.n	800b4a8 <_ZN27positionEstimatorModelClass4stepEv+0x3b88>
    }

    // DataStoreWrite: '<S6>/Data Store WriteX'
    rtDW.x[0] = rtDW.xNew_p[0];
 800b504:	1d3b      	adds	r3, r7, #4
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 800b50c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b510:	1d3a      	adds	r2, r7, #4
 800b512:	6812      	ldr	r2, [r2, #0]
 800b514:	f602 02a8 	addw	r2, r2, #2216	; 0x8a8
 800b518:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[1] = rtDW.xNew_p[1];
 800b51c:	1d3b      	adds	r3, r7, #4
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800b524:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b528:	1d3a      	adds	r2, r7, #4
 800b52a:	6812      	ldr	r2, [r2, #0]
 800b52c:	f502 620b 	add.w	r2, r2, #2224	; 0x8b0
 800b530:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[2] = rtDW.xNew_p[2];
 800b534:	1d3b      	adds	r3, r7, #4
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800b53c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b540:	1d3a      	adds	r2, r7, #4
 800b542:	6812      	ldr	r2, [r2, #0]
 800b544:	f602 02b8 	addw	r2, r2, #2232	; 0x8b8
 800b548:	e9c2 3400 	strd	r3, r4, [r2]

  // End of Outputs for SubSystem: '<S1>/Correct3'

  // Outputs for Atomic SubSystem: '<S1>/Output'
  // DataStoreRead: '<S7>/Data Store Read'
  rtDW.DataStoreRead_f[0] = rtDW.x[0];
 800b54c:	1d3b      	adds	r3, r7, #4
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 800b554:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b558:	1d3a      	adds	r2, r7, #4
 800b55a:	6812      	ldr	r2, [r2, #0]
 800b55c:	f502 62d3 	add.w	r2, r2, #1688	; 0x698
 800b560:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.DataStoreRead_f[1] = rtDW.x[1];
 800b564:	1d3b      	adds	r3, r7, #4
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 800b56c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b570:	1d3a      	adds	r2, r7, #4
 800b572:	6812      	ldr	r2, [r2, #0]
 800b574:	f502 62d4 	add.w	r2, r2, #1696	; 0x6a0
 800b578:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.DataStoreRead_f[2] = rtDW.x[2];
 800b57c:	1d3b      	adds	r3, r7, #4
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 800b584:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b588:	1d3a      	adds	r2, r7, #4
 800b58a:	6812      	ldr	r2, [r2, #0]
 800b58c:	f502 62d5 	add.w	r2, r2, #1704	; 0x6a8
 800b590:	e9c2 3400 	strd	r3, r4, [r2]

  // Inport: '<S7>/uBlockOrdering'
  rtDW.uBlockOrdering_b = rtDW.blockOrdering_p;
 800b594:	1d3b      	adds	r3, r7, #4
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f893 2c46 	ldrb.w	r2, [r3, #3142]	; 0xc46
 800b59c:	1d3b      	adds	r3, r7, #4
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45

  // End of Outputs for SubSystem: '<S1>/Output'

  // Outport: '<Root>/estiZ'
  rtY.estiZ = rtDW.DataStoreRead_f[0];
 800b5a4:	1d3b      	adds	r3, r7, #4
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 800b5ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b5b0:	1d3a      	adds	r2, r7, #4
 800b5b2:	6812      	ldr	r2, [r2, #0]
 800b5b4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800b5b8:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiVX'
  rtY.estiVX = rtDW.DataStoreRead[2];
 800b5bc:	1d3b      	adds	r3, r7, #4
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	e9d3 346c 	ldrd	r3, r4, [r3, #432]	; 0x1b0
 800b5c4:	1d3a      	adds	r2, r7, #4
 800b5c6:	6812      	ldr	r2, [r2, #0]
 800b5c8:	f602 42e8 	addw	r2, r2, #3304	; 0xce8
 800b5cc:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiVY'
  rtY.estiVY = rtDW.DataStoreRead[3];
 800b5d0:	1d3b      	adds	r3, r7, #4
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	e9d3 346e 	ldrd	r3, r4, [r3, #440]	; 0x1b8
 800b5d8:	1d3a      	adds	r2, r7, #4
 800b5da:	6812      	ldr	r2, [r2, #0]
 800b5dc:	f502 624f 	add.w	r2, r2, #3312	; 0xcf0
 800b5e0:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiVZ'
  rtY.estiVZ = rtDW.DataStoreRead_f[1];
 800b5e4:	1d3b      	adds	r3, r7, #4
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800b5ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b5f0:	1d3a      	adds	r2, r7, #4
 800b5f2:	6812      	ldr	r2, [r2, #0]
 800b5f4:	f602 42f8 	addw	r2, r2, #3320	; 0xcf8
 800b5f8:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiAX'
  rtY.estiAX = rtDW.DataStoreRead[4];
 800b5fc:	1d3b      	adds	r3, r7, #4
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	e9d3 3470 	ldrd	r3, r4, [r3, #448]	; 0x1c0
 800b604:	1d3a      	adds	r2, r7, #4
 800b606:	6812      	ldr	r2, [r2, #0]
 800b608:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800b60c:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiAY'
  rtY.estiAY = rtDW.DataStoreRead[5];
 800b610:	1d3b      	adds	r3, r7, #4
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	e9d3 3472 	ldrd	r3, r4, [r3, #456]	; 0x1c8
 800b618:	1d3a      	adds	r2, r7, #4
 800b61a:	6812      	ldr	r2, [r2, #0]
 800b61c:	f602 5208 	addw	r2, r2, #3336	; 0xd08
 800b620:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiAZ'
  rtY.estiAZ = rtDW.DataStoreRead_f[2];
 800b624:	1d3b      	adds	r3, r7, #4
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 800b62c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b630:	1d3a      	adds	r2, r7, #4
 800b632:	6812      	ldr	r2, [r2, #0]
 800b634:	f502 6251 	add.w	r2, r2, #3344	; 0xd10
 800b638:	e9c2 3400 	strd	r3, r4, [r2]

  // Outputs for Atomic SubSystem: '<S1>/Predict'
  // DataStoreRead: '<S8>/Data Store ReadX'
  rtDW.DataStoreReadX_g[0] = rtDW.x[0];
 800b63c:	1d3b      	adds	r3, r7, #4
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 800b644:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b648:	1d3a      	adds	r2, r7, #4
 800b64a:	6812      	ldr	r2, [r2, #0]
 800b64c:	f502 62c4 	add.w	r2, r2, #1568	; 0x620
 800b650:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.DataStoreReadX_g[1] = rtDW.x[1];
 800b654:	1d3b      	adds	r3, r7, #4
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 800b65c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b660:	1d3a      	adds	r2, r7, #4
 800b662:	6812      	ldr	r2, [r2, #0]
 800b664:	f502 62c5 	add.w	r2, r2, #1576	; 0x628
 800b668:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.DataStoreReadX_g[2] = rtDW.x[2];
 800b66c:	1d3b      	adds	r3, r7, #4
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 800b674:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b678:	1d3a      	adds	r2, r7, #4
 800b67a:	6812      	ldr	r2, [r2, #0]
 800b67c:	f502 62c6 	add.w	r2, r2, #1584	; 0x630
 800b680:	e9c2 3400 	strd	r3, r4, [r2]

  // Outputs for Atomic SubSystem: '<S1>/Output'
  for (i = 0; i < 9; i++) {
 800b684:	2300      	movs	r3, #0
 800b686:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b68a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b68e:	2b08      	cmp	r3, #8
 800b690:	dc45      	bgt.n	800b71e <_ZN27positionEstimatorModelClass4stepEv+0x3dfe>
    // DataStoreRead: '<S7>/Data Store Read1'
    rtDW.DataStoreRead1_h[i] = rtDW.P_i_m[i];
 800b692:	1d3b      	adds	r3, r7, #4
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b69a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800b69e:	00db      	lsls	r3, r3, #3
 800b6a0:	4413      	add	r3, r2
 800b6a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b6a6:	1d3a      	adds	r2, r7, #4
 800b6a8:	6811      	ldr	r1, [r2, #0]
 800b6aa:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b6ae:	32d6      	adds	r2, #214	; 0xd6
 800b6b0:	00d2      	lsls	r2, r2, #3
 800b6b2:	440a      	add	r2, r1
 800b6b4:	e9c2 3400 	strd	r3, r4, [r2]

    // DataStoreRead: '<S8>/Data Store ReadP'
    rtDW.P_i[i] = rtDW.P_i_m[i];
 800b6b8:	1d3b      	adds	r3, r7, #4
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b6c0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800b6c4:	00db      	lsls	r3, r3, #3
 800b6c6:	4413      	add	r3, r2
 800b6c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b6cc:	1d3a      	adds	r2, r7, #4
 800b6ce:	6811      	ldr	r1, [r2, #0]
 800b6d0:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b6d4:	32ca      	adds	r2, #202	; 0xca
 800b6d6:	00d2      	lsls	r2, r2, #3
 800b6d8:	440a      	add	r2, r1
 800b6da:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S8>/Predict'
    u = rtDW.P_i[i];
 800b6de:	1d3b      	adds	r3, r7, #4
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b6e6:	33ca      	adds	r3, #202	; 0xca
 800b6e8:	00db      	lsls	r3, r3, #3
 800b6ea:	4413      	add	r3, r2
 800b6ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b6f0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800b6f4:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.P_i[i] = u;
 800b6f8:	1d3b      	adds	r3, r7, #4
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b700:	33ca      	adds	r3, #202	; 0xca
 800b702:	00db      	lsls	r3, r3, #3
 800b704:	441a      	add	r2, r3
 800b706:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800b70a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b70e:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 9; i++) {
 800b712:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b716:	3301      	adds	r3, #1
 800b718:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b71c:	e7b5      	b.n	800b68a <_ZN27positionEstimatorModelClass4stepEv+0x3d6a>
  // End of Outputs for SubSystem: '<S1>/Output'

  // MATLAB Function: '<S8>/Predict' incorporates:
  //   Constant: '<S1>/Q'

  for (r1 = 0; r1 < 3; r1++) {
 800b71e:	2300      	movs	r3, #0
 800b720:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800b724:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b728:	2b02      	cmp	r3, #2
 800b72a:	f300 827d 	bgt.w	800bc28 <_ZN27positionEstimatorModelClass4stepEv+0x4308>
    u = 0.0;
 800b72e:	f04f 0300 	mov.w	r3, #0
 800b732:	f04f 0400 	mov.w	r4, #0
 800b736:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800b73a:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800b73e:	2300      	movs	r3, #0
 800b740:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b744:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b748:	2b02      	cmp	r3, #2
 800b74a:	f300 8129 	bgt.w	800b9a0 <_ZN27positionEstimatorModelClass4stepEv+0x4080>
      u += a_1[3 * i + r1] * rtDW.DataStoreReadX_g[i];
 800b74e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b752:	4613      	mov	r3, r2
 800b754:	005b      	lsls	r3, r3, #1
 800b756:	441a      	add	r2, r3
 800b758:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b75c:	4413      	add	r3, r2
 800b75e:	4a8f      	ldr	r2, [pc, #572]	; (800b99c <_ZN27positionEstimatorModelClass4stepEv+0x407c>)
 800b760:	00db      	lsls	r3, r3, #3
 800b762:	4413      	add	r3, r2
 800b764:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b768:	1d3b      	adds	r3, r7, #4
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b770:	33c4      	adds	r3, #196	; 0xc4
 800b772:	00db      	lsls	r3, r3, #3
 800b774:	4413      	add	r3, r2
 800b776:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b77a:	461a      	mov	r2, r3
 800b77c:	4623      	mov	r3, r4
 800b77e:	f7f4 ff43 	bl	8000608 <__aeabi_dmul>
 800b782:	4603      	mov	r3, r0
 800b784:	460c      	mov	r4, r1
 800b786:	461a      	mov	r2, r3
 800b788:	4623      	mov	r3, r4
 800b78a:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800b78e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b792:	f7f4 fd83 	bl	800029c <__adddf3>
 800b796:	4603      	mov	r3, r0
 800b798:	460c      	mov	r4, r1
 800b79a:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800b79e:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[r1 + 3 * i] = 0.0;
 800b7a2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	005b      	lsls	r3, r3, #1
 800b7aa:	441a      	add	r2, r3
 800b7ac:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b7b0:	4413      	add	r3, r2
 800b7b2:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800b7b6:	00db      	lsls	r3, r3, #3
 800b7b8:	441a      	add	r2, r3
 800b7ba:	f04f 0300 	mov.w	r3, #0
 800b7be:	f04f 0400 	mov.w	r4, #0
 800b7c2:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = imvec_1[3 * i + r1];
 800b7c6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	005b      	lsls	r3, r3, #1
 800b7ce:	441a      	add	r2, r3
 800b7d0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b7d4:	4413      	add	r3, r2
 800b7d6:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800b7da:	00db      	lsls	r3, r3, #3
 800b7dc:	4413      	add	r3, r2
 800b7de:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b7e2:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b7e6:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_i[3 * i] * a_1[r1];
 800b7ea:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	005b      	lsls	r3, r3, #1
 800b7f2:	4413      	add	r3, r2
 800b7f4:	1d3a      	adds	r2, r7, #4
 800b7f6:	6812      	ldr	r2, [r2, #0]
 800b7f8:	33ca      	adds	r3, #202	; 0xca
 800b7fa:	00db      	lsls	r3, r3, #3
 800b7fc:	4413      	add	r3, r2
 800b7fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b802:	4a66      	ldr	r2, [pc, #408]	; (800b99c <_ZN27positionEstimatorModelClass4stepEv+0x407c>)
 800b804:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b808:	00db      	lsls	r3, r3, #3
 800b80a:	4413      	add	r3, r2
 800b80c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b810:	461a      	mov	r2, r3
 800b812:	4623      	mov	r3, r4
 800b814:	f7f4 fef8 	bl	8000608 <__aeabi_dmul>
 800b818:	4603      	mov	r3, r0
 800b81a:	460c      	mov	r4, r1
 800b81c:	461a      	mov	r2, r3
 800b81e:	4623      	mov	r3, r4
 800b820:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800b824:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b828:	f7f4 fd38 	bl	800029c <__adddf3>
 800b82c:	4603      	mov	r3, r0
 800b82e:	460c      	mov	r4, r1
 800b830:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b834:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[r1 + 3 * i] = a22;
 800b838:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b83c:	4613      	mov	r3, r2
 800b83e:	005b      	lsls	r3, r3, #1
 800b840:	441a      	add	r2, r3
 800b842:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b846:	4413      	add	r3, r2
 800b848:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800b84c:	00db      	lsls	r3, r3, #3
 800b84e:	441a      	add	r2, r3
 800b850:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800b854:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b858:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = imvec_1[3 * i + r1];
 800b85c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b860:	4613      	mov	r3, r2
 800b862:	005b      	lsls	r3, r3, #1
 800b864:	441a      	add	r2, r3
 800b866:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b86a:	4413      	add	r3, r2
 800b86c:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800b870:	00db      	lsls	r3, r3, #3
 800b872:	4413      	add	r3, r2
 800b874:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b878:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b87c:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_i[3 * i + 1] * a_1[r1 + 3];
 800b880:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b884:	4613      	mov	r3, r2
 800b886:	005b      	lsls	r3, r3, #1
 800b888:	4413      	add	r3, r2
 800b88a:	3301      	adds	r3, #1
 800b88c:	1d3a      	adds	r2, r7, #4
 800b88e:	6812      	ldr	r2, [r2, #0]
 800b890:	33ca      	adds	r3, #202	; 0xca
 800b892:	00db      	lsls	r3, r3, #3
 800b894:	4413      	add	r3, r2
 800b896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b89a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b89e:	3303      	adds	r3, #3
 800b8a0:	4a3e      	ldr	r2, [pc, #248]	; (800b99c <_ZN27positionEstimatorModelClass4stepEv+0x407c>)
 800b8a2:	00db      	lsls	r3, r3, #3
 800b8a4:	4413      	add	r3, r2
 800b8a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	4623      	mov	r3, r4
 800b8ae:	f7f4 feab 	bl	8000608 <__aeabi_dmul>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	460c      	mov	r4, r1
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	4623      	mov	r3, r4
 800b8ba:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800b8be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8c2:	f7f4 fceb 	bl	800029c <__adddf3>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	460c      	mov	r4, r1
 800b8ca:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b8ce:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[r1 + 3 * i] = a22;
 800b8d2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	005b      	lsls	r3, r3, #1
 800b8da:	441a      	add	r2, r3
 800b8dc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b8e0:	4413      	add	r3, r2
 800b8e2:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800b8e6:	00db      	lsls	r3, r3, #3
 800b8e8:	441a      	add	r2, r3
 800b8ea:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800b8ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b8f2:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = imvec_1[3 * i + r1];
 800b8f6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	005b      	lsls	r3, r3, #1
 800b8fe:	441a      	add	r2, r3
 800b900:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b904:	4413      	add	r3, r2
 800b906:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800b90a:	00db      	lsls	r3, r3, #3
 800b90c:	4413      	add	r3, r2
 800b90e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b912:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b916:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_i[3 * i + 2] * a_1[r1 + 6];
 800b91a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b91e:	4613      	mov	r3, r2
 800b920:	005b      	lsls	r3, r3, #1
 800b922:	4413      	add	r3, r2
 800b924:	3302      	adds	r3, #2
 800b926:	1d3a      	adds	r2, r7, #4
 800b928:	6812      	ldr	r2, [r2, #0]
 800b92a:	33ca      	adds	r3, #202	; 0xca
 800b92c:	00db      	lsls	r3, r3, #3
 800b92e:	4413      	add	r3, r2
 800b930:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b934:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b938:	3306      	adds	r3, #6
 800b93a:	4a18      	ldr	r2, [pc, #96]	; (800b99c <_ZN27positionEstimatorModelClass4stepEv+0x407c>)
 800b93c:	00db      	lsls	r3, r3, #3
 800b93e:	4413      	add	r3, r2
 800b940:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b944:	461a      	mov	r2, r3
 800b946:	4623      	mov	r3, r4
 800b948:	f7f4 fe5e 	bl	8000608 <__aeabi_dmul>
 800b94c:	4603      	mov	r3, r0
 800b94e:	460c      	mov	r4, r1
 800b950:	461a      	mov	r2, r3
 800b952:	4623      	mov	r3, r4
 800b954:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800b958:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b95c:	f7f4 fc9e 	bl	800029c <__adddf3>
 800b960:	4603      	mov	r3, r0
 800b962:	460c      	mov	r4, r1
 800b964:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800b968:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[r1 + 3 * i] = a22;
 800b96c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b970:	4613      	mov	r3, r2
 800b972:	005b      	lsls	r3, r3, #1
 800b974:	441a      	add	r2, r3
 800b976:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b97a:	4413      	add	r3, r2
 800b97c:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800b980:	00db      	lsls	r3, r3, #3
 800b982:	441a      	add	r2, r3
 800b984:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800b988:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b98c:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800b990:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b994:	3301      	adds	r3, #1
 800b996:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b99a:	e6d3      	b.n	800b744 <_ZN27positionEstimatorModelClass4stepEv+0x3e24>
 800b99c:	0802d8f8 	.word	0x0802d8f8
    }

    rtDW.xNew_k[r1] = u;
 800b9a0:	1d3b      	adds	r3, r7, #4
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b9a8:	33c7      	adds	r3, #199	; 0xc7
 800b9aa:	00db      	lsls	r3, r3, #3
 800b9ac:	441a      	add	r2, r3
 800b9ae:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800b9b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b9b6:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800b9c0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	f300 8129 	bgt.w	800bc1c <_ZN27positionEstimatorModelClass4stepEv+0x42fc>
      a[r1 + 3 * i] = 0.0;
 800b9ca:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	005b      	lsls	r3, r3, #1
 800b9d2:	441a      	add	r2, r3
 800b9d4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b9d8:	4413      	add	r3, r2
 800b9da:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800b9de:	00db      	lsls	r3, r3, #3
 800b9e0:	441a      	add	r2, r3
 800b9e2:	f04f 0300 	mov.w	r3, #0
 800b9e6:	f04f 0400 	mov.w	r4, #0
 800b9ea:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = a[3 * i + r1];
 800b9ee:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	005b      	lsls	r3, r3, #1
 800b9f6:	441a      	add	r2, r3
 800b9f8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800b9fc:	4413      	add	r3, r2
 800b9fe:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800ba02:	00db      	lsls	r3, r3, #3
 800ba04:	4413      	add	r3, r2
 800ba06:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ba0a:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800ba0e:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += b[3 * i] * imvec_1[r1];
 800ba12:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ba16:	4613      	mov	r3, r2
 800ba18:	005b      	lsls	r3, r3, #1
 800ba1a:	4413      	add	r3, r2
 800ba1c:	4ac4      	ldr	r2, [pc, #784]	; (800bd30 <_ZN27positionEstimatorModelClass4stepEv+0x4410>)
 800ba1e:	00db      	lsls	r3, r3, #3
 800ba20:	4413      	add	r3, r2
 800ba22:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba26:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800ba2a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ba2e:	00db      	lsls	r3, r3, #3
 800ba30:	4413      	add	r3, r2
 800ba32:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ba36:	461a      	mov	r2, r3
 800ba38:	4623      	mov	r3, r4
 800ba3a:	f7f4 fde5 	bl	8000608 <__aeabi_dmul>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	460c      	mov	r4, r1
 800ba42:	461a      	mov	r2, r3
 800ba44:	4623      	mov	r3, r4
 800ba46:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800ba4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba4e:	f7f4 fc25 	bl	800029c <__adddf3>
 800ba52:	4603      	mov	r3, r0
 800ba54:	460c      	mov	r4, r1
 800ba56:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800ba5a:	e9c2 3400 	strd	r3, r4, [r2]
      a[r1 + 3 * i] = a22;
 800ba5e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ba62:	4613      	mov	r3, r2
 800ba64:	005b      	lsls	r3, r3, #1
 800ba66:	441a      	add	r2, r3
 800ba68:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ba6c:	4413      	add	r3, r2
 800ba6e:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800ba72:	00db      	lsls	r3, r3, #3
 800ba74:	441a      	add	r2, r3
 800ba76:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800ba7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ba7e:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = a[3 * i + r1];
 800ba82:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ba86:	4613      	mov	r3, r2
 800ba88:	005b      	lsls	r3, r3, #1
 800ba8a:	441a      	add	r2, r3
 800ba8c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ba90:	4413      	add	r3, r2
 800ba92:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800ba96:	00db      	lsls	r3, r3, #3
 800ba98:	4413      	add	r3, r2
 800ba9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ba9e:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800baa2:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += b[3 * i + 1] * imvec_1[r1 + 3];
 800baa6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800baaa:	4613      	mov	r3, r2
 800baac:	005b      	lsls	r3, r3, #1
 800baae:	4413      	add	r3, r2
 800bab0:	3301      	adds	r3, #1
 800bab2:	4a9f      	ldr	r2, [pc, #636]	; (800bd30 <_ZN27positionEstimatorModelClass4stepEv+0x4410>)
 800bab4:	00db      	lsls	r3, r3, #3
 800bab6:	4413      	add	r3, r2
 800bab8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800babc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800bac0:	3303      	adds	r3, #3
 800bac2:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800bac6:	00db      	lsls	r3, r3, #3
 800bac8:	4413      	add	r3, r2
 800baca:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bace:	461a      	mov	r2, r3
 800bad0:	4623      	mov	r3, r4
 800bad2:	f7f4 fd99 	bl	8000608 <__aeabi_dmul>
 800bad6:	4603      	mov	r3, r0
 800bad8:	460c      	mov	r4, r1
 800bada:	461a      	mov	r2, r3
 800badc:	4623      	mov	r3, r4
 800bade:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800bae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bae6:	f7f4 fbd9 	bl	800029c <__adddf3>
 800baea:	4603      	mov	r3, r0
 800baec:	460c      	mov	r4, r1
 800baee:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800baf2:	e9c2 3400 	strd	r3, r4, [r2]
      a[r1 + 3 * i] = a22;
 800baf6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800bafa:	4613      	mov	r3, r2
 800bafc:	005b      	lsls	r3, r3, #1
 800bafe:	441a      	add	r2, r3
 800bb00:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800bb04:	4413      	add	r3, r2
 800bb06:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800bb0a:	00db      	lsls	r3, r3, #3
 800bb0c:	441a      	add	r2, r3
 800bb0e:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800bb12:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb16:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = a[3 * i + r1];
 800bb1a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800bb1e:	4613      	mov	r3, r2
 800bb20:	005b      	lsls	r3, r3, #1
 800bb22:	441a      	add	r2, r3
 800bb24:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800bb28:	4413      	add	r3, r2
 800bb2a:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800bb2e:	00db      	lsls	r3, r3, #3
 800bb30:	4413      	add	r3, r2
 800bb32:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb36:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800bb3a:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += b[3 * i + 2] * imvec_1[r1 + 6];
 800bb3e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800bb42:	4613      	mov	r3, r2
 800bb44:	005b      	lsls	r3, r3, #1
 800bb46:	4413      	add	r3, r2
 800bb48:	3302      	adds	r3, #2
 800bb4a:	4a79      	ldr	r2, [pc, #484]	; (800bd30 <_ZN27positionEstimatorModelClass4stepEv+0x4410>)
 800bb4c:	00db      	lsls	r3, r3, #3
 800bb4e:	4413      	add	r3, r2
 800bb50:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb54:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800bb58:	3306      	adds	r3, #6
 800bb5a:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800bb5e:	00db      	lsls	r3, r3, #3
 800bb60:	4413      	add	r3, r2
 800bb62:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb66:	461a      	mov	r2, r3
 800bb68:	4623      	mov	r3, r4
 800bb6a:	f7f4 fd4d 	bl	8000608 <__aeabi_dmul>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	460c      	mov	r4, r1
 800bb72:	461a      	mov	r2, r3
 800bb74:	4623      	mov	r3, r4
 800bb76:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800bb7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb7e:	f7f4 fb8d 	bl	800029c <__adddf3>
 800bb82:	4603      	mov	r3, r0
 800bb84:	460c      	mov	r4, r1
 800bb86:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800bb8a:	e9c2 3400 	strd	r3, r4, [r2]
      a[r1 + 3 * i] = a22;
 800bb8e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800bb92:	4613      	mov	r3, r2
 800bb94:	005b      	lsls	r3, r3, #1
 800bb96:	441a      	add	r2, r3
 800bb98:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800bb9c:	4413      	add	r3, r2
 800bb9e:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800bba2:	00db      	lsls	r3, r3, #3
 800bba4:	441a      	add	r2, r3
 800bba6:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800bbaa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bbae:	e9c2 3400 	strd	r3, r4, [r2]
      b_a[i + 3 * r1] = b_a_1[i] * rtP.Q_Value * b_a_1[r1];
 800bbb2:	4a60      	ldr	r2, [pc, #384]	; (800bd34 <_ZN27positionEstimatorModelClass4stepEv+0x4414>)
 800bbb4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bbb8:	00db      	lsls	r3, r3, #3
 800bbba:	4413      	add	r3, r2
 800bbbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bbc0:	4b5d      	ldr	r3, [pc, #372]	; (800bd38 <_ZN27positionEstimatorModelClass4stepEv+0x4418>)
 800bbc2:	e9d3 3484 	ldrd	r3, r4, [r3, #528]	; 0x210
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	4623      	mov	r3, r4
 800bbca:	f7f4 fd1d 	bl	8000608 <__aeabi_dmul>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	460c      	mov	r4, r1
 800bbd2:	4698      	mov	r8, r3
 800bbd4:	46a1      	mov	r9, r4
 800bbd6:	4a57      	ldr	r2, [pc, #348]	; (800bd34 <_ZN27positionEstimatorModelClass4stepEv+0x4414>)
 800bbd8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800bbdc:	00db      	lsls	r3, r3, #3
 800bbde:	4413      	add	r3, r2
 800bbe0:	e9d3 1200 	ldrd	r1, r2, [r3]
 800bbe4:	f8d7 08c4 	ldr.w	r0, [r7, #2244]	; 0x8c4
 800bbe8:	4603      	mov	r3, r0
 800bbea:	005b      	lsls	r3, r3, #1
 800bbec:	4418      	add	r0, r3
 800bbee:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bbf2:	18c5      	adds	r5, r0, r3
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	460a      	mov	r2, r1
 800bbf8:	4640      	mov	r0, r8
 800bbfa:	4649      	mov	r1, r9
 800bbfc:	f7f4 fd04 	bl	8000608 <__aeabi_dmul>
 800bc00:	4603      	mov	r3, r0
 800bc02:	460c      	mov	r4, r1
 800bc04:	f507 7112 	add.w	r1, r7, #584	; 0x248
 800bc08:	00ea      	lsls	r2, r5, #3
 800bc0a:	440a      	add	r2, r1
 800bc0c:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800bc10:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bc14:	3301      	adds	r3, #1
 800bc16:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800bc1a:	e6d1      	b.n	800b9c0 <_ZN27positionEstimatorModelClass4stepEv+0x40a0>
  for (r1 = 0; r1 < 3; r1++) {
 800bc1c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800bc20:	3301      	adds	r3, #1
 800bc22:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800bc26:	e57d      	b.n	800b724 <_ZN27positionEstimatorModelClass4stepEv+0x3e04>
    }
  }

  for (i = 0; i < 9; i++) {
 800bc28:	2300      	movs	r3, #0
 800bc2a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800bc2e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bc32:	2b08      	cmp	r3, #8
 800bc34:	dc37      	bgt.n	800bca6 <_ZN27positionEstimatorModelClass4stepEv+0x4386>
    rtDW.P_i[i] = a[i] + b_a[i];
 800bc36:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800bc3a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bc3e:	00db      	lsls	r3, r3, #3
 800bc40:	4413      	add	r3, r2
 800bc42:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc46:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800bc4a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bc4e:	00db      	lsls	r3, r3, #3
 800bc50:	4413      	add	r3, r2
 800bc52:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bc56:	461a      	mov	r2, r3
 800bc58:	4623      	mov	r3, r4
 800bc5a:	f7f4 fb1f 	bl	800029c <__adddf3>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	460c      	mov	r4, r1
 800bc62:	1d3a      	adds	r2, r7, #4
 800bc64:	6811      	ldr	r1, [r2, #0]
 800bc66:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800bc6a:	32ca      	adds	r2, #202	; 0xca
 800bc6c:	00d2      	lsls	r2, r2, #3
 800bc6e:	440a      	add	r2, r1
 800bc70:	e9c2 3400 	strd	r3, r4, [r2]

    // DataStoreWrite: '<S8>/Data Store WriteP'
    rtDW.P_i_m[i] = rtDW.P_i[i];
 800bc74:	1d3b      	adds	r3, r7, #4
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bc7c:	33ca      	adds	r3, #202	; 0xca
 800bc7e:	00db      	lsls	r3, r3, #3
 800bc80:	4413      	add	r3, r2
 800bc82:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bc86:	1d3a      	adds	r2, r7, #4
 800bc88:	6811      	ldr	r1, [r2, #0]
 800bc8a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800bc8e:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800bc92:	00d2      	lsls	r2, r2, #3
 800bc94:	440a      	add	r2, r1
 800bc96:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 9; i++) {
 800bc9a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bc9e:	3301      	adds	r3, #1
 800bca0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800bca4:	e7c3      	b.n	800bc2e <_ZN27positionEstimatorModelClass4stepEv+0x430e>
  }

  // DataStoreWrite: '<S8>/Data Store WriteX'
  rtDW.x[0] = rtDW.xNew_k[0];
 800bca6:	1d3b      	adds	r3, r7, #4
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 800bcae:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bcb2:	1d3a      	adds	r2, r7, #4
 800bcb4:	6812      	ldr	r2, [r2, #0]
 800bcb6:	f602 02a8 	addw	r2, r2, #2216	; 0x8a8
 800bcba:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.x[1] = rtDW.xNew_k[1];
 800bcbe:	1d3b      	adds	r3, r7, #4
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800bcc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bcca:	1d3a      	adds	r2, r7, #4
 800bccc:	6812      	ldr	r2, [r2, #0]
 800bcce:	f502 620b 	add.w	r2, r2, #2224	; 0x8b0
 800bcd2:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.x[2] = rtDW.xNew_k[2];
 800bcd6:	1d3b      	adds	r3, r7, #4
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 800bcde:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bce2:	1d3a      	adds	r2, r7, #4
 800bce4:	6812      	ldr	r2, [r2, #0]
 800bce6:	f602 02b8 	addw	r2, r2, #2232	; 0x8b8
 800bcea:	e9c2 3400 	strd	r3, r4, [r2]

  // End of Outputs for SubSystem: '<S1>/Predict'

  // Outputs for Atomic SubSystem: '<S2>/Predict'
  // DataStoreRead: '<S16>/Data Store ReadX'
  for (i = 0; i < 6; i++) {
 800bcee:	2300      	movs	r3, #0
 800bcf0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800bcf4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bcf8:	2b05      	cmp	r3, #5
 800bcfa:	dc1f      	bgt.n	800bd3c <_ZN27positionEstimatorModelClass4stepEv+0x441c>
    rtDW.DataStoreReadX[i] = rtDW.x_p[i];
 800bcfc:	1d3b      	adds	r3, r7, #4
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bd04:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800bd08:	00db      	lsls	r3, r3, #3
 800bd0a:	4413      	add	r3, r2
 800bd0c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bd10:	1d3a      	adds	r2, r7, #4
 800bd12:	6811      	ldr	r1, [r2, #0]
 800bd14:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800bd18:	3204      	adds	r2, #4
 800bd1a:	00d2      	lsls	r2, r2, #3
 800bd1c:	440a      	add	r2, r1
 800bd1e:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 6; i++) {
 800bd22:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bd26:	3301      	adds	r3, #1
 800bd28:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800bd2c:	e7e2      	b.n	800bcf4 <_ZN27positionEstimatorModelClass4stepEv+0x43d4>
 800bd2e:	bf00      	nop
 800bd30:	0802d940 	.word	0x0802d940
 800bd34:	0802d988 	.word	0x0802d988
 800bd38:	200002b0 	.word	0x200002b0
  }

  // End of DataStoreRead: '<S16>/Data Store ReadX'
  for (i = 0; i < 36; i++) {
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800bd42:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bd46:	2b23      	cmp	r3, #35	; 0x23
 800bd48:	dc32      	bgt.n	800bdb0 <_ZN27positionEstimatorModelClass4stepEv+0x4490>
    // DataStoreRead: '<S16>/Data Store ReadP'
    rtDW.P_n[i] = rtDW.P_n_c[i];
 800bd4a:	1d3b      	adds	r3, r7, #4
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bd52:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800bd56:	00db      	lsls	r3, r3, #3
 800bd58:	4413      	add	r3, r2
 800bd5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bd5e:	1d3a      	adds	r2, r7, #4
 800bd60:	6811      	ldr	r1, [r2, #0]
 800bd62:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800bd66:	3210      	adds	r2, #16
 800bd68:	00d2      	lsls	r2, r2, #3
 800bd6a:	440a      	add	r2, r1
 800bd6c:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S16>/Predict'
    u = rtDW.P_n[i];
 800bd70:	1d3b      	adds	r3, r7, #4
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bd78:	3310      	adds	r3, #16
 800bd7a:	00db      	lsls	r3, r3, #3
 800bd7c:	4413      	add	r3, r2
 800bd7e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bd82:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800bd86:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.P_n[i] = u;
 800bd8a:	1d3b      	adds	r3, r7, #4
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bd92:	3310      	adds	r3, #16
 800bd94:	00db      	lsls	r3, r3, #3
 800bd96:	441a      	add	r2, r3
 800bd98:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800bd9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bda0:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 36; i++) {
 800bda4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bda8:	3301      	adds	r3, #1
 800bdaa:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800bdae:	e7c8      	b.n	800bd42 <_ZN27positionEstimatorModelClass4stepEv+0x4422>
  }

  // MATLAB Function: '<S16>/Predict' incorporates:
  //   Constant: '<S2>/Q'

  for (r1 = 0; r1 < 6; r1++) {
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800bdb6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800bdba:	2b05      	cmp	r3, #5
 800bdbc:	f300 8196 	bgt.w	800c0ec <_ZN27positionEstimatorModelClass4stepEv+0x47cc>
    u = 0.0;
 800bdc0:	f04f 0300 	mov.w	r3, #0
 800bdc4:	f04f 0400 	mov.w	r4, #0
 800bdc8:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800bdcc:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800bdd6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bdda:	2b05      	cmp	r3, #5
 800bddc:	f300 80af 	bgt.w	800bf3e <_ZN27positionEstimatorModelClass4stepEv+0x461e>
      u += a_2[6 * i + r1] * rtDW.DataStoreReadX[i];
 800bde0:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800bde4:	4613      	mov	r3, r2
 800bde6:	005b      	lsls	r3, r3, #1
 800bde8:	4413      	add	r3, r2
 800bdea:	005b      	lsls	r3, r3, #1
 800bdec:	461a      	mov	r2, r3
 800bdee:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800bdf2:	4413      	add	r3, r2
 800bdf4:	4ab9      	ldr	r2, [pc, #740]	; (800c0dc <_ZN27positionEstimatorModelClass4stepEv+0x47bc>)
 800bdf6:	00db      	lsls	r3, r3, #3
 800bdf8:	4413      	add	r3, r2
 800bdfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bdfe:	1d3b      	adds	r3, r7, #4
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800be06:	3304      	adds	r3, #4
 800be08:	00db      	lsls	r3, r3, #3
 800be0a:	4413      	add	r3, r2
 800be0c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800be10:	461a      	mov	r2, r3
 800be12:	4623      	mov	r3, r4
 800be14:	f7f4 fbf8 	bl	8000608 <__aeabi_dmul>
 800be18:	4603      	mov	r3, r0
 800be1a:	460c      	mov	r4, r1
 800be1c:	461a      	mov	r2, r3
 800be1e:	4623      	mov	r3, r4
 800be20:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800be24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be28:	f7f4 fa38 	bl	800029c <__adddf3>
 800be2c:	4603      	mov	r3, r0
 800be2e:	460c      	mov	r4, r1
 800be30:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800be34:	e9c2 3400 	strd	r3, r4, [r2]
      gain_0[r1 + 6 * i] = 0.0;
 800be38:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800be3c:	4613      	mov	r3, r2
 800be3e:	005b      	lsls	r3, r3, #1
 800be40:	4413      	add	r3, r2
 800be42:	005b      	lsls	r3, r3, #1
 800be44:	461a      	mov	r2, r3
 800be46:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800be4a:	4413      	add	r3, r2
 800be4c:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800be50:	00db      	lsls	r3, r3, #3
 800be52:	441a      	add	r2, r3
 800be54:	f04f 0300 	mov.w	r3, #0
 800be58:	f04f 0400 	mov.w	r4, #0
 800be5c:	e9c2 3400 	strd	r3, r4, [r2]
      for (k = 0; k < 6; k++) {
 800be60:	2300      	movs	r3, #0
 800be62:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800be66:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800be6a:	2b05      	cmp	r3, #5
 800be6c:	dc61      	bgt.n	800bf32 <_ZN27positionEstimatorModelClass4stepEv+0x4612>
        a22 = gain_0[6 * i + r1];
 800be6e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800be72:	4613      	mov	r3, r2
 800be74:	005b      	lsls	r3, r3, #1
 800be76:	4413      	add	r3, r2
 800be78:	005b      	lsls	r3, r3, #1
 800be7a:	461a      	mov	r2, r3
 800be7c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800be80:	4413      	add	r3, r2
 800be82:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800be86:	00db      	lsls	r3, r3, #3
 800be88:	4413      	add	r3, r2
 800be8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800be8e:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800be92:	e9c2 3400 	strd	r3, r4, [r2]
        a22 += a_2[6 * k + r1] * rtDW.P_n[6 * i + k];
 800be96:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 800be9a:	4613      	mov	r3, r2
 800be9c:	005b      	lsls	r3, r3, #1
 800be9e:	4413      	add	r3, r2
 800bea0:	005b      	lsls	r3, r3, #1
 800bea2:	461a      	mov	r2, r3
 800bea4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800bea8:	4413      	add	r3, r2
 800beaa:	4a8c      	ldr	r2, [pc, #560]	; (800c0dc <_ZN27positionEstimatorModelClass4stepEv+0x47bc>)
 800beac:	00db      	lsls	r3, r3, #3
 800beae:	4413      	add	r3, r2
 800beb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800beb4:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800beb8:	4613      	mov	r3, r2
 800beba:	005b      	lsls	r3, r3, #1
 800bebc:	4413      	add	r3, r2
 800bebe:	005b      	lsls	r3, r3, #1
 800bec0:	461a      	mov	r2, r3
 800bec2:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800bec6:	4413      	add	r3, r2
 800bec8:	1d3a      	adds	r2, r7, #4
 800beca:	6812      	ldr	r2, [r2, #0]
 800becc:	3310      	adds	r3, #16
 800bece:	00db      	lsls	r3, r3, #3
 800bed0:	4413      	add	r3, r2
 800bed2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bed6:	461a      	mov	r2, r3
 800bed8:	4623      	mov	r3, r4
 800beda:	f7f4 fb95 	bl	8000608 <__aeabi_dmul>
 800bede:	4603      	mov	r3, r0
 800bee0:	460c      	mov	r4, r1
 800bee2:	461a      	mov	r2, r3
 800bee4:	4623      	mov	r3, r4
 800bee6:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800beea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800beee:	f7f4 f9d5 	bl	800029c <__adddf3>
 800bef2:	4603      	mov	r3, r0
 800bef4:	460c      	mov	r4, r1
 800bef6:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800befa:	e9c2 3400 	strd	r3, r4, [r2]
        gain_0[r1 + 6 * i] = a22;
 800befe:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800bf02:	4613      	mov	r3, r2
 800bf04:	005b      	lsls	r3, r3, #1
 800bf06:	4413      	add	r3, r2
 800bf08:	005b      	lsls	r3, r3, #1
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800bf10:	4413      	add	r3, r2
 800bf12:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800bf16:	00db      	lsls	r3, r3, #3
 800bf18:	441a      	add	r2, r3
 800bf1a:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800bf1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf22:	e9c2 3400 	strd	r3, r4, [r2]
      for (k = 0; k < 6; k++) {
 800bf26:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800bf30:	e799      	b.n	800be66 <_ZN27positionEstimatorModelClass4stepEv+0x4546>
    for (i = 0; i < 6; i++) {
 800bf32:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bf36:	3301      	adds	r3, #1
 800bf38:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800bf3c:	e74b      	b.n	800bdd6 <_ZN27positionEstimatorModelClass4stepEv+0x44b6>
      }
    }

    rtDW.xNew[r1] = u;
 800bf3e:	1d3b      	adds	r3, r7, #4
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800bf46:	330a      	adds	r3, #10
 800bf48:	00db      	lsls	r3, r3, #3
 800bf4a:	441a      	add	r2, r3
 800bf4c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800bf50:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf54:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 800bf58:	2300      	movs	r3, #0
 800bf5a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800bf5e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800bf62:	2b05      	cmp	r3, #5
 800bf64:	f300 80b3 	bgt.w	800c0ce <_ZN27positionEstimatorModelClass4stepEv+0x47ae>
      a_0[r1 + 6 * i] = 0.0;
 800bf68:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	005b      	lsls	r3, r3, #1
 800bf70:	4413      	add	r3, r2
 800bf72:	005b      	lsls	r3, r3, #1
 800bf74:	461a      	mov	r2, r3
 800bf76:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800bf7a:	4413      	add	r3, r2
 800bf7c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800bf80:	00db      	lsls	r3, r3, #3
 800bf82:	441a      	add	r2, r3
 800bf84:	f04f 0300 	mov.w	r3, #0
 800bf88:	f04f 0400 	mov.w	r4, #0
 800bf8c:	e9c2 3400 	strd	r3, r4, [r2]
      for (k = 0; k < 6; k++) {
 800bf90:	2300      	movs	r3, #0
 800bf92:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800bf96:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800bf9a:	2b05      	cmp	r3, #5
 800bf9c:	dc60      	bgt.n	800c060 <_ZN27positionEstimatorModelClass4stepEv+0x4740>
        a22 = a_0[6 * i + r1];
 800bf9e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	005b      	lsls	r3, r3, #1
 800bfa6:	4413      	add	r3, r2
 800bfa8:	005b      	lsls	r3, r3, #1
 800bfaa:	461a      	mov	r2, r3
 800bfac:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800bfb0:	4413      	add	r3, r2
 800bfb2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800bfb6:	00db      	lsls	r3, r3, #3
 800bfb8:	4413      	add	r3, r2
 800bfba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bfbe:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800bfc2:	e9c2 3400 	strd	r3, r4, [r2]
        a22 += gain_0[6 * k + r1] * b_0[6 * i + k];
 800bfc6:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 800bfca:	4613      	mov	r3, r2
 800bfcc:	005b      	lsls	r3, r3, #1
 800bfce:	4413      	add	r3, r2
 800bfd0:	005b      	lsls	r3, r3, #1
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800bfd8:	4413      	add	r3, r2
 800bfda:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800bfde:	00db      	lsls	r3, r3, #3
 800bfe0:	4413      	add	r3, r2
 800bfe2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bfe6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800bfea:	4613      	mov	r3, r2
 800bfec:	005b      	lsls	r3, r3, #1
 800bfee:	4413      	add	r3, r2
 800bff0:	005b      	lsls	r3, r3, #1
 800bff2:	461a      	mov	r2, r3
 800bff4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800bff8:	4413      	add	r3, r2
 800bffa:	4a39      	ldr	r2, [pc, #228]	; (800c0e0 <_ZN27positionEstimatorModelClass4stepEv+0x47c0>)
 800bffc:	00db      	lsls	r3, r3, #3
 800bffe:	4413      	add	r3, r2
 800c000:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c004:	461a      	mov	r2, r3
 800c006:	4623      	mov	r3, r4
 800c008:	f7f4 fafe 	bl	8000608 <__aeabi_dmul>
 800c00c:	4603      	mov	r3, r0
 800c00e:	460c      	mov	r4, r1
 800c010:	461a      	mov	r2, r3
 800c012:	4623      	mov	r3, r4
 800c014:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800c018:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c01c:	f7f4 f93e 	bl	800029c <__adddf3>
 800c020:	4603      	mov	r3, r0
 800c022:	460c      	mov	r4, r1
 800c024:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800c028:	e9c2 3400 	strd	r3, r4, [r2]
        a_0[r1 + 6 * i] = a22;
 800c02c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800c030:	4613      	mov	r3, r2
 800c032:	005b      	lsls	r3, r3, #1
 800c034:	4413      	add	r3, r2
 800c036:	005b      	lsls	r3, r3, #1
 800c038:	461a      	mov	r2, r3
 800c03a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800c03e:	4413      	add	r3, r2
 800c040:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800c044:	00db      	lsls	r3, r3, #3
 800c046:	441a      	add	r2, r3
 800c048:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800c04c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c050:	e9c2 3400 	strd	r3, r4, [r2]
      for (k = 0; k < 6; k++) {
 800c054:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800c058:	3301      	adds	r3, #1
 800c05a:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800c05e:	e79a      	b.n	800bf96 <_ZN27positionEstimatorModelClass4stepEv+0x4676>
      }

      b_a_0[i + 6 * r1] = b_a_2[i] * rtP.Q_Value_c * b_a_2[r1];
 800c060:	4a20      	ldr	r2, [pc, #128]	; (800c0e4 <_ZN27positionEstimatorModelClass4stepEv+0x47c4>)
 800c062:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800c066:	00db      	lsls	r3, r3, #3
 800c068:	4413      	add	r3, r2
 800c06a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c06e:	4b1e      	ldr	r3, [pc, #120]	; (800c0e8 <_ZN27positionEstimatorModelClass4stepEv+0x47c8>)
 800c070:	e9d3 34a0 	ldrd	r3, r4, [r3, #640]	; 0x280
 800c074:	461a      	mov	r2, r3
 800c076:	4623      	mov	r3, r4
 800c078:	f7f4 fac6 	bl	8000608 <__aeabi_dmul>
 800c07c:	4603      	mov	r3, r0
 800c07e:	460c      	mov	r4, r1
 800c080:	4698      	mov	r8, r3
 800c082:	46a1      	mov	r9, r4
 800c084:	4a17      	ldr	r2, [pc, #92]	; (800c0e4 <_ZN27positionEstimatorModelClass4stepEv+0x47c4>)
 800c086:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800c08a:	00db      	lsls	r3, r3, #3
 800c08c:	4413      	add	r3, r2
 800c08e:	e9d3 1200 	ldrd	r1, r2, [r3]
 800c092:	f8d7 08c4 	ldr.w	r0, [r7, #2244]	; 0x8c4
 800c096:	4603      	mov	r3, r0
 800c098:	005b      	lsls	r3, r3, #1
 800c09a:	4403      	add	r3, r0
 800c09c:	005b      	lsls	r3, r3, #1
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800c0a4:	18c5      	adds	r5, r0, r3
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	460a      	mov	r2, r1
 800c0aa:	4640      	mov	r0, r8
 800c0ac:	4649      	mov	r1, r9
 800c0ae:	f7f4 faab 	bl	8000608 <__aeabi_dmul>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	460c      	mov	r4, r1
 800c0b6:	f107 0108 	add.w	r1, r7, #8
 800c0ba:	00ea      	lsls	r2, r5, #3
 800c0bc:	440a      	add	r2, r1
 800c0be:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 800c0c2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800c0cc:	e747      	b.n	800bf5e <_ZN27positionEstimatorModelClass4stepEv+0x463e>
  for (r1 = 0; r1 < 6; r1++) {
 800c0ce:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800c0d8:	e66d      	b.n	800bdb6 <_ZN27positionEstimatorModelClass4stepEv+0x4496>
 800c0da:	bf00      	nop
 800c0dc:	0802d9a0 	.word	0x0802d9a0
 800c0e0:	0802daf0 	.word	0x0802daf0
 800c0e4:	0802dac0 	.word	0x0802dac0
 800c0e8:	200002b0 	.word	0x200002b0
    }
  }

  for (i = 0; i < 36; i++) {
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800c0f2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800c0f6:	2b23      	cmp	r3, #35	; 0x23
 800c0f8:	dc37      	bgt.n	800c16a <_ZN27positionEstimatorModelClass4stepEv+0x484a>
    rtDW.P_n[i] = a_0[i] + b_a_0[i];
 800c0fa:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800c0fe:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800c102:	00db      	lsls	r3, r3, #3
 800c104:	4413      	add	r3, r2
 800c106:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c10a:	f107 0208 	add.w	r2, r7, #8
 800c10e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800c112:	00db      	lsls	r3, r3, #3
 800c114:	4413      	add	r3, r2
 800c116:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c11a:	461a      	mov	r2, r3
 800c11c:	4623      	mov	r3, r4
 800c11e:	f7f4 f8bd 	bl	800029c <__adddf3>
 800c122:	4603      	mov	r3, r0
 800c124:	460c      	mov	r4, r1
 800c126:	1d3a      	adds	r2, r7, #4
 800c128:	6811      	ldr	r1, [r2, #0]
 800c12a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800c12e:	3210      	adds	r2, #16
 800c130:	00d2      	lsls	r2, r2, #3
 800c132:	440a      	add	r2, r1
 800c134:	e9c2 3400 	strd	r3, r4, [r2]

    // DataStoreWrite: '<S16>/Data Store WriteP'
    rtDW.P_n_c[i] = rtDW.P_n[i];
 800c138:	1d3b      	adds	r3, r7, #4
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800c140:	3310      	adds	r3, #16
 800c142:	00db      	lsls	r3, r3, #3
 800c144:	4413      	add	r3, r2
 800c146:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c14a:	1d3a      	adds	r2, r7, #4
 800c14c:	6811      	ldr	r1, [r2, #0]
 800c14e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800c152:	f502 728c 	add.w	r2, r2, #280	; 0x118
 800c156:	00d2      	lsls	r2, r2, #3
 800c158:	440a      	add	r2, r1
 800c15a:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 36; i++) {
 800c15e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800c162:	3301      	adds	r3, #1
 800c164:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800c168:	e7c3      	b.n	800c0f2 <_ZN27positionEstimatorModelClass4stepEv+0x47d2>
  }

  // DataStoreWrite: '<S16>/Data Store WriteX'
  for (i = 0; i < 6; i++) {
 800c16a:	2300      	movs	r3, #0
 800c16c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800c170:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800c174:	2b05      	cmp	r3, #5
 800c176:	dc18      	bgt.n	800c1aa <_ZN27positionEstimatorModelClass4stepEv+0x488a>
    rtDW.x_p[i] = rtDW.xNew[i];
 800c178:	1d3b      	adds	r3, r7, #4
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800c180:	330a      	adds	r3, #10
 800c182:	00db      	lsls	r3, r3, #3
 800c184:	4413      	add	r3, r2
 800c186:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c18a:	1d3a      	adds	r2, r7, #4
 800c18c:	6811      	ldr	r1, [r2, #0]
 800c18e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800c192:	f502 729e 	add.w	r2, r2, #316	; 0x13c
 800c196:	00d2      	lsls	r2, r2, #3
 800c198:	440a      	add	r2, r1
 800c19a:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 6; i++) {
 800c19e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800c1a8:	e7e2      	b.n	800c170 <_ZN27positionEstimatorModelClass4stepEv+0x4850>
  }

  // End of DataStoreWrite: '<S16>/Data Store WriteX'
  // End of Outputs for SubSystem: '<S2>/Predict'
}
 800c1aa:	bf00      	nop
 800c1ac:	f607 07d4 	addw	r7, r7, #2260	; 0x8d4
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1b6:	bf00      	nop

0800c1b8 <_ZN27positionEstimatorModelClass10initializeEv>:

// Model initialize function
void positionEstimatorModelClass::initialize()
{
 800c1b8:	b590      	push	{r4, r7, lr}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  // Registration code

  // initialize non-finites
  rt_InitInfAndNaN(sizeof(real_T));
 800c1c0:	2008      	movs	r0, #8
 800c1c2:	f7fa f99d 	bl	8006500 <rt_InitInfAndNaN>

  {
    int32_T i;

    // Start for DataStoreMemory: '<S1>/DataStoreMemory - P'
    for (i = 0; i < 9; i++) {
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	60fb      	str	r3, [r7, #12]
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2b08      	cmp	r3, #8
 800c1ce:	dc12      	bgt.n	800c1f6 <_ZN27positionEstimatorModelClass10initializeEv+0x3e>
      rtDW.P_i_m[i] = rtP.DataStoreMemoryP_InitialValue[i];
 800c1d0:	4a3e      	ldr	r2, [pc, #248]	; (800c2cc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	3344      	adds	r3, #68	; 0x44
 800c1d6:	00db      	lsls	r3, r3, #3
 800c1d8:	4413      	add	r3, r2
 800c1da:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c1de:	6879      	ldr	r1, [r7, #4]
 800c1e0:	68fa      	ldr	r2, [r7, #12]
 800c1e2:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800c1e6:	00d2      	lsls	r2, r2, #3
 800c1e8:	440a      	add	r2, r1
 800c1ea:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	60fb      	str	r3, [r7, #12]
 800c1f4:	e7e9      	b.n	800c1ca <_ZN27positionEstimatorModelClass10initializeEv+0x12>
    }

    // End of Start for DataStoreMemory: '<S1>/DataStoreMemory - P'

    // Start for DataStoreMemory: '<S1>/DataStoreMemory - x'
    rtDW.x[0] = rtP.DataStoreMemoryx_InitialValue[0];
 800c1f6:	4b35      	ldr	r3, [pc, #212]	; (800c2cc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800c1f8:	e9d3 349a 	ldrd	r3, r4, [r3, #616]	; 0x268
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	f602 02a8 	addw	r2, r2, #2216	; 0x8a8
 800c202:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[1] = rtP.DataStoreMemoryx_InitialValue[1];
 800c206:	4b31      	ldr	r3, [pc, #196]	; (800c2cc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800c208:	e9d3 349c 	ldrd	r3, r4, [r3, #624]	; 0x270
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	f502 620b 	add.w	r2, r2, #2224	; 0x8b0
 800c212:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[2] = rtP.DataStoreMemoryx_InitialValue[2];
 800c216:	4b2d      	ldr	r3, [pc, #180]	; (800c2cc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800c218:	e9d3 349e 	ldrd	r3, r4, [r3, #632]	; 0x278
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	f602 02b8 	addw	r2, r2, #2232	; 0x8b8
 800c222:	e9c2 3400 	strd	r3, r4, [r2]

    // Start for DataStoreMemory: '<S2>/DataStoreMemory - P'
    for (i = 0; i < 36; i++) {
 800c226:	2300      	movs	r3, #0
 800c228:	60fb      	str	r3, [r7, #12]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2b23      	cmp	r3, #35	; 0x23
 800c22e:	dc12      	bgt.n	800c256 <_ZN27positionEstimatorModelClass10initializeEv+0x9e>
      rtDW.P_n_c[i] = rtP.DataStoreMemoryP_InitialValue_m[i];
 800c230:	4a26      	ldr	r2, [pc, #152]	; (800c2cc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	3352      	adds	r3, #82	; 0x52
 800c236:	00db      	lsls	r3, r3, #3
 800c238:	4413      	add	r3, r2
 800c23a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c23e:	6879      	ldr	r1, [r7, #4]
 800c240:	68fa      	ldr	r2, [r7, #12]
 800c242:	f502 728c 	add.w	r2, r2, #280	; 0x118
 800c246:	00d2      	lsls	r2, r2, #3
 800c248:	440a      	add	r2, r1
 800c24a:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 36; i++) {
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	3301      	adds	r3, #1
 800c252:	60fb      	str	r3, [r7, #12]
 800c254:	e7e9      	b.n	800c22a <_ZN27positionEstimatorModelClass10initializeEv+0x72>
    }

    // End of Start for DataStoreMemory: '<S2>/DataStoreMemory - P'

    // Start for DataStoreMemory: '<S2>/DataStoreMemory - x'
    for (i = 0; i < 6; i++) {
 800c256:	2300      	movs	r3, #0
 800c258:	60fb      	str	r3, [r7, #12]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2b05      	cmp	r3, #5
 800c25e:	dc12      	bgt.n	800c286 <_ZN27positionEstimatorModelClass10initializeEv+0xce>
      rtDW.x_p[i] = rtP.DataStoreMemoryx_InitialValue_j[i];
 800c260:	4a1a      	ldr	r2, [pc, #104]	; (800c2cc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	3376      	adds	r3, #118	; 0x76
 800c266:	00db      	lsls	r3, r3, #3
 800c268:	4413      	add	r3, r2
 800c26a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c26e:	6879      	ldr	r1, [r7, #4]
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	f502 729e 	add.w	r2, r2, #316	; 0x13c
 800c276:	00d2      	lsls	r2, r2, #3
 800c278:	440a      	add	r2, r1
 800c27a:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	3301      	adds	r3, #1
 800c282:	60fb      	str	r3, [r7, #12]
 800c284:	e7e9      	b.n	800c25a <_ZN27positionEstimatorModelClass10initializeEv+0xa2>

    // End of Start for DataStoreMemory: '<S2>/DataStoreMemory - x'

    // SystemInitialize for Enabled SubSystem: '<S2>/Correct1'
    // SystemInitialize for Outport: '<S13>/yBlockOrdering'
    rtDW.blockOrdering_f = rtP.yBlockOrdering_Y0_a;
 800c286:	4b11      	ldr	r3, [pc, #68]	; (800c2cc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800c288:	f893 23e3 	ldrb.w	r2, [r3, #995]	; 0x3e3
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44

    // End of SystemInitialize for SubSystem: '<S2>/Correct1'

    // SystemInitialize for Enabled SubSystem: '<S2>/Correct2'
    // SystemInitialize for Outport: '<S14>/yBlockOrdering'
    rtDW.blockOrdering = rtP.yBlockOrdering_Y0_g;
 800c292:	4b0e      	ldr	r3, [pc, #56]	; (800c2cc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800c294:	f893 23e4 	ldrb.w	r2, [r3, #996]	; 0x3e4
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f883 2c43 	strb.w	r2, [r3, #3139]	; 0xc43

    // End of SystemInitialize for SubSystem: '<S2>/Correct2'

    // SystemInitialize for Enabled SubSystem: '<S1>/Correct1'
    // SystemInitialize for Outport: '<S4>/yBlockOrdering'
    rtDW.blockOrdering_k = rtP.yBlockOrdering_Y0;
 800c29e:	4b0b      	ldr	r3, [pc, #44]	; (800c2cc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800c2a0:	f893 23e0 	ldrb.w	r2, [r3, #992]	; 0x3e0
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f883 2c48 	strb.w	r2, [r3, #3144]	; 0xc48

    // End of SystemInitialize for SubSystem: '<S1>/Correct1'

    // SystemInitialize for Enabled SubSystem: '<S1>/Correct2'
    // SystemInitialize for Outport: '<S5>/yBlockOrdering'
    rtDW.blockOrdering_n = rtP.yBlockOrdering_Y0_k;
 800c2aa:	4b08      	ldr	r3, [pc, #32]	; (800c2cc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800c2ac:	f893 23e1 	ldrb.w	r2, [r3, #993]	; 0x3e1
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f883 2c47 	strb.w	r2, [r3, #3143]	; 0xc47

    // End of SystemInitialize for SubSystem: '<S1>/Correct2'

    // SystemInitialize for Enabled SubSystem: '<S1>/Correct3'
    // SystemInitialize for Outport: '<S6>/yBlockOrdering'
    rtDW.blockOrdering_p = rtP.yBlockOrdering_Y0_b;
 800c2b6:	4b05      	ldr	r3, [pc, #20]	; (800c2cc <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800c2b8:	f893 23e2 	ldrb.w	r2, [r3, #994]	; 0x3e2
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f883 2c46 	strb.w	r2, [r3, #3142]	; 0xc46

    // End of SystemInitialize for SubSystem: '<S1>/Correct3'
  }
}
 800c2c2:	bf00      	nop
 800c2c4:	3714      	adds	r7, #20
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd90      	pop	{r4, r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	200002b0 	.word	0x200002b0

0800c2d0 <_ZN27positionEstimatorModelClassC1Ev>:

// Constructor
positionEstimatorModelClass::positionEstimatorModelClass():
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  rtDW()
  ,rtU()
  ,rtY()
  ,rtM()
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f44f 6345 	mov.w	r3, #3152	; 0xc50
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	2100      	movs	r1, #0
 800c2e4:	f01c fe7b 	bl	8028fde <memset>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 800c2ee:	2280      	movs	r2, #128	; 0x80
 800c2f0:	2100      	movs	r1, #0
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f01c fe73 	bl	8028fde <memset>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 800c2fe:	2248      	movs	r2, #72	; 0x48
 800c300:	2100      	movs	r1, #0
 800c302:	4618      	mov	r0, r3
 800c304:	f01c fe6b 	bl	8028fde <memset>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2200      	movs	r2, #0
 800c30c:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
{
  // Currently there is no constructor body generated.
}
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4618      	mov	r0, r3
 800c314:	3708      	adds	r7, #8
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}

0800c31a <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800c31a:	b480      	push	{r7}
 800c31c:	b085      	sub	sp, #20
 800c31e:	af00      	add	r7, sp, #0
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]
 800c324:	603b      	str	r3, [r7, #0]
 800c326:	4603      	mov	r3, r0
 800c328:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800c32a:	bf00      	nop
 800c32c:	3714      	adds	r7, #20
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr

0800c336 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b084      	sub	sp, #16
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	60b9      	str	r1, [r7, #8]
 800c33e:	607a      	str	r2, [r7, #4]
 800c340:	603b      	str	r3, [r7, #0]
 800c342:	4603      	mov	r3, r0
 800c344:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800c346:	7bfb      	ldrb	r3, [r7, #15]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d003      	beq.n	800c354 <_out_char+0x1e>
    _putchar(character);
 800c34c:	7bfb      	ldrb	r3, [r7, #15]
 800c34e:	4618      	mov	r0, r3
 800c350:	f007 f808 	bl	8013364 <_putchar>
  }
}
 800c354:	bf00      	nop
 800c356:	3710      	adds	r7, #16
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	60fb      	str	r3, [r7, #12]
 800c36a:	e002      	b.n	800c372 <_strnlen_s+0x16>
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	3301      	adds	r3, #1
 800c370:	60fb      	str	r3, [r7, #12]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d004      	beq.n	800c384 <_strnlen_s+0x28>
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	1e5a      	subs	r2, r3, #1
 800c37e:	603a      	str	r2, [r7, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d1f3      	bne.n	800c36c <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	1ad3      	subs	r3, r2, r3
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3714      	adds	r7, #20
 800c38e:	46bd      	mov	sp, r7
 800c390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c394:	4770      	bx	lr

0800c396 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800c396:	b480      	push	{r7}
 800c398:	b083      	sub	sp, #12
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	4603      	mov	r3, r0
 800c39e:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800c3a0:	79fb      	ldrb	r3, [r7, #7]
 800c3a2:	2b2f      	cmp	r3, #47	; 0x2f
 800c3a4:	d904      	bls.n	800c3b0 <_is_digit+0x1a>
 800c3a6:	79fb      	ldrb	r3, [r7, #7]
 800c3a8:	2b39      	cmp	r3, #57	; 0x39
 800c3aa:	d801      	bhi.n	800c3b0 <_is_digit+0x1a>
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	e000      	b.n	800c3b2 <_is_digit+0x1c>
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	f003 0301 	and.w	r3, r3, #1
 800c3b6:	b2db      	uxtb	r3, r3
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	370c      	adds	r7, #12
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800c3d0:	e00e      	b.n	800c3f0 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	4613      	mov	r3, r2
 800c3d6:	009b      	lsls	r3, r3, #2
 800c3d8:	4413      	add	r3, r2
 800c3da:	005b      	lsls	r3, r3, #1
 800c3dc:	4618      	mov	r0, r3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	1c59      	adds	r1, r3, #1
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	6011      	str	r1, [r2, #0]
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	4403      	add	r3, r0
 800c3ec:	3b30      	subs	r3, #48	; 0x30
 800c3ee:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7ff ffcd 	bl	800c396 <_is_digit>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d1e7      	bne.n	800c3d2 <_atoi+0xe>
  }
  return i;
 800c402:	68fb      	ldr	r3, [r7, #12]
}
 800c404:	4618      	mov	r0, r3
 800c406:	3710      	adds	r7, #16
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800c40c:	b590      	push	{r4, r7, lr}
 800c40e:	b087      	sub	sp, #28
 800c410:	af00      	add	r7, sp, #0
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	607a      	str	r2, [r7, #4]
 800c418:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800c41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c420:	f003 0302 	and.w	r3, r3, #2
 800c424:	2b00      	cmp	r3, #0
 800c426:	d125      	bne.n	800c474 <_out_rev+0x68>
 800c428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c42a:	f003 0301 	and.w	r3, r3, #1
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d120      	bne.n	800c474 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800c432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c434:	617b      	str	r3, [r7, #20]
 800c436:	e00a      	b.n	800c44e <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	1c53      	adds	r3, r2, #1
 800c43c:	607b      	str	r3, [r7, #4]
 800c43e:	68fc      	ldr	r4, [r7, #12]
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	68b9      	ldr	r1, [r7, #8]
 800c444:	2020      	movs	r0, #32
 800c446:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	3301      	adds	r3, #1
 800c44c:	617b      	str	r3, [r7, #20]
 800c44e:	697a      	ldr	r2, [r7, #20]
 800c450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c452:	429a      	cmp	r2, r3
 800c454:	d3f0      	bcc.n	800c438 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800c456:	e00d      	b.n	800c474 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800c458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45a:	3b01      	subs	r3, #1
 800c45c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c45e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c462:	4413      	add	r3, r2
 800c464:	7818      	ldrb	r0, [r3, #0]
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	1c53      	adds	r3, r2, #1
 800c46a:	607b      	str	r3, [r7, #4]
 800c46c:	68fc      	ldr	r4, [r7, #12]
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	68b9      	ldr	r1, [r7, #8]
 800c472:	47a0      	blx	r4
  while (len) {
 800c474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c476:	2b00      	cmp	r3, #0
 800c478:	d1ee      	bne.n	800c458 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800c47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c47c:	f003 0302 	and.w	r3, r3, #2
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00e      	beq.n	800c4a2 <_out_rev+0x96>
    while (idx - start_idx < width) {
 800c484:	e007      	b.n	800c496 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	1c53      	adds	r3, r2, #1
 800c48a:	607b      	str	r3, [r7, #4]
 800c48c:	68fc      	ldr	r4, [r7, #12]
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	68b9      	ldr	r1, [r7, #8]
 800c492:	2020      	movs	r0, #32
 800c494:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	1ad3      	subs	r3, r2, r3
 800c49c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d8f1      	bhi.n	800c486 <_out_rev+0x7a>
    }
  }

  return idx;
 800c4a2:	687b      	ldr	r3, [r7, #4]
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	371c      	adds	r7, #28
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd90      	pop	{r4, r7, pc}

0800c4ac <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b088      	sub	sp, #32
 800c4b0:	af04      	add	r7, sp, #16
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	607a      	str	r2, [r7, #4]
 800c4b8:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800c4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4bc:	f003 0302 	and.w	r3, r3, #2
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d136      	bne.n	800c532 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800c4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d018      	beq.n	800c4fc <_ntoa_format+0x50>
 800c4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4cc:	f003 0301 	and.w	r3, r3, #1
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d013      	beq.n	800c4fc <_ntoa_format+0x50>
 800c4d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d104      	bne.n	800c4e6 <_ntoa_format+0x3a>
 800c4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4de:	f003 030c 	and.w	r3, r3, #12
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d00a      	beq.n	800c4fc <_ntoa_format+0x50>
      width--;
 800c4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e8:	3b01      	subs	r3, #1
 800c4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800c4ec:	e006      	b.n	800c4fc <_ntoa_format+0x50>
      buf[len++] = '0';
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	1c5a      	adds	r2, r3, #1
 800c4f2:	61fa      	str	r2, [r7, #28]
 800c4f4:	69ba      	ldr	r2, [r7, #24]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	2230      	movs	r2, #48	; 0x30
 800c4fa:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800c4fc:	69fa      	ldr	r2, [r7, #28]
 800c4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c500:	429a      	cmp	r2, r3
 800c502:	d20a      	bcs.n	800c51a <_ntoa_format+0x6e>
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	2b1f      	cmp	r3, #31
 800c508:	d9f1      	bls.n	800c4ee <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800c50a:	e006      	b.n	800c51a <_ntoa_format+0x6e>
      buf[len++] = '0';
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	1c5a      	adds	r2, r3, #1
 800c510:	61fa      	str	r2, [r7, #28]
 800c512:	69ba      	ldr	r2, [r7, #24]
 800c514:	4413      	add	r3, r2
 800c516:	2230      	movs	r2, #48	; 0x30
 800c518:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800c51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51c:	f003 0301 	and.w	r3, r3, #1
 800c520:	2b00      	cmp	r3, #0
 800c522:	d006      	beq.n	800c532 <_ntoa_format+0x86>
 800c524:	69fa      	ldr	r2, [r7, #28]
 800c526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c528:	429a      	cmp	r2, r3
 800c52a:	d202      	bcs.n	800c532 <_ntoa_format+0x86>
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	2b1f      	cmp	r3, #31
 800c530:	d9ec      	bls.n	800c50c <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800c532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c534:	f003 0310 	and.w	r3, r3, #16
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d058      	beq.n	800c5ee <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800c53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c542:	2b00      	cmp	r3, #0
 800c544:	d116      	bne.n	800c574 <_ntoa_format+0xc8>
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d013      	beq.n	800c574 <_ntoa_format+0xc8>
 800c54c:	69fa      	ldr	r2, [r7, #28]
 800c54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c550:	429a      	cmp	r2, r3
 800c552:	d003      	beq.n	800c55c <_ntoa_format+0xb0>
 800c554:	69fa      	ldr	r2, [r7, #28]
 800c556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c558:	429a      	cmp	r2, r3
 800c55a:	d10b      	bne.n	800c574 <_ntoa_format+0xc8>
      len--;
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	3b01      	subs	r3, #1
 800c560:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800c562:	69fb      	ldr	r3, [r7, #28]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d005      	beq.n	800c574 <_ntoa_format+0xc8>
 800c568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56a:	2b10      	cmp	r3, #16
 800c56c:	d102      	bne.n	800c574 <_ntoa_format+0xc8>
        len--;
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	3b01      	subs	r3, #1
 800c572:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800c574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c576:	2b10      	cmp	r3, #16
 800c578:	d10f      	bne.n	800c59a <_ntoa_format+0xee>
 800c57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57c:	f003 0320 	and.w	r3, r3, #32
 800c580:	2b00      	cmp	r3, #0
 800c582:	d10a      	bne.n	800c59a <_ntoa_format+0xee>
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	2b1f      	cmp	r3, #31
 800c588:	d807      	bhi.n	800c59a <_ntoa_format+0xee>
      buf[len++] = 'x';
 800c58a:	69fb      	ldr	r3, [r7, #28]
 800c58c:	1c5a      	adds	r2, r3, #1
 800c58e:	61fa      	str	r2, [r7, #28]
 800c590:	69ba      	ldr	r2, [r7, #24]
 800c592:	4413      	add	r3, r2
 800c594:	2278      	movs	r2, #120	; 0x78
 800c596:	701a      	strb	r2, [r3, #0]
 800c598:	e01f      	b.n	800c5da <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800c59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59c:	2b10      	cmp	r3, #16
 800c59e:	d10f      	bne.n	800c5c0 <_ntoa_format+0x114>
 800c5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a2:	f003 0320 	and.w	r3, r3, #32
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d00a      	beq.n	800c5c0 <_ntoa_format+0x114>
 800c5aa:	69fb      	ldr	r3, [r7, #28]
 800c5ac:	2b1f      	cmp	r3, #31
 800c5ae:	d807      	bhi.n	800c5c0 <_ntoa_format+0x114>
      buf[len++] = 'X';
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	1c5a      	adds	r2, r3, #1
 800c5b4:	61fa      	str	r2, [r7, #28]
 800c5b6:	69ba      	ldr	r2, [r7, #24]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	2258      	movs	r2, #88	; 0x58
 800c5bc:	701a      	strb	r2, [r3, #0]
 800c5be:	e00c      	b.n	800c5da <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800c5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c2:	2b02      	cmp	r3, #2
 800c5c4:	d109      	bne.n	800c5da <_ntoa_format+0x12e>
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	2b1f      	cmp	r3, #31
 800c5ca:	d806      	bhi.n	800c5da <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	1c5a      	adds	r2, r3, #1
 800c5d0:	61fa      	str	r2, [r7, #28]
 800c5d2:	69ba      	ldr	r2, [r7, #24]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	2262      	movs	r2, #98	; 0x62
 800c5d8:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	2b1f      	cmp	r3, #31
 800c5de:	d806      	bhi.n	800c5ee <_ntoa_format+0x142>
      buf[len++] = '0';
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	1c5a      	adds	r2, r3, #1
 800c5e4:	61fa      	str	r2, [r7, #28]
 800c5e6:	69ba      	ldr	r2, [r7, #24]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	2230      	movs	r2, #48	; 0x30
 800c5ec:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800c5ee:	69fb      	ldr	r3, [r7, #28]
 800c5f0:	2b1f      	cmp	r3, #31
 800c5f2:	d824      	bhi.n	800c63e <_ntoa_format+0x192>
    if (negative) {
 800c5f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d007      	beq.n	800c60c <_ntoa_format+0x160>
      buf[len++] = '-';
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	1c5a      	adds	r2, r3, #1
 800c600:	61fa      	str	r2, [r7, #28]
 800c602:	69ba      	ldr	r2, [r7, #24]
 800c604:	4413      	add	r3, r2
 800c606:	222d      	movs	r2, #45	; 0x2d
 800c608:	701a      	strb	r2, [r3, #0]
 800c60a:	e018      	b.n	800c63e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800c60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60e:	f003 0304 	and.w	r3, r3, #4
 800c612:	2b00      	cmp	r3, #0
 800c614:	d007      	beq.n	800c626 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	1c5a      	adds	r2, r3, #1
 800c61a:	61fa      	str	r2, [r7, #28]
 800c61c:	69ba      	ldr	r2, [r7, #24]
 800c61e:	4413      	add	r3, r2
 800c620:	222b      	movs	r2, #43	; 0x2b
 800c622:	701a      	strb	r2, [r3, #0]
 800c624:	e00b      	b.n	800c63e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800c626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c628:	f003 0308 	and.w	r3, r3, #8
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d006      	beq.n	800c63e <_ntoa_format+0x192>
      buf[len++] = ' ';
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	1c5a      	adds	r2, r3, #1
 800c634:	61fa      	str	r2, [r7, #28]
 800c636:	69ba      	ldr	r2, [r7, #24]
 800c638:	4413      	add	r3, r2
 800c63a:	2220      	movs	r2, #32
 800c63c:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800c63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c640:	9303      	str	r3, [sp, #12]
 800c642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c644:	9302      	str	r3, [sp, #8]
 800c646:	69fb      	ldr	r3, [r7, #28]
 800c648:	9301      	str	r3, [sp, #4]
 800c64a:	69bb      	ldr	r3, [r7, #24]
 800c64c:	9300      	str	r3, [sp, #0]
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	68b9      	ldr	r1, [r7, #8]
 800c654:	68f8      	ldr	r0, [r7, #12]
 800c656:	f7ff fed9 	bl	800c40c <_out_rev>
 800c65a:	4603      	mov	r3, r0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3710      	adds	r7, #16
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b096      	sub	sp, #88	; 0x58
 800c668:	af08      	add	r7, sp, #32
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	60b9      	str	r1, [r7, #8]
 800c66e:	607a      	str	r2, [r7, #4]
 800c670:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800c672:	2300      	movs	r3, #0
 800c674:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800c676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d103      	bne.n	800c684 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800c67c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c67e:	f023 0310 	bic.w	r3, r3, #16
 800c682:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800c684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d002      	beq.n	800c694 <_ntoa_long+0x30>
 800c68e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c690:	2b00      	cmp	r3, #0
 800c692:	d033      	beq.n	800c6fc <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 800c694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c696:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c698:	fbb3 f2f2 	udiv	r2, r3, r2
 800c69c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c69e:	fb01 f202 	mul.w	r2, r1, r2
 800c6a2:	1a9b      	subs	r3, r3, r2
 800c6a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800c6a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c6ac:	2b09      	cmp	r3, #9
 800c6ae:	d804      	bhi.n	800c6ba <_ntoa_long+0x56>
 800c6b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c6b4:	3330      	adds	r3, #48	; 0x30
 800c6b6:	b2da      	uxtb	r2, r3
 800c6b8:	e00d      	b.n	800c6d6 <_ntoa_long+0x72>
 800c6ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6bc:	f003 0320 	and.w	r3, r3, #32
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d001      	beq.n	800c6c8 <_ntoa_long+0x64>
 800c6c4:	2241      	movs	r2, #65	; 0x41
 800c6c6:	e000      	b.n	800c6ca <_ntoa_long+0x66>
 800c6c8:	2261      	movs	r2, #97	; 0x61
 800c6ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c6ce:	4413      	add	r3, r2
 800c6d0:	b2db      	uxtb	r3, r3
 800c6d2:	3b0a      	subs	r3, #10
 800c6d4:	b2da      	uxtb	r2, r3
 800c6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d8:	1c59      	adds	r1, r3, #1
 800c6da:	6379      	str	r1, [r7, #52]	; 0x34
 800c6dc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800c6e0:	440b      	add	r3, r1
 800c6e2:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800c6e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6ee:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800c6f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d002      	beq.n	800c6fc <_ntoa_long+0x98>
 800c6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6f8:	2b1f      	cmp	r3, #31
 800c6fa:	d9cb      	bls.n	800c694 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800c6fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6fe:	9306      	str	r3, [sp, #24]
 800c700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c702:	9305      	str	r3, [sp, #20]
 800c704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c706:	9304      	str	r3, [sp, #16]
 800c708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c70a:	9303      	str	r3, [sp, #12]
 800c70c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c710:	9302      	str	r3, [sp, #8]
 800c712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c714:	9301      	str	r3, [sp, #4]
 800c716:	f107 0310 	add.w	r3, r7, #16
 800c71a:	9300      	str	r3, [sp, #0]
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	68b9      	ldr	r1, [r7, #8]
 800c722:	68f8      	ldr	r0, [r7, #12]
 800c724:	f7ff fec2 	bl	800c4ac <_ntoa_format>
 800c728:	4603      	mov	r3, r0
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3738      	adds	r7, #56	; 0x38
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}

0800c732 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800c732:	b590      	push	{r4, r7, lr}
 800c734:	b097      	sub	sp, #92	; 0x5c
 800c736:	af08      	add	r7, sp, #32
 800c738:	60f8      	str	r0, [r7, #12]
 800c73a:	60b9      	str	r1, [r7, #8]
 800c73c:	607a      	str	r2, [r7, #4]
 800c73e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800c740:	2300      	movs	r3, #0
 800c742:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800c744:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800c748:	4323      	orrs	r3, r4
 800c74a:	d103      	bne.n	800c754 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800c74c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c74e:	f023 0310 	bic.w	r3, r3, #16
 800c752:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800c754:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d003      	beq.n	800c766 <_ntoa_long_long+0x34>
 800c75e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800c762:	4323      	orrs	r3, r4
 800c764:	d039      	beq.n	800c7da <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 800c766:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c76a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c76e:	f7f4 fae3 	bl	8000d38 <__aeabi_uldivmod>
 800c772:	461c      	mov	r4, r3
 800c774:	4613      	mov	r3, r2
 800c776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800c77a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c77e:	2b09      	cmp	r3, #9
 800c780:	d804      	bhi.n	800c78c <_ntoa_long_long+0x5a>
 800c782:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c786:	3330      	adds	r3, #48	; 0x30
 800c788:	b2da      	uxtb	r2, r3
 800c78a:	e00d      	b.n	800c7a8 <_ntoa_long_long+0x76>
 800c78c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c78e:	f003 0320 	and.w	r3, r3, #32
 800c792:	2b00      	cmp	r3, #0
 800c794:	d001      	beq.n	800c79a <_ntoa_long_long+0x68>
 800c796:	2241      	movs	r2, #65	; 0x41
 800c798:	e000      	b.n	800c79c <_ntoa_long_long+0x6a>
 800c79a:	2261      	movs	r2, #97	; 0x61
 800c79c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c7a0:	4413      	add	r3, r2
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	3b0a      	subs	r3, #10
 800c7a6:	b2da      	uxtb	r2, r3
 800c7a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7aa:	1c59      	adds	r1, r3, #1
 800c7ac:	6379      	str	r1, [r7, #52]	; 0x34
 800c7ae:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800c7b2:	440b      	add	r3, r1
 800c7b4:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800c7b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c7bc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c7c0:	f7f4 faba 	bl	8000d38 <__aeabi_uldivmod>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	460c      	mov	r4, r1
 800c7c8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800c7cc:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800c7d0:	4323      	orrs	r3, r4
 800c7d2:	d002      	beq.n	800c7da <_ntoa_long_long+0xa8>
 800c7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7d6:	2b1f      	cmp	r3, #31
 800c7d8:	d9c5      	bls.n	800c766 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800c7da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c7dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c7de:	9206      	str	r2, [sp, #24]
 800c7e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c7e2:	9205      	str	r2, [sp, #20]
 800c7e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c7e6:	9204      	str	r2, [sp, #16]
 800c7e8:	9303      	str	r3, [sp, #12]
 800c7ea:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800c7ee:	9302      	str	r3, [sp, #8]
 800c7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f2:	9301      	str	r3, [sp, #4]
 800c7f4:	f107 0310 	add.w	r3, r7, #16
 800c7f8:	9300      	str	r3, [sp, #0]
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	68b9      	ldr	r1, [r7, #8]
 800c800:	68f8      	ldr	r0, [r7, #12]
 800c802:	f7ff fe53 	bl	800c4ac <_ntoa_format>
 800c806:	4603      	mov	r3, r0
}
 800c808:	4618      	mov	r0, r3
 800c80a:	373c      	adds	r7, #60	; 0x3c
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd90      	pop	{r4, r7, pc}

0800c810 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800c810:	b590      	push	{r4, r7, lr}
 800c812:	b09d      	sub	sp, #116	; 0x74
 800c814:	af04      	add	r7, sp, #16
 800c816:	6178      	str	r0, [r7, #20]
 800c818:	6139      	str	r1, [r7, #16]
 800c81a:	60fa      	str	r2, [r7, #12]
 800c81c:	60bb      	str	r3, [r7, #8]
 800c81e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800c822:	2300      	movs	r3, #0
 800c824:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800c826:	f04f 0300 	mov.w	r3, #0
 800c82a:	f04f 0400 	mov.w	r4, #0
 800c82e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800c832:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c836:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c83a:	f7f4 f94d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d10f      	bne.n	800c864 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800c844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c846:	9303      	str	r3, [sp, #12]
 800c848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c84a:	9302      	str	r3, [sp, #8]
 800c84c:	2303      	movs	r3, #3
 800c84e:	9301      	str	r3, [sp, #4]
 800c850:	4baf      	ldr	r3, [pc, #700]	; (800cb10 <_ftoa+0x300>)
 800c852:	9300      	str	r3, [sp, #0]
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	6939      	ldr	r1, [r7, #16]
 800c85a:	6978      	ldr	r0, [r7, #20]
 800c85c:	f7ff fdd6 	bl	800c40c <_out_rev>
 800c860:	4603      	mov	r3, r0
 800c862:	e237      	b.n	800ccd4 <_ftoa+0x4c4>
  if (value < -DBL_MAX)
 800c864:	f04f 32ff 	mov.w	r2, #4294967295
 800c868:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800c86c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c870:	f7f4 f93c 	bl	8000aec <__aeabi_dcmplt>
 800c874:	4603      	mov	r3, r0
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00f      	beq.n	800c89a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800c87a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c87c:	9303      	str	r3, [sp, #12]
 800c87e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c880:	9302      	str	r3, [sp, #8]
 800c882:	2304      	movs	r3, #4
 800c884:	9301      	str	r3, [sp, #4]
 800c886:	4ba3      	ldr	r3, [pc, #652]	; (800cb14 <_ftoa+0x304>)
 800c888:	9300      	str	r3, [sp, #0]
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	68fa      	ldr	r2, [r7, #12]
 800c88e:	6939      	ldr	r1, [r7, #16]
 800c890:	6978      	ldr	r0, [r7, #20]
 800c892:	f7ff fdbb 	bl	800c40c <_out_rev>
 800c896:	4603      	mov	r3, r0
 800c898:	e21c      	b.n	800ccd4 <_ftoa+0x4c4>
  if (value > DBL_MAX)
 800c89a:	f04f 32ff 	mov.w	r2, #4294967295
 800c89e:	4b9e      	ldr	r3, [pc, #632]	; (800cb18 <_ftoa+0x308>)
 800c8a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c8a4:	f7f4 f940 	bl	8000b28 <__aeabi_dcmpgt>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d01d      	beq.n	800c8ea <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800c8ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8b0:	f003 0304 	and.w	r3, r3, #4
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d001      	beq.n	800c8bc <_ftoa+0xac>
 800c8b8:	4b98      	ldr	r3, [pc, #608]	; (800cb1c <_ftoa+0x30c>)
 800c8ba:	e000      	b.n	800c8be <_ftoa+0xae>
 800c8bc:	4b98      	ldr	r3, [pc, #608]	; (800cb20 <_ftoa+0x310>)
 800c8be:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c8c0:	f002 0204 	and.w	r2, r2, #4
 800c8c4:	2a00      	cmp	r2, #0
 800c8c6:	d001      	beq.n	800c8cc <_ftoa+0xbc>
 800c8c8:	2204      	movs	r2, #4
 800c8ca:	e000      	b.n	800c8ce <_ftoa+0xbe>
 800c8cc:	2203      	movs	r2, #3
 800c8ce:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c8d0:	9103      	str	r1, [sp, #12]
 800c8d2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c8d4:	9102      	str	r1, [sp, #8]
 800c8d6:	9201      	str	r2, [sp, #4]
 800c8d8:	9300      	str	r3, [sp, #0]
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	6939      	ldr	r1, [r7, #16]
 800c8e0:	6978      	ldr	r0, [r7, #20]
 800c8e2:	f7ff fd93 	bl	800c40c <_out_rev>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	e1f4      	b.n	800ccd4 <_ftoa+0x4c4>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800c8ea:	a385      	add	r3, pc, #532	; (adr r3, 800cb00 <_ftoa+0x2f0>)
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c8f4:	f7f4 f918 	bl	8000b28 <__aeabi_dcmpgt>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d109      	bne.n	800c912 <_ftoa+0x102>
 800c8fe:	a382      	add	r3, pc, #520	; (adr r3, 800cb08 <_ftoa+0x2f8>)
 800c900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c904:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c908:	f7f4 f8f0 	bl	8000aec <__aeabi_dcmplt>
 800c90c:	4603      	mov	r3, r0
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d00f      	beq.n	800c932 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800c912:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c914:	9302      	str	r3, [sp, #8]
 800c916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c918:	9301      	str	r3, [sp, #4]
 800c91a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	ed97 0b00 	vldr	d0, [r7]
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	68fa      	ldr	r2, [r7, #12]
 800c926:	6939      	ldr	r1, [r7, #16]
 800c928:	6978      	ldr	r0, [r7, #20]
 800c92a:	f000 f9dd 	bl	800cce8 <_etoa>
 800c92e:	4603      	mov	r3, r0
 800c930:	e1d0      	b.n	800ccd4 <_ftoa+0x4c4>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800c932:	2300      	movs	r3, #0
 800c934:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800c938:	f04f 0200 	mov.w	r2, #0
 800c93c:	f04f 0300 	mov.w	r3, #0
 800c940:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c944:	f7f4 f8d2 	bl	8000aec <__aeabi_dcmplt>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00e      	beq.n	800c96c <_ftoa+0x15c>
    negative = true;
 800c94e:	2301      	movs	r3, #1
 800c950:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800c954:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c958:	f04f 0000 	mov.w	r0, #0
 800c95c:	f04f 0100 	mov.w	r1, #0
 800c960:	f7f3 fc9a 	bl	8000298 <__aeabi_dsub>
 800c964:	4603      	mov	r3, r0
 800c966:	460c      	mov	r4, r1
 800c968:	e9c7 3400 	strd	r3, r4, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800c96c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c96e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c972:	2b00      	cmp	r3, #0
 800c974:	d10e      	bne.n	800c994 <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800c976:	2306      	movs	r3, #6
 800c978:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800c97a:	e00b      	b.n	800c994 <_ftoa+0x184>
    buf[len++] = '0';
 800c97c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c97e:	1c5a      	adds	r2, r3, #1
 800c980:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c982:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c986:	4413      	add	r3, r2
 800c988:	2230      	movs	r2, #48	; 0x30
 800c98a:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800c98e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c990:	3b01      	subs	r3, #1
 800c992:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800c994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c996:	2b1f      	cmp	r3, #31
 800c998:	d802      	bhi.n	800c9a0 <_ftoa+0x190>
 800c99a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c99c:	2b09      	cmp	r3, #9
 800c99e:	d8ed      	bhi.n	800c97c <_ftoa+0x16c>
  }

  int whole = (int)value;
 800c9a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9a4:	f7f4 f8e0 	bl	8000b68 <__aeabi_d2iz>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800c9ac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c9ae:	f7f3 fdc1 	bl	8000534 <__aeabi_i2d>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	460c      	mov	r4, r1
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	4623      	mov	r3, r4
 800c9ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9be:	f7f3 fc6b 	bl	8000298 <__aeabi_dsub>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	460c      	mov	r4, r1
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	4621      	mov	r1, r4
 800c9ca:	4a56      	ldr	r2, [pc, #344]	; (800cb24 <_ftoa+0x314>)
 800c9cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9ce:	00db      	lsls	r3, r3, #3
 800c9d0:	4413      	add	r3, r2
 800c9d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	4623      	mov	r3, r4
 800c9da:	f7f3 fe15 	bl	8000608 <__aeabi_dmul>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	460c      	mov	r4, r1
 800c9e2:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800c9e6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c9ea:	f7f4 f8e5 	bl	8000bb8 <__aeabi_d2uiz>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800c9f2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c9f4:	f7f3 fd8e 	bl	8000514 <__aeabi_ui2d>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	460c      	mov	r4, r1
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	4623      	mov	r3, r4
 800ca00:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800ca04:	f7f3 fc48 	bl	8000298 <__aeabi_dsub>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	460c      	mov	r4, r1
 800ca0c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800ca10:	f04f 0200 	mov.w	r2, #0
 800ca14:	4b44      	ldr	r3, [pc, #272]	; (800cb28 <_ftoa+0x318>)
 800ca16:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ca1a:	f7f4 f885 	bl	8000b28 <__aeabi_dcmpgt>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d018      	beq.n	800ca56 <_ftoa+0x246>
    ++frac;
 800ca24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca26:	3301      	adds	r3, #1
 800ca28:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800ca2a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ca2c:	f7f3 fd72 	bl	8000514 <__aeabi_ui2d>
 800ca30:	4a3c      	ldr	r2, [pc, #240]	; (800cb24 <_ftoa+0x314>)
 800ca32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca34:	00db      	lsls	r3, r3, #3
 800ca36:	4413      	add	r3, r2
 800ca38:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	4623      	mov	r3, r4
 800ca40:	f7f4 f868 	bl	8000b14 <__aeabi_dcmpge>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d01a      	beq.n	800ca80 <_ftoa+0x270>
      frac = 0;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800ca4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca50:	3301      	adds	r3, #1
 800ca52:	657b      	str	r3, [r7, #84]	; 0x54
 800ca54:	e014      	b.n	800ca80 <_ftoa+0x270>
    }
  }
  else if (diff < 0.5) {
 800ca56:	f04f 0200 	mov.w	r2, #0
 800ca5a:	4b33      	ldr	r3, [pc, #204]	; (800cb28 <_ftoa+0x318>)
 800ca5c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ca60:	f7f4 f844 	bl	8000aec <__aeabi_dcmplt>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d10a      	bne.n	800ca80 <_ftoa+0x270>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800ca6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d004      	beq.n	800ca7a <_ftoa+0x26a>
 800ca70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca72:	f003 0301 	and.w	r3, r3, #1
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d002      	beq.n	800ca80 <_ftoa+0x270>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800ca7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800ca80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d136      	bne.n	800caf4 <_ftoa+0x2e4>
    diff = value - (double)whole;
 800ca86:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ca88:	f7f3 fd54 	bl	8000534 <__aeabi_i2d>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	460c      	mov	r4, r1
 800ca90:	461a      	mov	r2, r3
 800ca92:	4623      	mov	r3, r4
 800ca94:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca98:	f7f3 fbfe 	bl	8000298 <__aeabi_dsub>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	460c      	mov	r4, r1
 800caa0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800caa4:	2301      	movs	r3, #1
 800caa6:	461c      	mov	r4, r3
 800caa8:	f04f 0200 	mov.w	r2, #0
 800caac:	4b1e      	ldr	r3, [pc, #120]	; (800cb28 <_ftoa+0x318>)
 800caae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800cab2:	f7f4 f81b 	bl	8000aec <__aeabi_dcmplt>
 800cab6:	4603      	mov	r3, r0
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d101      	bne.n	800cac0 <_ftoa+0x2b0>
 800cabc:	2300      	movs	r3, #0
 800cabe:	461c      	mov	r4, r3
 800cac0:	b2e3      	uxtb	r3, r4
 800cac2:	f083 0301 	eor.w	r3, r3, #1
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d109      	bne.n	800cae0 <_ftoa+0x2d0>
 800cacc:	f04f 0200 	mov.w	r2, #0
 800cad0:	4b15      	ldr	r3, [pc, #84]	; (800cb28 <_ftoa+0x318>)
 800cad2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800cad6:	f7f4 f827 	bl	8000b28 <__aeabi_dcmpgt>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d069      	beq.n	800cbb4 <_ftoa+0x3a4>
 800cae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cae2:	f003 0301 	and.w	r3, r3, #1
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	f000 8087 	beq.w	800cbfa <_ftoa+0x3ea>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800caec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800caee:	3301      	adds	r3, #1
 800caf0:	657b      	str	r3, [r7, #84]	; 0x54
 800caf2:	e082      	b.n	800cbfa <_ftoa+0x3ea>
    }
  }
  else {
    unsigned int count = prec;
 800caf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800caf6:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800caf8:	e039      	b.n	800cb6e <_ftoa+0x35e>
 800cafa:	bf00      	nop
 800cafc:	f3af 8000 	nop.w
 800cb00:	00000000 	.word	0x00000000
 800cb04:	41cdcd65 	.word	0x41cdcd65
 800cb08:	00000000 	.word	0x00000000
 800cb0c:	c1cdcd65 	.word	0xc1cdcd65
 800cb10:	0802d688 	.word	0x0802d688
 800cb14:	0802d68c 	.word	0x0802d68c
 800cb18:	7fefffff 	.word	0x7fefffff
 800cb1c:	0802d694 	.word	0x0802d694
 800cb20:	0802d69c 	.word	0x0802d69c
 800cb24:	0802dc10 	.word	0x0802dc10
 800cb28:	3fe00000 	.word	0x3fe00000
      --count;
 800cb2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb2e:	3b01      	subs	r3, #1
 800cb30:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800cb32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb34:	4b69      	ldr	r3, [pc, #420]	; (800ccdc <_ftoa+0x4cc>)
 800cb36:	fba3 2301 	umull	r2, r3, r3, r1
 800cb3a:	08da      	lsrs	r2, r3, #3
 800cb3c:	4613      	mov	r3, r2
 800cb3e:	009b      	lsls	r3, r3, #2
 800cb40:	4413      	add	r3, r2
 800cb42:	005b      	lsls	r3, r3, #1
 800cb44:	1aca      	subs	r2, r1, r3
 800cb46:	b2d2      	uxtb	r2, r2
 800cb48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb4a:	1c59      	adds	r1, r3, #1
 800cb4c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800cb4e:	3230      	adds	r2, #48	; 0x30
 800cb50:	b2d2      	uxtb	r2, r2
 800cb52:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800cb56:	440b      	add	r3, r1
 800cb58:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800cb5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb5e:	4a5f      	ldr	r2, [pc, #380]	; (800ccdc <_ftoa+0x4cc>)
 800cb60:	fba2 2303 	umull	r2, r3, r2, r3
 800cb64:	08db      	lsrs	r3, r3, #3
 800cb66:	653b      	str	r3, [r7, #80]	; 0x50
 800cb68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d003      	beq.n	800cb76 <_ftoa+0x366>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800cb6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb70:	2b1f      	cmp	r3, #31
 800cb72:	d9db      	bls.n	800cb2c <_ftoa+0x31c>
 800cb74:	e00a      	b.n	800cb8c <_ftoa+0x37c>
        break;
 800cb76:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800cb78:	e008      	b.n	800cb8c <_ftoa+0x37c>
      buf[len++] = '0';
 800cb7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb7c:	1c5a      	adds	r2, r3, #1
 800cb7e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800cb80:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800cb84:	4413      	add	r3, r2
 800cb86:	2230      	movs	r2, #48	; 0x30
 800cb88:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800cb8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb8e:	2b1f      	cmp	r3, #31
 800cb90:	d804      	bhi.n	800cb9c <_ftoa+0x38c>
 800cb92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb94:	1e5a      	subs	r2, r3, #1
 800cb96:	64fa      	str	r2, [r7, #76]	; 0x4c
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d1ee      	bne.n	800cb7a <_ftoa+0x36a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800cb9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb9e:	2b1f      	cmp	r3, #31
 800cba0:	d82b      	bhi.n	800cbfa <_ftoa+0x3ea>
      // add decimal
      buf[len++] = '.';
 800cba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cba4:	1c5a      	adds	r2, r3, #1
 800cba6:	65fa      	str	r2, [r7, #92]	; 0x5c
 800cba8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800cbac:	4413      	add	r3, r2
 800cbae:	222e      	movs	r2, #46	; 0x2e
 800cbb0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800cbb4:	e021      	b.n	800cbfa <_ftoa+0x3ea>
    buf[len++] = (char)(48 + (whole % 10));
 800cbb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cbb8:	4b49      	ldr	r3, [pc, #292]	; (800cce0 <_ftoa+0x4d0>)
 800cbba:	fb83 1302 	smull	r1, r3, r3, r2
 800cbbe:	1099      	asrs	r1, r3, #2
 800cbc0:	17d3      	asrs	r3, r2, #31
 800cbc2:	1ac9      	subs	r1, r1, r3
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	440b      	add	r3, r1
 800cbca:	005b      	lsls	r3, r3, #1
 800cbcc:	1ad1      	subs	r1, r2, r3
 800cbce:	b2ca      	uxtb	r2, r1
 800cbd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbd2:	1c59      	adds	r1, r3, #1
 800cbd4:	65f9      	str	r1, [r7, #92]	; 0x5c
 800cbd6:	3230      	adds	r2, #48	; 0x30
 800cbd8:	b2d2      	uxtb	r2, r2
 800cbda:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800cbde:	440b      	add	r3, r1
 800cbe0:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800cbe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbe6:	4a3e      	ldr	r2, [pc, #248]	; (800cce0 <_ftoa+0x4d0>)
 800cbe8:	fb82 1203 	smull	r1, r2, r2, r3
 800cbec:	1092      	asrs	r2, r2, #2
 800cbee:	17db      	asrs	r3, r3, #31
 800cbf0:	1ad3      	subs	r3, r2, r3
 800cbf2:	657b      	str	r3, [r7, #84]	; 0x54
 800cbf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d003      	beq.n	800cc02 <_ftoa+0x3f2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800cbfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbfc:	2b1f      	cmp	r3, #31
 800cbfe:	d9da      	bls.n	800cbb6 <_ftoa+0x3a6>
 800cc00:	e000      	b.n	800cc04 <_ftoa+0x3f4>
      break;
 800cc02:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800cc04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc06:	f003 0302 	and.w	r3, r3, #2
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d124      	bne.n	800cc58 <_ftoa+0x448>
 800cc0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc10:	f003 0301 	and.w	r3, r3, #1
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d01f      	beq.n	800cc58 <_ftoa+0x448>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800cc18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d015      	beq.n	800cc4a <_ftoa+0x43a>
 800cc1e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d104      	bne.n	800cc30 <_ftoa+0x420>
 800cc26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc28:	f003 030c 	and.w	r3, r3, #12
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d00c      	beq.n	800cc4a <_ftoa+0x43a>
      width--;
 800cc30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc32:	3b01      	subs	r3, #1
 800cc34:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800cc36:	e008      	b.n	800cc4a <_ftoa+0x43a>
      buf[len++] = '0';
 800cc38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc3a:	1c5a      	adds	r2, r3, #1
 800cc3c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800cc3e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800cc42:	4413      	add	r3, r2
 800cc44:	2230      	movs	r2, #48	; 0x30
 800cc46:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800cc4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d202      	bcs.n	800cc58 <_ftoa+0x448>
 800cc52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc54:	2b1f      	cmp	r3, #31
 800cc56:	d9ef      	bls.n	800cc38 <_ftoa+0x428>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800cc58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc5a:	2b1f      	cmp	r3, #31
 800cc5c:	d82a      	bhi.n	800ccb4 <_ftoa+0x4a4>
    if (negative) {
 800cc5e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d009      	beq.n	800cc7a <_ftoa+0x46a>
      buf[len++] = '-';
 800cc66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc68:	1c5a      	adds	r2, r3, #1
 800cc6a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800cc6c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800cc70:	4413      	add	r3, r2
 800cc72:	222d      	movs	r2, #45	; 0x2d
 800cc74:	f803 2c48 	strb.w	r2, [r3, #-72]
 800cc78:	e01c      	b.n	800ccb4 <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_PLUS) {
 800cc7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc7c:	f003 0304 	and.w	r3, r3, #4
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d009      	beq.n	800cc98 <_ftoa+0x488>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800cc84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc86:	1c5a      	adds	r2, r3, #1
 800cc88:	65fa      	str	r2, [r7, #92]	; 0x5c
 800cc8a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800cc8e:	4413      	add	r3, r2
 800cc90:	222b      	movs	r2, #43	; 0x2b
 800cc92:	f803 2c48 	strb.w	r2, [r3, #-72]
 800cc96:	e00d      	b.n	800ccb4 <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_SPACE) {
 800cc98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc9a:	f003 0308 	and.w	r3, r3, #8
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d008      	beq.n	800ccb4 <_ftoa+0x4a4>
      buf[len++] = ' ';
 800cca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cca4:	1c5a      	adds	r2, r3, #1
 800cca6:	65fa      	str	r2, [r7, #92]	; 0x5c
 800cca8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800ccac:	4413      	add	r3, r2
 800ccae:	2220      	movs	r2, #32
 800ccb0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800ccb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ccb6:	9303      	str	r3, [sp, #12]
 800ccb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ccba:	9302      	str	r3, [sp, #8]
 800ccbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccbe:	9301      	str	r3, [sp, #4]
 800ccc0:	f107 0318 	add.w	r3, r7, #24
 800ccc4:	9300      	str	r3, [sp, #0]
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	68fa      	ldr	r2, [r7, #12]
 800ccca:	6939      	ldr	r1, [r7, #16]
 800cccc:	6978      	ldr	r0, [r7, #20]
 800ccce:	f7ff fb9d 	bl	800c40c <_out_rev>
 800ccd2:	4603      	mov	r3, r0
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3764      	adds	r7, #100	; 0x64
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd90      	pop	{r4, r7, pc}
 800ccdc:	cccccccd 	.word	0xcccccccd
 800cce0:	66666667 	.word	0x66666667
 800cce4:	00000000 	.word	0x00000000

0800cce8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800cce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccec:	b09d      	sub	sp, #116	; 0x74
 800ccee:	af06      	add	r7, sp, #24
 800ccf0:	61f8      	str	r0, [r7, #28]
 800ccf2:	61b9      	str	r1, [r7, #24]
 800ccf4:	617a      	str	r2, [r7, #20]
 800ccf6:	613b      	str	r3, [r7, #16]
 800ccf8:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800ccfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cd00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cd04:	f7f3 fee8 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d014      	beq.n	800cd38 <_etoa+0x50>
 800cd0e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd12:	4bc9      	ldr	r3, [pc, #804]	; (800d038 <_etoa+0x350>)
 800cd14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cd18:	f7f3 ff06 	bl	8000b28 <__aeabi_dcmpgt>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d10a      	bne.n	800cd38 <_etoa+0x50>
 800cd22:	f04f 32ff 	mov.w	r2, #4294967295
 800cd26:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800cd2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cd2e:	f7f3 fedd 	bl	8000aec <__aeabi_dcmplt>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d012      	beq.n	800cd5e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800cd38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cd3c:	9302      	str	r3, [sp, #8]
 800cd3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cd42:	9301      	str	r3, [sp, #4]
 800cd44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cd48:	9300      	str	r3, [sp, #0]
 800cd4a:	ed97 0b02 	vldr	d0, [r7, #8]
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	697a      	ldr	r2, [r7, #20]
 800cd52:	69b9      	ldr	r1, [r7, #24]
 800cd54:	69f8      	ldr	r0, [r7, #28]
 800cd56:	f7ff fd5b 	bl	800c810 <_ftoa>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	e24f      	b.n	800d1fe <_etoa+0x516>
  }

  // determine the sign
  const bool negative = value < 0;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	461c      	mov	r4, r3
 800cd62:	f04f 0200 	mov.w	r2, #0
 800cd66:	f04f 0300 	mov.w	r3, #0
 800cd6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cd6e:	f7f3 febd 	bl	8000aec <__aeabi_dcmplt>
 800cd72:	4603      	mov	r3, r0
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d101      	bne.n	800cd7c <_etoa+0x94>
 800cd78:	2300      	movs	r3, #0
 800cd7a:	461c      	mov	r4, r3
 800cd7c:	f887 404b 	strb.w	r4, [r7, #75]	; 0x4b
  if (negative) {
 800cd80:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d005      	beq.n	800cd94 <_etoa+0xac>
    value = -value;
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	60bb      	str	r3, [r7, #8]
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cd92:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800cd94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cd98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d102      	bne.n	800cda6 <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800cda0:	2306      	movs	r3, #6
 800cda2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800cda6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800cdaa:	e9c7 3408 	strd	r3, r4, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800cdae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cdb2:	f04f 0300 	mov.w	r3, #0
 800cdb6:	f04f 0400 	mov.w	r4, #0
 800cdba:	0d13      	lsrs	r3, r2, #20
 800cdbc:	2400      	movs	r4, #0
 800cdbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cdc2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cdc6:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800cdc8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800cdcc:	f04f 31ff 	mov.w	r1, #4294967295
 800cdd0:	4a9a      	ldr	r2, [pc, #616]	; (800d03c <_etoa+0x354>)
 800cdd2:	ea03 0801 	and.w	r8, r3, r1
 800cdd6:	ea04 0902 	and.w	r9, r4, r2
 800cdda:	f04f 0100 	mov.w	r1, #0
 800cdde:	4a98      	ldr	r2, [pc, #608]	; (800d040 <_etoa+0x358>)
 800cde0:	ea48 0301 	orr.w	r3, r8, r1
 800cde4:	ea49 0402 	orr.w	r4, r9, r2
 800cde8:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800cdec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cdee:	f7f3 fba1 	bl	8000534 <__aeabi_i2d>
 800cdf2:	a385      	add	r3, pc, #532	; (adr r3, 800d008 <_etoa+0x320>)
 800cdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf8:	f7f3 fc06 	bl	8000608 <__aeabi_dmul>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	460c      	mov	r4, r1
 800ce00:	4618      	mov	r0, r3
 800ce02:	4621      	mov	r1, r4
 800ce04:	a382      	add	r3, pc, #520	; (adr r3, 800d010 <_etoa+0x328>)
 800ce06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0a:	f7f3 fa47 	bl	800029c <__adddf3>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	460c      	mov	r4, r1
 800ce12:	4698      	mov	r8, r3
 800ce14:	46a1      	mov	r9, r4
 800ce16:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ce1a:	f04f 0200 	mov.w	r2, #0
 800ce1e:	4b89      	ldr	r3, [pc, #548]	; (800d044 <_etoa+0x35c>)
 800ce20:	f7f3 fa3a 	bl	8000298 <__aeabi_dsub>
 800ce24:	4603      	mov	r3, r0
 800ce26:	460c      	mov	r4, r1
 800ce28:	4618      	mov	r0, r3
 800ce2a:	4621      	mov	r1, r4
 800ce2c:	a37a      	add	r3, pc, #488	; (adr r3, 800d018 <_etoa+0x330>)
 800ce2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce32:	f7f3 fbe9 	bl	8000608 <__aeabi_dmul>
 800ce36:	4603      	mov	r3, r0
 800ce38:	460c      	mov	r4, r1
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	4623      	mov	r3, r4
 800ce3e:	4640      	mov	r0, r8
 800ce40:	4649      	mov	r1, r9
 800ce42:	f7f3 fa2b 	bl	800029c <__adddf3>
 800ce46:	4603      	mov	r3, r0
 800ce48:	460c      	mov	r4, r1
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	4621      	mov	r1, r4
 800ce4e:	f7f3 fe8b 	bl	8000b68 <__aeabi_d2iz>
 800ce52:	4603      	mov	r3, r0
 800ce54:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800ce56:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ce58:	f7f3 fb6c 	bl	8000534 <__aeabi_i2d>
 800ce5c:	a370      	add	r3, pc, #448	; (adr r3, 800d020 <_etoa+0x338>)
 800ce5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce62:	f7f3 fbd1 	bl	8000608 <__aeabi_dmul>
 800ce66:	4603      	mov	r3, r0
 800ce68:	460c      	mov	r4, r1
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	4621      	mov	r1, r4
 800ce6e:	f04f 0200 	mov.w	r2, #0
 800ce72:	4b75      	ldr	r3, [pc, #468]	; (800d048 <_etoa+0x360>)
 800ce74:	f7f3 fa12 	bl	800029c <__adddf3>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	460c      	mov	r4, r1
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	4621      	mov	r1, r4
 800ce80:	f7f3 fe72 	bl	8000b68 <__aeabi_d2iz>
 800ce84:	4603      	mov	r3, r0
 800ce86:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800ce88:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ce8a:	f7f3 fb53 	bl	8000534 <__aeabi_i2d>
 800ce8e:	a366      	add	r3, pc, #408	; (adr r3, 800d028 <_etoa+0x340>)
 800ce90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce94:	f7f3 fbb8 	bl	8000608 <__aeabi_dmul>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	460c      	mov	r4, r1
 800ce9c:	4698      	mov	r8, r3
 800ce9e:	46a1      	mov	r9, r4
 800cea0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cea2:	f7f3 fb47 	bl	8000534 <__aeabi_i2d>
 800cea6:	a362      	add	r3, pc, #392	; (adr r3, 800d030 <_etoa+0x348>)
 800cea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceac:	f7f3 fbac 	bl	8000608 <__aeabi_dmul>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	460c      	mov	r4, r1
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	4623      	mov	r3, r4
 800ceb8:	4640      	mov	r0, r8
 800ceba:	4649      	mov	r1, r9
 800cebc:	f7f3 f9ec 	bl	8000298 <__aeabi_dsub>
 800cec0:	4603      	mov	r3, r0
 800cec2:	460c      	mov	r4, r1
 800cec4:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  const double z2 = z * z;
 800cec8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cecc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800ced0:	f7f3 fb9a 	bl	8000608 <__aeabi_dmul>
 800ced4:	4603      	mov	r3, r0
 800ced6:	460c      	mov	r4, r1
 800ced8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800cedc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cede:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800cee2:	4619      	mov	r1, r3
 800cee4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800cee8:	f04f 0300 	mov.w	r3, #0
 800ceec:	f04f 0400 	mov.w	r4, #0
 800cef0:	050c      	lsls	r4, r1, #20
 800cef2:	2300      	movs	r3, #0
 800cef4:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800cef8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800cefc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cf00:	4602      	mov	r2, r0
 800cf02:	460b      	mov	r3, r1
 800cf04:	f7f3 f9ca 	bl	800029c <__adddf3>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	460c      	mov	r4, r1
 800cf0c:	469a      	mov	sl, r3
 800cf0e:	46a3      	mov	fp, r4
 800cf10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cf14:	f04f 0000 	mov.w	r0, #0
 800cf18:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800cf1c:	f7f3 f9bc 	bl	8000298 <__aeabi_dsub>
 800cf20:	4603      	mov	r3, r0
 800cf22:	460c      	mov	r4, r1
 800cf24:	e9c7 3400 	strd	r3, r4, [r7]
 800cf28:	f04f 0200 	mov.w	r2, #0
 800cf2c:	4b47      	ldr	r3, [pc, #284]	; (800d04c <_etoa+0x364>)
 800cf2e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cf32:	f7f3 fc93 	bl	800085c <__aeabi_ddiv>
 800cf36:	4603      	mov	r3, r0
 800cf38:	460c      	mov	r4, r1
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	4621      	mov	r1, r4
 800cf3e:	f04f 0200 	mov.w	r2, #0
 800cf42:	4b43      	ldr	r3, [pc, #268]	; (800d050 <_etoa+0x368>)
 800cf44:	f7f3 f9aa 	bl	800029c <__adddf3>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	460c      	mov	r4, r1
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	4623      	mov	r3, r4
 800cf50:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cf54:	f7f3 fc82 	bl	800085c <__aeabi_ddiv>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	460c      	mov	r4, r1
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	4621      	mov	r1, r4
 800cf60:	f04f 0200 	mov.w	r2, #0
 800cf64:	4b3b      	ldr	r3, [pc, #236]	; (800d054 <_etoa+0x36c>)
 800cf66:	f7f3 f999 	bl	800029c <__adddf3>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	460c      	mov	r4, r1
 800cf6e:	461a      	mov	r2, r3
 800cf70:	4623      	mov	r3, r4
 800cf72:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cf76:	f7f3 fc71 	bl	800085c <__aeabi_ddiv>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	460c      	mov	r4, r1
 800cf7e:	461a      	mov	r2, r3
 800cf80:	4623      	mov	r3, r4
 800cf82:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf86:	f7f3 f989 	bl	800029c <__adddf3>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	460c      	mov	r4, r1
 800cf8e:	461a      	mov	r2, r3
 800cf90:	4623      	mov	r3, r4
 800cf92:	4650      	mov	r0, sl
 800cf94:	4659      	mov	r1, fp
 800cf96:	f7f3 fc61 	bl	800085c <__aeabi_ddiv>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	460c      	mov	r4, r1
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	4621      	mov	r1, r4
 800cfa2:	f04f 0200 	mov.w	r2, #0
 800cfa6:	4b26      	ldr	r3, [pc, #152]	; (800d040 <_etoa+0x358>)
 800cfa8:	f7f3 f978 	bl	800029c <__adddf3>
 800cfac:	4603      	mov	r3, r0
 800cfae:	460c      	mov	r4, r1
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	4623      	mov	r3, r4
 800cfb4:	4640      	mov	r0, r8
 800cfb6:	4649      	mov	r1, r9
 800cfb8:	f7f3 fb26 	bl	8000608 <__aeabi_dmul>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	460c      	mov	r4, r1
 800cfc0:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 800cfc4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800cfc8:	461a      	mov	r2, r3
 800cfca:	4623      	mov	r3, r4
 800cfcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cfd0:	f7f3 fd8c 	bl	8000aec <__aeabi_dcmplt>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d00d      	beq.n	800cff6 <_etoa+0x30e>
    expval--;
 800cfda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfdc:	3b01      	subs	r3, #1
 800cfde:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 800cfe0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800cfe4:	f04f 0200 	mov.w	r2, #0
 800cfe8:	4b19      	ldr	r3, [pc, #100]	; (800d050 <_etoa+0x368>)
 800cfea:	f7f3 fc37 	bl	800085c <__aeabi_ddiv>
 800cfee:	4603      	mov	r3, r0
 800cff0:	460c      	mov	r4, r1
 800cff2:	e9c7 3408 	strd	r3, r4, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800cff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cff8:	2b63      	cmp	r3, #99	; 0x63
 800cffa:	dc2d      	bgt.n	800d058 <_etoa+0x370>
 800cffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cffe:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800d002:	db29      	blt.n	800d058 <_etoa+0x370>
 800d004:	2304      	movs	r3, #4
 800d006:	e028      	b.n	800d05a <_etoa+0x372>
 800d008:	509f79fb 	.word	0x509f79fb
 800d00c:	3fd34413 	.word	0x3fd34413
 800d010:	8b60c8b3 	.word	0x8b60c8b3
 800d014:	3fc68a28 	.word	0x3fc68a28
 800d018:	636f4361 	.word	0x636f4361
 800d01c:	3fd287a7 	.word	0x3fd287a7
 800d020:	0979a371 	.word	0x0979a371
 800d024:	400a934f 	.word	0x400a934f
 800d028:	bbb55516 	.word	0xbbb55516
 800d02c:	40026bb1 	.word	0x40026bb1
 800d030:	fefa39ef 	.word	0xfefa39ef
 800d034:	3fe62e42 	.word	0x3fe62e42
 800d038:	7fefffff 	.word	0x7fefffff
 800d03c:	000fffff 	.word	0x000fffff
 800d040:	3ff00000 	.word	0x3ff00000
 800d044:	3ff80000 	.word	0x3ff80000
 800d048:	3fe00000 	.word	0x3fe00000
 800d04c:	402c0000 	.word	0x402c0000
 800d050:	40240000 	.word	0x40240000
 800d054:	40180000 	.word	0x40180000
 800d058:	2305      	movs	r3, #5
 800d05a:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800d05c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d064:	2b00      	cmp	r3, #0
 800d066:	d03d      	beq.n	800d0e4 <_etoa+0x3fc>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800d068:	a367      	add	r3, pc, #412	; (adr r3, 800d208 <_etoa+0x520>)
 800d06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d072:	f7f3 fd4f 	bl	8000b14 <__aeabi_dcmpge>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d024      	beq.n	800d0c6 <_etoa+0x3de>
 800d07c:	a364      	add	r3, pc, #400	; (adr r3, 800d210 <_etoa+0x528>)
 800d07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d082:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d086:	f7f3 fd31 	bl	8000aec <__aeabi_dcmplt>
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d01a      	beq.n	800d0c6 <_etoa+0x3de>
      if ((int)prec > expval) {
 800d090:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d094:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d096:	429a      	cmp	r2, r3
 800d098:	da07      	bge.n	800d0aa <_etoa+0x3c2>
        prec = (unsigned)((int)prec - expval - 1);
 800d09a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d09e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0a0:	1ad3      	subs	r3, r2, r3
 800d0a2:	3b01      	subs	r3, #1
 800d0a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d0a8:	e002      	b.n	800d0b0 <_etoa+0x3c8>
      }
      else {
        prec = 0;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800d0b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d0b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d0b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	657b      	str	r3, [r7, #84]	; 0x54
 800d0c4:	e00e      	b.n	800d0e4 <_etoa+0x3fc>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800d0c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d00a      	beq.n	800d0e4 <_etoa+0x3fc>
 800d0ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d0d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d004      	beq.n	800d0e4 <_etoa+0x3fc>
        --prec;
 800d0da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d0de:	3b01      	subs	r3, #1
 800d0e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800d0e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d0e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 800d0ea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d0ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d904      	bls.n	800d0fe <_etoa+0x416>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800d0f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d0f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0f8:	1ad3      	subs	r3, r2, r3
 800d0fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0fc:	e001      	b.n	800d102 <_etoa+0x41a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800d0fe:	2300      	movs	r3, #0
 800d100:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800d102:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d106:	f003 0302 	and.w	r3, r3, #2
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d004      	beq.n	800d118 <_etoa+0x430>
 800d10e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d110:	2b00      	cmp	r3, #0
 800d112:	d001      	beq.n	800d118 <_etoa+0x430>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800d114:	2300      	movs	r3, #0
 800d116:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 800d118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d00b      	beq.n	800d136 <_etoa+0x44e>
    value /= conv.F;
 800d11e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d122:	461a      	mov	r2, r3
 800d124:	4623      	mov	r3, r4
 800d126:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d12a:	f7f3 fb97 	bl	800085c <__aeabi_ddiv>
 800d12e:	4603      	mov	r3, r0
 800d130:	460c      	mov	r4, r1
 800d132:	e9c7 3402 	strd	r3, r4, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800d13a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d004      	beq.n	800d14c <_etoa+0x464>
 800d142:	68bd      	ldr	r5, [r7, #8]
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 800d14a:	e001      	b.n	800d150 <_etoa+0x468>
 800d14c:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800d150:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d158:	9302      	str	r3, [sp, #8]
 800d15a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d15c:	9301      	str	r3, [sp, #4]
 800d15e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d162:	9300      	str	r3, [sp, #0]
 800d164:	ec46 5b10 	vmov	d0, r5, r6
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	697a      	ldr	r2, [r7, #20]
 800d16c:	69b9      	ldr	r1, [r7, #24]
 800d16e:	69f8      	ldr	r0, [r7, #28]
 800d170:	f7ff fb4e 	bl	800c810 <_ftoa>
 800d174:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 800d176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d03f      	beq.n	800d1fc <_etoa+0x514>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800d17c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d180:	f003 0320 	and.w	r3, r3, #32
 800d184:	2b00      	cmp	r3, #0
 800d186:	d001      	beq.n	800d18c <_etoa+0x4a4>
 800d188:	2045      	movs	r0, #69	; 0x45
 800d18a:	e000      	b.n	800d18e <_etoa+0x4a6>
 800d18c:	2065      	movs	r0, #101	; 0x65
 800d18e:	697a      	ldr	r2, [r7, #20]
 800d190:	1c53      	adds	r3, r2, #1
 800d192:	617b      	str	r3, [r7, #20]
 800d194:	69fc      	ldr	r4, [r7, #28]
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	69b9      	ldr	r1, [r7, #24]
 800d19a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800d19c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	bfb8      	it	lt
 800d1a2:	425b      	neglt	r3, r3
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1a8:	0fdb      	lsrs	r3, r3, #31
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1ae:	3a01      	subs	r2, #1
 800d1b0:	2105      	movs	r1, #5
 800d1b2:	9105      	str	r1, [sp, #20]
 800d1b4:	9204      	str	r2, [sp, #16]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	9203      	str	r2, [sp, #12]
 800d1ba:	220a      	movs	r2, #10
 800d1bc:	9202      	str	r2, [sp, #8]
 800d1be:	9301      	str	r3, [sp, #4]
 800d1c0:	9000      	str	r0, [sp, #0]
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	697a      	ldr	r2, [r7, #20]
 800d1c6:	69b9      	ldr	r1, [r7, #24]
 800d1c8:	69f8      	ldr	r0, [r7, #28]
 800d1ca:	f7ff fa4b 	bl	800c664 <_ntoa_long>
 800d1ce:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800d1d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d1d4:	f003 0302 	and.w	r3, r3, #2
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d00f      	beq.n	800d1fc <_etoa+0x514>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800d1dc:	e007      	b.n	800d1ee <_etoa+0x506>
 800d1de:	697a      	ldr	r2, [r7, #20]
 800d1e0:	1c53      	adds	r3, r2, #1
 800d1e2:	617b      	str	r3, [r7, #20]
 800d1e4:	69fc      	ldr	r4, [r7, #28]
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	69b9      	ldr	r1, [r7, #24]
 800d1ea:	2020      	movs	r0, #32
 800d1ec:	47a0      	blx	r4
 800d1ee:	697a      	ldr	r2, [r7, #20]
 800d1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f2:	1ad3      	subs	r3, r2, r3
 800d1f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d8f0      	bhi.n	800d1de <_etoa+0x4f6>
    }
  }
  return idx;
 800d1fc:	697b      	ldr	r3, [r7, #20]
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	375c      	adds	r7, #92	; 0x5c
 800d202:	46bd      	mov	sp, r7
 800d204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d208:	eb1c432d 	.word	0xeb1c432d
 800d20c:	3f1a36e2 	.word	0x3f1a36e2
 800d210:	00000000 	.word	0x00000000
 800d214:	412e8480 	.word	0x412e8480

0800d218 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800d218:	b5b0      	push	{r4, r5, r7, lr}
 800d21a:	b0a0      	sub	sp, #128	; 0x80
 800d21c:	af0a      	add	r7, sp, #40	; 0x28
 800d21e:	60f8      	str	r0, [r7, #12]
 800d220:	60b9      	str	r1, [r7, #8]
 800d222:	607a      	str	r2, [r7, #4]
 800d224:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800d226:	2300      	movs	r3, #0
 800d228:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	f040 8492 	bne.w	800db56 <_vsnprintf+0x93e>
    // use null output function
    out = _out_null;
 800d232:	4ba0      	ldr	r3, [pc, #640]	; (800d4b4 <_vsnprintf+0x29c>)
 800d234:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800d236:	f000 bc8e 	b.w	800db56 <_vsnprintf+0x93e>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	2b25      	cmp	r3, #37	; 0x25
 800d240:	d00d      	beq.n	800d25e <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	7818      	ldrb	r0, [r3, #0]
 800d246:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d248:	1c53      	adds	r3, r2, #1
 800d24a:	647b      	str	r3, [r7, #68]	; 0x44
 800d24c:	68fc      	ldr	r4, [r7, #12]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	68b9      	ldr	r1, [r7, #8]
 800d252:	47a0      	blx	r4
      format++;
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	3301      	adds	r3, #1
 800d258:	603b      	str	r3, [r7, #0]
      continue;
 800d25a:	f000 bc7c 	b.w	800db56 <_vsnprintf+0x93e>
    }
    else {
      // yes, evaluate it
      format++;
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	3301      	adds	r3, #1
 800d262:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800d264:	2300      	movs	r3, #0
 800d266:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	3b20      	subs	r3, #32
 800d26e:	2b10      	cmp	r3, #16
 800d270:	d856      	bhi.n	800d320 <_vsnprintf+0x108>
 800d272:	a201      	add	r2, pc, #4	; (adr r2, 800d278 <_vsnprintf+0x60>)
 800d274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d278:	0800d2f9 	.word	0x0800d2f9
 800d27c:	0800d321 	.word	0x0800d321
 800d280:	0800d321 	.word	0x0800d321
 800d284:	0800d30d 	.word	0x0800d30d
 800d288:	0800d321 	.word	0x0800d321
 800d28c:	0800d321 	.word	0x0800d321
 800d290:	0800d321 	.word	0x0800d321
 800d294:	0800d321 	.word	0x0800d321
 800d298:	0800d321 	.word	0x0800d321
 800d29c:	0800d321 	.word	0x0800d321
 800d2a0:	0800d321 	.word	0x0800d321
 800d2a4:	0800d2e5 	.word	0x0800d2e5
 800d2a8:	0800d321 	.word	0x0800d321
 800d2ac:	0800d2d1 	.word	0x0800d2d1
 800d2b0:	0800d321 	.word	0x0800d321
 800d2b4:	0800d321 	.word	0x0800d321
 800d2b8:	0800d2bd 	.word	0x0800d2bd
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800d2bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2be:	f043 0301 	orr.w	r3, r3, #1
 800d2c2:	657b      	str	r3, [r7, #84]	; 0x54
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	603b      	str	r3, [r7, #0]
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800d2ce:	e02a      	b.n	800d326 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800d2d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2d2:	f043 0302 	orr.w	r3, r3, #2
 800d2d6:	657b      	str	r3, [r7, #84]	; 0x54
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	603b      	str	r3, [r7, #0]
 800d2de:	2301      	movs	r3, #1
 800d2e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d2e2:	e020      	b.n	800d326 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800d2e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2e6:	f043 0304 	orr.w	r3, r3, #4
 800d2ea:	657b      	str	r3, [r7, #84]	; 0x54
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	603b      	str	r3, [r7, #0]
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d2f6:	e016      	b.n	800d326 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800d2f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2fa:	f043 0308 	orr.w	r3, r3, #8
 800d2fe:	657b      	str	r3, [r7, #84]	; 0x54
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	3301      	adds	r3, #1
 800d304:	603b      	str	r3, [r7, #0]
 800d306:	2301      	movs	r3, #1
 800d308:	64bb      	str	r3, [r7, #72]	; 0x48
 800d30a:	e00c      	b.n	800d326 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800d30c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d30e:	f043 0310 	orr.w	r3, r3, #16
 800d312:	657b      	str	r3, [r7, #84]	; 0x54
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	3301      	adds	r3, #1
 800d318:	603b      	str	r3, [r7, #0]
 800d31a:	2301      	movs	r3, #1
 800d31c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d31e:	e002      	b.n	800d326 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 800d320:	2300      	movs	r3, #0
 800d322:	64bb      	str	r3, [r7, #72]	; 0x48
 800d324:	bf00      	nop
      }
    } while (n);
 800d326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d19d      	bne.n	800d268 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 800d32c:	2300      	movs	r3, #0
 800d32e:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	4618      	mov	r0, r3
 800d336:	f7ff f82e 	bl	800c396 <_is_digit>
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d005      	beq.n	800d34c <_vsnprintf+0x134>
      width = _atoi(&format);
 800d340:	463b      	mov	r3, r7
 800d342:	4618      	mov	r0, r3
 800d344:	f7ff f83e 	bl	800c3c4 <_atoi>
 800d348:	6538      	str	r0, [r7, #80]	; 0x50
 800d34a:	e018      	b.n	800d37e <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	2b2a      	cmp	r3, #42	; 0x2a
 800d352:	d114      	bne.n	800d37e <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 800d354:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d356:	1d1a      	adds	r2, r3, #4
 800d358:	66ba      	str	r2, [r7, #104]	; 0x68
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800d35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d360:	2b00      	cmp	r3, #0
 800d362:	da07      	bge.n	800d374 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 800d364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d366:	f043 0302 	orr.w	r3, r3, #2
 800d36a:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800d36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36e:	425b      	negs	r3, r3
 800d370:	653b      	str	r3, [r7, #80]	; 0x50
 800d372:	e001      	b.n	800d378 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 800d374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d376:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	3301      	adds	r3, #1
 800d37c:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800d37e:	2300      	movs	r3, #0
 800d380:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	2b2e      	cmp	r3, #46	; 0x2e
 800d388:	d124      	bne.n	800d3d4 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 800d38a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d38c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d390:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	3301      	adds	r3, #1
 800d396:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7fe fffa 	bl	800c396 <_is_digit>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d005      	beq.n	800d3b4 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 800d3a8:	463b      	mov	r3, r7
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7ff f80a 	bl	800c3c4 <_atoi>
 800d3b0:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d3b2:	e00f      	b.n	800d3d4 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	2b2a      	cmp	r3, #42	; 0x2a
 800d3ba:	d10b      	bne.n	800d3d4 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 800d3bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d3be:	1d1a      	adds	r2, r3, #4
 800d3c0:	66ba      	str	r2, [r7, #104]	; 0x68
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800d3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d3cc:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	3b68      	subs	r3, #104	; 0x68
 800d3da:	2b12      	cmp	r3, #18
 800d3dc:	d866      	bhi.n	800d4ac <_vsnprintf+0x294>
 800d3de:	a201      	add	r2, pc, #4	; (adr r2, 800d3e4 <_vsnprintf+0x1cc>)
 800d3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3e4:	0800d457 	.word	0x0800d457
 800d3e8:	0800d4ad 	.word	0x0800d4ad
 800d3ec:	0800d48d 	.word	0x0800d48d
 800d3f0:	0800d4ad 	.word	0x0800d4ad
 800d3f4:	0800d431 	.word	0x0800d431
 800d3f8:	0800d4ad 	.word	0x0800d4ad
 800d3fc:	0800d4ad 	.word	0x0800d4ad
 800d400:	0800d4ad 	.word	0x0800d4ad
 800d404:	0800d4ad 	.word	0x0800d4ad
 800d408:	0800d4ad 	.word	0x0800d4ad
 800d40c:	0800d4ad 	.word	0x0800d4ad
 800d410:	0800d4ad 	.word	0x0800d4ad
 800d414:	0800d47d 	.word	0x0800d47d
 800d418:	0800d4ad 	.word	0x0800d4ad
 800d41c:	0800d4ad 	.word	0x0800d4ad
 800d420:	0800d4ad 	.word	0x0800d4ad
 800d424:	0800d4ad 	.word	0x0800d4ad
 800d428:	0800d4ad 	.word	0x0800d4ad
 800d42c:	0800d49d 	.word	0x0800d49d
      case 'l' :
        flags |= FLAGS_LONG;
 800d430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d436:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	3301      	adds	r3, #1
 800d43c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	2b6c      	cmp	r3, #108	; 0x6c
 800d444:	d134      	bne.n	800d4b0 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800d446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d44c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	3301      	adds	r3, #1
 800d452:	603b      	str	r3, [r7, #0]
        }
        break;
 800d454:	e02c      	b.n	800d4b0 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800d456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d45c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	3301      	adds	r3, #1
 800d462:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	2b68      	cmp	r3, #104	; 0x68
 800d46a:	d125      	bne.n	800d4b8 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 800d46c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d472:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	3301      	adds	r3, #1
 800d478:	603b      	str	r3, [r7, #0]
        }
        break;
 800d47a:	e01d      	b.n	800d4b8 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800d47c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d47e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d482:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	3301      	adds	r3, #1
 800d488:	603b      	str	r3, [r7, #0]
        break;
 800d48a:	e016      	b.n	800d4ba <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800d48c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d48e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d492:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	3301      	adds	r3, #1
 800d498:	603b      	str	r3, [r7, #0]
        break;
 800d49a:	e00e      	b.n	800d4ba <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800d49c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d49e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4a2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	603b      	str	r3, [r7, #0]
        break;
 800d4aa:	e006      	b.n	800d4ba <_vsnprintf+0x2a2>
      default :
        break;
 800d4ac:	bf00      	nop
 800d4ae:	e004      	b.n	800d4ba <_vsnprintf+0x2a2>
        break;
 800d4b0:	bf00      	nop
 800d4b2:	e002      	b.n	800d4ba <_vsnprintf+0x2a2>
 800d4b4:	0800c31b 	.word	0x0800c31b
        break;
 800d4b8:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	3b25      	subs	r3, #37	; 0x25
 800d4c0:	2b53      	cmp	r3, #83	; 0x53
 800d4c2:	f200 833b 	bhi.w	800db3c <_vsnprintf+0x924>
 800d4c6:	a201      	add	r2, pc, #4	; (adr r2, 800d4cc <_vsnprintf+0x2b4>)
 800d4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4cc:	0800db25 	.word	0x0800db25
 800d4d0:	0800db3d 	.word	0x0800db3d
 800d4d4:	0800db3d 	.word	0x0800db3d
 800d4d8:	0800db3d 	.word	0x0800db3d
 800d4dc:	0800db3d 	.word	0x0800db3d
 800d4e0:	0800db3d 	.word	0x0800db3d
 800d4e4:	0800db3d 	.word	0x0800db3d
 800d4e8:	0800db3d 	.word	0x0800db3d
 800d4ec:	0800db3d 	.word	0x0800db3d
 800d4f0:	0800db3d 	.word	0x0800db3d
 800d4f4:	0800db3d 	.word	0x0800db3d
 800d4f8:	0800db3d 	.word	0x0800db3d
 800d4fc:	0800db3d 	.word	0x0800db3d
 800d500:	0800db3d 	.word	0x0800db3d
 800d504:	0800db3d 	.word	0x0800db3d
 800d508:	0800db3d 	.word	0x0800db3d
 800d50c:	0800db3d 	.word	0x0800db3d
 800d510:	0800db3d 	.word	0x0800db3d
 800d514:	0800db3d 	.word	0x0800db3d
 800d518:	0800db3d 	.word	0x0800db3d
 800d51c:	0800db3d 	.word	0x0800db3d
 800d520:	0800db3d 	.word	0x0800db3d
 800d524:	0800db3d 	.word	0x0800db3d
 800d528:	0800db3d 	.word	0x0800db3d
 800d52c:	0800db3d 	.word	0x0800db3d
 800d530:	0800db3d 	.word	0x0800db3d
 800d534:	0800db3d 	.word	0x0800db3d
 800d538:	0800db3d 	.word	0x0800db3d
 800d53c:	0800db3d 	.word	0x0800db3d
 800d540:	0800db3d 	.word	0x0800db3d
 800d544:	0800db3d 	.word	0x0800db3d
 800d548:	0800db3d 	.word	0x0800db3d
 800d54c:	0800d8f5 	.word	0x0800d8f5
 800d550:	0800d8a9 	.word	0x0800d8a9
 800d554:	0800d8f5 	.word	0x0800d8f5
 800d558:	0800db3d 	.word	0x0800db3d
 800d55c:	0800db3d 	.word	0x0800db3d
 800d560:	0800db3d 	.word	0x0800db3d
 800d564:	0800db3d 	.word	0x0800db3d
 800d568:	0800db3d 	.word	0x0800db3d
 800d56c:	0800db3d 	.word	0x0800db3d
 800d570:	0800db3d 	.word	0x0800db3d
 800d574:	0800db3d 	.word	0x0800db3d
 800d578:	0800db3d 	.word	0x0800db3d
 800d57c:	0800db3d 	.word	0x0800db3d
 800d580:	0800db3d 	.word	0x0800db3d
 800d584:	0800db3d 	.word	0x0800db3d
 800d588:	0800db3d 	.word	0x0800db3d
 800d58c:	0800db3d 	.word	0x0800db3d
 800d590:	0800db3d 	.word	0x0800db3d
 800d594:	0800db3d 	.word	0x0800db3d
 800d598:	0800d61d 	.word	0x0800d61d
 800d59c:	0800db3d 	.word	0x0800db3d
 800d5a0:	0800db3d 	.word	0x0800db3d
 800d5a4:	0800db3d 	.word	0x0800db3d
 800d5a8:	0800db3d 	.word	0x0800db3d
 800d5ac:	0800db3d 	.word	0x0800db3d
 800d5b0:	0800db3d 	.word	0x0800db3d
 800d5b4:	0800db3d 	.word	0x0800db3d
 800d5b8:	0800db3d 	.word	0x0800db3d
 800d5bc:	0800db3d 	.word	0x0800db3d
 800d5c0:	0800d61d 	.word	0x0800d61d
 800d5c4:	0800d961 	.word	0x0800d961
 800d5c8:	0800d61d 	.word	0x0800d61d
 800d5cc:	0800d8f5 	.word	0x0800d8f5
 800d5d0:	0800d8a9 	.word	0x0800d8a9
 800d5d4:	0800d8f5 	.word	0x0800d8f5
 800d5d8:	0800db3d 	.word	0x0800db3d
 800d5dc:	0800d61d 	.word	0x0800d61d
 800d5e0:	0800db3d 	.word	0x0800db3d
 800d5e4:	0800db3d 	.word	0x0800db3d
 800d5e8:	0800db3d 	.word	0x0800db3d
 800d5ec:	0800db3d 	.word	0x0800db3d
 800d5f0:	0800db3d 	.word	0x0800db3d
 800d5f4:	0800d61d 	.word	0x0800d61d
 800d5f8:	0800da99 	.word	0x0800da99
 800d5fc:	0800db3d 	.word	0x0800db3d
 800d600:	0800db3d 	.word	0x0800db3d
 800d604:	0800d9d5 	.word	0x0800d9d5
 800d608:	0800db3d 	.word	0x0800db3d
 800d60c:	0800d61d 	.word	0x0800d61d
 800d610:	0800db3d 	.word	0x0800db3d
 800d614:	0800db3d 	.word	0x0800db3d
 800d618:	0800d61d 	.word	0x0800d61d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	2b78      	cmp	r3, #120	; 0x78
 800d622:	d003      	beq.n	800d62c <_vsnprintf+0x414>
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	2b58      	cmp	r3, #88	; 0x58
 800d62a:	d102      	bne.n	800d632 <_vsnprintf+0x41a>
          base = 16U;
 800d62c:	2310      	movs	r3, #16
 800d62e:	643b      	str	r3, [r7, #64]	; 0x40
 800d630:	e013      	b.n	800d65a <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	2b6f      	cmp	r3, #111	; 0x6f
 800d638:	d102      	bne.n	800d640 <_vsnprintf+0x428>
          base =  8U;
 800d63a:	2308      	movs	r3, #8
 800d63c:	643b      	str	r3, [r7, #64]	; 0x40
 800d63e:	e00c      	b.n	800d65a <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	2b62      	cmp	r3, #98	; 0x62
 800d646:	d102      	bne.n	800d64e <_vsnprintf+0x436>
          base =  2U;
 800d648:	2302      	movs	r3, #2
 800d64a:	643b      	str	r3, [r7, #64]	; 0x40
 800d64c:	e005      	b.n	800d65a <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 800d64e:	230a      	movs	r3, #10
 800d650:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800d652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d654:	f023 0310 	bic.w	r3, r3, #16
 800d658:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	2b58      	cmp	r3, #88	; 0x58
 800d660:	d103      	bne.n	800d66a <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 800d662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d664:	f043 0320 	orr.w	r3, r3, #32
 800d668:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	2b69      	cmp	r3, #105	; 0x69
 800d670:	d007      	beq.n	800d682 <_vsnprintf+0x46a>
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	2b64      	cmp	r3, #100	; 0x64
 800d678:	d003      	beq.n	800d682 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800d67a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d67c:	f023 030c 	bic.w	r3, r3, #12
 800d680:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800d682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d003      	beq.n	800d694 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 800d68c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d68e:	f023 0301 	bic.w	r3, r3, #1
 800d692:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	2b69      	cmp	r3, #105	; 0x69
 800d69a:	d004      	beq.n	800d6a6 <_vsnprintf+0x48e>
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	2b64      	cmp	r3, #100	; 0x64
 800d6a2:	f040 808d 	bne.w	800d7c0 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800d6a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d02e      	beq.n	800d70e <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800d6b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6b2:	3307      	adds	r3, #7
 800d6b4:	f023 0307 	bic.w	r3, r3, #7
 800d6b8:	f103 0208 	add.w	r2, r3, #8
 800d6bc:	66ba      	str	r2, [r7, #104]	; 0x68
 800d6be:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d6c2:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800d6c6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	f174 0200 	sbcs.w	r2, r4, #0
 800d6d0:	da02      	bge.n	800d6d8 <_vsnprintf+0x4c0>
 800d6d2:	425b      	negs	r3, r3
 800d6d4:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 800d6d8:	4619      	mov	r1, r3
 800d6da:	4622      	mov	r2, r4
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	0fdb      	lsrs	r3, r3, #31
 800d6e0:	b2d8      	uxtb	r0, r3
 800d6e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6e4:	f04f 0400 	mov.w	r4, #0
 800d6e8:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800d6ea:	9508      	str	r5, [sp, #32]
 800d6ec:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800d6ee:	9507      	str	r5, [sp, #28]
 800d6f0:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800d6f2:	9506      	str	r5, [sp, #24]
 800d6f4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d6f8:	9002      	str	r0, [sp, #8]
 800d6fa:	e9cd 1200 	strd	r1, r2, [sp]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d702:	68b9      	ldr	r1, [r7, #8]
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f7ff f814 	bl	800c732 <_ntoa_long_long>
 800d70a:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800d70c:	e0c8      	b.n	800d8a0 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800d70e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d714:	2b00      	cmp	r3, #0
 800d716:	d01e      	beq.n	800d756 <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 800d718:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d71a:	1d1a      	adds	r2, r3, #4
 800d71c:	66ba      	str	r2, [r7, #104]	; 0x68
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	2b00      	cmp	r3, #0
 800d726:	bfb8      	it	lt
 800d728:	425b      	neglt	r3, r3
 800d72a:	4619      	mov	r1, r3
 800d72c:	69fb      	ldr	r3, [r7, #28]
 800d72e:	0fdb      	lsrs	r3, r3, #31
 800d730:	b2db      	uxtb	r3, r3
 800d732:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d734:	9205      	str	r2, [sp, #20]
 800d736:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d738:	9204      	str	r2, [sp, #16]
 800d73a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d73c:	9203      	str	r2, [sp, #12]
 800d73e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d740:	9202      	str	r2, [sp, #8]
 800d742:	9301      	str	r3, [sp, #4]
 800d744:	9100      	str	r1, [sp, #0]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d74a:	68b9      	ldr	r1, [r7, #8]
 800d74c:	68f8      	ldr	r0, [r7, #12]
 800d74e:	f7fe ff89 	bl	800c664 <_ntoa_long>
 800d752:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800d754:	e0a4      	b.n	800d8a0 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800d756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d005      	beq.n	800d76c <_vsnprintf+0x554>
 800d760:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d762:	1d1a      	adds	r2, r3, #4
 800d764:	66ba      	str	r2, [r7, #104]	; 0x68
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	b2db      	uxtb	r3, r3
 800d76a:	e00e      	b.n	800d78a <_vsnprintf+0x572>
 800d76c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d772:	2b00      	cmp	r3, #0
 800d774:	d005      	beq.n	800d782 <_vsnprintf+0x56a>
 800d776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d778:	1d1a      	adds	r2, r3, #4
 800d77a:	66ba      	str	r2, [r7, #104]	; 0x68
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	b21b      	sxth	r3, r3
 800d780:	e003      	b.n	800d78a <_vsnprintf+0x572>
 800d782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d784:	1d1a      	adds	r2, r3, #4
 800d786:	66ba      	str	r2, [r7, #104]	; 0x68
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800d78c:	6a3b      	ldr	r3, [r7, #32]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	bfb8      	it	lt
 800d792:	425b      	neglt	r3, r3
 800d794:	4619      	mov	r1, r3
 800d796:	6a3b      	ldr	r3, [r7, #32]
 800d798:	0fdb      	lsrs	r3, r3, #31
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d79e:	9205      	str	r2, [sp, #20]
 800d7a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d7a2:	9204      	str	r2, [sp, #16]
 800d7a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d7a6:	9203      	str	r2, [sp, #12]
 800d7a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7aa:	9202      	str	r2, [sp, #8]
 800d7ac:	9301      	str	r3, [sp, #4]
 800d7ae:	9100      	str	r1, [sp, #0]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d7b4:	68b9      	ldr	r1, [r7, #8]
 800d7b6:	68f8      	ldr	r0, [r7, #12]
 800d7b8:	f7fe ff54 	bl	800c664 <_ntoa_long>
 800d7bc:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800d7be:	e06f      	b.n	800d8a0 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800d7c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d020      	beq.n	800d80c <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800d7ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d7cc:	3307      	adds	r3, #7
 800d7ce:	f023 0307 	bic.w	r3, r3, #7
 800d7d2:	f103 0208 	add.w	r2, r3, #8
 800d7d6:	66ba      	str	r2, [r7, #104]	; 0x68
 800d7d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d7dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7de:	4611      	mov	r1, r2
 800d7e0:	f04f 0200 	mov.w	r2, #0
 800d7e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d7e6:	9008      	str	r0, [sp, #32]
 800d7e8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d7ea:	9007      	str	r0, [sp, #28]
 800d7ec:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d7ee:	9006      	str	r0, [sp, #24]
 800d7f0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	9202      	str	r2, [sp, #8]
 800d7f8:	e9cd 3400 	strd	r3, r4, [sp]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d800:	68b9      	ldr	r1, [r7, #8]
 800d802:	68f8      	ldr	r0, [r7, #12]
 800d804:	f7fe ff95 	bl	800c732 <_ntoa_long_long>
 800d808:	6478      	str	r0, [r7, #68]	; 0x44
 800d80a:	e049      	b.n	800d8a0 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800d80c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d80e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d812:	2b00      	cmp	r3, #0
 800d814:	d016      	beq.n	800d844 <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800d816:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d818:	1d1a      	adds	r2, r3, #4
 800d81a:	66ba      	str	r2, [r7, #104]	; 0x68
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d820:	9205      	str	r2, [sp, #20]
 800d822:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d824:	9204      	str	r2, [sp, #16]
 800d826:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d828:	9203      	str	r2, [sp, #12]
 800d82a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d82c:	9202      	str	r2, [sp, #8]
 800d82e:	2200      	movs	r2, #0
 800d830:	9201      	str	r2, [sp, #4]
 800d832:	9300      	str	r3, [sp, #0]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d838:	68b9      	ldr	r1, [r7, #8]
 800d83a:	68f8      	ldr	r0, [r7, #12]
 800d83c:	f7fe ff12 	bl	800c664 <_ntoa_long>
 800d840:	6478      	str	r0, [r7, #68]	; 0x44
 800d842:	e02d      	b.n	800d8a0 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800d844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d005      	beq.n	800d85a <_vsnprintf+0x642>
 800d84e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d850:	1d1a      	adds	r2, r3, #4
 800d852:	66ba      	str	r2, [r7, #104]	; 0x68
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	b2db      	uxtb	r3, r3
 800d858:	e00e      	b.n	800d878 <_vsnprintf+0x660>
 800d85a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d85c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d860:	2b00      	cmp	r3, #0
 800d862:	d005      	beq.n	800d870 <_vsnprintf+0x658>
 800d864:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d866:	1d1a      	adds	r2, r3, #4
 800d868:	66ba      	str	r2, [r7, #104]	; 0x68
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	e003      	b.n	800d878 <_vsnprintf+0x660>
 800d870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d872:	1d1a      	adds	r2, r3, #4
 800d874:	66ba      	str	r2, [r7, #104]	; 0x68
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800d87a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d87c:	9305      	str	r3, [sp, #20]
 800d87e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d880:	9304      	str	r3, [sp, #16]
 800d882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d884:	9303      	str	r3, [sp, #12]
 800d886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d888:	9302      	str	r3, [sp, #8]
 800d88a:	2300      	movs	r3, #0
 800d88c:	9301      	str	r3, [sp, #4]
 800d88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d896:	68b9      	ldr	r1, [r7, #8]
 800d898:	68f8      	ldr	r0, [r7, #12]
 800d89a:	f7fe fee3 	bl	800c664 <_ntoa_long>
 800d89e:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	603b      	str	r3, [r7, #0]
        break;
 800d8a6:	e156      	b.n	800db56 <_vsnprintf+0x93e>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	2b46      	cmp	r3, #70	; 0x46
 800d8ae:	d103      	bne.n	800d8b8 <_vsnprintf+0x6a0>
 800d8b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8b2:	f043 0320 	orr.w	r3, r3, #32
 800d8b6:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800d8b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d8ba:	3307      	adds	r3, #7
 800d8bc:	f023 0307 	bic.w	r3, r3, #7
 800d8c0:	f103 0208 	add.w	r2, r3, #8
 800d8c4:	66ba      	str	r2, [r7, #104]	; 0x68
 800d8c6:	ed93 7b00 	vldr	d7, [r3]
 800d8ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8cc:	9302      	str	r3, [sp, #8]
 800d8ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8d0:	9301      	str	r3, [sp, #4]
 800d8d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8d4:	9300      	str	r3, [sp, #0]
 800d8d6:	eeb0 0a47 	vmov.f32	s0, s14
 800d8da:	eef0 0a67 	vmov.f32	s1, s15
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8e2:	68b9      	ldr	r1, [r7, #8]
 800d8e4:	68f8      	ldr	r0, [r7, #12]
 800d8e6:	f7fe ff93 	bl	800c810 <_ftoa>
 800d8ea:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	603b      	str	r3, [r7, #0]
        break;
 800d8f2:	e130      	b.n	800db56 <_vsnprintf+0x93e>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	2b67      	cmp	r3, #103	; 0x67
 800d8fa:	d003      	beq.n	800d904 <_vsnprintf+0x6ec>
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	781b      	ldrb	r3, [r3, #0]
 800d900:	2b47      	cmp	r3, #71	; 0x47
 800d902:	d103      	bne.n	800d90c <_vsnprintf+0x6f4>
 800d904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d906:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d90a:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	781b      	ldrb	r3, [r3, #0]
 800d910:	2b45      	cmp	r3, #69	; 0x45
 800d912:	d003      	beq.n	800d91c <_vsnprintf+0x704>
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	2b47      	cmp	r3, #71	; 0x47
 800d91a:	d103      	bne.n	800d924 <_vsnprintf+0x70c>
 800d91c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d91e:	f043 0320 	orr.w	r3, r3, #32
 800d922:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800d924:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d926:	3307      	adds	r3, #7
 800d928:	f023 0307 	bic.w	r3, r3, #7
 800d92c:	f103 0208 	add.w	r2, r3, #8
 800d930:	66ba      	str	r2, [r7, #104]	; 0x68
 800d932:	ed93 7b00 	vldr	d7, [r3]
 800d936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d938:	9302      	str	r3, [sp, #8]
 800d93a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d93c:	9301      	str	r3, [sp, #4]
 800d93e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d940:	9300      	str	r3, [sp, #0]
 800d942:	eeb0 0a47 	vmov.f32	s0, s14
 800d946:	eef0 0a67 	vmov.f32	s1, s15
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d94e:	68b9      	ldr	r1, [r7, #8]
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	f7ff f9c9 	bl	800cce8 <_etoa>
 800d956:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	3301      	adds	r3, #1
 800d95c:	603b      	str	r3, [r7, #0]
        break;
 800d95e:	e0fa      	b.n	800db56 <_vsnprintf+0x93e>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800d960:	2301      	movs	r3, #1
 800d962:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800d964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d966:	f003 0302 	and.w	r3, r3, #2
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d10e      	bne.n	800d98c <_vsnprintf+0x774>
          while (l++ < width) {
 800d96e:	e007      	b.n	800d980 <_vsnprintf+0x768>
            out(' ', buffer, idx++, maxlen);
 800d970:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d972:	1c53      	adds	r3, r2, #1
 800d974:	647b      	str	r3, [r7, #68]	; 0x44
 800d976:	68fc      	ldr	r4, [r7, #12]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	68b9      	ldr	r1, [r7, #8]
 800d97c:	2020      	movs	r0, #32
 800d97e:	47a0      	blx	r4
          while (l++ < width) {
 800d980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d982:	1c5a      	adds	r2, r3, #1
 800d984:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d986:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d988:	429a      	cmp	r2, r3
 800d98a:	d8f1      	bhi.n	800d970 <_vsnprintf+0x758>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800d98c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d98e:	1d1a      	adds	r2, r3, #4
 800d990:	66ba      	str	r2, [r7, #104]	; 0x68
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	b2d8      	uxtb	r0, r3
 800d996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d998:	1c53      	adds	r3, r2, #1
 800d99a:	647b      	str	r3, [r7, #68]	; 0x44
 800d99c:	68fc      	ldr	r4, [r7, #12]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	68b9      	ldr	r1, [r7, #8]
 800d9a2:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800d9a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9a6:	f003 0302 	and.w	r3, r3, #2
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d00e      	beq.n	800d9cc <_vsnprintf+0x7b4>
          while (l++ < width) {
 800d9ae:	e007      	b.n	800d9c0 <_vsnprintf+0x7a8>
            out(' ', buffer, idx++, maxlen);
 800d9b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d9b2:	1c53      	adds	r3, r2, #1
 800d9b4:	647b      	str	r3, [r7, #68]	; 0x44
 800d9b6:	68fc      	ldr	r4, [r7, #12]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	68b9      	ldr	r1, [r7, #8]
 800d9bc:	2020      	movs	r0, #32
 800d9be:	47a0      	blx	r4
          while (l++ < width) {
 800d9c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9c2:	1c5a      	adds	r2, r3, #1
 800d9c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d9c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d8f1      	bhi.n	800d9b0 <_vsnprintf+0x798>
          }
        }
        format++;
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	603b      	str	r3, [r7, #0]
        break;
 800d9d2:	e0c0      	b.n	800db56 <_vsnprintf+0x93e>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800d9d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d9d6:	1d1a      	adds	r2, r3, #4
 800d9d8:	66ba      	str	r2, [r7, #104]	; 0x68
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800d9de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d001      	beq.n	800d9e8 <_vsnprintf+0x7d0>
 800d9e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9e6:	e001      	b.n	800d9ec <_vsnprintf+0x7d4>
 800d9e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d9f0:	f7fe fcb4 	bl	800c35c <_strnlen_s>
 800d9f4:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800d9f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d005      	beq.n	800da0c <_vsnprintf+0x7f4>
          l = (l < precision ? l : precision);
 800da00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da04:	4293      	cmp	r3, r2
 800da06:	bf28      	it	cs
 800da08:	4613      	movcs	r3, r2
 800da0a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 800da0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da0e:	f003 0302 	and.w	r3, r3, #2
 800da12:	2b00      	cmp	r3, #0
 800da14:	d11a      	bne.n	800da4c <_vsnprintf+0x834>
          while (l++ < width) {
 800da16:	e007      	b.n	800da28 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 800da18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da1a:	1c53      	adds	r3, r2, #1
 800da1c:	647b      	str	r3, [r7, #68]	; 0x44
 800da1e:	68fc      	ldr	r4, [r7, #12]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	68b9      	ldr	r1, [r7, #8]
 800da24:	2020      	movs	r0, #32
 800da26:	47a0      	blx	r4
          while (l++ < width) {
 800da28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da2a:	1c5a      	adds	r2, r3, #1
 800da2c:	637a      	str	r2, [r7, #52]	; 0x34
 800da2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da30:	429a      	cmp	r2, r3
 800da32:	d8f1      	bhi.n	800da18 <_vsnprintf+0x800>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800da34:	e00a      	b.n	800da4c <_vsnprintf+0x834>
          out(*(p++), buffer, idx++, maxlen);
 800da36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da38:	1c5a      	adds	r2, r3, #1
 800da3a:	63ba      	str	r2, [r7, #56]	; 0x38
 800da3c:	7818      	ldrb	r0, [r3, #0]
 800da3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da40:	1c53      	adds	r3, r2, #1
 800da42:	647b      	str	r3, [r7, #68]	; 0x44
 800da44:	68fc      	ldr	r4, [r7, #12]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	68b9      	ldr	r1, [r7, #8]
 800da4a:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800da4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d009      	beq.n	800da68 <_vsnprintf+0x850>
 800da54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d0eb      	beq.n	800da36 <_vsnprintf+0x81e>
 800da5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da60:	1e5a      	subs	r2, r3, #1
 800da62:	64fa      	str	r2, [r7, #76]	; 0x4c
 800da64:	2b00      	cmp	r3, #0
 800da66:	d1e6      	bne.n	800da36 <_vsnprintf+0x81e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800da68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da6a:	f003 0302 	and.w	r3, r3, #2
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d00e      	beq.n	800da90 <_vsnprintf+0x878>
          while (l++ < width) {
 800da72:	e007      	b.n	800da84 <_vsnprintf+0x86c>
            out(' ', buffer, idx++, maxlen);
 800da74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da76:	1c53      	adds	r3, r2, #1
 800da78:	647b      	str	r3, [r7, #68]	; 0x44
 800da7a:	68fc      	ldr	r4, [r7, #12]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	68b9      	ldr	r1, [r7, #8]
 800da80:	2020      	movs	r0, #32
 800da82:	47a0      	blx	r4
          while (l++ < width) {
 800da84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da86:	1c5a      	adds	r2, r3, #1
 800da88:	637a      	str	r2, [r7, #52]	; 0x34
 800da8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d8f1      	bhi.n	800da74 <_vsnprintf+0x85c>
          }
        }
        format++;
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	3301      	adds	r3, #1
 800da94:	603b      	str	r3, [r7, #0]
        break;
 800da96:	e05e      	b.n	800db56 <_vsnprintf+0x93e>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800da98:	2308      	movs	r3, #8
 800da9a:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800da9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da9e:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800daa2:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800daa4:	2300      	movs	r3, #0
 800daa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 800daaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d01d      	beq.n	800daee <_vsnprintf+0x8d6>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800dab2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dab4:	1d1a      	adds	r2, r3, #4
 800dab6:	66ba      	str	r2, [r7, #104]	; 0x68
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f04f 0400 	mov.w	r4, #0
 800dabe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dac0:	9208      	str	r2, [sp, #32]
 800dac2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dac4:	9207      	str	r2, [sp, #28]
 800dac6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dac8:	9206      	str	r2, [sp, #24]
 800daca:	f04f 0110 	mov.w	r1, #16
 800dace:	f04f 0200 	mov.w	r2, #0
 800dad2:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800dad6:	2200      	movs	r2, #0
 800dad8:	9202      	str	r2, [sp, #8]
 800dada:	e9cd 3400 	strd	r3, r4, [sp]
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dae2:	68b9      	ldr	r1, [r7, #8]
 800dae4:	68f8      	ldr	r0, [r7, #12]
 800dae6:	f7fe fe24 	bl	800c732 <_ntoa_long_long>
 800daea:	6478      	str	r0, [r7, #68]	; 0x44
 800daec:	e016      	b.n	800db1c <_vsnprintf+0x904>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800daee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800daf0:	1d1a      	adds	r2, r3, #4
 800daf2:	66ba      	str	r2, [r7, #104]	; 0x68
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	461a      	mov	r2, r3
 800daf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dafa:	9305      	str	r3, [sp, #20]
 800dafc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dafe:	9304      	str	r3, [sp, #16]
 800db00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db02:	9303      	str	r3, [sp, #12]
 800db04:	2310      	movs	r3, #16
 800db06:	9302      	str	r3, [sp, #8]
 800db08:	2300      	movs	r3, #0
 800db0a:	9301      	str	r3, [sp, #4]
 800db0c:	9200      	str	r2, [sp, #0]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db12:	68b9      	ldr	r1, [r7, #8]
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f7fe fda5 	bl	800c664 <_ntoa_long>
 800db1a:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	3301      	adds	r3, #1
 800db20:	603b      	str	r3, [r7, #0]
        break;
 800db22:	e018      	b.n	800db56 <_vsnprintf+0x93e>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800db24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db26:	1c53      	adds	r3, r2, #1
 800db28:	647b      	str	r3, [r7, #68]	; 0x44
 800db2a:	68fc      	ldr	r4, [r7, #12]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	68b9      	ldr	r1, [r7, #8]
 800db30:	2025      	movs	r0, #37	; 0x25
 800db32:	47a0      	blx	r4
        format++;
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	3301      	adds	r3, #1
 800db38:	603b      	str	r3, [r7, #0]
        break;
 800db3a:	e00c      	b.n	800db56 <_vsnprintf+0x93e>

      default :
        out(*format, buffer, idx++, maxlen);
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	7818      	ldrb	r0, [r3, #0]
 800db40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db42:	1c53      	adds	r3, r2, #1
 800db44:	647b      	str	r3, [r7, #68]	; 0x44
 800db46:	68fc      	ldr	r4, [r7, #12]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	68b9      	ldr	r1, [r7, #8]
 800db4c:	47a0      	blx	r4
        format++;
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	3301      	adds	r3, #1
 800db52:	603b      	str	r3, [r7, #0]
        break;
 800db54:	bf00      	nop
  while (*format)
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	f47f ab6d 	bne.w	800d23a <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800db60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	429a      	cmp	r2, r3
 800db66:	d302      	bcc.n	800db6e <_vsnprintf+0x956>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	1e5a      	subs	r2, r3, #1
 800db6c:	e000      	b.n	800db70 <_vsnprintf+0x958>
 800db6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db70:	68fc      	ldr	r4, [r7, #12]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	68b9      	ldr	r1, [r7, #8]
 800db76:	2000      	movs	r0, #0
 800db78:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800db7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3758      	adds	r7, #88	; 0x58
 800db80:	46bd      	mov	sp, r7
 800db82:	bdb0      	pop	{r4, r5, r7, pc}

0800db84 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 800db84:	b40f      	push	{r0, r1, r2, r3}
 800db86:	b580      	push	{r7, lr}
 800db88:	b086      	sub	sp, #24
 800db8a:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 800db8c:	f107 031c 	add.w	r3, r7, #28
 800db90:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800db92:	1d39      	adds	r1, r7, #4
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	69bb      	ldr	r3, [r7, #24]
 800db9a:	f04f 32ff 	mov.w	r2, #4294967295
 800db9e:	4806      	ldr	r0, [pc, #24]	; (800dbb8 <printf_+0x34>)
 800dba0:	f7ff fb3a 	bl	800d218 <_vsnprintf>
 800dba4:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800dba6:	68fb      	ldr	r3, [r7, #12]
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3710      	adds	r7, #16
 800dbac:	46bd      	mov	sp, r7
 800dbae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dbb2:	b004      	add	sp, #16
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop
 800dbb8:	0800c337 	.word	0x0800c337

0800dbbc <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>:
	 *  \return variable is updated(true), variable is not updated(false)
	 *
	 *  setFunction :
	 *  \param[in]		variable		msgBus data is changed to input data
	 */
    SIMPLE_FUNC_IMPL(BodyAccel, BodyAccel, bodyAccel)
 800dbbc:	b4b0      	push	{r4, r5, r7}
 800dbbe:	b085      	sub	sp, #20
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	73fb      	strb	r3, [r7, #15]
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	e9d3 1200 	ldrd	r1, r2, [r3]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dbd6:	42a2      	cmp	r2, r4
 800dbd8:	bf08      	it	eq
 800dbda:	4299      	cmpeq	r1, r3
 800dbdc:	d001      	beq.n	800dbe2 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE+0x26>
 800dbde:	2301      	movs	r3, #1
 800dbe0:	73fb      	strb	r3, [r7, #15]
 800dbe2:	683a      	ldr	r2, [r7, #0]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	4614      	mov	r4, r2
 800dbe8:	461d      	mov	r5, r3
 800dbea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dbec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbee:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dbf2:	e884 0003 	stmia.w	r4, {r0, r1}
 800dbf6:	7bfb      	ldrb	r3, [r7, #15]
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3714      	adds	r7, #20
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bcb0      	pop	{r4, r5, r7}
 800dc00:	4770      	bx	lr

0800dc02 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>:
    SIMPLE_FUNC_IMPL(BodyAngularVelocity, BodyAngularVelocity, bodyAngularVelocity)
 800dc02:	b4b0      	push	{r4, r5, r7}
 800dc04:	b085      	sub	sp, #20
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
 800dc0a:	6039      	str	r1, [r7, #0]
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	73fb      	strb	r3, [r7, #15]
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	e9d3 1200 	ldrd	r1, r2, [r3]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800dc1c:	42a2      	cmp	r2, r4
 800dc1e:	bf08      	it	eq
 800dc20:	4299      	cmpeq	r1, r3
 800dc22:	d001      	beq.n	800dc28 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE+0x26>
 800dc24:	2301      	movs	r3, #1
 800dc26:	73fb      	strb	r3, [r7, #15]
 800dc28:	683a      	ldr	r2, [r7, #0]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4615      	mov	r5, r2
 800dc2e:	f103 0418 	add.w	r4, r3, #24
 800dc32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dc36:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dc3a:	e885 0003 	stmia.w	r5, {r0, r1}
 800dc3e:	7bfb      	ldrb	r3, [r7, #15]
 800dc40:	4618      	mov	r0, r3
 800dc42:	3714      	adds	r7, #20
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bcb0      	pop	{r4, r5, r7}
 800dc48:	4770      	bx	lr

0800dc4a <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>:
    SIMPLE_FUNC_IMPL(BodyMag, BodyMag, bodyMag)
 800dc4a:	b4b0      	push	{r4, r5, r7}
 800dc4c:	b085      	sub	sp, #20
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	6078      	str	r0, [r7, #4]
 800dc52:	6039      	str	r1, [r7, #0]
 800dc54:	2300      	movs	r3, #0
 800dc56:	73fb      	strb	r3, [r7, #15]
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800dc64:	42a2      	cmp	r2, r4
 800dc66:	bf08      	it	eq
 800dc68:	4299      	cmpeq	r1, r3
 800dc6a:	d001      	beq.n	800dc70 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE+0x26>
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	73fb      	strb	r3, [r7, #15]
 800dc70:	683a      	ldr	r2, [r7, #0]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	4615      	mov	r5, r2
 800dc76:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800dc7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dc7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dc82:	e885 0003 	stmia.w	r5, {r0, r1}
 800dc86:	7bfb      	ldrb	r3, [r7, #15]
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3714      	adds	r7, #20
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bcb0      	pop	{r4, r5, r7}
 800dc90:	4770      	bx	lr

0800dc92 <_ZN2FC6MsgBus11setAttitudeERKNS_8AttitudeE>:

    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
    SIMPLE_FUNC_IMPL(VehicleAttitueSP, VehicleAttitueSP, vehicleAttitudeSP)
    SIMPLE_FUNC_IMPL(VehiclePositionSP, VehiclePositionSP, vehiclePositionSP)
    
    SIMPLE_FUNC_IMPL(Attitude, Attitude, attitude)
 800dc92:	b4b0      	push	{r4, r5, r7}
 800dc94:	b083      	sub	sp, #12
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
 800dc9a:	6039      	str	r1, [r7, #0]
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	683a      	ldr	r2, [r7, #0]
 800dca0:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800dca4:	4615      	mov	r5, r2
 800dca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dcaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dcac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dcae:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dcb2:	e884 0003 	stmia.w	r4, {r0, r1}
 800dcb6:	bf00      	nop
 800dcb8:	370c      	adds	r7, #12
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bcb0      	pop	{r4, r5, r7}
 800dcbe:	4770      	bx	lr

0800dcc0 <_ZN2FC6MsgBus11setNedAccelERKNS_8NedAccelE>:
    SIMPLE_FUNC_IMPL(NedAccel, NedAccel, nedAccel)
 800dcc0:	b4b0      	push	{r4, r5, r7}
 800dcc2:	b083      	sub	sp, #12
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6039      	str	r1, [r7, #0]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	683a      	ldr	r2, [r7, #0]
 800dcce:	f503 748c 	add.w	r4, r3, #280	; 0x118
 800dcd2:	4615      	mov	r5, r2
 800dcd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dcd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dcd8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dcdc:	e884 0003 	stmia.w	r4, {r0, r1}
 800dce0:	bf00      	nop
 800dce2:	370c      	adds	r7, #12
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bcb0      	pop	{r4, r5, r7}
 800dce8:	4770      	bx	lr
	...

0800dcec <_ZL11microsecondv>:
/* micro second counter timer */
#define USEC_TIMER &htim2

static uint32_t _timerOverflowCnt = 0;

static __inline uint64_t microsecond(){
 800dcec:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800dcf0:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800dcf2:	4b0e      	ldr	r3, [pc, #56]	; (800dd2c <_ZL11microsecondv+0x40>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	f04f 0200 	mov.w	r2, #0
 800dcfc:	f04f 0b00 	mov.w	fp, #0
 800dd00:	f04f 0c00 	mov.w	ip, #0
 800dd04:	468c      	mov	ip, r1
 800dd06:	f04f 0b00 	mov.w	fp, #0
 800dd0a:	4a09      	ldr	r2, [pc, #36]	; (800dd30 <_ZL11microsecondv+0x44>)
 800dd0c:	6812      	ldr	r2, [r2, #0]
 800dd0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800dd10:	4611      	mov	r1, r2
 800dd12:	f04f 0200 	mov.w	r2, #0
 800dd16:	ea4b 0301 	orr.w	r3, fp, r1
 800dd1a:	ea4c 0402 	orr.w	r4, ip, r2
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	4621      	mov	r1, r4
 800dd22:	46bd      	mov	sp, r7
 800dd24:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800dd28:	4770      	bx	lr
 800dd2a:	bf00      	nop
 800dd2c:	20000adc 	.word	0x20000adc
 800dd30:	20010f88 	.word	0x20010f88

0800dd34 <_ZN2FC10ModuleAHRSC1Ev>:
#include "Lib/Matrix/matrix/Quaternion.hpp"
#include "cmath"

namespace FC{

ModuleAHRS::ModuleAHRS()
 800dd34:	b590      	push	{r4, r7, lr}
 800dd36:	b083      	sub	sp, #12
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
	, lastUpdate{0}
	, beta{0.6f}
	, q0{1.0f}
	, q1{0.0f}
	, q2{0.0f}
	, q3{0.0f}
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	461a      	mov	r2, r3
 800dd40:	2300      	movs	r3, #0
 800dd42:	6013      	str	r3, [r2, #0]
 800dd44:	6053      	str	r3, [r2, #4]
 800dd46:	6093      	str	r3, [r2, #8]
 800dd48:	60d3      	str	r3, [r2, #12]
 800dd4a:	6113      	str	r3, [r2, #16]
 800dd4c:	6153      	str	r3, [r2, #20]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	3318      	adds	r3, #24
 800dd52:	2200      	movs	r2, #0
 800dd54:	601a      	str	r2, [r3, #0]
 800dd56:	605a      	str	r2, [r3, #4]
 800dd58:	609a      	str	r2, [r3, #8]
 800dd5a:	60da      	str	r2, [r3, #12]
 800dd5c:	611a      	str	r2, [r3, #16]
 800dd5e:	615a      	str	r2, [r3, #20]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	3330      	adds	r3, #48	; 0x30
 800dd64:	2200      	movs	r2, #0
 800dd66:	601a      	str	r2, [r3, #0]
 800dd68:	605a      	str	r2, [r3, #4]
 800dd6a:	609a      	str	r2, [r3, #8]
 800dd6c:	60da      	str	r2, [r3, #12]
 800dd6e:	611a      	str	r2, [r3, #16]
 800dd70:	615a      	str	r2, [r3, #20]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	3348      	adds	r3, #72	; 0x48
 800dd76:	2228      	movs	r2, #40	; 0x28
 800dd78:	2100      	movs	r1, #0
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f01b f92f 	bl	8028fde <memset>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	3370      	adds	r3, #112	; 0x70
 800dd84:	2200      	movs	r2, #0
 800dd86:	601a      	str	r2, [r3, #0]
 800dd88:	605a      	str	r2, [r3, #4]
 800dd8a:	609a      	str	r2, [r3, #8]
 800dd8c:	60da      	str	r2, [r3, #12]
 800dd8e:	611a      	str	r2, [r3, #16]
 800dd90:	615a      	str	r2, [r3, #20]
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	f04f 0300 	mov.w	r3, #0
 800dd98:	f04f 0400 	mov.w	r4, #0
 800dd9c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	4a0e      	ldr	r2, [pc, #56]	; (800dddc <_ZN2FC10ModuleAHRSC1Ev+0xa8>)
 800dda4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ddae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f04f 0200 	mov.w	r2, #0
 800ddb8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f04f 0200 	mov.w	r2, #0
 800ddc2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f04f 0200 	mov.w	r2, #0
 800ddcc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
{

}
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	370c      	adds	r7, #12
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd90      	pop	{r4, r7, pc}
 800ddda:	bf00      	nop
 800dddc:	3f19999a 	.word	0x3f19999a

0800dde0 <_ZN2FC10ModuleAHRS7oneStepEv>:

void ModuleAHRS::oneStep(){
 800dde0:	b5b0      	push	{r4, r5, r7, lr}
 800dde2:	b09c      	sub	sp, #112	; 0x70
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
	/* receive data */
	msgBus.getBodyAccel(&this->bodyAccelSub);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	4619      	mov	r1, r3
 800ddec:	48d0      	ldr	r0, [pc, #832]	; (800e130 <_ZN2FC10ModuleAHRS7oneStepEv+0x350>)
 800ddee:	f7ff fee5 	bl	800dbbc <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>
	msgBus.getBodyAngularVelocity(&this->bodyAngularVelocitySub);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	3318      	adds	r3, #24
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	48cd      	ldr	r0, [pc, #820]	; (800e130 <_ZN2FC10ModuleAHRS7oneStepEv+0x350>)
 800ddfa:	f7ff ff02 	bl	800dc02 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>
//						   bodyAccelSub.xyz[2],
//						   bodyMagSub.xyz[0],
//						   bodyMagSub.xyz[1],
//						   bodyMagSub.xyz[2]);
//	}
	msgBus.getBodyMag(&this->bodyMagSub);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	3330      	adds	r3, #48	; 0x30
 800de02:	4619      	mov	r1, r3
 800de04:	48ca      	ldr	r0, [pc, #808]	; (800e130 <_ZN2FC10ModuleAHRS7oneStepEv+0x350>)
 800de06:	f7ff ff20 	bl	800dc4a <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>
	MadgwickAHRSupdate(bodyAngularVelocitySub.xyz[0],
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	edd3 7a08 	vldr	s15, [r3, #32]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	ed93 6a02 	vldr	s12, [r3, #8]
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	edd3 5a03 	vldr	s11, [r3, #12]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	ed93 5a04 	vldr	s10, [r3, #16]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	edd3 4a0e 	vldr	s9, [r3, #56]	; 0x38
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 800de40:	eeb0 3a64 	vmov.f32	s6, s9
 800de44:	eef0 2a45 	vmov.f32	s5, s10
 800de48:	eeb0 2a65 	vmov.f32	s4, s11
 800de4c:	eef0 1a46 	vmov.f32	s3, s12
 800de50:	eeb0 1a66 	vmov.f32	s2, s13
 800de54:	eef0 0a47 	vmov.f32	s1, s14
 800de58:	eeb0 0a67 	vmov.f32	s0, s15
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f000 f983 	bl	800e168 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff>
					   bodyMagSub.xyz[1],
					   bodyMagSub.xyz[2]);

	/* calculate roll pitch yaw */
	float roll, pitch, yaw;
	roll = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0- q1 * q1 - q2 * q2 + q3 * q3);		//roll
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800de6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800de7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800de82:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800de8a:	ee17 0a90 	vmov	r0, s15
 800de8e:	f7f2 fb63 	bl	8000558 <__aeabi_f2d>
 800de92:	4604      	mov	r4, r0
 800de94:	460d      	mov	r5, r1
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800dea2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800deb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800deb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800dec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800deca:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800deda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dede:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dee2:	ee17 0a90 	vmov	r0, s15
 800dee6:	f7f2 fb37 	bl	8000558 <__aeabi_f2d>
 800deea:	4602      	mov	r2, r0
 800deec:	460b      	mov	r3, r1
 800deee:	ec43 2b11 	vmov	d1, r2, r3
 800def2:	ec45 4b10 	vmov	d0, r4, r5
 800def6:	f017 fdd7 	bl	8025aa8 <atan2>
 800defa:	ec54 3b10 	vmov	r3, r4, d0
 800defe:	4618      	mov	r0, r3
 800df00:	4621      	mov	r1, r4
 800df02:	f7f2 fe79 	bl	8000bf8 <__aeabi_d2f>
 800df06:	4603      	mov	r3, r0
 800df08:	66fb      	str	r3, [r7, #108]	; 0x6c
	pitch = -asin(2.0f * (q1 * q3 - q0 * q2));												//pitch
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800df16:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800df26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800df32:	ee17 0a90 	vmov	r0, s15
 800df36:	f7f2 fb0f 	bl	8000558 <__aeabi_f2d>
 800df3a:	4603      	mov	r3, r0
 800df3c:	460c      	mov	r4, r1
 800df3e:	ec44 3b10 	vmov	d0, r3, r4
 800df42:	f017 fd59 	bl	80259f8 <asin>
 800df46:	ec54 3b10 	vmov	r3, r4, d0
 800df4a:	4618      	mov	r0, r3
 800df4c:	4621      	mov	r1, r4
 800df4e:	f7f2 fe53 	bl	8000bf8 <__aeabi_d2f>
 800df52:	4603      	mov	r3, r0
 800df54:	ee07 3a90 	vmov	s15, r3
 800df58:	eef1 7a67 	vneg.f32	s15, s15
 800df5c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	yaw = atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);		//yaw
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800df6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800df7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df80:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df84:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800df88:	ee17 0a90 	vmov	r0, s15
 800df8c:	f7f2 fae4 	bl	8000558 <__aeabi_f2d>
 800df90:	4604      	mov	r4, r0
 800df92:	460d      	mov	r5, r1
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800dfa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800dfb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dfb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800dfc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dfc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800dfd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dfdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dfe0:	ee17 0a90 	vmov	r0, s15
 800dfe4:	f7f2 fab8 	bl	8000558 <__aeabi_f2d>
 800dfe8:	4602      	mov	r2, r0
 800dfea:	460b      	mov	r3, r1
 800dfec:	ec43 2b11 	vmov	d1, r2, r3
 800dff0:	ec45 4b10 	vmov	d0, r4, r5
 800dff4:	f017 fd58 	bl	8025aa8 <atan2>
 800dff8:	ec54 3b10 	vmov	r3, r4, d0
 800dffc:	4618      	mov	r0, r3
 800dffe:	4621      	mov	r1, r4
 800e000:	f7f2 fdfa 	bl	8000bf8 <__aeabi_d2f>
 800e004:	4603      	mov	r3, r0
 800e006:	667b      	str	r3, [r7, #100]	; 0x64

	matrix::Quatf quat(q0, q1, q2, q3);		/* NED -> body quaternion */
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 800e020:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e024:	eef0 1a46 	vmov.f32	s3, s12
 800e028:	eeb0 1a66 	vmov.f32	s2, s13
 800e02c:	eef0 0a47 	vmov.f32	s1, s14
 800e030:	eeb0 0a67 	vmov.f32	s0, s15
 800e034:	4618      	mov	r0, r3
 800e036:	f001 fb76 	bl	800f726 <_ZN6matrix10QuaternionIfEC1Effff>
	matrix::Dcmf dcm(quat/*.inversed()*/);		/* body -> NED DCM */
 800e03a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e03e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e042:	4611      	mov	r1, r2
 800e044:	4618      	mov	r0, r3
 800e046:	f001 fbc2 	bl	800f7ce <_ZN6matrix3DcmIfEC1ERKNS_10QuaternionIfEE>
	matrix::Vector3f tempBodyAccel(this->bodyAccelSub.xyz[0],
								   this->bodyAccelSub.xyz[1],
								   this->bodyAccelSub.xyz[2]);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	edd3 7a02 	vldr	s15, [r3, #8]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	ed93 7a03 	vldr	s14, [r3, #12]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	edd3 6a04 	vldr	s13, [r3, #16]
 800e05c:	f107 0318 	add.w	r3, r7, #24
 800e060:	eeb0 1a66 	vmov.f32	s2, s13
 800e064:	eef0 0a47 	vmov.f32	s1, s14
 800e068:	eeb0 0a67 	vmov.f32	s0, s15
 800e06c:	4618      	mov	r0, r3
 800e06e:	f001 fcf7 	bl	800fa60 <_ZN6matrix7Vector3IfEC1Efff>

	matrix::Vector3f tempNedAccel = dcm*tempBodyAccel;
 800e072:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e076:	f107 0218 	add.w	r2, r7, #24
 800e07a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800e07e:	4618      	mov	r0, r3
 800e080:	f001 fd1b 	bl	800faba <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_>
 800e084:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e088:	f107 030c 	add.w	r3, r7, #12
 800e08c:	4611      	mov	r1, r2
 800e08e:	4618      	mov	r0, r3
 800e090:	f001 fd64 	bl	800fb5c <_ZN6matrix7Vector3IfEC1ERKNS_6MatrixIfLj3ELj1EEE>

	attitudePub.timestamp = microsecond();
 800e094:	f7ff fe2a 	bl	800dcec <_ZL11microsecondv>
 800e098:	4603      	mov	r3, r0
 800e09a:	460c      	mov	r4, r1
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	attitudePub.q[0] = this->q0;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	651a      	str	r2, [r3, #80]	; 0x50
	attitudePub.q[1] = this->q1;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	655a      	str	r2, [r3, #84]	; 0x54
	attitudePub.q[2] = this->q2;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	659a      	str	r2, [r3, #88]	; 0x58
	attitudePub.q[3] = this->q3;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	65da      	str	r2, [r3, #92]	; 0x5c
	attitudePub.roll = roll;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e0ce:	661a      	str	r2, [r3, #96]	; 0x60
	attitudePub.pitch = pitch;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e0d4:	665a      	str	r2, [r3, #100]	; 0x64
	attitudePub.yaw = yaw;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e0da:	669a      	str	r2, [r3, #104]	; 0x68

	msgBus.setAttitude(attitudePub);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	3348      	adds	r3, #72	; 0x48
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	4813      	ldr	r0, [pc, #76]	; (800e130 <_ZN2FC10ModuleAHRS7oneStepEv+0x350>)
 800e0e4:	f7ff fdd5 	bl	800dc92 <_ZN2FC6MsgBus11setAttitudeERKNS_8AttitudeE>

	nedAccelPub.timestamp = microsecond();
 800e0e8:	f7ff fe00 	bl	800dcec <_ZL11microsecondv>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	460c      	mov	r4, r1
 800e0f0:	687a      	ldr	r2, [r7, #4]
 800e0f2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	nedAccelPub.xyz[0] = tempNedAccel(0);
 800e0f6:	f107 030c 	add.w	r3, r7, #12
 800e0fa:	2100      	movs	r1, #0
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f001 fd53 	bl	800fba8 <_ZN6matrix6VectorIfLj3EEclEj>
 800e102:	4603      	mov	r3, r0
 800e104:	681a      	ldr	r2, [r3, #0]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	679a      	str	r2, [r3, #120]	; 0x78
	nedAccelPub.xyz[1] = tempNedAccel(1);
 800e10a:	f107 030c 	add.w	r3, r7, #12
 800e10e:	2101      	movs	r1, #1
 800e110:	4618      	mov	r0, r3
 800e112:	f001 fd49 	bl	800fba8 <_ZN6matrix6VectorIfLj3EEclEj>
 800e116:	4603      	mov	r3, r0
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	67da      	str	r2, [r3, #124]	; 0x7c
	nedAccelPub.xyz[2] = tempNedAccel(2);
 800e11e:	f107 030c 	add.w	r3, r7, #12
 800e122:	2102      	movs	r1, #2
 800e124:	4618      	mov	r0, r3
 800e126:	f001 fd3f 	bl	800fba8 <_ZN6matrix6VectorIfLj3EEclEj>
 800e12a:	4603      	mov	r3, r0
 800e12c:	681a      	ldr	r2, [r3, #0]
 800e12e:	e001      	b.n	800e134 <_ZN2FC10ModuleAHRS7oneStepEv+0x354>
 800e130:	20000bb8 	.word	0x20000bb8
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	msgBus.setNedAccel(nedAccelPub);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	3370      	adds	r3, #112	; 0x70
 800e13e:	4619      	mov	r1, r3
 800e140:	4806      	ldr	r0, [pc, #24]	; (800e15c <_ZN2FC10ModuleAHRS7oneStepEv+0x37c>)
 800e142:	f7ff fdbd 	bl	800dcc0 <_ZN2FC6MsgBus11setNedAccelERKNS_8NedAccelE>

	/* Freq class variable */
	freqCnt++;
 800e146:	4b06      	ldr	r3, [pc, #24]	; (800e160 <_ZN2FC10ModuleAHRS7oneStepEv+0x380>)
 800e148:	881b      	ldrh	r3, [r3, #0]
 800e14a:	3301      	adds	r3, #1
 800e14c:	b29a      	uxth	r2, r3
 800e14e:	4b04      	ldr	r3, [pc, #16]	; (800e160 <_ZN2FC10ModuleAHRS7oneStepEv+0x380>)
 800e150:	801a      	strh	r2, [r3, #0]
}
 800e152:	bf00      	nop
 800e154:	3770      	adds	r7, #112	; 0x70
 800e156:	46bd      	mov	sp, r7
 800e158:	bdb0      	pop	{r4, r5, r7, pc}
 800e15a:	bf00      	nop
 800e15c:	20000bb8 	.word	0x20000bb8
 800e160:	20000ae0 	.word	0x20000ae0
 800e164:	00000000 	.word	0x00000000

0800e168 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff>:

void ModuleAHRS::MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz){
 800e168:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800e16c:	b0ae      	sub	sp, #184	; 0xb8
 800e16e:	af00      	add	r7, sp, #0
 800e170:	6278      	str	r0, [r7, #36]	; 0x24
 800e172:	ed87 0a08 	vstr	s0, [r7, #32]
 800e176:	edc7 0a07 	vstr	s1, [r7, #28]
 800e17a:	ed87 1a06 	vstr	s2, [r7, #24]
 800e17e:	edc7 1a05 	vstr	s3, [r7, #20]
 800e182:	ed87 2a04 	vstr	s4, [r7, #16]
 800e186:	edc7 2a03 	vstr	s5, [r7, #12]
 800e18a:	ed87 3a02 	vstr	s6, [r7, #8]
 800e18e:	edc7 3a01 	vstr	s7, [r7, #4]
 800e192:	ed87 4a00 	vstr	s8, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 800e196:	edd7 7a02 	vldr	s15, [r7, #8]
 800e19a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1a2:	d11e      	bne.n	800e1e2 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x7a>
 800e1a4:	edd7 7a01 	vldr	s15, [r7, #4]
 800e1a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1b0:	d117      	bne.n	800e1e2 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x7a>
 800e1b2:	edd7 7a00 	vldr	s15, [r7]
 800e1b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1be:	d110      	bne.n	800e1e2 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x7a>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 800e1c0:	edd7 2a03 	vldr	s5, [r7, #12]
 800e1c4:	ed97 2a04 	vldr	s4, [r7, #16]
 800e1c8:	edd7 1a05 	vldr	s3, [r7, #20]
 800e1cc:	ed97 1a06 	vldr	s2, [r7, #24]
 800e1d0:	edd7 0a07 	vldr	s1, [r7, #28]
 800e1d4:	ed97 0a08 	vldr	s0, [r7, #32]
 800e1d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1da:	f000 fefd 	bl	800efd8 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>
 800e1de:	f000 bee9 	b.w	800efb4 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe4c>
		return;
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800e1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800e1e8:	eeb1 7a67 	vneg.f32	s14, s15
 800e1ec:	edd7 7a08 	vldr	s15, [r7, #32]
 800e1f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f6:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800e1fa:	edd7 7a07 	vldr	s15, [r7, #28]
 800e1fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e202:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e208:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800e20c:	edd7 7a06 	vldr	s15, [r7, #24]
 800e210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e214:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e218:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e21c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e220:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800e224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e226:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800e22a:	edd7 7a08 	vldr	s15, [r7, #32]
 800e22e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e234:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800e238:	edd7 7a06 	vldr	s15, [r7, #24]
 800e23c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e240:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e246:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800e24a:	edd7 7a07 	vldr	s15, [r7, #28]
 800e24e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e252:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e256:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e25a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e25e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800e262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e264:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800e268:	edd7 7a07 	vldr	s15, [r7, #28]
 800e26c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e272:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800e276:	edd7 7a06 	vldr	s15, [r7, #24]
 800e27a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e27e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e284:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800e288:	edd7 7a08 	vldr	s15, [r7, #32]
 800e28c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e290:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e294:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e29c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800e2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a2:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800e2a6:	edd7 7a06 	vldr	s15, [r7, #24]
 800e2aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b0:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800e2b4:	edd7 7a07 	vldr	s15, [r7, #28]
 800e2b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e2bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c2:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800e2c6:	edd7 7a08 	vldr	s15, [r7, #32]
 800e2ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e2ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e2d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e2d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e2da:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800e2de:	ed97 7a05 	vldr	s14, [r7, #20]
 800e2e2:	edd7 7a05 	vldr	s15, [r7, #20]
 800e2e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e2ea:	edd7 6a04 	vldr	s13, [r7, #16]
 800e2ee:	edd7 7a04 	vldr	s15, [r7, #16]
 800e2f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e2f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e2fa:	edd7 6a03 	vldr	s13, [r7, #12]
 800e2fe:	edd7 7a03 	vldr	s15, [r7, #12]
 800e302:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e30a:	eeb0 0a67 	vmov.f32	s0, s15
 800e30e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e310:	f001 f9ac 	bl	800f66c <_ZN2FC10ModuleAHRS7invSqrtEf>
 800e314:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	ax *= recipNorm;
 800e318:	ed97 7a05 	vldr	s14, [r7, #20]
 800e31c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800e320:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e324:	edc7 7a05 	vstr	s15, [r7, #20]
	ay *= recipNorm;
 800e328:	ed97 7a04 	vldr	s14, [r7, #16]
 800e32c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800e330:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e334:	edc7 7a04 	vstr	s15, [r7, #16]
	az *= recipNorm;
 800e338:	ed97 7a03 	vldr	s14, [r7, #12]
 800e33c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800e340:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e344:	edc7 7a03 	vstr	s15, [r7, #12]

	// Normalise magnetometer measurement
	recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 800e348:	ed97 7a02 	vldr	s14, [r7, #8]
 800e34c:	edd7 7a02 	vldr	s15, [r7, #8]
 800e350:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e354:	edd7 6a01 	vldr	s13, [r7, #4]
 800e358:	edd7 7a01 	vldr	s15, [r7, #4]
 800e35c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e360:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e364:	edd7 6a00 	vldr	s13, [r7]
 800e368:	edd7 7a00 	vldr	s15, [r7]
 800e36c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e370:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e374:	eeb0 0a67 	vmov.f32	s0, s15
 800e378:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e37a:	f001 f977 	bl	800f66c <_ZN2FC10ModuleAHRS7invSqrtEf>
 800e37e:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	mx *= recipNorm;
 800e382:	ed97 7a02 	vldr	s14, [r7, #8]
 800e386:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800e38a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e38e:	edc7 7a02 	vstr	s15, [r7, #8]
	my *= recipNorm;
 800e392:	ed97 7a01 	vldr	s14, [r7, #4]
 800e396:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800e39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e39e:	edc7 7a01 	vstr	s15, [r7, #4]
	mz *= recipNorm;
 800e3a2:	ed97 7a00 	vldr	s14, [r7]
 800e3a6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800e3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3ae:	edc7 7a00 	vstr	s15, [r7]

	// Auxiliary variables to avoid repeated arithmetic
	_2q0mx = 2.0f * q0 * mx;
 800e3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800e3b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e3bc:	ed97 7a02 	vldr	s14, [r7, #8]
 800e3c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3c4:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	_2q0my = 2.0f * q0 * my;
 800e3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ca:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800e3ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e3d2:	ed97 7a01 	vldr	s14, [r7, #4]
 800e3d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3da:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	_2q0mz = 2.0f * q0 * mz;
 800e3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e0:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800e3e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e3e8:	ed97 7a00 	vldr	s14, [r7]
 800e3ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3f0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	_2q1mx = 2.0f * q1 * mx;
 800e3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f6:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800e3fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e3fe:	ed97 7a02 	vldr	s14, [r7, #8]
 800e402:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e406:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	_2q0 = 2.0f * q0;
 800e40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800e410:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e414:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	_2q1 = 2.0f * q1;
 800e418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800e41e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e422:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	_2q2 = 2.0f * q2;
 800e426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e428:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800e42c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e430:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	_2q3 = 2.0f * q3;
 800e434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e436:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800e43a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e43e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	_2q0q2 = 2.0f * q0 * q2;
 800e442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e444:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800e448:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800e452:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e456:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	_2q2q3 = 2.0f * q2 * q3;
 800e45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800e460:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e466:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800e46a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e46e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	q0q0 = q0 * q0;
 800e472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e474:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800e478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800e47e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e482:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	q0q1 = q0 * q1;
 800e486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e488:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800e48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800e492:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e496:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q0q2 = q0 * q2;
 800e49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49c:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800e4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a2:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800e4a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4aa:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	q0q3 = q0 * q3;
 800e4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b0:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800e4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b6:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800e4ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4be:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	q1q1 = q1 * q1;
 800e4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c4:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800e4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ca:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800e4ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4d2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	q1q2 = q1 * q2;
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d8:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800e4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4de:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800e4e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4e6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	q1q3 = q1 * q3;
 800e4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ec:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800e4f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4fa:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	q2q2 = q2 * q2;
 800e4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e500:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800e504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e506:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800e50a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e50e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	q2q3 = q2 * q3;
 800e512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e514:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800e518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51a:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800e51e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e522:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	q3q3 = q3 * q3;
 800e526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e528:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800e52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800e532:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e536:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	// Reference direction of Earth's magnetic field
	hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800e53a:	ed97 7a02 	vldr	s14, [r7, #8]
 800e53e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800e542:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e548:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800e54c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800e550:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e554:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55a:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800e55e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800e562:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e566:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e56a:	edd7 6a02 	vldr	s13, [r7, #8]
 800e56e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800e572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e576:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e57a:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800e57e:	edd7 7a01 	vldr	s15, [r7, #4]
 800e582:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e588:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800e58c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e590:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e594:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800e598:	edd7 7a00 	vldr	s15, [r7]
 800e59c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800e5a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e5aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e5ae:	edd7 6a02 	vldr	s13, [r7, #8]
 800e5b2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e5b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e5ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e5be:	edd7 6a02 	vldr	s13, [r7, #8]
 800e5c2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800e5c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e5ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e5ce:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 800e5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d4:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800e5d8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800e5dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e5e0:	edd7 6a01 	vldr	s13, [r7, #4]
 800e5e4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800e5e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e5ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f2:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800e5f6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800e5fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e5fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e604:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800e608:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800e60c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e610:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e614:	edd7 6a01 	vldr	s13, [r7, #4]
 800e618:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800e61c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e620:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e624:	edd7 6a01 	vldr	s13, [r7, #4]
 800e628:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e62c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e630:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e634:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800e638:	edd7 7a00 	vldr	s15, [r7]
 800e63c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e642:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800e646:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e64a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e64e:	edd7 6a01 	vldr	s13, [r7, #4]
 800e652:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800e656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e65a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e65e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_2bx = sqrt(hx * hx + hy * hy);
 800e662:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800e666:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800e66a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e66e:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800e672:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800e676:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e67a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e67e:	ee17 0a90 	vmov	r0, s15
 800e682:	f7f1 ff69 	bl	8000558 <__aeabi_f2d>
 800e686:	4603      	mov	r3, r0
 800e688:	460c      	mov	r4, r1
 800e68a:	ec44 3b10 	vmov	d0, r3, r4
 800e68e:	f017 fbe1 	bl	8025e54 <sqrt>
 800e692:	ec54 3b10 	vmov	r3, r4, d0
 800e696:	4618      	mov	r0, r3
 800e698:	4621      	mov	r1, r4
 800e69a:	f7f2 faad 	bl	8000bf8 <__aeabi_d2f>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	64bb      	str	r3, [r7, #72]	; 0x48
	_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 800e6a2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800e6a6:	eeb1 7a67 	vneg.f32	s14, s15
 800e6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ac:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800e6b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b6:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800e6ba:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800e6be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e6c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e6c6:	edd7 6a00 	vldr	s13, [r7]
 800e6ca:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800e6ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e6d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d8:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800e6dc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800e6e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e6e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e6e8:	edd7 6a00 	vldr	s13, [r7]
 800e6ec:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800e6f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e6f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e6f8:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800e6fc:	edd7 7a01 	vldr	s15, [r7, #4]
 800e700:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e706:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800e70a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e70e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e712:	edd7 6a00 	vldr	s13, [r7]
 800e716:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e71a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e71e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e722:	edd7 6a00 	vldr	s13, [r7]
 800e726:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800e72a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e72e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e732:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	_4bx = 2.0f * _2bx;
 800e736:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e73a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e73e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	_4bz = 2.0f * _2bz;
 800e742:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e746:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e74a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// Gradient decent algorithm corrective step
	s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800e74e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800e752:	eeb1 7a67 	vneg.f32	s14, s15
 800e756:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800e75a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e75e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800e762:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e766:	edd7 7a05 	vldr	s15, [r7, #20]
 800e76a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e76e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e772:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800e776:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e77a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800e77e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e782:	edd7 7a04 	vldr	s15, [r7, #16]
 800e786:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e78a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800e78e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e792:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e798:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800e79c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e7a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e7a4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e7a8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e7ac:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e7b0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800e7b4:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e7b8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e7bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e7c0:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800e7c4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800e7c8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800e7cc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e7d0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800e7d4:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e7d8:	edd7 7a02 	vldr	s15, [r7, #8]
 800e7dc:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e7e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e7e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e7e8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e7ec:	eef1 6a67 	vneg.f32	s13, s15
 800e7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800e7f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fc:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 800e800:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e804:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e808:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e80c:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800e810:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800e814:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e818:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e81c:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e820:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800e824:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800e828:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800e82c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e830:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800e834:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e838:	edd7 7a01 	vldr	s15, [r7, #4]
 800e83c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e844:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84a:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800e84e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e852:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e856:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800e85a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800e85e:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e862:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e866:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e86a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800e86e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800e872:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800e876:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e87a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800e87e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e882:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800e886:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e88a:	edd7 7a00 	vldr	s15, [r7]
 800e88e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e892:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e89a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800e89e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800e8a2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e8a6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800e8aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e8ae:	edd7 7a05 	vldr	s15, [r7, #20]
 800e8b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e8b6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800e8ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e8be:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800e8c2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e8c6:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800e8ca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e8ce:	edd7 7a04 	vldr	s15, [r7, #16]
 800e8d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e8d6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800e8da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e8de:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800e8e8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800e8ec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e8f0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800e8f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e8f8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e8fc:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e900:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e904:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e908:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e90c:	edd7 7a03 	vldr	s15, [r7, #12]
 800e910:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e918:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91e:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800e922:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e926:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e92a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e92e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e932:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e936:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800e93a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e93e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e942:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e946:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800e94a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800e94e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800e952:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e956:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800e95a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e95e:	edd7 7a02 	vldr	s15, [r7, #8]
 800e962:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e96a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e970:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800e974:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e978:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97e:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 800e982:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e986:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e98a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e98e:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800e992:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800e996:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e99a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e99e:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e9a2:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800e9a6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800e9aa:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800e9ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e9b2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800e9b6:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e9ba:	edd7 7a01 	vldr	s15, [r7, #4]
 800e9be:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e9c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e9c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9cc:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800e9d0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e9d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9da:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 800e9de:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800e9e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e9e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e9ea:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800e9ee:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800e9f2:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e9f6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800e9fa:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e9fe:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800ea02:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800ea06:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800ea0a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800ea0e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800ea12:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ea16:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800ea1a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ea1e:	edd7 7a00 	vldr	s15, [r7]
 800ea22:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ea26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea2e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800ea32:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800ea36:	eeb1 7a67 	vneg.f32	s14, s15
 800ea3a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800ea3e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800ea42:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800ea46:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ea4a:	edd7 7a05 	vldr	s15, [r7, #20]
 800ea4e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ea52:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ea56:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800ea5a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800ea5e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800ea62:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ea66:	edd7 7a04 	vldr	s15, [r7, #16]
 800ea6a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ea6e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800ea72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea76:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ea7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800ea80:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800ea84:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ea88:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800ea8c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ea90:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ea94:	ee36 6a67 	vsub.f32	s12, s12, s15
 800ea98:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800ea9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800eaa0:	ee36 6a67 	vsub.f32	s12, s12, s15
 800eaa4:	edd7 7a03 	vldr	s15, [r7, #12]
 800eaa8:	ee76 7a67 	vsub.f32	s15, s12, s15
 800eaac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eab0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800eab4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800eab8:	eef1 6a67 	vneg.f32	s13, s15
 800eabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eabe:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800eac2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800eac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac8:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 800eacc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ead0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ead4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ead8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800eadc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800eae0:	ee36 6a67 	vsub.f32	s12, s12, s15
 800eae4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800eae8:	ee36 6a67 	vsub.f32	s12, s12, s15
 800eaec:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800eaf0:	ee26 6a27 	vmul.f32	s12, s12, s15
 800eaf4:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800eaf8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800eafc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800eb00:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800eb04:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800eb08:	ee36 6a27 	vadd.f32	s12, s12, s15
 800eb0c:	edd7 7a02 	vldr	s15, [r7, #8]
 800eb10:	ee76 7a67 	vsub.f32	s15, s12, s15
 800eb14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb18:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1e:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800eb22:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800eb26:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800eb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2c:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 800eb30:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800eb34:	ee66 7a27 	vmul.f32	s15, s12, s15
 800eb38:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800eb3c:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800eb40:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800eb44:	ee36 6a67 	vsub.f32	s12, s12, s15
 800eb48:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800eb4c:	ee26 6a27 	vmul.f32	s12, s12, s15
 800eb50:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800eb54:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800eb58:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800eb5c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800eb60:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800eb64:	ee36 6a27 	vadd.f32	s12, s12, s15
 800eb68:	edd7 7a01 	vldr	s15, [r7, #4]
 800eb6c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800eb70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb74:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb7a:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800eb7e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800eb82:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800eb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb88:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 800eb8c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800eb90:	ee66 7a27 	vmul.f32	s15, s12, s15
 800eb94:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800eb98:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800eb9c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800eba0:	ee36 6a27 	vadd.f32	s12, s12, s15
 800eba4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800eba8:	ee26 6a27 	vmul.f32	s12, s12, s15
 800ebac:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800ebb0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800ebb4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800ebb8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800ebbc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800ebc0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ebc4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800ebc8:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ebcc:	edd7 7a00 	vldr	s15, [r7]
 800ebd0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ebd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ebd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ebdc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800ebe0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800ebe4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800ebe8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800ebec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ebf0:	edd7 7a05 	vldr	s15, [r7, #20]
 800ebf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ebf8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ebfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ec00:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800ec04:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800ec08:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800ec0c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ec10:	edd7 7a04 	vldr	s15, [r7, #16]
 800ec14:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ec18:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800ec1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec20:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ec24:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800ec28:	eef1 6a67 	vneg.f32	s13, s15
 800ec2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800ec32:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ec36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec38:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 800ec3c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ec40:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ec44:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ec48:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ec4c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800ec50:	ee36 6a67 	vsub.f32	s12, s12, s15
 800ec54:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800ec58:	ee36 6a67 	vsub.f32	s12, s12, s15
 800ec5c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800ec60:	ee26 6a27 	vmul.f32	s12, s12, s15
 800ec64:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800ec68:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800ec6c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800ec70:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ec74:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800ec78:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ec7c:	edd7 7a02 	vldr	s15, [r7, #8]
 800ec80:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ec84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec88:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ec8c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800ec90:	eef1 6a67 	vneg.f32	s13, s15
 800ec94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec96:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800ec9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ec9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca0:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 800eca4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800eca8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ecac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ecb0:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800ecb4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800ecb8:	ee36 6a67 	vsub.f32	s12, s12, s15
 800ecbc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800ecc0:	ee26 6a27 	vmul.f32	s12, s12, s15
 800ecc4:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800ecc8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800eccc:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800ecd0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ecd4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800ecd8:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ecdc:	edd7 7a01 	vldr	s15, [r7, #4]
 800ece0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ece4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ece8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ecec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecee:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800ecf2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800ecf6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ecfa:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800ecfe:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800ed02:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ed06:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800ed0a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800ed0e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800ed12:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800ed16:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800ed1a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800ed1e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800ed22:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ed26:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800ed2a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ed2e:	edd7 7a00 	vldr	s15, [r7]
 800ed32:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ed36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed3e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800ed42:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800ed46:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800ed4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ed4e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800ed52:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ed56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ed5e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800ed62:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ed66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ed6e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ed72:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ed76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed7e:	eeb0 0a67 	vmov.f32	s0, s15
 800ed82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed84:	f000 fc72 	bl	800f66c <_ZN2FC10ModuleAHRS7invSqrtEf>
 800ed88:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	s0 *= recipNorm;
 800ed8c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800ed90:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800ed94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed98:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	s1 *= recipNorm;
 800ed9c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800eda0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800eda4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eda8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s2 *= recipNorm;
 800edac:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800edb0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800edb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edb8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s3 *= recipNorm;
 800edbc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800edc0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800edc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edc8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Apply feedback step
	qDot1 -= beta * s0;
 800edcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edce:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800edd2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800edd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edda:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800edde:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ede2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 -= beta * s1;
 800ede6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede8:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800edec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800edf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edf4:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800edf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800edfc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 -= beta * s2;
 800ee00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee02:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800ee06:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ee0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee0e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800ee12:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee16:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 -= beta * s3;
 800ee1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee1c:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800ee20:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ee24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee28:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800ee2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee30:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8


	float dt = (microsecond() - this->lastUpdate)/1000000.0;	/*[second]*/
 800ee34:	f7fe ff5a 	bl	800dcec <_ZL11microsecondv>
 800ee38:	460a      	mov	r2, r1
 800ee3a:	4601      	mov	r1, r0
 800ee3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee3e:	e9d3 bc22 	ldrd	fp, ip, [r3, #136]	; 0x88
 800ee42:	460b      	mov	r3, r1
 800ee44:	4614      	mov	r4, r2
 800ee46:	ebb3 030b 	subs.w	r3, r3, fp
 800ee4a:	eb64 040c 	sbc.w	r4, r4, ip
 800ee4e:	4618      	mov	r0, r3
 800ee50:	4621      	mov	r1, r4
 800ee52:	f7f1 fba3 	bl	800059c <__aeabi_ul2d>
 800ee56:	a35b      	add	r3, pc, #364	; (adr r3, 800efc4 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe5c>)
 800ee58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5c:	f7f1 fcfe 	bl	800085c <__aeabi_ddiv>
 800ee60:	4603      	mov	r3, r0
 800ee62:	460c      	mov	r4, r1
 800ee64:	4618      	mov	r0, r3
 800ee66:	4621      	mov	r1, r4
 800ee68:	f7f1 fec6 	bl	8000bf8 <__aeabi_d2f>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	62bb      	str	r3, [r7, #40]	; 0x28
	if(dt > 0.01) dt = 0.01;								/* saturation */
 800ee70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7f1 fb70 	bl	8000558 <__aeabi_f2d>
 800ee78:	a354      	add	r3, pc, #336	; (adr r3, 800efcc <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe64>)
 800ee7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee7e:	f7f1 fe53 	bl	8000b28 <__aeabi_dcmpgt>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d001      	beq.n	800ee8c <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xd24>
 800ee88:	4b4d      	ldr	r3, [pc, #308]	; (800efc0 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe58>)
 800ee8a:	62bb      	str	r3, [r7, #40]	; 0x28
	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 800ee8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee8e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800ee92:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ee96:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800ee9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ee9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea4:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 += qDot2 * (dt);
 800eea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeaa:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800eeae:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800eeb2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800eeb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eeba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec0:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 += qDot3 * (dt);
 800eec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec6:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800eeca:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800eece:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800eed2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eedc:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 += qDot4 * (dt);
 800eee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee2:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800eee6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800eeea:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800eeee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef8:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800eefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eefe:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800ef02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef04:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800ef08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef0e:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800ef12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef14:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800ef18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ef1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ef20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef22:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800ef26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef28:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800ef2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ef30:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ef34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef36:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800ef3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800ef40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ef44:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ef48:	eeb0 0a67 	vmov.f32	s0, s15
 800ef4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef4e:	f000 fb8d 	bl	800f66c <_ZN2FC10ModuleAHRS7invSqrtEf>
 800ef52:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 800ef56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef58:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800ef5c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800ef60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef66:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 *= recipNorm;
 800ef6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800ef70:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800ef74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7a:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 *= recipNorm;
 800ef7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef80:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800ef84:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800ef88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8e:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 *= recipNorm;
 800ef92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef94:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800ef98:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800ef9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa2:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	lastUpdate = microsecond();
 800efa6:	f7fe fea1 	bl	800dcec <_ZL11microsecondv>
 800efaa:	4603      	mov	r3, r0
 800efac:	460c      	mov	r4, r1
 800efae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efb0:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
}
 800efb4:	37b8      	adds	r7, #184	; 0xb8
 800efb6:	46bd      	mov	sp, r7
 800efb8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800efbc:	f3af 8000 	nop.w
 800efc0:	3c23d70a 	.word	0x3c23d70a
 800efc4:	00000000 	.word	0x00000000
 800efc8:	412e8480 	.word	0x412e8480
 800efcc:	47ae147b 	.word	0x47ae147b
 800efd0:	3f847ae1 	.word	0x3f847ae1
 800efd4:	00000000 	.word	0x00000000

0800efd8 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>:

void ModuleAHRS::MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 800efd8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800efdc:	b0a0      	sub	sp, #128	; 0x80
 800efde:	af00      	add	r7, sp, #0
 800efe0:	61f8      	str	r0, [r7, #28]
 800efe2:	ed87 0a06 	vstr	s0, [r7, #24]
 800efe6:	edc7 0a05 	vstr	s1, [r7, #20]
 800efea:	ed87 1a04 	vstr	s2, [r7, #16]
 800efee:	edc7 1a03 	vstr	s3, [r7, #12]
 800eff2:	ed87 2a02 	vstr	s4, [r7, #8]
 800eff6:	edc7 2a01 	vstr	s5, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800effa:	69fb      	ldr	r3, [r7, #28]
 800effc:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800f000:	eeb1 7a67 	vneg.f32	s14, s15
 800f004:	edd7 7a06 	vldr	s15, [r7, #24]
 800f008:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f00c:	69fb      	ldr	r3, [r7, #28]
 800f00e:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800f012:	edd7 7a05 	vldr	s15, [r7, #20]
 800f016:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f01a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f01e:	69fb      	ldr	r3, [r7, #28]
 800f020:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800f024:	edd7 7a04 	vldr	s15, [r7, #16]
 800f028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f02c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f030:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f034:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f038:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800f03c:	69fb      	ldr	r3, [r7, #28]
 800f03e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800f042:	edd7 7a06 	vldr	s15, [r7, #24]
 800f046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f04a:	69fb      	ldr	r3, [r7, #28]
 800f04c:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800f050:	edd7 7a04 	vldr	s15, [r7, #16]
 800f054:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f058:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f05c:	69fb      	ldr	r3, [r7, #28]
 800f05e:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800f062:	edd7 7a05 	vldr	s15, [r7, #20]
 800f066:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f06a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f06e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f072:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f076:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800f07a:	69fb      	ldr	r3, [r7, #28]
 800f07c:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800f080:	edd7 7a05 	vldr	s15, [r7, #20]
 800f084:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800f08e:	edd7 7a04 	vldr	s15, [r7, #16]
 800f092:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f096:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f09a:	69fb      	ldr	r3, [r7, #28]
 800f09c:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800f0a0:	edd7 7a06 	vldr	s15, [r7, #24]
 800f0a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f0a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f0ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f0b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f0b4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800f0be:	edd7 7a04 	vldr	s15, [r7, #16]
 800f0c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800f0cc:	edd7 7a05 	vldr	s15, [r7, #20]
 800f0d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f0d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f0d8:	69fb      	ldr	r3, [r7, #28]
 800f0da:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800f0de:	edd7 7a06 	vldr	s15, [r7, #24]
 800f0e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f0e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f0ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f0ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f0f2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	// Normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800f0f6:	ed97 7a03 	vldr	s14, [r7, #12]
 800f0fa:	edd7 7a03 	vldr	s15, [r7, #12]
 800f0fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f102:	edd7 6a02 	vldr	s13, [r7, #8]
 800f106:	edd7 7a02 	vldr	s15, [r7, #8]
 800f10a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f10e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f112:	edd7 6a01 	vldr	s13, [r7, #4]
 800f116:	edd7 7a01 	vldr	s15, [r7, #4]
 800f11a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f11e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f122:	eeb0 0a67 	vmov.f32	s0, s15
 800f126:	69f8      	ldr	r0, [r7, #28]
 800f128:	f000 faa0 	bl	800f66c <_ZN2FC10ModuleAHRS7invSqrtEf>
 800f12c:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	ax *= recipNorm;
 800f130:	ed97 7a03 	vldr	s14, [r7, #12]
 800f134:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800f138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f13c:	edc7 7a03 	vstr	s15, [r7, #12]
	ay *= recipNorm;
 800f140:	ed97 7a02 	vldr	s14, [r7, #8]
 800f144:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800f148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f14c:	edc7 7a02 	vstr	s15, [r7, #8]
	az *= recipNorm;
 800f150:	ed97 7a01 	vldr	s14, [r7, #4]
 800f154:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800f158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f15c:	edc7 7a01 	vstr	s15, [r7, #4]

	// Auxiliary variables to avoid repeated arithmetic
	_2q0 = 2.0f * q0;
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800f166:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f16a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	_2q1 = 2.0f * q1;
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800f174:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f178:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	_2q2 = 2.0f * q2;
 800f17c:	69fb      	ldr	r3, [r7, #28]
 800f17e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800f182:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f186:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	_2q3 = 2.0f * q3;
 800f18a:	69fb      	ldr	r3, [r7, #28]
 800f18c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800f190:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f194:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	_4q0 = 4.0f * q0;
 800f198:	69fb      	ldr	r3, [r7, #28]
 800f19a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800f19e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800f1a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f1a6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	_4q1 = 4.0f * q1;
 800f1aa:	69fb      	ldr	r3, [r7, #28]
 800f1ac:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800f1b0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800f1b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f1b8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	_4q2 = 4.0f * q2;
 800f1bc:	69fb      	ldr	r3, [r7, #28]
 800f1be:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800f1c2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800f1c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f1ca:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	_8q1 = 8.0f * q1;
 800f1ce:	69fb      	ldr	r3, [r7, #28]
 800f1d0:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800f1d4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800f1d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f1dc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_8q2 = 8.0f * q2;
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800f1e6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800f1ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f1ee:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	q0q0 = q0 * q0;
 800f1f2:	69fb      	ldr	r3, [r7, #28]
 800f1f4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800f1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f202:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	q1q1 = q1 * q1;
 800f206:	69fb      	ldr	r3, [r7, #28]
 800f208:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800f212:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f216:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	q2q2 = q2 * q2;
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800f220:	69fb      	ldr	r3, [r7, #28]
 800f222:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800f226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f22a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	q3q3 = q3 * q3;
 800f22e:	69fb      	ldr	r3, [r7, #28]
 800f230:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800f234:	69fb      	ldr	r3, [r7, #28]
 800f236:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800f23a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f23e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	// Gradient decent algorithm corrective step
	s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800f242:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f246:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800f24a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f24e:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800f252:	edd7 7a03 	vldr	s15, [r7, #12]
 800f256:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f25a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f25e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800f262:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800f266:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f26a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f26e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800f272:	edd7 7a02 	vldr	s15, [r7, #8]
 800f276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f27a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f27e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800f282:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800f286:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f28a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f28e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800f292:	edd7 7a03 	vldr	s15, [r7, #12]
 800f296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f29a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f29e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800f2a2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800f2a6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f2aa:	69fb      	ldr	r3, [r7, #28]
 800f2ac:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800f2b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f2b8:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800f2bc:	edd7 7a02 	vldr	s15, [r7, #8]
 800f2c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f2c8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800f2cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f2d0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800f2d4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800f2d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f2e0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800f2e4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800f2e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f2f0:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800f2f4:	edd7 7a01 	vldr	s15, [r7, #4]
 800f2f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f300:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800f304:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800f308:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800f30c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f310:	69fb      	ldr	r3, [r7, #28]
 800f312:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800f316:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f31a:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800f31e:	edd7 7a03 	vldr	s15, [r7, #12]
 800f322:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f326:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f32a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800f32e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f332:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f336:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f33a:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800f33e:	edd7 7a02 	vldr	s15, [r7, #8]
 800f342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f346:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f34a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f34e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f352:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800f356:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800f35a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f35e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f362:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800f366:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800f36a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f36e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f372:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800f376:	edd7 7a01 	vldr	s15, [r7, #4]
 800f37a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f37e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f382:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800f386:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800f38a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800f38e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f392:	69fb      	ldr	r3, [r7, #28]
 800f394:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800f398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f39c:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800f3a0:	edd7 7a03 	vldr	s15, [r7, #12]
 800f3a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f3a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f3ac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800f3b0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800f3b4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f3b8:	69fb      	ldr	r3, [r7, #28]
 800f3ba:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800f3be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f3c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f3c6:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800f3ca:	edd7 7a02 	vldr	s15, [r7, #8]
 800f3ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f3d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3d6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800f3da:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f3de:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f3e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f3e6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800f3ea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f3ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f3f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f3f6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800f3fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f3fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f402:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f406:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800f40a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f40e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f412:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f416:	eeb0 0a67 	vmov.f32	s0, s15
 800f41a:	69f8      	ldr	r0, [r7, #28]
 800f41c:	f000 f926 	bl	800f66c <_ZN2FC10ModuleAHRS7invSqrtEf>
 800f420:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	s0 *= recipNorm;
 800f424:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f428:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800f42c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f430:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s1 *= recipNorm;
 800f434:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800f438:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800f43c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f440:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s2 *= recipNorm;
 800f444:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f448:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800f44c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f450:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s3 *= recipNorm;
 800f454:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f458:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800f45c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f460:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	// Apply feedback step
	qDot1 -= beta * s0;
 800f464:	69fb      	ldr	r3, [r7, #28]
 800f466:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800f46a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f46e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f472:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800f476:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f47a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot2 -= beta * s1;
 800f47e:	69fb      	ldr	r3, [r7, #28]
 800f480:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800f484:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f48c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800f490:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f494:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	qDot3 -= beta * s2;
 800f498:	69fb      	ldr	r3, [r7, #28]
 800f49a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800f49e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f4a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4a6:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800f4aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f4ae:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot4 -= beta * s3;
 800f4b2:	69fb      	ldr	r3, [r7, #28]
 800f4b4:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800f4b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f4bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4c0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800f4c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f4c8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	float dt = (microsecond() - this->lastUpdate)/1000000.0;			/*[second]*/
 800f4cc:	f7fe fc0e 	bl	800dcec <_ZL11microsecondv>
 800f4d0:	460a      	mov	r2, r1
 800f4d2:	4601      	mov	r1, r0
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	e9d3 bc22 	ldrd	fp, ip, [r3, #136]	; 0x88
 800f4da:	460b      	mov	r3, r1
 800f4dc:	4614      	mov	r4, r2
 800f4de:	ebb3 030b 	subs.w	r3, r3, fp
 800f4e2:	eb64 040c 	sbc.w	r4, r4, ip
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	4621      	mov	r1, r4
 800f4ea:	f7f1 f857 	bl	800059c <__aeabi_ul2d>
 800f4ee:	a35b      	add	r3, pc, #364	; (adr r3, 800f65c <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x684>)
 800f4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f4:	f7f1 f9b2 	bl	800085c <__aeabi_ddiv>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	460c      	mov	r4, r1
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	4621      	mov	r1, r4
 800f500:	f7f1 fb7a 	bl	8000bf8 <__aeabi_d2f>
 800f504:	4603      	mov	r3, r0
 800f506:	627b      	str	r3, [r7, #36]	; 0x24
	if(dt > 0.01) dt = 0.01;
 800f508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f50a:	4618      	mov	r0, r3
 800f50c:	f7f1 f824 	bl	8000558 <__aeabi_f2d>
 800f510:	a354      	add	r3, pc, #336	; (adr r3, 800f664 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x68c>)
 800f512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f516:	f7f1 fb07 	bl	8000b28 <__aeabi_dcmpgt>
 800f51a:	4603      	mov	r3, r0
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d001      	beq.n	800f524 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x54c>
 800f520:	4b4d      	ldr	r3, [pc, #308]	; (800f658 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x680>)
 800f522:	627b      	str	r3, [r7, #36]	; 0x24
	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 800f524:	69fb      	ldr	r3, [r7, #28]
 800f526:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800f52a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800f52e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800f532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f53a:	69fb      	ldr	r3, [r7, #28]
 800f53c:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 += qDot2 * (dt);
 800f540:	69fb      	ldr	r3, [r7, #28]
 800f542:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800f546:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800f54a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800f54e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f552:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f556:	69fb      	ldr	r3, [r7, #28]
 800f558:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 += qDot3 * (dt);
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800f562:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800f566:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800f56a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f56e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 += qDot4 * (dt);
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800f57e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800f582:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800f586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f58a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f58e:	69fb      	ldr	r3, [r7, #28]
 800f590:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800f594:	69fb      	ldr	r3, [r7, #28]
 800f596:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800f59a:	69fb      	ldr	r3, [r7, #28]
 800f59c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800f5a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f5a4:	69fb      	ldr	r3, [r7, #28]
 800f5a6:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800f5aa:	69fb      	ldr	r3, [r7, #28]
 800f5ac:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800f5b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f5b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f5b8:	69fb      	ldr	r3, [r7, #28]
 800f5ba:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800f5be:	69fb      	ldr	r3, [r7, #28]
 800f5c0:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800f5c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f5c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800f5d2:	69fb      	ldr	r3, [r7, #28]
 800f5d4:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800f5d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f5dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5e0:	eeb0 0a67 	vmov.f32	s0, s15
 800f5e4:	69f8      	ldr	r0, [r7, #28]
 800f5e6:	f000 f841 	bl	800f66c <_ZN2FC10ModuleAHRS7invSqrtEf>
 800f5ea:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	q0 *= recipNorm;
 800f5ee:	69fb      	ldr	r3, [r7, #28]
 800f5f0:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800f5f4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800f5f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5fc:	69fb      	ldr	r3, [r7, #28]
 800f5fe:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 *= recipNorm;
 800f602:	69fb      	ldr	r3, [r7, #28]
 800f604:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800f608:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800f60c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f610:	69fb      	ldr	r3, [r7, #28]
 800f612:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 *= recipNorm;
 800f616:	69fb      	ldr	r3, [r7, #28]
 800f618:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800f61c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800f620:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f624:	69fb      	ldr	r3, [r7, #28]
 800f626:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 *= recipNorm;
 800f62a:	69fb      	ldr	r3, [r7, #28]
 800f62c:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800f630:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800f634:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f638:	69fb      	ldr	r3, [r7, #28]
 800f63a:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	lastUpdate = microsecond();
 800f63e:	f7fe fb55 	bl	800dcec <_ZL11microsecondv>
 800f642:	4603      	mov	r3, r0
 800f644:	460c      	mov	r4, r1
 800f646:	69fa      	ldr	r2, [r7, #28]
 800f648:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
}
 800f64c:	bf00      	nop
 800f64e:	3780      	adds	r7, #128	; 0x80
 800f650:	46bd      	mov	sp, r7
 800f652:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800f656:	bf00      	nop
 800f658:	3c23d70a 	.word	0x3c23d70a
 800f65c:	00000000 	.word	0x00000000
 800f660:	412e8480 	.word	0x412e8480
 800f664:	47ae147b 	.word	0x47ae147b
 800f668:	3f847ae1 	.word	0x3f847ae1

0800f66c <_ZN2FC10ModuleAHRS7invSqrtEf>:

float ModuleAHRS::invSqrt(float x){
 800f66c:	b480      	push	{r7}
 800f66e:	b087      	sub	sp, #28
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	ed87 0a00 	vstr	s0, [r7]
	float halfx = 0.5f * x;
 800f678:	edd7 7a00 	vldr	s15, [r7]
 800f67c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f680:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f684:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800f68c:	f107 0310 	add.w	r3, r7, #16
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	105a      	asrs	r2, r3, #1
 800f698:	4b12      	ldr	r3, [pc, #72]	; (800f6e4 <_ZN2FC10ModuleAHRS7invSqrtEf+0x78>)
 800f69a:	1a9b      	subs	r3, r3, r2
 800f69c:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800f69e:	f107 030c 	add.w	r3, r7, #12
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800f6a6:	ed97 7a04 	vldr	s14, [r7, #16]
 800f6aa:	edd7 7a05 	vldr	s15, [r7, #20]
 800f6ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f6b2:	edd7 7a04 	vldr	s15, [r7, #16]
 800f6b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6ba:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800f6be:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f6c2:	edd7 7a04 	vldr	s15, [r7, #16]
 800f6c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6ca:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800f6ce:	693b      	ldr	r3, [r7, #16]
 800f6d0:	ee07 3a90 	vmov	s15, r3
}
 800f6d4:	eeb0 0a67 	vmov.f32	s0, s15
 800f6d8:	371c      	adds	r7, #28
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e0:	4770      	bx	lr
 800f6e2:	bf00      	nop
 800f6e4:	5f3759df 	.word	0x5f3759df

0800f6e8 <_ZN6matrix6MatrixIfLj4ELj1EEC1Ev>:
                _data[i][j] = Type{};
            }
        }
    }
#else
    Matrix() = default;
 800f6e8:	b480      	push	{r7}
 800f6ea:	b083      	sub	sp, #12
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	6013      	str	r3, [r2, #0]
 800f6f8:	6053      	str	r3, [r2, #4]
 800f6fa:	6093      	str	r3, [r2, #8]
 800f6fc:	60d3      	str	r3, [r2, #12]
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	4618      	mov	r0, r3
 800f702:	370c      	adds	r7, #12
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr

0800f70c <_ZN6matrix6VectorIfLj4EEC1Ev>:
class Vector : public Matrix<Type, M, 1>
{
public:
    typedef Matrix<Type, M, 1> MatrixM1;

    Vector() = default;
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b082      	sub	sp, #8
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	4618      	mov	r0, r3
 800f718:	f7ff ffe6 	bl	800f6e8 <_ZN6matrix6MatrixIfLj4ELj1EEC1Ev>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	4618      	mov	r0, r3
 800f720:	3708      	adds	r7, #8
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}

0800f726 <_ZN6matrix10QuaternionIfEC1Effff>:
     * @param a set quaternion value 0
     * @param b set quaternion value 1
     * @param c set quaternion value 2
     * @param d set quaternion value 3
     */
    Quaternion(Type a, Type b, Type c, Type d)
 800f726:	b580      	push	{r7, lr}
 800f728:	b088      	sub	sp, #32
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	6178      	str	r0, [r7, #20]
 800f72e:	ed87 0a04 	vstr	s0, [r7, #16]
 800f732:	edc7 0a03 	vstr	s1, [r7, #12]
 800f736:	ed87 1a02 	vstr	s2, [r7, #8]
 800f73a:	edc7 1a01 	vstr	s3, [r7, #4]
    {
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	4618      	mov	r0, r3
 800f742:	f7ff ffe3 	bl	800f70c <_ZN6matrix6VectorIfLj4EEC1Ev>
        Quaternion &q = *this;
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	61fb      	str	r3, [r7, #28]
        q(0) = a;
 800f74a:	69fb      	ldr	r3, [r7, #28]
 800f74c:	2100      	movs	r1, #0
 800f74e:	4618      	mov	r0, r3
 800f750:	f000 fa4a 	bl	800fbe8 <_ZN6matrix6VectorIfLj4EEclEj>
 800f754:	4602      	mov	r2, r0
 800f756:	693b      	ldr	r3, [r7, #16]
 800f758:	6013      	str	r3, [r2, #0]
        q(1) = b;
 800f75a:	69fb      	ldr	r3, [r7, #28]
 800f75c:	2101      	movs	r1, #1
 800f75e:	4618      	mov	r0, r3
 800f760:	f000 fa42 	bl	800fbe8 <_ZN6matrix6VectorIfLj4EEclEj>
 800f764:	4602      	mov	r2, r0
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	6013      	str	r3, [r2, #0]
        q(2) = c;
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	2102      	movs	r1, #2
 800f76e:	4618      	mov	r0, r3
 800f770:	f000 fa3a 	bl	800fbe8 <_ZN6matrix6VectorIfLj4EEclEj>
 800f774:	4602      	mov	r2, r0
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	6013      	str	r3, [r2, #0]
        q(3) = d;
 800f77a:	69fb      	ldr	r3, [r7, #28]
 800f77c:	2103      	movs	r1, #3
 800f77e:	4618      	mov	r0, r3
 800f780:	f000 fa32 	bl	800fbe8 <_ZN6matrix6VectorIfLj4EEclEj>
 800f784:	4602      	mov	r2, r0
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6013      	str	r3, [r2, #0]
    }
 800f78a:	697b      	ldr	r3, [r7, #20]
 800f78c:	4618      	mov	r0, r3
 800f78e:	3720      	adds	r7, #32
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <_ZN6matrix6MatrixIfLj3ELj3EEC1Ev>:
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	4618      	mov	r0, r3
 800f7a0:	2324      	movs	r3, #36	; 0x24
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	2100      	movs	r1, #0
 800f7a6:	f019 fc1a 	bl	8028fde <memset>
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3708      	adds	r7, #8
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}

0800f7b4 <_ZN6matrix12SquareMatrixIfLj3EEC1Ev>:

template <typename Type, size_t  M>
class SquareMatrix : public Matrix<Type, M, M>
{
public:
    SquareMatrix() = default;
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b082      	sub	sp, #8
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f7ff ffe8 	bl	800f794 <_ZN6matrix6MatrixIfLj3ELj3EEC1Ev>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3708      	adds	r7, #8
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}

0800f7ce <_ZN6matrix3DcmIfEC1ERKNS_10QuaternionIfEE>:
     * Instance is initialized from quaternion representing
     * coordinate transformation from frame 2 to frame 1.
     *
     * @param q quaternion to set dcm to
     */
    Dcm(const Quaternion<Type> &q)
 800f7ce:	b580      	push	{r7, lr}
 800f7d0:	ed2d 8b02 	vpush	{d8}
 800f7d4:	b092      	sub	sp, #72	; 0x48
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	6078      	str	r0, [r7, #4]
 800f7da:	6039      	str	r1, [r7, #0]
    {
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7ff ffe8 	bl	800f7b4 <_ZN6matrix12SquareMatrixIfLj3EEC1Ev>
        Dcm &dcm = *this;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	647b      	str	r3, [r7, #68]	; 0x44
        const Type a = q(0);
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	2100      	movs	r1, #0
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f000 fa1b 	bl	800fc28 <_ZNK6matrix6VectorIfLj4EEclEj>
 800f7f2:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        const Type b = q(1);
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	2101      	movs	r1, #1
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f000 fa14 	bl	800fc28 <_ZNK6matrix6VectorIfLj4EEclEj>
 800f800:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        const Type c = q(2);
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	2102      	movs	r1, #2
 800f808:	4618      	mov	r0, r3
 800f80a:	f000 fa0d 	bl	800fc28 <_ZNK6matrix6VectorIfLj4EEclEj>
 800f80e:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
        const Type d = q(3);
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	2103      	movs	r1, #3
 800f816:	4618      	mov	r0, r3
 800f818:	f000 fa06 	bl	800fc28 <_ZNK6matrix6VectorIfLj4EEclEj>
 800f81c:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
        const Type aa = a * a;
 800f820:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800f824:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800f828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f82c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        const Type ab = a * b;
 800f830:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800f834:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800f838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f83c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        const Type ac = a * c;
 800f840:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800f844:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f84c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        const Type ad = a * d;
 800f850:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800f854:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f85c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        const Type bb = b * b;
 800f860:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f864:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800f868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f86c:	edc7 7a08 	vstr	s15, [r7, #32]
        const Type bc = b * c;
 800f870:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f874:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f87c:	edc7 7a07 	vstr	s15, [r7, #28]
        const Type bd = b * d;
 800f880:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f884:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f88c:	edc7 7a06 	vstr	s15, [r7, #24]
        const Type cc = c * c;
 800f890:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800f894:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f89c:	edc7 7a05 	vstr	s15, [r7, #20]
        const Type cd = c * d;
 800f8a0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800f8a4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f8a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8ac:	edc7 7a04 	vstr	s15, [r7, #16]
        const Type dd = d * d;
 800f8b0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f8b4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f8b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8bc:	edc7 7a03 	vstr	s15, [r7, #12]
        dcm(0, 0) = aa + bb - cc - dd;
 800f8c0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800f8c4:	edd7 7a08 	vldr	s15, [r7, #32]
 800f8c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f8cc:	edd7 7a05 	vldr	s15, [r7, #20]
 800f8d0:	ee37 8a67 	vsub.f32	s16, s14, s15
 800f8d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	2100      	movs	r1, #0
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f000 f9c6 	bl	800fc6c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	edd7 7a03 	vldr	s15, [r7, #12]
 800f8e6:	ee78 7a67 	vsub.f32	s15, s16, s15
 800f8ea:	edc3 7a00 	vstr	s15, [r3]
        dcm(0, 1) = Type(2) * (bc - ad);
 800f8ee:	ed97 7a07 	vldr	s14, [r7, #28]
 800f8f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f8f6:	ee37 8a67 	vsub.f32	s16, s14, s15
 800f8fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	2100      	movs	r1, #0
 800f900:	4618      	mov	r0, r3
 800f902:	f000 f9b3 	bl	800fc6c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800f906:	4603      	mov	r3, r0
 800f908:	ee78 7a08 	vadd.f32	s15, s16, s16
 800f90c:	edc3 7a00 	vstr	s15, [r3]
        dcm(0, 2) = Type(2) * (ac + bd);
 800f910:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f914:	edd7 7a06 	vldr	s15, [r7, #24]
 800f918:	ee37 8a27 	vadd.f32	s16, s14, s15
 800f91c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f91e:	2202      	movs	r2, #2
 800f920:	2100      	movs	r1, #0
 800f922:	4618      	mov	r0, r3
 800f924:	f000 f9a2 	bl	800fc6c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800f928:	4603      	mov	r3, r0
 800f92a:	ee78 7a08 	vadd.f32	s15, s16, s16
 800f92e:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 0) = Type(2) * (bc + ad);
 800f932:	ed97 7a07 	vldr	s14, [r7, #28]
 800f936:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f93a:	ee37 8a27 	vadd.f32	s16, s14, s15
 800f93e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f940:	2200      	movs	r2, #0
 800f942:	2101      	movs	r1, #1
 800f944:	4618      	mov	r0, r3
 800f946:	f000 f991 	bl	800fc6c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800f94a:	4603      	mov	r3, r0
 800f94c:	ee78 7a08 	vadd.f32	s15, s16, s16
 800f950:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 1) = aa - bb + cc - dd;
 800f954:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800f958:	edd7 7a08 	vldr	s15, [r7, #32]
 800f95c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f960:	edd7 7a05 	vldr	s15, [r7, #20]
 800f964:	ee37 8a27 	vadd.f32	s16, s14, s15
 800f968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f96a:	2201      	movs	r2, #1
 800f96c:	2101      	movs	r1, #1
 800f96e:	4618      	mov	r0, r3
 800f970:	f000 f97c 	bl	800fc6c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800f974:	4603      	mov	r3, r0
 800f976:	edd7 7a03 	vldr	s15, [r7, #12]
 800f97a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800f97e:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 2) = Type(2) * (cd - ab);
 800f982:	ed97 7a04 	vldr	s14, [r7, #16]
 800f986:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f98a:	ee37 8a67 	vsub.f32	s16, s14, s15
 800f98e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f990:	2202      	movs	r2, #2
 800f992:	2101      	movs	r1, #1
 800f994:	4618      	mov	r0, r3
 800f996:	f000 f969 	bl	800fc6c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800f99a:	4603      	mov	r3, r0
 800f99c:	ee78 7a08 	vadd.f32	s15, s16, s16
 800f9a0:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 0) = Type(2) * (bd - ac);
 800f9a4:	ed97 7a06 	vldr	s14, [r7, #24]
 800f9a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f9ac:	ee37 8a67 	vsub.f32	s16, s14, s15
 800f9b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	2102      	movs	r1, #2
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f000 f958 	bl	800fc6c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	ee78 7a08 	vadd.f32	s15, s16, s16
 800f9c2:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 1) = Type(2) * (ab + cd);
 800f9c6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f9ca:	edd7 7a04 	vldr	s15, [r7, #16]
 800f9ce:	ee37 8a27 	vadd.f32	s16, s14, s15
 800f9d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9d4:	2201      	movs	r2, #1
 800f9d6:	2102      	movs	r1, #2
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f000 f947 	bl	800fc6c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	ee78 7a08 	vadd.f32	s15, s16, s16
 800f9e4:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 2) = aa - bb - cc + dd;
 800f9e8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800f9ec:	edd7 7a08 	vldr	s15, [r7, #32]
 800f9f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f9f4:	edd7 7a05 	vldr	s15, [r7, #20]
 800f9f8:	ee37 8a67 	vsub.f32	s16, s14, s15
 800f9fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9fe:	2202      	movs	r2, #2
 800fa00:	2102      	movs	r1, #2
 800fa02:	4618      	mov	r0, r3
 800fa04:	f000 f932 	bl	800fc6c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	edd7 7a03 	vldr	s15, [r7, #12]
 800fa0e:	ee78 7a27 	vadd.f32	s15, s16, s15
 800fa12:	edc3 7a00 	vstr	s15, [r3]
    }
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3748      	adds	r7, #72	; 0x48
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	ecbd 8b02 	vpop	{d8}
 800fa22:	bd80      	pop	{r7, pc}

0800fa24 <_ZN6matrix6MatrixIfLj3ELj1EEC1Ev>:
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	461a      	mov	r2, r3
 800fa30:	2300      	movs	r3, #0
 800fa32:	6013      	str	r3, [r2, #0]
 800fa34:	6053      	str	r3, [r2, #4]
 800fa36:	6093      	str	r3, [r2, #8]
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	370c      	adds	r7, #12
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa44:	4770      	bx	lr

0800fa46 <_ZN6matrix6VectorIfLj3EEC1Ev>:
 800fa46:	b580      	push	{r7, lr}
 800fa48:	b082      	sub	sp, #8
 800fa4a:	af00      	add	r7, sp, #0
 800fa4c:	6078      	str	r0, [r7, #4]
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	4618      	mov	r0, r3
 800fa52:	f7ff ffe7 	bl	800fa24 <_ZN6matrix6MatrixIfLj3ELj1EEC1Ev>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3708      	adds	r7, #8
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}

0800fa60 <_ZN6matrix7Vector3IfEC1Efff>:
    explicit Vector3(const Type data_[3]) :
        Vector<Type, 3>(data_)
    {
    }

    Vector3(Type x, Type y, Type z) {
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b086      	sub	sp, #24
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	60f8      	str	r0, [r7, #12]
 800fa68:	ed87 0a02 	vstr	s0, [r7, #8]
 800fa6c:	edc7 0a01 	vstr	s1, [r7, #4]
 800fa70:	ed87 1a00 	vstr	s2, [r7]
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7ff ffe5 	bl	800fa46 <_ZN6matrix6VectorIfLj3EEC1Ev>
        Vector3 &v(*this);
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	617b      	str	r3, [r7, #20]
        v(0) = x;
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	2100      	movs	r1, #0
 800fa84:	4618      	mov	r0, r3
 800fa86:	f000 f88f 	bl	800fba8 <_ZN6matrix6VectorIfLj3EEclEj>
 800fa8a:	4602      	mov	r2, r0
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	6013      	str	r3, [r2, #0]
        v(1) = y;
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	2101      	movs	r1, #1
 800fa94:	4618      	mov	r0, r3
 800fa96:	f000 f887 	bl	800fba8 <_ZN6matrix6VectorIfLj3EEclEj>
 800fa9a:	4602      	mov	r2, r0
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6013      	str	r3, [r2, #0]
        v(2) = z;
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	2102      	movs	r1, #2
 800faa4:	4618      	mov	r0, r3
 800faa6:	f000 f87f 	bl	800fba8 <_ZN6matrix6VectorIfLj3EEclEj>
 800faaa:	4602      	mov	r2, r0
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	6013      	str	r3, [r2, #0]
    }
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	4618      	mov	r0, r3
 800fab4:	3718      	adds	r7, #24
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}

0800faba <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_>:
    // this might use a lot of programming memory
    // since it instantiates a class for every
    // required mult pair, but it provides
    // compile time size_t checking
    template<size_t P>
    Matrix<Type, M, P> operator*(const Matrix<Type, N, P> &other) const
 800faba:	b580      	push	{r7, lr}
 800fabc:	ed2d 8b02 	vpush	{d8}
 800fac0:	b088      	sub	sp, #32
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	60f8      	str	r0, [r7, #12]
 800fac6:	60b9      	str	r1, [r7, #8]
 800fac8:	607a      	str	r2, [r7, #4]
    {
        const Matrix<Type, M, N> &self = *this;
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	613b      	str	r3, [r7, #16]
        Matrix<Type, M, P> res;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	461a      	mov	r2, r3
 800fad2:	2300      	movs	r3, #0
 800fad4:	6013      	str	r3, [r2, #0]
 800fad6:	6053      	str	r3, [r2, #4]
 800fad8:	6093      	str	r3, [r2, #8]
        res.setZero();
 800fada:	68f8      	ldr	r0, [r7, #12]
 800fadc:	f000 f8f4 	bl	800fcc8 <_ZN6matrix6MatrixIfLj3ELj1EE7setZeroEv>

        for (size_t i = 0; i < M; i++) {
 800fae0:	2300      	movs	r3, #0
 800fae2:	61fb      	str	r3, [r7, #28]
 800fae4:	69fb      	ldr	r3, [r7, #28]
 800fae6:	2b02      	cmp	r3, #2
 800fae8:	d831      	bhi.n	800fb4e <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x94>
            for (size_t k = 0; k < P; k++) {
 800faea:	2300      	movs	r3, #0
 800faec:	61bb      	str	r3, [r7, #24]
 800faee:	69bb      	ldr	r3, [r7, #24]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d128      	bne.n	800fb46 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x8c>
                for (size_t j = 0; j < N; j++) {
 800faf4:	2300      	movs	r3, #0
 800faf6:	617b      	str	r3, [r7, #20]
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	2b02      	cmp	r3, #2
 800fafc:	d81f      	bhi.n	800fb3e <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x84>
                    res(i, k) += self(i, j) * other(j, k);
 800fafe:	697a      	ldr	r2, [r7, #20]
 800fb00:	69f9      	ldr	r1, [r7, #28]
 800fb02:	6938      	ldr	r0, [r7, #16]
 800fb04:	f000 f918 	bl	800fd38 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj>
 800fb08:	eeb0 8a40 	vmov.f32	s16, s0
 800fb0c:	69ba      	ldr	r2, [r7, #24]
 800fb0e:	6979      	ldr	r1, [r7, #20]
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f000 f943 	bl	800fd9c <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj>
 800fb16:	eef0 7a40 	vmov.f32	s15, s0
 800fb1a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800fb1e:	69ba      	ldr	r2, [r7, #24]
 800fb20:	69f9      	ldr	r1, [r7, #28]
 800fb22:	68f8      	ldr	r0, [r7, #12]
 800fb24:	f000 f8de 	bl	800fce4 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	edd3 7a00 	vldr	s15, [r3]
 800fb2e:	ee78 7a27 	vadd.f32	s15, s16, s15
 800fb32:	edc3 7a00 	vstr	s15, [r3]
                for (size_t j = 0; j < N; j++) {
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	3301      	adds	r3, #1
 800fb3a:	617b      	str	r3, [r7, #20]
 800fb3c:	e7dc      	b.n	800faf8 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x3e>
            for (size_t k = 0; k < P; k++) {
 800fb3e:	69bb      	ldr	r3, [r7, #24]
 800fb40:	3301      	adds	r3, #1
 800fb42:	61bb      	str	r3, [r7, #24]
 800fb44:	e7d3      	b.n	800faee <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x34>
        for (size_t i = 0; i < M; i++) {
 800fb46:	69fb      	ldr	r3, [r7, #28]
 800fb48:	3301      	adds	r3, #1
 800fb4a:	61fb      	str	r3, [r7, #28]
 800fb4c:	e7ca      	b.n	800fae4 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x2a>
                }
            }
        }

        return res;
 800fb4e:	bf00      	nop
    }
 800fb50:	68f8      	ldr	r0, [r7, #12]
 800fb52:	3720      	adds	r7, #32
 800fb54:	46bd      	mov	sp, r7
 800fb56:	ecbd 8b02 	vpop	{d8}
 800fb5a:	bd80      	pop	{r7, pc}

0800fb5c <_ZN6matrix7Vector3IfEC1ERKNS_6MatrixIfLj3ELj1EEE>:
    Vector3(const Matrix31 & other) :
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
 800fb64:	6039      	str	r1, [r7, #0]
        Vector<Type, 3>(other)
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6839      	ldr	r1, [r7, #0]
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f000 f944 	bl	800fdf8 <_ZN6matrix6VectorIfLj3EEC1ERKNS_6MatrixIfLj3ELj1EEE>
    }
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	4618      	mov	r0, r3
 800fb74:	3708      	adds	r7, #8
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}

0800fb7a <_ZN6matrix6MatrixIfLj3ELj1EEC1ERKS1_>:
    Matrix(const Matrix &other)
 800fb7a:	b580      	push	{r7, lr}
 800fb7c:	b082      	sub	sp, #8
 800fb7e:	af00      	add	r7, sp, #0
 800fb80:	6078      	str	r0, [r7, #4]
 800fb82:	6039      	str	r1, [r7, #0]
    {
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	461a      	mov	r2, r3
 800fb88:	2300      	movs	r3, #0
 800fb8a:	6013      	str	r3, [r2, #0]
 800fb8c:	6053      	str	r3, [r2, #4]
 800fb8e:	6093      	str	r3, [r2, #8]
        memcpy(_data, other._data, sizeof(_data));
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6839      	ldr	r1, [r7, #0]
 800fb94:	220c      	movs	r2, #12
 800fb96:	4618      	mov	r0, r3
 800fb98:	f019 fa16 	bl	8028fc8 <memcpy>
    }
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3708      	adds	r7, #8
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}
	...

0800fba8 <_ZN6matrix6VectorIfLj3EEclEj>:

        const MatrixM1 &v = *this;
        return v(i, 0);
    }

    inline Type &operator()(size_t i)
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b084      	sub	sp, #16
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	6039      	str	r1, [r7, #0]
    {
        assert(i >= 0);
        assert(i < M);
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	2b02      	cmp	r3, #2
 800fbb6:	d905      	bls.n	800fbc4 <_ZN6matrix6VectorIfLj3EEclEj+0x1c>
 800fbb8:	4b08      	ldr	r3, [pc, #32]	; (800fbdc <_ZN6matrix6VectorIfLj3EEclEj+0x34>)
 800fbba:	4a09      	ldr	r2, [pc, #36]	; (800fbe0 <_ZN6matrix6VectorIfLj3EEclEj+0x38>)
 800fbbc:	2137      	movs	r1, #55	; 0x37
 800fbbe:	4809      	ldr	r0, [pc, #36]	; (800fbe4 <_ZN6matrix6VectorIfLj3EEclEj+0x3c>)
 800fbc0:	f019 f9a8 	bl	8028f14 <__assert_func>

        MatrixM1 &v = *this;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 800fbc8:	2200      	movs	r2, #0
 800fbca:	6839      	ldr	r1, [r7, #0]
 800fbcc:	68f8      	ldr	r0, [r7, #12]
 800fbce:	f000 f889 	bl	800fce4 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>
 800fbd2:	4603      	mov	r3, r0
    }
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3710      	adds	r7, #16
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}
 800fbdc:	0802d6a0 	.word	0x0802d6a0
 800fbe0:	0802e0c4 	.word	0x0802e0c4
 800fbe4:	0802d6a8 	.word	0x0802d6a8

0800fbe8 <_ZN6matrix6VectorIfLj4EEclEj>:
    inline Type &operator()(size_t i)
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b084      	sub	sp, #16
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	6039      	str	r1, [r7, #0]
        assert(i < M);
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	2b03      	cmp	r3, #3
 800fbf6:	d905      	bls.n	800fc04 <_ZN6matrix6VectorIfLj4EEclEj+0x1c>
 800fbf8:	4b08      	ldr	r3, [pc, #32]	; (800fc1c <_ZN6matrix6VectorIfLj4EEclEj+0x34>)
 800fbfa:	4a09      	ldr	r2, [pc, #36]	; (800fc20 <_ZN6matrix6VectorIfLj4EEclEj+0x38>)
 800fbfc:	2137      	movs	r1, #55	; 0x37
 800fbfe:	4809      	ldr	r0, [pc, #36]	; (800fc24 <_ZN6matrix6VectorIfLj4EEclEj+0x3c>)
 800fc00:	f019 f988 	bl	8028f14 <__assert_func>
        MatrixM1 &v = *this;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 800fc08:	2200      	movs	r2, #0
 800fc0a:	6839      	ldr	r1, [r7, #0]
 800fc0c:	68f8      	ldr	r0, [r7, #12]
 800fc0e:	f000 f903 	bl	800fe18 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj>
 800fc12:	4603      	mov	r3, r0
    }
 800fc14:	4618      	mov	r0, r3
 800fc16:	3710      	adds	r7, #16
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}
 800fc1c:	0802d6a0 	.word	0x0802d6a0
 800fc20:	0802dc60 	.word	0x0802dc60
 800fc24:	0802d6a8 	.word	0x0802d6a8

0800fc28 <_ZNK6matrix6VectorIfLj4EEclEj>:
    inline Type operator()(size_t i) const
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b084      	sub	sp, #16
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	6039      	str	r1, [r7, #0]
        assert(i < M);
 800fc32:	683b      	ldr	r3, [r7, #0]
 800fc34:	2b03      	cmp	r3, #3
 800fc36:	d905      	bls.n	800fc44 <_ZNK6matrix6VectorIfLj4EEclEj+0x1c>
 800fc38:	4b09      	ldr	r3, [pc, #36]	; (800fc60 <_ZNK6matrix6VectorIfLj4EEclEj+0x38>)
 800fc3a:	4a0a      	ldr	r2, [pc, #40]	; (800fc64 <_ZNK6matrix6VectorIfLj4EEclEj+0x3c>)
 800fc3c:	212e      	movs	r1, #46	; 0x2e
 800fc3e:	480a      	ldr	r0, [pc, #40]	; (800fc68 <_ZNK6matrix6VectorIfLj4EEclEj+0x40>)
 800fc40:	f019 f968 	bl	8028f14 <__assert_func>
        const MatrixM1 &v = *this;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 800fc48:	2200      	movs	r2, #0
 800fc4a:	6839      	ldr	r1, [r7, #0]
 800fc4c:	68f8      	ldr	r0, [r7, #12]
 800fc4e:	f000 f90d 	bl	800fe6c <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>
 800fc52:	eef0 7a40 	vmov.f32	s15, s0
    }
 800fc56:	eeb0 0a67 	vmov.f32	s0, s15
 800fc5a:	3710      	adds	r7, #16
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}
 800fc60:	0802d6a0 	.word	0x0802d6a0
 800fc64:	0802dd64 	.word	0x0802dd64
 800fc68:	0802d6a8 	.word	0x0802d6a8

0800fc6c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b084      	sub	sp, #16
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	60f8      	str	r0, [r7, #12]
 800fc74:	60b9      	str	r1, [r7, #8]
 800fc76:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	2b02      	cmp	r3, #2
 800fc7c:	d905      	bls.n	800fc8a <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x1e>
 800fc7e:	4b0e      	ldr	r3, [pc, #56]	; (800fcb8 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x4c>)
 800fc80:	4a0e      	ldr	r2, [pc, #56]	; (800fcbc <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x50>)
 800fc82:	216e      	movs	r1, #110	; 0x6e
 800fc84:	480e      	ldr	r0, [pc, #56]	; (800fcc0 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 800fc86:	f019 f945 	bl	8028f14 <__assert_func>
        assert(j < N);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2b02      	cmp	r3, #2
 800fc8e:	d905      	bls.n	800fc9c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x30>
 800fc90:	4b0c      	ldr	r3, [pc, #48]	; (800fcc4 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 800fc92:	4a0a      	ldr	r2, [pc, #40]	; (800fcbc <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x50>)
 800fc94:	2170      	movs	r1, #112	; 0x70
 800fc96:	480a      	ldr	r0, [pc, #40]	; (800fcc0 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 800fc98:	f019 f93c 	bl	8028f14 <__assert_func>
        return _data[i][j];
 800fc9c:	68ba      	ldr	r2, [r7, #8]
 800fc9e:	4613      	mov	r3, r2
 800fca0:	005b      	lsls	r3, r3, #1
 800fca2:	4413      	add	r3, r2
 800fca4:	687a      	ldr	r2, [r7, #4]
 800fca6:	4413      	add	r3, r2
 800fca8:	009b      	lsls	r3, r3, #2
 800fcaa:	68fa      	ldr	r2, [r7, #12]
 800fcac:	4413      	add	r3, r2
    }
 800fcae:	4618      	mov	r0, r3
 800fcb0:	3710      	adds	r7, #16
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
 800fcb6:	bf00      	nop
 800fcb8:	0802d6a0 	.word	0x0802d6a0
 800fcbc:	0802de74 	.word	0x0802de74
 800fcc0:	0802d6d8 	.word	0x0802d6d8
 800fcc4:	0802d708 	.word	0x0802d708

0800fcc8 <_ZN6matrix6MatrixIfLj3ELj1EE7setZeroEv>:
    void setCol(size_t j, Type val)
    {
        slice<M,1>(0,j) = val;
    }

    void setZero()
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
    {
        memset(_data, 0, sizeof(_data));
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	220c      	movs	r2, #12
 800fcd4:	2100      	movs	r1, #0
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f019 f981 	bl	8028fde <memset>
    }
 800fcdc:	bf00      	nop
 800fcde:	3708      	adds	r7, #8
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}

0800fce4 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b084      	sub	sp, #16
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	60f8      	str	r0, [r7, #12]
 800fcec:	60b9      	str	r1, [r7, #8]
 800fcee:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	2b02      	cmp	r3, #2
 800fcf4:	d905      	bls.n	800fd02 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x1e>
 800fcf6:	4b0c      	ldr	r3, [pc, #48]	; (800fd28 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x44>)
 800fcf8:	4a0c      	ldr	r2, [pc, #48]	; (800fd2c <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x48>)
 800fcfa:	216e      	movs	r1, #110	; 0x6e
 800fcfc:	480c      	ldr	r0, [pc, #48]	; (800fd30 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 800fcfe:	f019 f909 	bl	8028f14 <__assert_func>
        assert(j < N);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d005      	beq.n	800fd14 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x30>
 800fd08:	4b0a      	ldr	r3, [pc, #40]	; (800fd34 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 800fd0a:	4a08      	ldr	r2, [pc, #32]	; (800fd2c <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x48>)
 800fd0c:	2170      	movs	r1, #112	; 0x70
 800fd0e:	4808      	ldr	r0, [pc, #32]	; (800fd30 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 800fd10:	f019 f900 	bl	8028f14 <__assert_func>
        return _data[i][j];
 800fd14:	68ba      	ldr	r2, [r7, #8]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	4413      	add	r3, r2
 800fd1a:	009b      	lsls	r3, r3, #2
 800fd1c:	68fa      	ldr	r2, [r7, #12]
 800fd1e:	4413      	add	r3, r2
    }
 800fd20:	4618      	mov	r0, r3
 800fd22:	3710      	adds	r7, #16
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	0802d6a0 	.word	0x0802d6a0
 800fd2c:	0802e034 	.word	0x0802e034
 800fd30:	0802d6d8 	.word	0x0802d6d8
 800fd34:	0802d708 	.word	0x0802d708

0800fd38 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b084      	sub	sp, #16
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	60f8      	str	r0, [r7, #12]
 800fd40:	60b9      	str	r1, [r7, #8]
 800fd42:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	2b02      	cmp	r3, #2
 800fd48:	d905      	bls.n	800fd56 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x1e>
 800fd4a:	4b10      	ldr	r3, [pc, #64]	; (800fd8c <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 800fd4c:	4a10      	ldr	r2, [pc, #64]	; (800fd90 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 800fd4e:	2164      	movs	r1, #100	; 0x64
 800fd50:	4810      	ldr	r0, [pc, #64]	; (800fd94 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x5c>)
 800fd52:	f019 f8df 	bl	8028f14 <__assert_func>
        assert(j < N);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2b02      	cmp	r3, #2
 800fd5a:	d905      	bls.n	800fd68 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x30>
 800fd5c:	4b0e      	ldr	r3, [pc, #56]	; (800fd98 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x60>)
 800fd5e:	4a0c      	ldr	r2, [pc, #48]	; (800fd90 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 800fd60:	2166      	movs	r1, #102	; 0x66
 800fd62:	480c      	ldr	r0, [pc, #48]	; (800fd94 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x5c>)
 800fd64:	f019 f8d6 	bl	8028f14 <__assert_func>
        return _data[i][j];
 800fd68:	68f9      	ldr	r1, [r7, #12]
 800fd6a:	68ba      	ldr	r2, [r7, #8]
 800fd6c:	4613      	mov	r3, r2
 800fd6e:	005b      	lsls	r3, r3, #1
 800fd70:	4413      	add	r3, r2
 800fd72:	687a      	ldr	r2, [r7, #4]
 800fd74:	4413      	add	r3, r2
 800fd76:	009b      	lsls	r3, r3, #2
 800fd78:	440b      	add	r3, r1
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	ee07 3a90 	vmov	s15, r3
    }
 800fd80:	eeb0 0a67 	vmov.f32	s0, s15
 800fd84:	3710      	adds	r7, #16
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	0802d6a0 	.word	0x0802d6a0
 800fd90:	0802df04 	.word	0x0802df04
 800fd94:	0802d6d8 	.word	0x0802d6d8
 800fd98:	0802d708 	.word	0x0802d708

0800fd9c <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b084      	sub	sp, #16
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	60f8      	str	r0, [r7, #12]
 800fda4:	60b9      	str	r1, [r7, #8]
 800fda6:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	2b02      	cmp	r3, #2
 800fdac:	d905      	bls.n	800fdba <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x1e>
 800fdae:	4b0e      	ldr	r3, [pc, #56]	; (800fde8 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 800fdb0:	4a0e      	ldr	r2, [pc, #56]	; (800fdec <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 800fdb2:	2164      	movs	r1, #100	; 0x64
 800fdb4:	480e      	ldr	r0, [pc, #56]	; (800fdf0 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x54>)
 800fdb6:	f019 f8ad 	bl	8028f14 <__assert_func>
        assert(j < N);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d005      	beq.n	800fdcc <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x30>
 800fdc0:	4b0c      	ldr	r3, [pc, #48]	; (800fdf4 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x58>)
 800fdc2:	4a0a      	ldr	r2, [pc, #40]	; (800fdec <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 800fdc4:	2166      	movs	r1, #102	; 0x66
 800fdc6:	480a      	ldr	r0, [pc, #40]	; (800fdf0 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x54>)
 800fdc8:	f019 f8a4 	bl	8028f14 <__assert_func>
        return _data[i][j];
 800fdcc:	68fa      	ldr	r2, [r7, #12]
 800fdce:	68b9      	ldr	r1, [r7, #8]
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	440b      	add	r3, r1
 800fdd4:	009b      	lsls	r3, r3, #2
 800fdd6:	4413      	add	r3, r2
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	ee07 3a90 	vmov	s15, r3
    }
 800fdde:	eeb0 0a67 	vmov.f32	s0, s15
 800fde2:	3710      	adds	r7, #16
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}
 800fde8:	0802d6a0 	.word	0x0802d6a0
 800fdec:	0802df9c 	.word	0x0802df9c
 800fdf0:	0802d6d8 	.word	0x0802d6d8
 800fdf4:	0802d708 	.word	0x0802d708

0800fdf8 <_ZN6matrix6VectorIfLj3EEC1ERKNS_6MatrixIfLj3ELj1EEE>:
    Vector(const MatrixM1 & other) :
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b082      	sub	sp, #8
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
 800fe00:	6039      	str	r1, [r7, #0]
        MatrixM1(other)
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6839      	ldr	r1, [r7, #0]
 800fe06:	4618      	mov	r0, r3
 800fe08:	f7ff feb7 	bl	800fb7a <_ZN6matrix6MatrixIfLj3ELj1EEC1ERKS1_>
    }
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3708      	adds	r7, #8
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}
	...

0800fe18 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b084      	sub	sp, #16
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	60f8      	str	r0, [r7, #12]
 800fe20:	60b9      	str	r1, [r7, #8]
 800fe22:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	2b03      	cmp	r3, #3
 800fe28:	d905      	bls.n	800fe36 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x1e>
 800fe2a:	4b0c      	ldr	r3, [pc, #48]	; (800fe5c <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x44>)
 800fe2c:	4a0c      	ldr	r2, [pc, #48]	; (800fe60 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x48>)
 800fe2e:	216e      	movs	r1, #110	; 0x6e
 800fe30:	480c      	ldr	r0, [pc, #48]	; (800fe64 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 800fe32:	f019 f86f 	bl	8028f14 <__assert_func>
        assert(j < N);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d005      	beq.n	800fe48 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x30>
 800fe3c:	4b0a      	ldr	r3, [pc, #40]	; (800fe68 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 800fe3e:	4a08      	ldr	r2, [pc, #32]	; (800fe60 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x48>)
 800fe40:	2170      	movs	r1, #112	; 0x70
 800fe42:	4808      	ldr	r0, [pc, #32]	; (800fe64 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 800fe44:	f019 f866 	bl	8028f14 <__assert_func>
        return _data[i][j];
 800fe48:	68ba      	ldr	r2, [r7, #8]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	4413      	add	r3, r2
 800fe4e:	009b      	lsls	r3, r3, #2
 800fe50:	68fa      	ldr	r2, [r7, #12]
 800fe52:	4413      	add	r3, r2
    }
 800fe54:	4618      	mov	r0, r3
 800fe56:	3710      	adds	r7, #16
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}
 800fe5c:	0802d6a0 	.word	0x0802d6a0
 800fe60:	0802dcd4 	.word	0x0802dcd4
 800fe64:	0802d6d8 	.word	0x0802d6d8
 800fe68:	0802d708 	.word	0x0802d708

0800fe6c <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b084      	sub	sp, #16
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	60f8      	str	r0, [r7, #12]
 800fe74:	60b9      	str	r1, [r7, #8]
 800fe76:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	2b03      	cmp	r3, #3
 800fe7c:	d905      	bls.n	800fe8a <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x1e>
 800fe7e:	4b0e      	ldr	r3, [pc, #56]	; (800feb8 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 800fe80:	4a0e      	ldr	r2, [pc, #56]	; (800febc <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 800fe82:	2164      	movs	r1, #100	; 0x64
 800fe84:	480e      	ldr	r0, [pc, #56]	; (800fec0 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x54>)
 800fe86:	f019 f845 	bl	8028f14 <__assert_func>
        assert(j < N);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d005      	beq.n	800fe9c <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x30>
 800fe90:	4b0c      	ldr	r3, [pc, #48]	; (800fec4 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x58>)
 800fe92:	4a0a      	ldr	r2, [pc, #40]	; (800febc <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 800fe94:	2166      	movs	r1, #102	; 0x66
 800fe96:	480a      	ldr	r0, [pc, #40]	; (800fec0 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x54>)
 800fe98:	f019 f83c 	bl	8028f14 <__assert_func>
        return _data[i][j];
 800fe9c:	68fa      	ldr	r2, [r7, #12]
 800fe9e:	68b9      	ldr	r1, [r7, #8]
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	440b      	add	r3, r1
 800fea4:	009b      	lsls	r3, r3, #2
 800fea6:	4413      	add	r3, r2
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	ee07 3a90 	vmov	s15, r3
    }
 800feae:	eeb0 0a67 	vmov.f32	s0, s15
 800feb2:	3710      	adds	r7, #16
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}
 800feb8:	0802d6a0 	.word	0x0802d6a0
 800febc:	0802dddc 	.word	0x0802dddc
 800fec0:	0802d6d8 	.word	0x0802d6d8
 800fec4:	0802d708 	.word	0x0802d708

0800fec8 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>:
    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
 800fec8:	b490      	push	{r4, r7}
 800feca:	b084      	sub	sp, #16
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
 800fed2:	2300      	movs	r3, #0
 800fed4:	73fb      	strb	r3, [r7, #15]
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	e9d3 1200 	ldrd	r1, r2, [r3]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 800fee2:	42a2      	cmp	r2, r4
 800fee4:	bf08      	it	eq
 800fee6:	4299      	cmpeq	r1, r3
 800fee8:	d001      	beq.n	800feee <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE+0x26>
 800feea:	2301      	movs	r3, #1
 800feec:	73fb      	strb	r3, [r7, #15]
 800feee:	683a      	ldr	r2, [r7, #0]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	4614      	mov	r4, r2
 800fef4:	33a8      	adds	r3, #168	; 0xa8
 800fef6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fef8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fefc:	7bfb      	ldrb	r3, [r7, #15]
 800fefe:	4618      	mov	r0, r3
 800ff00:	3710      	adds	r7, #16
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bc90      	pop	{r4, r7}
 800ff06:	4770      	bx	lr

0800ff08 <_ZN2FC6MsgBus19getVehicleAttitueSPEPNS_16VehicleAttitueSPE>:
    SIMPLE_FUNC_IMPL(VehicleAttitueSP, VehicleAttitueSP, vehicleAttitudeSP)
 800ff08:	b4b0      	push	{r4, r5, r7}
 800ff0a:	b085      	sub	sp, #20
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	6039      	str	r1, [r7, #0]
 800ff12:	2300      	movs	r3, #0
 800ff14:	73fb      	strb	r3, [r7, #15]
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	e9d3 1200 	ldrd	r1, r2, [r3]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	e9d3 342e 	ldrd	r3, r4, [r3, #184]	; 0xb8
 800ff22:	42a2      	cmp	r2, r4
 800ff24:	bf08      	it	eq
 800ff26:	4299      	cmpeq	r1, r3
 800ff28:	d001      	beq.n	800ff2e <_ZN2FC6MsgBus19getVehicleAttitueSPEPNS_16VehicleAttitueSPE+0x26>
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	73fb      	strb	r3, [r7, #15]
 800ff2e:	683a      	ldr	r2, [r7, #0]
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	4615      	mov	r5, r2
 800ff34:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 800ff38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ff3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ff3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ff40:	e885 0003 	stmia.w	r5, {r0, r1}
 800ff44:	7bfb      	ldrb	r3, [r7, #15]
 800ff46:	4618      	mov	r0, r3
 800ff48:	3714      	adds	r7, #20
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bcb0      	pop	{r4, r5, r7}
 800ff4e:	4770      	bx	lr

0800ff50 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>:
    SIMPLE_FUNC_IMPL(Attitude, Attitude, attitude)
 800ff50:	b4b0      	push	{r4, r5, r7}
 800ff52:	b085      	sub	sp, #20
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	6039      	str	r1, [r7, #0]
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	73fb      	strb	r3, [r7, #15]
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	e9d3 1200 	ldrd	r1, r2, [r3]
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	e9d3 343c 	ldrd	r3, r4, [r3, #240]	; 0xf0
 800ff6a:	42a2      	cmp	r2, r4
 800ff6c:	bf08      	it	eq
 800ff6e:	4299      	cmpeq	r1, r3
 800ff70:	d001      	beq.n	800ff76 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE+0x26>
 800ff72:	2301      	movs	r3, #1
 800ff74:	73fb      	strb	r3, [r7, #15]
 800ff76:	683a      	ldr	r2, [r7, #0]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	4615      	mov	r5, r2
 800ff7c:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800ff80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ff82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ff84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ff86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ff88:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ff8c:	e885 0003 	stmia.w	r5, {r0, r1}
 800ff90:	7bfb      	ldrb	r3, [r7, #15]
 800ff92:	4618      	mov	r0, r3
 800ff94:	3714      	adds	r7, #20
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bcb0      	pop	{r4, r5, r7}
 800ff9a:	4770      	bx	lr

0800ff9c <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>:

    SIMPLE_FUNC_IMPL(LocalPosition, LocalPosition, localPosition)

    SIMPLE_FUNC_IMPL(ModeFlag, ModeFlag, modeFlag)
 800ff9c:	b490      	push	{r4, r7}
 800ff9e:	b084      	sub	sp, #16
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
 800ffa4:	6039      	str	r1, [r7, #0]
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	73fb      	strb	r3, [r7, #15]
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	e9d3 1200 	ldrd	r1, r2, [r3]
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ffb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ffba:	42a2      	cmp	r2, r4
 800ffbc:	bf08      	it	eq
 800ffbe:	4299      	cmpeq	r1, r3
 800ffc0:	d001      	beq.n	800ffc6 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE+0x2a>
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	73fb      	strb	r3, [r7, #15]
 800ffc6:	683a      	ldr	r2, [r7, #0]
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	4614      	mov	r4, r2
 800ffcc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ffd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ffd6:	7bfb      	ldrb	r3, [r7, #15]
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3710      	adds	r7, #16
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bc90      	pop	{r4, r7}
 800ffe0:	4770      	bx	lr

0800ffe2 <_ZN2FC6MsgBus11setMotorPWMERKNS_8MotorPWME>:

    SIMPLE_FUNC_IMPL(Health, Health, health)

    SIMPLE_FUNC_IMPL(MotorPWM, MotorPWM, motorPWM)
 800ffe2:	b4b0      	push	{r4, r5, r7}
 800ffe4:	b083      	sub	sp, #12
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	6078      	str	r0, [r7, #4]
 800ffea:	6039      	str	r1, [r7, #0]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	683a      	ldr	r2, [r7, #0]
 800fff0:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 800fff4:	4615      	mov	r5, r2
 800fff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fffa:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fffe:	e884 0003 	stmia.w	r4, {r0, r1}
 8010002:	bf00      	nop
 8010004:	370c      	adds	r7, #12
 8010006:	46bd      	mov	sp, r7
 8010008:	bcb0      	pop	{r4, r5, r7}
 801000a:	4770      	bx	lr

0801000c <_ZN23px4_AlgorithmModelClass17setExternalInputsEPKNS_31ExtU_Second_att_control_codeb_TE>:
  ~px4_AlgorithmModelClass();

  // Root-level structure-based inputs set method

  // Root inports set method
  void setExternalInputs(const ExtU_Second_att_control_codeb_T
 801000c:	b4b0      	push	{r4, r5, r7}
 801000e:	b083      	sub	sp, #12
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	6039      	str	r1, [r7, #0]
    * pExtU_Second_att_control_codeb_T)
  {
    Second_att_control_codeblock__U = *pExtU_Second_att_control_codeb_T;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	683a      	ldr	r2, [r7, #0]
 801001a:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 801001e:	4615      	mov	r5, r2
 8010020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010028:	682b      	ldr	r3, [r5, #0]
 801002a:	6023      	str	r3, [r4, #0]
  }
 801002c:	bf00      	nop
 801002e:	370c      	adds	r7, #12
 8010030:	46bd      	mov	sp, r7
 8010032:	bcb0      	pop	{r4, r5, r7}
 8010034:	4770      	bx	lr

08010036 <_ZNK23px4_AlgorithmModelClass18getExternalOutputsEv>:

  // Root-level structure-based outputs get method

  // Root outports get method
  const px4_AlgorithmModelClass::ExtY_Second_att_control_codeb_T
    & getExternalOutputs() const
 8010036:	b480      	push	{r7}
 8010038:	b083      	sub	sp, #12
 801003a:	af00      	add	r7, sp, #0
 801003c:	6078      	str	r0, [r7, #4]
  {
    return Second_att_control_codeblock__Y;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f503 7386 	add.w	r3, r3, #268	; 0x10c
  }
 8010044:	4618      	mov	r0, r3
 8010046:	370c      	adds	r7, #12
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr

08010050 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8010050:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8010054:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 8010056:	4b0e      	ldr	r3, [pc, #56]	; (8010090 <_ZL11microsecondv+0x40>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	4619      	mov	r1, r3
 801005c:	f04f 0200 	mov.w	r2, #0
 8010060:	f04f 0b00 	mov.w	fp, #0
 8010064:	f04f 0c00 	mov.w	ip, #0
 8010068:	468c      	mov	ip, r1
 801006a:	f04f 0b00 	mov.w	fp, #0
 801006e:	4a09      	ldr	r2, [pc, #36]	; (8010094 <_ZL11microsecondv+0x44>)
 8010070:	6812      	ldr	r2, [r2, #0]
 8010072:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010074:	4611      	mov	r1, r2
 8010076:	f04f 0200 	mov.w	r2, #0
 801007a:	ea4b 0301 	orr.w	r3, fp, r1
 801007e:	ea4c 0402 	orr.w	r4, ip, r2
}
 8010082:	4618      	mov	r0, r3
 8010084:	4621      	mov	r1, r4
 8010086:	46bd      	mov	sp, r7
 8010088:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 801008c:	4770      	bx	lr
 801008e:	bf00      	nop
 8010090:	20000ae4 	.word	0x20000ae4
 8010094:	20010f88 	.word	0x20010f88

08010098 <_ZN2FC24ModuleAttitudeControllerC1Ev>:
#include "Usec.h"
#include "printf.h"

namespace FC {

ModuleAttitudeController::ModuleAttitudeController(){}
 8010098:	b580      	push	{r7, lr}
 801009a:	b082      	sub	sp, #8
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7f4 fe00 	bl	8004ca8 <_ZN23px4_AlgorithmModelClassC1Ev>
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	4618      	mov	r0, r3
 80100ac:	3708      	adds	r7, #8
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}
	...

080100b4 <_ZN2FC24ModuleAttitudeController7oneStepEv>:

void ModuleAttitudeController::oneStep(){
 80100b4:	b5b0      	push	{r4, r5, r7, lr}
 80100b6:	b092      	sub	sp, #72	; 0x48
 80100b8:	af04      	add	r7, sp, #16
 80100ba:	6078      	str	r0, [r7, #4]
	msgBus.getModeFlag(&modeFlagSub);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80100c2:	4619      	mov	r1, r3
 80100c4:	4840      	ldr	r0, [pc, #256]	; (80101c8 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x114>)
 80100c6:	f7ff ff69 	bl	800ff9c <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>

	/* not armed */
	if(modeFlagSub.armMode != Command::Arm){
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80100d0:	2b07      	cmp	r3, #7
 80100d2:	d012      	beq.n	80100fa <_ZN2FC24ModuleAttitudeController7oneStepEv+0x46>
		setMotor(1000, 1000, 1000, 1000, 1000, 1000);
 80100d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80100d8:	9302      	str	r3, [sp, #8]
 80100da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80100de:	9301      	str	r3, [sp, #4]
 80100e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80100e4:	9300      	str	r3, [sp, #0]
 80100e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80100ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80100ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f000 f8ec 	bl	80102d0 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt>
 80100f8:	e062      	b.n	80101c0 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x10c>
//		armFlag = true;
//		initialize();
//	}

	/* manual control */
	if(modeFlagSub.flightMode == Command::ControlAttitude){
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8010100:	2b00      	cmp	r3, #0
 8010102:	d103      	bne.n	801010c <_ZN2FC24ModuleAttitudeController7oneStepEv+0x58>
		setFromRC();
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f000 f88b 	bl	8010220 <_ZN2FC24ModuleAttitudeController9setFromRCEv>
 801010a:	e002      	b.n	8010112 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x5e>
	}
	/* position control */
	else{
		setFromPositionController();
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f000 f85d 	bl	80101cc <_ZN2FC24ModuleAttitudeController25setFromPositionControllerEv>
	}

	ExtU_Second_att_control_codeb_T input;
	input.set_pitch = targetPitch;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8010118:	633b      	str	r3, [r7, #48]	; 0x30
	input.set_roll = targetRoll;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8010120:	62fb      	str	r3, [r7, #44]	; 0x2c
	input.set_yaw = targetYawRate;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8010128:	637b      	str	r3, [r7, #52]	; 0x34
	input.set_thrust = targetThrottle;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8010130:	62bb      	str	r3, [r7, #40]	; 0x28

	msgBus.getAttitude(&attitudeSub);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8010138:	4619      	mov	r1, r3
 801013a:	4823      	ldr	r0, [pc, #140]	; (80101c8 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x114>)
 801013c:	f7ff ff08 	bl	800ff50 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
	msgBus.getBodyAngularVelocity(&bodyAngularVelocitySub);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010146:	4619      	mov	r1, r3
 8010148:	481f      	ldr	r0, [pc, #124]	; (80101c8 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x114>)
 801014a:	f7fd fd5a 	bl	800dc02 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>

	input.Roll = attitudeSub.roll;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8010154:	617b      	str	r3, [r7, #20]
	input.Pitch = attitudeSub.pitch;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 801015c:	61bb      	str	r3, [r7, #24]
	input.p = bodyAngularVelocitySub.xyz[0];
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8010164:	61fb      	str	r3, [r7, #28]
	input.q = bodyAngularVelocitySub.xyz[1];
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801016c:	623b      	str	r3, [r7, #32]
	input.r = bodyAngularVelocitySub.xyz[2];
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8010174:	627b      	str	r3, [r7, #36]	; 0x24

	/* matlab codegen function */
	setExternalInputs(&input);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f107 0214 	add.w	r2, r7, #20
 801017c:	4611      	mov	r1, r2
 801017e:	4618      	mov	r0, r3
 8010180:	f7ff ff44 	bl	801000c <_ZN23px4_AlgorithmModelClass17setExternalInputsEPKNS_31ExtU_Second_att_control_codeb_TE>
	step();
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	4618      	mov	r0, r3
 8010188:	f7f3 fff0 	bl	800416c <_ZN23px4_AlgorithmModelClass4stepEv>
	ExtY_Second_att_control_codeb_T output = getExternalOutputs();
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	4618      	mov	r0, r3
 8010190:	f7ff ff51 	bl	8010036 <_ZNK23px4_AlgorithmModelClass18getExternalOutputsEv>
 8010194:	4602      	mov	r2, r0
 8010196:	f107 0308 	add.w	r3, r7, #8
 801019a:	6810      	ldr	r0, [r2, #0]
 801019c:	6851      	ldr	r1, [r2, #4]
 801019e:	6892      	ldr	r2, [r2, #8]
 80101a0:	c307      	stmia	r3!, {r0, r1, r2}

	/* set motor pwm */
	setMotor((uint16_t)output.PWM_OUT[0],
 80101a2:	8938      	ldrh	r0, [r7, #8]
			 (uint16_t)output.PWM_OUT[1],
 80101a4:	897c      	ldrh	r4, [r7, #10]
			 (uint16_t)output.PWM_OUT[2],
 80101a6:	89bd      	ldrh	r5, [r7, #12]
			 (uint16_t)output.PWM_OUT[3],
 80101a8:	89fb      	ldrh	r3, [r7, #14]
			 (uint16_t)output.PWM_OUT[4],
 80101aa:	8a3a      	ldrh	r2, [r7, #16]
			 (uint16_t)output.PWM_OUT[5]);
 80101ac:	8a79      	ldrh	r1, [r7, #18]
	setMotor((uint16_t)output.PWM_OUT[0],
 80101ae:	9102      	str	r1, [sp, #8]
 80101b0:	9201      	str	r2, [sp, #4]
 80101b2:	9300      	str	r3, [sp, #0]
 80101b4:	462b      	mov	r3, r5
 80101b6:	4622      	mov	r2, r4
 80101b8:	4601      	mov	r1, r0
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f000 f888 	bl	80102d0 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt>
}
 80101c0:	3738      	adds	r7, #56	; 0x38
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bdb0      	pop	{r4, r5, r7, pc}
 80101c6:	bf00      	nop
 80101c8:	20000bb8 	.word	0x20000bb8

080101cc <_ZN2FC24ModuleAttitudeController25setFromPositionControllerEv>:

void ModuleAttitudeController::setFromPositionController(){
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b082      	sub	sp, #8
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
	msgBus.getVehicleAttitueSP(&vehicleAttitudeSpSub);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80101da:	4619      	mov	r1, r3
 80101dc:	480f      	ldr	r0, [pc, #60]	; (801021c <_ZN2FC24ModuleAttitudeController25setFromPositionControllerEv+0x50>)
 80101de:	f7ff fe93 	bl	800ff08 <_ZN2FC6MsgBus19getVehicleAttitueSPEPNS_16VehicleAttitueSPE>
	targetRoll = vehicleAttitudeSpSub.roll;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	targetPitch = vehicleAttitudeSpSub.pitch;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	targetYawRate = vehicleAttitudeSpSub.yawRate;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	targetThrottle = vehicleAttitudeSpSub.throttle;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
}
 8010212:	bf00      	nop
 8010214:	3708      	adds	r7, #8
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
 801021a:	bf00      	nop
 801021c:	20000bb8 	.word	0x20000bb8

08010220 <_ZN2FC24ModuleAttitudeController9setFromRCEv>:

void ModuleAttitudeController::setFromRC(){
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
	msgBus.getController(&controllerSub);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801022e:	4619      	mov	r1, r3
 8010230:	4824      	ldr	r0, [pc, #144]	; (80102c4 <_ZN2FC24ModuleAttitudeController9setFromRCEv+0xa4>)
 8010232:	f7ff fe49 	bl	800fec8 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>
	targetRoll = (float)(controllerSub.roll - 1500)/500.0;				/* map 1000~2000 to -1 ~ 1 */
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 801023c:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8010240:	ee07 3a90 	vmov	s15, r3
 8010244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010248:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80102c8 <_ZN2FC24ModuleAttitudeController9setFromRCEv+0xa8>
 801024c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	edc3 7a6a 	vstr	s15, [r3, #424]	; 0x1a8
	targetPitch = -(float)(controllerSub.pitch - 1500)/500.0;			/* map 1000~2000 to -1 ~ 1 */
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 801025c:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8010260:	ee07 3a90 	vmov	s15, r3
 8010264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010268:	eeb1 7a67 	vneg.f32	s14, s15
 801026c:	eddf 6a16 	vldr	s13, [pc, #88]	; 80102c8 <_ZN2FC24ModuleAttitudeController9setFromRCEv+0xa8>
 8010270:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	edc3 7a6b 	vstr	s15, [r3, #428]	; 0x1ac
	targetYawRate = (float)(controllerSub.yaw - 1500)/500.0;			/* map 1000~2000 to -1 ~ 1 */
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 8010280:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8010284:	ee07 3a90 	vmov	s15, r3
 8010288:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801028c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80102c8 <_ZN2FC24ModuleAttitudeController9setFromRCEv+0xa8>
 8010290:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	edc3 7a6c 	vstr	s15, [r3, #432]	; 0x1b0
	targetThrottle = (float)(controllerSub.throttle - 1000)/1000.0;		/* map 1000~2000 to 0 ~ 1 */
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f8b3 3176 	ldrh.w	r3, [r3, #374]	; 0x176
 80102a0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80102a4:	ee07 3a90 	vmov	s15, r3
 80102a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80102ac:	eddf 6a07 	vldr	s13, [pc, #28]	; 80102cc <_ZN2FC24ModuleAttitudeController9setFromRCEv+0xac>
 80102b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
}
 80102ba:	bf00      	nop
 80102bc:	3708      	adds	r7, #8
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
 80102c2:	bf00      	nop
 80102c4:	20000bb8 	.word	0x20000bb8
 80102c8:	43fa0000 	.word	0x43fa0000
 80102cc:	447a0000 	.word	0x447a0000

080102d0 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt>:

void ModuleAttitudeController::setMotor(uint16_t pwm1, uint16_t pwm2, uint16_t pwm3, uint16_t pwm4, uint16_t pwm5, uint16_t pwm6){
 80102d0:	b590      	push	{r4, r7, lr}
 80102d2:	b085      	sub	sp, #20
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	60f8      	str	r0, [r7, #12]
 80102d8:	4608      	mov	r0, r1
 80102da:	4611      	mov	r1, r2
 80102dc:	461a      	mov	r2, r3
 80102de:	4603      	mov	r3, r0
 80102e0:	817b      	strh	r3, [r7, #10]
 80102e2:	460b      	mov	r3, r1
 80102e4:	813b      	strh	r3, [r7, #8]
 80102e6:	4613      	mov	r3, r2
 80102e8:	80fb      	strh	r3, [r7, #6]
	m1.setPWM(pwm1);
 80102ea:	897b      	ldrh	r3, [r7, #10]
 80102ec:	4619      	mov	r1, r3
 80102ee:	4824      	ldr	r0, [pc, #144]	; (8010380 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb0>)
 80102f0:	f7f0 fece 	bl	8001090 <_ZN2FC5Motor6setPWMEt>
	m2.setPWM(pwm2);
 80102f4:	893b      	ldrh	r3, [r7, #8]
 80102f6:	4619      	mov	r1, r3
 80102f8:	4822      	ldr	r0, [pc, #136]	; (8010384 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb4>)
 80102fa:	f7f0 fec9 	bl	8001090 <_ZN2FC5Motor6setPWMEt>
	m3.setPWM(pwm3);
 80102fe:	88fb      	ldrh	r3, [r7, #6]
 8010300:	4619      	mov	r1, r3
 8010302:	4821      	ldr	r0, [pc, #132]	; (8010388 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb8>)
 8010304:	f7f0 fec4 	bl	8001090 <_ZN2FC5Motor6setPWMEt>
	m4.setPWM(pwm4);
 8010308:	8c3b      	ldrh	r3, [r7, #32]
 801030a:	4619      	mov	r1, r3
 801030c:	481f      	ldr	r0, [pc, #124]	; (801038c <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xbc>)
 801030e:	f7f0 febf 	bl	8001090 <_ZN2FC5Motor6setPWMEt>
	m5.setPWM(pwm5);
 8010312:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010314:	4619      	mov	r1, r3
 8010316:	481e      	ldr	r0, [pc, #120]	; (8010390 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc0>)
 8010318:	f7f0 feba 	bl	8001090 <_ZN2FC5Motor6setPWMEt>
	m6.setPWM(pwm6);
 801031c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801031e:	4619      	mov	r1, r3
 8010320:	481c      	ldr	r0, [pc, #112]	; (8010394 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc4>)
 8010322:	f7f0 feb5 	bl	8001090 <_ZN2FC5Motor6setPWMEt>

	motorPwmSub.timestamp = microsecond();
 8010326:	f7ff fe93 	bl	8010050 <_ZL11microsecondv>
 801032a:	4603      	mov	r3, r0
 801032c:	460c      	mov	r4, r1
 801032e:	68fa      	ldr	r2, [r7, #12]
 8010330:	f502 72c8 	add.w	r2, r2, #400	; 0x190
 8010334:	e9c2 3400 	strd	r3, r4, [r2]
	motorPwmSub.m1 = pwm1;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	897a      	ldrh	r2, [r7, #10]
 801033c:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
	motorPwmSub.m2 = pwm2;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	893a      	ldrh	r2, [r7, #8]
 8010344:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
	motorPwmSub.m3 = pwm3;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	88fa      	ldrh	r2, [r7, #6]
 801034c:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	motorPwmSub.m4 = pwm4;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	8c3a      	ldrh	r2, [r7, #32]
 8010354:	f8a3 219e 	strh.w	r2, [r3, #414]	; 0x19e
	motorPwmSub.m5 = pwm5;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801035c:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
	motorPwmSub.m6 = pwm6;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010364:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2

	msgBus.setMotorPWM(motorPwmSub);
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801036e:	4619      	mov	r1, r3
 8010370:	4809      	ldr	r0, [pc, #36]	; (8010398 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc8>)
 8010372:	f7ff fe36 	bl	800ffe2 <_ZN2FC6MsgBus11setMotorPWMERKNS_8MotorPWME>
}
 8010376:	bf00      	nop
 8010378:	3714      	adds	r7, #20
 801037a:	46bd      	mov	sp, r7
 801037c:	bd90      	pop	{r4, r7, pc}
 801037e:	bf00      	nop
 8010380:	2000089c 	.word	0x2000089c
 8010384:	200008a8 	.word	0x200008a8
 8010388:	200008b4 	.word	0x200008b4
 801038c:	200008c0 	.word	0x200008c0
 8010390:	200008cc 	.word	0x200008cc
 8010394:	200008d8 	.word	0x200008d8
 8010398:	20000bb8 	.word	0x20000bb8

0801039c <_ZN2FC12ModuleBuzzer4mainEv>:
	.mq_mem = &Buzzer_QueueBuffer,
	.mq_size = sizeof(Buzzer_QueueBuffer)
};


void ModuleBuzzer::main() {
 801039c:	b580      	push	{r7, lr}
 801039e:	b08e      	sub	sp, #56	; 0x38
 80103a0:	af00      	add	r7, sp, #0
	 *  TIM4, TIM_CHANNEL_1
	 *  PCLK 100Mhz
	 *  Prescaler 0
	 *  Counter Period 10-1
	 */
	ModuleBuzzer buzzer(&htim4, TIM_CHANNEL_1, 100000000);
 80103a2:	1d38      	adds	r0, r7, #4
 80103a4:	4b12      	ldr	r3, [pc, #72]	; (80103f0 <_ZN2FC12ModuleBuzzer4mainEv+0x54>)
 80103a6:	2200      	movs	r2, #0
 80103a8:	4912      	ldr	r1, [pc, #72]	; (80103f4 <_ZN2FC12ModuleBuzzer4mainEv+0x58>)
 80103aa:	f000 f827 	bl	80103fc <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm>

	BuzzerCommand rcvResult;
	while(1){
		if(osMessageQueueGet(Buzzer_QueueHandle, (void*)&rcvResult, NULL, osWaitForever) == osOK){
 80103ae:	4b12      	ldr	r3, [pc, #72]	; (80103f8 <_ZN2FC12ModuleBuzzer4mainEv+0x5c>)
 80103b0:	6818      	ldr	r0, [r3, #0]
 80103b2:	4639      	mov	r1, r7
 80103b4:	f04f 33ff 	mov.w	r3, #4294967295
 80103b8:	2200      	movs	r2, #0
 80103ba:	f011 fd5f 	bl	8021e7c <osMessageQueueGet>
 80103be:	4603      	mov	r3, r0
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	bf0c      	ite	eq
 80103c4:	2301      	moveq	r3, #1
 80103c6:	2300      	movne	r3, #0
 80103c8:	b2db      	uxtb	r3, r3
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d006      	beq.n	80103dc <_ZN2FC12ModuleBuzzer4mainEv+0x40>
			buzzer.commandHandler(rcvResult);
 80103ce:	683a      	ldr	r2, [r7, #0]
 80103d0:	1d3b      	adds	r3, r7, #4
 80103d2:	4611      	mov	r1, r2
 80103d4:	4618      	mov	r0, r3
 80103d6:	f000 f881 	bl	80104dc <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE>
 80103da:	e004      	b.n	80103e6 <_ZN2FC12ModuleBuzzer4mainEv+0x4a>
//			osDelay(10);
		}
		else{
			osMessageQueueReset(Buzzer_QueueHandle);
 80103dc:	4b06      	ldr	r3, [pc, #24]	; (80103f8 <_ZN2FC12ModuleBuzzer4mainEv+0x5c>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	4618      	mov	r0, r3
 80103e2:	f011 fe05 	bl	8021ff0 <osMessageQueueReset>
		}
		osDelay(10);
 80103e6:	200a      	movs	r0, #10
 80103e8:	f011 fa4e 	bl	8021888 <osDelay>
		if(osMessageQueueGet(Buzzer_QueueHandle, (void*)&rcvResult, NULL, osWaitForever) == osOK){
 80103ec:	e7df      	b.n	80103ae <_ZN2FC12ModuleBuzzer4mainEv+0x12>
 80103ee:	bf00      	nop
 80103f0:	05f5e100 	.word	0x05f5e100
 80103f4:	20010e88 	.word	0x20010e88
 80103f8:	20000ae8 	.word	0x20000ae8

080103fc <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm>:
	}
}

ModuleBuzzer::ModuleBuzzer(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t CLK)
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b084      	sub	sp, #16
 8010400:	af00      	add	r7, sp, #0
 8010402:	60f8      	str	r0, [r7, #12]
 8010404:	60b9      	str	r1, [r7, #8]
 8010406:	607a      	str	r2, [r7, #4]
 8010408:	603b      	str	r3, [r7, #0]
	: A{Z1, Z2, Z5, Z6}
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	330c      	adds	r3, #12
 801040e:	2228      	movs	r2, #40	; 0x28
 8010410:	2100      	movs	r1, #0
 8010412:	4618      	mov	r0, r3
 8010414:	f018 fde3 	bl	8028fde <memset>
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	4a17      	ldr	r2, [pc, #92]	; (8010478 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x7c>)
 801041c:	60da      	str	r2, [r3, #12]
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	4a16      	ldr	r2, [pc, #88]	; (801047c <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x80>)
 8010422:	611a      	str	r2, [r3, #16]
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	4a16      	ldr	r2, [pc, #88]	; (8010480 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x84>)
 8010428:	615a      	str	r2, [r3, #20]
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	4a15      	ldr	r2, [pc, #84]	; (8010484 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x88>)
 801042e:	619a      	str	r2, [r3, #24]
{
	  /* creation of Buzzer_Queue */
	  Buzzer_QueueHandle = osMessageQueueNew (3, sizeof(BuzzerCommand), &Buzzer_Queue_attributes);
 8010430:	4a15      	ldr	r2, [pc, #84]	; (8010488 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x8c>)
 8010432:	2104      	movs	r1, #4
 8010434:	2003      	movs	r0, #3
 8010436:	f011 fc27 	bl	8021c88 <osMessageQueueNew>
 801043a:	4602      	mov	r2, r0
 801043c:	4b13      	ldr	r3, [pc, #76]	; (801048c <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x90>)
 801043e:	601a      	str	r2, [r3, #0]

	  this->htim = htim;
 8010440:	68ba      	ldr	r2, [r7, #8]
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	601a      	str	r2, [r3, #0]
	  this->Channel = Channel;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	687a      	ldr	r2, [r7, #4]
 801044a:	605a      	str	r2, [r3, #4]
	  this->CLK = CLK/10;		/* 10 : AutoReload Register+1 */
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	4a10      	ldr	r2, [pc, #64]	; (8010490 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x94>)
 8010450:	fba2 2303 	umull	r2, r3, r2, r3
 8010454:	08da      	lsrs	r2, r3, #3
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_PRESCALER(htim, this->CLK / 4000);
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	689a      	ldr	r2, [r3, #8]
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	490c      	ldr	r1, [pc, #48]	; (8010494 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x98>)
 8010464:	fba1 1202 	umull	r1, r2, r1, r2
 8010468:	0a12      	lsrs	r2, r2, #8
 801046a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	4618      	mov	r0, r3
 8010470:	3710      	adds	r7, #16
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
 8010476:	bf00      	nop
 8010478:	0003f7a0 	.word	0x0003f7a0
 801047c:	00042e50 	.word	0x00042e50
 8010480:	00045948 	.word	0x00045948
 8010484:	0005cc60 	.word	0x0005cc60
 8010488:	0802e138 	.word	0x0802e138
 801048c:	20000ae8 	.word	0x20000ae8
 8010490:	cccccccd 	.word	0xcccccccd
 8010494:	10624dd3 	.word	0x10624dd3

08010498 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>:


bool ModuleBuzzer::sendCommand(BuzzerCommand cmd){
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
	if(osMessageQueueGetSpace(Buzzer_QueueHandle) != 0){
 80104a0:	4b0d      	ldr	r3, [pc, #52]	; (80104d8 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x40>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	4618      	mov	r0, r3
 80104a6:	f011 fd5b 	bl	8021f60 <osMessageQueueGetSpace>
 80104aa:	4603      	mov	r3, r0
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	bf14      	ite	ne
 80104b0:	2301      	movne	r3, #1
 80104b2:	2300      	moveq	r3, #0
 80104b4:	b2db      	uxtb	r3, r3
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d008      	beq.n	80104cc <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x34>
		osMessageQueuePut(Buzzer_QueueHandle, (void*)&cmd, 0, 0);
 80104ba:	4b07      	ldr	r3, [pc, #28]	; (80104d8 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x40>)
 80104bc:	6818      	ldr	r0, [r3, #0]
 80104be:	1d39      	adds	r1, r7, #4
 80104c0:	2300      	movs	r3, #0
 80104c2:	2200      	movs	r2, #0
 80104c4:	f011 fc66 	bl	8021d94 <osMessageQueuePut>
		return true;
 80104c8:	2301      	movs	r3, #1
 80104ca:	e000      	b.n	80104ce <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x36>
	}
	return false;
 80104cc:	2300      	movs	r3, #0
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3708      	adds	r7, #8
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}
 80104d6:	bf00      	nop
 80104d8:	20000ae8 	.word	0x20000ae8

080104dc <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE>:

void ModuleBuzzer::commandHandler(BuzzerCommand result){
 80104dc:	b580      	push	{r7, lr}
 80104de:	b082      	sub	sp, #8
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
 80104e4:	6039      	str	r1, [r7, #0]
	switch(result){
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	2b03      	cmp	r3, #3
 80104ea:	d81b      	bhi.n	8010524 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
 80104ec:	a201      	add	r2, pc, #4	; (adr r2, 80104f4 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x18>)
 80104ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104f2:	bf00      	nop
 80104f4:	08010505 	.word	0x08010505
 80104f8:	0801050d 	.word	0x0801050d
 80104fc:	08010515 	.word	0x08010515
 8010500:	0801051d 	.word	0x0801051d
	case BuzzerCommand::Armed:
		armed();
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f000 f811 	bl	801052c <_ZN2FC12ModuleBuzzer5armedEv>
		break;
 801050a:	e00b      	b.n	8010524 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
	case BuzzerCommand::DisArmed:
		disarmed();
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f000 f817 	bl	8010540 <_ZN2FC12ModuleBuzzer8disarmedEv>
		break;
 8010512:	e007      	b.n	8010524 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
	case BuzzerCommand::Success:
		success();
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f000 f827 	bl	8010568 <_ZN2FC12ModuleBuzzer7successEv>
		break;
 801051a:	e003      	b.n	8010524 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
	case BuzzerCommand::Denied:
		denied();
 801051c:	6878      	ldr	r0, [r7, #4]
 801051e:	f000 f819 	bl	8010554 <_ZN2FC12ModuleBuzzer6deniedEv>
		break;
 8010522:	bf00      	nop
	}
}
 8010524:	bf00      	nop
 8010526:	3708      	adds	r7, #8
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}

0801052c <_ZN2FC12ModuleBuzzer5armedEv>:

void ModuleBuzzer::armed(){
 801052c:	b480      	push	{r7}
 801052e:	b083      	sub	sp, #12
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
	//TODO armed sound
}
 8010534:	bf00      	nop
 8010536:	370c      	adds	r7, #12
 8010538:	46bd      	mov	sp, r7
 801053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053e:	4770      	bx	lr

08010540 <_ZN2FC12ModuleBuzzer8disarmedEv>:

void ModuleBuzzer::disarmed(){
 8010540:	b480      	push	{r7}
 8010542:	b083      	sub	sp, #12
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
	//TODO disarmed sound
}
 8010548:	bf00      	nop
 801054a:	370c      	adds	r7, #12
 801054c:	46bd      	mov	sp, r7
 801054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010552:	4770      	bx	lr

08010554 <_ZN2FC12ModuleBuzzer6deniedEv>:

void ModuleBuzzer::denied(){
 8010554:	b480      	push	{r7}
 8010556:	b083      	sub	sp, #12
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
	//TODO denied sound
}
 801055c:	bf00      	nop
 801055e:	370c      	adds	r7, #12
 8010560:	46bd      	mov	sp, r7
 8010562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010566:	4770      	bx	lr

08010568 <_ZN2FC12ModuleBuzzer7successEv>:

void ModuleBuzzer::success(){
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
//
//		/* Make each note sound and cut 1 mileecond */
//		HAL_TIM_PWM_Stop(htim, Channel);
//		osDelay(10);
//	}
	HAL_TIM_PWM_Start(htim, Channel);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681a      	ldr	r2, [r3, #0]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	4619      	mov	r1, r3
 801057a:	4610      	mov	r0, r2
 801057c:	f00a fd9e 	bl	801b0bc <HAL_TIM_PWM_Start>
	osDelay(2000);
 8010580:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8010584:	f011 f980 	bl	8021888 <osDelay>
	HAL_TIM_PWM_Stop(htim, Channel);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681a      	ldr	r2, [r3, #0]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	685b      	ldr	r3, [r3, #4]
 8010590:	4619      	mov	r1, r3
 8010592:	4610      	mov	r0, r2
 8010594:	f00a fdc4 	bl	801b120 <HAL_TIM_PWM_Stop>
}
 8010598:	bf00      	nop
 801059a:	3708      	adds	r7, #8
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}

080105a0 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>:
    SIMPLE_FUNC_IMPL(ModeFlag, ModeFlag, modeFlag)
 80105a0:	b490      	push	{r4, r7}
 80105a2:	b082      	sub	sp, #8
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
 80105a8:	6039      	str	r1, [r7, #0]
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	683a      	ldr	r2, [r7, #0]
 80105ae:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 80105b2:	4613      	mov	r3, r2
 80105b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80105b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80105ba:	bf00      	nop
 80105bc:	3708      	adds	r7, #8
 80105be:	46bd      	mov	sp, r7
 80105c0:	bc90      	pop	{r4, r7}
 80105c2:	4770      	bx	lr

080105c4 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 80105c4:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80105c8:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 80105ca:	4b0e      	ldr	r3, [pc, #56]	; (8010604 <_ZL11microsecondv+0x40>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	4619      	mov	r1, r3
 80105d0:	f04f 0200 	mov.w	r2, #0
 80105d4:	f04f 0b00 	mov.w	fp, #0
 80105d8:	f04f 0c00 	mov.w	ip, #0
 80105dc:	468c      	mov	ip, r1
 80105de:	f04f 0b00 	mov.w	fp, #0
 80105e2:	4a09      	ldr	r2, [pc, #36]	; (8010608 <_ZL11microsecondv+0x44>)
 80105e4:	6812      	ldr	r2, [r2, #0]
 80105e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80105e8:	4611      	mov	r1, r2
 80105ea:	f04f 0200 	mov.w	r2, #0
 80105ee:	ea4b 0301 	orr.w	r3, fp, r1
 80105f2:	ea4c 0402 	orr.w	r4, ip, r2
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	4621      	mov	r1, r4
 80105fa:	46bd      	mov	sp, r7
 80105fc:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8010600:	4770      	bx	lr
 8010602:	bf00      	nop
 8010604:	20000b48 	.word	0x20000b48
 8010608:	20010f88 	.word	0x20010f88

0801060c <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>:
		}
	}

	void oneStep();

	static inline void setSignal(enum PcSignal signal){
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
 8010612:	4603      	mov	r3, r0
 8010614:	71fb      	strb	r3, [r7, #7]
		osThreadFlagsSet(PC_TaskHandle, signal);
 8010616:	4b05      	ldr	r3, [pc, #20]	; (801062c <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE+0x20>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	79fa      	ldrb	r2, [r7, #7]
 801061c:	4611      	mov	r1, r2
 801061e:	4618      	mov	r0, r3
 8010620:	f010 ffb8 	bl	8021594 <osThreadFlagsSet>
	}
 8010624:	bf00      	nop
 8010626:	3708      	adds	r7, #8
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}
 801062c:	2000df30 	.word	0x2000df30

08010630 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE>:
		}
	}

	void oneStep();

	static inline void setSignal(enum AcSignal signal){
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
 8010636:	4603      	mov	r3, r0
 8010638:	71fb      	strb	r3, [r7, #7]
		osThreadFlagsSet(AC_TaskHandle, AC_fromAHRS);
 801063a:	4b05      	ldr	r3, [pc, #20]	; (8010650 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE+0x20>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	2101      	movs	r1, #1
 8010640:	4618      	mov	r0, r3
 8010642:	f010 ffa7 	bl	8021594 <osThreadFlagsSet>
	}
 8010646:	bf00      	nop
 8010648:	3708      	adds	r7, #8
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}
 801064e:	bf00      	nop
 8010650:	2000ded0 	.word	0x2000ded0

08010654 <_ZN2FC15ModuleCommanderC1Ev>:
  .cb_size = sizeof(Commander_QueueControlBlock),
  .mq_mem = &Commander_QueueBuffer,
  .mq_size = sizeof(Commander_QueueBuffer)
};

ModuleCommander::ModuleCommander(){
 8010654:	b580      	push	{r7, lr}
 8010656:	b082      	sub	sp, #8
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	461a      	mov	r2, r3
 8010660:	2300      	movs	r3, #0
 8010662:	6013      	str	r3, [r2, #0]
 8010664:	6053      	str	r3, [r2, #4]
 8010666:	6093      	str	r3, [r2, #8]
 8010668:	60d3      	str	r3, [r2, #12]
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	3310      	adds	r3, #16
 801066e:	2220      	movs	r2, #32
 8010670:	2100      	movs	r1, #0
 8010672:	4618      	mov	r0, r3
 8010674:	f018 fcb3 	bl	8028fde <memset>
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	3330      	adds	r3, #48	; 0x30
 801067c:	2200      	movs	r2, #0
 801067e:	601a      	str	r2, [r3, #0]
 8010680:	605a      	str	r2, [r3, #4]
 8010682:	609a      	str	r2, [r3, #8]
 8010684:	60da      	str	r2, [r3, #12]
	  /* creation of Command_Queue */
	  Commander_QueueHandle = osMessageQueueNew (3, sizeof(Command), &Commander_Queue_attributes);
 8010686:	4a06      	ldr	r2, [pc, #24]	; (80106a0 <_ZN2FC15ModuleCommanderC1Ev+0x4c>)
 8010688:	2104      	movs	r1, #4
 801068a:	2003      	movs	r0, #3
 801068c:	f011 fafc 	bl	8021c88 <osMessageQueueNew>
 8010690:	4602      	mov	r2, r0
 8010692:	4b04      	ldr	r3, [pc, #16]	; (80106a4 <_ZN2FC15ModuleCommanderC1Ev+0x50>)
 8010694:	601a      	str	r2, [r3, #0]
}
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	4618      	mov	r0, r3
 801069a:	3708      	adds	r7, #8
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}
 80106a0:	0802e150 	.word	0x0802e150
 80106a4:	20000b4c 	.word	0x20000b4c

080106a8 <_ZN2FC15ModuleCommander4mainEv>:

void ModuleCommander::main(){
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b092      	sub	sp, #72	; 0x48
 80106ac:	af00      	add	r7, sp, #0
	ModuleCommander moduleCommander;
 80106ae:	f107 0308 	add.w	r3, r7, #8
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7ff ffce 	bl	8010654 <_ZN2FC15ModuleCommanderC1Ev>

	osDelay(1500);
 80106b8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80106bc:	f011 f8e4 	bl	8021888 <osDelay>
	sensorAccel.setBias();
 80106c0:	4814      	ldr	r0, [pc, #80]	; (8010714 <_ZN2FC15ModuleCommander4mainEv+0x6c>)
 80106c2:	f001 f985 	bl	80119d0 <_ZN2FC11SensorAccel7setBiasEv>
	sensorGyro.setBias();
 80106c6:	4814      	ldr	r0, [pc, #80]	; (8010718 <_ZN2FC15ModuleCommander4mainEv+0x70>)
 80106c8:	f001 fdd0 	bl	801226c <_ZN2FC10SensorGyro7setBiasEv>
	sensorBaro.setSeaLevelPressure(26.0); /* inha univ. altitude */
 80106cc:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
 80106d0:	4812      	ldr	r0, [pc, #72]	; (801071c <_ZN2FC15ModuleCommander4mainEv+0x74>)
 80106d2:	f001 fb79 	bl	8011dc8 <_ZN2FC10SensorBaro19setSeaLevelPressureEf>
	sensorBaro.setRefAltitude();
 80106d6:	4811      	ldr	r0, [pc, #68]	; (801071c <_ZN2FC15ModuleCommander4mainEv+0x74>)
 80106d8:	f001 fb8f 	bl	8011dfa <_ZN2FC10SensorBaro14setRefAltitudeEv>
	osDelay(500);
 80106dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80106e0:	f011 f8d2 	bl	8021888 <osDelay>

	while(1){
		Command rcvCommand;
		if(osMessageQueueGet(Commander_QueueHandle, (void*)&rcvCommand, NULL, osWaitForever) == osOK){
 80106e4:	4b0e      	ldr	r3, [pc, #56]	; (8010720 <_ZN2FC15ModuleCommander4mainEv+0x78>)
 80106e6:	6818      	ldr	r0, [r3, #0]
 80106e8:	1d39      	adds	r1, r7, #4
 80106ea:	f04f 33ff 	mov.w	r3, #4294967295
 80106ee:	2200      	movs	r2, #0
 80106f0:	f011 fbc4 	bl	8021e7c <osMessageQueueGet>
 80106f4:	4603      	mov	r3, r0
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	bf0c      	ite	eq
 80106fa:	2301      	moveq	r3, #1
 80106fc:	2300      	movne	r3, #0
 80106fe:	b2db      	uxtb	r3, r3
 8010700:	2b00      	cmp	r3, #0
 8010702:	d0ef      	beq.n	80106e4 <_ZN2FC15ModuleCommander4mainEv+0x3c>
			moduleCommander.commandHandler(rcvCommand);
 8010704:	687a      	ldr	r2, [r7, #4]
 8010706:	f107 0308 	add.w	r3, r7, #8
 801070a:	4611      	mov	r1, r2
 801070c:	4618      	mov	r0, r3
 801070e:	f000 f83d 	bl	801078c <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE>
		}
	}
 8010712:	e7e7      	b.n	80106e4 <_ZN2FC15ModuleCommander4mainEv+0x3c>
 8010714:	20000f98 	.word	0x20000f98
 8010718:	20001078 	.word	0x20001078
 801071c:	20000fd8 	.word	0x20000fd8
 8010720:	20000b4c 	.word	0x20000b4c

08010724 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>:
}

bool ModuleCommander::sendCommand(Command cmd){
 8010724:	b580      	push	{r7, lr}
 8010726:	b082      	sub	sp, #8
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
	if(osMessageQueueGetSpace(Commander_QueueHandle) != 0){
 801072c:	4b0d      	ldr	r3, [pc, #52]	; (8010764 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x40>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4618      	mov	r0, r3
 8010732:	f011 fc15 	bl	8021f60 <osMessageQueueGetSpace>
 8010736:	4603      	mov	r3, r0
 8010738:	2b00      	cmp	r3, #0
 801073a:	bf14      	ite	ne
 801073c:	2301      	movne	r3, #1
 801073e:	2300      	moveq	r3, #0
 8010740:	b2db      	uxtb	r3, r3
 8010742:	2b00      	cmp	r3, #0
 8010744:	d008      	beq.n	8010758 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x34>
		osMessageQueuePut(Commander_QueueHandle, (void*)&cmd, 0, 0);
 8010746:	4b07      	ldr	r3, [pc, #28]	; (8010764 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x40>)
 8010748:	6818      	ldr	r0, [r3, #0]
 801074a:	1d39      	adds	r1, r7, #4
 801074c:	2300      	movs	r3, #0
 801074e:	2200      	movs	r2, #0
 8010750:	f011 fb20 	bl	8021d94 <osMessageQueuePut>
		return true;
 8010754:	2301      	movs	r3, #1
 8010756:	e000      	b.n	801075a <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x36>
	}
	return false;
 8010758:	2300      	movs	r3, #0
}
 801075a:	4618      	mov	r0, r3
 801075c:	3708      	adds	r7, #8
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}
 8010762:	bf00      	nop
 8010764:	20000b4c 	.word	0x20000b4c

08010768 <_ZN2FC15ModuleCommander10sendSignalENS_9CmdSignalE>:

void ModuleCommander::sendSignal(enum CmdSignal signal){
 8010768:	b580      	push	{r7, lr}
 801076a:	b082      	sub	sp, #8
 801076c:	af00      	add	r7, sp, #0
 801076e:	4603      	mov	r3, r0
 8010770:	71fb      	strb	r3, [r7, #7]
	osThreadFlagsSet(Commander_TaskHandle, signal);
 8010772:	4b05      	ldr	r3, [pc, #20]	; (8010788 <_ZN2FC15ModuleCommander10sendSignalENS_9CmdSignalE+0x20>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	79fa      	ldrb	r2, [r7, #7]
 8010778:	4611      	mov	r1, r2
 801077a:	4618      	mov	r0, r3
 801077c:	f010 ff0a 	bl	8021594 <osThreadFlagsSet>
}
 8010780:	bf00      	nop
 8010782:	3708      	adds	r7, #8
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}
 8010788:	2000ca40 	.word	0x2000ca40

0801078c <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE>:

bool ModuleCommander::commandHandler(Command cmd){
 801078c:	b580      	push	{r7, lr}
 801078e:	b082      	sub	sp, #8
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	6039      	str	r1, [r7, #0]
	switch(cmd){
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	2b09      	cmp	r3, #9
 801079a:	d844      	bhi.n	8010826 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x9a>
 801079c:	a201      	add	r2, pc, #4	; (adr r2, 80107a4 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x18>)
 801079e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107a2:	bf00      	nop
 80107a4:	080107cd 	.word	0x080107cd
 80107a8:	080107d7 	.word	0x080107d7
 80107ac:	080107e1 	.word	0x080107e1
 80107b0:	080107eb 	.word	0x080107eb
 80107b4:	080107f5 	.word	0x080107f5
 80107b8:	080107ff 	.word	0x080107ff
 80107bc:	08010827 	.word	0x08010827
 80107c0:	08010809 	.word	0x08010809
 80107c4:	08010813 	.word	0x08010813
 80107c8:	0801081d 	.word	0x0801081d
	case Command::ControlAttitude:
		return toAttitude();
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f000 f82f 	bl	8010830 <_ZN2FC15ModuleCommander10toAttitudeEv>
 80107d2:	4603      	mov	r3, r0
 80107d4:	e028      	b.n	8010828 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x9c>
		break;
	case Command::ControlPosition:
		return toPosition();
 80107d6:	6878      	ldr	r0, [r7, #4]
 80107d8:	f000 f84c 	bl	8010874 <_ZN2FC15ModuleCommander10toPositionEv>
 80107dc:	4603      	mov	r3, r0
 80107de:	e023      	b.n	8010828 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x9c>
		break;
	case Command::AutoWaypoint:
		return toWaypoint();
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f000 f87f 	bl	80108e4 <_ZN2FC15ModuleCommander10toWaypointEv>
 80107e6:	4603      	mov	r3, r0
 80107e8:	e01e      	b.n	8010828 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x9c>
		break;
	case Command::AutoRTL:
		return toRTL();
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f000 f885 	bl	80108fa <_ZN2FC15ModuleCommander5toRTLEv>
 80107f0:	4603      	mov	r3, r0
 80107f2:	e019      	b.n	8010828 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x9c>
		break;
	case Command::AutoTakeoff:
		return toTakeoff();
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f000 f88b 	bl	8010910 <_ZN2FC15ModuleCommander9toTakeoffEv>
 80107fa:	4603      	mov	r3, r0
 80107fc:	e014      	b.n	8010828 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x9c>
		break;
	case Command::AutoLand:
		return toLand();
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f000 f891 	bl	8010926 <_ZN2FC15ModuleCommander6toLandEv>
 8010804:	4603      	mov	r3, r0
 8010806:	e00f      	b.n	8010828 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x9c>
		break;

	case Command::Arm:
		return toArm();
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f000 f897 	bl	801093c <_ZN2FC15ModuleCommander5toArmEv>
 801080e:	4603      	mov	r3, r0
 8010810:	e00a      	b.n	8010828 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x9c>
		break;
	case Command::DisArm:
		return toDisArm();
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f000 f8d6 	bl	80109c4 <_ZN2FC15ModuleCommander8toDisArmEv>
 8010818:	4603      	mov	r3, r0
 801081a:	e005      	b.n	8010828 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x9c>
		break;

	case Command::MotorCalibration:
		return toMotorCalibration();
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f000 f8f3 	bl	8010a08 <_ZN2FC15ModuleCommander18toMotorCalibrationEv>
 8010822:	4603      	mov	r3, r0
 8010824:	e000      	b.n	8010828 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x9c>
		break;
	}
	return false;
 8010826:	2300      	movs	r3, #0
}
 8010828:	4618      	mov	r0, r3
 801082a:	3708      	adds	r7, #8
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}

08010830 <_ZN2FC15ModuleCommander10toAttitudeEv>:

bool ModuleCommander::toAttitude(){
 8010830:	b590      	push	{r4, r7, lr}
 8010832:	b083      	sub	sp, #12
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
	 * check condition of attitude control
	 */


	/* change to attitude */
	modeFlagPub.timestamp = microsecond();
 8010838:	f7ff fec4 	bl	80105c4 <_ZL11microsecondv>
 801083c:	4603      	mov	r3, r0
 801083e:	460c      	mov	r4, r1
 8010840:	687a      	ldr	r2, [r7, #4]
 8010842:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	modeFlagPub.flightMode = Command::ControlAttitude;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2200      	movs	r2, #0
 801084a:	63da      	str	r2, [r3, #60]	; 0x3c
	msgBus.setModeFlag(modeFlagPub);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	3330      	adds	r3, #48	; 0x30
 8010850:	4619      	mov	r1, r3
 8010852:	4807      	ldr	r0, [pc, #28]	; (8010870 <_ZN2FC15ModuleCommander10toAttitudeEv+0x40>)
 8010854:	f7ff fea4 	bl	80105a0 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	stopTheOtherTask();
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f000 f90f 	bl	8010a7c <_ZN2FC15ModuleCommander16stopTheOtherTaskEv>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 801085e:	2002      	movs	r0, #2
 8010860:	f7ff fe1a 	bl	8010498 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
	return true;
 8010864:	2301      	movs	r3, #1
}
 8010866:	4618      	mov	r0, r3
 8010868:	370c      	adds	r7, #12
 801086a:	46bd      	mov	sp, r7
 801086c:	bd90      	pop	{r4, r7, pc}
 801086e:	bf00      	nop
 8010870:	20000bb8 	.word	0x20000bb8

08010874 <_ZN2FC15ModuleCommander10toPositionEv>:

bool ModuleCommander::toPosition(){
 8010874:	b590      	push	{r4, r7, lr}
 8010876:	b083      	sub	sp, #12
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
	//TODO check condition of position controller

	/* set position controller */
	ModulePositionController::setSignal(PC_start);
 801087c:	2002      	movs	r0, #2
 801087e:	f7ff fec5 	bl	801060c <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>
	if(!(osThreadFlagsWait(CMD_ACK, osFlagsWaitAny, 500) & CMD_ACK)){
 8010882:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8010886:	2100      	movs	r1, #0
 8010888:	2001      	movs	r0, #1
 801088a:	f010 ff69 	bl	8021760 <osThreadFlagsWait>
 801088e:	4603      	mov	r3, r0
 8010890:	f003 0301 	and.w	r3, r3, #1
 8010894:	2b00      	cmp	r3, #0
 8010896:	bf0c      	ite	eq
 8010898:	2301      	moveq	r3, #1
 801089a:	2300      	movne	r3, #0
 801089c:	b2db      	uxtb	r3, r3
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d004      	beq.n	80108ac <_ZN2FC15ModuleCommander10toPositionEv+0x38>
		ModuleBuzzer::sendCommand(BuzzerCommand::Denied);
 80108a2:	2003      	movs	r0, #3
 80108a4:	f7ff fdf8 	bl	8010498 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
		return false;
 80108a8:	2300      	movs	r3, #0
 80108aa:	e015      	b.n	80108d8 <_ZN2FC15ModuleCommander10toPositionEv+0x64>
	}

	modeFlagPub.timestamp = microsecond();
 80108ac:	f7ff fe8a 	bl	80105c4 <_ZL11microsecondv>
 80108b0:	4603      	mov	r3, r0
 80108b2:	460c      	mov	r4, r1
 80108b4:	687a      	ldr	r2, [r7, #4]
 80108b6:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	modeFlagPub.flightMode = Command::ControlPosition;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	2201      	movs	r2, #1
 80108be:	63da      	str	r2, [r3, #60]	; 0x3c
	msgBus.setModeFlag(modeFlagPub);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	3330      	adds	r3, #48	; 0x30
 80108c4:	4619      	mov	r1, r3
 80108c6:	4806      	ldr	r0, [pc, #24]	; (80108e0 <_ZN2FC15ModuleCommander10toPositionEv+0x6c>)
 80108c8:	f7ff fe6a 	bl	80105a0 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	stopTheOtherTask();
 80108cc:	6878      	ldr	r0, [r7, #4]
 80108ce:	f000 f8d5 	bl	8010a7c <_ZN2FC15ModuleCommander16stopTheOtherTaskEv>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 80108d2:	2002      	movs	r0, #2
 80108d4:	f7ff fde0 	bl	8010498 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
}
 80108d8:	4618      	mov	r0, r3
 80108da:	370c      	adds	r7, #12
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd90      	pop	{r4, r7, pc}
 80108e0:	20000bb8 	.word	0x20000bb8

080108e4 <_ZN2FC15ModuleCommander10toWaypointEv>:

bool ModuleCommander::toWaypoint(){
 80108e4:	b480      	push	{r7}
 80108e6:	b083      	sub	sp, #12
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
	//TODO change to waypoint autopilot
}
 80108ec:	bf00      	nop
 80108ee:	4618      	mov	r0, r3
 80108f0:	370c      	adds	r7, #12
 80108f2:	46bd      	mov	sp, r7
 80108f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f8:	4770      	bx	lr

080108fa <_ZN2FC15ModuleCommander5toRTLEv>:

bool ModuleCommander::toRTL(){
 80108fa:	b480      	push	{r7}
 80108fc:	b083      	sub	sp, #12
 80108fe:	af00      	add	r7, sp, #0
 8010900:	6078      	str	r0, [r7, #4]
	//TODO change to auto RTL
}
 8010902:	bf00      	nop
 8010904:	4618      	mov	r0, r3
 8010906:	370c      	adds	r7, #12
 8010908:	46bd      	mov	sp, r7
 801090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090e:	4770      	bx	lr

08010910 <_ZN2FC15ModuleCommander9toTakeoffEv>:
bool ModuleCommander::toTakeoff(){
 8010910:	b480      	push	{r7}
 8010912:	b083      	sub	sp, #12
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
	//TODO change to auto takeoff
}
 8010918:	bf00      	nop
 801091a:	4618      	mov	r0, r3
 801091c:	370c      	adds	r7, #12
 801091e:	46bd      	mov	sp, r7
 8010920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010924:	4770      	bx	lr

08010926 <_ZN2FC15ModuleCommander6toLandEv>:

bool ModuleCommander::toLand(){
 8010926:	b480      	push	{r7}
 8010928:	b083      	sub	sp, #12
 801092a:	af00      	add	r7, sp, #0
 801092c:	6078      	str	r0, [r7, #4]
	//TODO change to auto land
}
 801092e:	bf00      	nop
 8010930:	4618      	mov	r0, r3
 8010932:	370c      	adds	r7, #12
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr

0801093c <_ZN2FC15ModuleCommander5toArmEv>:

bool ModuleCommander::toArm(){
 801093c:	b590      	push	{r4, r7, lr}
 801093e:	b083      	sub	sp, #12
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
	//TODO check arm condition

	/* toArm condition */
	msgBus.getController(&controllerSub);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	4619      	mov	r1, r3
 8010948:	481a      	ldr	r0, [pc, #104]	; (80109b4 <_ZN2FC15ModuleCommander5toArmEv+0x78>)
 801094a:	f7ff fabd 	bl	800fec8 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>
	if(controllerSub.throttle > 1050){
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	89db      	ldrh	r3, [r3, #14]
 8010952:	f240 421a 	movw	r2, #1050	; 0x41a
 8010956:	4293      	cmp	r3, r2
 8010958:	d904      	bls.n	8010964 <_ZN2FC15ModuleCommander5toArmEv+0x28>
		ModuleBuzzer::sendCommand(BuzzerCommand::Denied);
 801095a:	2003      	movs	r0, #3
 801095c:	f7ff fd9c 	bl	8010498 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
		return false; /* can't arm */
 8010960:	2300      	movs	r3, #0
 8010962:	e022      	b.n	80109aa <_ZN2FC15ModuleCommander5toArmEv+0x6e>
	}

	/* arm initialize */
	sensorAccel.setBias();
 8010964:	4814      	ldr	r0, [pc, #80]	; (80109b8 <_ZN2FC15ModuleCommander5toArmEv+0x7c>)
 8010966:	f001 f833 	bl	80119d0 <_ZN2FC11SensorAccel7setBiasEv>
	sensorGyro.setBias();
 801096a:	4814      	ldr	r0, [pc, #80]	; (80109bc <_ZN2FC15ModuleCommander5toArmEv+0x80>)
 801096c:	f001 fc7e 	bl	801226c <_ZN2FC10SensorGyro7setBiasEv>
	sensorBaro.setRefAltitude();
 8010970:	4813      	ldr	r0, [pc, #76]	; (80109c0 <_ZN2FC15ModuleCommander5toArmEv+0x84>)
 8010972:	f001 fa42 	bl	8011dfa <_ZN2FC10SensorBaro14setRefAltitudeEv>
	resetController();
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f000 f896 	bl	8010aa8 <_ZN2FC15ModuleCommander15resetControllerEv>
	osDelay(150);					/* wait sensor calibration */
 801097c:	2096      	movs	r0, #150	; 0x96
 801097e:	f010 ff83 	bl	8021888 <osDelay>

	modeFlagPub.timestamp = microsecond();
 8010982:	f7ff fe1f 	bl	80105c4 <_ZL11microsecondv>
 8010986:	4603      	mov	r3, r0
 8010988:	460c      	mov	r4, r1
 801098a:	687a      	ldr	r2, [r7, #4]
 801098c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	modeFlagPub.armMode = Command::Arm;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2207      	movs	r2, #7
 8010994:	639a      	str	r2, [r3, #56]	; 0x38
	msgBus.setModeFlag(modeFlagPub);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	3330      	adds	r3, #48	; 0x30
 801099a:	4619      	mov	r1, r3
 801099c:	4805      	ldr	r0, [pc, #20]	; (80109b4 <_ZN2FC15ModuleCommander5toArmEv+0x78>)
 801099e:	f7ff fdff 	bl	80105a0 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 80109a2:	2002      	movs	r0, #2
 80109a4:	f7ff fd78 	bl	8010498 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
	return true;
 80109a8:	2301      	movs	r3, #1
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	370c      	adds	r7, #12
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd90      	pop	{r4, r7, pc}
 80109b2:	bf00      	nop
 80109b4:	20000bb8 	.word	0x20000bb8
 80109b8:	20000f98 	.word	0x20000f98
 80109bc:	20001078 	.word	0x20001078
 80109c0:	20000fd8 	.word	0x20000fd8

080109c4 <_ZN2FC15ModuleCommander8toDisArmEv>:

bool ModuleCommander::toDisArm(){
 80109c4:	b590      	push	{r4, r7, lr}
 80109c6:	b083      	sub	sp, #12
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
//	   pwm.m4 > DISARM_PWM && pwm.m5 > DISARM_PWM && pwm.m6 > DISARM_PWM){
//		/* can't disarm */
//
//	}

	modeFlagPub.timestamp = microsecond();
 80109cc:	f7ff fdfa 	bl	80105c4 <_ZL11microsecondv>
 80109d0:	4603      	mov	r3, r0
 80109d2:	460c      	mov	r4, r1
 80109d4:	687a      	ldr	r2, [r7, #4]
 80109d6:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	modeFlagPub.armMode = Command::DisArm;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	2208      	movs	r2, #8
 80109de:	639a      	str	r2, [r3, #56]	; 0x38
	msgBus.setModeFlag(modeFlagPub);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	3330      	adds	r3, #48	; 0x30
 80109e4:	4619      	mov	r1, r3
 80109e6:	4807      	ldr	r0, [pc, #28]	; (8010a04 <_ZN2FC15ModuleCommander8toDisArmEv+0x40>)
 80109e8:	f7ff fdda 	bl	80105a0 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	stopTheOtherTask();
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f000 f845 	bl	8010a7c <_ZN2FC15ModuleCommander16stopTheOtherTaskEv>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 80109f2:	2002      	movs	r0, #2
 80109f4:	f7ff fd50 	bl	8010498 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
	return true;
 80109f8:	2301      	movs	r3, #1
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	370c      	adds	r7, #12
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd90      	pop	{r4, r7, pc}
 8010a02:	bf00      	nop
 8010a04:	20000bb8 	.word	0x20000bb8

08010a08 <_ZN2FC15ModuleCommander18toMotorCalibrationEv>:

bool ModuleCommander::toMotorCalibration(){
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b086      	sub	sp, #24
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
	osKernelLock();
 8010a10:	f010 fcba 	bl	8021388 <osKernelLock>

	struct Controller ctl;

	while(1){
		msgBus.getController(&ctl);
 8010a14:	f107 0308 	add.w	r3, r7, #8
 8010a18:	4619      	mov	r1, r3
 8010a1a:	4811      	ldr	r0, [pc, #68]	; (8010a60 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x58>)
 8010a1c:	f7ff fa54 	bl	800fec8 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>

		m1.setPWM(ctl.throttle);
 8010a20:	8afb      	ldrh	r3, [r7, #22]
 8010a22:	4619      	mov	r1, r3
 8010a24:	480f      	ldr	r0, [pc, #60]	; (8010a64 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x5c>)
 8010a26:	f7f0 fb33 	bl	8001090 <_ZN2FC5Motor6setPWMEt>
		m2.setPWM(ctl.throttle);
 8010a2a:	8afb      	ldrh	r3, [r7, #22]
 8010a2c:	4619      	mov	r1, r3
 8010a2e:	480e      	ldr	r0, [pc, #56]	; (8010a68 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x60>)
 8010a30:	f7f0 fb2e 	bl	8001090 <_ZN2FC5Motor6setPWMEt>
		m3.setPWM(ctl.throttle);
 8010a34:	8afb      	ldrh	r3, [r7, #22]
 8010a36:	4619      	mov	r1, r3
 8010a38:	480c      	ldr	r0, [pc, #48]	; (8010a6c <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x64>)
 8010a3a:	f7f0 fb29 	bl	8001090 <_ZN2FC5Motor6setPWMEt>
		m4.setPWM(ctl.throttle);
 8010a3e:	8afb      	ldrh	r3, [r7, #22]
 8010a40:	4619      	mov	r1, r3
 8010a42:	480b      	ldr	r0, [pc, #44]	; (8010a70 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x68>)
 8010a44:	f7f0 fb24 	bl	8001090 <_ZN2FC5Motor6setPWMEt>
		m5.setPWM(ctl.throttle);
 8010a48:	8afb      	ldrh	r3, [r7, #22]
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	4809      	ldr	r0, [pc, #36]	; (8010a74 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x6c>)
 8010a4e:	f7f0 fb1f 	bl	8001090 <_ZN2FC5Motor6setPWMEt>
		m6.setPWM(ctl.throttle);
 8010a52:	8afb      	ldrh	r3, [r7, #22]
 8010a54:	4619      	mov	r1, r3
 8010a56:	4808      	ldr	r0, [pc, #32]	; (8010a78 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x70>)
 8010a58:	f7f0 fb1a 	bl	8001090 <_ZN2FC5Motor6setPWMEt>
		msgBus.getController(&ctl);
 8010a5c:	e7da      	b.n	8010a14 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0xc>
 8010a5e:	bf00      	nop
 8010a60:	20000bb8 	.word	0x20000bb8
 8010a64:	2000089c 	.word	0x2000089c
 8010a68:	200008a8 	.word	0x200008a8
 8010a6c:	200008b4 	.word	0x200008b4
 8010a70:	200008c0 	.word	0x200008c0
 8010a74:	200008cc 	.word	0x200008cc
 8010a78:	200008d8 	.word	0x200008d8

08010a7c <_ZN2FC15ModuleCommander16stopTheOtherTaskEv>:
	}
	osKernelUnlock();
}

bool ModuleCommander::stopTheOtherTask(){
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
	switch(modeFlagPub.flightMode){
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d004      	beq.n	8010a96 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv+0x1a>
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	db06      	blt.n	8010a9e <_ZN2FC15ModuleCommander16stopTheOtherTaskEv+0x22>
 8010a90:	2b02      	cmp	r3, #2
 8010a92:	dc04      	bgt.n	8010a9e <_ZN2FC15ModuleCommander16stopTheOtherTaskEv+0x22>
		ModulePositionController::setSignal(PC_stop);
	case Command::ControlPosition:
		//TODO stop auto controller
	case Command::AutoWaypoint:
		//??
		break;
 8010a94:	e002      	b.n	8010a9c <_ZN2FC15ModuleCommander16stopTheOtherTaskEv+0x20>
		ModulePositionController::setSignal(PC_stop);
 8010a96:	2004      	movs	r0, #4
 8010a98:	f7ff fdb8 	bl	801060c <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>
		break;
 8010a9c:	bf00      	nop
	}
}
 8010a9e:	bf00      	nop
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3708      	adds	r7, #8
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}

08010aa8 <_ZN2FC15ModuleCommander15resetControllerEv>:

void ModuleCommander::resetController(){
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b082      	sub	sp, #8
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
	switch(modeFlagPub.flightMode){
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d006      	beq.n	8010ac6 <_ZN2FC15ModuleCommander15resetControllerEv+0x1e>
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	db08      	blt.n	8010ace <_ZN2FC15ModuleCommander15resetControllerEv+0x26>
 8010abc:	2b02      	cmp	r3, #2
 8010abe:	dc06      	bgt.n	8010ace <_ZN2FC15ModuleCommander15resetControllerEv+0x26>
	case Command::AutoWaypoint:
		//TODO initialize auto controller
		/* not break */
	case Command::ControlPosition:
		ModulePositionController::setSignal(PC_reset);
 8010ac0:	2008      	movs	r0, #8
 8010ac2:	f7ff fda3 	bl	801060c <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>
		/* not break */
	case Command::ControlAttitude:
		ModuleAttitudeController::setSignal(AC_reset);
 8010ac6:	2002      	movs	r0, #2
 8010ac8:	f7ff fdb2 	bl	8010630 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE>
		break;
 8010acc:	bf00      	nop
	}
}
 8010ace:	bf00      	nop
 8010ad0:	3708      	adds	r7, #8
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}

08010ad6 <_ZN27positionEstimatorModelClass17setExternalInputsEPKNS_4ExtUE>:
  ~positionEstimatorModelClass();

  // Root-level structure-based inputs set method

  // Root inports set method
  void setExternalInputs(const ExtU* pExtU)
 8010ad6:	b580      	push	{r7, lr}
 8010ad8:	b082      	sub	sp, #8
 8010ada:	af00      	add	r7, sp, #0
 8010adc:	6078      	str	r0, [r7, #4]
 8010ade:	6039      	str	r1, [r7, #0]
  {
    rtU = *pExtU;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	683a      	ldr	r2, [r7, #0]
 8010ae4:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 8010ae8:	4611      	mov	r1, r2
 8010aea:	2280      	movs	r2, #128	; 0x80
 8010aec:	4618      	mov	r0, r3
 8010aee:	f018 fa6b 	bl	8028fc8 <memcpy>
  }
 8010af2:	bf00      	nop
 8010af4:	3708      	adds	r7, #8
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}

08010afa <_ZNK27positionEstimatorModelClass18getExternalOutputsEv>:

  // Root-level structure-based outputs get method

  // Root outports get method
  const positionEstimatorModelClass::ExtY & getExternalOutputs() const
 8010afa:	b480      	push	{r7}
 8010afc:	b083      	sub	sp, #12
 8010afe:	af00      	add	r7, sp, #0
 8010b00:	6078      	str	r0, [r7, #4]
  {
    return rtY;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
  }
 8010b08:	4618      	mov	r0, r3
 8010b0a:	370c      	adds	r7, #12
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b12:	4770      	bx	lr

08010b14 <_ZN2FC6MsgBus6getGPSEPNS_3GPSE>:
    SIMPLE_FUNC_IMPL(GPS, GPS, gps)
 8010b14:	b590      	push	{r4, r7, lr}
 8010b16:	b085      	sub	sp, #20
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	6039      	str	r1, [r7, #0]
 8010b1e:	2300      	movs	r3, #0
 8010b20:	73fb      	strb	r3, [r7, #15]
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	e9d3 1200 	ldrd	r1, r2, [r3]
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 8010b2e:	42a2      	cmp	r2, r4
 8010b30:	bf08      	it	eq
 8010b32:	4299      	cmpeq	r1, r3
 8010b34:	d001      	beq.n	8010b3a <_ZN2FC6MsgBus6getGPSEPNS_3GPSE+0x26>
 8010b36:	2301      	movs	r3, #1
 8010b38:	73fb      	strb	r3, [r7, #15]
 8010b3a:	683a      	ldr	r2, [r7, #0]
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	4610      	mov	r0, r2
 8010b40:	3348      	adds	r3, #72	; 0x48
 8010b42:	2248      	movs	r2, #72	; 0x48
 8010b44:	4619      	mov	r1, r3
 8010b46:	f018 fa3f 	bl	8028fc8 <memcpy>
 8010b4a:	7bfb      	ldrb	r3, [r7, #15]
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	3714      	adds	r7, #20
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd90      	pop	{r4, r7, pc}

08010b54 <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE>:
    SIMPLE_FUNC_IMPL(Barometer, Barometer, barometer)
 8010b54:	b4b0      	push	{r4, r5, r7}
 8010b56:	b085      	sub	sp, #20
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	6039      	str	r1, [r7, #0]
 8010b5e:	2300      	movs	r3, #0
 8010b60:	73fb      	strb	r3, [r7, #15]
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	e9d3 1200 	ldrd	r1, r2, [r3]
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8010b6e:	42a2      	cmp	r2, r4
 8010b70:	bf08      	it	eq
 8010b72:	4299      	cmpeq	r1, r3
 8010b74:	d001      	beq.n	8010b7a <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE+0x26>
 8010b76:	2301      	movs	r3, #1
 8010b78:	73fb      	strb	r3, [r7, #15]
 8010b7a:	683a      	ldr	r2, [r7, #0]
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	4615      	mov	r5, r2
 8010b80:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8010b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010b88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010b8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8010b90:	7bfb      	ldrb	r3, [r7, #15]
 8010b92:	4618      	mov	r0, r3
 8010b94:	3714      	adds	r7, #20
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bcb0      	pop	{r4, r5, r7}
 8010b9a:	4770      	bx	lr

08010b9c <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>:
    SIMPLE_FUNC_IMPL(NedAccel, NedAccel, nedAccel)
 8010b9c:	b4b0      	push	{r4, r5, r7}
 8010b9e:	b085      	sub	sp, #20
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	6039      	str	r1, [r7, #0]
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	73fb      	strb	r3, [r7, #15]
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	e9d3 1200 	ldrd	r1, r2, [r3]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8010bb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010bba:	42a2      	cmp	r2, r4
 8010bbc:	bf08      	it	eq
 8010bbe:	4299      	cmpeq	r1, r3
 8010bc0:	d001      	beq.n	8010bc6 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE+0x2a>
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	73fb      	strb	r3, [r7, #15]
 8010bc6:	683a      	ldr	r2, [r7, #0]
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	4615      	mov	r5, r2
 8010bcc:	f503 748c 	add.w	r4, r3, #280	; 0x118
 8010bd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010bd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010bd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8010bdc:	7bfb      	ldrb	r3, [r7, #15]
 8010bde:	4618      	mov	r0, r3
 8010be0:	3714      	adds	r7, #20
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bcb0      	pop	{r4, r5, r7}
 8010be6:	4770      	bx	lr

08010be8 <_ZN2FC6MsgBus16setLocalPositionERKNS_13LocalPositionE>:
    SIMPLE_FUNC_IMPL(LocalPosition, LocalPosition, localPosition)
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b082      	sub	sp, #8
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
 8010bf0:	6039      	str	r1, [r7, #0]
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	683a      	ldr	r2, [r7, #0]
 8010bf6:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8010bfa:	4611      	mov	r1, r2
 8010bfc:	2248      	movs	r2, #72	; 0x48
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f018 f9e2 	bl	8028fc8 <memcpy>
 8010c04:	bf00      	nop
 8010c06:	3708      	adds	r7, #8
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}

08010c0c <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8010c0c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8010c10:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 8010c12:	4b0e      	ldr	r3, [pc, #56]	; (8010c4c <_ZL11microsecondv+0x40>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	4619      	mov	r1, r3
 8010c18:	f04f 0200 	mov.w	r2, #0
 8010c1c:	f04f 0b00 	mov.w	fp, #0
 8010c20:	f04f 0c00 	mov.w	ip, #0
 8010c24:	468c      	mov	ip, r1
 8010c26:	f04f 0b00 	mov.w	fp, #0
 8010c2a:	4a09      	ldr	r2, [pc, #36]	; (8010c50 <_ZL11microsecondv+0x44>)
 8010c2c:	6812      	ldr	r2, [r2, #0]
 8010c2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010c30:	4611      	mov	r1, r2
 8010c32:	f04f 0200 	mov.w	r2, #0
 8010c36:	ea4b 0301 	orr.w	r3, fp, r1
 8010c3a:	ea4c 0402 	orr.w	r4, ip, r2
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	4621      	mov	r1, r4
 8010c42:	46bd      	mov	sp, r7
 8010c44:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8010c48:	4770      	bx	lr
 8010c4a:	bf00      	nop
 8010c4c:	20000bac 	.word	0x20000bac
 8010c50:	20010f88 	.word	0x20010f88

08010c54 <_ZN2FC9ModuleINSC1Ev>:
#include "Utils/Constant.h"

namespace FC {


ModuleINS::ModuleINS()
 8010c54:	b590      	push	{r4, r7, lr}
 8010c56:	b083      	sub	sp, #12
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
	: refLat(0)
	, refLon(0)
	, refAlt(0)
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7fb fb36 	bl	800c2d0 <_ZN27positionEstimatorModelClassC1Ev>
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f603 6208 	addw	r2, r3, #3592	; 0xe08
 8010c6a:	f04f 0300 	mov.w	r3, #0
 8010c6e:	f04f 0400 	mov.w	r4, #0
 8010c72:	e9c2 3400 	strd	r3, r4, [r2]
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f503 6261 	add.w	r2, r3, #3600	; 0xe10
 8010c7c:	f04f 0300 	mov.w	r3, #0
 8010c80:	f04f 0400 	mov.w	r4, #0
 8010c84:	e9c2 3400 	strd	r3, r4, [r2]
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f603 6318 	addw	r3, r3, #3608	; 0xe18
 8010c8e:	f04f 0200 	mov.w	r2, #0
 8010c92:	601a      	str	r2, [r3, #0]
{}
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	4618      	mov	r0, r3
 8010c98:	370c      	adds	r7, #12
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd90      	pop	{r4, r7, pc}
	...

08010ca0 <_ZN2FC9ModuleINS7onestepEv>:

void ModuleINS::onestep(){
 8010ca0:	b590      	push	{r4, r7, lr}
 8010ca2:	b0b5      	sub	sp, #212	; 0xd4
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
	ExtU input;

	if(msgBus.getNedAccel(&nedAccelSub)){
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f603 5348 	addw	r3, r3, #3400	; 0xd48
 8010cae:	4619      	mov	r1, r3
 8010cb0:	4889      	ldr	r0, [pc, #548]	; (8010ed8 <_ZN2FC9ModuleINS7onestepEv+0x238>)
 8010cb2:	f7ff ff73 	bl	8010b9c <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d02b      	beq.n	8010d14 <_ZN2FC9ModuleINS7onestepEv+0x74>
		input.AhrsFlag = true;
 8010cbc:	f04f 0300 	mov.w	r3, #0
 8010cc0:	4c86      	ldr	r4, [pc, #536]	; (8010edc <_ZN2FC9ModuleINS7onestepEv+0x23c>)
 8010cc2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		input.ax = nedAccelSub.xyz[0];
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f7ef fc42 	bl	8000558 <__aeabi_f2d>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	460c      	mov	r4, r1
 8010cd8:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
		input.ay = nedAccelSub.xyz[1];
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f603 5354 	addw	r3, r3, #3412	; 0xd54
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f7ef fc37 	bl	8000558 <__aeabi_f2d>
 8010cea:	4603      	mov	r3, r0
 8010cec:	460c      	mov	r4, r1
 8010cee:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
		input.az = nedAccelSub.xyz[2] - FC_GRAVITY_ACCEERATION;		/* subtract gravity */
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f603 5358 	addw	r3, r3, #3416	; 0xd58
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7ef fc2c 	bl	8000558 <__aeabi_f2d>
 8010d00:	a373      	add	r3, pc, #460	; (adr r3, 8010ed0 <_ZN2FC9ModuleINS7onestepEv+0x230>)
 8010d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d06:	f7ef fac7 	bl	8000298 <__aeabi_dsub>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	460c      	mov	r4, r1
 8010d0e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 8010d12:	e005      	b.n	8010d20 <_ZN2FC9ModuleINS7onestepEv+0x80>
	}
	else input.AhrsFlag = false;
 8010d14:	f04f 0300 	mov.w	r3, #0
 8010d18:	f04f 0400 	mov.w	r4, #0
 8010d1c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	if(msgBus.getGPS(&gpsSub)){
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f503 6356 	add.w	r3, r3, #3424	; 0xd60
 8010d26:	4619      	mov	r1, r3
 8010d28:	486b      	ldr	r0, [pc, #428]	; (8010ed8 <_ZN2FC9ModuleINS7onestepEv+0x238>)
 8010d2a:	f7ff fef3 	bl	8010b14 <_ZN2FC6MsgBus6getGPSEPNS_3GPSE>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d006      	beq.n	8010d42 <_ZN2FC9ModuleINS7onestepEv+0xa2>
		input.GpsFlag = false;
 8010d34:	f04f 0300 	mov.w	r3, #0
 8010d38:	f04f 0400 	mov.w	r4, #0
 8010d3c:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 8010d40:	e005      	b.n	8010d4e <_ZN2FC9ModuleINS7onestepEv+0xae>
	}
	else input.GpsFlag = false;
 8010d42:	f04f 0300 	mov.w	r3, #0
 8010d46:	f04f 0400 	mov.w	r4, #0
 8010d4a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

	if(msgBus.getBarometer(&baroSub)){
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f603 53a8 	addw	r3, r3, #3496	; 0xda8
 8010d54:	4619      	mov	r1, r3
 8010d56:	4860      	ldr	r0, [pc, #384]	; (8010ed8 <_ZN2FC9ModuleINS7onestepEv+0x238>)
 8010d58:	f7ff fefc 	bl	8010b54 <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d010      	beq.n	8010d84 <_ZN2FC9ModuleINS7onestepEv+0xe4>
		input.BaroFlag = true;
 8010d62:	f04f 0300 	mov.w	r3, #0
 8010d66:	4c5d      	ldr	r4, [pc, #372]	; (8010edc <_ZN2FC9ModuleINS7onestepEv+0x23c>)
 8010d68:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		input.baroZ = baroSub.altitude;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f603 53b8 	addw	r3, r3, #3512	; 0xdb8
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	4618      	mov	r0, r3
 8010d76:	f7ef fbef 	bl	8000558 <__aeabi_f2d>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	460c      	mov	r4, r1
 8010d7e:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8010d82:	e005      	b.n	8010d90 <_ZN2FC9ModuleINS7onestepEv+0xf0>
	}
	else input.BaroFlag = false;
 8010d84:	f04f 0300 	mov.w	r3, #0
 8010d88:	f04f 0400 	mov.w	r4, #0
 8010d8c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0

	setExternalInputs(&input);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010d96:	4611      	mov	r1, r2
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f7ff fe9c 	bl	8010ad6 <_ZN27positionEstimatorModelClass17setExternalInputsEPKNS_4ExtUE>
	step();
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	4618      	mov	r0, r3
 8010da2:	f7f6 fdbd 	bl	8007920 <_ZN27positionEstimatorModelClass4stepEv>
	ExtY output = getExternalOutputs();
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7ff fea6 	bl	8010afa <_ZNK27positionEstimatorModelClass18getExternalOutputsEv>
 8010dae:	4602      	mov	r2, r0
 8010db0:	f107 0308 	add.w	r3, r7, #8
 8010db4:	4611      	mov	r1, r2
 8010db6:	2248      	movs	r2, #72	; 0x48
 8010db8:	4618      	mov	r0, r3
 8010dba:	f018 f905 	bl	8028fc8 <memcpy>


	localPositionPub.timestamp = microsecond();
 8010dbe:	f7ff ff25 	bl	8010c0c <_ZL11microsecondv>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	460c      	mov	r4, r1
 8010dc6:	687a      	ldr	r2, [r7, #4]
 8010dc8:	f502 625c 	add.w	r2, r2, #3520	; 0xdc0
 8010dcc:	e9c2 3400 	strd	r3, r4, [r2]
	localPositionPub.ax = (float)output.estiAX;
 8010dd0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	4621      	mov	r1, r4
 8010dd8:	f7ef ff0e 	bl	8000bf8 <__aeabi_d2f>
 8010ddc:	4602      	mov	r2, r0
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f503 635e 	add.w	r3, r3, #3552	; 0xde0
 8010de4:	601a      	str	r2, [r3, #0]
	localPositionPub.ay = (float)output.estiAY;
 8010de6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8010dea:	4618      	mov	r0, r3
 8010dec:	4621      	mov	r1, r4
 8010dee:	f7ef ff03 	bl	8000bf8 <__aeabi_d2f>
 8010df2:	4602      	mov	r2, r0
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f603 53e4 	addw	r3, r3, #3556	; 0xde4
 8010dfa:	601a      	str	r2, [r3, #0]
	localPositionPub.az = (float)output.estiAZ;
 8010dfc:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8010e00:	4618      	mov	r0, r3
 8010e02:	4621      	mov	r1, r4
 8010e04:	f7ef fef8 	bl	8000bf8 <__aeabi_d2f>
 8010e08:	4602      	mov	r2, r0
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f603 53e8 	addw	r3, r3, #3560	; 0xde8
 8010e10:	601a      	str	r2, [r3, #0]

	localPositionPub.vx = (float)output.estiVX;
 8010e12:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010e16:	4618      	mov	r0, r3
 8010e18:	4621      	mov	r1, r4
 8010e1a:	f7ef feed 	bl	8000bf8 <__aeabi_d2f>
 8010e1e:	4602      	mov	r2, r0
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f603 53d4 	addw	r3, r3, #3540	; 0xdd4
 8010e26:	601a      	str	r2, [r3, #0]
	localPositionPub.vy = (float)output.estiVY;
 8010e28:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	4621      	mov	r1, r4
 8010e30:	f7ef fee2 	bl	8000bf8 <__aeabi_d2f>
 8010e34:	4602      	mov	r2, r0
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 8010e3c:	601a      	str	r2, [r3, #0]
	localPositionPub.vz = (float)output.estiVZ;
 8010e3e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8010e42:	4618      	mov	r0, r3
 8010e44:	4621      	mov	r1, r4
 8010e46:	f7ef fed7 	bl	8000bf8 <__aeabi_d2f>
 8010e4a:	4602      	mov	r2, r0
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8010e52:	601a      	str	r2, [r3, #0]

	localPositionPub.x = (float)output.estiX;
 8010e54:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010e58:	4618      	mov	r0, r3
 8010e5a:	4621      	mov	r1, r4
 8010e5c:	f7ef fecc 	bl	8000bf8 <__aeabi_d2f>
 8010e60:	4602      	mov	r2, r0
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f603 53c8 	addw	r3, r3, #3528	; 0xdc8
 8010e68:	601a      	str	r2, [r3, #0]
	localPositionPub.y = (float)output.estiY;
 8010e6a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010e6e:	4618      	mov	r0, r3
 8010e70:	4621      	mov	r1, r4
 8010e72:	f7ef fec1 	bl	8000bf8 <__aeabi_d2f>
 8010e76:	4602      	mov	r2, r0
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f603 53cc 	addw	r3, r3, #3532	; 0xdcc
 8010e7e:	601a      	str	r2, [r3, #0]
	localPositionPub.z = (float)output.estiZ;
 8010e80:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010e84:	4618      	mov	r0, r3
 8010e86:	4621      	mov	r1, r4
 8010e88:	f7ef feb6 	bl	8000bf8 <__aeabi_d2f>
 8010e8c:	4602      	mov	r2, r0
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f503 635d 	add.w	r3, r3, #3536	; 0xdd0
 8010e94:	601a      	str	r2, [r3, #0]

	msgBus.getAttitude(&attitudeSub);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8010e9c:	4619      	mov	r1, r3
 8010e9e:	480e      	ldr	r0, [pc, #56]	; (8010ed8 <_ZN2FC9ModuleINS7onestepEv+0x238>)
 8010ea0:	f7ff f856 	bl	800ff50 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
	localPositionPub.yaw = attitudeSub.yaw;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f503 6354 	add.w	r3, r3, #3392	; 0xd40
 8010eaa:	681a      	ldr	r2, [r3, #0]
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f603 53ec 	addw	r3, r3, #3564	; 0xdec
 8010eb2:	601a      	str	r2, [r3, #0]

	msgBus.setLocalPosition(localPositionPub);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
 8010eba:	4619      	mov	r1, r3
 8010ebc:	4806      	ldr	r0, [pc, #24]	; (8010ed8 <_ZN2FC9ModuleINS7onestepEv+0x238>)
 8010ebe:	f7ff fe93 	bl	8010be8 <_ZN2FC6MsgBus16setLocalPositionERKNS_13LocalPositionE>
}
 8010ec2:	bf00      	nop
 8010ec4:	37d4      	adds	r7, #212	; 0xd4
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd90      	pop	{r4, r7, pc}
 8010eca:	bf00      	nop
 8010ecc:	f3af 8000 	nop.w
 8010ed0:	3a92a305 	.word	0x3a92a305
 8010ed4:	40239d01 	.word	0x40239d01
 8010ed8:	20000bb8 	.word	0x20000bb8
 8010edc:	3ff00000 	.word	0x3ff00000

08010ee0 <_ZN25positionControlModelClass17setExternalInputsEPK22ExtU_positionControl_T>:
  void setBlockParameters(const P_positionControl_T *ppositionControl_P);

  // Root-level structure-based inputs set method

  // Root inports set method
  void setExternalInputs(const ExtU_positionControl_T* pExtU_positionControl_T)
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b082      	sub	sp, #8
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
 8010ee8:	6039      	str	r1, [r7, #0]
  {
    positionControl_U = *pExtU_positionControl_T;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	683a      	ldr	r2, [r7, #0]
 8010eee:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8010ef2:	4611      	mov	r1, r2
 8010ef4:	2258      	movs	r2, #88	; 0x58
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f018 f866 	bl	8028fc8 <memcpy>
  }
 8010efc:	bf00      	nop
 8010efe:	3708      	adds	r7, #8
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd80      	pop	{r7, pc}

08010f04 <_ZNK25positionControlModelClass18getExternalOutputsEv>:

  // Root-level structure-based outputs get method

  // Root outports get method
  const ExtY_positionControl_T & getExternalOutputs() const
 8010f04:	b480      	push	{r7}
 8010f06:	b083      	sub	sp, #12
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
  {
    return positionControl_Y;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	f503 7360 	add.w	r3, r3, #896	; 0x380
  }
 8010f12:	4618      	mov	r0, r3
 8010f14:	370c      	adds	r7, #12
 8010f16:	46bd      	mov	sp, r7
 8010f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1c:	4770      	bx	lr

08010f1e <_ZN2FC6MsgBus19setVehicleAttitueSPERKNS_16VehicleAttitueSPE>:
    SIMPLE_FUNC_IMPL(VehicleAttitueSP, VehicleAttitueSP, vehicleAttitudeSP)
 8010f1e:	b4b0      	push	{r4, r5, r7}
 8010f20:	b083      	sub	sp, #12
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	6078      	str	r0, [r7, #4]
 8010f26:	6039      	str	r1, [r7, #0]
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	683a      	ldr	r2, [r7, #0]
 8010f2c:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8010f30:	4615      	mov	r5, r2
 8010f32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010f36:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010f3a:	e884 0003 	stmia.w	r4, {r0, r1}
 8010f3e:	bf00      	nop
 8010f40:	370c      	adds	r7, #12
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bcb0      	pop	{r4, r5, r7}
 8010f46:	4770      	bx	lr

08010f48 <_ZN2FC6MsgBus16getLocalPositionEPNS_13LocalPositionE>:
    SIMPLE_FUNC_IMPL(LocalPosition, LocalPosition, localPosition)
 8010f48:	b590      	push	{r4, r7, lr}
 8010f4a:	b085      	sub	sp, #20
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	6039      	str	r1, [r7, #0]
 8010f52:	2300      	movs	r3, #0
 8010f54:	73fb      	strb	r3, [r7, #15]
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	e9d3 1200 	ldrd	r1, r2, [r3]
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8010f62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010f66:	42a2      	cmp	r2, r4
 8010f68:	bf08      	it	eq
 8010f6a:	4299      	cmpeq	r1, r3
 8010f6c:	d001      	beq.n	8010f72 <_ZN2FC6MsgBus16getLocalPositionEPNS_13LocalPositionE+0x2a>
 8010f6e:	2301      	movs	r3, #1
 8010f70:	73fb      	strb	r3, [r7, #15]
 8010f72:	683a      	ldr	r2, [r7, #0]
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	4610      	mov	r0, r2
 8010f78:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8010f7c:	2248      	movs	r2, #72	; 0x48
 8010f7e:	4619      	mov	r1, r3
 8010f80:	f018 f822 	bl	8028fc8 <memcpy>
 8010f84:	7bfb      	ldrb	r3, [r7, #15]
 8010f86:	4618      	mov	r0, r3
 8010f88:	3714      	adds	r7, #20
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd90      	pop	{r4, r7, pc}
	...

08010f90 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8010f90:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8010f94:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 8010f96:	4b0e      	ldr	r3, [pc, #56]	; (8010fd0 <_ZL11microsecondv+0x40>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	4619      	mov	r1, r3
 8010f9c:	f04f 0200 	mov.w	r2, #0
 8010fa0:	f04f 0b00 	mov.w	fp, #0
 8010fa4:	f04f 0c00 	mov.w	ip, #0
 8010fa8:	468c      	mov	ip, r1
 8010faa:	f04f 0b00 	mov.w	fp, #0
 8010fae:	4a09      	ldr	r2, [pc, #36]	; (8010fd4 <_ZL11microsecondv+0x44>)
 8010fb0:	6812      	ldr	r2, [r2, #0]
 8010fb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010fb4:	4611      	mov	r1, r2
 8010fb6:	f04f 0200 	mov.w	r2, #0
 8010fba:	ea4b 0301 	orr.w	r3, fp, r1
 8010fbe:	ea4c 0402 	orr.w	r4, ip, r2
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	4621      	mov	r1, r4
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8010fcc:	4770      	bx	lr
 8010fce:	bf00      	nop
 8010fd0:	20000bb0 	.word	0x20000bb0
 8010fd4:	20010f88 	.word	0x20010f88

08010fd8 <_ZN2FCL3mapEtttff>:
#define UTILS_FUNCTION_H_


namespace FC{

static float map(uint16_t value, uint16_t in_min, uint16_t in_max, float out_min, float out_max){
 8010fd8:	b480      	push	{r7}
 8010fda:	b085      	sub	sp, #20
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	4603      	mov	r3, r0
 8010fe0:	ed87 0a01 	vstr	s0, [r7, #4]
 8010fe4:	edc7 0a00 	vstr	s1, [r7]
 8010fe8:	81fb      	strh	r3, [r7, #14]
 8010fea:	460b      	mov	r3, r1
 8010fec:	81bb      	strh	r3, [r7, #12]
 8010fee:	4613      	mov	r3, r2
 8010ff0:	817b      	strh	r3, [r7, #10]
	return (float)(value - in_min)*(out_max - out_min) / (in_max - in_min) + out_min;
 8010ff2:	89fa      	ldrh	r2, [r7, #14]
 8010ff4:	89bb      	ldrh	r3, [r7, #12]
 8010ff6:	1ad3      	subs	r3, r2, r3
 8010ff8:	ee07 3a90 	vmov	s15, r3
 8010ffc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011000:	edd7 6a00 	vldr	s13, [r7]
 8011004:	edd7 7a01 	vldr	s15, [r7, #4]
 8011008:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801100c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8011010:	897a      	ldrh	r2, [r7, #10]
 8011012:	89bb      	ldrh	r3, [r7, #12]
 8011014:	1ad3      	subs	r3, r2, r3
 8011016:	ee07 3a90 	vmov	s15, r3
 801101a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801101e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011022:	edd7 7a01 	vldr	s15, [r7, #4]
 8011026:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 801102a:	eeb0 0a67 	vmov.f32	s0, s15
 801102e:	3714      	adds	r7, #20
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr

08011038 <_ZN2FCL15radianThresholdEf>:

static float radianThreshold(float radian){
 8011038:	b590      	push	{r4, r7, lr}
 801103a:	b083      	sub	sp, #12
 801103c:	af00      	add	r7, sp, #0
 801103e:	ed87 0a01 	vstr	s0, [r7, #4]
	while(radian > FC_PI){
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f7ef fa88 	bl	8000558 <__aeabi_f2d>
 8011048:	a31f      	add	r3, pc, #124	; (adr r3, 80110c8 <_ZN2FCL15radianThresholdEf+0x90>)
 801104a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801104e:	f7ef fd6b 	bl	8000b28 <__aeabi_dcmpgt>
 8011052:	4603      	mov	r3, r0
 8011054:	2b00      	cmp	r3, #0
 8011056:	d100      	bne.n	801105a <_ZN2FCL15radianThresholdEf+0x22>
 8011058:	e010      	b.n	801107c <_ZN2FCL15radianThresholdEf+0x44>
		radian -= FC_2PI;
 801105a:	6878      	ldr	r0, [r7, #4]
 801105c:	f7ef fa7c 	bl	8000558 <__aeabi_f2d>
 8011060:	a31b      	add	r3, pc, #108	; (adr r3, 80110d0 <_ZN2FCL15radianThresholdEf+0x98>)
 8011062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011066:	f7ef f917 	bl	8000298 <__aeabi_dsub>
 801106a:	4603      	mov	r3, r0
 801106c:	460c      	mov	r4, r1
 801106e:	4618      	mov	r0, r3
 8011070:	4621      	mov	r1, r4
 8011072:	f7ef fdc1 	bl	8000bf8 <__aeabi_d2f>
 8011076:	4603      	mov	r3, r0
 8011078:	607b      	str	r3, [r7, #4]
	while(radian > FC_PI){
 801107a:	e7e2      	b.n	8011042 <_ZN2FCL15radianThresholdEf+0xa>
	}
	while(radian < -FC_PI){
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f7ef fa6b 	bl	8000558 <__aeabi_f2d>
 8011082:	a315      	add	r3, pc, #84	; (adr r3, 80110d8 <_ZN2FCL15radianThresholdEf+0xa0>)
 8011084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011088:	f7ef fd30 	bl	8000aec <__aeabi_dcmplt>
 801108c:	4603      	mov	r3, r0
 801108e:	2b00      	cmp	r3, #0
 8011090:	d010      	beq.n	80110b4 <_ZN2FCL15radianThresholdEf+0x7c>
		radian += FC_2PI;
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f7ef fa60 	bl	8000558 <__aeabi_f2d>
 8011098:	a30d      	add	r3, pc, #52	; (adr r3, 80110d0 <_ZN2FCL15radianThresholdEf+0x98>)
 801109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801109e:	f7ef f8fd 	bl	800029c <__adddf3>
 80110a2:	4603      	mov	r3, r0
 80110a4:	460c      	mov	r4, r1
 80110a6:	4618      	mov	r0, r3
 80110a8:	4621      	mov	r1, r4
 80110aa:	f7ef fda5 	bl	8000bf8 <__aeabi_d2f>
 80110ae:	4603      	mov	r3, r0
 80110b0:	607b      	str	r3, [r7, #4]
	while(radian < -FC_PI){
 80110b2:	e7e3      	b.n	801107c <_ZN2FCL15radianThresholdEf+0x44>
	}
	return radian;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	ee07 3a90 	vmov	s15, r3
}
 80110ba:	eeb0 0a67 	vmov.f32	s0, s15
 80110be:	370c      	adds	r7, #12
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd90      	pop	{r4, r7, pc}
 80110c4:	f3af 8000 	nop.w
 80110c8:	54442d18 	.word	0x54442d18
 80110cc:	400921fb 	.word	0x400921fb
 80110d0:	54442d18 	.word	0x54442d18
 80110d4:	401921fb 	.word	0x401921fb
 80110d8:	54442d18 	.word	0x54442d18
 80110dc:	c00921fb 	.word	0xc00921fb

080110e0 <_ZN2FC24ModulePositionControllerC1Ev>:
#include "Utils/function.h"
#include "Utils/Constant.h"
#include "printf.h"
namespace FC {

ModulePositionController::ModulePositionController() {
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b082      	sub	sp, #8
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	4618      	mov	r0, r3
 80110ec:	f7f5 f988 	bl	8006400 <_ZN25positionControlModelClassC1Ev>
	// TODO Auto-generated constructor stub

}
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	4618      	mov	r0, r3
 80110f4:	3708      	adds	r7, #8
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}
	...

080110fc <_ZN2FC24ModulePositionController7oneStepEv>:

void ModulePositionController::oneStep(){
 80110fc:	b590      	push	{r4, r7, lr}
 80110fe:	b09d      	sub	sp, #116	; 0x74
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
	msgBus.getModeFlag(&modeFlagSub);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 801110a:	4619      	mov	r1, r3
 801110c:	485f      	ldr	r0, [pc, #380]	; (801128c <_ZN2FC24ModulePositionController7oneStepEv+0x190>)
 801110e:	f7fe ff45 	bl	800ff9c <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
	msgBus.getLocalPosition(&localPositionSub);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8011118:	4619      	mov	r1, r3
 801111a:	485c      	ldr	r0, [pc, #368]	; (801128c <_ZN2FC24ModulePositionController7oneStepEv+0x190>)
 801111c:	f7ff ff14 	bl	8010f48 <_ZN2FC6MsgBus16getLocalPositionEPNS_13LocalPositionE>

	if(modeFlagSub.flightMode == Command::ControlPosition){
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 8011126:	2b01      	cmp	r3, #1
 8011128:	d103      	bne.n	8011132 <_ZN2FC24ModulePositionController7oneStepEv+0x36>
		setFromRC();
 801112a:	6878      	ldr	r0, [r7, #4]
 801112c:	f000 f8b0 	bl	8011290 <_ZN2FC24ModulePositionController9setFromRCEv>
 8011130:	e002      	b.n	8011138 <_ZN2FC24ModulePositionController7oneStepEv+0x3c>
	}
	else{
		setFromAutoController();
 8011132:	6878      	ldr	r0, [r7, #4]
 8011134:	f000 fa16 	bl	8011564 <_ZN2FC24ModulePositionController21setFromAutoControllerEv>
	}

	ExtU_positionControl_T input;

	input.set_x = targetX;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	4618      	mov	r0, r3
 8011142:	f7ef fa09 	bl	8000558 <__aeabi_f2d>
 8011146:	4603      	mov	r3, r0
 8011148:	460c      	mov	r4, r1
 801114a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	input.set_y = targetY;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	f203 4334 	addw	r3, r3, #1076	; 0x434
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	4618      	mov	r0, r3
 8011158:	f7ef f9fe 	bl	8000558 <__aeabi_f2d>
 801115c:	4603      	mov	r3, r0
 801115e:	460c      	mov	r4, r1
 8011160:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	input.set_z = targetZ;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	4618      	mov	r0, r3
 801116e:	f7ef f9f3 	bl	8000558 <__aeabi_f2d>
 8011172:	4603      	mov	r3, r0
 8011174:	460c      	mov	r4, r1
 8011176:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	input.set_yaw = targetYaw;;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	4618      	mov	r0, r3
 8011184:	f7ef f9e8 	bl	8000558 <__aeabi_f2d>
 8011188:	4603      	mov	r3, r0
 801118a:	460c      	mov	r4, r1
 801118c:	e9c7 3408 	strd	r3, r4, [r7, #32]

	input.estim_dx = localPositionSub.vx;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8011196:	4618      	mov	r0, r3
 8011198:	f7ef f9de 	bl	8000558 <__aeabi_f2d>
 801119c:	4603      	mov	r3, r0
 801119e:	460c      	mov	r4, r1
 80111a0:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	input.estim_dy = localPositionSub.vy;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f8d3 33a8 	ldr.w	r3, [r3, #936]	; 0x3a8
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7ef f9d4 	bl	8000558 <__aeabi_f2d>
 80111b0:	4603      	mov	r3, r0
 80111b2:	460c      	mov	r4, r1
 80111b4:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	input.estim_dz = localPositionSub.vz;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 80111be:	4618      	mov	r0, r3
 80111c0:	f7ef f9ca 	bl	8000558 <__aeabi_f2d>
 80111c4:	4603      	mov	r3, r0
 80111c6:	460c      	mov	r4, r1
 80111c8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	input.estim_x = localPositionSub.x;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f8d3 3398 	ldr.w	r3, [r3, #920]	; 0x398
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7ef f9c0 	bl	8000558 <__aeabi_f2d>
 80111d8:	4603      	mov	r3, r0
 80111da:	460c      	mov	r4, r1
 80111dc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	input.estim_y = localPositionSub.y;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7ef f9b6 	bl	8000558 <__aeabi_f2d>
 80111ec:	4603      	mov	r3, r0
 80111ee:	460c      	mov	r4, r1
 80111f0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	input.estim_z = localPositionSub.z;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7ef f9ac 	bl	8000558 <__aeabi_f2d>
 8011200:	4603      	mov	r3, r0
 8011202:	460c      	mov	r4, r1
 8011204:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	input.estim_yaw = localPositionSub.yaw;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 801120e:	61bb      	str	r3, [r7, #24]

	setExternalInputs(&input);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f107 0218 	add.w	r2, r7, #24
 8011216:	4611      	mov	r1, r2
 8011218:	4618      	mov	r0, r3
 801121a:	f7ff fe61 	bl	8010ee0 <_ZN25positionControlModelClass17setExternalInputsEPK22ExtU_positionControl_T>
	step();
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	4618      	mov	r0, r3
 8011222:	f7f3 fd69 	bl	8004cf8 <_ZN25positionControlModelClass4stepEv>
	ExtY_positionControl_T output = getExternalOutputs();
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	4618      	mov	r0, r3
 801122a:	f7ff fe6b 	bl	8010f04 <_ZNK25positionControlModelClass18getExternalOutputsEv>
 801122e:	4603      	mov	r3, r0
 8011230:	f107 0408 	add.w	r4, r7, #8
 8011234:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011236:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	vehicleAttitudeSpPub.timestamp = microsecond();
 801123a:	f7ff fea9 	bl	8010f90 <_ZL11microsecondv>
 801123e:	4603      	mov	r3, r0
 8011240:	460c      	mov	r4, r1
 8011242:	687a      	ldr	r2, [r7, #4]
 8011244:	f502 6283 	add.w	r2, r2, #1048	; 0x418
 8011248:	e9c2 3400 	strd	r3, r4, [r2]
	vehicleAttitudeSpPub.pitch = output.des_pitch;
 801124c:	68fa      	ldr	r2, [r7, #12]
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8011254:	601a      	str	r2, [r3, #0]
	vehicleAttitudeSpPub.roll = output.des_roll;
 8011256:	68ba      	ldr	r2, [r7, #8]
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 801125e:	601a      	str	r2, [r3, #0]
	vehicleAttitudeSpPub.throttle = output.des_Thrust;
 8011260:	697a      	ldr	r2, [r7, #20]
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8011268:	601a      	str	r2, [r3, #0]
	vehicleAttitudeSpPub.yawRate = output.des_yaw_rate;
 801126a:	693a      	ldr	r2, [r7, #16]
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8011272:	601a      	str	r2, [r3, #0]

	msgBus.setVehicleAttitueSP(vehicleAttitudeSpPub);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 801127a:	4619      	mov	r1, r3
 801127c:	4803      	ldr	r0, [pc, #12]	; (801128c <_ZN2FC24ModulePositionController7oneStepEv+0x190>)
 801127e:	f7ff fe4e 	bl	8010f1e <_ZN2FC6MsgBus19setVehicleAttitueSPERKNS_16VehicleAttitueSPE>
}
 8011282:	bf00      	nop
 8011284:	3774      	adds	r7, #116	; 0x74
 8011286:	46bd      	mov	sp, r7
 8011288:	bd90      	pop	{r4, r7, pc}
 801128a:	bf00      	nop
 801128c:	20000bb8 	.word	0x20000bb8

08011290 <_ZN2FC24ModulePositionController9setFromRCEv>:

void ModulePositionController::setFromRC(){
 8011290:	b590      	push	{r4, r7, lr}
 8011292:	ed2d 8b02 	vpush	{d8}
 8011296:	b087      	sub	sp, #28
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
	static bool rollStickSet = false;
	static bool pitchStickSet = false;
	float roll;
	float pitch;

	msgBus.getController(&controllerSub);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80112a2:	4619      	mov	r1, r3
 80112a4:	48a8      	ldr	r0, [pc, #672]	; (8011548 <_ZN2FC24ModulePositionController9setFromRCEv+0x2b8>)
 80112a6:	f7fe fe0f 	bl	800fec8 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>

	if( 1500 - STICK_THRESHOLD < controllerSub.throttle && controllerSub.throttle < 1500 + STICK_THRESHOLD){
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 80112b0:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80112b4:	d917      	bls.n	80112e6 <_ZN2FC24ModulePositionController9setFromRCEv+0x56>
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 80112bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80112c0:	d211      	bcs.n	80112e6 <_ZN2FC24ModulePositionController9setFromRCEv+0x56>
		// set altitude
		if(!throtleStickSet){
 80112c2:	4ba2      	ldr	r3, [pc, #648]	; (801154c <_ZN2FC24ModulePositionController9setFromRCEv+0x2bc>)
 80112c4:	781b      	ldrb	r3, [r3, #0]
 80112c6:	f083 0301 	eor.w	r3, r3, #1
 80112ca:	b2db      	uxtb	r3, r3
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d027      	beq.n	8011320 <_ZN2FC24ModulePositionController9setFromRCEv+0x90>
			targetZ = localPositionSub.z;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80112dc:	601a      	str	r2, [r3, #0]
			throtleStickSet = true;
 80112de:	4b9b      	ldr	r3, [pc, #620]	; (801154c <_ZN2FC24ModulePositionController9setFromRCEv+0x2bc>)
 80112e0:	2201      	movs	r2, #1
 80112e2:	701a      	strb	r2, [r3, #0]
		if(!throtleStickSet){
 80112e4:	e01c      	b.n	8011320 <_ZN2FC24ModulePositionController9setFromRCEv+0x90>
		}
	}
	else{
		targetZ = localPositionSub.z - map(controllerSub.throttle, 1000, 2000, -MAX_VELTICAL, MAX_VELTICAL);
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	ed93 8ae8 	vldr	s16, [r3, #928]	; 0x3a0
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 80112f2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80112f6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80112fa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80112fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011302:	4618      	mov	r0, r3
 8011304:	f7ff fe68 	bl	8010fd8 <_ZN2FCL3mapEtttff>
 8011308:	eef0 7a40 	vmov.f32	s15, s0
 801130c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8011316:	edc3 7a00 	vstr	s15, [r3]
		throtleStickSet = false;
 801131a:	4b8c      	ldr	r3, [pc, #560]	; (801154c <_ZN2FC24ModulePositionController9setFromRCEv+0x2bc>)
 801131c:	2200      	movs	r2, #0
 801131e:	701a      	strb	r2, [r3, #0]
	}

	if( 1500 - STICK_THRESHOLD < controllerSub.yaw && controllerSub.yaw < 1500 + STICK_THRESHOLD){
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8011326:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 801132a:	d917      	bls.n	801135c <_ZN2FC24ModulePositionController9setFromRCEv+0xcc>
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8011332:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011336:	d211      	bcs.n	801135c <_ZN2FC24ModulePositionController9setFromRCEv+0xcc>
		// set altitude
		if(!yawStickSet){
 8011338:	4b85      	ldr	r3, [pc, #532]	; (8011550 <_ZN2FC24ModulePositionController9setFromRCEv+0x2c0>)
 801133a:	781b      	ldrb	r3, [r3, #0]
 801133c:	f083 0301 	eor.w	r3, r3, #1
 8011340:	b2db      	uxtb	r3, r3
 8011342:	2b00      	cmp	r3, #0
 8011344:	d037      	beq.n	80113b6 <_ZN2FC24ModulePositionController9setFromRCEv+0x126>
			targetYaw = localPositionSub.yaw;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8011352:	601a      	str	r2, [r3, #0]
			yawStickSet = true;
 8011354:	4b7e      	ldr	r3, [pc, #504]	; (8011550 <_ZN2FC24ModulePositionController9setFromRCEv+0x2c0>)
 8011356:	2201      	movs	r2, #1
 8011358:	701a      	strb	r2, [r3, #0]
		if(!yawStickSet){
 801135a:	e02c      	b.n	80113b6 <_ZN2FC24ModulePositionController9setFromRCEv+0x126>
		}
	}
	else{
		targetYaw = localPositionSub.yaw + map(controllerSub.yaw, 1000, 2000, -MAX_YAW, MAX_YAW);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	ed93 8aef 	vldr	s16, [r3, #956]	; 0x3bc
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8011368:	eddf 0a7a 	vldr	s1, [pc, #488]	; 8011554 <_ZN2FC24ModulePositionController9setFromRCEv+0x2c4>
 801136c:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8011558 <_ZN2FC24ModulePositionController9setFromRCEv+0x2c8>
 8011370:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8011374:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011378:	4618      	mov	r0, r3
 801137a:	f7ff fe2d 	bl	8010fd8 <_ZN2FCL3mapEtttff>
 801137e:	eef0 7a40 	vmov.f32	s15, s0
 8011382:	ee78 7a27 	vadd.f32	s15, s16, s15
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 801138c:	edc3 7a00 	vstr	s15, [r3]
		targetYaw = radianThreshold(targetYaw);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8011396:	edd3 7a00 	vldr	s15, [r3]
 801139a:	eeb0 0a67 	vmov.f32	s0, s15
 801139e:	f7ff fe4b 	bl	8011038 <_ZN2FCL15radianThresholdEf>
 80113a2:	eef0 7a40 	vmov.f32	s15, s0
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 80113ac:	edc3 7a00 	vstr	s15, [r3]
		yawStickSet = false;
 80113b0:	4b67      	ldr	r3, [pc, #412]	; (8011550 <_ZN2FC24ModulePositionController9setFromRCEv+0x2c0>)
 80113b2:	2200      	movs	r2, #0
 80113b4:	701a      	strb	r2, [r3, #0]
	}

	if(1500 - STICK_THRESHOLD < controllerSub.roll && controllerSub.roll < 1500 + STICK_THRESHOLD){
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 80113bc:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80113c0:	d913      	bls.n	80113ea <_ZN2FC24ModulePositionController9setFromRCEv+0x15a>
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 80113c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80113cc:	d20d      	bcs.n	80113ea <_ZN2FC24ModulePositionController9setFromRCEv+0x15a>
		if(!rollStickSet){
 80113ce:	4b63      	ldr	r3, [pc, #396]	; (801155c <_ZN2FC24ModulePositionController9setFromRCEv+0x2cc>)
 80113d0:	781b      	ldrb	r3, [r3, #0]
 80113d2:	f083 0301 	eor.w	r3, r3, #1
 80113d6:	b2db      	uxtb	r3, r3
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d019      	beq.n	8011410 <_ZN2FC24ModulePositionController9setFromRCEv+0x180>
			roll = 0;
 80113dc:	f04f 0300 	mov.w	r3, #0
 80113e0:	617b      	str	r3, [r7, #20]
			rollStickSet = true;
 80113e2:	4b5e      	ldr	r3, [pc, #376]	; (801155c <_ZN2FC24ModulePositionController9setFromRCEv+0x2cc>)
 80113e4:	2201      	movs	r2, #1
 80113e6:	701a      	strb	r2, [r3, #0]
		if(!rollStickSet){
 80113e8:	e012      	b.n	8011410 <_ZN2FC24ModulePositionController9setFromRCEv+0x180>
		}
	}
	else{
		roll = map(controllerSub.roll, 1000, 2000, -MAX_HORISION, MAX_HORISION);		/* roll */
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 80113f0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80113f4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80113f8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80113fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011400:	4618      	mov	r0, r3
 8011402:	f7ff fde9 	bl	8010fd8 <_ZN2FCL3mapEtttff>
 8011406:	ed87 0a05 	vstr	s0, [r7, #20]
		rollStickSet = false;
 801140a:	4b54      	ldr	r3, [pc, #336]	; (801155c <_ZN2FC24ModulePositionController9setFromRCEv+0x2cc>)
 801140c:	2200      	movs	r2, #0
 801140e:	701a      	strb	r2, [r3, #0]
	}
	if(1500 - STICK_THRESHOLD < controllerSub.pitch && controllerSub.pitch < 1500 + STICK_THRESHOLD){
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	f8b3 33f2 	ldrh.w	r3, [r3, #1010]	; 0x3f2
 8011416:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 801141a:	d913      	bls.n	8011444 <_ZN2FC24ModulePositionController9setFromRCEv+0x1b4>
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f8b3 33f2 	ldrh.w	r3, [r3, #1010]	; 0x3f2
 8011422:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011426:	d20d      	bcs.n	8011444 <_ZN2FC24ModulePositionController9setFromRCEv+0x1b4>
		if(!pitchStickSet){
 8011428:	4b4d      	ldr	r3, [pc, #308]	; (8011560 <_ZN2FC24ModulePositionController9setFromRCEv+0x2d0>)
 801142a:	781b      	ldrb	r3, [r3, #0]
 801142c:	f083 0301 	eor.w	r3, r3, #1
 8011430:	b2db      	uxtb	r3, r3
 8011432:	2b00      	cmp	r3, #0
 8011434:	d019      	beq.n	801146a <_ZN2FC24ModulePositionController9setFromRCEv+0x1da>
			pitch = 0;
 8011436:	f04f 0300 	mov.w	r3, #0
 801143a:	613b      	str	r3, [r7, #16]
			pitchStickSet = true;
 801143c:	4b48      	ldr	r3, [pc, #288]	; (8011560 <_ZN2FC24ModulePositionController9setFromRCEv+0x2d0>)
 801143e:	2201      	movs	r2, #1
 8011440:	701a      	strb	r2, [r3, #0]
		if(!pitchStickSet){
 8011442:	e012      	b.n	801146a <_ZN2FC24ModulePositionController9setFromRCEv+0x1da>
		}
	}
	else{
		pitch = map(controllerSub.pitch, 1000, 2000, -MAX_HORISION, MAX_HORISION);		/* pitch */
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	f8b3 33f2 	ldrh.w	r3, [r3, #1010]	; 0x3f2
 801144a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801144e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8011452:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8011456:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801145a:	4618      	mov	r0, r3
 801145c:	f7ff fdbc 	bl	8010fd8 <_ZN2FCL3mapEtttff>
 8011460:	ed87 0a04 	vstr	s0, [r7, #16]
		pitchStickSet = false;
 8011464:	4b3e      	ldr	r3, [pc, #248]	; (8011560 <_ZN2FC24ModulePositionController9setFromRCEv+0x2d0>)
 8011466:	2200      	movs	r2, #0
 8011468:	701a      	strb	r2, [r3, #0]
	}
//	float roll = map(controllerSub.roll, 1000, 2000, -MAX_HORISION, MAX_HORISION);		/* roll */
//	float pitch = map(controllerSub.pitch, 1000, 2000, -MAX_HORISION, MAX_HORISION);	/* pitch */
//	targetYaw = map(controllerSub.yaw, 1000, 2000, -MAX_YAW, MAX_YAW);

	if( !rollStickSet || !pitchStickSet){
 801146a:	4b3c      	ldr	r3, [pc, #240]	; (801155c <_ZN2FC24ModulePositionController9setFromRCEv+0x2cc>)
 801146c:	781b      	ldrb	r3, [r3, #0]
 801146e:	f083 0301 	eor.w	r3, r3, #1
 8011472:	b2db      	uxtb	r3, r3
 8011474:	2b00      	cmp	r3, #0
 8011476:	d106      	bne.n	8011486 <_ZN2FC24ModulePositionController9setFromRCEv+0x1f6>
 8011478:	4b39      	ldr	r3, [pc, #228]	; (8011560 <_ZN2FC24ModulePositionController9setFromRCEv+0x2d0>)
 801147a:	781b      	ldrb	r3, [r3, #0]
 801147c:	f083 0301 	eor.w	r3, r3, #1
 8011480:	b2db      	uxtb	r3, r3
 8011482:	2b00      	cmp	r3, #0
 8011484:	d059      	beq.n	801153a <_ZN2FC24ModulePositionController9setFromRCEv+0x2aa>
		float cosYaw = cos(localPositionSub.yaw);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 801148c:	4618      	mov	r0, r3
 801148e:	f7ef f863 	bl	8000558 <__aeabi_f2d>
 8011492:	4603      	mov	r3, r0
 8011494:	460c      	mov	r4, r1
 8011496:	ec44 3b10 	vmov	d0, r3, r4
 801149a:	f014 f899 	bl	80255d0 <cos>
 801149e:	ec54 3b10 	vmov	r3, r4, d0
 80114a2:	4618      	mov	r0, r3
 80114a4:	4621      	mov	r1, r4
 80114a6:	f7ef fba7 	bl	8000bf8 <__aeabi_d2f>
 80114aa:	4603      	mov	r3, r0
 80114ac:	60fb      	str	r3, [r7, #12]
		float sinYaw = sin(localPositionSub.yaw);
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80114b4:	4618      	mov	r0, r3
 80114b6:	f7ef f84f 	bl	8000558 <__aeabi_f2d>
 80114ba:	4603      	mov	r3, r0
 80114bc:	460c      	mov	r4, r1
 80114be:	ec44 3b10 	vmov	d0, r3, r4
 80114c2:	f014 f94d 	bl	8025760 <sin>
 80114c6:	ec54 3b10 	vmov	r3, r4, d0
 80114ca:	4618      	mov	r0, r3
 80114cc:	4621      	mov	r1, r4
 80114ce:	f7ef fb93 	bl	8000bf8 <__aeabi_d2f>
 80114d2:	4603      	mov	r3, r0
 80114d4:	60bb      	str	r3, [r7, #8]
		targetX = localPositionSub.x + pitch*cosYaw + -roll*sinYaw;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	ed93 7ae6 	vldr	s14, [r3, #920]	; 0x398
 80114dc:	edd7 6a04 	vldr	s13, [r7, #16]
 80114e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80114e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80114e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80114ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80114f0:	eef1 6a67 	vneg.f32	s13, s15
 80114f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80114f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80114fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8011506:	edc3 7a00 	vstr	s15, [r3]
		targetY = localPositionSub.y + pitch*sinYaw + roll*cosYaw;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	ed93 7ae7 	vldr	s14, [r3, #924]	; 0x39c
 8011510:	edd7 6a04 	vldr	s13, [r7, #16]
 8011514:	edd7 7a02 	vldr	s15, [r7, #8]
 8011518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801151c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011520:	edd7 6a05 	vldr	s13, [r7, #20]
 8011524:	edd7 7a03 	vldr	s15, [r7, #12]
 8011528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801152c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	f203 4334 	addw	r3, r3, #1076	; 0x434
 8011536:	edc3 7a00 	vstr	s15, [r3]
	}
//	targetZ += localPositionSub.z;
//	targetYaw += localPositionSub.yaw;
}
 801153a:	bf00      	nop
 801153c:	371c      	adds	r7, #28
 801153e:	46bd      	mov	sp, r7
 8011540:	ecbd 8b02 	vpop	{d8}
 8011544:	bd90      	pop	{r4, r7, pc}
 8011546:	bf00      	nop
 8011548:	20000bb8 	.word	0x20000bb8
 801154c:	20000bb4 	.word	0x20000bb4
 8011550:	20000bb5 	.word	0x20000bb5
 8011554:	3fc90fd8 	.word	0x3fc90fd8
 8011558:	bfc90fd8 	.word	0xbfc90fd8
 801155c:	20000bb6 	.word	0x20000bb6
 8011560:	20000bb7 	.word	0x20000bb7

08011564 <_ZN2FC24ModulePositionController21setFromAutoControllerEv>:

void ModulePositionController::setFromAutoController(){
 8011564:	b480      	push	{r7}
 8011566:	b083      	sub	sp, #12
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
	//TODO add struct VehiclePositionSP, convert to target
}
 801156c:	bf00      	nop
 801156e:	370c      	adds	r7, #12
 8011570:	46bd      	mov	sp, r7
 8011572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011576:	4770      	bx	lr

08011578 <_ZN2FC6MsgBusC1Ev>:
	MsgBus()
 8011578:	b590      	push	{r4, r7, lr}
 801157a:	b083      	sub	sp, #12
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
		, health{0}
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	461a      	mov	r2, r3
 8011584:	2300      	movs	r3, #0
 8011586:	6013      	str	r3, [r2, #0]
 8011588:	6053      	str	r3, [r2, #4]
 801158a:	6093      	str	r3, [r2, #8]
 801158c:	60d3      	str	r3, [r2, #12]
 801158e:	6113      	str	r3, [r2, #16]
 8011590:	6153      	str	r3, [r2, #20]
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	3318      	adds	r3, #24
 8011596:	2200      	movs	r2, #0
 8011598:	601a      	str	r2, [r3, #0]
 801159a:	605a      	str	r2, [r3, #4]
 801159c:	609a      	str	r2, [r3, #8]
 801159e:	60da      	str	r2, [r3, #12]
 80115a0:	611a      	str	r2, [r3, #16]
 80115a2:	615a      	str	r2, [r3, #20]
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	3330      	adds	r3, #48	; 0x30
 80115a8:	2200      	movs	r2, #0
 80115aa:	601a      	str	r2, [r3, #0]
 80115ac:	605a      	str	r2, [r3, #4]
 80115ae:	609a      	str	r2, [r3, #8]
 80115b0:	60da      	str	r2, [r3, #12]
 80115b2:	611a      	str	r2, [r3, #16]
 80115b4:	615a      	str	r2, [r3, #20]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	3348      	adds	r3, #72	; 0x48
 80115ba:	2248      	movs	r2, #72	; 0x48
 80115bc:	2100      	movs	r1, #0
 80115be:	4618      	mov	r0, r3
 80115c0:	f017 fd0d 	bl	8028fde <memset>
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	3390      	adds	r3, #144	; 0x90
 80115c8:	2200      	movs	r2, #0
 80115ca:	601a      	str	r2, [r3, #0]
 80115cc:	605a      	str	r2, [r3, #4]
 80115ce:	609a      	str	r2, [r3, #8]
 80115d0:	60da      	str	r2, [r3, #12]
 80115d2:	611a      	str	r2, [r3, #16]
 80115d4:	615a      	str	r2, [r3, #20]
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	33a8      	adds	r3, #168	; 0xa8
 80115da:	2200      	movs	r2, #0
 80115dc:	601a      	str	r2, [r3, #0]
 80115de:	605a      	str	r2, [r3, #4]
 80115e0:	609a      	str	r2, [r3, #8]
 80115e2:	60da      	str	r2, [r3, #12]
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	33f0      	adds	r3, #240	; 0xf0
 80115e8:	2228      	movs	r2, #40	; 0x28
 80115ea:	2100      	movs	r1, #0
 80115ec:	4618      	mov	r0, r3
 80115ee:	f017 fcf6 	bl	8028fde <memset>
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80115f8:	2200      	movs	r2, #0
 80115fa:	601a      	str	r2, [r3, #0]
 80115fc:	605a      	str	r2, [r3, #4]
 80115fe:	609a      	str	r2, [r3, #8]
 8011600:	60da      	str	r2, [r3, #12]
 8011602:	611a      	str	r2, [r3, #16]
 8011604:	615a      	str	r2, [r3, #20]
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 801160c:	f04f 0300 	mov.w	r3, #0
 8011610:	f04f 0400 	mov.w	r4, #0
 8011614:	e9c2 3400 	strd	r3, r4, [r2]
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2208      	movs	r2, #8
 801161c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	2200      	movs	r2, #0
 8011624:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 801162e:	2220      	movs	r2, #32
 8011630:	2100      	movs	r1, #0
 8011632:	4618      	mov	r0, r3
 8011634:	f017 fcd3 	bl	8028fde <memset>
	{}
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	4618      	mov	r0, r3
 801163c:	370c      	adds	r7, #12
 801163e:	46bd      	mov	sp, r7
 8011640:	bd90      	pop	{r4, r7, pc}
	...

08011644 <_Z41__static_initialization_and_destruction_0ii>:

namespace FC{

MsgBus msgBus;

}
 8011644:	b580      	push	{r7, lr}
 8011646:	b082      	sub	sp, #8
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
 801164c:	6039      	str	r1, [r7, #0]
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2b01      	cmp	r3, #1
 8011652:	d107      	bne.n	8011664 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8011654:	683b      	ldr	r3, [r7, #0]
 8011656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801165a:	4293      	cmp	r3, r2
 801165c:	d102      	bne.n	8011664 <_Z41__static_initialization_and_destruction_0ii+0x20>
MsgBus msgBus;
 801165e:	4803      	ldr	r0, [pc, #12]	; (801166c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8011660:	f7ff ff8a 	bl	8011578 <_ZN2FC6MsgBusC1Ev>
}
 8011664:	bf00      	nop
 8011666:	3708      	adds	r7, #8
 8011668:	46bd      	mov	sp, r7
 801166a:	bd80      	pop	{r7, pc}
 801166c:	20000bb8 	.word	0x20000bb8

08011670 <_GLOBAL__sub_I__ZN2FC6msgBusE>:
 8011670:	b580      	push	{r7, lr}
 8011672:	af00      	add	r7, sp, #0
 8011674:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011678:	2001      	movs	r0, #1
 801167a:	f7ff ffe3 	bl	8011644 <_Z41__static_initialization_and_destruction_0ii>
 801167e:	bd80      	pop	{r7, pc}

08011680 <_ZN2FC6MsgBus13setControllerERKNS_10ControllerE>:
    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
 8011680:	b490      	push	{r4, r7}
 8011682:	b082      	sub	sp, #8
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
 8011688:	6039      	str	r1, [r7, #0]
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	683a      	ldr	r2, [r7, #0]
 801168e:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8011692:	4613      	mov	r3, r2
 8011694:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011696:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801169a:	bf00      	nop
 801169c:	3708      	adds	r7, #8
 801169e:	46bd      	mov	sp, r7
 80116a0:	bc90      	pop	{r4, r7}
 80116a2:	4770      	bx	lr

080116a4 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 80116a4:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80116a8:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 80116aa:	4b0e      	ldr	r3, [pc, #56]	; (80116e4 <_ZL11microsecondv+0x40>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	4619      	mov	r1, r3
 80116b0:	f04f 0200 	mov.w	r2, #0
 80116b4:	f04f 0b00 	mov.w	fp, #0
 80116b8:	f04f 0c00 	mov.w	ip, #0
 80116bc:	468c      	mov	ip, r1
 80116be:	f04f 0b00 	mov.w	fp, #0
 80116c2:	4a09      	ldr	r2, [pc, #36]	; (80116e8 <_ZL11microsecondv+0x44>)
 80116c4:	6812      	ldr	r2, [r2, #0]
 80116c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80116c8:	4611      	mov	r1, r2
 80116ca:	f04f 0200 	mov.w	r2, #0
 80116ce:	ea4b 0301 	orr.w	r3, fp, r1
 80116d2:	ea4c 0402 	orr.w	r4, ip, r2
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	4621      	mov	r1, r4
 80116da:	46bd      	mov	sp, r7
 80116dc:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80116e0:	4770      	bx	lr
 80116e2:	bf00      	nop
 80116e4:	20000f68 	.word	0x20000f68
 80116e8:	20010f88 	.word	0x20010f88

080116ec <_ZL11millisecondv>:

static __inline uint32_t millisecond(){
 80116ec:	b580      	push	{r7, lr}
 80116ee:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80116f0:	f003 ff98 	bl	8015624 <HAL_GetTick>
 80116f4:	4603      	mov	r3, r0
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	bd80      	pop	{r7, pc}

080116fa <_ZN2FC2RCC1Ev>:

#define ARMING_THRESHOLD 1500

class RC : public Freq<RC>{
public:
	RC() : start(false) {}
 80116fa:	b480      	push	{r7}
 80116fc:	b083      	sub	sp, #12
 80116fe:	af00      	add	r7, sp, #0
 8011700:	6078      	str	r0, [r7, #4]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2200      	movs	r2, #0
 8011706:	761a      	strb	r2, [r3, #24]
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	4618      	mov	r0, r3
 801170c:	370c      	adds	r7, #12
 801170e:	46bd      	mov	sp, r7
 8011710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011714:	4770      	bx	lr
	...

08011718 <_ZN2FC2RC5setRCEtttttt>:
RC rc;

void RC::setRC(uint16_t roll, uint16_t pitch, uint16_t yaw, uint16_t throttle,
    		   uint16_t armming,
			   uint16_t mode)
{
 8011718:	b590      	push	{r4, r7, lr}
 801171a:	b08b      	sub	sp, #44	; 0x2c
 801171c:	af00      	add	r7, sp, #0
 801171e:	60f8      	str	r0, [r7, #12]
 8011720:	4608      	mov	r0, r1
 8011722:	4611      	mov	r1, r2
 8011724:	461a      	mov	r2, r3
 8011726:	4603      	mov	r3, r0
 8011728:	817b      	strh	r3, [r7, #10]
 801172a:	460b      	mov	r3, r1
 801172c:	813b      	strh	r3, [r7, #8]
 801172e:	4613      	mov	r3, r2
 8011730:	80fb      	strh	r3, [r7, #6]
	if(start == false && throttle > MOTOR_CALIBRATION_THROTLE){
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	7e1b      	ldrb	r3, [r3, #24]
 8011736:	f083 0301 	eor.w	r3, r3, #1
 801173a:	b2db      	uxtb	r3, r3
 801173c:	2b00      	cmp	r3, #0
 801173e:	d007      	beq.n	8011750 <_ZN2FC2RC5setRCEtttttt+0x38>
 8011740:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011742:	f240 729e 	movw	r2, #1950	; 0x79e
 8011746:	4293      	cmp	r3, r2
 8011748:	d902      	bls.n	8011750 <_ZN2FC2RC5setRCEtttttt+0x38>
		ModuleCommander::sendCommand(Command::MotorCalibration);
 801174a:	2009      	movs	r0, #9
 801174c:	f7fe ffea 	bl	8010724 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
	}
	start = true;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	2201      	movs	r2, #1
 8011754:	761a      	strb	r2, [r3, #24]

	/* cotnroller publish */
	this->controllerPub.timestamp = microsecond();
 8011756:	f7ff ffa5 	bl	80116a4 <_ZL11microsecondv>
 801175a:	4603      	mov	r3, r0
 801175c:	460c      	mov	r4, r1
 801175e:	68fa      	ldr	r2, [r7, #12]
 8011760:	e9c2 3400 	strd	r3, r4, [r2]
	this->controllerPub.roll = roll;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	897a      	ldrh	r2, [r7, #10]
 8011768:	811a      	strh	r2, [r3, #8]
	this->controllerPub.pitch = pitch;
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	893a      	ldrh	r2, [r7, #8]
 801176e:	815a      	strh	r2, [r3, #10]
	this->controllerPub.yaw = yaw;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	88fa      	ldrh	r2, [r7, #6]
 8011774:	819a      	strh	r2, [r3, #12]
	this->controllerPub.throttle = throttle;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801177a:	81da      	strh	r2, [r3, #14]
	msgBus.setController(this->controllerPub);
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	4619      	mov	r1, r3
 8011780:	483c      	ldr	r0, [pc, #240]	; (8011874 <_ZN2FC2RC5setRCEtttttt+0x15c>)
 8011782:	f7ff ff7d 	bl	8011680 <_ZN2FC6MsgBus13setControllerERKNS_10ControllerE>

	/* arming */
	struct ModeFlag modeFlag;
	msgBus.getModeFlag(&modeFlag);							/* current arm mode */
 8011786:	f107 0310 	add.w	r3, r7, #16
 801178a:	4619      	mov	r1, r3
 801178c:	4839      	ldr	r0, [pc, #228]	; (8011874 <_ZN2FC2RC5setRCEtttttt+0x15c>)
 801178e:	f7fe fc05 	bl	800ff9c <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
	Command rcvArmFlag = Command::DisArm;						/* request arm mode */
 8011792:	2308      	movs	r3, #8
 8011794:	627b      	str	r3, [r7, #36]	; 0x24
	if( armming > ARMING_THRESHOLD ) rcvArmFlag = Command::Arm;
 8011796:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011798:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801179c:	4293      	cmp	r3, r2
 801179e:	d901      	bls.n	80117a4 <_ZN2FC2RC5setRCEtttttt+0x8c>
 80117a0:	2307      	movs	r3, #7
 80117a2:	627b      	str	r3, [r7, #36]	; 0x24
	if(modeFlag.armMode != rcvArmFlag && millisecond()-lastArmReq > 500){
 80117a4:	69bb      	ldr	r3, [r7, #24]
 80117a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117a8:	429a      	cmp	r2, r3
 80117aa:	d00a      	beq.n	80117c2 <_ZN2FC2RC5setRCEtttttt+0xaa>
 80117ac:	f7ff ff9e 	bl	80116ec <_ZL11millisecondv>
 80117b0:	4602      	mov	r2, r0
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	691b      	ldr	r3, [r3, #16]
 80117b6:	1ad3      	subs	r3, r2, r3
 80117b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80117bc:	d901      	bls.n	80117c2 <_ZN2FC2RC5setRCEtttttt+0xaa>
 80117be:	2301      	movs	r3, #1
 80117c0:	e000      	b.n	80117c4 <_ZN2FC2RC5setRCEtttttt+0xac>
 80117c2:	2300      	movs	r3, #0
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d007      	beq.n	80117d8 <_ZN2FC2RC5setRCEtttttt+0xc0>
		ModuleCommander::sendCommand(rcvArmFlag); /* send command */
 80117c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80117ca:	f7fe ffab 	bl	8010724 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
		lastArmReq = millisecond();
 80117ce:	f7ff ff8d 	bl	80116ec <_ZL11millisecondv>
 80117d2:	4602      	mov	r2, r0
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	611a      	str	r2, [r3, #16]
	}

	if(millisecond() - lastModeReq > 500){
 80117d8:	f7ff ff88 	bl	80116ec <_ZL11millisecondv>
 80117dc:	4602      	mov	r2, r0
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	695b      	ldr	r3, [r3, #20]
 80117e2:	1ad3      	subs	r3, r2, r3
 80117e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80117e8:	bf8c      	ite	hi
 80117ea:	2301      	movhi	r3, #1
 80117ec:	2300      	movls	r3, #0
 80117ee:	b2db      	uxtb	r3, r3
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d034      	beq.n	801185e <_ZN2FC2RC5setRCEtttttt+0x146>
		if(mode > FLIGHT_ATTITUDE_MODE_THRSHOLD){
 80117f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80117f8:	f240 726c 	movw	r2, #1900	; 0x76c
 80117fc:	4293      	cmp	r3, r2
 80117fe:	d90b      	bls.n	8011818 <_ZN2FC2RC5setRCEtttttt+0x100>
			if(modeFlag.flightMode != Command::ControlAttitude){
 8011800:	69fb      	ldr	r3, [r7, #28]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d02b      	beq.n	801185e <_ZN2FC2RC5setRCEtttttt+0x146>
				ModuleCommander::sendCommand(Command::ControlAttitude); /* send command */
 8011806:	2000      	movs	r0, #0
 8011808:	f7fe ff8c 	bl	8010724 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 801180c:	f7ff ff6e 	bl	80116ec <_ZL11millisecondv>
 8011810:	4602      	mov	r2, r0
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	615a      	str	r2, [r3, #20]
 8011816:	e022      	b.n	801185e <_ZN2FC2RC5setRCEtttttt+0x146>
			}
		}
		else if(mode > FLIGHT_POSITION_MODE_THRSHOLD){
 8011818:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801181c:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8011820:	4293      	cmp	r3, r2
 8011822:	d90b      	bls.n	801183c <_ZN2FC2RC5setRCEtttttt+0x124>
			if(modeFlag.flightMode != Command::ControlPosition){
 8011824:	69fb      	ldr	r3, [r7, #28]
 8011826:	2b01      	cmp	r3, #1
 8011828:	d019      	beq.n	801185e <_ZN2FC2RC5setRCEtttttt+0x146>
				ModuleCommander::sendCommand(Command::ControlPosition); /* send command */
 801182a:	2001      	movs	r0, #1
 801182c:	f7fe ff7a 	bl	8010724 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 8011830:	f7ff ff5c 	bl	80116ec <_ZL11millisecondv>
 8011834:	4602      	mov	r2, r0
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	615a      	str	r2, [r3, #20]
 801183a:	e010      	b.n	801185e <_ZN2FC2RC5setRCEtttttt+0x146>
			}
		}
		else if(mode > FLIGHT_AUTO_MODE_THRSHOLD){ /* FLIGHT_AUTO_MODE_THRSHOLD */
 801183c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011840:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8011844:	4293      	cmp	r3, r2
 8011846:	d90a      	bls.n	801185e <_ZN2FC2RC5setRCEtttttt+0x146>
			if(modeFlag.flightMode != Command::AutoWaypoint){
 8011848:	69fb      	ldr	r3, [r7, #28]
 801184a:	2b02      	cmp	r3, #2
 801184c:	d007      	beq.n	801185e <_ZN2FC2RC5setRCEtttttt+0x146>
				ModuleCommander::sendCommand(Command::ControlPosition); /* send command */
 801184e:	2001      	movs	r0, #1
 8011850:	f7fe ff68 	bl	8010724 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 8011854:	f7ff ff4a 	bl	80116ec <_ZL11millisecondv>
 8011858:	4602      	mov	r2, r0
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	615a      	str	r2, [r3, #20]
			}
		}
	}

	/* Freq class variable */
	freqCnt++;
 801185e:	4b06      	ldr	r3, [pc, #24]	; (8011878 <_ZN2FC2RC5setRCEtttttt+0x160>)
 8011860:	881b      	ldrh	r3, [r3, #0]
 8011862:	3301      	adds	r3, #1
 8011864:	b29a      	uxth	r2, r3
 8011866:	4b04      	ldr	r3, [pc, #16]	; (8011878 <_ZN2FC2RC5setRCEtttttt+0x160>)
 8011868:	801a      	strh	r2, [r3, #0]
}
 801186a:	bf00      	nop
 801186c:	372c      	adds	r7, #44	; 0x2c
 801186e:	46bd      	mov	sp, r7
 8011870:	bd90      	pop	{r4, r7, pc}
 8011872:	bf00      	nop
 8011874:	20000bb8 	.word	0x20000bb8
 8011878:	20000f90 	.word	0x20000f90

0801187c <_Z41__static_initialization_and_destruction_0ii>:
}
 801187c:	b580      	push	{r7, lr}
 801187e:	b082      	sub	sp, #8
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
 8011884:	6039      	str	r1, [r7, #0]
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	2b01      	cmp	r3, #1
 801188a:	d107      	bne.n	801189c <_Z41__static_initialization_and_destruction_0ii+0x20>
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011892:	4293      	cmp	r3, r2
 8011894:	d102      	bne.n	801189c <_Z41__static_initialization_and_destruction_0ii+0x20>
RC rc;
 8011896:	4803      	ldr	r0, [pc, #12]	; (80118a4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8011898:	f7ff ff2f 	bl	80116fa <_ZN2FC2RCC1Ev>
}
 801189c:	bf00      	nop
 801189e:	3708      	adds	r7, #8
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}
 80118a4:	20000f70 	.word	0x20000f70

080118a8 <_GLOBAL__sub_I__ZN2FC2rcE>:
 80118a8:	b580      	push	{r7, lr}
 80118aa:	af00      	add	r7, sp, #0
 80118ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80118b0:	2001      	movs	r0, #1
 80118b2:	f7ff ffe3 	bl	801187c <_Z41__static_initialization_and_destruction_0ii>
 80118b6:	bd80      	pop	{r7, pc}

080118b8 <_ZN2FC6MsgBus12setBodyAccelERKNS_9BodyAccelE>:
    SIMPLE_FUNC_IMPL(BodyAccel, BodyAccel, bodyAccel)
 80118b8:	b4b0      	push	{r4, r5, r7}
 80118ba:	b083      	sub	sp, #12
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
 80118c0:	6039      	str	r1, [r7, #0]
 80118c2:	687a      	ldr	r2, [r7, #4]
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	4614      	mov	r4, r2
 80118c8:	461d      	mov	r5, r3
 80118ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80118d2:	e884 0003 	stmia.w	r4, {r0, r1}
 80118d6:	bf00      	nop
 80118d8:	370c      	adds	r7, #12
 80118da:	46bd      	mov	sp, r7
 80118dc:	bcb0      	pop	{r4, r5, r7}
 80118de:	4770      	bx	lr

080118e0 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 80118e0:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80118e4:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 80118e6:	4b0e      	ldr	r3, [pc, #56]	; (8011920 <_ZL11microsecondv+0x40>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	4619      	mov	r1, r3
 80118ec:	f04f 0200 	mov.w	r2, #0
 80118f0:	f04f 0b00 	mov.w	fp, #0
 80118f4:	f04f 0c00 	mov.w	ip, #0
 80118f8:	468c      	mov	ip, r1
 80118fa:	f04f 0b00 	mov.w	fp, #0
 80118fe:	4a09      	ldr	r2, [pc, #36]	; (8011924 <_ZL11microsecondv+0x44>)
 8011900:	6812      	ldr	r2, [r2, #0]
 8011902:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011904:	4611      	mov	r1, r2
 8011906:	f04f 0200 	mov.w	r2, #0
 801190a:	ea4b 0301 	orr.w	r3, fp, r1
 801190e:	ea4c 0402 	orr.w	r4, ip, r2
}
 8011912:	4618      	mov	r0, r3
 8011914:	4621      	mov	r1, r4
 8011916:	46bd      	mov	sp, r7
 8011918:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 801191c:	4770      	bx	lr
 801191e:	bf00      	nop
 8011920:	20000f94 	.word	0x20000f94
 8011924:	20010f88 	.word	0x20010f88

08011928 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>:

    /*
     *  signal to AHRS main function
     *  this function is called by SensorAccel, SensorGyro (peripheral interface)
     */
    static inline void setSignal(enum AhrsSignal signal){
 8011928:	b580      	push	{r7, lr}
 801192a:	b082      	sub	sp, #8
 801192c:	af00      	add	r7, sp, #0
 801192e:	4603      	mov	r3, r0
 8011930:	71fb      	strb	r3, [r7, #7]
    	switch(signal){
 8011932:	79fb      	ldrb	r3, [r7, #7]
 8011934:	2b01      	cmp	r3, #1
 8011936:	d002      	beq.n	801193e <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x16>
 8011938:	2b02      	cmp	r3, #2
 801193a:	d008      	beq.n	801194e <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x26>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromAccel);
        	break;
    	case AHRS_fromGyro:
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromGyro);
    	}
    }
 801193c:	e00d      	b.n	801195a <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x32>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromAccel);
 801193e:	4b09      	ldr	r3, [pc, #36]	; (8011964 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x3c>)
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	2101      	movs	r1, #1
 8011944:	4618      	mov	r0, r3
 8011946:	f00f fe25 	bl	8021594 <osThreadFlagsSet>
        	break;
 801194a:	bf00      	nop
    }
 801194c:	e005      	b.n	801195a <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x32>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromGyro);
 801194e:	4b05      	ldr	r3, [pc, #20]	; (8011964 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x3c>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	2102      	movs	r1, #2
 8011954:	4618      	mov	r0, r3
 8011956:	f00f fe1d 	bl	8021594 <osThreadFlagsSet>
    }
 801195a:	bf00      	nop
 801195c:	3708      	adds	r7, #8
 801195e:	46bd      	mov	sp, r7
 8011960:	bd80      	pop	{r7, pc}
 8011962:	bf00      	nop
 8011964:	2000e334 	.word	0x2000e334

08011968 <_ZN2FC11SensorAccelC1Ev>:

namespace FC{

SensorAccel sensorAccel;

SensorAccel::SensorAccel()
 8011968:	b480      	push	{r7}
 801196a:	b083      	sub	sp, #12
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
: bodyAccel{0,}, biasX(0), biasY(0), biasZ(0)
, averX(0), averY(0), averZ(0)
, calBiasFlag(false), averageIndex(0)
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	461a      	mov	r2, r3
 8011974:	2300      	movs	r3, #0
 8011976:	6013      	str	r3, [r2, #0]
 8011978:	6053      	str	r3, [r2, #4]
 801197a:	6093      	str	r3, [r2, #8]
 801197c:	60d3      	str	r3, [r2, #12]
 801197e:	6113      	str	r3, [r2, #16]
 8011980:	6153      	str	r3, [r2, #20]
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f04f 0200 	mov.w	r2, #0
 8011988:	619a      	str	r2, [r3, #24]
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	f04f 0200 	mov.w	r2, #0
 8011990:	61da      	str	r2, [r3, #28]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	f04f 0200 	mov.w	r2, #0
 8011998:	621a      	str	r2, [r3, #32]
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f04f 0200 	mov.w	r2, #0
 80119a0:	625a      	str	r2, [r3, #36]	; 0x24
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f04f 0200 	mov.w	r2, #0
 80119a8:	629a      	str	r2, [r3, #40]	; 0x28
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	f04f 0200 	mov.w	r2, #0
 80119b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2200      	movs	r2, #0
 80119b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	2200      	movs	r2, #0
 80119be:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
{}
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	4618      	mov	r0, r3
 80119c6:	370c      	adds	r7, #12
 80119c8:	46bd      	mov	sp, r7
 80119ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ce:	4770      	bx	lr

080119d0 <_ZN2FC11SensorAccel7setBiasEv>:

void SensorAccel::setBias(){
 80119d0:	b480      	push	{r7}
 80119d2:	b083      	sub	sp, #12
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
	calBiasFlag = true;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2201      	movs	r2, #1
 80119dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	averageIndex = 0;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2200      	movs	r2, #0
 80119e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	averX = 0;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f04f 0200 	mov.w	r2, #0
 80119ee:	625a      	str	r2, [r3, #36]	; 0x24
	averY = 0;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f04f 0200 	mov.w	r2, #0
 80119f6:	629a      	str	r2, [r3, #40]	; 0x28
	averZ = 0;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	f04f 0200 	mov.w	r2, #0
 80119fe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011a00:	bf00      	nop
 8011a02:	370c      	adds	r7, #12
 8011a04:	46bd      	mov	sp, r7
 8011a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0a:	4770      	bx	lr

08011a0c <_ZN2FC11SensorAccel8setAccelEfff>:

void SensorAccel::setAccel(float x, float y, float z){
 8011a0c:	b590      	push	{r4, r7, lr}
 8011a0e:	b085      	sub	sp, #20
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	60f8      	str	r0, [r7, #12]
 8011a14:	ed87 0a02 	vstr	s0, [r7, #8]
 8011a18:	edc7 0a01 	vstr	s1, [r7, #4]
 8011a1c:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8011a20:	edd7 7a02 	vldr	s15, [r7, #8]
 8011a24:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a2c:	d10d      	bne.n	8011a4a <_ZN2FC11SensorAccel8setAccelEfff+0x3e>
 8011a2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8011a32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a3a:	d106      	bne.n	8011a4a <_ZN2FC11SensorAccel8setAccelEfff+0x3e>
 8011a3c:	edd7 7a00 	vldr	s15, [r7]
 8011a40:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a48:	d041      	beq.n	8011ace <_ZN2FC11SensorAccel8setAccelEfff+0xc2>

	if(calBiasFlag) calAverage(x, y, z);
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d008      	beq.n	8011a66 <_ZN2FC11SensorAccel8setAccelEfff+0x5a>
 8011a54:	ed97 1a00 	vldr	s2, [r7]
 8011a58:	edd7 0a01 	vldr	s1, [r7, #4]
 8011a5c:	ed97 0a02 	vldr	s0, [r7, #8]
 8011a60:	68f8      	ldr	r0, [r7, #12]
 8011a62:	f000 f83d 	bl	8011ae0 <_ZN2FC11SensorAccel10calAverageEfff>

	this->bodyAccel.timestamp = microsecond();
 8011a66:	f7ff ff3b 	bl	80118e0 <_ZL11microsecondv>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	460c      	mov	r4, r1
 8011a6e:	68fa      	ldr	r2, [r7, #12]
 8011a70:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyAccel.xyz[0] = x - biasX;
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	edd3 7a06 	vldr	s15, [r3, #24]
 8011a7a:	ed97 7a02 	vldr	s14, [r7, #8]
 8011a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	edc3 7a02 	vstr	s15, [r3, #8]
	this->bodyAccel.xyz[1] = y - biasY;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	edd3 7a07 	vldr	s15, [r3, #28]
 8011a8e:	ed97 7a01 	vldr	s14, [r7, #4]
 8011a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	edc3 7a03 	vstr	s15, [r3, #12]
	this->bodyAccel.xyz[2] = z - biasZ;
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	edd3 7a08 	vldr	s15, [r3, #32]
 8011aa2:	ed97 7a00 	vldr	s14, [r7]
 8011aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	edc3 7a04 	vstr	s15, [r3, #16]
	msgBus.setBodyAccel(this->bodyAccel);
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	4619      	mov	r1, r3
 8011ab4:	4808      	ldr	r0, [pc, #32]	; (8011ad8 <_ZN2FC11SensorAccel8setAccelEfff+0xcc>)
 8011ab6:	f7ff feff 	bl	80118b8 <_ZN2FC6MsgBus12setBodyAccelERKNS_9BodyAccelE>
	ModuleAHRS::setSignal(AHRS_fromAccel);
 8011aba:	2001      	movs	r0, #1
 8011abc:	f7ff ff34 	bl	8011928 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>

	/* Freq class variable */
	freqCnt++;
 8011ac0:	4b06      	ldr	r3, [pc, #24]	; (8011adc <_ZN2FC11SensorAccel8setAccelEfff+0xd0>)
 8011ac2:	881b      	ldrh	r3, [r3, #0]
 8011ac4:	3301      	adds	r3, #1
 8011ac6:	b29a      	uxth	r2, r3
 8011ac8:	4b04      	ldr	r3, [pc, #16]	; (8011adc <_ZN2FC11SensorAccel8setAccelEfff+0xd0>)
 8011aca:	801a      	strh	r2, [r3, #0]
 8011acc:	e000      	b.n	8011ad0 <_ZN2FC11SensorAccel8setAccelEfff+0xc4>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8011ace:	bf00      	nop
}
 8011ad0:	3714      	adds	r7, #20
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd90      	pop	{r4, r7, pc}
 8011ad6:	bf00      	nop
 8011ad8:	20000bb8 	.word	0x20000bb8
 8011adc:	20000fd0 	.word	0x20000fd0

08011ae0 <_ZN2FC11SensorAccel10calAverageEfff>:

void SensorAccel::calAverage(float x, float y, float z){
 8011ae0:	b590      	push	{r4, r7, lr}
 8011ae2:	b087      	sub	sp, #28
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	60f8      	str	r0, [r7, #12]
 8011ae8:	ed87 0a02 	vstr	s0, [r7, #8]
 8011aec:	edc7 0a01 	vstr	s1, [r7, #4]
 8011af0:	ed87 1a00 	vstr	s2, [r7]
	float alpha = (averageIndex-1)/averageIndex;
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011afa:	3b01      	subs	r3, #1
 8011afc:	68fa      	ldr	r2, [r7, #12]
 8011afe:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8011b02:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b06:	ee07 3a90 	vmov	s15, r3
 8011b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b0e:	edc7 7a05 	vstr	s15, [r7, #20]
	averX = alpha*averX + (1-alpha)*x;
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8011b18:	edd7 7a05 	vldr	s15, [r7, #20]
 8011b1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011b20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011b24:	edd7 7a05 	vldr	s15, [r7, #20]
 8011b28:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011b2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8011b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	averY = alpha*averY + (1-alpha)*y;
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8011b44:	edd7 7a05 	vldr	s15, [r7, #20]
 8011b48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011b4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011b50:	edd7 7a05 	vldr	s15, [r7, #20]
 8011b54:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011b58:	edd7 7a01 	vldr	s15, [r7, #4]
 8011b5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	averZ = alpha*averZ + (1-alpha)*z;
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8011b70:	edd7 7a05 	vldr	s15, [r7, #20]
 8011b74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011b78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011b7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011b80:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011b84:	edd7 7a00 	vldr	s15, [r7]
 8011b88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	averageIndex++;
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011b9c:	3301      	adds	r3, #1
 8011b9e:	b2da      	uxtb	r2, r3
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	if(averageIndex > AVERAGE_SIZE) {
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011bac:	2b14      	cmp	r3, #20
 8011bae:	d91e      	bls.n	8011bee <_ZN2FC11SensorAccel10calAverageEfff+0x10e>
		calBiasFlag = false;
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		biasX = averX;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	619a      	str	r2, [r3, #24]
		biasY = averY;
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	61da      	str	r2, [r3, #28]
		biasZ = averZ - FC_GRAVITY_ACCEERATION;
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f7ee fcc3 	bl	8000558 <__aeabi_f2d>
 8011bd2:	a309      	add	r3, pc, #36	; (adr r3, 8011bf8 <_ZN2FC11SensorAccel10calAverageEfff+0x118>)
 8011bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd8:	f7ee fb5e 	bl	8000298 <__aeabi_dsub>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	460c      	mov	r4, r1
 8011be0:	4618      	mov	r0, r3
 8011be2:	4621      	mov	r1, r4
 8011be4:	f7ef f808 	bl	8000bf8 <__aeabi_d2f>
 8011be8:	4602      	mov	r2, r0
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	621a      	str	r2, [r3, #32]
	}
}
 8011bee:	bf00      	nop
 8011bf0:	371c      	adds	r7, #28
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd90      	pop	{r4, r7, pc}
 8011bf6:	bf00      	nop
 8011bf8:	3a92a305 	.word	0x3a92a305
 8011bfc:	40239d01 	.word	0x40239d01

08011c00 <_Z41__static_initialization_and_destruction_0ii>:

}
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b082      	sub	sp, #8
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	6039      	str	r1, [r7, #0]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d107      	bne.n	8011c20 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c16:	4293      	cmp	r3, r2
 8011c18:	d102      	bne.n	8011c20 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorAccel sensorAccel;
 8011c1a:	4803      	ldr	r0, [pc, #12]	; (8011c28 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8011c1c:	f7ff fea4 	bl	8011968 <_ZN2FC11SensorAccelC1Ev>
}
 8011c20:	bf00      	nop
 8011c22:	3708      	adds	r7, #8
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}
 8011c28:	20000f98 	.word	0x20000f98

08011c2c <_GLOBAL__sub_I__ZN2FC11sensorAccelE>:
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	af00      	add	r7, sp, #0
 8011c30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011c34:	2001      	movs	r0, #1
 8011c36:	f7ff ffe3 	bl	8011c00 <_Z41__static_initialization_and_destruction_0ii>
 8011c3a:	bd80      	pop	{r7, pc}

08011c3c <_ZN2FC6MsgBus12setBarometerERKNS_9BarometerE>:
    SIMPLE_FUNC_IMPL(Barometer, Barometer, barometer)
 8011c3c:	b4b0      	push	{r4, r5, r7}
 8011c3e:	b083      	sub	sp, #12
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
 8011c44:	6039      	str	r1, [r7, #0]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	683a      	ldr	r2, [r7, #0]
 8011c4a:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8011c4e:	4615      	mov	r5, r2
 8011c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011c58:	e884 0003 	stmia.w	r4, {r0, r1}
 8011c5c:	bf00      	nop
 8011c5e:	370c      	adds	r7, #12
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bcb0      	pop	{r4, r5, r7}
 8011c64:	4770      	bx	lr
	...

08011c68 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8011c68:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8011c6c:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 8011c6e:	4b0e      	ldr	r3, [pc, #56]	; (8011ca8 <_ZL11microsecondv+0x40>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	4619      	mov	r1, r3
 8011c74:	f04f 0200 	mov.w	r2, #0
 8011c78:	f04f 0b00 	mov.w	fp, #0
 8011c7c:	f04f 0c00 	mov.w	ip, #0
 8011c80:	468c      	mov	ip, r1
 8011c82:	f04f 0b00 	mov.w	fp, #0
 8011c86:	4a09      	ldr	r2, [pc, #36]	; (8011cac <_ZL11microsecondv+0x44>)
 8011c88:	6812      	ldr	r2, [r2, #0]
 8011c8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011c8c:	4611      	mov	r1, r2
 8011c8e:	f04f 0200 	mov.w	r2, #0
 8011c92:	ea4b 0301 	orr.w	r3, fp, r1
 8011c96:	ea4c 0402 	orr.w	r4, ip, r2
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	4621      	mov	r1, r4
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8011ca4:	4770      	bx	lr
 8011ca6:	bf00      	nop
 8011ca8:	20000fd4 	.word	0x20000fd4
 8011cac:	20010f88 	.word	0x20010f88

08011cb0 <_ZN2FC10SensorBaroC1Ev>:

namespace FC{

class SensorBaro : public Freq<SensorBaro>{
public:
	SensorBaro()
 8011cb0:	b480      	push	{r7}
 8011cb2:	b083      	sub	sp, #12
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
	: barometerPub{0, }
	, seaLevelPressure(1013.25)
	, pressure(0)
	, temperature(0)
	, altitude(0)
	, refAltitude(0)
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	461a      	mov	r2, r3
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	6013      	str	r3, [r2, #0]
 8011cc0:	6053      	str	r3, [r2, #4]
 8011cc2:	6093      	str	r3, [r2, #8]
 8011cc4:	60d3      	str	r3, [r2, #12]
 8011cc6:	6113      	str	r3, [r2, #16]
 8011cc8:	6153      	str	r3, [r2, #20]
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	4a0c      	ldr	r2, [pc, #48]	; (8011d00 <_ZN2FC10SensorBaroC1Ev+0x50>)
 8011cce:	619a      	str	r2, [r3, #24]
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	f04f 0200 	mov.w	r2, #0
 8011cd6:	61da      	str	r2, [r3, #28]
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f04f 0200 	mov.w	r2, #0
 8011cde:	621a      	str	r2, [r3, #32]
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f04f 0200 	mov.w	r2, #0
 8011ce6:	625a      	str	r2, [r3, #36]	; 0x24
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	f04f 0200 	mov.w	r2, #0
 8011cee:	629a      	str	r2, [r3, #40]	; 0x28
	{}
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	370c      	adds	r7, #12
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfc:	4770      	bx	lr
 8011cfe:	bf00      	nop
 8011d00:	447d5000 	.word	0x447d5000

08011d04 <_ZN2FC10SensorBaro7setBaroEff>:

namespace FC{

SensorBaro sensorBaro;

void SensorBaro::setBaro(float pressure, float temperature){
 8011d04:	b590      	push	{r4, r7, lr}
 8011d06:	b085      	sub	sp, #20
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	60f8      	str	r0, [r7, #12]
 8011d0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8011d10:	edc7 0a01 	vstr	s1, [r7, #4]
	/* invalid pressure */
	if(pressure > 1200.0 || pressure < 900.0) return;
 8011d14:	edd7 7a02 	vldr	s15, [r7, #8]
 8011d18:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8011db8 <_ZN2FC10SensorBaro7setBaroEff+0xb4>
 8011d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d24:	dc43      	bgt.n	8011dae <_ZN2FC10SensorBaro7setBaroEff+0xaa>
 8011d26:	edd7 7a02 	vldr	s15, [r7, #8]
 8011d2a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8011dbc <_ZN2FC10SensorBaro7setBaroEff+0xb8>
 8011d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d36:	d43a      	bmi.n	8011dae <_ZN2FC10SensorBaro7setBaroEff+0xaa>

	this->pressure = pressure;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	68ba      	ldr	r2, [r7, #8]
 8011d3c:	61da      	str	r2, [r3, #28]
	this->temperature = temperature;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	687a      	ldr	r2, [r7, #4]
 8011d42:	621a      	str	r2, [r3, #32]
	this->altitude = calAltitude(seaLevelPressure, pressure);
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	edd3 7a06 	vldr	s15, [r3, #24]
 8011d4a:	edd7 0a02 	vldr	s1, [r7, #8]
 8011d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8011d52:	68f8      	ldr	r0, [r7, #12]
 8011d54:	f000 f86c 	bl	8011e30 <_ZN2FC10SensorBaro11calAltitudeEff>
 8011d58:	eef0 7a40 	vmov.f32	s15, s0
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	this->barometerPub.timestamp = microsecond();
 8011d62:	f7ff ff81 	bl	8011c68 <_ZL11microsecondv>
 8011d66:	4603      	mov	r3, r0
 8011d68:	460c      	mov	r4, r1
 8011d6a:	68fa      	ldr	r2, [r7, #12]
 8011d6c:	e9c2 3400 	strd	r3, r4, [r2]
	this->barometerPub.pressure = this->pressure;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	69da      	ldr	r2, [r3, #28]
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	609a      	str	r2, [r3, #8]
	this->barometerPub.temperature = this->temperature;
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	6a1a      	ldr	r2, [r3, #32]
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	60da      	str	r2, [r3, #12]
	this->barometerPub.altitude = this->altitude - refAltitude;
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8011d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	edc3 7a04 	vstr	s15, [r3, #16]

	msgBus.setBarometer(this->barometerPub);
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	4619      	mov	r1, r3
 8011d9a:	4809      	ldr	r0, [pc, #36]	; (8011dc0 <_ZN2FC10SensorBaro7setBaroEff+0xbc>)
 8011d9c:	f7ff ff4e 	bl	8011c3c <_ZN2FC6MsgBus12setBarometerERKNS_9BarometerE>

	/* Freq class variable */
	freqCnt++;
 8011da0:	4b08      	ldr	r3, [pc, #32]	; (8011dc4 <_ZN2FC10SensorBaro7setBaroEff+0xc0>)
 8011da2:	881b      	ldrh	r3, [r3, #0]
 8011da4:	3301      	adds	r3, #1
 8011da6:	b29a      	uxth	r2, r3
 8011da8:	4b06      	ldr	r3, [pc, #24]	; (8011dc4 <_ZN2FC10SensorBaro7setBaroEff+0xc0>)
 8011daa:	801a      	strh	r2, [r3, #0]
 8011dac:	e000      	b.n	8011db0 <_ZN2FC10SensorBaro7setBaroEff+0xac>
	if(pressure > 1200.0 || pressure < 900.0) return;
 8011dae:	bf00      	nop
}
 8011db0:	3714      	adds	r7, #20
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd90      	pop	{r4, r7, pc}
 8011db6:	bf00      	nop
 8011db8:	44960000 	.word	0x44960000
 8011dbc:	44610000 	.word	0x44610000
 8011dc0:	20000bb8 	.word	0x20000bb8
 8011dc4:	20001008 	.word	0x20001008

08011dc8 <_ZN2FC10SensorBaro19setSeaLevelPressureEf>:

void SensorBaro::setSeaLevelPressure(float altitude){
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b082      	sub	sp, #8
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	ed87 0a00 	vstr	s0, [r7]
	seaLevelPressure = calSeaLevelPressure(altitude, pressure);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	edd3 7a07 	vldr	s15, [r3, #28]
 8011dda:	eef0 0a67 	vmov.f32	s1, s15
 8011dde:	ed97 0a00 	vldr	s0, [r7]
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f000 f86c 	bl	8011ec0 <_ZN2FC10SensorBaro19calSeaLevelPressureEff>
 8011de8:	eef0 7a40 	vmov.f32	s15, s0
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8011df2:	bf00      	nop
 8011df4:	3708      	adds	r7, #8
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}

08011dfa <_ZN2FC10SensorBaro14setRefAltitudeEv>:

void SensorBaro::setRefAltitude(){
 8011dfa:	b580      	push	{r7, lr}
 8011dfc:	b082      	sub	sp, #8
 8011dfe:	af00      	add	r7, sp, #0
 8011e00:	6078      	str	r0, [r7, #4]
	refAltitude = calAltitude(seaLevelPressure, pressure);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	edd3 7a06 	vldr	s15, [r3, #24]
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	ed93 7a07 	vldr	s14, [r3, #28]
 8011e0e:	eef0 0a47 	vmov.f32	s1, s14
 8011e12:	eeb0 0a67 	vmov.f32	s0, s15
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f000 f80a 	bl	8011e30 <_ZN2FC10SensorBaro11calAltitudeEff>
 8011e1c:	eef0 7a40 	vmov.f32	s15, s0
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8011e26:	bf00      	nop
 8011e28:	3708      	adds	r7, #8
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	bd80      	pop	{r7, pc}
	...

08011e30 <_ZN2FC10SensorBaro11calAltitudeEff>:

float SensorBaro::calAltitude(float seaLevel, float pressure){
 8011e30:	b590      	push	{r4, r7, lr}
 8011e32:	b085      	sub	sp, #20
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	60f8      	str	r0, [r7, #12]
 8011e38:	ed87 0a02 	vstr	s0, [r7, #8]
 8011e3c:	edc7 0a01 	vstr	s1, [r7, #4]
	return 44330.0 * (1.0 - pow(pressure / seaLevel, 0.1903));
 8011e40:	ed97 7a01 	vldr	s14, [r7, #4]
 8011e44:	edd7 7a02 	vldr	s15, [r7, #8]
 8011e48:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011e4c:	ee16 0a90 	vmov	r0, s13
 8011e50:	f7ee fb82 	bl	8000558 <__aeabi_f2d>
 8011e54:	4603      	mov	r3, r0
 8011e56:	460c      	mov	r4, r1
 8011e58:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8011ea8 <_ZN2FC10SensorBaro11calAltitudeEff+0x78>
 8011e5c:	ec44 3b10 	vmov	d0, r3, r4
 8011e60:	f013 fe88 	bl	8025b74 <pow>
 8011e64:	ec54 3b10 	vmov	r3, r4, d0
 8011e68:	461a      	mov	r2, r3
 8011e6a:	4623      	mov	r3, r4
 8011e6c:	f04f 0000 	mov.w	r0, #0
 8011e70:	4911      	ldr	r1, [pc, #68]	; (8011eb8 <_ZN2FC10SensorBaro11calAltitudeEff+0x88>)
 8011e72:	f7ee fa11 	bl	8000298 <__aeabi_dsub>
 8011e76:	4603      	mov	r3, r0
 8011e78:	460c      	mov	r4, r1
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	4621      	mov	r1, r4
 8011e7e:	a30c      	add	r3, pc, #48	; (adr r3, 8011eb0 <_ZN2FC10SensorBaro11calAltitudeEff+0x80>)
 8011e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e84:	f7ee fbc0 	bl	8000608 <__aeabi_dmul>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	460c      	mov	r4, r1
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	4621      	mov	r1, r4
 8011e90:	f7ee feb2 	bl	8000bf8 <__aeabi_d2f>
 8011e94:	4603      	mov	r3, r0
 8011e96:	ee07 3a90 	vmov	s15, r3
}
 8011e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8011e9e:	3714      	adds	r7, #20
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd90      	pop	{r4, r7, pc}
 8011ea4:	f3af 8000 	nop.w
 8011ea8:	1a36e2eb 	.word	0x1a36e2eb
 8011eac:	3fc85bc0 	.word	0x3fc85bc0
 8011eb0:	00000000 	.word	0x00000000
 8011eb4:	40e5a540 	.word	0x40e5a540
 8011eb8:	3ff00000 	.word	0x3ff00000
 8011ebc:	00000000 	.word	0x00000000

08011ec0 <_ZN2FC10SensorBaro19calSeaLevelPressureEff>:

float SensorBaro::calSeaLevelPressure(float altitude, float pressure){
 8011ec0:	b5b0      	push	{r4, r5, r7, lr}
 8011ec2:	b084      	sub	sp, #16
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	60f8      	str	r0, [r7, #12]
 8011ec8:	ed87 0a02 	vstr	s0, [r7, #8]
 8011ecc:	edc7 0a01 	vstr	s1, [r7, #4]
	return pressure / pow(1.0 - (altitude / 44330.0), 5.255);
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	f7ee fb41 	bl	8000558 <__aeabi_f2d>
 8011ed6:	4604      	mov	r4, r0
 8011ed8:	460d      	mov	r5, r1
 8011eda:	68b8      	ldr	r0, [r7, #8]
 8011edc:	f7ee fb3c 	bl	8000558 <__aeabi_f2d>
 8011ee0:	a318      	add	r3, pc, #96	; (adr r3, 8011f44 <_ZN2FC10SensorBaro19calSeaLevelPressureEff+0x84>)
 8011ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee6:	f7ee fcb9 	bl	800085c <__aeabi_ddiv>
 8011eea:	4602      	mov	r2, r0
 8011eec:	460b      	mov	r3, r1
 8011eee:	f04f 0000 	mov.w	r0, #0
 8011ef2:	4913      	ldr	r1, [pc, #76]	; (8011f40 <_ZN2FC10SensorBaro19calSeaLevelPressureEff+0x80>)
 8011ef4:	f7ee f9d0 	bl	8000298 <__aeabi_dsub>
 8011ef8:	4602      	mov	r2, r0
 8011efa:	460b      	mov	r3, r1
 8011efc:	ec43 2b17 	vmov	d7, r2, r3
 8011f00:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8011f38 <_ZN2FC10SensorBaro19calSeaLevelPressureEff+0x78>
 8011f04:	eeb0 0a47 	vmov.f32	s0, s14
 8011f08:	eef0 0a67 	vmov.f32	s1, s15
 8011f0c:	f013 fe32 	bl	8025b74 <pow>
 8011f10:	ec53 2b10 	vmov	r2, r3, d0
 8011f14:	4620      	mov	r0, r4
 8011f16:	4629      	mov	r1, r5
 8011f18:	f7ee fca0 	bl	800085c <__aeabi_ddiv>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	460c      	mov	r4, r1
 8011f20:	4618      	mov	r0, r3
 8011f22:	4621      	mov	r1, r4
 8011f24:	f7ee fe68 	bl	8000bf8 <__aeabi_d2f>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	ee07 3a90 	vmov	s15, r3
}
 8011f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8011f32:	3710      	adds	r7, #16
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bdb0      	pop	{r4, r5, r7, pc}
 8011f38:	b851eb85 	.word	0xb851eb85
 8011f3c:	4015051e 	.word	0x4015051e
 8011f40:	3ff00000 	.word	0x3ff00000
 8011f44:	00000000 	.word	0x00000000
 8011f48:	40e5a540 	.word	0x40e5a540

08011f4c <_Z41__static_initialization_and_destruction_0ii>:


}
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b082      	sub	sp, #8
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
 8011f54:	6039      	str	r1, [r7, #0]
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2b01      	cmp	r3, #1
 8011f5a:	d107      	bne.n	8011f6c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f62:	4293      	cmp	r3, r2
 8011f64:	d102      	bne.n	8011f6c <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorBaro sensorBaro;
 8011f66:	4803      	ldr	r0, [pc, #12]	; (8011f74 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8011f68:	f7ff fea2 	bl	8011cb0 <_ZN2FC10SensorBaroC1Ev>
}
 8011f6c:	bf00      	nop
 8011f6e:	3708      	adds	r7, #8
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}
 8011f74:	20000fd8 	.word	0x20000fd8

08011f78 <_GLOBAL__sub_I__ZN2FC10sensorBaroE>:
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	af00      	add	r7, sp, #0
 8011f7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011f80:	2001      	movs	r0, #1
 8011f82:	f7ff ffe3 	bl	8011f4c <_Z41__static_initialization_and_destruction_0ii>
 8011f86:	bd80      	pop	{r7, pc}

08011f88 <_ZN2FC6MsgBus6setGPSERKNS_3GPSE>:
    SIMPLE_FUNC_IMPL(GPS, GPS, gps)
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b082      	sub	sp, #8
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	6039      	str	r1, [r7, #0]
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	683a      	ldr	r2, [r7, #0]
 8011f96:	3348      	adds	r3, #72	; 0x48
 8011f98:	4611      	mov	r1, r2
 8011f9a:	2248      	movs	r2, #72	; 0x48
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f017 f813 	bl	8028fc8 <memcpy>
 8011fa2:	bf00      	nop
 8011fa4:	3708      	adds	r7, #8
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}
	...

08011fac <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8011fac:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8011fb0:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 8011fb2:	4b0e      	ldr	r3, [pc, #56]	; (8011fec <_ZL11microsecondv+0x40>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	f04f 0200 	mov.w	r2, #0
 8011fbc:	f04f 0b00 	mov.w	fp, #0
 8011fc0:	f04f 0c00 	mov.w	ip, #0
 8011fc4:	468c      	mov	ip, r1
 8011fc6:	f04f 0b00 	mov.w	fp, #0
 8011fca:	4a09      	ldr	r2, [pc, #36]	; (8011ff0 <_ZL11microsecondv+0x44>)
 8011fcc:	6812      	ldr	r2, [r2, #0]
 8011fce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011fd0:	4611      	mov	r1, r2
 8011fd2:	f04f 0200 	mov.w	r2, #0
 8011fd6:	ea4b 0301 	orr.w	r3, fp, r1
 8011fda:	ea4c 0402 	orr.w	r4, ip, r2
}
 8011fde:	4618      	mov	r0, r3
 8011fe0:	4621      	mov	r1, r4
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8011fe8:	4770      	bx	lr
 8011fea:	bf00      	nop
 8011fec:	2000100c 	.word	0x2000100c
 8011ff0:	20010f88 	.word	0x20010f88

08011ff4 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b082      	sub	sp, #8
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	ed87 0a01 	vstr	s0, [r7, #4]
 8011ffe:	ed97 0a01 	vldr	s0, [r7, #4]
 8012002:	f013 fc35 	bl	8025870 <cosf>
 8012006:	eef0 7a40 	vmov.f32	s15, s0
 801200a:	eeb0 0a67 	vmov.f32	s0, s15
 801200e:	3708      	adds	r7, #8
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}

08012014 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8012014:	b580      	push	{r7, lr}
 8012016:	b082      	sub	sp, #8
 8012018:	af00      	add	r7, sp, #0
 801201a:	ed87 0a01 	vstr	s0, [r7, #4]
 801201e:	ed97 0a01 	vldr	s0, [r7, #4]
 8012022:	f013 fca7 	bl	8025974 <sinf>
 8012026:	eef0 7a40 	vmov.f32	s15, s0
 801202a:	eeb0 0a67 	vmov.f32	s0, s15
 801202e:	3708      	adds	r7, #8
 8012030:	46bd      	mov	sp, r7
 8012032:	bd80      	pop	{r7, pc}
 8012034:	0000      	movs	r0, r0
	...

08012038 <_ZN2FC9SensorGPS6setGPSEddfffffhhy>:
SensorGPS sensorGPS;

void SensorGPS::setGPS(double lat, double lon, float alt,
        			   float vel, float direction, float hdop, float vdop,
					   uint8_t numSat, uint8_t fixType, uint64_t UtcUsec)
{
 8012038:	b590      	push	{r4, r7, lr}
 801203a:	b091      	sub	sp, #68	; 0x44
 801203c:	af00      	add	r7, sp, #0
 801203e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8012040:	ed87 0b08 	vstr	d0, [r7, #32]
 8012044:	ed87 1b06 	vstr	d1, [r7, #24]
 8012048:	ed87 2a0a 	vstr	s4, [r7, #40]	; 0x28
 801204c:	edc7 2a05 	vstr	s5, [r7, #20]
 8012050:	ed87 3a04 	vstr	s6, [r7, #16]
 8012054:	edc7 3a03 	vstr	s7, [r7, #12]
 8012058:	ed87 4a02 	vstr	s8, [r7, #8]
 801205c:	460b      	mov	r3, r1
 801205e:	71fb      	strb	r3, [r7, #7]
 8012060:	4613      	mov	r3, r2
 8012062:	71bb      	strb	r3, [r7, #6]

	/* calculate velocity NED  */
	float radDirection = direction*M_PI/180.0;
 8012064:	6938      	ldr	r0, [r7, #16]
 8012066:	f7ee fa77 	bl	8000558 <__aeabi_f2d>
 801206a:	a33e      	add	r3, pc, #248	; (adr r3, 8012164 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x12c>)
 801206c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012070:	f7ee faca 	bl	8000608 <__aeabi_dmul>
 8012074:	4603      	mov	r3, r0
 8012076:	460c      	mov	r4, r1
 8012078:	4618      	mov	r0, r3
 801207a:	4621      	mov	r1, r4
 801207c:	f04f 0200 	mov.w	r2, #0
 8012080:	4b35      	ldr	r3, [pc, #212]	; (8012158 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x120>)
 8012082:	f7ee fbeb 	bl	800085c <__aeabi_ddiv>
 8012086:	4603      	mov	r3, r0
 8012088:	460c      	mov	r4, r1
 801208a:	4618      	mov	r0, r3
 801208c:	4621      	mov	r1, r4
 801208e:	f7ee fdb3 	bl	8000bf8 <__aeabi_d2f>
 8012092:	4603      	mov	r3, r0
 8012094:	63fb      	str	r3, [r7, #60]	; 0x3c
	float velN = std::cos(radDirection)*vel;
 8012096:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 801209a:	f7ff ffab 	bl	8011ff4 <_ZSt3cosf>
 801209e:	eeb0 7a40 	vmov.f32	s14, s0
 80120a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80120a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80120aa:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float velE = std::sin(radDirection)*vel;
 80120ae:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80120b2:	f7ff ffaf 	bl	8012014 <_ZSt3sinf>
 80120b6:	eeb0 7a40 	vmov.f32	s14, s0
 80120ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80120be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80120c2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	this->gps.timestamp = microsecond();
 80120c6:	f7ff ff71 	bl	8011fac <_ZL11microsecondv>
 80120ca:	4603      	mov	r3, r0
 80120cc:	460c      	mov	r4, r1
 80120ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120d0:	e9c2 3400 	strd	r3, r4, [r2]
	this->gps.timestampUTC = UtcUsec;
 80120d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120d6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80120da:	e9c2 3402 	strd	r3, r4, [r2, #8]
	this->gps.lat = lat;
 80120de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120e0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80120e4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	this->gps.lon = lon;
 80120e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120ea:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80120ee:	e9c2 3406 	strd	r3, r4, [r2, #24]
	this->gps.alt = alt;
 80120f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120f6:	621a      	str	r2, [r3, #32]

	this->gps.vel = vel;
 80120f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fa:	697a      	ldr	r2, [r7, #20]
 80120fc:	625a      	str	r2, [r3, #36]	; 0x24
	this->gps.velN = velN;
 80120fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012102:	629a      	str	r2, [r3, #40]	; 0x28
	this->gps.velE = velE;
 8012104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012108:	62da      	str	r2, [r3, #44]	; 0x2c
	this->gps.velD = 0; /* ??? */
 801210a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801210c:	f04f 0200 	mov.w	r2, #0
 8012110:	631a      	str	r2, [r3, #48]	; 0x30
	this->gps.direction = radDirection;
 8012112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012114:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012116:	635a      	str	r2, [r3, #52]	; 0x34
	this->gps.hdop = hdop;
 8012118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801211a:	68fa      	ldr	r2, [r7, #12]
 801211c:	639a      	str	r2, [r3, #56]	; 0x38
	this->gps.vdop = vdop;
 801211e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012120:	68ba      	ldr	r2, [r7, #8]
 8012122:	63da      	str	r2, [r3, #60]	; 0x3c

	this->gps.numSatellites = numSat;
 8012124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012126:	79fa      	ldrb	r2, [r7, #7]
 8012128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	this->gps.fixType = fixType;
 801212c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801212e:	79ba      	ldrb	r2, [r7, #6]
 8012130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	msgBus.setGPS(this->gps);
 8012134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012136:	4619      	mov	r1, r3
 8012138:	4808      	ldr	r0, [pc, #32]	; (801215c <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x124>)
 801213a:	f7ff ff25 	bl	8011f88 <_ZN2FC6MsgBus6setGPSERKNS_3GPSE>

	/* Freq class variable */
	freqCnt++;
 801213e:	4b08      	ldr	r3, [pc, #32]	; (8012160 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x128>)
 8012140:	881b      	ldrh	r3, [r3, #0]
 8012142:	3301      	adds	r3, #1
 8012144:	b29a      	uxth	r2, r3
 8012146:	4b06      	ldr	r3, [pc, #24]	; (8012160 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x128>)
 8012148:	801a      	strh	r2, [r3, #0]

}
 801214a:	bf00      	nop
 801214c:	3744      	adds	r7, #68	; 0x44
 801214e:	46bd      	mov	sp, r7
 8012150:	bd90      	pop	{r4, r7, pc}
 8012152:	bf00      	nop
 8012154:	f3af 8000 	nop.w
 8012158:	40668000 	.word	0x40668000
 801215c:	20000bb8 	.word	0x20000bb8
 8012160:	20001070 	.word	0x20001070
 8012164:	54442d18 	.word	0x54442d18
 8012168:	400921fb 	.word	0x400921fb

0801216c <_Z41__static_initialization_and_destruction_0ii>:

}
 801216c:	b480      	push	{r7}
 801216e:	b083      	sub	sp, #12
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
 8012174:	6039      	str	r1, [r7, #0]
 8012176:	bf00      	nop
 8012178:	370c      	adds	r7, #12
 801217a:	46bd      	mov	sp, r7
 801217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012180:	4770      	bx	lr

08012182 <_GLOBAL__sub_I__ZN2FC9sensorGPSE>:
 8012182:	b580      	push	{r7, lr}
 8012184:	af00      	add	r7, sp, #0
 8012186:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801218a:	2001      	movs	r0, #1
 801218c:	f7ff ffee 	bl	801216c <_Z41__static_initialization_and_destruction_0ii>
 8012190:	bd80      	pop	{r7, pc}

08012192 <_ZN2FC6MsgBus22setBodyAngularVelocityERKNS_19BodyAngularVelocityE>:
    SIMPLE_FUNC_IMPL(BodyAngularVelocity, BodyAngularVelocity, bodyAngularVelocity)
 8012192:	b4b0      	push	{r4, r5, r7}
 8012194:	b083      	sub	sp, #12
 8012196:	af00      	add	r7, sp, #0
 8012198:	6078      	str	r0, [r7, #4]
 801219a:	6039      	str	r1, [r7, #0]
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	683a      	ldr	r2, [r7, #0]
 80121a0:	f103 0418 	add.w	r4, r3, #24
 80121a4:	4615      	mov	r5, r2
 80121a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80121a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80121aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80121ae:	e884 0003 	stmia.w	r4, {r0, r1}
 80121b2:	bf00      	nop
 80121b4:	370c      	adds	r7, #12
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bcb0      	pop	{r4, r5, r7}
 80121ba:	4770      	bx	lr

080121bc <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 80121bc:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80121c0:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 80121c2:	4b0e      	ldr	r3, [pc, #56]	; (80121fc <_ZL11microsecondv+0x40>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	4619      	mov	r1, r3
 80121c8:	f04f 0200 	mov.w	r2, #0
 80121cc:	f04f 0b00 	mov.w	fp, #0
 80121d0:	f04f 0c00 	mov.w	ip, #0
 80121d4:	468c      	mov	ip, r1
 80121d6:	f04f 0b00 	mov.w	fp, #0
 80121da:	4a09      	ldr	r2, [pc, #36]	; (8012200 <_ZL11microsecondv+0x44>)
 80121dc:	6812      	ldr	r2, [r2, #0]
 80121de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80121e0:	4611      	mov	r1, r2
 80121e2:	f04f 0200 	mov.w	r2, #0
 80121e6:	ea4b 0301 	orr.w	r3, fp, r1
 80121ea:	ea4c 0402 	orr.w	r4, ip, r2
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	4621      	mov	r1, r4
 80121f2:	46bd      	mov	sp, r7
 80121f4:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80121f8:	4770      	bx	lr
 80121fa:	bf00      	nop
 80121fc:	20001074 	.word	0x20001074
 8012200:	20010f88 	.word	0x20010f88

08012204 <_ZN2FC10SensorGyroC1Ev>:

namespace FC{

SensorGyro sensorGyro;

SensorGyro::SensorGyro()
 8012204:	b480      	push	{r7}
 8012206:	b083      	sub	sp, #12
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
: bodyAngularVelocity{0, }
, biasX(0), biasY(0), biasZ(0)
, averX(0), averY(0), averZ(0)
, calBiasFlag(false), averageIndex(0)
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	461a      	mov	r2, r3
 8012210:	2300      	movs	r3, #0
 8012212:	6013      	str	r3, [r2, #0]
 8012214:	6053      	str	r3, [r2, #4]
 8012216:	6093      	str	r3, [r2, #8]
 8012218:	60d3      	str	r3, [r2, #12]
 801221a:	6113      	str	r3, [r2, #16]
 801221c:	6153      	str	r3, [r2, #20]
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	f04f 0200 	mov.w	r2, #0
 8012224:	619a      	str	r2, [r3, #24]
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	f04f 0200 	mov.w	r2, #0
 801222c:	61da      	str	r2, [r3, #28]
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	f04f 0200 	mov.w	r2, #0
 8012234:	621a      	str	r2, [r3, #32]
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f04f 0200 	mov.w	r2, #0
 801223c:	625a      	str	r2, [r3, #36]	; 0x24
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	f04f 0200 	mov.w	r2, #0
 8012244:	629a      	str	r2, [r3, #40]	; 0x28
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	f04f 0200 	mov.w	r2, #0
 801224c:	62da      	str	r2, [r3, #44]	; 0x2c
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2200      	movs	r2, #0
 8012252:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2200      	movs	r2, #0
 801225a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
{}
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	4618      	mov	r0, r3
 8012262:	370c      	adds	r7, #12
 8012264:	46bd      	mov	sp, r7
 8012266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226a:	4770      	bx	lr

0801226c <_ZN2FC10SensorGyro7setBiasEv>:

void SensorGyro::setBias(){
 801226c:	b480      	push	{r7}
 801226e:	b083      	sub	sp, #12
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
	calBiasFlag = true;
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	2201      	movs	r2, #1
 8012278:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	averageIndex = 0;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	2200      	movs	r2, #0
 8012280:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	averX = 0;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f04f 0200 	mov.w	r2, #0
 801228a:	625a      	str	r2, [r3, #36]	; 0x24
	averY = 0;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f04f 0200 	mov.w	r2, #0
 8012292:	629a      	str	r2, [r3, #40]	; 0x28
	averZ = 0;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f04f 0200 	mov.w	r2, #0
 801229a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801229c:	bf00      	nop
 801229e:	370c      	adds	r7, #12
 80122a0:	46bd      	mov	sp, r7
 80122a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a6:	4770      	bx	lr

080122a8 <_ZN2FC10SensorGyro7setGyroEfff>:

void SensorGyro::setGyro(float x, float y, float z){
 80122a8:	b590      	push	{r4, r7, lr}
 80122aa:	b085      	sub	sp, #20
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	60f8      	str	r0, [r7, #12]
 80122b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80122b4:	edc7 0a01 	vstr	s1, [r7, #4]
 80122b8:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 80122bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80122c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80122c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122c8:	d10d      	bne.n	80122e6 <_ZN2FC10SensorGyro7setGyroEfff+0x3e>
 80122ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80122ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80122d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122d6:	d106      	bne.n	80122e6 <_ZN2FC10SensorGyro7setGyroEfff+0x3e>
 80122d8:	edd7 7a00 	vldr	s15, [r7]
 80122dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80122e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122e4:	d041      	beq.n	801236a <_ZN2FC10SensorGyro7setGyroEfff+0xc2>

	if(calBiasFlag) calAverage(x, y, z);
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d008      	beq.n	8012302 <_ZN2FC10SensorGyro7setGyroEfff+0x5a>
 80122f0:	ed97 1a00 	vldr	s2, [r7]
 80122f4:	edd7 0a01 	vldr	s1, [r7, #4]
 80122f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80122fc:	68f8      	ldr	r0, [r7, #12]
 80122fe:	f000 f83d 	bl	801237c <_ZN2FC10SensorGyro10calAverageEfff>

	this->bodyAngularVelocity.timestamp = microsecond();
 8012302:	f7ff ff5b 	bl	80121bc <_ZL11microsecondv>
 8012306:	4603      	mov	r3, r0
 8012308:	460c      	mov	r4, r1
 801230a:	68fa      	ldr	r2, [r7, #12]
 801230c:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyAngularVelocity.xyz[0] = x - biasX;
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	edd3 7a06 	vldr	s15, [r3, #24]
 8012316:	ed97 7a02 	vldr	s14, [r7, #8]
 801231a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	edc3 7a02 	vstr	s15, [r3, #8]
	this->bodyAngularVelocity.xyz[1] = y - biasY;
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	edd3 7a07 	vldr	s15, [r3, #28]
 801232a:	ed97 7a01 	vldr	s14, [r7, #4]
 801232e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	edc3 7a03 	vstr	s15, [r3, #12]
	this->bodyAngularVelocity.xyz[2] = z - biasZ;
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	edd3 7a08 	vldr	s15, [r3, #32]
 801233e:	ed97 7a00 	vldr	s14, [r7]
 8012342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	edc3 7a04 	vstr	s15, [r3, #16]
	msgBus.setBodyAngularVelocity(this->bodyAngularVelocity);
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	4619      	mov	r1, r3
 8012350:	4808      	ldr	r0, [pc, #32]	; (8012374 <_ZN2FC10SensorGyro7setGyroEfff+0xcc>)
 8012352:	f7ff ff1e 	bl	8012192 <_ZN2FC6MsgBus22setBodyAngularVelocityERKNS_19BodyAngularVelocityE>
	ModuleAHRS::setSignal(AHRS_fromGyro);
 8012356:	2002      	movs	r0, #2
 8012358:	f7ff fae6 	bl	8011928 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>

	freqCnt++;
 801235c:	4b06      	ldr	r3, [pc, #24]	; (8012378 <_ZN2FC10SensorGyro7setGyroEfff+0xd0>)
 801235e:	881b      	ldrh	r3, [r3, #0]
 8012360:	3301      	adds	r3, #1
 8012362:	b29a      	uxth	r2, r3
 8012364:	4b04      	ldr	r3, [pc, #16]	; (8012378 <_ZN2FC10SensorGyro7setGyroEfff+0xd0>)
 8012366:	801a      	strh	r2, [r3, #0]
 8012368:	e000      	b.n	801236c <_ZN2FC10SensorGyro7setGyroEfff+0xc4>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 801236a:	bf00      	nop
}
 801236c:	3714      	adds	r7, #20
 801236e:	46bd      	mov	sp, r7
 8012370:	bd90      	pop	{r4, r7, pc}
 8012372:	bf00      	nop
 8012374:	20000bb8 	.word	0x20000bb8
 8012378:	200010b0 	.word	0x200010b0

0801237c <_ZN2FC10SensorGyro10calAverageEfff>:

void SensorGyro::calAverage(float x, float y, float z){
 801237c:	b480      	push	{r7}
 801237e:	b087      	sub	sp, #28
 8012380:	af00      	add	r7, sp, #0
 8012382:	60f8      	str	r0, [r7, #12]
 8012384:	ed87 0a02 	vstr	s0, [r7, #8]
 8012388:	edc7 0a01 	vstr	s1, [r7, #4]
 801238c:	ed87 1a00 	vstr	s2, [r7]
	float alpha = (averageIndex-1)/averageIndex;
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012396:	3b01      	subs	r3, #1
 8012398:	68fa      	ldr	r2, [r7, #12]
 801239a:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 801239e:	fb93 f3f2 	sdiv	r3, r3, r2
 80123a2:	ee07 3a90 	vmov	s15, r3
 80123a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123aa:	edc7 7a05 	vstr	s15, [r7, #20]
	averX = alpha*averX + (1-alpha)*x;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80123b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80123b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80123bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80123c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80123c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80123c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80123cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80123d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	averY = alpha*averY + (1-alpha)*y;
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80123e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80123e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80123e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80123ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80123f0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80123f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80123f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80123fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	averZ = alpha*averZ + (1-alpha)*z;
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 801240c:	edd7 7a05 	vldr	s15, [r7, #20]
 8012410:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012414:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012418:	edd7 7a05 	vldr	s15, [r7, #20]
 801241c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8012420:	edd7 7a00 	vldr	s15, [r7]
 8012424:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012428:	ee77 7a27 	vadd.f32	s15, s14, s15
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	averageIndex++;
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012438:	3301      	adds	r3, #1
 801243a:	b2da      	uxtb	r2, r3
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	if(averageIndex > AVERAGE_SIZE) {
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012448:	2b14      	cmp	r3, #20
 801244a:	d90f      	bls.n	801246c <_ZN2FC10SensorGyro10calAverageEfff+0xf0>
		calBiasFlag = false;
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	2200      	movs	r2, #0
 8012450:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		biasX = averX;
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	619a      	str	r2, [r3, #24]
		biasY = averY;
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	61da      	str	r2, [r3, #28]
		biasZ = averZ;
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	621a      	str	r2, [r3, #32]
	}
}
 801246c:	bf00      	nop
 801246e:	371c      	adds	r7, #28
 8012470:	46bd      	mov	sp, r7
 8012472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012476:	4770      	bx	lr

08012478 <_Z41__static_initialization_and_destruction_0ii>:

}
 8012478:	b580      	push	{r7, lr}
 801247a:	b082      	sub	sp, #8
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
 8012480:	6039      	str	r1, [r7, #0]
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	2b01      	cmp	r3, #1
 8012486:	d107      	bne.n	8012498 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801248e:	4293      	cmp	r3, r2
 8012490:	d102      	bne.n	8012498 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorGyro sensorGyro;
 8012492:	4803      	ldr	r0, [pc, #12]	; (80124a0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8012494:	f7ff feb6 	bl	8012204 <_ZN2FC10SensorGyroC1Ev>
}
 8012498:	bf00      	nop
 801249a:	3708      	adds	r7, #8
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}
 80124a0:	20001078 	.word	0x20001078

080124a4 <_GLOBAL__sub_I__ZN2FC10sensorGyroE>:
 80124a4:	b580      	push	{r7, lr}
 80124a6:	af00      	add	r7, sp, #0
 80124a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80124ac:	2001      	movs	r0, #1
 80124ae:	f7ff ffe3 	bl	8012478 <_Z41__static_initialization_and_destruction_0ii>
 80124b2:	bd80      	pop	{r7, pc}

080124b4 <_ZN2FC6MsgBus10setBodyMagERKNS_7BodyMagE>:
    SIMPLE_FUNC_IMPL(BodyMag, BodyMag, bodyMag)
 80124b4:	b4b0      	push	{r4, r5, r7}
 80124b6:	b083      	sub	sp, #12
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
 80124bc:	6039      	str	r1, [r7, #0]
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	683a      	ldr	r2, [r7, #0]
 80124c2:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80124c6:	4615      	mov	r5, r2
 80124c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80124ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80124cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80124d0:	e884 0003 	stmia.w	r4, {r0, r1}
 80124d4:	bf00      	nop
 80124d6:	370c      	adds	r7, #12
 80124d8:	46bd      	mov	sp, r7
 80124da:	bcb0      	pop	{r4, r5, r7}
 80124dc:	4770      	bx	lr
	...

080124e0 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 80124e0:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80124e4:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 80124e6:	4b0e      	ldr	r3, [pc, #56]	; (8012520 <_ZL11microsecondv+0x40>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	4619      	mov	r1, r3
 80124ec:	f04f 0200 	mov.w	r2, #0
 80124f0:	f04f 0b00 	mov.w	fp, #0
 80124f4:	f04f 0c00 	mov.w	ip, #0
 80124f8:	468c      	mov	ip, r1
 80124fa:	f04f 0b00 	mov.w	fp, #0
 80124fe:	4a09      	ldr	r2, [pc, #36]	; (8012524 <_ZL11microsecondv+0x44>)
 8012500:	6812      	ldr	r2, [r2, #0]
 8012502:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012504:	4611      	mov	r1, r2
 8012506:	f04f 0200 	mov.w	r2, #0
 801250a:	ea4b 0301 	orr.w	r3, fp, r1
 801250e:	ea4c 0402 	orr.w	r4, ip, r2
}
 8012512:	4618      	mov	r0, r3
 8012514:	4621      	mov	r1, r4
 8012516:	46bd      	mov	sp, r7
 8012518:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 801251c:	4770      	bx	lr
 801251e:	bf00      	nop
 8012520:	200010b4 	.word	0x200010b4
 8012524:	20010f88 	.word	0x20010f88

08012528 <_ZN2FC9SensorMagC1Ev>:

namespace FC{

SensorMag sensorMag;

SensorMag::SensorMag()
 8012528:	b480      	push	{r7}
 801252a:	b083      	sub	sp, #12
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
: bodyMag{0, }
, startCalibrationFlag(false)
, endCalibrationFlag(false)
, bias{-216.450f,-276.416f, -170.502f}
, scale{0.95011f, 1.04095f, 1.01334f}
, min{0, }, max{0, }
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	461a      	mov	r2, r3
 8012534:	2300      	movs	r3, #0
 8012536:	6013      	str	r3, [r2, #0]
 8012538:	6053      	str	r3, [r2, #4]
 801253a:	6093      	str	r3, [r2, #8]
 801253c:	60d3      	str	r3, [r2, #12]
 801253e:	6113      	str	r3, [r2, #16]
 8012540:	6153      	str	r3, [r2, #20]
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	2200      	movs	r2, #0
 8012546:	761a      	strb	r2, [r3, #24]
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	2200      	movs	r2, #0
 801254c:	765a      	strb	r2, [r3, #25]
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	4a0e      	ldr	r2, [pc, #56]	; (801258c <_ZN2FC9SensorMagC1Ev+0x64>)
 8012552:	331c      	adds	r3, #28
 8012554:	ca07      	ldmia	r2, {r0, r1, r2}
 8012556:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	4a0c      	ldr	r2, [pc, #48]	; (8012590 <_ZN2FC9SensorMagC1Ev+0x68>)
 801255e:	3328      	adds	r3, #40	; 0x28
 8012560:	ca07      	ldmia	r2, {r0, r1, r2}
 8012562:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	3334      	adds	r3, #52	; 0x34
 801256a:	2200      	movs	r2, #0
 801256c:	601a      	str	r2, [r3, #0]
 801256e:	605a      	str	r2, [r3, #4]
 8012570:	609a      	str	r2, [r3, #8]
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	3340      	adds	r3, #64	; 0x40
 8012576:	2200      	movs	r2, #0
 8012578:	601a      	str	r2, [r3, #0]
 801257a:	605a      	str	r2, [r3, #4]
 801257c:	609a      	str	r2, [r3, #8]
	 * 		biasZ = -170.502f
	 * 		scaleX = 0.95011f
	 * 		scaleY = 1.04095f
	 * 		scaleZ = 1.01334f
	 */
}
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	4618      	mov	r0, r3
 8012582:	370c      	adds	r7, #12
 8012584:	46bd      	mov	sp, r7
 8012586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258a:	4770      	bx	lr
 801258c:	0802d730 	.word	0x0802d730
 8012590:	0802d73c 	.word	0x0802d73c

08012594 <_ZN2FC9SensorMag6setMagEfff>:

void SensorMag::setMag(float x, float y, float z){
 8012594:	b590      	push	{r4, r7, lr}
 8012596:	b085      	sub	sp, #20
 8012598:	af00      	add	r7, sp, #0
 801259a:	60f8      	str	r0, [r7, #12]
 801259c:	ed87 0a02 	vstr	s0, [r7, #8]
 80125a0:	edc7 0a01 	vstr	s1, [r7, #4]
 80125a4:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 80125a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80125ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80125b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125b4:	d10d      	bne.n	80125d2 <_ZN2FC9SensorMag6setMagEfff+0x3e>
 80125b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80125ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80125be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125c2:	d106      	bne.n	80125d2 <_ZN2FC9SensorMag6setMagEfff+0x3e>
 80125c4:	edd7 7a00 	vldr	s15, [r7]
 80125c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80125cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125d0:	d04c      	beq.n	801266c <_ZN2FC9SensorMag6setMagEfff+0xd8>

	if(startCalibrationFlag) calCalibration(x, y, z);
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	7e1b      	ldrb	r3, [r3, #24]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d008      	beq.n	80125ec <_ZN2FC9SensorMag6setMagEfff+0x58>
 80125da:	ed97 1a00 	vldr	s2, [r7]
 80125de:	edd7 0a01 	vldr	s1, [r7, #4]
 80125e2:	ed97 0a02 	vldr	s0, [r7, #8]
 80125e6:	68f8      	ldr	r0, [r7, #12]
 80125e8:	f000 f848 	bl	801267c <_ZN2FC9SensorMag14calCalibrationEfff>

	this->bodyMag.timestamp = microsecond();
 80125ec:	f7ff ff78 	bl	80124e0 <_ZL11microsecondv>
 80125f0:	4603      	mov	r3, r0
 80125f2:	460c      	mov	r4, r1
 80125f4:	68fa      	ldr	r2, [r7, #12]
 80125f6:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyMag.xyz[0] = (x - bias[0])*scale[0];
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	edd3 7a07 	vldr	s15, [r3, #28]
 8012600:	ed97 7a02 	vldr	s14, [r7, #8]
 8012604:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801260e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	edc3 7a02 	vstr	s15, [r3, #8]
	this->bodyMag.xyz[1] = (y - bias[1])*scale[1];
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	edd3 7a08 	vldr	s15, [r3, #32]
 801261e:	ed97 7a01 	vldr	s14, [r7, #4]
 8012622:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801262c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	edc3 7a03 	vstr	s15, [r3, #12]
	this->bodyMag.xyz[2] = (z - bias[2])*scale[2];
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801263c:	ed97 7a00 	vldr	s14, [r7]
 8012640:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 801264a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	edc3 7a04 	vstr	s15, [r3, #16]
	msgBus.setBodyMag(this->bodyMag);
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	4619      	mov	r1, r3
 8012658:	4806      	ldr	r0, [pc, #24]	; (8012674 <_ZN2FC9SensorMag6setMagEfff+0xe0>)
 801265a:	f7ff ff2b 	bl	80124b4 <_ZN2FC6MsgBus10setBodyMagERKNS_7BodyMagE>

	/* Freq class variable */
	freqCnt++;
 801265e:	4b06      	ldr	r3, [pc, #24]	; (8012678 <_ZN2FC9SensorMag6setMagEfff+0xe4>)
 8012660:	881b      	ldrh	r3, [r3, #0]
 8012662:	3301      	adds	r3, #1
 8012664:	b29a      	uxth	r2, r3
 8012666:	4b04      	ldr	r3, [pc, #16]	; (8012678 <_ZN2FC9SensorMag6setMagEfff+0xe4>)
 8012668:	801a      	strh	r2, [r3, #0]
 801266a:	e000      	b.n	801266e <_ZN2FC9SensorMag6setMagEfff+0xda>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 801266c:	bf00      	nop
}
 801266e:	3714      	adds	r7, #20
 8012670:	46bd      	mov	sp, r7
 8012672:	bd90      	pop	{r4, r7, pc}
 8012674:	20000bb8 	.word	0x20000bb8
 8012678:	20001108 	.word	0x20001108

0801267c <_ZN2FC9SensorMag14calCalibrationEfff>:

void SensorMag::endCalibration(){
	endCalibrationFlag = true;
}

void SensorMag::calCalibration(float x, float y, float z){
 801267c:	b480      	push	{r7}
 801267e:	b087      	sub	sp, #28
 8012680:	af00      	add	r7, sp, #0
 8012682:	60f8      	str	r0, [r7, #12]
 8012684:	ed87 0a02 	vstr	s0, [r7, #8]
 8012688:	edc7 0a01 	vstr	s1, [r7, #4]
 801268c:	ed87 1a00 	vstr	s2, [r7]
	if(x > max[0]) max[0] = x;
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8012696:	ed97 7a02 	vldr	s14, [r7, #8]
 801269a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801269e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126a2:	dd02      	ble.n	80126aa <_ZN2FC9SensorMag14calCalibrationEfff+0x2e>
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	68ba      	ldr	r2, [r7, #8]
 80126a8:	641a      	str	r2, [r3, #64]	; 0x40
	if(y > max[1]) max[1] = y;
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80126b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80126b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80126b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126bc:	dd02      	ble.n	80126c4 <_ZN2FC9SensorMag14calCalibrationEfff+0x48>
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	687a      	ldr	r2, [r7, #4]
 80126c2:	645a      	str	r2, [r3, #68]	; 0x44
	if(z > max[2]) max[2] = z;
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80126ca:	ed97 7a00 	vldr	s14, [r7]
 80126ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80126d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126d6:	dd02      	ble.n	80126de <_ZN2FC9SensorMag14calCalibrationEfff+0x62>
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	683a      	ldr	r2, [r7, #0]
 80126dc:	649a      	str	r2, [r3, #72]	; 0x48

	if(x < min[0]) min[0] = x;
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80126e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80126e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80126ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126f0:	d502      	bpl.n	80126f8 <_ZN2FC9SensorMag14calCalibrationEfff+0x7c>
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	68ba      	ldr	r2, [r7, #8]
 80126f6:	635a      	str	r2, [r3, #52]	; 0x34
	if(y < min[1]) min[1] = y;
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80126fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8012702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801270a:	d502      	bpl.n	8012712 <_ZN2FC9SensorMag14calCalibrationEfff+0x96>
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	687a      	ldr	r2, [r7, #4]
 8012710:	639a      	str	r2, [r3, #56]	; 0x38
	if(z < min[2]) min[2] = z;
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8012718:	ed97 7a00 	vldr	s14, [r7]
 801271c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012724:	d502      	bpl.n	801272c <_ZN2FC9SensorMag14calCalibrationEfff+0xb0>
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	683a      	ldr	r2, [r7, #0]
 801272a:	63da      	str	r2, [r3, #60]	; 0x3c

	if(endCalibrationFlag/* end */){
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	7e5b      	ldrb	r3, [r3, #25]
 8012730:	2b00      	cmp	r3, #0
 8012732:	f000 8091 	beq.w	8012858 <_ZN2FC9SensorMag14calCalibrationEfff+0x1dc>
		/* get hard iron correction */
		bias[0] = (max[0] + min[0])/2;
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8012742:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012746:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801274a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	edc3 7a07 	vstr	s15, [r3, #28]
		bias[1] = (max[1] + min[1])/2;
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8012760:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012764:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012768:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	edc3 7a08 	vstr	s15, [r3, #32]
		bias[2] = (max[2] + min[2])/2;
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 801277e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012782:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012786:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		/* get soft iron correction estimate */
		scale[0] = (max[0] - min[0])/2;
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801279c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80127a0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80127a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		scale[1] = (max[1] - min[1])/2;
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80127ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80127be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80127c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		scale[2] = (max[2] - min[2])/2;
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80127d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80127dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80127e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		float avgRad = (scale[0] + scale[1] + scale[2])/3.0f;
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80127f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8012800:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012804:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8012808:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801280c:	edc7 7a05 	vstr	s15, [r7, #20]

		scale[0] = avgRad/scale[0];
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8012816:	edd7 6a05 	vldr	s13, [r7, #20]
 801281a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		scale[1] = avgRad/scale[1];
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 801282a:	edd7 6a05 	vldr	s13, [r7, #20]
 801282e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		scale[2] = avgRad/scale[2];
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 801283e:	edd7 6a05 	vldr	s13, [r7, #20]
 8012842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

		startCalibrationFlag = false;
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	2200      	movs	r2, #0
 8012850:	761a      	strb	r2, [r3, #24]
		endCalibrationFlag = false;
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	2200      	movs	r2, #0
 8012856:	765a      	strb	r2, [r3, #25]
	}
}
 8012858:	bf00      	nop
 801285a:	371c      	adds	r7, #28
 801285c:	46bd      	mov	sp, r7
 801285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012862:	4770      	bx	lr

08012864 <_Z41__static_initialization_and_destruction_0ii>:

}
 8012864:	b580      	push	{r7, lr}
 8012866:	b082      	sub	sp, #8
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
 801286c:	6039      	str	r1, [r7, #0]
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	2b01      	cmp	r3, #1
 8012872:	d107      	bne.n	8012884 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8012874:	683b      	ldr	r3, [r7, #0]
 8012876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801287a:	4293      	cmp	r3, r2
 801287c:	d102      	bne.n	8012884 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorMag sensorMag;
 801287e:	4803      	ldr	r0, [pc, #12]	; (801288c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8012880:	f7ff fe52 	bl	8012528 <_ZN2FC9SensorMagC1Ev>
}
 8012884:	bf00      	nop
 8012886:	3708      	adds	r7, #8
 8012888:	46bd      	mov	sp, r7
 801288a:	bd80      	pop	{r7, pc}
 801288c:	200010b8 	.word	0x200010b8

08012890 <_GLOBAL__sub_I__ZN2FC9sensorMagE>:
 8012890:	b580      	push	{r7, lr}
 8012892:	af00      	add	r7, sp, #0
 8012894:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012898:	2001      	movs	r0, #1
 801289a:	f7ff ffe3 	bl	8012864 <_Z41__static_initialization_and_destruction_0ii>
 801289e:	bd80      	pop	{r7, pc}

080128a0 <_bitCount64>:
#define SBUS_ERROR_FLAG_BIT_SIZE 64

/*
 *  count '1' from 64bit varible
 */
uint8_t _bitCount64(uint64_t flagBit){
 80128a0:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80128a4:	b085      	sub	sp, #20
 80128a6:	af00      	add	r7, sp, #0
 80128a8:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t cnt = 0;
 80128ac:	2300      	movs	r3, #0
 80128ae:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i < 64; i++){
 80128b0:	2300      	movs	r3, #0
 80128b2:	60bb      	str	r3, [r7, #8]
 80128b4:	68bb      	ldr	r3, [r7, #8]
 80128b6:	2b3f      	cmp	r3, #63	; 0x3f
 80128b8:	dc16      	bgt.n	80128e8 <_bitCount64+0x48>
		if((flagBit & (1<<i))!=0) cnt++;
 80128ba:	2201      	movs	r2, #1
 80128bc:	68bb      	ldr	r3, [r7, #8]
 80128be:	fa02 f303 	lsl.w	r3, r2, r3
 80128c2:	4619      	mov	r1, r3
 80128c4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80128c8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80128cc:	ea03 0b01 	and.w	fp, r3, r1
 80128d0:	ea04 0c02 	and.w	ip, r4, r2
 80128d4:	ea5b 030c 	orrs.w	r3, fp, ip
 80128d8:	d002      	beq.n	80128e0 <_bitCount64+0x40>
 80128da:	7bfb      	ldrb	r3, [r7, #15]
 80128dc:	3301      	adds	r3, #1
 80128de:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i < 64; i++){
 80128e0:	68bb      	ldr	r3, [r7, #8]
 80128e2:	3301      	adds	r3, #1
 80128e4:	60bb      	str	r3, [r7, #8]
 80128e6:	e7e5      	b.n	80128b4 <_bitCount64+0x14>
	}
	return cnt;
 80128e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80128ea:	4618      	mov	r0, r3
 80128ec:	3714      	adds	r7, #20
 80128ee:	46bd      	mov	sp, r7
 80128f0:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80128f4:	4770      	bx	lr
	...

080128f8 <SBUS_init>:
SBUS_t sbus;

static uint8_t _parserState = 0;		//for parsing
static uint8_t _curByte, _prevByte;

void SBUS_init(UART_HandleTypeDef *huart) {
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b082      	sub	sp, #8
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
	sbus.huart = huart;
 8012900:	4a12      	ldr	r2, [pc, #72]	; (801294c <SBUS_init+0x54>)
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	6013      	str	r3, [r2, #0]

	memset(sbus.dmaBuf, 0, sizeof(sbus.dmaBuf));
 8012906:	2219      	movs	r2, #25
 8012908:	2100      	movs	r1, #0
 801290a:	4811      	ldr	r0, [pc, #68]	; (8012950 <SBUS_init+0x58>)
 801290c:	f016 fb67 	bl	8028fde <memset>
	memset(sbus.rxBuf, 0, sizeof(sbus.rxBuf));
 8012910:	2219      	movs	r2, #25
 8012912:	2100      	movs	r1, #0
 8012914:	480f      	ldr	r0, [pc, #60]	; (8012954 <SBUS_init+0x5c>)
 8012916:	f016 fb62 	bl	8028fde <memset>
	memset(sbus.rcValue, 0, sizeof(sbus.rcValue));
 801291a:	2224      	movs	r2, #36	; 0x24
 801291c:	2100      	movs	r1, #0
 801291e:	480e      	ldr	r0, [pc, #56]	; (8012958 <SBUS_init+0x60>)
 8012920:	f016 fb5d 	bl	8028fde <memset>
	memset(sbus.compRcValue, 0, sizeof(sbus.compRcValue));
 8012924:	2224      	movs	r2, #36	; 0x24
 8012926:	2100      	movs	r1, #0
 8012928:	480c      	ldr	r0, [pc, #48]	; (801295c <SBUS_init+0x64>)
 801292a:	f016 fb58 	bl	8028fde <memset>
	sbus.state = SBUS_STATE_FAILSAFE;
 801292e:	4b07      	ldr	r3, [pc, #28]	; (801294c <SBUS_init+0x54>)
 8012930:	2200      	movs	r2, #0
 8012932:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	HAL_UART_Receive_DMA(sbus.huart, sbus.dmaBuf, SBUS_DMA_BUF_SIZE);
 8012936:	4b05      	ldr	r3, [pc, #20]	; (801294c <SBUS_init+0x54>)
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	2219      	movs	r2, #25
 801293c:	4904      	ldr	r1, [pc, #16]	; (8012950 <SBUS_init+0x58>)
 801293e:	4618      	mov	r0, r3
 8012940:	f009 fd46 	bl	801c3d0 <HAL_UART_Receive_DMA>
}
 8012944:	bf00      	nop
 8012946:	3708      	adds	r7, #8
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}
 801294c:	20001198 	.word	0x20001198
 8012950:	2000119c 	.word	0x2000119c
 8012954:	200011b5 	.word	0x200011b5
 8012958:	200011ce 	.word	0x200011ce
 801295c:	200011f2 	.word	0x200011f2

08012960 <SBUS_decoding>:

SBUS_Result_t SBUS_decoding() {
 8012960:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8012964:	b082      	sub	sp, #8
 8012966:	af00      	add	r7, sp, #0
	if(sbus.rxBuf[23] & SBUS_FAIL_SAFE){	/* failsafe frame */
 8012968:	4b3a      	ldr	r3, [pc, #232]	; (8012a54 <SBUS_decoding+0xf4>)
 801296a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801296e:	f003 0308 	and.w	r3, r3, #8
 8012972:	2b00      	cmp	r3, #0
 8012974:	d005      	beq.n	8012982 <SBUS_decoding+0x22>
		sbus.state = SBUS_STATE_FAILSAFE;
 8012976:	4b37      	ldr	r3, [pc, #220]	; (8012a54 <SBUS_decoding+0xf4>)
 8012978:	2200      	movs	r2, #0
 801297a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		return SBUS_Result_OldData;
 801297e:	2300      	movs	r3, #0
 8012980:	e1f6      	b.n	8012d70 <SBUS_decoding+0x410>
	}

	/* handle bit flag  */
	if(++(sbus._bitPos) == SBUS_ERROR_FLAG_BIT_SIZE) sbus._bitPos = 0; /* bitPos over 64 */
 8012982:	4b34      	ldr	r3, [pc, #208]	; (8012a54 <SBUS_decoding+0xf4>)
 8012984:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8012988:	3301      	adds	r3, #1
 801298a:	b2da      	uxtb	r2, r3
 801298c:	4b31      	ldr	r3, [pc, #196]	; (8012a54 <SBUS_decoding+0xf4>)
 801298e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8012992:	4b30      	ldr	r3, [pc, #192]	; (8012a54 <SBUS_decoding+0xf4>)
 8012994:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8012998:	2b40      	cmp	r3, #64	; 0x40
 801299a:	bf0c      	ite	eq
 801299c:	2301      	moveq	r3, #1
 801299e:	2300      	movne	r3, #0
 80129a0:	b2db      	uxtb	r3, r3
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d003      	beq.n	80129ae <SBUS_decoding+0x4e>
 80129a6:	4b2b      	ldr	r3, [pc, #172]	; (8012a54 <SBUS_decoding+0xf4>)
 80129a8:	2200      	movs	r2, #0
 80129aa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

	if(sbus.rxBuf[23] & SBUS_LOST_FRAME) sbus._errBit |= 1<<sbus._bitPos;	/* lost frame */
 80129ae:	4b29      	ldr	r3, [pc, #164]	; (8012a54 <SBUS_decoding+0xf4>)
 80129b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80129b4:	f003 0304 	and.w	r3, r3, #4
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d013      	beq.n	80129e4 <SBUS_decoding+0x84>
 80129bc:	4b25      	ldr	r3, [pc, #148]	; (8012a54 <SBUS_decoding+0xf4>)
 80129be:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
 80129c2:	4b24      	ldr	r3, [pc, #144]	; (8012a54 <SBUS_decoding+0xf4>)
 80129c4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80129c8:	4618      	mov	r0, r3
 80129ca:	2301      	movs	r3, #1
 80129cc:	4083      	lsls	r3, r0
 80129ce:	469b      	mov	fp, r3
 80129d0:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80129d4:	ea4b 0301 	orr.w	r3, fp, r1
 80129d8:	ea4c 0402 	orr.w	r4, ip, r2
 80129dc:	4a1d      	ldr	r2, [pc, #116]	; (8012a54 <SBUS_decoding+0xf4>)
 80129de:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 80129e2:	e013      	b.n	8012a0c <SBUS_decoding+0xac>
	else sbus._errBit &= ~(1<<sbus._bitPos);	/* normal frame */
 80129e4:	4b1b      	ldr	r3, [pc, #108]	; (8012a54 <SBUS_decoding+0xf4>)
 80129e6:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
 80129ea:	4b1a      	ldr	r3, [pc, #104]	; (8012a54 <SBUS_decoding+0xf4>)
 80129ec:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80129f0:	4618      	mov	r0, r3
 80129f2:	2301      	movs	r3, #1
 80129f4:	4083      	lsls	r3, r0
 80129f6:	43db      	mvns	r3, r3
 80129f8:	469b      	mov	fp, r3
 80129fa:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80129fe:	ea0b 0301 	and.w	r3, fp, r1
 8012a02:	ea0c 0402 	and.w	r4, ip, r2
 8012a06:	4a13      	ldr	r2, [pc, #76]	; (8012a54 <SBUS_decoding+0xf4>)
 8012a08:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	sbus._errCnt = _bitCount64(sbus._errBit);	/* count error bit */
 8012a0c:	4b11      	ldr	r3, [pc, #68]	; (8012a54 <SBUS_decoding+0xf4>)
 8012a0e:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8012a12:	4618      	mov	r0, r3
 8012a14:	4621      	mov	r1, r4
 8012a16:	f7ff ff43 	bl	80128a0 <_bitCount64>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	461a      	mov	r2, r3
 8012a1e:	4b0d      	ldr	r3, [pc, #52]	; (8012a54 <SBUS_decoding+0xf4>)
 8012a20:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	/* handle sbus state */
	if(sbus._errCnt > SBUS_ERROR_THRESHHOLD) sbus.state = SBUS_STATE_LOSS; /* if error rate over the threshold */
 8012a24:	4b0b      	ldr	r3, [pc, #44]	; (8012a54 <SBUS_decoding+0xf4>)
 8012a26:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8012a2a:	2b14      	cmp	r3, #20
 8012a2c:	d904      	bls.n	8012a38 <SBUS_decoding+0xd8>
 8012a2e:	4b09      	ldr	r3, [pc, #36]	; (8012a54 <SBUS_decoding+0xf4>)
 8012a30:	2201      	movs	r2, #1
 8012a32:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8012a36:	e003      	b.n	8012a40 <SBUS_decoding+0xe0>
	else sbus.state = SBUS_STATE_STEADY;	/* sbus signal stable */
 8012a38:	4b06      	ldr	r3, [pc, #24]	; (8012a54 <SBUS_decoding+0xf4>)
 8012a3a:	2202      	movs	r2, #2
 8012a3c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	if(sbus.rxBuf[23] & SBUS_LOST_FRAME) return SBUS_Result_OldData; /* if this frame is lost frame, not decode packet */
 8012a40:	4b04      	ldr	r3, [pc, #16]	; (8012a54 <SBUS_decoding+0xf4>)
 8012a42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012a46:	f003 0304 	and.w	r3, r3, #4
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d004      	beq.n	8012a58 <SBUS_decoding+0xf8>
 8012a4e:	2300      	movs	r3, #0
 8012a50:	e18e      	b.n	8012d70 <SBUS_decoding+0x410>
 8012a52:	bf00      	nop
 8012a54:	20001198 	.word	0x20001198

	/* decode packet */
	sbus.rcValue[0] = ((uint16_t)sbus.rxBuf[1] >> 0 | ((uint16_t)sbus.rxBuf[2] << 8)) & 0x07FF;
 8012a58:	4ba7      	ldr	r3, [pc, #668]	; (8012cf8 <SBUS_decoding+0x398>)
 8012a5a:	7f9b      	ldrb	r3, [r3, #30]
 8012a5c:	b21a      	sxth	r2, r3
 8012a5e:	4ba6      	ldr	r3, [pc, #664]	; (8012cf8 <SBUS_decoding+0x398>)
 8012a60:	7fdb      	ldrb	r3, [r3, #31]
 8012a62:	021b      	lsls	r3, r3, #8
 8012a64:	b21b      	sxth	r3, r3
 8012a66:	4313      	orrs	r3, r2
 8012a68:	b21b      	sxth	r3, r3
 8012a6a:	b29b      	uxth	r3, r3
 8012a6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012a70:	b29a      	uxth	r2, r3
 8012a72:	4ba1      	ldr	r3, [pc, #644]	; (8012cf8 <SBUS_decoding+0x398>)
 8012a74:	86da      	strh	r2, [r3, #54]	; 0x36
	sbus.rcValue[1] = ((uint16_t)sbus.rxBuf[2] >> 3 | ((uint16_t)sbus.rxBuf[3] << 5)) & 0x07FF;
 8012a76:	4ba0      	ldr	r3, [pc, #640]	; (8012cf8 <SBUS_decoding+0x398>)
 8012a78:	7fdb      	ldrb	r3, [r3, #31]
 8012a7a:	10db      	asrs	r3, r3, #3
 8012a7c:	b21a      	sxth	r2, r3
 8012a7e:	4b9e      	ldr	r3, [pc, #632]	; (8012cf8 <SBUS_decoding+0x398>)
 8012a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a84:	015b      	lsls	r3, r3, #5
 8012a86:	b21b      	sxth	r3, r3
 8012a88:	4313      	orrs	r3, r2
 8012a8a:	b21b      	sxth	r3, r3
 8012a8c:	b29b      	uxth	r3, r3
 8012a8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012a92:	b29a      	uxth	r2, r3
 8012a94:	4b98      	ldr	r3, [pc, #608]	; (8012cf8 <SBUS_decoding+0x398>)
 8012a96:	871a      	strh	r2, [r3, #56]	; 0x38
	sbus.rcValue[2] = ((uint16_t)sbus.rxBuf[3] >> 6 | ((uint16_t)sbus.rxBuf[4] << 2) | (uint16_t)sbus.rxBuf[5] << 10) & 0x07FF;
 8012a98:	4b97      	ldr	r3, [pc, #604]	; (8012cf8 <SBUS_decoding+0x398>)
 8012a9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a9e:	119b      	asrs	r3, r3, #6
 8012aa0:	b21a      	sxth	r2, r3
 8012aa2:	4b95      	ldr	r3, [pc, #596]	; (8012cf8 <SBUS_decoding+0x398>)
 8012aa4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012aa8:	009b      	lsls	r3, r3, #2
 8012aaa:	b21b      	sxth	r3, r3
 8012aac:	4313      	orrs	r3, r2
 8012aae:	b21a      	sxth	r2, r3
 8012ab0:	4b91      	ldr	r3, [pc, #580]	; (8012cf8 <SBUS_decoding+0x398>)
 8012ab2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8012ab6:	029b      	lsls	r3, r3, #10
 8012ab8:	b21b      	sxth	r3, r3
 8012aba:	4313      	orrs	r3, r2
 8012abc:	b21b      	sxth	r3, r3
 8012abe:	b29b      	uxth	r3, r3
 8012ac0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012ac4:	b29a      	uxth	r2, r3
 8012ac6:	4b8c      	ldr	r3, [pc, #560]	; (8012cf8 <SBUS_decoding+0x398>)
 8012ac8:	875a      	strh	r2, [r3, #58]	; 0x3a
	sbus.rcValue[3] = ((uint16_t)sbus.rxBuf[5] >> 1 | ((uint16_t)sbus.rxBuf[6] << 7)) & 0x07FF;
 8012aca:	4b8b      	ldr	r3, [pc, #556]	; (8012cf8 <SBUS_decoding+0x398>)
 8012acc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8012ad0:	105b      	asrs	r3, r3, #1
 8012ad2:	b21a      	sxth	r2, r3
 8012ad4:	4b88      	ldr	r3, [pc, #544]	; (8012cf8 <SBUS_decoding+0x398>)
 8012ad6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8012ada:	01db      	lsls	r3, r3, #7
 8012adc:	b21b      	sxth	r3, r3
 8012ade:	4313      	orrs	r3, r2
 8012ae0:	b21b      	sxth	r3, r3
 8012ae2:	b29b      	uxth	r3, r3
 8012ae4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012ae8:	b29a      	uxth	r2, r3
 8012aea:	4b83      	ldr	r3, [pc, #524]	; (8012cf8 <SBUS_decoding+0x398>)
 8012aec:	879a      	strh	r2, [r3, #60]	; 0x3c
	sbus.rcValue[4] = ((uint16_t)sbus.rxBuf[6] >> 4 | ((uint16_t)sbus.rxBuf[7] << 4)) & 0x07FF;
 8012aee:	4b82      	ldr	r3, [pc, #520]	; (8012cf8 <SBUS_decoding+0x398>)
 8012af0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8012af4:	111b      	asrs	r3, r3, #4
 8012af6:	b21a      	sxth	r2, r3
 8012af8:	4b7f      	ldr	r3, [pc, #508]	; (8012cf8 <SBUS_decoding+0x398>)
 8012afa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012afe:	011b      	lsls	r3, r3, #4
 8012b00:	b21b      	sxth	r3, r3
 8012b02:	4313      	orrs	r3, r2
 8012b04:	b21b      	sxth	r3, r3
 8012b06:	b29b      	uxth	r3, r3
 8012b08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012b0c:	b29a      	uxth	r2, r3
 8012b0e:	4b7a      	ldr	r3, [pc, #488]	; (8012cf8 <SBUS_decoding+0x398>)
 8012b10:	87da      	strh	r2, [r3, #62]	; 0x3e
	sbus.rcValue[5] = ((uint16_t)sbus.rxBuf[7] >> 7 | ((uint16_t)sbus.rxBuf[8] << 1) | (uint16_t)sbus.rxBuf[9] << 9) & 0x07FF;
 8012b12:	4b79      	ldr	r3, [pc, #484]	; (8012cf8 <SBUS_decoding+0x398>)
 8012b14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012b18:	11db      	asrs	r3, r3, #7
 8012b1a:	b21a      	sxth	r2, r3
 8012b1c:	4b76      	ldr	r3, [pc, #472]	; (8012cf8 <SBUS_decoding+0x398>)
 8012b1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8012b22:	005b      	lsls	r3, r3, #1
 8012b24:	b21b      	sxth	r3, r3
 8012b26:	4313      	orrs	r3, r2
 8012b28:	b21a      	sxth	r2, r3
 8012b2a:	4b73      	ldr	r3, [pc, #460]	; (8012cf8 <SBUS_decoding+0x398>)
 8012b2c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8012b30:	025b      	lsls	r3, r3, #9
 8012b32:	b21b      	sxth	r3, r3
 8012b34:	4313      	orrs	r3, r2
 8012b36:	b21b      	sxth	r3, r3
 8012b38:	b29b      	uxth	r3, r3
 8012b3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012b3e:	b29a      	uxth	r2, r3
 8012b40:	4b6d      	ldr	r3, [pc, #436]	; (8012cf8 <SBUS_decoding+0x398>)
 8012b42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	sbus.rcValue[6] = ((uint16_t)sbus.rxBuf[9] >> 2 | ((uint16_t)sbus.rxBuf[10] << 6)) & 0x07FF;
 8012b46:	4b6c      	ldr	r3, [pc, #432]	; (8012cf8 <SBUS_decoding+0x398>)
 8012b48:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8012b4c:	109b      	asrs	r3, r3, #2
 8012b4e:	b21a      	sxth	r2, r3
 8012b50:	4b69      	ldr	r3, [pc, #420]	; (8012cf8 <SBUS_decoding+0x398>)
 8012b52:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8012b56:	019b      	lsls	r3, r3, #6
 8012b58:	b21b      	sxth	r3, r3
 8012b5a:	4313      	orrs	r3, r2
 8012b5c:	b21b      	sxth	r3, r3
 8012b5e:	b29b      	uxth	r3, r3
 8012b60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012b64:	b29a      	uxth	r2, r3
 8012b66:	4b64      	ldr	r3, [pc, #400]	; (8012cf8 <SBUS_decoding+0x398>)
 8012b68:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	sbus.rcValue[7] = ((uint16_t)sbus.rxBuf[10] >> 5 | ((uint16_t)sbus.rxBuf[11] << 3)) & 0x07FF;
 8012b6c:	4b62      	ldr	r3, [pc, #392]	; (8012cf8 <SBUS_decoding+0x398>)
 8012b6e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8012b72:	115b      	asrs	r3, r3, #5
 8012b74:	b21a      	sxth	r2, r3
 8012b76:	4b60      	ldr	r3, [pc, #384]	; (8012cf8 <SBUS_decoding+0x398>)
 8012b78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b7c:	00db      	lsls	r3, r3, #3
 8012b7e:	b21b      	sxth	r3, r3
 8012b80:	4313      	orrs	r3, r2
 8012b82:	b21b      	sxth	r3, r3
 8012b84:	b29b      	uxth	r3, r3
 8012b86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012b8a:	b29a      	uxth	r2, r3
 8012b8c:	4b5a      	ldr	r3, [pc, #360]	; (8012cf8 <SBUS_decoding+0x398>)
 8012b8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	sbus.rcValue[8] = ((uint16_t)sbus.rxBuf[12] << 0 | ((uint16_t)sbus.rxBuf[13] << 8)) & 0x07FF;
 8012b92:	4b59      	ldr	r3, [pc, #356]	; (8012cf8 <SBUS_decoding+0x398>)
 8012b94:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8012b98:	b21a      	sxth	r2, r3
 8012b9a:	4b57      	ldr	r3, [pc, #348]	; (8012cf8 <SBUS_decoding+0x398>)
 8012b9c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8012ba0:	021b      	lsls	r3, r3, #8
 8012ba2:	b21b      	sxth	r3, r3
 8012ba4:	4313      	orrs	r3, r2
 8012ba6:	b21b      	sxth	r3, r3
 8012ba8:	b29b      	uxth	r3, r3
 8012baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012bae:	b29a      	uxth	r2, r3
 8012bb0:	4b51      	ldr	r3, [pc, #324]	; (8012cf8 <SBUS_decoding+0x398>)
 8012bb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	sbus.rcValue[9] = ((uint16_t)sbus.rxBuf[13] >> 3 | ((uint16_t)sbus.rxBuf[14] << 5)) & 0x07FF;
 8012bb6:	4b50      	ldr	r3, [pc, #320]	; (8012cf8 <SBUS_decoding+0x398>)
 8012bb8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8012bbc:	10db      	asrs	r3, r3, #3
 8012bbe:	b21a      	sxth	r2, r3
 8012bc0:	4b4d      	ldr	r3, [pc, #308]	; (8012cf8 <SBUS_decoding+0x398>)
 8012bc2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012bc6:	015b      	lsls	r3, r3, #5
 8012bc8:	b21b      	sxth	r3, r3
 8012bca:	4313      	orrs	r3, r2
 8012bcc:	b21b      	sxth	r3, r3
 8012bce:	b29b      	uxth	r3, r3
 8012bd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012bd4:	b29a      	uxth	r2, r3
 8012bd6:	4b48      	ldr	r3, [pc, #288]	; (8012cf8 <SBUS_decoding+0x398>)
 8012bd8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	sbus.rcValue[10] = ((uint16_t)sbus.rxBuf[14] >> 6 | ((uint16_t)sbus.rxBuf[15] << 2) | (uint16_t)sbus.rxBuf[16] << 10) & 0x07FF;
 8012bdc:	4b46      	ldr	r3, [pc, #280]	; (8012cf8 <SBUS_decoding+0x398>)
 8012bde:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012be2:	119b      	asrs	r3, r3, #6
 8012be4:	b21a      	sxth	r2, r3
 8012be6:	4b44      	ldr	r3, [pc, #272]	; (8012cf8 <SBUS_decoding+0x398>)
 8012be8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012bec:	009b      	lsls	r3, r3, #2
 8012bee:	b21b      	sxth	r3, r3
 8012bf0:	4313      	orrs	r3, r2
 8012bf2:	b21a      	sxth	r2, r3
 8012bf4:	4b40      	ldr	r3, [pc, #256]	; (8012cf8 <SBUS_decoding+0x398>)
 8012bf6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012bfa:	029b      	lsls	r3, r3, #10
 8012bfc:	b21b      	sxth	r3, r3
 8012bfe:	4313      	orrs	r3, r2
 8012c00:	b21b      	sxth	r3, r3
 8012c02:	b29b      	uxth	r3, r3
 8012c04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012c08:	b29a      	uxth	r2, r3
 8012c0a:	4b3b      	ldr	r3, [pc, #236]	; (8012cf8 <SBUS_decoding+0x398>)
 8012c0c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	sbus.rcValue[11] = ((uint16_t)sbus.rxBuf[16] >> 1 | ((uint16_t)sbus.rxBuf[17] << 7)) & 0x07FF;
 8012c10:	4b39      	ldr	r3, [pc, #228]	; (8012cf8 <SBUS_decoding+0x398>)
 8012c12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c16:	105b      	asrs	r3, r3, #1
 8012c18:	b21a      	sxth	r2, r3
 8012c1a:	4b37      	ldr	r3, [pc, #220]	; (8012cf8 <SBUS_decoding+0x398>)
 8012c1c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012c20:	01db      	lsls	r3, r3, #7
 8012c22:	b21b      	sxth	r3, r3
 8012c24:	4313      	orrs	r3, r2
 8012c26:	b21b      	sxth	r3, r3
 8012c28:	b29b      	uxth	r3, r3
 8012c2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012c2e:	b29a      	uxth	r2, r3
 8012c30:	4b31      	ldr	r3, [pc, #196]	; (8012cf8 <SBUS_decoding+0x398>)
 8012c32:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	sbus.rcValue[12] = ((uint16_t)sbus.rxBuf[17] >> 4 | ((uint16_t)sbus.rxBuf[18] << 4)) & 0x07FF;
 8012c36:	4b30      	ldr	r3, [pc, #192]	; (8012cf8 <SBUS_decoding+0x398>)
 8012c38:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012c3c:	111b      	asrs	r3, r3, #4
 8012c3e:	b21a      	sxth	r2, r3
 8012c40:	4b2d      	ldr	r3, [pc, #180]	; (8012cf8 <SBUS_decoding+0x398>)
 8012c42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012c46:	011b      	lsls	r3, r3, #4
 8012c48:	b21b      	sxth	r3, r3
 8012c4a:	4313      	orrs	r3, r2
 8012c4c:	b21b      	sxth	r3, r3
 8012c4e:	b29b      	uxth	r3, r3
 8012c50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012c54:	b29a      	uxth	r2, r3
 8012c56:	4b28      	ldr	r3, [pc, #160]	; (8012cf8 <SBUS_decoding+0x398>)
 8012c58:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	sbus.rcValue[13] = ((uint16_t)sbus.rxBuf[18] >> 7 | ((uint16_t)sbus.rxBuf[19] << 1) | (uint16_t)sbus.rxBuf[21] << 9) & 0x07FF;
 8012c5c:	4b26      	ldr	r3, [pc, #152]	; (8012cf8 <SBUS_decoding+0x398>)
 8012c5e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012c62:	11db      	asrs	r3, r3, #7
 8012c64:	b21a      	sxth	r2, r3
 8012c66:	4b24      	ldr	r3, [pc, #144]	; (8012cf8 <SBUS_decoding+0x398>)
 8012c68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012c6c:	005b      	lsls	r3, r3, #1
 8012c6e:	b21b      	sxth	r3, r3
 8012c70:	4313      	orrs	r3, r2
 8012c72:	b21a      	sxth	r2, r3
 8012c74:	4b20      	ldr	r3, [pc, #128]	; (8012cf8 <SBUS_decoding+0x398>)
 8012c76:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8012c7a:	025b      	lsls	r3, r3, #9
 8012c7c:	b21b      	sxth	r3, r3
 8012c7e:	4313      	orrs	r3, r2
 8012c80:	b21b      	sxth	r3, r3
 8012c82:	b29b      	uxth	r3, r3
 8012c84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012c88:	b29a      	uxth	r2, r3
 8012c8a:	4b1b      	ldr	r3, [pc, #108]	; (8012cf8 <SBUS_decoding+0x398>)
 8012c8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	sbus.rcValue[14] = ((uint16_t)sbus.rxBuf[20] >> 2 | ((uint16_t)sbus.rxBuf[21] << 6)) & 0x07FF;
 8012c90:	4b19      	ldr	r3, [pc, #100]	; (8012cf8 <SBUS_decoding+0x398>)
 8012c92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012c96:	109b      	asrs	r3, r3, #2
 8012c98:	b21a      	sxth	r2, r3
 8012c9a:	4b17      	ldr	r3, [pc, #92]	; (8012cf8 <SBUS_decoding+0x398>)
 8012c9c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8012ca0:	019b      	lsls	r3, r3, #6
 8012ca2:	b21b      	sxth	r3, r3
 8012ca4:	4313      	orrs	r3, r2
 8012ca6:	b21b      	sxth	r3, r3
 8012ca8:	b29b      	uxth	r3, r3
 8012caa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012cae:	b29a      	uxth	r2, r3
 8012cb0:	4b11      	ldr	r3, [pc, #68]	; (8012cf8 <SBUS_decoding+0x398>)
 8012cb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	sbus.rcValue[15] = ((uint16_t)sbus.rxBuf[21] >> 5 | ((uint16_t)sbus.rxBuf[22] << 3)) & 0x07FF;
 8012cb6:	4b10      	ldr	r3, [pc, #64]	; (8012cf8 <SBUS_decoding+0x398>)
 8012cb8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8012cbc:	115b      	asrs	r3, r3, #5
 8012cbe:	b21a      	sxth	r2, r3
 8012cc0:	4b0d      	ldr	r3, [pc, #52]	; (8012cf8 <SBUS_decoding+0x398>)
 8012cc2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012cc6:	00db      	lsls	r3, r3, #3
 8012cc8:	b21b      	sxth	r3, r3
 8012cca:	4313      	orrs	r3, r2
 8012ccc:	b21b      	sxth	r3, r3
 8012cce:	b29b      	uxth	r3, r3
 8012cd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012cd4:	b29a      	uxth	r2, r3
 8012cd6:	4b08      	ldr	r3, [pc, #32]	; (8012cf8 <SBUS_decoding+0x398>)
 8012cd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	if (((uint16_t)sbus.rxBuf[23]) & 0x0001)       sbus.rcValue[16] = 2000; else sbus.rcValue[16] = 1000;
 8012cdc:	4b06      	ldr	r3, [pc, #24]	; (8012cf8 <SBUS_decoding+0x398>)
 8012cde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012ce2:	f003 0301 	and.w	r3, r3, #1
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d008      	beq.n	8012cfc <SBUS_decoding+0x39c>
 8012cea:	4b03      	ldr	r3, [pc, #12]	; (8012cf8 <SBUS_decoding+0x398>)
 8012cec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8012cf0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8012cf4:	e007      	b.n	8012d06 <SBUS_decoding+0x3a6>
 8012cf6:	bf00      	nop
 8012cf8:	20001198 	.word	0x20001198
 8012cfc:	4b1f      	ldr	r3, [pc, #124]	; (8012d7c <SBUS_decoding+0x41c>)
 8012cfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012d02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	if (((uint16_t)sbus.rxBuf[23] >> 1) & 0x0001)  sbus.rcValue[17] = 2000; else sbus.rcValue[17] = 1000;
 8012d06:	4b1d      	ldr	r3, [pc, #116]	; (8012d7c <SBUS_decoding+0x41c>)
 8012d08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012d0c:	f003 0302 	and.w	r3, r3, #2
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d005      	beq.n	8012d20 <SBUS_decoding+0x3c0>
 8012d14:	4b19      	ldr	r3, [pc, #100]	; (8012d7c <SBUS_decoding+0x41c>)
 8012d16:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8012d1a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8012d1e:	e004      	b.n	8012d2a <SBUS_decoding+0x3ca>
 8012d20:	4b16      	ldr	r3, [pc, #88]	; (8012d7c <SBUS_decoding+0x41c>)
 8012d22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012d26:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	607b      	str	r3, [r7, #4]
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	2b11      	cmp	r3, #17
 8012d32:	dc1c      	bgt.n	8012d6e <SBUS_decoding+0x40e>
		sbus.compRcValue[i] = (sbus.rcValue[i]) * 5 / 8 + 880;
 8012d34:	4a11      	ldr	r2, [pc, #68]	; (8012d7c <SBUS_decoding+0x41c>)
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	3318      	adds	r3, #24
 8012d3a:	005b      	lsls	r3, r3, #1
 8012d3c:	4413      	add	r3, r2
 8012d3e:	88db      	ldrh	r3, [r3, #6]
 8012d40:	461a      	mov	r2, r3
 8012d42:	4613      	mov	r3, r2
 8012d44:	009b      	lsls	r3, r3, #2
 8012d46:	4413      	add	r3, r2
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	da00      	bge.n	8012d4e <SBUS_decoding+0x3ee>
 8012d4c:	3307      	adds	r3, #7
 8012d4e:	10db      	asrs	r3, r3, #3
 8012d50:	b29b      	uxth	r3, r3
 8012d52:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8012d56:	b299      	uxth	r1, r3
 8012d58:	4a08      	ldr	r2, [pc, #32]	; (8012d7c <SBUS_decoding+0x41c>)
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	332c      	adds	r3, #44	; 0x2c
 8012d5e:	005b      	lsls	r3, r3, #1
 8012d60:	4413      	add	r3, r2
 8012d62:	460a      	mov	r2, r1
 8012d64:	805a      	strh	r2, [r3, #2]
	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	3301      	adds	r3, #1
 8012d6a:	607b      	str	r3, [r7, #4]
 8012d6c:	e7df      	b.n	8012d2e <SBUS_decoding+0x3ce>
	}

//	if(sbus_comp_rcValue[0]<SBUS_FAILSAFE && sbus_comp_rcValue[1]<SBUS_FAILSAFE
//	&& sbus_comp_rcValue[2]<SBUS_FAILSAFE && sbus_comp_rcValue[3]<SBUS_FAILSAFE) return; // failsafe
	return SBUS_Result_NewData;
 8012d6e:	2301      	movs	r3, #1
}
 8012d70:	4618      	mov	r0, r3
 8012d72:	3708      	adds	r7, #8
 8012d74:	46bd      	mov	sp, r7
 8012d76:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8012d7a:	bf00      	nop
 8012d7c:	20001198 	.word	0x20001198

08012d80 <SBUS_uartRxCpltCallback>:


SBUS_Result_t SBUS_uartRxCpltCallback(){// must call this function on HAL_UART_RxCpltCallback
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b082      	sub	sp, #8
 8012d84:	af00      	add	r7, sp, #0
	static uint8_t i=0;
	SBUS_Result_t result = SBUS_Result_OldData;
 8012d86:	2300      	movs	r3, #0
 8012d88:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 8012d8a:	4b37      	ldr	r3, [pc, #220]	; (8012e68 <SBUS_uartRxCpltCallback+0xe8>)
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	701a      	strb	r2, [r3, #0]
 8012d90:	4b35      	ldr	r3, [pc, #212]	; (8012e68 <SBUS_uartRxCpltCallback+0xe8>)
 8012d92:	781b      	ldrb	r3, [r3, #0]
 8012d94:	2b18      	cmp	r3, #24
 8012d96:	d862      	bhi.n	8012e5e <SBUS_uartRxCpltCallback+0xde>
		_curByte = sbus.dmaBuf[i];
 8012d98:	4b33      	ldr	r3, [pc, #204]	; (8012e68 <SBUS_uartRxCpltCallback+0xe8>)
 8012d9a:	781b      	ldrb	r3, [r3, #0]
 8012d9c:	461a      	mov	r2, r3
 8012d9e:	4b33      	ldr	r3, [pc, #204]	; (8012e6c <SBUS_uartRxCpltCallback+0xec>)
 8012da0:	4413      	add	r3, r2
 8012da2:	791a      	ldrb	r2, [r3, #4]
 8012da4:	4b32      	ldr	r3, [pc, #200]	; (8012e70 <SBUS_uartRxCpltCallback+0xf0>)
 8012da6:	701a      	strb	r2, [r3, #0]
		if (_parserState == 0) {
 8012da8:	4b32      	ldr	r3, [pc, #200]	; (8012e74 <SBUS_uartRxCpltCallback+0xf4>)
 8012daa:	781b      	ldrb	r3, [r3, #0]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d120      	bne.n	8012df2 <SBUS_uartRxCpltCallback+0x72>
			if ((_curByte == SBUS_HEADER) && ((_prevByte == SBUS_FOOTER) || ((_prevByte & SBUS2MASK) == SBUS_FOOTER))) {
 8012db0:	4b2f      	ldr	r3, [pc, #188]	; (8012e70 <SBUS_uartRxCpltCallback+0xf0>)
 8012db2:	781b      	ldrb	r3, [r3, #0]
 8012db4:	2b0f      	cmp	r3, #15
 8012db6:	d118      	bne.n	8012dea <SBUS_uartRxCpltCallback+0x6a>
 8012db8:	4b2f      	ldr	r3, [pc, #188]	; (8012e78 <SBUS_uartRxCpltCallback+0xf8>)
 8012dba:	781b      	ldrb	r3, [r3, #0]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d005      	beq.n	8012dcc <SBUS_uartRxCpltCallback+0x4c>
 8012dc0:	4b2d      	ldr	r3, [pc, #180]	; (8012e78 <SBUS_uartRxCpltCallback+0xf8>)
 8012dc2:	781b      	ldrb	r3, [r3, #0]
 8012dc4:	f003 030f 	and.w	r3, r3, #15
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d10e      	bne.n	8012dea <SBUS_uartRxCpltCallback+0x6a>
				sbus.rxBuf[_parserState] = _curByte;
 8012dcc:	4b29      	ldr	r3, [pc, #164]	; (8012e74 <SBUS_uartRxCpltCallback+0xf4>)
 8012dce:	781b      	ldrb	r3, [r3, #0]
 8012dd0:	4619      	mov	r1, r3
 8012dd2:	4b27      	ldr	r3, [pc, #156]	; (8012e70 <SBUS_uartRxCpltCallback+0xf0>)
 8012dd4:	781a      	ldrb	r2, [r3, #0]
 8012dd6:	4b25      	ldr	r3, [pc, #148]	; (8012e6c <SBUS_uartRxCpltCallback+0xec>)
 8012dd8:	440b      	add	r3, r1
 8012dda:	775a      	strb	r2, [r3, #29]
				_parserState++;
 8012ddc:	4b25      	ldr	r3, [pc, #148]	; (8012e74 <SBUS_uartRxCpltCallback+0xf4>)
 8012dde:	781b      	ldrb	r3, [r3, #0]
 8012de0:	3301      	adds	r3, #1
 8012de2:	b2da      	uxtb	r2, r3
 8012de4:	4b23      	ldr	r3, [pc, #140]	; (8012e74 <SBUS_uartRxCpltCallback+0xf4>)
 8012de6:	701a      	strb	r2, [r3, #0]
 8012de8:	e02e      	b.n	8012e48 <SBUS_uartRxCpltCallback+0xc8>
			} else {
				_parserState = 0;
 8012dea:	4b22      	ldr	r3, [pc, #136]	; (8012e74 <SBUS_uartRxCpltCallback+0xf4>)
 8012dec:	2200      	movs	r2, #0
 8012dee:	701a      	strb	r2, [r3, #0]
 8012df0:	e02a      	b.n	8012e48 <SBUS_uartRxCpltCallback+0xc8>
			}
		}
		else {
			// strip off the data
			if ((_parserState) < SBUS_BUF_SIZE) {
 8012df2:	4b20      	ldr	r3, [pc, #128]	; (8012e74 <SBUS_uartRxCpltCallback+0xf4>)
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	2b18      	cmp	r3, #24
 8012df8:	d80d      	bhi.n	8012e16 <SBUS_uartRxCpltCallback+0x96>
				sbus.rxBuf[_parserState] = _curByte;
 8012dfa:	4b1e      	ldr	r3, [pc, #120]	; (8012e74 <SBUS_uartRxCpltCallback+0xf4>)
 8012dfc:	781b      	ldrb	r3, [r3, #0]
 8012dfe:	4619      	mov	r1, r3
 8012e00:	4b1b      	ldr	r3, [pc, #108]	; (8012e70 <SBUS_uartRxCpltCallback+0xf0>)
 8012e02:	781a      	ldrb	r2, [r3, #0]
 8012e04:	4b19      	ldr	r3, [pc, #100]	; (8012e6c <SBUS_uartRxCpltCallback+0xec>)
 8012e06:	440b      	add	r3, r1
 8012e08:	775a      	strb	r2, [r3, #29]
				_parserState++;
 8012e0a:	4b1a      	ldr	r3, [pc, #104]	; (8012e74 <SBUS_uartRxCpltCallback+0xf4>)
 8012e0c:	781b      	ldrb	r3, [r3, #0]
 8012e0e:	3301      	adds	r3, #1
 8012e10:	b2da      	uxtb	r2, r3
 8012e12:	4b18      	ldr	r3, [pc, #96]	; (8012e74 <SBUS_uartRxCpltCallback+0xf4>)
 8012e14:	701a      	strb	r2, [r3, #0]
			}
			// check the end byte
			if ((_parserState) == SBUS_BUF_SIZE) {
 8012e16:	4b17      	ldr	r3, [pc, #92]	; (8012e74 <SBUS_uartRxCpltCallback+0xf4>)
 8012e18:	781b      	ldrb	r3, [r3, #0]
 8012e1a:	2b19      	cmp	r3, #25
 8012e1c:	d114      	bne.n	8012e48 <SBUS_uartRxCpltCallback+0xc8>
				if ((_curByte == SBUS_FOOTER) || ((_curByte & SBUS2MASK) == SBUS_FOOTER)) {
 8012e1e:	4b14      	ldr	r3, [pc, #80]	; (8012e70 <SBUS_uartRxCpltCallback+0xf0>)
 8012e20:	781b      	ldrb	r3, [r3, #0]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d005      	beq.n	8012e32 <SBUS_uartRxCpltCallback+0xb2>
 8012e26:	4b12      	ldr	r3, [pc, #72]	; (8012e70 <SBUS_uartRxCpltCallback+0xf0>)
 8012e28:	781b      	ldrb	r3, [r3, #0]
 8012e2a:	f003 030f 	and.w	r3, r3, #15
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d107      	bne.n	8012e42 <SBUS_uartRxCpltCallback+0xc2>
					_parserState = 0;
 8012e32:	4b10      	ldr	r3, [pc, #64]	; (8012e74 <SBUS_uartRxCpltCallback+0xf4>)
 8012e34:	2200      	movs	r2, #0
 8012e36:	701a      	strb	r2, [r3, #0]
					result = SBUS_decoding();
 8012e38:	f7ff fd92 	bl	8012960 <SBUS_decoding>
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	71fb      	strb	r3, [r7, #7]
 8012e40:	e002      	b.n	8012e48 <SBUS_uartRxCpltCallback+0xc8>
				}
				else {
					_parserState = 0;
 8012e42:	4b0c      	ldr	r3, [pc, #48]	; (8012e74 <SBUS_uartRxCpltCallback+0xf4>)
 8012e44:	2200      	movs	r2, #0
 8012e46:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		_prevByte = _curByte;
 8012e48:	4b09      	ldr	r3, [pc, #36]	; (8012e70 <SBUS_uartRxCpltCallback+0xf0>)
 8012e4a:	781a      	ldrb	r2, [r3, #0]
 8012e4c:	4b0a      	ldr	r3, [pc, #40]	; (8012e78 <SBUS_uartRxCpltCallback+0xf8>)
 8012e4e:	701a      	strb	r2, [r3, #0]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 8012e50:	4b05      	ldr	r3, [pc, #20]	; (8012e68 <SBUS_uartRxCpltCallback+0xe8>)
 8012e52:	781b      	ldrb	r3, [r3, #0]
 8012e54:	3301      	adds	r3, #1
 8012e56:	b2da      	uxtb	r2, r3
 8012e58:	4b03      	ldr	r3, [pc, #12]	; (8012e68 <SBUS_uartRxCpltCallback+0xe8>)
 8012e5a:	701a      	strb	r2, [r3, #0]
 8012e5c:	e798      	b.n	8012d90 <SBUS_uartRxCpltCallback+0x10>
	}
	return result;
 8012e5e:	79fb      	ldrb	r3, [r7, #7]
}
 8012e60:	4618      	mov	r0, r3
 8012e62:	3708      	adds	r7, #8
 8012e64:	46bd      	mov	sp, r7
 8012e66:	bd80      	pop	{r7, pc}
 8012e68:	2000122b 	.word	0x2000122b
 8012e6c:	20001198 	.word	0x20001198
 8012e70:	20001229 	.word	0x20001229
 8012e74:	20001228 	.word	0x20001228
 8012e78:	2000122a 	.word	0x2000122a

08012e7c <SBUS_getChannel>:
//		printf("%d \t", sbus.compRcValue[i]);
//	}
//	printf("\r\n");
//}

uint16_t SBUS_getChannel(uint8_t chan) { // start from 1
 8012e7c:	b480      	push	{r7}
 8012e7e:	b083      	sub	sp, #12
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	4603      	mov	r3, r0
 8012e84:	71fb      	strb	r3, [r7, #7]
	return sbus.compRcValue[chan - 1];
 8012e86:	79fb      	ldrb	r3, [r7, #7]
 8012e88:	3b01      	subs	r3, #1
 8012e8a:	4a05      	ldr	r2, [pc, #20]	; (8012ea0 <SBUS_getChannel+0x24>)
 8012e8c:	332c      	adds	r3, #44	; 0x2c
 8012e8e:	005b      	lsls	r3, r3, #1
 8012e90:	4413      	add	r3, r2
 8012e92:	885b      	ldrh	r3, [r3, #2]
}
 8012e94:	4618      	mov	r0, r3
 8012e96:	370c      	adds	r7, #12
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9e:	4770      	bx	lr
 8012ea0:	20001198 	.word	0x20001198

08012ea4 <_ZN2FC6MsgBus9getHealthEPNS_6HealthE>:
    SIMPLE_FUNC_IMPL(Health, Health, health)
 8012ea4:	b4b0      	push	{r4, r5, r7}
 8012ea6:	b085      	sub	sp, #20
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
 8012eac:	6039      	str	r1, [r7, #0]
 8012eae:	2300      	movs	r3, #0
 8012eb0:	73fb      	strb	r3, [r7, #15]
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8012ebe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012ec2:	42a2      	cmp	r2, r4
 8012ec4:	bf08      	it	eq
 8012ec6:	4299      	cmpeq	r1, r3
 8012ec8:	d001      	beq.n	8012ece <_ZN2FC6MsgBus9getHealthEPNS_6HealthE+0x2a>
 8012eca:	2301      	movs	r3, #1
 8012ecc:	73fb      	strb	r3, [r7, #15]
 8012ece:	683a      	ldr	r2, [r7, #0]
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	4615      	mov	r5, r2
 8012ed4:	f503 74c4 	add.w	r4, r3, #392	; 0x188
 8012ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012edc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012ee0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8012ee4:	7bfb      	ldrb	r3, [r7, #15]
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	3714      	adds	r7, #20
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bcb0      	pop	{r4, r5, r7}
 8012eee:	4770      	bx	lr

08012ef0 <_ZN2FC6MsgBus9setHealthERKNS_6HealthE>:
 8012ef0:	b4b0      	push	{r4, r5, r7}
 8012ef2:	b083      	sub	sp, #12
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
 8012ef8:	6039      	str	r1, [r7, #0]
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	683a      	ldr	r2, [r7, #0]
 8012efe:	f503 74c4 	add.w	r4, r3, #392	; 0x188
 8012f02:	4615      	mov	r5, r2
 8012f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f08:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012f0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012f10:	bf00      	nop
 8012f12:	370c      	adds	r7, #12
 8012f14:	46bd      	mov	sp, r7
 8012f16:	bcb0      	pop	{r4, r5, r7}
 8012f18:	4770      	bx	lr

08012f1a <_ZN2FC6MsgBus11getMotorPWMEPNS_8MotorPWME>:
    SIMPLE_FUNC_IMPL(MotorPWM, MotorPWM, motorPWM)
 8012f1a:	b4b0      	push	{r4, r5, r7}
 8012f1c:	b085      	sub	sp, #20
 8012f1e:	af00      	add	r7, sp, #0
 8012f20:	6078      	str	r0, [r7, #4]
 8012f22:	6039      	str	r1, [r7, #0]
 8012f24:	2300      	movs	r3, #0
 8012f26:	73fb      	strb	r3, [r7, #15]
 8012f28:	683b      	ldr	r3, [r7, #0]
 8012f2a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012f34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012f38:	42a2      	cmp	r2, r4
 8012f3a:	bf08      	it	eq
 8012f3c:	4299      	cmpeq	r1, r3
 8012f3e:	d001      	beq.n	8012f44 <_ZN2FC6MsgBus11getMotorPWMEPNS_8MotorPWME+0x2a>
 8012f40:	2301      	movs	r3, #1
 8012f42:	73fb      	strb	r3, [r7, #15]
 8012f44:	683a      	ldr	r2, [r7, #0]
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	4615      	mov	r5, r2
 8012f4a:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8012f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012f52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012f56:	e885 0003 	stmia.w	r5, {r0, r1}
 8012f5a:	7bfb      	ldrb	r3, [r7, #15]
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	3714      	adds	r7, #20
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bcb0      	pop	{r4, r5, r7}
 8012f64:	4770      	bx	lr
	...

08012f68 <_ZN2FC24ModuleAttitudeController4mainEv>:
	static void main(){
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b0ee      	sub	sp, #440	; 0x1b8
 8012f6c:	af00      	add	r7, sp, #0
		ModuleAttitudeController attitudeController;
 8012f6e:	463b      	mov	r3, r7
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7fd f891 	bl	8010098 <_ZN2FC24ModuleAttitudeControllerC1Ev>
			if(osThreadFlagsWait(AC_reset, osFlagsWaitAny, 0) >= 0){
 8012f76:	2200      	movs	r2, #0
 8012f78:	2100      	movs	r1, #0
 8012f7a:	2002      	movs	r0, #2
 8012f7c:	f00e fbf0 	bl	8021760 <osThreadFlagsWait>
 8012f80:	2301      	movs	r3, #1
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d003      	beq.n	8012f8e <_ZN2FC24ModuleAttitudeController4mainEv+0x26>
				attitudeController.initialize();
 8012f86:	463b      	mov	r3, r7
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7f1 fe53 	bl	8004c34 <_ZN23px4_AlgorithmModelClass10initializeEv>
			osThreadFlagsWait(AC_fromAHRS, osFlagsWaitAny, osWaitForever);
 8012f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8012f92:	2100      	movs	r1, #0
 8012f94:	2001      	movs	r0, #1
 8012f96:	f00e fbe3 	bl	8021760 <osThreadFlagsWait>
			attitudeController.oneStep();
 8012f9a:	463b      	mov	r3, r7
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f7fd f889 	bl	80100b4 <_ZN2FC24ModuleAttitudeController7oneStepEv>
			freqCnt++;
 8012fa2:	4b03      	ldr	r3, [pc, #12]	; (8012fb0 <_ZN2FC24ModuleAttitudeController4mainEv+0x48>)
 8012fa4:	881b      	ldrh	r3, [r3, #0]
 8012fa6:	3301      	adds	r3, #1
 8012fa8:	b29a      	uxth	r2, r3
 8012faa:	4b01      	ldr	r3, [pc, #4]	; (8012fb0 <_ZN2FC24ModuleAttitudeController4mainEv+0x48>)
 8012fac:	801a      	strh	r2, [r3, #0]
			if(osThreadFlagsWait(AC_reset, osFlagsWaitAny, 0) >= 0){
 8012fae:	e7e2      	b.n	8012f76 <_ZN2FC24ModuleAttitudeController4mainEv+0xe>
 8012fb0:	2000154c 	.word	0x2000154c

08012fb4 <_ZN2FC10ModuleAHRS4mainEv>:
	/*
	 *  ModuleAHRS main function
	 *  this function is called by CMSIS task function
	 *	wait signal from accelerometer and gyrometer
	 */
    static void main(){
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b0ac      	sub	sp, #176	; 0xb0
 8012fb8:	af00      	add	r7, sp, #0
    	ModuleAHRS moduleAHRS;
 8012fba:	463b      	mov	r3, r7
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7fa feb9 	bl	800dd34 <_ZN2FC10ModuleAHRSC1Ev>
    	uint8_t cnt = 0;
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    	while(1){
    		/* wait accel, gyro value set */
//    		osThreadFlagsWait(0x3U, osFlagsWaitAll, osWaitForever);
    		moduleAHRS.oneStep();
 8012fc8:	463b      	mov	r3, r7
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f7fa ff08 	bl	800dde0 <_ZN2FC10ModuleAHRS7oneStepEv>
    		if(cnt>4){
 8012fd0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8012fd4:	2b04      	cmp	r3, #4
 8012fd6:	d902      	bls.n	8012fde <_ZN2FC10ModuleAHRS4mainEv+0x2a>
        		ModuleAttitudeController::setSignal(AC_fromAHRS);		/* 200hz */
 8012fd8:	2001      	movs	r0, #1
 8012fda:	f7fd fb29 	bl	8010630 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE>
    		}

    		cnt++;
 8012fde:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8012fe2:	3301      	adds	r3, #1
 8012fe4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    		osDelay(1);			/* 1000hz */
 8012fe8:	2001      	movs	r0, #1
 8012fea:	f00e fc4d 	bl	8021888 <osDelay>
    		moduleAHRS.oneStep();
 8012fee:	e7eb      	b.n	8012fc8 <_ZN2FC10ModuleAHRS4mainEv+0x14>

08012ff0 <_ZN2FC24ModulePositionController4mainEv>:

class ModulePositionController : public positionControlModelClass, public Freq<ModulePositionController> {
public:
	ModulePositionController();

	static void main(){
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 8012ff6:	af00      	add	r7, sp, #0
		bool firstLoop;
		ModulePositionController positionController;
 8012ff8:	463b      	mov	r3, r7
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f7fe f870 	bl	80110e0 <_ZN2FC24ModulePositionControllerC1Ev>
		while(1){
			firstLoop = true;
 8013000:	2301      	movs	r3, #1
 8013002:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
			/* wait position controller start */
			osThreadFlagsWait(PC_start, osFlagsWaitAny, osWaitForever);
 8013006:	f04f 32ff 	mov.w	r2, #4294967295
 801300a:	2100      	movs	r1, #0
 801300c:	2002      	movs	r0, #2
 801300e:	f00e fba7 	bl	8021760 <osThreadFlagsWait>
			while(1){
				/* if first loop or reset command, initialize */
				if(firstLoop || (osThreadFlagsGet() & PC_reset)){
 8013012:	f897 3447 	ldrb.w	r3, [r7, #1095]	; 0x447
 8013016:	2b00      	cmp	r3, #0
 8013018:	d106      	bne.n	8013028 <_ZN2FC24ModulePositionController4mainEv+0x38>
 801301a:	f00e fb6d 	bl	80216f8 <osThreadFlagsGet>
 801301e:	4603      	mov	r3, r0
 8013020:	f003 0308 	and.w	r3, r3, #8
 8013024:	2b00      	cmp	r3, #0
 8013026:	d001      	beq.n	801302c <_ZN2FC24ModulePositionController4mainEv+0x3c>
 8013028:	2301      	movs	r3, #1
 801302a:	e000      	b.n	801302e <_ZN2FC24ModulePositionController4mainEv+0x3e>
 801302c:	2300      	movs	r3, #0
 801302e:	2b00      	cmp	r3, #0
 8013030:	d006      	beq.n	8013040 <_ZN2FC24ModulePositionController4mainEv+0x50>
					osThreadFlagsClear(PC_reset);
 8013032:	2008      	movs	r0, #8
 8013034:	f00e fb10 	bl	8021658 <osThreadFlagsClear>
					positionController.initialize();
 8013038:	463b      	mov	r3, r7
 801303a:	4618      	mov	r0, r3
 801303c:	f7f3 f98c 	bl	8006358 <_ZN25positionControlModelClass10initializeEv>
				}

				/* wait EKF data */
				osThreadFlagsWait(PC_fromEKF, osFlagsWaitAny, osWaitForever);
 8013040:	f04f 32ff 	mov.w	r2, #4294967295
 8013044:	2100      	movs	r1, #0
 8013046:	2001      	movs	r0, #1
 8013048:	f00e fb8a 	bl	8021760 <osThreadFlagsWait>
				positionController.oneStep();
 801304c:	463b      	mov	r3, r7
 801304e:	4618      	mov	r0, r3
 8013050:	f7fe f854 	bl	80110fc <_ZN2FC24ModulePositionController7oneStepEv>

				/* check position controller stop */
				if(osThreadFlagsGet() & PC_stop){
 8013054:	f00e fb50 	bl	80216f8 <osThreadFlagsGet>
 8013058:	4603      	mov	r3, r0
 801305a:	f003 0304 	and.w	r3, r3, #4
 801305e:	2b00      	cmp	r3, #0
 8013060:	bf14      	ite	ne
 8013062:	2301      	movne	r3, #1
 8013064:	2300      	moveq	r3, #0
 8013066:	b2db      	uxtb	r3, r3
 8013068:	2b00      	cmp	r3, #0
 801306a:	d003      	beq.n	8013074 <_ZN2FC24ModulePositionController4mainEv+0x84>
					osThreadFlagsClear(PC_stop);
 801306c:	2004      	movs	r0, #4
 801306e:	f00e faf3 	bl	8021658 <osThreadFlagsClear>
					break;
 8013072:	e010      	b.n	8013096 <_ZN2FC24ModulePositionController4mainEv+0xa6>
				}

				/* if first loop, send ACK */
				if(firstLoop){
 8013074:	f897 3447 	ldrb.w	r3, [r7, #1095]	; 0x447
 8013078:	2b00      	cmp	r3, #0
 801307a:	d005      	beq.n	8013088 <_ZN2FC24ModulePositionController4mainEv+0x98>
					ModuleCommander::sendSignal(CMD_ACK);
 801307c:	2001      	movs	r0, #1
 801307e:	f7fd fb73 	bl	8010768 <_ZN2FC15ModuleCommander10sendSignalENS_9CmdSignalE>
					firstLoop = false;
 8013082:	2300      	movs	r3, #0
 8013084:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
				}
				freqCnt++;
 8013088:	4b03      	ldr	r3, [pc, #12]	; (8013098 <_ZN2FC24ModulePositionController4mainEv+0xa8>)
 801308a:	881b      	ldrh	r3, [r3, #0]
 801308c:	3301      	adds	r3, #1
 801308e:	b29a      	uxth	r2, r3
 8013090:	4b01      	ldr	r3, [pc, #4]	; (8013098 <_ZN2FC24ModulePositionController4mainEv+0xa8>)
 8013092:	801a      	strh	r2, [r3, #0]
				if(firstLoop || (osThreadFlagsGet() & PC_reset)){
 8013094:	e7bd      	b.n	8013012 <_ZN2FC24ModulePositionController4mainEv+0x22>
			firstLoop = true;
 8013096:	e7b3      	b.n	8013000 <_ZN2FC24ModulePositionController4mainEv+0x10>
 8013098:	2000154e 	.word	0x2000154e

0801309c <_ZN2FC9ModuleINS4mainEv>:
};

class ModuleINS : public positionEstimatorModelClass, public Freq<ModuleINS> {
public:

	static void main(){
 801309c:	b580      	push	{r7, lr}
 801309e:	f5ad 6d62 	sub.w	sp, sp, #3616	; 0xe20
 80130a2:	af00      	add	r7, sp, #0
		ModuleINS moduleINS;
 80130a4:	463b      	mov	r3, r7
 80130a6:	4618      	mov	r0, r3
 80130a8:	f7fd fdd4 	bl	8010c54 <_ZN2FC9ModuleINSC1Ev>
		moduleINS.initialize();
 80130ac:	463b      	mov	r3, r7
 80130ae:	4618      	mov	r0, r3
 80130b0:	f7f9 f882 	bl	800c1b8 <_ZN27positionEstimatorModelClass10initializeEv>
		osDelay(10000);
 80130b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80130b8:	f00e fbe6 	bl	8021888 <osDelay>
		while(1){
			moduleINS.onestep();
 80130bc:	463b      	mov	r3, r7
 80130be:	4618      	mov	r0, r3
 80130c0:	f7fd fdee 	bl	8010ca0 <_ZN2FC9ModuleINS7onestepEv>
			ModulePositionController::setSignal(PC_fromEKF);
 80130c4:	2001      	movs	r0, #1
 80130c6:	f7fd faa1 	bl	801060c <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>
			freqCnt++;
 80130ca:	4b05      	ldr	r3, [pc, #20]	; (80130e0 <_ZN2FC9ModuleINS4mainEv+0x44>)
 80130cc:	881b      	ldrh	r3, [r3, #0]
 80130ce:	3301      	adds	r3, #1
 80130d0:	b29a      	uxth	r2, r3
 80130d2:	4b03      	ldr	r3, [pc, #12]	; (80130e0 <_ZN2FC9ModuleINS4mainEv+0x44>)
 80130d4:	801a      	strh	r2, [r3, #0]
			osDelay(20);
 80130d6:	2014      	movs	r0, #20
 80130d8:	f00e fbd6 	bl	8021888 <osDelay>
			moduleINS.onestep();
 80130dc:	e7ee      	b.n	80130bc <_ZN2FC9ModuleINS4mainEv+0x20>
 80130de:	bf00      	nop
 80130e0:	20001550 	.word	0x20001550

080130e4 <_ZN2FC12ModuleHealth4mainEv>:

namespace FC {

class ModuleHealth {
public:
	static void main(){
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b08a      	sub	sp, #40	; 0x28
 80130e8:	af00      	add	r7, sp, #0
		uint32_t tick;
		tick = osKernelGetTickCount();
 80130ea:	f00e f985 	bl	80213f8 <osKernelGetTickCount>
 80130ee:	6278      	str	r0, [r7, #36]	; 0x24

		struct Health health;
		while(1){
			tick += 1000;
 80130f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80130f6:	627b      	str	r3, [r7, #36]	; 0x24
			osDelayUntil(tick);		/* 1hz */
 80130f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130fa:	f00e fbf3 	bl	80218e4 <osDelayUntil>

			health.accel = SensorAccel::checkFreq();
 80130fe:	f000 fd6f 	bl	8013be0 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv>
 8013102:	4603      	mov	r3, r0
 8013104:	813b      	strh	r3, [r7, #8]
			health.gyro = SensorGyro::checkFreq();
 8013106:	f000 fd7d 	bl	8013c04 <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv>
 801310a:	4603      	mov	r3, r0
 801310c:	817b      	strh	r3, [r7, #10]
			health.rc = RC::checkFreq();
 801310e:	f000 fd8b 	bl	8013c28 <_ZN2FC4FreqINS_2RCEE9checkFreqEv>
 8013112:	4603      	mov	r3, r0
 8013114:	81bb      	strh	r3, [r7, #12]

			health.mag = SensorMag::checkFreq();
 8013116:	f000 fd99 	bl	8013c4c <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv>
 801311a:	4603      	mov	r3, r0
 801311c:	81fb      	strh	r3, [r7, #14]
			health.gps = SensorGPS::checkFreq();
 801311e:	f000 fda7 	bl	8013c70 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv>
 8013122:	4603      	mov	r3, r0
 8013124:	823b      	strh	r3, [r7, #16]

			health.baro = SensorBaro::checkFreq();
 8013126:	f000 fdb5 	bl	8013c94 <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv>
 801312a:	4603      	mov	r3, r0
 801312c:	827b      	strh	r3, [r7, #18]

			health.ahrs = ModuleAHRS::checkFreq();
 801312e:	f000 fdc3 	bl	8013cb8 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv>
 8013132:	4603      	mov	r3, r0
 8013134:	82fb      	strh	r3, [r7, #22]
			health.ins = ModuleINS::checkFreq();
 8013136:	f000 fdd1 	bl	8013cdc <_ZN2FC4FreqINS_9ModuleINSEE9checkFreqEv>
 801313a:	4603      	mov	r3, r0
 801313c:	833b      	strh	r3, [r7, #24]

			health.attitudeController = ModuleAttitudeController::checkFreq();
 801313e:	f000 fddf 	bl	8013d00 <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv>
 8013142:	4603      	mov	r3, r0
 8013144:	837b      	strh	r3, [r7, #26]
			health.positionController = ModulePositionController::checkFreq();
 8013146:	f000 fded 	bl	8013d24 <_ZN2FC4FreqINS_24ModulePositionControllerEE9checkFreqEv>
 801314a:	4603      	mov	r3, r0
 801314c:	83bb      	strh	r3, [r7, #28]
			//TODO auto, lidar health check
			health.autoController = 0;
 801314e:	2300      	movs	r3, #0
 8013150:	83fb      	strh	r3, [r7, #30]
			health.lidar = 0;
 8013152:	2300      	movs	r3, #0
 8013154:	82bb      	strh	r3, [r7, #20]

			msgBus.setHealth(health);
 8013156:	463b      	mov	r3, r7
 8013158:	4619      	mov	r1, r3
 801315a:	480c      	ldr	r0, [pc, #48]	; (801318c <_ZN2FC12ModuleHealth4mainEv+0xa8>)
 801315c:	f7ff fec8 	bl	8012ef0 <_ZN2FC6MsgBus9setHealthERKNS_6HealthE>

			if(health.accel > ACCEL_THRESHOLD &&
 8013160:	893b      	ldrh	r3, [r7, #8]
 8013162:	2b96      	cmp	r3, #150	; 0x96
 8013164:	d9c4      	bls.n	80130f0 <_ZN2FC12ModuleHealth4mainEv+0xc>
			   health.gyro > GYRO_THRESHOLD &&
 8013166:	897b      	ldrh	r3, [r7, #10]
			if(health.accel > ACCEL_THRESHOLD &&
 8013168:	2b96      	cmp	r3, #150	; 0x96
 801316a:	d9c1      	bls.n	80130f0 <_ZN2FC12ModuleHealth4mainEv+0xc>
			   health.rc > RC_THRESHOLD &&
 801316c:	89bb      	ldrh	r3, [r7, #12]
			   health.gyro > GYRO_THRESHOLD &&
 801316e:	2b64      	cmp	r3, #100	; 0x64
 8013170:	d9be      	bls.n	80130f0 <_ZN2FC12ModuleHealth4mainEv+0xc>
			   health.ahrs > AHRS_THRESHOLD &&
 8013172:	8afb      	ldrh	r3, [r7, #22]
			   health.rc > RC_THRESHOLD &&
 8013174:	2b96      	cmp	r3, #150	; 0x96
 8013176:	d9bb      	bls.n	80130f0 <_ZN2FC12ModuleHealth4mainEv+0xc>
			   health.attitudeController > ATTITUDE_CTL_THRESHOLD){
 8013178:	8b7b      	ldrh	r3, [r7, #26]
			   health.ahrs > AHRS_THRESHOLD &&
 801317a:	2b96      	cmp	r3, #150	; 0x96
 801317c:	d9b8      	bls.n	80130f0 <_ZN2FC12ModuleHealth4mainEv+0xc>
				/* arm(attitude controller) enable */

				if(health.mag > MAG_THRESHOLD &&
 801317e:	89fb      	ldrh	r3, [r7, #14]
 8013180:	2b32      	cmp	r3, #50	; 0x32
 8013182:	d9b5      	bls.n	80130f0 <_ZN2FC12ModuleHealth4mainEv+0xc>
						health.gps > GPS_THRESHOLD &&
 8013184:	8a3b      	ldrh	r3, [r7, #16]
				if(health.mag > MAG_THRESHOLD &&
 8013186:	2b03      	cmp	r3, #3
			tick += 1000;
 8013188:	e7b2      	b.n	80130f0 <_ZN2FC12ModuleHealth4mainEv+0xc>
 801318a:	bf00      	nop
 801318c:	20000bb8 	.word	0x20000bb8

08013190 <_ZN2FC8ModuleSD4mainEv>:

class ModuleSD {
public:
	ModuleSD() = default;

	static void main(){
 8013190:	b5b0      	push	{r4, r5, r7, lr}
 8013192:	b0ca      	sub	sp, #296	; 0x128
 8013194:	af00      	add	r7, sp, #0
		uint8_t writeBuf[256];
		uint32_t bytesWritten = 0;
 8013196:	f107 0320 	add.w	r3, r7, #32
 801319a:	2200      	movs	r2, #0
 801319c:	601a      	str	r2, [r3, #0]
		uint8_t writeLen = 0;
 801319e:	2300      	movs	r3, #0
 80131a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		/*
		 *  TODO
		 *  FR_DISK_ERR		hardware layer error.
		 *  				retry after circuit
		 */
		uint8_t wtext[] = "Hello from SDIO DMA RTOS\n";
 80131a4:	1d3b      	adds	r3, r7, #4
 80131a6:	4a63      	ldr	r2, [pc, #396]	; (8013334 <_ZN2FC8ModuleSD4mainEv+0x1a4>)
 80131a8:	461c      	mov	r4, r3
 80131aa:	4615      	mov	r5, r2
 80131ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80131ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80131b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80131b4:	c403      	stmia	r4!, {r0, r1}
 80131b6:	8022      	strh	r2, [r4, #0]
		/* 1. Mount - 0 */
		f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 80131b8:	2200      	movs	r2, #0
 80131ba:	495f      	ldr	r1, [pc, #380]	; (8013338 <_ZN2FC8ModuleSD4mainEv+0x1a8>)
 80131bc:	485f      	ldr	r0, [pc, #380]	; (801333c <_ZN2FC8ModuleSD4mainEv+0x1ac>)
 80131be:	f00d fa07 	bl	80205d0 <f_mount>
		osDelay(1000);
 80131c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80131c6:	f00e fb5f 	bl	8021888 <osDelay>
		printf("try to open file\r\n");
 80131ca:	485d      	ldr	r0, [pc, #372]	; (8013340 <_ZN2FC8ModuleSD4mainEv+0x1b0>)
 80131cc:	f016 ff00 	bl	8029fd0 <puts>
		if((res = f_open(&SDFile, "0:/test.txt", FA_CREATE_ALWAYS | FA_WRITE)) != FR_OK){
 80131d0:	220a      	movs	r2, #10
 80131d2:	495c      	ldr	r1, [pc, #368]	; (8013344 <_ZN2FC8ModuleSD4mainEv+0x1b4>)
 80131d4:	485c      	ldr	r0, [pc, #368]	; (8013348 <_ZN2FC8ModuleSD4mainEv+0x1b8>)
 80131d6:	f00d fa5f 	bl	8020698 <f_open>
 80131da:	4603      	mov	r3, r0
 80131dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80131e0:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	bf14      	ite	ne
 80131e8:	2301      	movne	r3, #1
 80131ea:	2300      	moveq	r3, #0
 80131ec:	b2db      	uxtb	r3, r3
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d00b      	beq.n	801320a <_ZN2FC8ModuleSD4mainEv+0x7a>
			/* fail to open file */
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80131f2:	2200      	movs	r2, #0
 80131f4:	2120      	movs	r1, #32
 80131f6:	4855      	ldr	r0, [pc, #340]	; (801334c <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 80131f8:	f003 f850 	bl	801629c <HAL_GPIO_WritePin>
			printf("fail to open file %d\r\n", res);
 80131fc:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8013200:	4619      	mov	r1, r3
 8013202:	4853      	ldr	r0, [pc, #332]	; (8013350 <_ZN2FC8ModuleSD4mainEv+0x1c0>)
 8013204:	f016 fe70 	bl	8029ee8 <iprintf>
 8013208:	e033      	b.n	8013272 <_ZN2FC8ModuleSD4mainEv+0xe2>
		}
		else{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 801320a:	2201      	movs	r2, #1
 801320c:	2120      	movs	r1, #32
 801320e:	484f      	ldr	r0, [pc, #316]	; (801334c <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 8013210:	f003 f844 	bl	801629c <HAL_GPIO_WritePin>
			res = f_write(&SDFile, wtext, strlen((char*)wtext), (UINT*)bytesWritten);
 8013214:	1d3b      	adds	r3, r7, #4
 8013216:	4618      	mov	r0, r3
 8013218:	f7ec ffe2 	bl	80001e0 <strlen>
 801321c:	4602      	mov	r2, r0
 801321e:	f107 0320 	add.w	r3, r7, #32
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	1d39      	adds	r1, r7, #4
 8013226:	4848      	ldr	r0, [pc, #288]	; (8013348 <_ZN2FC8ModuleSD4mainEv+0x1b8>)
 8013228:	f00d fc1e 	bl	8020a68 <f_write>
 801322c:	4603      	mov	r3, r0
 801322e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
			if((bytesWritten == 0) || (res != FR_OK)){
 8013232:	f107 0320 	add.w	r3, r7, #32
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d003      	beq.n	8013244 <_ZN2FC8ModuleSD4mainEv+0xb4>
 801323c:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8013240:	2b00      	cmp	r3, #0
 8013242:	d00b      	beq.n	801325c <_ZN2FC8ModuleSD4mainEv+0xcc>
				/* fail to write file */
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8013244:	2200      	movs	r2, #0
 8013246:	2120      	movs	r1, #32
 8013248:	4840      	ldr	r0, [pc, #256]	; (801334c <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 801324a:	f003 f827 	bl	801629c <HAL_GPIO_WritePin>
				printf("fail to write %d\r\n", res);
 801324e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8013252:	4619      	mov	r1, r3
 8013254:	483f      	ldr	r0, [pc, #252]	; (8013354 <_ZN2FC8ModuleSD4mainEv+0x1c4>)
 8013256:	f016 fe47 	bl	8029ee8 <iprintf>
 801325a:	e007      	b.n	801326c <_ZN2FC8ModuleSD4mainEv+0xdc>
			}
			else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 801325c:	2201      	movs	r2, #1
 801325e:	2120      	movs	r1, #32
 8013260:	483a      	ldr	r0, [pc, #232]	; (801334c <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 8013262:	f003 f81b 	bl	801629c <HAL_GPIO_WritePin>
				printf("success write\r\n");
 8013266:	483c      	ldr	r0, [pc, #240]	; (8013358 <_ZN2FC8ModuleSD4mainEv+0x1c8>)
 8013268:	f016 feb2 	bl	8029fd0 <puts>
			}

			f_close(&SDFile);
 801326c:	4836      	ldr	r0, [pc, #216]	; (8013348 <_ZN2FC8ModuleSD4mainEv+0x1b8>)
 801326e:	f00d fe47 	bl	8020f00 <f_close>
		}

		while(1){
			/* sdopen */
			if(f_open(&SDFile,"0:/log.txt", FA_CREATE_ALWAYS | FA_WRITE ) != FR_OK){
 8013272:	220a      	movs	r2, #10
 8013274:	4939      	ldr	r1, [pc, #228]	; (801335c <_ZN2FC8ModuleSD4mainEv+0x1cc>)
 8013276:	4834      	ldr	r0, [pc, #208]	; (8013348 <_ZN2FC8ModuleSD4mainEv+0x1b8>)
 8013278:	f00d fa0e 	bl	8020698 <f_open>
 801327c:	4603      	mov	r3, r0
 801327e:	2b00      	cmp	r3, #0
 8013280:	bf14      	ite	ne
 8013282:	2301      	movne	r3, #1
 8013284:	2300      	moveq	r3, #0
 8013286:	b2db      	uxtb	r3, r3
 8013288:	2b00      	cmp	r3, #0
 801328a:	d005      	beq.n	8013298 <_ZN2FC8ModuleSD4mainEv+0x108>
				/* fail to open file */
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 801328c:	2200      	movs	r2, #0
 801328e:	2120      	movs	r1, #32
 8013290:	482e      	ldr	r0, [pc, #184]	; (801334c <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 8013292:	f003 f803 	bl	801629c <HAL_GPIO_WritePin>
 8013296:	e049      	b.n	801332c <_ZN2FC8ModuleSD4mainEv+0x19c>
			}
			else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8013298:	2201      	movs	r2, #1
 801329a:	2120      	movs	r1, #32
 801329c:	482b      	ldr	r0, [pc, #172]	; (801334c <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 801329e:	f002 fffd 	bl	801629c <HAL_GPIO_WritePin>
//					}
//					else{
//						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
//					}
//				}
				writeLen = sprintf((char*)writeBuf,"hello fucking world\n");
 80132a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80132a6:	4a2e      	ldr	r2, [pc, #184]	; (8013360 <_ZN2FC8ModuleSD4mainEv+0x1d0>)
 80132a8:	461c      	mov	r4, r3
 80132aa:	4615      	mov	r5, r2
 80132ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80132ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80132b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80132b4:	6020      	str	r0, [r4, #0]
 80132b6:	3404      	adds	r4, #4
 80132b8:	7021      	strb	r1, [r4, #0]
 80132ba:	2314      	movs	r3, #20
 80132bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				res = f_write(&SDFile, writeBuf, writeLen, (UINT*)&bytesWritten);
 80132c0:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 80132c4:	f107 0320 	add.w	r3, r7, #32
 80132c8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80132cc:	481e      	ldr	r0, [pc, #120]	; (8013348 <_ZN2FC8ModuleSD4mainEv+0x1b8>)
 80132ce:	f00d fbcb 	bl	8020a68 <f_write>
 80132d2:	4603      	mov	r3, r0
 80132d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
				if((bytesWritten == 0) || (res != FR_OK)){
 80132d8:	f107 0320 	add.w	r3, r7, #32
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d003      	beq.n	80132ea <_ZN2FC8ModuleSD4mainEv+0x15a>
 80132e2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d005      	beq.n	80132f6 <_ZN2FC8ModuleSD4mainEv+0x166>
					/* fail to write file */
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80132ea:	2200      	movs	r2, #0
 80132ec:	2120      	movs	r1, #32
 80132ee:	4817      	ldr	r0, [pc, #92]	; (801334c <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 80132f0:	f002 ffd4 	bl	801629c <HAL_GPIO_WritePin>
 80132f4:	e004      	b.n	8013300 <_ZN2FC8ModuleSD4mainEv+0x170>
				}
				else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80132f6:	2201      	movs	r2, #1
 80132f8:	2120      	movs	r1, #32
 80132fa:	4814      	ldr	r0, [pc, #80]	; (801334c <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 80132fc:	f002 ffce 	bl	801629c <HAL_GPIO_WritePin>
				}

				if(f_close(&SDFile) != FR_OK){
 8013300:	4811      	ldr	r0, [pc, #68]	; (8013348 <_ZN2FC8ModuleSD4mainEv+0x1b8>)
 8013302:	f00d fdfd 	bl	8020f00 <f_close>
 8013306:	4603      	mov	r3, r0
 8013308:	2b00      	cmp	r3, #0
 801330a:	bf14      	ite	ne
 801330c:	2301      	movne	r3, #1
 801330e:	2300      	moveq	r3, #0
 8013310:	b2db      	uxtb	r3, r3
 8013312:	2b00      	cmp	r3, #0
 8013314:	d005      	beq.n	8013322 <_ZN2FC8ModuleSD4mainEv+0x192>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8013316:	2200      	movs	r2, #0
 8013318:	2120      	movs	r1, #32
 801331a:	480c      	ldr	r0, [pc, #48]	; (801334c <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 801331c:	f002 ffbe 	bl	801629c <HAL_GPIO_WritePin>
 8013320:	e004      	b.n	801332c <_ZN2FC8ModuleSD4mainEv+0x19c>
				}
				else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8013322:	2201      	movs	r2, #1
 8013324:	2120      	movs	r1, #32
 8013326:	4809      	ldr	r0, [pc, #36]	; (801334c <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 8013328:	f002 ffb8 	bl	801629c <HAL_GPIO_WritePin>
				}
			}

			osDelay(5);			/* 10hz */
 801332c:	2005      	movs	r0, #5
 801332e:	f00e faab 	bl	8021888 <osDelay>
			if(f_open(&SDFile,"0:/log.txt", FA_CREATE_ALWAYS | FA_WRITE ) != FR_OK){
 8013332:	e79e      	b.n	8013272 <_ZN2FC8ModuleSD4mainEv+0xe2>
 8013334:	0802d7c8 	.word	0x0802d7c8
 8013338:	20011150 	.word	0x20011150
 801333c:	20012184 	.word	0x20012184
 8013340:	0802d748 	.word	0x0802d748
 8013344:	0802d75c 	.word	0x0802d75c
 8013348:	20011154 	.word	0x20011154
 801334c:	40020000 	.word	0x40020000
 8013350:	0802d768 	.word	0x0802d768
 8013354:	0802d780 	.word	0x0802d780
 8013358:	0802d794 	.word	0x0802d794
 801335c:	0802d7a4 	.word	0x0802d7a4
 8013360:	0802d7b0 	.word	0x0802d7b0

08013364 <_putchar>:
uint32_t channel;

uint16_t timeCheck;
int test = 0;

void _putchar(char character){
 8013364:	b580      	push	{r7, lr}
 8013366:	b082      	sub	sp, #8
 8013368:	af00      	add	r7, sp, #0
 801336a:	4603      	mov	r3, r0
 801336c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, 10);
 801336e:	1df9      	adds	r1, r7, #7
 8013370:	230a      	movs	r3, #10
 8013372:	2201      	movs	r2, #1
 8013374:	4803      	ldr	r0, [pc, #12]	; (8013384 <_putchar+0x20>)
 8013376:	f008 ff92 	bl	801c29e <HAL_UART_Transmit>
}
 801337a:	bf00      	nop
 801337c:	3708      	adds	r7, #8
 801337e:	46bd      	mov	sp, r7
 8013380:	bd80      	pop	{r7, pc}
 8013382:	bf00      	nop
 8013384:	20011108 	.word	0x20011108

08013388 <Health_StartTask>:

void Health_StartTask(void *argument){
 8013388:	b580      	push	{r7, lr}
 801338a:	b082      	sub	sp, #8
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
	ModuleHealth::main();
 8013390:	f7ff fea8 	bl	80130e4 <_ZN2FC12ModuleHealth4mainEv>
}
 8013394:	bf00      	nop
 8013396:	3708      	adds	r7, #8
 8013398:	46bd      	mov	sp, r7
 801339a:	bd80      	pop	{r7, pc}

0801339c <Debug_StartTask>:
void Debug_StartTask(void *argument){
 801339c:	b590      	push	{r4, r7, lr}
 801339e:	b0ed      	sub	sp, #436	; 0x1b4
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	1d3b      	adds	r3, r7, #4
 80133a4:	6018      	str	r0, [r3, #0]
	uint32_t tick;
	tick = osKernelGetTickCount();
 80133a6:	f00e f827 	bl	80213f8 <osKernelGetTickCount>
 80133aa:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac

	struct VehicleAttitueSP attitudeSP;
//	osDelay(2000);
//	sensorBaro.setSeaLevelPressure(gps.alt);
	while(1){
		tick += 5;
 80133ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80133b2:	3305      	adds	r3, #5
 80133b4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
		osDelayUntil(tick);
 80133b8:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 80133bc:	f00e fa92 	bl	80218e4 <osDelayUntil>
		msgBus.getHealth(&health);
 80133c0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80133c4:	4619      	mov	r1, r3
 80133c6:	48ab      	ldr	r0, [pc, #684]	; (8013674 <Debug_StartTask+0x2d8>)
 80133c8:	f7ff fd6c 	bl	8012ea4 <_ZN2FC6MsgBus9getHealthEPNS_6HealthE>
		hzAccel = health.accel;
 80133cc:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 80133d0:	4ba9      	ldr	r3, [pc, #676]	; (8013678 <Debug_StartTask+0x2dc>)
 80133d2:	801a      	strh	r2, [r3, #0]
		hzBaro = health.baro;
 80133d4:	f8b7 219a 	ldrh.w	r2, [r7, #410]	; 0x19a
 80133d8:	4ba8      	ldr	r3, [pc, #672]	; (801367c <Debug_StartTask+0x2e0>)
 80133da:	801a      	strh	r2, [r3, #0]
		hzGyro = health.gyro;
 80133dc:	f8b7 2192 	ldrh.w	r2, [r7, #402]	; 0x192
 80133e0:	4ba7      	ldr	r3, [pc, #668]	; (8013680 <Debug_StartTask+0x2e4>)
 80133e2:	801a      	strh	r2, [r3, #0]
		hzGPS = health.gps;
 80133e4:	f8b7 2198 	ldrh.w	r2, [r7, #408]	; 0x198
 80133e8:	4ba6      	ldr	r3, [pc, #664]	; (8013684 <Debug_StartTask+0x2e8>)
 80133ea:	801a      	strh	r2, [r3, #0]
		hzMag = health.mag;
 80133ec:	f8b7 2196 	ldrh.w	r2, [r7, #406]	; 0x196
 80133f0:	4ba5      	ldr	r3, [pc, #660]	; (8013688 <Debug_StartTask+0x2ec>)
 80133f2:	801a      	strh	r2, [r3, #0]
		hzAHRS = health.ahrs;
 80133f4:	f8b7 219e 	ldrh.w	r2, [r7, #414]	; 0x19e
 80133f8:	4ba4      	ldr	r3, [pc, #656]	; (801368c <Debug_StartTask+0x2f0>)
 80133fa:	801a      	strh	r2, [r3, #0]
		hzRC = health.rc;
 80133fc:	f8b7 2194 	ldrh.w	r2, [r7, #404]	; 0x194
 8013400:	4ba3      	ldr	r3, [pc, #652]	; (8013690 <Debug_StartTask+0x2f4>)
 8013402:	801a      	strh	r2, [r3, #0]
		hzAtti = health.attitudeController;
 8013404:	f8b7 21a2 	ldrh.w	r2, [r7, #418]	; 0x1a2
 8013408:	4ba2      	ldr	r3, [pc, #648]	; (8013694 <Debug_StartTask+0x2f8>)
 801340a:	801a      	strh	r2, [r3, #0]
		hzPos = health.positionController;
 801340c:	f8b7 21a4 	ldrh.w	r2, [r7, #420]	; 0x1a4
 8013410:	4ba1      	ldr	r3, [pc, #644]	; (8013698 <Debug_StartTask+0x2fc>)
 8013412:	801a      	strh	r2, [r3, #0]
		hzINS = health.ins;
 8013414:	f8b7 21a0 	ldrh.w	r2, [r7, #416]	; 0x1a0
 8013418:	4ba0      	ldr	r3, [pc, #640]	; (801369c <Debug_StartTask+0x300>)
 801341a:	801a      	strh	r2, [r3, #0]
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);

		msgBus.getMotorPWM(&pwm);
 801341c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013420:	4619      	mov	r1, r3
 8013422:	4894      	ldr	r0, [pc, #592]	; (8013674 <Debug_StartTask+0x2d8>)
 8013424:	f7ff fd79 	bl	8012f1a <_ZN2FC6MsgBus11getMotorPWMEPNS_8MotorPWME>
		pwm1 = pwm.m1;
 8013428:	f8b7 2178 	ldrh.w	r2, [r7, #376]	; 0x178
 801342c:	4b9c      	ldr	r3, [pc, #624]	; (80136a0 <Debug_StartTask+0x304>)
 801342e:	801a      	strh	r2, [r3, #0]
		pwm2 = pwm.m2;
 8013430:	f8b7 217a 	ldrh.w	r2, [r7, #378]	; 0x17a
 8013434:	4b9b      	ldr	r3, [pc, #620]	; (80136a4 <Debug_StartTask+0x308>)
 8013436:	801a      	strh	r2, [r3, #0]
		pwm3 = pwm.m3;
 8013438:	f8b7 217c 	ldrh.w	r2, [r7, #380]	; 0x17c
 801343c:	4b9a      	ldr	r3, [pc, #616]	; (80136a8 <Debug_StartTask+0x30c>)
 801343e:	801a      	strh	r2, [r3, #0]
		pwm4 = pwm.m4;
 8013440:	f8b7 217e 	ldrh.w	r2, [r7, #382]	; 0x17e
 8013444:	4b99      	ldr	r3, [pc, #612]	; (80136ac <Debug_StartTask+0x310>)
 8013446:	801a      	strh	r2, [r3, #0]
		pwm5 = pwm.m5;
 8013448:	f8b7 2180 	ldrh.w	r2, [r7, #384]	; 0x180
 801344c:	4b98      	ldr	r3, [pc, #608]	; (80136b0 <Debug_StartTask+0x314>)
 801344e:	801a      	strh	r2, [r3, #0]
		pwm6 = pwm.m6;
 8013450:	f8b7 2182 	ldrh.w	r2, [r7, #386]	; 0x182
 8013454:	4b97      	ldr	r3, [pc, #604]	; (80136b4 <Debug_StartTask+0x318>)
 8013456:	801a      	strh	r2, [r3, #0]

		msgBus.getAttitude(&att);
 8013458:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801345c:	4619      	mov	r1, r3
 801345e:	4885      	ldr	r0, [pc, #532]	; (8013674 <Debug_StartTask+0x2d8>)
 8013460:	f7fc fd76 	bl	800ff50 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
		att_roll = att.roll;
 8013464:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8013468:	4a93      	ldr	r2, [pc, #588]	; (80136b8 <Debug_StartTask+0x31c>)
 801346a:	6013      	str	r3, [r2, #0]
		att_pitch = att.pitch;
 801346c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8013470:	4a92      	ldr	r2, [pc, #584]	; (80136bc <Debug_StartTask+0x320>)
 8013472:	6013      	str	r3, [r2, #0]
		att_yaw = att.yaw;
 8013474:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8013478:	4a91      	ldr	r2, [pc, #580]	; (80136c0 <Debug_StartTask+0x324>)
 801347a:	6013      	str	r3, [r2, #0]

		msgBus.getController(&ctl);
 801347c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013480:	4619      	mov	r1, r3
 8013482:	487c      	ldr	r0, [pc, #496]	; (8013674 <Debug_StartTask+0x2d8>)
 8013484:	f7fc fd20 	bl	800fec8 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>
		ctl_roll = ctl.roll;
 8013488:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 801348c:	4b8d      	ldr	r3, [pc, #564]	; (80136c4 <Debug_StartTask+0x328>)
 801348e:	801a      	strh	r2, [r3, #0]
		ctl_pitch = ctl.pitch;
 8013490:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 8013494:	4b8c      	ldr	r3, [pc, #560]	; (80136c8 <Debug_StartTask+0x32c>)
 8013496:	801a      	strh	r2, [r3, #0]
		ctl_yaw = ctl.yaw;
 8013498:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 801349c:	4b8b      	ldr	r3, [pc, #556]	; (80136cc <Debug_StartTask+0x330>)
 801349e:	801a      	strh	r2, [r3, #0]
		ctl_throtle = ctl.throttle;
 80134a0:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 80134a4:	4b8a      	ldr	r3, [pc, #552]	; (80136d0 <Debug_StartTask+0x334>)
 80134a6:	801a      	strh	r2, [r3, #0]

		if(msgBus.getBodyAccel(&bodyAccel)){
 80134a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80134ac:	4619      	mov	r1, r3
 80134ae:	4871      	ldr	r0, [pc, #452]	; (8013674 <Debug_StartTask+0x2d8>)
 80134b0:	f7fa fb84 	bl	800dbbc <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>
 80134b4:	4603      	mov	r3, r0
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d00e      	beq.n	80134d8 <Debug_StartTask+0x13c>
			body_ax = bodyAccel.xyz[0];
 80134ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80134be:	689b      	ldr	r3, [r3, #8]
 80134c0:	4a84      	ldr	r2, [pc, #528]	; (80136d4 <Debug_StartTask+0x338>)
 80134c2:	6013      	str	r3, [r2, #0]
			body_ay = bodyAccel.xyz[1];
 80134c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80134c8:	68db      	ldr	r3, [r3, #12]
 80134ca:	4a83      	ldr	r2, [pc, #524]	; (80136d8 <Debug_StartTask+0x33c>)
 80134cc:	6013      	str	r3, [r2, #0]
			body_az = bodyAccel.xyz[2];
 80134ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80134d2:	691b      	ldr	r3, [r3, #16]
 80134d4:	4a81      	ldr	r2, [pc, #516]	; (80136dc <Debug_StartTask+0x340>)
 80134d6:	6013      	str	r3, [r2, #0]
		}
		if(msgBus.getBodyAngularVelocity(&bodyAnglularVel)){
 80134d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134dc:	4619      	mov	r1, r3
 80134de:	4865      	ldr	r0, [pc, #404]	; (8013674 <Debug_StartTask+0x2d8>)
 80134e0:	f7fa fb8f 	bl	800dc02 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>
 80134e4:	4603      	mov	r3, r0
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d00e      	beq.n	8013508 <Debug_StartTask+0x16c>
			body_gx = bodyAnglularVel.xyz[0];
 80134ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134ee:	689b      	ldr	r3, [r3, #8]
 80134f0:	4a7b      	ldr	r2, [pc, #492]	; (80136e0 <Debug_StartTask+0x344>)
 80134f2:	6013      	str	r3, [r2, #0]
			body_gy = bodyAnglularVel.xyz[1];
 80134f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134f8:	68db      	ldr	r3, [r3, #12]
 80134fa:	4a7a      	ldr	r2, [pc, #488]	; (80136e4 <Debug_StartTask+0x348>)
 80134fc:	6013      	str	r3, [r2, #0]
			body_gz = bodyAnglularVel.xyz[2];
 80134fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013502:	691b      	ldr	r3, [r3, #16]
 8013504:	4a78      	ldr	r2, [pc, #480]	; (80136e8 <Debug_StartTask+0x34c>)
 8013506:	6013      	str	r3, [r2, #0]
		}
//		osKernelLock();
		if(msgBus.getBarometer(&baro)){
 8013508:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801350c:	4619      	mov	r1, r3
 801350e:	4859      	ldr	r0, [pc, #356]	; (8013674 <Debug_StartTask+0x2d8>)
 8013510:	f7fd fb20 	bl	8010b54 <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE>
 8013514:	4603      	mov	r3, r0
 8013516:	2b00      	cmp	r3, #0
 8013518:	d003      	beq.n	8013522 <Debug_StartTask+0x186>
			baro_alt = baro.altitude;
 801351a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801351e:	4a73      	ldr	r2, [pc, #460]	; (80136ec <Debug_StartTask+0x350>)
 8013520:	6013      	str	r3, [r2, #0]
//			printf_("baro : %u %f\r\n", (unsigned int)baro.timestamp, baro_alt);
		}

		if(msgBus.getNedAccel(&nedAccel)){
 8013522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013526:	4619      	mov	r1, r3
 8013528:	4852      	ldr	r0, [pc, #328]	; (8013674 <Debug_StartTask+0x2d8>)
 801352a:	f7fd fb37 	bl	8010b9c <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>
 801352e:	4603      	mov	r3, r0
 8013530:	2b00      	cmp	r3, #0
 8013532:	d00b      	beq.n	801354c <Debug_StartTask+0x1b0>
			ned_ax = nedAccel.xyz[0];
 8013534:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8013538:	4a6d      	ldr	r2, [pc, #436]	; (80136f0 <Debug_StartTask+0x354>)
 801353a:	6013      	str	r3, [r2, #0]
			ned_ay = nedAccel.xyz[1];
 801353c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013540:	4a6c      	ldr	r2, [pc, #432]	; (80136f4 <Debug_StartTask+0x358>)
 8013542:	6013      	str	r3, [r2, #0]
			ned_az = nedAccel.xyz[2];
 8013544:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013548:	4a6b      	ldr	r2, [pc, #428]	; (80136f8 <Debug_StartTask+0x35c>)
 801354a:	6013      	str	r3, [r2, #0]
//			printf_("ned accel : %u %f %f %f\r\n", (unsigned int)nedAccel.timestamp, nedAccel.xyz[0], nedAccel.xyz[1], nedAccel.xyz[2]);
		}

		if(msgBus.getGPS(&gps)){
 801354c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013550:	4619      	mov	r1, r3
 8013552:	4848      	ldr	r0, [pc, #288]	; (8013674 <Debug_StartTask+0x2d8>)
 8013554:	f7fd fade 	bl	8010b14 <_ZN2FC6MsgBus6getGPSEPNS_3GPSE>
 8013558:	4603      	mov	r3, r0
 801355a:	2b00      	cmp	r3, #0
 801355c:	d01a      	beq.n	8013594 <Debug_StartTask+0x1f8>
			gps_lat = gps.lat;
 801355e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013562:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8013566:	4618      	mov	r0, r3
 8013568:	4621      	mov	r1, r4
 801356a:	f7ed fb45 	bl	8000bf8 <__aeabi_d2f>
 801356e:	4602      	mov	r2, r0
 8013570:	4b62      	ldr	r3, [pc, #392]	; (80136fc <Debug_StartTask+0x360>)
 8013572:	601a      	str	r2, [r3, #0]
			gps_lon = gps.lon;
 8013574:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013578:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 801357c:	4618      	mov	r0, r3
 801357e:	4621      	mov	r1, r4
 8013580:	f7ed fb3a 	bl	8000bf8 <__aeabi_d2f>
 8013584:	4602      	mov	r2, r0
 8013586:	4b5e      	ldr	r3, [pc, #376]	; (8013700 <Debug_StartTask+0x364>)
 8013588:	601a      	str	r2, [r3, #0]
			gps_alt = gps.alt;
 801358a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801358e:	6a1b      	ldr	r3, [r3, #32]
 8013590:	4a5c      	ldr	r2, [pc, #368]	; (8013704 <Debug_StartTask+0x368>)
 8013592:	6013      	str	r3, [r2, #0]
//			printf_("GPS : %u %f %f %f %f %f %f %f %u %f %f\r\n", (unsigned int)gps.timestamp, gps.lat, gps.lon, gps.alt, gps.velN, gps.velE
//						   , gps.direction, gps.vel
//						   , gps.fixType, gps.hdop, gps.vdop);
		}

		if(msgBus.getLocalPosition(&localPosition)){
 8013594:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013598:	4619      	mov	r1, r3
 801359a:	4836      	ldr	r0, [pc, #216]	; (8013674 <Debug_StartTask+0x2d8>)
 801359c:	f7fd fcd4 	bl	8010f48 <_ZN2FC6MsgBus16getLocalPositionEPNS_13LocalPositionE>
 80135a0:	4603      	mov	r3, r0
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d017      	beq.n	80135d6 <Debug_StartTask+0x23a>
			local_x = localPosition.x;
 80135a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80135aa:	4a57      	ldr	r2, [pc, #348]	; (8013708 <Debug_StartTask+0x36c>)
 80135ac:	6013      	str	r3, [r2, #0]
			local_y = localPosition.y;
 80135ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80135b2:	4a56      	ldr	r2, [pc, #344]	; (801370c <Debug_StartTask+0x370>)
 80135b4:	6013      	str	r3, [r2, #0]
			local_z = localPosition.z;
 80135b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80135ba:	4a55      	ldr	r2, [pc, #340]	; (8013710 <Debug_StartTask+0x374>)
 80135bc:	6013      	str	r3, [r2, #0]
			local_vx = localPosition.vx;
 80135be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80135c2:	4a54      	ldr	r2, [pc, #336]	; (8013714 <Debug_StartTask+0x378>)
 80135c4:	6013      	str	r3, [r2, #0]
			local_vy = localPosition.vy;
 80135c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80135ca:	4a53      	ldr	r2, [pc, #332]	; (8013718 <Debug_StartTask+0x37c>)
 80135cc:	6013      	str	r3, [r2, #0]
			local_vz = localPosition.vz;
 80135ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80135d2:	4a52      	ldr	r2, [pc, #328]	; (801371c <Debug_StartTask+0x380>)
 80135d4:	6013      	str	r3, [r2, #0]
//			printf_("ned position : %u %f %f %f\r\n", (unsigned int)localPosition.timestamp, local_x, local_y, local_z);
		}

		if(msgBus.getBodyMag(&bodyMag)){
 80135d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80135da:	4619      	mov	r1, r3
 80135dc:	4825      	ldr	r0, [pc, #148]	; (8013674 <Debug_StartTask+0x2d8>)
 80135de:	f7fa fb34 	bl	800dc4a <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>
 80135e2:	4603      	mov	r3, r0
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d00e      	beq.n	8013606 <Debug_StartTask+0x26a>
			mag_x = bodyMag.xyz[0];
 80135e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80135ec:	689b      	ldr	r3, [r3, #8]
 80135ee:	4a4c      	ldr	r2, [pc, #304]	; (8013720 <Debug_StartTask+0x384>)
 80135f0:	6013      	str	r3, [r2, #0]
			mag_y = bodyMag.xyz[1];
 80135f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80135f6:	68db      	ldr	r3, [r3, #12]
 80135f8:	4a4a      	ldr	r2, [pc, #296]	; (8013724 <Debug_StartTask+0x388>)
 80135fa:	6013      	str	r3, [r2, #0]
			mag_z = bodyMag.xyz[2];
 80135fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013600:	691b      	ldr	r3, [r3, #16]
 8013602:	4a49      	ldr	r2, [pc, #292]	; (8013728 <Debug_StartTask+0x38c>)
 8013604:	6013      	str	r3, [r2, #0]
		}

		if(msgBus.getModeFlag(&modeFlag)){
 8013606:	f107 0320 	add.w	r3, r7, #32
 801360a:	4619      	mov	r1, r3
 801360c:	4819      	ldr	r0, [pc, #100]	; (8013674 <Debug_StartTask+0x2d8>)
 801360e:	f7fc fcc5 	bl	800ff9c <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
 8013612:	4603      	mov	r3, r0
 8013614:	2b00      	cmp	r3, #0
 8013616:	d00b      	beq.n	8013630 <Debug_StartTask+0x294>
			mode_arm = (uint8_t)modeFlag.armMode;
 8013618:	f107 0320 	add.w	r3, r7, #32
 801361c:	689b      	ldr	r3, [r3, #8]
 801361e:	b2da      	uxtb	r2, r3
 8013620:	4b42      	ldr	r3, [pc, #264]	; (801372c <Debug_StartTask+0x390>)
 8013622:	701a      	strb	r2, [r3, #0]
			mode_flight = (uint8_t)modeFlag.flightMode;
 8013624:	f107 0320 	add.w	r3, r7, #32
 8013628:	68db      	ldr	r3, [r3, #12]
 801362a:	b2da      	uxtb	r2, r3
 801362c:	4b40      	ldr	r3, [pc, #256]	; (8013730 <Debug_StartTask+0x394>)
 801362e:	701a      	strb	r2, [r3, #0]
		}

		if(msgBus.getVehicleAttitueSP(&attitudeSP)){
 8013630:	f107 0308 	add.w	r3, r7, #8
 8013634:	4619      	mov	r1, r3
 8013636:	480f      	ldr	r0, [pc, #60]	; (8013674 <Debug_StartTask+0x2d8>)
 8013638:	f7fc fc66 	bl	800ff08 <_ZN2FC6MsgBus19getVehicleAttitueSPEPNS_16VehicleAttitueSPE>
 801363c:	4603      	mov	r3, r0
 801363e:	2b00      	cmp	r3, #0
 8013640:	d013      	beq.n	801366a <Debug_StartTask+0x2ce>
			sp_roll = attitudeSP.roll;
 8013642:	f107 0308 	add.w	r3, r7, #8
 8013646:	689b      	ldr	r3, [r3, #8]
 8013648:	4a3a      	ldr	r2, [pc, #232]	; (8013734 <Debug_StartTask+0x398>)
 801364a:	6013      	str	r3, [r2, #0]
			sp_pitch = attitudeSP.pitch;
 801364c:	f107 0308 	add.w	r3, r7, #8
 8013650:	68db      	ldr	r3, [r3, #12]
 8013652:	4a39      	ldr	r2, [pc, #228]	; (8013738 <Debug_StartTask+0x39c>)
 8013654:	6013      	str	r3, [r2, #0]
			sp_throtle = attitudeSP.throttle;
 8013656:	f107 0308 	add.w	r3, r7, #8
 801365a:	695b      	ldr	r3, [r3, #20]
 801365c:	4a37      	ldr	r2, [pc, #220]	; (801373c <Debug_StartTask+0x3a0>)
 801365e:	6013      	str	r3, [r2, #0]
			sp_yaw = attitudeSP.yawRate;
 8013660:	f107 0308 	add.w	r3, r7, #8
 8013664:	691b      	ldr	r3, [r3, #16]
 8013666:	4a36      	ldr	r2, [pc, #216]	; (8013740 <Debug_StartTask+0x3a4>)
 8013668:	6013      	str	r3, [r2, #0]
		}
//		osKernelUnlock();
		channel = m1.Channel;
 801366a:	4b36      	ldr	r3, [pc, #216]	; (8013744 <Debug_StartTask+0x3a8>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	4a36      	ldr	r2, [pc, #216]	; (8013748 <Debug_StartTask+0x3ac>)
 8013670:	6013      	str	r3, [r2, #0]
		tick += 5;
 8013672:	e69c      	b.n	80133ae <Debug_StartTask+0x12>
 8013674:	20000bb8 	.word	0x20000bb8
 8013678:	200014a6 	.word	0x200014a6
 801367c:	200014a8 	.word	0x200014a8
 8013680:	200014aa 	.word	0x200014aa
 8013684:	200014ac 	.word	0x200014ac
 8013688:	200014ae 	.word	0x200014ae
 801368c:	200014b0 	.word	0x200014b0
 8013690:	200014b2 	.word	0x200014b2
 8013694:	200014b4 	.word	0x200014b4
 8013698:	200014b6 	.word	0x200014b6
 801369c:	200014b8 	.word	0x200014b8
 80136a0:	200014ba 	.word	0x200014ba
 80136a4:	200014bc 	.word	0x200014bc
 80136a8:	200014be 	.word	0x200014be
 80136ac:	200014c0 	.word	0x200014c0
 80136b0:	200014c2 	.word	0x200014c2
 80136b4:	200014c4 	.word	0x200014c4
 80136b8:	200014c8 	.word	0x200014c8
 80136bc:	200014cc 	.word	0x200014cc
 80136c0:	200014d0 	.word	0x200014d0
 80136c4:	200014d4 	.word	0x200014d4
 80136c8:	200014d6 	.word	0x200014d6
 80136cc:	200014d8 	.word	0x200014d8
 80136d0:	200014da 	.word	0x200014da
 80136d4:	20001510 	.word	0x20001510
 80136d8:	20001514 	.word	0x20001514
 80136dc:	20001518 	.word	0x20001518
 80136e0:	2000151c 	.word	0x2000151c
 80136e4:	20001520 	.word	0x20001520
 80136e8:	20001524 	.word	0x20001524
 80136ec:	200014dc 	.word	0x200014dc
 80136f0:	200014e0 	.word	0x200014e0
 80136f4:	200014e4 	.word	0x200014e4
 80136f8:	200014e8 	.word	0x200014e8
 80136fc:	20001504 	.word	0x20001504
 8013700:	20001508 	.word	0x20001508
 8013704:	2000150c 	.word	0x2000150c
 8013708:	200014ec 	.word	0x200014ec
 801370c:	200014f0 	.word	0x200014f0
 8013710:	200014f4 	.word	0x200014f4
 8013714:	200014f8 	.word	0x200014f8
 8013718:	200014fc 	.word	0x200014fc
 801371c:	20001500 	.word	0x20001500
 8013720:	20001528 	.word	0x20001528
 8013724:	2000152c 	.word	0x2000152c
 8013728:	20001530 	.word	0x20001530
 801372c:	20001544 	.word	0x20001544
 8013730:	20001545 	.word	0x20001545
 8013734:	20001534 	.word	0x20001534
 8013738:	20001538 	.word	0x20001538
 801373c:	2000153c 	.word	0x2000153c
 8013740:	20001540 	.word	0x20001540
 8013744:	2000089c 	.word	0x2000089c
 8013748:	20001548 	.word	0x20001548

0801374c <MPU9250_StartTask>:

//		osDelay(5);
	}
}

void MPU9250_StartTask(void *argument){
 801374c:	b580      	push	{r7, lr}
 801374e:	b084      	sub	sp, #16
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
	uint32_t tick;
	tick = osKernelGetTickCount();
 8013754:	f00d fe50 	bl	80213f8 <osKernelGetTickCount>
 8013758:	60f8      	str	r0, [r7, #12]
	while(1){
		tick += 5;
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	3305      	adds	r3, #5
 801375e:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick);
 8013760:	68f8      	ldr	r0, [r7, #12]
 8013762:	f00e f8bf 	bl	80218e4 <osDelayUntil>
		MPU9250_updateDMA();
 8013766:	f7ed fee9 	bl	800153c <MPU9250_updateDMA>
		tick += 5;
 801376a:	e7f6      	b.n	801375a <MPU9250_StartTask+0xe>

0801376c <BME280_StartTask>:
//		osDelay(5);				/* 200hz */
	}
}
void BME280_StartTask(void *argument){
 801376c:	b580      	push	{r7, lr}
 801376e:	b082      	sub	sp, #8
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
	while(1){
		BME280_readIT();
 8013774:	f7ee fde8 	bl	8002348 <BME280_readIT>
		osDelay(20); 			/* 50hz */
 8013778:	2014      	movs	r0, #20
 801377a:	f00e f885 	bl	8021888 <osDelay>
		BME280_readIT();
 801377e:	e7f9      	b.n	8013774 <BME280_StartTask+0x8>

08013780 <IST8310_StartTask>:
	}
}
void IST8310_StartTask(void *argument){
 8013780:	b580      	push	{r7, lr}
 8013782:	b082      	sub	sp, #8
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
	while(1){
//		IST8310_updataIT();
		osDelay(10); 			/* 100hz */
 8013788:	200a      	movs	r0, #10
 801378a:	f00e f87d 	bl	8021888 <osDelay>
 801378e:	e7fb      	b.n	8013788 <IST8310_StartTask+0x8>

08013790 <SD_StartTask>:
	}
}
void SD_StartTask(void *argument){
 8013790:	b580      	push	{r7, lr}
 8013792:	b082      	sub	sp, #8
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
	ModuleSD::main();
 8013798:	f7ff fcfa 	bl	8013190 <_ZN2FC8ModuleSD4mainEv>
}
 801379c:	bf00      	nop
 801379e:	3708      	adds	r7, #8
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bd80      	pop	{r7, pc}

080137a4 <AHRS_StartTask>:

void AHRS_StartTask(void *argument){
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b082      	sub	sp, #8
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
	ModuleAHRS::main();
 80137ac:	f7ff fc02 	bl	8012fb4 <_ZN2FC10ModuleAHRS4mainEv>
}
 80137b0:	bf00      	nop
 80137b2:	3708      	adds	r7, #8
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}

080137b8 <Commander_StartTask>:

void Commander_StartTask(void *argument){
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b082      	sub	sp, #8
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
	ModuleCommander::main();
 80137c0:	f7fc ff72 	bl	80106a8 <_ZN2FC15ModuleCommander4mainEv>
}
 80137c4:	bf00      	nop
 80137c6:	3708      	adds	r7, #8
 80137c8:	46bd      	mov	sp, r7
 80137ca:	bd80      	pop	{r7, pc}

080137cc <Buzzer_StartTask>:

void Buzzer_StartTask(void *argument){
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b082      	sub	sp, #8
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
	ModuleBuzzer::main();
 80137d4:	f7fc fde2 	bl	801039c <_ZN2FC12ModuleBuzzer4mainEv>
}
 80137d8:	bf00      	nop
 80137da:	3708      	adds	r7, #8
 80137dc:	46bd      	mov	sp, r7
 80137de:	bd80      	pop	{r7, pc}

080137e0 <AC_StartTask>:

void AC_StartTask(void *argument){
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b082      	sub	sp, #8
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
	ModuleAttitudeController::main();
 80137e8:	f7ff fbbe 	bl	8012f68 <_ZN2FC24ModuleAttitudeController4mainEv>
}
 80137ec:	bf00      	nop
 80137ee:	3708      	adds	r7, #8
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}

080137f4 <INS_StartTask>:

void INS_StartTask(void *argument){
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b082      	sub	sp, #8
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
	ModuleINS::main();
 80137fc:	f7ff fc4e 	bl	801309c <_ZN2FC9ModuleINS4mainEv>
}
 8013800:	bf00      	nop
 8013802:	3708      	adds	r7, #8
 8013804:	46bd      	mov	sp, r7
 8013806:	bd80      	pop	{r7, pc}

08013808 <PC_StartTask>:

void PC_StartTask(void *argument){
 8013808:	b580      	push	{r7, lr}
 801380a:	b082      	sub	sp, #8
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
	ModulePositionController::main();
 8013810:	f7ff fbee 	bl	8012ff0 <_ZN2FC24ModulePositionController4mainEv>
}
 8013814:	bf00      	nop
 8013816:	3708      	adds	r7, #8
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}

0801381c <cppMain>:
/*
 *  LED signal
 *  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 */

void cppMain(){
 801381c:	b580      	push	{r7, lr}
 801381e:	b084      	sub	sp, #16
 8013820:	af04      	add	r7, sp, #16
    setvbuf(stdout, NULL, _IONBF, 0);
 8013822:	4b1f      	ldr	r3, [pc, #124]	; (80138a0 <cppMain+0x84>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	6898      	ldr	r0, [r3, #8]
 8013828:	2300      	movs	r3, #0
 801382a:	2202      	movs	r2, #2
 801382c:	2100      	movs	r1, #0
 801382e:	f016 fbd7 	bl	8029fe0 <setvbuf>
    printf_("test\r\n");
 8013832:	481c      	ldr	r0, [pc, #112]	; (80138a4 <cppMain+0x88>)
 8013834:	f7fa f9a6 	bl	800db84 <printf_>



    /* micro second timer start */
	HAL_TIM_Base_Start_IT(&htim2);
 8013838:	481b      	ldr	r0, [pc, #108]	; (80138a8 <cppMain+0x8c>)
 801383a:	f007 fbf0 	bl	801b01e <HAL_TIM_Base_Start_IT>

	MPU9250(&hi2c1);
 801383e:	481b      	ldr	r0, [pc, #108]	; (80138ac <cppMain+0x90>)
 8013840:	f7ed fdec 	bl	800141c <MPU9250>
	 * RMS Noise : 0.3Pa/2.5cm
	 * Data output rate : 83hz
	 * Filter bandwidth : 1.75 Hz
	 * response time : 0.3s
	 */
	BME280_init(&hi2c2, P_OSR_04, H_OSR_00, T_OSR_01, normal, BW0_021ODR,t_00_5ms);
 8013844:	2300      	movs	r3, #0
 8013846:	9302      	str	r3, [sp, #8]
 8013848:	2304      	movs	r3, #4
 801384a:	9301      	str	r3, [sp, #4]
 801384c:	2303      	movs	r3, #3
 801384e:	9300      	str	r3, [sp, #0]
 8013850:	2301      	movs	r3, #1
 8013852:	2201      	movs	r2, #1
 8013854:	2103      	movs	r1, #3
 8013856:	4816      	ldr	r0, [pc, #88]	; (80138b0 <cppMain+0x94>)
 8013858:	f7ee fc7e 	bl	8002158 <BME280_init>

	IST8310(&hi2c2);
 801385c:	4814      	ldr	r0, [pc, #80]	; (80138b0 <cppMain+0x94>)
 801385e:	f7ed fca7 	bl	80011b0 <IST8310>

#ifdef USE_GPS
	/*
	 *  GPS using DMA circular mode
	 */
    TM_GPS_Init(&huart6);
 8013862:	4814      	ldr	r0, [pc, #80]	; (80138b4 <cppMain+0x98>)
 8013864:	f7ef f864 	bl	8002930 <TM_GPS_Init>
#endif

#ifdef USE_SBUS
	SBUS_init(&huart1);
 8013868:	4813      	ldr	r0, [pc, #76]	; (80138b8 <cppMain+0x9c>)
 801386a:	f7ff f845 	bl	80128f8 <SBUS_init>
#endif

	//	Lidar1D_init(&htim9, TIM_CHANNEL_1, TIM_CHANNEL_2);
	//	Lidar1D_run();

	m1.start();
 801386e:	4813      	ldr	r0, [pc, #76]	; (80138bc <cppMain+0xa0>)
 8013870:	f7ed fbf9 	bl	8001066 <_ZN2FC5Motor5startEv>
	m2.start();
 8013874:	4812      	ldr	r0, [pc, #72]	; (80138c0 <cppMain+0xa4>)
 8013876:	f7ed fbf6 	bl	8001066 <_ZN2FC5Motor5startEv>
	m3.start();
 801387a:	4812      	ldr	r0, [pc, #72]	; (80138c4 <cppMain+0xa8>)
 801387c:	f7ed fbf3 	bl	8001066 <_ZN2FC5Motor5startEv>
	m4.start();
 8013880:	4811      	ldr	r0, [pc, #68]	; (80138c8 <cppMain+0xac>)
 8013882:	f7ed fbf0 	bl	8001066 <_ZN2FC5Motor5startEv>
	m5.start();
 8013886:	4811      	ldr	r0, [pc, #68]	; (80138cc <cppMain+0xb0>)
 8013888:	f7ed fbed 	bl	8001066 <_ZN2FC5Motor5startEv>
	m6.start();
 801388c:	4810      	ldr	r0, [pc, #64]	; (80138d0 <cppMain+0xb4>)
 801388e:	f7ed fbea 	bl	8001066 <_ZN2FC5Motor5startEv>

    printf_("boot complete\r\n");
 8013892:	4810      	ldr	r0, [pc, #64]	; (80138d4 <cppMain+0xb8>)
 8013894:	f7fa f976 	bl	800db84 <printf_>
}
 8013898:	bf00      	nop
 801389a:	46bd      	mov	sp, r7
 801389c:	bd80      	pop	{r7, pc}
 801389e:	bf00      	nop
 80138a0:	200006ac 	.word	0x200006ac
 80138a4:	0802d7e4 	.word	0x0802d7e4
 80138a8:	20010f88 	.word	0x20010f88
 80138ac:	20010bfc 	.word	0x20010bfc
 80138b0:	20010c50 	.word	0x20010c50
 80138b4:	200110c8 	.word	0x200110c8
 80138b8:	20011088 	.word	0x20011088
 80138bc:	2000089c 	.word	0x2000089c
 80138c0:	200008a8 	.word	0x200008a8
 80138c4:	200008b4 	.word	0x200008b4
 80138c8:	200008c0 	.word	0x200008c0
 80138cc:	200008cc 	.word	0x200008cc
 80138d0:	200008d8 	.word	0x200008d8
 80138d4:	0802d7ec 	.word	0x0802d7ec

080138d8 <HAL_I2C_MemRxCpltCallback>:

//callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80138d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138da:	b083      	sub	sp, #12
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
//#ifdef USE_MPU9250
	if(hi2c->Instance == mpu9250.hi2c->Instance){
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	681a      	ldr	r2, [r3, #0]
 80138e4:	4b50      	ldr	r3, [pc, #320]	; (8013a28 <HAL_I2C_MemRxCpltCallback+0x150>)
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	429a      	cmp	r2, r3
 80138ec:	d169      	bne.n	80139c2 <HAL_I2C_MemRxCpltCallback+0xea>
		switch(MPU9250_i2cRxCpltCallback()){
 80138ee:	f7ed fe45 	bl	800157c <MPU9250_i2cRxCpltCallback>
 80138f2:	4603      	mov	r3, r0
 80138f4:	2b01      	cmp	r3, #1
 80138f6:	d002      	beq.n	80138fe <HAL_I2C_MemRxCpltCallback+0x26>
 80138f8:	2b02      	cmp	r3, #2
 80138fa:	d04f      	beq.n	801399c <HAL_I2C_MemRxCpltCallback+0xc4>
 80138fc:	e061      	b.n	80139c2 <HAL_I2C_MemRxCpltCallback+0xea>
		case 1:
			sensorAccel.setAccel(mpu9250.accel[0]*FC_GRAVITY_ACCEERATION
 80138fe:	4b4a      	ldr	r3, [pc, #296]	; (8013a28 <HAL_I2C_MemRxCpltCallback+0x150>)
 8013900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013902:	4618      	mov	r0, r3
 8013904:	f7ec fe28 	bl	8000558 <__aeabi_f2d>
 8013908:	a345      	add	r3, pc, #276	; (adr r3, 8013a20 <HAL_I2C_MemRxCpltCallback+0x148>)
 801390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801390e:	f7ec fe7b 	bl	8000608 <__aeabi_dmul>
 8013912:	4603      	mov	r3, r0
 8013914:	460c      	mov	r4, r1
 8013916:	4618      	mov	r0, r3
 8013918:	4621      	mov	r1, r4
 801391a:	f7ed f96d 	bl	8000bf8 <__aeabi_d2f>
 801391e:	4605      	mov	r5, r0
							   , mpu9250.accel[1]*FC_GRAVITY_ACCEERATION
 8013920:	4b41      	ldr	r3, [pc, #260]	; (8013a28 <HAL_I2C_MemRxCpltCallback+0x150>)
 8013922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013924:	4618      	mov	r0, r3
 8013926:	f7ec fe17 	bl	8000558 <__aeabi_f2d>
 801392a:	a33d      	add	r3, pc, #244	; (adr r3, 8013a20 <HAL_I2C_MemRxCpltCallback+0x148>)
 801392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013930:	f7ec fe6a 	bl	8000608 <__aeabi_dmul>
 8013934:	4603      	mov	r3, r0
 8013936:	460c      	mov	r4, r1
			sensorAccel.setAccel(mpu9250.accel[0]*FC_GRAVITY_ACCEERATION
 8013938:	4618      	mov	r0, r3
 801393a:	4621      	mov	r1, r4
 801393c:	f7ed f95c 	bl	8000bf8 <__aeabi_d2f>
 8013940:	4606      	mov	r6, r0
							   , mpu9250.accel[2]*FC_GRAVITY_ACCEERATION);
 8013942:	4b39      	ldr	r3, [pc, #228]	; (8013a28 <HAL_I2C_MemRxCpltCallback+0x150>)
 8013944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013946:	4618      	mov	r0, r3
 8013948:	f7ec fe06 	bl	8000558 <__aeabi_f2d>
 801394c:	a334      	add	r3, pc, #208	; (adr r3, 8013a20 <HAL_I2C_MemRxCpltCallback+0x148>)
 801394e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013952:	f7ec fe59 	bl	8000608 <__aeabi_dmul>
 8013956:	4603      	mov	r3, r0
 8013958:	460c      	mov	r4, r1
			sensorAccel.setAccel(mpu9250.accel[0]*FC_GRAVITY_ACCEERATION
 801395a:	4618      	mov	r0, r3
 801395c:	4621      	mov	r1, r4
 801395e:	f7ed f94b 	bl	8000bf8 <__aeabi_d2f>
 8013962:	4603      	mov	r3, r0
 8013964:	ee01 3a10 	vmov	s2, r3
 8013968:	ee00 6a90 	vmov	s1, r6
 801396c:	ee00 5a10 	vmov	s0, r5
 8013970:	482e      	ldr	r0, [pc, #184]	; (8013a2c <HAL_I2C_MemRxCpltCallback+0x154>)
 8013972:	f7fe f84b 	bl	8011a0c <_ZN2FC11SensorAccel8setAccelEfff>
			sensorGyro.setGyro(mpu9250.gyro[0], mpu9250.gyro[1], mpu9250.gyro[2]);
 8013976:	4b2c      	ldr	r3, [pc, #176]	; (8013a28 <HAL_I2C_MemRxCpltCallback+0x150>)
 8013978:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 801397c:	4b2a      	ldr	r3, [pc, #168]	; (8013a28 <HAL_I2C_MemRxCpltCallback+0x150>)
 801397e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8013982:	4b29      	ldr	r3, [pc, #164]	; (8013a28 <HAL_I2C_MemRxCpltCallback+0x150>)
 8013984:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8013988:	eeb0 1a66 	vmov.f32	s2, s13
 801398c:	eef0 0a47 	vmov.f32	s1, s14
 8013990:	eeb0 0a67 	vmov.f32	s0, s15
 8013994:	4826      	ldr	r0, [pc, #152]	; (8013a30 <HAL_I2C_MemRxCpltCallback+0x158>)
 8013996:	f7fe fc87 	bl	80122a8 <_ZN2FC10SensorGyro7setGyroEfff>
			break;
 801399a:	e012      	b.n	80139c2 <HAL_I2C_MemRxCpltCallback+0xea>
		case 2:
			sensorMag.setMag(mpu9250.mag[0], mpu9250.mag[1], mpu9250.mag[2]);
 801399c:	4b22      	ldr	r3, [pc, #136]	; (8013a28 <HAL_I2C_MemRxCpltCallback+0x150>)
 801399e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80139a2:	4b21      	ldr	r3, [pc, #132]	; (8013a28 <HAL_I2C_MemRxCpltCallback+0x150>)
 80139a4:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80139a8:	4b1f      	ldr	r3, [pc, #124]	; (8013a28 <HAL_I2C_MemRxCpltCallback+0x150>)
 80139aa:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80139ae:	eeb0 1a66 	vmov.f32	s2, s13
 80139b2:	eef0 0a47 	vmov.f32	s1, s14
 80139b6:	eeb0 0a67 	vmov.f32	s0, s15
 80139ba:	481e      	ldr	r0, [pc, #120]	; (8013a34 <HAL_I2C_MemRxCpltCallback+0x15c>)
 80139bc:	f7fe fdea 	bl	8012594 <_ZN2FC9SensorMag6setMagEfff>
			break;
 80139c0:	bf00      	nop
		}
	}
//#endif

//#ifdef USE_IST8310
	if(hi2c->Instance == ist8310.hi2c->Instance){
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	681a      	ldr	r2, [r3, #0]
 80139c6:	4b1c      	ldr	r3, [pc, #112]	; (8013a38 <HAL_I2C_MemRxCpltCallback+0x160>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	429a      	cmp	r2, r3
 80139ce:	d103      	bne.n	80139d8 <HAL_I2C_MemRxCpltCallback+0x100>
		if(IST8310_i2cRxCpltCallback()){
 80139d0:	f7ed fc02 	bl	80011d8 <IST8310_i2cRxCpltCallback>
 80139d4:	4603      	mov	r3, r0
 80139d6:	2b00      	cmp	r3, #0
		}
	}
//#endif

//#ifdef USE_BME280
	if(hi2c->Instance == bme280.hi2c->Instance){
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	681a      	ldr	r2, [r3, #0]
 80139dc:	4b17      	ldr	r3, [pc, #92]	; (8013a3c <HAL_I2C_MemRxCpltCallback+0x164>)
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d116      	bne.n	8013a14 <HAL_I2C_MemRxCpltCallback+0x13c>
		if(BME280_i2cRxCpltCallback()){
 80139e6:	f7ee fccd 	bl	8002384 <BME280_i2cRxCpltCallback>
 80139ea:	4603      	mov	r3, r0
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	bf14      	ite	ne
 80139f0:	2301      	movne	r3, #1
 80139f2:	2300      	moveq	r3, #0
 80139f4:	b2db      	uxtb	r3, r3
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d00c      	beq.n	8013a14 <HAL_I2C_MemRxCpltCallback+0x13c>
			sensorBaro.setBaro(bme280.P, bme280.T);
 80139fa:	4b10      	ldr	r3, [pc, #64]	; (8013a3c <HAL_I2C_MemRxCpltCallback+0x164>)
 80139fc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8013a00:	4b0e      	ldr	r3, [pc, #56]	; (8013a3c <HAL_I2C_MemRxCpltCallback+0x164>)
 8013a02:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8013a06:	eef0 0a47 	vmov.f32	s1, s14
 8013a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8013a0e:	480c      	ldr	r0, [pc, #48]	; (8013a40 <HAL_I2C_MemRxCpltCallback+0x168>)
 8013a10:	f7fe f978 	bl	8011d04 <_ZN2FC10SensorBaro7setBaroEff>
		}
	}
//#endif
}
 8013a14:	bf00      	nop
 8013a16:	370c      	adds	r7, #12
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a1c:	f3af 8000 	nop.w
 8013a20:	3a92a305 	.word	0x3a92a305
 8013a24:	40239d01 	.word	0x40239d01
 8013a28:	2000110c 	.word	0x2000110c
 8013a2c:	20000f98 	.word	0x20000f98
 8013a30:	20001078 	.word	0x20001078
 8013a34:	200010b8 	.word	0x200010b8
 8013a38:	20001488 	.word	0x20001488
 8013a3c:	200008fc 	.word	0x200008fc
 8013a40:	20000fd8 	.word	0x20000fd8

08013a44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8013a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a48:	ed2d 8b06 	vpush	{d8-d10}
 8013a4c:	b087      	sub	sp, #28
 8013a4e:	af04      	add	r7, sp, #16
 8013a50:	6078      	str	r0, [r7, #4]
#ifdef USE_SBUS
	if(huart->Instance == sbus.huart->Instance){
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	681a      	ldr	r2, [r3, #0]
 8013a56:	4b45      	ldr	r3, [pc, #276]	; (8013b6c <HAL_UART_RxCpltCallback+0x128>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	429a      	cmp	r2, r3
 8013a5e:	d12f      	bne.n	8013ac0 <HAL_UART_RxCpltCallback+0x7c>
		if(SBUS_uartRxCpltCallback() == SBUS_Result_NewData){
 8013a60:	f7ff f98e 	bl	8012d80 <SBUS_uartRxCpltCallback>
 8013a64:	4603      	mov	r3, r0
 8013a66:	2b01      	cmp	r3, #1
 8013a68:	bf0c      	ite	eq
 8013a6a:	2301      	moveq	r3, #1
 8013a6c:	2300      	movne	r3, #0
 8013a6e:	b2db      	uxtb	r3, r3
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d025      	beq.n	8013ac0 <HAL_UART_RxCpltCallback+0x7c>
			rc.setRC(SBUS_getChannel(2),	/* roll */
 8013a74:	2002      	movs	r0, #2
 8013a76:	f7ff fa01 	bl	8012e7c <SBUS_getChannel>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	461e      	mov	r6, r3
 8013a7e:	2003      	movs	r0, #3
 8013a80:	f7ff f9fc 	bl	8012e7c <SBUS_getChannel>
 8013a84:	4603      	mov	r3, r0
 8013a86:	4698      	mov	r8, r3
 8013a88:	2004      	movs	r0, #4
 8013a8a:	f7ff f9f7 	bl	8012e7c <SBUS_getChannel>
 8013a8e:	4603      	mov	r3, r0
 8013a90:	4699      	mov	r9, r3
 8013a92:	2001      	movs	r0, #1
 8013a94:	f7ff f9f2 	bl	8012e7c <SBUS_getChannel>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	461c      	mov	r4, r3
 8013a9c:	200b      	movs	r0, #11
 8013a9e:	f7ff f9ed 	bl	8012e7c <SBUS_getChannel>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	461d      	mov	r5, r3
 8013aa6:	2005      	movs	r0, #5
 8013aa8:	f7ff f9e8 	bl	8012e7c <SBUS_getChannel>
 8013aac:	4603      	mov	r3, r0
 8013aae:	9302      	str	r3, [sp, #8]
 8013ab0:	9501      	str	r5, [sp, #4]
 8013ab2:	9400      	str	r4, [sp, #0]
 8013ab4:	464b      	mov	r3, r9
 8013ab6:	4642      	mov	r2, r8
 8013ab8:	4631      	mov	r1, r6
 8013aba:	482d      	ldr	r0, [pc, #180]	; (8013b70 <HAL_UART_RxCpltCallback+0x12c>)
 8013abc:	f7fd fe2c 	bl	8011718 <_ZN2FC2RC5setRCEtttttt>
		}
	}
#endif

#ifdef USE_GPS
	if(huart->Instance == USART6){
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	4a2b      	ldr	r2, [pc, #172]	; (8013b74 <HAL_UART_RxCpltCallback+0x130>)
 8013ac6:	4293      	cmp	r3, r2
 8013ac8:	d149      	bne.n	8013b5e <HAL_UART_RxCpltCallback+0x11a>
		if(TM_GPS_Update() == TM_GPS_Result_NewData && gpsUart.gpsData.Fix != 0 /* gps must fixed */){
 8013aca:	f7ee ffcb 	bl	8002a64 <TM_GPS_Update>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d105      	bne.n	8013ae0 <HAL_UART_RxCpltCallback+0x9c>
 8013ad4:	4b28      	ldr	r3, [pc, #160]	; (8013b78 <HAL_UART_RxCpltCallback+0x134>)
 8013ad6:	7d5b      	ldrb	r3, [r3, #21]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d001      	beq.n	8013ae0 <HAL_UART_RxCpltCallback+0x9c>
 8013adc:	2301      	movs	r3, #1
 8013ade:	e000      	b.n	8013ae2 <HAL_UART_RxCpltCallback+0x9e>
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d03b      	beq.n	8013b5e <HAL_UART_RxCpltCallback+0x11a>
			sensorGPS.setGPS(gpsUart.gpsData.Latitude, gpsUart.gpsData.Longitude, gpsUart.gpsData.Altitude,
 8013ae6:	4b24      	ldr	r3, [pc, #144]	; (8013b78 <HAL_UART_RxCpltCallback+0x134>)
 8013ae8:	ed93 8b00 	vldr	d8, [r3]
 8013aec:	4b22      	ldr	r3, [pc, #136]	; (8013b78 <HAL_UART_RxCpltCallback+0x134>)
 8013aee:	ed93 9b02 	vldr	d9, [r3, #8]
 8013af2:	4b21      	ldr	r3, [pc, #132]	; (8013b78 <HAL_UART_RxCpltCallback+0x134>)
 8013af4:	ed93 aa04 	vldr	s20, [r3, #16]
 8013af8:	4b1f      	ldr	r3, [pc, #124]	; (8013b78 <HAL_UART_RxCpltCallback+0x134>)
 8013afa:	edd3 7a08 	vldr	s15, [r3, #32]
 8013afe:	2001      	movs	r0, #1
 8013b00:	eeb0 0a67 	vmov.f32	s0, s15
 8013b04:	f7ee ffe2 	bl	8002acc <TM_GPS_ConvertSpeed>
 8013b08:	eeb0 6a40 	vmov.f32	s12, s0
 8013b0c:	4b1a      	ldr	r3, [pc, #104]	; (8013b78 <HAL_UART_RxCpltCallback+0x134>)
 8013b0e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013b12:	4b19      	ldr	r3, [pc, #100]	; (8013b78 <HAL_UART_RxCpltCallback+0x134>)
 8013b14:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8013b18:	4b17      	ldr	r3, [pc, #92]	; (8013b78 <HAL_UART_RxCpltCallback+0x134>)
 8013b1a:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8013b1e:	4b16      	ldr	r3, [pc, #88]	; (8013b78 <HAL_UART_RxCpltCallback+0x134>)
 8013b20:	7d19      	ldrb	r1, [r3, #20]
 8013b22:	4b15      	ldr	r3, [pc, #84]	; (8013b78 <HAL_UART_RxCpltCallback+0x134>)
 8013b24:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8013b28:	f04f 0300 	mov.w	r3, #0
 8013b2c:	f04f 0400 	mov.w	r4, #0
 8013b30:	e9cd 3400 	strd	r3, r4, [sp]
 8013b34:	eeb0 4a66 	vmov.f32	s8, s13
 8013b38:	eef0 3a47 	vmov.f32	s7, s14
 8013b3c:	eeb0 3a67 	vmov.f32	s6, s15
 8013b40:	eef0 2a46 	vmov.f32	s5, s12
 8013b44:	eeb0 2a4a 	vmov.f32	s4, s20
 8013b48:	eeb0 1a49 	vmov.f32	s2, s18
 8013b4c:	eef0 1a69 	vmov.f32	s3, s19
 8013b50:	eeb0 0a48 	vmov.f32	s0, s16
 8013b54:	eef0 0a68 	vmov.f32	s1, s17
 8013b58:	4808      	ldr	r0, [pc, #32]	; (8013b7c <HAL_UART_RxCpltCallback+0x138>)
 8013b5a:	f7fe fa6d 	bl	8012038 <_ZN2FC9SensorGPS6setGPSEddfffffhhy>
							 gpsUart.gpsData.Satellites, gpsUart.gpsData.FixMode, 0/* UTC in microsecond */);
		}
	}
#endif

}
 8013b5e:	bf00      	nop
 8013b60:	370c      	adds	r7, #12
 8013b62:	46bd      	mov	sp, r7
 8013b64:	ecbd 8b06 	vpop	{d8-d10}
 8013b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b6c:	20001198 	.word	0x20001198
 8013b70:	20000f70 	.word	0x20000f70
 8013b74:	40011400 	.word	0x40011400
 8013b78:	20001230 	.word	0x20001230
 8013b7c:	20001010 	.word	0x20001010

08013b80 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b082      	sub	sp, #8
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	6078      	str	r0, [r7, #4]
	Lidar1D_CaptureCallback(htim);
 8013b88:	6878      	ldr	r0, [r7, #4]
 8013b8a:	f7ed fc1d 	bl	80013c8 <Lidar1D_CaptureCallback>
}
 8013b8e:	bf00      	nop
 8013b90:	3708      	adds	r7, #8
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}
	...

08013b98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b082      	sub	sp, #8
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8013ba2:	88fb      	ldrh	r3, [r7, #6]
 8013ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013ba8:	d10d      	bne.n	8013bc6 <HAL_GPIO_EXTI_Callback+0x2e>
		sensorBaro.setSeaLevelPressure(gps_alt);
 8013baa:	4b09      	ldr	r3, [pc, #36]	; (8013bd0 <HAL_GPIO_EXTI_Callback+0x38>)
 8013bac:	edd3 7a00 	vldr	s15, [r3]
 8013bb0:	eeb0 0a67 	vmov.f32	s0, s15
 8013bb4:	4807      	ldr	r0, [pc, #28]	; (8013bd4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8013bb6:	f7fe f907 	bl	8011dc8 <_ZN2FC10SensorBaro19setSeaLevelPressureEf>
//		if(sensorMag.startCalibrationFlag == false)
//			sensorMag.startCalibration();
//		else sensorMag.endCalibration();
		sensorAccel.setBias();
 8013bba:	4807      	ldr	r0, [pc, #28]	; (8013bd8 <HAL_GPIO_EXTI_Callback+0x40>)
 8013bbc:	f7fd ff08 	bl	80119d0 <_ZN2FC11SensorAccel7setBiasEv>
		sensorGyro.setBias();
 8013bc0:	4806      	ldr	r0, [pc, #24]	; (8013bdc <HAL_GPIO_EXTI_Callback+0x44>)
 8013bc2:	f7fe fb53 	bl	801226c <_ZN2FC10SensorGyro7setBiasEv>
	}
}
 8013bc6:	bf00      	nop
 8013bc8:	3708      	adds	r7, #8
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}
 8013bce:	bf00      	nop
 8013bd0:	2000150c 	.word	0x2000150c
 8013bd4:	20000fd8 	.word	0x20000fd8
 8013bd8:	20000f98 	.word	0x20000f98
 8013bdc:	20001078 	.word	0x20001078

08013be0 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv>:
template<typename T>
class Freq {
public:
	static uint16_t freqCnt;

	static uint16_t checkFreq(){
 8013be0:	b480      	push	{r7}
 8013be2:	b083      	sub	sp, #12
 8013be4:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8013be6:	4b06      	ldr	r3, [pc, #24]	; (8013c00 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv+0x20>)
 8013be8:	881b      	ldrh	r3, [r3, #0]
 8013bea:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8013bec:	4b04      	ldr	r3, [pc, #16]	; (8013c00 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv+0x20>)
 8013bee:	2200      	movs	r2, #0
 8013bf0:	801a      	strh	r2, [r3, #0]
		return res;
 8013bf2:	88fb      	ldrh	r3, [r7, #6]
	}
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	370c      	adds	r7, #12
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bfe:	4770      	bx	lr
 8013c00:	20000fd0 	.word	0x20000fd0

08013c04 <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8013c04:	b480      	push	{r7}
 8013c06:	b083      	sub	sp, #12
 8013c08:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8013c0a:	4b06      	ldr	r3, [pc, #24]	; (8013c24 <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv+0x20>)
 8013c0c:	881b      	ldrh	r3, [r3, #0]
 8013c0e:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8013c10:	4b04      	ldr	r3, [pc, #16]	; (8013c24 <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv+0x20>)
 8013c12:	2200      	movs	r2, #0
 8013c14:	801a      	strh	r2, [r3, #0]
		return res;
 8013c16:	88fb      	ldrh	r3, [r7, #6]
	}
 8013c18:	4618      	mov	r0, r3
 8013c1a:	370c      	adds	r7, #12
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c22:	4770      	bx	lr
 8013c24:	200010b0 	.word	0x200010b0

08013c28 <_ZN2FC4FreqINS_2RCEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8013c28:	b480      	push	{r7}
 8013c2a:	b083      	sub	sp, #12
 8013c2c:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8013c2e:	4b06      	ldr	r3, [pc, #24]	; (8013c48 <_ZN2FC4FreqINS_2RCEE9checkFreqEv+0x20>)
 8013c30:	881b      	ldrh	r3, [r3, #0]
 8013c32:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8013c34:	4b04      	ldr	r3, [pc, #16]	; (8013c48 <_ZN2FC4FreqINS_2RCEE9checkFreqEv+0x20>)
 8013c36:	2200      	movs	r2, #0
 8013c38:	801a      	strh	r2, [r3, #0]
		return res;
 8013c3a:	88fb      	ldrh	r3, [r7, #6]
	}
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	370c      	adds	r7, #12
 8013c40:	46bd      	mov	sp, r7
 8013c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c46:	4770      	bx	lr
 8013c48:	20000f90 	.word	0x20000f90

08013c4c <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8013c4c:	b480      	push	{r7}
 8013c4e:	b083      	sub	sp, #12
 8013c50:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8013c52:	4b06      	ldr	r3, [pc, #24]	; (8013c6c <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv+0x20>)
 8013c54:	881b      	ldrh	r3, [r3, #0]
 8013c56:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8013c58:	4b04      	ldr	r3, [pc, #16]	; (8013c6c <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv+0x20>)
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	801a      	strh	r2, [r3, #0]
		return res;
 8013c5e:	88fb      	ldrh	r3, [r7, #6]
	}
 8013c60:	4618      	mov	r0, r3
 8013c62:	370c      	adds	r7, #12
 8013c64:	46bd      	mov	sp, r7
 8013c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6a:	4770      	bx	lr
 8013c6c:	20001108 	.word	0x20001108

08013c70 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8013c70:	b480      	push	{r7}
 8013c72:	b083      	sub	sp, #12
 8013c74:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8013c76:	4b06      	ldr	r3, [pc, #24]	; (8013c90 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv+0x20>)
 8013c78:	881b      	ldrh	r3, [r3, #0]
 8013c7a:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8013c7c:	4b04      	ldr	r3, [pc, #16]	; (8013c90 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv+0x20>)
 8013c7e:	2200      	movs	r2, #0
 8013c80:	801a      	strh	r2, [r3, #0]
		return res;
 8013c82:	88fb      	ldrh	r3, [r7, #6]
	}
 8013c84:	4618      	mov	r0, r3
 8013c86:	370c      	adds	r7, #12
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8e:	4770      	bx	lr
 8013c90:	20001070 	.word	0x20001070

08013c94 <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8013c94:	b480      	push	{r7}
 8013c96:	b083      	sub	sp, #12
 8013c98:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8013c9a:	4b06      	ldr	r3, [pc, #24]	; (8013cb4 <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv+0x20>)
 8013c9c:	881b      	ldrh	r3, [r3, #0]
 8013c9e:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8013ca0:	4b04      	ldr	r3, [pc, #16]	; (8013cb4 <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv+0x20>)
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	801a      	strh	r2, [r3, #0]
		return res;
 8013ca6:	88fb      	ldrh	r3, [r7, #6]
	}
 8013ca8:	4618      	mov	r0, r3
 8013caa:	370c      	adds	r7, #12
 8013cac:	46bd      	mov	sp, r7
 8013cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb2:	4770      	bx	lr
 8013cb4:	20001008 	.word	0x20001008

08013cb8 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8013cb8:	b480      	push	{r7}
 8013cba:	b083      	sub	sp, #12
 8013cbc:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8013cbe:	4b06      	ldr	r3, [pc, #24]	; (8013cd8 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv+0x20>)
 8013cc0:	881b      	ldrh	r3, [r3, #0]
 8013cc2:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8013cc4:	4b04      	ldr	r3, [pc, #16]	; (8013cd8 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv+0x20>)
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	801a      	strh	r2, [r3, #0]
		return res;
 8013cca:	88fb      	ldrh	r3, [r7, #6]
	}
 8013ccc:	4618      	mov	r0, r3
 8013cce:	370c      	adds	r7, #12
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd6:	4770      	bx	lr
 8013cd8:	20000ae0 	.word	0x20000ae0

08013cdc <_ZN2FC4FreqINS_9ModuleINSEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8013cdc:	b480      	push	{r7}
 8013cde:	b083      	sub	sp, #12
 8013ce0:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8013ce2:	4b06      	ldr	r3, [pc, #24]	; (8013cfc <_ZN2FC4FreqINS_9ModuleINSEE9checkFreqEv+0x20>)
 8013ce4:	881b      	ldrh	r3, [r3, #0]
 8013ce6:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8013ce8:	4b04      	ldr	r3, [pc, #16]	; (8013cfc <_ZN2FC4FreqINS_9ModuleINSEE9checkFreqEv+0x20>)
 8013cea:	2200      	movs	r2, #0
 8013cec:	801a      	strh	r2, [r3, #0]
		return res;
 8013cee:	88fb      	ldrh	r3, [r7, #6]
	}
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	370c      	adds	r7, #12
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfa:	4770      	bx	lr
 8013cfc:	20001550 	.word	0x20001550

08013d00 <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8013d00:	b480      	push	{r7}
 8013d02:	b083      	sub	sp, #12
 8013d04:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8013d06:	4b06      	ldr	r3, [pc, #24]	; (8013d20 <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv+0x20>)
 8013d08:	881b      	ldrh	r3, [r3, #0]
 8013d0a:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8013d0c:	4b04      	ldr	r3, [pc, #16]	; (8013d20 <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv+0x20>)
 8013d0e:	2200      	movs	r2, #0
 8013d10:	801a      	strh	r2, [r3, #0]
		return res;
 8013d12:	88fb      	ldrh	r3, [r7, #6]
	}
 8013d14:	4618      	mov	r0, r3
 8013d16:	370c      	adds	r7, #12
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1e:	4770      	bx	lr
 8013d20:	2000154c 	.word	0x2000154c

08013d24 <_ZN2FC4FreqINS_24ModulePositionControllerEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8013d24:	b480      	push	{r7}
 8013d26:	b083      	sub	sp, #12
 8013d28:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8013d2a:	4b06      	ldr	r3, [pc, #24]	; (8013d44 <_ZN2FC4FreqINS_24ModulePositionControllerEE9checkFreqEv+0x20>)
 8013d2c:	881b      	ldrh	r3, [r3, #0]
 8013d2e:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8013d30:	4b04      	ldr	r3, [pc, #16]	; (8013d44 <_ZN2FC4FreqINS_24ModulePositionControllerEE9checkFreqEv+0x20>)
 8013d32:	2200      	movs	r2, #0
 8013d34:	801a      	strh	r2, [r3, #0]
		return res;
 8013d36:	88fb      	ldrh	r3, [r7, #6]
	}
 8013d38:	4618      	mov	r0, r3
 8013d3a:	370c      	adds	r7, #12
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d42:	4770      	bx	lr
 8013d44:	2000154e 	.word	0x2000154e

08013d48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8013d48:	b480      	push	{r7}
 8013d4a:	b083      	sub	sp, #12
 8013d4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8013d4e:	2300      	movs	r3, #0
 8013d50:	607b      	str	r3, [r7, #4]
 8013d52:	4b10      	ldr	r3, [pc, #64]	; (8013d94 <MX_DMA_Init+0x4c>)
 8013d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d56:	4a0f      	ldr	r2, [pc, #60]	; (8013d94 <MX_DMA_Init+0x4c>)
 8013d58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8013d5e:	4b0d      	ldr	r3, [pc, #52]	; (8013d94 <MX_DMA_Init+0x4c>)
 8013d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013d66:	607b      	str	r3, [r7, #4]
 8013d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	603b      	str	r3, [r7, #0]
 8013d6e:	4b09      	ldr	r3, [pc, #36]	; (8013d94 <MX_DMA_Init+0x4c>)
 8013d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d72:	4a08      	ldr	r2, [pc, #32]	; (8013d94 <MX_DMA_Init+0x4c>)
 8013d74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013d78:	6313      	str	r3, [r2, #48]	; 0x30
 8013d7a:	4b06      	ldr	r3, [pc, #24]	; (8013d94 <MX_DMA_Init+0x4c>)
 8013d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013d82:	603b      	str	r3, [r7, #0]
 8013d84:	683b      	ldr	r3, [r7, #0]

}
 8013d86:	bf00      	nop
 8013d88:	370c      	adds	r7, #12
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d90:	4770      	bx	lr
 8013d92:	bf00      	nop
 8013d94:	40023800 	.word	0x40023800

08013d98 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8013d9c:	4a34      	ldr	r2, [pc, #208]	; (8013e70 <MX_FREERTOS_Init+0xd8>)
 8013d9e:	2100      	movs	r1, #0
 8013da0:	4834      	ldr	r0, [pc, #208]	; (8013e74 <MX_FREERTOS_Init+0xdc>)
 8013da2:	f00d fb51 	bl	8021448 <osThreadNew>
 8013da6:	4602      	mov	r2, r0
 8013da8:	4b33      	ldr	r3, [pc, #204]	; (8013e78 <MX_FREERTOS_Init+0xe0>)
 8013daa:	601a      	str	r2, [r3, #0]

  /* creation of MPU9250_Task */
  MPU9250_TaskHandle = osThreadNew(MPU9250_StartTask, NULL, &MPU9250_Task_attributes);
 8013dac:	4a33      	ldr	r2, [pc, #204]	; (8013e7c <MX_FREERTOS_Init+0xe4>)
 8013dae:	2100      	movs	r1, #0
 8013db0:	4833      	ldr	r0, [pc, #204]	; (8013e80 <MX_FREERTOS_Init+0xe8>)
 8013db2:	f00d fb49 	bl	8021448 <osThreadNew>
 8013db6:	4602      	mov	r2, r0
 8013db8:	4b32      	ldr	r3, [pc, #200]	; (8013e84 <MX_FREERTOS_Init+0xec>)
 8013dba:	601a      	str	r2, [r3, #0]

  /* creation of BME280_Task */
  BME280_TaskHandle = osThreadNew(BME280_StartTask, NULL, &BME280_Task_attributes);
 8013dbc:	4a32      	ldr	r2, [pc, #200]	; (8013e88 <MX_FREERTOS_Init+0xf0>)
 8013dbe:	2100      	movs	r1, #0
 8013dc0:	4832      	ldr	r0, [pc, #200]	; (8013e8c <MX_FREERTOS_Init+0xf4>)
 8013dc2:	f00d fb41 	bl	8021448 <osThreadNew>
 8013dc6:	4602      	mov	r2, r0
 8013dc8:	4b31      	ldr	r3, [pc, #196]	; (8013e90 <MX_FREERTOS_Init+0xf8>)
 8013dca:	601a      	str	r2, [r3, #0]

  /* creation of IST8310_Task */
  IST8310_TaskHandle = osThreadNew(IST8310_StartTask, NULL, &IST8310_Task_attributes);
 8013dcc:	4a31      	ldr	r2, [pc, #196]	; (8013e94 <MX_FREERTOS_Init+0xfc>)
 8013dce:	2100      	movs	r1, #0
 8013dd0:	4831      	ldr	r0, [pc, #196]	; (8013e98 <MX_FREERTOS_Init+0x100>)
 8013dd2:	f00d fb39 	bl	8021448 <osThreadNew>
 8013dd6:	4602      	mov	r2, r0
 8013dd8:	4b30      	ldr	r3, [pc, #192]	; (8013e9c <MX_FREERTOS_Init+0x104>)
 8013dda:	601a      	str	r2, [r3, #0]

  /* creation of SD_Task */
  SD_TaskHandle = osThreadNew(SD_StartTask, NULL, &SD_Task_attributes);
 8013ddc:	4a30      	ldr	r2, [pc, #192]	; (8013ea0 <MX_FREERTOS_Init+0x108>)
 8013dde:	2100      	movs	r1, #0
 8013de0:	4830      	ldr	r0, [pc, #192]	; (8013ea4 <MX_FREERTOS_Init+0x10c>)
 8013de2:	f00d fb31 	bl	8021448 <osThreadNew>
 8013de6:	4602      	mov	r2, r0
 8013de8:	4b2f      	ldr	r3, [pc, #188]	; (8013ea8 <MX_FREERTOS_Init+0x110>)
 8013dea:	601a      	str	r2, [r3, #0]

  /* creation of AHRS_Task */
  AHRS_TaskHandle = osThreadNew(AHRS_StartTask, NULL, &AHRS_Task_attributes);
 8013dec:	4a2f      	ldr	r2, [pc, #188]	; (8013eac <MX_FREERTOS_Init+0x114>)
 8013dee:	2100      	movs	r1, #0
 8013df0:	482f      	ldr	r0, [pc, #188]	; (8013eb0 <MX_FREERTOS_Init+0x118>)
 8013df2:	f00d fb29 	bl	8021448 <osThreadNew>
 8013df6:	4602      	mov	r2, r0
 8013df8:	4b2e      	ldr	r3, [pc, #184]	; (8013eb4 <MX_FREERTOS_Init+0x11c>)
 8013dfa:	601a      	str	r2, [r3, #0]

  /* creation of Commander_Task */
  Commander_TaskHandle = osThreadNew(Commander_StartTask, NULL, &Commander_Task_attributes);
 8013dfc:	4a2e      	ldr	r2, [pc, #184]	; (8013eb8 <MX_FREERTOS_Init+0x120>)
 8013dfe:	2100      	movs	r1, #0
 8013e00:	482e      	ldr	r0, [pc, #184]	; (8013ebc <MX_FREERTOS_Init+0x124>)
 8013e02:	f00d fb21 	bl	8021448 <osThreadNew>
 8013e06:	4602      	mov	r2, r0
 8013e08:	4b2d      	ldr	r3, [pc, #180]	; (8013ec0 <MX_FREERTOS_Init+0x128>)
 8013e0a:	601a      	str	r2, [r3, #0]

  /* creation of Debug_Task */
  Debug_TaskHandle = osThreadNew(Debug_StartTask, NULL, &Debug_Task_attributes);
 8013e0c:	4a2d      	ldr	r2, [pc, #180]	; (8013ec4 <MX_FREERTOS_Init+0x12c>)
 8013e0e:	2100      	movs	r1, #0
 8013e10:	482d      	ldr	r0, [pc, #180]	; (8013ec8 <MX_FREERTOS_Init+0x130>)
 8013e12:	f00d fb19 	bl	8021448 <osThreadNew>
 8013e16:	4602      	mov	r2, r0
 8013e18:	4b2c      	ldr	r3, [pc, #176]	; (8013ecc <MX_FREERTOS_Init+0x134>)
 8013e1a:	601a      	str	r2, [r3, #0]

  /* creation of Buzzer_Task */
  Buzzer_TaskHandle = osThreadNew(Buzzer_StartTask, NULL, &Buzzer_Task_attributes);
 8013e1c:	4a2c      	ldr	r2, [pc, #176]	; (8013ed0 <MX_FREERTOS_Init+0x138>)
 8013e1e:	2100      	movs	r1, #0
 8013e20:	482c      	ldr	r0, [pc, #176]	; (8013ed4 <MX_FREERTOS_Init+0x13c>)
 8013e22:	f00d fb11 	bl	8021448 <osThreadNew>
 8013e26:	4602      	mov	r2, r0
 8013e28:	4b2b      	ldr	r3, [pc, #172]	; (8013ed8 <MX_FREERTOS_Init+0x140>)
 8013e2a:	601a      	str	r2, [r3, #0]

  /* creation of Health_Task */
  Health_TaskHandle = osThreadNew(Health_StartTask, NULL, &Health_Task_attributes);
 8013e2c:	4a2b      	ldr	r2, [pc, #172]	; (8013edc <MX_FREERTOS_Init+0x144>)
 8013e2e:	2100      	movs	r1, #0
 8013e30:	482b      	ldr	r0, [pc, #172]	; (8013ee0 <MX_FREERTOS_Init+0x148>)
 8013e32:	f00d fb09 	bl	8021448 <osThreadNew>
 8013e36:	4602      	mov	r2, r0
 8013e38:	4b2a      	ldr	r3, [pc, #168]	; (8013ee4 <MX_FREERTOS_Init+0x14c>)
 8013e3a:	601a      	str	r2, [r3, #0]

  /* creation of AC_Task */
  AC_TaskHandle = osThreadNew(AC_StartTask, NULL, &AC_Task_attributes);
 8013e3c:	4a2a      	ldr	r2, [pc, #168]	; (8013ee8 <MX_FREERTOS_Init+0x150>)
 8013e3e:	2100      	movs	r1, #0
 8013e40:	482a      	ldr	r0, [pc, #168]	; (8013eec <MX_FREERTOS_Init+0x154>)
 8013e42:	f00d fb01 	bl	8021448 <osThreadNew>
 8013e46:	4602      	mov	r2, r0
 8013e48:	4b29      	ldr	r3, [pc, #164]	; (8013ef0 <MX_FREERTOS_Init+0x158>)
 8013e4a:	601a      	str	r2, [r3, #0]

  /* creation of INS_Task */
  INS_TaskHandle = osThreadNew(INS_StartTask, NULL, &INS_Task_attributes);
 8013e4c:	4a29      	ldr	r2, [pc, #164]	; (8013ef4 <MX_FREERTOS_Init+0x15c>)
 8013e4e:	2100      	movs	r1, #0
 8013e50:	4829      	ldr	r0, [pc, #164]	; (8013ef8 <MX_FREERTOS_Init+0x160>)
 8013e52:	f00d faf9 	bl	8021448 <osThreadNew>
 8013e56:	4602      	mov	r2, r0
 8013e58:	4b28      	ldr	r3, [pc, #160]	; (8013efc <MX_FREERTOS_Init+0x164>)
 8013e5a:	601a      	str	r2, [r3, #0]

  /* creation of PC_Task */
  PC_TaskHandle = osThreadNew(PC_StartTask, NULL, &PC_Task_attributes);
 8013e5c:	4a28      	ldr	r2, [pc, #160]	; (8013f00 <MX_FREERTOS_Init+0x168>)
 8013e5e:	2100      	movs	r1, #0
 8013e60:	4828      	ldr	r0, [pc, #160]	; (8013f04 <MX_FREERTOS_Init+0x16c>)
 8013e62:	f00d faf1 	bl	8021448 <osThreadNew>
 8013e66:	4602      	mov	r2, r0
 8013e68:	4b27      	ldr	r3, [pc, #156]	; (8013f08 <MX_FREERTOS_Init+0x170>)
 8013e6a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8013e6c:	bf00      	nop
 8013e6e:	bd80      	pop	{r7, pc}
 8013e70:	0802e168 	.word	0x0802e168
 8013e74:	08013f0d 	.word	0x08013f0d
 8013e78:	200097d4 	.word	0x200097d4
 8013e7c:	0802e18c 	.word	0x0802e18c
 8013e80:	0801374d 	.word	0x0801374d
 8013e84:	2000decc 	.word	0x2000decc
 8013e88:	0802e1b0 	.word	0x0802e1b0
 8013e8c:	0801376d 	.word	0x0801376d
 8013e90:	2000e398 	.word	0x2000e398
 8013e94:	0802e1d4 	.word	0x0802e1d4
 8013e98:	08013781 	.word	0x08013781
 8013e9c:	20009fdc 	.word	0x20009fdc
 8013ea0:	0802e1f8 	.word	0x0802e1f8
 8013ea4:	08013791 	.word	0x08013791
 8013ea8:	2000c7e0 	.word	0x2000c7e0
 8013eac:	0802e21c 	.word	0x0802e21c
 8013eb0:	080137a5 	.word	0x080137a5
 8013eb4:	2000e334 	.word	0x2000e334
 8013eb8:	0802e240 	.word	0x0802e240
 8013ebc:	080137b9 	.word	0x080137b9
 8013ec0:	2000ca40 	.word	0x2000ca40
 8013ec4:	0802e264 	.word	0x0802e264
 8013ec8:	0801339d 	.word	0x0801339d
 8013ecc:	2000dcfc 	.word	0x2000dcfc
 8013ed0:	0802e288 	.word	0x0802e288
 8013ed4:	080137cd 	.word	0x080137cd
 8013ed8:	2000e394 	.word	0x2000e394
 8013edc:	0802e2ac 	.word	0x0802e2ac
 8013ee0:	08013389 	.word	0x08013389
 8013ee4:	2000e39c 	.word	0x2000e39c
 8013ee8:	0802e2d0 	.word	0x0802e2d0
 8013eec:	080137e1 	.word	0x080137e1
 8013ef0:	2000ded0 	.word	0x2000ded0
 8013ef4:	0802e2f4 	.word	0x0802e2f4
 8013ef8:	080137f5 	.word	0x080137f5
 8013efc:	20009fd8 	.word	0x20009fd8
 8013f00:	0802e318 	.word	0x0802e318
 8013f04:	08013809 	.word	0x08013809
 8013f08:	2000df30 	.word	0x2000df30

08013f0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b082      	sub	sp, #8
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8013f14:	2001      	movs	r0, #1
 8013f16:	f00d fcb7 	bl	8021888 <osDelay>
 8013f1a:	e7fb      	b.n	8013f14 <StartDefaultTask+0x8>

08013f1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b08a      	sub	sp, #40	; 0x28
 8013f20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013f22:	f107 0314 	add.w	r3, r7, #20
 8013f26:	2200      	movs	r2, #0
 8013f28:	601a      	str	r2, [r3, #0]
 8013f2a:	605a      	str	r2, [r3, #4]
 8013f2c:	609a      	str	r2, [r3, #8]
 8013f2e:	60da      	str	r2, [r3, #12]
 8013f30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013f32:	2300      	movs	r3, #0
 8013f34:	613b      	str	r3, [r7, #16]
 8013f36:	4b37      	ldr	r3, [pc, #220]	; (8014014 <MX_GPIO_Init+0xf8>)
 8013f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f3a:	4a36      	ldr	r2, [pc, #216]	; (8014014 <MX_GPIO_Init+0xf8>)
 8013f3c:	f043 0304 	orr.w	r3, r3, #4
 8013f40:	6313      	str	r3, [r2, #48]	; 0x30
 8013f42:	4b34      	ldr	r3, [pc, #208]	; (8014014 <MX_GPIO_Init+0xf8>)
 8013f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f46:	f003 0304 	and.w	r3, r3, #4
 8013f4a:	613b      	str	r3, [r7, #16]
 8013f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8013f4e:	2300      	movs	r3, #0
 8013f50:	60fb      	str	r3, [r7, #12]
 8013f52:	4b30      	ldr	r3, [pc, #192]	; (8014014 <MX_GPIO_Init+0xf8>)
 8013f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f56:	4a2f      	ldr	r2, [pc, #188]	; (8014014 <MX_GPIO_Init+0xf8>)
 8013f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8013f5e:	4b2d      	ldr	r3, [pc, #180]	; (8014014 <MX_GPIO_Init+0xf8>)
 8013f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f66:	60fb      	str	r3, [r7, #12]
 8013f68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	60bb      	str	r3, [r7, #8]
 8013f6e:	4b29      	ldr	r3, [pc, #164]	; (8014014 <MX_GPIO_Init+0xf8>)
 8013f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f72:	4a28      	ldr	r2, [pc, #160]	; (8014014 <MX_GPIO_Init+0xf8>)
 8013f74:	f043 0301 	orr.w	r3, r3, #1
 8013f78:	6313      	str	r3, [r2, #48]	; 0x30
 8013f7a:	4b26      	ldr	r3, [pc, #152]	; (8014014 <MX_GPIO_Init+0xf8>)
 8013f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f7e:	f003 0301 	and.w	r3, r3, #1
 8013f82:	60bb      	str	r3, [r7, #8]
 8013f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8013f86:	2300      	movs	r3, #0
 8013f88:	607b      	str	r3, [r7, #4]
 8013f8a:	4b22      	ldr	r3, [pc, #136]	; (8014014 <MX_GPIO_Init+0xf8>)
 8013f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f8e:	4a21      	ldr	r2, [pc, #132]	; (8014014 <MX_GPIO_Init+0xf8>)
 8013f90:	f043 0302 	orr.w	r3, r3, #2
 8013f94:	6313      	str	r3, [r2, #48]	; 0x30
 8013f96:	4b1f      	ldr	r3, [pc, #124]	; (8014014 <MX_GPIO_Init+0xf8>)
 8013f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f9a:	f003 0302 	and.w	r3, r3, #2
 8013f9e:	607b      	str	r3, [r7, #4]
 8013fa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	2120      	movs	r1, #32
 8013fa6:	481c      	ldr	r0, [pc, #112]	; (8014018 <MX_GPIO_Init+0xfc>)
 8013fa8:	f002 f978 	bl	801629c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8013fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8013fb2:	4b1a      	ldr	r3, [pc, #104]	; (801401c <MX_GPIO_Init+0x100>)
 8013fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013fb6:	2301      	movs	r3, #1
 8013fb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8013fba:	f107 0314 	add.w	r3, r7, #20
 8013fbe:	4619      	mov	r1, r3
 8013fc0:	4817      	ldr	r0, [pc, #92]	; (8014020 <MX_GPIO_Init+0x104>)
 8013fc2:	f001 ffe9 	bl	8015f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8013fc6:	2301      	movs	r3, #1
 8013fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013fca:	2300      	movs	r3, #0
 8013fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013fce:	2300      	movs	r3, #0
 8013fd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013fd2:	f107 0314 	add.w	r3, r7, #20
 8013fd6:	4619      	mov	r1, r3
 8013fd8:	4811      	ldr	r0, [pc, #68]	; (8014020 <MX_GPIO_Init+0x104>)
 8013fda:	f001 ffdd 	bl	8015f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8013fde:	2320      	movs	r3, #32
 8013fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013fe2:	2301      	movs	r3, #1
 8013fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013fea:	2300      	movs	r3, #0
 8013fec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8013fee:	f107 0314 	add.w	r3, r7, #20
 8013ff2:	4619      	mov	r1, r3
 8013ff4:	4808      	ldr	r0, [pc, #32]	; (8014018 <MX_GPIO_Init+0xfc>)
 8013ff6:	f001 ffcf 	bl	8015f98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	210a      	movs	r1, #10
 8013ffe:	2028      	movs	r0, #40	; 0x28
 8014000:	f001 fbf6 	bl	80157f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8014004:	2028      	movs	r0, #40	; 0x28
 8014006:	f001 fc0f 	bl	8015828 <HAL_NVIC_EnableIRQ>

}
 801400a:	bf00      	nop
 801400c:	3728      	adds	r7, #40	; 0x28
 801400e:	46bd      	mov	sp, r7
 8014010:	bd80      	pop	{r7, pc}
 8014012:	bf00      	nop
 8014014:	40023800 	.word	0x40023800
 8014018:	40020000 	.word	0x40020000
 801401c:	10210000 	.word	0x10210000
 8014020:	40020800 	.word	0x40020800

08014024 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8014028:	4b12      	ldr	r3, [pc, #72]	; (8014074 <MX_I2C1_Init+0x50>)
 801402a:	4a13      	ldr	r2, [pc, #76]	; (8014078 <MX_I2C1_Init+0x54>)
 801402c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 801402e:	4b11      	ldr	r3, [pc, #68]	; (8014074 <MX_I2C1_Init+0x50>)
 8014030:	4a12      	ldr	r2, [pc, #72]	; (801407c <MX_I2C1_Init+0x58>)
 8014032:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8014034:	4b0f      	ldr	r3, [pc, #60]	; (8014074 <MX_I2C1_Init+0x50>)
 8014036:	2200      	movs	r2, #0
 8014038:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 801403a:	4b0e      	ldr	r3, [pc, #56]	; (8014074 <MX_I2C1_Init+0x50>)
 801403c:	2200      	movs	r2, #0
 801403e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8014040:	4b0c      	ldr	r3, [pc, #48]	; (8014074 <MX_I2C1_Init+0x50>)
 8014042:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8014046:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8014048:	4b0a      	ldr	r3, [pc, #40]	; (8014074 <MX_I2C1_Init+0x50>)
 801404a:	2200      	movs	r2, #0
 801404c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 801404e:	4b09      	ldr	r3, [pc, #36]	; (8014074 <MX_I2C1_Init+0x50>)
 8014050:	2200      	movs	r2, #0
 8014052:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8014054:	4b07      	ldr	r3, [pc, #28]	; (8014074 <MX_I2C1_Init+0x50>)
 8014056:	2200      	movs	r2, #0
 8014058:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801405a:	4b06      	ldr	r3, [pc, #24]	; (8014074 <MX_I2C1_Init+0x50>)
 801405c:	2200      	movs	r2, #0
 801405e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8014060:	4804      	ldr	r0, [pc, #16]	; (8014074 <MX_I2C1_Init+0x50>)
 8014062:	f002 f94d 	bl	8016300 <HAL_I2C_Init>
 8014066:	4603      	mov	r3, r0
 8014068:	2b00      	cmp	r3, #0
 801406a:	d001      	beq.n	8014070 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 801406c:	f000 fa12 	bl	8014494 <Error_Handler>
  }

}
 8014070:	bf00      	nop
 8014072:	bd80      	pop	{r7, pc}
 8014074:	20010bfc 	.word	0x20010bfc
 8014078:	40005400 	.word	0x40005400
 801407c:	00061a80 	.word	0x00061a80

08014080 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8014080:	b580      	push	{r7, lr}
 8014082:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8014084:	4b12      	ldr	r3, [pc, #72]	; (80140d0 <MX_I2C2_Init+0x50>)
 8014086:	4a13      	ldr	r2, [pc, #76]	; (80140d4 <MX_I2C2_Init+0x54>)
 8014088:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 801408a:	4b11      	ldr	r3, [pc, #68]	; (80140d0 <MX_I2C2_Init+0x50>)
 801408c:	4a12      	ldr	r2, [pc, #72]	; (80140d8 <MX_I2C2_Init+0x58>)
 801408e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8014090:	4b0f      	ldr	r3, [pc, #60]	; (80140d0 <MX_I2C2_Init+0x50>)
 8014092:	2200      	movs	r2, #0
 8014094:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8014096:	4b0e      	ldr	r3, [pc, #56]	; (80140d0 <MX_I2C2_Init+0x50>)
 8014098:	2200      	movs	r2, #0
 801409a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801409c:	4b0c      	ldr	r3, [pc, #48]	; (80140d0 <MX_I2C2_Init+0x50>)
 801409e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80140a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80140a4:	4b0a      	ldr	r3, [pc, #40]	; (80140d0 <MX_I2C2_Init+0x50>)
 80140a6:	2200      	movs	r2, #0
 80140a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80140aa:	4b09      	ldr	r3, [pc, #36]	; (80140d0 <MX_I2C2_Init+0x50>)
 80140ac:	2200      	movs	r2, #0
 80140ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80140b0:	4b07      	ldr	r3, [pc, #28]	; (80140d0 <MX_I2C2_Init+0x50>)
 80140b2:	2200      	movs	r2, #0
 80140b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80140b6:	4b06      	ldr	r3, [pc, #24]	; (80140d0 <MX_I2C2_Init+0x50>)
 80140b8:	2200      	movs	r2, #0
 80140ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80140bc:	4804      	ldr	r0, [pc, #16]	; (80140d0 <MX_I2C2_Init+0x50>)
 80140be:	f002 f91f 	bl	8016300 <HAL_I2C_Init>
 80140c2:	4603      	mov	r3, r0
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d001      	beq.n	80140cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80140c8:	f000 f9e4 	bl	8014494 <Error_Handler>
  }

}
 80140cc:	bf00      	nop
 80140ce:	bd80      	pop	{r7, pc}
 80140d0:	20010c50 	.word	0x20010c50
 80140d4:	40005800 	.word	0x40005800
 80140d8:	00061a80 	.word	0x00061a80

080140dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b08c      	sub	sp, #48	; 0x30
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80140e4:	f107 031c 	add.w	r3, r7, #28
 80140e8:	2200      	movs	r2, #0
 80140ea:	601a      	str	r2, [r3, #0]
 80140ec:	605a      	str	r2, [r3, #4]
 80140ee:	609a      	str	r2, [r3, #8]
 80140f0:	60da      	str	r2, [r3, #12]
 80140f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	4a52      	ldr	r2, [pc, #328]	; (8014244 <HAL_I2C_MspInit+0x168>)
 80140fa:	4293      	cmp	r3, r2
 80140fc:	d15b      	bne.n	80141b6 <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80140fe:	2300      	movs	r3, #0
 8014100:	61bb      	str	r3, [r7, #24]
 8014102:	4b51      	ldr	r3, [pc, #324]	; (8014248 <HAL_I2C_MspInit+0x16c>)
 8014104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014106:	4a50      	ldr	r2, [pc, #320]	; (8014248 <HAL_I2C_MspInit+0x16c>)
 8014108:	f043 0302 	orr.w	r3, r3, #2
 801410c:	6313      	str	r3, [r2, #48]	; 0x30
 801410e:	4b4e      	ldr	r3, [pc, #312]	; (8014248 <HAL_I2C_MspInit+0x16c>)
 8014110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014112:	f003 0302 	and.w	r3, r3, #2
 8014116:	61bb      	str	r3, [r7, #24]
 8014118:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 801411a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801411e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8014120:	2312      	movs	r3, #18
 8014122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014124:	2301      	movs	r3, #1
 8014126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014128:	2303      	movs	r3, #3
 801412a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801412c:	2304      	movs	r3, #4
 801412e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014130:	f107 031c 	add.w	r3, r7, #28
 8014134:	4619      	mov	r1, r3
 8014136:	4845      	ldr	r0, [pc, #276]	; (801424c <HAL_I2C_MspInit+0x170>)
 8014138:	f001 ff2e 	bl	8015f98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801413c:	2300      	movs	r3, #0
 801413e:	617b      	str	r3, [r7, #20]
 8014140:	4b41      	ldr	r3, [pc, #260]	; (8014248 <HAL_I2C_MspInit+0x16c>)
 8014142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014144:	4a40      	ldr	r2, [pc, #256]	; (8014248 <HAL_I2C_MspInit+0x16c>)
 8014146:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801414a:	6413      	str	r3, [r2, #64]	; 0x40
 801414c:	4b3e      	ldr	r3, [pc, #248]	; (8014248 <HAL_I2C_MspInit+0x16c>)
 801414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014154:	617b      	str	r3, [r7, #20]
 8014156:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8014158:	4b3d      	ldr	r3, [pc, #244]	; (8014250 <HAL_I2C_MspInit+0x174>)
 801415a:	4a3e      	ldr	r2, [pc, #248]	; (8014254 <HAL_I2C_MspInit+0x178>)
 801415c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 801415e:	4b3c      	ldr	r3, [pc, #240]	; (8014250 <HAL_I2C_MspInit+0x174>)
 8014160:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8014164:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014166:	4b3a      	ldr	r3, [pc, #232]	; (8014250 <HAL_I2C_MspInit+0x174>)
 8014168:	2200      	movs	r2, #0
 801416a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 801416c:	4b38      	ldr	r3, [pc, #224]	; (8014250 <HAL_I2C_MspInit+0x174>)
 801416e:	2200      	movs	r2, #0
 8014170:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8014172:	4b37      	ldr	r3, [pc, #220]	; (8014250 <HAL_I2C_MspInit+0x174>)
 8014174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014178:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801417a:	4b35      	ldr	r3, [pc, #212]	; (8014250 <HAL_I2C_MspInit+0x174>)
 801417c:	2200      	movs	r2, #0
 801417e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8014180:	4b33      	ldr	r3, [pc, #204]	; (8014250 <HAL_I2C_MspInit+0x174>)
 8014182:	2200      	movs	r2, #0
 8014184:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8014186:	4b32      	ldr	r3, [pc, #200]	; (8014250 <HAL_I2C_MspInit+0x174>)
 8014188:	2200      	movs	r2, #0
 801418a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 801418c:	4b30      	ldr	r3, [pc, #192]	; (8014250 <HAL_I2C_MspInit+0x174>)
 801418e:	2200      	movs	r2, #0
 8014190:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014192:	4b2f      	ldr	r3, [pc, #188]	; (8014250 <HAL_I2C_MspInit+0x174>)
 8014194:	2200      	movs	r2, #0
 8014196:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8014198:	482d      	ldr	r0, [pc, #180]	; (8014250 <HAL_I2C_MspInit+0x174>)
 801419a:	f001 fb53 	bl	8015844 <HAL_DMA_Init>
 801419e:	4603      	mov	r3, r0
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d001      	beq.n	80141a8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80141a4:	f000 f976 	bl	8014494 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	4a29      	ldr	r2, [pc, #164]	; (8014250 <HAL_I2C_MspInit+0x174>)
 80141ac:	639a      	str	r2, [r3, #56]	; 0x38
 80141ae:	4a28      	ldr	r2, [pc, #160]	; (8014250 <HAL_I2C_MspInit+0x174>)
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80141b4:	e042      	b.n	801423c <HAL_I2C_MspInit+0x160>
  else if(i2cHandle->Instance==I2C2)
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	4a27      	ldr	r2, [pc, #156]	; (8014258 <HAL_I2C_MspInit+0x17c>)
 80141bc:	4293      	cmp	r3, r2
 80141be:	d13d      	bne.n	801423c <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80141c0:	2300      	movs	r3, #0
 80141c2:	613b      	str	r3, [r7, #16]
 80141c4:	4b20      	ldr	r3, [pc, #128]	; (8014248 <HAL_I2C_MspInit+0x16c>)
 80141c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141c8:	4a1f      	ldr	r2, [pc, #124]	; (8014248 <HAL_I2C_MspInit+0x16c>)
 80141ca:	f043 0302 	orr.w	r3, r3, #2
 80141ce:	6313      	str	r3, [r2, #48]	; 0x30
 80141d0:	4b1d      	ldr	r3, [pc, #116]	; (8014248 <HAL_I2C_MspInit+0x16c>)
 80141d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141d4:	f003 0302 	and.w	r3, r3, #2
 80141d8:	613b      	str	r3, [r7, #16]
 80141da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80141dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80141e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80141e2:	2312      	movs	r3, #18
 80141e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80141e6:	2301      	movs	r3, #1
 80141e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80141ea:	2303      	movs	r3, #3
 80141ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80141ee:	2304      	movs	r3, #4
 80141f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80141f2:	f107 031c 	add.w	r3, r7, #28
 80141f6:	4619      	mov	r1, r3
 80141f8:	4814      	ldr	r0, [pc, #80]	; (801424c <HAL_I2C_MspInit+0x170>)
 80141fa:	f001 fecd 	bl	8015f98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80141fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8014204:	2312      	movs	r3, #18
 8014206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014208:	2301      	movs	r3, #1
 801420a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801420c:	2303      	movs	r3, #3
 801420e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8014210:	2309      	movs	r3, #9
 8014212:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014214:	f107 031c 	add.w	r3, r7, #28
 8014218:	4619      	mov	r1, r3
 801421a:	480c      	ldr	r0, [pc, #48]	; (801424c <HAL_I2C_MspInit+0x170>)
 801421c:	f001 febc 	bl	8015f98 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8014220:	2300      	movs	r3, #0
 8014222:	60fb      	str	r3, [r7, #12]
 8014224:	4b08      	ldr	r3, [pc, #32]	; (8014248 <HAL_I2C_MspInit+0x16c>)
 8014226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014228:	4a07      	ldr	r2, [pc, #28]	; (8014248 <HAL_I2C_MspInit+0x16c>)
 801422a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801422e:	6413      	str	r3, [r2, #64]	; 0x40
 8014230:	4b05      	ldr	r3, [pc, #20]	; (8014248 <HAL_I2C_MspInit+0x16c>)
 8014232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014238:	60fb      	str	r3, [r7, #12]
 801423a:	68fb      	ldr	r3, [r7, #12]
}
 801423c:	bf00      	nop
 801423e:	3730      	adds	r7, #48	; 0x30
 8014240:	46bd      	mov	sp, r7
 8014242:	bd80      	pop	{r7, pc}
 8014244:	40005400 	.word	0x40005400
 8014248:	40023800 	.word	0x40023800
 801424c:	40020400 	.word	0x40020400
 8014250:	20010ca4 	.word	0x20010ca4
 8014254:	40026010 	.word	0x40026010
 8014258:	40005800 	.word	0x40005800

0801425c <msOverFlow>:

static __inline void msOverFlow(){
 801425c:	b480      	push	{r7}
 801425e:	af00      	add	r7, sp, #0
	_timerOverflowCnt++;
 8014260:	4b04      	ldr	r3, [pc, #16]	; (8014274 <msOverFlow+0x18>)
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	3301      	adds	r3, #1
 8014266:	4a03      	ldr	r2, [pc, #12]	; (8014274 <msOverFlow+0x18>)
 8014268:	6013      	str	r3, [r2, #0]
}
 801426a:	bf00      	nop
 801426c:	46bd      	mov	sp, r7
 801426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014272:	4770      	bx	lr
 8014274:	20001554 	.word	0x20001554

08014278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801427c:	f001 f99c 	bl	80155b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8014280:	f000 f828 	bl	80142d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8014284:	f7ff fe4a 	bl	8013f1c <MX_GPIO_Init>
  MX_DMA_Init();
 8014288:	f7ff fd5e 	bl	8013d48 <MX_DMA_Init>
  MX_USART2_UART_Init();
 801428c:	f000 fffe 	bl	801528c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8014290:	f7ff fec8 	bl	8014024 <MX_I2C1_Init>
  MX_I2C2_Init();
 8014294:	f7ff fef4 	bl	8014080 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8014298:	f000 f904 	bl	80144a4 <MX_SDIO_SD_Init>
  MX_TIM2_Init();
 801429c:	f000 fcb2 	bl	8014c04 <MX_TIM2_Init>
  MX_TIM3_Init();
 80142a0:	f000 fcfc 	bl	8014c9c <MX_TIM3_Init>
  MX_FATFS_Init();
 80142a4:	f009 fd20 	bl	801dce8 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 80142a8:	f001 f81a 	bl	80152e0 <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 80142ac:	f000 ffc0 	bl	8015230 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80142b0:	f000 fd8c 	bl	8014dcc <MX_TIM4_Init>
  MX_TIM5_Init();
 80142b4:	f000 fde2 	bl	8014e7c <MX_TIM5_Init>
  MX_TIM1_Init();
 80142b8:	f000 fc22 	bl	8014b00 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80142bc:	f000 f872 	bl	80143a4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  cppMain();
 80142c0:	f7ff faac 	bl	801381c <cppMain>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80142c4:	f00c ffd4 	bl	8021270 <osKernelInitialize>
  MX_FREERTOS_Init();
 80142c8:	f7ff fd66 	bl	8013d98 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80142cc:	f00d f826 	bl	802131c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80142d0:	e7fe      	b.n	80142d0 <main+0x58>
	...

080142d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b094      	sub	sp, #80	; 0x50
 80142d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80142da:	f107 0320 	add.w	r3, r7, #32
 80142de:	2230      	movs	r2, #48	; 0x30
 80142e0:	2100      	movs	r1, #0
 80142e2:	4618      	mov	r0, r3
 80142e4:	f014 fe7b 	bl	8028fde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80142e8:	f107 030c 	add.w	r3, r7, #12
 80142ec:	2200      	movs	r2, #0
 80142ee:	601a      	str	r2, [r3, #0]
 80142f0:	605a      	str	r2, [r3, #4]
 80142f2:	609a      	str	r2, [r3, #8]
 80142f4:	60da      	str	r2, [r3, #12]
 80142f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80142f8:	2300      	movs	r3, #0
 80142fa:	60bb      	str	r3, [r7, #8]
 80142fc:	4b27      	ldr	r3, [pc, #156]	; (801439c <SystemClock_Config+0xc8>)
 80142fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014300:	4a26      	ldr	r2, [pc, #152]	; (801439c <SystemClock_Config+0xc8>)
 8014302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014306:	6413      	str	r3, [r2, #64]	; 0x40
 8014308:	4b24      	ldr	r3, [pc, #144]	; (801439c <SystemClock_Config+0xc8>)
 801430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801430c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014310:	60bb      	str	r3, [r7, #8]
 8014312:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8014314:	2300      	movs	r3, #0
 8014316:	607b      	str	r3, [r7, #4]
 8014318:	4b21      	ldr	r3, [pc, #132]	; (80143a0 <SystemClock_Config+0xcc>)
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	4a20      	ldr	r2, [pc, #128]	; (80143a0 <SystemClock_Config+0xcc>)
 801431e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8014322:	6013      	str	r3, [r2, #0]
 8014324:	4b1e      	ldr	r3, [pc, #120]	; (80143a0 <SystemClock_Config+0xcc>)
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801432c:	607b      	str	r3, [r7, #4]
 801432e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8014330:	2301      	movs	r3, #1
 8014332:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8014334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8014338:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801433a:	2302      	movs	r3, #2
 801433c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801433e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014342:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8014344:	2304      	movs	r3, #4
 8014346:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8014348:	2364      	movs	r3, #100	; 0x64
 801434a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801434c:	2302      	movs	r3, #2
 801434e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8014350:	2305      	movs	r3, #5
 8014352:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8014354:	f107 0320 	add.w	r3, r7, #32
 8014358:	4618      	mov	r0, r3
 801435a:	f004 fea3 	bl	80190a4 <HAL_RCC_OscConfig>
 801435e:	4603      	mov	r3, r0
 8014360:	2b00      	cmp	r3, #0
 8014362:	d001      	beq.n	8014368 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8014364:	f000 f896 	bl	8014494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8014368:	230f      	movs	r3, #15
 801436a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801436c:	2302      	movs	r3, #2
 801436e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8014370:	2300      	movs	r3, #0
 8014372:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8014374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014378:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801437a:	2300      	movs	r3, #0
 801437c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 801437e:	f107 030c 	add.w	r3, r7, #12
 8014382:	2103      	movs	r1, #3
 8014384:	4618      	mov	r0, r3
 8014386:	f005 f8fd 	bl	8019584 <HAL_RCC_ClockConfig>
 801438a:	4603      	mov	r3, r0
 801438c:	2b00      	cmp	r3, #0
 801438e:	d001      	beq.n	8014394 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8014390:	f000 f880 	bl	8014494 <Error_Handler>
  }
}
 8014394:	bf00      	nop
 8014396:	3750      	adds	r7, #80	; 0x50
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}
 801439c:	40023800 	.word	0x40023800
 80143a0:	40007000 	.word	0x40007000

080143a4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	af00      	add	r7, sp, #0
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80143a8:	2200      	movs	r2, #0
 80143aa:	2105      	movs	r1, #5
 80143ac:	200b      	movs	r0, #11
 80143ae:	f001 fa1f 	bl	80157f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80143b2:	200b      	movs	r0, #11
 80143b4:	f001 fa38 	bl	8015828 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80143b8:	2200      	movs	r2, #0
 80143ba:	2105      	movs	r1, #5
 80143bc:	201f      	movs	r0, #31
 80143be:	f001 fa17 	bl	80157f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80143c2:	201f      	movs	r0, #31
 80143c4:	f001 fa30 	bl	8015828 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80143c8:	2200      	movs	r2, #0
 80143ca:	2105      	movs	r1, #5
 80143cc:	2020      	movs	r0, #32
 80143ce:	f001 fa0f 	bl	80157f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80143d2:	2020      	movs	r0, #32
 80143d4:	f001 fa28 	bl	8015828 <HAL_NVIC_EnableIRQ>
  /* I2C2_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 6, 0);
 80143d8:	2200      	movs	r2, #0
 80143da:	2106      	movs	r1, #6
 80143dc:	2021      	movs	r0, #33	; 0x21
 80143de:	f001 fa07 	bl	80157f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80143e2:	2021      	movs	r0, #33	; 0x21
 80143e4:	f001 fa20 	bl	8015828 <HAL_NVIC_EnableIRQ>
  /* I2C2_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 6, 0);
 80143e8:	2200      	movs	r2, #0
 80143ea:	2106      	movs	r1, #6
 80143ec:	2022      	movs	r0, #34	; 0x22
 80143ee:	f001 f9ff 	bl	80157f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80143f2:	2022      	movs	r0, #34	; 0x22
 80143f4:	f001 fa18 	bl	8015828 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80143f8:	2200      	movs	r2, #0
 80143fa:	2100      	movs	r1, #0
 80143fc:	2025      	movs	r0, #37	; 0x25
 80143fe:	f001 f9f7 	bl	80157f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8014402:	2025      	movs	r0, #37	; 0x25
 8014404:	f001 fa10 	bl	8015828 <HAL_NVIC_EnableIRQ>
  /* SDIO_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SDIO_IRQn, 10, 0);
 8014408:	2200      	movs	r2, #0
 801440a:	210a      	movs	r1, #10
 801440c:	2031      	movs	r0, #49	; 0x31
 801440e:	f001 f9ef 	bl	80157f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8014412:	2031      	movs	r0, #49	; 0x31
 8014414:	f001 fa08 	bl	8015828 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 10, 0);
 8014418:	2200      	movs	r2, #0
 801441a:	210a      	movs	r1, #10
 801441c:	2039      	movs	r0, #57	; 0x39
 801441e:	f001 f9e7 	bl	80157f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8014422:	2039      	movs	r0, #57	; 0x39
 8014424:	f001 fa00 	bl	8015828 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 10, 0);
 8014428:	2200      	movs	r2, #0
 801442a:	210a      	movs	r1, #10
 801442c:	203a      	movs	r0, #58	; 0x3a
 801442e:	f001 f9df 	bl	80157f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8014432:	203a      	movs	r0, #58	; 0x3a
 8014434:	f001 f9f8 	bl	8015828 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 10, 0);
 8014438:	2200      	movs	r2, #0
 801443a:	210a      	movs	r1, #10
 801443c:	2045      	movs	r0, #69	; 0x45
 801443e:	f001 f9d7 	bl	80157f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8014442:	2045      	movs	r0, #69	; 0x45
 8014444:	f001 f9f0 	bl	8015828 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 10, 0);
 8014448:	2200      	movs	r2, #0
 801444a:	210a      	movs	r1, #10
 801444c:	203b      	movs	r0, #59	; 0x3b
 801444e:	f001 f9cf 	bl	80157f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8014452:	203b      	movs	r0, #59	; 0x3b
 8014454:	f001 f9e8 	bl	8015828 <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 10, 0);
 8014458:	2200      	movs	r2, #0
 801445a:	210a      	movs	r1, #10
 801445c:	2047      	movs	r0, #71	; 0x47
 801445e:	f001 f9c7 	bl	80157f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8014462:	2047      	movs	r0, #71	; 0x47
 8014464:	f001 f9e0 	bl	8015828 <HAL_NVIC_EnableIRQ>
}
 8014468:	bf00      	nop
 801446a:	bd80      	pop	{r7, pc}

0801446c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b082      	sub	sp, #8
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	msOverFlow();
 8014474:	f7ff fef2 	bl	801425c <msOverFlow>
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	4a04      	ldr	r2, [pc, #16]	; (8014490 <HAL_TIM_PeriodElapsedCallback+0x24>)
 801447e:	4293      	cmp	r3, r2
 8014480:	d101      	bne.n	8014486 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_IncTick();
 8014482:	f001 f8bb 	bl	80155fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8014486:	bf00      	nop
 8014488:	3708      	adds	r7, #8
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}
 801448e:	bf00      	nop
 8014490:	40014400 	.word	0x40014400

08014494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8014494:	b480      	push	{r7}
 8014496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8014498:	bf00      	nop
 801449a:	46bd      	mov	sp, r7
 801449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a0:	4770      	bx	lr
	...

080144a4 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80144a4:	b480      	push	{r7}
 80144a6:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 80144a8:	4b0c      	ldr	r3, [pc, #48]	; (80144dc <MX_SDIO_SD_Init+0x38>)
 80144aa:	4a0d      	ldr	r2, [pc, #52]	; (80144e0 <MX_SDIO_SD_Init+0x3c>)
 80144ac:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80144ae:	4b0b      	ldr	r3, [pc, #44]	; (80144dc <MX_SDIO_SD_Init+0x38>)
 80144b0:	2200      	movs	r2, #0
 80144b2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80144b4:	4b09      	ldr	r3, [pc, #36]	; (80144dc <MX_SDIO_SD_Init+0x38>)
 80144b6:	2200      	movs	r2, #0
 80144b8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80144ba:	4b08      	ldr	r3, [pc, #32]	; (80144dc <MX_SDIO_SD_Init+0x38>)
 80144bc:	2200      	movs	r2, #0
 80144be:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80144c0:	4b06      	ldr	r3, [pc, #24]	; (80144dc <MX_SDIO_SD_Init+0x38>)
 80144c2:	2200      	movs	r2, #0
 80144c4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80144c6:	4b05      	ldr	r3, [pc, #20]	; (80144dc <MX_SDIO_SD_Init+0x38>)
 80144c8:	2200      	movs	r2, #0
 80144ca:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80144cc:	4b03      	ldr	r3, [pc, #12]	; (80144dc <MX_SDIO_SD_Init+0x38>)
 80144ce:	2200      	movs	r2, #0
 80144d0:	619a      	str	r2, [r3, #24]

}
 80144d2:	bf00      	nop
 80144d4:	46bd      	mov	sp, r7
 80144d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144da:	4770      	bx	lr
 80144dc:	20010dc4 	.word	0x20010dc4
 80144e0:	40012c00 	.word	0x40012c00

080144e4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b08c      	sub	sp, #48	; 0x30
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80144ec:	f107 031c 	add.w	r3, r7, #28
 80144f0:	2200      	movs	r2, #0
 80144f2:	601a      	str	r2, [r3, #0]
 80144f4:	605a      	str	r2, [r3, #4]
 80144f6:	609a      	str	r2, [r3, #8]
 80144f8:	60da      	str	r2, [r3, #12]
 80144fa:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	4a74      	ldr	r2, [pc, #464]	; (80146d4 <HAL_SD_MspInit+0x1f0>)
 8014502:	4293      	cmp	r3, r2
 8014504:	f040 80e1 	bne.w	80146ca <HAL_SD_MspInit+0x1e6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8014508:	2300      	movs	r3, #0
 801450a:	61bb      	str	r3, [r7, #24]
 801450c:	4b72      	ldr	r3, [pc, #456]	; (80146d8 <HAL_SD_MspInit+0x1f4>)
 801450e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014510:	4a71      	ldr	r2, [pc, #452]	; (80146d8 <HAL_SD_MspInit+0x1f4>)
 8014512:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014516:	6453      	str	r3, [r2, #68]	; 0x44
 8014518:	4b6f      	ldr	r3, [pc, #444]	; (80146d8 <HAL_SD_MspInit+0x1f4>)
 801451a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801451c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014520:	61bb      	str	r3, [r7, #24]
 8014522:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014524:	2300      	movs	r3, #0
 8014526:	617b      	str	r3, [r7, #20]
 8014528:	4b6b      	ldr	r3, [pc, #428]	; (80146d8 <HAL_SD_MspInit+0x1f4>)
 801452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801452c:	4a6a      	ldr	r2, [pc, #424]	; (80146d8 <HAL_SD_MspInit+0x1f4>)
 801452e:	f043 0301 	orr.w	r3, r3, #1
 8014532:	6313      	str	r3, [r2, #48]	; 0x30
 8014534:	4b68      	ldr	r3, [pc, #416]	; (80146d8 <HAL_SD_MspInit+0x1f4>)
 8014536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014538:	f003 0301 	and.w	r3, r3, #1
 801453c:	617b      	str	r3, [r7, #20]
 801453e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014540:	2300      	movs	r3, #0
 8014542:	613b      	str	r3, [r7, #16]
 8014544:	4b64      	ldr	r3, [pc, #400]	; (80146d8 <HAL_SD_MspInit+0x1f4>)
 8014546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014548:	4a63      	ldr	r2, [pc, #396]	; (80146d8 <HAL_SD_MspInit+0x1f4>)
 801454a:	f043 0302 	orr.w	r3, r3, #2
 801454e:	6313      	str	r3, [r2, #48]	; 0x30
 8014550:	4b61      	ldr	r3, [pc, #388]	; (80146d8 <HAL_SD_MspInit+0x1f4>)
 8014552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014554:	f003 0302 	and.w	r3, r3, #2
 8014558:	613b      	str	r3, [r7, #16]
 801455a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801455c:	2300      	movs	r3, #0
 801455e:	60fb      	str	r3, [r7, #12]
 8014560:	4b5d      	ldr	r3, [pc, #372]	; (80146d8 <HAL_SD_MspInit+0x1f4>)
 8014562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014564:	4a5c      	ldr	r2, [pc, #368]	; (80146d8 <HAL_SD_MspInit+0x1f4>)
 8014566:	f043 0304 	orr.w	r3, r3, #4
 801456a:	6313      	str	r3, [r2, #48]	; 0x30
 801456c:	4b5a      	ldr	r3, [pc, #360]	; (80146d8 <HAL_SD_MspInit+0x1f4>)
 801456e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014570:	f003 0304 	and.w	r3, r3, #4
 8014574:	60fb      	str	r3, [r7, #12]
 8014576:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8014578:	f44f 7310 	mov.w	r3, #576	; 0x240
 801457c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801457e:	2302      	movs	r3, #2
 8014580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014582:	2301      	movs	r3, #1
 8014584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014586:	2303      	movs	r3, #3
 8014588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 801458a:	230c      	movs	r3, #12
 801458c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801458e:	f107 031c 	add.w	r3, r7, #28
 8014592:	4619      	mov	r1, r3
 8014594:	4851      	ldr	r0, [pc, #324]	; (80146dc <HAL_SD_MspInit+0x1f8>)
 8014596:	f001 fcff 	bl	8015f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 801459a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801459e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80145a0:	2302      	movs	r3, #2
 80145a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80145a4:	2300      	movs	r3, #0
 80145a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80145a8:	2303      	movs	r3, #3
 80145aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80145ac:	230c      	movs	r3, #12
 80145ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80145b0:	f107 031c 	add.w	r3, r7, #28
 80145b4:	4619      	mov	r1, r3
 80145b6:	484a      	ldr	r0, [pc, #296]	; (80146e0 <HAL_SD_MspInit+0x1fc>)
 80145b8:	f001 fcee 	bl	8015f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 80145bc:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 80145c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80145c2:	2302      	movs	r3, #2
 80145c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80145c6:	2301      	movs	r3, #1
 80145c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80145ca:	2303      	movs	r3, #3
 80145cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80145ce:	230c      	movs	r3, #12
 80145d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80145d2:	f107 031c 	add.w	r3, r7, #28
 80145d6:	4619      	mov	r1, r3
 80145d8:	4842      	ldr	r0, [pc, #264]	; (80146e4 <HAL_SD_MspInit+0x200>)
 80145da:	f001 fcdd 	bl	8015f98 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80145de:	4b42      	ldr	r3, [pc, #264]	; (80146e8 <HAL_SD_MspInit+0x204>)
 80145e0:	4a42      	ldr	r2, [pc, #264]	; (80146ec <HAL_SD_MspInit+0x208>)
 80145e2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80145e4:	4b40      	ldr	r3, [pc, #256]	; (80146e8 <HAL_SD_MspInit+0x204>)
 80145e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80145ea:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80145ec:	4b3e      	ldr	r3, [pc, #248]	; (80146e8 <HAL_SD_MspInit+0x204>)
 80145ee:	2200      	movs	r2, #0
 80145f0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80145f2:	4b3d      	ldr	r3, [pc, #244]	; (80146e8 <HAL_SD_MspInit+0x204>)
 80145f4:	2200      	movs	r2, #0
 80145f6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80145f8:	4b3b      	ldr	r3, [pc, #236]	; (80146e8 <HAL_SD_MspInit+0x204>)
 80145fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80145fe:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8014600:	4b39      	ldr	r3, [pc, #228]	; (80146e8 <HAL_SD_MspInit+0x204>)
 8014602:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014606:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8014608:	4b37      	ldr	r3, [pc, #220]	; (80146e8 <HAL_SD_MspInit+0x204>)
 801460a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801460e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8014610:	4b35      	ldr	r3, [pc, #212]	; (80146e8 <HAL_SD_MspInit+0x204>)
 8014612:	2220      	movs	r2, #32
 8014614:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8014616:	4b34      	ldr	r3, [pc, #208]	; (80146e8 <HAL_SD_MspInit+0x204>)
 8014618:	2200      	movs	r2, #0
 801461a:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 801461c:	4b32      	ldr	r3, [pc, #200]	; (80146e8 <HAL_SD_MspInit+0x204>)
 801461e:	2204      	movs	r2, #4
 8014620:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8014622:	4b31      	ldr	r3, [pc, #196]	; (80146e8 <HAL_SD_MspInit+0x204>)
 8014624:	2203      	movs	r2, #3
 8014626:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8014628:	4b2f      	ldr	r3, [pc, #188]	; (80146e8 <HAL_SD_MspInit+0x204>)
 801462a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801462e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8014630:	4b2d      	ldr	r3, [pc, #180]	; (80146e8 <HAL_SD_MspInit+0x204>)
 8014632:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8014636:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8014638:	482b      	ldr	r0, [pc, #172]	; (80146e8 <HAL_SD_MspInit+0x204>)
 801463a:	f001 f903 	bl	8015844 <HAL_DMA_Init>
 801463e:	4603      	mov	r3, r0
 8014640:	2b00      	cmp	r3, #0
 8014642:	d001      	beq.n	8014648 <HAL_SD_MspInit+0x164>
    {
      Error_Handler();
 8014644:	f7ff ff26 	bl	8014494 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	4a27      	ldr	r2, [pc, #156]	; (80146e8 <HAL_SD_MspInit+0x204>)
 801464c:	641a      	str	r2, [r3, #64]	; 0x40
 801464e:	4a26      	ldr	r2, [pc, #152]	; (80146e8 <HAL_SD_MspInit+0x204>)
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8014654:	4b26      	ldr	r3, [pc, #152]	; (80146f0 <HAL_SD_MspInit+0x20c>)
 8014656:	4a27      	ldr	r2, [pc, #156]	; (80146f4 <HAL_SD_MspInit+0x210>)
 8014658:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 801465a:	4b25      	ldr	r3, [pc, #148]	; (80146f0 <HAL_SD_MspInit+0x20c>)
 801465c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014660:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8014662:	4b23      	ldr	r3, [pc, #140]	; (80146f0 <HAL_SD_MspInit+0x20c>)
 8014664:	2240      	movs	r2, #64	; 0x40
 8014666:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8014668:	4b21      	ldr	r3, [pc, #132]	; (80146f0 <HAL_SD_MspInit+0x20c>)
 801466a:	2200      	movs	r2, #0
 801466c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 801466e:	4b20      	ldr	r3, [pc, #128]	; (80146f0 <HAL_SD_MspInit+0x20c>)
 8014670:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014674:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8014676:	4b1e      	ldr	r3, [pc, #120]	; (80146f0 <HAL_SD_MspInit+0x20c>)
 8014678:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801467c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801467e:	4b1c      	ldr	r3, [pc, #112]	; (80146f0 <HAL_SD_MspInit+0x20c>)
 8014680:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8014684:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8014686:	4b1a      	ldr	r3, [pc, #104]	; (80146f0 <HAL_SD_MspInit+0x20c>)
 8014688:	2220      	movs	r2, #32
 801468a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 801468c:	4b18      	ldr	r3, [pc, #96]	; (80146f0 <HAL_SD_MspInit+0x20c>)
 801468e:	2200      	movs	r2, #0
 8014690:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8014692:	4b17      	ldr	r3, [pc, #92]	; (80146f0 <HAL_SD_MspInit+0x20c>)
 8014694:	2204      	movs	r2, #4
 8014696:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8014698:	4b15      	ldr	r3, [pc, #84]	; (80146f0 <HAL_SD_MspInit+0x20c>)
 801469a:	2203      	movs	r2, #3
 801469c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 801469e:	4b14      	ldr	r3, [pc, #80]	; (80146f0 <HAL_SD_MspInit+0x20c>)
 80146a0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80146a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80146a6:	4b12      	ldr	r3, [pc, #72]	; (80146f0 <HAL_SD_MspInit+0x20c>)
 80146a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80146ac:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80146ae:	4810      	ldr	r0, [pc, #64]	; (80146f0 <HAL_SD_MspInit+0x20c>)
 80146b0:	f001 f8c8 	bl	8015844 <HAL_DMA_Init>
 80146b4:	4603      	mov	r3, r0
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d001      	beq.n	80146be <HAL_SD_MspInit+0x1da>
    {
      Error_Handler();
 80146ba:	f7ff feeb 	bl	8014494 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	4a0b      	ldr	r2, [pc, #44]	; (80146f0 <HAL_SD_MspInit+0x20c>)
 80146c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80146c4:	4a0a      	ldr	r2, [pc, #40]	; (80146f0 <HAL_SD_MspInit+0x20c>)
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80146ca:	bf00      	nop
 80146cc:	3730      	adds	r7, #48	; 0x30
 80146ce:	46bd      	mov	sp, r7
 80146d0:	bd80      	pop	{r7, pc}
 80146d2:	bf00      	nop
 80146d4:	40012c00 	.word	0x40012c00
 80146d8:	40023800 	.word	0x40023800
 80146dc:	40020000 	.word	0x40020000
 80146e0:	40020400 	.word	0x40020400
 80146e4:	40020800 	.word	0x40020800
 80146e8:	20010d04 	.word	0x20010d04
 80146ec:	40026458 	.word	0x40026458
 80146f0:	20010d64 	.word	0x20010d64
 80146f4:	400264a0 	.word	0x400264a0

080146f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80146f8:	b480      	push	{r7}
 80146fa:	b083      	sub	sp, #12
 80146fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80146fe:	2300      	movs	r3, #0
 8014700:	607b      	str	r3, [r7, #4]
 8014702:	4b10      	ldr	r3, [pc, #64]	; (8014744 <HAL_MspInit+0x4c>)
 8014704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014706:	4a0f      	ldr	r2, [pc, #60]	; (8014744 <HAL_MspInit+0x4c>)
 8014708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801470c:	6453      	str	r3, [r2, #68]	; 0x44
 801470e:	4b0d      	ldr	r3, [pc, #52]	; (8014744 <HAL_MspInit+0x4c>)
 8014710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014716:	607b      	str	r3, [r7, #4]
 8014718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801471a:	2300      	movs	r3, #0
 801471c:	603b      	str	r3, [r7, #0]
 801471e:	4b09      	ldr	r3, [pc, #36]	; (8014744 <HAL_MspInit+0x4c>)
 8014720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014722:	4a08      	ldr	r2, [pc, #32]	; (8014744 <HAL_MspInit+0x4c>)
 8014724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014728:	6413      	str	r3, [r2, #64]	; 0x40
 801472a:	4b06      	ldr	r3, [pc, #24]	; (8014744 <HAL_MspInit+0x4c>)
 801472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801472e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014732:	603b      	str	r3, [r7, #0]
 8014734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8014736:	bf00      	nop
 8014738:	370c      	adds	r7, #12
 801473a:	46bd      	mov	sp, r7
 801473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014740:	4770      	bx	lr
 8014742:	bf00      	nop
 8014744:	40023800 	.word	0x40023800

08014748 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b08c      	sub	sp, #48	; 0x30
 801474c:	af00      	add	r7, sp, #0
 801474e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8014750:	2300      	movs	r3, #0
 8014752:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8014754:	2300      	movs	r3, #0
 8014756:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8014758:	2200      	movs	r2, #0
 801475a:	6879      	ldr	r1, [r7, #4]
 801475c:	2019      	movs	r0, #25
 801475e:	f001 f847 	bl	80157f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8014762:	2019      	movs	r0, #25
 8014764:	f001 f860 	bl	8015828 <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8014768:	2300      	movs	r3, #0
 801476a:	60fb      	str	r3, [r7, #12]
 801476c:	4b1e      	ldr	r3, [pc, #120]	; (80147e8 <HAL_InitTick+0xa0>)
 801476e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014770:	4a1d      	ldr	r2, [pc, #116]	; (80147e8 <HAL_InitTick+0xa0>)
 8014772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014776:	6453      	str	r3, [r2, #68]	; 0x44
 8014778:	4b1b      	ldr	r3, [pc, #108]	; (80147e8 <HAL_InitTick+0xa0>)
 801477a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801477c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014780:	60fb      	str	r3, [r7, #12]
 8014782:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8014784:	f107 0210 	add.w	r2, r7, #16
 8014788:	f107 0314 	add.w	r3, r7, #20
 801478c:	4611      	mov	r1, r2
 801478e:	4618      	mov	r0, r3
 8014790:	f005 f8ea 	bl	8019968 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8014794:	f005 f8d4 	bl	8019940 <HAL_RCC_GetPCLK2Freq>
 8014798:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 801479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801479c:	4a13      	ldr	r2, [pc, #76]	; (80147ec <HAL_InitTick+0xa4>)
 801479e:	fba2 2303 	umull	r2, r3, r2, r3
 80147a2:	0c9b      	lsrs	r3, r3, #18
 80147a4:	3b01      	subs	r3, #1
 80147a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80147a8:	4b11      	ldr	r3, [pc, #68]	; (80147f0 <HAL_InitTick+0xa8>)
 80147aa:	4a12      	ldr	r2, [pc, #72]	; (80147f4 <HAL_InitTick+0xac>)
 80147ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 80147ae:	4b10      	ldr	r3, [pc, #64]	; (80147f0 <HAL_InitTick+0xa8>)
 80147b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80147b4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80147b6:	4a0e      	ldr	r2, [pc, #56]	; (80147f0 <HAL_InitTick+0xa8>)
 80147b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ba:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80147bc:	4b0c      	ldr	r3, [pc, #48]	; (80147f0 <HAL_InitTick+0xa8>)
 80147be:	2200      	movs	r2, #0
 80147c0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80147c2:	4b0b      	ldr	r3, [pc, #44]	; (80147f0 <HAL_InitTick+0xa8>)
 80147c4:	2200      	movs	r2, #0
 80147c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 80147c8:	4809      	ldr	r0, [pc, #36]	; (80147f0 <HAL_InitTick+0xa8>)
 80147ca:	f006 fbfd 	bl	801afc8 <HAL_TIM_Base_Init>
 80147ce:	4603      	mov	r3, r0
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d104      	bne.n	80147de <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 80147d4:	4806      	ldr	r0, [pc, #24]	; (80147f0 <HAL_InitTick+0xa8>)
 80147d6:	f006 fc22 	bl	801b01e <HAL_TIM_Base_Start_IT>
 80147da:	4603      	mov	r3, r0
 80147dc:	e000      	b.n	80147e0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80147de:	2301      	movs	r3, #1
}
 80147e0:	4618      	mov	r0, r3
 80147e2:	3730      	adds	r7, #48	; 0x30
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}
 80147e8:	40023800 	.word	0x40023800
 80147ec:	431bde83 	.word	0x431bde83
 80147f0:	20010e48 	.word	0x20010e48
 80147f4:	40014400 	.word	0x40014400

080147f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80147f8:	b480      	push	{r7}
 80147fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80147fc:	bf00      	nop
 80147fe:	46bd      	mov	sp, r7
 8014800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014804:	4770      	bx	lr

08014806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8014806:	b480      	push	{r7}
 8014808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801480a:	e7fe      	b.n	801480a <HardFault_Handler+0x4>

0801480c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801480c:	b480      	push	{r7}
 801480e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014810:	e7fe      	b.n	8014810 <MemManage_Handler+0x4>

08014812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8014812:	b480      	push	{r7}
 8014814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8014816:	e7fe      	b.n	8014816 <BusFault_Handler+0x4>

08014818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014818:	b480      	push	{r7}
 801481a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801481c:	e7fe      	b.n	801481c <UsageFault_Handler+0x4>

0801481e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801481e:	b480      	push	{r7}
 8014820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014822:	bf00      	nop
 8014824:	46bd      	mov	sp, r7
 8014826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482a:	4770      	bx	lr

0801482c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 801482c:	b580      	push	{r7, lr}
 801482e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8014830:	4802      	ldr	r0, [pc, #8]	; (801483c <DMA1_Stream0_IRQHandler+0x10>)
 8014832:	f001 f92f 	bl	8015a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8014836:	bf00      	nop
 8014838:	bd80      	pop	{r7, pc}
 801483a:	bf00      	nop
 801483c:	20010ca4 	.word	0x20010ca4

08014840 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8014840:	b580      	push	{r7, lr}
 8014842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8014844:	4803      	ldr	r0, [pc, #12]	; (8014854 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8014846:	f006 fcec 	bl	801b222 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 801484a:	4803      	ldr	r0, [pc, #12]	; (8014858 <TIM1_UP_TIM10_IRQHandler+0x18>)
 801484c:	f006 fce9 	bl	801b222 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8014850:	bf00      	nop
 8014852:	bd80      	pop	{r7, pc}
 8014854:	20010f48 	.word	0x20010f48
 8014858:	20010e48 	.word	0x20010e48

0801485c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8014860:	4802      	ldr	r0, [pc, #8]	; (801486c <I2C1_EV_IRQHandler+0x10>)
 8014862:	f002 fbaf 	bl	8016fc4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8014866:	bf00      	nop
 8014868:	bd80      	pop	{r7, pc}
 801486a:	bf00      	nop
 801486c:	20010bfc 	.word	0x20010bfc

08014870 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8014874:	4802      	ldr	r0, [pc, #8]	; (8014880 <I2C1_ER_IRQHandler+0x10>)
 8014876:	f002 fd0b 	bl	8017290 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 801487a:	bf00      	nop
 801487c:	bd80      	pop	{r7, pc}
 801487e:	bf00      	nop
 8014880:	20010bfc 	.word	0x20010bfc

08014884 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8014888:	4802      	ldr	r0, [pc, #8]	; (8014894 <I2C2_EV_IRQHandler+0x10>)
 801488a:	f002 fb9b 	bl	8016fc4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 801488e:	bf00      	nop
 8014890:	bd80      	pop	{r7, pc}
 8014892:	bf00      	nop
 8014894:	20010c50 	.word	0x20010c50

08014898 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8014898:	b580      	push	{r7, lr}
 801489a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 801489c:	4802      	ldr	r0, [pc, #8]	; (80148a8 <I2C2_ER_IRQHandler+0x10>)
 801489e:	f002 fcf7 	bl	8017290 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80148a2:	bf00      	nop
 80148a4:	bd80      	pop	{r7, pc}
 80148a6:	bf00      	nop
 80148a8:	20010c50 	.word	0x20010c50

080148ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80148ac:	b580      	push	{r7, lr}
 80148ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80148b0:	4802      	ldr	r0, [pc, #8]	; (80148bc <USART1_IRQHandler+0x10>)
 80148b2:	f007 fe0d 	bl	801c4d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80148b6:	bf00      	nop
 80148b8:	bd80      	pop	{r7, pc}
 80148ba:	bf00      	nop
 80148bc:	20011088 	.word	0x20011088

080148c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80148c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80148c8:	f001 fd02 	bl	80162d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80148cc:	bf00      	nop
 80148ce:	bd80      	pop	{r7, pc}

080148d0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80148d4:	4802      	ldr	r0, [pc, #8]	; (80148e0 <SDIO_IRQHandler+0x10>)
 80148d6:	f005 fae3 	bl	8019ea0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80148da:	bf00      	nop
 80148dc:	bd80      	pop	{r7, pc}
 80148de:	bf00      	nop
 80148e0:	20010dc4 	.word	0x20010dc4

080148e4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80148e8:	4802      	ldr	r0, [pc, #8]	; (80148f4 <DMA2_Stream1_IRQHandler+0x10>)
 80148ea:	f001 f8d3 	bl	8015a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80148ee:	bf00      	nop
 80148f0:	bd80      	pop	{r7, pc}
 80148f2:	bf00      	nop
 80148f4:	20010fc8 	.word	0x20010fc8

080148f8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80148fc:	4802      	ldr	r0, [pc, #8]	; (8014908 <DMA2_Stream2_IRQHandler+0x10>)
 80148fe:	f001 f8c9 	bl	8015a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8014902:	bf00      	nop
 8014904:	bd80      	pop	{r7, pc}
 8014906:	bf00      	nop
 8014908:	20011028 	.word	0x20011028

0801490c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 801490c:	b580      	push	{r7, lr}
 801490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8014910:	4802      	ldr	r0, [pc, #8]	; (801491c <DMA2_Stream3_IRQHandler+0x10>)
 8014912:	f001 f8bf 	bl	8015a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8014916:	bf00      	nop
 8014918:	bd80      	pop	{r7, pc}
 801491a:	bf00      	nop
 801491c:	20010d04 	.word	0x20010d04

08014920 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8014920:	b580      	push	{r7, lr}
 8014922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8014924:	4802      	ldr	r0, [pc, #8]	; (8014930 <DMA2_Stream6_IRQHandler+0x10>)
 8014926:	f001 f8b5 	bl	8015a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 801492a:	bf00      	nop
 801492c:	bd80      	pop	{r7, pc}
 801492e:	bf00      	nop
 8014930:	20010d64 	.word	0x20010d64

08014934 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8014934:	b580      	push	{r7, lr}
 8014936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8014938:	4802      	ldr	r0, [pc, #8]	; (8014944 <USART6_IRQHandler+0x10>)
 801493a:	f007 fdc9 	bl	801c4d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 801493e:	bf00      	nop
 8014940:	bd80      	pop	{r7, pc}
 8014942:	bf00      	nop
 8014944:	200110c8 	.word	0x200110c8

08014948 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8014948:	b480      	push	{r7}
 801494a:	af00      	add	r7, sp, #0
	return 1;
 801494c:	2301      	movs	r3, #1
}
 801494e:	4618      	mov	r0, r3
 8014950:	46bd      	mov	sp, r7
 8014952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014956:	4770      	bx	lr

08014958 <_kill>:

int _kill(int pid, int sig)
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b082      	sub	sp, #8
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
 8014960:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8014962:	f014 faf5 	bl	8028f50 <__errno>
 8014966:	4602      	mov	r2, r0
 8014968:	2316      	movs	r3, #22
 801496a:	6013      	str	r3, [r2, #0]
	return -1;
 801496c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014970:	4618      	mov	r0, r3
 8014972:	3708      	adds	r7, #8
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}

08014978 <_exit>:

void _exit (int status)
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b082      	sub	sp, #8
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8014980:	f04f 31ff 	mov.w	r1, #4294967295
 8014984:	6878      	ldr	r0, [r7, #4]
 8014986:	f7ff ffe7 	bl	8014958 <_kill>
	while (1) {}		/* Make sure we hang here */
 801498a:	e7fe      	b.n	801498a <_exit+0x12>

0801498c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b086      	sub	sp, #24
 8014990:	af00      	add	r7, sp, #0
 8014992:	60f8      	str	r0, [r7, #12]
 8014994:	60b9      	str	r1, [r7, #8]
 8014996:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014998:	2300      	movs	r3, #0
 801499a:	617b      	str	r3, [r7, #20]
 801499c:	e00a      	b.n	80149b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801499e:	f3af 8000 	nop.w
 80149a2:	4601      	mov	r1, r0
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	1c5a      	adds	r2, r3, #1
 80149a8:	60ba      	str	r2, [r7, #8]
 80149aa:	b2ca      	uxtb	r2, r1
 80149ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80149ae:	697b      	ldr	r3, [r7, #20]
 80149b0:	3301      	adds	r3, #1
 80149b2:	617b      	str	r3, [r7, #20]
 80149b4:	697a      	ldr	r2, [r7, #20]
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	429a      	cmp	r2, r3
 80149ba:	dbf0      	blt.n	801499e <_read+0x12>
	}

return len;
 80149bc:	687b      	ldr	r3, [r7, #4]
}
 80149be:	4618      	mov	r0, r3
 80149c0:	3718      	adds	r7, #24
 80149c2:	46bd      	mov	sp, r7
 80149c4:	bd80      	pop	{r7, pc}

080149c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80149c6:	b580      	push	{r7, lr}
 80149c8:	b086      	sub	sp, #24
 80149ca:	af00      	add	r7, sp, #0
 80149cc:	60f8      	str	r0, [r7, #12]
 80149ce:	60b9      	str	r1, [r7, #8]
 80149d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80149d2:	2300      	movs	r3, #0
 80149d4:	617b      	str	r3, [r7, #20]
 80149d6:	e009      	b.n	80149ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80149d8:	68bb      	ldr	r3, [r7, #8]
 80149da:	1c5a      	adds	r2, r3, #1
 80149dc:	60ba      	str	r2, [r7, #8]
 80149de:	781b      	ldrb	r3, [r3, #0]
 80149e0:	4618      	mov	r0, r3
 80149e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80149e6:	697b      	ldr	r3, [r7, #20]
 80149e8:	3301      	adds	r3, #1
 80149ea:	617b      	str	r3, [r7, #20]
 80149ec:	697a      	ldr	r2, [r7, #20]
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	429a      	cmp	r2, r3
 80149f2:	dbf1      	blt.n	80149d8 <_write+0x12>
	}
	return len;
 80149f4:	687b      	ldr	r3, [r7, #4]
}
 80149f6:	4618      	mov	r0, r3
 80149f8:	3718      	adds	r7, #24
 80149fa:	46bd      	mov	sp, r7
 80149fc:	bd80      	pop	{r7, pc}

080149fe <_close>:

int _close(int file)
{
 80149fe:	b480      	push	{r7}
 8014a00:	b083      	sub	sp, #12
 8014a02:	af00      	add	r7, sp, #0
 8014a04:	6078      	str	r0, [r7, #4]
	return -1;
 8014a06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	370c      	adds	r7, #12
 8014a0e:	46bd      	mov	sp, r7
 8014a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a14:	4770      	bx	lr

08014a16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8014a16:	b480      	push	{r7}
 8014a18:	b083      	sub	sp, #12
 8014a1a:	af00      	add	r7, sp, #0
 8014a1c:	6078      	str	r0, [r7, #4]
 8014a1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8014a20:	683b      	ldr	r3, [r7, #0]
 8014a22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014a26:	605a      	str	r2, [r3, #4]
	return 0;
 8014a28:	2300      	movs	r3, #0
}
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	370c      	adds	r7, #12
 8014a2e:	46bd      	mov	sp, r7
 8014a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a34:	4770      	bx	lr

08014a36 <_isatty>:

int _isatty(int file)
{
 8014a36:	b480      	push	{r7}
 8014a38:	b083      	sub	sp, #12
 8014a3a:	af00      	add	r7, sp, #0
 8014a3c:	6078      	str	r0, [r7, #4]
	return 1;
 8014a3e:	2301      	movs	r3, #1
}
 8014a40:	4618      	mov	r0, r3
 8014a42:	370c      	adds	r7, #12
 8014a44:	46bd      	mov	sp, r7
 8014a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4a:	4770      	bx	lr

08014a4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8014a4c:	b480      	push	{r7}
 8014a4e:	b085      	sub	sp, #20
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	60f8      	str	r0, [r7, #12]
 8014a54:	60b9      	str	r1, [r7, #8]
 8014a56:	607a      	str	r2, [r7, #4]
	return 0;
 8014a58:	2300      	movs	r3, #0
}
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	3714      	adds	r7, #20
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a64:	4770      	bx	lr
	...

08014a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8014a68:	b580      	push	{r7, lr}
 8014a6a:	b086      	sub	sp, #24
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8014a70:	4a14      	ldr	r2, [pc, #80]	; (8014ac4 <_sbrk+0x5c>)
 8014a72:	4b15      	ldr	r3, [pc, #84]	; (8014ac8 <_sbrk+0x60>)
 8014a74:	1ad3      	subs	r3, r2, r3
 8014a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8014a78:	697b      	ldr	r3, [r7, #20]
 8014a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8014a7c:	4b13      	ldr	r3, [pc, #76]	; (8014acc <_sbrk+0x64>)
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d102      	bne.n	8014a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8014a84:	4b11      	ldr	r3, [pc, #68]	; (8014acc <_sbrk+0x64>)
 8014a86:	4a12      	ldr	r2, [pc, #72]	; (8014ad0 <_sbrk+0x68>)
 8014a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8014a8a:	4b10      	ldr	r3, [pc, #64]	; (8014acc <_sbrk+0x64>)
 8014a8c:	681a      	ldr	r2, [r3, #0]
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	4413      	add	r3, r2
 8014a92:	693a      	ldr	r2, [r7, #16]
 8014a94:	429a      	cmp	r2, r3
 8014a96:	d207      	bcs.n	8014aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8014a98:	f014 fa5a 	bl	8028f50 <__errno>
 8014a9c:	4602      	mov	r2, r0
 8014a9e:	230c      	movs	r3, #12
 8014aa0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8014aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8014aa6:	e009      	b.n	8014abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8014aa8:	4b08      	ldr	r3, [pc, #32]	; (8014acc <_sbrk+0x64>)
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8014aae:	4b07      	ldr	r3, [pc, #28]	; (8014acc <_sbrk+0x64>)
 8014ab0:	681a      	ldr	r2, [r3, #0]
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	4413      	add	r3, r2
 8014ab6:	4a05      	ldr	r2, [pc, #20]	; (8014acc <_sbrk+0x64>)
 8014ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8014aba:	68fb      	ldr	r3, [r7, #12]
}
 8014abc:	4618      	mov	r0, r3
 8014abe:	3718      	adds	r7, #24
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd80      	pop	{r7, pc}
 8014ac4:	20020000 	.word	0x20020000
 8014ac8:	00000400 	.word	0x00000400
 8014acc:	20001558 	.word	0x20001558
 8014ad0:	20013208 	.word	0x20013208

08014ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8014ad4:	b480      	push	{r7}
 8014ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8014ad8:	4b08      	ldr	r3, [pc, #32]	; (8014afc <SystemInit+0x28>)
 8014ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014ade:	4a07      	ldr	r2, [pc, #28]	; (8014afc <SystemInit+0x28>)
 8014ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8014ae8:	4b04      	ldr	r3, [pc, #16]	; (8014afc <SystemInit+0x28>)
 8014aea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014aee:	609a      	str	r2, [r3, #8]
#endif
}
 8014af0:	bf00      	nop
 8014af2:	46bd      	mov	sp, r7
 8014af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af8:	4770      	bx	lr
 8014afa:	bf00      	nop
 8014afc:	e000ed00 	.word	0xe000ed00

08014b00 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b08a      	sub	sp, #40	; 0x28
 8014b04:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8014b06:	f107 0318 	add.w	r3, r7, #24
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	601a      	str	r2, [r3, #0]
 8014b0e:	605a      	str	r2, [r3, #4]
 8014b10:	609a      	str	r2, [r3, #8]
 8014b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8014b14:	f107 0310 	add.w	r3, r7, #16
 8014b18:	2200      	movs	r2, #0
 8014b1a:	601a      	str	r2, [r3, #0]
 8014b1c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8014b1e:	463b      	mov	r3, r7
 8014b20:	2200      	movs	r2, #0
 8014b22:	601a      	str	r2, [r3, #0]
 8014b24:	605a      	str	r2, [r3, #4]
 8014b26:	609a      	str	r2, [r3, #8]
 8014b28:	60da      	str	r2, [r3, #12]

  htim1.Instance = TIM1;
 8014b2a:	4b34      	ldr	r3, [pc, #208]	; (8014bfc <MX_TIM1_Init+0xfc>)
 8014b2c:	4a34      	ldr	r2, [pc, #208]	; (8014c00 <MX_TIM1_Init+0x100>)
 8014b2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8014b30:	4b32      	ldr	r3, [pc, #200]	; (8014bfc <MX_TIM1_Init+0xfc>)
 8014b32:	2263      	movs	r2, #99	; 0x63
 8014b34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8014b36:	4b31      	ldr	r3, [pc, #196]	; (8014bfc <MX_TIM1_Init+0xfc>)
 8014b38:	2200      	movs	r2, #0
 8014b3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8014b3c:	4b2f      	ldr	r3, [pc, #188]	; (8014bfc <MX_TIM1_Init+0xfc>)
 8014b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8014b44:	4b2d      	ldr	r3, [pc, #180]	; (8014bfc <MX_TIM1_Init+0xfc>)
 8014b46:	2200      	movs	r2, #0
 8014b48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8014b4a:	4b2c      	ldr	r3, [pc, #176]	; (8014bfc <MX_TIM1_Init+0xfc>)
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8014b50:	4b2a      	ldr	r3, [pc, #168]	; (8014bfc <MX_TIM1_Init+0xfc>)
 8014b52:	2200      	movs	r2, #0
 8014b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8014b56:	4829      	ldr	r0, [pc, #164]	; (8014bfc <MX_TIM1_Init+0xfc>)
 8014b58:	f006 fa36 	bl	801afc8 <HAL_TIM_Base_Init>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d001      	beq.n	8014b66 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8014b62:	f7ff fc97 	bl	8014494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8014b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014b6a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8014b6c:	f107 0318 	add.w	r3, r7, #24
 8014b70:	4619      	mov	r1, r3
 8014b72:	4822      	ldr	r0, [pc, #136]	; (8014bfc <MX_TIM1_Init+0xfc>)
 8014b74:	f006 fdc0 	bl	801b6f8 <HAL_TIM_ConfigClockSource>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d001      	beq.n	8014b82 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8014b7e:	f7ff fc89 	bl	8014494 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8014b82:	481e      	ldr	r0, [pc, #120]	; (8014bfc <MX_TIM1_Init+0xfc>)
 8014b84:	f006 fb18 	bl	801b1b8 <HAL_TIM_IC_Init>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d001      	beq.n	8014b92 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8014b8e:	f7ff fc81 	bl	8014494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8014b92:	2300      	movs	r3, #0
 8014b94:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8014b96:	2300      	movs	r3, #0
 8014b98:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8014b9a:	f107 0310 	add.w	r3, r7, #16
 8014b9e:	4619      	mov	r1, r3
 8014ba0:	4816      	ldr	r0, [pc, #88]	; (8014bfc <MX_TIM1_Init+0xfc>)
 8014ba2:	f007 faad 	bl	801c100 <HAL_TIMEx_MasterConfigSynchronization>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d001      	beq.n	8014bb0 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8014bac:	f7ff fc72 	bl	8014494 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8014bb4:	2301      	movs	r3, #1
 8014bb6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8014bb8:	2300      	movs	r3, #0
 8014bba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8014bc0:	463b      	mov	r3, r7
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	4619      	mov	r1, r3
 8014bc6:	480d      	ldr	r0, [pc, #52]	; (8014bfc <MX_TIM1_Init+0xfc>)
 8014bc8:	f006 fc33 	bl	801b432 <HAL_TIM_IC_ConfigChannel>
 8014bcc:	4603      	mov	r3, r0
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d001      	beq.n	8014bd6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8014bd2:	f7ff fc5f 	bl	8014494 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8014bd6:	2302      	movs	r3, #2
 8014bd8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8014bda:	2302      	movs	r3, #2
 8014bdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8014bde:	463b      	mov	r3, r7
 8014be0:	2204      	movs	r2, #4
 8014be2:	4619      	mov	r1, r3
 8014be4:	4805      	ldr	r0, [pc, #20]	; (8014bfc <MX_TIM1_Init+0xfc>)
 8014be6:	f006 fc24 	bl	801b432 <HAL_TIM_IC_ConfigChannel>
 8014bea:	4603      	mov	r3, r0
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d001      	beq.n	8014bf4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8014bf0:	f7ff fc50 	bl	8014494 <Error_Handler>
  }

}
 8014bf4:	bf00      	nop
 8014bf6:	3728      	adds	r7, #40	; 0x28
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	bd80      	pop	{r7, pc}
 8014bfc:	20010f48 	.word	0x20010f48
 8014c00:	40010000 	.word	0x40010000

08014c04 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b086      	sub	sp, #24
 8014c08:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8014c0a:	f107 0308 	add.w	r3, r7, #8
 8014c0e:	2200      	movs	r2, #0
 8014c10:	601a      	str	r2, [r3, #0]
 8014c12:	605a      	str	r2, [r3, #4]
 8014c14:	609a      	str	r2, [r3, #8]
 8014c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8014c18:	463b      	mov	r3, r7
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	601a      	str	r2, [r3, #0]
 8014c1e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8014c20:	4b1d      	ldr	r3, [pc, #116]	; (8014c98 <MX_TIM2_Init+0x94>)
 8014c22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014c26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8014c28:	4b1b      	ldr	r3, [pc, #108]	; (8014c98 <MX_TIM2_Init+0x94>)
 8014c2a:	2263      	movs	r2, #99	; 0x63
 8014c2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8014c2e:	4b1a      	ldr	r3, [pc, #104]	; (8014c98 <MX_TIM2_Init+0x94>)
 8014c30:	2200      	movs	r2, #0
 8014c32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8014c34:	4b18      	ldr	r3, [pc, #96]	; (8014c98 <MX_TIM2_Init+0x94>)
 8014c36:	f04f 32ff 	mov.w	r2, #4294967295
 8014c3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8014c3c:	4b16      	ldr	r3, [pc, #88]	; (8014c98 <MX_TIM2_Init+0x94>)
 8014c3e:	2200      	movs	r2, #0
 8014c40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8014c42:	4b15      	ldr	r3, [pc, #84]	; (8014c98 <MX_TIM2_Init+0x94>)
 8014c44:	2200      	movs	r2, #0
 8014c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8014c48:	4813      	ldr	r0, [pc, #76]	; (8014c98 <MX_TIM2_Init+0x94>)
 8014c4a:	f006 f9bd 	bl	801afc8 <HAL_TIM_Base_Init>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d001      	beq.n	8014c58 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8014c54:	f7ff fc1e 	bl	8014494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8014c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8014c5e:	f107 0308 	add.w	r3, r7, #8
 8014c62:	4619      	mov	r1, r3
 8014c64:	480c      	ldr	r0, [pc, #48]	; (8014c98 <MX_TIM2_Init+0x94>)
 8014c66:	f006 fd47 	bl	801b6f8 <HAL_TIM_ConfigClockSource>
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d001      	beq.n	8014c74 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8014c70:	f7ff fc10 	bl	8014494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8014c74:	2300      	movs	r3, #0
 8014c76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8014c78:	2300      	movs	r3, #0
 8014c7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8014c7c:	463b      	mov	r3, r7
 8014c7e:	4619      	mov	r1, r3
 8014c80:	4805      	ldr	r0, [pc, #20]	; (8014c98 <MX_TIM2_Init+0x94>)
 8014c82:	f007 fa3d 	bl	801c100 <HAL_TIMEx_MasterConfigSynchronization>
 8014c86:	4603      	mov	r3, r0
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d001      	beq.n	8014c90 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8014c8c:	f7ff fc02 	bl	8014494 <Error_Handler>
  }

}
 8014c90:	bf00      	nop
 8014c92:	3718      	adds	r7, #24
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bd80      	pop	{r7, pc}
 8014c98:	20010f88 	.word	0x20010f88

08014c9c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8014c9c:	b580      	push	{r7, lr}
 8014c9e:	b08e      	sub	sp, #56	; 0x38
 8014ca0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8014ca2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	601a      	str	r2, [r3, #0]
 8014caa:	605a      	str	r2, [r3, #4]
 8014cac:	609a      	str	r2, [r3, #8]
 8014cae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8014cb0:	f107 0320 	add.w	r3, r7, #32
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	601a      	str	r2, [r3, #0]
 8014cb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8014cba:	1d3b      	adds	r3, r7, #4
 8014cbc:	2200      	movs	r2, #0
 8014cbe:	601a      	str	r2, [r3, #0]
 8014cc0:	605a      	str	r2, [r3, #4]
 8014cc2:	609a      	str	r2, [r3, #8]
 8014cc4:	60da      	str	r2, [r3, #12]
 8014cc6:	611a      	str	r2, [r3, #16]
 8014cc8:	615a      	str	r2, [r3, #20]
 8014cca:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8014ccc:	4b3d      	ldr	r3, [pc, #244]	; (8014dc4 <MX_TIM3_Init+0x128>)
 8014cce:	4a3e      	ldr	r2, [pc, #248]	; (8014dc8 <MX_TIM3_Init+0x12c>)
 8014cd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5-1;
 8014cd2:	4b3c      	ldr	r3, [pc, #240]	; (8014dc4 <MX_TIM3_Init+0x128>)
 8014cd4:	2204      	movs	r2, #4
 8014cd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8014cd8:	4b3a      	ldr	r3, [pc, #232]	; (8014dc4 <MX_TIM3_Init+0x128>)
 8014cda:	2200      	movs	r2, #0
 8014cdc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 8014cde:	4b39      	ldr	r3, [pc, #228]	; (8014dc4 <MX_TIM3_Init+0x128>)
 8014ce0:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8014ce4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8014ce6:	4b37      	ldr	r3, [pc, #220]	; (8014dc4 <MX_TIM3_Init+0x128>)
 8014ce8:	2200      	movs	r2, #0
 8014cea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8014cec:	4b35      	ldr	r3, [pc, #212]	; (8014dc4 <MX_TIM3_Init+0x128>)
 8014cee:	2280      	movs	r2, #128	; 0x80
 8014cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8014cf2:	4834      	ldr	r0, [pc, #208]	; (8014dc4 <MX_TIM3_Init+0x128>)
 8014cf4:	f006 f968 	bl	801afc8 <HAL_TIM_Base_Init>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d001      	beq.n	8014d02 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8014cfe:	f7ff fbc9 	bl	8014494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8014d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014d06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8014d08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014d0c:	4619      	mov	r1, r3
 8014d0e:	482d      	ldr	r0, [pc, #180]	; (8014dc4 <MX_TIM3_Init+0x128>)
 8014d10:	f006 fcf2 	bl	801b6f8 <HAL_TIM_ConfigClockSource>
 8014d14:	4603      	mov	r3, r0
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d001      	beq.n	8014d1e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8014d1a:	f7ff fbbb 	bl	8014494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8014d1e:	4829      	ldr	r0, [pc, #164]	; (8014dc4 <MX_TIM3_Init+0x128>)
 8014d20:	f006 f9a1 	bl	801b066 <HAL_TIM_PWM_Init>
 8014d24:	4603      	mov	r3, r0
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d001      	beq.n	8014d2e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8014d2a:	f7ff fbb3 	bl	8014494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8014d32:	2300      	movs	r3, #0
 8014d34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8014d36:	f107 0320 	add.w	r3, r7, #32
 8014d3a:	4619      	mov	r1, r3
 8014d3c:	4821      	ldr	r0, [pc, #132]	; (8014dc4 <MX_TIM3_Init+0x128>)
 8014d3e:	f007 f9df 	bl	801c100 <HAL_TIMEx_MasterConfigSynchronization>
 8014d42:	4603      	mov	r3, r0
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d001      	beq.n	8014d4c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8014d48:	f7ff fba4 	bl	8014494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8014d4c:	2360      	movs	r3, #96	; 0x60
 8014d4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8014d50:	2300      	movs	r3, #0
 8014d52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8014d54:	2300      	movs	r3, #0
 8014d56:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8014d58:	2304      	movs	r3, #4
 8014d5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8014d5c:	1d3b      	adds	r3, r7, #4
 8014d5e:	2200      	movs	r2, #0
 8014d60:	4619      	mov	r1, r3
 8014d62:	4818      	ldr	r0, [pc, #96]	; (8014dc4 <MX_TIM3_Init+0x128>)
 8014d64:	f006 fc02 	bl	801b56c <HAL_TIM_PWM_ConfigChannel>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d001      	beq.n	8014d72 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8014d6e:	f7ff fb91 	bl	8014494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8014d72:	1d3b      	adds	r3, r7, #4
 8014d74:	2204      	movs	r2, #4
 8014d76:	4619      	mov	r1, r3
 8014d78:	4812      	ldr	r0, [pc, #72]	; (8014dc4 <MX_TIM3_Init+0x128>)
 8014d7a:	f006 fbf7 	bl	801b56c <HAL_TIM_PWM_ConfigChannel>
 8014d7e:	4603      	mov	r3, r0
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d001      	beq.n	8014d88 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8014d84:	f7ff fb86 	bl	8014494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8014d88:	1d3b      	adds	r3, r7, #4
 8014d8a:	2208      	movs	r2, #8
 8014d8c:	4619      	mov	r1, r3
 8014d8e:	480d      	ldr	r0, [pc, #52]	; (8014dc4 <MX_TIM3_Init+0x128>)
 8014d90:	f006 fbec 	bl	801b56c <HAL_TIM_PWM_ConfigChannel>
 8014d94:	4603      	mov	r3, r0
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d001      	beq.n	8014d9e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8014d9a:	f7ff fb7b 	bl	8014494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8014d9e:	1d3b      	adds	r3, r7, #4
 8014da0:	220c      	movs	r2, #12
 8014da2:	4619      	mov	r1, r3
 8014da4:	4807      	ldr	r0, [pc, #28]	; (8014dc4 <MX_TIM3_Init+0x128>)
 8014da6:	f006 fbe1 	bl	801b56c <HAL_TIM_PWM_ConfigChannel>
 8014daa:	4603      	mov	r3, r0
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d001      	beq.n	8014db4 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8014db0:	f7ff fb70 	bl	8014494 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8014db4:	4803      	ldr	r0, [pc, #12]	; (8014dc4 <MX_TIM3_Init+0x128>)
 8014db6:	f000 f995 	bl	80150e4 <HAL_TIM_MspPostInit>

}
 8014dba:	bf00      	nop
 8014dbc:	3738      	adds	r7, #56	; 0x38
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd80      	pop	{r7, pc}
 8014dc2:	bf00      	nop
 8014dc4:	20010f08 	.word	0x20010f08
 8014dc8:	40000400 	.word	0x40000400

08014dcc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b08a      	sub	sp, #40	; 0x28
 8014dd0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8014dd2:	f107 0320 	add.w	r3, r7, #32
 8014dd6:	2200      	movs	r2, #0
 8014dd8:	601a      	str	r2, [r3, #0]
 8014dda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8014ddc:	1d3b      	adds	r3, r7, #4
 8014dde:	2200      	movs	r2, #0
 8014de0:	601a      	str	r2, [r3, #0]
 8014de2:	605a      	str	r2, [r3, #4]
 8014de4:	609a      	str	r2, [r3, #8]
 8014de6:	60da      	str	r2, [r3, #12]
 8014de8:	611a      	str	r2, [r3, #16]
 8014dea:	615a      	str	r2, [r3, #20]
 8014dec:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8014dee:	4b21      	ldr	r3, [pc, #132]	; (8014e74 <MX_TIM4_Init+0xa8>)
 8014df0:	4a21      	ldr	r2, [pc, #132]	; (8014e78 <MX_TIM4_Init+0xac>)
 8014df2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8014df4:	4b1f      	ldr	r3, [pc, #124]	; (8014e74 <MX_TIM4_Init+0xa8>)
 8014df6:	2200      	movs	r2, #0
 8014df8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8014dfa:	4b1e      	ldr	r3, [pc, #120]	; (8014e74 <MX_TIM4_Init+0xa8>)
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8014e00:	4b1c      	ldr	r3, [pc, #112]	; (8014e74 <MX_TIM4_Init+0xa8>)
 8014e02:	220a      	movs	r2, #10
 8014e04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8014e06:	4b1b      	ldr	r3, [pc, #108]	; (8014e74 <MX_TIM4_Init+0xa8>)
 8014e08:	2200      	movs	r2, #0
 8014e0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8014e0c:	4b19      	ldr	r3, [pc, #100]	; (8014e74 <MX_TIM4_Init+0xa8>)
 8014e0e:	2200      	movs	r2, #0
 8014e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8014e12:	4818      	ldr	r0, [pc, #96]	; (8014e74 <MX_TIM4_Init+0xa8>)
 8014e14:	f006 f927 	bl	801b066 <HAL_TIM_PWM_Init>
 8014e18:	4603      	mov	r3, r0
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d001      	beq.n	8014e22 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8014e1e:	f7ff fb39 	bl	8014494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8014e22:	2300      	movs	r3, #0
 8014e24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8014e26:	2300      	movs	r3, #0
 8014e28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8014e2a:	f107 0320 	add.w	r3, r7, #32
 8014e2e:	4619      	mov	r1, r3
 8014e30:	4810      	ldr	r0, [pc, #64]	; (8014e74 <MX_TIM4_Init+0xa8>)
 8014e32:	f007 f965 	bl	801c100 <HAL_TIMEx_MasterConfigSynchronization>
 8014e36:	4603      	mov	r3, r0
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d001      	beq.n	8014e40 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8014e3c:	f7ff fb2a 	bl	8014494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8014e40:	2360      	movs	r3, #96	; 0x60
 8014e42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5;
 8014e44:	2305      	movs	r3, #5
 8014e46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8014e48:	2300      	movs	r3, #0
 8014e4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8014e50:	1d3b      	adds	r3, r7, #4
 8014e52:	2200      	movs	r2, #0
 8014e54:	4619      	mov	r1, r3
 8014e56:	4807      	ldr	r0, [pc, #28]	; (8014e74 <MX_TIM4_Init+0xa8>)
 8014e58:	f006 fb88 	bl	801b56c <HAL_TIM_PWM_ConfigChannel>
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d001      	beq.n	8014e66 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8014e62:	f7ff fb17 	bl	8014494 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8014e66:	4803      	ldr	r0, [pc, #12]	; (8014e74 <MX_TIM4_Init+0xa8>)
 8014e68:	f000 f93c 	bl	80150e4 <HAL_TIM_MspPostInit>

}
 8014e6c:	bf00      	nop
 8014e6e:	3728      	adds	r7, #40	; 0x28
 8014e70:	46bd      	mov	sp, r7
 8014e72:	bd80      	pop	{r7, pc}
 8014e74:	20010e88 	.word	0x20010e88
 8014e78:	40000800 	.word	0x40000800

08014e7c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b08e      	sub	sp, #56	; 0x38
 8014e80:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8014e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014e86:	2200      	movs	r2, #0
 8014e88:	601a      	str	r2, [r3, #0]
 8014e8a:	605a      	str	r2, [r3, #4]
 8014e8c:	609a      	str	r2, [r3, #8]
 8014e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8014e90:	f107 0320 	add.w	r3, r7, #32
 8014e94:	2200      	movs	r2, #0
 8014e96:	601a      	str	r2, [r3, #0]
 8014e98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8014e9a:	1d3b      	adds	r3, r7, #4
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	601a      	str	r2, [r3, #0]
 8014ea0:	605a      	str	r2, [r3, #4]
 8014ea2:	609a      	str	r2, [r3, #8]
 8014ea4:	60da      	str	r2, [r3, #12]
 8014ea6:	611a      	str	r2, [r3, #16]
 8014ea8:	615a      	str	r2, [r3, #20]
 8014eaa:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 8014eac:	4b32      	ldr	r3, [pc, #200]	; (8014f78 <MX_TIM5_Init+0xfc>)
 8014eae:	4a33      	ldr	r2, [pc, #204]	; (8014f7c <MX_TIM5_Init+0x100>)
 8014eb0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 5-1;
 8014eb2:	4b31      	ldr	r3, [pc, #196]	; (8014f78 <MX_TIM5_Init+0xfc>)
 8014eb4:	2204      	movs	r2, #4
 8014eb6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8014eb8:	4b2f      	ldr	r3, [pc, #188]	; (8014f78 <MX_TIM5_Init+0xfc>)
 8014eba:	2200      	movs	r2, #0
 8014ebc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 40000-1;
 8014ebe:	4b2e      	ldr	r3, [pc, #184]	; (8014f78 <MX_TIM5_Init+0xfc>)
 8014ec0:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8014ec4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8014ec6:	4b2c      	ldr	r3, [pc, #176]	; (8014f78 <MX_TIM5_Init+0xfc>)
 8014ec8:	2200      	movs	r2, #0
 8014eca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8014ecc:	4b2a      	ldr	r3, [pc, #168]	; (8014f78 <MX_TIM5_Init+0xfc>)
 8014ece:	2280      	movs	r2, #128	; 0x80
 8014ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8014ed2:	4829      	ldr	r0, [pc, #164]	; (8014f78 <MX_TIM5_Init+0xfc>)
 8014ed4:	f006 f878 	bl	801afc8 <HAL_TIM_Base_Init>
 8014ed8:	4603      	mov	r3, r0
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d001      	beq.n	8014ee2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8014ede:	f7ff fad9 	bl	8014494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8014ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8014ee8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014eec:	4619      	mov	r1, r3
 8014eee:	4822      	ldr	r0, [pc, #136]	; (8014f78 <MX_TIM5_Init+0xfc>)
 8014ef0:	f006 fc02 	bl	801b6f8 <HAL_TIM_ConfigClockSource>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d001      	beq.n	8014efe <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8014efa:	f7ff facb 	bl	8014494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8014efe:	481e      	ldr	r0, [pc, #120]	; (8014f78 <MX_TIM5_Init+0xfc>)
 8014f00:	f006 f8b1 	bl	801b066 <HAL_TIM_PWM_Init>
 8014f04:	4603      	mov	r3, r0
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d001      	beq.n	8014f0e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8014f0a:	f7ff fac3 	bl	8014494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8014f0e:	2300      	movs	r3, #0
 8014f10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8014f12:	2300      	movs	r3, #0
 8014f14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8014f16:	f107 0320 	add.w	r3, r7, #32
 8014f1a:	4619      	mov	r1, r3
 8014f1c:	4816      	ldr	r0, [pc, #88]	; (8014f78 <MX_TIM5_Init+0xfc>)
 8014f1e:	f007 f8ef 	bl	801c100 <HAL_TIMEx_MasterConfigSynchronization>
 8014f22:	4603      	mov	r3, r0
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d001      	beq.n	8014f2c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8014f28:	f7ff fab4 	bl	8014494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8014f2c:	2360      	movs	r3, #96	; 0x60
 8014f2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8014f30:	2300      	movs	r3, #0
 8014f32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8014f34:	2300      	movs	r3, #0
 8014f36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8014f38:	2304      	movs	r3, #4
 8014f3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8014f3c:	1d3b      	adds	r3, r7, #4
 8014f3e:	2200      	movs	r2, #0
 8014f40:	4619      	mov	r1, r3
 8014f42:	480d      	ldr	r0, [pc, #52]	; (8014f78 <MX_TIM5_Init+0xfc>)
 8014f44:	f006 fb12 	bl	801b56c <HAL_TIM_PWM_ConfigChannel>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d001      	beq.n	8014f52 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8014f4e:	f7ff faa1 	bl	8014494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8014f52:	1d3b      	adds	r3, r7, #4
 8014f54:	2204      	movs	r2, #4
 8014f56:	4619      	mov	r1, r3
 8014f58:	4807      	ldr	r0, [pc, #28]	; (8014f78 <MX_TIM5_Init+0xfc>)
 8014f5a:	f006 fb07 	bl	801b56c <HAL_TIM_PWM_ConfigChannel>
 8014f5e:	4603      	mov	r3, r0
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d001      	beq.n	8014f68 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8014f64:	f7ff fa96 	bl	8014494 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 8014f68:	4803      	ldr	r0, [pc, #12]	; (8014f78 <MX_TIM5_Init+0xfc>)
 8014f6a:	f000 f8bb 	bl	80150e4 <HAL_TIM_MspPostInit>

}
 8014f6e:	bf00      	nop
 8014f70:	3738      	adds	r7, #56	; 0x38
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bd80      	pop	{r7, pc}
 8014f76:	bf00      	nop
 8014f78:	20010ec8 	.word	0x20010ec8
 8014f7c:	40000c00 	.word	0x40000c00

08014f80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b08c      	sub	sp, #48	; 0x30
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014f88:	f107 031c 	add.w	r3, r7, #28
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	601a      	str	r2, [r3, #0]
 8014f90:	605a      	str	r2, [r3, #4]
 8014f92:	609a      	str	r2, [r3, #8]
 8014f94:	60da      	str	r2, [r3, #12]
 8014f96:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	4a3b      	ldr	r2, [pc, #236]	; (801508c <HAL_TIM_Base_MspInit+0x10c>)
 8014f9e:	4293      	cmp	r3, r2
 8014fa0:	d135      	bne.n	801500e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	61bb      	str	r3, [r7, #24]
 8014fa6:	4b3a      	ldr	r3, [pc, #232]	; (8015090 <HAL_TIM_Base_MspInit+0x110>)
 8014fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014faa:	4a39      	ldr	r2, [pc, #228]	; (8015090 <HAL_TIM_Base_MspInit+0x110>)
 8014fac:	f043 0301 	orr.w	r3, r3, #1
 8014fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8014fb2:	4b37      	ldr	r3, [pc, #220]	; (8015090 <HAL_TIM_Base_MspInit+0x110>)
 8014fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014fb6:	f003 0301 	and.w	r3, r3, #1
 8014fba:	61bb      	str	r3, [r7, #24]
 8014fbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	617b      	str	r3, [r7, #20]
 8014fc2:	4b33      	ldr	r3, [pc, #204]	; (8015090 <HAL_TIM_Base_MspInit+0x110>)
 8014fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fc6:	4a32      	ldr	r2, [pc, #200]	; (8015090 <HAL_TIM_Base_MspInit+0x110>)
 8014fc8:	f043 0301 	orr.w	r3, r3, #1
 8014fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8014fce:	4b30      	ldr	r3, [pc, #192]	; (8015090 <HAL_TIM_Base_MspInit+0x110>)
 8014fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fd2:	f003 0301 	and.w	r3, r3, #1
 8014fd6:	617b      	str	r3, [r7, #20]
 8014fd8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8014fda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014fe0:	2302      	movs	r3, #2
 8014fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014fe8:	2300      	movs	r3, #0
 8014fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8014fec:	2301      	movs	r3, #1
 8014fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014ff0:	f107 031c 	add.w	r3, r7, #28
 8014ff4:	4619      	mov	r1, r3
 8014ff6:	4827      	ldr	r0, [pc, #156]	; (8015094 <HAL_TIM_Base_MspInit+0x114>)
 8014ff8:	f000 ffce 	bl	8015f98 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	2100      	movs	r1, #0
 8015000:	2019      	movs	r0, #25
 8015002:	f000 fbf5 	bl	80157f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8015006:	2019      	movs	r0, #25
 8015008:	f000 fc0e 	bl	8015828 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 801500c:	e03a      	b.n	8015084 <HAL_TIM_Base_MspInit+0x104>
  else if(tim_baseHandle->Instance==TIM2)
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015016:	d10e      	bne.n	8015036 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8015018:	2300      	movs	r3, #0
 801501a:	613b      	str	r3, [r7, #16]
 801501c:	4b1c      	ldr	r3, [pc, #112]	; (8015090 <HAL_TIM_Base_MspInit+0x110>)
 801501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015020:	4a1b      	ldr	r2, [pc, #108]	; (8015090 <HAL_TIM_Base_MspInit+0x110>)
 8015022:	f043 0301 	orr.w	r3, r3, #1
 8015026:	6413      	str	r3, [r2, #64]	; 0x40
 8015028:	4b19      	ldr	r3, [pc, #100]	; (8015090 <HAL_TIM_Base_MspInit+0x110>)
 801502a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801502c:	f003 0301 	and.w	r3, r3, #1
 8015030:	613b      	str	r3, [r7, #16]
 8015032:	693b      	ldr	r3, [r7, #16]
}
 8015034:	e026      	b.n	8015084 <HAL_TIM_Base_MspInit+0x104>
  else if(tim_baseHandle->Instance==TIM3)
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	4a17      	ldr	r2, [pc, #92]	; (8015098 <HAL_TIM_Base_MspInit+0x118>)
 801503c:	4293      	cmp	r3, r2
 801503e:	d10e      	bne.n	801505e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8015040:	2300      	movs	r3, #0
 8015042:	60fb      	str	r3, [r7, #12]
 8015044:	4b12      	ldr	r3, [pc, #72]	; (8015090 <HAL_TIM_Base_MspInit+0x110>)
 8015046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015048:	4a11      	ldr	r2, [pc, #68]	; (8015090 <HAL_TIM_Base_MspInit+0x110>)
 801504a:	f043 0302 	orr.w	r3, r3, #2
 801504e:	6413      	str	r3, [r2, #64]	; 0x40
 8015050:	4b0f      	ldr	r3, [pc, #60]	; (8015090 <HAL_TIM_Base_MspInit+0x110>)
 8015052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015054:	f003 0302 	and.w	r3, r3, #2
 8015058:	60fb      	str	r3, [r7, #12]
 801505a:	68fb      	ldr	r3, [r7, #12]
}
 801505c:	e012      	b.n	8015084 <HAL_TIM_Base_MspInit+0x104>
  else if(tim_baseHandle->Instance==TIM5)
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	4a0e      	ldr	r2, [pc, #56]	; (801509c <HAL_TIM_Base_MspInit+0x11c>)
 8015064:	4293      	cmp	r3, r2
 8015066:	d10d      	bne.n	8015084 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8015068:	2300      	movs	r3, #0
 801506a:	60bb      	str	r3, [r7, #8]
 801506c:	4b08      	ldr	r3, [pc, #32]	; (8015090 <HAL_TIM_Base_MspInit+0x110>)
 801506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015070:	4a07      	ldr	r2, [pc, #28]	; (8015090 <HAL_TIM_Base_MspInit+0x110>)
 8015072:	f043 0308 	orr.w	r3, r3, #8
 8015076:	6413      	str	r3, [r2, #64]	; 0x40
 8015078:	4b05      	ldr	r3, [pc, #20]	; (8015090 <HAL_TIM_Base_MspInit+0x110>)
 801507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801507c:	f003 0308 	and.w	r3, r3, #8
 8015080:	60bb      	str	r3, [r7, #8]
 8015082:	68bb      	ldr	r3, [r7, #8]
}
 8015084:	bf00      	nop
 8015086:	3730      	adds	r7, #48	; 0x30
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}
 801508c:	40010000 	.word	0x40010000
 8015090:	40023800 	.word	0x40023800
 8015094:	40020000 	.word	0x40020000
 8015098:	40000400 	.word	0x40000400
 801509c:	40000c00 	.word	0x40000c00

080150a0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80150a0:	b480      	push	{r7}
 80150a2:	b085      	sub	sp, #20
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	4a0b      	ldr	r2, [pc, #44]	; (80150dc <HAL_TIM_PWM_MspInit+0x3c>)
 80150ae:	4293      	cmp	r3, r2
 80150b0:	d10d      	bne.n	80150ce <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80150b2:	2300      	movs	r3, #0
 80150b4:	60fb      	str	r3, [r7, #12]
 80150b6:	4b0a      	ldr	r3, [pc, #40]	; (80150e0 <HAL_TIM_PWM_MspInit+0x40>)
 80150b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150ba:	4a09      	ldr	r2, [pc, #36]	; (80150e0 <HAL_TIM_PWM_MspInit+0x40>)
 80150bc:	f043 0304 	orr.w	r3, r3, #4
 80150c0:	6413      	str	r3, [r2, #64]	; 0x40
 80150c2:	4b07      	ldr	r3, [pc, #28]	; (80150e0 <HAL_TIM_PWM_MspInit+0x40>)
 80150c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150c6:	f003 0304 	and.w	r3, r3, #4
 80150ca:	60fb      	str	r3, [r7, #12]
 80150cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80150ce:	bf00      	nop
 80150d0:	3714      	adds	r7, #20
 80150d2:	46bd      	mov	sp, r7
 80150d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d8:	4770      	bx	lr
 80150da:	bf00      	nop
 80150dc:	40000800 	.word	0x40000800
 80150e0:	40023800 	.word	0x40023800

080150e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b08c      	sub	sp, #48	; 0x30
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80150ec:	f107 031c 	add.w	r3, r7, #28
 80150f0:	2200      	movs	r2, #0
 80150f2:	601a      	str	r2, [r3, #0]
 80150f4:	605a      	str	r2, [r3, #4]
 80150f6:	609a      	str	r2, [r3, #8]
 80150f8:	60da      	str	r2, [r3, #12]
 80150fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	4a45      	ldr	r2, [pc, #276]	; (8015218 <HAL_TIM_MspPostInit+0x134>)
 8015102:	4293      	cmp	r3, r2
 8015104:	d13c      	bne.n	8015180 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015106:	2300      	movs	r3, #0
 8015108:	61bb      	str	r3, [r7, #24]
 801510a:	4b44      	ldr	r3, [pc, #272]	; (801521c <HAL_TIM_MspPostInit+0x138>)
 801510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801510e:	4a43      	ldr	r2, [pc, #268]	; (801521c <HAL_TIM_MspPostInit+0x138>)
 8015110:	f043 0301 	orr.w	r3, r3, #1
 8015114:	6313      	str	r3, [r2, #48]	; 0x30
 8015116:	4b41      	ldr	r3, [pc, #260]	; (801521c <HAL_TIM_MspPostInit+0x138>)
 8015118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801511a:	f003 0301 	and.w	r3, r3, #1
 801511e:	61bb      	str	r3, [r7, #24]
 8015120:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015122:	2300      	movs	r3, #0
 8015124:	617b      	str	r3, [r7, #20]
 8015126:	4b3d      	ldr	r3, [pc, #244]	; (801521c <HAL_TIM_MspPostInit+0x138>)
 8015128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801512a:	4a3c      	ldr	r2, [pc, #240]	; (801521c <HAL_TIM_MspPostInit+0x138>)
 801512c:	f043 0302 	orr.w	r3, r3, #2
 8015130:	6313      	str	r3, [r2, #48]	; 0x30
 8015132:	4b3a      	ldr	r3, [pc, #232]	; (801521c <HAL_TIM_MspPostInit+0x138>)
 8015134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015136:	f003 0302 	and.w	r3, r3, #2
 801513a:	617b      	str	r3, [r7, #20]
 801513c:	697b      	ldr	r3, [r7, #20]
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 801513e:	2380      	movs	r3, #128	; 0x80
 8015140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015142:	2302      	movs	r3, #2
 8015144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015146:	2300      	movs	r3, #0
 8015148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801514a:	2300      	movs	r3, #0
 801514c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801514e:	2302      	movs	r3, #2
 8015150:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015152:	f107 031c 	add.w	r3, r7, #28
 8015156:	4619      	mov	r1, r3
 8015158:	4831      	ldr	r0, [pc, #196]	; (8015220 <HAL_TIM_MspPostInit+0x13c>)
 801515a:	f000 ff1d 	bl	8015f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 801515e:	2313      	movs	r3, #19
 8015160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015162:	2302      	movs	r3, #2
 8015164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015166:	2300      	movs	r3, #0
 8015168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801516a:	2300      	movs	r3, #0
 801516c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801516e:	2302      	movs	r3, #2
 8015170:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015172:	f107 031c 	add.w	r3, r7, #28
 8015176:	4619      	mov	r1, r3
 8015178:	482a      	ldr	r0, [pc, #168]	; (8015224 <HAL_TIM_MspPostInit+0x140>)
 801517a:	f000 ff0d 	bl	8015f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 801517e:	e046      	b.n	801520e <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM4)
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	4a28      	ldr	r2, [pc, #160]	; (8015228 <HAL_TIM_MspPostInit+0x144>)
 8015186:	4293      	cmp	r3, r2
 8015188:	d11e      	bne.n	80151c8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801518a:	2300      	movs	r3, #0
 801518c:	613b      	str	r3, [r7, #16]
 801518e:	4b23      	ldr	r3, [pc, #140]	; (801521c <HAL_TIM_MspPostInit+0x138>)
 8015190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015192:	4a22      	ldr	r2, [pc, #136]	; (801521c <HAL_TIM_MspPostInit+0x138>)
 8015194:	f043 0302 	orr.w	r3, r3, #2
 8015198:	6313      	str	r3, [r2, #48]	; 0x30
 801519a:	4b20      	ldr	r3, [pc, #128]	; (801521c <HAL_TIM_MspPostInit+0x138>)
 801519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801519e:	f003 0302 	and.w	r3, r3, #2
 80151a2:	613b      	str	r3, [r7, #16]
 80151a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80151a6:	2340      	movs	r3, #64	; 0x40
 80151a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80151aa:	2302      	movs	r3, #2
 80151ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80151ae:	2300      	movs	r3, #0
 80151b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80151b2:	2300      	movs	r3, #0
 80151b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80151b6:	2302      	movs	r3, #2
 80151b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80151ba:	f107 031c 	add.w	r3, r7, #28
 80151be:	4619      	mov	r1, r3
 80151c0:	4818      	ldr	r0, [pc, #96]	; (8015224 <HAL_TIM_MspPostInit+0x140>)
 80151c2:	f000 fee9 	bl	8015f98 <HAL_GPIO_Init>
}
 80151c6:	e022      	b.n	801520e <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM5)
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	4a17      	ldr	r2, [pc, #92]	; (801522c <HAL_TIM_MspPostInit+0x148>)
 80151ce:	4293      	cmp	r3, r2
 80151d0:	d11d      	bne.n	801520e <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80151d2:	2300      	movs	r3, #0
 80151d4:	60fb      	str	r3, [r7, #12]
 80151d6:	4b11      	ldr	r3, [pc, #68]	; (801521c <HAL_TIM_MspPostInit+0x138>)
 80151d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151da:	4a10      	ldr	r2, [pc, #64]	; (801521c <HAL_TIM_MspPostInit+0x138>)
 80151dc:	f043 0301 	orr.w	r3, r3, #1
 80151e0:	6313      	str	r3, [r2, #48]	; 0x30
 80151e2:	4b0e      	ldr	r3, [pc, #56]	; (801521c <HAL_TIM_MspPostInit+0x138>)
 80151e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151e6:	f003 0301 	and.w	r3, r3, #1
 80151ea:	60fb      	str	r3, [r7, #12]
 80151ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80151ee:	2303      	movs	r3, #3
 80151f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80151f2:	2302      	movs	r3, #2
 80151f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80151f6:	2300      	movs	r3, #0
 80151f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80151fa:	2300      	movs	r3, #0
 80151fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80151fe:	2302      	movs	r3, #2
 8015200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015202:	f107 031c 	add.w	r3, r7, #28
 8015206:	4619      	mov	r1, r3
 8015208:	4805      	ldr	r0, [pc, #20]	; (8015220 <HAL_TIM_MspPostInit+0x13c>)
 801520a:	f000 fec5 	bl	8015f98 <HAL_GPIO_Init>
}
 801520e:	bf00      	nop
 8015210:	3730      	adds	r7, #48	; 0x30
 8015212:	46bd      	mov	sp, r7
 8015214:	bd80      	pop	{r7, pc}
 8015216:	bf00      	nop
 8015218:	40000400 	.word	0x40000400
 801521c:	40023800 	.word	0x40023800
 8015220:	40020000 	.word	0x40020000
 8015224:	40020400 	.word	0x40020400
 8015228:	40000800 	.word	0x40000800
 801522c:	40000c00 	.word	0x40000c00

08015230 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8015230:	b580      	push	{r7, lr}
 8015232:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8015234:	4b12      	ldr	r3, [pc, #72]	; (8015280 <MX_USART1_UART_Init+0x50>)
 8015236:	4a13      	ldr	r2, [pc, #76]	; (8015284 <MX_USART1_UART_Init+0x54>)
 8015238:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 801523a:	4b11      	ldr	r3, [pc, #68]	; (8015280 <MX_USART1_UART_Init+0x50>)
 801523c:	4a12      	ldr	r2, [pc, #72]	; (8015288 <MX_USART1_UART_Init+0x58>)
 801523e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8015240:	4b0f      	ldr	r3, [pc, #60]	; (8015280 <MX_USART1_UART_Init+0x50>)
 8015242:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015246:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8015248:	4b0d      	ldr	r3, [pc, #52]	; (8015280 <MX_USART1_UART_Init+0x50>)
 801524a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801524e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8015250:	4b0b      	ldr	r3, [pc, #44]	; (8015280 <MX_USART1_UART_Init+0x50>)
 8015252:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015256:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8015258:	4b09      	ldr	r3, [pc, #36]	; (8015280 <MX_USART1_UART_Init+0x50>)
 801525a:	220c      	movs	r2, #12
 801525c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801525e:	4b08      	ldr	r3, [pc, #32]	; (8015280 <MX_USART1_UART_Init+0x50>)
 8015260:	2200      	movs	r2, #0
 8015262:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8015264:	4b06      	ldr	r3, [pc, #24]	; (8015280 <MX_USART1_UART_Init+0x50>)
 8015266:	2200      	movs	r2, #0
 8015268:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801526a:	4805      	ldr	r0, [pc, #20]	; (8015280 <MX_USART1_UART_Init+0x50>)
 801526c:	f006 ffca 	bl	801c204 <HAL_UART_Init>
 8015270:	4603      	mov	r3, r0
 8015272:	2b00      	cmp	r3, #0
 8015274:	d001      	beq.n	801527a <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8015276:	f7ff f90d 	bl	8014494 <Error_Handler>
  }

}
 801527a:	bf00      	nop
 801527c:	bd80      	pop	{r7, pc}
 801527e:	bf00      	nop
 8015280:	20011088 	.word	0x20011088
 8015284:	40011000 	.word	0x40011000
 8015288:	000186a0 	.word	0x000186a0

0801528c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 801528c:	b580      	push	{r7, lr}
 801528e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8015290:	4b11      	ldr	r3, [pc, #68]	; (80152d8 <MX_USART2_UART_Init+0x4c>)
 8015292:	4a12      	ldr	r2, [pc, #72]	; (80152dc <MX_USART2_UART_Init+0x50>)
 8015294:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8015296:	4b10      	ldr	r3, [pc, #64]	; (80152d8 <MX_USART2_UART_Init+0x4c>)
 8015298:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 801529c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801529e:	4b0e      	ldr	r3, [pc, #56]	; (80152d8 <MX_USART2_UART_Init+0x4c>)
 80152a0:	2200      	movs	r2, #0
 80152a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80152a4:	4b0c      	ldr	r3, [pc, #48]	; (80152d8 <MX_USART2_UART_Init+0x4c>)
 80152a6:	2200      	movs	r2, #0
 80152a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80152aa:	4b0b      	ldr	r3, [pc, #44]	; (80152d8 <MX_USART2_UART_Init+0x4c>)
 80152ac:	2200      	movs	r2, #0
 80152ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80152b0:	4b09      	ldr	r3, [pc, #36]	; (80152d8 <MX_USART2_UART_Init+0x4c>)
 80152b2:	220c      	movs	r2, #12
 80152b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80152b6:	4b08      	ldr	r3, [pc, #32]	; (80152d8 <MX_USART2_UART_Init+0x4c>)
 80152b8:	2200      	movs	r2, #0
 80152ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80152bc:	4b06      	ldr	r3, [pc, #24]	; (80152d8 <MX_USART2_UART_Init+0x4c>)
 80152be:	2200      	movs	r2, #0
 80152c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80152c2:	4805      	ldr	r0, [pc, #20]	; (80152d8 <MX_USART2_UART_Init+0x4c>)
 80152c4:	f006 ff9e 	bl	801c204 <HAL_UART_Init>
 80152c8:	4603      	mov	r3, r0
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d001      	beq.n	80152d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80152ce:	f7ff f8e1 	bl	8014494 <Error_Handler>
  }

}
 80152d2:	bf00      	nop
 80152d4:	bd80      	pop	{r7, pc}
 80152d6:	bf00      	nop
 80152d8:	20011108 	.word	0x20011108
 80152dc:	40004400 	.word	0x40004400

080152e0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 80152e4:	4b11      	ldr	r3, [pc, #68]	; (801532c <MX_USART6_UART_Init+0x4c>)
 80152e6:	4a12      	ldr	r2, [pc, #72]	; (8015330 <MX_USART6_UART_Init+0x50>)
 80152e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 80152ea:	4b10      	ldr	r3, [pc, #64]	; (801532c <MX_USART6_UART_Init+0x4c>)
 80152ec:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80152f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80152f2:	4b0e      	ldr	r3, [pc, #56]	; (801532c <MX_USART6_UART_Init+0x4c>)
 80152f4:	2200      	movs	r2, #0
 80152f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80152f8:	4b0c      	ldr	r3, [pc, #48]	; (801532c <MX_USART6_UART_Init+0x4c>)
 80152fa:	2200      	movs	r2, #0
 80152fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80152fe:	4b0b      	ldr	r3, [pc, #44]	; (801532c <MX_USART6_UART_Init+0x4c>)
 8015300:	2200      	movs	r2, #0
 8015302:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8015304:	4b09      	ldr	r3, [pc, #36]	; (801532c <MX_USART6_UART_Init+0x4c>)
 8015306:	220c      	movs	r2, #12
 8015308:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801530a:	4b08      	ldr	r3, [pc, #32]	; (801532c <MX_USART6_UART_Init+0x4c>)
 801530c:	2200      	movs	r2, #0
 801530e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8015310:	4b06      	ldr	r3, [pc, #24]	; (801532c <MX_USART6_UART_Init+0x4c>)
 8015312:	2200      	movs	r2, #0
 8015314:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8015316:	4805      	ldr	r0, [pc, #20]	; (801532c <MX_USART6_UART_Init+0x4c>)
 8015318:	f006 ff74 	bl	801c204 <HAL_UART_Init>
 801531c:	4603      	mov	r3, r0
 801531e:	2b00      	cmp	r3, #0
 8015320:	d001      	beq.n	8015326 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8015322:	f7ff f8b7 	bl	8014494 <Error_Handler>
  }

}
 8015326:	bf00      	nop
 8015328:	bd80      	pop	{r7, pc}
 801532a:	bf00      	nop
 801532c:	200110c8 	.word	0x200110c8
 8015330:	40011400 	.word	0x40011400

08015334 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8015334:	b580      	push	{r7, lr}
 8015336:	b08e      	sub	sp, #56	; 0x38
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801533c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015340:	2200      	movs	r2, #0
 8015342:	601a      	str	r2, [r3, #0]
 8015344:	605a      	str	r2, [r3, #4]
 8015346:	609a      	str	r2, [r3, #8]
 8015348:	60da      	str	r2, [r3, #12]
 801534a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	4a7a      	ldr	r2, [pc, #488]	; (801553c <HAL_UART_MspInit+0x208>)
 8015352:	4293      	cmp	r3, r2
 8015354:	d15c      	bne.n	8015410 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8015356:	2300      	movs	r3, #0
 8015358:	623b      	str	r3, [r7, #32]
 801535a:	4b79      	ldr	r3, [pc, #484]	; (8015540 <HAL_UART_MspInit+0x20c>)
 801535c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801535e:	4a78      	ldr	r2, [pc, #480]	; (8015540 <HAL_UART_MspInit+0x20c>)
 8015360:	f043 0310 	orr.w	r3, r3, #16
 8015364:	6453      	str	r3, [r2, #68]	; 0x44
 8015366:	4b76      	ldr	r3, [pc, #472]	; (8015540 <HAL_UART_MspInit+0x20c>)
 8015368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801536a:	f003 0310 	and.w	r3, r3, #16
 801536e:	623b      	str	r3, [r7, #32]
 8015370:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015372:	2300      	movs	r3, #0
 8015374:	61fb      	str	r3, [r7, #28]
 8015376:	4b72      	ldr	r3, [pc, #456]	; (8015540 <HAL_UART_MspInit+0x20c>)
 8015378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801537a:	4a71      	ldr	r2, [pc, #452]	; (8015540 <HAL_UART_MspInit+0x20c>)
 801537c:	f043 0301 	orr.w	r3, r3, #1
 8015380:	6313      	str	r3, [r2, #48]	; 0x30
 8015382:	4b6f      	ldr	r3, [pc, #444]	; (8015540 <HAL_UART_MspInit+0x20c>)
 8015384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015386:	f003 0301 	and.w	r3, r3, #1
 801538a:	61fb      	str	r3, [r7, #28]
 801538c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 801538e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8015392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015394:	2302      	movs	r3, #2
 8015396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015398:	2301      	movs	r3, #1
 801539a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801539c:	2303      	movs	r3, #3
 801539e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80153a0:	2307      	movs	r3, #7
 80153a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80153a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80153a8:	4619      	mov	r1, r3
 80153aa:	4866      	ldr	r0, [pc, #408]	; (8015544 <HAL_UART_MspInit+0x210>)
 80153ac:	f000 fdf4 	bl	8015f98 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80153b0:	4b65      	ldr	r3, [pc, #404]	; (8015548 <HAL_UART_MspInit+0x214>)
 80153b2:	4a66      	ldr	r2, [pc, #408]	; (801554c <HAL_UART_MspInit+0x218>)
 80153b4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80153b6:	4b64      	ldr	r3, [pc, #400]	; (8015548 <HAL_UART_MspInit+0x214>)
 80153b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80153bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80153be:	4b62      	ldr	r3, [pc, #392]	; (8015548 <HAL_UART_MspInit+0x214>)
 80153c0:	2200      	movs	r2, #0
 80153c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80153c4:	4b60      	ldr	r3, [pc, #384]	; (8015548 <HAL_UART_MspInit+0x214>)
 80153c6:	2200      	movs	r2, #0
 80153c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80153ca:	4b5f      	ldr	r3, [pc, #380]	; (8015548 <HAL_UART_MspInit+0x214>)
 80153cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80153d0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80153d2:	4b5d      	ldr	r3, [pc, #372]	; (8015548 <HAL_UART_MspInit+0x214>)
 80153d4:	2200      	movs	r2, #0
 80153d6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80153d8:	4b5b      	ldr	r3, [pc, #364]	; (8015548 <HAL_UART_MspInit+0x214>)
 80153da:	2200      	movs	r2, #0
 80153dc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80153de:	4b5a      	ldr	r3, [pc, #360]	; (8015548 <HAL_UART_MspInit+0x214>)
 80153e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80153e4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80153e6:	4b58      	ldr	r3, [pc, #352]	; (8015548 <HAL_UART_MspInit+0x214>)
 80153e8:	2200      	movs	r2, #0
 80153ea:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80153ec:	4b56      	ldr	r3, [pc, #344]	; (8015548 <HAL_UART_MspInit+0x214>)
 80153ee:	2200      	movs	r2, #0
 80153f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80153f2:	4855      	ldr	r0, [pc, #340]	; (8015548 <HAL_UART_MspInit+0x214>)
 80153f4:	f000 fa26 	bl	8015844 <HAL_DMA_Init>
 80153f8:	4603      	mov	r3, r0
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d001      	beq.n	8015402 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80153fe:	f7ff f849 	bl	8014494 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	4a50      	ldr	r2, [pc, #320]	; (8015548 <HAL_UART_MspInit+0x214>)
 8015406:	635a      	str	r2, [r3, #52]	; 0x34
 8015408:	4a4f      	ldr	r2, [pc, #316]	; (8015548 <HAL_UART_MspInit+0x214>)
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 801540e:	e091      	b.n	8015534 <HAL_UART_MspInit+0x200>
  else if(uartHandle->Instance==USART2)
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	4a4e      	ldr	r2, [pc, #312]	; (8015550 <HAL_UART_MspInit+0x21c>)
 8015416:	4293      	cmp	r3, r2
 8015418:	d12c      	bne.n	8015474 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART2_CLK_ENABLE();
 801541a:	2300      	movs	r3, #0
 801541c:	61bb      	str	r3, [r7, #24]
 801541e:	4b48      	ldr	r3, [pc, #288]	; (8015540 <HAL_UART_MspInit+0x20c>)
 8015420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015422:	4a47      	ldr	r2, [pc, #284]	; (8015540 <HAL_UART_MspInit+0x20c>)
 8015424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015428:	6413      	str	r3, [r2, #64]	; 0x40
 801542a:	4b45      	ldr	r3, [pc, #276]	; (8015540 <HAL_UART_MspInit+0x20c>)
 801542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801542e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015432:	61bb      	str	r3, [r7, #24]
 8015434:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015436:	2300      	movs	r3, #0
 8015438:	617b      	str	r3, [r7, #20]
 801543a:	4b41      	ldr	r3, [pc, #260]	; (8015540 <HAL_UART_MspInit+0x20c>)
 801543c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801543e:	4a40      	ldr	r2, [pc, #256]	; (8015540 <HAL_UART_MspInit+0x20c>)
 8015440:	f043 0301 	orr.w	r3, r3, #1
 8015444:	6313      	str	r3, [r2, #48]	; 0x30
 8015446:	4b3e      	ldr	r3, [pc, #248]	; (8015540 <HAL_UART_MspInit+0x20c>)
 8015448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801544a:	f003 0301 	and.w	r3, r3, #1
 801544e:	617b      	str	r3, [r7, #20]
 8015450:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8015452:	230c      	movs	r3, #12
 8015454:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015456:	2302      	movs	r3, #2
 8015458:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801545a:	2300      	movs	r3, #0
 801545c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801545e:	2303      	movs	r3, #3
 8015460:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8015462:	2307      	movs	r3, #7
 8015464:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801546a:	4619      	mov	r1, r3
 801546c:	4835      	ldr	r0, [pc, #212]	; (8015544 <HAL_UART_MspInit+0x210>)
 801546e:	f000 fd93 	bl	8015f98 <HAL_GPIO_Init>
}
 8015472:	e05f      	b.n	8015534 <HAL_UART_MspInit+0x200>
  else if(uartHandle->Instance==USART6)
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	4a36      	ldr	r2, [pc, #216]	; (8015554 <HAL_UART_MspInit+0x220>)
 801547a:	4293      	cmp	r3, r2
 801547c:	d15a      	bne.n	8015534 <HAL_UART_MspInit+0x200>
    __HAL_RCC_USART6_CLK_ENABLE();
 801547e:	2300      	movs	r3, #0
 8015480:	613b      	str	r3, [r7, #16]
 8015482:	4b2f      	ldr	r3, [pc, #188]	; (8015540 <HAL_UART_MspInit+0x20c>)
 8015484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015486:	4a2e      	ldr	r2, [pc, #184]	; (8015540 <HAL_UART_MspInit+0x20c>)
 8015488:	f043 0320 	orr.w	r3, r3, #32
 801548c:	6453      	str	r3, [r2, #68]	; 0x44
 801548e:	4b2c      	ldr	r3, [pc, #176]	; (8015540 <HAL_UART_MspInit+0x20c>)
 8015490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015492:	f003 0320 	and.w	r3, r3, #32
 8015496:	613b      	str	r3, [r7, #16]
 8015498:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801549a:	2300      	movs	r3, #0
 801549c:	60fb      	str	r3, [r7, #12]
 801549e:	4b28      	ldr	r3, [pc, #160]	; (8015540 <HAL_UART_MspInit+0x20c>)
 80154a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154a2:	4a27      	ldr	r2, [pc, #156]	; (8015540 <HAL_UART_MspInit+0x20c>)
 80154a4:	f043 0304 	orr.w	r3, r3, #4
 80154a8:	6313      	str	r3, [r2, #48]	; 0x30
 80154aa:	4b25      	ldr	r3, [pc, #148]	; (8015540 <HAL_UART_MspInit+0x20c>)
 80154ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154ae:	f003 0304 	and.w	r3, r3, #4
 80154b2:	60fb      	str	r3, [r7, #12]
 80154b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80154b6:	23c0      	movs	r3, #192	; 0xc0
 80154b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80154ba:	2302      	movs	r3, #2
 80154bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80154be:	2300      	movs	r3, #0
 80154c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80154c2:	2303      	movs	r3, #3
 80154c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80154c6:	2308      	movs	r3, #8
 80154c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80154ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80154ce:	4619      	mov	r1, r3
 80154d0:	4821      	ldr	r0, [pc, #132]	; (8015558 <HAL_UART_MspInit+0x224>)
 80154d2:	f000 fd61 	bl	8015f98 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80154d6:	4b21      	ldr	r3, [pc, #132]	; (801555c <HAL_UART_MspInit+0x228>)
 80154d8:	4a21      	ldr	r2, [pc, #132]	; (8015560 <HAL_UART_MspInit+0x22c>)
 80154da:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80154dc:	4b1f      	ldr	r3, [pc, #124]	; (801555c <HAL_UART_MspInit+0x228>)
 80154de:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80154e2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80154e4:	4b1d      	ldr	r3, [pc, #116]	; (801555c <HAL_UART_MspInit+0x228>)
 80154e6:	2200      	movs	r2, #0
 80154e8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80154ea:	4b1c      	ldr	r3, [pc, #112]	; (801555c <HAL_UART_MspInit+0x228>)
 80154ec:	2200      	movs	r2, #0
 80154ee:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80154f0:	4b1a      	ldr	r3, [pc, #104]	; (801555c <HAL_UART_MspInit+0x228>)
 80154f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80154f6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80154f8:	4b18      	ldr	r3, [pc, #96]	; (801555c <HAL_UART_MspInit+0x228>)
 80154fa:	2200      	movs	r2, #0
 80154fc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80154fe:	4b17      	ldr	r3, [pc, #92]	; (801555c <HAL_UART_MspInit+0x228>)
 8015500:	2200      	movs	r2, #0
 8015502:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8015504:	4b15      	ldr	r3, [pc, #84]	; (801555c <HAL_UART_MspInit+0x228>)
 8015506:	f44f 7280 	mov.w	r2, #256	; 0x100
 801550a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 801550c:	4b13      	ldr	r3, [pc, #76]	; (801555c <HAL_UART_MspInit+0x228>)
 801550e:	2200      	movs	r2, #0
 8015510:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015512:	4b12      	ldr	r3, [pc, #72]	; (801555c <HAL_UART_MspInit+0x228>)
 8015514:	2200      	movs	r2, #0
 8015516:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8015518:	4810      	ldr	r0, [pc, #64]	; (801555c <HAL_UART_MspInit+0x228>)
 801551a:	f000 f993 	bl	8015844 <HAL_DMA_Init>
 801551e:	4603      	mov	r3, r0
 8015520:	2b00      	cmp	r3, #0
 8015522:	d001      	beq.n	8015528 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 8015524:	f7fe ffb6 	bl	8014494 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	4a0c      	ldr	r2, [pc, #48]	; (801555c <HAL_UART_MspInit+0x228>)
 801552c:	635a      	str	r2, [r3, #52]	; 0x34
 801552e:	4a0b      	ldr	r2, [pc, #44]	; (801555c <HAL_UART_MspInit+0x228>)
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	6393      	str	r3, [r2, #56]	; 0x38
}
 8015534:	bf00      	nop
 8015536:	3738      	adds	r7, #56	; 0x38
 8015538:	46bd      	mov	sp, r7
 801553a:	bd80      	pop	{r7, pc}
 801553c:	40011000 	.word	0x40011000
 8015540:	40023800 	.word	0x40023800
 8015544:	40020000 	.word	0x40020000
 8015548:	20011028 	.word	0x20011028
 801554c:	40026440 	.word	0x40026440
 8015550:	40004400 	.word	0x40004400
 8015554:	40011400 	.word	0x40011400
 8015558:	40020800 	.word	0x40020800
 801555c:	20010fc8 	.word	0x20010fc8
 8015560:	40026428 	.word	0x40026428

08015564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8015564:	f8df d034 	ldr.w	sp, [pc, #52]	; 801559c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8015568:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801556a:	e003      	b.n	8015574 <LoopCopyDataInit>

0801556c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801556c:	4b0c      	ldr	r3, [pc, #48]	; (80155a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801556e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8015570:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8015572:	3104      	adds	r1, #4

08015574 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8015574:	480b      	ldr	r0, [pc, #44]	; (80155a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8015576:	4b0c      	ldr	r3, [pc, #48]	; (80155a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8015578:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801557a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801557c:	d3f6      	bcc.n	801556c <CopyDataInit>
  ldr  r2, =_sbss
 801557e:	4a0b      	ldr	r2, [pc, #44]	; (80155ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8015580:	e002      	b.n	8015588 <LoopFillZerobss>

08015582 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8015582:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8015584:	f842 3b04 	str.w	r3, [r2], #4

08015588 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8015588:	4b09      	ldr	r3, [pc, #36]	; (80155b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801558a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801558c:	d3f9      	bcc.n	8015582 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801558e:	f7ff faa1 	bl	8014ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8015592:	f013 fcf5 	bl	8028f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8015596:	f7fe fe6f 	bl	8014278 <main>
  bx  lr    
 801559a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 801559c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80155a0:	0802f190 	.word	0x0802f190
  ldr  r0, =_sdata
 80155a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80155a8:	2000087c 	.word	0x2000087c
  ldr  r2, =_sbss
 80155ac:	20000880 	.word	0x20000880
  ldr  r3, = _ebss
 80155b0:	20013204 	.word	0x20013204

080155b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80155b4:	e7fe      	b.n	80155b4 <ADC_IRQHandler>
	...

080155b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80155bc:	4b0e      	ldr	r3, [pc, #56]	; (80155f8 <HAL_Init+0x40>)
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	4a0d      	ldr	r2, [pc, #52]	; (80155f8 <HAL_Init+0x40>)
 80155c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80155c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80155c8:	4b0b      	ldr	r3, [pc, #44]	; (80155f8 <HAL_Init+0x40>)
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	4a0a      	ldr	r2, [pc, #40]	; (80155f8 <HAL_Init+0x40>)
 80155ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80155d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80155d4:	4b08      	ldr	r3, [pc, #32]	; (80155f8 <HAL_Init+0x40>)
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	4a07      	ldr	r2, [pc, #28]	; (80155f8 <HAL_Init+0x40>)
 80155da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80155de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80155e0:	2003      	movs	r0, #3
 80155e2:	f000 f8fa 	bl	80157da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80155e6:	2000      	movs	r0, #0
 80155e8:	f7ff f8ae 	bl	8014748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80155ec:	f7ff f884 	bl	80146f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80155f0:	2300      	movs	r3, #0
}
 80155f2:	4618      	mov	r0, r3
 80155f4:	bd80      	pop	{r7, pc}
 80155f6:	bf00      	nop
 80155f8:	40023c00 	.word	0x40023c00

080155fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80155fc:	b480      	push	{r7}
 80155fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8015600:	4b06      	ldr	r3, [pc, #24]	; (801561c <HAL_IncTick+0x20>)
 8015602:	781b      	ldrb	r3, [r3, #0]
 8015604:	461a      	mov	r2, r3
 8015606:	4b06      	ldr	r3, [pc, #24]	; (8015620 <HAL_IncTick+0x24>)
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	4413      	add	r3, r2
 801560c:	4a04      	ldr	r2, [pc, #16]	; (8015620 <HAL_IncTick+0x24>)
 801560e:	6013      	str	r3, [r2, #0]
}
 8015610:	bf00      	nop
 8015612:	46bd      	mov	sp, r7
 8015614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015618:	4770      	bx	lr
 801561a:	bf00      	nop
 801561c:	200006a0 	.word	0x200006a0
 8015620:	20011148 	.word	0x20011148

08015624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015624:	b480      	push	{r7}
 8015626:	af00      	add	r7, sp, #0
  return uwTick;
 8015628:	4b03      	ldr	r3, [pc, #12]	; (8015638 <HAL_GetTick+0x14>)
 801562a:	681b      	ldr	r3, [r3, #0]
}
 801562c:	4618      	mov	r0, r3
 801562e:	46bd      	mov	sp, r7
 8015630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015634:	4770      	bx	lr
 8015636:	bf00      	nop
 8015638:	20011148 	.word	0x20011148

0801563c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801563c:	b580      	push	{r7, lr}
 801563e:	b084      	sub	sp, #16
 8015640:	af00      	add	r7, sp, #0
 8015642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8015644:	f7ff ffee 	bl	8015624 <HAL_GetTick>
 8015648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015654:	d005      	beq.n	8015662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8015656:	4b09      	ldr	r3, [pc, #36]	; (801567c <HAL_Delay+0x40>)
 8015658:	781b      	ldrb	r3, [r3, #0]
 801565a:	461a      	mov	r2, r3
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	4413      	add	r3, r2
 8015660:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8015662:	bf00      	nop
 8015664:	f7ff ffde 	bl	8015624 <HAL_GetTick>
 8015668:	4602      	mov	r2, r0
 801566a:	68bb      	ldr	r3, [r7, #8]
 801566c:	1ad3      	subs	r3, r2, r3
 801566e:	68fa      	ldr	r2, [r7, #12]
 8015670:	429a      	cmp	r2, r3
 8015672:	d8f7      	bhi.n	8015664 <HAL_Delay+0x28>
  {
  }
}
 8015674:	bf00      	nop
 8015676:	3710      	adds	r7, #16
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}
 801567c:	200006a0 	.word	0x200006a0

08015680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015680:	b480      	push	{r7}
 8015682:	b085      	sub	sp, #20
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	f003 0307 	and.w	r3, r3, #7
 801568e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015690:	4b0c      	ldr	r3, [pc, #48]	; (80156c4 <__NVIC_SetPriorityGrouping+0x44>)
 8015692:	68db      	ldr	r3, [r3, #12]
 8015694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8015696:	68ba      	ldr	r2, [r7, #8]
 8015698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801569c:	4013      	ands	r3, r2
 801569e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80156a4:	68bb      	ldr	r3, [r7, #8]
 80156a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80156a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80156ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80156b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80156b2:	4a04      	ldr	r2, [pc, #16]	; (80156c4 <__NVIC_SetPriorityGrouping+0x44>)
 80156b4:	68bb      	ldr	r3, [r7, #8]
 80156b6:	60d3      	str	r3, [r2, #12]
}
 80156b8:	bf00      	nop
 80156ba:	3714      	adds	r7, #20
 80156bc:	46bd      	mov	sp, r7
 80156be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c2:	4770      	bx	lr
 80156c4:	e000ed00 	.word	0xe000ed00

080156c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80156c8:	b480      	push	{r7}
 80156ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80156cc:	4b04      	ldr	r3, [pc, #16]	; (80156e0 <__NVIC_GetPriorityGrouping+0x18>)
 80156ce:	68db      	ldr	r3, [r3, #12]
 80156d0:	0a1b      	lsrs	r3, r3, #8
 80156d2:	f003 0307 	and.w	r3, r3, #7
}
 80156d6:	4618      	mov	r0, r3
 80156d8:	46bd      	mov	sp, r7
 80156da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156de:	4770      	bx	lr
 80156e0:	e000ed00 	.word	0xe000ed00

080156e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80156e4:	b480      	push	{r7}
 80156e6:	b083      	sub	sp, #12
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	4603      	mov	r3, r0
 80156ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80156ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	db0b      	blt.n	801570e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80156f6:	79fb      	ldrb	r3, [r7, #7]
 80156f8:	f003 021f 	and.w	r2, r3, #31
 80156fc:	4907      	ldr	r1, [pc, #28]	; (801571c <__NVIC_EnableIRQ+0x38>)
 80156fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015702:	095b      	lsrs	r3, r3, #5
 8015704:	2001      	movs	r0, #1
 8015706:	fa00 f202 	lsl.w	r2, r0, r2
 801570a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801570e:	bf00      	nop
 8015710:	370c      	adds	r7, #12
 8015712:	46bd      	mov	sp, r7
 8015714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015718:	4770      	bx	lr
 801571a:	bf00      	nop
 801571c:	e000e100 	.word	0xe000e100

08015720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8015720:	b480      	push	{r7}
 8015722:	b083      	sub	sp, #12
 8015724:	af00      	add	r7, sp, #0
 8015726:	4603      	mov	r3, r0
 8015728:	6039      	str	r1, [r7, #0]
 801572a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801572c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015730:	2b00      	cmp	r3, #0
 8015732:	db0a      	blt.n	801574a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015734:	683b      	ldr	r3, [r7, #0]
 8015736:	b2da      	uxtb	r2, r3
 8015738:	490c      	ldr	r1, [pc, #48]	; (801576c <__NVIC_SetPriority+0x4c>)
 801573a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801573e:	0112      	lsls	r2, r2, #4
 8015740:	b2d2      	uxtb	r2, r2
 8015742:	440b      	add	r3, r1
 8015744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8015748:	e00a      	b.n	8015760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801574a:	683b      	ldr	r3, [r7, #0]
 801574c:	b2da      	uxtb	r2, r3
 801574e:	4908      	ldr	r1, [pc, #32]	; (8015770 <__NVIC_SetPriority+0x50>)
 8015750:	79fb      	ldrb	r3, [r7, #7]
 8015752:	f003 030f 	and.w	r3, r3, #15
 8015756:	3b04      	subs	r3, #4
 8015758:	0112      	lsls	r2, r2, #4
 801575a:	b2d2      	uxtb	r2, r2
 801575c:	440b      	add	r3, r1
 801575e:	761a      	strb	r2, [r3, #24]
}
 8015760:	bf00      	nop
 8015762:	370c      	adds	r7, #12
 8015764:	46bd      	mov	sp, r7
 8015766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576a:	4770      	bx	lr
 801576c:	e000e100 	.word	0xe000e100
 8015770:	e000ed00 	.word	0xe000ed00

08015774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015774:	b480      	push	{r7}
 8015776:	b089      	sub	sp, #36	; 0x24
 8015778:	af00      	add	r7, sp, #0
 801577a:	60f8      	str	r0, [r7, #12]
 801577c:	60b9      	str	r1, [r7, #8]
 801577e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	f003 0307 	and.w	r3, r3, #7
 8015786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8015788:	69fb      	ldr	r3, [r7, #28]
 801578a:	f1c3 0307 	rsb	r3, r3, #7
 801578e:	2b04      	cmp	r3, #4
 8015790:	bf28      	it	cs
 8015792:	2304      	movcs	r3, #4
 8015794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8015796:	69fb      	ldr	r3, [r7, #28]
 8015798:	3304      	adds	r3, #4
 801579a:	2b06      	cmp	r3, #6
 801579c:	d902      	bls.n	80157a4 <NVIC_EncodePriority+0x30>
 801579e:	69fb      	ldr	r3, [r7, #28]
 80157a0:	3b03      	subs	r3, #3
 80157a2:	e000      	b.n	80157a6 <NVIC_EncodePriority+0x32>
 80157a4:	2300      	movs	r3, #0
 80157a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80157a8:	f04f 32ff 	mov.w	r2, #4294967295
 80157ac:	69bb      	ldr	r3, [r7, #24]
 80157ae:	fa02 f303 	lsl.w	r3, r2, r3
 80157b2:	43da      	mvns	r2, r3
 80157b4:	68bb      	ldr	r3, [r7, #8]
 80157b6:	401a      	ands	r2, r3
 80157b8:	697b      	ldr	r3, [r7, #20]
 80157ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80157bc:	f04f 31ff 	mov.w	r1, #4294967295
 80157c0:	697b      	ldr	r3, [r7, #20]
 80157c2:	fa01 f303 	lsl.w	r3, r1, r3
 80157c6:	43d9      	mvns	r1, r3
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80157cc:	4313      	orrs	r3, r2
         );
}
 80157ce:	4618      	mov	r0, r3
 80157d0:	3724      	adds	r7, #36	; 0x24
 80157d2:	46bd      	mov	sp, r7
 80157d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d8:	4770      	bx	lr

080157da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80157da:	b580      	push	{r7, lr}
 80157dc:	b082      	sub	sp, #8
 80157de:	af00      	add	r7, sp, #0
 80157e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	f7ff ff4c 	bl	8015680 <__NVIC_SetPriorityGrouping>
}
 80157e8:	bf00      	nop
 80157ea:	3708      	adds	r7, #8
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd80      	pop	{r7, pc}

080157f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b086      	sub	sp, #24
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	4603      	mov	r3, r0
 80157f8:	60b9      	str	r1, [r7, #8]
 80157fa:	607a      	str	r2, [r7, #4]
 80157fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80157fe:	2300      	movs	r3, #0
 8015800:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8015802:	f7ff ff61 	bl	80156c8 <__NVIC_GetPriorityGrouping>
 8015806:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015808:	687a      	ldr	r2, [r7, #4]
 801580a:	68b9      	ldr	r1, [r7, #8]
 801580c:	6978      	ldr	r0, [r7, #20]
 801580e:	f7ff ffb1 	bl	8015774 <NVIC_EncodePriority>
 8015812:	4602      	mov	r2, r0
 8015814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015818:	4611      	mov	r1, r2
 801581a:	4618      	mov	r0, r3
 801581c:	f7ff ff80 	bl	8015720 <__NVIC_SetPriority>
}
 8015820:	bf00      	nop
 8015822:	3718      	adds	r7, #24
 8015824:	46bd      	mov	sp, r7
 8015826:	bd80      	pop	{r7, pc}

08015828 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b082      	sub	sp, #8
 801582c:	af00      	add	r7, sp, #0
 801582e:	4603      	mov	r3, r0
 8015830:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015836:	4618      	mov	r0, r3
 8015838:	f7ff ff54 	bl	80156e4 <__NVIC_EnableIRQ>
}
 801583c:	bf00      	nop
 801583e:	3708      	adds	r7, #8
 8015840:	46bd      	mov	sp, r7
 8015842:	bd80      	pop	{r7, pc}

08015844 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b086      	sub	sp, #24
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801584c:	2300      	movs	r3, #0
 801584e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8015850:	f7ff fee8 	bl	8015624 <HAL_GetTick>
 8015854:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d101      	bne.n	8015860 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801585c:	2301      	movs	r3, #1
 801585e:	e099      	b.n	8015994 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	2200      	movs	r2, #0
 8015864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	2202      	movs	r2, #2
 801586c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	681a      	ldr	r2, [r3, #0]
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	f022 0201 	bic.w	r2, r2, #1
 801587e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015880:	e00f      	b.n	80158a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8015882:	f7ff fecf 	bl	8015624 <HAL_GetTick>
 8015886:	4602      	mov	r2, r0
 8015888:	693b      	ldr	r3, [r7, #16]
 801588a:	1ad3      	subs	r3, r2, r3
 801588c:	2b05      	cmp	r3, #5
 801588e:	d908      	bls.n	80158a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	2220      	movs	r2, #32
 8015894:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	2203      	movs	r2, #3
 801589a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801589e:	2303      	movs	r3, #3
 80158a0:	e078      	b.n	8015994 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	f003 0301 	and.w	r3, r3, #1
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d1e8      	bne.n	8015882 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80158b8:	697a      	ldr	r2, [r7, #20]
 80158ba:	4b38      	ldr	r3, [pc, #224]	; (801599c <HAL_DMA_Init+0x158>)
 80158bc:	4013      	ands	r3, r2
 80158be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	685a      	ldr	r2, [r3, #4]
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	689b      	ldr	r3, [r3, #8]
 80158c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80158ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	691b      	ldr	r3, [r3, #16]
 80158d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80158da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	699b      	ldr	r3, [r3, #24]
 80158e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80158e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	6a1b      	ldr	r3, [r3, #32]
 80158ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80158ee:	697a      	ldr	r2, [r7, #20]
 80158f0:	4313      	orrs	r3, r2
 80158f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158f8:	2b04      	cmp	r3, #4
 80158fa:	d107      	bne.n	801590c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015904:	4313      	orrs	r3, r2
 8015906:	697a      	ldr	r2, [r7, #20]
 8015908:	4313      	orrs	r3, r2
 801590a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	697a      	ldr	r2, [r7, #20]
 8015912:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	695b      	ldr	r3, [r3, #20]
 801591a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801591c:	697b      	ldr	r3, [r7, #20]
 801591e:	f023 0307 	bic.w	r3, r3, #7
 8015922:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015928:	697a      	ldr	r2, [r7, #20]
 801592a:	4313      	orrs	r3, r2
 801592c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015932:	2b04      	cmp	r3, #4
 8015934:	d117      	bne.n	8015966 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801593a:	697a      	ldr	r2, [r7, #20]
 801593c:	4313      	orrs	r3, r2
 801593e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015944:	2b00      	cmp	r3, #0
 8015946:	d00e      	beq.n	8015966 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8015948:	6878      	ldr	r0, [r7, #4]
 801594a:	f000 faab 	bl	8015ea4 <DMA_CheckFifoParam>
 801594e:	4603      	mov	r3, r0
 8015950:	2b00      	cmp	r3, #0
 8015952:	d008      	beq.n	8015966 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	2240      	movs	r2, #64	; 0x40
 8015958:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	2201      	movs	r2, #1
 801595e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8015962:	2301      	movs	r3, #1
 8015964:	e016      	b.n	8015994 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	697a      	ldr	r2, [r7, #20]
 801596c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801596e:	6878      	ldr	r0, [r7, #4]
 8015970:	f000 fa62 	bl	8015e38 <DMA_CalcBaseAndBitshift>
 8015974:	4603      	mov	r3, r0
 8015976:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801597c:	223f      	movs	r2, #63	; 0x3f
 801597e:	409a      	lsls	r2, r3
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	2200      	movs	r2, #0
 8015988:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	2201      	movs	r2, #1
 801598e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8015992:	2300      	movs	r3, #0
}
 8015994:	4618      	mov	r0, r3
 8015996:	3718      	adds	r7, #24
 8015998:	46bd      	mov	sp, r7
 801599a:	bd80      	pop	{r7, pc}
 801599c:	f010803f 	.word	0xf010803f

080159a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b086      	sub	sp, #24
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	60f8      	str	r0, [r7, #12]
 80159a8:	60b9      	str	r1, [r7, #8]
 80159aa:	607a      	str	r2, [r7, #4]
 80159ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80159ae:	2300      	movs	r3, #0
 80159b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80159b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80159be:	2b01      	cmp	r3, #1
 80159c0:	d101      	bne.n	80159c6 <HAL_DMA_Start_IT+0x26>
 80159c2:	2302      	movs	r3, #2
 80159c4:	e040      	b.n	8015a48 <HAL_DMA_Start_IT+0xa8>
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	2201      	movs	r2, #1
 80159ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80159d4:	b2db      	uxtb	r3, r3
 80159d6:	2b01      	cmp	r3, #1
 80159d8:	d12f      	bne.n	8015a3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	2202      	movs	r2, #2
 80159de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	2200      	movs	r2, #0
 80159e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80159e8:	683b      	ldr	r3, [r7, #0]
 80159ea:	687a      	ldr	r2, [r7, #4]
 80159ec:	68b9      	ldr	r1, [r7, #8]
 80159ee:	68f8      	ldr	r0, [r7, #12]
 80159f0:	f000 f9f4 	bl	8015ddc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80159f8:	223f      	movs	r2, #63	; 0x3f
 80159fa:	409a      	lsls	r2, r3
 80159fc:	693b      	ldr	r3, [r7, #16]
 80159fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	681a      	ldr	r2, [r3, #0]
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	f042 0216 	orr.w	r2, r2, #22
 8015a0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d007      	beq.n	8015a28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	681a      	ldr	r2, [r3, #0]
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	f042 0208 	orr.w	r2, r2, #8
 8015a26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	681a      	ldr	r2, [r3, #0]
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	f042 0201 	orr.w	r2, r2, #1
 8015a36:	601a      	str	r2, [r3, #0]
 8015a38:	e005      	b.n	8015a46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	2200      	movs	r2, #0
 8015a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8015a42:	2302      	movs	r3, #2
 8015a44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8015a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8015a48:	4618      	mov	r0, r3
 8015a4a:	3718      	adds	r7, #24
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	bd80      	pop	{r7, pc}

08015a50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8015a50:	b480      	push	{r7}
 8015a52:	b083      	sub	sp, #12
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015a5e:	b2db      	uxtb	r3, r3
 8015a60:	2b02      	cmp	r3, #2
 8015a62:	d004      	beq.n	8015a6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	2280      	movs	r2, #128	; 0x80
 8015a68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8015a6a:	2301      	movs	r3, #1
 8015a6c:	e00c      	b.n	8015a88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	2205      	movs	r2, #5
 8015a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	681a      	ldr	r2, [r3, #0]
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	f022 0201 	bic.w	r2, r2, #1
 8015a84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8015a86:	2300      	movs	r3, #0
}
 8015a88:	4618      	mov	r0, r3
 8015a8a:	370c      	adds	r7, #12
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a92:	4770      	bx	lr

08015a94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b086      	sub	sp, #24
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8015aa0:	4b92      	ldr	r3, [pc, #584]	; (8015cec <HAL_DMA_IRQHandler+0x258>)
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	4a92      	ldr	r2, [pc, #584]	; (8015cf0 <HAL_DMA_IRQHandler+0x25c>)
 8015aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8015aaa:	0a9b      	lsrs	r3, r3, #10
 8015aac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015ab2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8015ab4:	693b      	ldr	r3, [r7, #16]
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015abe:	2208      	movs	r2, #8
 8015ac0:	409a      	lsls	r2, r3
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	4013      	ands	r3, r2
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d01a      	beq.n	8015b00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	f003 0304 	and.w	r3, r3, #4
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d013      	beq.n	8015b00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	681a      	ldr	r2, [r3, #0]
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	f022 0204 	bic.w	r2, r2, #4
 8015ae6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015aec:	2208      	movs	r2, #8
 8015aee:	409a      	lsls	r2, r3
 8015af0:	693b      	ldr	r3, [r7, #16]
 8015af2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015af8:	f043 0201 	orr.w	r2, r3, #1
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015b04:	2201      	movs	r2, #1
 8015b06:	409a      	lsls	r2, r3
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	4013      	ands	r3, r2
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d012      	beq.n	8015b36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	695b      	ldr	r3, [r3, #20]
 8015b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d00b      	beq.n	8015b36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015b22:	2201      	movs	r2, #1
 8015b24:	409a      	lsls	r2, r3
 8015b26:	693b      	ldr	r3, [r7, #16]
 8015b28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015b2e:	f043 0202 	orr.w	r2, r3, #2
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015b3a:	2204      	movs	r2, #4
 8015b3c:	409a      	lsls	r2, r3
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	4013      	ands	r3, r2
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d012      	beq.n	8015b6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	f003 0302 	and.w	r3, r3, #2
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d00b      	beq.n	8015b6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015b58:	2204      	movs	r2, #4
 8015b5a:	409a      	lsls	r2, r3
 8015b5c:	693b      	ldr	r3, [r7, #16]
 8015b5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015b64:	f043 0204 	orr.w	r2, r3, #4
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015b70:	2210      	movs	r2, #16
 8015b72:	409a      	lsls	r2, r3
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	4013      	ands	r3, r2
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d043      	beq.n	8015c04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	f003 0308 	and.w	r3, r3, #8
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d03c      	beq.n	8015c04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015b8e:	2210      	movs	r2, #16
 8015b90:	409a      	lsls	r2, r3
 8015b92:	693b      	ldr	r3, [r7, #16]
 8015b94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d018      	beq.n	8015bd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d108      	bne.n	8015bc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d024      	beq.n	8015c04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015bbe:	6878      	ldr	r0, [r7, #4]
 8015bc0:	4798      	blx	r3
 8015bc2:	e01f      	b.n	8015c04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d01b      	beq.n	8015c04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015bd0:	6878      	ldr	r0, [r7, #4]
 8015bd2:	4798      	blx	r3
 8015bd4:	e016      	b.n	8015c04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d107      	bne.n	8015bf4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	681a      	ldr	r2, [r3, #0]
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	f022 0208 	bic.w	r2, r2, #8
 8015bf2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d003      	beq.n	8015c04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c00:	6878      	ldr	r0, [r7, #4]
 8015c02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015c08:	2220      	movs	r2, #32
 8015c0a:	409a      	lsls	r2, r3
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	4013      	ands	r3, r2
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	f000 808e 	beq.w	8015d32 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	f003 0310 	and.w	r3, r3, #16
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	f000 8086 	beq.w	8015d32 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015c2a:	2220      	movs	r2, #32
 8015c2c:	409a      	lsls	r2, r3
 8015c2e:	693b      	ldr	r3, [r7, #16]
 8015c30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015c38:	b2db      	uxtb	r3, r3
 8015c3a:	2b05      	cmp	r3, #5
 8015c3c:	d136      	bne.n	8015cac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	681a      	ldr	r2, [r3, #0]
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	f022 0216 	bic.w	r2, r2, #22
 8015c4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	695a      	ldr	r2, [r3, #20]
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015c5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d103      	bne.n	8015c6e <HAL_DMA_IRQHandler+0x1da>
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d007      	beq.n	8015c7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	681a      	ldr	r2, [r3, #0]
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	f022 0208 	bic.w	r2, r2, #8
 8015c7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015c82:	223f      	movs	r2, #63	; 0x3f
 8015c84:	409a      	lsls	r2, r3
 8015c86:	693b      	ldr	r3, [r7, #16]
 8015c88:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	2200      	movs	r2, #0
 8015c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	2201      	movs	r2, #1
 8015c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d07d      	beq.n	8015d9e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015ca6:	6878      	ldr	r0, [r7, #4]
 8015ca8:	4798      	blx	r3
        }
        return;
 8015caa:	e078      	b.n	8015d9e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d01c      	beq.n	8015cf4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d108      	bne.n	8015cda <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d030      	beq.n	8015d32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015cd4:	6878      	ldr	r0, [r7, #4]
 8015cd6:	4798      	blx	r3
 8015cd8:	e02b      	b.n	8015d32 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d027      	beq.n	8015d32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ce6:	6878      	ldr	r0, [r7, #4]
 8015ce8:	4798      	blx	r3
 8015cea:	e022      	b.n	8015d32 <HAL_DMA_IRQHandler+0x29e>
 8015cec:	20000698 	.word	0x20000698
 8015cf0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d10f      	bne.n	8015d22 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	681a      	ldr	r2, [r3, #0]
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	f022 0210 	bic.w	r2, r2, #16
 8015d10:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	2200      	movs	r2, #0
 8015d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	2201      	movs	r2, #1
 8015d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d003      	beq.n	8015d32 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d2e:	6878      	ldr	r0, [r7, #4]
 8015d30:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d032      	beq.n	8015da0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015d3e:	f003 0301 	and.w	r3, r3, #1
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d022      	beq.n	8015d8c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	2205      	movs	r2, #5
 8015d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	681a      	ldr	r2, [r3, #0]
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	f022 0201 	bic.w	r2, r2, #1
 8015d5c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8015d5e:	68bb      	ldr	r3, [r7, #8]
 8015d60:	3301      	adds	r3, #1
 8015d62:	60bb      	str	r3, [r7, #8]
 8015d64:	697a      	ldr	r2, [r7, #20]
 8015d66:	429a      	cmp	r2, r3
 8015d68:	d307      	bcc.n	8015d7a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	f003 0301 	and.w	r3, r3, #1
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d1f2      	bne.n	8015d5e <HAL_DMA_IRQHandler+0x2ca>
 8015d78:	e000      	b.n	8015d7c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8015d7a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	2200      	movs	r2, #0
 8015d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	2201      	movs	r2, #1
 8015d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d005      	beq.n	8015da0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015d98:	6878      	ldr	r0, [r7, #4]
 8015d9a:	4798      	blx	r3
 8015d9c:	e000      	b.n	8015da0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8015d9e:	bf00      	nop
    }
  }
}
 8015da0:	3718      	adds	r7, #24
 8015da2:	46bd      	mov	sp, r7
 8015da4:	bd80      	pop	{r7, pc}
 8015da6:	bf00      	nop

08015da8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8015da8:	b480      	push	{r7}
 8015daa:	b083      	sub	sp, #12
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015db6:	b2db      	uxtb	r3, r3
}
 8015db8:	4618      	mov	r0, r3
 8015dba:	370c      	adds	r7, #12
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc2:	4770      	bx	lr

08015dc4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8015dc4:	b480      	push	{r7}
 8015dc6:	b083      	sub	sp, #12
 8015dc8:	af00      	add	r7, sp, #0
 8015dca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	370c      	adds	r7, #12
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dda:	4770      	bx	lr

08015ddc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015ddc:	b480      	push	{r7}
 8015dde:	b085      	sub	sp, #20
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	60f8      	str	r0, [r7, #12]
 8015de4:	60b9      	str	r1, [r7, #8]
 8015de6:	607a      	str	r2, [r7, #4]
 8015de8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	681a      	ldr	r2, [r3, #0]
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8015df8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	683a      	ldr	r2, [r7, #0]
 8015e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	689b      	ldr	r3, [r3, #8]
 8015e06:	2b40      	cmp	r3, #64	; 0x40
 8015e08:	d108      	bne.n	8015e1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	687a      	ldr	r2, [r7, #4]
 8015e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	68ba      	ldr	r2, [r7, #8]
 8015e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8015e1a:	e007      	b.n	8015e2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	68ba      	ldr	r2, [r7, #8]
 8015e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	687a      	ldr	r2, [r7, #4]
 8015e2a:	60da      	str	r2, [r3, #12]
}
 8015e2c:	bf00      	nop
 8015e2e:	3714      	adds	r7, #20
 8015e30:	46bd      	mov	sp, r7
 8015e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e36:	4770      	bx	lr

08015e38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8015e38:	b480      	push	{r7}
 8015e3a:	b085      	sub	sp, #20
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	b2db      	uxtb	r3, r3
 8015e46:	3b10      	subs	r3, #16
 8015e48:	4a14      	ldr	r2, [pc, #80]	; (8015e9c <DMA_CalcBaseAndBitshift+0x64>)
 8015e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8015e4e:	091b      	lsrs	r3, r3, #4
 8015e50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8015e52:	4a13      	ldr	r2, [pc, #76]	; (8015ea0 <DMA_CalcBaseAndBitshift+0x68>)
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	4413      	add	r3, r2
 8015e58:	781b      	ldrb	r3, [r3, #0]
 8015e5a:	461a      	mov	r2, r3
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	2b03      	cmp	r3, #3
 8015e64:	d909      	bls.n	8015e7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8015e6e:	f023 0303 	bic.w	r3, r3, #3
 8015e72:	1d1a      	adds	r2, r3, #4
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	659a      	str	r2, [r3, #88]	; 0x58
 8015e78:	e007      	b.n	8015e8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8015e82:	f023 0303 	bic.w	r3, r3, #3
 8015e86:	687a      	ldr	r2, [r7, #4]
 8015e88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8015e8e:	4618      	mov	r0, r3
 8015e90:	3714      	adds	r7, #20
 8015e92:	46bd      	mov	sp, r7
 8015e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e98:	4770      	bx	lr
 8015e9a:	bf00      	nop
 8015e9c:	aaaaaaab 	.word	0xaaaaaaab
 8015ea0:	0802e354 	.word	0x0802e354

08015ea4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8015ea4:	b480      	push	{r7}
 8015ea6:	b085      	sub	sp, #20
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015eac:	2300      	movs	r3, #0
 8015eae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015eb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	699b      	ldr	r3, [r3, #24]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d11f      	bne.n	8015efe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8015ebe:	68bb      	ldr	r3, [r7, #8]
 8015ec0:	2b03      	cmp	r3, #3
 8015ec2:	d855      	bhi.n	8015f70 <DMA_CheckFifoParam+0xcc>
 8015ec4:	a201      	add	r2, pc, #4	; (adr r2, 8015ecc <DMA_CheckFifoParam+0x28>)
 8015ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015eca:	bf00      	nop
 8015ecc:	08015edd 	.word	0x08015edd
 8015ed0:	08015eef 	.word	0x08015eef
 8015ed4:	08015edd 	.word	0x08015edd
 8015ed8:	08015f71 	.word	0x08015f71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d045      	beq.n	8015f74 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8015ee8:	2301      	movs	r3, #1
 8015eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015eec:	e042      	b.n	8015f74 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ef2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8015ef6:	d13f      	bne.n	8015f78 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8015ef8:	2301      	movs	r3, #1
 8015efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015efc:	e03c      	b.n	8015f78 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	699b      	ldr	r3, [r3, #24]
 8015f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015f06:	d121      	bne.n	8015f4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8015f08:	68bb      	ldr	r3, [r7, #8]
 8015f0a:	2b03      	cmp	r3, #3
 8015f0c:	d836      	bhi.n	8015f7c <DMA_CheckFifoParam+0xd8>
 8015f0e:	a201      	add	r2, pc, #4	; (adr r2, 8015f14 <DMA_CheckFifoParam+0x70>)
 8015f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f14:	08015f25 	.word	0x08015f25
 8015f18:	08015f2b 	.word	0x08015f2b
 8015f1c:	08015f25 	.word	0x08015f25
 8015f20:	08015f3d 	.word	0x08015f3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8015f24:	2301      	movs	r3, #1
 8015f26:	73fb      	strb	r3, [r7, #15]
      break;
 8015f28:	e02f      	b.n	8015f8a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d024      	beq.n	8015f80 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8015f36:	2301      	movs	r3, #1
 8015f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015f3a:	e021      	b.n	8015f80 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8015f44:	d11e      	bne.n	8015f84 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8015f46:	2301      	movs	r3, #1
 8015f48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8015f4a:	e01b      	b.n	8015f84 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8015f4c:	68bb      	ldr	r3, [r7, #8]
 8015f4e:	2b02      	cmp	r3, #2
 8015f50:	d902      	bls.n	8015f58 <DMA_CheckFifoParam+0xb4>
 8015f52:	2b03      	cmp	r3, #3
 8015f54:	d003      	beq.n	8015f5e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8015f56:	e018      	b.n	8015f8a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8015f58:	2301      	movs	r3, #1
 8015f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8015f5c:	e015      	b.n	8015f8a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d00e      	beq.n	8015f88 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8015f6a:	2301      	movs	r3, #1
 8015f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8015f6e:	e00b      	b.n	8015f88 <DMA_CheckFifoParam+0xe4>
      break;
 8015f70:	bf00      	nop
 8015f72:	e00a      	b.n	8015f8a <DMA_CheckFifoParam+0xe6>
      break;
 8015f74:	bf00      	nop
 8015f76:	e008      	b.n	8015f8a <DMA_CheckFifoParam+0xe6>
      break;
 8015f78:	bf00      	nop
 8015f7a:	e006      	b.n	8015f8a <DMA_CheckFifoParam+0xe6>
      break;
 8015f7c:	bf00      	nop
 8015f7e:	e004      	b.n	8015f8a <DMA_CheckFifoParam+0xe6>
      break;
 8015f80:	bf00      	nop
 8015f82:	e002      	b.n	8015f8a <DMA_CheckFifoParam+0xe6>
      break;   
 8015f84:	bf00      	nop
 8015f86:	e000      	b.n	8015f8a <DMA_CheckFifoParam+0xe6>
      break;
 8015f88:	bf00      	nop
    }
  } 
  
  return status; 
 8015f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	3714      	adds	r7, #20
 8015f90:	46bd      	mov	sp, r7
 8015f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f96:	4770      	bx	lr

08015f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015f98:	b480      	push	{r7}
 8015f9a:	b089      	sub	sp, #36	; 0x24
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
 8015fa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8015faa:	2300      	movs	r3, #0
 8015fac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015fae:	2300      	movs	r3, #0
 8015fb0:	61fb      	str	r3, [r7, #28]
 8015fb2:	e159      	b.n	8016268 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8015fb4:	2201      	movs	r2, #1
 8015fb6:	69fb      	ldr	r3, [r7, #28]
 8015fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8015fbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8015fbe:	683b      	ldr	r3, [r7, #0]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	697a      	ldr	r2, [r7, #20]
 8015fc4:	4013      	ands	r3, r2
 8015fc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8015fc8:	693a      	ldr	r2, [r7, #16]
 8015fca:	697b      	ldr	r3, [r7, #20]
 8015fcc:	429a      	cmp	r2, r3
 8015fce:	f040 8148 	bne.w	8016262 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8015fd2:	683b      	ldr	r3, [r7, #0]
 8015fd4:	685b      	ldr	r3, [r3, #4]
 8015fd6:	2b01      	cmp	r3, #1
 8015fd8:	d00b      	beq.n	8015ff2 <HAL_GPIO_Init+0x5a>
 8015fda:	683b      	ldr	r3, [r7, #0]
 8015fdc:	685b      	ldr	r3, [r3, #4]
 8015fde:	2b02      	cmp	r3, #2
 8015fe0:	d007      	beq.n	8015ff2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8015fe2:	683b      	ldr	r3, [r7, #0]
 8015fe4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8015fe6:	2b11      	cmp	r3, #17
 8015fe8:	d003      	beq.n	8015ff2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8015fea:	683b      	ldr	r3, [r7, #0]
 8015fec:	685b      	ldr	r3, [r3, #4]
 8015fee:	2b12      	cmp	r3, #18
 8015ff0:	d130      	bne.n	8016054 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	689b      	ldr	r3, [r3, #8]
 8015ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8015ff8:	69fb      	ldr	r3, [r7, #28]
 8015ffa:	005b      	lsls	r3, r3, #1
 8015ffc:	2203      	movs	r2, #3
 8015ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8016002:	43db      	mvns	r3, r3
 8016004:	69ba      	ldr	r2, [r7, #24]
 8016006:	4013      	ands	r3, r2
 8016008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801600a:	683b      	ldr	r3, [r7, #0]
 801600c:	68da      	ldr	r2, [r3, #12]
 801600e:	69fb      	ldr	r3, [r7, #28]
 8016010:	005b      	lsls	r3, r3, #1
 8016012:	fa02 f303 	lsl.w	r3, r2, r3
 8016016:	69ba      	ldr	r2, [r7, #24]
 8016018:	4313      	orrs	r3, r2
 801601a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	69ba      	ldr	r2, [r7, #24]
 8016020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	685b      	ldr	r3, [r3, #4]
 8016026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8016028:	2201      	movs	r2, #1
 801602a:	69fb      	ldr	r3, [r7, #28]
 801602c:	fa02 f303 	lsl.w	r3, r2, r3
 8016030:	43db      	mvns	r3, r3
 8016032:	69ba      	ldr	r2, [r7, #24]
 8016034:	4013      	ands	r3, r2
 8016036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8016038:	683b      	ldr	r3, [r7, #0]
 801603a:	685b      	ldr	r3, [r3, #4]
 801603c:	091b      	lsrs	r3, r3, #4
 801603e:	f003 0201 	and.w	r2, r3, #1
 8016042:	69fb      	ldr	r3, [r7, #28]
 8016044:	fa02 f303 	lsl.w	r3, r2, r3
 8016048:	69ba      	ldr	r2, [r7, #24]
 801604a:	4313      	orrs	r3, r2
 801604c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	69ba      	ldr	r2, [r7, #24]
 8016052:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	68db      	ldr	r3, [r3, #12]
 8016058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801605a:	69fb      	ldr	r3, [r7, #28]
 801605c:	005b      	lsls	r3, r3, #1
 801605e:	2203      	movs	r2, #3
 8016060:	fa02 f303 	lsl.w	r3, r2, r3
 8016064:	43db      	mvns	r3, r3
 8016066:	69ba      	ldr	r2, [r7, #24]
 8016068:	4013      	ands	r3, r2
 801606a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801606c:	683b      	ldr	r3, [r7, #0]
 801606e:	689a      	ldr	r2, [r3, #8]
 8016070:	69fb      	ldr	r3, [r7, #28]
 8016072:	005b      	lsls	r3, r3, #1
 8016074:	fa02 f303 	lsl.w	r3, r2, r3
 8016078:	69ba      	ldr	r2, [r7, #24]
 801607a:	4313      	orrs	r3, r2
 801607c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	69ba      	ldr	r2, [r7, #24]
 8016082:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8016084:	683b      	ldr	r3, [r7, #0]
 8016086:	685b      	ldr	r3, [r3, #4]
 8016088:	2b02      	cmp	r3, #2
 801608a:	d003      	beq.n	8016094 <HAL_GPIO_Init+0xfc>
 801608c:	683b      	ldr	r3, [r7, #0]
 801608e:	685b      	ldr	r3, [r3, #4]
 8016090:	2b12      	cmp	r3, #18
 8016092:	d123      	bne.n	80160dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8016094:	69fb      	ldr	r3, [r7, #28]
 8016096:	08da      	lsrs	r2, r3, #3
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	3208      	adds	r2, #8
 801609c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80160a2:	69fb      	ldr	r3, [r7, #28]
 80160a4:	f003 0307 	and.w	r3, r3, #7
 80160a8:	009b      	lsls	r3, r3, #2
 80160aa:	220f      	movs	r2, #15
 80160ac:	fa02 f303 	lsl.w	r3, r2, r3
 80160b0:	43db      	mvns	r3, r3
 80160b2:	69ba      	ldr	r2, [r7, #24]
 80160b4:	4013      	ands	r3, r2
 80160b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80160b8:	683b      	ldr	r3, [r7, #0]
 80160ba:	691a      	ldr	r2, [r3, #16]
 80160bc:	69fb      	ldr	r3, [r7, #28]
 80160be:	f003 0307 	and.w	r3, r3, #7
 80160c2:	009b      	lsls	r3, r3, #2
 80160c4:	fa02 f303 	lsl.w	r3, r2, r3
 80160c8:	69ba      	ldr	r2, [r7, #24]
 80160ca:	4313      	orrs	r3, r2
 80160cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80160ce:	69fb      	ldr	r3, [r7, #28]
 80160d0:	08da      	lsrs	r2, r3, #3
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	3208      	adds	r2, #8
 80160d6:	69b9      	ldr	r1, [r7, #24]
 80160d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80160e2:	69fb      	ldr	r3, [r7, #28]
 80160e4:	005b      	lsls	r3, r3, #1
 80160e6:	2203      	movs	r2, #3
 80160e8:	fa02 f303 	lsl.w	r3, r2, r3
 80160ec:	43db      	mvns	r3, r3
 80160ee:	69ba      	ldr	r2, [r7, #24]
 80160f0:	4013      	ands	r3, r2
 80160f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80160f4:	683b      	ldr	r3, [r7, #0]
 80160f6:	685b      	ldr	r3, [r3, #4]
 80160f8:	f003 0203 	and.w	r2, r3, #3
 80160fc:	69fb      	ldr	r3, [r7, #28]
 80160fe:	005b      	lsls	r3, r3, #1
 8016100:	fa02 f303 	lsl.w	r3, r2, r3
 8016104:	69ba      	ldr	r2, [r7, #24]
 8016106:	4313      	orrs	r3, r2
 8016108:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	69ba      	ldr	r2, [r7, #24]
 801610e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8016110:	683b      	ldr	r3, [r7, #0]
 8016112:	685b      	ldr	r3, [r3, #4]
 8016114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016118:	2b00      	cmp	r3, #0
 801611a:	f000 80a2 	beq.w	8016262 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801611e:	2300      	movs	r3, #0
 8016120:	60fb      	str	r3, [r7, #12]
 8016122:	4b56      	ldr	r3, [pc, #344]	; (801627c <HAL_GPIO_Init+0x2e4>)
 8016124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016126:	4a55      	ldr	r2, [pc, #340]	; (801627c <HAL_GPIO_Init+0x2e4>)
 8016128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801612c:	6453      	str	r3, [r2, #68]	; 0x44
 801612e:	4b53      	ldr	r3, [pc, #332]	; (801627c <HAL_GPIO_Init+0x2e4>)
 8016130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016136:	60fb      	str	r3, [r7, #12]
 8016138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801613a:	4a51      	ldr	r2, [pc, #324]	; (8016280 <HAL_GPIO_Init+0x2e8>)
 801613c:	69fb      	ldr	r3, [r7, #28]
 801613e:	089b      	lsrs	r3, r3, #2
 8016140:	3302      	adds	r3, #2
 8016142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8016148:	69fb      	ldr	r3, [r7, #28]
 801614a:	f003 0303 	and.w	r3, r3, #3
 801614e:	009b      	lsls	r3, r3, #2
 8016150:	220f      	movs	r2, #15
 8016152:	fa02 f303 	lsl.w	r3, r2, r3
 8016156:	43db      	mvns	r3, r3
 8016158:	69ba      	ldr	r2, [r7, #24]
 801615a:	4013      	ands	r3, r2
 801615c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	4a48      	ldr	r2, [pc, #288]	; (8016284 <HAL_GPIO_Init+0x2ec>)
 8016162:	4293      	cmp	r3, r2
 8016164:	d019      	beq.n	801619a <HAL_GPIO_Init+0x202>
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	4a47      	ldr	r2, [pc, #284]	; (8016288 <HAL_GPIO_Init+0x2f0>)
 801616a:	4293      	cmp	r3, r2
 801616c:	d013      	beq.n	8016196 <HAL_GPIO_Init+0x1fe>
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	4a46      	ldr	r2, [pc, #280]	; (801628c <HAL_GPIO_Init+0x2f4>)
 8016172:	4293      	cmp	r3, r2
 8016174:	d00d      	beq.n	8016192 <HAL_GPIO_Init+0x1fa>
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	4a45      	ldr	r2, [pc, #276]	; (8016290 <HAL_GPIO_Init+0x2f8>)
 801617a:	4293      	cmp	r3, r2
 801617c:	d007      	beq.n	801618e <HAL_GPIO_Init+0x1f6>
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	4a44      	ldr	r2, [pc, #272]	; (8016294 <HAL_GPIO_Init+0x2fc>)
 8016182:	4293      	cmp	r3, r2
 8016184:	d101      	bne.n	801618a <HAL_GPIO_Init+0x1f2>
 8016186:	2304      	movs	r3, #4
 8016188:	e008      	b.n	801619c <HAL_GPIO_Init+0x204>
 801618a:	2307      	movs	r3, #7
 801618c:	e006      	b.n	801619c <HAL_GPIO_Init+0x204>
 801618e:	2303      	movs	r3, #3
 8016190:	e004      	b.n	801619c <HAL_GPIO_Init+0x204>
 8016192:	2302      	movs	r3, #2
 8016194:	e002      	b.n	801619c <HAL_GPIO_Init+0x204>
 8016196:	2301      	movs	r3, #1
 8016198:	e000      	b.n	801619c <HAL_GPIO_Init+0x204>
 801619a:	2300      	movs	r3, #0
 801619c:	69fa      	ldr	r2, [r7, #28]
 801619e:	f002 0203 	and.w	r2, r2, #3
 80161a2:	0092      	lsls	r2, r2, #2
 80161a4:	4093      	lsls	r3, r2
 80161a6:	69ba      	ldr	r2, [r7, #24]
 80161a8:	4313      	orrs	r3, r2
 80161aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80161ac:	4934      	ldr	r1, [pc, #208]	; (8016280 <HAL_GPIO_Init+0x2e8>)
 80161ae:	69fb      	ldr	r3, [r7, #28]
 80161b0:	089b      	lsrs	r3, r3, #2
 80161b2:	3302      	adds	r3, #2
 80161b4:	69ba      	ldr	r2, [r7, #24]
 80161b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80161ba:	4b37      	ldr	r3, [pc, #220]	; (8016298 <HAL_GPIO_Init+0x300>)
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80161c0:	693b      	ldr	r3, [r7, #16]
 80161c2:	43db      	mvns	r3, r3
 80161c4:	69ba      	ldr	r2, [r7, #24]
 80161c6:	4013      	ands	r3, r2
 80161c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80161ca:	683b      	ldr	r3, [r7, #0]
 80161cc:	685b      	ldr	r3, [r3, #4]
 80161ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d003      	beq.n	80161de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80161d6:	69ba      	ldr	r2, [r7, #24]
 80161d8:	693b      	ldr	r3, [r7, #16]
 80161da:	4313      	orrs	r3, r2
 80161dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80161de:	4a2e      	ldr	r2, [pc, #184]	; (8016298 <HAL_GPIO_Init+0x300>)
 80161e0:	69bb      	ldr	r3, [r7, #24]
 80161e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80161e4:	4b2c      	ldr	r3, [pc, #176]	; (8016298 <HAL_GPIO_Init+0x300>)
 80161e6:	685b      	ldr	r3, [r3, #4]
 80161e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80161ea:	693b      	ldr	r3, [r7, #16]
 80161ec:	43db      	mvns	r3, r3
 80161ee:	69ba      	ldr	r2, [r7, #24]
 80161f0:	4013      	ands	r3, r2
 80161f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80161f4:	683b      	ldr	r3, [r7, #0]
 80161f6:	685b      	ldr	r3, [r3, #4]
 80161f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d003      	beq.n	8016208 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8016200:	69ba      	ldr	r2, [r7, #24]
 8016202:	693b      	ldr	r3, [r7, #16]
 8016204:	4313      	orrs	r3, r2
 8016206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8016208:	4a23      	ldr	r2, [pc, #140]	; (8016298 <HAL_GPIO_Init+0x300>)
 801620a:	69bb      	ldr	r3, [r7, #24]
 801620c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801620e:	4b22      	ldr	r3, [pc, #136]	; (8016298 <HAL_GPIO_Init+0x300>)
 8016210:	689b      	ldr	r3, [r3, #8]
 8016212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016214:	693b      	ldr	r3, [r7, #16]
 8016216:	43db      	mvns	r3, r3
 8016218:	69ba      	ldr	r2, [r7, #24]
 801621a:	4013      	ands	r3, r2
 801621c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801621e:	683b      	ldr	r3, [r7, #0]
 8016220:	685b      	ldr	r3, [r3, #4]
 8016222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016226:	2b00      	cmp	r3, #0
 8016228:	d003      	beq.n	8016232 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801622a:	69ba      	ldr	r2, [r7, #24]
 801622c:	693b      	ldr	r3, [r7, #16]
 801622e:	4313      	orrs	r3, r2
 8016230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8016232:	4a19      	ldr	r2, [pc, #100]	; (8016298 <HAL_GPIO_Init+0x300>)
 8016234:	69bb      	ldr	r3, [r7, #24]
 8016236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8016238:	4b17      	ldr	r3, [pc, #92]	; (8016298 <HAL_GPIO_Init+0x300>)
 801623a:	68db      	ldr	r3, [r3, #12]
 801623c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801623e:	693b      	ldr	r3, [r7, #16]
 8016240:	43db      	mvns	r3, r3
 8016242:	69ba      	ldr	r2, [r7, #24]
 8016244:	4013      	ands	r3, r2
 8016246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8016248:	683b      	ldr	r3, [r7, #0]
 801624a:	685b      	ldr	r3, [r3, #4]
 801624c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016250:	2b00      	cmp	r3, #0
 8016252:	d003      	beq.n	801625c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8016254:	69ba      	ldr	r2, [r7, #24]
 8016256:	693b      	ldr	r3, [r7, #16]
 8016258:	4313      	orrs	r3, r2
 801625a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801625c:	4a0e      	ldr	r2, [pc, #56]	; (8016298 <HAL_GPIO_Init+0x300>)
 801625e:	69bb      	ldr	r3, [r7, #24]
 8016260:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016262:	69fb      	ldr	r3, [r7, #28]
 8016264:	3301      	adds	r3, #1
 8016266:	61fb      	str	r3, [r7, #28]
 8016268:	69fb      	ldr	r3, [r7, #28]
 801626a:	2b0f      	cmp	r3, #15
 801626c:	f67f aea2 	bls.w	8015fb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8016270:	bf00      	nop
 8016272:	3724      	adds	r7, #36	; 0x24
 8016274:	46bd      	mov	sp, r7
 8016276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801627a:	4770      	bx	lr
 801627c:	40023800 	.word	0x40023800
 8016280:	40013800 	.word	0x40013800
 8016284:	40020000 	.word	0x40020000
 8016288:	40020400 	.word	0x40020400
 801628c:	40020800 	.word	0x40020800
 8016290:	40020c00 	.word	0x40020c00
 8016294:	40021000 	.word	0x40021000
 8016298:	40013c00 	.word	0x40013c00

0801629c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801629c:	b480      	push	{r7}
 801629e:	b083      	sub	sp, #12
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
 80162a4:	460b      	mov	r3, r1
 80162a6:	807b      	strh	r3, [r7, #2]
 80162a8:	4613      	mov	r3, r2
 80162aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80162ac:	787b      	ldrb	r3, [r7, #1]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d003      	beq.n	80162ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80162b2:	887a      	ldrh	r2, [r7, #2]
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80162b8:	e003      	b.n	80162c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80162ba:	887b      	ldrh	r3, [r7, #2]
 80162bc:	041a      	lsls	r2, r3, #16
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	619a      	str	r2, [r3, #24]
}
 80162c2:	bf00      	nop
 80162c4:	370c      	adds	r7, #12
 80162c6:	46bd      	mov	sp, r7
 80162c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162cc:	4770      	bx	lr
	...

080162d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80162d0:	b580      	push	{r7, lr}
 80162d2:	b082      	sub	sp, #8
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	4603      	mov	r3, r0
 80162d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80162da:	4b08      	ldr	r3, [pc, #32]	; (80162fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80162dc:	695a      	ldr	r2, [r3, #20]
 80162de:	88fb      	ldrh	r3, [r7, #6]
 80162e0:	4013      	ands	r3, r2
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d006      	beq.n	80162f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80162e6:	4a05      	ldr	r2, [pc, #20]	; (80162fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80162e8:	88fb      	ldrh	r3, [r7, #6]
 80162ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80162ec:	88fb      	ldrh	r3, [r7, #6]
 80162ee:	4618      	mov	r0, r3
 80162f0:	f7fd fc52 	bl	8013b98 <HAL_GPIO_EXTI_Callback>
  }
}
 80162f4:	bf00      	nop
 80162f6:	3708      	adds	r7, #8
 80162f8:	46bd      	mov	sp, r7
 80162fa:	bd80      	pop	{r7, pc}
 80162fc:	40013c00 	.word	0x40013c00

08016300 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b084      	sub	sp, #16
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d101      	bne.n	8016312 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801630e:	2301      	movs	r3, #1
 8016310:	e11f      	b.n	8016552 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016318:	b2db      	uxtb	r3, r3
 801631a:	2b00      	cmp	r3, #0
 801631c:	d106      	bne.n	801632c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	2200      	movs	r2, #0
 8016322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8016326:	6878      	ldr	r0, [r7, #4]
 8016328:	f7fd fed8 	bl	80140dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	2224      	movs	r2, #36	; 0x24
 8016330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	681a      	ldr	r2, [r3, #0]
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	f022 0201 	bic.w	r2, r2, #1
 8016342:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	681a      	ldr	r2, [r3, #0]
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016352:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	681a      	ldr	r2, [r3, #0]
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8016362:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8016364:	f003 fad8 	bl	8019918 <HAL_RCC_GetPCLK1Freq>
 8016368:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	685b      	ldr	r3, [r3, #4]
 801636e:	4a7b      	ldr	r2, [pc, #492]	; (801655c <HAL_I2C_Init+0x25c>)
 8016370:	4293      	cmp	r3, r2
 8016372:	d807      	bhi.n	8016384 <HAL_I2C_Init+0x84>
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	4a7a      	ldr	r2, [pc, #488]	; (8016560 <HAL_I2C_Init+0x260>)
 8016378:	4293      	cmp	r3, r2
 801637a:	bf94      	ite	ls
 801637c:	2301      	movls	r3, #1
 801637e:	2300      	movhi	r3, #0
 8016380:	b2db      	uxtb	r3, r3
 8016382:	e006      	b.n	8016392 <HAL_I2C_Init+0x92>
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	4a77      	ldr	r2, [pc, #476]	; (8016564 <HAL_I2C_Init+0x264>)
 8016388:	4293      	cmp	r3, r2
 801638a:	bf94      	ite	ls
 801638c:	2301      	movls	r3, #1
 801638e:	2300      	movhi	r3, #0
 8016390:	b2db      	uxtb	r3, r3
 8016392:	2b00      	cmp	r3, #0
 8016394:	d001      	beq.n	801639a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8016396:	2301      	movs	r3, #1
 8016398:	e0db      	b.n	8016552 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	4a72      	ldr	r2, [pc, #456]	; (8016568 <HAL_I2C_Init+0x268>)
 801639e:	fba2 2303 	umull	r2, r3, r2, r3
 80163a2:	0c9b      	lsrs	r3, r3, #18
 80163a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	685b      	ldr	r3, [r3, #4]
 80163ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	68ba      	ldr	r2, [r7, #8]
 80163b6:	430a      	orrs	r2, r1
 80163b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	6a1b      	ldr	r3, [r3, #32]
 80163c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	685b      	ldr	r3, [r3, #4]
 80163c8:	4a64      	ldr	r2, [pc, #400]	; (801655c <HAL_I2C_Init+0x25c>)
 80163ca:	4293      	cmp	r3, r2
 80163cc:	d802      	bhi.n	80163d4 <HAL_I2C_Init+0xd4>
 80163ce:	68bb      	ldr	r3, [r7, #8]
 80163d0:	3301      	adds	r3, #1
 80163d2:	e009      	b.n	80163e8 <HAL_I2C_Init+0xe8>
 80163d4:	68bb      	ldr	r3, [r7, #8]
 80163d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80163da:	fb02 f303 	mul.w	r3, r2, r3
 80163de:	4a63      	ldr	r2, [pc, #396]	; (801656c <HAL_I2C_Init+0x26c>)
 80163e0:	fba2 2303 	umull	r2, r3, r2, r3
 80163e4:	099b      	lsrs	r3, r3, #6
 80163e6:	3301      	adds	r3, #1
 80163e8:	687a      	ldr	r2, [r7, #4]
 80163ea:	6812      	ldr	r2, [r2, #0]
 80163ec:	430b      	orrs	r3, r1
 80163ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	69db      	ldr	r3, [r3, #28]
 80163f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80163fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	685b      	ldr	r3, [r3, #4]
 8016402:	4956      	ldr	r1, [pc, #344]	; (801655c <HAL_I2C_Init+0x25c>)
 8016404:	428b      	cmp	r3, r1
 8016406:	d80d      	bhi.n	8016424 <HAL_I2C_Init+0x124>
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	1e59      	subs	r1, r3, #1
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	685b      	ldr	r3, [r3, #4]
 8016410:	005b      	lsls	r3, r3, #1
 8016412:	fbb1 f3f3 	udiv	r3, r1, r3
 8016416:	3301      	adds	r3, #1
 8016418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801641c:	2b04      	cmp	r3, #4
 801641e:	bf38      	it	cc
 8016420:	2304      	movcc	r3, #4
 8016422:	e04f      	b.n	80164c4 <HAL_I2C_Init+0x1c4>
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	689b      	ldr	r3, [r3, #8]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d111      	bne.n	8016450 <HAL_I2C_Init+0x150>
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	1e58      	subs	r0, r3, #1
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	6859      	ldr	r1, [r3, #4]
 8016434:	460b      	mov	r3, r1
 8016436:	005b      	lsls	r3, r3, #1
 8016438:	440b      	add	r3, r1
 801643a:	fbb0 f3f3 	udiv	r3, r0, r3
 801643e:	3301      	adds	r3, #1
 8016440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016444:	2b00      	cmp	r3, #0
 8016446:	bf0c      	ite	eq
 8016448:	2301      	moveq	r3, #1
 801644a:	2300      	movne	r3, #0
 801644c:	b2db      	uxtb	r3, r3
 801644e:	e012      	b.n	8016476 <HAL_I2C_Init+0x176>
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	1e58      	subs	r0, r3, #1
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	6859      	ldr	r1, [r3, #4]
 8016458:	460b      	mov	r3, r1
 801645a:	009b      	lsls	r3, r3, #2
 801645c:	440b      	add	r3, r1
 801645e:	0099      	lsls	r1, r3, #2
 8016460:	440b      	add	r3, r1
 8016462:	fbb0 f3f3 	udiv	r3, r0, r3
 8016466:	3301      	adds	r3, #1
 8016468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801646c:	2b00      	cmp	r3, #0
 801646e:	bf0c      	ite	eq
 8016470:	2301      	moveq	r3, #1
 8016472:	2300      	movne	r3, #0
 8016474:	b2db      	uxtb	r3, r3
 8016476:	2b00      	cmp	r3, #0
 8016478:	d001      	beq.n	801647e <HAL_I2C_Init+0x17e>
 801647a:	2301      	movs	r3, #1
 801647c:	e022      	b.n	80164c4 <HAL_I2C_Init+0x1c4>
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	689b      	ldr	r3, [r3, #8]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d10e      	bne.n	80164a4 <HAL_I2C_Init+0x1a4>
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	1e58      	subs	r0, r3, #1
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	6859      	ldr	r1, [r3, #4]
 801648e:	460b      	mov	r3, r1
 8016490:	005b      	lsls	r3, r3, #1
 8016492:	440b      	add	r3, r1
 8016494:	fbb0 f3f3 	udiv	r3, r0, r3
 8016498:	3301      	adds	r3, #1
 801649a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801649e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80164a2:	e00f      	b.n	80164c4 <HAL_I2C_Init+0x1c4>
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	1e58      	subs	r0, r3, #1
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	6859      	ldr	r1, [r3, #4]
 80164ac:	460b      	mov	r3, r1
 80164ae:	009b      	lsls	r3, r3, #2
 80164b0:	440b      	add	r3, r1
 80164b2:	0099      	lsls	r1, r3, #2
 80164b4:	440b      	add	r3, r1
 80164b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80164ba:	3301      	adds	r3, #1
 80164bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80164c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80164c4:	6879      	ldr	r1, [r7, #4]
 80164c6:	6809      	ldr	r1, [r1, #0]
 80164c8:	4313      	orrs	r3, r2
 80164ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	69da      	ldr	r2, [r3, #28]
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	6a1b      	ldr	r3, [r3, #32]
 80164de:	431a      	orrs	r2, r3
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	430a      	orrs	r2, r1
 80164e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	689b      	ldr	r3, [r3, #8]
 80164ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80164f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80164f6:	687a      	ldr	r2, [r7, #4]
 80164f8:	6911      	ldr	r1, [r2, #16]
 80164fa:	687a      	ldr	r2, [r7, #4]
 80164fc:	68d2      	ldr	r2, [r2, #12]
 80164fe:	4311      	orrs	r1, r2
 8016500:	687a      	ldr	r2, [r7, #4]
 8016502:	6812      	ldr	r2, [r2, #0]
 8016504:	430b      	orrs	r3, r1
 8016506:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	68db      	ldr	r3, [r3, #12]
 801650e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	695a      	ldr	r2, [r3, #20]
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	699b      	ldr	r3, [r3, #24]
 801651a:	431a      	orrs	r2, r3
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	430a      	orrs	r2, r1
 8016522:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	681a      	ldr	r2, [r3, #0]
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	f042 0201 	orr.w	r2, r2, #1
 8016532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	2200      	movs	r2, #0
 8016538:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	2220      	movs	r2, #32
 801653e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	2200      	movs	r2, #0
 8016546:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	2200      	movs	r2, #0
 801654c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8016550:	2300      	movs	r3, #0
}
 8016552:	4618      	mov	r0, r3
 8016554:	3710      	adds	r7, #16
 8016556:	46bd      	mov	sp, r7
 8016558:	bd80      	pop	{r7, pc}
 801655a:	bf00      	nop
 801655c:	000186a0 	.word	0x000186a0
 8016560:	001e847f 	.word	0x001e847f
 8016564:	003d08ff 	.word	0x003d08ff
 8016568:	431bde83 	.word	0x431bde83
 801656c:	10624dd3 	.word	0x10624dd3

08016570 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016570:	b580      	push	{r7, lr}
 8016572:	b088      	sub	sp, #32
 8016574:	af02      	add	r7, sp, #8
 8016576:	60f8      	str	r0, [r7, #12]
 8016578:	4608      	mov	r0, r1
 801657a:	4611      	mov	r1, r2
 801657c:	461a      	mov	r2, r3
 801657e:	4603      	mov	r3, r0
 8016580:	817b      	strh	r3, [r7, #10]
 8016582:	460b      	mov	r3, r1
 8016584:	813b      	strh	r3, [r7, #8]
 8016586:	4613      	mov	r3, r2
 8016588:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801658a:	f7ff f84b 	bl	8015624 <HAL_GetTick>
 801658e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016596:	b2db      	uxtb	r3, r3
 8016598:	2b20      	cmp	r3, #32
 801659a:	f040 80d9 	bne.w	8016750 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801659e:	697b      	ldr	r3, [r7, #20]
 80165a0:	9300      	str	r3, [sp, #0]
 80165a2:	2319      	movs	r3, #25
 80165a4:	2201      	movs	r2, #1
 80165a6:	496d      	ldr	r1, [pc, #436]	; (801675c <HAL_I2C_Mem_Write+0x1ec>)
 80165a8:	68f8      	ldr	r0, [r7, #12]
 80165aa:	f002 fb82 	bl	8018cb2 <I2C_WaitOnFlagUntilTimeout>
 80165ae:	4603      	mov	r3, r0
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d001      	beq.n	80165b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80165b4:	2302      	movs	r3, #2
 80165b6:	e0cc      	b.n	8016752 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80165be:	2b01      	cmp	r3, #1
 80165c0:	d101      	bne.n	80165c6 <HAL_I2C_Mem_Write+0x56>
 80165c2:	2302      	movs	r3, #2
 80165c4:	e0c5      	b.n	8016752 <HAL_I2C_Mem_Write+0x1e2>
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	2201      	movs	r2, #1
 80165ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	f003 0301 	and.w	r3, r3, #1
 80165d8:	2b01      	cmp	r3, #1
 80165da:	d007      	beq.n	80165ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	681a      	ldr	r2, [r3, #0]
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	f042 0201 	orr.w	r2, r2, #1
 80165ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	681a      	ldr	r2, [r3, #0]
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80165fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	2221      	movs	r2, #33	; 0x21
 8016600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	2240      	movs	r2, #64	; 0x40
 8016608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	2200      	movs	r2, #0
 8016610:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	6a3a      	ldr	r2, [r7, #32]
 8016616:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801661c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016622:	b29a      	uxth	r2, r3
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	4a4d      	ldr	r2, [pc, #308]	; (8016760 <HAL_I2C_Mem_Write+0x1f0>)
 801662c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801662e:	88f8      	ldrh	r0, [r7, #6]
 8016630:	893a      	ldrh	r2, [r7, #8]
 8016632:	8979      	ldrh	r1, [r7, #10]
 8016634:	697b      	ldr	r3, [r7, #20]
 8016636:	9301      	str	r3, [sp, #4]
 8016638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801663a:	9300      	str	r3, [sp, #0]
 801663c:	4603      	mov	r3, r0
 801663e:	68f8      	ldr	r0, [r7, #12]
 8016640:	f002 f82c 	bl	801869c <I2C_RequestMemoryWrite>
 8016644:	4603      	mov	r3, r0
 8016646:	2b00      	cmp	r3, #0
 8016648:	d052      	beq.n	80166f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 801664a:	2301      	movs	r3, #1
 801664c:	e081      	b.n	8016752 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801664e:	697a      	ldr	r2, [r7, #20]
 8016650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016652:	68f8      	ldr	r0, [r7, #12]
 8016654:	f002 fc03 	bl	8018e5e <I2C_WaitOnTXEFlagUntilTimeout>
 8016658:	4603      	mov	r3, r0
 801665a:	2b00      	cmp	r3, #0
 801665c:	d00d      	beq.n	801667a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016662:	2b04      	cmp	r3, #4
 8016664:	d107      	bne.n	8016676 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	681a      	ldr	r2, [r3, #0]
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016674:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8016676:	2301      	movs	r3, #1
 8016678:	e06b      	b.n	8016752 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801667e:	781a      	ldrb	r2, [r3, #0]
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801668a:	1c5a      	adds	r2, r3, #1
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016694:	3b01      	subs	r3, #1
 8016696:	b29a      	uxth	r2, r3
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80166a0:	b29b      	uxth	r3, r3
 80166a2:	3b01      	subs	r3, #1
 80166a4:	b29a      	uxth	r2, r3
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	695b      	ldr	r3, [r3, #20]
 80166b0:	f003 0304 	and.w	r3, r3, #4
 80166b4:	2b04      	cmp	r3, #4
 80166b6:	d11b      	bne.n	80166f0 <HAL_I2C_Mem_Write+0x180>
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d017      	beq.n	80166f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166c4:	781a      	ldrb	r2, [r3, #0]
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166d0:	1c5a      	adds	r2, r3, #1
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80166da:	3b01      	subs	r3, #1
 80166dc:	b29a      	uxth	r2, r3
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80166e6:	b29b      	uxth	r3, r3
 80166e8:	3b01      	subs	r3, #1
 80166ea:	b29a      	uxth	r2, r3
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80166f0:	68fb      	ldr	r3, [r7, #12]
 80166f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d1aa      	bne.n	801664e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80166f8:	697a      	ldr	r2, [r7, #20]
 80166fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80166fc:	68f8      	ldr	r0, [r7, #12]
 80166fe:	f002 fbef 	bl	8018ee0 <I2C_WaitOnBTFFlagUntilTimeout>
 8016702:	4603      	mov	r3, r0
 8016704:	2b00      	cmp	r3, #0
 8016706:	d00d      	beq.n	8016724 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801670c:	2b04      	cmp	r3, #4
 801670e:	d107      	bne.n	8016720 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	681a      	ldr	r2, [r3, #0]
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801671e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8016720:	2301      	movs	r3, #1
 8016722:	e016      	b.n	8016752 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	681a      	ldr	r2, [r3, #0]
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	2220      	movs	r2, #32
 8016738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	2200      	movs	r2, #0
 8016740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	2200      	movs	r2, #0
 8016748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801674c:	2300      	movs	r3, #0
 801674e:	e000      	b.n	8016752 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8016750:	2302      	movs	r3, #2
  }
}
 8016752:	4618      	mov	r0, r3
 8016754:	3718      	adds	r7, #24
 8016756:	46bd      	mov	sp, r7
 8016758:	bd80      	pop	{r7, pc}
 801675a:	bf00      	nop
 801675c:	00100002 	.word	0x00100002
 8016760:	ffff0000 	.word	0xffff0000

08016764 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016764:	b580      	push	{r7, lr}
 8016766:	b08c      	sub	sp, #48	; 0x30
 8016768:	af02      	add	r7, sp, #8
 801676a:	60f8      	str	r0, [r7, #12]
 801676c:	4608      	mov	r0, r1
 801676e:	4611      	mov	r1, r2
 8016770:	461a      	mov	r2, r3
 8016772:	4603      	mov	r3, r0
 8016774:	817b      	strh	r3, [r7, #10]
 8016776:	460b      	mov	r3, r1
 8016778:	813b      	strh	r3, [r7, #8]
 801677a:	4613      	mov	r3, r2
 801677c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801677e:	f7fe ff51 	bl	8015624 <HAL_GetTick>
 8016782:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801678a:	b2db      	uxtb	r3, r3
 801678c:	2b20      	cmp	r3, #32
 801678e:	f040 8208 	bne.w	8016ba2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016794:	9300      	str	r3, [sp, #0]
 8016796:	2319      	movs	r3, #25
 8016798:	2201      	movs	r2, #1
 801679a:	497b      	ldr	r1, [pc, #492]	; (8016988 <HAL_I2C_Mem_Read+0x224>)
 801679c:	68f8      	ldr	r0, [r7, #12]
 801679e:	f002 fa88 	bl	8018cb2 <I2C_WaitOnFlagUntilTimeout>
 80167a2:	4603      	mov	r3, r0
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d001      	beq.n	80167ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80167a8:	2302      	movs	r3, #2
 80167aa:	e1fb      	b.n	8016ba4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80167b2:	2b01      	cmp	r3, #1
 80167b4:	d101      	bne.n	80167ba <HAL_I2C_Mem_Read+0x56>
 80167b6:	2302      	movs	r3, #2
 80167b8:	e1f4      	b.n	8016ba4 <HAL_I2C_Mem_Read+0x440>
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	2201      	movs	r2, #1
 80167be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	f003 0301 	and.w	r3, r3, #1
 80167cc:	2b01      	cmp	r3, #1
 80167ce:	d007      	beq.n	80167e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	681a      	ldr	r2, [r3, #0]
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	f042 0201 	orr.w	r2, r2, #1
 80167de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	681a      	ldr	r2, [r3, #0]
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80167ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	2222      	movs	r2, #34	; 0x22
 80167f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	2240      	movs	r2, #64	; 0x40
 80167fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	2200      	movs	r2, #0
 8016804:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801680a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8016810:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016816:	b29a      	uxth	r2, r3
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	4a5b      	ldr	r2, [pc, #364]	; (801698c <HAL_I2C_Mem_Read+0x228>)
 8016820:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8016822:	88f8      	ldrh	r0, [r7, #6]
 8016824:	893a      	ldrh	r2, [r7, #8]
 8016826:	8979      	ldrh	r1, [r7, #10]
 8016828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801682a:	9301      	str	r3, [sp, #4]
 801682c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801682e:	9300      	str	r3, [sp, #0]
 8016830:	4603      	mov	r3, r0
 8016832:	68f8      	ldr	r0, [r7, #12]
 8016834:	f001 ffc6 	bl	80187c4 <I2C_RequestMemoryRead>
 8016838:	4603      	mov	r3, r0
 801683a:	2b00      	cmp	r3, #0
 801683c:	d001      	beq.n	8016842 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 801683e:	2301      	movs	r3, #1
 8016840:	e1b0      	b.n	8016ba4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016846:	2b00      	cmp	r3, #0
 8016848:	d113      	bne.n	8016872 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801684a:	2300      	movs	r3, #0
 801684c:	623b      	str	r3, [r7, #32]
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	695b      	ldr	r3, [r3, #20]
 8016854:	623b      	str	r3, [r7, #32]
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	699b      	ldr	r3, [r3, #24]
 801685c:	623b      	str	r3, [r7, #32]
 801685e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	681a      	ldr	r2, [r3, #0]
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801686e:	601a      	str	r2, [r3, #0]
 8016870:	e184      	b.n	8016b7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016876:	2b01      	cmp	r3, #1
 8016878:	d11b      	bne.n	80168b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	681a      	ldr	r2, [r3, #0]
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016888:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801688a:	2300      	movs	r3, #0
 801688c:	61fb      	str	r3, [r7, #28]
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	695b      	ldr	r3, [r3, #20]
 8016894:	61fb      	str	r3, [r7, #28]
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	699b      	ldr	r3, [r3, #24]
 801689c:	61fb      	str	r3, [r7, #28]
 801689e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	681a      	ldr	r2, [r3, #0]
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80168ae:	601a      	str	r2, [r3, #0]
 80168b0:	e164      	b.n	8016b7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80168b6:	2b02      	cmp	r3, #2
 80168b8:	d11b      	bne.n	80168f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	681a      	ldr	r2, [r3, #0]
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80168c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	681a      	ldr	r2, [r3, #0]
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80168d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80168da:	2300      	movs	r3, #0
 80168dc:	61bb      	str	r3, [r7, #24]
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	695b      	ldr	r3, [r3, #20]
 80168e4:	61bb      	str	r3, [r7, #24]
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	699b      	ldr	r3, [r3, #24]
 80168ec:	61bb      	str	r3, [r7, #24]
 80168ee:	69bb      	ldr	r3, [r7, #24]
 80168f0:	e144      	b.n	8016b7c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80168f2:	2300      	movs	r3, #0
 80168f4:	617b      	str	r3, [r7, #20]
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	695b      	ldr	r3, [r3, #20]
 80168fc:	617b      	str	r3, [r7, #20]
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	699b      	ldr	r3, [r3, #24]
 8016904:	617b      	str	r3, [r7, #20]
 8016906:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8016908:	e138      	b.n	8016b7c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801690e:	2b03      	cmp	r3, #3
 8016910:	f200 80f1 	bhi.w	8016af6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016918:	2b01      	cmp	r3, #1
 801691a:	d123      	bne.n	8016964 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801691c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801691e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016920:	68f8      	ldr	r0, [r7, #12]
 8016922:	f002 fb1e 	bl	8018f62 <I2C_WaitOnRXNEFlagUntilTimeout>
 8016926:	4603      	mov	r3, r0
 8016928:	2b00      	cmp	r3, #0
 801692a:	d001      	beq.n	8016930 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 801692c:	2301      	movs	r3, #1
 801692e:	e139      	b.n	8016ba4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	691a      	ldr	r2, [r3, #16]
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801693a:	b2d2      	uxtb	r2, r2
 801693c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016942:	1c5a      	adds	r2, r3, #1
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801694c:	3b01      	subs	r3, #1
 801694e:	b29a      	uxth	r2, r3
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016958:	b29b      	uxth	r3, r3
 801695a:	3b01      	subs	r3, #1
 801695c:	b29a      	uxth	r2, r3
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016962:	e10b      	b.n	8016b7c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016968:	2b02      	cmp	r3, #2
 801696a:	d14e      	bne.n	8016a0a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801696e:	9300      	str	r3, [sp, #0]
 8016970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016972:	2200      	movs	r2, #0
 8016974:	4906      	ldr	r1, [pc, #24]	; (8016990 <HAL_I2C_Mem_Read+0x22c>)
 8016976:	68f8      	ldr	r0, [r7, #12]
 8016978:	f002 f99b 	bl	8018cb2 <I2C_WaitOnFlagUntilTimeout>
 801697c:	4603      	mov	r3, r0
 801697e:	2b00      	cmp	r3, #0
 8016980:	d008      	beq.n	8016994 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8016982:	2301      	movs	r3, #1
 8016984:	e10e      	b.n	8016ba4 <HAL_I2C_Mem_Read+0x440>
 8016986:	bf00      	nop
 8016988:	00100002 	.word	0x00100002
 801698c:	ffff0000 	.word	0xffff0000
 8016990:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	681a      	ldr	r2, [r3, #0]
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80169a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	691a      	ldr	r2, [r3, #16]
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169ae:	b2d2      	uxtb	r2, r2
 80169b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169b6:	1c5a      	adds	r2, r3, #1
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80169c0:	3b01      	subs	r3, #1
 80169c2:	b29a      	uxth	r2, r3
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80169cc:	b29b      	uxth	r3, r3
 80169ce:	3b01      	subs	r3, #1
 80169d0:	b29a      	uxth	r2, r3
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	691a      	ldr	r2, [r3, #16]
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169e0:	b2d2      	uxtb	r2, r2
 80169e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169e8:	1c5a      	adds	r2, r3, #1
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80169f2:	3b01      	subs	r3, #1
 80169f4:	b29a      	uxth	r2, r3
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80169fe:	b29b      	uxth	r3, r3
 8016a00:	3b01      	subs	r3, #1
 8016a02:	b29a      	uxth	r2, r3
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016a08:	e0b8      	b.n	8016b7c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8016a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a0c:	9300      	str	r3, [sp, #0]
 8016a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a10:	2200      	movs	r2, #0
 8016a12:	4966      	ldr	r1, [pc, #408]	; (8016bac <HAL_I2C_Mem_Read+0x448>)
 8016a14:	68f8      	ldr	r0, [r7, #12]
 8016a16:	f002 f94c 	bl	8018cb2 <I2C_WaitOnFlagUntilTimeout>
 8016a1a:	4603      	mov	r3, r0
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d001      	beq.n	8016a24 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8016a20:	2301      	movs	r3, #1
 8016a22:	e0bf      	b.n	8016ba4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	681a      	ldr	r2, [r3, #0]
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016a32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	691a      	ldr	r2, [r3, #16]
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a3e:	b2d2      	uxtb	r2, r2
 8016a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a46:	1c5a      	adds	r2, r3, #1
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a50:	3b01      	subs	r3, #1
 8016a52:	b29a      	uxth	r2, r3
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016a5c:	b29b      	uxth	r3, r3
 8016a5e:	3b01      	subs	r3, #1
 8016a60:	b29a      	uxth	r2, r3
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8016a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a68:	9300      	str	r3, [sp, #0]
 8016a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	494f      	ldr	r1, [pc, #316]	; (8016bac <HAL_I2C_Mem_Read+0x448>)
 8016a70:	68f8      	ldr	r0, [r7, #12]
 8016a72:	f002 f91e 	bl	8018cb2 <I2C_WaitOnFlagUntilTimeout>
 8016a76:	4603      	mov	r3, r0
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d001      	beq.n	8016a80 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8016a7c:	2301      	movs	r3, #1
 8016a7e:	e091      	b.n	8016ba4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	681a      	ldr	r2, [r3, #0]
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016a8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	691a      	ldr	r2, [r3, #16]
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a9a:	b2d2      	uxtb	r2, r2
 8016a9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016aa2:	1c5a      	adds	r2, r3, #1
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016aac:	3b01      	subs	r3, #1
 8016aae:	b29a      	uxth	r2, r3
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016ab8:	b29b      	uxth	r3, r3
 8016aba:	3b01      	subs	r3, #1
 8016abc:	b29a      	uxth	r2, r3
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	691a      	ldr	r2, [r3, #16]
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016acc:	b2d2      	uxtb	r2, r2
 8016ace:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ad4:	1c5a      	adds	r2, r3, #1
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016ade:	3b01      	subs	r3, #1
 8016ae0:	b29a      	uxth	r2, r3
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016aea:	b29b      	uxth	r3, r3
 8016aec:	3b01      	subs	r3, #1
 8016aee:	b29a      	uxth	r2, r3
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016af4:	e042      	b.n	8016b7c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016af8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016afa:	68f8      	ldr	r0, [r7, #12]
 8016afc:	f002 fa31 	bl	8018f62 <I2C_WaitOnRXNEFlagUntilTimeout>
 8016b00:	4603      	mov	r3, r0
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d001      	beq.n	8016b0a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8016b06:	2301      	movs	r3, #1
 8016b08:	e04c      	b.n	8016ba4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	691a      	ldr	r2, [r3, #16]
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b14:	b2d2      	uxtb	r2, r2
 8016b16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b1c:	1c5a      	adds	r2, r3, #1
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b26:	3b01      	subs	r3, #1
 8016b28:	b29a      	uxth	r2, r3
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016b32:	b29b      	uxth	r3, r3
 8016b34:	3b01      	subs	r3, #1
 8016b36:	b29a      	uxth	r2, r3
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	695b      	ldr	r3, [r3, #20]
 8016b42:	f003 0304 	and.w	r3, r3, #4
 8016b46:	2b04      	cmp	r3, #4
 8016b48:	d118      	bne.n	8016b7c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	691a      	ldr	r2, [r3, #16]
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b54:	b2d2      	uxtb	r2, r2
 8016b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b5c:	1c5a      	adds	r2, r3, #1
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b66:	3b01      	subs	r3, #1
 8016b68:	b29a      	uxth	r2, r3
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016b72:	b29b      	uxth	r3, r3
 8016b74:	3b01      	subs	r3, #1
 8016b76:	b29a      	uxth	r2, r3
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	f47f aec2 	bne.w	801690a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	2220      	movs	r2, #32
 8016b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	2200      	movs	r2, #0
 8016b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	2200      	movs	r2, #0
 8016b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	e000      	b.n	8016ba4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8016ba2:	2302      	movs	r3, #2
  }
}
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	3728      	adds	r7, #40	; 0x28
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd80      	pop	{r7, pc}
 8016bac:	00010004 	.word	0x00010004

08016bb0 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8016bb0:	b480      	push	{r7}
 8016bb2:	b087      	sub	sp, #28
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	60f8      	str	r0, [r7, #12]
 8016bb8:	4608      	mov	r0, r1
 8016bba:	4611      	mov	r1, r2
 8016bbc:	461a      	mov	r2, r3
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	817b      	strh	r3, [r7, #10]
 8016bc2:	460b      	mov	r3, r1
 8016bc4:	813b      	strh	r3, [r7, #8]
 8016bc6:	4613      	mov	r3, r2
 8016bc8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8016bca:	2300      	movs	r3, #0
 8016bcc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016bd4:	b2db      	uxtb	r3, r3
 8016bd6:	2b20      	cmp	r3, #32
 8016bd8:	f040 809a 	bne.w	8016d10 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8016bdc:	4b50      	ldr	r3, [pc, #320]	; (8016d20 <HAL_I2C_Mem_Read_IT+0x170>)
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	08db      	lsrs	r3, r3, #3
 8016be2:	4a50      	ldr	r2, [pc, #320]	; (8016d24 <HAL_I2C_Mem_Read_IT+0x174>)
 8016be4:	fba2 2303 	umull	r2, r3, r2, r3
 8016be8:	0a1a      	lsrs	r2, r3, #8
 8016bea:	4613      	mov	r3, r2
 8016bec:	009b      	lsls	r3, r3, #2
 8016bee:	4413      	add	r3, r2
 8016bf0:	009a      	lsls	r2, r3, #2
 8016bf2:	4413      	add	r3, r2
 8016bf4:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8016bf6:	697b      	ldr	r3, [r7, #20]
 8016bf8:	3b01      	subs	r3, #1
 8016bfa:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8016bfc:	697b      	ldr	r3, [r7, #20]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d116      	bne.n	8016c30 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	2200      	movs	r2, #0
 8016c06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	2220      	movs	r2, #32
 8016c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	2200      	movs	r2, #0
 8016c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c1c:	f043 0220 	orr.w	r2, r3, #32
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	2200      	movs	r2, #0
 8016c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8016c2c:	2301      	movs	r3, #1
 8016c2e:	e070      	b.n	8016d12 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	699b      	ldr	r3, [r3, #24]
 8016c36:	f003 0302 	and.w	r3, r3, #2
 8016c3a:	2b02      	cmp	r3, #2
 8016c3c:	d0db      	beq.n	8016bf6 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016c44:	2b01      	cmp	r3, #1
 8016c46:	d101      	bne.n	8016c4c <HAL_I2C_Mem_Read_IT+0x9c>
 8016c48:	2302      	movs	r3, #2
 8016c4a:	e062      	b.n	8016d12 <HAL_I2C_Mem_Read_IT+0x162>
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	2201      	movs	r2, #1
 8016c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	f003 0301 	and.w	r3, r3, #1
 8016c5e:	2b01      	cmp	r3, #1
 8016c60:	d007      	beq.n	8016c72 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	681a      	ldr	r2, [r3, #0]
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	f042 0201 	orr.w	r2, r2, #1
 8016c70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	681a      	ldr	r2, [r3, #0]
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8016c80:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	2222      	movs	r2, #34	; 0x22
 8016c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	2240      	movs	r2, #64	; 0x40
 8016c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	2200      	movs	r2, #0
 8016c96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	6a3a      	ldr	r2, [r7, #32]
 8016c9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8016c9e:	68fb      	ldr	r3, [r7, #12]
 8016ca0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016ca8:	b29a      	uxth	r2, r3
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016cae:	68fb      	ldr	r3, [r7, #12]
 8016cb0:	4a1d      	ldr	r2, [pc, #116]	; (8016d28 <HAL_I2C_Mem_Read_IT+0x178>)
 8016cb2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8016cb4:	897a      	ldrh	r2, [r7, #10]
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8016cba:	893a      	ldrh	r2, [r7, #8]
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8016cc0:	88fa      	ldrh	r2, [r7, #6]
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	2200      	movs	r2, #0
 8016cca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	681a      	ldr	r2, [r3, #0]
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8016cda:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	681a      	ldr	r2, [r3, #0]
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016cea:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016cec:	68fb      	ldr	r3, [r7, #12]
 8016cee:	2200      	movs	r2, #0
 8016cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d007      	beq.n	8016d0c <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	685a      	ldr	r2, [r3, #4]
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8016d0a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	e000      	b.n	8016d12 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8016d10:	2302      	movs	r3, #2
  }
}
 8016d12:	4618      	mov	r0, r3
 8016d14:	371c      	adds	r7, #28
 8016d16:	46bd      	mov	sp, r7
 8016d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d1c:	4770      	bx	lr
 8016d1e:	bf00      	nop
 8016d20:	20000698 	.word	0x20000698
 8016d24:	14f8b589 	.word	0x14f8b589
 8016d28:	ffff0000 	.word	0xffff0000

08016d2c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b08c      	sub	sp, #48	; 0x30
 8016d30:	af02      	add	r7, sp, #8
 8016d32:	60f8      	str	r0, [r7, #12]
 8016d34:	4608      	mov	r0, r1
 8016d36:	4611      	mov	r1, r2
 8016d38:	461a      	mov	r2, r3
 8016d3a:	4603      	mov	r3, r0
 8016d3c:	817b      	strh	r3, [r7, #10]
 8016d3e:	460b      	mov	r3, r1
 8016d40:	813b      	strh	r3, [r7, #8]
 8016d42:	4613      	mov	r3, r2
 8016d44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8016d46:	f7fe fc6d 	bl	8015624 <HAL_GetTick>
 8016d4a:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8016d4c:	2300      	movs	r3, #0
 8016d4e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016d56:	b2db      	uxtb	r3, r3
 8016d58:	2b20      	cmp	r3, #32
 8016d5a:	f040 8123 	bne.w	8016fa4 <HAL_I2C_Mem_Read_DMA+0x278>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8016d5e:	4b94      	ldr	r3, [pc, #592]	; (8016fb0 <HAL_I2C_Mem_Read_DMA+0x284>)
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	08db      	lsrs	r3, r3, #3
 8016d64:	4a93      	ldr	r2, [pc, #588]	; (8016fb4 <HAL_I2C_Mem_Read_DMA+0x288>)
 8016d66:	fba2 2303 	umull	r2, r3, r2, r3
 8016d6a:	0a1a      	lsrs	r2, r3, #8
 8016d6c:	4613      	mov	r3, r2
 8016d6e:	009b      	lsls	r3, r3, #2
 8016d70:	4413      	add	r3, r2
 8016d72:	009a      	lsls	r2, r3, #2
 8016d74:	4413      	add	r3, r2
 8016d76:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8016d78:	69fb      	ldr	r3, [r7, #28]
 8016d7a:	3b01      	subs	r3, #1
 8016d7c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8016d7e:	69fb      	ldr	r3, [r7, #28]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d116      	bne.n	8016db2 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	2200      	movs	r2, #0
 8016d88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	2220      	movs	r2, #32
 8016d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	2200      	movs	r2, #0
 8016d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d9e:	f043 0220 	orr.w	r2, r3, #32
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	2200      	movs	r2, #0
 8016daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8016dae:	2301      	movs	r3, #1
 8016db0:	e0f9      	b.n	8016fa6 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	699b      	ldr	r3, [r3, #24]
 8016db8:	f003 0302 	and.w	r3, r3, #2
 8016dbc:	2b02      	cmp	r3, #2
 8016dbe:	d0db      	beq.n	8016d78 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016dc6:	2b01      	cmp	r3, #1
 8016dc8:	d101      	bne.n	8016dce <HAL_I2C_Mem_Read_DMA+0xa2>
 8016dca:	2302      	movs	r3, #2
 8016dcc:	e0eb      	b.n	8016fa6 <HAL_I2C_Mem_Read_DMA+0x27a>
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	2201      	movs	r2, #1
 8016dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	f003 0301 	and.w	r3, r3, #1
 8016de0:	2b01      	cmp	r3, #1
 8016de2:	d007      	beq.n	8016df4 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	681a      	ldr	r2, [r3, #0]
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	f042 0201 	orr.w	r2, r2, #1
 8016df2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	681a      	ldr	r2, [r3, #0]
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8016e02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	2222      	movs	r2, #34	; 0x22
 8016e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	2240      	movs	r2, #64	; 0x40
 8016e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	2200      	movs	r2, #0
 8016e18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8016e24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016e2a:	b29a      	uxth	r2, r3
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	4a61      	ldr	r2, [pc, #388]	; (8016fb8 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8016e34:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	f000 8085 	beq.w	8016f4a <HAL_I2C_Mem_Read_DMA+0x21e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e44:	4a5d      	ldr	r2, [pc, #372]	; (8016fbc <HAL_I2C_Mem_Read_DMA+0x290>)
 8016e46:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e4c:	4a5c      	ldr	r2, [pc, #368]	; (8016fc0 <HAL_I2C_Mem_Read_DMA+0x294>)
 8016e4e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e54:	2200      	movs	r2, #0
 8016e56:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e64:	2200      	movs	r2, #0
 8016e66:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e6c:	2200      	movs	r2, #0
 8016e6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	3310      	adds	r3, #16
 8016e7a:	4619      	mov	r1, r3
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e80:	461a      	mov	r2, r3
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e86:	f7fe fd8b 	bl	80159a0 <HAL_DMA_Start_IT>
 8016e8a:	4603      	mov	r3, r0
 8016e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 8016e90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d144      	bne.n	8016f22 <HAL_I2C_Mem_Read_DMA+0x1f6>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8016e98:	88f8      	ldrh	r0, [r7, #6]
 8016e9a:	893a      	ldrh	r2, [r7, #8]
 8016e9c:	8979      	ldrh	r1, [r7, #10]
 8016e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ea0:	9301      	str	r3, [sp, #4]
 8016ea2:	2323      	movs	r3, #35	; 0x23
 8016ea4:	9300      	str	r3, [sp, #0]
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	68f8      	ldr	r0, [r7, #12]
 8016eaa:	f001 fc8b 	bl	80187c4 <I2C_RequestMemoryRead>
 8016eae:	4603      	mov	r3, r0
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d001      	beq.n	8016eb8 <HAL_I2C_Mem_Read_DMA+0x18c>
        {
          return HAL_ERROR;
 8016eb4:	2301      	movs	r3, #1
 8016eb6:	e076      	b.n	8016fa6 <HAL_I2C_Mem_Read_DMA+0x27a>
        }

        if (hi2c->XferSize == 1U)
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016ebc:	2b01      	cmp	r3, #1
 8016ebe:	d108      	bne.n	8016ed2 <HAL_I2C_Mem_Read_DMA+0x1a6>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	681a      	ldr	r2, [r3, #0]
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016ece:	601a      	str	r2, [r3, #0]
 8016ed0:	e007      	b.n	8016ee2 <HAL_I2C_Mem_Read_DMA+0x1b6>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	685a      	ldr	r2, [r3, #4]
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8016ee0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016ee2:	2300      	movs	r3, #0
 8016ee4:	61bb      	str	r3, [r7, #24]
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	695b      	ldr	r3, [r3, #20]
 8016eec:	61bb      	str	r3, [r7, #24]
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	699b      	ldr	r3, [r3, #24]
 8016ef4:	61bb      	str	r3, [r7, #24]
 8016ef6:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	2200      	movs	r2, #0
 8016efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8016f00:	68fb      	ldr	r3, [r7, #12]
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	685a      	ldr	r2, [r3, #4]
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016f0e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	685a      	ldr	r2, [r3, #4]
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8016f1e:	605a      	str	r2, [r3, #4]
 8016f20:	e03e      	b.n	8016fa0 <HAL_I2C_Mem_Read_DMA+0x274>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	2220      	movs	r2, #32
 8016f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f36:	f043 0210 	orr.w	r2, r3, #16
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	2200      	movs	r2, #0
 8016f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8016f46:	2301      	movs	r3, #1
 8016f48:	e02d      	b.n	8016fa6 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8016f4a:	88f8      	ldrh	r0, [r7, #6]
 8016f4c:	893a      	ldrh	r2, [r7, #8]
 8016f4e:	8979      	ldrh	r1, [r7, #10]
 8016f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f52:	9301      	str	r3, [sp, #4]
 8016f54:	2323      	movs	r3, #35	; 0x23
 8016f56:	9300      	str	r3, [sp, #0]
 8016f58:	4603      	mov	r3, r0
 8016f5a:	68f8      	ldr	r0, [r7, #12]
 8016f5c:	f001 fc32 	bl	80187c4 <I2C_RequestMemoryRead>
 8016f60:	4603      	mov	r3, r0
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d001      	beq.n	8016f6a <HAL_I2C_Mem_Read_DMA+0x23e>
      {
        return HAL_ERROR;
 8016f66:	2301      	movs	r3, #1
 8016f68:	e01d      	b.n	8016fa6 <HAL_I2C_Mem_Read_DMA+0x27a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	617b      	str	r3, [r7, #20]
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	695b      	ldr	r3, [r3, #20]
 8016f74:	617b      	str	r3, [r7, #20]
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	699b      	ldr	r3, [r3, #24]
 8016f7c:	617b      	str	r3, [r7, #20]
 8016f7e:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	681a      	ldr	r2, [r3, #0]
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016f8e:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	2220      	movs	r2, #32
 8016f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	e000      	b.n	8016fa6 <HAL_I2C_Mem_Read_DMA+0x27a>
  }
  else
  {
    return HAL_BUSY;
 8016fa4:	2302      	movs	r3, #2
  }
}
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	3728      	adds	r7, #40	; 0x28
 8016faa:	46bd      	mov	sp, r7
 8016fac:	bd80      	pop	{r7, pc}
 8016fae:	bf00      	nop
 8016fb0:	20000698 	.word	0x20000698
 8016fb4:	14f8b589 	.word	0x14f8b589
 8016fb8:	ffff0000 	.word	0xffff0000
 8016fbc:	08018991 	.word	0x08018991
 8016fc0:	08018b3b 	.word	0x08018b3b

08016fc4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	b088      	sub	sp, #32
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8016fcc:	2300      	movs	r3, #0
 8016fce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	681b      	ldr	r3, [r3, #0]
 8016fd4:	685b      	ldr	r3, [r3, #4]
 8016fd6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fdc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016fe4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016fec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8016fee:	7bfb      	ldrb	r3, [r7, #15]
 8016ff0:	2b10      	cmp	r3, #16
 8016ff2:	d003      	beq.n	8016ffc <HAL_I2C_EV_IRQHandler+0x38>
 8016ff4:	7bfb      	ldrb	r3, [r7, #15]
 8016ff6:	2b40      	cmp	r3, #64	; 0x40
 8016ff8:	f040 80b6 	bne.w	8017168 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	699b      	ldr	r3, [r3, #24]
 8017002:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	695b      	ldr	r3, [r3, #20]
 801700a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 801700c:	69fb      	ldr	r3, [r7, #28]
 801700e:	f003 0301 	and.w	r3, r3, #1
 8017012:	2b00      	cmp	r3, #0
 8017014:	d10d      	bne.n	8017032 <HAL_I2C_EV_IRQHandler+0x6e>
 8017016:	693b      	ldr	r3, [r7, #16]
 8017018:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801701c:	d003      	beq.n	8017026 <HAL_I2C_EV_IRQHandler+0x62>
 801701e:	693b      	ldr	r3, [r7, #16]
 8017020:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017024:	d101      	bne.n	801702a <HAL_I2C_EV_IRQHandler+0x66>
 8017026:	2301      	movs	r3, #1
 8017028:	e000      	b.n	801702c <HAL_I2C_EV_IRQHandler+0x68>
 801702a:	2300      	movs	r3, #0
 801702c:	2b01      	cmp	r3, #1
 801702e:	f000 8127 	beq.w	8017280 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017032:	69fb      	ldr	r3, [r7, #28]
 8017034:	f003 0301 	and.w	r3, r3, #1
 8017038:	2b00      	cmp	r3, #0
 801703a:	d00c      	beq.n	8017056 <HAL_I2C_EV_IRQHandler+0x92>
 801703c:	697b      	ldr	r3, [r7, #20]
 801703e:	0a5b      	lsrs	r3, r3, #9
 8017040:	f003 0301 	and.w	r3, r3, #1
 8017044:	2b00      	cmp	r3, #0
 8017046:	d006      	beq.n	8017056 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8017048:	6878      	ldr	r0, [r7, #4]
 801704a:	f002 f80f 	bl	801906c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 801704e:	6878      	ldr	r0, [r7, #4]
 8017050:	f000 fd12 	bl	8017a78 <I2C_Master_SB>
 8017054:	e087      	b.n	8017166 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017056:	69fb      	ldr	r3, [r7, #28]
 8017058:	08db      	lsrs	r3, r3, #3
 801705a:	f003 0301 	and.w	r3, r3, #1
 801705e:	2b00      	cmp	r3, #0
 8017060:	d009      	beq.n	8017076 <HAL_I2C_EV_IRQHandler+0xb2>
 8017062:	697b      	ldr	r3, [r7, #20]
 8017064:	0a5b      	lsrs	r3, r3, #9
 8017066:	f003 0301 	and.w	r3, r3, #1
 801706a:	2b00      	cmp	r3, #0
 801706c:	d003      	beq.n	8017076 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 801706e:	6878      	ldr	r0, [r7, #4]
 8017070:	f000 fd88 	bl	8017b84 <I2C_Master_ADD10>
 8017074:	e077      	b.n	8017166 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017076:	69fb      	ldr	r3, [r7, #28]
 8017078:	085b      	lsrs	r3, r3, #1
 801707a:	f003 0301 	and.w	r3, r3, #1
 801707e:	2b00      	cmp	r3, #0
 8017080:	d009      	beq.n	8017096 <HAL_I2C_EV_IRQHandler+0xd2>
 8017082:	697b      	ldr	r3, [r7, #20]
 8017084:	0a5b      	lsrs	r3, r3, #9
 8017086:	f003 0301 	and.w	r3, r3, #1
 801708a:	2b00      	cmp	r3, #0
 801708c:	d003      	beq.n	8017096 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 801708e:	6878      	ldr	r0, [r7, #4]
 8017090:	f000 fda2 	bl	8017bd8 <I2C_Master_ADDR>
 8017094:	e067      	b.n	8017166 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8017096:	69bb      	ldr	r3, [r7, #24]
 8017098:	089b      	lsrs	r3, r3, #2
 801709a:	f003 0301 	and.w	r3, r3, #1
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d030      	beq.n	8017104 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	685b      	ldr	r3, [r3, #4]
 80170a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80170ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80170b0:	f000 80e8 	beq.w	8017284 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80170b4:	69fb      	ldr	r3, [r7, #28]
 80170b6:	09db      	lsrs	r3, r3, #7
 80170b8:	f003 0301 	and.w	r3, r3, #1
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d00f      	beq.n	80170e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80170c0:	697b      	ldr	r3, [r7, #20]
 80170c2:	0a9b      	lsrs	r3, r3, #10
 80170c4:	f003 0301 	and.w	r3, r3, #1
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d009      	beq.n	80170e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80170cc:	69fb      	ldr	r3, [r7, #28]
 80170ce:	089b      	lsrs	r3, r3, #2
 80170d0:	f003 0301 	and.w	r3, r3, #1
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d103      	bne.n	80170e0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80170d8:	6878      	ldr	r0, [r7, #4]
 80170da:	f000 f9de 	bl	801749a <I2C_MasterTransmit_TXE>
 80170de:	e042      	b.n	8017166 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80170e0:	69fb      	ldr	r3, [r7, #28]
 80170e2:	089b      	lsrs	r3, r3, #2
 80170e4:	f003 0301 	and.w	r3, r3, #1
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	f000 80cb 	beq.w	8017284 <HAL_I2C_EV_IRQHandler+0x2c0>
 80170ee:	697b      	ldr	r3, [r7, #20]
 80170f0:	0a5b      	lsrs	r3, r3, #9
 80170f2:	f003 0301 	and.w	r3, r3, #1
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	f000 80c4 	beq.w	8017284 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80170fc:	6878      	ldr	r0, [r7, #4]
 80170fe:	f000 fa68 	bl	80175d2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017102:	e0bf      	b.n	8017284 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	685b      	ldr	r3, [r3, #4]
 801710a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801710e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017112:	f000 80b7 	beq.w	8017284 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017116:	69fb      	ldr	r3, [r7, #28]
 8017118:	099b      	lsrs	r3, r3, #6
 801711a:	f003 0301 	and.w	r3, r3, #1
 801711e:	2b00      	cmp	r3, #0
 8017120:	d00f      	beq.n	8017142 <HAL_I2C_EV_IRQHandler+0x17e>
 8017122:	697b      	ldr	r3, [r7, #20]
 8017124:	0a9b      	lsrs	r3, r3, #10
 8017126:	f003 0301 	and.w	r3, r3, #1
 801712a:	2b00      	cmp	r3, #0
 801712c:	d009      	beq.n	8017142 <HAL_I2C_EV_IRQHandler+0x17e>
 801712e:	69fb      	ldr	r3, [r7, #28]
 8017130:	089b      	lsrs	r3, r3, #2
 8017132:	f003 0301 	and.w	r3, r3, #1
 8017136:	2b00      	cmp	r3, #0
 8017138:	d103      	bne.n	8017142 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 801713a:	6878      	ldr	r0, [r7, #4]
 801713c:	f000 fb30 	bl	80177a0 <I2C_MasterReceive_RXNE>
 8017140:	e011      	b.n	8017166 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017142:	69fb      	ldr	r3, [r7, #28]
 8017144:	089b      	lsrs	r3, r3, #2
 8017146:	f003 0301 	and.w	r3, r3, #1
 801714a:	2b00      	cmp	r3, #0
 801714c:	f000 809a 	beq.w	8017284 <HAL_I2C_EV_IRQHandler+0x2c0>
 8017150:	697b      	ldr	r3, [r7, #20]
 8017152:	0a5b      	lsrs	r3, r3, #9
 8017154:	f003 0301 	and.w	r3, r3, #1
 8017158:	2b00      	cmp	r3, #0
 801715a:	f000 8093 	beq.w	8017284 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 801715e:	6878      	ldr	r0, [r7, #4]
 8017160:	f000 fba0 	bl	80178a4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017164:	e08e      	b.n	8017284 <HAL_I2C_EV_IRQHandler+0x2c0>
 8017166:	e08d      	b.n	8017284 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801716c:	2b00      	cmp	r3, #0
 801716e:	d004      	beq.n	801717a <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	695b      	ldr	r3, [r3, #20]
 8017176:	61fb      	str	r3, [r7, #28]
 8017178:	e007      	b.n	801718a <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	699b      	ldr	r3, [r3, #24]
 8017180:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	695b      	ldr	r3, [r3, #20]
 8017188:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801718a:	69fb      	ldr	r3, [r7, #28]
 801718c:	085b      	lsrs	r3, r3, #1
 801718e:	f003 0301 	and.w	r3, r3, #1
 8017192:	2b00      	cmp	r3, #0
 8017194:	d012      	beq.n	80171bc <HAL_I2C_EV_IRQHandler+0x1f8>
 8017196:	697b      	ldr	r3, [r7, #20]
 8017198:	0a5b      	lsrs	r3, r3, #9
 801719a:	f003 0301 	and.w	r3, r3, #1
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d00c      	beq.n	80171bc <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d003      	beq.n	80171b2 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	699b      	ldr	r3, [r3, #24]
 80171b0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80171b2:	69b9      	ldr	r1, [r7, #24]
 80171b4:	6878      	ldr	r0, [r7, #4]
 80171b6:	f000 ff5e 	bl	8018076 <I2C_Slave_ADDR>
 80171ba:	e066      	b.n	801728a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80171bc:	69fb      	ldr	r3, [r7, #28]
 80171be:	091b      	lsrs	r3, r3, #4
 80171c0:	f003 0301 	and.w	r3, r3, #1
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d009      	beq.n	80171dc <HAL_I2C_EV_IRQHandler+0x218>
 80171c8:	697b      	ldr	r3, [r7, #20]
 80171ca:	0a5b      	lsrs	r3, r3, #9
 80171cc:	f003 0301 	and.w	r3, r3, #1
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d003      	beq.n	80171dc <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80171d4:	6878      	ldr	r0, [r7, #4]
 80171d6:	f000 ff93 	bl	8018100 <I2C_Slave_STOPF>
 80171da:	e056      	b.n	801728a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80171dc:	7bbb      	ldrb	r3, [r7, #14]
 80171de:	2b21      	cmp	r3, #33	; 0x21
 80171e0:	d002      	beq.n	80171e8 <HAL_I2C_EV_IRQHandler+0x224>
 80171e2:	7bbb      	ldrb	r3, [r7, #14]
 80171e4:	2b29      	cmp	r3, #41	; 0x29
 80171e6:	d125      	bne.n	8017234 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80171e8:	69fb      	ldr	r3, [r7, #28]
 80171ea:	09db      	lsrs	r3, r3, #7
 80171ec:	f003 0301 	and.w	r3, r3, #1
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d00f      	beq.n	8017214 <HAL_I2C_EV_IRQHandler+0x250>
 80171f4:	697b      	ldr	r3, [r7, #20]
 80171f6:	0a9b      	lsrs	r3, r3, #10
 80171f8:	f003 0301 	and.w	r3, r3, #1
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d009      	beq.n	8017214 <HAL_I2C_EV_IRQHandler+0x250>
 8017200:	69fb      	ldr	r3, [r7, #28]
 8017202:	089b      	lsrs	r3, r3, #2
 8017204:	f003 0301 	and.w	r3, r3, #1
 8017208:	2b00      	cmp	r3, #0
 801720a:	d103      	bne.n	8017214 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 801720c:	6878      	ldr	r0, [r7, #4]
 801720e:	f000 fe74 	bl	8017efa <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017212:	e039      	b.n	8017288 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017214:	69fb      	ldr	r3, [r7, #28]
 8017216:	089b      	lsrs	r3, r3, #2
 8017218:	f003 0301 	and.w	r3, r3, #1
 801721c:	2b00      	cmp	r3, #0
 801721e:	d033      	beq.n	8017288 <HAL_I2C_EV_IRQHandler+0x2c4>
 8017220:	697b      	ldr	r3, [r7, #20]
 8017222:	0a5b      	lsrs	r3, r3, #9
 8017224:	f003 0301 	and.w	r3, r3, #1
 8017228:	2b00      	cmp	r3, #0
 801722a:	d02d      	beq.n	8017288 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 801722c:	6878      	ldr	r0, [r7, #4]
 801722e:	f000 fea1 	bl	8017f74 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017232:	e029      	b.n	8017288 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017234:	69fb      	ldr	r3, [r7, #28]
 8017236:	099b      	lsrs	r3, r3, #6
 8017238:	f003 0301 	and.w	r3, r3, #1
 801723c:	2b00      	cmp	r3, #0
 801723e:	d00f      	beq.n	8017260 <HAL_I2C_EV_IRQHandler+0x29c>
 8017240:	697b      	ldr	r3, [r7, #20]
 8017242:	0a9b      	lsrs	r3, r3, #10
 8017244:	f003 0301 	and.w	r3, r3, #1
 8017248:	2b00      	cmp	r3, #0
 801724a:	d009      	beq.n	8017260 <HAL_I2C_EV_IRQHandler+0x29c>
 801724c:	69fb      	ldr	r3, [r7, #28]
 801724e:	089b      	lsrs	r3, r3, #2
 8017250:	f003 0301 	and.w	r3, r3, #1
 8017254:	2b00      	cmp	r3, #0
 8017256:	d103      	bne.n	8017260 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8017258:	6878      	ldr	r0, [r7, #4]
 801725a:	f000 feac 	bl	8017fb6 <I2C_SlaveReceive_RXNE>
 801725e:	e014      	b.n	801728a <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017260:	69fb      	ldr	r3, [r7, #28]
 8017262:	089b      	lsrs	r3, r3, #2
 8017264:	f003 0301 	and.w	r3, r3, #1
 8017268:	2b00      	cmp	r3, #0
 801726a:	d00e      	beq.n	801728a <HAL_I2C_EV_IRQHandler+0x2c6>
 801726c:	697b      	ldr	r3, [r7, #20]
 801726e:	0a5b      	lsrs	r3, r3, #9
 8017270:	f003 0301 	and.w	r3, r3, #1
 8017274:	2b00      	cmp	r3, #0
 8017276:	d008      	beq.n	801728a <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8017278:	6878      	ldr	r0, [r7, #4]
 801727a:	f000 feda 	bl	8018032 <I2C_SlaveReceive_BTF>
 801727e:	e004      	b.n	801728a <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8017280:	bf00      	nop
 8017282:	e002      	b.n	801728a <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017284:	bf00      	nop
 8017286:	e000      	b.n	801728a <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017288:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 801728a:	3720      	adds	r7, #32
 801728c:	46bd      	mov	sp, r7
 801728e:	bd80      	pop	{r7, pc}

08017290 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8017290:	b580      	push	{r7, lr}
 8017292:	b08a      	sub	sp, #40	; 0x28
 8017294:	af00      	add	r7, sp, #0
 8017296:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	695b      	ldr	r3, [r3, #20]
 801729e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	685b      	ldr	r3, [r3, #4]
 80172a6:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80172a8:	2300      	movs	r3, #0
 80172aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80172b2:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80172b4:	6a3b      	ldr	r3, [r7, #32]
 80172b6:	0a1b      	lsrs	r3, r3, #8
 80172b8:	f003 0301 	and.w	r3, r3, #1
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d00e      	beq.n	80172de <HAL_I2C_ER_IRQHandler+0x4e>
 80172c0:	69fb      	ldr	r3, [r7, #28]
 80172c2:	0a1b      	lsrs	r3, r3, #8
 80172c4:	f003 0301 	and.w	r3, r3, #1
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d008      	beq.n	80172de <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80172cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ce:	f043 0301 	orr.w	r3, r3, #1
 80172d2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80172dc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80172de:	6a3b      	ldr	r3, [r7, #32]
 80172e0:	0a5b      	lsrs	r3, r3, #9
 80172e2:	f003 0301 	and.w	r3, r3, #1
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d00e      	beq.n	8017308 <HAL_I2C_ER_IRQHandler+0x78>
 80172ea:	69fb      	ldr	r3, [r7, #28]
 80172ec:	0a1b      	lsrs	r3, r3, #8
 80172ee:	f003 0301 	and.w	r3, r3, #1
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d008      	beq.n	8017308 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80172f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172f8:	f043 0302 	orr.w	r3, r3, #2
 80172fc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8017306:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8017308:	6a3b      	ldr	r3, [r7, #32]
 801730a:	0a9b      	lsrs	r3, r3, #10
 801730c:	f003 0301 	and.w	r3, r3, #1
 8017310:	2b00      	cmp	r3, #0
 8017312:	d03f      	beq.n	8017394 <HAL_I2C_ER_IRQHandler+0x104>
 8017314:	69fb      	ldr	r3, [r7, #28]
 8017316:	0a1b      	lsrs	r3, r3, #8
 8017318:	f003 0301 	and.w	r3, r3, #1
 801731c:	2b00      	cmp	r3, #0
 801731e:	d039      	beq.n	8017394 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8017320:	7efb      	ldrb	r3, [r7, #27]
 8017322:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017328:	b29b      	uxth	r3, r3
 801732a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017332:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017338:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 801733a:	7ebb      	ldrb	r3, [r7, #26]
 801733c:	2b20      	cmp	r3, #32
 801733e:	d112      	bne.n	8017366 <HAL_I2C_ER_IRQHandler+0xd6>
 8017340:	697b      	ldr	r3, [r7, #20]
 8017342:	2b00      	cmp	r3, #0
 8017344:	d10f      	bne.n	8017366 <HAL_I2C_ER_IRQHandler+0xd6>
 8017346:	7cfb      	ldrb	r3, [r7, #19]
 8017348:	2b21      	cmp	r3, #33	; 0x21
 801734a:	d008      	beq.n	801735e <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 801734c:	7cfb      	ldrb	r3, [r7, #19]
 801734e:	2b29      	cmp	r3, #41	; 0x29
 8017350:	d005      	beq.n	801735e <HAL_I2C_ER_IRQHandler+0xce>
 8017352:	7cfb      	ldrb	r3, [r7, #19]
 8017354:	2b28      	cmp	r3, #40	; 0x28
 8017356:	d106      	bne.n	8017366 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	2b21      	cmp	r3, #33	; 0x21
 801735c:	d103      	bne.n	8017366 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 801735e:	6878      	ldr	r0, [r7, #4]
 8017360:	f000 fffe 	bl	8018360 <I2C_Slave_AF>
 8017364:	e016      	b.n	8017394 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801736e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8017370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017372:	f043 0304 	orr.w	r3, r3, #4
 8017376:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8017378:	7efb      	ldrb	r3, [r7, #27]
 801737a:	2b10      	cmp	r3, #16
 801737c:	d002      	beq.n	8017384 <HAL_I2C_ER_IRQHandler+0xf4>
 801737e:	7efb      	ldrb	r3, [r7, #27]
 8017380:	2b40      	cmp	r3, #64	; 0x40
 8017382:	d107      	bne.n	8017394 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	681a      	ldr	r2, [r3, #0]
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017392:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8017394:	6a3b      	ldr	r3, [r7, #32]
 8017396:	0adb      	lsrs	r3, r3, #11
 8017398:	f003 0301 	and.w	r3, r3, #1
 801739c:	2b00      	cmp	r3, #0
 801739e:	d00e      	beq.n	80173be <HAL_I2C_ER_IRQHandler+0x12e>
 80173a0:	69fb      	ldr	r3, [r7, #28]
 80173a2:	0a1b      	lsrs	r3, r3, #8
 80173a4:	f003 0301 	and.w	r3, r3, #1
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d008      	beq.n	80173be <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80173ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ae:	f043 0308 	orr.w	r3, r3, #8
 80173b2:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80173bc:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80173be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d008      	beq.n	80173d6 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80173c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ca:	431a      	orrs	r2, r3
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80173d0:	6878      	ldr	r0, [r7, #4]
 80173d2:	f001 f835 	bl	8018440 <I2C_ITError>
  }
}
 80173d6:	bf00      	nop
 80173d8:	3728      	adds	r7, #40	; 0x28
 80173da:	46bd      	mov	sp, r7
 80173dc:	bd80      	pop	{r7, pc}

080173de <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80173de:	b480      	push	{r7}
 80173e0:	b083      	sub	sp, #12
 80173e2:	af00      	add	r7, sp, #0
 80173e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80173e6:	bf00      	nop
 80173e8:	370c      	adds	r7, #12
 80173ea:	46bd      	mov	sp, r7
 80173ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173f0:	4770      	bx	lr

080173f2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80173f2:	b480      	push	{r7}
 80173f4:	b083      	sub	sp, #12
 80173f6:	af00      	add	r7, sp, #0
 80173f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80173fa:	bf00      	nop
 80173fc:	370c      	adds	r7, #12
 80173fe:	46bd      	mov	sp, r7
 8017400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017404:	4770      	bx	lr

08017406 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017406:	b480      	push	{r7}
 8017408:	b083      	sub	sp, #12
 801740a:	af00      	add	r7, sp, #0
 801740c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801740e:	bf00      	nop
 8017410:	370c      	adds	r7, #12
 8017412:	46bd      	mov	sp, r7
 8017414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017418:	4770      	bx	lr

0801741a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801741a:	b480      	push	{r7}
 801741c:	b083      	sub	sp, #12
 801741e:	af00      	add	r7, sp, #0
 8017420:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8017422:	bf00      	nop
 8017424:	370c      	adds	r7, #12
 8017426:	46bd      	mov	sp, r7
 8017428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801742c:	4770      	bx	lr

0801742e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801742e:	b480      	push	{r7}
 8017430:	b083      	sub	sp, #12
 8017432:	af00      	add	r7, sp, #0
 8017434:	6078      	str	r0, [r7, #4]
 8017436:	460b      	mov	r3, r1
 8017438:	70fb      	strb	r3, [r7, #3]
 801743a:	4613      	mov	r3, r2
 801743c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801743e:	bf00      	nop
 8017440:	370c      	adds	r7, #12
 8017442:	46bd      	mov	sp, r7
 8017444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017448:	4770      	bx	lr

0801744a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801744a:	b480      	push	{r7}
 801744c:	b083      	sub	sp, #12
 801744e:	af00      	add	r7, sp, #0
 8017450:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8017452:	bf00      	nop
 8017454:	370c      	adds	r7, #12
 8017456:	46bd      	mov	sp, r7
 8017458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801745c:	4770      	bx	lr

0801745e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801745e:	b480      	push	{r7}
 8017460:	b083      	sub	sp, #12
 8017462:	af00      	add	r7, sp, #0
 8017464:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8017466:	bf00      	nop
 8017468:	370c      	adds	r7, #12
 801746a:	46bd      	mov	sp, r7
 801746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017470:	4770      	bx	lr

08017472 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8017472:	b480      	push	{r7}
 8017474:	b083      	sub	sp, #12
 8017476:	af00      	add	r7, sp, #0
 8017478:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 801747a:	bf00      	nop
 801747c:	370c      	adds	r7, #12
 801747e:	46bd      	mov	sp, r7
 8017480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017484:	4770      	bx	lr

08017486 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017486:	b480      	push	{r7}
 8017488:	b083      	sub	sp, #12
 801748a:	af00      	add	r7, sp, #0
 801748c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 801748e:	bf00      	nop
 8017490:	370c      	adds	r7, #12
 8017492:	46bd      	mov	sp, r7
 8017494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017498:	4770      	bx	lr

0801749a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801749a:	b580      	push	{r7, lr}
 801749c:	b084      	sub	sp, #16
 801749e:	af00      	add	r7, sp, #0
 80174a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80174a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80174b0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d150      	bne.n	8017562 <I2C_MasterTransmit_TXE+0xc8>
 80174c0:	7bfb      	ldrb	r3, [r7, #15]
 80174c2:	2b21      	cmp	r3, #33	; 0x21
 80174c4:	d14d      	bne.n	8017562 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80174c6:	68bb      	ldr	r3, [r7, #8]
 80174c8:	2b08      	cmp	r3, #8
 80174ca:	d01d      	beq.n	8017508 <I2C_MasterTransmit_TXE+0x6e>
 80174cc:	68bb      	ldr	r3, [r7, #8]
 80174ce:	2b20      	cmp	r3, #32
 80174d0:	d01a      	beq.n	8017508 <I2C_MasterTransmit_TXE+0x6e>
 80174d2:	68bb      	ldr	r3, [r7, #8]
 80174d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80174d8:	d016      	beq.n	8017508 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	685a      	ldr	r2, [r3, #4]
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80174e8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	2211      	movs	r2, #17
 80174ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	2200      	movs	r2, #0
 80174f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	2220      	movs	r2, #32
 80174fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8017500:	6878      	ldr	r0, [r7, #4]
 8017502:	f7ff ff6c 	bl	80173de <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8017506:	e060      	b.n	80175ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	685a      	ldr	r2, [r3, #4]
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017516:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	681a      	ldr	r2, [r3, #0]
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017526:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	2200      	movs	r2, #0
 801752c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	2220      	movs	r2, #32
 8017532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801753c:	b2db      	uxtb	r3, r3
 801753e:	2b40      	cmp	r3, #64	; 0x40
 8017540:	d107      	bne.n	8017552 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	2200      	movs	r2, #0
 8017546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 801754a:	6878      	ldr	r0, [r7, #4]
 801754c:	f7ff ff87 	bl	801745e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8017550:	e03b      	b.n	80175ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	2200      	movs	r2, #0
 8017556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801755a:	6878      	ldr	r0, [r7, #4]
 801755c:	f7ff ff3f 	bl	80173de <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8017560:	e033      	b.n	80175ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8017562:	7bfb      	ldrb	r3, [r7, #15]
 8017564:	2b21      	cmp	r3, #33	; 0x21
 8017566:	d005      	beq.n	8017574 <I2C_MasterTransmit_TXE+0xda>
 8017568:	7bbb      	ldrb	r3, [r7, #14]
 801756a:	2b40      	cmp	r3, #64	; 0x40
 801756c:	d12d      	bne.n	80175ca <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 801756e:	7bfb      	ldrb	r3, [r7, #15]
 8017570:	2b22      	cmp	r3, #34	; 0x22
 8017572:	d12a      	bne.n	80175ca <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017578:	b29b      	uxth	r3, r3
 801757a:	2b00      	cmp	r3, #0
 801757c:	d108      	bne.n	8017590 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	685a      	ldr	r2, [r3, #4]
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801758c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801758e:	e01c      	b.n	80175ca <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017596:	b2db      	uxtb	r3, r3
 8017598:	2b40      	cmp	r3, #64	; 0x40
 801759a:	d103      	bne.n	80175a4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 801759c:	6878      	ldr	r0, [r7, #4]
 801759e:	f000 f898 	bl	80176d2 <I2C_MemoryTransmit_TXE_BTF>
}
 80175a2:	e012      	b.n	80175ca <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175a8:	781a      	ldrb	r2, [r3, #0]
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175b4:	1c5a      	adds	r2, r3, #1
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80175be:	b29b      	uxth	r3, r3
 80175c0:	3b01      	subs	r3, #1
 80175c2:	b29a      	uxth	r2, r3
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80175c8:	e7ff      	b.n	80175ca <I2C_MasterTransmit_TXE+0x130>
 80175ca:	bf00      	nop
 80175cc:	3710      	adds	r7, #16
 80175ce:	46bd      	mov	sp, r7
 80175d0:	bd80      	pop	{r7, pc}

080175d2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80175d2:	b580      	push	{r7, lr}
 80175d4:	b084      	sub	sp, #16
 80175d6:	af00      	add	r7, sp, #0
 80175d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175de:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80175e6:	b2db      	uxtb	r3, r3
 80175e8:	2b21      	cmp	r3, #33	; 0x21
 80175ea:	d165      	bne.n	80176b8 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80175f0:	b29b      	uxth	r3, r3
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d012      	beq.n	801761c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175fa:	781a      	ldrb	r2, [r3, #0]
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017606:	1c5a      	adds	r2, r3, #1
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017610:	b29b      	uxth	r3, r3
 8017612:	3b01      	subs	r3, #1
 8017614:	b29a      	uxth	r2, r3
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 801761a:	e056      	b.n	80176ca <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	2b08      	cmp	r3, #8
 8017620:	d01d      	beq.n	801765e <I2C_MasterTransmit_BTF+0x8c>
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	2b20      	cmp	r3, #32
 8017626:	d01a      	beq.n	801765e <I2C_MasterTransmit_BTF+0x8c>
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801762e:	d016      	beq.n	801765e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	685a      	ldr	r2, [r3, #4]
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801763e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	2211      	movs	r2, #17
 8017644:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	2200      	movs	r2, #0
 801764a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	2220      	movs	r2, #32
 8017652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8017656:	6878      	ldr	r0, [r7, #4]
 8017658:	f7ff fec1 	bl	80173de <HAL_I2C_MasterTxCpltCallback>
}
 801765c:	e035      	b.n	80176ca <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	685a      	ldr	r2, [r3, #4]
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801766c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	681a      	ldr	r2, [r3, #0]
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801767c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	2200      	movs	r2, #0
 8017682:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	2220      	movs	r2, #32
 8017688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017692:	b2db      	uxtb	r3, r3
 8017694:	2b40      	cmp	r3, #64	; 0x40
 8017696:	d107      	bne.n	80176a8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	2200      	movs	r2, #0
 801769c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80176a0:	6878      	ldr	r0, [r7, #4]
 80176a2:	f7ff fedc 	bl	801745e <HAL_I2C_MemTxCpltCallback>
}
 80176a6:	e010      	b.n	80176ca <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	2200      	movs	r2, #0
 80176ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80176b0:	6878      	ldr	r0, [r7, #4]
 80176b2:	f7ff fe94 	bl	80173de <HAL_I2C_MasterTxCpltCallback>
}
 80176b6:	e008      	b.n	80176ca <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80176be:	b2db      	uxtb	r3, r3
 80176c0:	2b40      	cmp	r3, #64	; 0x40
 80176c2:	d102      	bne.n	80176ca <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 80176c4:	6878      	ldr	r0, [r7, #4]
 80176c6:	f000 f804 	bl	80176d2 <I2C_MemoryTransmit_TXE_BTF>
}
 80176ca:	bf00      	nop
 80176cc:	3710      	adds	r7, #16
 80176ce:	46bd      	mov	sp, r7
 80176d0:	bd80      	pop	{r7, pc}

080176d2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80176d2:	b480      	push	{r7}
 80176d4:	b083      	sub	sp, #12
 80176d6:	af00      	add	r7, sp, #0
 80176d8:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d11d      	bne.n	801771e <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176e6:	2b01      	cmp	r3, #1
 80176e8:	d10b      	bne.n	8017702 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80176ee:	b2da      	uxtb	r2, r3
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80176fa:	1c9a      	adds	r2, r3, #2
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8017700:	e048      	b.n	8017794 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017706:	b29b      	uxth	r3, r3
 8017708:	121b      	asrs	r3, r3, #8
 801770a:	b2da      	uxtb	r2, r3
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017716:	1c5a      	adds	r2, r3, #1
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	651a      	str	r2, [r3, #80]	; 0x50
}
 801771c:	e03a      	b.n	8017794 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017722:	2b01      	cmp	r3, #1
 8017724:	d10b      	bne.n	801773e <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801772a:	b2da      	uxtb	r2, r3
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017736:	1c5a      	adds	r2, r3, #1
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	651a      	str	r2, [r3, #80]	; 0x50
}
 801773c:	e02a      	b.n	8017794 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017742:	2b02      	cmp	r3, #2
 8017744:	d126      	bne.n	8017794 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801774c:	b2db      	uxtb	r3, r3
 801774e:	2b22      	cmp	r3, #34	; 0x22
 8017750:	d108      	bne.n	8017764 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	681a      	ldr	r2, [r3, #0]
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017760:	601a      	str	r2, [r3, #0]
}
 8017762:	e017      	b.n	8017794 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801776a:	b2db      	uxtb	r3, r3
 801776c:	2b21      	cmp	r3, #33	; 0x21
 801776e:	d111      	bne.n	8017794 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017774:	781a      	ldrb	r2, [r3, #0]
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017780:	1c5a      	adds	r2, r3, #1
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801778a:	b29b      	uxth	r3, r3
 801778c:	3b01      	subs	r3, #1
 801778e:	b29a      	uxth	r2, r3
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8017794:	bf00      	nop
 8017796:	370c      	adds	r7, #12
 8017798:	46bd      	mov	sp, r7
 801779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801779e:	4770      	bx	lr

080177a0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80177a0:	b580      	push	{r7, lr}
 80177a2:	b084      	sub	sp, #16
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80177ae:	b2db      	uxtb	r3, r3
 80177b0:	2b22      	cmp	r3, #34	; 0x22
 80177b2:	d173      	bne.n	801789c <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80177b8:	b29b      	uxth	r3, r3
 80177ba:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	2b03      	cmp	r3, #3
 80177c0:	d920      	bls.n	8017804 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	691a      	ldr	r2, [r3, #16]
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177cc:	b2d2      	uxtb	r2, r2
 80177ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177d4:	1c5a      	adds	r2, r3, #1
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80177de:	b29b      	uxth	r3, r3
 80177e0:	3b01      	subs	r3, #1
 80177e2:	b29a      	uxth	r2, r3
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80177ec:	b29b      	uxth	r3, r3
 80177ee:	2b03      	cmp	r3, #3
 80177f0:	d154      	bne.n	801789c <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	685a      	ldr	r2, [r3, #4]
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017800:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8017802:	e04b      	b.n	801789c <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017808:	2b02      	cmp	r3, #2
 801780a:	d047      	beq.n	801789c <I2C_MasterReceive_RXNE+0xfc>
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	2b01      	cmp	r3, #1
 8017810:	d002      	beq.n	8017818 <I2C_MasterReceive_RXNE+0x78>
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	2b00      	cmp	r3, #0
 8017816:	d141      	bne.n	801789c <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	681a      	ldr	r2, [r3, #0]
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017826:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	685a      	ldr	r2, [r3, #4]
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017836:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	691a      	ldr	r2, [r3, #16]
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017842:	b2d2      	uxtb	r2, r2
 8017844:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801784a:	1c5a      	adds	r2, r3, #1
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017854:	b29b      	uxth	r3, r3
 8017856:	3b01      	subs	r3, #1
 8017858:	b29a      	uxth	r2, r3
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	2220      	movs	r2, #32
 8017862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801786c:	b2db      	uxtb	r3, r3
 801786e:	2b40      	cmp	r3, #64	; 0x40
 8017870:	d10a      	bne.n	8017888 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	2200      	movs	r2, #0
 8017876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	2200      	movs	r2, #0
 801787e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8017880:	6878      	ldr	r0, [r7, #4]
 8017882:	f7fc f829 	bl	80138d8 <HAL_I2C_MemRxCpltCallback>
}
 8017886:	e009      	b.n	801789c <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	2200      	movs	r2, #0
 801788c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	2212      	movs	r2, #18
 8017894:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8017896:	6878      	ldr	r0, [r7, #4]
 8017898:	f7ff fdab 	bl	80173f2 <HAL_I2C_MasterRxCpltCallback>
}
 801789c:	bf00      	nop
 801789e:	3710      	adds	r7, #16
 80178a0:	46bd      	mov	sp, r7
 80178a2:	bd80      	pop	{r7, pc}

080178a4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80178a4:	b580      	push	{r7, lr}
 80178a6:	b084      	sub	sp, #16
 80178a8:	af00      	add	r7, sp, #0
 80178aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178b0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80178b6:	b29b      	uxth	r3, r3
 80178b8:	2b04      	cmp	r3, #4
 80178ba:	d11b      	bne.n	80178f4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	685a      	ldr	r2, [r3, #4]
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80178ca:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	691a      	ldr	r2, [r3, #16]
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178d6:	b2d2      	uxtb	r2, r2
 80178d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178de:	1c5a      	adds	r2, r3, #1
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80178e8:	b29b      	uxth	r3, r3
 80178ea:	3b01      	subs	r3, #1
 80178ec:	b29a      	uxth	r2, r3
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80178f2:	e0bd      	b.n	8017a70 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80178f8:	b29b      	uxth	r3, r3
 80178fa:	2b03      	cmp	r3, #3
 80178fc:	d129      	bne.n	8017952 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	685a      	ldr	r2, [r3, #4]
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801790c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	2b04      	cmp	r3, #4
 8017912:	d00a      	beq.n	801792a <I2C_MasterReceive_BTF+0x86>
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	2b02      	cmp	r3, #2
 8017918:	d007      	beq.n	801792a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	681a      	ldr	r2, [r3, #0]
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017928:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	691a      	ldr	r2, [r3, #16]
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017934:	b2d2      	uxtb	r2, r2
 8017936:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801793c:	1c5a      	adds	r2, r3, #1
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017946:	b29b      	uxth	r3, r3
 8017948:	3b01      	subs	r3, #1
 801794a:	b29a      	uxth	r2, r3
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8017950:	e08e      	b.n	8017a70 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017956:	b29b      	uxth	r3, r3
 8017958:	2b02      	cmp	r3, #2
 801795a:	d176      	bne.n	8017a4a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	2b01      	cmp	r3, #1
 8017960:	d002      	beq.n	8017968 <I2C_MasterReceive_BTF+0xc4>
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	2b10      	cmp	r3, #16
 8017966:	d108      	bne.n	801797a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	681a      	ldr	r2, [r3, #0]
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017976:	601a      	str	r2, [r3, #0]
 8017978:	e019      	b.n	80179ae <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	2b04      	cmp	r3, #4
 801797e:	d002      	beq.n	8017986 <I2C_MasterReceive_BTF+0xe2>
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	2b02      	cmp	r3, #2
 8017984:	d108      	bne.n	8017998 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	681a      	ldr	r2, [r3, #0]
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017994:	601a      	str	r2, [r3, #0]
 8017996:	e00a      	b.n	80179ae <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8017998:	68fb      	ldr	r3, [r7, #12]
 801799a:	2b10      	cmp	r3, #16
 801799c:	d007      	beq.n	80179ae <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	681a      	ldr	r2, [r3, #0]
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80179ac:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	691a      	ldr	r2, [r3, #16]
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179b8:	b2d2      	uxtb	r2, r2
 80179ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179c0:	1c5a      	adds	r2, r3, #1
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80179ca:	b29b      	uxth	r3, r3
 80179cc:	3b01      	subs	r3, #1
 80179ce:	b29a      	uxth	r2, r3
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	691a      	ldr	r2, [r3, #16]
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179de:	b2d2      	uxtb	r2, r2
 80179e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179e6:	1c5a      	adds	r2, r3, #1
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80179f0:	b29b      	uxth	r3, r3
 80179f2:	3b01      	subs	r3, #1
 80179f4:	b29a      	uxth	r2, r3
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	685a      	ldr	r2, [r3, #4]
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8017a08:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	2220      	movs	r2, #32
 8017a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017a18:	b2db      	uxtb	r3, r3
 8017a1a:	2b40      	cmp	r3, #64	; 0x40
 8017a1c:	d10a      	bne.n	8017a34 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	2200      	movs	r2, #0
 8017a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	2200      	movs	r2, #0
 8017a2a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8017a2c:	6878      	ldr	r0, [r7, #4]
 8017a2e:	f7fb ff53 	bl	80138d8 <HAL_I2C_MemRxCpltCallback>
}
 8017a32:	e01d      	b.n	8017a70 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	2200      	movs	r2, #0
 8017a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	2212      	movs	r2, #18
 8017a40:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8017a42:	6878      	ldr	r0, [r7, #4]
 8017a44:	f7ff fcd5 	bl	80173f2 <HAL_I2C_MasterRxCpltCallback>
}
 8017a48:	e012      	b.n	8017a70 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	691a      	ldr	r2, [r3, #16]
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a54:	b2d2      	uxtb	r2, r2
 8017a56:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a5c:	1c5a      	adds	r2, r3, #1
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017a66:	b29b      	uxth	r3, r3
 8017a68:	3b01      	subs	r3, #1
 8017a6a:	b29a      	uxth	r2, r3
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8017a70:	bf00      	nop
 8017a72:	3710      	adds	r7, #16
 8017a74:	46bd      	mov	sp, r7
 8017a76:	bd80      	pop	{r7, pc}

08017a78 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8017a78:	b480      	push	{r7}
 8017a7a:	b083      	sub	sp, #12
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017a86:	b2db      	uxtb	r3, r3
 8017a88:	2b40      	cmp	r3, #64	; 0x40
 8017a8a:	d117      	bne.n	8017abc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d109      	bne.n	8017aa8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a98:	b2db      	uxtb	r3, r3
 8017a9a:	461a      	mov	r2, r3
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8017aa4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8017aa6:	e067      	b.n	8017b78 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017aac:	b2db      	uxtb	r3, r3
 8017aae:	f043 0301 	orr.w	r3, r3, #1
 8017ab2:	b2da      	uxtb	r2, r3
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	611a      	str	r2, [r3, #16]
}
 8017aba:	e05d      	b.n	8017b78 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	691b      	ldr	r3, [r3, #16]
 8017ac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017ac4:	d133      	bne.n	8017b2e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017acc:	b2db      	uxtb	r3, r3
 8017ace:	2b21      	cmp	r3, #33	; 0x21
 8017ad0:	d109      	bne.n	8017ae6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ad6:	b2db      	uxtb	r3, r3
 8017ad8:	461a      	mov	r2, r3
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8017ae2:	611a      	str	r2, [r3, #16]
 8017ae4:	e008      	b.n	8017af8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017aea:	b2db      	uxtb	r3, r3
 8017aec:	f043 0301 	orr.w	r3, r3, #1
 8017af0:	b2da      	uxtb	r2, r3
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d004      	beq.n	8017b0a <I2C_Master_SB+0x92>
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d108      	bne.n	8017b1c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d032      	beq.n	8017b78 <I2C_Master_SB+0x100>
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d02d      	beq.n	8017b78 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	685a      	ldr	r2, [r3, #4]
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017b2a:	605a      	str	r2, [r3, #4]
}
 8017b2c:	e024      	b.n	8017b78 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d10e      	bne.n	8017b54 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b3a:	b29b      	uxth	r3, r3
 8017b3c:	11db      	asrs	r3, r3, #7
 8017b3e:	b2db      	uxtb	r3, r3
 8017b40:	f003 0306 	and.w	r3, r3, #6
 8017b44:	b2db      	uxtb	r3, r3
 8017b46:	f063 030f 	orn	r3, r3, #15
 8017b4a:	b2da      	uxtb	r2, r3
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	611a      	str	r2, [r3, #16]
}
 8017b52:	e011      	b.n	8017b78 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b58:	2b01      	cmp	r3, #1
 8017b5a:	d10d      	bne.n	8017b78 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b60:	b29b      	uxth	r3, r3
 8017b62:	11db      	asrs	r3, r3, #7
 8017b64:	b2db      	uxtb	r3, r3
 8017b66:	f003 0306 	and.w	r3, r3, #6
 8017b6a:	b2db      	uxtb	r3, r3
 8017b6c:	f063 030e 	orn	r3, r3, #14
 8017b70:	b2da      	uxtb	r2, r3
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	611a      	str	r2, [r3, #16]
}
 8017b78:	bf00      	nop
 8017b7a:	370c      	adds	r7, #12
 8017b7c:	46bd      	mov	sp, r7
 8017b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b82:	4770      	bx	lr

08017b84 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8017b84:	b480      	push	{r7}
 8017b86:	b083      	sub	sp, #12
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b90:	b2da      	uxtb	r2, r3
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d103      	bne.n	8017ba8 <I2C_Master_ADD10+0x24>
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d011      	beq.n	8017bcc <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d104      	bne.n	8017bbc <I2C_Master_ADD10+0x38>
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d007      	beq.n	8017bcc <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	681b      	ldr	r3, [r3, #0]
 8017bc0:	685a      	ldr	r2, [r3, #4]
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017bca:	605a      	str	r2, [r3, #4]
    }
  }
}
 8017bcc:	bf00      	nop
 8017bce:	370c      	adds	r7, #12
 8017bd0:	46bd      	mov	sp, r7
 8017bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bd6:	4770      	bx	lr

08017bd8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8017bd8:	b480      	push	{r7}
 8017bda:	b091      	sub	sp, #68	; 0x44
 8017bdc:	af00      	add	r7, sp, #0
 8017bde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017be6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017bf4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017bfc:	b2db      	uxtb	r3, r3
 8017bfe:	2b22      	cmp	r3, #34	; 0x22
 8017c00:	f040 8169 	bne.w	8017ed6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d10f      	bne.n	8017c2c <I2C_Master_ADDR+0x54>
 8017c0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017c10:	2b40      	cmp	r3, #64	; 0x40
 8017c12:	d10b      	bne.n	8017c2c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017c14:	2300      	movs	r3, #0
 8017c16:	633b      	str	r3, [r7, #48]	; 0x30
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	695b      	ldr	r3, [r3, #20]
 8017c1e:	633b      	str	r3, [r7, #48]	; 0x30
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	699b      	ldr	r3, [r3, #24]
 8017c26:	633b      	str	r3, [r7, #48]	; 0x30
 8017c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c2a:	e160      	b.n	8017eee <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d11d      	bne.n	8017c70 <I2C_Master_ADDR+0x98>
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	691b      	ldr	r3, [r3, #16]
 8017c38:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8017c3c:	d118      	bne.n	8017c70 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017c3e:	2300      	movs	r3, #0
 8017c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	695b      	ldr	r3, [r3, #20]
 8017c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	699b      	ldr	r3, [r3, #24]
 8017c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	681a      	ldr	r2, [r3, #0]
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017c62:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017c68:	1c5a      	adds	r2, r3, #1
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	651a      	str	r2, [r3, #80]	; 0x50
 8017c6e:	e13e      	b.n	8017eee <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017c74:	b29b      	uxth	r3, r3
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d113      	bne.n	8017ca2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	695b      	ldr	r3, [r3, #20]
 8017c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	699b      	ldr	r3, [r3, #24]
 8017c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8017c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	681a      	ldr	r2, [r3, #0]
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017c9e:	601a      	str	r2, [r3, #0]
 8017ca0:	e115      	b.n	8017ece <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017ca6:	b29b      	uxth	r3, r3
 8017ca8:	2b01      	cmp	r3, #1
 8017caa:	f040 808a 	bne.w	8017dc2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8017cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8017cb4:	d137      	bne.n	8017d26 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	681a      	ldr	r2, [r3, #0]
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017cc4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	681b      	ldr	r3, [r3, #0]
 8017cca:	685b      	ldr	r3, [r3, #4]
 8017ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017cd4:	d113      	bne.n	8017cfe <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	681a      	ldr	r2, [r3, #0]
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017ce4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	695b      	ldr	r3, [r3, #20]
 8017cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	699b      	ldr	r3, [r3, #24]
 8017cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8017cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cfc:	e0e7      	b.n	8017ece <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017cfe:	2300      	movs	r3, #0
 8017d00:	623b      	str	r3, [r7, #32]
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	695b      	ldr	r3, [r3, #20]
 8017d08:	623b      	str	r3, [r7, #32]
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	699b      	ldr	r3, [r3, #24]
 8017d10:	623b      	str	r3, [r7, #32]
 8017d12:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	681a      	ldr	r2, [r3, #0]
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017d22:	601a      	str	r2, [r3, #0]
 8017d24:	e0d3      	b.n	8017ece <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8017d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d28:	2b08      	cmp	r3, #8
 8017d2a:	d02e      	beq.n	8017d8a <I2C_Master_ADDR+0x1b2>
 8017d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d2e:	2b20      	cmp	r3, #32
 8017d30:	d02b      	beq.n	8017d8a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8017d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d34:	2b12      	cmp	r3, #18
 8017d36:	d102      	bne.n	8017d3e <I2C_Master_ADDR+0x166>
 8017d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d3a:	2b01      	cmp	r3, #1
 8017d3c:	d125      	bne.n	8017d8a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8017d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d40:	2b04      	cmp	r3, #4
 8017d42:	d00e      	beq.n	8017d62 <I2C_Master_ADDR+0x18a>
 8017d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d46:	2b02      	cmp	r3, #2
 8017d48:	d00b      	beq.n	8017d62 <I2C_Master_ADDR+0x18a>
 8017d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d4c:	2b10      	cmp	r3, #16
 8017d4e:	d008      	beq.n	8017d62 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	681b      	ldr	r3, [r3, #0]
 8017d54:	681a      	ldr	r2, [r3, #0]
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017d5e:	601a      	str	r2, [r3, #0]
 8017d60:	e007      	b.n	8017d72 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	681b      	ldr	r3, [r3, #0]
 8017d66:	681a      	ldr	r2, [r3, #0]
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017d70:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017d72:	2300      	movs	r3, #0
 8017d74:	61fb      	str	r3, [r7, #28]
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	695b      	ldr	r3, [r3, #20]
 8017d7c:	61fb      	str	r3, [r7, #28]
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	699b      	ldr	r3, [r3, #24]
 8017d84:	61fb      	str	r3, [r7, #28]
 8017d86:	69fb      	ldr	r3, [r7, #28]
 8017d88:	e0a1      	b.n	8017ece <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	681a      	ldr	r2, [r3, #0]
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017d98:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017d9a:	2300      	movs	r3, #0
 8017d9c:	61bb      	str	r3, [r7, #24]
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	695b      	ldr	r3, [r3, #20]
 8017da4:	61bb      	str	r3, [r7, #24]
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	699b      	ldr	r3, [r3, #24]
 8017dac:	61bb      	str	r3, [r7, #24]
 8017dae:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	681a      	ldr	r2, [r3, #0]
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017dbe:	601a      	str	r2, [r3, #0]
 8017dc0:	e085      	b.n	8017ece <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017dc6:	b29b      	uxth	r3, r3
 8017dc8:	2b02      	cmp	r3, #2
 8017dca:	d14d      	bne.n	8017e68 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8017dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dce:	2b04      	cmp	r3, #4
 8017dd0:	d016      	beq.n	8017e00 <I2C_Master_ADDR+0x228>
 8017dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dd4:	2b02      	cmp	r3, #2
 8017dd6:	d013      	beq.n	8017e00 <I2C_Master_ADDR+0x228>
 8017dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dda:	2b10      	cmp	r3, #16
 8017ddc:	d010      	beq.n	8017e00 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	681b      	ldr	r3, [r3, #0]
 8017de2:	681a      	ldr	r2, [r3, #0]
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017dec:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	681a      	ldr	r2, [r3, #0]
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017dfc:	601a      	str	r2, [r3, #0]
 8017dfe:	e007      	b.n	8017e10 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	681a      	ldr	r2, [r3, #0]
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017e0e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	685b      	ldr	r3, [r3, #4]
 8017e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017e1e:	d117      	bne.n	8017e50 <I2C_Master_ADDR+0x278>
 8017e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e22:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8017e26:	d00b      	beq.n	8017e40 <I2C_Master_ADDR+0x268>
 8017e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e2a:	2b01      	cmp	r3, #1
 8017e2c:	d008      	beq.n	8017e40 <I2C_Master_ADDR+0x268>
 8017e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e30:	2b08      	cmp	r3, #8
 8017e32:	d005      	beq.n	8017e40 <I2C_Master_ADDR+0x268>
 8017e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e36:	2b10      	cmp	r3, #16
 8017e38:	d002      	beq.n	8017e40 <I2C_Master_ADDR+0x268>
 8017e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e3c:	2b20      	cmp	r3, #32
 8017e3e:	d107      	bne.n	8017e50 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	685a      	ldr	r2, [r3, #4]
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8017e4e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017e50:	2300      	movs	r3, #0
 8017e52:	617b      	str	r3, [r7, #20]
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	695b      	ldr	r3, [r3, #20]
 8017e5a:	617b      	str	r3, [r7, #20]
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	699b      	ldr	r3, [r3, #24]
 8017e62:	617b      	str	r3, [r7, #20]
 8017e64:	697b      	ldr	r3, [r7, #20]
 8017e66:	e032      	b.n	8017ece <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	681a      	ldr	r2, [r3, #0]
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017e76:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	685b      	ldr	r3, [r3, #4]
 8017e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017e86:	d117      	bne.n	8017eb8 <I2C_Master_ADDR+0x2e0>
 8017e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8017e8e:	d00b      	beq.n	8017ea8 <I2C_Master_ADDR+0x2d0>
 8017e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e92:	2b01      	cmp	r3, #1
 8017e94:	d008      	beq.n	8017ea8 <I2C_Master_ADDR+0x2d0>
 8017e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e98:	2b08      	cmp	r3, #8
 8017e9a:	d005      	beq.n	8017ea8 <I2C_Master_ADDR+0x2d0>
 8017e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e9e:	2b10      	cmp	r3, #16
 8017ea0:	d002      	beq.n	8017ea8 <I2C_Master_ADDR+0x2d0>
 8017ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ea4:	2b20      	cmp	r3, #32
 8017ea6:	d107      	bne.n	8017eb8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	681b      	ldr	r3, [r3, #0]
 8017eac:	685a      	ldr	r2, [r3, #4]
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8017eb6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017eb8:	2300      	movs	r3, #0
 8017eba:	613b      	str	r3, [r7, #16]
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	695b      	ldr	r3, [r3, #20]
 8017ec2:	613b      	str	r3, [r7, #16]
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	699b      	ldr	r3, [r3, #24]
 8017eca:	613b      	str	r3, [r7, #16]
 8017ecc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	2200      	movs	r2, #0
 8017ed2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8017ed4:	e00b      	b.n	8017eee <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	60fb      	str	r3, [r7, #12]
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	695b      	ldr	r3, [r3, #20]
 8017ee0:	60fb      	str	r3, [r7, #12]
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	699b      	ldr	r3, [r3, #24]
 8017ee8:	60fb      	str	r3, [r7, #12]
 8017eea:	68fb      	ldr	r3, [r7, #12]
}
 8017eec:	e7ff      	b.n	8017eee <I2C_Master_ADDR+0x316>
 8017eee:	bf00      	nop
 8017ef0:	3744      	adds	r7, #68	; 0x44
 8017ef2:	46bd      	mov	sp, r7
 8017ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ef8:	4770      	bx	lr

08017efa <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8017efa:	b580      	push	{r7, lr}
 8017efc:	b084      	sub	sp, #16
 8017efe:	af00      	add	r7, sp, #0
 8017f00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017f08:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f0e:	b29b      	uxth	r3, r3
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d02b      	beq.n	8017f6c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f18:	781a      	ldrb	r2, [r3, #0]
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	681b      	ldr	r3, [r3, #0]
 8017f1e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f24:	1c5a      	adds	r2, r3, #1
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f2e:	b29b      	uxth	r3, r3
 8017f30:	3b01      	subs	r3, #1
 8017f32:	b29a      	uxth	r2, r3
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f3c:	b29b      	uxth	r3, r3
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d114      	bne.n	8017f6c <I2C_SlaveTransmit_TXE+0x72>
 8017f42:	7bfb      	ldrb	r3, [r7, #15]
 8017f44:	2b29      	cmp	r3, #41	; 0x29
 8017f46:	d111      	bne.n	8017f6c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	685a      	ldr	r2, [r3, #4]
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017f56:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	2221      	movs	r2, #33	; 0x21
 8017f5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	2228      	movs	r2, #40	; 0x28
 8017f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8017f66:	6878      	ldr	r0, [r7, #4]
 8017f68:	f7ff fa4d 	bl	8017406 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8017f6c:	bf00      	nop
 8017f6e:	3710      	adds	r7, #16
 8017f70:	46bd      	mov	sp, r7
 8017f72:	bd80      	pop	{r7, pc}

08017f74 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8017f74:	b480      	push	{r7}
 8017f76:	b083      	sub	sp, #12
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f80:	b29b      	uxth	r3, r3
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d011      	beq.n	8017faa <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f8a:	781a      	ldrb	r2, [r3, #0]
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f96:	1c5a      	adds	r2, r3, #1
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017fa0:	b29b      	uxth	r3, r3
 8017fa2:	3b01      	subs	r3, #1
 8017fa4:	b29a      	uxth	r2, r3
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8017faa:	bf00      	nop
 8017fac:	370c      	adds	r7, #12
 8017fae:	46bd      	mov	sp, r7
 8017fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb4:	4770      	bx	lr

08017fb6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8017fb6:	b580      	push	{r7, lr}
 8017fb8:	b084      	sub	sp, #16
 8017fba:	af00      	add	r7, sp, #0
 8017fbc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017fc4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017fca:	b29b      	uxth	r3, r3
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d02c      	beq.n	801802a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	691a      	ldr	r2, [r3, #16]
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fda:	b2d2      	uxtb	r2, r2
 8017fdc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fe2:	1c5a      	adds	r2, r3, #1
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017fec:	b29b      	uxth	r3, r3
 8017fee:	3b01      	subs	r3, #1
 8017ff0:	b29a      	uxth	r2, r3
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017ffa:	b29b      	uxth	r3, r3
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d114      	bne.n	801802a <I2C_SlaveReceive_RXNE+0x74>
 8018000:	7bfb      	ldrb	r3, [r7, #15]
 8018002:	2b2a      	cmp	r3, #42	; 0x2a
 8018004:	d111      	bne.n	801802a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	685a      	ldr	r2, [r3, #4]
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018014:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	2222      	movs	r2, #34	; 0x22
 801801a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	2228      	movs	r2, #40	; 0x28
 8018020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8018024:	6878      	ldr	r0, [r7, #4]
 8018026:	f7ff f9f8 	bl	801741a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801802a:	bf00      	nop
 801802c:	3710      	adds	r7, #16
 801802e:	46bd      	mov	sp, r7
 8018030:	bd80      	pop	{r7, pc}

08018032 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8018032:	b480      	push	{r7}
 8018034:	b083      	sub	sp, #12
 8018036:	af00      	add	r7, sp, #0
 8018038:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801803e:	b29b      	uxth	r3, r3
 8018040:	2b00      	cmp	r3, #0
 8018042:	d012      	beq.n	801806a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	691a      	ldr	r2, [r3, #16]
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801804e:	b2d2      	uxtb	r2, r2
 8018050:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018056:	1c5a      	adds	r2, r3, #1
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018060:	b29b      	uxth	r3, r3
 8018062:	3b01      	subs	r3, #1
 8018064:	b29a      	uxth	r2, r3
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801806a:	bf00      	nop
 801806c:	370c      	adds	r7, #12
 801806e:	46bd      	mov	sp, r7
 8018070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018074:	4770      	bx	lr

08018076 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8018076:	b580      	push	{r7, lr}
 8018078:	b084      	sub	sp, #16
 801807a:	af00      	add	r7, sp, #0
 801807c:	6078      	str	r0, [r7, #4]
 801807e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8018080:	2300      	movs	r3, #0
 8018082:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801808a:	b2db      	uxtb	r3, r3
 801808c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8018090:	2b28      	cmp	r3, #40	; 0x28
 8018092:	d127      	bne.n	80180e4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	685a      	ldr	r2, [r3, #4]
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80180a2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80180a4:	683b      	ldr	r3, [r7, #0]
 80180a6:	089b      	lsrs	r3, r3, #2
 80180a8:	f003 0301 	and.w	r3, r3, #1
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d101      	bne.n	80180b4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80180b0:	2301      	movs	r3, #1
 80180b2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80180b4:	683b      	ldr	r3, [r7, #0]
 80180b6:	09db      	lsrs	r3, r3, #7
 80180b8:	f003 0301 	and.w	r3, r3, #1
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d103      	bne.n	80180c8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	68db      	ldr	r3, [r3, #12]
 80180c4:	81bb      	strh	r3, [r7, #12]
 80180c6:	e002      	b.n	80180ce <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	699b      	ldr	r3, [r3, #24]
 80180cc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	2200      	movs	r2, #0
 80180d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80180d6:	89ba      	ldrh	r2, [r7, #12]
 80180d8:	7bfb      	ldrb	r3, [r7, #15]
 80180da:	4619      	mov	r1, r3
 80180dc:	6878      	ldr	r0, [r7, #4]
 80180de:	f7ff f9a6 	bl	801742e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80180e2:	e008      	b.n	80180f6 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	f06f 0202 	mvn.w	r2, #2
 80180ec:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	2200      	movs	r2, #0
 80180f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80180f6:	bf00      	nop
 80180f8:	3710      	adds	r7, #16
 80180fa:	46bd      	mov	sp, r7
 80180fc:	bd80      	pop	{r7, pc}
	...

08018100 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8018100:	b580      	push	{r7, lr}
 8018102:	b084      	sub	sp, #16
 8018104:	af00      	add	r7, sp, #0
 8018106:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801810e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	685a      	ldr	r2, [r3, #4]
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801811e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8018120:	2300      	movs	r3, #0
 8018122:	60bb      	str	r3, [r7, #8]
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	695b      	ldr	r3, [r3, #20]
 801812a:	60bb      	str	r3, [r7, #8]
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	681a      	ldr	r2, [r3, #0]
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	f042 0201 	orr.w	r2, r2, #1
 801813a:	601a      	str	r2, [r3, #0]
 801813c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	681a      	ldr	r2, [r3, #0]
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801814c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	685b      	ldr	r3, [r3, #4]
 8018154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801815c:	d172      	bne.n	8018244 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801815e:	7bfb      	ldrb	r3, [r7, #15]
 8018160:	2b22      	cmp	r3, #34	; 0x22
 8018162:	d002      	beq.n	801816a <I2C_Slave_STOPF+0x6a>
 8018164:	7bfb      	ldrb	r3, [r7, #15]
 8018166:	2b2a      	cmp	r3, #42	; 0x2a
 8018168:	d135      	bne.n	80181d6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	685b      	ldr	r3, [r3, #4]
 8018172:	b29a      	uxth	r2, r3
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801817c:	b29b      	uxth	r3, r3
 801817e:	2b00      	cmp	r3, #0
 8018180:	d005      	beq.n	801818e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018186:	f043 0204 	orr.w	r2, r3, #4
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	685a      	ldr	r2, [r3, #4]
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801819c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181a2:	4618      	mov	r0, r3
 80181a4:	f7fd fe00 	bl	8015da8 <HAL_DMA_GetState>
 80181a8:	4603      	mov	r3, r0
 80181aa:	2b01      	cmp	r3, #1
 80181ac:	d049      	beq.n	8018242 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181b2:	4a69      	ldr	r2, [pc, #420]	; (8018358 <I2C_Slave_STOPF+0x258>)
 80181b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181ba:	4618      	mov	r0, r3
 80181bc:	f7fd fc48 	bl	8015a50 <HAL_DMA_Abort_IT>
 80181c0:	4603      	mov	r3, r0
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d03d      	beq.n	8018242 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80181cc:	687a      	ldr	r2, [r7, #4]
 80181ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80181d0:	4610      	mov	r0, r2
 80181d2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80181d4:	e035      	b.n	8018242 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	685b      	ldr	r3, [r3, #4]
 80181de:	b29a      	uxth	r2, r3
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80181e8:	b29b      	uxth	r3, r3
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d005      	beq.n	80181fa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181f2:	f043 0204 	orr.w	r2, r3, #4
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	685a      	ldr	r2, [r3, #4]
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018208:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801820e:	4618      	mov	r0, r3
 8018210:	f7fd fdca 	bl	8015da8 <HAL_DMA_GetState>
 8018214:	4603      	mov	r3, r0
 8018216:	2b01      	cmp	r3, #1
 8018218:	d014      	beq.n	8018244 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801821e:	4a4e      	ldr	r2, [pc, #312]	; (8018358 <I2C_Slave_STOPF+0x258>)
 8018220:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018226:	4618      	mov	r0, r3
 8018228:	f7fd fc12 	bl	8015a50 <HAL_DMA_Abort_IT>
 801822c:	4603      	mov	r3, r0
 801822e:	2b00      	cmp	r3, #0
 8018230:	d008      	beq.n	8018244 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018238:	687a      	ldr	r2, [r7, #4]
 801823a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801823c:	4610      	mov	r0, r2
 801823e:	4798      	blx	r3
 8018240:	e000      	b.n	8018244 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018242:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018248:	b29b      	uxth	r3, r3
 801824a:	2b00      	cmp	r3, #0
 801824c:	d03e      	beq.n	80182cc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	695b      	ldr	r3, [r3, #20]
 8018254:	f003 0304 	and.w	r3, r3, #4
 8018258:	2b04      	cmp	r3, #4
 801825a:	d112      	bne.n	8018282 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	691a      	ldr	r2, [r3, #16]
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018266:	b2d2      	uxtb	r2, r2
 8018268:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801826e:	1c5a      	adds	r2, r3, #1
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018278:	b29b      	uxth	r3, r3
 801827a:	3b01      	subs	r3, #1
 801827c:	b29a      	uxth	r2, r3
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	695b      	ldr	r3, [r3, #20]
 8018288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801828c:	2b40      	cmp	r3, #64	; 0x40
 801828e:	d112      	bne.n	80182b6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	681b      	ldr	r3, [r3, #0]
 8018294:	691a      	ldr	r2, [r3, #16]
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801829a:	b2d2      	uxtb	r2, r2
 801829c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182a2:	1c5a      	adds	r2, r3, #1
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80182ac:	b29b      	uxth	r3, r3
 80182ae:	3b01      	subs	r3, #1
 80182b0:	b29a      	uxth	r2, r3
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80182ba:	b29b      	uxth	r3, r3
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d005      	beq.n	80182cc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182c4:	f043 0204 	orr.w	r2, r3, #4
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d003      	beq.n	80182dc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80182d4:	6878      	ldr	r0, [r7, #4]
 80182d6:	f000 f8b3 	bl	8018440 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80182da:	e039      	b.n	8018350 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80182dc:	7bfb      	ldrb	r3, [r7, #15]
 80182de:	2b2a      	cmp	r3, #42	; 0x2a
 80182e0:	d109      	bne.n	80182f6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	2200      	movs	r2, #0
 80182e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	2228      	movs	r2, #40	; 0x28
 80182ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80182f0:	6878      	ldr	r0, [r7, #4]
 80182f2:	f7ff f892 	bl	801741a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80182fc:	b2db      	uxtb	r3, r3
 80182fe:	2b28      	cmp	r3, #40	; 0x28
 8018300:	d111      	bne.n	8018326 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	4a15      	ldr	r2, [pc, #84]	; (801835c <I2C_Slave_STOPF+0x25c>)
 8018306:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	2200      	movs	r2, #0
 801830c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	2220      	movs	r2, #32
 8018312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	2200      	movs	r2, #0
 801831a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 801831e:	6878      	ldr	r0, [r7, #4]
 8018320:	f7ff f893 	bl	801744a <HAL_I2C_ListenCpltCallback>
}
 8018324:	e014      	b.n	8018350 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801832a:	2b22      	cmp	r3, #34	; 0x22
 801832c:	d002      	beq.n	8018334 <I2C_Slave_STOPF+0x234>
 801832e:	7bfb      	ldrb	r3, [r7, #15]
 8018330:	2b22      	cmp	r3, #34	; 0x22
 8018332:	d10d      	bne.n	8018350 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	2200      	movs	r2, #0
 8018338:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	2220      	movs	r2, #32
 801833e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	2200      	movs	r2, #0
 8018346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801834a:	6878      	ldr	r0, [r7, #4]
 801834c:	f7ff f865 	bl	801741a <HAL_I2C_SlaveRxCpltCallback>
}
 8018350:	bf00      	nop
 8018352:	3710      	adds	r7, #16
 8018354:	46bd      	mov	sp, r7
 8018356:	bd80      	pop	{r7, pc}
 8018358:	08018bb5 	.word	0x08018bb5
 801835c:	ffff0000 	.word	0xffff0000

08018360 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8018360:	b580      	push	{r7, lr}
 8018362:	b084      	sub	sp, #16
 8018364:	af00      	add	r7, sp, #0
 8018366:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801836e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018374:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8018376:	68bb      	ldr	r3, [r7, #8]
 8018378:	2b08      	cmp	r3, #8
 801837a:	d002      	beq.n	8018382 <I2C_Slave_AF+0x22>
 801837c:	68bb      	ldr	r3, [r7, #8]
 801837e:	2b20      	cmp	r3, #32
 8018380:	d129      	bne.n	80183d6 <I2C_Slave_AF+0x76>
 8018382:	7bfb      	ldrb	r3, [r7, #15]
 8018384:	2b28      	cmp	r3, #40	; 0x28
 8018386:	d126      	bne.n	80183d6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	4a2c      	ldr	r2, [pc, #176]	; (801843c <I2C_Slave_AF+0xdc>)
 801838c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	685a      	ldr	r2, [r3, #4]
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801839c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80183a6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	681a      	ldr	r2, [r3, #0]
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80183b6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	2200      	movs	r2, #0
 80183bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	2220      	movs	r2, #32
 80183c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	2200      	movs	r2, #0
 80183ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80183ce:	6878      	ldr	r0, [r7, #4]
 80183d0:	f7ff f83b 	bl	801744a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80183d4:	e02e      	b.n	8018434 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80183d6:	7bfb      	ldrb	r3, [r7, #15]
 80183d8:	2b21      	cmp	r3, #33	; 0x21
 80183da:	d126      	bne.n	801842a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	4a17      	ldr	r2, [pc, #92]	; (801843c <I2C_Slave_AF+0xdc>)
 80183e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	2221      	movs	r2, #33	; 0x21
 80183e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	2220      	movs	r2, #32
 80183ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	2200      	movs	r2, #0
 80183f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	685a      	ldr	r2, [r3, #4]
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018406:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8018410:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	681a      	ldr	r2, [r3, #0]
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018420:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8018422:	6878      	ldr	r0, [r7, #4]
 8018424:	f7fe ffef 	bl	8017406 <HAL_I2C_SlaveTxCpltCallback>
}
 8018428:	e004      	b.n	8018434 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8018432:	615a      	str	r2, [r3, #20]
}
 8018434:	bf00      	nop
 8018436:	3710      	adds	r7, #16
 8018438:	46bd      	mov	sp, r7
 801843a:	bd80      	pop	{r7, pc}
 801843c:	ffff0000 	.word	0xffff0000

08018440 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8018440:	b580      	push	{r7, lr}
 8018442:	b084      	sub	sp, #16
 8018444:	af00      	add	r7, sp, #0
 8018446:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801844e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018456:	b2db      	uxtb	r3, r3
 8018458:	2b10      	cmp	r3, #16
 801845a:	d10a      	bne.n	8018472 <I2C_ITError+0x32>
 801845c:	7bfb      	ldrb	r3, [r7, #15]
 801845e:	2b22      	cmp	r3, #34	; 0x22
 8018460:	d107      	bne.n	8018472 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	681a      	ldr	r2, [r3, #0]
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018470:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8018472:	7bfb      	ldrb	r3, [r7, #15]
 8018474:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8018478:	2b28      	cmp	r3, #40	; 0x28
 801847a:	d107      	bne.n	801848c <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	2200      	movs	r2, #0
 8018480:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	2228      	movs	r2, #40	; 0x28
 8018486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801848a:	e015      	b.n	80184b8 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	685b      	ldr	r3, [r3, #4]
 8018492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801849a:	d006      	beq.n	80184aa <I2C_ITError+0x6a>
 801849c:	7bfb      	ldrb	r3, [r7, #15]
 801849e:	2b60      	cmp	r3, #96	; 0x60
 80184a0:	d003      	beq.n	80184aa <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	2220      	movs	r2, #32
 80184a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	2200      	movs	r2, #0
 80184ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	2200      	movs	r2, #0
 80184b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	685b      	ldr	r3, [r3, #4]
 80184be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80184c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80184c6:	d162      	bne.n	801858e <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	685a      	ldr	r2, [r3, #4]
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80184d6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80184dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80184e0:	b2db      	uxtb	r3, r3
 80184e2:	2b01      	cmp	r3, #1
 80184e4:	d020      	beq.n	8018528 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80184ea:	4a6a      	ldr	r2, [pc, #424]	; (8018694 <I2C_ITError+0x254>)
 80184ec:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80184f2:	4618      	mov	r0, r3
 80184f4:	f7fd faac 	bl	8015a50 <HAL_DMA_Abort_IT>
 80184f8:	4603      	mov	r3, r0
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	f000 8089 	beq.w	8018612 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	681a      	ldr	r2, [r3, #0]
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	f022 0201 	bic.w	r2, r2, #1
 801850e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	2220      	movs	r2, #32
 8018514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801851c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801851e:	687a      	ldr	r2, [r7, #4]
 8018520:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8018522:	4610      	mov	r0, r2
 8018524:	4798      	blx	r3
 8018526:	e074      	b.n	8018612 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801852c:	4a59      	ldr	r2, [pc, #356]	; (8018694 <I2C_ITError+0x254>)
 801852e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018534:	4618      	mov	r0, r3
 8018536:	f7fd fa8b 	bl	8015a50 <HAL_DMA_Abort_IT>
 801853a:	4603      	mov	r3, r0
 801853c:	2b00      	cmp	r3, #0
 801853e:	d068      	beq.n	8018612 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	695b      	ldr	r3, [r3, #20]
 8018546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801854a:	2b40      	cmp	r3, #64	; 0x40
 801854c:	d10b      	bne.n	8018566 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	691a      	ldr	r2, [r3, #16]
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018558:	b2d2      	uxtb	r2, r2
 801855a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018560:	1c5a      	adds	r2, r3, #1
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	681a      	ldr	r2, [r3, #0]
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	f022 0201 	bic.w	r2, r2, #1
 8018574:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	2220      	movs	r2, #32
 801857a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018584:	687a      	ldr	r2, [r7, #4]
 8018586:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8018588:	4610      	mov	r0, r2
 801858a:	4798      	blx	r3
 801858c:	e041      	b.n	8018612 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018594:	b2db      	uxtb	r3, r3
 8018596:	2b60      	cmp	r3, #96	; 0x60
 8018598:	d125      	bne.n	80185e6 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	2220      	movs	r2, #32
 801859e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	2200      	movs	r2, #0
 80185a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	695b      	ldr	r3, [r3, #20]
 80185ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80185b2:	2b40      	cmp	r3, #64	; 0x40
 80185b4:	d10b      	bne.n	80185ce <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	691a      	ldr	r2, [r3, #16]
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185c0:	b2d2      	uxtb	r2, r2
 80185c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185c8:	1c5a      	adds	r2, r3, #1
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	681a      	ldr	r2, [r3, #0]
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	f022 0201 	bic.w	r2, r2, #1
 80185dc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80185de:	6878      	ldr	r0, [r7, #4]
 80185e0:	f7fe ff51 	bl	8017486 <HAL_I2C_AbortCpltCallback>
 80185e4:	e015      	b.n	8018612 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	695b      	ldr	r3, [r3, #20]
 80185ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80185f0:	2b40      	cmp	r3, #64	; 0x40
 80185f2:	d10b      	bne.n	801860c <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	691a      	ldr	r2, [r3, #16]
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185fe:	b2d2      	uxtb	r2, r2
 8018600:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018606:	1c5a      	adds	r2, r3, #1
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801860c:	6878      	ldr	r0, [r7, #4]
 801860e:	f7fe ff30 	bl	8017472 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018616:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8018618:	68bb      	ldr	r3, [r7, #8]
 801861a:	f003 0301 	and.w	r3, r3, #1
 801861e:	2b00      	cmp	r3, #0
 8018620:	d10e      	bne.n	8018640 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8018622:	68bb      	ldr	r3, [r7, #8]
 8018624:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8018628:	2b00      	cmp	r3, #0
 801862a:	d109      	bne.n	8018640 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801862c:	68bb      	ldr	r3, [r7, #8]
 801862e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8018632:	2b00      	cmp	r3, #0
 8018634:	d104      	bne.n	8018640 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8018636:	68bb      	ldr	r3, [r7, #8]
 8018638:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801863c:	2b00      	cmp	r3, #0
 801863e:	d007      	beq.n	8018650 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	685a      	ldr	r2, [r3, #4]
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801864e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018656:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801865c:	f003 0304 	and.w	r3, r3, #4
 8018660:	2b04      	cmp	r3, #4
 8018662:	d113      	bne.n	801868c <I2C_ITError+0x24c>
 8018664:	7bfb      	ldrb	r3, [r7, #15]
 8018666:	2b28      	cmp	r3, #40	; 0x28
 8018668:	d110      	bne.n	801868c <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	4a0a      	ldr	r2, [pc, #40]	; (8018698 <I2C_ITError+0x258>)
 801866e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	2200      	movs	r2, #0
 8018674:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	2220      	movs	r2, #32
 801867a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	2200      	movs	r2, #0
 8018682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8018686:	6878      	ldr	r0, [r7, #4]
 8018688:	f7fe fedf 	bl	801744a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801868c:	bf00      	nop
 801868e:	3710      	adds	r7, #16
 8018690:	46bd      	mov	sp, r7
 8018692:	bd80      	pop	{r7, pc}
 8018694:	08018bb5 	.word	0x08018bb5
 8018698:	ffff0000 	.word	0xffff0000

0801869c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801869c:	b580      	push	{r7, lr}
 801869e:	b088      	sub	sp, #32
 80186a0:	af02      	add	r7, sp, #8
 80186a2:	60f8      	str	r0, [r7, #12]
 80186a4:	4608      	mov	r0, r1
 80186a6:	4611      	mov	r1, r2
 80186a8:	461a      	mov	r2, r3
 80186aa:	4603      	mov	r3, r0
 80186ac:	817b      	strh	r3, [r7, #10]
 80186ae:	460b      	mov	r3, r1
 80186b0:	813b      	strh	r3, [r7, #8]
 80186b2:	4613      	mov	r3, r2
 80186b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	681a      	ldr	r2, [r3, #0]
 80186bc:	68fb      	ldr	r3, [r7, #12]
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80186c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80186c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186c8:	9300      	str	r3, [sp, #0]
 80186ca:	6a3b      	ldr	r3, [r7, #32]
 80186cc:	2200      	movs	r2, #0
 80186ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80186d2:	68f8      	ldr	r0, [r7, #12]
 80186d4:	f000 faed 	bl	8018cb2 <I2C_WaitOnFlagUntilTimeout>
 80186d8:	4603      	mov	r3, r0
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d00c      	beq.n	80186f8 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	681b      	ldr	r3, [r3, #0]
 80186e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d003      	beq.n	80186f4 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80186f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80186f4:	2303      	movs	r3, #3
 80186f6:	e05f      	b.n	80187b8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80186f8:	897b      	ldrh	r3, [r7, #10]
 80186fa:	b2db      	uxtb	r3, r3
 80186fc:	461a      	mov	r2, r3
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8018706:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8018708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801870a:	6a3a      	ldr	r2, [r7, #32]
 801870c:	492c      	ldr	r1, [pc, #176]	; (80187c0 <I2C_RequestMemoryWrite+0x124>)
 801870e:	68f8      	ldr	r0, [r7, #12]
 8018710:	f000 fb26 	bl	8018d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8018714:	4603      	mov	r3, r0
 8018716:	2b00      	cmp	r3, #0
 8018718:	d001      	beq.n	801871e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 801871a:	2301      	movs	r3, #1
 801871c:	e04c      	b.n	80187b8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801871e:	2300      	movs	r3, #0
 8018720:	617b      	str	r3, [r7, #20]
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	695b      	ldr	r3, [r3, #20]
 8018728:	617b      	str	r3, [r7, #20]
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	699b      	ldr	r3, [r3, #24]
 8018730:	617b      	str	r3, [r7, #20]
 8018732:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018736:	6a39      	ldr	r1, [r7, #32]
 8018738:	68f8      	ldr	r0, [r7, #12]
 801873a:	f000 fb90 	bl	8018e5e <I2C_WaitOnTXEFlagUntilTimeout>
 801873e:	4603      	mov	r3, r0
 8018740:	2b00      	cmp	r3, #0
 8018742:	d00d      	beq.n	8018760 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8018744:	68fb      	ldr	r3, [r7, #12]
 8018746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018748:	2b04      	cmp	r3, #4
 801874a:	d107      	bne.n	801875c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	681a      	ldr	r2, [r3, #0]
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801875a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801875c:	2301      	movs	r3, #1
 801875e:	e02b      	b.n	80187b8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8018760:	88fb      	ldrh	r3, [r7, #6]
 8018762:	2b01      	cmp	r3, #1
 8018764:	d105      	bne.n	8018772 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8018766:	893b      	ldrh	r3, [r7, #8]
 8018768:	b2da      	uxtb	r2, r3
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	681b      	ldr	r3, [r3, #0]
 801876e:	611a      	str	r2, [r3, #16]
 8018770:	e021      	b.n	80187b6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8018772:	893b      	ldrh	r3, [r7, #8]
 8018774:	0a1b      	lsrs	r3, r3, #8
 8018776:	b29b      	uxth	r3, r3
 8018778:	b2da      	uxtb	r2, r3
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018782:	6a39      	ldr	r1, [r7, #32]
 8018784:	68f8      	ldr	r0, [r7, #12]
 8018786:	f000 fb6a 	bl	8018e5e <I2C_WaitOnTXEFlagUntilTimeout>
 801878a:	4603      	mov	r3, r0
 801878c:	2b00      	cmp	r3, #0
 801878e:	d00d      	beq.n	80187ac <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018794:	2b04      	cmp	r3, #4
 8018796:	d107      	bne.n	80187a8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018798:	68fb      	ldr	r3, [r7, #12]
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	681a      	ldr	r2, [r3, #0]
 801879e:	68fb      	ldr	r3, [r7, #12]
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80187a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80187a8:	2301      	movs	r3, #1
 80187aa:	e005      	b.n	80187b8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80187ac:	893b      	ldrh	r3, [r7, #8]
 80187ae:	b2da      	uxtb	r2, r3
 80187b0:	68fb      	ldr	r3, [r7, #12]
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80187b6:	2300      	movs	r3, #0
}
 80187b8:	4618      	mov	r0, r3
 80187ba:	3718      	adds	r7, #24
 80187bc:	46bd      	mov	sp, r7
 80187be:	bd80      	pop	{r7, pc}
 80187c0:	00010002 	.word	0x00010002

080187c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80187c4:	b580      	push	{r7, lr}
 80187c6:	b088      	sub	sp, #32
 80187c8:	af02      	add	r7, sp, #8
 80187ca:	60f8      	str	r0, [r7, #12]
 80187cc:	4608      	mov	r0, r1
 80187ce:	4611      	mov	r1, r2
 80187d0:	461a      	mov	r2, r3
 80187d2:	4603      	mov	r3, r0
 80187d4:	817b      	strh	r3, [r7, #10]
 80187d6:	460b      	mov	r3, r1
 80187d8:	813b      	strh	r3, [r7, #8]
 80187da:	4613      	mov	r3, r2
 80187dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	681a      	ldr	r2, [r3, #0]
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80187ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80187ee:	68fb      	ldr	r3, [r7, #12]
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	681a      	ldr	r2, [r3, #0]
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80187fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80187fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018800:	9300      	str	r3, [sp, #0]
 8018802:	6a3b      	ldr	r3, [r7, #32]
 8018804:	2200      	movs	r2, #0
 8018806:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801880a:	68f8      	ldr	r0, [r7, #12]
 801880c:	f000 fa51 	bl	8018cb2 <I2C_WaitOnFlagUntilTimeout>
 8018810:	4603      	mov	r3, r0
 8018812:	2b00      	cmp	r3, #0
 8018814:	d00c      	beq.n	8018830 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018820:	2b00      	cmp	r3, #0
 8018822:	d003      	beq.n	801882c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	f44f 7200 	mov.w	r2, #512	; 0x200
 801882a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801882c:	2303      	movs	r3, #3
 801882e:	e0a9      	b.n	8018984 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8018830:	897b      	ldrh	r3, [r7, #10]
 8018832:	b2db      	uxtb	r3, r3
 8018834:	461a      	mov	r2, r3
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	681b      	ldr	r3, [r3, #0]
 801883a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801883e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8018840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018842:	6a3a      	ldr	r2, [r7, #32]
 8018844:	4951      	ldr	r1, [pc, #324]	; (801898c <I2C_RequestMemoryRead+0x1c8>)
 8018846:	68f8      	ldr	r0, [r7, #12]
 8018848:	f000 fa8a 	bl	8018d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801884c:	4603      	mov	r3, r0
 801884e:	2b00      	cmp	r3, #0
 8018850:	d001      	beq.n	8018856 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8018852:	2301      	movs	r3, #1
 8018854:	e096      	b.n	8018984 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018856:	2300      	movs	r3, #0
 8018858:	617b      	str	r3, [r7, #20]
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	695b      	ldr	r3, [r3, #20]
 8018860:	617b      	str	r3, [r7, #20]
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	699b      	ldr	r3, [r3, #24]
 8018868:	617b      	str	r3, [r7, #20]
 801886a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801886c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801886e:	6a39      	ldr	r1, [r7, #32]
 8018870:	68f8      	ldr	r0, [r7, #12]
 8018872:	f000 faf4 	bl	8018e5e <I2C_WaitOnTXEFlagUntilTimeout>
 8018876:	4603      	mov	r3, r0
 8018878:	2b00      	cmp	r3, #0
 801887a:	d00d      	beq.n	8018898 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018880:	2b04      	cmp	r3, #4
 8018882:	d107      	bne.n	8018894 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018884:	68fb      	ldr	r3, [r7, #12]
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	681a      	ldr	r2, [r3, #0]
 801888a:	68fb      	ldr	r3, [r7, #12]
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018892:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8018894:	2301      	movs	r3, #1
 8018896:	e075      	b.n	8018984 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8018898:	88fb      	ldrh	r3, [r7, #6]
 801889a:	2b01      	cmp	r3, #1
 801889c:	d105      	bne.n	80188aa <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801889e:	893b      	ldrh	r3, [r7, #8]
 80188a0:	b2da      	uxtb	r2, r3
 80188a2:	68fb      	ldr	r3, [r7, #12]
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	611a      	str	r2, [r3, #16]
 80188a8:	e021      	b.n	80188ee <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80188aa:	893b      	ldrh	r3, [r7, #8]
 80188ac:	0a1b      	lsrs	r3, r3, #8
 80188ae:	b29b      	uxth	r3, r3
 80188b0:	b2da      	uxtb	r2, r3
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80188b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188ba:	6a39      	ldr	r1, [r7, #32]
 80188bc:	68f8      	ldr	r0, [r7, #12]
 80188be:	f000 face 	bl	8018e5e <I2C_WaitOnTXEFlagUntilTimeout>
 80188c2:	4603      	mov	r3, r0
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d00d      	beq.n	80188e4 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80188cc:	2b04      	cmp	r3, #4
 80188ce:	d107      	bne.n	80188e0 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80188d0:	68fb      	ldr	r3, [r7, #12]
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	681a      	ldr	r2, [r3, #0]
 80188d6:	68fb      	ldr	r3, [r7, #12]
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80188de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80188e0:	2301      	movs	r3, #1
 80188e2:	e04f      	b.n	8018984 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80188e4:	893b      	ldrh	r3, [r7, #8]
 80188e6:	b2da      	uxtb	r2, r3
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80188ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188f0:	6a39      	ldr	r1, [r7, #32]
 80188f2:	68f8      	ldr	r0, [r7, #12]
 80188f4:	f000 fab3 	bl	8018e5e <I2C_WaitOnTXEFlagUntilTimeout>
 80188f8:	4603      	mov	r3, r0
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d00d      	beq.n	801891a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80188fe:	68fb      	ldr	r3, [r7, #12]
 8018900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018902:	2b04      	cmp	r3, #4
 8018904:	d107      	bne.n	8018916 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	681a      	ldr	r2, [r3, #0]
 801890c:	68fb      	ldr	r3, [r7, #12]
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018914:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8018916:	2301      	movs	r3, #1
 8018918:	e034      	b.n	8018984 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	681a      	ldr	r2, [r3, #0]
 8018920:	68fb      	ldr	r3, [r7, #12]
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018928:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801892c:	9300      	str	r3, [sp, #0]
 801892e:	6a3b      	ldr	r3, [r7, #32]
 8018930:	2200      	movs	r2, #0
 8018932:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8018936:	68f8      	ldr	r0, [r7, #12]
 8018938:	f000 f9bb 	bl	8018cb2 <I2C_WaitOnFlagUntilTimeout>
 801893c:	4603      	mov	r3, r0
 801893e:	2b00      	cmp	r3, #0
 8018940:	d00c      	beq.n	801895c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801894c:	2b00      	cmp	r3, #0
 801894e:	d003      	beq.n	8018958 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018956:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8018958:	2303      	movs	r3, #3
 801895a:	e013      	b.n	8018984 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 801895c:	897b      	ldrh	r3, [r7, #10]
 801895e:	b2db      	uxtb	r3, r3
 8018960:	f043 0301 	orr.w	r3, r3, #1
 8018964:	b2da      	uxtb	r2, r3
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801896e:	6a3a      	ldr	r2, [r7, #32]
 8018970:	4906      	ldr	r1, [pc, #24]	; (801898c <I2C_RequestMemoryRead+0x1c8>)
 8018972:	68f8      	ldr	r0, [r7, #12]
 8018974:	f000 f9f4 	bl	8018d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8018978:	4603      	mov	r3, r0
 801897a:	2b00      	cmp	r3, #0
 801897c:	d001      	beq.n	8018982 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 801897e:	2301      	movs	r3, #1
 8018980:	e000      	b.n	8018984 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8018982:	2300      	movs	r3, #0
}
 8018984:	4618      	mov	r0, r3
 8018986:	3718      	adds	r7, #24
 8018988:	46bd      	mov	sp, r7
 801898a:	bd80      	pop	{r7, pc}
 801898c:	00010002 	.word	0x00010002

08018990 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8018990:	b580      	push	{r7, lr}
 8018992:	b086      	sub	sp, #24
 8018994:	af00      	add	r7, sp, #0
 8018996:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801899c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801899e:	697b      	ldr	r3, [r7, #20]
 80189a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80189a4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80189a6:	697b      	ldr	r3, [r7, #20]
 80189a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80189ac:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80189ae:	697b      	ldr	r3, [r7, #20]
 80189b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189b2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80189b4:	697b      	ldr	r3, [r7, #20]
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	685a      	ldr	r2, [r3, #4]
 80189ba:	697b      	ldr	r3, [r7, #20]
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80189c2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80189c4:	697b      	ldr	r3, [r7, #20]
 80189c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d003      	beq.n	80189d4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80189cc:	697b      	ldr	r3, [r7, #20]
 80189ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80189d0:	2200      	movs	r2, #0
 80189d2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80189d4:	697b      	ldr	r3, [r7, #20]
 80189d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d003      	beq.n	80189e4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80189dc:	697b      	ldr	r3, [r7, #20]
 80189de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80189e0:	2200      	movs	r2, #0
 80189e2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80189e4:	7cfb      	ldrb	r3, [r7, #19]
 80189e6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80189ea:	2b21      	cmp	r3, #33	; 0x21
 80189ec:	d007      	beq.n	80189fe <I2C_DMAXferCplt+0x6e>
 80189ee:	7cfb      	ldrb	r3, [r7, #19]
 80189f0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80189f4:	2b22      	cmp	r3, #34	; 0x22
 80189f6:	d131      	bne.n	8018a5c <I2C_DMAXferCplt+0xcc>
 80189f8:	7cbb      	ldrb	r3, [r7, #18]
 80189fa:	2b20      	cmp	r3, #32
 80189fc:	d12e      	bne.n	8018a5c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80189fe:	697b      	ldr	r3, [r7, #20]
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	685a      	ldr	r2, [r3, #4]
 8018a04:	697b      	ldr	r3, [r7, #20]
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018a0c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8018a0e:	697b      	ldr	r3, [r7, #20]
 8018a10:	2200      	movs	r2, #0
 8018a12:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8018a14:	7cfb      	ldrb	r3, [r7, #19]
 8018a16:	2b29      	cmp	r3, #41	; 0x29
 8018a18:	d10a      	bne.n	8018a30 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8018a1a:	697b      	ldr	r3, [r7, #20]
 8018a1c:	2221      	movs	r2, #33	; 0x21
 8018a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8018a20:	697b      	ldr	r3, [r7, #20]
 8018a22:	2228      	movs	r2, #40	; 0x28
 8018a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8018a28:	6978      	ldr	r0, [r7, #20]
 8018a2a:	f7fe fcec 	bl	8017406 <HAL_I2C_SlaveTxCpltCallback>
 8018a2e:	e00c      	b.n	8018a4a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8018a30:	7cfb      	ldrb	r3, [r7, #19]
 8018a32:	2b2a      	cmp	r3, #42	; 0x2a
 8018a34:	d109      	bne.n	8018a4a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8018a36:	697b      	ldr	r3, [r7, #20]
 8018a38:	2222      	movs	r2, #34	; 0x22
 8018a3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8018a3c:	697b      	ldr	r3, [r7, #20]
 8018a3e:	2228      	movs	r2, #40	; 0x28
 8018a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8018a44:	6978      	ldr	r0, [r7, #20]
 8018a46:	f7fe fce8 	bl	801741a <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8018a4a:	697b      	ldr	r3, [r7, #20]
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	685a      	ldr	r2, [r3, #4]
 8018a50:	697b      	ldr	r3, [r7, #20]
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8018a58:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8018a5a:	e06a      	b.n	8018b32 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8018a5c:	697b      	ldr	r3, [r7, #20]
 8018a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018a62:	b2db      	uxtb	r3, r3
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d064      	beq.n	8018b32 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8018a68:	697b      	ldr	r3, [r7, #20]
 8018a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a6c:	b29b      	uxth	r3, r3
 8018a6e:	2b01      	cmp	r3, #1
 8018a70:	d107      	bne.n	8018a82 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018a72:	697b      	ldr	r3, [r7, #20]
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	681a      	ldr	r2, [r3, #0]
 8018a78:	697b      	ldr	r3, [r7, #20]
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018a80:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8018a82:	697b      	ldr	r3, [r7, #20]
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	685a      	ldr	r2, [r3, #4]
 8018a88:	697b      	ldr	r3, [r7, #20]
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8018a90:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8018a92:	68fb      	ldr	r3, [r7, #12]
 8018a94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018a98:	d009      	beq.n	8018aae <I2C_DMAXferCplt+0x11e>
 8018a9a:	68fb      	ldr	r3, [r7, #12]
 8018a9c:	2b08      	cmp	r3, #8
 8018a9e:	d006      	beq.n	8018aae <I2C_DMAXferCplt+0x11e>
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8018aa6:	d002      	beq.n	8018aae <I2C_DMAXferCplt+0x11e>
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	2b20      	cmp	r3, #32
 8018aac:	d107      	bne.n	8018abe <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018aae:	697b      	ldr	r3, [r7, #20]
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	681a      	ldr	r2, [r3, #0]
 8018ab4:	697b      	ldr	r3, [r7, #20]
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018abc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8018abe:	697b      	ldr	r3, [r7, #20]
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	685a      	ldr	r2, [r3, #4]
 8018ac4:	697b      	ldr	r3, [r7, #20]
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8018acc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018ace:	697b      	ldr	r3, [r7, #20]
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	685a      	ldr	r2, [r3, #4]
 8018ad4:	697b      	ldr	r3, [r7, #20]
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018adc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8018ade:	697b      	ldr	r3, [r7, #20]
 8018ae0:	2200      	movs	r2, #0
 8018ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8018ae4:	697b      	ldr	r3, [r7, #20]
 8018ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d003      	beq.n	8018af4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8018aec:	6978      	ldr	r0, [r7, #20]
 8018aee:	f7fe fcc0 	bl	8017472 <HAL_I2C_ErrorCallback>
}
 8018af2:	e01e      	b.n	8018b32 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8018af4:	697b      	ldr	r3, [r7, #20]
 8018af6:	2220      	movs	r2, #32
 8018af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018afc:	697b      	ldr	r3, [r7, #20]
 8018afe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018b02:	b2db      	uxtb	r3, r3
 8018b04:	2b40      	cmp	r3, #64	; 0x40
 8018b06:	d10a      	bne.n	8018b1e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018b08:	697b      	ldr	r3, [r7, #20]
 8018b0a:	2200      	movs	r2, #0
 8018b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8018b10:	697b      	ldr	r3, [r7, #20]
 8018b12:	2200      	movs	r2, #0
 8018b14:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8018b16:	6978      	ldr	r0, [r7, #20]
 8018b18:	f7fa fede 	bl	80138d8 <HAL_I2C_MemRxCpltCallback>
}
 8018b1c:	e009      	b.n	8018b32 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018b1e:	697b      	ldr	r3, [r7, #20]
 8018b20:	2200      	movs	r2, #0
 8018b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8018b26:	697b      	ldr	r3, [r7, #20]
 8018b28:	2212      	movs	r2, #18
 8018b2a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8018b2c:	6978      	ldr	r0, [r7, #20]
 8018b2e:	f7fe fc60 	bl	80173f2 <HAL_I2C_MasterRxCpltCallback>
}
 8018b32:	bf00      	nop
 8018b34:	3718      	adds	r7, #24
 8018b36:	46bd      	mov	sp, r7
 8018b38:	bd80      	pop	{r7, pc}

08018b3a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8018b3a:	b580      	push	{r7, lr}
 8018b3c:	b084      	sub	sp, #16
 8018b3e:	af00      	add	r7, sp, #0
 8018b40:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b46:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d003      	beq.n	8018b58 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018b54:	2200      	movs	r2, #0
 8018b56:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d003      	beq.n	8018b68 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b64:	2200      	movs	r2, #0
 8018b66:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8018b68:	6878      	ldr	r0, [r7, #4]
 8018b6a:	f7fd f92b 	bl	8015dc4 <HAL_DMA_GetError>
 8018b6e:	4603      	mov	r3, r0
 8018b70:	2b02      	cmp	r3, #2
 8018b72:	d01b      	beq.n	8018bac <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8018b74:	68fb      	ldr	r3, [r7, #12]
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	681a      	ldr	r2, [r3, #0]
 8018b7a:	68fb      	ldr	r3, [r7, #12]
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018b82:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	2200      	movs	r2, #0
 8018b88:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	2220      	movs	r2, #32
 8018b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	2200      	movs	r2, #0
 8018b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b9e:	f043 0210 	orr.w	r2, r3, #16
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8018ba6:	68f8      	ldr	r0, [r7, #12]
 8018ba8:	f7fe fc63 	bl	8017472 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8018bac:	bf00      	nop
 8018bae:	3710      	adds	r7, #16
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	bd80      	pop	{r7, pc}

08018bb4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8018bb4:	b580      	push	{r7, lr}
 8018bb6:	b084      	sub	sp, #16
 8018bb8:	af00      	add	r7, sp, #0
 8018bba:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018bc0:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018bc2:	68fb      	ldr	r3, [r7, #12]
 8018bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018bc8:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d003      	beq.n	8018bda <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018bd6:	2200      	movs	r2, #0
 8018bd8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d003      	beq.n	8018bea <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8018be2:	68fb      	ldr	r3, [r7, #12]
 8018be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018be6:	2200      	movs	r2, #0
 8018be8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	681a      	ldr	r2, [r3, #0]
 8018bf0:	68fb      	ldr	r3, [r7, #12]
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018bf8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8018bfa:	68fb      	ldr	r3, [r7, #12]
 8018bfc:	2200      	movs	r2, #0
 8018bfe:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d003      	beq.n	8018c10 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8018c08:	68fb      	ldr	r3, [r7, #12]
 8018c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c0c:	2200      	movs	r2, #0
 8018c0e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d003      	beq.n	8018c20 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c1c:	2200      	movs	r2, #0
 8018c1e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8018c20:	68fb      	ldr	r3, [r7, #12]
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	681a      	ldr	r2, [r3, #0]
 8018c26:	68fb      	ldr	r3, [r7, #12]
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	f022 0201 	bic.w	r2, r2, #1
 8018c2e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8018c30:	68fb      	ldr	r3, [r7, #12]
 8018c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018c36:	b2db      	uxtb	r3, r3
 8018c38:	2b60      	cmp	r3, #96	; 0x60
 8018c3a:	d10e      	bne.n	8018c5a <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8018c3c:	68fb      	ldr	r3, [r7, #12]
 8018c3e:	2220      	movs	r2, #32
 8018c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8018c44:	68fb      	ldr	r3, [r7, #12]
 8018c46:	2200      	movs	r2, #0
 8018c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	2200      	movs	r2, #0
 8018c50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8018c52:	68f8      	ldr	r0, [r7, #12]
 8018c54:	f7fe fc17 	bl	8017486 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8018c58:	e027      	b.n	8018caa <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8018c5a:	7afb      	ldrb	r3, [r7, #11]
 8018c5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8018c60:	2b28      	cmp	r3, #40	; 0x28
 8018c62:	d117      	bne.n	8018c94 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8018c64:	68fb      	ldr	r3, [r7, #12]
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	681a      	ldr	r2, [r3, #0]
 8018c6a:	68fb      	ldr	r3, [r7, #12]
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	f042 0201 	orr.w	r2, r2, #1
 8018c72:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018c74:	68fb      	ldr	r3, [r7, #12]
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	681a      	ldr	r2, [r3, #0]
 8018c7a:	68fb      	ldr	r3, [r7, #12]
 8018c7c:	681b      	ldr	r3, [r3, #0]
 8018c7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018c82:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8018c84:	68fb      	ldr	r3, [r7, #12]
 8018c86:	2200      	movs	r2, #0
 8018c88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	2228      	movs	r2, #40	; 0x28
 8018c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8018c92:	e007      	b.n	8018ca4 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8018c94:	68fb      	ldr	r3, [r7, #12]
 8018c96:	2220      	movs	r2, #32
 8018c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	2200      	movs	r2, #0
 8018ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8018ca4:	68f8      	ldr	r0, [r7, #12]
 8018ca6:	f7fe fbe4 	bl	8017472 <HAL_I2C_ErrorCallback>
}
 8018caa:	bf00      	nop
 8018cac:	3710      	adds	r7, #16
 8018cae:	46bd      	mov	sp, r7
 8018cb0:	bd80      	pop	{r7, pc}

08018cb2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8018cb2:	b580      	push	{r7, lr}
 8018cb4:	b084      	sub	sp, #16
 8018cb6:	af00      	add	r7, sp, #0
 8018cb8:	60f8      	str	r0, [r7, #12]
 8018cba:	60b9      	str	r1, [r7, #8]
 8018cbc:	603b      	str	r3, [r7, #0]
 8018cbe:	4613      	mov	r3, r2
 8018cc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018cc2:	e025      	b.n	8018d10 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018cc4:	683b      	ldr	r3, [r7, #0]
 8018cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018cca:	d021      	beq.n	8018d10 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018ccc:	f7fc fcaa 	bl	8015624 <HAL_GetTick>
 8018cd0:	4602      	mov	r2, r0
 8018cd2:	69bb      	ldr	r3, [r7, #24]
 8018cd4:	1ad3      	subs	r3, r2, r3
 8018cd6:	683a      	ldr	r2, [r7, #0]
 8018cd8:	429a      	cmp	r2, r3
 8018cda:	d302      	bcc.n	8018ce2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8018cdc:	683b      	ldr	r3, [r7, #0]
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d116      	bne.n	8018d10 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	2200      	movs	r2, #0
 8018ce6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	2220      	movs	r2, #32
 8018cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8018cf0:	68fb      	ldr	r3, [r7, #12]
 8018cf2:	2200      	movs	r2, #0
 8018cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8018cf8:	68fb      	ldr	r3, [r7, #12]
 8018cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018cfc:	f043 0220 	orr.w	r2, r3, #32
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018d04:	68fb      	ldr	r3, [r7, #12]
 8018d06:	2200      	movs	r2, #0
 8018d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8018d0c:	2301      	movs	r3, #1
 8018d0e:	e023      	b.n	8018d58 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018d10:	68bb      	ldr	r3, [r7, #8]
 8018d12:	0c1b      	lsrs	r3, r3, #16
 8018d14:	b2db      	uxtb	r3, r3
 8018d16:	2b01      	cmp	r3, #1
 8018d18:	d10d      	bne.n	8018d36 <I2C_WaitOnFlagUntilTimeout+0x84>
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	695b      	ldr	r3, [r3, #20]
 8018d20:	43da      	mvns	r2, r3
 8018d22:	68bb      	ldr	r3, [r7, #8]
 8018d24:	4013      	ands	r3, r2
 8018d26:	b29b      	uxth	r3, r3
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	bf0c      	ite	eq
 8018d2c:	2301      	moveq	r3, #1
 8018d2e:	2300      	movne	r3, #0
 8018d30:	b2db      	uxtb	r3, r3
 8018d32:	461a      	mov	r2, r3
 8018d34:	e00c      	b.n	8018d50 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8018d36:	68fb      	ldr	r3, [r7, #12]
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	699b      	ldr	r3, [r3, #24]
 8018d3c:	43da      	mvns	r2, r3
 8018d3e:	68bb      	ldr	r3, [r7, #8]
 8018d40:	4013      	ands	r3, r2
 8018d42:	b29b      	uxth	r3, r3
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	bf0c      	ite	eq
 8018d48:	2301      	moveq	r3, #1
 8018d4a:	2300      	movne	r3, #0
 8018d4c:	b2db      	uxtb	r3, r3
 8018d4e:	461a      	mov	r2, r3
 8018d50:	79fb      	ldrb	r3, [r7, #7]
 8018d52:	429a      	cmp	r2, r3
 8018d54:	d0b6      	beq.n	8018cc4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8018d56:	2300      	movs	r3, #0
}
 8018d58:	4618      	mov	r0, r3
 8018d5a:	3710      	adds	r7, #16
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	bd80      	pop	{r7, pc}

08018d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8018d60:	b580      	push	{r7, lr}
 8018d62:	b084      	sub	sp, #16
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	60f8      	str	r0, [r7, #12]
 8018d68:	60b9      	str	r1, [r7, #8]
 8018d6a:	607a      	str	r2, [r7, #4]
 8018d6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8018d6e:	e051      	b.n	8018e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8018d70:	68fb      	ldr	r3, [r7, #12]
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	695b      	ldr	r3, [r3, #20]
 8018d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018d7e:	d123      	bne.n	8018dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018d80:	68fb      	ldr	r3, [r7, #12]
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	681a      	ldr	r2, [r3, #0]
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018d8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8018d98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	2200      	movs	r2, #0
 8018d9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8018da0:	68fb      	ldr	r3, [r7, #12]
 8018da2:	2220      	movs	r2, #32
 8018da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	2200      	movs	r2, #0
 8018dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018db4:	f043 0204 	orr.w	r2, r3, #4
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018dbc:	68fb      	ldr	r3, [r7, #12]
 8018dbe:	2200      	movs	r2, #0
 8018dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8018dc4:	2301      	movs	r3, #1
 8018dc6:	e046      	b.n	8018e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018dce:	d021      	beq.n	8018e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018dd0:	f7fc fc28 	bl	8015624 <HAL_GetTick>
 8018dd4:	4602      	mov	r2, r0
 8018dd6:	683b      	ldr	r3, [r7, #0]
 8018dd8:	1ad3      	subs	r3, r2, r3
 8018dda:	687a      	ldr	r2, [r7, #4]
 8018ddc:	429a      	cmp	r2, r3
 8018dde:	d302      	bcc.n	8018de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d116      	bne.n	8018e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8018de6:	68fb      	ldr	r3, [r7, #12]
 8018de8:	2200      	movs	r2, #0
 8018dea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	2220      	movs	r2, #32
 8018df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	2200      	movs	r2, #0
 8018df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8018dfc:	68fb      	ldr	r3, [r7, #12]
 8018dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e00:	f043 0220 	orr.w	r2, r3, #32
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018e08:	68fb      	ldr	r3, [r7, #12]
 8018e0a:	2200      	movs	r2, #0
 8018e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8018e10:	2301      	movs	r3, #1
 8018e12:	e020      	b.n	8018e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8018e14:	68bb      	ldr	r3, [r7, #8]
 8018e16:	0c1b      	lsrs	r3, r3, #16
 8018e18:	b2db      	uxtb	r3, r3
 8018e1a:	2b01      	cmp	r3, #1
 8018e1c:	d10c      	bne.n	8018e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8018e1e:	68fb      	ldr	r3, [r7, #12]
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	695b      	ldr	r3, [r3, #20]
 8018e24:	43da      	mvns	r2, r3
 8018e26:	68bb      	ldr	r3, [r7, #8]
 8018e28:	4013      	ands	r3, r2
 8018e2a:	b29b      	uxth	r3, r3
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	bf14      	ite	ne
 8018e30:	2301      	movne	r3, #1
 8018e32:	2300      	moveq	r3, #0
 8018e34:	b2db      	uxtb	r3, r3
 8018e36:	e00b      	b.n	8018e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	699b      	ldr	r3, [r3, #24]
 8018e3e:	43da      	mvns	r2, r3
 8018e40:	68bb      	ldr	r3, [r7, #8]
 8018e42:	4013      	ands	r3, r2
 8018e44:	b29b      	uxth	r3, r3
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	bf14      	ite	ne
 8018e4a:	2301      	movne	r3, #1
 8018e4c:	2300      	moveq	r3, #0
 8018e4e:	b2db      	uxtb	r3, r3
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d18d      	bne.n	8018d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8018e54:	2300      	movs	r3, #0
}
 8018e56:	4618      	mov	r0, r3
 8018e58:	3710      	adds	r7, #16
 8018e5a:	46bd      	mov	sp, r7
 8018e5c:	bd80      	pop	{r7, pc}

08018e5e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018e5e:	b580      	push	{r7, lr}
 8018e60:	b084      	sub	sp, #16
 8018e62:	af00      	add	r7, sp, #0
 8018e64:	60f8      	str	r0, [r7, #12]
 8018e66:	60b9      	str	r1, [r7, #8]
 8018e68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8018e6a:	e02d      	b.n	8018ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8018e6c:	68f8      	ldr	r0, [r7, #12]
 8018e6e:	f000 f8ce 	bl	801900e <I2C_IsAcknowledgeFailed>
 8018e72:	4603      	mov	r3, r0
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d001      	beq.n	8018e7c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8018e78:	2301      	movs	r3, #1
 8018e7a:	e02d      	b.n	8018ed8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018e7c:	68bb      	ldr	r3, [r7, #8]
 8018e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e82:	d021      	beq.n	8018ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018e84:	f7fc fbce 	bl	8015624 <HAL_GetTick>
 8018e88:	4602      	mov	r2, r0
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	1ad3      	subs	r3, r2, r3
 8018e8e:	68ba      	ldr	r2, [r7, #8]
 8018e90:	429a      	cmp	r2, r3
 8018e92:	d302      	bcc.n	8018e9a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8018e94:	68bb      	ldr	r3, [r7, #8]
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d116      	bne.n	8018ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	2200      	movs	r2, #0
 8018e9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	2220      	movs	r2, #32
 8018ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	2200      	movs	r2, #0
 8018eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8018eb0:	68fb      	ldr	r3, [r7, #12]
 8018eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018eb4:	f043 0220 	orr.w	r2, r3, #32
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	2200      	movs	r2, #0
 8018ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8018ec4:	2301      	movs	r3, #1
 8018ec6:	e007      	b.n	8018ed8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	695b      	ldr	r3, [r3, #20]
 8018ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018ed2:	2b80      	cmp	r3, #128	; 0x80
 8018ed4:	d1ca      	bne.n	8018e6c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018ed6:	2300      	movs	r3, #0
}
 8018ed8:	4618      	mov	r0, r3
 8018eda:	3710      	adds	r7, #16
 8018edc:	46bd      	mov	sp, r7
 8018ede:	bd80      	pop	{r7, pc}

08018ee0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018ee0:	b580      	push	{r7, lr}
 8018ee2:	b084      	sub	sp, #16
 8018ee4:	af00      	add	r7, sp, #0
 8018ee6:	60f8      	str	r0, [r7, #12]
 8018ee8:	60b9      	str	r1, [r7, #8]
 8018eea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8018eec:	e02d      	b.n	8018f4a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8018eee:	68f8      	ldr	r0, [r7, #12]
 8018ef0:	f000 f88d 	bl	801900e <I2C_IsAcknowledgeFailed>
 8018ef4:	4603      	mov	r3, r0
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d001      	beq.n	8018efe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8018efa:	2301      	movs	r3, #1
 8018efc:	e02d      	b.n	8018f5a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018efe:	68bb      	ldr	r3, [r7, #8]
 8018f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f04:	d021      	beq.n	8018f4a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018f06:	f7fc fb8d 	bl	8015624 <HAL_GetTick>
 8018f0a:	4602      	mov	r2, r0
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	1ad3      	subs	r3, r2, r3
 8018f10:	68ba      	ldr	r2, [r7, #8]
 8018f12:	429a      	cmp	r2, r3
 8018f14:	d302      	bcc.n	8018f1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8018f16:	68bb      	ldr	r3, [r7, #8]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d116      	bne.n	8018f4a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	2200      	movs	r2, #0
 8018f20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	2220      	movs	r2, #32
 8018f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	2200      	movs	r2, #0
 8018f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8018f32:	68fb      	ldr	r3, [r7, #12]
 8018f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f36:	f043 0220 	orr.w	r2, r3, #32
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	2200      	movs	r2, #0
 8018f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8018f46:	2301      	movs	r3, #1
 8018f48:	e007      	b.n	8018f5a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	695b      	ldr	r3, [r3, #20]
 8018f50:	f003 0304 	and.w	r3, r3, #4
 8018f54:	2b04      	cmp	r3, #4
 8018f56:	d1ca      	bne.n	8018eee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018f58:	2300      	movs	r3, #0
}
 8018f5a:	4618      	mov	r0, r3
 8018f5c:	3710      	adds	r7, #16
 8018f5e:	46bd      	mov	sp, r7
 8018f60:	bd80      	pop	{r7, pc}

08018f62 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018f62:	b580      	push	{r7, lr}
 8018f64:	b084      	sub	sp, #16
 8018f66:	af00      	add	r7, sp, #0
 8018f68:	60f8      	str	r0, [r7, #12]
 8018f6a:	60b9      	str	r1, [r7, #8]
 8018f6c:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8018f6e:	e042      	b.n	8018ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	695b      	ldr	r3, [r3, #20]
 8018f76:	f003 0310 	and.w	r3, r3, #16
 8018f7a:	2b10      	cmp	r3, #16
 8018f7c:	d119      	bne.n	8018fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018f7e:	68fb      	ldr	r3, [r7, #12]
 8018f80:	681b      	ldr	r3, [r3, #0]
 8018f82:	f06f 0210 	mvn.w	r2, #16
 8018f86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	2200      	movs	r2, #0
 8018f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	2220      	movs	r2, #32
 8018f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	2200      	movs	r2, #0
 8018f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8018f9e:	68fb      	ldr	r3, [r7, #12]
 8018fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	2200      	movs	r2, #0
 8018faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8018fae:	2301      	movs	r3, #1
 8018fb0:	e029      	b.n	8019006 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018fb2:	f7fc fb37 	bl	8015624 <HAL_GetTick>
 8018fb6:	4602      	mov	r2, r0
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	1ad3      	subs	r3, r2, r3
 8018fbc:	68ba      	ldr	r2, [r7, #8]
 8018fbe:	429a      	cmp	r2, r3
 8018fc0:	d302      	bcc.n	8018fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8018fc2:	68bb      	ldr	r3, [r7, #8]
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d116      	bne.n	8018ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8018fc8:	68fb      	ldr	r3, [r7, #12]
 8018fca:	2200      	movs	r2, #0
 8018fcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8018fce:	68fb      	ldr	r3, [r7, #12]
 8018fd0:	2220      	movs	r2, #32
 8018fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8018fd6:	68fb      	ldr	r3, [r7, #12]
 8018fd8:	2200      	movs	r2, #0
 8018fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8018fde:	68fb      	ldr	r3, [r7, #12]
 8018fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018fe2:	f043 0220 	orr.w	r2, r3, #32
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018fea:	68fb      	ldr	r3, [r7, #12]
 8018fec:	2200      	movs	r2, #0
 8018fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8018ff2:	2301      	movs	r3, #1
 8018ff4:	e007      	b.n	8019006 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8018ff6:	68fb      	ldr	r3, [r7, #12]
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	695b      	ldr	r3, [r3, #20]
 8018ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019000:	2b40      	cmp	r3, #64	; 0x40
 8019002:	d1b5      	bne.n	8018f70 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8019004:	2300      	movs	r3, #0
}
 8019006:	4618      	mov	r0, r3
 8019008:	3710      	adds	r7, #16
 801900a:	46bd      	mov	sp, r7
 801900c:	bd80      	pop	{r7, pc}

0801900e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801900e:	b480      	push	{r7}
 8019010:	b083      	sub	sp, #12
 8019012:	af00      	add	r7, sp, #0
 8019014:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	695b      	ldr	r3, [r3, #20]
 801901c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019024:	d11b      	bne.n	801905e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801902e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	2200      	movs	r2, #0
 8019034:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	2220      	movs	r2, #32
 801903a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	2200      	movs	r2, #0
 8019042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801904a:	f043 0204 	orr.w	r2, r3, #4
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	2200      	movs	r2, #0
 8019056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801905a:	2301      	movs	r3, #1
 801905c:	e000      	b.n	8019060 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801905e:	2300      	movs	r3, #0
}
 8019060:	4618      	mov	r0, r3
 8019062:	370c      	adds	r7, #12
 8019064:	46bd      	mov	sp, r7
 8019066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801906a:	4770      	bx	lr

0801906c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 801906c:	b480      	push	{r7}
 801906e:	b083      	sub	sp, #12
 8019070:	af00      	add	r7, sp, #0
 8019072:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019078:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801907c:	d103      	bne.n	8019086 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	2201      	movs	r2, #1
 8019082:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8019084:	e007      	b.n	8019096 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801908a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801908e:	d102      	bne.n	8019096 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	2208      	movs	r2, #8
 8019094:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8019096:	bf00      	nop
 8019098:	370c      	adds	r7, #12
 801909a:	46bd      	mov	sp, r7
 801909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190a0:	4770      	bx	lr
	...

080190a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	b086      	sub	sp, #24
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d101      	bne.n	80190b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80190b2:	2301      	movs	r3, #1
 80190b4:	e25b      	b.n	801956e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	f003 0301 	and.w	r3, r3, #1
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d075      	beq.n	80191ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80190c2:	4ba3      	ldr	r3, [pc, #652]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 80190c4:	689b      	ldr	r3, [r3, #8]
 80190c6:	f003 030c 	and.w	r3, r3, #12
 80190ca:	2b04      	cmp	r3, #4
 80190cc:	d00c      	beq.n	80190e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80190ce:	4ba0      	ldr	r3, [pc, #640]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 80190d0:	689b      	ldr	r3, [r3, #8]
 80190d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80190d6:	2b08      	cmp	r3, #8
 80190d8:	d112      	bne.n	8019100 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80190da:	4b9d      	ldr	r3, [pc, #628]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 80190dc:	685b      	ldr	r3, [r3, #4]
 80190de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80190e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80190e6:	d10b      	bne.n	8019100 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80190e8:	4b99      	ldr	r3, [pc, #612]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d05b      	beq.n	80191ac <HAL_RCC_OscConfig+0x108>
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	685b      	ldr	r3, [r3, #4]
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d157      	bne.n	80191ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80190fc:	2301      	movs	r3, #1
 80190fe:	e236      	b.n	801956e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	685b      	ldr	r3, [r3, #4]
 8019104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019108:	d106      	bne.n	8019118 <HAL_RCC_OscConfig+0x74>
 801910a:	4b91      	ldr	r3, [pc, #580]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	4a90      	ldr	r2, [pc, #576]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 8019110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019114:	6013      	str	r3, [r2, #0]
 8019116:	e01d      	b.n	8019154 <HAL_RCC_OscConfig+0xb0>
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	685b      	ldr	r3, [r3, #4]
 801911c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8019120:	d10c      	bne.n	801913c <HAL_RCC_OscConfig+0x98>
 8019122:	4b8b      	ldr	r3, [pc, #556]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	4a8a      	ldr	r2, [pc, #552]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 8019128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801912c:	6013      	str	r3, [r2, #0]
 801912e:	4b88      	ldr	r3, [pc, #544]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	4a87      	ldr	r2, [pc, #540]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 8019134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019138:	6013      	str	r3, [r2, #0]
 801913a:	e00b      	b.n	8019154 <HAL_RCC_OscConfig+0xb0>
 801913c:	4b84      	ldr	r3, [pc, #528]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	4a83      	ldr	r2, [pc, #524]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 8019142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019146:	6013      	str	r3, [r2, #0]
 8019148:	4b81      	ldr	r3, [pc, #516]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	4a80      	ldr	r2, [pc, #512]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 801914e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8019152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	685b      	ldr	r3, [r3, #4]
 8019158:	2b00      	cmp	r3, #0
 801915a:	d013      	beq.n	8019184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801915c:	f7fc fa62 	bl	8015624 <HAL_GetTick>
 8019160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019162:	e008      	b.n	8019176 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019164:	f7fc fa5e 	bl	8015624 <HAL_GetTick>
 8019168:	4602      	mov	r2, r0
 801916a:	693b      	ldr	r3, [r7, #16]
 801916c:	1ad3      	subs	r3, r2, r3
 801916e:	2b64      	cmp	r3, #100	; 0x64
 8019170:	d901      	bls.n	8019176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8019172:	2303      	movs	r3, #3
 8019174:	e1fb      	b.n	801956e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019176:	4b76      	ldr	r3, [pc, #472]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801917e:	2b00      	cmp	r3, #0
 8019180:	d0f0      	beq.n	8019164 <HAL_RCC_OscConfig+0xc0>
 8019182:	e014      	b.n	80191ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019184:	f7fc fa4e 	bl	8015624 <HAL_GetTick>
 8019188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801918a:	e008      	b.n	801919e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801918c:	f7fc fa4a 	bl	8015624 <HAL_GetTick>
 8019190:	4602      	mov	r2, r0
 8019192:	693b      	ldr	r3, [r7, #16]
 8019194:	1ad3      	subs	r3, r2, r3
 8019196:	2b64      	cmp	r3, #100	; 0x64
 8019198:	d901      	bls.n	801919e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801919a:	2303      	movs	r3, #3
 801919c:	e1e7      	b.n	801956e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801919e:	4b6c      	ldr	r3, [pc, #432]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d1f0      	bne.n	801918c <HAL_RCC_OscConfig+0xe8>
 80191aa:	e000      	b.n	80191ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80191ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	f003 0302 	and.w	r3, r3, #2
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d063      	beq.n	8019282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80191ba:	4b65      	ldr	r3, [pc, #404]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 80191bc:	689b      	ldr	r3, [r3, #8]
 80191be:	f003 030c 	and.w	r3, r3, #12
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d00b      	beq.n	80191de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80191c6:	4b62      	ldr	r3, [pc, #392]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 80191c8:	689b      	ldr	r3, [r3, #8]
 80191ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80191ce:	2b08      	cmp	r3, #8
 80191d0:	d11c      	bne.n	801920c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80191d2:	4b5f      	ldr	r3, [pc, #380]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 80191d4:	685b      	ldr	r3, [r3, #4]
 80191d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d116      	bne.n	801920c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80191de:	4b5c      	ldr	r3, [pc, #368]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	f003 0302 	and.w	r3, r3, #2
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d005      	beq.n	80191f6 <HAL_RCC_OscConfig+0x152>
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	68db      	ldr	r3, [r3, #12]
 80191ee:	2b01      	cmp	r3, #1
 80191f0:	d001      	beq.n	80191f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80191f2:	2301      	movs	r3, #1
 80191f4:	e1bb      	b.n	801956e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80191f6:	4b56      	ldr	r3, [pc, #344]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	691b      	ldr	r3, [r3, #16]
 8019202:	00db      	lsls	r3, r3, #3
 8019204:	4952      	ldr	r1, [pc, #328]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 8019206:	4313      	orrs	r3, r2
 8019208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801920a:	e03a      	b.n	8019282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	68db      	ldr	r3, [r3, #12]
 8019210:	2b00      	cmp	r3, #0
 8019212:	d020      	beq.n	8019256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8019214:	4b4f      	ldr	r3, [pc, #316]	; (8019354 <HAL_RCC_OscConfig+0x2b0>)
 8019216:	2201      	movs	r2, #1
 8019218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801921a:	f7fc fa03 	bl	8015624 <HAL_GetTick>
 801921e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019220:	e008      	b.n	8019234 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019222:	f7fc f9ff 	bl	8015624 <HAL_GetTick>
 8019226:	4602      	mov	r2, r0
 8019228:	693b      	ldr	r3, [r7, #16]
 801922a:	1ad3      	subs	r3, r2, r3
 801922c:	2b02      	cmp	r3, #2
 801922e:	d901      	bls.n	8019234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8019230:	2303      	movs	r3, #3
 8019232:	e19c      	b.n	801956e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019234:	4b46      	ldr	r3, [pc, #280]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	f003 0302 	and.w	r3, r3, #2
 801923c:	2b00      	cmp	r3, #0
 801923e:	d0f0      	beq.n	8019222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019240:	4b43      	ldr	r3, [pc, #268]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	691b      	ldr	r3, [r3, #16]
 801924c:	00db      	lsls	r3, r3, #3
 801924e:	4940      	ldr	r1, [pc, #256]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 8019250:	4313      	orrs	r3, r2
 8019252:	600b      	str	r3, [r1, #0]
 8019254:	e015      	b.n	8019282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8019256:	4b3f      	ldr	r3, [pc, #252]	; (8019354 <HAL_RCC_OscConfig+0x2b0>)
 8019258:	2200      	movs	r2, #0
 801925a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801925c:	f7fc f9e2 	bl	8015624 <HAL_GetTick>
 8019260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8019262:	e008      	b.n	8019276 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019264:	f7fc f9de 	bl	8015624 <HAL_GetTick>
 8019268:	4602      	mov	r2, r0
 801926a:	693b      	ldr	r3, [r7, #16]
 801926c:	1ad3      	subs	r3, r2, r3
 801926e:	2b02      	cmp	r3, #2
 8019270:	d901      	bls.n	8019276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8019272:	2303      	movs	r3, #3
 8019274:	e17b      	b.n	801956e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8019276:	4b36      	ldr	r3, [pc, #216]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 8019278:	681b      	ldr	r3, [r3, #0]
 801927a:	f003 0302 	and.w	r3, r3, #2
 801927e:	2b00      	cmp	r3, #0
 8019280:	d1f0      	bne.n	8019264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	f003 0308 	and.w	r3, r3, #8
 801928a:	2b00      	cmp	r3, #0
 801928c:	d030      	beq.n	80192f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	695b      	ldr	r3, [r3, #20]
 8019292:	2b00      	cmp	r3, #0
 8019294:	d016      	beq.n	80192c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8019296:	4b30      	ldr	r3, [pc, #192]	; (8019358 <HAL_RCC_OscConfig+0x2b4>)
 8019298:	2201      	movs	r2, #1
 801929a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801929c:	f7fc f9c2 	bl	8015624 <HAL_GetTick>
 80192a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80192a2:	e008      	b.n	80192b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80192a4:	f7fc f9be 	bl	8015624 <HAL_GetTick>
 80192a8:	4602      	mov	r2, r0
 80192aa:	693b      	ldr	r3, [r7, #16]
 80192ac:	1ad3      	subs	r3, r2, r3
 80192ae:	2b02      	cmp	r3, #2
 80192b0:	d901      	bls.n	80192b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80192b2:	2303      	movs	r3, #3
 80192b4:	e15b      	b.n	801956e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80192b6:	4b26      	ldr	r3, [pc, #152]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 80192b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80192ba:	f003 0302 	and.w	r3, r3, #2
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d0f0      	beq.n	80192a4 <HAL_RCC_OscConfig+0x200>
 80192c2:	e015      	b.n	80192f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80192c4:	4b24      	ldr	r3, [pc, #144]	; (8019358 <HAL_RCC_OscConfig+0x2b4>)
 80192c6:	2200      	movs	r2, #0
 80192c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80192ca:	f7fc f9ab 	bl	8015624 <HAL_GetTick>
 80192ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80192d0:	e008      	b.n	80192e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80192d2:	f7fc f9a7 	bl	8015624 <HAL_GetTick>
 80192d6:	4602      	mov	r2, r0
 80192d8:	693b      	ldr	r3, [r7, #16]
 80192da:	1ad3      	subs	r3, r2, r3
 80192dc:	2b02      	cmp	r3, #2
 80192de:	d901      	bls.n	80192e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80192e0:	2303      	movs	r3, #3
 80192e2:	e144      	b.n	801956e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80192e4:	4b1a      	ldr	r3, [pc, #104]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 80192e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80192e8:	f003 0302 	and.w	r3, r3, #2
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d1f0      	bne.n	80192d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	f003 0304 	and.w	r3, r3, #4
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	f000 80a0 	beq.w	801943e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80192fe:	2300      	movs	r3, #0
 8019300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019302:	4b13      	ldr	r3, [pc, #76]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 8019304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801930a:	2b00      	cmp	r3, #0
 801930c:	d10f      	bne.n	801932e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801930e:	2300      	movs	r3, #0
 8019310:	60bb      	str	r3, [r7, #8]
 8019312:	4b0f      	ldr	r3, [pc, #60]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 8019314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019316:	4a0e      	ldr	r2, [pc, #56]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 8019318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801931c:	6413      	str	r3, [r2, #64]	; 0x40
 801931e:	4b0c      	ldr	r3, [pc, #48]	; (8019350 <HAL_RCC_OscConfig+0x2ac>)
 8019320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019326:	60bb      	str	r3, [r7, #8]
 8019328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801932a:	2301      	movs	r3, #1
 801932c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801932e:	4b0b      	ldr	r3, [pc, #44]	; (801935c <HAL_RCC_OscConfig+0x2b8>)
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019336:	2b00      	cmp	r3, #0
 8019338:	d121      	bne.n	801937e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801933a:	4b08      	ldr	r3, [pc, #32]	; (801935c <HAL_RCC_OscConfig+0x2b8>)
 801933c:	681b      	ldr	r3, [r3, #0]
 801933e:	4a07      	ldr	r2, [pc, #28]	; (801935c <HAL_RCC_OscConfig+0x2b8>)
 8019340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8019346:	f7fc f96d 	bl	8015624 <HAL_GetTick>
 801934a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801934c:	e011      	b.n	8019372 <HAL_RCC_OscConfig+0x2ce>
 801934e:	bf00      	nop
 8019350:	40023800 	.word	0x40023800
 8019354:	42470000 	.word	0x42470000
 8019358:	42470e80 	.word	0x42470e80
 801935c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8019360:	f7fc f960 	bl	8015624 <HAL_GetTick>
 8019364:	4602      	mov	r2, r0
 8019366:	693b      	ldr	r3, [r7, #16]
 8019368:	1ad3      	subs	r3, r2, r3
 801936a:	2b02      	cmp	r3, #2
 801936c:	d901      	bls.n	8019372 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801936e:	2303      	movs	r3, #3
 8019370:	e0fd      	b.n	801956e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019372:	4b81      	ldr	r3, [pc, #516]	; (8019578 <HAL_RCC_OscConfig+0x4d4>)
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801937a:	2b00      	cmp	r3, #0
 801937c:	d0f0      	beq.n	8019360 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	689b      	ldr	r3, [r3, #8]
 8019382:	2b01      	cmp	r3, #1
 8019384:	d106      	bne.n	8019394 <HAL_RCC_OscConfig+0x2f0>
 8019386:	4b7d      	ldr	r3, [pc, #500]	; (801957c <HAL_RCC_OscConfig+0x4d8>)
 8019388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801938a:	4a7c      	ldr	r2, [pc, #496]	; (801957c <HAL_RCC_OscConfig+0x4d8>)
 801938c:	f043 0301 	orr.w	r3, r3, #1
 8019390:	6713      	str	r3, [r2, #112]	; 0x70
 8019392:	e01c      	b.n	80193ce <HAL_RCC_OscConfig+0x32a>
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	689b      	ldr	r3, [r3, #8]
 8019398:	2b05      	cmp	r3, #5
 801939a:	d10c      	bne.n	80193b6 <HAL_RCC_OscConfig+0x312>
 801939c:	4b77      	ldr	r3, [pc, #476]	; (801957c <HAL_RCC_OscConfig+0x4d8>)
 801939e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193a0:	4a76      	ldr	r2, [pc, #472]	; (801957c <HAL_RCC_OscConfig+0x4d8>)
 80193a2:	f043 0304 	orr.w	r3, r3, #4
 80193a6:	6713      	str	r3, [r2, #112]	; 0x70
 80193a8:	4b74      	ldr	r3, [pc, #464]	; (801957c <HAL_RCC_OscConfig+0x4d8>)
 80193aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193ac:	4a73      	ldr	r2, [pc, #460]	; (801957c <HAL_RCC_OscConfig+0x4d8>)
 80193ae:	f043 0301 	orr.w	r3, r3, #1
 80193b2:	6713      	str	r3, [r2, #112]	; 0x70
 80193b4:	e00b      	b.n	80193ce <HAL_RCC_OscConfig+0x32a>
 80193b6:	4b71      	ldr	r3, [pc, #452]	; (801957c <HAL_RCC_OscConfig+0x4d8>)
 80193b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193ba:	4a70      	ldr	r2, [pc, #448]	; (801957c <HAL_RCC_OscConfig+0x4d8>)
 80193bc:	f023 0301 	bic.w	r3, r3, #1
 80193c0:	6713      	str	r3, [r2, #112]	; 0x70
 80193c2:	4b6e      	ldr	r3, [pc, #440]	; (801957c <HAL_RCC_OscConfig+0x4d8>)
 80193c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193c6:	4a6d      	ldr	r2, [pc, #436]	; (801957c <HAL_RCC_OscConfig+0x4d8>)
 80193c8:	f023 0304 	bic.w	r3, r3, #4
 80193cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	689b      	ldr	r3, [r3, #8]
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d015      	beq.n	8019402 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80193d6:	f7fc f925 	bl	8015624 <HAL_GetTick>
 80193da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80193dc:	e00a      	b.n	80193f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80193de:	f7fc f921 	bl	8015624 <HAL_GetTick>
 80193e2:	4602      	mov	r2, r0
 80193e4:	693b      	ldr	r3, [r7, #16]
 80193e6:	1ad3      	subs	r3, r2, r3
 80193e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80193ec:	4293      	cmp	r3, r2
 80193ee:	d901      	bls.n	80193f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80193f0:	2303      	movs	r3, #3
 80193f2:	e0bc      	b.n	801956e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80193f4:	4b61      	ldr	r3, [pc, #388]	; (801957c <HAL_RCC_OscConfig+0x4d8>)
 80193f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193f8:	f003 0302 	and.w	r3, r3, #2
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d0ee      	beq.n	80193de <HAL_RCC_OscConfig+0x33a>
 8019400:	e014      	b.n	801942c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8019402:	f7fc f90f 	bl	8015624 <HAL_GetTick>
 8019406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8019408:	e00a      	b.n	8019420 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801940a:	f7fc f90b 	bl	8015624 <HAL_GetTick>
 801940e:	4602      	mov	r2, r0
 8019410:	693b      	ldr	r3, [r7, #16]
 8019412:	1ad3      	subs	r3, r2, r3
 8019414:	f241 3288 	movw	r2, #5000	; 0x1388
 8019418:	4293      	cmp	r3, r2
 801941a:	d901      	bls.n	8019420 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 801941c:	2303      	movs	r3, #3
 801941e:	e0a6      	b.n	801956e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8019420:	4b56      	ldr	r3, [pc, #344]	; (801957c <HAL_RCC_OscConfig+0x4d8>)
 8019422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019424:	f003 0302 	and.w	r3, r3, #2
 8019428:	2b00      	cmp	r3, #0
 801942a:	d1ee      	bne.n	801940a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801942c:	7dfb      	ldrb	r3, [r7, #23]
 801942e:	2b01      	cmp	r3, #1
 8019430:	d105      	bne.n	801943e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8019432:	4b52      	ldr	r3, [pc, #328]	; (801957c <HAL_RCC_OscConfig+0x4d8>)
 8019434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019436:	4a51      	ldr	r2, [pc, #324]	; (801957c <HAL_RCC_OscConfig+0x4d8>)
 8019438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801943c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	699b      	ldr	r3, [r3, #24]
 8019442:	2b00      	cmp	r3, #0
 8019444:	f000 8092 	beq.w	801956c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8019448:	4b4c      	ldr	r3, [pc, #304]	; (801957c <HAL_RCC_OscConfig+0x4d8>)
 801944a:	689b      	ldr	r3, [r3, #8]
 801944c:	f003 030c 	and.w	r3, r3, #12
 8019450:	2b08      	cmp	r3, #8
 8019452:	d05c      	beq.n	801950e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	699b      	ldr	r3, [r3, #24]
 8019458:	2b02      	cmp	r3, #2
 801945a:	d141      	bne.n	80194e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801945c:	4b48      	ldr	r3, [pc, #288]	; (8019580 <HAL_RCC_OscConfig+0x4dc>)
 801945e:	2200      	movs	r2, #0
 8019460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019462:	f7fc f8df 	bl	8015624 <HAL_GetTick>
 8019466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019468:	e008      	b.n	801947c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801946a:	f7fc f8db 	bl	8015624 <HAL_GetTick>
 801946e:	4602      	mov	r2, r0
 8019470:	693b      	ldr	r3, [r7, #16]
 8019472:	1ad3      	subs	r3, r2, r3
 8019474:	2b02      	cmp	r3, #2
 8019476:	d901      	bls.n	801947c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8019478:	2303      	movs	r3, #3
 801947a:	e078      	b.n	801956e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801947c:	4b3f      	ldr	r3, [pc, #252]	; (801957c <HAL_RCC_OscConfig+0x4d8>)
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019484:	2b00      	cmp	r3, #0
 8019486:	d1f0      	bne.n	801946a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	69da      	ldr	r2, [r3, #28]
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	6a1b      	ldr	r3, [r3, #32]
 8019490:	431a      	orrs	r2, r3
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019496:	019b      	lsls	r3, r3, #6
 8019498:	431a      	orrs	r2, r3
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801949e:	085b      	lsrs	r3, r3, #1
 80194a0:	3b01      	subs	r3, #1
 80194a2:	041b      	lsls	r3, r3, #16
 80194a4:	431a      	orrs	r2, r3
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194aa:	061b      	lsls	r3, r3, #24
 80194ac:	4933      	ldr	r1, [pc, #204]	; (801957c <HAL_RCC_OscConfig+0x4d8>)
 80194ae:	4313      	orrs	r3, r2
 80194b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80194b2:	4b33      	ldr	r3, [pc, #204]	; (8019580 <HAL_RCC_OscConfig+0x4dc>)
 80194b4:	2201      	movs	r2, #1
 80194b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80194b8:	f7fc f8b4 	bl	8015624 <HAL_GetTick>
 80194bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80194be:	e008      	b.n	80194d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80194c0:	f7fc f8b0 	bl	8015624 <HAL_GetTick>
 80194c4:	4602      	mov	r2, r0
 80194c6:	693b      	ldr	r3, [r7, #16]
 80194c8:	1ad3      	subs	r3, r2, r3
 80194ca:	2b02      	cmp	r3, #2
 80194cc:	d901      	bls.n	80194d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80194ce:	2303      	movs	r3, #3
 80194d0:	e04d      	b.n	801956e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80194d2:	4b2a      	ldr	r3, [pc, #168]	; (801957c <HAL_RCC_OscConfig+0x4d8>)
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d0f0      	beq.n	80194c0 <HAL_RCC_OscConfig+0x41c>
 80194de:	e045      	b.n	801956c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80194e0:	4b27      	ldr	r3, [pc, #156]	; (8019580 <HAL_RCC_OscConfig+0x4dc>)
 80194e2:	2200      	movs	r2, #0
 80194e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80194e6:	f7fc f89d 	bl	8015624 <HAL_GetTick>
 80194ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80194ec:	e008      	b.n	8019500 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80194ee:	f7fc f899 	bl	8015624 <HAL_GetTick>
 80194f2:	4602      	mov	r2, r0
 80194f4:	693b      	ldr	r3, [r7, #16]
 80194f6:	1ad3      	subs	r3, r2, r3
 80194f8:	2b02      	cmp	r3, #2
 80194fa:	d901      	bls.n	8019500 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80194fc:	2303      	movs	r3, #3
 80194fe:	e036      	b.n	801956e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019500:	4b1e      	ldr	r3, [pc, #120]	; (801957c <HAL_RCC_OscConfig+0x4d8>)
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019508:	2b00      	cmp	r3, #0
 801950a:	d1f0      	bne.n	80194ee <HAL_RCC_OscConfig+0x44a>
 801950c:	e02e      	b.n	801956c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	699b      	ldr	r3, [r3, #24]
 8019512:	2b01      	cmp	r3, #1
 8019514:	d101      	bne.n	801951a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8019516:	2301      	movs	r3, #1
 8019518:	e029      	b.n	801956e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801951a:	4b18      	ldr	r3, [pc, #96]	; (801957c <HAL_RCC_OscConfig+0x4d8>)
 801951c:	685b      	ldr	r3, [r3, #4]
 801951e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019520:	68fb      	ldr	r3, [r7, #12]
 8019522:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	69db      	ldr	r3, [r3, #28]
 801952a:	429a      	cmp	r2, r3
 801952c:	d11c      	bne.n	8019568 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801952e:	68fb      	ldr	r3, [r7, #12]
 8019530:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019538:	429a      	cmp	r2, r3
 801953a:	d115      	bne.n	8019568 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801953c:	68fa      	ldr	r2, [r7, #12]
 801953e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8019542:	4013      	ands	r3, r2
 8019544:	687a      	ldr	r2, [r7, #4]
 8019546:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8019548:	4293      	cmp	r3, r2
 801954a:	d10d      	bne.n	8019568 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801954c:	68fb      	ldr	r3, [r7, #12]
 801954e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8019556:	429a      	cmp	r2, r3
 8019558:	d106      	bne.n	8019568 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 801955a:	68fb      	ldr	r3, [r7, #12]
 801955c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8019564:	429a      	cmp	r2, r3
 8019566:	d001      	beq.n	801956c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8019568:	2301      	movs	r3, #1
 801956a:	e000      	b.n	801956e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 801956c:	2300      	movs	r3, #0
}
 801956e:	4618      	mov	r0, r3
 8019570:	3718      	adds	r7, #24
 8019572:	46bd      	mov	sp, r7
 8019574:	bd80      	pop	{r7, pc}
 8019576:	bf00      	nop
 8019578:	40007000 	.word	0x40007000
 801957c:	40023800 	.word	0x40023800
 8019580:	42470060 	.word	0x42470060

08019584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8019584:	b580      	push	{r7, lr}
 8019586:	b084      	sub	sp, #16
 8019588:	af00      	add	r7, sp, #0
 801958a:	6078      	str	r0, [r7, #4]
 801958c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	2b00      	cmp	r3, #0
 8019592:	d101      	bne.n	8019598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8019594:	2301      	movs	r3, #1
 8019596:	e0cc      	b.n	8019732 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8019598:	4b68      	ldr	r3, [pc, #416]	; (801973c <HAL_RCC_ClockConfig+0x1b8>)
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	f003 030f 	and.w	r3, r3, #15
 80195a0:	683a      	ldr	r2, [r7, #0]
 80195a2:	429a      	cmp	r2, r3
 80195a4:	d90c      	bls.n	80195c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80195a6:	4b65      	ldr	r3, [pc, #404]	; (801973c <HAL_RCC_ClockConfig+0x1b8>)
 80195a8:	683a      	ldr	r2, [r7, #0]
 80195aa:	b2d2      	uxtb	r2, r2
 80195ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80195ae:	4b63      	ldr	r3, [pc, #396]	; (801973c <HAL_RCC_ClockConfig+0x1b8>)
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	f003 030f 	and.w	r3, r3, #15
 80195b6:	683a      	ldr	r2, [r7, #0]
 80195b8:	429a      	cmp	r2, r3
 80195ba:	d001      	beq.n	80195c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80195bc:	2301      	movs	r3, #1
 80195be:	e0b8      	b.n	8019732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	f003 0302 	and.w	r3, r3, #2
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	d020      	beq.n	801960e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	f003 0304 	and.w	r3, r3, #4
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d005      	beq.n	80195e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80195d8:	4b59      	ldr	r3, [pc, #356]	; (8019740 <HAL_RCC_ClockConfig+0x1bc>)
 80195da:	689b      	ldr	r3, [r3, #8]
 80195dc:	4a58      	ldr	r2, [pc, #352]	; (8019740 <HAL_RCC_ClockConfig+0x1bc>)
 80195de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80195e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	f003 0308 	and.w	r3, r3, #8
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d005      	beq.n	80195fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80195f0:	4b53      	ldr	r3, [pc, #332]	; (8019740 <HAL_RCC_ClockConfig+0x1bc>)
 80195f2:	689b      	ldr	r3, [r3, #8]
 80195f4:	4a52      	ldr	r2, [pc, #328]	; (8019740 <HAL_RCC_ClockConfig+0x1bc>)
 80195f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80195fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80195fc:	4b50      	ldr	r3, [pc, #320]	; (8019740 <HAL_RCC_ClockConfig+0x1bc>)
 80195fe:	689b      	ldr	r3, [r3, #8]
 8019600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	689b      	ldr	r3, [r3, #8]
 8019608:	494d      	ldr	r1, [pc, #308]	; (8019740 <HAL_RCC_ClockConfig+0x1bc>)
 801960a:	4313      	orrs	r3, r2
 801960c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	f003 0301 	and.w	r3, r3, #1
 8019616:	2b00      	cmp	r3, #0
 8019618:	d044      	beq.n	80196a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	685b      	ldr	r3, [r3, #4]
 801961e:	2b01      	cmp	r3, #1
 8019620:	d107      	bne.n	8019632 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019622:	4b47      	ldr	r3, [pc, #284]	; (8019740 <HAL_RCC_ClockConfig+0x1bc>)
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801962a:	2b00      	cmp	r3, #0
 801962c:	d119      	bne.n	8019662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801962e:	2301      	movs	r3, #1
 8019630:	e07f      	b.n	8019732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	685b      	ldr	r3, [r3, #4]
 8019636:	2b02      	cmp	r3, #2
 8019638:	d003      	beq.n	8019642 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801963e:	2b03      	cmp	r3, #3
 8019640:	d107      	bne.n	8019652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8019642:	4b3f      	ldr	r3, [pc, #252]	; (8019740 <HAL_RCC_ClockConfig+0x1bc>)
 8019644:	681b      	ldr	r3, [r3, #0]
 8019646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801964a:	2b00      	cmp	r3, #0
 801964c:	d109      	bne.n	8019662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801964e:	2301      	movs	r3, #1
 8019650:	e06f      	b.n	8019732 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019652:	4b3b      	ldr	r3, [pc, #236]	; (8019740 <HAL_RCC_ClockConfig+0x1bc>)
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	f003 0302 	and.w	r3, r3, #2
 801965a:	2b00      	cmp	r3, #0
 801965c:	d101      	bne.n	8019662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801965e:	2301      	movs	r3, #1
 8019660:	e067      	b.n	8019732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8019662:	4b37      	ldr	r3, [pc, #220]	; (8019740 <HAL_RCC_ClockConfig+0x1bc>)
 8019664:	689b      	ldr	r3, [r3, #8]
 8019666:	f023 0203 	bic.w	r2, r3, #3
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	685b      	ldr	r3, [r3, #4]
 801966e:	4934      	ldr	r1, [pc, #208]	; (8019740 <HAL_RCC_ClockConfig+0x1bc>)
 8019670:	4313      	orrs	r3, r2
 8019672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8019674:	f7fb ffd6 	bl	8015624 <HAL_GetTick>
 8019678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801967a:	e00a      	b.n	8019692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801967c:	f7fb ffd2 	bl	8015624 <HAL_GetTick>
 8019680:	4602      	mov	r2, r0
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	1ad3      	subs	r3, r2, r3
 8019686:	f241 3288 	movw	r2, #5000	; 0x1388
 801968a:	4293      	cmp	r3, r2
 801968c:	d901      	bls.n	8019692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801968e:	2303      	movs	r3, #3
 8019690:	e04f      	b.n	8019732 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8019692:	4b2b      	ldr	r3, [pc, #172]	; (8019740 <HAL_RCC_ClockConfig+0x1bc>)
 8019694:	689b      	ldr	r3, [r3, #8]
 8019696:	f003 020c 	and.w	r2, r3, #12
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	685b      	ldr	r3, [r3, #4]
 801969e:	009b      	lsls	r3, r3, #2
 80196a0:	429a      	cmp	r2, r3
 80196a2:	d1eb      	bne.n	801967c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80196a4:	4b25      	ldr	r3, [pc, #148]	; (801973c <HAL_RCC_ClockConfig+0x1b8>)
 80196a6:	681b      	ldr	r3, [r3, #0]
 80196a8:	f003 030f 	and.w	r3, r3, #15
 80196ac:	683a      	ldr	r2, [r7, #0]
 80196ae:	429a      	cmp	r2, r3
 80196b0:	d20c      	bcs.n	80196cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80196b2:	4b22      	ldr	r3, [pc, #136]	; (801973c <HAL_RCC_ClockConfig+0x1b8>)
 80196b4:	683a      	ldr	r2, [r7, #0]
 80196b6:	b2d2      	uxtb	r2, r2
 80196b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80196ba:	4b20      	ldr	r3, [pc, #128]	; (801973c <HAL_RCC_ClockConfig+0x1b8>)
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	f003 030f 	and.w	r3, r3, #15
 80196c2:	683a      	ldr	r2, [r7, #0]
 80196c4:	429a      	cmp	r2, r3
 80196c6:	d001      	beq.n	80196cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80196c8:	2301      	movs	r3, #1
 80196ca:	e032      	b.n	8019732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	681b      	ldr	r3, [r3, #0]
 80196d0:	f003 0304 	and.w	r3, r3, #4
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d008      	beq.n	80196ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80196d8:	4b19      	ldr	r3, [pc, #100]	; (8019740 <HAL_RCC_ClockConfig+0x1bc>)
 80196da:	689b      	ldr	r3, [r3, #8]
 80196dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	68db      	ldr	r3, [r3, #12]
 80196e4:	4916      	ldr	r1, [pc, #88]	; (8019740 <HAL_RCC_ClockConfig+0x1bc>)
 80196e6:	4313      	orrs	r3, r2
 80196e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	681b      	ldr	r3, [r3, #0]
 80196ee:	f003 0308 	and.w	r3, r3, #8
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d009      	beq.n	801970a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80196f6:	4b12      	ldr	r3, [pc, #72]	; (8019740 <HAL_RCC_ClockConfig+0x1bc>)
 80196f8:	689b      	ldr	r3, [r3, #8]
 80196fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	691b      	ldr	r3, [r3, #16]
 8019702:	00db      	lsls	r3, r3, #3
 8019704:	490e      	ldr	r1, [pc, #56]	; (8019740 <HAL_RCC_ClockConfig+0x1bc>)
 8019706:	4313      	orrs	r3, r2
 8019708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801970a:	f000 f821 	bl	8019750 <HAL_RCC_GetSysClockFreq>
 801970e:	4601      	mov	r1, r0
 8019710:	4b0b      	ldr	r3, [pc, #44]	; (8019740 <HAL_RCC_ClockConfig+0x1bc>)
 8019712:	689b      	ldr	r3, [r3, #8]
 8019714:	091b      	lsrs	r3, r3, #4
 8019716:	f003 030f 	and.w	r3, r3, #15
 801971a:	4a0a      	ldr	r2, [pc, #40]	; (8019744 <HAL_RCC_ClockConfig+0x1c0>)
 801971c:	5cd3      	ldrb	r3, [r2, r3]
 801971e:	fa21 f303 	lsr.w	r3, r1, r3
 8019722:	4a09      	ldr	r2, [pc, #36]	; (8019748 <HAL_RCC_ClockConfig+0x1c4>)
 8019724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8019726:	4b09      	ldr	r3, [pc, #36]	; (801974c <HAL_RCC_ClockConfig+0x1c8>)
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	4618      	mov	r0, r3
 801972c:	f7fb f80c 	bl	8014748 <HAL_InitTick>

  return HAL_OK;
 8019730:	2300      	movs	r3, #0
}
 8019732:	4618      	mov	r0, r3
 8019734:	3710      	adds	r7, #16
 8019736:	46bd      	mov	sp, r7
 8019738:	bd80      	pop	{r7, pc}
 801973a:	bf00      	nop
 801973c:	40023c00 	.word	0x40023c00
 8019740:	40023800 	.word	0x40023800
 8019744:	0802e33c 	.word	0x0802e33c
 8019748:	20000698 	.word	0x20000698
 801974c:	2000069c 	.word	0x2000069c

08019750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8019750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019752:	b085      	sub	sp, #20
 8019754:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8019756:	2300      	movs	r3, #0
 8019758:	607b      	str	r3, [r7, #4]
 801975a:	2300      	movs	r3, #0
 801975c:	60fb      	str	r3, [r7, #12]
 801975e:	2300      	movs	r3, #0
 8019760:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8019762:	2300      	movs	r3, #0
 8019764:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8019766:	4b63      	ldr	r3, [pc, #396]	; (80198f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8019768:	689b      	ldr	r3, [r3, #8]
 801976a:	f003 030c 	and.w	r3, r3, #12
 801976e:	2b04      	cmp	r3, #4
 8019770:	d007      	beq.n	8019782 <HAL_RCC_GetSysClockFreq+0x32>
 8019772:	2b08      	cmp	r3, #8
 8019774:	d008      	beq.n	8019788 <HAL_RCC_GetSysClockFreq+0x38>
 8019776:	2b00      	cmp	r3, #0
 8019778:	f040 80b4 	bne.w	80198e4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801977c:	4b5e      	ldr	r3, [pc, #376]	; (80198f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801977e:	60bb      	str	r3, [r7, #8]
       break;
 8019780:	e0b3      	b.n	80198ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8019782:	4b5e      	ldr	r3, [pc, #376]	; (80198fc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8019784:	60bb      	str	r3, [r7, #8]
      break;
 8019786:	e0b0      	b.n	80198ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8019788:	4b5a      	ldr	r3, [pc, #360]	; (80198f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801978a:	685b      	ldr	r3, [r3, #4]
 801978c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019790:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8019792:	4b58      	ldr	r3, [pc, #352]	; (80198f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8019794:	685b      	ldr	r3, [r3, #4]
 8019796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801979a:	2b00      	cmp	r3, #0
 801979c:	d04a      	beq.n	8019834 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801979e:	4b55      	ldr	r3, [pc, #340]	; (80198f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80197a0:	685b      	ldr	r3, [r3, #4]
 80197a2:	099b      	lsrs	r3, r3, #6
 80197a4:	f04f 0400 	mov.w	r4, #0
 80197a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80197ac:	f04f 0200 	mov.w	r2, #0
 80197b0:	ea03 0501 	and.w	r5, r3, r1
 80197b4:	ea04 0602 	and.w	r6, r4, r2
 80197b8:	4629      	mov	r1, r5
 80197ba:	4632      	mov	r2, r6
 80197bc:	f04f 0300 	mov.w	r3, #0
 80197c0:	f04f 0400 	mov.w	r4, #0
 80197c4:	0154      	lsls	r4, r2, #5
 80197c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80197ca:	014b      	lsls	r3, r1, #5
 80197cc:	4619      	mov	r1, r3
 80197ce:	4622      	mov	r2, r4
 80197d0:	1b49      	subs	r1, r1, r5
 80197d2:	eb62 0206 	sbc.w	r2, r2, r6
 80197d6:	f04f 0300 	mov.w	r3, #0
 80197da:	f04f 0400 	mov.w	r4, #0
 80197de:	0194      	lsls	r4, r2, #6
 80197e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80197e4:	018b      	lsls	r3, r1, #6
 80197e6:	1a5b      	subs	r3, r3, r1
 80197e8:	eb64 0402 	sbc.w	r4, r4, r2
 80197ec:	f04f 0100 	mov.w	r1, #0
 80197f0:	f04f 0200 	mov.w	r2, #0
 80197f4:	00e2      	lsls	r2, r4, #3
 80197f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80197fa:	00d9      	lsls	r1, r3, #3
 80197fc:	460b      	mov	r3, r1
 80197fe:	4614      	mov	r4, r2
 8019800:	195b      	adds	r3, r3, r5
 8019802:	eb44 0406 	adc.w	r4, r4, r6
 8019806:	f04f 0100 	mov.w	r1, #0
 801980a:	f04f 0200 	mov.w	r2, #0
 801980e:	0262      	lsls	r2, r4, #9
 8019810:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8019814:	0259      	lsls	r1, r3, #9
 8019816:	460b      	mov	r3, r1
 8019818:	4614      	mov	r4, r2
 801981a:	4618      	mov	r0, r3
 801981c:	4621      	mov	r1, r4
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	f04f 0400 	mov.w	r4, #0
 8019824:	461a      	mov	r2, r3
 8019826:	4623      	mov	r3, r4
 8019828:	f7e7 fa86 	bl	8000d38 <__aeabi_uldivmod>
 801982c:	4603      	mov	r3, r0
 801982e:	460c      	mov	r4, r1
 8019830:	60fb      	str	r3, [r7, #12]
 8019832:	e049      	b.n	80198c8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8019834:	4b2f      	ldr	r3, [pc, #188]	; (80198f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8019836:	685b      	ldr	r3, [r3, #4]
 8019838:	099b      	lsrs	r3, r3, #6
 801983a:	f04f 0400 	mov.w	r4, #0
 801983e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8019842:	f04f 0200 	mov.w	r2, #0
 8019846:	ea03 0501 	and.w	r5, r3, r1
 801984a:	ea04 0602 	and.w	r6, r4, r2
 801984e:	4629      	mov	r1, r5
 8019850:	4632      	mov	r2, r6
 8019852:	f04f 0300 	mov.w	r3, #0
 8019856:	f04f 0400 	mov.w	r4, #0
 801985a:	0154      	lsls	r4, r2, #5
 801985c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8019860:	014b      	lsls	r3, r1, #5
 8019862:	4619      	mov	r1, r3
 8019864:	4622      	mov	r2, r4
 8019866:	1b49      	subs	r1, r1, r5
 8019868:	eb62 0206 	sbc.w	r2, r2, r6
 801986c:	f04f 0300 	mov.w	r3, #0
 8019870:	f04f 0400 	mov.w	r4, #0
 8019874:	0194      	lsls	r4, r2, #6
 8019876:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801987a:	018b      	lsls	r3, r1, #6
 801987c:	1a5b      	subs	r3, r3, r1
 801987e:	eb64 0402 	sbc.w	r4, r4, r2
 8019882:	f04f 0100 	mov.w	r1, #0
 8019886:	f04f 0200 	mov.w	r2, #0
 801988a:	00e2      	lsls	r2, r4, #3
 801988c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8019890:	00d9      	lsls	r1, r3, #3
 8019892:	460b      	mov	r3, r1
 8019894:	4614      	mov	r4, r2
 8019896:	195b      	adds	r3, r3, r5
 8019898:	eb44 0406 	adc.w	r4, r4, r6
 801989c:	f04f 0100 	mov.w	r1, #0
 80198a0:	f04f 0200 	mov.w	r2, #0
 80198a4:	02a2      	lsls	r2, r4, #10
 80198a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80198aa:	0299      	lsls	r1, r3, #10
 80198ac:	460b      	mov	r3, r1
 80198ae:	4614      	mov	r4, r2
 80198b0:	4618      	mov	r0, r3
 80198b2:	4621      	mov	r1, r4
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	f04f 0400 	mov.w	r4, #0
 80198ba:	461a      	mov	r2, r3
 80198bc:	4623      	mov	r3, r4
 80198be:	f7e7 fa3b 	bl	8000d38 <__aeabi_uldivmod>
 80198c2:	4603      	mov	r3, r0
 80198c4:	460c      	mov	r4, r1
 80198c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80198c8:	4b0a      	ldr	r3, [pc, #40]	; (80198f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80198ca:	685b      	ldr	r3, [r3, #4]
 80198cc:	0c1b      	lsrs	r3, r3, #16
 80198ce:	f003 0303 	and.w	r3, r3, #3
 80198d2:	3301      	adds	r3, #1
 80198d4:	005b      	lsls	r3, r3, #1
 80198d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80198d8:	68fa      	ldr	r2, [r7, #12]
 80198da:	683b      	ldr	r3, [r7, #0]
 80198dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80198e0:	60bb      	str	r3, [r7, #8]
      break;
 80198e2:	e002      	b.n	80198ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80198e4:	4b04      	ldr	r3, [pc, #16]	; (80198f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80198e6:	60bb      	str	r3, [r7, #8]
      break;
 80198e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80198ea:	68bb      	ldr	r3, [r7, #8]
}
 80198ec:	4618      	mov	r0, r3
 80198ee:	3714      	adds	r7, #20
 80198f0:	46bd      	mov	sp, r7
 80198f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80198f4:	40023800 	.word	0x40023800
 80198f8:	00f42400 	.word	0x00f42400
 80198fc:	007a1200 	.word	0x007a1200

08019900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8019900:	b480      	push	{r7}
 8019902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8019904:	4b03      	ldr	r3, [pc, #12]	; (8019914 <HAL_RCC_GetHCLKFreq+0x14>)
 8019906:	681b      	ldr	r3, [r3, #0]
}
 8019908:	4618      	mov	r0, r3
 801990a:	46bd      	mov	sp, r7
 801990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019910:	4770      	bx	lr
 8019912:	bf00      	nop
 8019914:	20000698 	.word	0x20000698

08019918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8019918:	b580      	push	{r7, lr}
 801991a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801991c:	f7ff fff0 	bl	8019900 <HAL_RCC_GetHCLKFreq>
 8019920:	4601      	mov	r1, r0
 8019922:	4b05      	ldr	r3, [pc, #20]	; (8019938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8019924:	689b      	ldr	r3, [r3, #8]
 8019926:	0a9b      	lsrs	r3, r3, #10
 8019928:	f003 0307 	and.w	r3, r3, #7
 801992c:	4a03      	ldr	r2, [pc, #12]	; (801993c <HAL_RCC_GetPCLK1Freq+0x24>)
 801992e:	5cd3      	ldrb	r3, [r2, r3]
 8019930:	fa21 f303 	lsr.w	r3, r1, r3
}
 8019934:	4618      	mov	r0, r3
 8019936:	bd80      	pop	{r7, pc}
 8019938:	40023800 	.word	0x40023800
 801993c:	0802e34c 	.word	0x0802e34c

08019940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8019940:	b580      	push	{r7, lr}
 8019942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8019944:	f7ff ffdc 	bl	8019900 <HAL_RCC_GetHCLKFreq>
 8019948:	4601      	mov	r1, r0
 801994a:	4b05      	ldr	r3, [pc, #20]	; (8019960 <HAL_RCC_GetPCLK2Freq+0x20>)
 801994c:	689b      	ldr	r3, [r3, #8]
 801994e:	0b5b      	lsrs	r3, r3, #13
 8019950:	f003 0307 	and.w	r3, r3, #7
 8019954:	4a03      	ldr	r2, [pc, #12]	; (8019964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8019956:	5cd3      	ldrb	r3, [r2, r3]
 8019958:	fa21 f303 	lsr.w	r3, r1, r3
}
 801995c:	4618      	mov	r0, r3
 801995e:	bd80      	pop	{r7, pc}
 8019960:	40023800 	.word	0x40023800
 8019964:	0802e34c 	.word	0x0802e34c

08019968 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8019968:	b480      	push	{r7}
 801996a:	b083      	sub	sp, #12
 801996c:	af00      	add	r7, sp, #0
 801996e:	6078      	str	r0, [r7, #4]
 8019970:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	220f      	movs	r2, #15
 8019976:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8019978:	4b12      	ldr	r3, [pc, #72]	; (80199c4 <HAL_RCC_GetClockConfig+0x5c>)
 801997a:	689b      	ldr	r3, [r3, #8]
 801997c:	f003 0203 	and.w	r2, r3, #3
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8019984:	4b0f      	ldr	r3, [pc, #60]	; (80199c4 <HAL_RCC_GetClockConfig+0x5c>)
 8019986:	689b      	ldr	r3, [r3, #8]
 8019988:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8019990:	4b0c      	ldr	r3, [pc, #48]	; (80199c4 <HAL_RCC_GetClockConfig+0x5c>)
 8019992:	689b      	ldr	r3, [r3, #8]
 8019994:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 801999c:	4b09      	ldr	r3, [pc, #36]	; (80199c4 <HAL_RCC_GetClockConfig+0x5c>)
 801999e:	689b      	ldr	r3, [r3, #8]
 80199a0:	08db      	lsrs	r3, r3, #3
 80199a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80199aa:	4b07      	ldr	r3, [pc, #28]	; (80199c8 <HAL_RCC_GetClockConfig+0x60>)
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	f003 020f 	and.w	r2, r3, #15
 80199b2:	683b      	ldr	r3, [r7, #0]
 80199b4:	601a      	str	r2, [r3, #0]
}
 80199b6:	bf00      	nop
 80199b8:	370c      	adds	r7, #12
 80199ba:	46bd      	mov	sp, r7
 80199bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199c0:	4770      	bx	lr
 80199c2:	bf00      	nop
 80199c4:	40023800 	.word	0x40023800
 80199c8:	40023c00 	.word	0x40023c00

080199cc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80199cc:	b580      	push	{r7, lr}
 80199ce:	b082      	sub	sp, #8
 80199d0:	af00      	add	r7, sp, #0
 80199d2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d101      	bne.n	80199de <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80199da:	2301      	movs	r3, #1
 80199dc:	e022      	b.n	8019a24 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80199e4:	b2db      	uxtb	r3, r3
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d105      	bne.n	80199f6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	2200      	movs	r2, #0
 80199ee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80199f0:	6878      	ldr	r0, [r7, #4]
 80199f2:	f7fa fd77 	bl	80144e4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	2203      	movs	r2, #3
 80199fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80199fe:	6878      	ldr	r0, [r7, #4]
 8019a00:	f000 f814 	bl	8019a2c <HAL_SD_InitCard>
 8019a04:	4603      	mov	r3, r0
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d001      	beq.n	8019a0e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8019a0a:	2301      	movs	r3, #1
 8019a0c:	e00a      	b.n	8019a24 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	2200      	movs	r2, #0
 8019a12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	2200      	movs	r2, #0
 8019a18:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	2201      	movs	r2, #1
 8019a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8019a22:	2300      	movs	r3, #0
}
 8019a24:	4618      	mov	r0, r3
 8019a26:	3708      	adds	r7, #8
 8019a28:	46bd      	mov	sp, r7
 8019a2a:	bd80      	pop	{r7, pc}

08019a2c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8019a2c:	b5b0      	push	{r4, r5, r7, lr}
 8019a2e:	b08e      	sub	sp, #56	; 0x38
 8019a30:	af04      	add	r7, sp, #16
 8019a32:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8019a34:	2300      	movs	r3, #0
 8019a36:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8019a38:	2300      	movs	r3, #0
 8019a3a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8019a3c:	2300      	movs	r3, #0
 8019a3e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8019a40:	2300      	movs	r3, #0
 8019a42:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8019a44:	2300      	movs	r3, #0
 8019a46:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8019a48:	2376      	movs	r3, #118	; 0x76
 8019a4a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	681d      	ldr	r5, [r3, #0]
 8019a50:	466c      	mov	r4, sp
 8019a52:	f107 0314 	add.w	r3, r7, #20
 8019a56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019a5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019a5e:	f107 0308 	add.w	r3, r7, #8
 8019a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019a64:	4628      	mov	r0, r5
 8019a66:	f003 fbdb 	bl	801d220 <SDIO_Init>
 8019a6a:	4603      	mov	r3, r0
 8019a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8019a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d001      	beq.n	8019a7c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8019a78:	2301      	movs	r3, #1
 8019a7a:	e031      	b.n	8019ae0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8019a7c:	4b1a      	ldr	r3, [pc, #104]	; (8019ae8 <HAL_SD_InitCard+0xbc>)
 8019a7e:	2200      	movs	r2, #0
 8019a80:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	681b      	ldr	r3, [r3, #0]
 8019a86:	4618      	mov	r0, r3
 8019a88:	f003 fc13 	bl	801d2b2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8019a8c:	4b16      	ldr	r3, [pc, #88]	; (8019ae8 <HAL_SD_InitCard+0xbc>)
 8019a8e:	2201      	movs	r2, #1
 8019a90:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8019a92:	6878      	ldr	r0, [r7, #4]
 8019a94:	f000 ffdc 	bl	801aa50 <SD_PowerON>
 8019a98:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8019a9a:	6a3b      	ldr	r3, [r7, #32]
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d00b      	beq.n	8019ab8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	2201      	movs	r2, #1
 8019aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019aac:	6a3b      	ldr	r3, [r7, #32]
 8019aae:	431a      	orrs	r2, r3
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8019ab4:	2301      	movs	r3, #1
 8019ab6:	e013      	b.n	8019ae0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8019ab8:	6878      	ldr	r0, [r7, #4]
 8019aba:	f000 fefb 	bl	801a8b4 <SD_InitCard>
 8019abe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8019ac0:	6a3b      	ldr	r3, [r7, #32]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d00b      	beq.n	8019ade <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	2201      	movs	r2, #1
 8019aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019ad2:	6a3b      	ldr	r3, [r7, #32]
 8019ad4:	431a      	orrs	r2, r3
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8019ada:	2301      	movs	r3, #1
 8019adc:	e000      	b.n	8019ae0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8019ade:	2300      	movs	r3, #0
}
 8019ae0:	4618      	mov	r0, r3
 8019ae2:	3728      	adds	r7, #40	; 0x28
 8019ae4:	46bd      	mov	sp, r7
 8019ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8019ae8:	422580a0 	.word	0x422580a0

08019aec <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8019aec:	b580      	push	{r7, lr}
 8019aee:	b08c      	sub	sp, #48	; 0x30
 8019af0:	af00      	add	r7, sp, #0
 8019af2:	60f8      	str	r0, [r7, #12]
 8019af4:	60b9      	str	r1, [r7, #8]
 8019af6:	607a      	str	r2, [r7, #4]
 8019af8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8019afe:	68bb      	ldr	r3, [r7, #8]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d107      	bne.n	8019b14 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b08:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8019b10:	2301      	movs	r3, #1
 8019b12:	e0c9      	b.n	8019ca8 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8019b14:	68fb      	ldr	r3, [r7, #12]
 8019b16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019b1a:	b2db      	uxtb	r3, r3
 8019b1c:	2b01      	cmp	r3, #1
 8019b1e:	f040 80c2 	bne.w	8019ca6 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	2200      	movs	r2, #0
 8019b26:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8019b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b2a:	683b      	ldr	r3, [r7, #0]
 8019b2c:	441a      	add	r2, r3
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b32:	429a      	cmp	r2, r3
 8019b34:	d907      	bls.n	8019b46 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8019b36:	68fb      	ldr	r3, [r7, #12]
 8019b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b3a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8019b42:	2301      	movs	r3, #1
 8019b44:	e0b0      	b.n	8019ca8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	2203      	movs	r2, #3
 8019b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8019b4e:	68fb      	ldr	r3, [r7, #12]
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	2200      	movs	r2, #0
 8019b54:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8019b56:	68fb      	ldr	r3, [r7, #12]
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b5c:	68fa      	ldr	r2, [r7, #12]
 8019b5e:	6812      	ldr	r2, [r2, #0]
 8019b60:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8019b64:	f043 0302 	orr.w	r3, r3, #2
 8019b68:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8019b6a:	68fb      	ldr	r3, [r7, #12]
 8019b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b6e:	4a50      	ldr	r2, [pc, #320]	; (8019cb0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8019b70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b76:	4a4f      	ldr	r2, [pc, #316]	; (8019cb4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8019b78:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8019b7a:	68fb      	ldr	r3, [r7, #12]
 8019b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b7e:	2200      	movs	r2, #0
 8019b80:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8019b82:	68fb      	ldr	r3, [r7, #12]
 8019b84:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8019b86:	68fb      	ldr	r3, [r7, #12]
 8019b88:	681b      	ldr	r3, [r3, #0]
 8019b8a:	3380      	adds	r3, #128	; 0x80
 8019b8c:	4619      	mov	r1, r3
 8019b8e:	68ba      	ldr	r2, [r7, #8]
 8019b90:	683b      	ldr	r3, [r7, #0]
 8019b92:	025b      	lsls	r3, r3, #9
 8019b94:	089b      	lsrs	r3, r3, #2
 8019b96:	f7fb ff03 	bl	80159a0 <HAL_DMA_Start_IT>
 8019b9a:	4603      	mov	r3, r0
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d017      	beq.n	8019bd0 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8019ba0:	68fb      	ldr	r3, [r7, #12]
 8019ba2:	681b      	ldr	r3, [r3, #0]
 8019ba4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8019bae:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8019bb0:	68fb      	ldr	r3, [r7, #12]
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	4a40      	ldr	r2, [pc, #256]	; (8019cb8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8019bb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8019bb8:	68fb      	ldr	r3, [r7, #12]
 8019bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019bbc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8019bc4:	68fb      	ldr	r3, [r7, #12]
 8019bc6:	2201      	movs	r2, #1
 8019bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8019bcc:	2301      	movs	r3, #1
 8019bce:	e06b      	b.n	8019ca8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8019bd0:	4b3a      	ldr	r3, [pc, #232]	; (8019cbc <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8019bd2:	2201      	movs	r2, #1
 8019bd4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019bda:	2b01      	cmp	r3, #1
 8019bdc:	d002      	beq.n	8019be4 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8019bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019be0:	025b      	lsls	r3, r3, #9
 8019be2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8019be4:	68fb      	ldr	r3, [r7, #12]
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8019bec:	4618      	mov	r0, r3
 8019bee:	f003 fbf3 	bl	801d3d8 <SDMMC_CmdBlockLength>
 8019bf2:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8019bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d00f      	beq.n	8019c1a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	681b      	ldr	r3, [r3, #0]
 8019bfe:	4a2e      	ldr	r2, [pc, #184]	; (8019cb8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8019c00:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c08:	431a      	orrs	r2, r3
 8019c0a:	68fb      	ldr	r3, [r7, #12]
 8019c0c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8019c0e:	68fb      	ldr	r3, [r7, #12]
 8019c10:	2201      	movs	r2, #1
 8019c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8019c16:	2301      	movs	r3, #1
 8019c18:	e046      	b.n	8019ca8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8019c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8019c1e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8019c20:	683b      	ldr	r3, [r7, #0]
 8019c22:	025b      	lsls	r3, r3, #9
 8019c24:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8019c26:	2390      	movs	r3, #144	; 0x90
 8019c28:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8019c2a:	2302      	movs	r3, #2
 8019c2c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8019c2e:	2300      	movs	r3, #0
 8019c30:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8019c32:	2301      	movs	r3, #1
 8019c34:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8019c36:	68fb      	ldr	r3, [r7, #12]
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	f107 0210 	add.w	r2, r7, #16
 8019c3e:	4611      	mov	r1, r2
 8019c40:	4618      	mov	r0, r3
 8019c42:	f003 fb9d 	bl	801d380 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8019c46:	683b      	ldr	r3, [r7, #0]
 8019c48:	2b01      	cmp	r3, #1
 8019c4a:	d90a      	bls.n	8019c62 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8019c4c:	68fb      	ldr	r3, [r7, #12]
 8019c4e:	2282      	movs	r2, #130	; 0x82
 8019c50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019c58:	4618      	mov	r0, r3
 8019c5a:	f003 fc01 	bl	801d460 <SDMMC_CmdReadMultiBlock>
 8019c5e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8019c60:	e009      	b.n	8019c76 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	2281      	movs	r2, #129	; 0x81
 8019c66:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8019c68:	68fb      	ldr	r3, [r7, #12]
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019c6e:	4618      	mov	r0, r3
 8019c70:	f003 fbd4 	bl	801d41c <SDMMC_CmdReadSingleBlock>
 8019c74:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8019c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d012      	beq.n	8019ca2 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8019c7c:	68fb      	ldr	r3, [r7, #12]
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	4a0d      	ldr	r2, [pc, #52]	; (8019cb8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8019c82:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c8a:	431a      	orrs	r2, r3
 8019c8c:	68fb      	ldr	r3, [r7, #12]
 8019c8e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	2201      	movs	r2, #1
 8019c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8019c98:	68fb      	ldr	r3, [r7, #12]
 8019c9a:	2200      	movs	r2, #0
 8019c9c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8019c9e:	2301      	movs	r3, #1
 8019ca0:	e002      	b.n	8019ca8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8019ca2:	2300      	movs	r3, #0
 8019ca4:	e000      	b.n	8019ca8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8019ca6:	2302      	movs	r3, #2
  }
}
 8019ca8:	4618      	mov	r0, r3
 8019caa:	3730      	adds	r7, #48	; 0x30
 8019cac:	46bd      	mov	sp, r7
 8019cae:	bd80      	pop	{r7, pc}
 8019cb0:	0801a6c3 	.word	0x0801a6c3
 8019cb4:	0801a735 	.word	0x0801a735
 8019cb8:	004005ff 	.word	0x004005ff
 8019cbc:	4225858c 	.word	0x4225858c

08019cc0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8019cc0:	b580      	push	{r7, lr}
 8019cc2:	b08c      	sub	sp, #48	; 0x30
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	60f8      	str	r0, [r7, #12]
 8019cc8:	60b9      	str	r1, [r7, #8]
 8019cca:	607a      	str	r2, [r7, #4]
 8019ccc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8019cd2:	68bb      	ldr	r3, [r7, #8]
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d107      	bne.n	8019ce8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019cdc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8019ce4:	2301      	movs	r3, #1
 8019ce6:	e0ce      	b.n	8019e86 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019cee:	b2db      	uxtb	r3, r3
 8019cf0:	2b01      	cmp	r3, #1
 8019cf2:	f040 80c7 	bne.w	8019e84 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8019cf6:	68fb      	ldr	r3, [r7, #12]
 8019cf8:	2200      	movs	r2, #0
 8019cfa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8019cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019cfe:	683b      	ldr	r3, [r7, #0]
 8019d00:	441a      	add	r2, r3
 8019d02:	68fb      	ldr	r3, [r7, #12]
 8019d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019d06:	429a      	cmp	r2, r3
 8019d08:	d907      	bls.n	8019d1a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8019d0a:	68fb      	ldr	r3, [r7, #12]
 8019d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8019d12:	68fb      	ldr	r3, [r7, #12]
 8019d14:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8019d16:	2301      	movs	r3, #1
 8019d18:	e0b5      	b.n	8019e86 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	2203      	movs	r2, #3
 8019d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8019d22:	68fb      	ldr	r3, [r7, #12]
 8019d24:	681b      	ldr	r3, [r3, #0]
 8019d26:	2200      	movs	r2, #0
 8019d28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8019d2a:	68fb      	ldr	r3, [r7, #12]
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d30:	68fa      	ldr	r2, [r7, #12]
 8019d32:	6812      	ldr	r2, [r2, #0]
 8019d34:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8019d38:	f043 0302 	orr.w	r3, r3, #2
 8019d3c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d42:	4a53      	ldr	r2, [pc, #332]	; (8019e90 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8019d44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d4a:	4a52      	ldr	r2, [pc, #328]	; (8019e94 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8019d4c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8019d4e:	68fb      	ldr	r3, [r7, #12]
 8019d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d52:	2200      	movs	r2, #0
 8019d54:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019d5a:	2b01      	cmp	r3, #1
 8019d5c:	d002      	beq.n	8019d64 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8019d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d60:	025b      	lsls	r3, r3, #9
 8019d62:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8019d64:	68fb      	ldr	r3, [r7, #12]
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8019d6c:	4618      	mov	r0, r3
 8019d6e:	f003 fb33 	bl	801d3d8 <SDMMC_CmdBlockLength>
 8019d72:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8019d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d00f      	beq.n	8019d9a <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8019d7a:	68fb      	ldr	r3, [r7, #12]
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	4a46      	ldr	r2, [pc, #280]	; (8019e98 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8019d80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8019d82:	68fb      	ldr	r3, [r7, #12]
 8019d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d88:	431a      	orrs	r2, r3
 8019d8a:	68fb      	ldr	r3, [r7, #12]
 8019d8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	2201      	movs	r2, #1
 8019d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8019d96:	2301      	movs	r3, #1
 8019d98:	e075      	b.n	8019e86 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8019d9a:	683b      	ldr	r3, [r7, #0]
 8019d9c:	2b01      	cmp	r3, #1
 8019d9e:	d90a      	bls.n	8019db6 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	22a0      	movs	r2, #160	; 0xa0
 8019da4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019dac:	4618      	mov	r0, r3
 8019dae:	f003 fb9b 	bl	801d4e8 <SDMMC_CmdWriteMultiBlock>
 8019db2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8019db4:	e009      	b.n	8019dca <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8019db6:	68fb      	ldr	r3, [r7, #12]
 8019db8:	2290      	movs	r2, #144	; 0x90
 8019dba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8019dbc:	68fb      	ldr	r3, [r7, #12]
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019dc2:	4618      	mov	r0, r3
 8019dc4:	f003 fb6e 	bl	801d4a4 <SDMMC_CmdWriteSingleBlock>
 8019dc8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8019dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	d012      	beq.n	8019df6 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	4a30      	ldr	r2, [pc, #192]	; (8019e98 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8019dd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8019dd8:	68fb      	ldr	r3, [r7, #12]
 8019dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dde:	431a      	orrs	r2, r3
 8019de0:	68fb      	ldr	r3, [r7, #12]
 8019de2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8019de4:	68fb      	ldr	r3, [r7, #12]
 8019de6:	2201      	movs	r2, #1
 8019de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8019dec:	68fb      	ldr	r3, [r7, #12]
 8019dee:	2200      	movs	r2, #0
 8019df0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8019df2:	2301      	movs	r3, #1
 8019df4:	e047      	b.n	8019e86 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8019df6:	4b29      	ldr	r3, [pc, #164]	; (8019e9c <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8019df8:	2201      	movs	r2, #1
 8019dfa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8019dfc:	68fb      	ldr	r3, [r7, #12]
 8019dfe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8019e00:	68b9      	ldr	r1, [r7, #8]
 8019e02:	68fb      	ldr	r3, [r7, #12]
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	3380      	adds	r3, #128	; 0x80
 8019e08:	461a      	mov	r2, r3
 8019e0a:	683b      	ldr	r3, [r7, #0]
 8019e0c:	025b      	lsls	r3, r3, #9
 8019e0e:	089b      	lsrs	r3, r3, #2
 8019e10:	f7fb fdc6 	bl	80159a0 <HAL_DMA_Start_IT>
 8019e14:	4603      	mov	r3, r0
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d01c      	beq.n	8019e54 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8019e1a:	68fb      	ldr	r3, [r7, #12]
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e20:	68fa      	ldr	r2, [r7, #12]
 8019e22:	6812      	ldr	r2, [r2, #0]
 8019e24:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8019e28:	f023 0302 	bic.w	r3, r3, #2
 8019e2c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	4a19      	ldr	r2, [pc, #100]	; (8019e98 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8019e34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8019e36:	68fb      	ldr	r3, [r7, #12]
 8019e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8019e3e:	68fb      	ldr	r3, [r7, #12]
 8019e40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	2201      	movs	r2, #1
 8019e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	2200      	movs	r2, #0
 8019e4e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8019e50:	2301      	movs	r3, #1
 8019e52:	e018      	b.n	8019e86 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8019e54:	f04f 33ff 	mov.w	r3, #4294967295
 8019e58:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8019e5a:	683b      	ldr	r3, [r7, #0]
 8019e5c:	025b      	lsls	r3, r3, #9
 8019e5e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8019e60:	2390      	movs	r3, #144	; 0x90
 8019e62:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8019e64:	2300      	movs	r3, #0
 8019e66:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8019e68:	2300      	movs	r3, #0
 8019e6a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8019e6c:	2301      	movs	r3, #1
 8019e6e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	f107 0210 	add.w	r2, r7, #16
 8019e78:	4611      	mov	r1, r2
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	f003 fa80 	bl	801d380 <SDIO_ConfigData>

      return HAL_OK;
 8019e80:	2300      	movs	r3, #0
 8019e82:	e000      	b.n	8019e86 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8019e84:	2302      	movs	r3, #2
  }
}
 8019e86:	4618      	mov	r0, r3
 8019e88:	3730      	adds	r7, #48	; 0x30
 8019e8a:	46bd      	mov	sp, r7
 8019e8c:	bd80      	pop	{r7, pc}
 8019e8e:	bf00      	nop
 8019e90:	0801a699 	.word	0x0801a699
 8019e94:	0801a735 	.word	0x0801a735
 8019e98:	004005ff 	.word	0x004005ff
 8019e9c:	4225858c 	.word	0x4225858c

08019ea0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8019ea0:	b580      	push	{r7, lr}
 8019ea2:	b084      	sub	sp, #16
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019eac:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019eb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d008      	beq.n	8019ece <HAL_SD_IRQHandler+0x2e>
 8019ebc:	68fb      	ldr	r3, [r7, #12]
 8019ebe:	f003 0308 	and.w	r3, r3, #8
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d003      	beq.n	8019ece <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8019ec6:	6878      	ldr	r0, [r7, #4]
 8019ec8:	f000 ffd8 	bl	801ae7c <SD_Read_IT>
 8019ecc:	e165      	b.n	801a19a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	f000 808f 	beq.w	8019ffc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019ee6:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	681b      	ldr	r3, [r3, #0]
 8019eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019eee:	687a      	ldr	r2, [r7, #4]
 8019ef0:	6812      	ldr	r2, [r2, #0]
 8019ef2:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8019ef6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8019efa:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	681b      	ldr	r3, [r3, #0]
 8019f06:	f022 0201 	bic.w	r2, r2, #1
 8019f0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8019f0c:	68fb      	ldr	r3, [r7, #12]
 8019f0e:	f003 0308 	and.w	r3, r3, #8
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d039      	beq.n	8019f8a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8019f16:	68fb      	ldr	r3, [r7, #12]
 8019f18:	f003 0302 	and.w	r3, r3, #2
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d104      	bne.n	8019f2a <HAL_SD_IRQHandler+0x8a>
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	f003 0320 	and.w	r3, r3, #32
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d011      	beq.n	8019f4e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	4618      	mov	r0, r3
 8019f30:	f003 fafc 	bl	801d52c <SDMMC_CmdStopTransfer>
 8019f34:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8019f36:	68bb      	ldr	r3, [r7, #8]
 8019f38:	2b00      	cmp	r3, #0
 8019f3a:	d008      	beq.n	8019f4e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019f40:	68bb      	ldr	r3, [r7, #8]
 8019f42:	431a      	orrs	r2, r3
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8019f48:	6878      	ldr	r0, [r7, #4]
 8019f4a:	f000 f92f 	bl	801a1ac <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	f240 523a 	movw	r2, #1338	; 0x53a
 8019f56:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	2201      	movs	r2, #1
 8019f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	2200      	movs	r2, #0
 8019f64:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8019f66:	68fb      	ldr	r3, [r7, #12]
 8019f68:	f003 0301 	and.w	r3, r3, #1
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d104      	bne.n	8019f7a <HAL_SD_IRQHandler+0xda>
 8019f70:	68fb      	ldr	r3, [r7, #12]
 8019f72:	f003 0302 	and.w	r3, r3, #2
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	d003      	beq.n	8019f82 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8019f7a:	6878      	ldr	r0, [r7, #4]
 8019f7c:	f003 ff5a 	bl	801de34 <HAL_SD_RxCpltCallback>
 8019f80:	e10b      	b.n	801a19a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8019f82:	6878      	ldr	r0, [r7, #4]
 8019f84:	f003 ff4c 	bl	801de20 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8019f88:	e107      	b.n	801a19a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	f000 8102 	beq.w	801a19a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	f003 0320 	and.w	r3, r3, #32
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d011      	beq.n	8019fc4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	4618      	mov	r0, r3
 8019fa6:	f003 fac1 	bl	801d52c <SDMMC_CmdStopTransfer>
 8019faa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8019fac:	68bb      	ldr	r3, [r7, #8]
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d008      	beq.n	8019fc4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019fb6:	68bb      	ldr	r3, [r7, #8]
 8019fb8:	431a      	orrs	r2, r3
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8019fbe:	6878      	ldr	r0, [r7, #4]
 8019fc0:	f000 f8f4 	bl	801a1ac <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	f003 0301 	and.w	r3, r3, #1
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	f040 80e5 	bne.w	801a19a <HAL_SD_IRQHandler+0x2fa>
 8019fd0:	68fb      	ldr	r3, [r7, #12]
 8019fd2:	f003 0302 	and.w	r3, r3, #2
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	f040 80df 	bne.w	801a19a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	681b      	ldr	r3, [r3, #0]
 8019fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	f022 0208 	bic.w	r2, r2, #8
 8019fea:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	2201      	movs	r2, #1
 8019ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8019ff4:	6878      	ldr	r0, [r7, #4]
 8019ff6:	f003 ff13 	bl	801de20 <HAL_SD_TxCpltCallback>
}
 8019ffa:	e0ce      	b.n	801a19a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	681b      	ldr	r3, [r3, #0]
 801a000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a006:	2b00      	cmp	r3, #0
 801a008:	d008      	beq.n	801a01c <HAL_SD_IRQHandler+0x17c>
 801a00a:	68fb      	ldr	r3, [r7, #12]
 801a00c:	f003 0308 	and.w	r3, r3, #8
 801a010:	2b00      	cmp	r3, #0
 801a012:	d003      	beq.n	801a01c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 801a014:	6878      	ldr	r0, [r7, #4]
 801a016:	f000 ff82 	bl	801af1e <SD_Write_IT>
 801a01a:	e0be      	b.n	801a19a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	681b      	ldr	r3, [r3, #0]
 801a020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a022:	f240 233a 	movw	r3, #570	; 0x23a
 801a026:	4013      	ands	r3, r2
 801a028:	2b00      	cmp	r3, #0
 801a02a:	f000 80b6 	beq.w	801a19a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a034:	f003 0302 	and.w	r3, r3, #2
 801a038:	2b00      	cmp	r3, #0
 801a03a:	d005      	beq.n	801a048 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a040:	f043 0202 	orr.w	r2, r3, #2
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	681b      	ldr	r3, [r3, #0]
 801a04c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a04e:	f003 0308 	and.w	r3, r3, #8
 801a052:	2b00      	cmp	r3, #0
 801a054:	d005      	beq.n	801a062 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a05a:	f043 0208 	orr.w	r2, r3, #8
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a068:	f003 0320 	and.w	r3, r3, #32
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	d005      	beq.n	801a07c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a074:	f043 0220 	orr.w	r2, r3, #32
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a082:	f003 0310 	and.w	r3, r3, #16
 801a086:	2b00      	cmp	r3, #0
 801a088:	d005      	beq.n	801a096 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a08e:	f043 0210 	orr.w	r2, r3, #16
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a09c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d005      	beq.n	801a0b0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a0a8:	f043 0208 	orr.w	r2, r3, #8
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	f240 723a 	movw	r2, #1850	; 0x73a
 801a0b8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	681b      	ldr	r3, [r3, #0]
 801a0be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a0c0:	687a      	ldr	r2, [r7, #4]
 801a0c2:	6812      	ldr	r2, [r2, #0]
 801a0c4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 801a0c8:	f023 0302 	bic.w	r3, r3, #2
 801a0cc:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	681b      	ldr	r3, [r3, #0]
 801a0d2:	4618      	mov	r0, r3
 801a0d4:	f003 fa2a 	bl	801d52c <SDMMC_CmdStopTransfer>
 801a0d8:	4602      	mov	r2, r0
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a0de:	431a      	orrs	r2, r3
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 801a0e4:	68fb      	ldr	r3, [r7, #12]
 801a0e6:	f003 0308 	and.w	r3, r3, #8
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d00a      	beq.n	801a104 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	2201      	movs	r2, #1
 801a0f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	2200      	movs	r2, #0
 801a0fa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 801a0fc:	6878      	ldr	r0, [r7, #4]
 801a0fe:	f000 f855 	bl	801a1ac <HAL_SD_ErrorCallback>
}
 801a102:	e04a      	b.n	801a19a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 801a104:	68fb      	ldr	r3, [r7, #12]
 801a106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	d045      	beq.n	801a19a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801a10e:	68fb      	ldr	r3, [r7, #12]
 801a110:	f003 0310 	and.w	r3, r3, #16
 801a114:	2b00      	cmp	r3, #0
 801a116:	d104      	bne.n	801a122 <HAL_SD_IRQHandler+0x282>
 801a118:	68fb      	ldr	r3, [r7, #12]
 801a11a:	f003 0320 	and.w	r3, r3, #32
 801a11e:	2b00      	cmp	r3, #0
 801a120:	d011      	beq.n	801a146 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a126:	4a1f      	ldr	r2, [pc, #124]	; (801a1a4 <HAL_SD_IRQHandler+0x304>)
 801a128:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a12e:	4618      	mov	r0, r3
 801a130:	f7fb fc8e 	bl	8015a50 <HAL_DMA_Abort_IT>
 801a134:	4603      	mov	r3, r0
 801a136:	2b00      	cmp	r3, #0
 801a138:	d02f      	beq.n	801a19a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a13e:	4618      	mov	r0, r3
 801a140:	f000 fb4a 	bl	801a7d8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 801a144:	e029      	b.n	801a19a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801a146:	68fb      	ldr	r3, [r7, #12]
 801a148:	f003 0301 	and.w	r3, r3, #1
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d104      	bne.n	801a15a <HAL_SD_IRQHandler+0x2ba>
 801a150:	68fb      	ldr	r3, [r7, #12]
 801a152:	f003 0302 	and.w	r3, r3, #2
 801a156:	2b00      	cmp	r3, #0
 801a158:	d011      	beq.n	801a17e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a15e:	4a12      	ldr	r2, [pc, #72]	; (801a1a8 <HAL_SD_IRQHandler+0x308>)
 801a160:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a166:	4618      	mov	r0, r3
 801a168:	f7fb fc72 	bl	8015a50 <HAL_DMA_Abort_IT>
 801a16c:	4603      	mov	r3, r0
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d013      	beq.n	801a19a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a176:	4618      	mov	r0, r3
 801a178:	f000 fb65 	bl	801a846 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 801a17c:	e00d      	b.n	801a19a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	2200      	movs	r2, #0
 801a182:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	2201      	movs	r2, #1
 801a188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	2200      	movs	r2, #0
 801a190:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 801a192:	6878      	ldr	r0, [r7, #4]
 801a194:	f003 fe3a 	bl	801de0c <HAL_SD_AbortCallback>
}
 801a198:	e7ff      	b.n	801a19a <HAL_SD_IRQHandler+0x2fa>
 801a19a:	bf00      	nop
 801a19c:	3710      	adds	r7, #16
 801a19e:	46bd      	mov	sp, r7
 801a1a0:	bd80      	pop	{r7, pc}
 801a1a2:	bf00      	nop
 801a1a4:	0801a7d9 	.word	0x0801a7d9
 801a1a8:	0801a847 	.word	0x0801a847

0801a1ac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 801a1ac:	b480      	push	{r7}
 801a1ae:	b083      	sub	sp, #12
 801a1b0:	af00      	add	r7, sp, #0
 801a1b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 801a1b4:	bf00      	nop
 801a1b6:	370c      	adds	r7, #12
 801a1b8:	46bd      	mov	sp, r7
 801a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1be:	4770      	bx	lr

0801a1c0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 801a1c0:	b480      	push	{r7}
 801a1c2:	b083      	sub	sp, #12
 801a1c4:	af00      	add	r7, sp, #0
 801a1c6:	6078      	str	r0, [r7, #4]
 801a1c8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a1ce:	0f9b      	lsrs	r3, r3, #30
 801a1d0:	b2da      	uxtb	r2, r3
 801a1d2:	683b      	ldr	r3, [r7, #0]
 801a1d4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a1da:	0e9b      	lsrs	r3, r3, #26
 801a1dc:	b2db      	uxtb	r3, r3
 801a1de:	f003 030f 	and.w	r3, r3, #15
 801a1e2:	b2da      	uxtb	r2, r3
 801a1e4:	683b      	ldr	r3, [r7, #0]
 801a1e6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a1ec:	0e1b      	lsrs	r3, r3, #24
 801a1ee:	b2db      	uxtb	r3, r3
 801a1f0:	f003 0303 	and.w	r3, r3, #3
 801a1f4:	b2da      	uxtb	r2, r3
 801a1f6:	683b      	ldr	r3, [r7, #0]
 801a1f8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a1fe:	0c1b      	lsrs	r3, r3, #16
 801a200:	b2da      	uxtb	r2, r3
 801a202:	683b      	ldr	r3, [r7, #0]
 801a204:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a20a:	0a1b      	lsrs	r3, r3, #8
 801a20c:	b2da      	uxtb	r2, r3
 801a20e:	683b      	ldr	r3, [r7, #0]
 801a210:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a216:	b2da      	uxtb	r2, r3
 801a218:	683b      	ldr	r3, [r7, #0]
 801a21a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a220:	0d1b      	lsrs	r3, r3, #20
 801a222:	b29a      	uxth	r2, r3
 801a224:	683b      	ldr	r3, [r7, #0]
 801a226:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a22c:	0c1b      	lsrs	r3, r3, #16
 801a22e:	b2db      	uxtb	r3, r3
 801a230:	f003 030f 	and.w	r3, r3, #15
 801a234:	b2da      	uxtb	r2, r3
 801a236:	683b      	ldr	r3, [r7, #0]
 801a238:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a23e:	0bdb      	lsrs	r3, r3, #15
 801a240:	b2db      	uxtb	r3, r3
 801a242:	f003 0301 	and.w	r3, r3, #1
 801a246:	b2da      	uxtb	r2, r3
 801a248:	683b      	ldr	r3, [r7, #0]
 801a24a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a250:	0b9b      	lsrs	r3, r3, #14
 801a252:	b2db      	uxtb	r3, r3
 801a254:	f003 0301 	and.w	r3, r3, #1
 801a258:	b2da      	uxtb	r2, r3
 801a25a:	683b      	ldr	r3, [r7, #0]
 801a25c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a262:	0b5b      	lsrs	r3, r3, #13
 801a264:	b2db      	uxtb	r3, r3
 801a266:	f003 0301 	and.w	r3, r3, #1
 801a26a:	b2da      	uxtb	r2, r3
 801a26c:	683b      	ldr	r3, [r7, #0]
 801a26e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a274:	0b1b      	lsrs	r3, r3, #12
 801a276:	b2db      	uxtb	r3, r3
 801a278:	f003 0301 	and.w	r3, r3, #1
 801a27c:	b2da      	uxtb	r2, r3
 801a27e:	683b      	ldr	r3, [r7, #0]
 801a280:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 801a282:	683b      	ldr	r3, [r7, #0]
 801a284:	2200      	movs	r2, #0
 801a286:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d163      	bne.n	801a358 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a294:	009a      	lsls	r2, r3, #2
 801a296:	f640 73fc 	movw	r3, #4092	; 0xffc
 801a29a:	4013      	ands	r3, r2
 801a29c:	687a      	ldr	r2, [r7, #4]
 801a29e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 801a2a0:	0f92      	lsrs	r2, r2, #30
 801a2a2:	431a      	orrs	r2, r3
 801a2a4:	683b      	ldr	r3, [r7, #0]
 801a2a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a2ac:	0edb      	lsrs	r3, r3, #27
 801a2ae:	b2db      	uxtb	r3, r3
 801a2b0:	f003 0307 	and.w	r3, r3, #7
 801a2b4:	b2da      	uxtb	r2, r3
 801a2b6:	683b      	ldr	r3, [r7, #0]
 801a2b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a2be:	0e1b      	lsrs	r3, r3, #24
 801a2c0:	b2db      	uxtb	r3, r3
 801a2c2:	f003 0307 	and.w	r3, r3, #7
 801a2c6:	b2da      	uxtb	r2, r3
 801a2c8:	683b      	ldr	r3, [r7, #0]
 801a2ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a2d0:	0d5b      	lsrs	r3, r3, #21
 801a2d2:	b2db      	uxtb	r3, r3
 801a2d4:	f003 0307 	and.w	r3, r3, #7
 801a2d8:	b2da      	uxtb	r2, r3
 801a2da:	683b      	ldr	r3, [r7, #0]
 801a2dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a2e2:	0c9b      	lsrs	r3, r3, #18
 801a2e4:	b2db      	uxtb	r3, r3
 801a2e6:	f003 0307 	and.w	r3, r3, #7
 801a2ea:	b2da      	uxtb	r2, r3
 801a2ec:	683b      	ldr	r3, [r7, #0]
 801a2ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a2f4:	0bdb      	lsrs	r3, r3, #15
 801a2f6:	b2db      	uxtb	r3, r3
 801a2f8:	f003 0307 	and.w	r3, r3, #7
 801a2fc:	b2da      	uxtb	r2, r3
 801a2fe:	683b      	ldr	r3, [r7, #0]
 801a300:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 801a302:	683b      	ldr	r3, [r7, #0]
 801a304:	691b      	ldr	r3, [r3, #16]
 801a306:	1c5a      	adds	r2, r3, #1
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 801a30c:	683b      	ldr	r3, [r7, #0]
 801a30e:	7e1b      	ldrb	r3, [r3, #24]
 801a310:	b2db      	uxtb	r3, r3
 801a312:	f003 0307 	and.w	r3, r3, #7
 801a316:	3302      	adds	r3, #2
 801a318:	2201      	movs	r2, #1
 801a31a:	fa02 f303 	lsl.w	r3, r2, r3
 801a31e:	687a      	ldr	r2, [r7, #4]
 801a320:	6d52      	ldr	r2, [r2, #84]	; 0x54
 801a322:	fb02 f203 	mul.w	r2, r2, r3
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 801a32a:	683b      	ldr	r3, [r7, #0]
 801a32c:	7a1b      	ldrb	r3, [r3, #8]
 801a32e:	b2db      	uxtb	r3, r3
 801a330:	f003 030f 	and.w	r3, r3, #15
 801a334:	2201      	movs	r2, #1
 801a336:	409a      	lsls	r2, r3
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a340:	687a      	ldr	r2, [r7, #4]
 801a342:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801a344:	0a52      	lsrs	r2, r2, #9
 801a346:	fb02 f203 	mul.w	r2, r2, r3
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a354:	661a      	str	r2, [r3, #96]	; 0x60
 801a356:	e031      	b.n	801a3bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a35c:	2b01      	cmp	r3, #1
 801a35e:	d11d      	bne.n	801a39c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a364:	041b      	lsls	r3, r3, #16
 801a366:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a36e:	0c1b      	lsrs	r3, r3, #16
 801a370:	431a      	orrs	r2, r3
 801a372:	683b      	ldr	r3, [r7, #0]
 801a374:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 801a376:	683b      	ldr	r3, [r7, #0]
 801a378:	691b      	ldr	r3, [r3, #16]
 801a37a:	3301      	adds	r3, #1
 801a37c:	029a      	lsls	r2, r3, #10
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a390:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	661a      	str	r2, [r3, #96]	; 0x60
 801a39a:	e00f      	b.n	801a3bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	4a58      	ldr	r2, [pc, #352]	; (801a504 <HAL_SD_GetCardCSD+0x344>)
 801a3a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	2201      	movs	r2, #1
 801a3b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801a3b8:	2301      	movs	r3, #1
 801a3ba:	e09d      	b.n	801a4f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a3c0:	0b9b      	lsrs	r3, r3, #14
 801a3c2:	b2db      	uxtb	r3, r3
 801a3c4:	f003 0301 	and.w	r3, r3, #1
 801a3c8:	b2da      	uxtb	r2, r3
 801a3ca:	683b      	ldr	r3, [r7, #0]
 801a3cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a3d2:	09db      	lsrs	r3, r3, #7
 801a3d4:	b2db      	uxtb	r3, r3
 801a3d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a3da:	b2da      	uxtb	r2, r3
 801a3dc:	683b      	ldr	r3, [r7, #0]
 801a3de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a3e4:	b2db      	uxtb	r3, r3
 801a3e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a3ea:	b2da      	uxtb	r2, r3
 801a3ec:	683b      	ldr	r3, [r7, #0]
 801a3ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a3f4:	0fdb      	lsrs	r3, r3, #31
 801a3f6:	b2da      	uxtb	r2, r3
 801a3f8:	683b      	ldr	r3, [r7, #0]
 801a3fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a400:	0f5b      	lsrs	r3, r3, #29
 801a402:	b2db      	uxtb	r3, r3
 801a404:	f003 0303 	and.w	r3, r3, #3
 801a408:	b2da      	uxtb	r2, r3
 801a40a:	683b      	ldr	r3, [r7, #0]
 801a40c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a412:	0e9b      	lsrs	r3, r3, #26
 801a414:	b2db      	uxtb	r3, r3
 801a416:	f003 0307 	and.w	r3, r3, #7
 801a41a:	b2da      	uxtb	r2, r3
 801a41c:	683b      	ldr	r3, [r7, #0]
 801a41e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a424:	0d9b      	lsrs	r3, r3, #22
 801a426:	b2db      	uxtb	r3, r3
 801a428:	f003 030f 	and.w	r3, r3, #15
 801a42c:	b2da      	uxtb	r2, r3
 801a42e:	683b      	ldr	r3, [r7, #0]
 801a430:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a436:	0d5b      	lsrs	r3, r3, #21
 801a438:	b2db      	uxtb	r3, r3
 801a43a:	f003 0301 	and.w	r3, r3, #1
 801a43e:	b2da      	uxtb	r2, r3
 801a440:	683b      	ldr	r3, [r7, #0]
 801a442:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 801a446:	683b      	ldr	r3, [r7, #0]
 801a448:	2200      	movs	r2, #0
 801a44a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a452:	0c1b      	lsrs	r3, r3, #16
 801a454:	b2db      	uxtb	r3, r3
 801a456:	f003 0301 	and.w	r3, r3, #1
 801a45a:	b2da      	uxtb	r2, r3
 801a45c:	683b      	ldr	r3, [r7, #0]
 801a45e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a466:	0bdb      	lsrs	r3, r3, #15
 801a468:	b2db      	uxtb	r3, r3
 801a46a:	f003 0301 	and.w	r3, r3, #1
 801a46e:	b2da      	uxtb	r2, r3
 801a470:	683b      	ldr	r3, [r7, #0]
 801a472:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a47a:	0b9b      	lsrs	r3, r3, #14
 801a47c:	b2db      	uxtb	r3, r3
 801a47e:	f003 0301 	and.w	r3, r3, #1
 801a482:	b2da      	uxtb	r2, r3
 801a484:	683b      	ldr	r3, [r7, #0]
 801a486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a48e:	0b5b      	lsrs	r3, r3, #13
 801a490:	b2db      	uxtb	r3, r3
 801a492:	f003 0301 	and.w	r3, r3, #1
 801a496:	b2da      	uxtb	r2, r3
 801a498:	683b      	ldr	r3, [r7, #0]
 801a49a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a4a2:	0b1b      	lsrs	r3, r3, #12
 801a4a4:	b2db      	uxtb	r3, r3
 801a4a6:	f003 0301 	and.w	r3, r3, #1
 801a4aa:	b2da      	uxtb	r2, r3
 801a4ac:	683b      	ldr	r3, [r7, #0]
 801a4ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a4b6:	0a9b      	lsrs	r3, r3, #10
 801a4b8:	b2db      	uxtb	r3, r3
 801a4ba:	f003 0303 	and.w	r3, r3, #3
 801a4be:	b2da      	uxtb	r2, r3
 801a4c0:	683b      	ldr	r3, [r7, #0]
 801a4c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a4ca:	0a1b      	lsrs	r3, r3, #8
 801a4cc:	b2db      	uxtb	r3, r3
 801a4ce:	f003 0303 	and.w	r3, r3, #3
 801a4d2:	b2da      	uxtb	r2, r3
 801a4d4:	683b      	ldr	r3, [r7, #0]
 801a4d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a4de:	085b      	lsrs	r3, r3, #1
 801a4e0:	b2db      	uxtb	r3, r3
 801a4e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a4e6:	b2da      	uxtb	r2, r3
 801a4e8:	683b      	ldr	r3, [r7, #0]
 801a4ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 801a4ee:	683b      	ldr	r3, [r7, #0]
 801a4f0:	2201      	movs	r2, #1
 801a4f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 801a4f6:	2300      	movs	r3, #0
}
 801a4f8:	4618      	mov	r0, r3
 801a4fa:	370c      	adds	r7, #12
 801a4fc:	46bd      	mov	sp, r7
 801a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a502:	4770      	bx	lr
 801a504:	004005ff 	.word	0x004005ff

0801a508 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 801a508:	b480      	push	{r7}
 801a50a:	b083      	sub	sp, #12
 801a50c:	af00      	add	r7, sp, #0
 801a50e:	6078      	str	r0, [r7, #4]
 801a510:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a516:	683b      	ldr	r3, [r7, #0]
 801a518:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801a51e:	683b      	ldr	r3, [r7, #0]
 801a520:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a526:	683b      	ldr	r3, [r7, #0]
 801a528:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a52e:	683b      	ldr	r3, [r7, #0]
 801a530:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a536:	683b      	ldr	r3, [r7, #0]
 801a538:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a53e:	683b      	ldr	r3, [r7, #0]
 801a540:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a546:	683b      	ldr	r3, [r7, #0]
 801a548:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801a54e:	683b      	ldr	r3, [r7, #0]
 801a550:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 801a552:	2300      	movs	r3, #0
}
 801a554:	4618      	mov	r0, r3
 801a556:	370c      	adds	r7, #12
 801a558:	46bd      	mov	sp, r7
 801a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a55e:	4770      	bx	lr

0801a560 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 801a560:	b5b0      	push	{r4, r5, r7, lr}
 801a562:	b08e      	sub	sp, #56	; 0x38
 801a564:	af04      	add	r7, sp, #16
 801a566:	6078      	str	r0, [r7, #4]
 801a568:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	2203      	movs	r2, #3
 801a56e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a576:	2b03      	cmp	r3, #3
 801a578:	d02e      	beq.n	801a5d8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 801a57a:	683b      	ldr	r3, [r7, #0]
 801a57c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a580:	d106      	bne.n	801a590 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a586:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	639a      	str	r2, [r3, #56]	; 0x38
 801a58e:	e029      	b.n	801a5e4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 801a590:	683b      	ldr	r3, [r7, #0]
 801a592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a596:	d10a      	bne.n	801a5ae <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 801a598:	6878      	ldr	r0, [r7, #4]
 801a59a:	f000 fb0f 	bl	801abbc <SD_WideBus_Enable>
 801a59e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5a6:	431a      	orrs	r2, r3
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	639a      	str	r2, [r3, #56]	; 0x38
 801a5ac:	e01a      	b.n	801a5e4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 801a5ae:	683b      	ldr	r3, [r7, #0]
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d10a      	bne.n	801a5ca <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 801a5b4:	6878      	ldr	r0, [r7, #4]
 801a5b6:	f000 fb4c 	bl	801ac52 <SD_WideBus_Disable>
 801a5ba:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5c2:	431a      	orrs	r2, r3
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	639a      	str	r2, [r3, #56]	; 0x38
 801a5c8:	e00c      	b.n	801a5e4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a5ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	639a      	str	r2, [r3, #56]	; 0x38
 801a5d6:	e005      	b.n	801a5e4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a5dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d009      	beq.n	801a600 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	681b      	ldr	r3, [r3, #0]
 801a5f0:	4a18      	ldr	r2, [pc, #96]	; (801a654 <HAL_SD_ConfigWideBusOperation+0xf4>)
 801a5f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	2201      	movs	r2, #1
 801a5f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801a5fc:	2301      	movs	r3, #1
 801a5fe:	e024      	b.n	801a64a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	685b      	ldr	r3, [r3, #4]
 801a604:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	689b      	ldr	r3, [r3, #8]
 801a60a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	68db      	ldr	r3, [r3, #12]
 801a610:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 801a612:	683b      	ldr	r3, [r7, #0]
 801a614:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	695b      	ldr	r3, [r3, #20]
 801a61a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	699b      	ldr	r3, [r3, #24]
 801a620:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	681d      	ldr	r5, [r3, #0]
 801a626:	466c      	mov	r4, sp
 801a628:	f107 0318 	add.w	r3, r7, #24
 801a62c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a630:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801a634:	f107 030c 	add.w	r3, r7, #12
 801a638:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a63a:	4628      	mov	r0, r5
 801a63c:	f002 fdf0 	bl	801d220 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	2201      	movs	r2, #1
 801a644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801a648:	2300      	movs	r3, #0
}
 801a64a:	4618      	mov	r0, r3
 801a64c:	3728      	adds	r7, #40	; 0x28
 801a64e:	46bd      	mov	sp, r7
 801a650:	bdb0      	pop	{r4, r5, r7, pc}
 801a652:	bf00      	nop
 801a654:	004005ff 	.word	0x004005ff

0801a658 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 801a658:	b580      	push	{r7, lr}
 801a65a:	b086      	sub	sp, #24
 801a65c:	af00      	add	r7, sp, #0
 801a65e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 801a660:	2300      	movs	r3, #0
 801a662:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 801a664:	f107 030c 	add.w	r3, r7, #12
 801a668:	4619      	mov	r1, r3
 801a66a:	6878      	ldr	r0, [r7, #4]
 801a66c:	f000 fa7e 	bl	801ab6c <SD_SendStatus>
 801a670:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801a672:	697b      	ldr	r3, [r7, #20]
 801a674:	2b00      	cmp	r3, #0
 801a676:	d005      	beq.n	801a684 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a67c:	697b      	ldr	r3, [r7, #20]
 801a67e:	431a      	orrs	r2, r3
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 801a684:	68fb      	ldr	r3, [r7, #12]
 801a686:	0a5b      	lsrs	r3, r3, #9
 801a688:	f003 030f 	and.w	r3, r3, #15
 801a68c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 801a68e:	693b      	ldr	r3, [r7, #16]
}
 801a690:	4618      	mov	r0, r3
 801a692:	3718      	adds	r7, #24
 801a694:	46bd      	mov	sp, r7
 801a696:	bd80      	pop	{r7, pc}

0801a698 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801a698:	b480      	push	{r7}
 801a69a:	b085      	sub	sp, #20
 801a69c:	af00      	add	r7, sp, #0
 801a69e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6a4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 801a6a6:	68fb      	ldr	r3, [r7, #12]
 801a6a8:	681b      	ldr	r3, [r3, #0]
 801a6aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a6ac:	68fb      	ldr	r3, [r7, #12]
 801a6ae:	681b      	ldr	r3, [r3, #0]
 801a6b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a6b4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 801a6b6:	bf00      	nop
 801a6b8:	3714      	adds	r7, #20
 801a6ba:	46bd      	mov	sp, r7
 801a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6c0:	4770      	bx	lr

0801a6c2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801a6c2:	b580      	push	{r7, lr}
 801a6c4:	b084      	sub	sp, #16
 801a6c6:	af00      	add	r7, sp, #0
 801a6c8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6ce:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 801a6d0:	68fb      	ldr	r3, [r7, #12]
 801a6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a6d4:	2b82      	cmp	r3, #130	; 0x82
 801a6d6:	d111      	bne.n	801a6fc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801a6d8:	68fb      	ldr	r3, [r7, #12]
 801a6da:	681b      	ldr	r3, [r3, #0]
 801a6dc:	4618      	mov	r0, r3
 801a6de:	f002 ff25 	bl	801d52c <SDMMC_CmdStopTransfer>
 801a6e2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 801a6e4:	68bb      	ldr	r3, [r7, #8]
 801a6e6:	2b00      	cmp	r3, #0
 801a6e8:	d008      	beq.n	801a6fc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 801a6ea:	68fb      	ldr	r3, [r7, #12]
 801a6ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a6ee:	68bb      	ldr	r3, [r7, #8]
 801a6f0:	431a      	orrs	r2, r3
 801a6f2:	68fb      	ldr	r3, [r7, #12]
 801a6f4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 801a6f6:	68f8      	ldr	r0, [r7, #12]
 801a6f8:	f7ff fd58 	bl	801a1ac <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a702:	68fb      	ldr	r3, [r7, #12]
 801a704:	681b      	ldr	r3, [r3, #0]
 801a706:	f022 0208 	bic.w	r2, r2, #8
 801a70a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 801a70c:	68fb      	ldr	r3, [r7, #12]
 801a70e:	681b      	ldr	r3, [r3, #0]
 801a710:	f240 523a 	movw	r2, #1338	; 0x53a
 801a714:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 801a716:	68fb      	ldr	r3, [r7, #12]
 801a718:	2201      	movs	r2, #1
 801a71a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 801a71e:	68fb      	ldr	r3, [r7, #12]
 801a720:	2200      	movs	r2, #0
 801a722:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 801a724:	68f8      	ldr	r0, [r7, #12]
 801a726:	f003 fb85 	bl	801de34 <HAL_SD_RxCpltCallback>
#endif
}
 801a72a:	bf00      	nop
 801a72c:	3710      	adds	r7, #16
 801a72e:	46bd      	mov	sp, r7
 801a730:	bd80      	pop	{r7, pc}
	...

0801a734 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 801a734:	b580      	push	{r7, lr}
 801a736:	b086      	sub	sp, #24
 801a738:	af00      	add	r7, sp, #0
 801a73a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a740:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801a742:	6878      	ldr	r0, [r7, #4]
 801a744:	f7fb fb3e 	bl	8015dc4 <HAL_DMA_GetError>
 801a748:	4603      	mov	r3, r0
 801a74a:	2b02      	cmp	r3, #2
 801a74c:	d03e      	beq.n	801a7cc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 801a74e:	697b      	ldr	r3, [r7, #20]
 801a750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a754:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 801a756:	697b      	ldr	r3, [r7, #20]
 801a758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a75a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a75c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 801a75e:	693b      	ldr	r3, [r7, #16]
 801a760:	2b01      	cmp	r3, #1
 801a762:	d002      	beq.n	801a76a <SD_DMAError+0x36>
 801a764:	68fb      	ldr	r3, [r7, #12]
 801a766:	2b01      	cmp	r3, #1
 801a768:	d12d      	bne.n	801a7c6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801a76a:	697b      	ldr	r3, [r7, #20]
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	4a19      	ldr	r2, [pc, #100]	; (801a7d4 <SD_DMAError+0xa0>)
 801a770:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 801a772:	697b      	ldr	r3, [r7, #20]
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a778:	697b      	ldr	r3, [r7, #20]
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 801a780:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 801a782:	697b      	ldr	r3, [r7, #20]
 801a784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a786:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801a78a:	697b      	ldr	r3, [r7, #20]
 801a78c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 801a78e:	6978      	ldr	r0, [r7, #20]
 801a790:	f7ff ff62 	bl	801a658 <HAL_SD_GetCardState>
 801a794:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 801a796:	68bb      	ldr	r3, [r7, #8]
 801a798:	2b06      	cmp	r3, #6
 801a79a:	d002      	beq.n	801a7a2 <SD_DMAError+0x6e>
 801a79c:	68bb      	ldr	r3, [r7, #8]
 801a79e:	2b05      	cmp	r3, #5
 801a7a0:	d10a      	bne.n	801a7b8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 801a7a2:	697b      	ldr	r3, [r7, #20]
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	4618      	mov	r0, r3
 801a7a8:	f002 fec0 	bl	801d52c <SDMMC_CmdStopTransfer>
 801a7ac:	4602      	mov	r2, r0
 801a7ae:	697b      	ldr	r3, [r7, #20]
 801a7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7b2:	431a      	orrs	r2, r3
 801a7b4:	697b      	ldr	r3, [r7, #20]
 801a7b6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 801a7b8:	697b      	ldr	r3, [r7, #20]
 801a7ba:	2201      	movs	r2, #1
 801a7bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801a7c0:	697b      	ldr	r3, [r7, #20]
 801a7c2:	2200      	movs	r2, #0
 801a7c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 801a7c6:	6978      	ldr	r0, [r7, #20]
 801a7c8:	f7ff fcf0 	bl	801a1ac <HAL_SD_ErrorCallback>
#endif
  }
}
 801a7cc:	bf00      	nop
 801a7ce:	3718      	adds	r7, #24
 801a7d0:	46bd      	mov	sp, r7
 801a7d2:	bd80      	pop	{r7, pc}
 801a7d4:	004005ff 	.word	0x004005ff

0801a7d8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 801a7d8:	b580      	push	{r7, lr}
 801a7da:	b084      	sub	sp, #16
 801a7dc:	af00      	add	r7, sp, #0
 801a7de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7e4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 801a7e6:	68fb      	ldr	r3, [r7, #12]
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	f240 523a 	movw	r2, #1338	; 0x53a
 801a7ee:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 801a7f0:	68f8      	ldr	r0, [r7, #12]
 801a7f2:	f7ff ff31 	bl	801a658 <HAL_SD_GetCardState>
 801a7f6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 801a7f8:	68fb      	ldr	r3, [r7, #12]
 801a7fa:	2201      	movs	r2, #1
 801a7fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 801a800:	68fb      	ldr	r3, [r7, #12]
 801a802:	2200      	movs	r2, #0
 801a804:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 801a806:	68bb      	ldr	r3, [r7, #8]
 801a808:	2b06      	cmp	r3, #6
 801a80a:	d002      	beq.n	801a812 <SD_DMATxAbort+0x3a>
 801a80c:	68bb      	ldr	r3, [r7, #8]
 801a80e:	2b05      	cmp	r3, #5
 801a810:	d10a      	bne.n	801a828 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 801a812:	68fb      	ldr	r3, [r7, #12]
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	4618      	mov	r0, r3
 801a818:	f002 fe88 	bl	801d52c <SDMMC_CmdStopTransfer>
 801a81c:	4602      	mov	r2, r0
 801a81e:	68fb      	ldr	r3, [r7, #12]
 801a820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a822:	431a      	orrs	r2, r3
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d103      	bne.n	801a838 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 801a830:	68f8      	ldr	r0, [r7, #12]
 801a832:	f003 faeb 	bl	801de0c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 801a836:	e002      	b.n	801a83e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 801a838:	68f8      	ldr	r0, [r7, #12]
 801a83a:	f7ff fcb7 	bl	801a1ac <HAL_SD_ErrorCallback>
}
 801a83e:	bf00      	nop
 801a840:	3710      	adds	r7, #16
 801a842:	46bd      	mov	sp, r7
 801a844:	bd80      	pop	{r7, pc}

0801a846 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 801a846:	b580      	push	{r7, lr}
 801a848:	b084      	sub	sp, #16
 801a84a:	af00      	add	r7, sp, #0
 801a84c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a852:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 801a854:	68fb      	ldr	r3, [r7, #12]
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	f240 523a 	movw	r2, #1338	; 0x53a
 801a85c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 801a85e:	68f8      	ldr	r0, [r7, #12]
 801a860:	f7ff fefa 	bl	801a658 <HAL_SD_GetCardState>
 801a864:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 801a866:	68fb      	ldr	r3, [r7, #12]
 801a868:	2201      	movs	r2, #1
 801a86a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 801a86e:	68fb      	ldr	r3, [r7, #12]
 801a870:	2200      	movs	r2, #0
 801a872:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 801a874:	68bb      	ldr	r3, [r7, #8]
 801a876:	2b06      	cmp	r3, #6
 801a878:	d002      	beq.n	801a880 <SD_DMARxAbort+0x3a>
 801a87a:	68bb      	ldr	r3, [r7, #8]
 801a87c:	2b05      	cmp	r3, #5
 801a87e:	d10a      	bne.n	801a896 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 801a880:	68fb      	ldr	r3, [r7, #12]
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	4618      	mov	r0, r3
 801a886:	f002 fe51 	bl	801d52c <SDMMC_CmdStopTransfer>
 801a88a:	4602      	mov	r2, r0
 801a88c:	68fb      	ldr	r3, [r7, #12]
 801a88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a890:	431a      	orrs	r2, r3
 801a892:	68fb      	ldr	r3, [r7, #12]
 801a894:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 801a896:	68fb      	ldr	r3, [r7, #12]
 801a898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d103      	bne.n	801a8a6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 801a89e:	68f8      	ldr	r0, [r7, #12]
 801a8a0:	f003 fab4 	bl	801de0c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 801a8a4:	e002      	b.n	801a8ac <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 801a8a6:	68f8      	ldr	r0, [r7, #12]
 801a8a8:	f7ff fc80 	bl	801a1ac <HAL_SD_ErrorCallback>
}
 801a8ac:	bf00      	nop
 801a8ae:	3710      	adds	r7, #16
 801a8b0:	46bd      	mov	sp, r7
 801a8b2:	bd80      	pop	{r7, pc}

0801a8b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 801a8b4:	b5b0      	push	{r4, r5, r7, lr}
 801a8b6:	b094      	sub	sp, #80	; 0x50
 801a8b8:	af04      	add	r7, sp, #16
 801a8ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 801a8bc:	2301      	movs	r3, #1
 801a8be:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	681b      	ldr	r3, [r3, #0]
 801a8c4:	4618      	mov	r0, r3
 801a8c6:	f002 fd03 	bl	801d2d0 <SDIO_GetPowerState>
 801a8ca:	4603      	mov	r3, r0
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	d102      	bne.n	801a8d6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801a8d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801a8d4:	e0b7      	b.n	801aa46 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a8da:	2b03      	cmp	r3, #3
 801a8dc:	d02f      	beq.n	801a93e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	681b      	ldr	r3, [r3, #0]
 801a8e2:	4618      	mov	r0, r3
 801a8e4:	f002 ff2c 	bl	801d740 <SDMMC_CmdSendCID>
 801a8e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801a8ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	d001      	beq.n	801a8f4 <SD_InitCard+0x40>
    {
      return errorstate;
 801a8f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a8f2:	e0a8      	b.n	801aa46 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	681b      	ldr	r3, [r3, #0]
 801a8f8:	2100      	movs	r1, #0
 801a8fa:	4618      	mov	r0, r3
 801a8fc:	f002 fd2d 	bl	801d35a <SDIO_GetResponse>
 801a900:	4602      	mov	r2, r0
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	681b      	ldr	r3, [r3, #0]
 801a90a:	2104      	movs	r1, #4
 801a90c:	4618      	mov	r0, r3
 801a90e:	f002 fd24 	bl	801d35a <SDIO_GetResponse>
 801a912:	4602      	mov	r2, r0
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	2108      	movs	r1, #8
 801a91e:	4618      	mov	r0, r3
 801a920:	f002 fd1b 	bl	801d35a <SDIO_GetResponse>
 801a924:	4602      	mov	r2, r0
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	210c      	movs	r1, #12
 801a930:	4618      	mov	r0, r3
 801a932:	f002 fd12 	bl	801d35a <SDIO_GetResponse>
 801a936:	4602      	mov	r2, r0
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a942:	2b03      	cmp	r3, #3
 801a944:	d00d      	beq.n	801a962 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	f107 020e 	add.w	r2, r7, #14
 801a94e:	4611      	mov	r1, r2
 801a950:	4618      	mov	r0, r3
 801a952:	f002 ff32 	bl	801d7ba <SDMMC_CmdSetRelAdd>
 801a956:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801a958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d001      	beq.n	801a962 <SD_InitCard+0xae>
    {
      return errorstate;
 801a95e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a960:	e071      	b.n	801aa46 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a966:	2b03      	cmp	r3, #3
 801a968:	d036      	beq.n	801a9d8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801a96a:	89fb      	ldrh	r3, [r7, #14]
 801a96c:	461a      	mov	r2, r3
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	681a      	ldr	r2, [r3, #0]
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a97a:	041b      	lsls	r3, r3, #16
 801a97c:	4619      	mov	r1, r3
 801a97e:	4610      	mov	r0, r2
 801a980:	f002 fefc 	bl	801d77c <SDMMC_CmdSendCSD>
 801a984:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801a986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a988:	2b00      	cmp	r3, #0
 801a98a:	d001      	beq.n	801a990 <SD_InitCard+0xdc>
    {
      return errorstate;
 801a98c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a98e:	e05a      	b.n	801aa46 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	2100      	movs	r1, #0
 801a996:	4618      	mov	r0, r3
 801a998:	f002 fcdf 	bl	801d35a <SDIO_GetResponse>
 801a99c:	4602      	mov	r2, r0
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	2104      	movs	r1, #4
 801a9a8:	4618      	mov	r0, r3
 801a9aa:	f002 fcd6 	bl	801d35a <SDIO_GetResponse>
 801a9ae:	4602      	mov	r2, r0
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	2108      	movs	r1, #8
 801a9ba:	4618      	mov	r0, r3
 801a9bc:	f002 fccd 	bl	801d35a <SDIO_GetResponse>
 801a9c0:	4602      	mov	r2, r0
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	681b      	ldr	r3, [r3, #0]
 801a9ca:	210c      	movs	r1, #12
 801a9cc:	4618      	mov	r0, r3
 801a9ce:	f002 fcc4 	bl	801d35a <SDIO_GetResponse>
 801a9d2:	4602      	mov	r2, r0
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	2104      	movs	r1, #4
 801a9de:	4618      	mov	r0, r3
 801a9e0:	f002 fcbb 	bl	801d35a <SDIO_GetResponse>
 801a9e4:	4603      	mov	r3, r0
 801a9e6:	0d1a      	lsrs	r2, r3, #20
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 801a9ec:	f107 0310 	add.w	r3, r7, #16
 801a9f0:	4619      	mov	r1, r3
 801a9f2:	6878      	ldr	r0, [r7, #4]
 801a9f4:	f7ff fbe4 	bl	801a1c0 <HAL_SD_GetCardCSD>
 801a9f8:	4603      	mov	r3, r0
 801a9fa:	2b00      	cmp	r3, #0
 801a9fc:	d002      	beq.n	801aa04 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801a9fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801aa02:	e020      	b.n	801aa46 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	6819      	ldr	r1, [r3, #0]
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aa0c:	041b      	lsls	r3, r3, #16
 801aa0e:	f04f 0400 	mov.w	r4, #0
 801aa12:	461a      	mov	r2, r3
 801aa14:	4623      	mov	r3, r4
 801aa16:	4608      	mov	r0, r1
 801aa18:	f002 fdaa 	bl	801d570 <SDMMC_CmdSelDesel>
 801aa1c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 801aa1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d001      	beq.n	801aa28 <SD_InitCard+0x174>
  {
    return errorstate;
 801aa24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aa26:	e00e      	b.n	801aa46 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	681d      	ldr	r5, [r3, #0]
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	466c      	mov	r4, sp
 801aa30:	f103 0210 	add.w	r2, r3, #16
 801aa34:	ca07      	ldmia	r2, {r0, r1, r2}
 801aa36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801aa3a:	3304      	adds	r3, #4
 801aa3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801aa3e:	4628      	mov	r0, r5
 801aa40:	f002 fbee 	bl	801d220 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 801aa44:	2300      	movs	r3, #0
}
 801aa46:	4618      	mov	r0, r3
 801aa48:	3740      	adds	r7, #64	; 0x40
 801aa4a:	46bd      	mov	sp, r7
 801aa4c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801aa50 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 801aa50:	b580      	push	{r7, lr}
 801aa52:	b086      	sub	sp, #24
 801aa54:	af00      	add	r7, sp, #0
 801aa56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801aa58:	2300      	movs	r3, #0
 801aa5a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 801aa5c:	2300      	movs	r3, #0
 801aa5e:	617b      	str	r3, [r7, #20]
 801aa60:	2300      	movs	r3, #0
 801aa62:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	681b      	ldr	r3, [r3, #0]
 801aa68:	4618      	mov	r0, r3
 801aa6a:	f002 fda4 	bl	801d5b6 <SDMMC_CmdGoIdleState>
 801aa6e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801aa70:	68fb      	ldr	r3, [r7, #12]
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	d001      	beq.n	801aa7a <SD_PowerON+0x2a>
  {
    return errorstate;
 801aa76:	68fb      	ldr	r3, [r7, #12]
 801aa78:	e072      	b.n	801ab60 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	4618      	mov	r0, r3
 801aa80:	f002 fdb7 	bl	801d5f2 <SDMMC_CmdOperCond>
 801aa84:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801aa86:	68fb      	ldr	r3, [r7, #12]
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	d00d      	beq.n	801aaa8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	2200      	movs	r2, #0
 801aa90:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	4618      	mov	r0, r3
 801aa98:	f002 fd8d 	bl	801d5b6 <SDMMC_CmdGoIdleState>
 801aa9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801aa9e:	68fb      	ldr	r3, [r7, #12]
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d004      	beq.n	801aaae <SD_PowerON+0x5e>
    {
      return errorstate;
 801aaa4:	68fb      	ldr	r3, [r7, #12]
 801aaa6:	e05b      	b.n	801ab60 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	2201      	movs	r2, #1
 801aaac:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801aab2:	2b01      	cmp	r3, #1
 801aab4:	d137      	bne.n	801ab26 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	2100      	movs	r1, #0
 801aabc:	4618      	mov	r0, r3
 801aabe:	f002 fdb7 	bl	801d630 <SDMMC_CmdAppCommand>
 801aac2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d02d      	beq.n	801ab26 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801aaca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801aace:	e047      	b.n	801ab60 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	681b      	ldr	r3, [r3, #0]
 801aad4:	2100      	movs	r1, #0
 801aad6:	4618      	mov	r0, r3
 801aad8:	f002 fdaa 	bl	801d630 <SDMMC_CmdAppCommand>
 801aadc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801aade:	68fb      	ldr	r3, [r7, #12]
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	d001      	beq.n	801aae8 <SD_PowerON+0x98>
    {
      return errorstate;
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	e03b      	b.n	801ab60 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	681b      	ldr	r3, [r3, #0]
 801aaec:	491e      	ldr	r1, [pc, #120]	; (801ab68 <SD_PowerON+0x118>)
 801aaee:	4618      	mov	r0, r3
 801aaf0:	f002 fdc0 	bl	801d674 <SDMMC_CmdAppOperCommand>
 801aaf4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	d002      	beq.n	801ab02 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801aafc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801ab00:	e02e      	b.n	801ab60 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	681b      	ldr	r3, [r3, #0]
 801ab06:	2100      	movs	r1, #0
 801ab08:	4618      	mov	r0, r3
 801ab0a:	f002 fc26 	bl	801d35a <SDIO_GetResponse>
 801ab0e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 801ab10:	697b      	ldr	r3, [r7, #20]
 801ab12:	0fdb      	lsrs	r3, r3, #31
 801ab14:	2b01      	cmp	r3, #1
 801ab16:	d101      	bne.n	801ab1c <SD_PowerON+0xcc>
 801ab18:	2301      	movs	r3, #1
 801ab1a:	e000      	b.n	801ab1e <SD_PowerON+0xce>
 801ab1c:	2300      	movs	r3, #0
 801ab1e:	613b      	str	r3, [r7, #16]

    count++;
 801ab20:	68bb      	ldr	r3, [r7, #8]
 801ab22:	3301      	adds	r3, #1
 801ab24:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 801ab26:	68bb      	ldr	r3, [r7, #8]
 801ab28:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ab2c:	4293      	cmp	r3, r2
 801ab2e:	d802      	bhi.n	801ab36 <SD_PowerON+0xe6>
 801ab30:	693b      	ldr	r3, [r7, #16]
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	d0cc      	beq.n	801aad0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 801ab36:	68bb      	ldr	r3, [r7, #8]
 801ab38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ab3c:	4293      	cmp	r3, r2
 801ab3e:	d902      	bls.n	801ab46 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 801ab40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801ab44:	e00c      	b.n	801ab60 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 801ab46:	697b      	ldr	r3, [r7, #20]
 801ab48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801ab4c:	2b00      	cmp	r3, #0
 801ab4e:	d003      	beq.n	801ab58 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	2201      	movs	r2, #1
 801ab54:	645a      	str	r2, [r3, #68]	; 0x44
 801ab56:	e002      	b.n	801ab5e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	2200      	movs	r2, #0
 801ab5c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 801ab5e:	2300      	movs	r3, #0
}
 801ab60:	4618      	mov	r0, r3
 801ab62:	3718      	adds	r7, #24
 801ab64:	46bd      	mov	sp, r7
 801ab66:	bd80      	pop	{r7, pc}
 801ab68:	c1100000 	.word	0xc1100000

0801ab6c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 801ab6c:	b580      	push	{r7, lr}
 801ab6e:	b084      	sub	sp, #16
 801ab70:	af00      	add	r7, sp, #0
 801ab72:	6078      	str	r0, [r7, #4]
 801ab74:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 801ab76:	683b      	ldr	r3, [r7, #0]
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d102      	bne.n	801ab82 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 801ab7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801ab80:	e018      	b.n	801abb4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	681a      	ldr	r2, [r3, #0]
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ab8a:	041b      	lsls	r3, r3, #16
 801ab8c:	4619      	mov	r1, r3
 801ab8e:	4610      	mov	r0, r2
 801ab90:	f002 fe34 	bl	801d7fc <SDMMC_CmdSendStatus>
 801ab94:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801ab96:	68fb      	ldr	r3, [r7, #12]
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d001      	beq.n	801aba0 <SD_SendStatus+0x34>
  {
    return errorstate;
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	e009      	b.n	801abb4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	2100      	movs	r1, #0
 801aba6:	4618      	mov	r0, r3
 801aba8:	f002 fbd7 	bl	801d35a <SDIO_GetResponse>
 801abac:	4602      	mov	r2, r0
 801abae:	683b      	ldr	r3, [r7, #0]
 801abb0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 801abb2:	2300      	movs	r3, #0
}
 801abb4:	4618      	mov	r0, r3
 801abb6:	3710      	adds	r7, #16
 801abb8:	46bd      	mov	sp, r7
 801abba:	bd80      	pop	{r7, pc}

0801abbc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 801abbc:	b580      	push	{r7, lr}
 801abbe:	b086      	sub	sp, #24
 801abc0:	af00      	add	r7, sp, #0
 801abc2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 801abc4:	2300      	movs	r3, #0
 801abc6:	60fb      	str	r3, [r7, #12]
 801abc8:	2300      	movs	r3, #0
 801abca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	2100      	movs	r1, #0
 801abd2:	4618      	mov	r0, r3
 801abd4:	f002 fbc1 	bl	801d35a <SDIO_GetResponse>
 801abd8:	4603      	mov	r3, r0
 801abda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801abde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801abe2:	d102      	bne.n	801abea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801abe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801abe8:	e02f      	b.n	801ac4a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801abea:	f107 030c 	add.w	r3, r7, #12
 801abee:	4619      	mov	r1, r3
 801abf0:	6878      	ldr	r0, [r7, #4]
 801abf2:	f000 f879 	bl	801ace8 <SD_FindSCR>
 801abf6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801abf8:	697b      	ldr	r3, [r7, #20]
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	d001      	beq.n	801ac02 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 801abfe:	697b      	ldr	r3, [r7, #20]
 801ac00:	e023      	b.n	801ac4a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801ac02:	693b      	ldr	r3, [r7, #16]
 801ac04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d01c      	beq.n	801ac46 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	681a      	ldr	r2, [r3, #0]
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ac14:	041b      	lsls	r3, r3, #16
 801ac16:	4619      	mov	r1, r3
 801ac18:	4610      	mov	r0, r2
 801ac1a:	f002 fd09 	bl	801d630 <SDMMC_CmdAppCommand>
 801ac1e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801ac20:	697b      	ldr	r3, [r7, #20]
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d001      	beq.n	801ac2a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 801ac26:	697b      	ldr	r3, [r7, #20]
 801ac28:	e00f      	b.n	801ac4a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	2102      	movs	r1, #2
 801ac30:	4618      	mov	r0, r3
 801ac32:	f002 fd42 	bl	801d6ba <SDMMC_CmdBusWidth>
 801ac36:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801ac38:	697b      	ldr	r3, [r7, #20]
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d001      	beq.n	801ac42 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 801ac3e:	697b      	ldr	r3, [r7, #20]
 801ac40:	e003      	b.n	801ac4a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801ac42:	2300      	movs	r3, #0
 801ac44:	e001      	b.n	801ac4a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801ac46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 801ac4a:	4618      	mov	r0, r3
 801ac4c:	3718      	adds	r7, #24
 801ac4e:	46bd      	mov	sp, r7
 801ac50:	bd80      	pop	{r7, pc}

0801ac52 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801ac52:	b580      	push	{r7, lr}
 801ac54:	b086      	sub	sp, #24
 801ac56:	af00      	add	r7, sp, #0
 801ac58:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 801ac5a:	2300      	movs	r3, #0
 801ac5c:	60fb      	str	r3, [r7, #12]
 801ac5e:	2300      	movs	r3, #0
 801ac60:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	681b      	ldr	r3, [r3, #0]
 801ac66:	2100      	movs	r1, #0
 801ac68:	4618      	mov	r0, r3
 801ac6a:	f002 fb76 	bl	801d35a <SDIO_GetResponse>
 801ac6e:	4603      	mov	r3, r0
 801ac70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801ac74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801ac78:	d102      	bne.n	801ac80 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801ac7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ac7e:	e02f      	b.n	801ace0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801ac80:	f107 030c 	add.w	r3, r7, #12
 801ac84:	4619      	mov	r1, r3
 801ac86:	6878      	ldr	r0, [r7, #4]
 801ac88:	f000 f82e 	bl	801ace8 <SD_FindSCR>
 801ac8c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801ac8e:	697b      	ldr	r3, [r7, #20]
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d001      	beq.n	801ac98 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 801ac94:	697b      	ldr	r3, [r7, #20]
 801ac96:	e023      	b.n	801ace0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801ac98:	693b      	ldr	r3, [r7, #16]
 801ac9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	d01c      	beq.n	801acdc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	681a      	ldr	r2, [r3, #0]
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801acaa:	041b      	lsls	r3, r3, #16
 801acac:	4619      	mov	r1, r3
 801acae:	4610      	mov	r0, r2
 801acb0:	f002 fcbe 	bl	801d630 <SDMMC_CmdAppCommand>
 801acb4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801acb6:	697b      	ldr	r3, [r7, #20]
 801acb8:	2b00      	cmp	r3, #0
 801acba:	d001      	beq.n	801acc0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 801acbc:	697b      	ldr	r3, [r7, #20]
 801acbe:	e00f      	b.n	801ace0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	2100      	movs	r1, #0
 801acc6:	4618      	mov	r0, r3
 801acc8:	f002 fcf7 	bl	801d6ba <SDMMC_CmdBusWidth>
 801accc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801acce:	697b      	ldr	r3, [r7, #20]
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d001      	beq.n	801acd8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 801acd4:	697b      	ldr	r3, [r7, #20]
 801acd6:	e003      	b.n	801ace0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801acd8:	2300      	movs	r3, #0
 801acda:	e001      	b.n	801ace0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801acdc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 801ace0:	4618      	mov	r0, r3
 801ace2:	3718      	adds	r7, #24
 801ace4:	46bd      	mov	sp, r7
 801ace6:	bd80      	pop	{r7, pc}

0801ace8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 801ace8:	b590      	push	{r4, r7, lr}
 801acea:	b08f      	sub	sp, #60	; 0x3c
 801acec:	af00      	add	r7, sp, #0
 801acee:	6078      	str	r0, [r7, #4]
 801acf0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801acf2:	f7fa fc97 	bl	8015624 <HAL_GetTick>
 801acf6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 801acf8:	2300      	movs	r3, #0
 801acfa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 801acfc:	2300      	movs	r3, #0
 801acfe:	60bb      	str	r3, [r7, #8]
 801ad00:	2300      	movs	r3, #0
 801ad02:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 801ad04:	683b      	ldr	r3, [r7, #0]
 801ad06:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	2108      	movs	r1, #8
 801ad0e:	4618      	mov	r0, r3
 801ad10:	f002 fb62 	bl	801d3d8 <SDMMC_CmdBlockLength>
 801ad14:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801ad16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d001      	beq.n	801ad20 <SD_FindSCR+0x38>
  {
    return errorstate;
 801ad1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad1e:	e0a9      	b.n	801ae74 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	681a      	ldr	r2, [r3, #0]
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ad28:	041b      	lsls	r3, r3, #16
 801ad2a:	4619      	mov	r1, r3
 801ad2c:	4610      	mov	r0, r2
 801ad2e:	f002 fc7f 	bl	801d630 <SDMMC_CmdAppCommand>
 801ad32:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801ad34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d001      	beq.n	801ad3e <SD_FindSCR+0x56>
  {
    return errorstate;
 801ad3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad3c:	e09a      	b.n	801ae74 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801ad3e:	f04f 33ff 	mov.w	r3, #4294967295
 801ad42:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 801ad44:	2308      	movs	r3, #8
 801ad46:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 801ad48:	2330      	movs	r3, #48	; 0x30
 801ad4a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 801ad4c:	2302      	movs	r3, #2
 801ad4e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 801ad50:	2300      	movs	r3, #0
 801ad52:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 801ad54:	2301      	movs	r3, #1
 801ad56:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	681b      	ldr	r3, [r3, #0]
 801ad5c:	f107 0210 	add.w	r2, r7, #16
 801ad60:	4611      	mov	r1, r2
 801ad62:	4618      	mov	r0, r3
 801ad64:	f002 fb0c 	bl	801d380 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 801ad68:	687b      	ldr	r3, [r7, #4]
 801ad6a:	681b      	ldr	r3, [r3, #0]
 801ad6c:	4618      	mov	r0, r3
 801ad6e:	f002 fcc6 	bl	801d6fe <SDMMC_CmdSendSCR>
 801ad72:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801ad74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	d022      	beq.n	801adc0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 801ad7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad7c:	e07a      	b.n	801ae74 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	681b      	ldr	r3, [r3, #0]
 801ad82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ad84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d00e      	beq.n	801adaa <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	6819      	ldr	r1, [r3, #0]
 801ad90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad92:	009b      	lsls	r3, r3, #2
 801ad94:	f107 0208 	add.w	r2, r7, #8
 801ad98:	18d4      	adds	r4, r2, r3
 801ad9a:	4608      	mov	r0, r1
 801ad9c:	f002 fa6b 	bl	801d276 <SDIO_ReadFIFO>
 801ada0:	4603      	mov	r3, r0
 801ada2:	6023      	str	r3, [r4, #0]
      index++;
 801ada4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ada6:	3301      	adds	r3, #1
 801ada8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801adaa:	f7fa fc3b 	bl	8015624 <HAL_GetTick>
 801adae:	4602      	mov	r2, r0
 801adb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adb2:	1ad3      	subs	r3, r2, r3
 801adb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801adb8:	d102      	bne.n	801adc0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801adba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801adbe:	e059      	b.n	801ae74 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801adc6:	f240 432a 	movw	r3, #1066	; 0x42a
 801adca:	4013      	ands	r3, r2
 801adcc:	2b00      	cmp	r3, #0
 801adce:	d0d6      	beq.n	801ad7e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801add6:	f003 0308 	and.w	r3, r3, #8
 801adda:	2b00      	cmp	r3, #0
 801addc:	d005      	beq.n	801adea <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	681b      	ldr	r3, [r3, #0]
 801ade2:	2208      	movs	r2, #8
 801ade4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 801ade6:	2308      	movs	r3, #8
 801ade8:	e044      	b.n	801ae74 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801adf0:	f003 0302 	and.w	r3, r3, #2
 801adf4:	2b00      	cmp	r3, #0
 801adf6:	d005      	beq.n	801ae04 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	681b      	ldr	r3, [r3, #0]
 801adfc:	2202      	movs	r2, #2
 801adfe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801ae00:	2302      	movs	r3, #2
 801ae02:	e037      	b.n	801ae74 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ae0a:	f003 0320 	and.w	r3, r3, #32
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d005      	beq.n	801ae1e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	2220      	movs	r2, #32
 801ae18:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 801ae1a:	2320      	movs	r3, #32
 801ae1c:	e02a      	b.n	801ae74 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	681b      	ldr	r3, [r3, #0]
 801ae22:	f240 523a 	movw	r2, #1338	; 0x53a
 801ae26:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801ae28:	68fb      	ldr	r3, [r7, #12]
 801ae2a:	061a      	lsls	r2, r3, #24
 801ae2c:	68fb      	ldr	r3, [r7, #12]
 801ae2e:	021b      	lsls	r3, r3, #8
 801ae30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801ae34:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801ae36:	68fb      	ldr	r3, [r7, #12]
 801ae38:	0a1b      	lsrs	r3, r3, #8
 801ae3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801ae3e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801ae40:	68fb      	ldr	r3, [r7, #12]
 801ae42:	0e1b      	lsrs	r3, r3, #24
 801ae44:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801ae46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae48:	601a      	str	r2, [r3, #0]
    scr++;
 801ae4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae4c:	3304      	adds	r3, #4
 801ae4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801ae50:	68bb      	ldr	r3, [r7, #8]
 801ae52:	061a      	lsls	r2, r3, #24
 801ae54:	68bb      	ldr	r3, [r7, #8]
 801ae56:	021b      	lsls	r3, r3, #8
 801ae58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801ae5c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801ae5e:	68bb      	ldr	r3, [r7, #8]
 801ae60:	0a1b      	lsrs	r3, r3, #8
 801ae62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801ae66:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801ae68:	68bb      	ldr	r3, [r7, #8]
 801ae6a:	0e1b      	lsrs	r3, r3, #24
 801ae6c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801ae6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae70:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 801ae72:	2300      	movs	r3, #0
}
 801ae74:	4618      	mov	r0, r3
 801ae76:	373c      	adds	r7, #60	; 0x3c
 801ae78:	46bd      	mov	sp, r7
 801ae7a:	bd90      	pop	{r4, r7, pc}

0801ae7c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 801ae7c:	b580      	push	{r7, lr}
 801ae7e:	b086      	sub	sp, #24
 801ae80:	af00      	add	r7, sp, #0
 801ae82:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae88:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae8e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 801ae90:	693b      	ldr	r3, [r7, #16]
 801ae92:	2b00      	cmp	r3, #0
 801ae94:	d03f      	beq.n	801af16 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 801ae96:	2300      	movs	r3, #0
 801ae98:	617b      	str	r3, [r7, #20]
 801ae9a:	e033      	b.n	801af04 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	681b      	ldr	r3, [r3, #0]
 801aea0:	4618      	mov	r0, r3
 801aea2:	f002 f9e8 	bl	801d276 <SDIO_ReadFIFO>
 801aea6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 801aea8:	68bb      	ldr	r3, [r7, #8]
 801aeaa:	b2da      	uxtb	r2, r3
 801aeac:	68fb      	ldr	r3, [r7, #12]
 801aeae:	701a      	strb	r2, [r3, #0]
      tmp++;
 801aeb0:	68fb      	ldr	r3, [r7, #12]
 801aeb2:	3301      	adds	r3, #1
 801aeb4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801aeb6:	693b      	ldr	r3, [r7, #16]
 801aeb8:	3b01      	subs	r3, #1
 801aeba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 801aebc:	68bb      	ldr	r3, [r7, #8]
 801aebe:	0a1b      	lsrs	r3, r3, #8
 801aec0:	b2da      	uxtb	r2, r3
 801aec2:	68fb      	ldr	r3, [r7, #12]
 801aec4:	701a      	strb	r2, [r3, #0]
      tmp++;
 801aec6:	68fb      	ldr	r3, [r7, #12]
 801aec8:	3301      	adds	r3, #1
 801aeca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801aecc:	693b      	ldr	r3, [r7, #16]
 801aece:	3b01      	subs	r3, #1
 801aed0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 801aed2:	68bb      	ldr	r3, [r7, #8]
 801aed4:	0c1b      	lsrs	r3, r3, #16
 801aed6:	b2da      	uxtb	r2, r3
 801aed8:	68fb      	ldr	r3, [r7, #12]
 801aeda:	701a      	strb	r2, [r3, #0]
      tmp++;
 801aedc:	68fb      	ldr	r3, [r7, #12]
 801aede:	3301      	adds	r3, #1
 801aee0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801aee2:	693b      	ldr	r3, [r7, #16]
 801aee4:	3b01      	subs	r3, #1
 801aee6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 801aee8:	68bb      	ldr	r3, [r7, #8]
 801aeea:	0e1b      	lsrs	r3, r3, #24
 801aeec:	b2da      	uxtb	r2, r3
 801aeee:	68fb      	ldr	r3, [r7, #12]
 801aef0:	701a      	strb	r2, [r3, #0]
      tmp++;
 801aef2:	68fb      	ldr	r3, [r7, #12]
 801aef4:	3301      	adds	r3, #1
 801aef6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801aef8:	693b      	ldr	r3, [r7, #16]
 801aefa:	3b01      	subs	r3, #1
 801aefc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 801aefe:	697b      	ldr	r3, [r7, #20]
 801af00:	3301      	adds	r3, #1
 801af02:	617b      	str	r3, [r7, #20]
 801af04:	697b      	ldr	r3, [r7, #20]
 801af06:	2b07      	cmp	r3, #7
 801af08:	d9c8      	bls.n	801ae9c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	68fa      	ldr	r2, [r7, #12]
 801af0e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	693a      	ldr	r2, [r7, #16]
 801af14:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 801af16:	bf00      	nop
 801af18:	3718      	adds	r7, #24
 801af1a:	46bd      	mov	sp, r7
 801af1c:	bd80      	pop	{r7, pc}

0801af1e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 801af1e:	b580      	push	{r7, lr}
 801af20:	b086      	sub	sp, #24
 801af22:	af00      	add	r7, sp, #0
 801af24:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	6a1b      	ldr	r3, [r3, #32]
 801af2a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af30:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 801af32:	693b      	ldr	r3, [r7, #16]
 801af34:	2b00      	cmp	r3, #0
 801af36:	d043      	beq.n	801afc0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 801af38:	2300      	movs	r3, #0
 801af3a:	617b      	str	r3, [r7, #20]
 801af3c:	e037      	b.n	801afae <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 801af3e:	68fb      	ldr	r3, [r7, #12]
 801af40:	781b      	ldrb	r3, [r3, #0]
 801af42:	60bb      	str	r3, [r7, #8]
      tmp++;
 801af44:	68fb      	ldr	r3, [r7, #12]
 801af46:	3301      	adds	r3, #1
 801af48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801af4a:	693b      	ldr	r3, [r7, #16]
 801af4c:	3b01      	subs	r3, #1
 801af4e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 801af50:	68fb      	ldr	r3, [r7, #12]
 801af52:	781b      	ldrb	r3, [r3, #0]
 801af54:	021a      	lsls	r2, r3, #8
 801af56:	68bb      	ldr	r3, [r7, #8]
 801af58:	4313      	orrs	r3, r2
 801af5a:	60bb      	str	r3, [r7, #8]
      tmp++;
 801af5c:	68fb      	ldr	r3, [r7, #12]
 801af5e:	3301      	adds	r3, #1
 801af60:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801af62:	693b      	ldr	r3, [r7, #16]
 801af64:	3b01      	subs	r3, #1
 801af66:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 801af68:	68fb      	ldr	r3, [r7, #12]
 801af6a:	781b      	ldrb	r3, [r3, #0]
 801af6c:	041a      	lsls	r2, r3, #16
 801af6e:	68bb      	ldr	r3, [r7, #8]
 801af70:	4313      	orrs	r3, r2
 801af72:	60bb      	str	r3, [r7, #8]
      tmp++;
 801af74:	68fb      	ldr	r3, [r7, #12]
 801af76:	3301      	adds	r3, #1
 801af78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801af7a:	693b      	ldr	r3, [r7, #16]
 801af7c:	3b01      	subs	r3, #1
 801af7e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 801af80:	68fb      	ldr	r3, [r7, #12]
 801af82:	781b      	ldrb	r3, [r3, #0]
 801af84:	061a      	lsls	r2, r3, #24
 801af86:	68bb      	ldr	r3, [r7, #8]
 801af88:	4313      	orrs	r3, r2
 801af8a:	60bb      	str	r3, [r7, #8]
      tmp++;
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	3301      	adds	r3, #1
 801af90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801af92:	693b      	ldr	r3, [r7, #16]
 801af94:	3b01      	subs	r3, #1
 801af96:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	f107 0208 	add.w	r2, r7, #8
 801afa0:	4611      	mov	r1, r2
 801afa2:	4618      	mov	r0, r3
 801afa4:	f002 f974 	bl	801d290 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 801afa8:	697b      	ldr	r3, [r7, #20]
 801afaa:	3301      	adds	r3, #1
 801afac:	617b      	str	r3, [r7, #20]
 801afae:	697b      	ldr	r3, [r7, #20]
 801afb0:	2b07      	cmp	r3, #7
 801afb2:	d9c4      	bls.n	801af3e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	68fa      	ldr	r2, [r7, #12]
 801afb8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	693a      	ldr	r2, [r7, #16]
 801afbe:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 801afc0:	bf00      	nop
 801afc2:	3718      	adds	r7, #24
 801afc4:	46bd      	mov	sp, r7
 801afc6:	bd80      	pop	{r7, pc}

0801afc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801afc8:	b580      	push	{r7, lr}
 801afca:	b082      	sub	sp, #8
 801afcc:	af00      	add	r7, sp, #0
 801afce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d101      	bne.n	801afda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801afd6:	2301      	movs	r3, #1
 801afd8:	e01d      	b.n	801b016 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801afe0:	b2db      	uxtb	r3, r3
 801afe2:	2b00      	cmp	r3, #0
 801afe4:	d106      	bne.n	801aff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	2200      	movs	r2, #0
 801afea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801afee:	6878      	ldr	r0, [r7, #4]
 801aff0:	f7f9 ffc6 	bl	8014f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	2202      	movs	r2, #2
 801aff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	681a      	ldr	r2, [r3, #0]
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	3304      	adds	r3, #4
 801b004:	4619      	mov	r1, r3
 801b006:	4610      	mov	r0, r2
 801b008:	f000 fc90 	bl	801b92c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	2201      	movs	r2, #1
 801b010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801b014:	2300      	movs	r3, #0
}
 801b016:	4618      	mov	r0, r3
 801b018:	3708      	adds	r7, #8
 801b01a:	46bd      	mov	sp, r7
 801b01c:	bd80      	pop	{r7, pc}

0801b01e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801b01e:	b480      	push	{r7}
 801b020:	b085      	sub	sp, #20
 801b022:	af00      	add	r7, sp, #0
 801b024:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	68da      	ldr	r2, [r3, #12]
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	681b      	ldr	r3, [r3, #0]
 801b030:	f042 0201 	orr.w	r2, r2, #1
 801b034:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	689b      	ldr	r3, [r3, #8]
 801b03c:	f003 0307 	and.w	r3, r3, #7
 801b040:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b042:	68fb      	ldr	r3, [r7, #12]
 801b044:	2b06      	cmp	r3, #6
 801b046:	d007      	beq.n	801b058 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	681b      	ldr	r3, [r3, #0]
 801b04c:	681a      	ldr	r2, [r3, #0]
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	f042 0201 	orr.w	r2, r2, #1
 801b056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801b058:	2300      	movs	r3, #0
}
 801b05a:	4618      	mov	r0, r3
 801b05c:	3714      	adds	r7, #20
 801b05e:	46bd      	mov	sp, r7
 801b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b064:	4770      	bx	lr

0801b066 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801b066:	b580      	push	{r7, lr}
 801b068:	b082      	sub	sp, #8
 801b06a:	af00      	add	r7, sp, #0
 801b06c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	2b00      	cmp	r3, #0
 801b072:	d101      	bne.n	801b078 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801b074:	2301      	movs	r3, #1
 801b076:	e01d      	b.n	801b0b4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b07e:	b2db      	uxtb	r3, r3
 801b080:	2b00      	cmp	r3, #0
 801b082:	d106      	bne.n	801b092 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	2200      	movs	r2, #0
 801b088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801b08c:	6878      	ldr	r0, [r7, #4]
 801b08e:	f7fa f807 	bl	80150a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	2202      	movs	r2, #2
 801b096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801b09a:	687b      	ldr	r3, [r7, #4]
 801b09c:	681a      	ldr	r2, [r3, #0]
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	3304      	adds	r3, #4
 801b0a2:	4619      	mov	r1, r3
 801b0a4:	4610      	mov	r0, r2
 801b0a6:	f000 fc41 	bl	801b92c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	2201      	movs	r2, #1
 801b0ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801b0b2:	2300      	movs	r3, #0
}
 801b0b4:	4618      	mov	r0, r3
 801b0b6:	3708      	adds	r7, #8
 801b0b8:	46bd      	mov	sp, r7
 801b0ba:	bd80      	pop	{r7, pc}

0801b0bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801b0bc:	b580      	push	{r7, lr}
 801b0be:	b084      	sub	sp, #16
 801b0c0:	af00      	add	r7, sp, #0
 801b0c2:	6078      	str	r0, [r7, #4]
 801b0c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	2201      	movs	r2, #1
 801b0cc:	6839      	ldr	r1, [r7, #0]
 801b0ce:	4618      	mov	r0, r3
 801b0d0:	f000 fff0 	bl	801c0b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	4a10      	ldr	r2, [pc, #64]	; (801b11c <HAL_TIM_PWM_Start+0x60>)
 801b0da:	4293      	cmp	r3, r2
 801b0dc:	d107      	bne.n	801b0ee <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	681b      	ldr	r3, [r3, #0]
 801b0e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	681b      	ldr	r3, [r3, #0]
 801b0e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801b0ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	681b      	ldr	r3, [r3, #0]
 801b0f2:	689b      	ldr	r3, [r3, #8]
 801b0f4:	f003 0307 	and.w	r3, r3, #7
 801b0f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b0fa:	68fb      	ldr	r3, [r7, #12]
 801b0fc:	2b06      	cmp	r3, #6
 801b0fe:	d007      	beq.n	801b110 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	681a      	ldr	r2, [r3, #0]
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	f042 0201 	orr.w	r2, r2, #1
 801b10e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801b110:	2300      	movs	r3, #0
}
 801b112:	4618      	mov	r0, r3
 801b114:	3710      	adds	r7, #16
 801b116:	46bd      	mov	sp, r7
 801b118:	bd80      	pop	{r7, pc}
 801b11a:	bf00      	nop
 801b11c:	40010000 	.word	0x40010000

0801b120 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801b120:	b580      	push	{r7, lr}
 801b122:	b082      	sub	sp, #8
 801b124:	af00      	add	r7, sp, #0
 801b126:	6078      	str	r0, [r7, #4]
 801b128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	2200      	movs	r2, #0
 801b130:	6839      	ldr	r1, [r7, #0]
 801b132:	4618      	mov	r0, r3
 801b134:	f000 ffbe 	bl	801c0b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	681b      	ldr	r3, [r3, #0]
 801b13c:	4a1d      	ldr	r2, [pc, #116]	; (801b1b4 <HAL_TIM_PWM_Stop+0x94>)
 801b13e:	4293      	cmp	r3, r2
 801b140:	d117      	bne.n	801b172 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	681b      	ldr	r3, [r3, #0]
 801b146:	6a1a      	ldr	r2, [r3, #32]
 801b148:	f241 1311 	movw	r3, #4369	; 0x1111
 801b14c:	4013      	ands	r3, r2
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d10f      	bne.n	801b172 <HAL_TIM_PWM_Stop+0x52>
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	6a1a      	ldr	r2, [r3, #32]
 801b158:	f240 4344 	movw	r3, #1092	; 0x444
 801b15c:	4013      	ands	r3, r2
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d107      	bne.n	801b172 <HAL_TIM_PWM_Stop+0x52>
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	681b      	ldr	r3, [r3, #0]
 801b166:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	681b      	ldr	r3, [r3, #0]
 801b16c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801b170:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	6a1a      	ldr	r2, [r3, #32]
 801b178:	f241 1311 	movw	r3, #4369	; 0x1111
 801b17c:	4013      	ands	r3, r2
 801b17e:	2b00      	cmp	r3, #0
 801b180:	d10f      	bne.n	801b1a2 <HAL_TIM_PWM_Stop+0x82>
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	681b      	ldr	r3, [r3, #0]
 801b186:	6a1a      	ldr	r2, [r3, #32]
 801b188:	f240 4344 	movw	r3, #1092	; 0x444
 801b18c:	4013      	ands	r3, r2
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d107      	bne.n	801b1a2 <HAL_TIM_PWM_Stop+0x82>
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	681b      	ldr	r3, [r3, #0]
 801b196:	681a      	ldr	r2, [r3, #0]
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	681b      	ldr	r3, [r3, #0]
 801b19c:	f022 0201 	bic.w	r2, r2, #1
 801b1a0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	2201      	movs	r2, #1
 801b1a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801b1aa:	2300      	movs	r3, #0
}
 801b1ac:	4618      	mov	r0, r3
 801b1ae:	3708      	adds	r7, #8
 801b1b0:	46bd      	mov	sp, r7
 801b1b2:	bd80      	pop	{r7, pc}
 801b1b4:	40010000 	.word	0x40010000

0801b1b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 801b1b8:	b580      	push	{r7, lr}
 801b1ba:	b082      	sub	sp, #8
 801b1bc:	af00      	add	r7, sp, #0
 801b1be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d101      	bne.n	801b1ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801b1c6:	2301      	movs	r3, #1
 801b1c8:	e01d      	b.n	801b206 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b1d0:	b2db      	uxtb	r3, r3
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d106      	bne.n	801b1e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	2200      	movs	r2, #0
 801b1da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801b1de:	6878      	ldr	r0, [r7, #4]
 801b1e0:	f000 f815 	bl	801b20e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	2202      	movs	r2, #2
 801b1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	681a      	ldr	r2, [r3, #0]
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	3304      	adds	r3, #4
 801b1f4:	4619      	mov	r1, r3
 801b1f6:	4610      	mov	r0, r2
 801b1f8:	f000 fb98 	bl	801b92c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	2201      	movs	r2, #1
 801b200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801b204:	2300      	movs	r3, #0
}
 801b206:	4618      	mov	r0, r3
 801b208:	3708      	adds	r7, #8
 801b20a:	46bd      	mov	sp, r7
 801b20c:	bd80      	pop	{r7, pc}

0801b20e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 801b20e:	b480      	push	{r7}
 801b210:	b083      	sub	sp, #12
 801b212:	af00      	add	r7, sp, #0
 801b214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 801b216:	bf00      	nop
 801b218:	370c      	adds	r7, #12
 801b21a:	46bd      	mov	sp, r7
 801b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b220:	4770      	bx	lr

0801b222 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801b222:	b580      	push	{r7, lr}
 801b224:	b082      	sub	sp, #8
 801b226:	af00      	add	r7, sp, #0
 801b228:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	681b      	ldr	r3, [r3, #0]
 801b22e:	691b      	ldr	r3, [r3, #16]
 801b230:	f003 0302 	and.w	r3, r3, #2
 801b234:	2b02      	cmp	r3, #2
 801b236:	d122      	bne.n	801b27e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	68db      	ldr	r3, [r3, #12]
 801b23e:	f003 0302 	and.w	r3, r3, #2
 801b242:	2b02      	cmp	r3, #2
 801b244:	d11b      	bne.n	801b27e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	f06f 0202 	mvn.w	r2, #2
 801b24e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	2201      	movs	r2, #1
 801b254:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	699b      	ldr	r3, [r3, #24]
 801b25c:	f003 0303 	and.w	r3, r3, #3
 801b260:	2b00      	cmp	r3, #0
 801b262:	d003      	beq.n	801b26c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801b264:	6878      	ldr	r0, [r7, #4]
 801b266:	f7f8 fc8b 	bl	8013b80 <HAL_TIM_IC_CaptureCallback>
 801b26a:	e005      	b.n	801b278 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801b26c:	6878      	ldr	r0, [r7, #4]
 801b26e:	f000 fb3f 	bl	801b8f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b272:	6878      	ldr	r0, [r7, #4]
 801b274:	f000 fb46 	bl	801b904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	2200      	movs	r2, #0
 801b27c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	691b      	ldr	r3, [r3, #16]
 801b284:	f003 0304 	and.w	r3, r3, #4
 801b288:	2b04      	cmp	r3, #4
 801b28a:	d122      	bne.n	801b2d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	681b      	ldr	r3, [r3, #0]
 801b290:	68db      	ldr	r3, [r3, #12]
 801b292:	f003 0304 	and.w	r3, r3, #4
 801b296:	2b04      	cmp	r3, #4
 801b298:	d11b      	bne.n	801b2d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	f06f 0204 	mvn.w	r2, #4
 801b2a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	2202      	movs	r2, #2
 801b2a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	681b      	ldr	r3, [r3, #0]
 801b2ae:	699b      	ldr	r3, [r3, #24]
 801b2b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	d003      	beq.n	801b2c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801b2b8:	6878      	ldr	r0, [r7, #4]
 801b2ba:	f7f8 fc61 	bl	8013b80 <HAL_TIM_IC_CaptureCallback>
 801b2be:	e005      	b.n	801b2cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801b2c0:	6878      	ldr	r0, [r7, #4]
 801b2c2:	f000 fb15 	bl	801b8f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b2c6:	6878      	ldr	r0, [r7, #4]
 801b2c8:	f000 fb1c 	bl	801b904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	2200      	movs	r2, #0
 801b2d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	691b      	ldr	r3, [r3, #16]
 801b2d8:	f003 0308 	and.w	r3, r3, #8
 801b2dc:	2b08      	cmp	r3, #8
 801b2de:	d122      	bne.n	801b326 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	68db      	ldr	r3, [r3, #12]
 801b2e6:	f003 0308 	and.w	r3, r3, #8
 801b2ea:	2b08      	cmp	r3, #8
 801b2ec:	d11b      	bne.n	801b326 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	681b      	ldr	r3, [r3, #0]
 801b2f2:	f06f 0208 	mvn.w	r2, #8
 801b2f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	2204      	movs	r2, #4
 801b2fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	681b      	ldr	r3, [r3, #0]
 801b302:	69db      	ldr	r3, [r3, #28]
 801b304:	f003 0303 	and.w	r3, r3, #3
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d003      	beq.n	801b314 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801b30c:	6878      	ldr	r0, [r7, #4]
 801b30e:	f7f8 fc37 	bl	8013b80 <HAL_TIM_IC_CaptureCallback>
 801b312:	e005      	b.n	801b320 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801b314:	6878      	ldr	r0, [r7, #4]
 801b316:	f000 faeb 	bl	801b8f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b31a:	6878      	ldr	r0, [r7, #4]
 801b31c:	f000 faf2 	bl	801b904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	2200      	movs	r2, #0
 801b324:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	681b      	ldr	r3, [r3, #0]
 801b32a:	691b      	ldr	r3, [r3, #16]
 801b32c:	f003 0310 	and.w	r3, r3, #16
 801b330:	2b10      	cmp	r3, #16
 801b332:	d122      	bne.n	801b37a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	681b      	ldr	r3, [r3, #0]
 801b338:	68db      	ldr	r3, [r3, #12]
 801b33a:	f003 0310 	and.w	r3, r3, #16
 801b33e:	2b10      	cmp	r3, #16
 801b340:	d11b      	bne.n	801b37a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	f06f 0210 	mvn.w	r2, #16
 801b34a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	2208      	movs	r2, #8
 801b350:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	681b      	ldr	r3, [r3, #0]
 801b356:	69db      	ldr	r3, [r3, #28]
 801b358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d003      	beq.n	801b368 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801b360:	6878      	ldr	r0, [r7, #4]
 801b362:	f7f8 fc0d 	bl	8013b80 <HAL_TIM_IC_CaptureCallback>
 801b366:	e005      	b.n	801b374 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801b368:	6878      	ldr	r0, [r7, #4]
 801b36a:	f000 fac1 	bl	801b8f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b36e:	6878      	ldr	r0, [r7, #4]
 801b370:	f000 fac8 	bl	801b904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	2200      	movs	r2, #0
 801b378:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	681b      	ldr	r3, [r3, #0]
 801b37e:	691b      	ldr	r3, [r3, #16]
 801b380:	f003 0301 	and.w	r3, r3, #1
 801b384:	2b01      	cmp	r3, #1
 801b386:	d10e      	bne.n	801b3a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	681b      	ldr	r3, [r3, #0]
 801b38c:	68db      	ldr	r3, [r3, #12]
 801b38e:	f003 0301 	and.w	r3, r3, #1
 801b392:	2b01      	cmp	r3, #1
 801b394:	d107      	bne.n	801b3a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	681b      	ldr	r3, [r3, #0]
 801b39a:	f06f 0201 	mvn.w	r2, #1
 801b39e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801b3a0:	6878      	ldr	r0, [r7, #4]
 801b3a2:	f7f9 f863 	bl	801446c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	681b      	ldr	r3, [r3, #0]
 801b3aa:	691b      	ldr	r3, [r3, #16]
 801b3ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b3b0:	2b80      	cmp	r3, #128	; 0x80
 801b3b2:	d10e      	bne.n	801b3d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	68db      	ldr	r3, [r3, #12]
 801b3ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b3be:	2b80      	cmp	r3, #128	; 0x80
 801b3c0:	d107      	bne.n	801b3d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	681b      	ldr	r3, [r3, #0]
 801b3c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801b3ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801b3cc:	6878      	ldr	r0, [r7, #4]
 801b3ce:	f000 ff0f 	bl	801c1f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	691b      	ldr	r3, [r3, #16]
 801b3d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b3dc:	2b40      	cmp	r3, #64	; 0x40
 801b3de:	d10e      	bne.n	801b3fe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	68db      	ldr	r3, [r3, #12]
 801b3e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b3ea:	2b40      	cmp	r3, #64	; 0x40
 801b3ec:	d107      	bne.n	801b3fe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	681b      	ldr	r3, [r3, #0]
 801b3f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801b3f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801b3f8:	6878      	ldr	r0, [r7, #4]
 801b3fa:	f000 fa8d 	bl	801b918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	691b      	ldr	r3, [r3, #16]
 801b404:	f003 0320 	and.w	r3, r3, #32
 801b408:	2b20      	cmp	r3, #32
 801b40a:	d10e      	bne.n	801b42a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	681b      	ldr	r3, [r3, #0]
 801b410:	68db      	ldr	r3, [r3, #12]
 801b412:	f003 0320 	and.w	r3, r3, #32
 801b416:	2b20      	cmp	r3, #32
 801b418:	d107      	bne.n	801b42a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	681b      	ldr	r3, [r3, #0]
 801b41e:	f06f 0220 	mvn.w	r2, #32
 801b422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801b424:	6878      	ldr	r0, [r7, #4]
 801b426:	f000 fed9 	bl	801c1dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801b42a:	bf00      	nop
 801b42c:	3708      	adds	r7, #8
 801b42e:	46bd      	mov	sp, r7
 801b430:	bd80      	pop	{r7, pc}

0801b432 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801b432:	b580      	push	{r7, lr}
 801b434:	b084      	sub	sp, #16
 801b436:	af00      	add	r7, sp, #0
 801b438:	60f8      	str	r0, [r7, #12]
 801b43a:	60b9      	str	r1, [r7, #8]
 801b43c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801b43e:	68fb      	ldr	r3, [r7, #12]
 801b440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b444:	2b01      	cmp	r3, #1
 801b446:	d101      	bne.n	801b44c <HAL_TIM_IC_ConfigChannel+0x1a>
 801b448:	2302      	movs	r3, #2
 801b44a:	e08a      	b.n	801b562 <HAL_TIM_IC_ConfigChannel+0x130>
 801b44c:	68fb      	ldr	r3, [r7, #12]
 801b44e:	2201      	movs	r2, #1
 801b450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801b454:	68fb      	ldr	r3, [r7, #12]
 801b456:	2202      	movs	r2, #2
 801b458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 801b45c:	687b      	ldr	r3, [r7, #4]
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d11b      	bne.n	801b49a <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801b462:	68fb      	ldr	r3, [r7, #12]
 801b464:	6818      	ldr	r0, [r3, #0]
 801b466:	68bb      	ldr	r3, [r7, #8]
 801b468:	6819      	ldr	r1, [r3, #0]
 801b46a:	68bb      	ldr	r3, [r7, #8]
 801b46c:	685a      	ldr	r2, [r3, #4]
 801b46e:	68bb      	ldr	r3, [r7, #8]
 801b470:	68db      	ldr	r3, [r3, #12]
 801b472:	f000 fc67 	bl	801bd44 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801b476:	68fb      	ldr	r3, [r7, #12]
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	699a      	ldr	r2, [r3, #24]
 801b47c:	68fb      	ldr	r3, [r7, #12]
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	f022 020c 	bic.w	r2, r2, #12
 801b484:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801b486:	68fb      	ldr	r3, [r7, #12]
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	6999      	ldr	r1, [r3, #24]
 801b48c:	68bb      	ldr	r3, [r7, #8]
 801b48e:	689a      	ldr	r2, [r3, #8]
 801b490:	68fb      	ldr	r3, [r7, #12]
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	430a      	orrs	r2, r1
 801b496:	619a      	str	r2, [r3, #24]
 801b498:	e05a      	b.n	801b550 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	2b04      	cmp	r3, #4
 801b49e:	d11c      	bne.n	801b4da <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801b4a0:	68fb      	ldr	r3, [r7, #12]
 801b4a2:	6818      	ldr	r0, [r3, #0]
 801b4a4:	68bb      	ldr	r3, [r7, #8]
 801b4a6:	6819      	ldr	r1, [r3, #0]
 801b4a8:	68bb      	ldr	r3, [r7, #8]
 801b4aa:	685a      	ldr	r2, [r3, #4]
 801b4ac:	68bb      	ldr	r3, [r7, #8]
 801b4ae:	68db      	ldr	r3, [r3, #12]
 801b4b0:	f000 fcdf 	bl	801be72 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801b4b4:	68fb      	ldr	r3, [r7, #12]
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	699a      	ldr	r2, [r3, #24]
 801b4ba:	68fb      	ldr	r3, [r7, #12]
 801b4bc:	681b      	ldr	r3, [r3, #0]
 801b4be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801b4c2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801b4c4:	68fb      	ldr	r3, [r7, #12]
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	6999      	ldr	r1, [r3, #24]
 801b4ca:	68bb      	ldr	r3, [r7, #8]
 801b4cc:	689b      	ldr	r3, [r3, #8]
 801b4ce:	021a      	lsls	r2, r3, #8
 801b4d0:	68fb      	ldr	r3, [r7, #12]
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	430a      	orrs	r2, r1
 801b4d6:	619a      	str	r2, [r3, #24]
 801b4d8:	e03a      	b.n	801b550 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	2b08      	cmp	r3, #8
 801b4de:	d11b      	bne.n	801b518 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801b4e0:	68fb      	ldr	r3, [r7, #12]
 801b4e2:	6818      	ldr	r0, [r3, #0]
 801b4e4:	68bb      	ldr	r3, [r7, #8]
 801b4e6:	6819      	ldr	r1, [r3, #0]
 801b4e8:	68bb      	ldr	r3, [r7, #8]
 801b4ea:	685a      	ldr	r2, [r3, #4]
 801b4ec:	68bb      	ldr	r3, [r7, #8]
 801b4ee:	68db      	ldr	r3, [r3, #12]
 801b4f0:	f000 fd2c 	bl	801bf4c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801b4f4:	68fb      	ldr	r3, [r7, #12]
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	69da      	ldr	r2, [r3, #28]
 801b4fa:	68fb      	ldr	r3, [r7, #12]
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	f022 020c 	bic.w	r2, r2, #12
 801b502:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801b504:	68fb      	ldr	r3, [r7, #12]
 801b506:	681b      	ldr	r3, [r3, #0]
 801b508:	69d9      	ldr	r1, [r3, #28]
 801b50a:	68bb      	ldr	r3, [r7, #8]
 801b50c:	689a      	ldr	r2, [r3, #8]
 801b50e:	68fb      	ldr	r3, [r7, #12]
 801b510:	681b      	ldr	r3, [r3, #0]
 801b512:	430a      	orrs	r2, r1
 801b514:	61da      	str	r2, [r3, #28]
 801b516:	e01b      	b.n	801b550 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801b518:	68fb      	ldr	r3, [r7, #12]
 801b51a:	6818      	ldr	r0, [r3, #0]
 801b51c:	68bb      	ldr	r3, [r7, #8]
 801b51e:	6819      	ldr	r1, [r3, #0]
 801b520:	68bb      	ldr	r3, [r7, #8]
 801b522:	685a      	ldr	r2, [r3, #4]
 801b524:	68bb      	ldr	r3, [r7, #8]
 801b526:	68db      	ldr	r3, [r3, #12]
 801b528:	f000 fd4c 	bl	801bfc4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801b52c:	68fb      	ldr	r3, [r7, #12]
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	69da      	ldr	r2, [r3, #28]
 801b532:	68fb      	ldr	r3, [r7, #12]
 801b534:	681b      	ldr	r3, [r3, #0]
 801b536:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801b53a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	681b      	ldr	r3, [r3, #0]
 801b540:	69d9      	ldr	r1, [r3, #28]
 801b542:	68bb      	ldr	r3, [r7, #8]
 801b544:	689b      	ldr	r3, [r3, #8]
 801b546:	021a      	lsls	r2, r3, #8
 801b548:	68fb      	ldr	r3, [r7, #12]
 801b54a:	681b      	ldr	r3, [r3, #0]
 801b54c:	430a      	orrs	r2, r1
 801b54e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 801b550:	68fb      	ldr	r3, [r7, #12]
 801b552:	2201      	movs	r2, #1
 801b554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b558:	68fb      	ldr	r3, [r7, #12]
 801b55a:	2200      	movs	r2, #0
 801b55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801b560:	2300      	movs	r3, #0
}
 801b562:	4618      	mov	r0, r3
 801b564:	3710      	adds	r7, #16
 801b566:	46bd      	mov	sp, r7
 801b568:	bd80      	pop	{r7, pc}
	...

0801b56c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801b56c:	b580      	push	{r7, lr}
 801b56e:	b084      	sub	sp, #16
 801b570:	af00      	add	r7, sp, #0
 801b572:	60f8      	str	r0, [r7, #12]
 801b574:	60b9      	str	r1, [r7, #8]
 801b576:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801b578:	68fb      	ldr	r3, [r7, #12]
 801b57a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b57e:	2b01      	cmp	r3, #1
 801b580:	d101      	bne.n	801b586 <HAL_TIM_PWM_ConfigChannel+0x1a>
 801b582:	2302      	movs	r3, #2
 801b584:	e0b4      	b.n	801b6f0 <HAL_TIM_PWM_ConfigChannel+0x184>
 801b586:	68fb      	ldr	r3, [r7, #12]
 801b588:	2201      	movs	r2, #1
 801b58a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801b58e:	68fb      	ldr	r3, [r7, #12]
 801b590:	2202      	movs	r2, #2
 801b592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	2b0c      	cmp	r3, #12
 801b59a:	f200 809f 	bhi.w	801b6dc <HAL_TIM_PWM_ConfigChannel+0x170>
 801b59e:	a201      	add	r2, pc, #4	; (adr r2, 801b5a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 801b5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b5a4:	0801b5d9 	.word	0x0801b5d9
 801b5a8:	0801b6dd 	.word	0x0801b6dd
 801b5ac:	0801b6dd 	.word	0x0801b6dd
 801b5b0:	0801b6dd 	.word	0x0801b6dd
 801b5b4:	0801b619 	.word	0x0801b619
 801b5b8:	0801b6dd 	.word	0x0801b6dd
 801b5bc:	0801b6dd 	.word	0x0801b6dd
 801b5c0:	0801b6dd 	.word	0x0801b6dd
 801b5c4:	0801b65b 	.word	0x0801b65b
 801b5c8:	0801b6dd 	.word	0x0801b6dd
 801b5cc:	0801b6dd 	.word	0x0801b6dd
 801b5d0:	0801b6dd 	.word	0x0801b6dd
 801b5d4:	0801b69b 	.word	0x0801b69b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801b5d8:	68fb      	ldr	r3, [r7, #12]
 801b5da:	681b      	ldr	r3, [r3, #0]
 801b5dc:	68b9      	ldr	r1, [r7, #8]
 801b5de:	4618      	mov	r0, r3
 801b5e0:	f000 fa24 	bl	801ba2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801b5e4:	68fb      	ldr	r3, [r7, #12]
 801b5e6:	681b      	ldr	r3, [r3, #0]
 801b5e8:	699a      	ldr	r2, [r3, #24]
 801b5ea:	68fb      	ldr	r3, [r7, #12]
 801b5ec:	681b      	ldr	r3, [r3, #0]
 801b5ee:	f042 0208 	orr.w	r2, r2, #8
 801b5f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801b5f4:	68fb      	ldr	r3, [r7, #12]
 801b5f6:	681b      	ldr	r3, [r3, #0]
 801b5f8:	699a      	ldr	r2, [r3, #24]
 801b5fa:	68fb      	ldr	r3, [r7, #12]
 801b5fc:	681b      	ldr	r3, [r3, #0]
 801b5fe:	f022 0204 	bic.w	r2, r2, #4
 801b602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801b604:	68fb      	ldr	r3, [r7, #12]
 801b606:	681b      	ldr	r3, [r3, #0]
 801b608:	6999      	ldr	r1, [r3, #24]
 801b60a:	68bb      	ldr	r3, [r7, #8]
 801b60c:	691a      	ldr	r2, [r3, #16]
 801b60e:	68fb      	ldr	r3, [r7, #12]
 801b610:	681b      	ldr	r3, [r3, #0]
 801b612:	430a      	orrs	r2, r1
 801b614:	619a      	str	r2, [r3, #24]
      break;
 801b616:	e062      	b.n	801b6de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801b618:	68fb      	ldr	r3, [r7, #12]
 801b61a:	681b      	ldr	r3, [r3, #0]
 801b61c:	68b9      	ldr	r1, [r7, #8]
 801b61e:	4618      	mov	r0, r3
 801b620:	f000 fa6a 	bl	801baf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801b624:	68fb      	ldr	r3, [r7, #12]
 801b626:	681b      	ldr	r3, [r3, #0]
 801b628:	699a      	ldr	r2, [r3, #24]
 801b62a:	68fb      	ldr	r3, [r7, #12]
 801b62c:	681b      	ldr	r3, [r3, #0]
 801b62e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801b634:	68fb      	ldr	r3, [r7, #12]
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	699a      	ldr	r2, [r3, #24]
 801b63a:	68fb      	ldr	r3, [r7, #12]
 801b63c:	681b      	ldr	r3, [r3, #0]
 801b63e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801b644:	68fb      	ldr	r3, [r7, #12]
 801b646:	681b      	ldr	r3, [r3, #0]
 801b648:	6999      	ldr	r1, [r3, #24]
 801b64a:	68bb      	ldr	r3, [r7, #8]
 801b64c:	691b      	ldr	r3, [r3, #16]
 801b64e:	021a      	lsls	r2, r3, #8
 801b650:	68fb      	ldr	r3, [r7, #12]
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	430a      	orrs	r2, r1
 801b656:	619a      	str	r2, [r3, #24]
      break;
 801b658:	e041      	b.n	801b6de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801b65a:	68fb      	ldr	r3, [r7, #12]
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	68b9      	ldr	r1, [r7, #8]
 801b660:	4618      	mov	r0, r3
 801b662:	f000 fab5 	bl	801bbd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801b666:	68fb      	ldr	r3, [r7, #12]
 801b668:	681b      	ldr	r3, [r3, #0]
 801b66a:	69da      	ldr	r2, [r3, #28]
 801b66c:	68fb      	ldr	r3, [r7, #12]
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	f042 0208 	orr.w	r2, r2, #8
 801b674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801b676:	68fb      	ldr	r3, [r7, #12]
 801b678:	681b      	ldr	r3, [r3, #0]
 801b67a:	69da      	ldr	r2, [r3, #28]
 801b67c:	68fb      	ldr	r3, [r7, #12]
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	f022 0204 	bic.w	r2, r2, #4
 801b684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801b686:	68fb      	ldr	r3, [r7, #12]
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	69d9      	ldr	r1, [r3, #28]
 801b68c:	68bb      	ldr	r3, [r7, #8]
 801b68e:	691a      	ldr	r2, [r3, #16]
 801b690:	68fb      	ldr	r3, [r7, #12]
 801b692:	681b      	ldr	r3, [r3, #0]
 801b694:	430a      	orrs	r2, r1
 801b696:	61da      	str	r2, [r3, #28]
      break;
 801b698:	e021      	b.n	801b6de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801b69a:	68fb      	ldr	r3, [r7, #12]
 801b69c:	681b      	ldr	r3, [r3, #0]
 801b69e:	68b9      	ldr	r1, [r7, #8]
 801b6a0:	4618      	mov	r0, r3
 801b6a2:	f000 faff 	bl	801bca4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801b6a6:	68fb      	ldr	r3, [r7, #12]
 801b6a8:	681b      	ldr	r3, [r3, #0]
 801b6aa:	69da      	ldr	r2, [r3, #28]
 801b6ac:	68fb      	ldr	r3, [r7, #12]
 801b6ae:	681b      	ldr	r3, [r3, #0]
 801b6b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b6b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801b6b6:	68fb      	ldr	r3, [r7, #12]
 801b6b8:	681b      	ldr	r3, [r3, #0]
 801b6ba:	69da      	ldr	r2, [r3, #28]
 801b6bc:	68fb      	ldr	r3, [r7, #12]
 801b6be:	681b      	ldr	r3, [r3, #0]
 801b6c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b6c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801b6c6:	68fb      	ldr	r3, [r7, #12]
 801b6c8:	681b      	ldr	r3, [r3, #0]
 801b6ca:	69d9      	ldr	r1, [r3, #28]
 801b6cc:	68bb      	ldr	r3, [r7, #8]
 801b6ce:	691b      	ldr	r3, [r3, #16]
 801b6d0:	021a      	lsls	r2, r3, #8
 801b6d2:	68fb      	ldr	r3, [r7, #12]
 801b6d4:	681b      	ldr	r3, [r3, #0]
 801b6d6:	430a      	orrs	r2, r1
 801b6d8:	61da      	str	r2, [r3, #28]
      break;
 801b6da:	e000      	b.n	801b6de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 801b6dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801b6de:	68fb      	ldr	r3, [r7, #12]
 801b6e0:	2201      	movs	r2, #1
 801b6e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b6e6:	68fb      	ldr	r3, [r7, #12]
 801b6e8:	2200      	movs	r2, #0
 801b6ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801b6ee:	2300      	movs	r3, #0
}
 801b6f0:	4618      	mov	r0, r3
 801b6f2:	3710      	adds	r7, #16
 801b6f4:	46bd      	mov	sp, r7
 801b6f6:	bd80      	pop	{r7, pc}

0801b6f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801b6f8:	b580      	push	{r7, lr}
 801b6fa:	b084      	sub	sp, #16
 801b6fc:	af00      	add	r7, sp, #0
 801b6fe:	6078      	str	r0, [r7, #4]
 801b700:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b708:	2b01      	cmp	r3, #1
 801b70a:	d101      	bne.n	801b710 <HAL_TIM_ConfigClockSource+0x18>
 801b70c:	2302      	movs	r3, #2
 801b70e:	e0a6      	b.n	801b85e <HAL_TIM_ConfigClockSource+0x166>
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	2201      	movs	r2, #1
 801b714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	2202      	movs	r2, #2
 801b71c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	689b      	ldr	r3, [r3, #8]
 801b726:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801b728:	68fb      	ldr	r3, [r7, #12]
 801b72a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801b72e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b730:	68fb      	ldr	r3, [r7, #12]
 801b732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b736:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	681b      	ldr	r3, [r3, #0]
 801b73c:	68fa      	ldr	r2, [r7, #12]
 801b73e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801b740:	683b      	ldr	r3, [r7, #0]
 801b742:	681b      	ldr	r3, [r3, #0]
 801b744:	2b40      	cmp	r3, #64	; 0x40
 801b746:	d067      	beq.n	801b818 <HAL_TIM_ConfigClockSource+0x120>
 801b748:	2b40      	cmp	r3, #64	; 0x40
 801b74a:	d80b      	bhi.n	801b764 <HAL_TIM_ConfigClockSource+0x6c>
 801b74c:	2b10      	cmp	r3, #16
 801b74e:	d073      	beq.n	801b838 <HAL_TIM_ConfigClockSource+0x140>
 801b750:	2b10      	cmp	r3, #16
 801b752:	d802      	bhi.n	801b75a <HAL_TIM_ConfigClockSource+0x62>
 801b754:	2b00      	cmp	r3, #0
 801b756:	d06f      	beq.n	801b838 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 801b758:	e078      	b.n	801b84c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801b75a:	2b20      	cmp	r3, #32
 801b75c:	d06c      	beq.n	801b838 <HAL_TIM_ConfigClockSource+0x140>
 801b75e:	2b30      	cmp	r3, #48	; 0x30
 801b760:	d06a      	beq.n	801b838 <HAL_TIM_ConfigClockSource+0x140>
      break;
 801b762:	e073      	b.n	801b84c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801b764:	2b70      	cmp	r3, #112	; 0x70
 801b766:	d00d      	beq.n	801b784 <HAL_TIM_ConfigClockSource+0x8c>
 801b768:	2b70      	cmp	r3, #112	; 0x70
 801b76a:	d804      	bhi.n	801b776 <HAL_TIM_ConfigClockSource+0x7e>
 801b76c:	2b50      	cmp	r3, #80	; 0x50
 801b76e:	d033      	beq.n	801b7d8 <HAL_TIM_ConfigClockSource+0xe0>
 801b770:	2b60      	cmp	r3, #96	; 0x60
 801b772:	d041      	beq.n	801b7f8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 801b774:	e06a      	b.n	801b84c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801b776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b77a:	d066      	beq.n	801b84a <HAL_TIM_ConfigClockSource+0x152>
 801b77c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b780:	d017      	beq.n	801b7b2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 801b782:	e063      	b.n	801b84c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	6818      	ldr	r0, [r3, #0]
 801b788:	683b      	ldr	r3, [r7, #0]
 801b78a:	6899      	ldr	r1, [r3, #8]
 801b78c:	683b      	ldr	r3, [r7, #0]
 801b78e:	685a      	ldr	r2, [r3, #4]
 801b790:	683b      	ldr	r3, [r7, #0]
 801b792:	68db      	ldr	r3, [r3, #12]
 801b794:	f000 fc6e 	bl	801c074 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	681b      	ldr	r3, [r3, #0]
 801b79c:	689b      	ldr	r3, [r3, #8]
 801b79e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801b7a0:	68fb      	ldr	r3, [r7, #12]
 801b7a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801b7a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	681b      	ldr	r3, [r3, #0]
 801b7ac:	68fa      	ldr	r2, [r7, #12]
 801b7ae:	609a      	str	r2, [r3, #8]
      break;
 801b7b0:	e04c      	b.n	801b84c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	6818      	ldr	r0, [r3, #0]
 801b7b6:	683b      	ldr	r3, [r7, #0]
 801b7b8:	6899      	ldr	r1, [r3, #8]
 801b7ba:	683b      	ldr	r3, [r7, #0]
 801b7bc:	685a      	ldr	r2, [r3, #4]
 801b7be:	683b      	ldr	r3, [r7, #0]
 801b7c0:	68db      	ldr	r3, [r3, #12]
 801b7c2:	f000 fc57 	bl	801c074 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	681b      	ldr	r3, [r3, #0]
 801b7ca:	689a      	ldr	r2, [r3, #8]
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	681b      	ldr	r3, [r3, #0]
 801b7d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801b7d4:	609a      	str	r2, [r3, #8]
      break;
 801b7d6:	e039      	b.n	801b84c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	6818      	ldr	r0, [r3, #0]
 801b7dc:	683b      	ldr	r3, [r7, #0]
 801b7de:	6859      	ldr	r1, [r3, #4]
 801b7e0:	683b      	ldr	r3, [r7, #0]
 801b7e2:	68db      	ldr	r3, [r3, #12]
 801b7e4:	461a      	mov	r2, r3
 801b7e6:	f000 fb15 	bl	801be14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	681b      	ldr	r3, [r3, #0]
 801b7ee:	2150      	movs	r1, #80	; 0x50
 801b7f0:	4618      	mov	r0, r3
 801b7f2:	f000 fc24 	bl	801c03e <TIM_ITRx_SetConfig>
      break;
 801b7f6:	e029      	b.n	801b84c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	6818      	ldr	r0, [r3, #0]
 801b7fc:	683b      	ldr	r3, [r7, #0]
 801b7fe:	6859      	ldr	r1, [r3, #4]
 801b800:	683b      	ldr	r3, [r7, #0]
 801b802:	68db      	ldr	r3, [r3, #12]
 801b804:	461a      	mov	r2, r3
 801b806:	f000 fb71 	bl	801beec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	681b      	ldr	r3, [r3, #0]
 801b80e:	2160      	movs	r1, #96	; 0x60
 801b810:	4618      	mov	r0, r3
 801b812:	f000 fc14 	bl	801c03e <TIM_ITRx_SetConfig>
      break;
 801b816:	e019      	b.n	801b84c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	6818      	ldr	r0, [r3, #0]
 801b81c:	683b      	ldr	r3, [r7, #0]
 801b81e:	6859      	ldr	r1, [r3, #4]
 801b820:	683b      	ldr	r3, [r7, #0]
 801b822:	68db      	ldr	r3, [r3, #12]
 801b824:	461a      	mov	r2, r3
 801b826:	f000 faf5 	bl	801be14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	2140      	movs	r1, #64	; 0x40
 801b830:	4618      	mov	r0, r3
 801b832:	f000 fc04 	bl	801c03e <TIM_ITRx_SetConfig>
      break;
 801b836:	e009      	b.n	801b84c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	681a      	ldr	r2, [r3, #0]
 801b83c:	683b      	ldr	r3, [r7, #0]
 801b83e:	681b      	ldr	r3, [r3, #0]
 801b840:	4619      	mov	r1, r3
 801b842:	4610      	mov	r0, r2
 801b844:	f000 fbfb 	bl	801c03e <TIM_ITRx_SetConfig>
      break;
 801b848:	e000      	b.n	801b84c <HAL_TIM_ConfigClockSource+0x154>
      break;
 801b84a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801b84c:	687b      	ldr	r3, [r7, #4]
 801b84e:	2201      	movs	r2, #1
 801b850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	2200      	movs	r2, #0
 801b858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801b85c:	2300      	movs	r3, #0
}
 801b85e:	4618      	mov	r0, r3
 801b860:	3710      	adds	r7, #16
 801b862:	46bd      	mov	sp, r7
 801b864:	bd80      	pop	{r7, pc}
	...

0801b868 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801b868:	b480      	push	{r7}
 801b86a:	b085      	sub	sp, #20
 801b86c:	af00      	add	r7, sp, #0
 801b86e:	6078      	str	r0, [r7, #4]
 801b870:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 801b872:	2300      	movs	r3, #0
 801b874:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 801b876:	683b      	ldr	r3, [r7, #0]
 801b878:	2b0c      	cmp	r3, #12
 801b87a:	d831      	bhi.n	801b8e0 <HAL_TIM_ReadCapturedValue+0x78>
 801b87c:	a201      	add	r2, pc, #4	; (adr r2, 801b884 <HAL_TIM_ReadCapturedValue+0x1c>)
 801b87e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b882:	bf00      	nop
 801b884:	0801b8b9 	.word	0x0801b8b9
 801b888:	0801b8e1 	.word	0x0801b8e1
 801b88c:	0801b8e1 	.word	0x0801b8e1
 801b890:	0801b8e1 	.word	0x0801b8e1
 801b894:	0801b8c3 	.word	0x0801b8c3
 801b898:	0801b8e1 	.word	0x0801b8e1
 801b89c:	0801b8e1 	.word	0x0801b8e1
 801b8a0:	0801b8e1 	.word	0x0801b8e1
 801b8a4:	0801b8cd 	.word	0x0801b8cd
 801b8a8:	0801b8e1 	.word	0x0801b8e1
 801b8ac:	0801b8e1 	.word	0x0801b8e1
 801b8b0:	0801b8e1 	.word	0x0801b8e1
 801b8b4:	0801b8d7 	.word	0x0801b8d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	681b      	ldr	r3, [r3, #0]
 801b8bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b8be:	60fb      	str	r3, [r7, #12]

      break;
 801b8c0:	e00f      	b.n	801b8e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	681b      	ldr	r3, [r3, #0]
 801b8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b8c8:	60fb      	str	r3, [r7, #12]

      break;
 801b8ca:	e00a      	b.n	801b8e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	681b      	ldr	r3, [r3, #0]
 801b8d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b8d2:	60fb      	str	r3, [r7, #12]

      break;
 801b8d4:	e005      	b.n	801b8e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	681b      	ldr	r3, [r3, #0]
 801b8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b8dc:	60fb      	str	r3, [r7, #12]

      break;
 801b8de:	e000      	b.n	801b8e2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 801b8e0:	bf00      	nop
  }

  return tmpreg;
 801b8e2:	68fb      	ldr	r3, [r7, #12]
}
 801b8e4:	4618      	mov	r0, r3
 801b8e6:	3714      	adds	r7, #20
 801b8e8:	46bd      	mov	sp, r7
 801b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ee:	4770      	bx	lr

0801b8f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801b8f0:	b480      	push	{r7}
 801b8f2:	b083      	sub	sp, #12
 801b8f4:	af00      	add	r7, sp, #0
 801b8f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801b8f8:	bf00      	nop
 801b8fa:	370c      	adds	r7, #12
 801b8fc:	46bd      	mov	sp, r7
 801b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b902:	4770      	bx	lr

0801b904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801b904:	b480      	push	{r7}
 801b906:	b083      	sub	sp, #12
 801b908:	af00      	add	r7, sp, #0
 801b90a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801b90c:	bf00      	nop
 801b90e:	370c      	adds	r7, #12
 801b910:	46bd      	mov	sp, r7
 801b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b916:	4770      	bx	lr

0801b918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801b918:	b480      	push	{r7}
 801b91a:	b083      	sub	sp, #12
 801b91c:	af00      	add	r7, sp, #0
 801b91e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801b920:	bf00      	nop
 801b922:	370c      	adds	r7, #12
 801b924:	46bd      	mov	sp, r7
 801b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b92a:	4770      	bx	lr

0801b92c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801b92c:	b480      	push	{r7}
 801b92e:	b085      	sub	sp, #20
 801b930:	af00      	add	r7, sp, #0
 801b932:	6078      	str	r0, [r7, #4]
 801b934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	4a34      	ldr	r2, [pc, #208]	; (801ba10 <TIM_Base_SetConfig+0xe4>)
 801b940:	4293      	cmp	r3, r2
 801b942:	d00f      	beq.n	801b964 <TIM_Base_SetConfig+0x38>
 801b944:	687b      	ldr	r3, [r7, #4]
 801b946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b94a:	d00b      	beq.n	801b964 <TIM_Base_SetConfig+0x38>
 801b94c:	687b      	ldr	r3, [r7, #4]
 801b94e:	4a31      	ldr	r2, [pc, #196]	; (801ba14 <TIM_Base_SetConfig+0xe8>)
 801b950:	4293      	cmp	r3, r2
 801b952:	d007      	beq.n	801b964 <TIM_Base_SetConfig+0x38>
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	4a30      	ldr	r2, [pc, #192]	; (801ba18 <TIM_Base_SetConfig+0xec>)
 801b958:	4293      	cmp	r3, r2
 801b95a:	d003      	beq.n	801b964 <TIM_Base_SetConfig+0x38>
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	4a2f      	ldr	r2, [pc, #188]	; (801ba1c <TIM_Base_SetConfig+0xf0>)
 801b960:	4293      	cmp	r3, r2
 801b962:	d108      	bne.n	801b976 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801b964:	68fb      	ldr	r3, [r7, #12]
 801b966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b96a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801b96c:	683b      	ldr	r3, [r7, #0]
 801b96e:	685b      	ldr	r3, [r3, #4]
 801b970:	68fa      	ldr	r2, [r7, #12]
 801b972:	4313      	orrs	r3, r2
 801b974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	4a25      	ldr	r2, [pc, #148]	; (801ba10 <TIM_Base_SetConfig+0xe4>)
 801b97a:	4293      	cmp	r3, r2
 801b97c:	d01b      	beq.n	801b9b6 <TIM_Base_SetConfig+0x8a>
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b984:	d017      	beq.n	801b9b6 <TIM_Base_SetConfig+0x8a>
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	4a22      	ldr	r2, [pc, #136]	; (801ba14 <TIM_Base_SetConfig+0xe8>)
 801b98a:	4293      	cmp	r3, r2
 801b98c:	d013      	beq.n	801b9b6 <TIM_Base_SetConfig+0x8a>
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	4a21      	ldr	r2, [pc, #132]	; (801ba18 <TIM_Base_SetConfig+0xec>)
 801b992:	4293      	cmp	r3, r2
 801b994:	d00f      	beq.n	801b9b6 <TIM_Base_SetConfig+0x8a>
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	4a20      	ldr	r2, [pc, #128]	; (801ba1c <TIM_Base_SetConfig+0xf0>)
 801b99a:	4293      	cmp	r3, r2
 801b99c:	d00b      	beq.n	801b9b6 <TIM_Base_SetConfig+0x8a>
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	4a1f      	ldr	r2, [pc, #124]	; (801ba20 <TIM_Base_SetConfig+0xf4>)
 801b9a2:	4293      	cmp	r3, r2
 801b9a4:	d007      	beq.n	801b9b6 <TIM_Base_SetConfig+0x8a>
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	4a1e      	ldr	r2, [pc, #120]	; (801ba24 <TIM_Base_SetConfig+0xf8>)
 801b9aa:	4293      	cmp	r3, r2
 801b9ac:	d003      	beq.n	801b9b6 <TIM_Base_SetConfig+0x8a>
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	4a1d      	ldr	r2, [pc, #116]	; (801ba28 <TIM_Base_SetConfig+0xfc>)
 801b9b2:	4293      	cmp	r3, r2
 801b9b4:	d108      	bne.n	801b9c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801b9b6:	68fb      	ldr	r3, [r7, #12]
 801b9b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b9bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801b9be:	683b      	ldr	r3, [r7, #0]
 801b9c0:	68db      	ldr	r3, [r3, #12]
 801b9c2:	68fa      	ldr	r2, [r7, #12]
 801b9c4:	4313      	orrs	r3, r2
 801b9c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801b9c8:	68fb      	ldr	r3, [r7, #12]
 801b9ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801b9ce:	683b      	ldr	r3, [r7, #0]
 801b9d0:	695b      	ldr	r3, [r3, #20]
 801b9d2:	4313      	orrs	r3, r2
 801b9d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	68fa      	ldr	r2, [r7, #12]
 801b9da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801b9dc:	683b      	ldr	r3, [r7, #0]
 801b9de:	689a      	ldr	r2, [r3, #8]
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801b9e4:	683b      	ldr	r3, [r7, #0]
 801b9e6:	681a      	ldr	r2, [r3, #0]
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	4a08      	ldr	r2, [pc, #32]	; (801ba10 <TIM_Base_SetConfig+0xe4>)
 801b9f0:	4293      	cmp	r3, r2
 801b9f2:	d103      	bne.n	801b9fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801b9f4:	683b      	ldr	r3, [r7, #0]
 801b9f6:	691a      	ldr	r2, [r3, #16]
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	2201      	movs	r2, #1
 801ba00:	615a      	str	r2, [r3, #20]
}
 801ba02:	bf00      	nop
 801ba04:	3714      	adds	r7, #20
 801ba06:	46bd      	mov	sp, r7
 801ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba0c:	4770      	bx	lr
 801ba0e:	bf00      	nop
 801ba10:	40010000 	.word	0x40010000
 801ba14:	40000400 	.word	0x40000400
 801ba18:	40000800 	.word	0x40000800
 801ba1c:	40000c00 	.word	0x40000c00
 801ba20:	40014000 	.word	0x40014000
 801ba24:	40014400 	.word	0x40014400
 801ba28:	40014800 	.word	0x40014800

0801ba2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ba2c:	b480      	push	{r7}
 801ba2e:	b087      	sub	sp, #28
 801ba30:	af00      	add	r7, sp, #0
 801ba32:	6078      	str	r0, [r7, #4]
 801ba34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	6a1b      	ldr	r3, [r3, #32]
 801ba3a:	f023 0201 	bic.w	r2, r3, #1
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	6a1b      	ldr	r3, [r3, #32]
 801ba46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	685b      	ldr	r3, [r3, #4]
 801ba4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	699b      	ldr	r3, [r3, #24]
 801ba52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801ba54:	68fb      	ldr	r3, [r7, #12]
 801ba56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ba5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801ba5c:	68fb      	ldr	r3, [r7, #12]
 801ba5e:	f023 0303 	bic.w	r3, r3, #3
 801ba62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ba64:	683b      	ldr	r3, [r7, #0]
 801ba66:	681b      	ldr	r3, [r3, #0]
 801ba68:	68fa      	ldr	r2, [r7, #12]
 801ba6a:	4313      	orrs	r3, r2
 801ba6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801ba6e:	697b      	ldr	r3, [r7, #20]
 801ba70:	f023 0302 	bic.w	r3, r3, #2
 801ba74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801ba76:	683b      	ldr	r3, [r7, #0]
 801ba78:	689b      	ldr	r3, [r3, #8]
 801ba7a:	697a      	ldr	r2, [r7, #20]
 801ba7c:	4313      	orrs	r3, r2
 801ba7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	4a1c      	ldr	r2, [pc, #112]	; (801baf4 <TIM_OC1_SetConfig+0xc8>)
 801ba84:	4293      	cmp	r3, r2
 801ba86:	d10c      	bne.n	801baa2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801ba88:	697b      	ldr	r3, [r7, #20]
 801ba8a:	f023 0308 	bic.w	r3, r3, #8
 801ba8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801ba90:	683b      	ldr	r3, [r7, #0]
 801ba92:	68db      	ldr	r3, [r3, #12]
 801ba94:	697a      	ldr	r2, [r7, #20]
 801ba96:	4313      	orrs	r3, r2
 801ba98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801ba9a:	697b      	ldr	r3, [r7, #20]
 801ba9c:	f023 0304 	bic.w	r3, r3, #4
 801baa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	4a13      	ldr	r2, [pc, #76]	; (801baf4 <TIM_OC1_SetConfig+0xc8>)
 801baa6:	4293      	cmp	r3, r2
 801baa8:	d111      	bne.n	801bace <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801baaa:	693b      	ldr	r3, [r7, #16]
 801baac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801bab2:	693b      	ldr	r3, [r7, #16]
 801bab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801bab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801baba:	683b      	ldr	r3, [r7, #0]
 801babc:	695b      	ldr	r3, [r3, #20]
 801babe:	693a      	ldr	r2, [r7, #16]
 801bac0:	4313      	orrs	r3, r2
 801bac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801bac4:	683b      	ldr	r3, [r7, #0]
 801bac6:	699b      	ldr	r3, [r3, #24]
 801bac8:	693a      	ldr	r2, [r7, #16]
 801baca:	4313      	orrs	r3, r2
 801bacc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	693a      	ldr	r2, [r7, #16]
 801bad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	68fa      	ldr	r2, [r7, #12]
 801bad8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801bada:	683b      	ldr	r3, [r7, #0]
 801badc:	685a      	ldr	r2, [r3, #4]
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	697a      	ldr	r2, [r7, #20]
 801bae6:	621a      	str	r2, [r3, #32]
}
 801bae8:	bf00      	nop
 801baea:	371c      	adds	r7, #28
 801baec:	46bd      	mov	sp, r7
 801baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baf2:	4770      	bx	lr
 801baf4:	40010000 	.word	0x40010000

0801baf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801baf8:	b480      	push	{r7}
 801bafa:	b087      	sub	sp, #28
 801bafc:	af00      	add	r7, sp, #0
 801bafe:	6078      	str	r0, [r7, #4]
 801bb00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	6a1b      	ldr	r3, [r3, #32]
 801bb06:	f023 0210 	bic.w	r2, r3, #16
 801bb0a:	687b      	ldr	r3, [r7, #4]
 801bb0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	6a1b      	ldr	r3, [r3, #32]
 801bb12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	685b      	ldr	r3, [r3, #4]
 801bb18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	699b      	ldr	r3, [r3, #24]
 801bb1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801bb20:	68fb      	ldr	r3, [r7, #12]
 801bb22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801bb26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801bb28:	68fb      	ldr	r3, [r7, #12]
 801bb2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801bb2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801bb30:	683b      	ldr	r3, [r7, #0]
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	021b      	lsls	r3, r3, #8
 801bb36:	68fa      	ldr	r2, [r7, #12]
 801bb38:	4313      	orrs	r3, r2
 801bb3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801bb3c:	697b      	ldr	r3, [r7, #20]
 801bb3e:	f023 0320 	bic.w	r3, r3, #32
 801bb42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801bb44:	683b      	ldr	r3, [r7, #0]
 801bb46:	689b      	ldr	r3, [r3, #8]
 801bb48:	011b      	lsls	r3, r3, #4
 801bb4a:	697a      	ldr	r2, [r7, #20]
 801bb4c:	4313      	orrs	r3, r2
 801bb4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	4a1e      	ldr	r2, [pc, #120]	; (801bbcc <TIM_OC2_SetConfig+0xd4>)
 801bb54:	4293      	cmp	r3, r2
 801bb56:	d10d      	bne.n	801bb74 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801bb58:	697b      	ldr	r3, [r7, #20]
 801bb5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801bb5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801bb60:	683b      	ldr	r3, [r7, #0]
 801bb62:	68db      	ldr	r3, [r3, #12]
 801bb64:	011b      	lsls	r3, r3, #4
 801bb66:	697a      	ldr	r2, [r7, #20]
 801bb68:	4313      	orrs	r3, r2
 801bb6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801bb6c:	697b      	ldr	r3, [r7, #20]
 801bb6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801bb72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	4a15      	ldr	r2, [pc, #84]	; (801bbcc <TIM_OC2_SetConfig+0xd4>)
 801bb78:	4293      	cmp	r3, r2
 801bb7a:	d113      	bne.n	801bba4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801bb7c:	693b      	ldr	r3, [r7, #16]
 801bb7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801bb82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801bb84:	693b      	ldr	r3, [r7, #16]
 801bb86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801bb8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801bb8c:	683b      	ldr	r3, [r7, #0]
 801bb8e:	695b      	ldr	r3, [r3, #20]
 801bb90:	009b      	lsls	r3, r3, #2
 801bb92:	693a      	ldr	r2, [r7, #16]
 801bb94:	4313      	orrs	r3, r2
 801bb96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801bb98:	683b      	ldr	r3, [r7, #0]
 801bb9a:	699b      	ldr	r3, [r3, #24]
 801bb9c:	009b      	lsls	r3, r3, #2
 801bb9e:	693a      	ldr	r2, [r7, #16]
 801bba0:	4313      	orrs	r3, r2
 801bba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	693a      	ldr	r2, [r7, #16]
 801bba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	68fa      	ldr	r2, [r7, #12]
 801bbae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801bbb0:	683b      	ldr	r3, [r7, #0]
 801bbb2:	685a      	ldr	r2, [r3, #4]
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	697a      	ldr	r2, [r7, #20]
 801bbbc:	621a      	str	r2, [r3, #32]
}
 801bbbe:	bf00      	nop
 801bbc0:	371c      	adds	r7, #28
 801bbc2:	46bd      	mov	sp, r7
 801bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbc8:	4770      	bx	lr
 801bbca:	bf00      	nop
 801bbcc:	40010000 	.word	0x40010000

0801bbd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801bbd0:	b480      	push	{r7}
 801bbd2:	b087      	sub	sp, #28
 801bbd4:	af00      	add	r7, sp, #0
 801bbd6:	6078      	str	r0, [r7, #4]
 801bbd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	6a1b      	ldr	r3, [r3, #32]
 801bbde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	6a1b      	ldr	r3, [r3, #32]
 801bbea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801bbec:	687b      	ldr	r3, [r7, #4]
 801bbee:	685b      	ldr	r3, [r3, #4]
 801bbf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	69db      	ldr	r3, [r3, #28]
 801bbf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801bbf8:	68fb      	ldr	r3, [r7, #12]
 801bbfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bbfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801bc00:	68fb      	ldr	r3, [r7, #12]
 801bc02:	f023 0303 	bic.w	r3, r3, #3
 801bc06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801bc08:	683b      	ldr	r3, [r7, #0]
 801bc0a:	681b      	ldr	r3, [r3, #0]
 801bc0c:	68fa      	ldr	r2, [r7, #12]
 801bc0e:	4313      	orrs	r3, r2
 801bc10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801bc12:	697b      	ldr	r3, [r7, #20]
 801bc14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801bc18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801bc1a:	683b      	ldr	r3, [r7, #0]
 801bc1c:	689b      	ldr	r3, [r3, #8]
 801bc1e:	021b      	lsls	r3, r3, #8
 801bc20:	697a      	ldr	r2, [r7, #20]
 801bc22:	4313      	orrs	r3, r2
 801bc24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	4a1d      	ldr	r2, [pc, #116]	; (801bca0 <TIM_OC3_SetConfig+0xd0>)
 801bc2a:	4293      	cmp	r3, r2
 801bc2c:	d10d      	bne.n	801bc4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801bc2e:	697b      	ldr	r3, [r7, #20]
 801bc30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801bc34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801bc36:	683b      	ldr	r3, [r7, #0]
 801bc38:	68db      	ldr	r3, [r3, #12]
 801bc3a:	021b      	lsls	r3, r3, #8
 801bc3c:	697a      	ldr	r2, [r7, #20]
 801bc3e:	4313      	orrs	r3, r2
 801bc40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801bc42:	697b      	ldr	r3, [r7, #20]
 801bc44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801bc48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	4a14      	ldr	r2, [pc, #80]	; (801bca0 <TIM_OC3_SetConfig+0xd0>)
 801bc4e:	4293      	cmp	r3, r2
 801bc50:	d113      	bne.n	801bc7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801bc52:	693b      	ldr	r3, [r7, #16]
 801bc54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bc58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801bc5a:	693b      	ldr	r3, [r7, #16]
 801bc5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801bc60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801bc62:	683b      	ldr	r3, [r7, #0]
 801bc64:	695b      	ldr	r3, [r3, #20]
 801bc66:	011b      	lsls	r3, r3, #4
 801bc68:	693a      	ldr	r2, [r7, #16]
 801bc6a:	4313      	orrs	r3, r2
 801bc6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801bc6e:	683b      	ldr	r3, [r7, #0]
 801bc70:	699b      	ldr	r3, [r3, #24]
 801bc72:	011b      	lsls	r3, r3, #4
 801bc74:	693a      	ldr	r2, [r7, #16]
 801bc76:	4313      	orrs	r3, r2
 801bc78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	693a      	ldr	r2, [r7, #16]
 801bc7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	68fa      	ldr	r2, [r7, #12]
 801bc84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801bc86:	683b      	ldr	r3, [r7, #0]
 801bc88:	685a      	ldr	r2, [r3, #4]
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	697a      	ldr	r2, [r7, #20]
 801bc92:	621a      	str	r2, [r3, #32]
}
 801bc94:	bf00      	nop
 801bc96:	371c      	adds	r7, #28
 801bc98:	46bd      	mov	sp, r7
 801bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc9e:	4770      	bx	lr
 801bca0:	40010000 	.word	0x40010000

0801bca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801bca4:	b480      	push	{r7}
 801bca6:	b087      	sub	sp, #28
 801bca8:	af00      	add	r7, sp, #0
 801bcaa:	6078      	str	r0, [r7, #4]
 801bcac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	6a1b      	ldr	r3, [r3, #32]
 801bcb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	6a1b      	ldr	r3, [r3, #32]
 801bcbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	685b      	ldr	r3, [r3, #4]
 801bcc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	69db      	ldr	r3, [r3, #28]
 801bcca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801bccc:	68fb      	ldr	r3, [r7, #12]
 801bcce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801bcd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801bcd4:	68fb      	ldr	r3, [r7, #12]
 801bcd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801bcda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801bcdc:	683b      	ldr	r3, [r7, #0]
 801bcde:	681b      	ldr	r3, [r3, #0]
 801bce0:	021b      	lsls	r3, r3, #8
 801bce2:	68fa      	ldr	r2, [r7, #12]
 801bce4:	4313      	orrs	r3, r2
 801bce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801bce8:	693b      	ldr	r3, [r7, #16]
 801bcea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801bcee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801bcf0:	683b      	ldr	r3, [r7, #0]
 801bcf2:	689b      	ldr	r3, [r3, #8]
 801bcf4:	031b      	lsls	r3, r3, #12
 801bcf6:	693a      	ldr	r2, [r7, #16]
 801bcf8:	4313      	orrs	r3, r2
 801bcfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	4a10      	ldr	r2, [pc, #64]	; (801bd40 <TIM_OC4_SetConfig+0x9c>)
 801bd00:	4293      	cmp	r3, r2
 801bd02:	d109      	bne.n	801bd18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801bd04:	697b      	ldr	r3, [r7, #20]
 801bd06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801bd0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801bd0c:	683b      	ldr	r3, [r7, #0]
 801bd0e:	695b      	ldr	r3, [r3, #20]
 801bd10:	019b      	lsls	r3, r3, #6
 801bd12:	697a      	ldr	r2, [r7, #20]
 801bd14:	4313      	orrs	r3, r2
 801bd16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	697a      	ldr	r2, [r7, #20]
 801bd1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801bd1e:	687b      	ldr	r3, [r7, #4]
 801bd20:	68fa      	ldr	r2, [r7, #12]
 801bd22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801bd24:	683b      	ldr	r3, [r7, #0]
 801bd26:	685a      	ldr	r2, [r3, #4]
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801bd2c:	687b      	ldr	r3, [r7, #4]
 801bd2e:	693a      	ldr	r2, [r7, #16]
 801bd30:	621a      	str	r2, [r3, #32]
}
 801bd32:	bf00      	nop
 801bd34:	371c      	adds	r7, #28
 801bd36:	46bd      	mov	sp, r7
 801bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd3c:	4770      	bx	lr
 801bd3e:	bf00      	nop
 801bd40:	40010000 	.word	0x40010000

0801bd44 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 801bd44:	b480      	push	{r7}
 801bd46:	b087      	sub	sp, #28
 801bd48:	af00      	add	r7, sp, #0
 801bd4a:	60f8      	str	r0, [r7, #12]
 801bd4c:	60b9      	str	r1, [r7, #8]
 801bd4e:	607a      	str	r2, [r7, #4]
 801bd50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801bd52:	68fb      	ldr	r3, [r7, #12]
 801bd54:	6a1b      	ldr	r3, [r3, #32]
 801bd56:	f023 0201 	bic.w	r2, r3, #1
 801bd5a:	68fb      	ldr	r3, [r7, #12]
 801bd5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801bd5e:	68fb      	ldr	r3, [r7, #12]
 801bd60:	699b      	ldr	r3, [r3, #24]
 801bd62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801bd64:	68fb      	ldr	r3, [r7, #12]
 801bd66:	6a1b      	ldr	r3, [r3, #32]
 801bd68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801bd6a:	68fb      	ldr	r3, [r7, #12]
 801bd6c:	4a24      	ldr	r2, [pc, #144]	; (801be00 <TIM_TI1_SetConfig+0xbc>)
 801bd6e:	4293      	cmp	r3, r2
 801bd70:	d013      	beq.n	801bd9a <TIM_TI1_SetConfig+0x56>
 801bd72:	68fb      	ldr	r3, [r7, #12]
 801bd74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801bd78:	d00f      	beq.n	801bd9a <TIM_TI1_SetConfig+0x56>
 801bd7a:	68fb      	ldr	r3, [r7, #12]
 801bd7c:	4a21      	ldr	r2, [pc, #132]	; (801be04 <TIM_TI1_SetConfig+0xc0>)
 801bd7e:	4293      	cmp	r3, r2
 801bd80:	d00b      	beq.n	801bd9a <TIM_TI1_SetConfig+0x56>
 801bd82:	68fb      	ldr	r3, [r7, #12]
 801bd84:	4a20      	ldr	r2, [pc, #128]	; (801be08 <TIM_TI1_SetConfig+0xc4>)
 801bd86:	4293      	cmp	r3, r2
 801bd88:	d007      	beq.n	801bd9a <TIM_TI1_SetConfig+0x56>
 801bd8a:	68fb      	ldr	r3, [r7, #12]
 801bd8c:	4a1f      	ldr	r2, [pc, #124]	; (801be0c <TIM_TI1_SetConfig+0xc8>)
 801bd8e:	4293      	cmp	r3, r2
 801bd90:	d003      	beq.n	801bd9a <TIM_TI1_SetConfig+0x56>
 801bd92:	68fb      	ldr	r3, [r7, #12]
 801bd94:	4a1e      	ldr	r2, [pc, #120]	; (801be10 <TIM_TI1_SetConfig+0xcc>)
 801bd96:	4293      	cmp	r3, r2
 801bd98:	d101      	bne.n	801bd9e <TIM_TI1_SetConfig+0x5a>
 801bd9a:	2301      	movs	r3, #1
 801bd9c:	e000      	b.n	801bda0 <TIM_TI1_SetConfig+0x5c>
 801bd9e:	2300      	movs	r3, #0
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d008      	beq.n	801bdb6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801bda4:	697b      	ldr	r3, [r7, #20]
 801bda6:	f023 0303 	bic.w	r3, r3, #3
 801bdaa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801bdac:	697a      	ldr	r2, [r7, #20]
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	4313      	orrs	r3, r2
 801bdb2:	617b      	str	r3, [r7, #20]
 801bdb4:	e003      	b.n	801bdbe <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801bdb6:	697b      	ldr	r3, [r7, #20]
 801bdb8:	f043 0301 	orr.w	r3, r3, #1
 801bdbc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801bdbe:	697b      	ldr	r3, [r7, #20]
 801bdc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801bdc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801bdc6:	683b      	ldr	r3, [r7, #0]
 801bdc8:	011b      	lsls	r3, r3, #4
 801bdca:	b2db      	uxtb	r3, r3
 801bdcc:	697a      	ldr	r2, [r7, #20]
 801bdce:	4313      	orrs	r3, r2
 801bdd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801bdd2:	693b      	ldr	r3, [r7, #16]
 801bdd4:	f023 030a 	bic.w	r3, r3, #10
 801bdd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801bdda:	68bb      	ldr	r3, [r7, #8]
 801bddc:	f003 030a 	and.w	r3, r3, #10
 801bde0:	693a      	ldr	r2, [r7, #16]
 801bde2:	4313      	orrs	r3, r2
 801bde4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801bde6:	68fb      	ldr	r3, [r7, #12]
 801bde8:	697a      	ldr	r2, [r7, #20]
 801bdea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801bdec:	68fb      	ldr	r3, [r7, #12]
 801bdee:	693a      	ldr	r2, [r7, #16]
 801bdf0:	621a      	str	r2, [r3, #32]
}
 801bdf2:	bf00      	nop
 801bdf4:	371c      	adds	r7, #28
 801bdf6:	46bd      	mov	sp, r7
 801bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdfc:	4770      	bx	lr
 801bdfe:	bf00      	nop
 801be00:	40010000 	.word	0x40010000
 801be04:	40000400 	.word	0x40000400
 801be08:	40000800 	.word	0x40000800
 801be0c:	40000c00 	.word	0x40000c00
 801be10:	40014000 	.word	0x40014000

0801be14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801be14:	b480      	push	{r7}
 801be16:	b087      	sub	sp, #28
 801be18:	af00      	add	r7, sp, #0
 801be1a:	60f8      	str	r0, [r7, #12]
 801be1c:	60b9      	str	r1, [r7, #8]
 801be1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801be20:	68fb      	ldr	r3, [r7, #12]
 801be22:	6a1b      	ldr	r3, [r3, #32]
 801be24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801be26:	68fb      	ldr	r3, [r7, #12]
 801be28:	6a1b      	ldr	r3, [r3, #32]
 801be2a:	f023 0201 	bic.w	r2, r3, #1
 801be2e:	68fb      	ldr	r3, [r7, #12]
 801be30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801be32:	68fb      	ldr	r3, [r7, #12]
 801be34:	699b      	ldr	r3, [r3, #24]
 801be36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801be38:	693b      	ldr	r3, [r7, #16]
 801be3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801be3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	011b      	lsls	r3, r3, #4
 801be44:	693a      	ldr	r2, [r7, #16]
 801be46:	4313      	orrs	r3, r2
 801be48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801be4a:	697b      	ldr	r3, [r7, #20]
 801be4c:	f023 030a 	bic.w	r3, r3, #10
 801be50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801be52:	697a      	ldr	r2, [r7, #20]
 801be54:	68bb      	ldr	r3, [r7, #8]
 801be56:	4313      	orrs	r3, r2
 801be58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801be5a:	68fb      	ldr	r3, [r7, #12]
 801be5c:	693a      	ldr	r2, [r7, #16]
 801be5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801be60:	68fb      	ldr	r3, [r7, #12]
 801be62:	697a      	ldr	r2, [r7, #20]
 801be64:	621a      	str	r2, [r3, #32]
}
 801be66:	bf00      	nop
 801be68:	371c      	adds	r7, #28
 801be6a:	46bd      	mov	sp, r7
 801be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be70:	4770      	bx	lr

0801be72 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801be72:	b480      	push	{r7}
 801be74:	b087      	sub	sp, #28
 801be76:	af00      	add	r7, sp, #0
 801be78:	60f8      	str	r0, [r7, #12]
 801be7a:	60b9      	str	r1, [r7, #8]
 801be7c:	607a      	str	r2, [r7, #4]
 801be7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801be80:	68fb      	ldr	r3, [r7, #12]
 801be82:	6a1b      	ldr	r3, [r3, #32]
 801be84:	f023 0210 	bic.w	r2, r3, #16
 801be88:	68fb      	ldr	r3, [r7, #12]
 801be8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801be8c:	68fb      	ldr	r3, [r7, #12]
 801be8e:	699b      	ldr	r3, [r3, #24]
 801be90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801be92:	68fb      	ldr	r3, [r7, #12]
 801be94:	6a1b      	ldr	r3, [r3, #32]
 801be96:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801be98:	697b      	ldr	r3, [r7, #20]
 801be9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801be9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	021b      	lsls	r3, r3, #8
 801bea4:	697a      	ldr	r2, [r7, #20]
 801bea6:	4313      	orrs	r3, r2
 801bea8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801beaa:	697b      	ldr	r3, [r7, #20]
 801beac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801beb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801beb2:	683b      	ldr	r3, [r7, #0]
 801beb4:	031b      	lsls	r3, r3, #12
 801beb6:	b29b      	uxth	r3, r3
 801beb8:	697a      	ldr	r2, [r7, #20]
 801beba:	4313      	orrs	r3, r2
 801bebc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801bebe:	693b      	ldr	r3, [r7, #16]
 801bec0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801bec4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801bec6:	68bb      	ldr	r3, [r7, #8]
 801bec8:	011b      	lsls	r3, r3, #4
 801beca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801bece:	693a      	ldr	r2, [r7, #16]
 801bed0:	4313      	orrs	r3, r2
 801bed2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801bed4:	68fb      	ldr	r3, [r7, #12]
 801bed6:	697a      	ldr	r2, [r7, #20]
 801bed8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801beda:	68fb      	ldr	r3, [r7, #12]
 801bedc:	693a      	ldr	r2, [r7, #16]
 801bede:	621a      	str	r2, [r3, #32]
}
 801bee0:	bf00      	nop
 801bee2:	371c      	adds	r7, #28
 801bee4:	46bd      	mov	sp, r7
 801bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beea:	4770      	bx	lr

0801beec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801beec:	b480      	push	{r7}
 801beee:	b087      	sub	sp, #28
 801bef0:	af00      	add	r7, sp, #0
 801bef2:	60f8      	str	r0, [r7, #12]
 801bef4:	60b9      	str	r1, [r7, #8]
 801bef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801bef8:	68fb      	ldr	r3, [r7, #12]
 801befa:	6a1b      	ldr	r3, [r3, #32]
 801befc:	f023 0210 	bic.w	r2, r3, #16
 801bf00:	68fb      	ldr	r3, [r7, #12]
 801bf02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801bf04:	68fb      	ldr	r3, [r7, #12]
 801bf06:	699b      	ldr	r3, [r3, #24]
 801bf08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801bf0a:	68fb      	ldr	r3, [r7, #12]
 801bf0c:	6a1b      	ldr	r3, [r3, #32]
 801bf0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801bf10:	697b      	ldr	r3, [r7, #20]
 801bf12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801bf16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	031b      	lsls	r3, r3, #12
 801bf1c:	697a      	ldr	r2, [r7, #20]
 801bf1e:	4313      	orrs	r3, r2
 801bf20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801bf22:	693b      	ldr	r3, [r7, #16]
 801bf24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801bf28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801bf2a:	68bb      	ldr	r3, [r7, #8]
 801bf2c:	011b      	lsls	r3, r3, #4
 801bf2e:	693a      	ldr	r2, [r7, #16]
 801bf30:	4313      	orrs	r3, r2
 801bf32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801bf34:	68fb      	ldr	r3, [r7, #12]
 801bf36:	697a      	ldr	r2, [r7, #20]
 801bf38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801bf3a:	68fb      	ldr	r3, [r7, #12]
 801bf3c:	693a      	ldr	r2, [r7, #16]
 801bf3e:	621a      	str	r2, [r3, #32]
}
 801bf40:	bf00      	nop
 801bf42:	371c      	adds	r7, #28
 801bf44:	46bd      	mov	sp, r7
 801bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf4a:	4770      	bx	lr

0801bf4c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801bf4c:	b480      	push	{r7}
 801bf4e:	b087      	sub	sp, #28
 801bf50:	af00      	add	r7, sp, #0
 801bf52:	60f8      	str	r0, [r7, #12]
 801bf54:	60b9      	str	r1, [r7, #8]
 801bf56:	607a      	str	r2, [r7, #4]
 801bf58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801bf5a:	68fb      	ldr	r3, [r7, #12]
 801bf5c:	6a1b      	ldr	r3, [r3, #32]
 801bf5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801bf62:	68fb      	ldr	r3, [r7, #12]
 801bf64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801bf66:	68fb      	ldr	r3, [r7, #12]
 801bf68:	69db      	ldr	r3, [r3, #28]
 801bf6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801bf6c:	68fb      	ldr	r3, [r7, #12]
 801bf6e:	6a1b      	ldr	r3, [r3, #32]
 801bf70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801bf72:	697b      	ldr	r3, [r7, #20]
 801bf74:	f023 0303 	bic.w	r3, r3, #3
 801bf78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 801bf7a:	697a      	ldr	r2, [r7, #20]
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	4313      	orrs	r3, r2
 801bf80:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 801bf82:	697b      	ldr	r3, [r7, #20]
 801bf84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801bf88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801bf8a:	683b      	ldr	r3, [r7, #0]
 801bf8c:	011b      	lsls	r3, r3, #4
 801bf8e:	b2db      	uxtb	r3, r3
 801bf90:	697a      	ldr	r2, [r7, #20]
 801bf92:	4313      	orrs	r3, r2
 801bf94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801bf96:	693b      	ldr	r3, [r7, #16]
 801bf98:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 801bf9c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801bf9e:	68bb      	ldr	r3, [r7, #8]
 801bfa0:	021b      	lsls	r3, r3, #8
 801bfa2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 801bfa6:	693a      	ldr	r2, [r7, #16]
 801bfa8:	4313      	orrs	r3, r2
 801bfaa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801bfac:	68fb      	ldr	r3, [r7, #12]
 801bfae:	697a      	ldr	r2, [r7, #20]
 801bfb0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801bfb2:	68fb      	ldr	r3, [r7, #12]
 801bfb4:	693a      	ldr	r2, [r7, #16]
 801bfb6:	621a      	str	r2, [r3, #32]
}
 801bfb8:	bf00      	nop
 801bfba:	371c      	adds	r7, #28
 801bfbc:	46bd      	mov	sp, r7
 801bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfc2:	4770      	bx	lr

0801bfc4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801bfc4:	b480      	push	{r7}
 801bfc6:	b087      	sub	sp, #28
 801bfc8:	af00      	add	r7, sp, #0
 801bfca:	60f8      	str	r0, [r7, #12]
 801bfcc:	60b9      	str	r1, [r7, #8]
 801bfce:	607a      	str	r2, [r7, #4]
 801bfd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801bfd2:	68fb      	ldr	r3, [r7, #12]
 801bfd4:	6a1b      	ldr	r3, [r3, #32]
 801bfd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801bfda:	68fb      	ldr	r3, [r7, #12]
 801bfdc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801bfde:	68fb      	ldr	r3, [r7, #12]
 801bfe0:	69db      	ldr	r3, [r3, #28]
 801bfe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801bfe4:	68fb      	ldr	r3, [r7, #12]
 801bfe6:	6a1b      	ldr	r3, [r3, #32]
 801bfe8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801bfea:	697b      	ldr	r3, [r7, #20]
 801bfec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801bff0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	021b      	lsls	r3, r3, #8
 801bff6:	697a      	ldr	r2, [r7, #20]
 801bff8:	4313      	orrs	r3, r2
 801bffa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 801bffc:	697b      	ldr	r3, [r7, #20]
 801bffe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801c002:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801c004:	683b      	ldr	r3, [r7, #0]
 801c006:	031b      	lsls	r3, r3, #12
 801c008:	b29b      	uxth	r3, r3
 801c00a:	697a      	ldr	r2, [r7, #20]
 801c00c:	4313      	orrs	r3, r2
 801c00e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801c010:	693b      	ldr	r3, [r7, #16]
 801c012:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801c016:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801c018:	68bb      	ldr	r3, [r7, #8]
 801c01a:	031b      	lsls	r3, r3, #12
 801c01c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 801c020:	693a      	ldr	r2, [r7, #16]
 801c022:	4313      	orrs	r3, r2
 801c024:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801c026:	68fb      	ldr	r3, [r7, #12]
 801c028:	697a      	ldr	r2, [r7, #20]
 801c02a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801c02c:	68fb      	ldr	r3, [r7, #12]
 801c02e:	693a      	ldr	r2, [r7, #16]
 801c030:	621a      	str	r2, [r3, #32]
}
 801c032:	bf00      	nop
 801c034:	371c      	adds	r7, #28
 801c036:	46bd      	mov	sp, r7
 801c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c03c:	4770      	bx	lr

0801c03e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801c03e:	b480      	push	{r7}
 801c040:	b085      	sub	sp, #20
 801c042:	af00      	add	r7, sp, #0
 801c044:	6078      	str	r0, [r7, #4]
 801c046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801c048:	687b      	ldr	r3, [r7, #4]
 801c04a:	689b      	ldr	r3, [r3, #8]
 801c04c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801c04e:	68fb      	ldr	r3, [r7, #12]
 801c050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801c056:	683a      	ldr	r2, [r7, #0]
 801c058:	68fb      	ldr	r3, [r7, #12]
 801c05a:	4313      	orrs	r3, r2
 801c05c:	f043 0307 	orr.w	r3, r3, #7
 801c060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801c062:	687b      	ldr	r3, [r7, #4]
 801c064:	68fa      	ldr	r2, [r7, #12]
 801c066:	609a      	str	r2, [r3, #8]
}
 801c068:	bf00      	nop
 801c06a:	3714      	adds	r7, #20
 801c06c:	46bd      	mov	sp, r7
 801c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c072:	4770      	bx	lr

0801c074 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801c074:	b480      	push	{r7}
 801c076:	b087      	sub	sp, #28
 801c078:	af00      	add	r7, sp, #0
 801c07a:	60f8      	str	r0, [r7, #12]
 801c07c:	60b9      	str	r1, [r7, #8]
 801c07e:	607a      	str	r2, [r7, #4]
 801c080:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801c082:	68fb      	ldr	r3, [r7, #12]
 801c084:	689b      	ldr	r3, [r3, #8]
 801c086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801c088:	697b      	ldr	r3, [r7, #20]
 801c08a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801c08e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801c090:	683b      	ldr	r3, [r7, #0]
 801c092:	021a      	lsls	r2, r3, #8
 801c094:	687b      	ldr	r3, [r7, #4]
 801c096:	431a      	orrs	r2, r3
 801c098:	68bb      	ldr	r3, [r7, #8]
 801c09a:	4313      	orrs	r3, r2
 801c09c:	697a      	ldr	r2, [r7, #20]
 801c09e:	4313      	orrs	r3, r2
 801c0a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801c0a2:	68fb      	ldr	r3, [r7, #12]
 801c0a4:	697a      	ldr	r2, [r7, #20]
 801c0a6:	609a      	str	r2, [r3, #8]
}
 801c0a8:	bf00      	nop
 801c0aa:	371c      	adds	r7, #28
 801c0ac:	46bd      	mov	sp, r7
 801c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0b2:	4770      	bx	lr

0801c0b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801c0b4:	b480      	push	{r7}
 801c0b6:	b087      	sub	sp, #28
 801c0b8:	af00      	add	r7, sp, #0
 801c0ba:	60f8      	str	r0, [r7, #12]
 801c0bc:	60b9      	str	r1, [r7, #8]
 801c0be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801c0c0:	68bb      	ldr	r3, [r7, #8]
 801c0c2:	f003 031f 	and.w	r3, r3, #31
 801c0c6:	2201      	movs	r2, #1
 801c0c8:	fa02 f303 	lsl.w	r3, r2, r3
 801c0cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801c0ce:	68fb      	ldr	r3, [r7, #12]
 801c0d0:	6a1a      	ldr	r2, [r3, #32]
 801c0d2:	697b      	ldr	r3, [r7, #20]
 801c0d4:	43db      	mvns	r3, r3
 801c0d6:	401a      	ands	r2, r3
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801c0dc:	68fb      	ldr	r3, [r7, #12]
 801c0de:	6a1a      	ldr	r2, [r3, #32]
 801c0e0:	68bb      	ldr	r3, [r7, #8]
 801c0e2:	f003 031f 	and.w	r3, r3, #31
 801c0e6:	6879      	ldr	r1, [r7, #4]
 801c0e8:	fa01 f303 	lsl.w	r3, r1, r3
 801c0ec:	431a      	orrs	r2, r3
 801c0ee:	68fb      	ldr	r3, [r7, #12]
 801c0f0:	621a      	str	r2, [r3, #32]
}
 801c0f2:	bf00      	nop
 801c0f4:	371c      	adds	r7, #28
 801c0f6:	46bd      	mov	sp, r7
 801c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0fc:	4770      	bx	lr
	...

0801c100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801c100:	b480      	push	{r7}
 801c102:	b085      	sub	sp, #20
 801c104:	af00      	add	r7, sp, #0
 801c106:	6078      	str	r0, [r7, #4]
 801c108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801c110:	2b01      	cmp	r3, #1
 801c112:	d101      	bne.n	801c118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801c114:	2302      	movs	r3, #2
 801c116:	e050      	b.n	801c1ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	2201      	movs	r2, #1
 801c11c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	2202      	movs	r2, #2
 801c124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801c128:	687b      	ldr	r3, [r7, #4]
 801c12a:	681b      	ldr	r3, [r3, #0]
 801c12c:	685b      	ldr	r3, [r3, #4]
 801c12e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	681b      	ldr	r3, [r3, #0]
 801c134:	689b      	ldr	r3, [r3, #8]
 801c136:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801c138:	68fb      	ldr	r3, [r7, #12]
 801c13a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c13e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801c140:	683b      	ldr	r3, [r7, #0]
 801c142:	681b      	ldr	r3, [r3, #0]
 801c144:	68fa      	ldr	r2, [r7, #12]
 801c146:	4313      	orrs	r3, r2
 801c148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801c14a:	687b      	ldr	r3, [r7, #4]
 801c14c:	681b      	ldr	r3, [r3, #0]
 801c14e:	68fa      	ldr	r2, [r7, #12]
 801c150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	681b      	ldr	r3, [r3, #0]
 801c156:	4a1c      	ldr	r2, [pc, #112]	; (801c1c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801c158:	4293      	cmp	r3, r2
 801c15a:	d018      	beq.n	801c18e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c164:	d013      	beq.n	801c18e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	681b      	ldr	r3, [r3, #0]
 801c16a:	4a18      	ldr	r2, [pc, #96]	; (801c1cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801c16c:	4293      	cmp	r3, r2
 801c16e:	d00e      	beq.n	801c18e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	681b      	ldr	r3, [r3, #0]
 801c174:	4a16      	ldr	r2, [pc, #88]	; (801c1d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801c176:	4293      	cmp	r3, r2
 801c178:	d009      	beq.n	801c18e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	4a15      	ldr	r2, [pc, #84]	; (801c1d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801c180:	4293      	cmp	r3, r2
 801c182:	d004      	beq.n	801c18e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801c184:	687b      	ldr	r3, [r7, #4]
 801c186:	681b      	ldr	r3, [r3, #0]
 801c188:	4a13      	ldr	r2, [pc, #76]	; (801c1d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801c18a:	4293      	cmp	r3, r2
 801c18c:	d10c      	bne.n	801c1a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801c18e:	68bb      	ldr	r3, [r7, #8]
 801c190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801c194:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801c196:	683b      	ldr	r3, [r7, #0]
 801c198:	685b      	ldr	r3, [r3, #4]
 801c19a:	68ba      	ldr	r2, [r7, #8]
 801c19c:	4313      	orrs	r3, r2
 801c19e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	681b      	ldr	r3, [r3, #0]
 801c1a4:	68ba      	ldr	r2, [r7, #8]
 801c1a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801c1a8:	687b      	ldr	r3, [r7, #4]
 801c1aa:	2201      	movs	r2, #1
 801c1ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801c1b0:	687b      	ldr	r3, [r7, #4]
 801c1b2:	2200      	movs	r2, #0
 801c1b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801c1b8:	2300      	movs	r3, #0
}
 801c1ba:	4618      	mov	r0, r3
 801c1bc:	3714      	adds	r7, #20
 801c1be:	46bd      	mov	sp, r7
 801c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1c4:	4770      	bx	lr
 801c1c6:	bf00      	nop
 801c1c8:	40010000 	.word	0x40010000
 801c1cc:	40000400 	.word	0x40000400
 801c1d0:	40000800 	.word	0x40000800
 801c1d4:	40000c00 	.word	0x40000c00
 801c1d8:	40014000 	.word	0x40014000

0801c1dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801c1dc:	b480      	push	{r7}
 801c1de:	b083      	sub	sp, #12
 801c1e0:	af00      	add	r7, sp, #0
 801c1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801c1e4:	bf00      	nop
 801c1e6:	370c      	adds	r7, #12
 801c1e8:	46bd      	mov	sp, r7
 801c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1ee:	4770      	bx	lr

0801c1f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801c1f0:	b480      	push	{r7}
 801c1f2:	b083      	sub	sp, #12
 801c1f4:	af00      	add	r7, sp, #0
 801c1f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801c1f8:	bf00      	nop
 801c1fa:	370c      	adds	r7, #12
 801c1fc:	46bd      	mov	sp, r7
 801c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c202:	4770      	bx	lr

0801c204 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801c204:	b580      	push	{r7, lr}
 801c206:	b082      	sub	sp, #8
 801c208:	af00      	add	r7, sp, #0
 801c20a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	2b00      	cmp	r3, #0
 801c210:	d101      	bne.n	801c216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801c212:	2301      	movs	r3, #1
 801c214:	e03f      	b.n	801c296 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801c216:	687b      	ldr	r3, [r7, #4]
 801c218:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801c21c:	b2db      	uxtb	r3, r3
 801c21e:	2b00      	cmp	r3, #0
 801c220:	d106      	bne.n	801c230 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	2200      	movs	r2, #0
 801c226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801c22a:	6878      	ldr	r0, [r7, #4]
 801c22c:	f7f9 f882 	bl	8015334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	2224      	movs	r2, #36	; 0x24
 801c234:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	681b      	ldr	r3, [r3, #0]
 801c23c:	68da      	ldr	r2, [r3, #12]
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	681b      	ldr	r3, [r3, #0]
 801c242:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801c246:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801c248:	6878      	ldr	r0, [r7, #4]
 801c24a:	f000 fc6d 	bl	801cb28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	691a      	ldr	r2, [r3, #16]
 801c254:	687b      	ldr	r3, [r7, #4]
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801c25c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	695a      	ldr	r2, [r3, #20]
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	681b      	ldr	r3, [r3, #0]
 801c268:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801c26c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	681b      	ldr	r3, [r3, #0]
 801c272:	68da      	ldr	r2, [r3, #12]
 801c274:	687b      	ldr	r3, [r7, #4]
 801c276:	681b      	ldr	r3, [r3, #0]
 801c278:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801c27c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	2200      	movs	r2, #0
 801c282:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 801c284:	687b      	ldr	r3, [r7, #4]
 801c286:	2220      	movs	r2, #32
 801c288:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	2220      	movs	r2, #32
 801c290:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 801c294:	2300      	movs	r3, #0
}
 801c296:	4618      	mov	r0, r3
 801c298:	3708      	adds	r7, #8
 801c29a:	46bd      	mov	sp, r7
 801c29c:	bd80      	pop	{r7, pc}

0801c29e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c29e:	b580      	push	{r7, lr}
 801c2a0:	b088      	sub	sp, #32
 801c2a2:	af02      	add	r7, sp, #8
 801c2a4:	60f8      	str	r0, [r7, #12]
 801c2a6:	60b9      	str	r1, [r7, #8]
 801c2a8:	603b      	str	r3, [r7, #0]
 801c2aa:	4613      	mov	r3, r2
 801c2ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 801c2ae:	2300      	movs	r3, #0
 801c2b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801c2b2:	68fb      	ldr	r3, [r7, #12]
 801c2b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801c2b8:	b2db      	uxtb	r3, r3
 801c2ba:	2b20      	cmp	r3, #32
 801c2bc:	f040 8083 	bne.w	801c3c6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 801c2c0:	68bb      	ldr	r3, [r7, #8]
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	d002      	beq.n	801c2cc <HAL_UART_Transmit+0x2e>
 801c2c6:	88fb      	ldrh	r3, [r7, #6]
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d101      	bne.n	801c2d0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 801c2cc:	2301      	movs	r3, #1
 801c2ce:	e07b      	b.n	801c3c8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801c2d0:	68fb      	ldr	r3, [r7, #12]
 801c2d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801c2d6:	2b01      	cmp	r3, #1
 801c2d8:	d101      	bne.n	801c2de <HAL_UART_Transmit+0x40>
 801c2da:	2302      	movs	r3, #2
 801c2dc:	e074      	b.n	801c3c8 <HAL_UART_Transmit+0x12a>
 801c2de:	68fb      	ldr	r3, [r7, #12]
 801c2e0:	2201      	movs	r2, #1
 801c2e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c2e6:	68fb      	ldr	r3, [r7, #12]
 801c2e8:	2200      	movs	r2, #0
 801c2ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801c2ec:	68fb      	ldr	r3, [r7, #12]
 801c2ee:	2221      	movs	r2, #33	; 0x21
 801c2f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 801c2f4:	f7f9 f996 	bl	8015624 <HAL_GetTick>
 801c2f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801c2fa:	68fb      	ldr	r3, [r7, #12]
 801c2fc:	88fa      	ldrh	r2, [r7, #6]
 801c2fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801c300:	68fb      	ldr	r3, [r7, #12]
 801c302:	88fa      	ldrh	r2, [r7, #6]
 801c304:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801c306:	68fb      	ldr	r3, [r7, #12]
 801c308:	2200      	movs	r2, #0
 801c30a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 801c30e:	e042      	b.n	801c396 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 801c310:	68fb      	ldr	r3, [r7, #12]
 801c312:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801c314:	b29b      	uxth	r3, r3
 801c316:	3b01      	subs	r3, #1
 801c318:	b29a      	uxth	r2, r3
 801c31a:	68fb      	ldr	r3, [r7, #12]
 801c31c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801c31e:	68fb      	ldr	r3, [r7, #12]
 801c320:	689b      	ldr	r3, [r3, #8]
 801c322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c326:	d122      	bne.n	801c36e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801c328:	683b      	ldr	r3, [r7, #0]
 801c32a:	9300      	str	r3, [sp, #0]
 801c32c:	697b      	ldr	r3, [r7, #20]
 801c32e:	2200      	movs	r2, #0
 801c330:	2180      	movs	r1, #128	; 0x80
 801c332:	68f8      	ldr	r0, [r7, #12]
 801c334:	f000 fa76 	bl	801c824 <UART_WaitOnFlagUntilTimeout>
 801c338:	4603      	mov	r3, r0
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d001      	beq.n	801c342 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 801c33e:	2303      	movs	r3, #3
 801c340:	e042      	b.n	801c3c8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 801c342:	68bb      	ldr	r3, [r7, #8]
 801c344:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 801c346:	693b      	ldr	r3, [r7, #16]
 801c348:	881b      	ldrh	r3, [r3, #0]
 801c34a:	461a      	mov	r2, r3
 801c34c:	68fb      	ldr	r3, [r7, #12]
 801c34e:	681b      	ldr	r3, [r3, #0]
 801c350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801c354:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 801c356:	68fb      	ldr	r3, [r7, #12]
 801c358:	691b      	ldr	r3, [r3, #16]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d103      	bne.n	801c366 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 801c35e:	68bb      	ldr	r3, [r7, #8]
 801c360:	3302      	adds	r3, #2
 801c362:	60bb      	str	r3, [r7, #8]
 801c364:	e017      	b.n	801c396 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 801c366:	68bb      	ldr	r3, [r7, #8]
 801c368:	3301      	adds	r3, #1
 801c36a:	60bb      	str	r3, [r7, #8]
 801c36c:	e013      	b.n	801c396 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801c36e:	683b      	ldr	r3, [r7, #0]
 801c370:	9300      	str	r3, [sp, #0]
 801c372:	697b      	ldr	r3, [r7, #20]
 801c374:	2200      	movs	r2, #0
 801c376:	2180      	movs	r1, #128	; 0x80
 801c378:	68f8      	ldr	r0, [r7, #12]
 801c37a:	f000 fa53 	bl	801c824 <UART_WaitOnFlagUntilTimeout>
 801c37e:	4603      	mov	r3, r0
 801c380:	2b00      	cmp	r3, #0
 801c382:	d001      	beq.n	801c388 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 801c384:	2303      	movs	r3, #3
 801c386:	e01f      	b.n	801c3c8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 801c388:	68bb      	ldr	r3, [r7, #8]
 801c38a:	1c5a      	adds	r2, r3, #1
 801c38c:	60ba      	str	r2, [r7, #8]
 801c38e:	781a      	ldrb	r2, [r3, #0]
 801c390:	68fb      	ldr	r3, [r7, #12]
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801c39a:	b29b      	uxth	r3, r3
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	d1b7      	bne.n	801c310 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801c3a0:	683b      	ldr	r3, [r7, #0]
 801c3a2:	9300      	str	r3, [sp, #0]
 801c3a4:	697b      	ldr	r3, [r7, #20]
 801c3a6:	2200      	movs	r2, #0
 801c3a8:	2140      	movs	r1, #64	; 0x40
 801c3aa:	68f8      	ldr	r0, [r7, #12]
 801c3ac:	f000 fa3a 	bl	801c824 <UART_WaitOnFlagUntilTimeout>
 801c3b0:	4603      	mov	r3, r0
 801c3b2:	2b00      	cmp	r3, #0
 801c3b4:	d001      	beq.n	801c3ba <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 801c3b6:	2303      	movs	r3, #3
 801c3b8:	e006      	b.n	801c3c8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801c3ba:	68fb      	ldr	r3, [r7, #12]
 801c3bc:	2220      	movs	r2, #32
 801c3be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 801c3c2:	2300      	movs	r3, #0
 801c3c4:	e000      	b.n	801c3c8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 801c3c6:	2302      	movs	r3, #2
  }
}
 801c3c8:	4618      	mov	r0, r3
 801c3ca:	3718      	adds	r7, #24
 801c3cc:	46bd      	mov	sp, r7
 801c3ce:	bd80      	pop	{r7, pc}

0801c3d0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c3d0:	b580      	push	{r7, lr}
 801c3d2:	b086      	sub	sp, #24
 801c3d4:	af00      	add	r7, sp, #0
 801c3d6:	60f8      	str	r0, [r7, #12]
 801c3d8:	60b9      	str	r1, [r7, #8]
 801c3da:	4613      	mov	r3, r2
 801c3dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801c3de:	68fb      	ldr	r3, [r7, #12]
 801c3e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801c3e4:	b2db      	uxtb	r3, r3
 801c3e6:	2b20      	cmp	r3, #32
 801c3e8:	d166      	bne.n	801c4b8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 801c3ea:	68bb      	ldr	r3, [r7, #8]
 801c3ec:	2b00      	cmp	r3, #0
 801c3ee:	d002      	beq.n	801c3f6 <HAL_UART_Receive_DMA+0x26>
 801c3f0:	88fb      	ldrh	r3, [r7, #6]
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	d101      	bne.n	801c3fa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801c3f6:	2301      	movs	r3, #1
 801c3f8:	e05f      	b.n	801c4ba <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801c3fa:	68fb      	ldr	r3, [r7, #12]
 801c3fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801c400:	2b01      	cmp	r3, #1
 801c402:	d101      	bne.n	801c408 <HAL_UART_Receive_DMA+0x38>
 801c404:	2302      	movs	r3, #2
 801c406:	e058      	b.n	801c4ba <HAL_UART_Receive_DMA+0xea>
 801c408:	68fb      	ldr	r3, [r7, #12]
 801c40a:	2201      	movs	r2, #1
 801c40c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 801c410:	68ba      	ldr	r2, [r7, #8]
 801c412:	68fb      	ldr	r3, [r7, #12]
 801c414:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 801c416:	68fb      	ldr	r3, [r7, #12]
 801c418:	88fa      	ldrh	r2, [r7, #6]
 801c41a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c41c:	68fb      	ldr	r3, [r7, #12]
 801c41e:	2200      	movs	r2, #0
 801c420:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801c422:	68fb      	ldr	r3, [r7, #12]
 801c424:	2222      	movs	r2, #34	; 0x22
 801c426:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801c42a:	68fb      	ldr	r3, [r7, #12]
 801c42c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c42e:	4a25      	ldr	r2, [pc, #148]	; (801c4c4 <HAL_UART_Receive_DMA+0xf4>)
 801c430:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801c432:	68fb      	ldr	r3, [r7, #12]
 801c434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c436:	4a24      	ldr	r2, [pc, #144]	; (801c4c8 <HAL_UART_Receive_DMA+0xf8>)
 801c438:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801c43a:	68fb      	ldr	r3, [r7, #12]
 801c43c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c43e:	4a23      	ldr	r2, [pc, #140]	; (801c4cc <HAL_UART_Receive_DMA+0xfc>)
 801c440:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801c442:	68fb      	ldr	r3, [r7, #12]
 801c444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c446:	2200      	movs	r2, #0
 801c448:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 801c44a:	f107 0308 	add.w	r3, r7, #8
 801c44e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801c450:	68fb      	ldr	r3, [r7, #12]
 801c452:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801c454:	68fb      	ldr	r3, [r7, #12]
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	3304      	adds	r3, #4
 801c45a:	4619      	mov	r1, r3
 801c45c:	697b      	ldr	r3, [r7, #20]
 801c45e:	681a      	ldr	r2, [r3, #0]
 801c460:	88fb      	ldrh	r3, [r7, #6]
 801c462:	f7f9 fa9d 	bl	80159a0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 801c466:	2300      	movs	r3, #0
 801c468:	613b      	str	r3, [r7, #16]
 801c46a:	68fb      	ldr	r3, [r7, #12]
 801c46c:	681b      	ldr	r3, [r3, #0]
 801c46e:	681b      	ldr	r3, [r3, #0]
 801c470:	613b      	str	r3, [r7, #16]
 801c472:	68fb      	ldr	r3, [r7, #12]
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	685b      	ldr	r3, [r3, #4]
 801c478:	613b      	str	r3, [r7, #16]
 801c47a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	2200      	movs	r2, #0
 801c480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c484:	68fb      	ldr	r3, [r7, #12]
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	68da      	ldr	r2, [r3, #12]
 801c48a:	68fb      	ldr	r3, [r7, #12]
 801c48c:	681b      	ldr	r3, [r3, #0]
 801c48e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801c492:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c494:	68fb      	ldr	r3, [r7, #12]
 801c496:	681b      	ldr	r3, [r3, #0]
 801c498:	695a      	ldr	r2, [r3, #20]
 801c49a:	68fb      	ldr	r3, [r7, #12]
 801c49c:	681b      	ldr	r3, [r3, #0]
 801c49e:	f042 0201 	orr.w	r2, r2, #1
 801c4a2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c4a4:	68fb      	ldr	r3, [r7, #12]
 801c4a6:	681b      	ldr	r3, [r3, #0]
 801c4a8:	695a      	ldr	r2, [r3, #20]
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	681b      	ldr	r3, [r3, #0]
 801c4ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c4b2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 801c4b4:	2300      	movs	r3, #0
 801c4b6:	e000      	b.n	801c4ba <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 801c4b8:	2302      	movs	r3, #2
  }
}
 801c4ba:	4618      	mov	r0, r3
 801c4bc:	3718      	adds	r7, #24
 801c4be:	46bd      	mov	sp, r7
 801c4c0:	bd80      	pop	{r7, pc}
 801c4c2:	bf00      	nop
 801c4c4:	0801c70d 	.word	0x0801c70d
 801c4c8:	0801c775 	.word	0x0801c775
 801c4cc:	0801c791 	.word	0x0801c791

0801c4d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801c4d0:	b580      	push	{r7, lr}
 801c4d2:	b088      	sub	sp, #32
 801c4d4:	af00      	add	r7, sp, #0
 801c4d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	681b      	ldr	r3, [r3, #0]
 801c4dc:	681b      	ldr	r3, [r3, #0]
 801c4de:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	681b      	ldr	r3, [r3, #0]
 801c4e4:	68db      	ldr	r3, [r3, #12]
 801c4e6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	695b      	ldr	r3, [r3, #20]
 801c4ee:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 801c4f0:	2300      	movs	r3, #0
 801c4f2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 801c4f4:	2300      	movs	r3, #0
 801c4f6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801c4f8:	69fb      	ldr	r3, [r7, #28]
 801c4fa:	f003 030f 	and.w	r3, r3, #15
 801c4fe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 801c500:	693b      	ldr	r3, [r7, #16]
 801c502:	2b00      	cmp	r3, #0
 801c504:	d10d      	bne.n	801c522 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801c506:	69fb      	ldr	r3, [r7, #28]
 801c508:	f003 0320 	and.w	r3, r3, #32
 801c50c:	2b00      	cmp	r3, #0
 801c50e:	d008      	beq.n	801c522 <HAL_UART_IRQHandler+0x52>
 801c510:	69bb      	ldr	r3, [r7, #24]
 801c512:	f003 0320 	and.w	r3, r3, #32
 801c516:	2b00      	cmp	r3, #0
 801c518:	d003      	beq.n	801c522 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 801c51a:	6878      	ldr	r0, [r7, #4]
 801c51c:	f000 fa82 	bl	801ca24 <UART_Receive_IT>
      return;
 801c520:	e0d1      	b.n	801c6c6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801c522:	693b      	ldr	r3, [r7, #16]
 801c524:	2b00      	cmp	r3, #0
 801c526:	f000 80b0 	beq.w	801c68a <HAL_UART_IRQHandler+0x1ba>
 801c52a:	697b      	ldr	r3, [r7, #20]
 801c52c:	f003 0301 	and.w	r3, r3, #1
 801c530:	2b00      	cmp	r3, #0
 801c532:	d105      	bne.n	801c540 <HAL_UART_IRQHandler+0x70>
 801c534:	69bb      	ldr	r3, [r7, #24]
 801c536:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	f000 80a5 	beq.w	801c68a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801c540:	69fb      	ldr	r3, [r7, #28]
 801c542:	f003 0301 	and.w	r3, r3, #1
 801c546:	2b00      	cmp	r3, #0
 801c548:	d00a      	beq.n	801c560 <HAL_UART_IRQHandler+0x90>
 801c54a:	69bb      	ldr	r3, [r7, #24]
 801c54c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c550:	2b00      	cmp	r3, #0
 801c552:	d005      	beq.n	801c560 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c558:	f043 0201 	orr.w	r2, r3, #1
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801c560:	69fb      	ldr	r3, [r7, #28]
 801c562:	f003 0304 	and.w	r3, r3, #4
 801c566:	2b00      	cmp	r3, #0
 801c568:	d00a      	beq.n	801c580 <HAL_UART_IRQHandler+0xb0>
 801c56a:	697b      	ldr	r3, [r7, #20]
 801c56c:	f003 0301 	and.w	r3, r3, #1
 801c570:	2b00      	cmp	r3, #0
 801c572:	d005      	beq.n	801c580 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c578:	f043 0202 	orr.w	r2, r3, #2
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801c580:	69fb      	ldr	r3, [r7, #28]
 801c582:	f003 0302 	and.w	r3, r3, #2
 801c586:	2b00      	cmp	r3, #0
 801c588:	d00a      	beq.n	801c5a0 <HAL_UART_IRQHandler+0xd0>
 801c58a:	697b      	ldr	r3, [r7, #20]
 801c58c:	f003 0301 	and.w	r3, r3, #1
 801c590:	2b00      	cmp	r3, #0
 801c592:	d005      	beq.n	801c5a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801c594:	687b      	ldr	r3, [r7, #4]
 801c596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c598:	f043 0204 	orr.w	r2, r3, #4
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 801c5a0:	69fb      	ldr	r3, [r7, #28]
 801c5a2:	f003 0308 	and.w	r3, r3, #8
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	d00f      	beq.n	801c5ca <HAL_UART_IRQHandler+0xfa>
 801c5aa:	69bb      	ldr	r3, [r7, #24]
 801c5ac:	f003 0320 	and.w	r3, r3, #32
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d104      	bne.n	801c5be <HAL_UART_IRQHandler+0xee>
 801c5b4:	697b      	ldr	r3, [r7, #20]
 801c5b6:	f003 0301 	and.w	r3, r3, #1
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d005      	beq.n	801c5ca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c5c2:	f043 0208 	orr.w	r2, r3, #8
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c5ce:	2b00      	cmp	r3, #0
 801c5d0:	d078      	beq.n	801c6c4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801c5d2:	69fb      	ldr	r3, [r7, #28]
 801c5d4:	f003 0320 	and.w	r3, r3, #32
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d007      	beq.n	801c5ec <HAL_UART_IRQHandler+0x11c>
 801c5dc:	69bb      	ldr	r3, [r7, #24]
 801c5de:	f003 0320 	and.w	r3, r3, #32
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	d002      	beq.n	801c5ec <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 801c5e6:	6878      	ldr	r0, [r7, #4]
 801c5e8:	f000 fa1c 	bl	801ca24 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	681b      	ldr	r3, [r3, #0]
 801c5f0:	695b      	ldr	r3, [r3, #20]
 801c5f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c5f6:	2b40      	cmp	r3, #64	; 0x40
 801c5f8:	bf0c      	ite	eq
 801c5fa:	2301      	moveq	r3, #1
 801c5fc:	2300      	movne	r3, #0
 801c5fe:	b2db      	uxtb	r3, r3
 801c600:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c606:	f003 0308 	and.w	r3, r3, #8
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	d102      	bne.n	801c614 <HAL_UART_IRQHandler+0x144>
 801c60e:	68fb      	ldr	r3, [r7, #12]
 801c610:	2b00      	cmp	r3, #0
 801c612:	d031      	beq.n	801c678 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801c614:	6878      	ldr	r0, [r7, #4]
 801c616:	f000 f965 	bl	801c8e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	681b      	ldr	r3, [r3, #0]
 801c61e:	695b      	ldr	r3, [r3, #20]
 801c620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c624:	2b40      	cmp	r3, #64	; 0x40
 801c626:	d123      	bne.n	801c670 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c628:	687b      	ldr	r3, [r7, #4]
 801c62a:	681b      	ldr	r3, [r3, #0]
 801c62c:	695a      	ldr	r2, [r3, #20]
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	681b      	ldr	r3, [r3, #0]
 801c632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c636:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c63c:	2b00      	cmp	r3, #0
 801c63e:	d013      	beq.n	801c668 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c644:	4a21      	ldr	r2, [pc, #132]	; (801c6cc <HAL_UART_IRQHandler+0x1fc>)
 801c646:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c64c:	4618      	mov	r0, r3
 801c64e:	f7f9 f9ff 	bl	8015a50 <HAL_DMA_Abort_IT>
 801c652:	4603      	mov	r3, r0
 801c654:	2b00      	cmp	r3, #0
 801c656:	d016      	beq.n	801c686 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c65c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c65e:	687a      	ldr	r2, [r7, #4]
 801c660:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801c662:	4610      	mov	r0, r2
 801c664:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c666:	e00e      	b.n	801c686 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801c668:	6878      	ldr	r0, [r7, #4]
 801c66a:	f000 f845 	bl	801c6f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c66e:	e00a      	b.n	801c686 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801c670:	6878      	ldr	r0, [r7, #4]
 801c672:	f000 f841 	bl	801c6f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c676:	e006      	b.n	801c686 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801c678:	6878      	ldr	r0, [r7, #4]
 801c67a:	f000 f83d 	bl	801c6f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	2200      	movs	r2, #0
 801c682:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 801c684:	e01e      	b.n	801c6c4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c686:	bf00      	nop
    return;
 801c688:	e01c      	b.n	801c6c4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801c68a:	69fb      	ldr	r3, [r7, #28]
 801c68c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c690:	2b00      	cmp	r3, #0
 801c692:	d008      	beq.n	801c6a6 <HAL_UART_IRQHandler+0x1d6>
 801c694:	69bb      	ldr	r3, [r7, #24]
 801c696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c69a:	2b00      	cmp	r3, #0
 801c69c:	d003      	beq.n	801c6a6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 801c69e:	6878      	ldr	r0, [r7, #4]
 801c6a0:	f000 f952 	bl	801c948 <UART_Transmit_IT>
    return;
 801c6a4:	e00f      	b.n	801c6c6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801c6a6:	69fb      	ldr	r3, [r7, #28]
 801c6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	d00a      	beq.n	801c6c6 <HAL_UART_IRQHandler+0x1f6>
 801c6b0:	69bb      	ldr	r3, [r7, #24]
 801c6b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	d005      	beq.n	801c6c6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 801c6ba:	6878      	ldr	r0, [r7, #4]
 801c6bc:	f000 f99a 	bl	801c9f4 <UART_EndTransmit_IT>
    return;
 801c6c0:	bf00      	nop
 801c6c2:	e000      	b.n	801c6c6 <HAL_UART_IRQHandler+0x1f6>
    return;
 801c6c4:	bf00      	nop
  }
}
 801c6c6:	3720      	adds	r7, #32
 801c6c8:	46bd      	mov	sp, r7
 801c6ca:	bd80      	pop	{r7, pc}
 801c6cc:	0801c921 	.word	0x0801c921

0801c6d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801c6d0:	b480      	push	{r7}
 801c6d2:	b083      	sub	sp, #12
 801c6d4:	af00      	add	r7, sp, #0
 801c6d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801c6d8:	bf00      	nop
 801c6da:	370c      	adds	r7, #12
 801c6dc:	46bd      	mov	sp, r7
 801c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6e2:	4770      	bx	lr

0801c6e4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801c6e4:	b480      	push	{r7}
 801c6e6:	b083      	sub	sp, #12
 801c6e8:	af00      	add	r7, sp, #0
 801c6ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801c6ec:	bf00      	nop
 801c6ee:	370c      	adds	r7, #12
 801c6f0:	46bd      	mov	sp, r7
 801c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6f6:	4770      	bx	lr

0801c6f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801c6f8:	b480      	push	{r7}
 801c6fa:	b083      	sub	sp, #12
 801c6fc:	af00      	add	r7, sp, #0
 801c6fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801c700:	bf00      	nop
 801c702:	370c      	adds	r7, #12
 801c704:	46bd      	mov	sp, r7
 801c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c70a:	4770      	bx	lr

0801c70c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801c70c:	b580      	push	{r7, lr}
 801c70e:	b084      	sub	sp, #16
 801c710:	af00      	add	r7, sp, #0
 801c712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c718:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	681b      	ldr	r3, [r3, #0]
 801c71e:	681b      	ldr	r3, [r3, #0]
 801c720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c724:	2b00      	cmp	r3, #0
 801c726:	d11e      	bne.n	801c766 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 801c728:	68fb      	ldr	r3, [r7, #12]
 801c72a:	2200      	movs	r2, #0
 801c72c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	681b      	ldr	r3, [r3, #0]
 801c732:	68da      	ldr	r2, [r3, #12]
 801c734:	68fb      	ldr	r3, [r7, #12]
 801c736:	681b      	ldr	r3, [r3, #0]
 801c738:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801c73c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c73e:	68fb      	ldr	r3, [r7, #12]
 801c740:	681b      	ldr	r3, [r3, #0]
 801c742:	695a      	ldr	r2, [r3, #20]
 801c744:	68fb      	ldr	r3, [r7, #12]
 801c746:	681b      	ldr	r3, [r3, #0]
 801c748:	f022 0201 	bic.w	r2, r2, #1
 801c74c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c74e:	68fb      	ldr	r3, [r7, #12]
 801c750:	681b      	ldr	r3, [r3, #0]
 801c752:	695a      	ldr	r2, [r3, #20]
 801c754:	68fb      	ldr	r3, [r7, #12]
 801c756:	681b      	ldr	r3, [r3, #0]
 801c758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c75c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801c75e:	68fb      	ldr	r3, [r7, #12]
 801c760:	2220      	movs	r2, #32
 801c762:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 801c766:	68f8      	ldr	r0, [r7, #12]
 801c768:	f7f7 f96c 	bl	8013a44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c76c:	bf00      	nop
 801c76e:	3710      	adds	r7, #16
 801c770:	46bd      	mov	sp, r7
 801c772:	bd80      	pop	{r7, pc}

0801c774 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801c774:	b580      	push	{r7, lr}
 801c776:	b084      	sub	sp, #16
 801c778:	af00      	add	r7, sp, #0
 801c77a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c780:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 801c782:	68f8      	ldr	r0, [r7, #12]
 801c784:	f7ff ffae 	bl	801c6e4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c788:	bf00      	nop
 801c78a:	3710      	adds	r7, #16
 801c78c:	46bd      	mov	sp, r7
 801c78e:	bd80      	pop	{r7, pc}

0801c790 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801c790:	b580      	push	{r7, lr}
 801c792:	b084      	sub	sp, #16
 801c794:	af00      	add	r7, sp, #0
 801c796:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801c798:	2300      	movs	r3, #0
 801c79a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7a0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801c7a2:	68bb      	ldr	r3, [r7, #8]
 801c7a4:	681b      	ldr	r3, [r3, #0]
 801c7a6:	695b      	ldr	r3, [r3, #20]
 801c7a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c7ac:	2b80      	cmp	r3, #128	; 0x80
 801c7ae:	bf0c      	ite	eq
 801c7b0:	2301      	moveq	r3, #1
 801c7b2:	2300      	movne	r3, #0
 801c7b4:	b2db      	uxtb	r3, r3
 801c7b6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801c7b8:	68bb      	ldr	r3, [r7, #8]
 801c7ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801c7be:	b2db      	uxtb	r3, r3
 801c7c0:	2b21      	cmp	r3, #33	; 0x21
 801c7c2:	d108      	bne.n	801c7d6 <UART_DMAError+0x46>
 801c7c4:	68fb      	ldr	r3, [r7, #12]
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	d005      	beq.n	801c7d6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801c7ca:	68bb      	ldr	r3, [r7, #8]
 801c7cc:	2200      	movs	r2, #0
 801c7ce:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801c7d0:	68b8      	ldr	r0, [r7, #8]
 801c7d2:	f000 f871 	bl	801c8b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801c7d6:	68bb      	ldr	r3, [r7, #8]
 801c7d8:	681b      	ldr	r3, [r3, #0]
 801c7da:	695b      	ldr	r3, [r3, #20]
 801c7dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c7e0:	2b40      	cmp	r3, #64	; 0x40
 801c7e2:	bf0c      	ite	eq
 801c7e4:	2301      	moveq	r3, #1
 801c7e6:	2300      	movne	r3, #0
 801c7e8:	b2db      	uxtb	r3, r3
 801c7ea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801c7ec:	68bb      	ldr	r3, [r7, #8]
 801c7ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801c7f2:	b2db      	uxtb	r3, r3
 801c7f4:	2b22      	cmp	r3, #34	; 0x22
 801c7f6:	d108      	bne.n	801c80a <UART_DMAError+0x7a>
 801c7f8:	68fb      	ldr	r3, [r7, #12]
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d005      	beq.n	801c80a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801c7fe:	68bb      	ldr	r3, [r7, #8]
 801c800:	2200      	movs	r2, #0
 801c802:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801c804:	68b8      	ldr	r0, [r7, #8]
 801c806:	f000 f86d 	bl	801c8e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801c80a:	68bb      	ldr	r3, [r7, #8]
 801c80c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c80e:	f043 0210 	orr.w	r2, r3, #16
 801c812:	68bb      	ldr	r3, [r7, #8]
 801c814:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c816:	68b8      	ldr	r0, [r7, #8]
 801c818:	f7ff ff6e 	bl	801c6f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c81c:	bf00      	nop
 801c81e:	3710      	adds	r7, #16
 801c820:	46bd      	mov	sp, r7
 801c822:	bd80      	pop	{r7, pc}

0801c824 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 801c824:	b580      	push	{r7, lr}
 801c826:	b084      	sub	sp, #16
 801c828:	af00      	add	r7, sp, #0
 801c82a:	60f8      	str	r0, [r7, #12]
 801c82c:	60b9      	str	r1, [r7, #8]
 801c82e:	603b      	str	r3, [r7, #0]
 801c830:	4613      	mov	r3, r2
 801c832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c834:	e02c      	b.n	801c890 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c836:	69bb      	ldr	r3, [r7, #24]
 801c838:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c83c:	d028      	beq.n	801c890 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801c83e:	69bb      	ldr	r3, [r7, #24]
 801c840:	2b00      	cmp	r3, #0
 801c842:	d007      	beq.n	801c854 <UART_WaitOnFlagUntilTimeout+0x30>
 801c844:	f7f8 feee 	bl	8015624 <HAL_GetTick>
 801c848:	4602      	mov	r2, r0
 801c84a:	683b      	ldr	r3, [r7, #0]
 801c84c:	1ad3      	subs	r3, r2, r3
 801c84e:	69ba      	ldr	r2, [r7, #24]
 801c850:	429a      	cmp	r2, r3
 801c852:	d21d      	bcs.n	801c890 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c854:	68fb      	ldr	r3, [r7, #12]
 801c856:	681b      	ldr	r3, [r3, #0]
 801c858:	68da      	ldr	r2, [r3, #12]
 801c85a:	68fb      	ldr	r3, [r7, #12]
 801c85c:	681b      	ldr	r3, [r3, #0]
 801c85e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801c862:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	681b      	ldr	r3, [r3, #0]
 801c868:	695a      	ldr	r2, [r3, #20]
 801c86a:	68fb      	ldr	r3, [r7, #12]
 801c86c:	681b      	ldr	r3, [r3, #0]
 801c86e:	f022 0201 	bic.w	r2, r2, #1
 801c872:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 801c874:	68fb      	ldr	r3, [r7, #12]
 801c876:	2220      	movs	r2, #32
 801c878:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 801c87c:	68fb      	ldr	r3, [r7, #12]
 801c87e:	2220      	movs	r2, #32
 801c880:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801c884:	68fb      	ldr	r3, [r7, #12]
 801c886:	2200      	movs	r2, #0
 801c888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 801c88c:	2303      	movs	r3, #3
 801c88e:	e00f      	b.n	801c8b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c890:	68fb      	ldr	r3, [r7, #12]
 801c892:	681b      	ldr	r3, [r3, #0]
 801c894:	681a      	ldr	r2, [r3, #0]
 801c896:	68bb      	ldr	r3, [r7, #8]
 801c898:	4013      	ands	r3, r2
 801c89a:	68ba      	ldr	r2, [r7, #8]
 801c89c:	429a      	cmp	r2, r3
 801c89e:	bf0c      	ite	eq
 801c8a0:	2301      	moveq	r3, #1
 801c8a2:	2300      	movne	r3, #0
 801c8a4:	b2db      	uxtb	r3, r3
 801c8a6:	461a      	mov	r2, r3
 801c8a8:	79fb      	ldrb	r3, [r7, #7]
 801c8aa:	429a      	cmp	r2, r3
 801c8ac:	d0c3      	beq.n	801c836 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801c8ae:	2300      	movs	r3, #0
}
 801c8b0:	4618      	mov	r0, r3
 801c8b2:	3710      	adds	r7, #16
 801c8b4:	46bd      	mov	sp, r7
 801c8b6:	bd80      	pop	{r7, pc}

0801c8b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801c8b8:	b480      	push	{r7}
 801c8ba:	b083      	sub	sp, #12
 801c8bc:	af00      	add	r7, sp, #0
 801c8be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	681b      	ldr	r3, [r3, #0]
 801c8c4:	68da      	ldr	r2, [r3, #12]
 801c8c6:	687b      	ldr	r3, [r7, #4]
 801c8c8:	681b      	ldr	r3, [r3, #0]
 801c8ca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 801c8ce:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c8d0:	687b      	ldr	r3, [r7, #4]
 801c8d2:	2220      	movs	r2, #32
 801c8d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 801c8d8:	bf00      	nop
 801c8da:	370c      	adds	r7, #12
 801c8dc:	46bd      	mov	sp, r7
 801c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8e2:	4770      	bx	lr

0801c8e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c8e4:	b480      	push	{r7}
 801c8e6:	b083      	sub	sp, #12
 801c8e8:	af00      	add	r7, sp, #0
 801c8ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c8ec:	687b      	ldr	r3, [r7, #4]
 801c8ee:	681b      	ldr	r3, [r3, #0]
 801c8f0:	68da      	ldr	r2, [r3, #12]
 801c8f2:	687b      	ldr	r3, [r7, #4]
 801c8f4:	681b      	ldr	r3, [r3, #0]
 801c8f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801c8fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	681b      	ldr	r3, [r3, #0]
 801c900:	695a      	ldr	r2, [r3, #20]
 801c902:	687b      	ldr	r3, [r7, #4]
 801c904:	681b      	ldr	r3, [r3, #0]
 801c906:	f022 0201 	bic.w	r2, r2, #1
 801c90a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c90c:	687b      	ldr	r3, [r7, #4]
 801c90e:	2220      	movs	r2, #32
 801c910:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 801c914:	bf00      	nop
 801c916:	370c      	adds	r7, #12
 801c918:	46bd      	mov	sp, r7
 801c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c91e:	4770      	bx	lr

0801c920 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c920:	b580      	push	{r7, lr}
 801c922:	b084      	sub	sp, #16
 801c924:	af00      	add	r7, sp, #0
 801c926:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c92c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801c92e:	68fb      	ldr	r3, [r7, #12]
 801c930:	2200      	movs	r2, #0
 801c932:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801c934:	68fb      	ldr	r3, [r7, #12]
 801c936:	2200      	movs	r2, #0
 801c938:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c93a:	68f8      	ldr	r0, [r7, #12]
 801c93c:	f7ff fedc 	bl	801c6f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c940:	bf00      	nop
 801c942:	3710      	adds	r7, #16
 801c944:	46bd      	mov	sp, r7
 801c946:	bd80      	pop	{r7, pc}

0801c948 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801c948:	b480      	push	{r7}
 801c94a:	b085      	sub	sp, #20
 801c94c:	af00      	add	r7, sp, #0
 801c94e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801c950:	687b      	ldr	r3, [r7, #4]
 801c952:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801c956:	b2db      	uxtb	r3, r3
 801c958:	2b21      	cmp	r3, #33	; 0x21
 801c95a:	d144      	bne.n	801c9e6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	689b      	ldr	r3, [r3, #8]
 801c960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c964:	d11a      	bne.n	801c99c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	6a1b      	ldr	r3, [r3, #32]
 801c96a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801c96c:	68fb      	ldr	r3, [r7, #12]
 801c96e:	881b      	ldrh	r3, [r3, #0]
 801c970:	461a      	mov	r2, r3
 801c972:	687b      	ldr	r3, [r7, #4]
 801c974:	681b      	ldr	r3, [r3, #0]
 801c976:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801c97a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	691b      	ldr	r3, [r3, #16]
 801c980:	2b00      	cmp	r3, #0
 801c982:	d105      	bne.n	801c990 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	6a1b      	ldr	r3, [r3, #32]
 801c988:	1c9a      	adds	r2, r3, #2
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	621a      	str	r2, [r3, #32]
 801c98e:	e00e      	b.n	801c9ae <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	6a1b      	ldr	r3, [r3, #32]
 801c994:	1c5a      	adds	r2, r3, #1
 801c996:	687b      	ldr	r3, [r7, #4]
 801c998:	621a      	str	r2, [r3, #32]
 801c99a:	e008      	b.n	801c9ae <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	6a1b      	ldr	r3, [r3, #32]
 801c9a0:	1c59      	adds	r1, r3, #1
 801c9a2:	687a      	ldr	r2, [r7, #4]
 801c9a4:	6211      	str	r1, [r2, #32]
 801c9a6:	781a      	ldrb	r2, [r3, #0]
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	681b      	ldr	r3, [r3, #0]
 801c9ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801c9ae:	687b      	ldr	r3, [r7, #4]
 801c9b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801c9b2:	b29b      	uxth	r3, r3
 801c9b4:	3b01      	subs	r3, #1
 801c9b6:	b29b      	uxth	r3, r3
 801c9b8:	687a      	ldr	r2, [r7, #4]
 801c9ba:	4619      	mov	r1, r3
 801c9bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	d10f      	bne.n	801c9e2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801c9c2:	687b      	ldr	r3, [r7, #4]
 801c9c4:	681b      	ldr	r3, [r3, #0]
 801c9c6:	68da      	ldr	r2, [r3, #12]
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c9d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	681b      	ldr	r3, [r3, #0]
 801c9d6:	68da      	ldr	r2, [r3, #12]
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	681b      	ldr	r3, [r3, #0]
 801c9dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c9e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801c9e2:	2300      	movs	r3, #0
 801c9e4:	e000      	b.n	801c9e8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801c9e6:	2302      	movs	r3, #2
  }
}
 801c9e8:	4618      	mov	r0, r3
 801c9ea:	3714      	adds	r7, #20
 801c9ec:	46bd      	mov	sp, r7
 801c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9f2:	4770      	bx	lr

0801c9f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c9f4:	b580      	push	{r7, lr}
 801c9f6:	b082      	sub	sp, #8
 801c9f8:	af00      	add	r7, sp, #0
 801c9fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	681b      	ldr	r3, [r3, #0]
 801ca00:	68da      	ldr	r2, [r3, #12]
 801ca02:	687b      	ldr	r3, [r7, #4]
 801ca04:	681b      	ldr	r3, [r3, #0]
 801ca06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ca0a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	2220      	movs	r2, #32
 801ca10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801ca14:	6878      	ldr	r0, [r7, #4]
 801ca16:	f7ff fe5b 	bl	801c6d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801ca1a:	2300      	movs	r3, #0
}
 801ca1c:	4618      	mov	r0, r3
 801ca1e:	3708      	adds	r7, #8
 801ca20:	46bd      	mov	sp, r7
 801ca22:	bd80      	pop	{r7, pc}

0801ca24 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801ca24:	b580      	push	{r7, lr}
 801ca26:	b084      	sub	sp, #16
 801ca28:	af00      	add	r7, sp, #0
 801ca2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801ca2c:	687b      	ldr	r3, [r7, #4]
 801ca2e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801ca32:	b2db      	uxtb	r3, r3
 801ca34:	2b22      	cmp	r3, #34	; 0x22
 801ca36:	d171      	bne.n	801cb1c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	689b      	ldr	r3, [r3, #8]
 801ca3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ca40:	d123      	bne.n	801ca8a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca46:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801ca48:	687b      	ldr	r3, [r7, #4]
 801ca4a:	691b      	ldr	r3, [r3, #16]
 801ca4c:	2b00      	cmp	r3, #0
 801ca4e:	d10e      	bne.n	801ca6e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	681b      	ldr	r3, [r3, #0]
 801ca54:	685b      	ldr	r3, [r3, #4]
 801ca56:	b29b      	uxth	r3, r3
 801ca58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ca5c:	b29a      	uxth	r2, r3
 801ca5e:	68fb      	ldr	r3, [r7, #12]
 801ca60:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 801ca62:	687b      	ldr	r3, [r7, #4]
 801ca64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca66:	1c9a      	adds	r2, r3, #2
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	629a      	str	r2, [r3, #40]	; 0x28
 801ca6c:	e029      	b.n	801cac2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	681b      	ldr	r3, [r3, #0]
 801ca72:	685b      	ldr	r3, [r3, #4]
 801ca74:	b29b      	uxth	r3, r3
 801ca76:	b2db      	uxtb	r3, r3
 801ca78:	b29a      	uxth	r2, r3
 801ca7a:	68fb      	ldr	r3, [r7, #12]
 801ca7c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca82:	1c5a      	adds	r2, r3, #1
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	629a      	str	r2, [r3, #40]	; 0x28
 801ca88:	e01b      	b.n	801cac2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	691b      	ldr	r3, [r3, #16]
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	d10a      	bne.n	801caa8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	681b      	ldr	r3, [r3, #0]
 801ca96:	6858      	ldr	r0, [r3, #4]
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca9c:	1c59      	adds	r1, r3, #1
 801ca9e:	687a      	ldr	r2, [r7, #4]
 801caa0:	6291      	str	r1, [r2, #40]	; 0x28
 801caa2:	b2c2      	uxtb	r2, r0
 801caa4:	701a      	strb	r2, [r3, #0]
 801caa6:	e00c      	b.n	801cac2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	681b      	ldr	r3, [r3, #0]
 801caac:	685b      	ldr	r3, [r3, #4]
 801caae:	b2da      	uxtb	r2, r3
 801cab0:	687b      	ldr	r3, [r7, #4]
 801cab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cab4:	1c58      	adds	r0, r3, #1
 801cab6:	6879      	ldr	r1, [r7, #4]
 801cab8:	6288      	str	r0, [r1, #40]	; 0x28
 801caba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801cabe:	b2d2      	uxtb	r2, r2
 801cac0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801cac6:	b29b      	uxth	r3, r3
 801cac8:	3b01      	subs	r3, #1
 801caca:	b29b      	uxth	r3, r3
 801cacc:	687a      	ldr	r2, [r7, #4]
 801cace:	4619      	mov	r1, r3
 801cad0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801cad2:	2b00      	cmp	r3, #0
 801cad4:	d120      	bne.n	801cb18 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801cad6:	687b      	ldr	r3, [r7, #4]
 801cad8:	681b      	ldr	r3, [r3, #0]
 801cada:	68da      	ldr	r2, [r3, #12]
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	681b      	ldr	r3, [r3, #0]
 801cae0:	f022 0220 	bic.w	r2, r2, #32
 801cae4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	681b      	ldr	r3, [r3, #0]
 801caea:	68da      	ldr	r2, [r3, #12]
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	681b      	ldr	r3, [r3, #0]
 801caf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801caf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	681b      	ldr	r3, [r3, #0]
 801cafa:	695a      	ldr	r2, [r3, #20]
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	f022 0201 	bic.w	r2, r2, #1
 801cb04:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	2220      	movs	r2, #32
 801cb0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 801cb0e:	6878      	ldr	r0, [r7, #4]
 801cb10:	f7f6 ff98 	bl	8013a44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 801cb14:	2300      	movs	r3, #0
 801cb16:	e002      	b.n	801cb1e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 801cb18:	2300      	movs	r3, #0
 801cb1a:	e000      	b.n	801cb1e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 801cb1c:	2302      	movs	r3, #2
  }
}
 801cb1e:	4618      	mov	r0, r3
 801cb20:	3710      	adds	r7, #16
 801cb22:	46bd      	mov	sp, r7
 801cb24:	bd80      	pop	{r7, pc}
	...

0801cb28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801cb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb2c:	b085      	sub	sp, #20
 801cb2e:	af00      	add	r7, sp, #0
 801cb30:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	681b      	ldr	r3, [r3, #0]
 801cb36:	691b      	ldr	r3, [r3, #16]
 801cb38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	68da      	ldr	r2, [r3, #12]
 801cb40:	687b      	ldr	r3, [r7, #4]
 801cb42:	681b      	ldr	r3, [r3, #0]
 801cb44:	430a      	orrs	r2, r1
 801cb46:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	689a      	ldr	r2, [r3, #8]
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	691b      	ldr	r3, [r3, #16]
 801cb50:	431a      	orrs	r2, r3
 801cb52:	687b      	ldr	r3, [r7, #4]
 801cb54:	695b      	ldr	r3, [r3, #20]
 801cb56:	431a      	orrs	r2, r3
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	69db      	ldr	r3, [r3, #28]
 801cb5c:	4313      	orrs	r3, r2
 801cb5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 801cb60:	687b      	ldr	r3, [r7, #4]
 801cb62:	681b      	ldr	r3, [r3, #0]
 801cb64:	68db      	ldr	r3, [r3, #12]
 801cb66:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 801cb6a:	f023 030c 	bic.w	r3, r3, #12
 801cb6e:	687a      	ldr	r2, [r7, #4]
 801cb70:	6812      	ldr	r2, [r2, #0]
 801cb72:	68f9      	ldr	r1, [r7, #12]
 801cb74:	430b      	orrs	r3, r1
 801cb76:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801cb78:	687b      	ldr	r3, [r7, #4]
 801cb7a:	681b      	ldr	r3, [r3, #0]
 801cb7c:	695b      	ldr	r3, [r3, #20]
 801cb7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	699a      	ldr	r2, [r3, #24]
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	681b      	ldr	r3, [r3, #0]
 801cb8a:	430a      	orrs	r2, r1
 801cb8c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	69db      	ldr	r3, [r3, #28]
 801cb92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cb96:	f040 818b 	bne.w	801ceb0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	681b      	ldr	r3, [r3, #0]
 801cb9e:	4ac1      	ldr	r2, [pc, #772]	; (801cea4 <UART_SetConfig+0x37c>)
 801cba0:	4293      	cmp	r3, r2
 801cba2:	d005      	beq.n	801cbb0 <UART_SetConfig+0x88>
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	681b      	ldr	r3, [r3, #0]
 801cba8:	4abf      	ldr	r2, [pc, #764]	; (801cea8 <UART_SetConfig+0x380>)
 801cbaa:	4293      	cmp	r3, r2
 801cbac:	f040 80bd 	bne.w	801cd2a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801cbb0:	f7fc fec6 	bl	8019940 <HAL_RCC_GetPCLK2Freq>
 801cbb4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801cbb6:	68bb      	ldr	r3, [r7, #8]
 801cbb8:	461d      	mov	r5, r3
 801cbba:	f04f 0600 	mov.w	r6, #0
 801cbbe:	46a8      	mov	r8, r5
 801cbc0:	46b1      	mov	r9, r6
 801cbc2:	eb18 0308 	adds.w	r3, r8, r8
 801cbc6:	eb49 0409 	adc.w	r4, r9, r9
 801cbca:	4698      	mov	r8, r3
 801cbcc:	46a1      	mov	r9, r4
 801cbce:	eb18 0805 	adds.w	r8, r8, r5
 801cbd2:	eb49 0906 	adc.w	r9, r9, r6
 801cbd6:	f04f 0100 	mov.w	r1, #0
 801cbda:	f04f 0200 	mov.w	r2, #0
 801cbde:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801cbe2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801cbe6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801cbea:	4688      	mov	r8, r1
 801cbec:	4691      	mov	r9, r2
 801cbee:	eb18 0005 	adds.w	r0, r8, r5
 801cbf2:	eb49 0106 	adc.w	r1, r9, r6
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	685b      	ldr	r3, [r3, #4]
 801cbfa:	461d      	mov	r5, r3
 801cbfc:	f04f 0600 	mov.w	r6, #0
 801cc00:	196b      	adds	r3, r5, r5
 801cc02:	eb46 0406 	adc.w	r4, r6, r6
 801cc06:	461a      	mov	r2, r3
 801cc08:	4623      	mov	r3, r4
 801cc0a:	f7e4 f895 	bl	8000d38 <__aeabi_uldivmod>
 801cc0e:	4603      	mov	r3, r0
 801cc10:	460c      	mov	r4, r1
 801cc12:	461a      	mov	r2, r3
 801cc14:	4ba5      	ldr	r3, [pc, #660]	; (801ceac <UART_SetConfig+0x384>)
 801cc16:	fba3 2302 	umull	r2, r3, r3, r2
 801cc1a:	095b      	lsrs	r3, r3, #5
 801cc1c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801cc20:	68bb      	ldr	r3, [r7, #8]
 801cc22:	461d      	mov	r5, r3
 801cc24:	f04f 0600 	mov.w	r6, #0
 801cc28:	46a9      	mov	r9, r5
 801cc2a:	46b2      	mov	sl, r6
 801cc2c:	eb19 0309 	adds.w	r3, r9, r9
 801cc30:	eb4a 040a 	adc.w	r4, sl, sl
 801cc34:	4699      	mov	r9, r3
 801cc36:	46a2      	mov	sl, r4
 801cc38:	eb19 0905 	adds.w	r9, r9, r5
 801cc3c:	eb4a 0a06 	adc.w	sl, sl, r6
 801cc40:	f04f 0100 	mov.w	r1, #0
 801cc44:	f04f 0200 	mov.w	r2, #0
 801cc48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801cc4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801cc50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801cc54:	4689      	mov	r9, r1
 801cc56:	4692      	mov	sl, r2
 801cc58:	eb19 0005 	adds.w	r0, r9, r5
 801cc5c:	eb4a 0106 	adc.w	r1, sl, r6
 801cc60:	687b      	ldr	r3, [r7, #4]
 801cc62:	685b      	ldr	r3, [r3, #4]
 801cc64:	461d      	mov	r5, r3
 801cc66:	f04f 0600 	mov.w	r6, #0
 801cc6a:	196b      	adds	r3, r5, r5
 801cc6c:	eb46 0406 	adc.w	r4, r6, r6
 801cc70:	461a      	mov	r2, r3
 801cc72:	4623      	mov	r3, r4
 801cc74:	f7e4 f860 	bl	8000d38 <__aeabi_uldivmod>
 801cc78:	4603      	mov	r3, r0
 801cc7a:	460c      	mov	r4, r1
 801cc7c:	461a      	mov	r2, r3
 801cc7e:	4b8b      	ldr	r3, [pc, #556]	; (801ceac <UART_SetConfig+0x384>)
 801cc80:	fba3 1302 	umull	r1, r3, r3, r2
 801cc84:	095b      	lsrs	r3, r3, #5
 801cc86:	2164      	movs	r1, #100	; 0x64
 801cc88:	fb01 f303 	mul.w	r3, r1, r3
 801cc8c:	1ad3      	subs	r3, r2, r3
 801cc8e:	00db      	lsls	r3, r3, #3
 801cc90:	3332      	adds	r3, #50	; 0x32
 801cc92:	4a86      	ldr	r2, [pc, #536]	; (801ceac <UART_SetConfig+0x384>)
 801cc94:	fba2 2303 	umull	r2, r3, r2, r3
 801cc98:	095b      	lsrs	r3, r3, #5
 801cc9a:	005b      	lsls	r3, r3, #1
 801cc9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801cca0:	4498      	add	r8, r3
 801cca2:	68bb      	ldr	r3, [r7, #8]
 801cca4:	461d      	mov	r5, r3
 801cca6:	f04f 0600 	mov.w	r6, #0
 801ccaa:	46a9      	mov	r9, r5
 801ccac:	46b2      	mov	sl, r6
 801ccae:	eb19 0309 	adds.w	r3, r9, r9
 801ccb2:	eb4a 040a 	adc.w	r4, sl, sl
 801ccb6:	4699      	mov	r9, r3
 801ccb8:	46a2      	mov	sl, r4
 801ccba:	eb19 0905 	adds.w	r9, r9, r5
 801ccbe:	eb4a 0a06 	adc.w	sl, sl, r6
 801ccc2:	f04f 0100 	mov.w	r1, #0
 801ccc6:	f04f 0200 	mov.w	r2, #0
 801ccca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801ccce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801ccd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801ccd6:	4689      	mov	r9, r1
 801ccd8:	4692      	mov	sl, r2
 801ccda:	eb19 0005 	adds.w	r0, r9, r5
 801ccde:	eb4a 0106 	adc.w	r1, sl, r6
 801cce2:	687b      	ldr	r3, [r7, #4]
 801cce4:	685b      	ldr	r3, [r3, #4]
 801cce6:	461d      	mov	r5, r3
 801cce8:	f04f 0600 	mov.w	r6, #0
 801ccec:	196b      	adds	r3, r5, r5
 801ccee:	eb46 0406 	adc.w	r4, r6, r6
 801ccf2:	461a      	mov	r2, r3
 801ccf4:	4623      	mov	r3, r4
 801ccf6:	f7e4 f81f 	bl	8000d38 <__aeabi_uldivmod>
 801ccfa:	4603      	mov	r3, r0
 801ccfc:	460c      	mov	r4, r1
 801ccfe:	461a      	mov	r2, r3
 801cd00:	4b6a      	ldr	r3, [pc, #424]	; (801ceac <UART_SetConfig+0x384>)
 801cd02:	fba3 1302 	umull	r1, r3, r3, r2
 801cd06:	095b      	lsrs	r3, r3, #5
 801cd08:	2164      	movs	r1, #100	; 0x64
 801cd0a:	fb01 f303 	mul.w	r3, r1, r3
 801cd0e:	1ad3      	subs	r3, r2, r3
 801cd10:	00db      	lsls	r3, r3, #3
 801cd12:	3332      	adds	r3, #50	; 0x32
 801cd14:	4a65      	ldr	r2, [pc, #404]	; (801ceac <UART_SetConfig+0x384>)
 801cd16:	fba2 2303 	umull	r2, r3, r2, r3
 801cd1a:	095b      	lsrs	r3, r3, #5
 801cd1c:	f003 0207 	and.w	r2, r3, #7
 801cd20:	687b      	ldr	r3, [r7, #4]
 801cd22:	681b      	ldr	r3, [r3, #0]
 801cd24:	4442      	add	r2, r8
 801cd26:	609a      	str	r2, [r3, #8]
 801cd28:	e26f      	b.n	801d20a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801cd2a:	f7fc fdf5 	bl	8019918 <HAL_RCC_GetPCLK1Freq>
 801cd2e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801cd30:	68bb      	ldr	r3, [r7, #8]
 801cd32:	461d      	mov	r5, r3
 801cd34:	f04f 0600 	mov.w	r6, #0
 801cd38:	46a8      	mov	r8, r5
 801cd3a:	46b1      	mov	r9, r6
 801cd3c:	eb18 0308 	adds.w	r3, r8, r8
 801cd40:	eb49 0409 	adc.w	r4, r9, r9
 801cd44:	4698      	mov	r8, r3
 801cd46:	46a1      	mov	r9, r4
 801cd48:	eb18 0805 	adds.w	r8, r8, r5
 801cd4c:	eb49 0906 	adc.w	r9, r9, r6
 801cd50:	f04f 0100 	mov.w	r1, #0
 801cd54:	f04f 0200 	mov.w	r2, #0
 801cd58:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801cd5c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801cd60:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801cd64:	4688      	mov	r8, r1
 801cd66:	4691      	mov	r9, r2
 801cd68:	eb18 0005 	adds.w	r0, r8, r5
 801cd6c:	eb49 0106 	adc.w	r1, r9, r6
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	685b      	ldr	r3, [r3, #4]
 801cd74:	461d      	mov	r5, r3
 801cd76:	f04f 0600 	mov.w	r6, #0
 801cd7a:	196b      	adds	r3, r5, r5
 801cd7c:	eb46 0406 	adc.w	r4, r6, r6
 801cd80:	461a      	mov	r2, r3
 801cd82:	4623      	mov	r3, r4
 801cd84:	f7e3 ffd8 	bl	8000d38 <__aeabi_uldivmod>
 801cd88:	4603      	mov	r3, r0
 801cd8a:	460c      	mov	r4, r1
 801cd8c:	461a      	mov	r2, r3
 801cd8e:	4b47      	ldr	r3, [pc, #284]	; (801ceac <UART_SetConfig+0x384>)
 801cd90:	fba3 2302 	umull	r2, r3, r3, r2
 801cd94:	095b      	lsrs	r3, r3, #5
 801cd96:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801cd9a:	68bb      	ldr	r3, [r7, #8]
 801cd9c:	461d      	mov	r5, r3
 801cd9e:	f04f 0600 	mov.w	r6, #0
 801cda2:	46a9      	mov	r9, r5
 801cda4:	46b2      	mov	sl, r6
 801cda6:	eb19 0309 	adds.w	r3, r9, r9
 801cdaa:	eb4a 040a 	adc.w	r4, sl, sl
 801cdae:	4699      	mov	r9, r3
 801cdb0:	46a2      	mov	sl, r4
 801cdb2:	eb19 0905 	adds.w	r9, r9, r5
 801cdb6:	eb4a 0a06 	adc.w	sl, sl, r6
 801cdba:	f04f 0100 	mov.w	r1, #0
 801cdbe:	f04f 0200 	mov.w	r2, #0
 801cdc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801cdc6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801cdca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801cdce:	4689      	mov	r9, r1
 801cdd0:	4692      	mov	sl, r2
 801cdd2:	eb19 0005 	adds.w	r0, r9, r5
 801cdd6:	eb4a 0106 	adc.w	r1, sl, r6
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	685b      	ldr	r3, [r3, #4]
 801cdde:	461d      	mov	r5, r3
 801cde0:	f04f 0600 	mov.w	r6, #0
 801cde4:	196b      	adds	r3, r5, r5
 801cde6:	eb46 0406 	adc.w	r4, r6, r6
 801cdea:	461a      	mov	r2, r3
 801cdec:	4623      	mov	r3, r4
 801cdee:	f7e3 ffa3 	bl	8000d38 <__aeabi_uldivmod>
 801cdf2:	4603      	mov	r3, r0
 801cdf4:	460c      	mov	r4, r1
 801cdf6:	461a      	mov	r2, r3
 801cdf8:	4b2c      	ldr	r3, [pc, #176]	; (801ceac <UART_SetConfig+0x384>)
 801cdfa:	fba3 1302 	umull	r1, r3, r3, r2
 801cdfe:	095b      	lsrs	r3, r3, #5
 801ce00:	2164      	movs	r1, #100	; 0x64
 801ce02:	fb01 f303 	mul.w	r3, r1, r3
 801ce06:	1ad3      	subs	r3, r2, r3
 801ce08:	00db      	lsls	r3, r3, #3
 801ce0a:	3332      	adds	r3, #50	; 0x32
 801ce0c:	4a27      	ldr	r2, [pc, #156]	; (801ceac <UART_SetConfig+0x384>)
 801ce0e:	fba2 2303 	umull	r2, r3, r2, r3
 801ce12:	095b      	lsrs	r3, r3, #5
 801ce14:	005b      	lsls	r3, r3, #1
 801ce16:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801ce1a:	4498      	add	r8, r3
 801ce1c:	68bb      	ldr	r3, [r7, #8]
 801ce1e:	461d      	mov	r5, r3
 801ce20:	f04f 0600 	mov.w	r6, #0
 801ce24:	46a9      	mov	r9, r5
 801ce26:	46b2      	mov	sl, r6
 801ce28:	eb19 0309 	adds.w	r3, r9, r9
 801ce2c:	eb4a 040a 	adc.w	r4, sl, sl
 801ce30:	4699      	mov	r9, r3
 801ce32:	46a2      	mov	sl, r4
 801ce34:	eb19 0905 	adds.w	r9, r9, r5
 801ce38:	eb4a 0a06 	adc.w	sl, sl, r6
 801ce3c:	f04f 0100 	mov.w	r1, #0
 801ce40:	f04f 0200 	mov.w	r2, #0
 801ce44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801ce48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801ce4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801ce50:	4689      	mov	r9, r1
 801ce52:	4692      	mov	sl, r2
 801ce54:	eb19 0005 	adds.w	r0, r9, r5
 801ce58:	eb4a 0106 	adc.w	r1, sl, r6
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	685b      	ldr	r3, [r3, #4]
 801ce60:	461d      	mov	r5, r3
 801ce62:	f04f 0600 	mov.w	r6, #0
 801ce66:	196b      	adds	r3, r5, r5
 801ce68:	eb46 0406 	adc.w	r4, r6, r6
 801ce6c:	461a      	mov	r2, r3
 801ce6e:	4623      	mov	r3, r4
 801ce70:	f7e3 ff62 	bl	8000d38 <__aeabi_uldivmod>
 801ce74:	4603      	mov	r3, r0
 801ce76:	460c      	mov	r4, r1
 801ce78:	461a      	mov	r2, r3
 801ce7a:	4b0c      	ldr	r3, [pc, #48]	; (801ceac <UART_SetConfig+0x384>)
 801ce7c:	fba3 1302 	umull	r1, r3, r3, r2
 801ce80:	095b      	lsrs	r3, r3, #5
 801ce82:	2164      	movs	r1, #100	; 0x64
 801ce84:	fb01 f303 	mul.w	r3, r1, r3
 801ce88:	1ad3      	subs	r3, r2, r3
 801ce8a:	00db      	lsls	r3, r3, #3
 801ce8c:	3332      	adds	r3, #50	; 0x32
 801ce8e:	4a07      	ldr	r2, [pc, #28]	; (801ceac <UART_SetConfig+0x384>)
 801ce90:	fba2 2303 	umull	r2, r3, r2, r3
 801ce94:	095b      	lsrs	r3, r3, #5
 801ce96:	f003 0207 	and.w	r2, r3, #7
 801ce9a:	687b      	ldr	r3, [r7, #4]
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	4442      	add	r2, r8
 801cea0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801cea2:	e1b2      	b.n	801d20a <UART_SetConfig+0x6e2>
 801cea4:	40011000 	.word	0x40011000
 801cea8:	40011400 	.word	0x40011400
 801ceac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	681b      	ldr	r3, [r3, #0]
 801ceb4:	4ad7      	ldr	r2, [pc, #860]	; (801d214 <UART_SetConfig+0x6ec>)
 801ceb6:	4293      	cmp	r3, r2
 801ceb8:	d005      	beq.n	801cec6 <UART_SetConfig+0x39e>
 801ceba:	687b      	ldr	r3, [r7, #4]
 801cebc:	681b      	ldr	r3, [r3, #0]
 801cebe:	4ad6      	ldr	r2, [pc, #856]	; (801d218 <UART_SetConfig+0x6f0>)
 801cec0:	4293      	cmp	r3, r2
 801cec2:	f040 80d1 	bne.w	801d068 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801cec6:	f7fc fd3b 	bl	8019940 <HAL_RCC_GetPCLK2Freq>
 801ceca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801cecc:	68bb      	ldr	r3, [r7, #8]
 801cece:	469a      	mov	sl, r3
 801ced0:	f04f 0b00 	mov.w	fp, #0
 801ced4:	46d0      	mov	r8, sl
 801ced6:	46d9      	mov	r9, fp
 801ced8:	eb18 0308 	adds.w	r3, r8, r8
 801cedc:	eb49 0409 	adc.w	r4, r9, r9
 801cee0:	4698      	mov	r8, r3
 801cee2:	46a1      	mov	r9, r4
 801cee4:	eb18 080a 	adds.w	r8, r8, sl
 801cee8:	eb49 090b 	adc.w	r9, r9, fp
 801ceec:	f04f 0100 	mov.w	r1, #0
 801cef0:	f04f 0200 	mov.w	r2, #0
 801cef4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801cef8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801cefc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801cf00:	4688      	mov	r8, r1
 801cf02:	4691      	mov	r9, r2
 801cf04:	eb1a 0508 	adds.w	r5, sl, r8
 801cf08:	eb4b 0609 	adc.w	r6, fp, r9
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	685b      	ldr	r3, [r3, #4]
 801cf10:	4619      	mov	r1, r3
 801cf12:	f04f 0200 	mov.w	r2, #0
 801cf16:	f04f 0300 	mov.w	r3, #0
 801cf1a:	f04f 0400 	mov.w	r4, #0
 801cf1e:	0094      	lsls	r4, r2, #2
 801cf20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801cf24:	008b      	lsls	r3, r1, #2
 801cf26:	461a      	mov	r2, r3
 801cf28:	4623      	mov	r3, r4
 801cf2a:	4628      	mov	r0, r5
 801cf2c:	4631      	mov	r1, r6
 801cf2e:	f7e3 ff03 	bl	8000d38 <__aeabi_uldivmod>
 801cf32:	4603      	mov	r3, r0
 801cf34:	460c      	mov	r4, r1
 801cf36:	461a      	mov	r2, r3
 801cf38:	4bb8      	ldr	r3, [pc, #736]	; (801d21c <UART_SetConfig+0x6f4>)
 801cf3a:	fba3 2302 	umull	r2, r3, r3, r2
 801cf3e:	095b      	lsrs	r3, r3, #5
 801cf40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801cf44:	68bb      	ldr	r3, [r7, #8]
 801cf46:	469b      	mov	fp, r3
 801cf48:	f04f 0c00 	mov.w	ip, #0
 801cf4c:	46d9      	mov	r9, fp
 801cf4e:	46e2      	mov	sl, ip
 801cf50:	eb19 0309 	adds.w	r3, r9, r9
 801cf54:	eb4a 040a 	adc.w	r4, sl, sl
 801cf58:	4699      	mov	r9, r3
 801cf5a:	46a2      	mov	sl, r4
 801cf5c:	eb19 090b 	adds.w	r9, r9, fp
 801cf60:	eb4a 0a0c 	adc.w	sl, sl, ip
 801cf64:	f04f 0100 	mov.w	r1, #0
 801cf68:	f04f 0200 	mov.w	r2, #0
 801cf6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801cf70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801cf74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801cf78:	4689      	mov	r9, r1
 801cf7a:	4692      	mov	sl, r2
 801cf7c:	eb1b 0509 	adds.w	r5, fp, r9
 801cf80:	eb4c 060a 	adc.w	r6, ip, sl
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	685b      	ldr	r3, [r3, #4]
 801cf88:	4619      	mov	r1, r3
 801cf8a:	f04f 0200 	mov.w	r2, #0
 801cf8e:	f04f 0300 	mov.w	r3, #0
 801cf92:	f04f 0400 	mov.w	r4, #0
 801cf96:	0094      	lsls	r4, r2, #2
 801cf98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801cf9c:	008b      	lsls	r3, r1, #2
 801cf9e:	461a      	mov	r2, r3
 801cfa0:	4623      	mov	r3, r4
 801cfa2:	4628      	mov	r0, r5
 801cfa4:	4631      	mov	r1, r6
 801cfa6:	f7e3 fec7 	bl	8000d38 <__aeabi_uldivmod>
 801cfaa:	4603      	mov	r3, r0
 801cfac:	460c      	mov	r4, r1
 801cfae:	461a      	mov	r2, r3
 801cfb0:	4b9a      	ldr	r3, [pc, #616]	; (801d21c <UART_SetConfig+0x6f4>)
 801cfb2:	fba3 1302 	umull	r1, r3, r3, r2
 801cfb6:	095b      	lsrs	r3, r3, #5
 801cfb8:	2164      	movs	r1, #100	; 0x64
 801cfba:	fb01 f303 	mul.w	r3, r1, r3
 801cfbe:	1ad3      	subs	r3, r2, r3
 801cfc0:	011b      	lsls	r3, r3, #4
 801cfc2:	3332      	adds	r3, #50	; 0x32
 801cfc4:	4a95      	ldr	r2, [pc, #596]	; (801d21c <UART_SetConfig+0x6f4>)
 801cfc6:	fba2 2303 	umull	r2, r3, r2, r3
 801cfca:	095b      	lsrs	r3, r3, #5
 801cfcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cfd0:	4498      	add	r8, r3
 801cfd2:	68bb      	ldr	r3, [r7, #8]
 801cfd4:	469b      	mov	fp, r3
 801cfd6:	f04f 0c00 	mov.w	ip, #0
 801cfda:	46d9      	mov	r9, fp
 801cfdc:	46e2      	mov	sl, ip
 801cfde:	eb19 0309 	adds.w	r3, r9, r9
 801cfe2:	eb4a 040a 	adc.w	r4, sl, sl
 801cfe6:	4699      	mov	r9, r3
 801cfe8:	46a2      	mov	sl, r4
 801cfea:	eb19 090b 	adds.w	r9, r9, fp
 801cfee:	eb4a 0a0c 	adc.w	sl, sl, ip
 801cff2:	f04f 0100 	mov.w	r1, #0
 801cff6:	f04f 0200 	mov.w	r2, #0
 801cffa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801cffe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801d002:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801d006:	4689      	mov	r9, r1
 801d008:	4692      	mov	sl, r2
 801d00a:	eb1b 0509 	adds.w	r5, fp, r9
 801d00e:	eb4c 060a 	adc.w	r6, ip, sl
 801d012:	687b      	ldr	r3, [r7, #4]
 801d014:	685b      	ldr	r3, [r3, #4]
 801d016:	4619      	mov	r1, r3
 801d018:	f04f 0200 	mov.w	r2, #0
 801d01c:	f04f 0300 	mov.w	r3, #0
 801d020:	f04f 0400 	mov.w	r4, #0
 801d024:	0094      	lsls	r4, r2, #2
 801d026:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801d02a:	008b      	lsls	r3, r1, #2
 801d02c:	461a      	mov	r2, r3
 801d02e:	4623      	mov	r3, r4
 801d030:	4628      	mov	r0, r5
 801d032:	4631      	mov	r1, r6
 801d034:	f7e3 fe80 	bl	8000d38 <__aeabi_uldivmod>
 801d038:	4603      	mov	r3, r0
 801d03a:	460c      	mov	r4, r1
 801d03c:	461a      	mov	r2, r3
 801d03e:	4b77      	ldr	r3, [pc, #476]	; (801d21c <UART_SetConfig+0x6f4>)
 801d040:	fba3 1302 	umull	r1, r3, r3, r2
 801d044:	095b      	lsrs	r3, r3, #5
 801d046:	2164      	movs	r1, #100	; 0x64
 801d048:	fb01 f303 	mul.w	r3, r1, r3
 801d04c:	1ad3      	subs	r3, r2, r3
 801d04e:	011b      	lsls	r3, r3, #4
 801d050:	3332      	adds	r3, #50	; 0x32
 801d052:	4a72      	ldr	r2, [pc, #456]	; (801d21c <UART_SetConfig+0x6f4>)
 801d054:	fba2 2303 	umull	r2, r3, r2, r3
 801d058:	095b      	lsrs	r3, r3, #5
 801d05a:	f003 020f 	and.w	r2, r3, #15
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	681b      	ldr	r3, [r3, #0]
 801d062:	4442      	add	r2, r8
 801d064:	609a      	str	r2, [r3, #8]
 801d066:	e0d0      	b.n	801d20a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 801d068:	f7fc fc56 	bl	8019918 <HAL_RCC_GetPCLK1Freq>
 801d06c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801d06e:	68bb      	ldr	r3, [r7, #8]
 801d070:	469a      	mov	sl, r3
 801d072:	f04f 0b00 	mov.w	fp, #0
 801d076:	46d0      	mov	r8, sl
 801d078:	46d9      	mov	r9, fp
 801d07a:	eb18 0308 	adds.w	r3, r8, r8
 801d07e:	eb49 0409 	adc.w	r4, r9, r9
 801d082:	4698      	mov	r8, r3
 801d084:	46a1      	mov	r9, r4
 801d086:	eb18 080a 	adds.w	r8, r8, sl
 801d08a:	eb49 090b 	adc.w	r9, r9, fp
 801d08e:	f04f 0100 	mov.w	r1, #0
 801d092:	f04f 0200 	mov.w	r2, #0
 801d096:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801d09a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801d09e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801d0a2:	4688      	mov	r8, r1
 801d0a4:	4691      	mov	r9, r2
 801d0a6:	eb1a 0508 	adds.w	r5, sl, r8
 801d0aa:	eb4b 0609 	adc.w	r6, fp, r9
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	685b      	ldr	r3, [r3, #4]
 801d0b2:	4619      	mov	r1, r3
 801d0b4:	f04f 0200 	mov.w	r2, #0
 801d0b8:	f04f 0300 	mov.w	r3, #0
 801d0bc:	f04f 0400 	mov.w	r4, #0
 801d0c0:	0094      	lsls	r4, r2, #2
 801d0c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801d0c6:	008b      	lsls	r3, r1, #2
 801d0c8:	461a      	mov	r2, r3
 801d0ca:	4623      	mov	r3, r4
 801d0cc:	4628      	mov	r0, r5
 801d0ce:	4631      	mov	r1, r6
 801d0d0:	f7e3 fe32 	bl	8000d38 <__aeabi_uldivmod>
 801d0d4:	4603      	mov	r3, r0
 801d0d6:	460c      	mov	r4, r1
 801d0d8:	461a      	mov	r2, r3
 801d0da:	4b50      	ldr	r3, [pc, #320]	; (801d21c <UART_SetConfig+0x6f4>)
 801d0dc:	fba3 2302 	umull	r2, r3, r3, r2
 801d0e0:	095b      	lsrs	r3, r3, #5
 801d0e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801d0e6:	68bb      	ldr	r3, [r7, #8]
 801d0e8:	469b      	mov	fp, r3
 801d0ea:	f04f 0c00 	mov.w	ip, #0
 801d0ee:	46d9      	mov	r9, fp
 801d0f0:	46e2      	mov	sl, ip
 801d0f2:	eb19 0309 	adds.w	r3, r9, r9
 801d0f6:	eb4a 040a 	adc.w	r4, sl, sl
 801d0fa:	4699      	mov	r9, r3
 801d0fc:	46a2      	mov	sl, r4
 801d0fe:	eb19 090b 	adds.w	r9, r9, fp
 801d102:	eb4a 0a0c 	adc.w	sl, sl, ip
 801d106:	f04f 0100 	mov.w	r1, #0
 801d10a:	f04f 0200 	mov.w	r2, #0
 801d10e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801d112:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801d116:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801d11a:	4689      	mov	r9, r1
 801d11c:	4692      	mov	sl, r2
 801d11e:	eb1b 0509 	adds.w	r5, fp, r9
 801d122:	eb4c 060a 	adc.w	r6, ip, sl
 801d126:	687b      	ldr	r3, [r7, #4]
 801d128:	685b      	ldr	r3, [r3, #4]
 801d12a:	4619      	mov	r1, r3
 801d12c:	f04f 0200 	mov.w	r2, #0
 801d130:	f04f 0300 	mov.w	r3, #0
 801d134:	f04f 0400 	mov.w	r4, #0
 801d138:	0094      	lsls	r4, r2, #2
 801d13a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801d13e:	008b      	lsls	r3, r1, #2
 801d140:	461a      	mov	r2, r3
 801d142:	4623      	mov	r3, r4
 801d144:	4628      	mov	r0, r5
 801d146:	4631      	mov	r1, r6
 801d148:	f7e3 fdf6 	bl	8000d38 <__aeabi_uldivmod>
 801d14c:	4603      	mov	r3, r0
 801d14e:	460c      	mov	r4, r1
 801d150:	461a      	mov	r2, r3
 801d152:	4b32      	ldr	r3, [pc, #200]	; (801d21c <UART_SetConfig+0x6f4>)
 801d154:	fba3 1302 	umull	r1, r3, r3, r2
 801d158:	095b      	lsrs	r3, r3, #5
 801d15a:	2164      	movs	r1, #100	; 0x64
 801d15c:	fb01 f303 	mul.w	r3, r1, r3
 801d160:	1ad3      	subs	r3, r2, r3
 801d162:	011b      	lsls	r3, r3, #4
 801d164:	3332      	adds	r3, #50	; 0x32
 801d166:	4a2d      	ldr	r2, [pc, #180]	; (801d21c <UART_SetConfig+0x6f4>)
 801d168:	fba2 2303 	umull	r2, r3, r2, r3
 801d16c:	095b      	lsrs	r3, r3, #5
 801d16e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d172:	4498      	add	r8, r3
 801d174:	68bb      	ldr	r3, [r7, #8]
 801d176:	469b      	mov	fp, r3
 801d178:	f04f 0c00 	mov.w	ip, #0
 801d17c:	46d9      	mov	r9, fp
 801d17e:	46e2      	mov	sl, ip
 801d180:	eb19 0309 	adds.w	r3, r9, r9
 801d184:	eb4a 040a 	adc.w	r4, sl, sl
 801d188:	4699      	mov	r9, r3
 801d18a:	46a2      	mov	sl, r4
 801d18c:	eb19 090b 	adds.w	r9, r9, fp
 801d190:	eb4a 0a0c 	adc.w	sl, sl, ip
 801d194:	f04f 0100 	mov.w	r1, #0
 801d198:	f04f 0200 	mov.w	r2, #0
 801d19c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801d1a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801d1a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801d1a8:	4689      	mov	r9, r1
 801d1aa:	4692      	mov	sl, r2
 801d1ac:	eb1b 0509 	adds.w	r5, fp, r9
 801d1b0:	eb4c 060a 	adc.w	r6, ip, sl
 801d1b4:	687b      	ldr	r3, [r7, #4]
 801d1b6:	685b      	ldr	r3, [r3, #4]
 801d1b8:	4619      	mov	r1, r3
 801d1ba:	f04f 0200 	mov.w	r2, #0
 801d1be:	f04f 0300 	mov.w	r3, #0
 801d1c2:	f04f 0400 	mov.w	r4, #0
 801d1c6:	0094      	lsls	r4, r2, #2
 801d1c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801d1cc:	008b      	lsls	r3, r1, #2
 801d1ce:	461a      	mov	r2, r3
 801d1d0:	4623      	mov	r3, r4
 801d1d2:	4628      	mov	r0, r5
 801d1d4:	4631      	mov	r1, r6
 801d1d6:	f7e3 fdaf 	bl	8000d38 <__aeabi_uldivmod>
 801d1da:	4603      	mov	r3, r0
 801d1dc:	460c      	mov	r4, r1
 801d1de:	461a      	mov	r2, r3
 801d1e0:	4b0e      	ldr	r3, [pc, #56]	; (801d21c <UART_SetConfig+0x6f4>)
 801d1e2:	fba3 1302 	umull	r1, r3, r3, r2
 801d1e6:	095b      	lsrs	r3, r3, #5
 801d1e8:	2164      	movs	r1, #100	; 0x64
 801d1ea:	fb01 f303 	mul.w	r3, r1, r3
 801d1ee:	1ad3      	subs	r3, r2, r3
 801d1f0:	011b      	lsls	r3, r3, #4
 801d1f2:	3332      	adds	r3, #50	; 0x32
 801d1f4:	4a09      	ldr	r2, [pc, #36]	; (801d21c <UART_SetConfig+0x6f4>)
 801d1f6:	fba2 2303 	umull	r2, r3, r2, r3
 801d1fa:	095b      	lsrs	r3, r3, #5
 801d1fc:	f003 020f 	and.w	r2, r3, #15
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	681b      	ldr	r3, [r3, #0]
 801d204:	4442      	add	r2, r8
 801d206:	609a      	str	r2, [r3, #8]
}
 801d208:	e7ff      	b.n	801d20a <UART_SetConfig+0x6e2>
 801d20a:	bf00      	nop
 801d20c:	3714      	adds	r7, #20
 801d20e:	46bd      	mov	sp, r7
 801d210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d214:	40011000 	.word	0x40011000
 801d218:	40011400 	.word	0x40011400
 801d21c:	51eb851f 	.word	0x51eb851f

0801d220 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 801d220:	b084      	sub	sp, #16
 801d222:	b480      	push	{r7}
 801d224:	b085      	sub	sp, #20
 801d226:	af00      	add	r7, sp, #0
 801d228:	6078      	str	r0, [r7, #4]
 801d22a:	f107 001c 	add.w	r0, r7, #28
 801d22e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801d232:	2300      	movs	r3, #0
 801d234:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801d236:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 801d238:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801d23a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 801d23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 801d23e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 801d240:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801d242:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 801d244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 801d246:	431a      	orrs	r2, r3
             Init.ClockDiv
 801d248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 801d24a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 801d24c:	68fa      	ldr	r2, [r7, #12]
 801d24e:	4313      	orrs	r3, r2
 801d250:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	685b      	ldr	r3, [r3, #4]
 801d256:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 801d25a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801d25e:	68fa      	ldr	r2, [r7, #12]
 801d260:	431a      	orrs	r2, r3
 801d262:	687b      	ldr	r3, [r7, #4]
 801d264:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801d266:	2300      	movs	r3, #0
}
 801d268:	4618      	mov	r0, r3
 801d26a:	3714      	adds	r7, #20
 801d26c:	46bd      	mov	sp, r7
 801d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d272:	b004      	add	sp, #16
 801d274:	4770      	bx	lr

0801d276 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 801d276:	b480      	push	{r7}
 801d278:	b083      	sub	sp, #12
 801d27a:	af00      	add	r7, sp, #0
 801d27c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801d284:	4618      	mov	r0, r3
 801d286:	370c      	adds	r7, #12
 801d288:	46bd      	mov	sp, r7
 801d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d28e:	4770      	bx	lr

0801d290 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 801d290:	b480      	push	{r7}
 801d292:	b083      	sub	sp, #12
 801d294:	af00      	add	r7, sp, #0
 801d296:	6078      	str	r0, [r7, #4]
 801d298:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 801d29a:	683b      	ldr	r3, [r7, #0]
 801d29c:	681a      	ldr	r2, [r3, #0]
 801d29e:	687b      	ldr	r3, [r7, #4]
 801d2a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801d2a4:	2300      	movs	r3, #0
}
 801d2a6:	4618      	mov	r0, r3
 801d2a8:	370c      	adds	r7, #12
 801d2aa:	46bd      	mov	sp, r7
 801d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2b0:	4770      	bx	lr

0801d2b2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 801d2b2:	b580      	push	{r7, lr}
 801d2b4:	b082      	sub	sp, #8
 801d2b6:	af00      	add	r7, sp, #0
 801d2b8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 801d2ba:	687b      	ldr	r3, [r7, #4]
 801d2bc:	2203      	movs	r2, #3
 801d2be:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 801d2c0:	2002      	movs	r0, #2
 801d2c2:	f7f8 f9bb 	bl	801563c <HAL_Delay>
  
  return HAL_OK;
 801d2c6:	2300      	movs	r3, #0
}
 801d2c8:	4618      	mov	r0, r3
 801d2ca:	3708      	adds	r7, #8
 801d2cc:	46bd      	mov	sp, r7
 801d2ce:	bd80      	pop	{r7, pc}

0801d2d0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 801d2d0:	b480      	push	{r7}
 801d2d2:	b083      	sub	sp, #12
 801d2d4:	af00      	add	r7, sp, #0
 801d2d6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 801d2d8:	687b      	ldr	r3, [r7, #4]
 801d2da:	681b      	ldr	r3, [r3, #0]
 801d2dc:	f003 0303 	and.w	r3, r3, #3
}
 801d2e0:	4618      	mov	r0, r3
 801d2e2:	370c      	adds	r7, #12
 801d2e4:	46bd      	mov	sp, r7
 801d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2ea:	4770      	bx	lr

0801d2ec <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 801d2ec:	b480      	push	{r7}
 801d2ee:	b085      	sub	sp, #20
 801d2f0:	af00      	add	r7, sp, #0
 801d2f2:	6078      	str	r0, [r7, #4]
 801d2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801d2f6:	2300      	movs	r3, #0
 801d2f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 801d2fa:	683b      	ldr	r3, [r7, #0]
 801d2fc:	681a      	ldr	r2, [r3, #0]
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801d302:	683b      	ldr	r3, [r7, #0]
 801d304:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801d306:	683b      	ldr	r3, [r7, #0]
 801d308:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801d30a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801d30c:	683b      	ldr	r3, [r7, #0]
 801d30e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 801d310:	431a      	orrs	r2, r3
                       Command->CPSM);
 801d312:	683b      	ldr	r3, [r7, #0]
 801d314:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801d316:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801d318:	68fa      	ldr	r2, [r7, #12]
 801d31a:	4313      	orrs	r3, r2
 801d31c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801d31e:	687b      	ldr	r3, [r7, #4]
 801d320:	68db      	ldr	r3, [r3, #12]
 801d322:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801d326:	f023 030f 	bic.w	r3, r3, #15
 801d32a:	68fa      	ldr	r2, [r7, #12]
 801d32c:	431a      	orrs	r2, r3
 801d32e:	687b      	ldr	r3, [r7, #4]
 801d330:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801d332:	2300      	movs	r3, #0
}
 801d334:	4618      	mov	r0, r3
 801d336:	3714      	adds	r7, #20
 801d338:	46bd      	mov	sp, r7
 801d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d33e:	4770      	bx	lr

0801d340 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 801d340:	b480      	push	{r7}
 801d342:	b083      	sub	sp, #12
 801d344:	af00      	add	r7, sp, #0
 801d346:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	691b      	ldr	r3, [r3, #16]
 801d34c:	b2db      	uxtb	r3, r3
}
 801d34e:	4618      	mov	r0, r3
 801d350:	370c      	adds	r7, #12
 801d352:	46bd      	mov	sp, r7
 801d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d358:	4770      	bx	lr

0801d35a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 801d35a:	b480      	push	{r7}
 801d35c:	b085      	sub	sp, #20
 801d35e:	af00      	add	r7, sp, #0
 801d360:	6078      	str	r0, [r7, #4]
 801d362:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 801d364:	687b      	ldr	r3, [r7, #4]
 801d366:	3314      	adds	r3, #20
 801d368:	461a      	mov	r2, r3
 801d36a:	683b      	ldr	r3, [r7, #0]
 801d36c:	4413      	add	r3, r2
 801d36e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 801d370:	68fb      	ldr	r3, [r7, #12]
 801d372:	681b      	ldr	r3, [r3, #0]
}  
 801d374:	4618      	mov	r0, r3
 801d376:	3714      	adds	r7, #20
 801d378:	46bd      	mov	sp, r7
 801d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d37e:	4770      	bx	lr

0801d380 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 801d380:	b480      	push	{r7}
 801d382:	b085      	sub	sp, #20
 801d384:	af00      	add	r7, sp, #0
 801d386:	6078      	str	r0, [r7, #4]
 801d388:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801d38a:	2300      	movs	r3, #0
 801d38c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 801d38e:	683b      	ldr	r3, [r7, #0]
 801d390:	681a      	ldr	r2, [r3, #0]
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 801d396:	683b      	ldr	r3, [r7, #0]
 801d398:	685a      	ldr	r2, [r3, #4]
 801d39a:	687b      	ldr	r3, [r7, #4]
 801d39c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801d39e:	683b      	ldr	r3, [r7, #0]
 801d3a0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801d3a2:	683b      	ldr	r3, [r7, #0]
 801d3a4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801d3a6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 801d3a8:	683b      	ldr	r3, [r7, #0]
 801d3aa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801d3ac:	431a      	orrs	r2, r3
                       Data->DPSM);
 801d3ae:	683b      	ldr	r3, [r7, #0]
 801d3b0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801d3b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801d3b4:	68fa      	ldr	r2, [r7, #12]
 801d3b6:	4313      	orrs	r3, r2
 801d3b8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801d3ba:	687b      	ldr	r3, [r7, #4]
 801d3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d3be:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801d3c2:	68fb      	ldr	r3, [r7, #12]
 801d3c4:	431a      	orrs	r2, r3
 801d3c6:	687b      	ldr	r3, [r7, #4]
 801d3c8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801d3ca:	2300      	movs	r3, #0

}
 801d3cc:	4618      	mov	r0, r3
 801d3ce:	3714      	adds	r7, #20
 801d3d0:	46bd      	mov	sp, r7
 801d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3d6:	4770      	bx	lr

0801d3d8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 801d3d8:	b580      	push	{r7, lr}
 801d3da:	b088      	sub	sp, #32
 801d3dc:	af00      	add	r7, sp, #0
 801d3de:	6078      	str	r0, [r7, #4]
 801d3e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801d3e2:	683b      	ldr	r3, [r7, #0]
 801d3e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801d3e6:	2310      	movs	r3, #16
 801d3e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801d3ea:	2340      	movs	r3, #64	; 0x40
 801d3ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801d3ee:	2300      	movs	r3, #0
 801d3f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801d3f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d3f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801d3f8:	f107 0308 	add.w	r3, r7, #8
 801d3fc:	4619      	mov	r1, r3
 801d3fe:	6878      	ldr	r0, [r7, #4]
 801d400:	f7ff ff74 	bl	801d2ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 801d404:	f241 3288 	movw	r2, #5000	; 0x1388
 801d408:	2110      	movs	r1, #16
 801d40a:	6878      	ldr	r0, [r7, #4]
 801d40c:	f000 fa40 	bl	801d890 <SDMMC_GetCmdResp1>
 801d410:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801d412:	69fb      	ldr	r3, [r7, #28]
}
 801d414:	4618      	mov	r0, r3
 801d416:	3720      	adds	r7, #32
 801d418:	46bd      	mov	sp, r7
 801d41a:	bd80      	pop	{r7, pc}

0801d41c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 801d41c:	b580      	push	{r7, lr}
 801d41e:	b088      	sub	sp, #32
 801d420:	af00      	add	r7, sp, #0
 801d422:	6078      	str	r0, [r7, #4]
 801d424:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801d426:	683b      	ldr	r3, [r7, #0]
 801d428:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801d42a:	2311      	movs	r3, #17
 801d42c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801d42e:	2340      	movs	r3, #64	; 0x40
 801d430:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801d432:	2300      	movs	r3, #0
 801d434:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801d436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d43a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801d43c:	f107 0308 	add.w	r3, r7, #8
 801d440:	4619      	mov	r1, r3
 801d442:	6878      	ldr	r0, [r7, #4]
 801d444:	f7ff ff52 	bl	801d2ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 801d448:	f241 3288 	movw	r2, #5000	; 0x1388
 801d44c:	2111      	movs	r1, #17
 801d44e:	6878      	ldr	r0, [r7, #4]
 801d450:	f000 fa1e 	bl	801d890 <SDMMC_GetCmdResp1>
 801d454:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801d456:	69fb      	ldr	r3, [r7, #28]
}
 801d458:	4618      	mov	r0, r3
 801d45a:	3720      	adds	r7, #32
 801d45c:	46bd      	mov	sp, r7
 801d45e:	bd80      	pop	{r7, pc}

0801d460 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 801d460:	b580      	push	{r7, lr}
 801d462:	b088      	sub	sp, #32
 801d464:	af00      	add	r7, sp, #0
 801d466:	6078      	str	r0, [r7, #4]
 801d468:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801d46a:	683b      	ldr	r3, [r7, #0]
 801d46c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801d46e:	2312      	movs	r3, #18
 801d470:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801d472:	2340      	movs	r3, #64	; 0x40
 801d474:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801d476:	2300      	movs	r3, #0
 801d478:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801d47a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d47e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801d480:	f107 0308 	add.w	r3, r7, #8
 801d484:	4619      	mov	r1, r3
 801d486:	6878      	ldr	r0, [r7, #4]
 801d488:	f7ff ff30 	bl	801d2ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801d48c:	f241 3288 	movw	r2, #5000	; 0x1388
 801d490:	2112      	movs	r1, #18
 801d492:	6878      	ldr	r0, [r7, #4]
 801d494:	f000 f9fc 	bl	801d890 <SDMMC_GetCmdResp1>
 801d498:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801d49a:	69fb      	ldr	r3, [r7, #28]
}
 801d49c:	4618      	mov	r0, r3
 801d49e:	3720      	adds	r7, #32
 801d4a0:	46bd      	mov	sp, r7
 801d4a2:	bd80      	pop	{r7, pc}

0801d4a4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801d4a4:	b580      	push	{r7, lr}
 801d4a6:	b088      	sub	sp, #32
 801d4a8:	af00      	add	r7, sp, #0
 801d4aa:	6078      	str	r0, [r7, #4]
 801d4ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801d4ae:	683b      	ldr	r3, [r7, #0]
 801d4b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801d4b2:	2318      	movs	r3, #24
 801d4b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801d4b6:	2340      	movs	r3, #64	; 0x40
 801d4b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801d4ba:	2300      	movs	r3, #0
 801d4bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801d4be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d4c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801d4c4:	f107 0308 	add.w	r3, r7, #8
 801d4c8:	4619      	mov	r1, r3
 801d4ca:	6878      	ldr	r0, [r7, #4]
 801d4cc:	f7ff ff0e 	bl	801d2ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 801d4d0:	f241 3288 	movw	r2, #5000	; 0x1388
 801d4d4:	2118      	movs	r1, #24
 801d4d6:	6878      	ldr	r0, [r7, #4]
 801d4d8:	f000 f9da 	bl	801d890 <SDMMC_GetCmdResp1>
 801d4dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801d4de:	69fb      	ldr	r3, [r7, #28]
}
 801d4e0:	4618      	mov	r0, r3
 801d4e2:	3720      	adds	r7, #32
 801d4e4:	46bd      	mov	sp, r7
 801d4e6:	bd80      	pop	{r7, pc}

0801d4e8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801d4e8:	b580      	push	{r7, lr}
 801d4ea:	b088      	sub	sp, #32
 801d4ec:	af00      	add	r7, sp, #0
 801d4ee:	6078      	str	r0, [r7, #4]
 801d4f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801d4f2:	683b      	ldr	r3, [r7, #0]
 801d4f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801d4f6:	2319      	movs	r3, #25
 801d4f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801d4fa:	2340      	movs	r3, #64	; 0x40
 801d4fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801d4fe:	2300      	movs	r3, #0
 801d500:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801d502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d506:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801d508:	f107 0308 	add.w	r3, r7, #8
 801d50c:	4619      	mov	r1, r3
 801d50e:	6878      	ldr	r0, [r7, #4]
 801d510:	f7ff feec 	bl	801d2ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801d514:	f241 3288 	movw	r2, #5000	; 0x1388
 801d518:	2119      	movs	r1, #25
 801d51a:	6878      	ldr	r0, [r7, #4]
 801d51c:	f000 f9b8 	bl	801d890 <SDMMC_GetCmdResp1>
 801d520:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801d522:	69fb      	ldr	r3, [r7, #28]
}
 801d524:	4618      	mov	r0, r3
 801d526:	3720      	adds	r7, #32
 801d528:	46bd      	mov	sp, r7
 801d52a:	bd80      	pop	{r7, pc}

0801d52c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 801d52c:	b580      	push	{r7, lr}
 801d52e:	b088      	sub	sp, #32
 801d530:	af00      	add	r7, sp, #0
 801d532:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801d534:	2300      	movs	r3, #0
 801d536:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801d538:	230c      	movs	r3, #12
 801d53a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801d53c:	2340      	movs	r3, #64	; 0x40
 801d53e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801d540:	2300      	movs	r3, #0
 801d542:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801d544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d548:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801d54a:	f107 0308 	add.w	r3, r7, #8
 801d54e:	4619      	mov	r1, r3
 801d550:	6878      	ldr	r0, [r7, #4]
 801d552:	f7ff fecb 	bl	801d2ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 801d556:	4a05      	ldr	r2, [pc, #20]	; (801d56c <SDMMC_CmdStopTransfer+0x40>)
 801d558:	210c      	movs	r1, #12
 801d55a:	6878      	ldr	r0, [r7, #4]
 801d55c:	f000 f998 	bl	801d890 <SDMMC_GetCmdResp1>
 801d560:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801d562:	69fb      	ldr	r3, [r7, #28]
}
 801d564:	4618      	mov	r0, r3
 801d566:	3720      	adds	r7, #32
 801d568:	46bd      	mov	sp, r7
 801d56a:	bd80      	pop	{r7, pc}
 801d56c:	05f5e100 	.word	0x05f5e100

0801d570 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 801d570:	b580      	push	{r7, lr}
 801d572:	b08a      	sub	sp, #40	; 0x28
 801d574:	af00      	add	r7, sp, #0
 801d576:	60f8      	str	r0, [r7, #12]
 801d578:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801d57c:	683b      	ldr	r3, [r7, #0]
 801d57e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801d580:	2307      	movs	r3, #7
 801d582:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801d584:	2340      	movs	r3, #64	; 0x40
 801d586:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801d588:	2300      	movs	r3, #0
 801d58a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801d58c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d590:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801d592:	f107 0310 	add.w	r3, r7, #16
 801d596:	4619      	mov	r1, r3
 801d598:	68f8      	ldr	r0, [r7, #12]
 801d59a:	f7ff fea7 	bl	801d2ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 801d59e:	f241 3288 	movw	r2, #5000	; 0x1388
 801d5a2:	2107      	movs	r1, #7
 801d5a4:	68f8      	ldr	r0, [r7, #12]
 801d5a6:	f000 f973 	bl	801d890 <SDMMC_GetCmdResp1>
 801d5aa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801d5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801d5ae:	4618      	mov	r0, r3
 801d5b0:	3728      	adds	r7, #40	; 0x28
 801d5b2:	46bd      	mov	sp, r7
 801d5b4:	bd80      	pop	{r7, pc}

0801d5b6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801d5b6:	b580      	push	{r7, lr}
 801d5b8:	b088      	sub	sp, #32
 801d5ba:	af00      	add	r7, sp, #0
 801d5bc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801d5be:	2300      	movs	r3, #0
 801d5c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801d5c2:	2300      	movs	r3, #0
 801d5c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 801d5c6:	2300      	movs	r3, #0
 801d5c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801d5ca:	2300      	movs	r3, #0
 801d5cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801d5ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d5d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801d5d4:	f107 0308 	add.w	r3, r7, #8
 801d5d8:	4619      	mov	r1, r3
 801d5da:	6878      	ldr	r0, [r7, #4]
 801d5dc:	f7ff fe86 	bl	801d2ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 801d5e0:	6878      	ldr	r0, [r7, #4]
 801d5e2:	f000 f92d 	bl	801d840 <SDMMC_GetCmdError>
 801d5e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801d5e8:	69fb      	ldr	r3, [r7, #28]
}
 801d5ea:	4618      	mov	r0, r3
 801d5ec:	3720      	adds	r7, #32
 801d5ee:	46bd      	mov	sp, r7
 801d5f0:	bd80      	pop	{r7, pc}

0801d5f2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 801d5f2:	b580      	push	{r7, lr}
 801d5f4:	b088      	sub	sp, #32
 801d5f6:	af00      	add	r7, sp, #0
 801d5f8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801d5fa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801d5fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801d600:	2308      	movs	r3, #8
 801d602:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801d604:	2340      	movs	r3, #64	; 0x40
 801d606:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801d608:	2300      	movs	r3, #0
 801d60a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801d60c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d610:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801d612:	f107 0308 	add.w	r3, r7, #8
 801d616:	4619      	mov	r1, r3
 801d618:	6878      	ldr	r0, [r7, #4]
 801d61a:	f7ff fe67 	bl	801d2ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 801d61e:	6878      	ldr	r0, [r7, #4]
 801d620:	f000 fb16 	bl	801dc50 <SDMMC_GetCmdResp7>
 801d624:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801d626:	69fb      	ldr	r3, [r7, #28]
}
 801d628:	4618      	mov	r0, r3
 801d62a:	3720      	adds	r7, #32
 801d62c:	46bd      	mov	sp, r7
 801d62e:	bd80      	pop	{r7, pc}

0801d630 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801d630:	b580      	push	{r7, lr}
 801d632:	b088      	sub	sp, #32
 801d634:	af00      	add	r7, sp, #0
 801d636:	6078      	str	r0, [r7, #4]
 801d638:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801d63a:	683b      	ldr	r3, [r7, #0]
 801d63c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801d63e:	2337      	movs	r3, #55	; 0x37
 801d640:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801d642:	2340      	movs	r3, #64	; 0x40
 801d644:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801d646:	2300      	movs	r3, #0
 801d648:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801d64a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d64e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801d650:	f107 0308 	add.w	r3, r7, #8
 801d654:	4619      	mov	r1, r3
 801d656:	6878      	ldr	r0, [r7, #4]
 801d658:	f7ff fe48 	bl	801d2ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 801d65c:	f241 3288 	movw	r2, #5000	; 0x1388
 801d660:	2137      	movs	r1, #55	; 0x37
 801d662:	6878      	ldr	r0, [r7, #4]
 801d664:	f000 f914 	bl	801d890 <SDMMC_GetCmdResp1>
 801d668:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801d66a:	69fb      	ldr	r3, [r7, #28]
}
 801d66c:	4618      	mov	r0, r3
 801d66e:	3720      	adds	r7, #32
 801d670:	46bd      	mov	sp, r7
 801d672:	bd80      	pop	{r7, pc}

0801d674 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801d674:	b580      	push	{r7, lr}
 801d676:	b088      	sub	sp, #32
 801d678:	af00      	add	r7, sp, #0
 801d67a:	6078      	str	r0, [r7, #4]
 801d67c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801d67e:	683b      	ldr	r3, [r7, #0]
 801d680:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801d684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d688:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801d68a:	2329      	movs	r3, #41	; 0x29
 801d68c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801d68e:	2340      	movs	r3, #64	; 0x40
 801d690:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801d692:	2300      	movs	r3, #0
 801d694:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801d696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d69a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801d69c:	f107 0308 	add.w	r3, r7, #8
 801d6a0:	4619      	mov	r1, r3
 801d6a2:	6878      	ldr	r0, [r7, #4]
 801d6a4:	f7ff fe22 	bl	801d2ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 801d6a8:	6878      	ldr	r0, [r7, #4]
 801d6aa:	f000 fa23 	bl	801daf4 <SDMMC_GetCmdResp3>
 801d6ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801d6b0:	69fb      	ldr	r3, [r7, #28]
}
 801d6b2:	4618      	mov	r0, r3
 801d6b4:	3720      	adds	r7, #32
 801d6b6:	46bd      	mov	sp, r7
 801d6b8:	bd80      	pop	{r7, pc}

0801d6ba <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 801d6ba:	b580      	push	{r7, lr}
 801d6bc:	b088      	sub	sp, #32
 801d6be:	af00      	add	r7, sp, #0
 801d6c0:	6078      	str	r0, [r7, #4]
 801d6c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801d6c4:	683b      	ldr	r3, [r7, #0]
 801d6c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801d6c8:	2306      	movs	r3, #6
 801d6ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801d6cc:	2340      	movs	r3, #64	; 0x40
 801d6ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801d6d0:	2300      	movs	r3, #0
 801d6d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801d6d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d6d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801d6da:	f107 0308 	add.w	r3, r7, #8
 801d6de:	4619      	mov	r1, r3
 801d6e0:	6878      	ldr	r0, [r7, #4]
 801d6e2:	f7ff fe03 	bl	801d2ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 801d6e6:	f241 3288 	movw	r2, #5000	; 0x1388
 801d6ea:	2106      	movs	r1, #6
 801d6ec:	6878      	ldr	r0, [r7, #4]
 801d6ee:	f000 f8cf 	bl	801d890 <SDMMC_GetCmdResp1>
 801d6f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801d6f4:	69fb      	ldr	r3, [r7, #28]
}
 801d6f6:	4618      	mov	r0, r3
 801d6f8:	3720      	adds	r7, #32
 801d6fa:	46bd      	mov	sp, r7
 801d6fc:	bd80      	pop	{r7, pc}

0801d6fe <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 801d6fe:	b580      	push	{r7, lr}
 801d700:	b088      	sub	sp, #32
 801d702:	af00      	add	r7, sp, #0
 801d704:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801d706:	2300      	movs	r3, #0
 801d708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801d70a:	2333      	movs	r3, #51	; 0x33
 801d70c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801d70e:	2340      	movs	r3, #64	; 0x40
 801d710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801d712:	2300      	movs	r3, #0
 801d714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801d716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d71a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801d71c:	f107 0308 	add.w	r3, r7, #8
 801d720:	4619      	mov	r1, r3
 801d722:	6878      	ldr	r0, [r7, #4]
 801d724:	f7ff fde2 	bl	801d2ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 801d728:	f241 3288 	movw	r2, #5000	; 0x1388
 801d72c:	2133      	movs	r1, #51	; 0x33
 801d72e:	6878      	ldr	r0, [r7, #4]
 801d730:	f000 f8ae 	bl	801d890 <SDMMC_GetCmdResp1>
 801d734:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801d736:	69fb      	ldr	r3, [r7, #28]
}
 801d738:	4618      	mov	r0, r3
 801d73a:	3720      	adds	r7, #32
 801d73c:	46bd      	mov	sp, r7
 801d73e:	bd80      	pop	{r7, pc}

0801d740 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 801d740:	b580      	push	{r7, lr}
 801d742:	b088      	sub	sp, #32
 801d744:	af00      	add	r7, sp, #0
 801d746:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801d748:	2300      	movs	r3, #0
 801d74a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801d74c:	2302      	movs	r3, #2
 801d74e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 801d750:	23c0      	movs	r3, #192	; 0xc0
 801d752:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801d754:	2300      	movs	r3, #0
 801d756:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801d758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d75c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801d75e:	f107 0308 	add.w	r3, r7, #8
 801d762:	4619      	mov	r1, r3
 801d764:	6878      	ldr	r0, [r7, #4]
 801d766:	f7ff fdc1 	bl	801d2ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801d76a:	6878      	ldr	r0, [r7, #4]
 801d76c:	f000 f97c 	bl	801da68 <SDMMC_GetCmdResp2>
 801d770:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801d772:	69fb      	ldr	r3, [r7, #28]
}
 801d774:	4618      	mov	r0, r3
 801d776:	3720      	adds	r7, #32
 801d778:	46bd      	mov	sp, r7
 801d77a:	bd80      	pop	{r7, pc}

0801d77c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801d77c:	b580      	push	{r7, lr}
 801d77e:	b088      	sub	sp, #32
 801d780:	af00      	add	r7, sp, #0
 801d782:	6078      	str	r0, [r7, #4]
 801d784:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801d786:	683b      	ldr	r3, [r7, #0]
 801d788:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801d78a:	2309      	movs	r3, #9
 801d78c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 801d78e:	23c0      	movs	r3, #192	; 0xc0
 801d790:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801d792:	2300      	movs	r3, #0
 801d794:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801d796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d79a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801d79c:	f107 0308 	add.w	r3, r7, #8
 801d7a0:	4619      	mov	r1, r3
 801d7a2:	6878      	ldr	r0, [r7, #4]
 801d7a4:	f7ff fda2 	bl	801d2ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801d7a8:	6878      	ldr	r0, [r7, #4]
 801d7aa:	f000 f95d 	bl	801da68 <SDMMC_GetCmdResp2>
 801d7ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801d7b0:	69fb      	ldr	r3, [r7, #28]
}
 801d7b2:	4618      	mov	r0, r3
 801d7b4:	3720      	adds	r7, #32
 801d7b6:	46bd      	mov	sp, r7
 801d7b8:	bd80      	pop	{r7, pc}

0801d7ba <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 801d7ba:	b580      	push	{r7, lr}
 801d7bc:	b088      	sub	sp, #32
 801d7be:	af00      	add	r7, sp, #0
 801d7c0:	6078      	str	r0, [r7, #4]
 801d7c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801d7c4:	2300      	movs	r3, #0
 801d7c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801d7c8:	2303      	movs	r3, #3
 801d7ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801d7cc:	2340      	movs	r3, #64	; 0x40
 801d7ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801d7d0:	2300      	movs	r3, #0
 801d7d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801d7d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d7d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801d7da:	f107 0308 	add.w	r3, r7, #8
 801d7de:	4619      	mov	r1, r3
 801d7e0:	6878      	ldr	r0, [r7, #4]
 801d7e2:	f7ff fd83 	bl	801d2ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801d7e6:	683a      	ldr	r2, [r7, #0]
 801d7e8:	2103      	movs	r1, #3
 801d7ea:	6878      	ldr	r0, [r7, #4]
 801d7ec:	f000 f9bc 	bl	801db68 <SDMMC_GetCmdResp6>
 801d7f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801d7f2:	69fb      	ldr	r3, [r7, #28]
}
 801d7f4:	4618      	mov	r0, r3
 801d7f6:	3720      	adds	r7, #32
 801d7f8:	46bd      	mov	sp, r7
 801d7fa:	bd80      	pop	{r7, pc}

0801d7fc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801d7fc:	b580      	push	{r7, lr}
 801d7fe:	b088      	sub	sp, #32
 801d800:	af00      	add	r7, sp, #0
 801d802:	6078      	str	r0, [r7, #4]
 801d804:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801d806:	683b      	ldr	r3, [r7, #0]
 801d808:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801d80a:	230d      	movs	r3, #13
 801d80c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801d80e:	2340      	movs	r3, #64	; 0x40
 801d810:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801d812:	2300      	movs	r3, #0
 801d814:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801d816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d81a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801d81c:	f107 0308 	add.w	r3, r7, #8
 801d820:	4619      	mov	r1, r3
 801d822:	6878      	ldr	r0, [r7, #4]
 801d824:	f7ff fd62 	bl	801d2ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 801d828:	f241 3288 	movw	r2, #5000	; 0x1388
 801d82c:	210d      	movs	r1, #13
 801d82e:	6878      	ldr	r0, [r7, #4]
 801d830:	f000 f82e 	bl	801d890 <SDMMC_GetCmdResp1>
 801d834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801d836:	69fb      	ldr	r3, [r7, #28]
}
 801d838:	4618      	mov	r0, r3
 801d83a:	3720      	adds	r7, #32
 801d83c:	46bd      	mov	sp, r7
 801d83e:	bd80      	pop	{r7, pc}

0801d840 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 801d840:	b490      	push	{r4, r7}
 801d842:	b082      	sub	sp, #8
 801d844:	af00      	add	r7, sp, #0
 801d846:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801d848:	4b0f      	ldr	r3, [pc, #60]	; (801d888 <SDMMC_GetCmdError+0x48>)
 801d84a:	681b      	ldr	r3, [r3, #0]
 801d84c:	4a0f      	ldr	r2, [pc, #60]	; (801d88c <SDMMC_GetCmdError+0x4c>)
 801d84e:	fba2 2303 	umull	r2, r3, r2, r3
 801d852:	0a5b      	lsrs	r3, r3, #9
 801d854:	f241 3288 	movw	r2, #5000	; 0x1388
 801d858:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801d85c:	4623      	mov	r3, r4
 801d85e:	1e5c      	subs	r4, r3, #1
 801d860:	2b00      	cmp	r3, #0
 801d862:	d102      	bne.n	801d86a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801d864:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801d868:	e009      	b.n	801d87e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 801d86a:	687b      	ldr	r3, [r7, #4]
 801d86c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d86e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d872:	2b00      	cmp	r3, #0
 801d874:	d0f2      	beq.n	801d85c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801d876:	687b      	ldr	r3, [r7, #4]
 801d878:	22c5      	movs	r2, #197	; 0xc5
 801d87a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 801d87c:	2300      	movs	r3, #0
}
 801d87e:	4618      	mov	r0, r3
 801d880:	3708      	adds	r7, #8
 801d882:	46bd      	mov	sp, r7
 801d884:	bc90      	pop	{r4, r7}
 801d886:	4770      	bx	lr
 801d888:	20000698 	.word	0x20000698
 801d88c:	10624dd3 	.word	0x10624dd3

0801d890 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 801d890:	b590      	push	{r4, r7, lr}
 801d892:	b087      	sub	sp, #28
 801d894:	af00      	add	r7, sp, #0
 801d896:	60f8      	str	r0, [r7, #12]
 801d898:	460b      	mov	r3, r1
 801d89a:	607a      	str	r2, [r7, #4]
 801d89c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801d89e:	4b6f      	ldr	r3, [pc, #444]	; (801da5c <SDMMC_GetCmdResp1+0x1cc>)
 801d8a0:	681b      	ldr	r3, [r3, #0]
 801d8a2:	4a6f      	ldr	r2, [pc, #444]	; (801da60 <SDMMC_GetCmdResp1+0x1d0>)
 801d8a4:	fba2 2303 	umull	r2, r3, r2, r3
 801d8a8:	0a5b      	lsrs	r3, r3, #9
 801d8aa:	687a      	ldr	r2, [r7, #4]
 801d8ac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801d8b0:	4623      	mov	r3, r4
 801d8b2:	1e5c      	subs	r4, r3, #1
 801d8b4:	2b00      	cmp	r3, #0
 801d8b6:	d102      	bne.n	801d8be <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801d8b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801d8bc:	e0c9      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 801d8be:	68fb      	ldr	r3, [r7, #12]
 801d8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d8c2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801d8c4:	697b      	ldr	r3, [r7, #20]
 801d8c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	d0f0      	beq.n	801d8b0 <SDMMC_GetCmdResp1+0x20>
 801d8ce:	697b      	ldr	r3, [r7, #20]
 801d8d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801d8d4:	2b00      	cmp	r3, #0
 801d8d6:	d1eb      	bne.n	801d8b0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801d8d8:	68fb      	ldr	r3, [r7, #12]
 801d8da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d8dc:	f003 0304 	and.w	r3, r3, #4
 801d8e0:	2b00      	cmp	r3, #0
 801d8e2:	d004      	beq.n	801d8ee <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801d8e4:	68fb      	ldr	r3, [r7, #12]
 801d8e6:	2204      	movs	r2, #4
 801d8e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801d8ea:	2304      	movs	r3, #4
 801d8ec:	e0b1      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801d8ee:	68fb      	ldr	r3, [r7, #12]
 801d8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d8f2:	f003 0301 	and.w	r3, r3, #1
 801d8f6:	2b00      	cmp	r3, #0
 801d8f8:	d004      	beq.n	801d904 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801d8fa:	68fb      	ldr	r3, [r7, #12]
 801d8fc:	2201      	movs	r2, #1
 801d8fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801d900:	2301      	movs	r3, #1
 801d902:	e0a6      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801d904:	68fb      	ldr	r3, [r7, #12]
 801d906:	22c5      	movs	r2, #197	; 0xc5
 801d908:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801d90a:	68f8      	ldr	r0, [r7, #12]
 801d90c:	f7ff fd18 	bl	801d340 <SDIO_GetCommandResponse>
 801d910:	4603      	mov	r3, r0
 801d912:	461a      	mov	r2, r3
 801d914:	7afb      	ldrb	r3, [r7, #11]
 801d916:	4293      	cmp	r3, r2
 801d918:	d001      	beq.n	801d91e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801d91a:	2301      	movs	r3, #1
 801d91c:	e099      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 801d91e:	2100      	movs	r1, #0
 801d920:	68f8      	ldr	r0, [r7, #12]
 801d922:	f7ff fd1a 	bl	801d35a <SDIO_GetResponse>
 801d926:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801d928:	693a      	ldr	r2, [r7, #16]
 801d92a:	4b4e      	ldr	r3, [pc, #312]	; (801da64 <SDMMC_GetCmdResp1+0x1d4>)
 801d92c:	4013      	ands	r3, r2
 801d92e:	2b00      	cmp	r3, #0
 801d930:	d101      	bne.n	801d936 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 801d932:	2300      	movs	r3, #0
 801d934:	e08d      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801d936:	693b      	ldr	r3, [r7, #16]
 801d938:	2b00      	cmp	r3, #0
 801d93a:	da02      	bge.n	801d942 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801d93c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801d940:	e087      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801d942:	693b      	ldr	r3, [r7, #16]
 801d944:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801d948:	2b00      	cmp	r3, #0
 801d94a:	d001      	beq.n	801d950 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801d94c:	2340      	movs	r3, #64	; 0x40
 801d94e:	e080      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801d950:	693b      	ldr	r3, [r7, #16]
 801d952:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d956:	2b00      	cmp	r3, #0
 801d958:	d001      	beq.n	801d95e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801d95a:	2380      	movs	r3, #128	; 0x80
 801d95c:	e079      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801d95e:	693b      	ldr	r3, [r7, #16]
 801d960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d964:	2b00      	cmp	r3, #0
 801d966:	d002      	beq.n	801d96e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801d968:	f44f 7380 	mov.w	r3, #256	; 0x100
 801d96c:	e071      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801d96e:	693b      	ldr	r3, [r7, #16]
 801d970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d974:	2b00      	cmp	r3, #0
 801d976:	d002      	beq.n	801d97e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801d978:	f44f 7300 	mov.w	r3, #512	; 0x200
 801d97c:	e069      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801d97e:	693b      	ldr	r3, [r7, #16]
 801d980:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801d984:	2b00      	cmp	r3, #0
 801d986:	d002      	beq.n	801d98e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801d988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d98c:	e061      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801d98e:	693b      	ldr	r3, [r7, #16]
 801d990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801d994:	2b00      	cmp	r3, #0
 801d996:	d002      	beq.n	801d99e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801d998:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d99c:	e059      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801d99e:	693b      	ldr	r3, [r7, #16]
 801d9a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d9a4:	2b00      	cmp	r3, #0
 801d9a6:	d002      	beq.n	801d9ae <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801d9a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d9ac:	e051      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801d9ae:	693b      	ldr	r3, [r7, #16]
 801d9b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d9b4:	2b00      	cmp	r3, #0
 801d9b6:	d002      	beq.n	801d9be <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801d9b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801d9bc:	e049      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801d9be:	693b      	ldr	r3, [r7, #16]
 801d9c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	d002      	beq.n	801d9ce <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801d9c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801d9cc:	e041      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801d9ce:	693b      	ldr	r3, [r7, #16]
 801d9d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d9d4:	2b00      	cmp	r3, #0
 801d9d6:	d002      	beq.n	801d9de <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 801d9d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d9dc:	e039      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801d9de:	693b      	ldr	r3, [r7, #16]
 801d9e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801d9e4:	2b00      	cmp	r3, #0
 801d9e6:	d002      	beq.n	801d9ee <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801d9e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801d9ec:	e031      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801d9ee:	693b      	ldr	r3, [r7, #16]
 801d9f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d9f4:	2b00      	cmp	r3, #0
 801d9f6:	d002      	beq.n	801d9fe <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801d9f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801d9fc:	e029      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801d9fe:	693b      	ldr	r3, [r7, #16]
 801da00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801da04:	2b00      	cmp	r3, #0
 801da06:	d002      	beq.n	801da0e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801da08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801da0c:	e021      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801da0e:	693b      	ldr	r3, [r7, #16]
 801da10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801da14:	2b00      	cmp	r3, #0
 801da16:	d002      	beq.n	801da1e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801da18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801da1c:	e019      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801da1e:	693b      	ldr	r3, [r7, #16]
 801da20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801da24:	2b00      	cmp	r3, #0
 801da26:	d002      	beq.n	801da2e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801da28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801da2c:	e011      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801da2e:	693b      	ldr	r3, [r7, #16]
 801da30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801da34:	2b00      	cmp	r3, #0
 801da36:	d002      	beq.n	801da3e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801da38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801da3c:	e009      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801da3e:	693b      	ldr	r3, [r7, #16]
 801da40:	f003 0308 	and.w	r3, r3, #8
 801da44:	2b00      	cmp	r3, #0
 801da46:	d002      	beq.n	801da4e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801da48:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801da4c:	e001      	b.n	801da52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801da4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801da52:	4618      	mov	r0, r3
 801da54:	371c      	adds	r7, #28
 801da56:	46bd      	mov	sp, r7
 801da58:	bd90      	pop	{r4, r7, pc}
 801da5a:	bf00      	nop
 801da5c:	20000698 	.word	0x20000698
 801da60:	10624dd3 	.word	0x10624dd3
 801da64:	fdffe008 	.word	0xfdffe008

0801da68 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 801da68:	b490      	push	{r4, r7}
 801da6a:	b084      	sub	sp, #16
 801da6c:	af00      	add	r7, sp, #0
 801da6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801da70:	4b1e      	ldr	r3, [pc, #120]	; (801daec <SDMMC_GetCmdResp2+0x84>)
 801da72:	681b      	ldr	r3, [r3, #0]
 801da74:	4a1e      	ldr	r2, [pc, #120]	; (801daf0 <SDMMC_GetCmdResp2+0x88>)
 801da76:	fba2 2303 	umull	r2, r3, r2, r3
 801da7a:	0a5b      	lsrs	r3, r3, #9
 801da7c:	f241 3288 	movw	r2, #5000	; 0x1388
 801da80:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801da84:	4623      	mov	r3, r4
 801da86:	1e5c      	subs	r4, r3, #1
 801da88:	2b00      	cmp	r3, #0
 801da8a:	d102      	bne.n	801da92 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801da8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801da90:	e026      	b.n	801dae0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 801da92:	687b      	ldr	r3, [r7, #4]
 801da94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da96:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801da98:	68fb      	ldr	r3, [r7, #12]
 801da9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801da9e:	2b00      	cmp	r3, #0
 801daa0:	d0f0      	beq.n	801da84 <SDMMC_GetCmdResp2+0x1c>
 801daa2:	68fb      	ldr	r3, [r7, #12]
 801daa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801daa8:	2b00      	cmp	r3, #0
 801daaa:	d1eb      	bne.n	801da84 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dab0:	f003 0304 	and.w	r3, r3, #4
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	d004      	beq.n	801dac2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	2204      	movs	r2, #4
 801dabc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801dabe:	2304      	movs	r3, #4
 801dac0:	e00e      	b.n	801dae0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801dac2:	687b      	ldr	r3, [r7, #4]
 801dac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dac6:	f003 0301 	and.w	r3, r3, #1
 801daca:	2b00      	cmp	r3, #0
 801dacc:	d004      	beq.n	801dad8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801dace:	687b      	ldr	r3, [r7, #4]
 801dad0:	2201      	movs	r2, #1
 801dad2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801dad4:	2301      	movs	r3, #1
 801dad6:	e003      	b.n	801dae0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801dad8:	687b      	ldr	r3, [r7, #4]
 801dada:	22c5      	movs	r2, #197	; 0xc5
 801dadc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801dade:	2300      	movs	r3, #0
}
 801dae0:	4618      	mov	r0, r3
 801dae2:	3710      	adds	r7, #16
 801dae4:	46bd      	mov	sp, r7
 801dae6:	bc90      	pop	{r4, r7}
 801dae8:	4770      	bx	lr
 801daea:	bf00      	nop
 801daec:	20000698 	.word	0x20000698
 801daf0:	10624dd3 	.word	0x10624dd3

0801daf4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 801daf4:	b490      	push	{r4, r7}
 801daf6:	b084      	sub	sp, #16
 801daf8:	af00      	add	r7, sp, #0
 801dafa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801dafc:	4b18      	ldr	r3, [pc, #96]	; (801db60 <SDMMC_GetCmdResp3+0x6c>)
 801dafe:	681b      	ldr	r3, [r3, #0]
 801db00:	4a18      	ldr	r2, [pc, #96]	; (801db64 <SDMMC_GetCmdResp3+0x70>)
 801db02:	fba2 2303 	umull	r2, r3, r2, r3
 801db06:	0a5b      	lsrs	r3, r3, #9
 801db08:	f241 3288 	movw	r2, #5000	; 0x1388
 801db0c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801db10:	4623      	mov	r3, r4
 801db12:	1e5c      	subs	r4, r3, #1
 801db14:	2b00      	cmp	r3, #0
 801db16:	d102      	bne.n	801db1e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801db18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801db1c:	e01b      	b.n	801db56 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 801db1e:	687b      	ldr	r3, [r7, #4]
 801db20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801db22:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801db24:	68fb      	ldr	r3, [r7, #12]
 801db26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801db2a:	2b00      	cmp	r3, #0
 801db2c:	d0f0      	beq.n	801db10 <SDMMC_GetCmdResp3+0x1c>
 801db2e:	68fb      	ldr	r3, [r7, #12]
 801db30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801db34:	2b00      	cmp	r3, #0
 801db36:	d1eb      	bne.n	801db10 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801db3c:	f003 0304 	and.w	r3, r3, #4
 801db40:	2b00      	cmp	r3, #0
 801db42:	d004      	beq.n	801db4e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801db44:	687b      	ldr	r3, [r7, #4]
 801db46:	2204      	movs	r2, #4
 801db48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801db4a:	2304      	movs	r3, #4
 801db4c:	e003      	b.n	801db56 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801db4e:	687b      	ldr	r3, [r7, #4]
 801db50:	22c5      	movs	r2, #197	; 0xc5
 801db52:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801db54:	2300      	movs	r3, #0
}
 801db56:	4618      	mov	r0, r3
 801db58:	3710      	adds	r7, #16
 801db5a:	46bd      	mov	sp, r7
 801db5c:	bc90      	pop	{r4, r7}
 801db5e:	4770      	bx	lr
 801db60:	20000698 	.word	0x20000698
 801db64:	10624dd3 	.word	0x10624dd3

0801db68 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801db68:	b590      	push	{r4, r7, lr}
 801db6a:	b087      	sub	sp, #28
 801db6c:	af00      	add	r7, sp, #0
 801db6e:	60f8      	str	r0, [r7, #12]
 801db70:	460b      	mov	r3, r1
 801db72:	607a      	str	r2, [r7, #4]
 801db74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801db76:	4b34      	ldr	r3, [pc, #208]	; (801dc48 <SDMMC_GetCmdResp6+0xe0>)
 801db78:	681b      	ldr	r3, [r3, #0]
 801db7a:	4a34      	ldr	r2, [pc, #208]	; (801dc4c <SDMMC_GetCmdResp6+0xe4>)
 801db7c:	fba2 2303 	umull	r2, r3, r2, r3
 801db80:	0a5b      	lsrs	r3, r3, #9
 801db82:	f241 3288 	movw	r2, #5000	; 0x1388
 801db86:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801db8a:	4623      	mov	r3, r4
 801db8c:	1e5c      	subs	r4, r3, #1
 801db8e:	2b00      	cmp	r3, #0
 801db90:	d102      	bne.n	801db98 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 801db92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801db96:	e052      	b.n	801dc3e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 801db98:	68fb      	ldr	r3, [r7, #12]
 801db9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801db9c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801db9e:	697b      	ldr	r3, [r7, #20]
 801dba0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801dba4:	2b00      	cmp	r3, #0
 801dba6:	d0f0      	beq.n	801db8a <SDMMC_GetCmdResp6+0x22>
 801dba8:	697b      	ldr	r3, [r7, #20]
 801dbaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801dbae:	2b00      	cmp	r3, #0
 801dbb0:	d1eb      	bne.n	801db8a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801dbb2:	68fb      	ldr	r3, [r7, #12]
 801dbb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dbb6:	f003 0304 	and.w	r3, r3, #4
 801dbba:	2b00      	cmp	r3, #0
 801dbbc:	d004      	beq.n	801dbc8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801dbbe:	68fb      	ldr	r3, [r7, #12]
 801dbc0:	2204      	movs	r2, #4
 801dbc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801dbc4:	2304      	movs	r3, #4
 801dbc6:	e03a      	b.n	801dc3e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801dbc8:	68fb      	ldr	r3, [r7, #12]
 801dbca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dbcc:	f003 0301 	and.w	r3, r3, #1
 801dbd0:	2b00      	cmp	r3, #0
 801dbd2:	d004      	beq.n	801dbde <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801dbd4:	68fb      	ldr	r3, [r7, #12]
 801dbd6:	2201      	movs	r2, #1
 801dbd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801dbda:	2301      	movs	r3, #1
 801dbdc:	e02f      	b.n	801dc3e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801dbde:	68f8      	ldr	r0, [r7, #12]
 801dbe0:	f7ff fbae 	bl	801d340 <SDIO_GetCommandResponse>
 801dbe4:	4603      	mov	r3, r0
 801dbe6:	461a      	mov	r2, r3
 801dbe8:	7afb      	ldrb	r3, [r7, #11]
 801dbea:	4293      	cmp	r3, r2
 801dbec:	d001      	beq.n	801dbf2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801dbee:	2301      	movs	r3, #1
 801dbf0:	e025      	b.n	801dc3e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801dbf2:	68fb      	ldr	r3, [r7, #12]
 801dbf4:	22c5      	movs	r2, #197	; 0xc5
 801dbf6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 801dbf8:	2100      	movs	r1, #0
 801dbfa:	68f8      	ldr	r0, [r7, #12]
 801dbfc:	f7ff fbad 	bl	801d35a <SDIO_GetResponse>
 801dc00:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801dc02:	693b      	ldr	r3, [r7, #16]
 801dc04:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 801dc08:	2b00      	cmp	r3, #0
 801dc0a:	d106      	bne.n	801dc1a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 801dc0c:	693b      	ldr	r3, [r7, #16]
 801dc0e:	0c1b      	lsrs	r3, r3, #16
 801dc10:	b29a      	uxth	r2, r3
 801dc12:	687b      	ldr	r3, [r7, #4]
 801dc14:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801dc16:	2300      	movs	r3, #0
 801dc18:	e011      	b.n	801dc3e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801dc1a:	693b      	ldr	r3, [r7, #16]
 801dc1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	d002      	beq.n	801dc2a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801dc24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801dc28:	e009      	b.n	801dc3e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801dc2a:	693b      	ldr	r3, [r7, #16]
 801dc2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801dc30:	2b00      	cmp	r3, #0
 801dc32:	d002      	beq.n	801dc3a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801dc34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801dc38:	e001      	b.n	801dc3e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801dc3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801dc3e:	4618      	mov	r0, r3
 801dc40:	371c      	adds	r7, #28
 801dc42:	46bd      	mov	sp, r7
 801dc44:	bd90      	pop	{r4, r7, pc}
 801dc46:	bf00      	nop
 801dc48:	20000698 	.word	0x20000698
 801dc4c:	10624dd3 	.word	0x10624dd3

0801dc50 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 801dc50:	b490      	push	{r4, r7}
 801dc52:	b084      	sub	sp, #16
 801dc54:	af00      	add	r7, sp, #0
 801dc56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801dc58:	4b21      	ldr	r3, [pc, #132]	; (801dce0 <SDMMC_GetCmdResp7+0x90>)
 801dc5a:	681b      	ldr	r3, [r3, #0]
 801dc5c:	4a21      	ldr	r2, [pc, #132]	; (801dce4 <SDMMC_GetCmdResp7+0x94>)
 801dc5e:	fba2 2303 	umull	r2, r3, r2, r3
 801dc62:	0a5b      	lsrs	r3, r3, #9
 801dc64:	f241 3288 	movw	r2, #5000	; 0x1388
 801dc68:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801dc6c:	4623      	mov	r3, r4
 801dc6e:	1e5c      	subs	r4, r3, #1
 801dc70:	2b00      	cmp	r3, #0
 801dc72:	d102      	bne.n	801dc7a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801dc74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801dc78:	e02c      	b.n	801dcd4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 801dc7a:	687b      	ldr	r3, [r7, #4]
 801dc7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dc7e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801dc80:	68fb      	ldr	r3, [r7, #12]
 801dc82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801dc86:	2b00      	cmp	r3, #0
 801dc88:	d0f0      	beq.n	801dc6c <SDMMC_GetCmdResp7+0x1c>
 801dc8a:	68fb      	ldr	r3, [r7, #12]
 801dc8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801dc90:	2b00      	cmp	r3, #0
 801dc92:	d1eb      	bne.n	801dc6c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801dc94:	687b      	ldr	r3, [r7, #4]
 801dc96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dc98:	f003 0304 	and.w	r3, r3, #4
 801dc9c:	2b00      	cmp	r3, #0
 801dc9e:	d004      	beq.n	801dcaa <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801dca0:	687b      	ldr	r3, [r7, #4]
 801dca2:	2204      	movs	r2, #4
 801dca4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801dca6:	2304      	movs	r3, #4
 801dca8:	e014      	b.n	801dcd4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801dcaa:	687b      	ldr	r3, [r7, #4]
 801dcac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dcae:	f003 0301 	and.w	r3, r3, #1
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	d004      	beq.n	801dcc0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801dcb6:	687b      	ldr	r3, [r7, #4]
 801dcb8:	2201      	movs	r2, #1
 801dcba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801dcbc:	2301      	movs	r3, #1
 801dcbe:	e009      	b.n	801dcd4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 801dcc0:	687b      	ldr	r3, [r7, #4]
 801dcc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dcc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801dcc8:	2b00      	cmp	r3, #0
 801dcca:	d002      	beq.n	801dcd2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 801dccc:	687b      	ldr	r3, [r7, #4]
 801dcce:	2240      	movs	r2, #64	; 0x40
 801dcd0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801dcd2:	2300      	movs	r3, #0
  
}
 801dcd4:	4618      	mov	r0, r3
 801dcd6:	3710      	adds	r7, #16
 801dcd8:	46bd      	mov	sp, r7
 801dcda:	bc90      	pop	{r4, r7}
 801dcdc:	4770      	bx	lr
 801dcde:	bf00      	nop
 801dce0:	20000698 	.word	0x20000698
 801dce4:	10624dd3 	.word	0x10624dd3

0801dce8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801dce8:	b580      	push	{r7, lr}
 801dcea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801dcec:	4904      	ldr	r1, [pc, #16]	; (801dd00 <MX_FATFS_Init+0x18>)
 801dcee:	4805      	ldr	r0, [pc, #20]	; (801dd04 <MX_FATFS_Init+0x1c>)
 801dcf0:	f003 f982 	bl	8020ff8 <FATFS_LinkDriver>
 801dcf4:	4603      	mov	r3, r0
 801dcf6:	461a      	mov	r2, r3
 801dcf8:	4b03      	ldr	r3, [pc, #12]	; (801dd08 <MX_FATFS_Init+0x20>)
 801dcfa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801dcfc:	bf00      	nop
 801dcfe:	bd80      	pop	{r7, pc}
 801dd00:	20011150 	.word	0x20011150
 801dd04:	0802e35c 	.word	0x0802e35c
 801dd08:	2001114c 	.word	0x2001114c

0801dd0c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801dd0c:	b480      	push	{r7}
 801dd0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801dd10:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801dd12:	4618      	mov	r0, r3
 801dd14:	46bd      	mov	sp, r7
 801dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd1a:	4770      	bx	lr

0801dd1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801dd1c:	b580      	push	{r7, lr}
 801dd1e:	b082      	sub	sp, #8
 801dd20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801dd22:	2300      	movs	r3, #0
 801dd24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801dd26:	f000 f896 	bl	801de56 <BSP_SD_IsDetected>
 801dd2a:	4603      	mov	r3, r0
 801dd2c:	2b01      	cmp	r3, #1
 801dd2e:	d001      	beq.n	801dd34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 801dd30:	2301      	movs	r3, #1
 801dd32:	e012      	b.n	801dd5a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 801dd34:	480b      	ldr	r0, [pc, #44]	; (801dd64 <BSP_SD_Init+0x48>)
 801dd36:	f7fb fe49 	bl	80199cc <HAL_SD_Init>
 801dd3a:	4603      	mov	r3, r0
 801dd3c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801dd3e:	79fb      	ldrb	r3, [r7, #7]
 801dd40:	2b00      	cmp	r3, #0
 801dd42:	d109      	bne.n	801dd58 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 801dd44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801dd48:	4806      	ldr	r0, [pc, #24]	; (801dd64 <BSP_SD_Init+0x48>)
 801dd4a:	f7fc fc09 	bl	801a560 <HAL_SD_ConfigWideBusOperation>
 801dd4e:	4603      	mov	r3, r0
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	d001      	beq.n	801dd58 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801dd54:	2301      	movs	r3, #1
 801dd56:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801dd58:	79fb      	ldrb	r3, [r7, #7]
}
 801dd5a:	4618      	mov	r0, r3
 801dd5c:	3708      	adds	r7, #8
 801dd5e:	46bd      	mov	sp, r7
 801dd60:	bd80      	pop	{r7, pc}
 801dd62:	bf00      	nop
 801dd64:	20010dc4 	.word	0x20010dc4

0801dd68 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801dd68:	b580      	push	{r7, lr}
 801dd6a:	b086      	sub	sp, #24
 801dd6c:	af00      	add	r7, sp, #0
 801dd6e:	60f8      	str	r0, [r7, #12]
 801dd70:	60b9      	str	r1, [r7, #8]
 801dd72:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801dd74:	2300      	movs	r3, #0
 801dd76:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801dd78:	687b      	ldr	r3, [r7, #4]
 801dd7a:	68ba      	ldr	r2, [r7, #8]
 801dd7c:	68f9      	ldr	r1, [r7, #12]
 801dd7e:	4806      	ldr	r0, [pc, #24]	; (801dd98 <BSP_SD_ReadBlocks_DMA+0x30>)
 801dd80:	f7fb feb4 	bl	8019aec <HAL_SD_ReadBlocks_DMA>
 801dd84:	4603      	mov	r3, r0
 801dd86:	2b00      	cmp	r3, #0
 801dd88:	d001      	beq.n	801dd8e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801dd8a:	2301      	movs	r3, #1
 801dd8c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801dd8e:	7dfb      	ldrb	r3, [r7, #23]
}
 801dd90:	4618      	mov	r0, r3
 801dd92:	3718      	adds	r7, #24
 801dd94:	46bd      	mov	sp, r7
 801dd96:	bd80      	pop	{r7, pc}
 801dd98:	20010dc4 	.word	0x20010dc4

0801dd9c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801dd9c:	b580      	push	{r7, lr}
 801dd9e:	b086      	sub	sp, #24
 801dda0:	af00      	add	r7, sp, #0
 801dda2:	60f8      	str	r0, [r7, #12]
 801dda4:	60b9      	str	r1, [r7, #8]
 801dda6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801dda8:	2300      	movs	r3, #0
 801ddaa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801ddac:	687b      	ldr	r3, [r7, #4]
 801ddae:	68ba      	ldr	r2, [r7, #8]
 801ddb0:	68f9      	ldr	r1, [r7, #12]
 801ddb2:	4806      	ldr	r0, [pc, #24]	; (801ddcc <BSP_SD_WriteBlocks_DMA+0x30>)
 801ddb4:	f7fb ff84 	bl	8019cc0 <HAL_SD_WriteBlocks_DMA>
 801ddb8:	4603      	mov	r3, r0
 801ddba:	2b00      	cmp	r3, #0
 801ddbc:	d001      	beq.n	801ddc2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801ddbe:	2301      	movs	r3, #1
 801ddc0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801ddc2:	7dfb      	ldrb	r3, [r7, #23]
}
 801ddc4:	4618      	mov	r0, r3
 801ddc6:	3718      	adds	r7, #24
 801ddc8:	46bd      	mov	sp, r7
 801ddca:	bd80      	pop	{r7, pc}
 801ddcc:	20010dc4 	.word	0x20010dc4

0801ddd0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801ddd0:	b580      	push	{r7, lr}
 801ddd2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801ddd4:	4805      	ldr	r0, [pc, #20]	; (801ddec <BSP_SD_GetCardState+0x1c>)
 801ddd6:	f7fc fc3f 	bl	801a658 <HAL_SD_GetCardState>
 801ddda:	4603      	mov	r3, r0
 801dddc:	2b04      	cmp	r3, #4
 801ddde:	bf14      	ite	ne
 801dde0:	2301      	movne	r3, #1
 801dde2:	2300      	moveq	r3, #0
 801dde4:	b2db      	uxtb	r3, r3
}
 801dde6:	4618      	mov	r0, r3
 801dde8:	bd80      	pop	{r7, pc}
 801ddea:	bf00      	nop
 801ddec:	20010dc4 	.word	0x20010dc4

0801ddf0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801ddf0:	b580      	push	{r7, lr}
 801ddf2:	b082      	sub	sp, #8
 801ddf4:	af00      	add	r7, sp, #0
 801ddf6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 801ddf8:	6879      	ldr	r1, [r7, #4]
 801ddfa:	4803      	ldr	r0, [pc, #12]	; (801de08 <BSP_SD_GetCardInfo+0x18>)
 801ddfc:	f7fc fb84 	bl	801a508 <HAL_SD_GetCardInfo>
}
 801de00:	bf00      	nop
 801de02:	3708      	adds	r7, #8
 801de04:	46bd      	mov	sp, r7
 801de06:	bd80      	pop	{r7, pc}
 801de08:	20010dc4 	.word	0x20010dc4

0801de0c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 801de0c:	b580      	push	{r7, lr}
 801de0e:	b082      	sub	sp, #8
 801de10:	af00      	add	r7, sp, #0
 801de12:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 801de14:	f000 f818 	bl	801de48 <BSP_SD_AbortCallback>
}
 801de18:	bf00      	nop
 801de1a:	3708      	adds	r7, #8
 801de1c:	46bd      	mov	sp, r7
 801de1e:	bd80      	pop	{r7, pc}

0801de20 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801de20:	b580      	push	{r7, lr}
 801de22:	b082      	sub	sp, #8
 801de24:	af00      	add	r7, sp, #0
 801de26:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801de28:	f000 f998 	bl	801e15c <BSP_SD_WriteCpltCallback>
}
 801de2c:	bf00      	nop
 801de2e:	3708      	adds	r7, #8
 801de30:	46bd      	mov	sp, r7
 801de32:	bd80      	pop	{r7, pc}

0801de34 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801de34:	b580      	push	{r7, lr}
 801de36:	b082      	sub	sp, #8
 801de38:	af00      	add	r7, sp, #0
 801de3a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801de3c:	f000 f9a0 	bl	801e180 <BSP_SD_ReadCpltCallback>
}
 801de40:	bf00      	nop
 801de42:	3708      	adds	r7, #8
 801de44:	46bd      	mov	sp, r7
 801de46:	bd80      	pop	{r7, pc}

0801de48 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 801de48:	b480      	push	{r7}
 801de4a:	af00      	add	r7, sp, #0

}
 801de4c:	bf00      	nop
 801de4e:	46bd      	mov	sp, r7
 801de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de54:	4770      	bx	lr

0801de56 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801de56:	b480      	push	{r7}
 801de58:	b083      	sub	sp, #12
 801de5a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801de5c:	2301      	movs	r3, #1
 801de5e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 801de60:	79fb      	ldrb	r3, [r7, #7]
 801de62:	b2db      	uxtb	r3, r3
}
 801de64:	4618      	mov	r0, r3
 801de66:	370c      	adds	r7, #12
 801de68:	46bd      	mov	sp, r7
 801de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de6e:	4770      	bx	lr

0801de70 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801de70:	b580      	push	{r7, lr}
 801de72:	b084      	sub	sp, #16
 801de74:	af00      	add	r7, sp, #0
 801de76:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 801de78:	f003 fabe 	bl	80213f8 <osKernelGetTickCount>
 801de7c:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 801de7e:	e006      	b.n	801de8e <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801de80:	f7ff ffa6 	bl	801ddd0 <BSP_SD_GetCardState>
 801de84:	4603      	mov	r3, r0
 801de86:	2b00      	cmp	r3, #0
 801de88:	d101      	bne.n	801de8e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801de8a:	2300      	movs	r3, #0
 801de8c:	e009      	b.n	801dea2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 801de8e:	f003 fab3 	bl	80213f8 <osKernelGetTickCount>
 801de92:	4602      	mov	r2, r0
 801de94:	68fb      	ldr	r3, [r7, #12]
 801de96:	1ad3      	subs	r3, r2, r3
 801de98:	687a      	ldr	r2, [r7, #4]
 801de9a:	429a      	cmp	r2, r3
 801de9c:	d8f0      	bhi.n	801de80 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801de9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801dea2:	4618      	mov	r0, r3
 801dea4:	3710      	adds	r7, #16
 801dea6:	46bd      	mov	sp, r7
 801dea8:	bd80      	pop	{r7, pc}
	...

0801deac <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801deac:	b580      	push	{r7, lr}
 801deae:	b082      	sub	sp, #8
 801deb0:	af00      	add	r7, sp, #0
 801deb2:	4603      	mov	r3, r0
 801deb4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801deb6:	4b0b      	ldr	r3, [pc, #44]	; (801dee4 <SD_CheckStatus+0x38>)
 801deb8:	2201      	movs	r2, #1
 801deba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801debc:	f7ff ff88 	bl	801ddd0 <BSP_SD_GetCardState>
 801dec0:	4603      	mov	r3, r0
 801dec2:	2b00      	cmp	r3, #0
 801dec4:	d107      	bne.n	801ded6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801dec6:	4b07      	ldr	r3, [pc, #28]	; (801dee4 <SD_CheckStatus+0x38>)
 801dec8:	781b      	ldrb	r3, [r3, #0]
 801deca:	b2db      	uxtb	r3, r3
 801decc:	f023 0301 	bic.w	r3, r3, #1
 801ded0:	b2da      	uxtb	r2, r3
 801ded2:	4b04      	ldr	r3, [pc, #16]	; (801dee4 <SD_CheckStatus+0x38>)
 801ded4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801ded6:	4b03      	ldr	r3, [pc, #12]	; (801dee4 <SD_CheckStatus+0x38>)
 801ded8:	781b      	ldrb	r3, [r3, #0]
 801deda:	b2db      	uxtb	r3, r3
}
 801dedc:	4618      	mov	r0, r3
 801dede:	3708      	adds	r7, #8
 801dee0:	46bd      	mov	sp, r7
 801dee2:	bd80      	pop	{r7, pc}
 801dee4:	200006a1 	.word	0x200006a1

0801dee8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801dee8:	b580      	push	{r7, lr}
 801deea:	b082      	sub	sp, #8
 801deec:	af00      	add	r7, sp, #0
 801deee:	4603      	mov	r3, r0
 801def0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801def2:	4b1c      	ldr	r3, [pc, #112]	; (801df64 <SD_initialize+0x7c>)
 801def4:	2201      	movs	r2, #1
 801def6:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 801def8:	f003 f9ee 	bl	80212d8 <osKernelGetState>
 801defc:	4603      	mov	r3, r0
 801defe:	2b02      	cmp	r3, #2
 801df00:	d129      	bne.n	801df56 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 801df02:	f7ff ff0b 	bl	801dd1c <BSP_SD_Init>
 801df06:	4603      	mov	r3, r0
 801df08:	2b00      	cmp	r3, #0
 801df0a:	d107      	bne.n	801df1c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 801df0c:	79fb      	ldrb	r3, [r7, #7]
 801df0e:	4618      	mov	r0, r3
 801df10:	f7ff ffcc 	bl	801deac <SD_CheckStatus>
 801df14:	4603      	mov	r3, r0
 801df16:	461a      	mov	r2, r3
 801df18:	4b12      	ldr	r3, [pc, #72]	; (801df64 <SD_initialize+0x7c>)
 801df1a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 801df1c:	4b11      	ldr	r3, [pc, #68]	; (801df64 <SD_initialize+0x7c>)
 801df1e:	781b      	ldrb	r3, [r3, #0]
 801df20:	b2db      	uxtb	r3, r3
 801df22:	2b01      	cmp	r3, #1
 801df24:	d017      	beq.n	801df56 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 801df26:	4b10      	ldr	r3, [pc, #64]	; (801df68 <SD_initialize+0x80>)
 801df28:	681b      	ldr	r3, [r3, #0]
 801df2a:	2b00      	cmp	r3, #0
 801df2c:	d107      	bne.n	801df3e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 801df2e:	2200      	movs	r2, #0
 801df30:	2102      	movs	r1, #2
 801df32:	200a      	movs	r0, #10
 801df34:	f003 fea8 	bl	8021c88 <osMessageQueueNew>
 801df38:	4602      	mov	r2, r0
 801df3a:	4b0b      	ldr	r3, [pc, #44]	; (801df68 <SD_initialize+0x80>)
 801df3c:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 801df3e:	4b0a      	ldr	r3, [pc, #40]	; (801df68 <SD_initialize+0x80>)
 801df40:	681b      	ldr	r3, [r3, #0]
 801df42:	2b00      	cmp	r3, #0
 801df44:	d107      	bne.n	801df56 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 801df46:	4b07      	ldr	r3, [pc, #28]	; (801df64 <SD_initialize+0x7c>)
 801df48:	781b      	ldrb	r3, [r3, #0]
 801df4a:	b2db      	uxtb	r3, r3
 801df4c:	f043 0301 	orr.w	r3, r3, #1
 801df50:	b2da      	uxtb	r2, r3
 801df52:	4b04      	ldr	r3, [pc, #16]	; (801df64 <SD_initialize+0x7c>)
 801df54:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 801df56:	4b03      	ldr	r3, [pc, #12]	; (801df64 <SD_initialize+0x7c>)
 801df58:	781b      	ldrb	r3, [r3, #0]
 801df5a:	b2db      	uxtb	r3, r3
}
 801df5c:	4618      	mov	r0, r3
 801df5e:	3708      	adds	r7, #8
 801df60:	46bd      	mov	sp, r7
 801df62:	bd80      	pop	{r7, pc}
 801df64:	200006a1 	.word	0x200006a1
 801df68:	2000155c 	.word	0x2000155c

0801df6c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801df6c:	b580      	push	{r7, lr}
 801df6e:	b082      	sub	sp, #8
 801df70:	af00      	add	r7, sp, #0
 801df72:	4603      	mov	r3, r0
 801df74:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801df76:	79fb      	ldrb	r3, [r7, #7]
 801df78:	4618      	mov	r0, r3
 801df7a:	f7ff ff97 	bl	801deac <SD_CheckStatus>
 801df7e:	4603      	mov	r3, r0
}
 801df80:	4618      	mov	r0, r3
 801df82:	3708      	adds	r7, #8
 801df84:	46bd      	mov	sp, r7
 801df86:	bd80      	pop	{r7, pc}

0801df88 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801df88:	b580      	push	{r7, lr}
 801df8a:	b088      	sub	sp, #32
 801df8c:	af00      	add	r7, sp, #0
 801df8e:	60b9      	str	r1, [r7, #8]
 801df90:	607a      	str	r2, [r7, #4]
 801df92:	603b      	str	r3, [r7, #0]
 801df94:	4603      	mov	r3, r0
 801df96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801df98:	2301      	movs	r3, #1
 801df9a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801df9c:	f247 5030 	movw	r0, #30000	; 0x7530
 801dfa0:	f7ff ff66 	bl	801de70 <SD_CheckStatusWithTimeout>
 801dfa4:	4603      	mov	r3, r0
 801dfa6:	2b00      	cmp	r3, #0
 801dfa8:	da01      	bge.n	801dfae <SD_read+0x26>
  {
    return res;
 801dfaa:	7ffb      	ldrb	r3, [r7, #31]
 801dfac:	e02f      	b.n	801e00e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801dfae:	683a      	ldr	r2, [r7, #0]
 801dfb0:	6879      	ldr	r1, [r7, #4]
 801dfb2:	68b8      	ldr	r0, [r7, #8]
 801dfb4:	f7ff fed8 	bl	801dd68 <BSP_SD_ReadBlocks_DMA>
 801dfb8:	4603      	mov	r3, r0
 801dfba:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 801dfbc:	7fbb      	ldrb	r3, [r7, #30]
 801dfbe:	2b00      	cmp	r3, #0
 801dfc0:	d124      	bne.n	801e00c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801dfc2:	4b15      	ldr	r3, [pc, #84]	; (801e018 <SD_read+0x90>)
 801dfc4:	6818      	ldr	r0, [r3, #0]
 801dfc6:	f107 0112 	add.w	r1, r7, #18
 801dfca:	f247 5330 	movw	r3, #30000	; 0x7530
 801dfce:	2200      	movs	r2, #0
 801dfd0:	f003 ff54 	bl	8021e7c <osMessageQueueGet>
 801dfd4:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 801dfd6:	69bb      	ldr	r3, [r7, #24]
 801dfd8:	2b00      	cmp	r3, #0
 801dfda:	d117      	bne.n	801e00c <SD_read+0x84>
 801dfdc:	8a7b      	ldrh	r3, [r7, #18]
 801dfde:	2b01      	cmp	r3, #1
 801dfe0:	d114      	bne.n	801e00c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 801dfe2:	f003 fa09 	bl	80213f8 <osKernelGetTickCount>
 801dfe6:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 801dfe8:	e007      	b.n	801dffa <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801dfea:	f7ff fef1 	bl	801ddd0 <BSP_SD_GetCardState>
 801dfee:	4603      	mov	r3, r0
 801dff0:	2b00      	cmp	r3, #0
 801dff2:	d102      	bne.n	801dffa <SD_read+0x72>
              {
                res = RES_OK;
 801dff4:	2300      	movs	r3, #0
 801dff6:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 801dff8:	e008      	b.n	801e00c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 801dffa:	f003 f9fd 	bl	80213f8 <osKernelGetTickCount>
 801dffe:	4602      	mov	r2, r0
 801e000:	697b      	ldr	r3, [r7, #20]
 801e002:	1ad3      	subs	r3, r2, r3
 801e004:	f247 522f 	movw	r2, #29999	; 0x752f
 801e008:	4293      	cmp	r3, r2
 801e00a:	d9ee      	bls.n	801dfea <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 801e00c:	7ffb      	ldrb	r3, [r7, #31]
}
 801e00e:	4618      	mov	r0, r3
 801e010:	3720      	adds	r7, #32
 801e012:	46bd      	mov	sp, r7
 801e014:	bd80      	pop	{r7, pc}
 801e016:	bf00      	nop
 801e018:	2000155c 	.word	0x2000155c

0801e01c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801e01c:	b580      	push	{r7, lr}
 801e01e:	b088      	sub	sp, #32
 801e020:	af00      	add	r7, sp, #0
 801e022:	60b9      	str	r1, [r7, #8]
 801e024:	607a      	str	r2, [r7, #4]
 801e026:	603b      	str	r3, [r7, #0]
 801e028:	4603      	mov	r3, r0
 801e02a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801e02c:	2301      	movs	r3, #1
 801e02e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801e030:	f247 5030 	movw	r0, #30000	; 0x7530
 801e034:	f7ff ff1c 	bl	801de70 <SD_CheckStatusWithTimeout>
 801e038:	4603      	mov	r3, r0
 801e03a:	2b00      	cmp	r3, #0
 801e03c:	da01      	bge.n	801e042 <SD_write+0x26>
  {
    return res;
 801e03e:	7ffb      	ldrb	r3, [r7, #31]
 801e040:	e02d      	b.n	801e09e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801e042:	683a      	ldr	r2, [r7, #0]
 801e044:	6879      	ldr	r1, [r7, #4]
 801e046:	68b8      	ldr	r0, [r7, #8]
 801e048:	f7ff fea8 	bl	801dd9c <BSP_SD_WriteBlocks_DMA>
 801e04c:	4603      	mov	r3, r0
 801e04e:	2b00      	cmp	r3, #0
 801e050:	d124      	bne.n	801e09c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801e052:	4b15      	ldr	r3, [pc, #84]	; (801e0a8 <SD_write+0x8c>)
 801e054:	6818      	ldr	r0, [r3, #0]
 801e056:	f107 0112 	add.w	r1, r7, #18
 801e05a:	f247 5330 	movw	r3, #30000	; 0x7530
 801e05e:	2200      	movs	r2, #0
 801e060:	f003 ff0c 	bl	8021e7c <osMessageQueueGet>
 801e064:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 801e066:	69bb      	ldr	r3, [r7, #24]
 801e068:	2b00      	cmp	r3, #0
 801e06a:	d117      	bne.n	801e09c <SD_write+0x80>
 801e06c:	8a7b      	ldrh	r3, [r7, #18]
 801e06e:	2b02      	cmp	r3, #2
 801e070:	d114      	bne.n	801e09c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 801e072:	f003 f9c1 	bl	80213f8 <osKernelGetTickCount>
 801e076:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 801e078:	e007      	b.n	801e08a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801e07a:	f7ff fea9 	bl	801ddd0 <BSP_SD_GetCardState>
 801e07e:	4603      	mov	r3, r0
 801e080:	2b00      	cmp	r3, #0
 801e082:	d102      	bne.n	801e08a <SD_write+0x6e>
          {
            res = RES_OK;
 801e084:	2300      	movs	r3, #0
 801e086:	77fb      	strb	r3, [r7, #31]
            break;
 801e088:	e008      	b.n	801e09c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 801e08a:	f003 f9b5 	bl	80213f8 <osKernelGetTickCount>
 801e08e:	4602      	mov	r2, r0
 801e090:	697b      	ldr	r3, [r7, #20]
 801e092:	1ad3      	subs	r3, r2, r3
 801e094:	f247 522f 	movw	r2, #29999	; 0x752f
 801e098:	4293      	cmp	r3, r2
 801e09a:	d9ee      	bls.n	801e07a <SD_write+0x5e>
    }

  }
#endif

  return res;
 801e09c:	7ffb      	ldrb	r3, [r7, #31]
}
 801e09e:	4618      	mov	r0, r3
 801e0a0:	3720      	adds	r7, #32
 801e0a2:	46bd      	mov	sp, r7
 801e0a4:	bd80      	pop	{r7, pc}
 801e0a6:	bf00      	nop
 801e0a8:	2000155c 	.word	0x2000155c

0801e0ac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801e0ac:	b580      	push	{r7, lr}
 801e0ae:	b08c      	sub	sp, #48	; 0x30
 801e0b0:	af00      	add	r7, sp, #0
 801e0b2:	4603      	mov	r3, r0
 801e0b4:	603a      	str	r2, [r7, #0]
 801e0b6:	71fb      	strb	r3, [r7, #7]
 801e0b8:	460b      	mov	r3, r1
 801e0ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801e0bc:	2301      	movs	r3, #1
 801e0be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801e0c2:	4b25      	ldr	r3, [pc, #148]	; (801e158 <SD_ioctl+0xac>)
 801e0c4:	781b      	ldrb	r3, [r3, #0]
 801e0c6:	b2db      	uxtb	r3, r3
 801e0c8:	f003 0301 	and.w	r3, r3, #1
 801e0cc:	2b00      	cmp	r3, #0
 801e0ce:	d001      	beq.n	801e0d4 <SD_ioctl+0x28>
 801e0d0:	2303      	movs	r3, #3
 801e0d2:	e03c      	b.n	801e14e <SD_ioctl+0xa2>

  switch (cmd)
 801e0d4:	79bb      	ldrb	r3, [r7, #6]
 801e0d6:	2b03      	cmp	r3, #3
 801e0d8:	d834      	bhi.n	801e144 <SD_ioctl+0x98>
 801e0da:	a201      	add	r2, pc, #4	; (adr r2, 801e0e0 <SD_ioctl+0x34>)
 801e0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e0e0:	0801e0f1 	.word	0x0801e0f1
 801e0e4:	0801e0f9 	.word	0x0801e0f9
 801e0e8:	0801e111 	.word	0x0801e111
 801e0ec:	0801e12b 	.word	0x0801e12b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801e0f0:	2300      	movs	r3, #0
 801e0f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801e0f6:	e028      	b.n	801e14a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801e0f8:	f107 030c 	add.w	r3, r7, #12
 801e0fc:	4618      	mov	r0, r3
 801e0fe:	f7ff fe77 	bl	801ddf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801e102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e104:	683b      	ldr	r3, [r7, #0]
 801e106:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801e108:	2300      	movs	r3, #0
 801e10a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801e10e:	e01c      	b.n	801e14a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801e110:	f107 030c 	add.w	r3, r7, #12
 801e114:	4618      	mov	r0, r3
 801e116:	f7ff fe6b 	bl	801ddf0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801e11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e11c:	b29a      	uxth	r2, r3
 801e11e:	683b      	ldr	r3, [r7, #0]
 801e120:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801e122:	2300      	movs	r3, #0
 801e124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801e128:	e00f      	b.n	801e14a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801e12a:	f107 030c 	add.w	r3, r7, #12
 801e12e:	4618      	mov	r0, r3
 801e130:	f7ff fe5e 	bl	801ddf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801e134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e136:	0a5a      	lsrs	r2, r3, #9
 801e138:	683b      	ldr	r3, [r7, #0]
 801e13a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801e13c:	2300      	movs	r3, #0
 801e13e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801e142:	e002      	b.n	801e14a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801e144:	2304      	movs	r3, #4
 801e146:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801e14a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801e14e:	4618      	mov	r0, r3
 801e150:	3730      	adds	r7, #48	; 0x30
 801e152:	46bd      	mov	sp, r7
 801e154:	bd80      	pop	{r7, pc}
 801e156:	bf00      	nop
 801e158:	200006a1 	.word	0x200006a1

0801e15c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801e15c:	b580      	push	{r7, lr}
 801e15e:	b082      	sub	sp, #8
 801e160:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 801e162:	2302      	movs	r3, #2
 801e164:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 801e166:	4b05      	ldr	r3, [pc, #20]	; (801e17c <BSP_SD_WriteCpltCallback+0x20>)
 801e168:	6818      	ldr	r0, [r3, #0]
 801e16a:	1db9      	adds	r1, r7, #6
 801e16c:	2300      	movs	r3, #0
 801e16e:	2200      	movs	r2, #0
 801e170:	f003 fe10 	bl	8021d94 <osMessageQueuePut>
#endif
}
 801e174:	bf00      	nop
 801e176:	3708      	adds	r7, #8
 801e178:	46bd      	mov	sp, r7
 801e17a:	bd80      	pop	{r7, pc}
 801e17c:	2000155c 	.word	0x2000155c

0801e180 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801e180:	b580      	push	{r7, lr}
 801e182:	b082      	sub	sp, #8
 801e184:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 801e186:	2301      	movs	r3, #1
 801e188:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 801e18a:	4b05      	ldr	r3, [pc, #20]	; (801e1a0 <BSP_SD_ReadCpltCallback+0x20>)
 801e18c:	6818      	ldr	r0, [r3, #0]
 801e18e:	1db9      	adds	r1, r7, #6
 801e190:	2300      	movs	r3, #0
 801e192:	2200      	movs	r2, #0
 801e194:	f003 fdfe 	bl	8021d94 <osMessageQueuePut>
#endif
}
 801e198:	bf00      	nop
 801e19a:	3708      	adds	r7, #8
 801e19c:	46bd      	mov	sp, r7
 801e19e:	bd80      	pop	{r7, pc}
 801e1a0:	2000155c 	.word	0x2000155c

0801e1a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801e1a4:	b580      	push	{r7, lr}
 801e1a6:	b084      	sub	sp, #16
 801e1a8:	af00      	add	r7, sp, #0
 801e1aa:	4603      	mov	r3, r0
 801e1ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801e1ae:	79fb      	ldrb	r3, [r7, #7]
 801e1b0:	4a08      	ldr	r2, [pc, #32]	; (801e1d4 <disk_status+0x30>)
 801e1b2:	009b      	lsls	r3, r3, #2
 801e1b4:	4413      	add	r3, r2
 801e1b6:	685b      	ldr	r3, [r3, #4]
 801e1b8:	685b      	ldr	r3, [r3, #4]
 801e1ba:	79fa      	ldrb	r2, [r7, #7]
 801e1bc:	4905      	ldr	r1, [pc, #20]	; (801e1d4 <disk_status+0x30>)
 801e1be:	440a      	add	r2, r1
 801e1c0:	7a12      	ldrb	r2, [r2, #8]
 801e1c2:	4610      	mov	r0, r2
 801e1c4:	4798      	blx	r3
 801e1c6:	4603      	mov	r3, r0
 801e1c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 801e1ca:	7bfb      	ldrb	r3, [r7, #15]
}
 801e1cc:	4618      	mov	r0, r3
 801e1ce:	3710      	adds	r7, #16
 801e1d0:	46bd      	mov	sp, r7
 801e1d2:	bd80      	pop	{r7, pc}
 801e1d4:	20001588 	.word	0x20001588

0801e1d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801e1d8:	b580      	push	{r7, lr}
 801e1da:	b084      	sub	sp, #16
 801e1dc:	af00      	add	r7, sp, #0
 801e1de:	4603      	mov	r3, r0
 801e1e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801e1e2:	2300      	movs	r3, #0
 801e1e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801e1e6:	79fb      	ldrb	r3, [r7, #7]
 801e1e8:	4a0d      	ldr	r2, [pc, #52]	; (801e220 <disk_initialize+0x48>)
 801e1ea:	5cd3      	ldrb	r3, [r2, r3]
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	d111      	bne.n	801e214 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801e1f0:	79fb      	ldrb	r3, [r7, #7]
 801e1f2:	4a0b      	ldr	r2, [pc, #44]	; (801e220 <disk_initialize+0x48>)
 801e1f4:	2101      	movs	r1, #1
 801e1f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801e1f8:	79fb      	ldrb	r3, [r7, #7]
 801e1fa:	4a09      	ldr	r2, [pc, #36]	; (801e220 <disk_initialize+0x48>)
 801e1fc:	009b      	lsls	r3, r3, #2
 801e1fe:	4413      	add	r3, r2
 801e200:	685b      	ldr	r3, [r3, #4]
 801e202:	681b      	ldr	r3, [r3, #0]
 801e204:	79fa      	ldrb	r2, [r7, #7]
 801e206:	4906      	ldr	r1, [pc, #24]	; (801e220 <disk_initialize+0x48>)
 801e208:	440a      	add	r2, r1
 801e20a:	7a12      	ldrb	r2, [r2, #8]
 801e20c:	4610      	mov	r0, r2
 801e20e:	4798      	blx	r3
 801e210:	4603      	mov	r3, r0
 801e212:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801e214:	7bfb      	ldrb	r3, [r7, #15]
}
 801e216:	4618      	mov	r0, r3
 801e218:	3710      	adds	r7, #16
 801e21a:	46bd      	mov	sp, r7
 801e21c:	bd80      	pop	{r7, pc}
 801e21e:	bf00      	nop
 801e220:	20001588 	.word	0x20001588

0801e224 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801e224:	b590      	push	{r4, r7, lr}
 801e226:	b087      	sub	sp, #28
 801e228:	af00      	add	r7, sp, #0
 801e22a:	60b9      	str	r1, [r7, #8]
 801e22c:	607a      	str	r2, [r7, #4]
 801e22e:	603b      	str	r3, [r7, #0]
 801e230:	4603      	mov	r3, r0
 801e232:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801e234:	7bfb      	ldrb	r3, [r7, #15]
 801e236:	4a0a      	ldr	r2, [pc, #40]	; (801e260 <disk_read+0x3c>)
 801e238:	009b      	lsls	r3, r3, #2
 801e23a:	4413      	add	r3, r2
 801e23c:	685b      	ldr	r3, [r3, #4]
 801e23e:	689c      	ldr	r4, [r3, #8]
 801e240:	7bfb      	ldrb	r3, [r7, #15]
 801e242:	4a07      	ldr	r2, [pc, #28]	; (801e260 <disk_read+0x3c>)
 801e244:	4413      	add	r3, r2
 801e246:	7a18      	ldrb	r0, [r3, #8]
 801e248:	683b      	ldr	r3, [r7, #0]
 801e24a:	687a      	ldr	r2, [r7, #4]
 801e24c:	68b9      	ldr	r1, [r7, #8]
 801e24e:	47a0      	blx	r4
 801e250:	4603      	mov	r3, r0
 801e252:	75fb      	strb	r3, [r7, #23]
  return res;
 801e254:	7dfb      	ldrb	r3, [r7, #23]
}
 801e256:	4618      	mov	r0, r3
 801e258:	371c      	adds	r7, #28
 801e25a:	46bd      	mov	sp, r7
 801e25c:	bd90      	pop	{r4, r7, pc}
 801e25e:	bf00      	nop
 801e260:	20001588 	.word	0x20001588

0801e264 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801e264:	b590      	push	{r4, r7, lr}
 801e266:	b087      	sub	sp, #28
 801e268:	af00      	add	r7, sp, #0
 801e26a:	60b9      	str	r1, [r7, #8]
 801e26c:	607a      	str	r2, [r7, #4]
 801e26e:	603b      	str	r3, [r7, #0]
 801e270:	4603      	mov	r3, r0
 801e272:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801e274:	7bfb      	ldrb	r3, [r7, #15]
 801e276:	4a0a      	ldr	r2, [pc, #40]	; (801e2a0 <disk_write+0x3c>)
 801e278:	009b      	lsls	r3, r3, #2
 801e27a:	4413      	add	r3, r2
 801e27c:	685b      	ldr	r3, [r3, #4]
 801e27e:	68dc      	ldr	r4, [r3, #12]
 801e280:	7bfb      	ldrb	r3, [r7, #15]
 801e282:	4a07      	ldr	r2, [pc, #28]	; (801e2a0 <disk_write+0x3c>)
 801e284:	4413      	add	r3, r2
 801e286:	7a18      	ldrb	r0, [r3, #8]
 801e288:	683b      	ldr	r3, [r7, #0]
 801e28a:	687a      	ldr	r2, [r7, #4]
 801e28c:	68b9      	ldr	r1, [r7, #8]
 801e28e:	47a0      	blx	r4
 801e290:	4603      	mov	r3, r0
 801e292:	75fb      	strb	r3, [r7, #23]
  return res;
 801e294:	7dfb      	ldrb	r3, [r7, #23]
}
 801e296:	4618      	mov	r0, r3
 801e298:	371c      	adds	r7, #28
 801e29a:	46bd      	mov	sp, r7
 801e29c:	bd90      	pop	{r4, r7, pc}
 801e29e:	bf00      	nop
 801e2a0:	20001588 	.word	0x20001588

0801e2a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801e2a4:	b580      	push	{r7, lr}
 801e2a6:	b084      	sub	sp, #16
 801e2a8:	af00      	add	r7, sp, #0
 801e2aa:	4603      	mov	r3, r0
 801e2ac:	603a      	str	r2, [r7, #0]
 801e2ae:	71fb      	strb	r3, [r7, #7]
 801e2b0:	460b      	mov	r3, r1
 801e2b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801e2b4:	79fb      	ldrb	r3, [r7, #7]
 801e2b6:	4a09      	ldr	r2, [pc, #36]	; (801e2dc <disk_ioctl+0x38>)
 801e2b8:	009b      	lsls	r3, r3, #2
 801e2ba:	4413      	add	r3, r2
 801e2bc:	685b      	ldr	r3, [r3, #4]
 801e2be:	691b      	ldr	r3, [r3, #16]
 801e2c0:	79fa      	ldrb	r2, [r7, #7]
 801e2c2:	4906      	ldr	r1, [pc, #24]	; (801e2dc <disk_ioctl+0x38>)
 801e2c4:	440a      	add	r2, r1
 801e2c6:	7a10      	ldrb	r0, [r2, #8]
 801e2c8:	79b9      	ldrb	r1, [r7, #6]
 801e2ca:	683a      	ldr	r2, [r7, #0]
 801e2cc:	4798      	blx	r3
 801e2ce:	4603      	mov	r3, r0
 801e2d0:	73fb      	strb	r3, [r7, #15]
  return res;
 801e2d2:	7bfb      	ldrb	r3, [r7, #15]
}
 801e2d4:	4618      	mov	r0, r3
 801e2d6:	3710      	adds	r7, #16
 801e2d8:	46bd      	mov	sp, r7
 801e2da:	bd80      	pop	{r7, pc}
 801e2dc:	20001588 	.word	0x20001588

0801e2e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801e2e0:	b480      	push	{r7}
 801e2e2:	b085      	sub	sp, #20
 801e2e4:	af00      	add	r7, sp, #0
 801e2e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801e2e8:	687b      	ldr	r3, [r7, #4]
 801e2ea:	3301      	adds	r3, #1
 801e2ec:	781b      	ldrb	r3, [r3, #0]
 801e2ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801e2f0:	89fb      	ldrh	r3, [r7, #14]
 801e2f2:	021b      	lsls	r3, r3, #8
 801e2f4:	b21a      	sxth	r2, r3
 801e2f6:	687b      	ldr	r3, [r7, #4]
 801e2f8:	781b      	ldrb	r3, [r3, #0]
 801e2fa:	b21b      	sxth	r3, r3
 801e2fc:	4313      	orrs	r3, r2
 801e2fe:	b21b      	sxth	r3, r3
 801e300:	81fb      	strh	r3, [r7, #14]
	return rv;
 801e302:	89fb      	ldrh	r3, [r7, #14]
}
 801e304:	4618      	mov	r0, r3
 801e306:	3714      	adds	r7, #20
 801e308:	46bd      	mov	sp, r7
 801e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e30e:	4770      	bx	lr

0801e310 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801e310:	b480      	push	{r7}
 801e312:	b085      	sub	sp, #20
 801e314:	af00      	add	r7, sp, #0
 801e316:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801e318:	687b      	ldr	r3, [r7, #4]
 801e31a:	3303      	adds	r3, #3
 801e31c:	781b      	ldrb	r3, [r3, #0]
 801e31e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801e320:	68fb      	ldr	r3, [r7, #12]
 801e322:	021b      	lsls	r3, r3, #8
 801e324:	687a      	ldr	r2, [r7, #4]
 801e326:	3202      	adds	r2, #2
 801e328:	7812      	ldrb	r2, [r2, #0]
 801e32a:	4313      	orrs	r3, r2
 801e32c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801e32e:	68fb      	ldr	r3, [r7, #12]
 801e330:	021b      	lsls	r3, r3, #8
 801e332:	687a      	ldr	r2, [r7, #4]
 801e334:	3201      	adds	r2, #1
 801e336:	7812      	ldrb	r2, [r2, #0]
 801e338:	4313      	orrs	r3, r2
 801e33a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801e33c:	68fb      	ldr	r3, [r7, #12]
 801e33e:	021b      	lsls	r3, r3, #8
 801e340:	687a      	ldr	r2, [r7, #4]
 801e342:	7812      	ldrb	r2, [r2, #0]
 801e344:	4313      	orrs	r3, r2
 801e346:	60fb      	str	r3, [r7, #12]
	return rv;
 801e348:	68fb      	ldr	r3, [r7, #12]
}
 801e34a:	4618      	mov	r0, r3
 801e34c:	3714      	adds	r7, #20
 801e34e:	46bd      	mov	sp, r7
 801e350:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e354:	4770      	bx	lr

0801e356 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801e356:	b480      	push	{r7}
 801e358:	b083      	sub	sp, #12
 801e35a:	af00      	add	r7, sp, #0
 801e35c:	6078      	str	r0, [r7, #4]
 801e35e:	460b      	mov	r3, r1
 801e360:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801e362:	687b      	ldr	r3, [r7, #4]
 801e364:	1c5a      	adds	r2, r3, #1
 801e366:	607a      	str	r2, [r7, #4]
 801e368:	887a      	ldrh	r2, [r7, #2]
 801e36a:	b2d2      	uxtb	r2, r2
 801e36c:	701a      	strb	r2, [r3, #0]
 801e36e:	887b      	ldrh	r3, [r7, #2]
 801e370:	0a1b      	lsrs	r3, r3, #8
 801e372:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801e374:	687b      	ldr	r3, [r7, #4]
 801e376:	1c5a      	adds	r2, r3, #1
 801e378:	607a      	str	r2, [r7, #4]
 801e37a:	887a      	ldrh	r2, [r7, #2]
 801e37c:	b2d2      	uxtb	r2, r2
 801e37e:	701a      	strb	r2, [r3, #0]
}
 801e380:	bf00      	nop
 801e382:	370c      	adds	r7, #12
 801e384:	46bd      	mov	sp, r7
 801e386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e38a:	4770      	bx	lr

0801e38c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801e38c:	b480      	push	{r7}
 801e38e:	b083      	sub	sp, #12
 801e390:	af00      	add	r7, sp, #0
 801e392:	6078      	str	r0, [r7, #4]
 801e394:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801e396:	687b      	ldr	r3, [r7, #4]
 801e398:	1c5a      	adds	r2, r3, #1
 801e39a:	607a      	str	r2, [r7, #4]
 801e39c:	683a      	ldr	r2, [r7, #0]
 801e39e:	b2d2      	uxtb	r2, r2
 801e3a0:	701a      	strb	r2, [r3, #0]
 801e3a2:	683b      	ldr	r3, [r7, #0]
 801e3a4:	0a1b      	lsrs	r3, r3, #8
 801e3a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801e3a8:	687b      	ldr	r3, [r7, #4]
 801e3aa:	1c5a      	adds	r2, r3, #1
 801e3ac:	607a      	str	r2, [r7, #4]
 801e3ae:	683a      	ldr	r2, [r7, #0]
 801e3b0:	b2d2      	uxtb	r2, r2
 801e3b2:	701a      	strb	r2, [r3, #0]
 801e3b4:	683b      	ldr	r3, [r7, #0]
 801e3b6:	0a1b      	lsrs	r3, r3, #8
 801e3b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801e3ba:	687b      	ldr	r3, [r7, #4]
 801e3bc:	1c5a      	adds	r2, r3, #1
 801e3be:	607a      	str	r2, [r7, #4]
 801e3c0:	683a      	ldr	r2, [r7, #0]
 801e3c2:	b2d2      	uxtb	r2, r2
 801e3c4:	701a      	strb	r2, [r3, #0]
 801e3c6:	683b      	ldr	r3, [r7, #0]
 801e3c8:	0a1b      	lsrs	r3, r3, #8
 801e3ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801e3cc:	687b      	ldr	r3, [r7, #4]
 801e3ce:	1c5a      	adds	r2, r3, #1
 801e3d0:	607a      	str	r2, [r7, #4]
 801e3d2:	683a      	ldr	r2, [r7, #0]
 801e3d4:	b2d2      	uxtb	r2, r2
 801e3d6:	701a      	strb	r2, [r3, #0]
}
 801e3d8:	bf00      	nop
 801e3da:	370c      	adds	r7, #12
 801e3dc:	46bd      	mov	sp, r7
 801e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3e2:	4770      	bx	lr

0801e3e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801e3e4:	b480      	push	{r7}
 801e3e6:	b087      	sub	sp, #28
 801e3e8:	af00      	add	r7, sp, #0
 801e3ea:	60f8      	str	r0, [r7, #12]
 801e3ec:	60b9      	str	r1, [r7, #8]
 801e3ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801e3f0:	68fb      	ldr	r3, [r7, #12]
 801e3f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801e3f4:	68bb      	ldr	r3, [r7, #8]
 801e3f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801e3f8:	687b      	ldr	r3, [r7, #4]
 801e3fa:	2b00      	cmp	r3, #0
 801e3fc:	d00d      	beq.n	801e41a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801e3fe:	693a      	ldr	r2, [r7, #16]
 801e400:	1c53      	adds	r3, r2, #1
 801e402:	613b      	str	r3, [r7, #16]
 801e404:	697b      	ldr	r3, [r7, #20]
 801e406:	1c59      	adds	r1, r3, #1
 801e408:	6179      	str	r1, [r7, #20]
 801e40a:	7812      	ldrb	r2, [r2, #0]
 801e40c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801e40e:	687b      	ldr	r3, [r7, #4]
 801e410:	3b01      	subs	r3, #1
 801e412:	607b      	str	r3, [r7, #4]
 801e414:	687b      	ldr	r3, [r7, #4]
 801e416:	2b00      	cmp	r3, #0
 801e418:	d1f1      	bne.n	801e3fe <mem_cpy+0x1a>
	}
}
 801e41a:	bf00      	nop
 801e41c:	371c      	adds	r7, #28
 801e41e:	46bd      	mov	sp, r7
 801e420:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e424:	4770      	bx	lr

0801e426 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801e426:	b480      	push	{r7}
 801e428:	b087      	sub	sp, #28
 801e42a:	af00      	add	r7, sp, #0
 801e42c:	60f8      	str	r0, [r7, #12]
 801e42e:	60b9      	str	r1, [r7, #8]
 801e430:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801e432:	68fb      	ldr	r3, [r7, #12]
 801e434:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801e436:	697b      	ldr	r3, [r7, #20]
 801e438:	1c5a      	adds	r2, r3, #1
 801e43a:	617a      	str	r2, [r7, #20]
 801e43c:	68ba      	ldr	r2, [r7, #8]
 801e43e:	b2d2      	uxtb	r2, r2
 801e440:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801e442:	687b      	ldr	r3, [r7, #4]
 801e444:	3b01      	subs	r3, #1
 801e446:	607b      	str	r3, [r7, #4]
 801e448:	687b      	ldr	r3, [r7, #4]
 801e44a:	2b00      	cmp	r3, #0
 801e44c:	d1f3      	bne.n	801e436 <mem_set+0x10>
}
 801e44e:	bf00      	nop
 801e450:	371c      	adds	r7, #28
 801e452:	46bd      	mov	sp, r7
 801e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e458:	4770      	bx	lr

0801e45a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801e45a:	b480      	push	{r7}
 801e45c:	b089      	sub	sp, #36	; 0x24
 801e45e:	af00      	add	r7, sp, #0
 801e460:	60f8      	str	r0, [r7, #12]
 801e462:	60b9      	str	r1, [r7, #8]
 801e464:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801e466:	68fb      	ldr	r3, [r7, #12]
 801e468:	61fb      	str	r3, [r7, #28]
 801e46a:	68bb      	ldr	r3, [r7, #8]
 801e46c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801e46e:	2300      	movs	r3, #0
 801e470:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801e472:	69fb      	ldr	r3, [r7, #28]
 801e474:	1c5a      	adds	r2, r3, #1
 801e476:	61fa      	str	r2, [r7, #28]
 801e478:	781b      	ldrb	r3, [r3, #0]
 801e47a:	4619      	mov	r1, r3
 801e47c:	69bb      	ldr	r3, [r7, #24]
 801e47e:	1c5a      	adds	r2, r3, #1
 801e480:	61ba      	str	r2, [r7, #24]
 801e482:	781b      	ldrb	r3, [r3, #0]
 801e484:	1acb      	subs	r3, r1, r3
 801e486:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801e488:	687b      	ldr	r3, [r7, #4]
 801e48a:	3b01      	subs	r3, #1
 801e48c:	607b      	str	r3, [r7, #4]
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	2b00      	cmp	r3, #0
 801e492:	d002      	beq.n	801e49a <mem_cmp+0x40>
 801e494:	697b      	ldr	r3, [r7, #20]
 801e496:	2b00      	cmp	r3, #0
 801e498:	d0eb      	beq.n	801e472 <mem_cmp+0x18>

	return r;
 801e49a:	697b      	ldr	r3, [r7, #20]
}
 801e49c:	4618      	mov	r0, r3
 801e49e:	3724      	adds	r7, #36	; 0x24
 801e4a0:	46bd      	mov	sp, r7
 801e4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4a6:	4770      	bx	lr

0801e4a8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801e4a8:	b480      	push	{r7}
 801e4aa:	b083      	sub	sp, #12
 801e4ac:	af00      	add	r7, sp, #0
 801e4ae:	6078      	str	r0, [r7, #4]
 801e4b0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801e4b2:	e002      	b.n	801e4ba <chk_chr+0x12>
 801e4b4:	687b      	ldr	r3, [r7, #4]
 801e4b6:	3301      	adds	r3, #1
 801e4b8:	607b      	str	r3, [r7, #4]
 801e4ba:	687b      	ldr	r3, [r7, #4]
 801e4bc:	781b      	ldrb	r3, [r3, #0]
 801e4be:	2b00      	cmp	r3, #0
 801e4c0:	d005      	beq.n	801e4ce <chk_chr+0x26>
 801e4c2:	687b      	ldr	r3, [r7, #4]
 801e4c4:	781b      	ldrb	r3, [r3, #0]
 801e4c6:	461a      	mov	r2, r3
 801e4c8:	683b      	ldr	r3, [r7, #0]
 801e4ca:	4293      	cmp	r3, r2
 801e4cc:	d1f2      	bne.n	801e4b4 <chk_chr+0xc>
	return *str;
 801e4ce:	687b      	ldr	r3, [r7, #4]
 801e4d0:	781b      	ldrb	r3, [r3, #0]
}
 801e4d2:	4618      	mov	r0, r3
 801e4d4:	370c      	adds	r7, #12
 801e4d6:	46bd      	mov	sp, r7
 801e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4dc:	4770      	bx	lr

0801e4de <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 801e4de:	b580      	push	{r7, lr}
 801e4e0:	b082      	sub	sp, #8
 801e4e2:	af00      	add	r7, sp, #0
 801e4e4:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801e4e6:	687b      	ldr	r3, [r7, #4]
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	d009      	beq.n	801e500 <lock_fs+0x22>
 801e4ec:	687b      	ldr	r3, [r7, #4]
 801e4ee:	695b      	ldr	r3, [r3, #20]
 801e4f0:	4618      	mov	r0, r3
 801e4f2:	f002 fe7e 	bl	80211f2 <ff_req_grant>
 801e4f6:	4603      	mov	r3, r0
 801e4f8:	2b00      	cmp	r3, #0
 801e4fa:	d001      	beq.n	801e500 <lock_fs+0x22>
 801e4fc:	2301      	movs	r3, #1
 801e4fe:	e000      	b.n	801e502 <lock_fs+0x24>
 801e500:	2300      	movs	r3, #0
}
 801e502:	4618      	mov	r0, r3
 801e504:	3708      	adds	r7, #8
 801e506:	46bd      	mov	sp, r7
 801e508:	bd80      	pop	{r7, pc}

0801e50a <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 801e50a:	b580      	push	{r7, lr}
 801e50c:	b082      	sub	sp, #8
 801e50e:	af00      	add	r7, sp, #0
 801e510:	6078      	str	r0, [r7, #4]
 801e512:	460b      	mov	r3, r1
 801e514:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	2b00      	cmp	r3, #0
 801e51a:	d00d      	beq.n	801e538 <unlock_fs+0x2e>
 801e51c:	78fb      	ldrb	r3, [r7, #3]
 801e51e:	2b0c      	cmp	r3, #12
 801e520:	d00a      	beq.n	801e538 <unlock_fs+0x2e>
 801e522:	78fb      	ldrb	r3, [r7, #3]
 801e524:	2b0b      	cmp	r3, #11
 801e526:	d007      	beq.n	801e538 <unlock_fs+0x2e>
 801e528:	78fb      	ldrb	r3, [r7, #3]
 801e52a:	2b0f      	cmp	r3, #15
 801e52c:	d004      	beq.n	801e538 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 801e52e:	687b      	ldr	r3, [r7, #4]
 801e530:	695b      	ldr	r3, [r3, #20]
 801e532:	4618      	mov	r0, r3
 801e534:	f002 fe72 	bl	802121c <ff_rel_grant>
	}
}
 801e538:	bf00      	nop
 801e53a:	3708      	adds	r7, #8
 801e53c:	46bd      	mov	sp, r7
 801e53e:	bd80      	pop	{r7, pc}

0801e540 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801e540:	b480      	push	{r7}
 801e542:	b085      	sub	sp, #20
 801e544:	af00      	add	r7, sp, #0
 801e546:	6078      	str	r0, [r7, #4]
 801e548:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801e54a:	2300      	movs	r3, #0
 801e54c:	60bb      	str	r3, [r7, #8]
 801e54e:	68bb      	ldr	r3, [r7, #8]
 801e550:	60fb      	str	r3, [r7, #12]
 801e552:	e029      	b.n	801e5a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801e554:	4a27      	ldr	r2, [pc, #156]	; (801e5f4 <chk_lock+0xb4>)
 801e556:	68fb      	ldr	r3, [r7, #12]
 801e558:	011b      	lsls	r3, r3, #4
 801e55a:	4413      	add	r3, r2
 801e55c:	681b      	ldr	r3, [r3, #0]
 801e55e:	2b00      	cmp	r3, #0
 801e560:	d01d      	beq.n	801e59e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801e562:	4a24      	ldr	r2, [pc, #144]	; (801e5f4 <chk_lock+0xb4>)
 801e564:	68fb      	ldr	r3, [r7, #12]
 801e566:	011b      	lsls	r3, r3, #4
 801e568:	4413      	add	r3, r2
 801e56a:	681a      	ldr	r2, [r3, #0]
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	681b      	ldr	r3, [r3, #0]
 801e570:	429a      	cmp	r2, r3
 801e572:	d116      	bne.n	801e5a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801e574:	4a1f      	ldr	r2, [pc, #124]	; (801e5f4 <chk_lock+0xb4>)
 801e576:	68fb      	ldr	r3, [r7, #12]
 801e578:	011b      	lsls	r3, r3, #4
 801e57a:	4413      	add	r3, r2
 801e57c:	3304      	adds	r3, #4
 801e57e:	681a      	ldr	r2, [r3, #0]
 801e580:	687b      	ldr	r3, [r7, #4]
 801e582:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801e584:	429a      	cmp	r2, r3
 801e586:	d10c      	bne.n	801e5a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801e588:	4a1a      	ldr	r2, [pc, #104]	; (801e5f4 <chk_lock+0xb4>)
 801e58a:	68fb      	ldr	r3, [r7, #12]
 801e58c:	011b      	lsls	r3, r3, #4
 801e58e:	4413      	add	r3, r2
 801e590:	3308      	adds	r3, #8
 801e592:	681a      	ldr	r2, [r3, #0]
 801e594:	687b      	ldr	r3, [r7, #4]
 801e596:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801e598:	429a      	cmp	r2, r3
 801e59a:	d102      	bne.n	801e5a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801e59c:	e007      	b.n	801e5ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801e59e:	2301      	movs	r3, #1
 801e5a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801e5a2:	68fb      	ldr	r3, [r7, #12]
 801e5a4:	3301      	adds	r3, #1
 801e5a6:	60fb      	str	r3, [r7, #12]
 801e5a8:	68fb      	ldr	r3, [r7, #12]
 801e5aa:	2b01      	cmp	r3, #1
 801e5ac:	d9d2      	bls.n	801e554 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801e5ae:	68fb      	ldr	r3, [r7, #12]
 801e5b0:	2b02      	cmp	r3, #2
 801e5b2:	d109      	bne.n	801e5c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801e5b4:	68bb      	ldr	r3, [r7, #8]
 801e5b6:	2b00      	cmp	r3, #0
 801e5b8:	d102      	bne.n	801e5c0 <chk_lock+0x80>
 801e5ba:	683b      	ldr	r3, [r7, #0]
 801e5bc:	2b02      	cmp	r3, #2
 801e5be:	d101      	bne.n	801e5c4 <chk_lock+0x84>
 801e5c0:	2300      	movs	r3, #0
 801e5c2:	e010      	b.n	801e5e6 <chk_lock+0xa6>
 801e5c4:	2312      	movs	r3, #18
 801e5c6:	e00e      	b.n	801e5e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801e5c8:	683b      	ldr	r3, [r7, #0]
 801e5ca:	2b00      	cmp	r3, #0
 801e5cc:	d108      	bne.n	801e5e0 <chk_lock+0xa0>
 801e5ce:	4a09      	ldr	r2, [pc, #36]	; (801e5f4 <chk_lock+0xb4>)
 801e5d0:	68fb      	ldr	r3, [r7, #12]
 801e5d2:	011b      	lsls	r3, r3, #4
 801e5d4:	4413      	add	r3, r2
 801e5d6:	330c      	adds	r3, #12
 801e5d8:	881b      	ldrh	r3, [r3, #0]
 801e5da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e5de:	d101      	bne.n	801e5e4 <chk_lock+0xa4>
 801e5e0:	2310      	movs	r3, #16
 801e5e2:	e000      	b.n	801e5e6 <chk_lock+0xa6>
 801e5e4:	2300      	movs	r3, #0
}
 801e5e6:	4618      	mov	r0, r3
 801e5e8:	3714      	adds	r7, #20
 801e5ea:	46bd      	mov	sp, r7
 801e5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5f0:	4770      	bx	lr
 801e5f2:	bf00      	nop
 801e5f4:	20001568 	.word	0x20001568

0801e5f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801e5f8:	b480      	push	{r7}
 801e5fa:	b083      	sub	sp, #12
 801e5fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801e5fe:	2300      	movs	r3, #0
 801e600:	607b      	str	r3, [r7, #4]
 801e602:	e002      	b.n	801e60a <enq_lock+0x12>
 801e604:	687b      	ldr	r3, [r7, #4]
 801e606:	3301      	adds	r3, #1
 801e608:	607b      	str	r3, [r7, #4]
 801e60a:	687b      	ldr	r3, [r7, #4]
 801e60c:	2b01      	cmp	r3, #1
 801e60e:	d806      	bhi.n	801e61e <enq_lock+0x26>
 801e610:	4a09      	ldr	r2, [pc, #36]	; (801e638 <enq_lock+0x40>)
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	011b      	lsls	r3, r3, #4
 801e616:	4413      	add	r3, r2
 801e618:	681b      	ldr	r3, [r3, #0]
 801e61a:	2b00      	cmp	r3, #0
 801e61c:	d1f2      	bne.n	801e604 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801e61e:	687b      	ldr	r3, [r7, #4]
 801e620:	2b02      	cmp	r3, #2
 801e622:	bf14      	ite	ne
 801e624:	2301      	movne	r3, #1
 801e626:	2300      	moveq	r3, #0
 801e628:	b2db      	uxtb	r3, r3
}
 801e62a:	4618      	mov	r0, r3
 801e62c:	370c      	adds	r7, #12
 801e62e:	46bd      	mov	sp, r7
 801e630:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e634:	4770      	bx	lr
 801e636:	bf00      	nop
 801e638:	20001568 	.word	0x20001568

0801e63c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801e63c:	b480      	push	{r7}
 801e63e:	b085      	sub	sp, #20
 801e640:	af00      	add	r7, sp, #0
 801e642:	6078      	str	r0, [r7, #4]
 801e644:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801e646:	2300      	movs	r3, #0
 801e648:	60fb      	str	r3, [r7, #12]
 801e64a:	e01f      	b.n	801e68c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801e64c:	4a41      	ldr	r2, [pc, #260]	; (801e754 <inc_lock+0x118>)
 801e64e:	68fb      	ldr	r3, [r7, #12]
 801e650:	011b      	lsls	r3, r3, #4
 801e652:	4413      	add	r3, r2
 801e654:	681a      	ldr	r2, [r3, #0]
 801e656:	687b      	ldr	r3, [r7, #4]
 801e658:	681b      	ldr	r3, [r3, #0]
 801e65a:	429a      	cmp	r2, r3
 801e65c:	d113      	bne.n	801e686 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801e65e:	4a3d      	ldr	r2, [pc, #244]	; (801e754 <inc_lock+0x118>)
 801e660:	68fb      	ldr	r3, [r7, #12]
 801e662:	011b      	lsls	r3, r3, #4
 801e664:	4413      	add	r3, r2
 801e666:	3304      	adds	r3, #4
 801e668:	681a      	ldr	r2, [r3, #0]
 801e66a:	687b      	ldr	r3, [r7, #4]
 801e66c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801e66e:	429a      	cmp	r2, r3
 801e670:	d109      	bne.n	801e686 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801e672:	4a38      	ldr	r2, [pc, #224]	; (801e754 <inc_lock+0x118>)
 801e674:	68fb      	ldr	r3, [r7, #12]
 801e676:	011b      	lsls	r3, r3, #4
 801e678:	4413      	add	r3, r2
 801e67a:	3308      	adds	r3, #8
 801e67c:	681a      	ldr	r2, [r3, #0]
 801e67e:	687b      	ldr	r3, [r7, #4]
 801e680:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801e682:	429a      	cmp	r2, r3
 801e684:	d006      	beq.n	801e694 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801e686:	68fb      	ldr	r3, [r7, #12]
 801e688:	3301      	adds	r3, #1
 801e68a:	60fb      	str	r3, [r7, #12]
 801e68c:	68fb      	ldr	r3, [r7, #12]
 801e68e:	2b01      	cmp	r3, #1
 801e690:	d9dc      	bls.n	801e64c <inc_lock+0x10>
 801e692:	e000      	b.n	801e696 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801e694:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801e696:	68fb      	ldr	r3, [r7, #12]
 801e698:	2b02      	cmp	r3, #2
 801e69a:	d132      	bne.n	801e702 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801e69c:	2300      	movs	r3, #0
 801e69e:	60fb      	str	r3, [r7, #12]
 801e6a0:	e002      	b.n	801e6a8 <inc_lock+0x6c>
 801e6a2:	68fb      	ldr	r3, [r7, #12]
 801e6a4:	3301      	adds	r3, #1
 801e6a6:	60fb      	str	r3, [r7, #12]
 801e6a8:	68fb      	ldr	r3, [r7, #12]
 801e6aa:	2b01      	cmp	r3, #1
 801e6ac:	d806      	bhi.n	801e6bc <inc_lock+0x80>
 801e6ae:	4a29      	ldr	r2, [pc, #164]	; (801e754 <inc_lock+0x118>)
 801e6b0:	68fb      	ldr	r3, [r7, #12]
 801e6b2:	011b      	lsls	r3, r3, #4
 801e6b4:	4413      	add	r3, r2
 801e6b6:	681b      	ldr	r3, [r3, #0]
 801e6b8:	2b00      	cmp	r3, #0
 801e6ba:	d1f2      	bne.n	801e6a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801e6bc:	68fb      	ldr	r3, [r7, #12]
 801e6be:	2b02      	cmp	r3, #2
 801e6c0:	d101      	bne.n	801e6c6 <inc_lock+0x8a>
 801e6c2:	2300      	movs	r3, #0
 801e6c4:	e040      	b.n	801e748 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801e6c6:	687b      	ldr	r3, [r7, #4]
 801e6c8:	681a      	ldr	r2, [r3, #0]
 801e6ca:	4922      	ldr	r1, [pc, #136]	; (801e754 <inc_lock+0x118>)
 801e6cc:	68fb      	ldr	r3, [r7, #12]
 801e6ce:	011b      	lsls	r3, r3, #4
 801e6d0:	440b      	add	r3, r1
 801e6d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801e6d4:	687b      	ldr	r3, [r7, #4]
 801e6d6:	689a      	ldr	r2, [r3, #8]
 801e6d8:	491e      	ldr	r1, [pc, #120]	; (801e754 <inc_lock+0x118>)
 801e6da:	68fb      	ldr	r3, [r7, #12]
 801e6dc:	011b      	lsls	r3, r3, #4
 801e6de:	440b      	add	r3, r1
 801e6e0:	3304      	adds	r3, #4
 801e6e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801e6e4:	687b      	ldr	r3, [r7, #4]
 801e6e6:	695a      	ldr	r2, [r3, #20]
 801e6e8:	491a      	ldr	r1, [pc, #104]	; (801e754 <inc_lock+0x118>)
 801e6ea:	68fb      	ldr	r3, [r7, #12]
 801e6ec:	011b      	lsls	r3, r3, #4
 801e6ee:	440b      	add	r3, r1
 801e6f0:	3308      	adds	r3, #8
 801e6f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801e6f4:	4a17      	ldr	r2, [pc, #92]	; (801e754 <inc_lock+0x118>)
 801e6f6:	68fb      	ldr	r3, [r7, #12]
 801e6f8:	011b      	lsls	r3, r3, #4
 801e6fa:	4413      	add	r3, r2
 801e6fc:	330c      	adds	r3, #12
 801e6fe:	2200      	movs	r2, #0
 801e700:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801e702:	683b      	ldr	r3, [r7, #0]
 801e704:	2b00      	cmp	r3, #0
 801e706:	d009      	beq.n	801e71c <inc_lock+0xe0>
 801e708:	4a12      	ldr	r2, [pc, #72]	; (801e754 <inc_lock+0x118>)
 801e70a:	68fb      	ldr	r3, [r7, #12]
 801e70c:	011b      	lsls	r3, r3, #4
 801e70e:	4413      	add	r3, r2
 801e710:	330c      	adds	r3, #12
 801e712:	881b      	ldrh	r3, [r3, #0]
 801e714:	2b00      	cmp	r3, #0
 801e716:	d001      	beq.n	801e71c <inc_lock+0xe0>
 801e718:	2300      	movs	r3, #0
 801e71a:	e015      	b.n	801e748 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801e71c:	683b      	ldr	r3, [r7, #0]
 801e71e:	2b00      	cmp	r3, #0
 801e720:	d108      	bne.n	801e734 <inc_lock+0xf8>
 801e722:	4a0c      	ldr	r2, [pc, #48]	; (801e754 <inc_lock+0x118>)
 801e724:	68fb      	ldr	r3, [r7, #12]
 801e726:	011b      	lsls	r3, r3, #4
 801e728:	4413      	add	r3, r2
 801e72a:	330c      	adds	r3, #12
 801e72c:	881b      	ldrh	r3, [r3, #0]
 801e72e:	3301      	adds	r3, #1
 801e730:	b29a      	uxth	r2, r3
 801e732:	e001      	b.n	801e738 <inc_lock+0xfc>
 801e734:	f44f 7280 	mov.w	r2, #256	; 0x100
 801e738:	4906      	ldr	r1, [pc, #24]	; (801e754 <inc_lock+0x118>)
 801e73a:	68fb      	ldr	r3, [r7, #12]
 801e73c:	011b      	lsls	r3, r3, #4
 801e73e:	440b      	add	r3, r1
 801e740:	330c      	adds	r3, #12
 801e742:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801e744:	68fb      	ldr	r3, [r7, #12]
 801e746:	3301      	adds	r3, #1
}
 801e748:	4618      	mov	r0, r3
 801e74a:	3714      	adds	r7, #20
 801e74c:	46bd      	mov	sp, r7
 801e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e752:	4770      	bx	lr
 801e754:	20001568 	.word	0x20001568

0801e758 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801e758:	b480      	push	{r7}
 801e75a:	b085      	sub	sp, #20
 801e75c:	af00      	add	r7, sp, #0
 801e75e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801e760:	687b      	ldr	r3, [r7, #4]
 801e762:	3b01      	subs	r3, #1
 801e764:	607b      	str	r3, [r7, #4]
 801e766:	687b      	ldr	r3, [r7, #4]
 801e768:	2b01      	cmp	r3, #1
 801e76a:	d825      	bhi.n	801e7b8 <dec_lock+0x60>
		n = Files[i].ctr;
 801e76c:	4a17      	ldr	r2, [pc, #92]	; (801e7cc <dec_lock+0x74>)
 801e76e:	687b      	ldr	r3, [r7, #4]
 801e770:	011b      	lsls	r3, r3, #4
 801e772:	4413      	add	r3, r2
 801e774:	330c      	adds	r3, #12
 801e776:	881b      	ldrh	r3, [r3, #0]
 801e778:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801e77a:	89fb      	ldrh	r3, [r7, #14]
 801e77c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e780:	d101      	bne.n	801e786 <dec_lock+0x2e>
 801e782:	2300      	movs	r3, #0
 801e784:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801e786:	89fb      	ldrh	r3, [r7, #14]
 801e788:	2b00      	cmp	r3, #0
 801e78a:	d002      	beq.n	801e792 <dec_lock+0x3a>
 801e78c:	89fb      	ldrh	r3, [r7, #14]
 801e78e:	3b01      	subs	r3, #1
 801e790:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801e792:	4a0e      	ldr	r2, [pc, #56]	; (801e7cc <dec_lock+0x74>)
 801e794:	687b      	ldr	r3, [r7, #4]
 801e796:	011b      	lsls	r3, r3, #4
 801e798:	4413      	add	r3, r2
 801e79a:	330c      	adds	r3, #12
 801e79c:	89fa      	ldrh	r2, [r7, #14]
 801e79e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801e7a0:	89fb      	ldrh	r3, [r7, #14]
 801e7a2:	2b00      	cmp	r3, #0
 801e7a4:	d105      	bne.n	801e7b2 <dec_lock+0x5a>
 801e7a6:	4a09      	ldr	r2, [pc, #36]	; (801e7cc <dec_lock+0x74>)
 801e7a8:	687b      	ldr	r3, [r7, #4]
 801e7aa:	011b      	lsls	r3, r3, #4
 801e7ac:	4413      	add	r3, r2
 801e7ae:	2200      	movs	r2, #0
 801e7b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801e7b2:	2300      	movs	r3, #0
 801e7b4:	737b      	strb	r3, [r7, #13]
 801e7b6:	e001      	b.n	801e7bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801e7b8:	2302      	movs	r3, #2
 801e7ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801e7bc:	7b7b      	ldrb	r3, [r7, #13]
}
 801e7be:	4618      	mov	r0, r3
 801e7c0:	3714      	adds	r7, #20
 801e7c2:	46bd      	mov	sp, r7
 801e7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7c8:	4770      	bx	lr
 801e7ca:	bf00      	nop
 801e7cc:	20001568 	.word	0x20001568

0801e7d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801e7d0:	b480      	push	{r7}
 801e7d2:	b085      	sub	sp, #20
 801e7d4:	af00      	add	r7, sp, #0
 801e7d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801e7d8:	2300      	movs	r3, #0
 801e7da:	60fb      	str	r3, [r7, #12]
 801e7dc:	e010      	b.n	801e800 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801e7de:	4a0d      	ldr	r2, [pc, #52]	; (801e814 <clear_lock+0x44>)
 801e7e0:	68fb      	ldr	r3, [r7, #12]
 801e7e2:	011b      	lsls	r3, r3, #4
 801e7e4:	4413      	add	r3, r2
 801e7e6:	681b      	ldr	r3, [r3, #0]
 801e7e8:	687a      	ldr	r2, [r7, #4]
 801e7ea:	429a      	cmp	r2, r3
 801e7ec:	d105      	bne.n	801e7fa <clear_lock+0x2a>
 801e7ee:	4a09      	ldr	r2, [pc, #36]	; (801e814 <clear_lock+0x44>)
 801e7f0:	68fb      	ldr	r3, [r7, #12]
 801e7f2:	011b      	lsls	r3, r3, #4
 801e7f4:	4413      	add	r3, r2
 801e7f6:	2200      	movs	r2, #0
 801e7f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801e7fa:	68fb      	ldr	r3, [r7, #12]
 801e7fc:	3301      	adds	r3, #1
 801e7fe:	60fb      	str	r3, [r7, #12]
 801e800:	68fb      	ldr	r3, [r7, #12]
 801e802:	2b01      	cmp	r3, #1
 801e804:	d9eb      	bls.n	801e7de <clear_lock+0xe>
	}
}
 801e806:	bf00      	nop
 801e808:	3714      	adds	r7, #20
 801e80a:	46bd      	mov	sp, r7
 801e80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e810:	4770      	bx	lr
 801e812:	bf00      	nop
 801e814:	20001568 	.word	0x20001568

0801e818 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801e818:	b580      	push	{r7, lr}
 801e81a:	b086      	sub	sp, #24
 801e81c:	af00      	add	r7, sp, #0
 801e81e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801e820:	2300      	movs	r3, #0
 801e822:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801e824:	687b      	ldr	r3, [r7, #4]
 801e826:	78db      	ldrb	r3, [r3, #3]
 801e828:	2b00      	cmp	r3, #0
 801e82a:	d034      	beq.n	801e896 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801e82c:	687b      	ldr	r3, [r7, #4]
 801e82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e830:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801e832:	687b      	ldr	r3, [r7, #4]
 801e834:	7858      	ldrb	r0, [r3, #1]
 801e836:	687b      	ldr	r3, [r7, #4]
 801e838:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801e83c:	2301      	movs	r3, #1
 801e83e:	697a      	ldr	r2, [r7, #20]
 801e840:	f7ff fd10 	bl	801e264 <disk_write>
 801e844:	4603      	mov	r3, r0
 801e846:	2b00      	cmp	r3, #0
 801e848:	d002      	beq.n	801e850 <sync_window+0x38>
			res = FR_DISK_ERR;
 801e84a:	2301      	movs	r3, #1
 801e84c:	73fb      	strb	r3, [r7, #15]
 801e84e:	e022      	b.n	801e896 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801e850:	687b      	ldr	r3, [r7, #4]
 801e852:	2200      	movs	r2, #0
 801e854:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801e856:	687b      	ldr	r3, [r7, #4]
 801e858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e85a:	697a      	ldr	r2, [r7, #20]
 801e85c:	1ad2      	subs	r2, r2, r3
 801e85e:	687b      	ldr	r3, [r7, #4]
 801e860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e862:	429a      	cmp	r2, r3
 801e864:	d217      	bcs.n	801e896 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801e866:	687b      	ldr	r3, [r7, #4]
 801e868:	789b      	ldrb	r3, [r3, #2]
 801e86a:	613b      	str	r3, [r7, #16]
 801e86c:	e010      	b.n	801e890 <sync_window+0x78>
					wsect += fs->fsize;
 801e86e:	687b      	ldr	r3, [r7, #4]
 801e870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e872:	697a      	ldr	r2, [r7, #20]
 801e874:	4413      	add	r3, r2
 801e876:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801e878:	687b      	ldr	r3, [r7, #4]
 801e87a:	7858      	ldrb	r0, [r3, #1]
 801e87c:	687b      	ldr	r3, [r7, #4]
 801e87e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801e882:	2301      	movs	r3, #1
 801e884:	697a      	ldr	r2, [r7, #20]
 801e886:	f7ff fced 	bl	801e264 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801e88a:	693b      	ldr	r3, [r7, #16]
 801e88c:	3b01      	subs	r3, #1
 801e88e:	613b      	str	r3, [r7, #16]
 801e890:	693b      	ldr	r3, [r7, #16]
 801e892:	2b01      	cmp	r3, #1
 801e894:	d8eb      	bhi.n	801e86e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801e896:	7bfb      	ldrb	r3, [r7, #15]
}
 801e898:	4618      	mov	r0, r3
 801e89a:	3718      	adds	r7, #24
 801e89c:	46bd      	mov	sp, r7
 801e89e:	bd80      	pop	{r7, pc}

0801e8a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801e8a0:	b580      	push	{r7, lr}
 801e8a2:	b084      	sub	sp, #16
 801e8a4:	af00      	add	r7, sp, #0
 801e8a6:	6078      	str	r0, [r7, #4]
 801e8a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801e8aa:	2300      	movs	r3, #0
 801e8ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801e8ae:	687b      	ldr	r3, [r7, #4]
 801e8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e8b2:	683a      	ldr	r2, [r7, #0]
 801e8b4:	429a      	cmp	r2, r3
 801e8b6:	d01b      	beq.n	801e8f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801e8b8:	6878      	ldr	r0, [r7, #4]
 801e8ba:	f7ff ffad 	bl	801e818 <sync_window>
 801e8be:	4603      	mov	r3, r0
 801e8c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801e8c2:	7bfb      	ldrb	r3, [r7, #15]
 801e8c4:	2b00      	cmp	r3, #0
 801e8c6:	d113      	bne.n	801e8f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801e8c8:	687b      	ldr	r3, [r7, #4]
 801e8ca:	7858      	ldrb	r0, [r3, #1]
 801e8cc:	687b      	ldr	r3, [r7, #4]
 801e8ce:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801e8d2:	2301      	movs	r3, #1
 801e8d4:	683a      	ldr	r2, [r7, #0]
 801e8d6:	f7ff fca5 	bl	801e224 <disk_read>
 801e8da:	4603      	mov	r3, r0
 801e8dc:	2b00      	cmp	r3, #0
 801e8de:	d004      	beq.n	801e8ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801e8e0:	f04f 33ff 	mov.w	r3, #4294967295
 801e8e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801e8e6:	2301      	movs	r3, #1
 801e8e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801e8ea:	687b      	ldr	r3, [r7, #4]
 801e8ec:	683a      	ldr	r2, [r7, #0]
 801e8ee:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 801e8f0:	7bfb      	ldrb	r3, [r7, #15]
}
 801e8f2:	4618      	mov	r0, r3
 801e8f4:	3710      	adds	r7, #16
 801e8f6:	46bd      	mov	sp, r7
 801e8f8:	bd80      	pop	{r7, pc}
	...

0801e8fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801e8fc:	b580      	push	{r7, lr}
 801e8fe:	b084      	sub	sp, #16
 801e900:	af00      	add	r7, sp, #0
 801e902:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801e904:	6878      	ldr	r0, [r7, #4]
 801e906:	f7ff ff87 	bl	801e818 <sync_window>
 801e90a:	4603      	mov	r3, r0
 801e90c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801e90e:	7bfb      	ldrb	r3, [r7, #15]
 801e910:	2b00      	cmp	r3, #0
 801e912:	d159      	bne.n	801e9c8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801e914:	687b      	ldr	r3, [r7, #4]
 801e916:	781b      	ldrb	r3, [r3, #0]
 801e918:	2b03      	cmp	r3, #3
 801e91a:	d149      	bne.n	801e9b0 <sync_fs+0xb4>
 801e91c:	687b      	ldr	r3, [r7, #4]
 801e91e:	791b      	ldrb	r3, [r3, #4]
 801e920:	2b01      	cmp	r3, #1
 801e922:	d145      	bne.n	801e9b0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801e924:	687b      	ldr	r3, [r7, #4]
 801e926:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801e92a:	687b      	ldr	r3, [r7, #4]
 801e92c:	899b      	ldrh	r3, [r3, #12]
 801e92e:	461a      	mov	r2, r3
 801e930:	2100      	movs	r1, #0
 801e932:	f7ff fd78 	bl	801e426 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801e936:	687b      	ldr	r3, [r7, #4]
 801e938:	333c      	adds	r3, #60	; 0x3c
 801e93a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801e93e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801e942:	4618      	mov	r0, r3
 801e944:	f7ff fd07 	bl	801e356 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801e948:	687b      	ldr	r3, [r7, #4]
 801e94a:	333c      	adds	r3, #60	; 0x3c
 801e94c:	4921      	ldr	r1, [pc, #132]	; (801e9d4 <sync_fs+0xd8>)
 801e94e:	4618      	mov	r0, r3
 801e950:	f7ff fd1c 	bl	801e38c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801e954:	687b      	ldr	r3, [r7, #4]
 801e956:	333c      	adds	r3, #60	; 0x3c
 801e958:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801e95c:	491e      	ldr	r1, [pc, #120]	; (801e9d8 <sync_fs+0xdc>)
 801e95e:	4618      	mov	r0, r3
 801e960:	f7ff fd14 	bl	801e38c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801e964:	687b      	ldr	r3, [r7, #4]
 801e966:	333c      	adds	r3, #60	; 0x3c
 801e968:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801e96c:	687b      	ldr	r3, [r7, #4]
 801e96e:	69db      	ldr	r3, [r3, #28]
 801e970:	4619      	mov	r1, r3
 801e972:	4610      	mov	r0, r2
 801e974:	f7ff fd0a 	bl	801e38c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801e978:	687b      	ldr	r3, [r7, #4]
 801e97a:	333c      	adds	r3, #60	; 0x3c
 801e97c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801e980:	687b      	ldr	r3, [r7, #4]
 801e982:	699b      	ldr	r3, [r3, #24]
 801e984:	4619      	mov	r1, r3
 801e986:	4610      	mov	r0, r2
 801e988:	f7ff fd00 	bl	801e38c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801e98c:	687b      	ldr	r3, [r7, #4]
 801e98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e990:	1c5a      	adds	r2, r3, #1
 801e992:	687b      	ldr	r3, [r7, #4]
 801e994:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801e996:	687b      	ldr	r3, [r7, #4]
 801e998:	7858      	ldrb	r0, [r3, #1]
 801e99a:	687b      	ldr	r3, [r7, #4]
 801e99c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801e9a0:	687b      	ldr	r3, [r7, #4]
 801e9a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e9a4:	2301      	movs	r3, #1
 801e9a6:	f7ff fc5d 	bl	801e264 <disk_write>
			fs->fsi_flag = 0;
 801e9aa:	687b      	ldr	r3, [r7, #4]
 801e9ac:	2200      	movs	r2, #0
 801e9ae:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801e9b0:	687b      	ldr	r3, [r7, #4]
 801e9b2:	785b      	ldrb	r3, [r3, #1]
 801e9b4:	2200      	movs	r2, #0
 801e9b6:	2100      	movs	r1, #0
 801e9b8:	4618      	mov	r0, r3
 801e9ba:	f7ff fc73 	bl	801e2a4 <disk_ioctl>
 801e9be:	4603      	mov	r3, r0
 801e9c0:	2b00      	cmp	r3, #0
 801e9c2:	d001      	beq.n	801e9c8 <sync_fs+0xcc>
 801e9c4:	2301      	movs	r3, #1
 801e9c6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801e9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 801e9ca:	4618      	mov	r0, r3
 801e9cc:	3710      	adds	r7, #16
 801e9ce:	46bd      	mov	sp, r7
 801e9d0:	bd80      	pop	{r7, pc}
 801e9d2:	bf00      	nop
 801e9d4:	41615252 	.word	0x41615252
 801e9d8:	61417272 	.word	0x61417272

0801e9dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801e9dc:	b480      	push	{r7}
 801e9de:	b083      	sub	sp, #12
 801e9e0:	af00      	add	r7, sp, #0
 801e9e2:	6078      	str	r0, [r7, #4]
 801e9e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801e9e6:	683b      	ldr	r3, [r7, #0]
 801e9e8:	3b02      	subs	r3, #2
 801e9ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801e9ec:	687b      	ldr	r3, [r7, #4]
 801e9ee:	6a1b      	ldr	r3, [r3, #32]
 801e9f0:	3b02      	subs	r3, #2
 801e9f2:	683a      	ldr	r2, [r7, #0]
 801e9f4:	429a      	cmp	r2, r3
 801e9f6:	d301      	bcc.n	801e9fc <clust2sect+0x20>
 801e9f8:	2300      	movs	r3, #0
 801e9fa:	e008      	b.n	801ea0e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801e9fc:	687b      	ldr	r3, [r7, #4]
 801e9fe:	895b      	ldrh	r3, [r3, #10]
 801ea00:	461a      	mov	r2, r3
 801ea02:	683b      	ldr	r3, [r7, #0]
 801ea04:	fb03 f202 	mul.w	r2, r3, r2
 801ea08:	687b      	ldr	r3, [r7, #4]
 801ea0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ea0c:	4413      	add	r3, r2
}
 801ea0e:	4618      	mov	r0, r3
 801ea10:	370c      	adds	r7, #12
 801ea12:	46bd      	mov	sp, r7
 801ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea18:	4770      	bx	lr

0801ea1a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801ea1a:	b580      	push	{r7, lr}
 801ea1c:	b086      	sub	sp, #24
 801ea1e:	af00      	add	r7, sp, #0
 801ea20:	6078      	str	r0, [r7, #4]
 801ea22:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801ea24:	687b      	ldr	r3, [r7, #4]
 801ea26:	681b      	ldr	r3, [r3, #0]
 801ea28:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801ea2a:	683b      	ldr	r3, [r7, #0]
 801ea2c:	2b01      	cmp	r3, #1
 801ea2e:	d904      	bls.n	801ea3a <get_fat+0x20>
 801ea30:	693b      	ldr	r3, [r7, #16]
 801ea32:	6a1b      	ldr	r3, [r3, #32]
 801ea34:	683a      	ldr	r2, [r7, #0]
 801ea36:	429a      	cmp	r2, r3
 801ea38:	d302      	bcc.n	801ea40 <get_fat+0x26>
		val = 1;	/* Internal error */
 801ea3a:	2301      	movs	r3, #1
 801ea3c:	617b      	str	r3, [r7, #20]
 801ea3e:	e0b7      	b.n	801ebb0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801ea40:	f04f 33ff 	mov.w	r3, #4294967295
 801ea44:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801ea46:	693b      	ldr	r3, [r7, #16]
 801ea48:	781b      	ldrb	r3, [r3, #0]
 801ea4a:	2b02      	cmp	r3, #2
 801ea4c:	d05a      	beq.n	801eb04 <get_fat+0xea>
 801ea4e:	2b03      	cmp	r3, #3
 801ea50:	d07d      	beq.n	801eb4e <get_fat+0x134>
 801ea52:	2b01      	cmp	r3, #1
 801ea54:	f040 80a2 	bne.w	801eb9c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801ea58:	683b      	ldr	r3, [r7, #0]
 801ea5a:	60fb      	str	r3, [r7, #12]
 801ea5c:	68fb      	ldr	r3, [r7, #12]
 801ea5e:	085b      	lsrs	r3, r3, #1
 801ea60:	68fa      	ldr	r2, [r7, #12]
 801ea62:	4413      	add	r3, r2
 801ea64:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801ea66:	693b      	ldr	r3, [r7, #16]
 801ea68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ea6a:	693b      	ldr	r3, [r7, #16]
 801ea6c:	899b      	ldrh	r3, [r3, #12]
 801ea6e:	4619      	mov	r1, r3
 801ea70:	68fb      	ldr	r3, [r7, #12]
 801ea72:	fbb3 f3f1 	udiv	r3, r3, r1
 801ea76:	4413      	add	r3, r2
 801ea78:	4619      	mov	r1, r3
 801ea7a:	6938      	ldr	r0, [r7, #16]
 801ea7c:	f7ff ff10 	bl	801e8a0 <move_window>
 801ea80:	4603      	mov	r3, r0
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	f040 808d 	bne.w	801eba2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 801ea88:	68fb      	ldr	r3, [r7, #12]
 801ea8a:	1c5a      	adds	r2, r3, #1
 801ea8c:	60fa      	str	r2, [r7, #12]
 801ea8e:	693a      	ldr	r2, [r7, #16]
 801ea90:	8992      	ldrh	r2, [r2, #12]
 801ea92:	fbb3 f1f2 	udiv	r1, r3, r2
 801ea96:	fb02 f201 	mul.w	r2, r2, r1
 801ea9a:	1a9b      	subs	r3, r3, r2
 801ea9c:	693a      	ldr	r2, [r7, #16]
 801ea9e:	4413      	add	r3, r2
 801eaa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801eaa4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801eaa6:	693b      	ldr	r3, [r7, #16]
 801eaa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801eaaa:	693b      	ldr	r3, [r7, #16]
 801eaac:	899b      	ldrh	r3, [r3, #12]
 801eaae:	4619      	mov	r1, r3
 801eab0:	68fb      	ldr	r3, [r7, #12]
 801eab2:	fbb3 f3f1 	udiv	r3, r3, r1
 801eab6:	4413      	add	r3, r2
 801eab8:	4619      	mov	r1, r3
 801eaba:	6938      	ldr	r0, [r7, #16]
 801eabc:	f7ff fef0 	bl	801e8a0 <move_window>
 801eac0:	4603      	mov	r3, r0
 801eac2:	2b00      	cmp	r3, #0
 801eac4:	d16f      	bne.n	801eba6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801eac6:	693b      	ldr	r3, [r7, #16]
 801eac8:	899b      	ldrh	r3, [r3, #12]
 801eaca:	461a      	mov	r2, r3
 801eacc:	68fb      	ldr	r3, [r7, #12]
 801eace:	fbb3 f1f2 	udiv	r1, r3, r2
 801ead2:	fb02 f201 	mul.w	r2, r2, r1
 801ead6:	1a9b      	subs	r3, r3, r2
 801ead8:	693a      	ldr	r2, [r7, #16]
 801eada:	4413      	add	r3, r2
 801eadc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801eae0:	021b      	lsls	r3, r3, #8
 801eae2:	461a      	mov	r2, r3
 801eae4:	68bb      	ldr	r3, [r7, #8]
 801eae6:	4313      	orrs	r3, r2
 801eae8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801eaea:	683b      	ldr	r3, [r7, #0]
 801eaec:	f003 0301 	and.w	r3, r3, #1
 801eaf0:	2b00      	cmp	r3, #0
 801eaf2:	d002      	beq.n	801eafa <get_fat+0xe0>
 801eaf4:	68bb      	ldr	r3, [r7, #8]
 801eaf6:	091b      	lsrs	r3, r3, #4
 801eaf8:	e002      	b.n	801eb00 <get_fat+0xe6>
 801eafa:	68bb      	ldr	r3, [r7, #8]
 801eafc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801eb00:	617b      	str	r3, [r7, #20]
			break;
 801eb02:	e055      	b.n	801ebb0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801eb04:	693b      	ldr	r3, [r7, #16]
 801eb06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801eb08:	693b      	ldr	r3, [r7, #16]
 801eb0a:	899b      	ldrh	r3, [r3, #12]
 801eb0c:	085b      	lsrs	r3, r3, #1
 801eb0e:	b29b      	uxth	r3, r3
 801eb10:	4619      	mov	r1, r3
 801eb12:	683b      	ldr	r3, [r7, #0]
 801eb14:	fbb3 f3f1 	udiv	r3, r3, r1
 801eb18:	4413      	add	r3, r2
 801eb1a:	4619      	mov	r1, r3
 801eb1c:	6938      	ldr	r0, [r7, #16]
 801eb1e:	f7ff febf 	bl	801e8a0 <move_window>
 801eb22:	4603      	mov	r3, r0
 801eb24:	2b00      	cmp	r3, #0
 801eb26:	d140      	bne.n	801ebaa <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801eb28:	693b      	ldr	r3, [r7, #16]
 801eb2a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801eb2e:	683b      	ldr	r3, [r7, #0]
 801eb30:	005b      	lsls	r3, r3, #1
 801eb32:	693a      	ldr	r2, [r7, #16]
 801eb34:	8992      	ldrh	r2, [r2, #12]
 801eb36:	fbb3 f0f2 	udiv	r0, r3, r2
 801eb3a:	fb02 f200 	mul.w	r2, r2, r0
 801eb3e:	1a9b      	subs	r3, r3, r2
 801eb40:	440b      	add	r3, r1
 801eb42:	4618      	mov	r0, r3
 801eb44:	f7ff fbcc 	bl	801e2e0 <ld_word>
 801eb48:	4603      	mov	r3, r0
 801eb4a:	617b      	str	r3, [r7, #20]
			break;
 801eb4c:	e030      	b.n	801ebb0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801eb4e:	693b      	ldr	r3, [r7, #16]
 801eb50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801eb52:	693b      	ldr	r3, [r7, #16]
 801eb54:	899b      	ldrh	r3, [r3, #12]
 801eb56:	089b      	lsrs	r3, r3, #2
 801eb58:	b29b      	uxth	r3, r3
 801eb5a:	4619      	mov	r1, r3
 801eb5c:	683b      	ldr	r3, [r7, #0]
 801eb5e:	fbb3 f3f1 	udiv	r3, r3, r1
 801eb62:	4413      	add	r3, r2
 801eb64:	4619      	mov	r1, r3
 801eb66:	6938      	ldr	r0, [r7, #16]
 801eb68:	f7ff fe9a 	bl	801e8a0 <move_window>
 801eb6c:	4603      	mov	r3, r0
 801eb6e:	2b00      	cmp	r3, #0
 801eb70:	d11d      	bne.n	801ebae <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801eb72:	693b      	ldr	r3, [r7, #16]
 801eb74:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801eb78:	683b      	ldr	r3, [r7, #0]
 801eb7a:	009b      	lsls	r3, r3, #2
 801eb7c:	693a      	ldr	r2, [r7, #16]
 801eb7e:	8992      	ldrh	r2, [r2, #12]
 801eb80:	fbb3 f0f2 	udiv	r0, r3, r2
 801eb84:	fb02 f200 	mul.w	r2, r2, r0
 801eb88:	1a9b      	subs	r3, r3, r2
 801eb8a:	440b      	add	r3, r1
 801eb8c:	4618      	mov	r0, r3
 801eb8e:	f7ff fbbf 	bl	801e310 <ld_dword>
 801eb92:	4603      	mov	r3, r0
 801eb94:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801eb98:	617b      	str	r3, [r7, #20]
			break;
 801eb9a:	e009      	b.n	801ebb0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801eb9c:	2301      	movs	r3, #1
 801eb9e:	617b      	str	r3, [r7, #20]
 801eba0:	e006      	b.n	801ebb0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801eba2:	bf00      	nop
 801eba4:	e004      	b.n	801ebb0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801eba6:	bf00      	nop
 801eba8:	e002      	b.n	801ebb0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801ebaa:	bf00      	nop
 801ebac:	e000      	b.n	801ebb0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801ebae:	bf00      	nop
		}
	}

	return val;
 801ebb0:	697b      	ldr	r3, [r7, #20]
}
 801ebb2:	4618      	mov	r0, r3
 801ebb4:	3718      	adds	r7, #24
 801ebb6:	46bd      	mov	sp, r7
 801ebb8:	bd80      	pop	{r7, pc}

0801ebba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801ebba:	b590      	push	{r4, r7, lr}
 801ebbc:	b089      	sub	sp, #36	; 0x24
 801ebbe:	af00      	add	r7, sp, #0
 801ebc0:	60f8      	str	r0, [r7, #12]
 801ebc2:	60b9      	str	r1, [r7, #8]
 801ebc4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801ebc6:	2302      	movs	r3, #2
 801ebc8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801ebca:	68bb      	ldr	r3, [r7, #8]
 801ebcc:	2b01      	cmp	r3, #1
 801ebce:	f240 8106 	bls.w	801edde <put_fat+0x224>
 801ebd2:	68fb      	ldr	r3, [r7, #12]
 801ebd4:	6a1b      	ldr	r3, [r3, #32]
 801ebd6:	68ba      	ldr	r2, [r7, #8]
 801ebd8:	429a      	cmp	r2, r3
 801ebda:	f080 8100 	bcs.w	801edde <put_fat+0x224>
		switch (fs->fs_type) {
 801ebde:	68fb      	ldr	r3, [r7, #12]
 801ebe0:	781b      	ldrb	r3, [r3, #0]
 801ebe2:	2b02      	cmp	r3, #2
 801ebe4:	f000 8088 	beq.w	801ecf8 <put_fat+0x13e>
 801ebe8:	2b03      	cmp	r3, #3
 801ebea:	f000 80b0 	beq.w	801ed4e <put_fat+0x194>
 801ebee:	2b01      	cmp	r3, #1
 801ebf0:	f040 80f5 	bne.w	801edde <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801ebf4:	68bb      	ldr	r3, [r7, #8]
 801ebf6:	61bb      	str	r3, [r7, #24]
 801ebf8:	69bb      	ldr	r3, [r7, #24]
 801ebfa:	085b      	lsrs	r3, r3, #1
 801ebfc:	69ba      	ldr	r2, [r7, #24]
 801ebfe:	4413      	add	r3, r2
 801ec00:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801ec02:	68fb      	ldr	r3, [r7, #12]
 801ec04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ec06:	68fb      	ldr	r3, [r7, #12]
 801ec08:	899b      	ldrh	r3, [r3, #12]
 801ec0a:	4619      	mov	r1, r3
 801ec0c:	69bb      	ldr	r3, [r7, #24]
 801ec0e:	fbb3 f3f1 	udiv	r3, r3, r1
 801ec12:	4413      	add	r3, r2
 801ec14:	4619      	mov	r1, r3
 801ec16:	68f8      	ldr	r0, [r7, #12]
 801ec18:	f7ff fe42 	bl	801e8a0 <move_window>
 801ec1c:	4603      	mov	r3, r0
 801ec1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801ec20:	7ffb      	ldrb	r3, [r7, #31]
 801ec22:	2b00      	cmp	r3, #0
 801ec24:	f040 80d4 	bne.w	801edd0 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 801ec28:	68fb      	ldr	r3, [r7, #12]
 801ec2a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801ec2e:	69bb      	ldr	r3, [r7, #24]
 801ec30:	1c5a      	adds	r2, r3, #1
 801ec32:	61ba      	str	r2, [r7, #24]
 801ec34:	68fa      	ldr	r2, [r7, #12]
 801ec36:	8992      	ldrh	r2, [r2, #12]
 801ec38:	fbb3 f0f2 	udiv	r0, r3, r2
 801ec3c:	fb02 f200 	mul.w	r2, r2, r0
 801ec40:	1a9b      	subs	r3, r3, r2
 801ec42:	440b      	add	r3, r1
 801ec44:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801ec46:	68bb      	ldr	r3, [r7, #8]
 801ec48:	f003 0301 	and.w	r3, r3, #1
 801ec4c:	2b00      	cmp	r3, #0
 801ec4e:	d00d      	beq.n	801ec6c <put_fat+0xb2>
 801ec50:	697b      	ldr	r3, [r7, #20]
 801ec52:	781b      	ldrb	r3, [r3, #0]
 801ec54:	b25b      	sxtb	r3, r3
 801ec56:	f003 030f 	and.w	r3, r3, #15
 801ec5a:	b25a      	sxtb	r2, r3
 801ec5c:	687b      	ldr	r3, [r7, #4]
 801ec5e:	b2db      	uxtb	r3, r3
 801ec60:	011b      	lsls	r3, r3, #4
 801ec62:	b25b      	sxtb	r3, r3
 801ec64:	4313      	orrs	r3, r2
 801ec66:	b25b      	sxtb	r3, r3
 801ec68:	b2db      	uxtb	r3, r3
 801ec6a:	e001      	b.n	801ec70 <put_fat+0xb6>
 801ec6c:	687b      	ldr	r3, [r7, #4]
 801ec6e:	b2db      	uxtb	r3, r3
 801ec70:	697a      	ldr	r2, [r7, #20]
 801ec72:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801ec74:	68fb      	ldr	r3, [r7, #12]
 801ec76:	2201      	movs	r2, #1
 801ec78:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801ec7a:	68fb      	ldr	r3, [r7, #12]
 801ec7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ec7e:	68fb      	ldr	r3, [r7, #12]
 801ec80:	899b      	ldrh	r3, [r3, #12]
 801ec82:	4619      	mov	r1, r3
 801ec84:	69bb      	ldr	r3, [r7, #24]
 801ec86:	fbb3 f3f1 	udiv	r3, r3, r1
 801ec8a:	4413      	add	r3, r2
 801ec8c:	4619      	mov	r1, r3
 801ec8e:	68f8      	ldr	r0, [r7, #12]
 801ec90:	f7ff fe06 	bl	801e8a0 <move_window>
 801ec94:	4603      	mov	r3, r0
 801ec96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801ec98:	7ffb      	ldrb	r3, [r7, #31]
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	f040 809a 	bne.w	801edd4 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 801eca0:	68fb      	ldr	r3, [r7, #12]
 801eca2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801eca6:	68fb      	ldr	r3, [r7, #12]
 801eca8:	899b      	ldrh	r3, [r3, #12]
 801ecaa:	461a      	mov	r2, r3
 801ecac:	69bb      	ldr	r3, [r7, #24]
 801ecae:	fbb3 f0f2 	udiv	r0, r3, r2
 801ecb2:	fb02 f200 	mul.w	r2, r2, r0
 801ecb6:	1a9b      	subs	r3, r3, r2
 801ecb8:	440b      	add	r3, r1
 801ecba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801ecbc:	68bb      	ldr	r3, [r7, #8]
 801ecbe:	f003 0301 	and.w	r3, r3, #1
 801ecc2:	2b00      	cmp	r3, #0
 801ecc4:	d003      	beq.n	801ecce <put_fat+0x114>
 801ecc6:	687b      	ldr	r3, [r7, #4]
 801ecc8:	091b      	lsrs	r3, r3, #4
 801ecca:	b2db      	uxtb	r3, r3
 801eccc:	e00e      	b.n	801ecec <put_fat+0x132>
 801ecce:	697b      	ldr	r3, [r7, #20]
 801ecd0:	781b      	ldrb	r3, [r3, #0]
 801ecd2:	b25b      	sxtb	r3, r3
 801ecd4:	f023 030f 	bic.w	r3, r3, #15
 801ecd8:	b25a      	sxtb	r2, r3
 801ecda:	687b      	ldr	r3, [r7, #4]
 801ecdc:	0a1b      	lsrs	r3, r3, #8
 801ecde:	b25b      	sxtb	r3, r3
 801ece0:	f003 030f 	and.w	r3, r3, #15
 801ece4:	b25b      	sxtb	r3, r3
 801ece6:	4313      	orrs	r3, r2
 801ece8:	b25b      	sxtb	r3, r3
 801ecea:	b2db      	uxtb	r3, r3
 801ecec:	697a      	ldr	r2, [r7, #20]
 801ecee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801ecf0:	68fb      	ldr	r3, [r7, #12]
 801ecf2:	2201      	movs	r2, #1
 801ecf4:	70da      	strb	r2, [r3, #3]
			break;
 801ecf6:	e072      	b.n	801edde <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801ecf8:	68fb      	ldr	r3, [r7, #12]
 801ecfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ecfc:	68fb      	ldr	r3, [r7, #12]
 801ecfe:	899b      	ldrh	r3, [r3, #12]
 801ed00:	085b      	lsrs	r3, r3, #1
 801ed02:	b29b      	uxth	r3, r3
 801ed04:	4619      	mov	r1, r3
 801ed06:	68bb      	ldr	r3, [r7, #8]
 801ed08:	fbb3 f3f1 	udiv	r3, r3, r1
 801ed0c:	4413      	add	r3, r2
 801ed0e:	4619      	mov	r1, r3
 801ed10:	68f8      	ldr	r0, [r7, #12]
 801ed12:	f7ff fdc5 	bl	801e8a0 <move_window>
 801ed16:	4603      	mov	r3, r0
 801ed18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801ed1a:	7ffb      	ldrb	r3, [r7, #31]
 801ed1c:	2b00      	cmp	r3, #0
 801ed1e:	d15b      	bne.n	801edd8 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801ed20:	68fb      	ldr	r3, [r7, #12]
 801ed22:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801ed26:	68bb      	ldr	r3, [r7, #8]
 801ed28:	005b      	lsls	r3, r3, #1
 801ed2a:	68fa      	ldr	r2, [r7, #12]
 801ed2c:	8992      	ldrh	r2, [r2, #12]
 801ed2e:	fbb3 f0f2 	udiv	r0, r3, r2
 801ed32:	fb02 f200 	mul.w	r2, r2, r0
 801ed36:	1a9b      	subs	r3, r3, r2
 801ed38:	440b      	add	r3, r1
 801ed3a:	687a      	ldr	r2, [r7, #4]
 801ed3c:	b292      	uxth	r2, r2
 801ed3e:	4611      	mov	r1, r2
 801ed40:	4618      	mov	r0, r3
 801ed42:	f7ff fb08 	bl	801e356 <st_word>
			fs->wflag = 1;
 801ed46:	68fb      	ldr	r3, [r7, #12]
 801ed48:	2201      	movs	r2, #1
 801ed4a:	70da      	strb	r2, [r3, #3]
			break;
 801ed4c:	e047      	b.n	801edde <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801ed4e:	68fb      	ldr	r3, [r7, #12]
 801ed50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ed52:	68fb      	ldr	r3, [r7, #12]
 801ed54:	899b      	ldrh	r3, [r3, #12]
 801ed56:	089b      	lsrs	r3, r3, #2
 801ed58:	b29b      	uxth	r3, r3
 801ed5a:	4619      	mov	r1, r3
 801ed5c:	68bb      	ldr	r3, [r7, #8]
 801ed5e:	fbb3 f3f1 	udiv	r3, r3, r1
 801ed62:	4413      	add	r3, r2
 801ed64:	4619      	mov	r1, r3
 801ed66:	68f8      	ldr	r0, [r7, #12]
 801ed68:	f7ff fd9a 	bl	801e8a0 <move_window>
 801ed6c:	4603      	mov	r3, r0
 801ed6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801ed70:	7ffb      	ldrb	r3, [r7, #31]
 801ed72:	2b00      	cmp	r3, #0
 801ed74:	d132      	bne.n	801eddc <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801ed76:	687b      	ldr	r3, [r7, #4]
 801ed78:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801ed7c:	68fb      	ldr	r3, [r7, #12]
 801ed7e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801ed82:	68bb      	ldr	r3, [r7, #8]
 801ed84:	009b      	lsls	r3, r3, #2
 801ed86:	68fa      	ldr	r2, [r7, #12]
 801ed88:	8992      	ldrh	r2, [r2, #12]
 801ed8a:	fbb3 f0f2 	udiv	r0, r3, r2
 801ed8e:	fb02 f200 	mul.w	r2, r2, r0
 801ed92:	1a9b      	subs	r3, r3, r2
 801ed94:	440b      	add	r3, r1
 801ed96:	4618      	mov	r0, r3
 801ed98:	f7ff faba 	bl	801e310 <ld_dword>
 801ed9c:	4603      	mov	r3, r0
 801ed9e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801eda2:	4323      	orrs	r3, r4
 801eda4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801eda6:	68fb      	ldr	r3, [r7, #12]
 801eda8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801edac:	68bb      	ldr	r3, [r7, #8]
 801edae:	009b      	lsls	r3, r3, #2
 801edb0:	68fa      	ldr	r2, [r7, #12]
 801edb2:	8992      	ldrh	r2, [r2, #12]
 801edb4:	fbb3 f0f2 	udiv	r0, r3, r2
 801edb8:	fb02 f200 	mul.w	r2, r2, r0
 801edbc:	1a9b      	subs	r3, r3, r2
 801edbe:	440b      	add	r3, r1
 801edc0:	6879      	ldr	r1, [r7, #4]
 801edc2:	4618      	mov	r0, r3
 801edc4:	f7ff fae2 	bl	801e38c <st_dword>
			fs->wflag = 1;
 801edc8:	68fb      	ldr	r3, [r7, #12]
 801edca:	2201      	movs	r2, #1
 801edcc:	70da      	strb	r2, [r3, #3]
			break;
 801edce:	e006      	b.n	801edde <put_fat+0x224>
			if (res != FR_OK) break;
 801edd0:	bf00      	nop
 801edd2:	e004      	b.n	801edde <put_fat+0x224>
			if (res != FR_OK) break;
 801edd4:	bf00      	nop
 801edd6:	e002      	b.n	801edde <put_fat+0x224>
			if (res != FR_OK) break;
 801edd8:	bf00      	nop
 801edda:	e000      	b.n	801edde <put_fat+0x224>
			if (res != FR_OK) break;
 801eddc:	bf00      	nop
		}
	}
	return res;
 801edde:	7ffb      	ldrb	r3, [r7, #31]
}
 801ede0:	4618      	mov	r0, r3
 801ede2:	3724      	adds	r7, #36	; 0x24
 801ede4:	46bd      	mov	sp, r7
 801ede6:	bd90      	pop	{r4, r7, pc}

0801ede8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801ede8:	b580      	push	{r7, lr}
 801edea:	b088      	sub	sp, #32
 801edec:	af00      	add	r7, sp, #0
 801edee:	60f8      	str	r0, [r7, #12]
 801edf0:	60b9      	str	r1, [r7, #8]
 801edf2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801edf4:	2300      	movs	r3, #0
 801edf6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801edf8:	68fb      	ldr	r3, [r7, #12]
 801edfa:	681b      	ldr	r3, [r3, #0]
 801edfc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801edfe:	68bb      	ldr	r3, [r7, #8]
 801ee00:	2b01      	cmp	r3, #1
 801ee02:	d904      	bls.n	801ee0e <remove_chain+0x26>
 801ee04:	69bb      	ldr	r3, [r7, #24]
 801ee06:	6a1b      	ldr	r3, [r3, #32]
 801ee08:	68ba      	ldr	r2, [r7, #8]
 801ee0a:	429a      	cmp	r2, r3
 801ee0c:	d301      	bcc.n	801ee12 <remove_chain+0x2a>
 801ee0e:	2302      	movs	r3, #2
 801ee10:	e04b      	b.n	801eeaa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801ee12:	687b      	ldr	r3, [r7, #4]
 801ee14:	2b00      	cmp	r3, #0
 801ee16:	d00c      	beq.n	801ee32 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801ee18:	f04f 32ff 	mov.w	r2, #4294967295
 801ee1c:	6879      	ldr	r1, [r7, #4]
 801ee1e:	69b8      	ldr	r0, [r7, #24]
 801ee20:	f7ff fecb 	bl	801ebba <put_fat>
 801ee24:	4603      	mov	r3, r0
 801ee26:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801ee28:	7ffb      	ldrb	r3, [r7, #31]
 801ee2a:	2b00      	cmp	r3, #0
 801ee2c:	d001      	beq.n	801ee32 <remove_chain+0x4a>
 801ee2e:	7ffb      	ldrb	r3, [r7, #31]
 801ee30:	e03b      	b.n	801eeaa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801ee32:	68b9      	ldr	r1, [r7, #8]
 801ee34:	68f8      	ldr	r0, [r7, #12]
 801ee36:	f7ff fdf0 	bl	801ea1a <get_fat>
 801ee3a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801ee3c:	697b      	ldr	r3, [r7, #20]
 801ee3e:	2b00      	cmp	r3, #0
 801ee40:	d031      	beq.n	801eea6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801ee42:	697b      	ldr	r3, [r7, #20]
 801ee44:	2b01      	cmp	r3, #1
 801ee46:	d101      	bne.n	801ee4c <remove_chain+0x64>
 801ee48:	2302      	movs	r3, #2
 801ee4a:	e02e      	b.n	801eeaa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801ee4c:	697b      	ldr	r3, [r7, #20]
 801ee4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ee52:	d101      	bne.n	801ee58 <remove_chain+0x70>
 801ee54:	2301      	movs	r3, #1
 801ee56:	e028      	b.n	801eeaa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801ee58:	2200      	movs	r2, #0
 801ee5a:	68b9      	ldr	r1, [r7, #8]
 801ee5c:	69b8      	ldr	r0, [r7, #24]
 801ee5e:	f7ff feac 	bl	801ebba <put_fat>
 801ee62:	4603      	mov	r3, r0
 801ee64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801ee66:	7ffb      	ldrb	r3, [r7, #31]
 801ee68:	2b00      	cmp	r3, #0
 801ee6a:	d001      	beq.n	801ee70 <remove_chain+0x88>
 801ee6c:	7ffb      	ldrb	r3, [r7, #31]
 801ee6e:	e01c      	b.n	801eeaa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801ee70:	69bb      	ldr	r3, [r7, #24]
 801ee72:	69da      	ldr	r2, [r3, #28]
 801ee74:	69bb      	ldr	r3, [r7, #24]
 801ee76:	6a1b      	ldr	r3, [r3, #32]
 801ee78:	3b02      	subs	r3, #2
 801ee7a:	429a      	cmp	r2, r3
 801ee7c:	d20b      	bcs.n	801ee96 <remove_chain+0xae>
			fs->free_clst++;
 801ee7e:	69bb      	ldr	r3, [r7, #24]
 801ee80:	69db      	ldr	r3, [r3, #28]
 801ee82:	1c5a      	adds	r2, r3, #1
 801ee84:	69bb      	ldr	r3, [r7, #24]
 801ee86:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 801ee88:	69bb      	ldr	r3, [r7, #24]
 801ee8a:	791b      	ldrb	r3, [r3, #4]
 801ee8c:	f043 0301 	orr.w	r3, r3, #1
 801ee90:	b2da      	uxtb	r2, r3
 801ee92:	69bb      	ldr	r3, [r7, #24]
 801ee94:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801ee96:	697b      	ldr	r3, [r7, #20]
 801ee98:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801ee9a:	69bb      	ldr	r3, [r7, #24]
 801ee9c:	6a1b      	ldr	r3, [r3, #32]
 801ee9e:	68ba      	ldr	r2, [r7, #8]
 801eea0:	429a      	cmp	r2, r3
 801eea2:	d3c6      	bcc.n	801ee32 <remove_chain+0x4a>
 801eea4:	e000      	b.n	801eea8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801eea6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801eea8:	2300      	movs	r3, #0
}
 801eeaa:	4618      	mov	r0, r3
 801eeac:	3720      	adds	r7, #32
 801eeae:	46bd      	mov	sp, r7
 801eeb0:	bd80      	pop	{r7, pc}

0801eeb2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801eeb2:	b580      	push	{r7, lr}
 801eeb4:	b088      	sub	sp, #32
 801eeb6:	af00      	add	r7, sp, #0
 801eeb8:	6078      	str	r0, [r7, #4]
 801eeba:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801eebc:	687b      	ldr	r3, [r7, #4]
 801eebe:	681b      	ldr	r3, [r3, #0]
 801eec0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801eec2:	683b      	ldr	r3, [r7, #0]
 801eec4:	2b00      	cmp	r3, #0
 801eec6:	d10d      	bne.n	801eee4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801eec8:	693b      	ldr	r3, [r7, #16]
 801eeca:	699b      	ldr	r3, [r3, #24]
 801eecc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801eece:	69bb      	ldr	r3, [r7, #24]
 801eed0:	2b00      	cmp	r3, #0
 801eed2:	d004      	beq.n	801eede <create_chain+0x2c>
 801eed4:	693b      	ldr	r3, [r7, #16]
 801eed6:	6a1b      	ldr	r3, [r3, #32]
 801eed8:	69ba      	ldr	r2, [r7, #24]
 801eeda:	429a      	cmp	r2, r3
 801eedc:	d31b      	bcc.n	801ef16 <create_chain+0x64>
 801eede:	2301      	movs	r3, #1
 801eee0:	61bb      	str	r3, [r7, #24]
 801eee2:	e018      	b.n	801ef16 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801eee4:	6839      	ldr	r1, [r7, #0]
 801eee6:	6878      	ldr	r0, [r7, #4]
 801eee8:	f7ff fd97 	bl	801ea1a <get_fat>
 801eeec:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801eeee:	68fb      	ldr	r3, [r7, #12]
 801eef0:	2b01      	cmp	r3, #1
 801eef2:	d801      	bhi.n	801eef8 <create_chain+0x46>
 801eef4:	2301      	movs	r3, #1
 801eef6:	e070      	b.n	801efda <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801eef8:	68fb      	ldr	r3, [r7, #12]
 801eefa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801eefe:	d101      	bne.n	801ef04 <create_chain+0x52>
 801ef00:	68fb      	ldr	r3, [r7, #12]
 801ef02:	e06a      	b.n	801efda <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801ef04:	693b      	ldr	r3, [r7, #16]
 801ef06:	6a1b      	ldr	r3, [r3, #32]
 801ef08:	68fa      	ldr	r2, [r7, #12]
 801ef0a:	429a      	cmp	r2, r3
 801ef0c:	d201      	bcs.n	801ef12 <create_chain+0x60>
 801ef0e:	68fb      	ldr	r3, [r7, #12]
 801ef10:	e063      	b.n	801efda <create_chain+0x128>
		scl = clst;
 801ef12:	683b      	ldr	r3, [r7, #0]
 801ef14:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801ef16:	69bb      	ldr	r3, [r7, #24]
 801ef18:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801ef1a:	69fb      	ldr	r3, [r7, #28]
 801ef1c:	3301      	adds	r3, #1
 801ef1e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801ef20:	693b      	ldr	r3, [r7, #16]
 801ef22:	6a1b      	ldr	r3, [r3, #32]
 801ef24:	69fa      	ldr	r2, [r7, #28]
 801ef26:	429a      	cmp	r2, r3
 801ef28:	d307      	bcc.n	801ef3a <create_chain+0x88>
				ncl = 2;
 801ef2a:	2302      	movs	r3, #2
 801ef2c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801ef2e:	69fa      	ldr	r2, [r7, #28]
 801ef30:	69bb      	ldr	r3, [r7, #24]
 801ef32:	429a      	cmp	r2, r3
 801ef34:	d901      	bls.n	801ef3a <create_chain+0x88>
 801ef36:	2300      	movs	r3, #0
 801ef38:	e04f      	b.n	801efda <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801ef3a:	69f9      	ldr	r1, [r7, #28]
 801ef3c:	6878      	ldr	r0, [r7, #4]
 801ef3e:	f7ff fd6c 	bl	801ea1a <get_fat>
 801ef42:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801ef44:	68fb      	ldr	r3, [r7, #12]
 801ef46:	2b00      	cmp	r3, #0
 801ef48:	d00e      	beq.n	801ef68 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801ef4a:	68fb      	ldr	r3, [r7, #12]
 801ef4c:	2b01      	cmp	r3, #1
 801ef4e:	d003      	beq.n	801ef58 <create_chain+0xa6>
 801ef50:	68fb      	ldr	r3, [r7, #12]
 801ef52:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ef56:	d101      	bne.n	801ef5c <create_chain+0xaa>
 801ef58:	68fb      	ldr	r3, [r7, #12]
 801ef5a:	e03e      	b.n	801efda <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801ef5c:	69fa      	ldr	r2, [r7, #28]
 801ef5e:	69bb      	ldr	r3, [r7, #24]
 801ef60:	429a      	cmp	r2, r3
 801ef62:	d1da      	bne.n	801ef1a <create_chain+0x68>
 801ef64:	2300      	movs	r3, #0
 801ef66:	e038      	b.n	801efda <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801ef68:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801ef6a:	f04f 32ff 	mov.w	r2, #4294967295
 801ef6e:	69f9      	ldr	r1, [r7, #28]
 801ef70:	6938      	ldr	r0, [r7, #16]
 801ef72:	f7ff fe22 	bl	801ebba <put_fat>
 801ef76:	4603      	mov	r3, r0
 801ef78:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801ef7a:	7dfb      	ldrb	r3, [r7, #23]
 801ef7c:	2b00      	cmp	r3, #0
 801ef7e:	d109      	bne.n	801ef94 <create_chain+0xe2>
 801ef80:	683b      	ldr	r3, [r7, #0]
 801ef82:	2b00      	cmp	r3, #0
 801ef84:	d006      	beq.n	801ef94 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801ef86:	69fa      	ldr	r2, [r7, #28]
 801ef88:	6839      	ldr	r1, [r7, #0]
 801ef8a:	6938      	ldr	r0, [r7, #16]
 801ef8c:	f7ff fe15 	bl	801ebba <put_fat>
 801ef90:	4603      	mov	r3, r0
 801ef92:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801ef94:	7dfb      	ldrb	r3, [r7, #23]
 801ef96:	2b00      	cmp	r3, #0
 801ef98:	d116      	bne.n	801efc8 <create_chain+0x116>
		fs->last_clst = ncl;
 801ef9a:	693b      	ldr	r3, [r7, #16]
 801ef9c:	69fa      	ldr	r2, [r7, #28]
 801ef9e:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801efa0:	693b      	ldr	r3, [r7, #16]
 801efa2:	69da      	ldr	r2, [r3, #28]
 801efa4:	693b      	ldr	r3, [r7, #16]
 801efa6:	6a1b      	ldr	r3, [r3, #32]
 801efa8:	3b02      	subs	r3, #2
 801efaa:	429a      	cmp	r2, r3
 801efac:	d804      	bhi.n	801efb8 <create_chain+0x106>
 801efae:	693b      	ldr	r3, [r7, #16]
 801efb0:	69db      	ldr	r3, [r3, #28]
 801efb2:	1e5a      	subs	r2, r3, #1
 801efb4:	693b      	ldr	r3, [r7, #16]
 801efb6:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 801efb8:	693b      	ldr	r3, [r7, #16]
 801efba:	791b      	ldrb	r3, [r3, #4]
 801efbc:	f043 0301 	orr.w	r3, r3, #1
 801efc0:	b2da      	uxtb	r2, r3
 801efc2:	693b      	ldr	r3, [r7, #16]
 801efc4:	711a      	strb	r2, [r3, #4]
 801efc6:	e007      	b.n	801efd8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801efc8:	7dfb      	ldrb	r3, [r7, #23]
 801efca:	2b01      	cmp	r3, #1
 801efcc:	d102      	bne.n	801efd4 <create_chain+0x122>
 801efce:	f04f 33ff 	mov.w	r3, #4294967295
 801efd2:	e000      	b.n	801efd6 <create_chain+0x124>
 801efd4:	2301      	movs	r3, #1
 801efd6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801efd8:	69fb      	ldr	r3, [r7, #28]
}
 801efda:	4618      	mov	r0, r3
 801efdc:	3720      	adds	r7, #32
 801efde:	46bd      	mov	sp, r7
 801efe0:	bd80      	pop	{r7, pc}

0801efe2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801efe2:	b480      	push	{r7}
 801efe4:	b087      	sub	sp, #28
 801efe6:	af00      	add	r7, sp, #0
 801efe8:	6078      	str	r0, [r7, #4]
 801efea:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801efec:	687b      	ldr	r3, [r7, #4]
 801efee:	681b      	ldr	r3, [r3, #0]
 801eff0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801eff2:	687b      	ldr	r3, [r7, #4]
 801eff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eff6:	3304      	adds	r3, #4
 801eff8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801effa:	68fb      	ldr	r3, [r7, #12]
 801effc:	899b      	ldrh	r3, [r3, #12]
 801effe:	461a      	mov	r2, r3
 801f000:	683b      	ldr	r3, [r7, #0]
 801f002:	fbb3 f3f2 	udiv	r3, r3, r2
 801f006:	68fa      	ldr	r2, [r7, #12]
 801f008:	8952      	ldrh	r2, [r2, #10]
 801f00a:	fbb3 f3f2 	udiv	r3, r3, r2
 801f00e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801f010:	693b      	ldr	r3, [r7, #16]
 801f012:	1d1a      	adds	r2, r3, #4
 801f014:	613a      	str	r2, [r7, #16]
 801f016:	681b      	ldr	r3, [r3, #0]
 801f018:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801f01a:	68bb      	ldr	r3, [r7, #8]
 801f01c:	2b00      	cmp	r3, #0
 801f01e:	d101      	bne.n	801f024 <clmt_clust+0x42>
 801f020:	2300      	movs	r3, #0
 801f022:	e010      	b.n	801f046 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801f024:	697a      	ldr	r2, [r7, #20]
 801f026:	68bb      	ldr	r3, [r7, #8]
 801f028:	429a      	cmp	r2, r3
 801f02a:	d307      	bcc.n	801f03c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801f02c:	697a      	ldr	r2, [r7, #20]
 801f02e:	68bb      	ldr	r3, [r7, #8]
 801f030:	1ad3      	subs	r3, r2, r3
 801f032:	617b      	str	r3, [r7, #20]
 801f034:	693b      	ldr	r3, [r7, #16]
 801f036:	3304      	adds	r3, #4
 801f038:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801f03a:	e7e9      	b.n	801f010 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801f03c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801f03e:	693b      	ldr	r3, [r7, #16]
 801f040:	681a      	ldr	r2, [r3, #0]
 801f042:	697b      	ldr	r3, [r7, #20]
 801f044:	4413      	add	r3, r2
}
 801f046:	4618      	mov	r0, r3
 801f048:	371c      	adds	r7, #28
 801f04a:	46bd      	mov	sp, r7
 801f04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f050:	4770      	bx	lr

0801f052 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801f052:	b580      	push	{r7, lr}
 801f054:	b086      	sub	sp, #24
 801f056:	af00      	add	r7, sp, #0
 801f058:	6078      	str	r0, [r7, #4]
 801f05a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801f05c:	687b      	ldr	r3, [r7, #4]
 801f05e:	681b      	ldr	r3, [r3, #0]
 801f060:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801f062:	683b      	ldr	r3, [r7, #0]
 801f064:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801f068:	d204      	bcs.n	801f074 <dir_sdi+0x22>
 801f06a:	683b      	ldr	r3, [r7, #0]
 801f06c:	f003 031f 	and.w	r3, r3, #31
 801f070:	2b00      	cmp	r3, #0
 801f072:	d001      	beq.n	801f078 <dir_sdi+0x26>
		return FR_INT_ERR;
 801f074:	2302      	movs	r3, #2
 801f076:	e071      	b.n	801f15c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801f078:	687b      	ldr	r3, [r7, #4]
 801f07a:	683a      	ldr	r2, [r7, #0]
 801f07c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801f07e:	687b      	ldr	r3, [r7, #4]
 801f080:	689b      	ldr	r3, [r3, #8]
 801f082:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801f084:	697b      	ldr	r3, [r7, #20]
 801f086:	2b00      	cmp	r3, #0
 801f088:	d106      	bne.n	801f098 <dir_sdi+0x46>
 801f08a:	693b      	ldr	r3, [r7, #16]
 801f08c:	781b      	ldrb	r3, [r3, #0]
 801f08e:	2b02      	cmp	r3, #2
 801f090:	d902      	bls.n	801f098 <dir_sdi+0x46>
		clst = fs->dirbase;
 801f092:	693b      	ldr	r3, [r7, #16]
 801f094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f096:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801f098:	697b      	ldr	r3, [r7, #20]
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	d10c      	bne.n	801f0b8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801f09e:	683b      	ldr	r3, [r7, #0]
 801f0a0:	095b      	lsrs	r3, r3, #5
 801f0a2:	693a      	ldr	r2, [r7, #16]
 801f0a4:	8912      	ldrh	r2, [r2, #8]
 801f0a6:	4293      	cmp	r3, r2
 801f0a8:	d301      	bcc.n	801f0ae <dir_sdi+0x5c>
 801f0aa:	2302      	movs	r3, #2
 801f0ac:	e056      	b.n	801f15c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801f0ae:	693b      	ldr	r3, [r7, #16]
 801f0b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801f0b2:	687b      	ldr	r3, [r7, #4]
 801f0b4:	61da      	str	r2, [r3, #28]
 801f0b6:	e02d      	b.n	801f114 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801f0b8:	693b      	ldr	r3, [r7, #16]
 801f0ba:	895b      	ldrh	r3, [r3, #10]
 801f0bc:	461a      	mov	r2, r3
 801f0be:	693b      	ldr	r3, [r7, #16]
 801f0c0:	899b      	ldrh	r3, [r3, #12]
 801f0c2:	fb03 f302 	mul.w	r3, r3, r2
 801f0c6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801f0c8:	e019      	b.n	801f0fe <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801f0ca:	687b      	ldr	r3, [r7, #4]
 801f0cc:	6979      	ldr	r1, [r7, #20]
 801f0ce:	4618      	mov	r0, r3
 801f0d0:	f7ff fca3 	bl	801ea1a <get_fat>
 801f0d4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801f0d6:	697b      	ldr	r3, [r7, #20]
 801f0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f0dc:	d101      	bne.n	801f0e2 <dir_sdi+0x90>
 801f0de:	2301      	movs	r3, #1
 801f0e0:	e03c      	b.n	801f15c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801f0e2:	697b      	ldr	r3, [r7, #20]
 801f0e4:	2b01      	cmp	r3, #1
 801f0e6:	d904      	bls.n	801f0f2 <dir_sdi+0xa0>
 801f0e8:	693b      	ldr	r3, [r7, #16]
 801f0ea:	6a1b      	ldr	r3, [r3, #32]
 801f0ec:	697a      	ldr	r2, [r7, #20]
 801f0ee:	429a      	cmp	r2, r3
 801f0f0:	d301      	bcc.n	801f0f6 <dir_sdi+0xa4>
 801f0f2:	2302      	movs	r3, #2
 801f0f4:	e032      	b.n	801f15c <dir_sdi+0x10a>
			ofs -= csz;
 801f0f6:	683a      	ldr	r2, [r7, #0]
 801f0f8:	68fb      	ldr	r3, [r7, #12]
 801f0fa:	1ad3      	subs	r3, r2, r3
 801f0fc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801f0fe:	683a      	ldr	r2, [r7, #0]
 801f100:	68fb      	ldr	r3, [r7, #12]
 801f102:	429a      	cmp	r2, r3
 801f104:	d2e1      	bcs.n	801f0ca <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801f106:	6979      	ldr	r1, [r7, #20]
 801f108:	6938      	ldr	r0, [r7, #16]
 801f10a:	f7ff fc67 	bl	801e9dc <clust2sect>
 801f10e:	4602      	mov	r2, r0
 801f110:	687b      	ldr	r3, [r7, #4]
 801f112:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801f114:	687b      	ldr	r3, [r7, #4]
 801f116:	697a      	ldr	r2, [r7, #20]
 801f118:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801f11a:	687b      	ldr	r3, [r7, #4]
 801f11c:	69db      	ldr	r3, [r3, #28]
 801f11e:	2b00      	cmp	r3, #0
 801f120:	d101      	bne.n	801f126 <dir_sdi+0xd4>
 801f122:	2302      	movs	r3, #2
 801f124:	e01a      	b.n	801f15c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801f126:	687b      	ldr	r3, [r7, #4]
 801f128:	69da      	ldr	r2, [r3, #28]
 801f12a:	693b      	ldr	r3, [r7, #16]
 801f12c:	899b      	ldrh	r3, [r3, #12]
 801f12e:	4619      	mov	r1, r3
 801f130:	683b      	ldr	r3, [r7, #0]
 801f132:	fbb3 f3f1 	udiv	r3, r3, r1
 801f136:	441a      	add	r2, r3
 801f138:	687b      	ldr	r3, [r7, #4]
 801f13a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801f13c:	693b      	ldr	r3, [r7, #16]
 801f13e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801f142:	693b      	ldr	r3, [r7, #16]
 801f144:	899b      	ldrh	r3, [r3, #12]
 801f146:	461a      	mov	r2, r3
 801f148:	683b      	ldr	r3, [r7, #0]
 801f14a:	fbb3 f0f2 	udiv	r0, r3, r2
 801f14e:	fb02 f200 	mul.w	r2, r2, r0
 801f152:	1a9b      	subs	r3, r3, r2
 801f154:	18ca      	adds	r2, r1, r3
 801f156:	687b      	ldr	r3, [r7, #4]
 801f158:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801f15a:	2300      	movs	r3, #0
}
 801f15c:	4618      	mov	r0, r3
 801f15e:	3718      	adds	r7, #24
 801f160:	46bd      	mov	sp, r7
 801f162:	bd80      	pop	{r7, pc}

0801f164 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801f164:	b580      	push	{r7, lr}
 801f166:	b086      	sub	sp, #24
 801f168:	af00      	add	r7, sp, #0
 801f16a:	6078      	str	r0, [r7, #4]
 801f16c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801f16e:	687b      	ldr	r3, [r7, #4]
 801f170:	681b      	ldr	r3, [r3, #0]
 801f172:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801f174:	687b      	ldr	r3, [r7, #4]
 801f176:	695b      	ldr	r3, [r3, #20]
 801f178:	3320      	adds	r3, #32
 801f17a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801f17c:	687b      	ldr	r3, [r7, #4]
 801f17e:	69db      	ldr	r3, [r3, #28]
 801f180:	2b00      	cmp	r3, #0
 801f182:	d003      	beq.n	801f18c <dir_next+0x28>
 801f184:	68bb      	ldr	r3, [r7, #8]
 801f186:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801f18a:	d301      	bcc.n	801f190 <dir_next+0x2c>
 801f18c:	2304      	movs	r3, #4
 801f18e:	e0bb      	b.n	801f308 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801f190:	68fb      	ldr	r3, [r7, #12]
 801f192:	899b      	ldrh	r3, [r3, #12]
 801f194:	461a      	mov	r2, r3
 801f196:	68bb      	ldr	r3, [r7, #8]
 801f198:	fbb3 f1f2 	udiv	r1, r3, r2
 801f19c:	fb02 f201 	mul.w	r2, r2, r1
 801f1a0:	1a9b      	subs	r3, r3, r2
 801f1a2:	2b00      	cmp	r3, #0
 801f1a4:	f040 809d 	bne.w	801f2e2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801f1a8:	687b      	ldr	r3, [r7, #4]
 801f1aa:	69db      	ldr	r3, [r3, #28]
 801f1ac:	1c5a      	adds	r2, r3, #1
 801f1ae:	687b      	ldr	r3, [r7, #4]
 801f1b0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801f1b2:	687b      	ldr	r3, [r7, #4]
 801f1b4:	699b      	ldr	r3, [r3, #24]
 801f1b6:	2b00      	cmp	r3, #0
 801f1b8:	d10b      	bne.n	801f1d2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801f1ba:	68bb      	ldr	r3, [r7, #8]
 801f1bc:	095b      	lsrs	r3, r3, #5
 801f1be:	68fa      	ldr	r2, [r7, #12]
 801f1c0:	8912      	ldrh	r2, [r2, #8]
 801f1c2:	4293      	cmp	r3, r2
 801f1c4:	f0c0 808d 	bcc.w	801f2e2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801f1c8:	687b      	ldr	r3, [r7, #4]
 801f1ca:	2200      	movs	r2, #0
 801f1cc:	61da      	str	r2, [r3, #28]
 801f1ce:	2304      	movs	r3, #4
 801f1d0:	e09a      	b.n	801f308 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801f1d2:	68fb      	ldr	r3, [r7, #12]
 801f1d4:	899b      	ldrh	r3, [r3, #12]
 801f1d6:	461a      	mov	r2, r3
 801f1d8:	68bb      	ldr	r3, [r7, #8]
 801f1da:	fbb3 f3f2 	udiv	r3, r3, r2
 801f1de:	68fa      	ldr	r2, [r7, #12]
 801f1e0:	8952      	ldrh	r2, [r2, #10]
 801f1e2:	3a01      	subs	r2, #1
 801f1e4:	4013      	ands	r3, r2
 801f1e6:	2b00      	cmp	r3, #0
 801f1e8:	d17b      	bne.n	801f2e2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801f1ea:	687a      	ldr	r2, [r7, #4]
 801f1ec:	687b      	ldr	r3, [r7, #4]
 801f1ee:	699b      	ldr	r3, [r3, #24]
 801f1f0:	4619      	mov	r1, r3
 801f1f2:	4610      	mov	r0, r2
 801f1f4:	f7ff fc11 	bl	801ea1a <get_fat>
 801f1f8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801f1fa:	697b      	ldr	r3, [r7, #20]
 801f1fc:	2b01      	cmp	r3, #1
 801f1fe:	d801      	bhi.n	801f204 <dir_next+0xa0>
 801f200:	2302      	movs	r3, #2
 801f202:	e081      	b.n	801f308 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801f204:	697b      	ldr	r3, [r7, #20]
 801f206:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f20a:	d101      	bne.n	801f210 <dir_next+0xac>
 801f20c:	2301      	movs	r3, #1
 801f20e:	e07b      	b.n	801f308 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801f210:	68fb      	ldr	r3, [r7, #12]
 801f212:	6a1b      	ldr	r3, [r3, #32]
 801f214:	697a      	ldr	r2, [r7, #20]
 801f216:	429a      	cmp	r2, r3
 801f218:	d359      	bcc.n	801f2ce <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801f21a:	683b      	ldr	r3, [r7, #0]
 801f21c:	2b00      	cmp	r3, #0
 801f21e:	d104      	bne.n	801f22a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801f220:	687b      	ldr	r3, [r7, #4]
 801f222:	2200      	movs	r2, #0
 801f224:	61da      	str	r2, [r3, #28]
 801f226:	2304      	movs	r3, #4
 801f228:	e06e      	b.n	801f308 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801f22a:	687a      	ldr	r2, [r7, #4]
 801f22c:	687b      	ldr	r3, [r7, #4]
 801f22e:	699b      	ldr	r3, [r3, #24]
 801f230:	4619      	mov	r1, r3
 801f232:	4610      	mov	r0, r2
 801f234:	f7ff fe3d 	bl	801eeb2 <create_chain>
 801f238:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801f23a:	697b      	ldr	r3, [r7, #20]
 801f23c:	2b00      	cmp	r3, #0
 801f23e:	d101      	bne.n	801f244 <dir_next+0xe0>
 801f240:	2307      	movs	r3, #7
 801f242:	e061      	b.n	801f308 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801f244:	697b      	ldr	r3, [r7, #20]
 801f246:	2b01      	cmp	r3, #1
 801f248:	d101      	bne.n	801f24e <dir_next+0xea>
 801f24a:	2302      	movs	r3, #2
 801f24c:	e05c      	b.n	801f308 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801f24e:	697b      	ldr	r3, [r7, #20]
 801f250:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f254:	d101      	bne.n	801f25a <dir_next+0xf6>
 801f256:	2301      	movs	r3, #1
 801f258:	e056      	b.n	801f308 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801f25a:	68f8      	ldr	r0, [r7, #12]
 801f25c:	f7ff fadc 	bl	801e818 <sync_window>
 801f260:	4603      	mov	r3, r0
 801f262:	2b00      	cmp	r3, #0
 801f264:	d001      	beq.n	801f26a <dir_next+0x106>
 801f266:	2301      	movs	r3, #1
 801f268:	e04e      	b.n	801f308 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801f26a:	68fb      	ldr	r3, [r7, #12]
 801f26c:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801f270:	68fb      	ldr	r3, [r7, #12]
 801f272:	899b      	ldrh	r3, [r3, #12]
 801f274:	461a      	mov	r2, r3
 801f276:	2100      	movs	r1, #0
 801f278:	f7ff f8d5 	bl	801e426 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801f27c:	2300      	movs	r3, #0
 801f27e:	613b      	str	r3, [r7, #16]
 801f280:	6979      	ldr	r1, [r7, #20]
 801f282:	68f8      	ldr	r0, [r7, #12]
 801f284:	f7ff fbaa 	bl	801e9dc <clust2sect>
 801f288:	4602      	mov	r2, r0
 801f28a:	68fb      	ldr	r3, [r7, #12]
 801f28c:	639a      	str	r2, [r3, #56]	; 0x38
 801f28e:	e012      	b.n	801f2b6 <dir_next+0x152>
						fs->wflag = 1;
 801f290:	68fb      	ldr	r3, [r7, #12]
 801f292:	2201      	movs	r2, #1
 801f294:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801f296:	68f8      	ldr	r0, [r7, #12]
 801f298:	f7ff fabe 	bl	801e818 <sync_window>
 801f29c:	4603      	mov	r3, r0
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	d001      	beq.n	801f2a6 <dir_next+0x142>
 801f2a2:	2301      	movs	r3, #1
 801f2a4:	e030      	b.n	801f308 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801f2a6:	693b      	ldr	r3, [r7, #16]
 801f2a8:	3301      	adds	r3, #1
 801f2aa:	613b      	str	r3, [r7, #16]
 801f2ac:	68fb      	ldr	r3, [r7, #12]
 801f2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f2b0:	1c5a      	adds	r2, r3, #1
 801f2b2:	68fb      	ldr	r3, [r7, #12]
 801f2b4:	639a      	str	r2, [r3, #56]	; 0x38
 801f2b6:	68fb      	ldr	r3, [r7, #12]
 801f2b8:	895b      	ldrh	r3, [r3, #10]
 801f2ba:	461a      	mov	r2, r3
 801f2bc:	693b      	ldr	r3, [r7, #16]
 801f2be:	4293      	cmp	r3, r2
 801f2c0:	d3e6      	bcc.n	801f290 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801f2c2:	68fb      	ldr	r3, [r7, #12]
 801f2c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f2c6:	693b      	ldr	r3, [r7, #16]
 801f2c8:	1ad2      	subs	r2, r2, r3
 801f2ca:	68fb      	ldr	r3, [r7, #12]
 801f2cc:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801f2ce:	687b      	ldr	r3, [r7, #4]
 801f2d0:	697a      	ldr	r2, [r7, #20]
 801f2d2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801f2d4:	6979      	ldr	r1, [r7, #20]
 801f2d6:	68f8      	ldr	r0, [r7, #12]
 801f2d8:	f7ff fb80 	bl	801e9dc <clust2sect>
 801f2dc:	4602      	mov	r2, r0
 801f2de:	687b      	ldr	r3, [r7, #4]
 801f2e0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801f2e2:	687b      	ldr	r3, [r7, #4]
 801f2e4:	68ba      	ldr	r2, [r7, #8]
 801f2e6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801f2e8:	68fb      	ldr	r3, [r7, #12]
 801f2ea:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801f2ee:	68fb      	ldr	r3, [r7, #12]
 801f2f0:	899b      	ldrh	r3, [r3, #12]
 801f2f2:	461a      	mov	r2, r3
 801f2f4:	68bb      	ldr	r3, [r7, #8]
 801f2f6:	fbb3 f0f2 	udiv	r0, r3, r2
 801f2fa:	fb02 f200 	mul.w	r2, r2, r0
 801f2fe:	1a9b      	subs	r3, r3, r2
 801f300:	18ca      	adds	r2, r1, r3
 801f302:	687b      	ldr	r3, [r7, #4]
 801f304:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801f306:	2300      	movs	r3, #0
}
 801f308:	4618      	mov	r0, r3
 801f30a:	3718      	adds	r7, #24
 801f30c:	46bd      	mov	sp, r7
 801f30e:	bd80      	pop	{r7, pc}

0801f310 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801f310:	b580      	push	{r7, lr}
 801f312:	b086      	sub	sp, #24
 801f314:	af00      	add	r7, sp, #0
 801f316:	6078      	str	r0, [r7, #4]
 801f318:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801f31a:	687b      	ldr	r3, [r7, #4]
 801f31c:	681b      	ldr	r3, [r3, #0]
 801f31e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801f320:	2100      	movs	r1, #0
 801f322:	6878      	ldr	r0, [r7, #4]
 801f324:	f7ff fe95 	bl	801f052 <dir_sdi>
 801f328:	4603      	mov	r3, r0
 801f32a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801f32c:	7dfb      	ldrb	r3, [r7, #23]
 801f32e:	2b00      	cmp	r3, #0
 801f330:	d12b      	bne.n	801f38a <dir_alloc+0x7a>
		n = 0;
 801f332:	2300      	movs	r3, #0
 801f334:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801f336:	687b      	ldr	r3, [r7, #4]
 801f338:	69db      	ldr	r3, [r3, #28]
 801f33a:	4619      	mov	r1, r3
 801f33c:	68f8      	ldr	r0, [r7, #12]
 801f33e:	f7ff faaf 	bl	801e8a0 <move_window>
 801f342:	4603      	mov	r3, r0
 801f344:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801f346:	7dfb      	ldrb	r3, [r7, #23]
 801f348:	2b00      	cmp	r3, #0
 801f34a:	d11d      	bne.n	801f388 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801f34c:	687b      	ldr	r3, [r7, #4]
 801f34e:	6a1b      	ldr	r3, [r3, #32]
 801f350:	781b      	ldrb	r3, [r3, #0]
 801f352:	2be5      	cmp	r3, #229	; 0xe5
 801f354:	d004      	beq.n	801f360 <dir_alloc+0x50>
 801f356:	687b      	ldr	r3, [r7, #4]
 801f358:	6a1b      	ldr	r3, [r3, #32]
 801f35a:	781b      	ldrb	r3, [r3, #0]
 801f35c:	2b00      	cmp	r3, #0
 801f35e:	d107      	bne.n	801f370 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801f360:	693b      	ldr	r3, [r7, #16]
 801f362:	3301      	adds	r3, #1
 801f364:	613b      	str	r3, [r7, #16]
 801f366:	693a      	ldr	r2, [r7, #16]
 801f368:	683b      	ldr	r3, [r7, #0]
 801f36a:	429a      	cmp	r2, r3
 801f36c:	d102      	bne.n	801f374 <dir_alloc+0x64>
 801f36e:	e00c      	b.n	801f38a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801f370:	2300      	movs	r3, #0
 801f372:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801f374:	2101      	movs	r1, #1
 801f376:	6878      	ldr	r0, [r7, #4]
 801f378:	f7ff fef4 	bl	801f164 <dir_next>
 801f37c:	4603      	mov	r3, r0
 801f37e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801f380:	7dfb      	ldrb	r3, [r7, #23]
 801f382:	2b00      	cmp	r3, #0
 801f384:	d0d7      	beq.n	801f336 <dir_alloc+0x26>
 801f386:	e000      	b.n	801f38a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801f388:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801f38a:	7dfb      	ldrb	r3, [r7, #23]
 801f38c:	2b04      	cmp	r3, #4
 801f38e:	d101      	bne.n	801f394 <dir_alloc+0x84>
 801f390:	2307      	movs	r3, #7
 801f392:	75fb      	strb	r3, [r7, #23]
	return res;
 801f394:	7dfb      	ldrb	r3, [r7, #23]
}
 801f396:	4618      	mov	r0, r3
 801f398:	3718      	adds	r7, #24
 801f39a:	46bd      	mov	sp, r7
 801f39c:	bd80      	pop	{r7, pc}

0801f39e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801f39e:	b580      	push	{r7, lr}
 801f3a0:	b084      	sub	sp, #16
 801f3a2:	af00      	add	r7, sp, #0
 801f3a4:	6078      	str	r0, [r7, #4]
 801f3a6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801f3a8:	683b      	ldr	r3, [r7, #0]
 801f3aa:	331a      	adds	r3, #26
 801f3ac:	4618      	mov	r0, r3
 801f3ae:	f7fe ff97 	bl	801e2e0 <ld_word>
 801f3b2:	4603      	mov	r3, r0
 801f3b4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801f3b6:	687b      	ldr	r3, [r7, #4]
 801f3b8:	781b      	ldrb	r3, [r3, #0]
 801f3ba:	2b03      	cmp	r3, #3
 801f3bc:	d109      	bne.n	801f3d2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801f3be:	683b      	ldr	r3, [r7, #0]
 801f3c0:	3314      	adds	r3, #20
 801f3c2:	4618      	mov	r0, r3
 801f3c4:	f7fe ff8c 	bl	801e2e0 <ld_word>
 801f3c8:	4603      	mov	r3, r0
 801f3ca:	041b      	lsls	r3, r3, #16
 801f3cc:	68fa      	ldr	r2, [r7, #12]
 801f3ce:	4313      	orrs	r3, r2
 801f3d0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801f3d2:	68fb      	ldr	r3, [r7, #12]
}
 801f3d4:	4618      	mov	r0, r3
 801f3d6:	3710      	adds	r7, #16
 801f3d8:	46bd      	mov	sp, r7
 801f3da:	bd80      	pop	{r7, pc}

0801f3dc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801f3dc:	b580      	push	{r7, lr}
 801f3de:	b084      	sub	sp, #16
 801f3e0:	af00      	add	r7, sp, #0
 801f3e2:	60f8      	str	r0, [r7, #12]
 801f3e4:	60b9      	str	r1, [r7, #8]
 801f3e6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801f3e8:	68bb      	ldr	r3, [r7, #8]
 801f3ea:	331a      	adds	r3, #26
 801f3ec:	687a      	ldr	r2, [r7, #4]
 801f3ee:	b292      	uxth	r2, r2
 801f3f0:	4611      	mov	r1, r2
 801f3f2:	4618      	mov	r0, r3
 801f3f4:	f7fe ffaf 	bl	801e356 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801f3f8:	68fb      	ldr	r3, [r7, #12]
 801f3fa:	781b      	ldrb	r3, [r3, #0]
 801f3fc:	2b03      	cmp	r3, #3
 801f3fe:	d109      	bne.n	801f414 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801f400:	68bb      	ldr	r3, [r7, #8]
 801f402:	f103 0214 	add.w	r2, r3, #20
 801f406:	687b      	ldr	r3, [r7, #4]
 801f408:	0c1b      	lsrs	r3, r3, #16
 801f40a:	b29b      	uxth	r3, r3
 801f40c:	4619      	mov	r1, r3
 801f40e:	4610      	mov	r0, r2
 801f410:	f7fe ffa1 	bl	801e356 <st_word>
	}
}
 801f414:	bf00      	nop
 801f416:	3710      	adds	r7, #16
 801f418:	46bd      	mov	sp, r7
 801f41a:	bd80      	pop	{r7, pc}

0801f41c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801f41c:	b590      	push	{r4, r7, lr}
 801f41e:	b087      	sub	sp, #28
 801f420:	af00      	add	r7, sp, #0
 801f422:	6078      	str	r0, [r7, #4]
 801f424:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801f426:	683b      	ldr	r3, [r7, #0]
 801f428:	331a      	adds	r3, #26
 801f42a:	4618      	mov	r0, r3
 801f42c:	f7fe ff58 	bl	801e2e0 <ld_word>
 801f430:	4603      	mov	r3, r0
 801f432:	2b00      	cmp	r3, #0
 801f434:	d001      	beq.n	801f43a <cmp_lfn+0x1e>
 801f436:	2300      	movs	r3, #0
 801f438:	e059      	b.n	801f4ee <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801f43a:	683b      	ldr	r3, [r7, #0]
 801f43c:	781b      	ldrb	r3, [r3, #0]
 801f43e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f442:	1e5a      	subs	r2, r3, #1
 801f444:	4613      	mov	r3, r2
 801f446:	005b      	lsls	r3, r3, #1
 801f448:	4413      	add	r3, r2
 801f44a:	009b      	lsls	r3, r3, #2
 801f44c:	4413      	add	r3, r2
 801f44e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801f450:	2301      	movs	r3, #1
 801f452:	81fb      	strh	r3, [r7, #14]
 801f454:	2300      	movs	r3, #0
 801f456:	613b      	str	r3, [r7, #16]
 801f458:	e033      	b.n	801f4c2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801f45a:	4a27      	ldr	r2, [pc, #156]	; (801f4f8 <cmp_lfn+0xdc>)
 801f45c:	693b      	ldr	r3, [r7, #16]
 801f45e:	4413      	add	r3, r2
 801f460:	781b      	ldrb	r3, [r3, #0]
 801f462:	461a      	mov	r2, r3
 801f464:	683b      	ldr	r3, [r7, #0]
 801f466:	4413      	add	r3, r2
 801f468:	4618      	mov	r0, r3
 801f46a:	f7fe ff39 	bl	801e2e0 <ld_word>
 801f46e:	4603      	mov	r3, r0
 801f470:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801f472:	89fb      	ldrh	r3, [r7, #14]
 801f474:	2b00      	cmp	r3, #0
 801f476:	d01a      	beq.n	801f4ae <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801f478:	697b      	ldr	r3, [r7, #20]
 801f47a:	2bfe      	cmp	r3, #254	; 0xfe
 801f47c:	d812      	bhi.n	801f4a4 <cmp_lfn+0x88>
 801f47e:	89bb      	ldrh	r3, [r7, #12]
 801f480:	4618      	mov	r0, r3
 801f482:	f001 fe05 	bl	8021090 <ff_wtoupper>
 801f486:	4603      	mov	r3, r0
 801f488:	461c      	mov	r4, r3
 801f48a:	697b      	ldr	r3, [r7, #20]
 801f48c:	1c5a      	adds	r2, r3, #1
 801f48e:	617a      	str	r2, [r7, #20]
 801f490:	005b      	lsls	r3, r3, #1
 801f492:	687a      	ldr	r2, [r7, #4]
 801f494:	4413      	add	r3, r2
 801f496:	881b      	ldrh	r3, [r3, #0]
 801f498:	4618      	mov	r0, r3
 801f49a:	f001 fdf9 	bl	8021090 <ff_wtoupper>
 801f49e:	4603      	mov	r3, r0
 801f4a0:	429c      	cmp	r4, r3
 801f4a2:	d001      	beq.n	801f4a8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801f4a4:	2300      	movs	r3, #0
 801f4a6:	e022      	b.n	801f4ee <cmp_lfn+0xd2>
			}
			wc = uc;
 801f4a8:	89bb      	ldrh	r3, [r7, #12]
 801f4aa:	81fb      	strh	r3, [r7, #14]
 801f4ac:	e006      	b.n	801f4bc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801f4ae:	89bb      	ldrh	r3, [r7, #12]
 801f4b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f4b4:	4293      	cmp	r3, r2
 801f4b6:	d001      	beq.n	801f4bc <cmp_lfn+0xa0>
 801f4b8:	2300      	movs	r3, #0
 801f4ba:	e018      	b.n	801f4ee <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801f4bc:	693b      	ldr	r3, [r7, #16]
 801f4be:	3301      	adds	r3, #1
 801f4c0:	613b      	str	r3, [r7, #16]
 801f4c2:	693b      	ldr	r3, [r7, #16]
 801f4c4:	2b0c      	cmp	r3, #12
 801f4c6:	d9c8      	bls.n	801f45a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801f4c8:	683b      	ldr	r3, [r7, #0]
 801f4ca:	781b      	ldrb	r3, [r3, #0]
 801f4cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f4d0:	2b00      	cmp	r3, #0
 801f4d2:	d00b      	beq.n	801f4ec <cmp_lfn+0xd0>
 801f4d4:	89fb      	ldrh	r3, [r7, #14]
 801f4d6:	2b00      	cmp	r3, #0
 801f4d8:	d008      	beq.n	801f4ec <cmp_lfn+0xd0>
 801f4da:	697b      	ldr	r3, [r7, #20]
 801f4dc:	005b      	lsls	r3, r3, #1
 801f4de:	687a      	ldr	r2, [r7, #4]
 801f4e0:	4413      	add	r3, r2
 801f4e2:	881b      	ldrh	r3, [r3, #0]
 801f4e4:	2b00      	cmp	r3, #0
 801f4e6:	d001      	beq.n	801f4ec <cmp_lfn+0xd0>
 801f4e8:	2300      	movs	r3, #0
 801f4ea:	e000      	b.n	801f4ee <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801f4ec:	2301      	movs	r3, #1
}
 801f4ee:	4618      	mov	r0, r3
 801f4f0:	371c      	adds	r7, #28
 801f4f2:	46bd      	mov	sp, r7
 801f4f4:	bd90      	pop	{r4, r7, pc}
 801f4f6:	bf00      	nop
 801f4f8:	0802e3f0 	.word	0x0802e3f0

0801f4fc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801f4fc:	b580      	push	{r7, lr}
 801f4fe:	b088      	sub	sp, #32
 801f500:	af00      	add	r7, sp, #0
 801f502:	60f8      	str	r0, [r7, #12]
 801f504:	60b9      	str	r1, [r7, #8]
 801f506:	4611      	mov	r1, r2
 801f508:	461a      	mov	r2, r3
 801f50a:	460b      	mov	r3, r1
 801f50c:	71fb      	strb	r3, [r7, #7]
 801f50e:	4613      	mov	r3, r2
 801f510:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801f512:	68bb      	ldr	r3, [r7, #8]
 801f514:	330d      	adds	r3, #13
 801f516:	79ba      	ldrb	r2, [r7, #6]
 801f518:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801f51a:	68bb      	ldr	r3, [r7, #8]
 801f51c:	330b      	adds	r3, #11
 801f51e:	220f      	movs	r2, #15
 801f520:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801f522:	68bb      	ldr	r3, [r7, #8]
 801f524:	330c      	adds	r3, #12
 801f526:	2200      	movs	r2, #0
 801f528:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801f52a:	68bb      	ldr	r3, [r7, #8]
 801f52c:	331a      	adds	r3, #26
 801f52e:	2100      	movs	r1, #0
 801f530:	4618      	mov	r0, r3
 801f532:	f7fe ff10 	bl	801e356 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801f536:	79fb      	ldrb	r3, [r7, #7]
 801f538:	1e5a      	subs	r2, r3, #1
 801f53a:	4613      	mov	r3, r2
 801f53c:	005b      	lsls	r3, r3, #1
 801f53e:	4413      	add	r3, r2
 801f540:	009b      	lsls	r3, r3, #2
 801f542:	4413      	add	r3, r2
 801f544:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801f546:	2300      	movs	r3, #0
 801f548:	82fb      	strh	r3, [r7, #22]
 801f54a:	2300      	movs	r3, #0
 801f54c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801f54e:	8afb      	ldrh	r3, [r7, #22]
 801f550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f554:	4293      	cmp	r3, r2
 801f556:	d007      	beq.n	801f568 <put_lfn+0x6c>
 801f558:	69fb      	ldr	r3, [r7, #28]
 801f55a:	1c5a      	adds	r2, r3, #1
 801f55c:	61fa      	str	r2, [r7, #28]
 801f55e:	005b      	lsls	r3, r3, #1
 801f560:	68fa      	ldr	r2, [r7, #12]
 801f562:	4413      	add	r3, r2
 801f564:	881b      	ldrh	r3, [r3, #0]
 801f566:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801f568:	4a17      	ldr	r2, [pc, #92]	; (801f5c8 <put_lfn+0xcc>)
 801f56a:	69bb      	ldr	r3, [r7, #24]
 801f56c:	4413      	add	r3, r2
 801f56e:	781b      	ldrb	r3, [r3, #0]
 801f570:	461a      	mov	r2, r3
 801f572:	68bb      	ldr	r3, [r7, #8]
 801f574:	4413      	add	r3, r2
 801f576:	8afa      	ldrh	r2, [r7, #22]
 801f578:	4611      	mov	r1, r2
 801f57a:	4618      	mov	r0, r3
 801f57c:	f7fe feeb 	bl	801e356 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801f580:	8afb      	ldrh	r3, [r7, #22]
 801f582:	2b00      	cmp	r3, #0
 801f584:	d102      	bne.n	801f58c <put_lfn+0x90>
 801f586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f58a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801f58c:	69bb      	ldr	r3, [r7, #24]
 801f58e:	3301      	adds	r3, #1
 801f590:	61bb      	str	r3, [r7, #24]
 801f592:	69bb      	ldr	r3, [r7, #24]
 801f594:	2b0c      	cmp	r3, #12
 801f596:	d9da      	bls.n	801f54e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801f598:	8afb      	ldrh	r3, [r7, #22]
 801f59a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f59e:	4293      	cmp	r3, r2
 801f5a0:	d006      	beq.n	801f5b0 <put_lfn+0xb4>
 801f5a2:	69fb      	ldr	r3, [r7, #28]
 801f5a4:	005b      	lsls	r3, r3, #1
 801f5a6:	68fa      	ldr	r2, [r7, #12]
 801f5a8:	4413      	add	r3, r2
 801f5aa:	881b      	ldrh	r3, [r3, #0]
 801f5ac:	2b00      	cmp	r3, #0
 801f5ae:	d103      	bne.n	801f5b8 <put_lfn+0xbc>
 801f5b0:	79fb      	ldrb	r3, [r7, #7]
 801f5b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f5b6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801f5b8:	68bb      	ldr	r3, [r7, #8]
 801f5ba:	79fa      	ldrb	r2, [r7, #7]
 801f5bc:	701a      	strb	r2, [r3, #0]
}
 801f5be:	bf00      	nop
 801f5c0:	3720      	adds	r7, #32
 801f5c2:	46bd      	mov	sp, r7
 801f5c4:	bd80      	pop	{r7, pc}
 801f5c6:	bf00      	nop
 801f5c8:	0802e3f0 	.word	0x0802e3f0

0801f5cc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801f5cc:	b580      	push	{r7, lr}
 801f5ce:	b08c      	sub	sp, #48	; 0x30
 801f5d0:	af00      	add	r7, sp, #0
 801f5d2:	60f8      	str	r0, [r7, #12]
 801f5d4:	60b9      	str	r1, [r7, #8]
 801f5d6:	607a      	str	r2, [r7, #4]
 801f5d8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801f5da:	220b      	movs	r2, #11
 801f5dc:	68b9      	ldr	r1, [r7, #8]
 801f5de:	68f8      	ldr	r0, [r7, #12]
 801f5e0:	f7fe ff00 	bl	801e3e4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801f5e4:	683b      	ldr	r3, [r7, #0]
 801f5e6:	2b05      	cmp	r3, #5
 801f5e8:	d92b      	bls.n	801f642 <gen_numname+0x76>
		sr = seq;
 801f5ea:	683b      	ldr	r3, [r7, #0]
 801f5ec:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801f5ee:	e022      	b.n	801f636 <gen_numname+0x6a>
			wc = *lfn++;
 801f5f0:	687b      	ldr	r3, [r7, #4]
 801f5f2:	1c9a      	adds	r2, r3, #2
 801f5f4:	607a      	str	r2, [r7, #4]
 801f5f6:	881b      	ldrh	r3, [r3, #0]
 801f5f8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801f5fa:	2300      	movs	r3, #0
 801f5fc:	62bb      	str	r3, [r7, #40]	; 0x28
 801f5fe:	e017      	b.n	801f630 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 801f600:	69fb      	ldr	r3, [r7, #28]
 801f602:	005a      	lsls	r2, r3, #1
 801f604:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f606:	f003 0301 	and.w	r3, r3, #1
 801f60a:	4413      	add	r3, r2
 801f60c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801f60e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f610:	085b      	lsrs	r3, r3, #1
 801f612:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801f614:	69fb      	ldr	r3, [r7, #28]
 801f616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801f61a:	2b00      	cmp	r3, #0
 801f61c:	d005      	beq.n	801f62a <gen_numname+0x5e>
 801f61e:	69fb      	ldr	r3, [r7, #28]
 801f620:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 801f624:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 801f628:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801f62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f62c:	3301      	adds	r3, #1
 801f62e:	62bb      	str	r3, [r7, #40]	; 0x28
 801f630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f632:	2b0f      	cmp	r3, #15
 801f634:	d9e4      	bls.n	801f600 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801f636:	687b      	ldr	r3, [r7, #4]
 801f638:	881b      	ldrh	r3, [r3, #0]
 801f63a:	2b00      	cmp	r3, #0
 801f63c:	d1d8      	bne.n	801f5f0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801f63e:	69fb      	ldr	r3, [r7, #28]
 801f640:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801f642:	2307      	movs	r3, #7
 801f644:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801f646:	683b      	ldr	r3, [r7, #0]
 801f648:	b2db      	uxtb	r3, r3
 801f64a:	f003 030f 	and.w	r3, r3, #15
 801f64e:	b2db      	uxtb	r3, r3
 801f650:	3330      	adds	r3, #48	; 0x30
 801f652:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801f656:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f65a:	2b39      	cmp	r3, #57	; 0x39
 801f65c:	d904      	bls.n	801f668 <gen_numname+0x9c>
 801f65e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f662:	3307      	adds	r3, #7
 801f664:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 801f668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f66a:	1e5a      	subs	r2, r3, #1
 801f66c:	62ba      	str	r2, [r7, #40]	; 0x28
 801f66e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801f672:	4413      	add	r3, r2
 801f674:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801f678:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801f67c:	683b      	ldr	r3, [r7, #0]
 801f67e:	091b      	lsrs	r3, r3, #4
 801f680:	603b      	str	r3, [r7, #0]
	} while (seq);
 801f682:	683b      	ldr	r3, [r7, #0]
 801f684:	2b00      	cmp	r3, #0
 801f686:	d1de      	bne.n	801f646 <gen_numname+0x7a>
	ns[i] = '~';
 801f688:	f107 0214 	add.w	r2, r7, #20
 801f68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f68e:	4413      	add	r3, r2
 801f690:	227e      	movs	r2, #126	; 0x7e
 801f692:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801f694:	2300      	movs	r3, #0
 801f696:	627b      	str	r3, [r7, #36]	; 0x24
 801f698:	e002      	b.n	801f6a0 <gen_numname+0xd4>
 801f69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f69c:	3301      	adds	r3, #1
 801f69e:	627b      	str	r3, [r7, #36]	; 0x24
 801f6a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f6a4:	429a      	cmp	r2, r3
 801f6a6:	d205      	bcs.n	801f6b4 <gen_numname+0xe8>
 801f6a8:	68fa      	ldr	r2, [r7, #12]
 801f6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6ac:	4413      	add	r3, r2
 801f6ae:	781b      	ldrb	r3, [r3, #0]
 801f6b0:	2b20      	cmp	r3, #32
 801f6b2:	d1f2      	bne.n	801f69a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801f6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f6b6:	2b07      	cmp	r3, #7
 801f6b8:	d808      	bhi.n	801f6cc <gen_numname+0x100>
 801f6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f6bc:	1c5a      	adds	r2, r3, #1
 801f6be:	62ba      	str	r2, [r7, #40]	; 0x28
 801f6c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801f6c4:	4413      	add	r3, r2
 801f6c6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801f6ca:	e000      	b.n	801f6ce <gen_numname+0x102>
 801f6cc:	2120      	movs	r1, #32
 801f6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6d0:	1c5a      	adds	r2, r3, #1
 801f6d2:	627a      	str	r2, [r7, #36]	; 0x24
 801f6d4:	68fa      	ldr	r2, [r7, #12]
 801f6d6:	4413      	add	r3, r2
 801f6d8:	460a      	mov	r2, r1
 801f6da:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801f6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6de:	2b07      	cmp	r3, #7
 801f6e0:	d9e8      	bls.n	801f6b4 <gen_numname+0xe8>
}
 801f6e2:	bf00      	nop
 801f6e4:	3730      	adds	r7, #48	; 0x30
 801f6e6:	46bd      	mov	sp, r7
 801f6e8:	bd80      	pop	{r7, pc}

0801f6ea <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801f6ea:	b480      	push	{r7}
 801f6ec:	b085      	sub	sp, #20
 801f6ee:	af00      	add	r7, sp, #0
 801f6f0:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801f6f2:	2300      	movs	r3, #0
 801f6f4:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801f6f6:	230b      	movs	r3, #11
 801f6f8:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801f6fa:	7bfb      	ldrb	r3, [r7, #15]
 801f6fc:	b2da      	uxtb	r2, r3
 801f6fe:	0852      	lsrs	r2, r2, #1
 801f700:	01db      	lsls	r3, r3, #7
 801f702:	4313      	orrs	r3, r2
 801f704:	b2da      	uxtb	r2, r3
 801f706:	687b      	ldr	r3, [r7, #4]
 801f708:	1c59      	adds	r1, r3, #1
 801f70a:	6079      	str	r1, [r7, #4]
 801f70c:	781b      	ldrb	r3, [r3, #0]
 801f70e:	4413      	add	r3, r2
 801f710:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801f712:	68bb      	ldr	r3, [r7, #8]
 801f714:	3b01      	subs	r3, #1
 801f716:	60bb      	str	r3, [r7, #8]
 801f718:	68bb      	ldr	r3, [r7, #8]
 801f71a:	2b00      	cmp	r3, #0
 801f71c:	d1ed      	bne.n	801f6fa <sum_sfn+0x10>
	return sum;
 801f71e:	7bfb      	ldrb	r3, [r7, #15]
}
 801f720:	4618      	mov	r0, r3
 801f722:	3714      	adds	r7, #20
 801f724:	46bd      	mov	sp, r7
 801f726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f72a:	4770      	bx	lr

0801f72c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801f72c:	b580      	push	{r7, lr}
 801f72e:	b086      	sub	sp, #24
 801f730:	af00      	add	r7, sp, #0
 801f732:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801f734:	687b      	ldr	r3, [r7, #4]
 801f736:	681b      	ldr	r3, [r3, #0]
 801f738:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801f73a:	2100      	movs	r1, #0
 801f73c:	6878      	ldr	r0, [r7, #4]
 801f73e:	f7ff fc88 	bl	801f052 <dir_sdi>
 801f742:	4603      	mov	r3, r0
 801f744:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801f746:	7dfb      	ldrb	r3, [r7, #23]
 801f748:	2b00      	cmp	r3, #0
 801f74a:	d001      	beq.n	801f750 <dir_find+0x24>
 801f74c:	7dfb      	ldrb	r3, [r7, #23]
 801f74e:	e0a9      	b.n	801f8a4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801f750:	23ff      	movs	r3, #255	; 0xff
 801f752:	753b      	strb	r3, [r7, #20]
 801f754:	7d3b      	ldrb	r3, [r7, #20]
 801f756:	757b      	strb	r3, [r7, #21]
 801f758:	687b      	ldr	r3, [r7, #4]
 801f75a:	f04f 32ff 	mov.w	r2, #4294967295
 801f75e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801f760:	687b      	ldr	r3, [r7, #4]
 801f762:	69db      	ldr	r3, [r3, #28]
 801f764:	4619      	mov	r1, r3
 801f766:	6938      	ldr	r0, [r7, #16]
 801f768:	f7ff f89a 	bl	801e8a0 <move_window>
 801f76c:	4603      	mov	r3, r0
 801f76e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801f770:	7dfb      	ldrb	r3, [r7, #23]
 801f772:	2b00      	cmp	r3, #0
 801f774:	f040 8090 	bne.w	801f898 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801f778:	687b      	ldr	r3, [r7, #4]
 801f77a:	6a1b      	ldr	r3, [r3, #32]
 801f77c:	781b      	ldrb	r3, [r3, #0]
 801f77e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801f780:	7dbb      	ldrb	r3, [r7, #22]
 801f782:	2b00      	cmp	r3, #0
 801f784:	d102      	bne.n	801f78c <dir_find+0x60>
 801f786:	2304      	movs	r3, #4
 801f788:	75fb      	strb	r3, [r7, #23]
 801f78a:	e08a      	b.n	801f8a2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801f78c:	687b      	ldr	r3, [r7, #4]
 801f78e:	6a1b      	ldr	r3, [r3, #32]
 801f790:	330b      	adds	r3, #11
 801f792:	781b      	ldrb	r3, [r3, #0]
 801f794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f798:	73fb      	strb	r3, [r7, #15]
 801f79a:	687b      	ldr	r3, [r7, #4]
 801f79c:	7bfa      	ldrb	r2, [r7, #15]
 801f79e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801f7a0:	7dbb      	ldrb	r3, [r7, #22]
 801f7a2:	2be5      	cmp	r3, #229	; 0xe5
 801f7a4:	d007      	beq.n	801f7b6 <dir_find+0x8a>
 801f7a6:	7bfb      	ldrb	r3, [r7, #15]
 801f7a8:	f003 0308 	and.w	r3, r3, #8
 801f7ac:	2b00      	cmp	r3, #0
 801f7ae:	d009      	beq.n	801f7c4 <dir_find+0x98>
 801f7b0:	7bfb      	ldrb	r3, [r7, #15]
 801f7b2:	2b0f      	cmp	r3, #15
 801f7b4:	d006      	beq.n	801f7c4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801f7b6:	23ff      	movs	r3, #255	; 0xff
 801f7b8:	757b      	strb	r3, [r7, #21]
 801f7ba:	687b      	ldr	r3, [r7, #4]
 801f7bc:	f04f 32ff 	mov.w	r2, #4294967295
 801f7c0:	631a      	str	r2, [r3, #48]	; 0x30
 801f7c2:	e05e      	b.n	801f882 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801f7c4:	7bfb      	ldrb	r3, [r7, #15]
 801f7c6:	2b0f      	cmp	r3, #15
 801f7c8:	d136      	bne.n	801f838 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801f7ca:	687b      	ldr	r3, [r7, #4]
 801f7cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801f7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f7d4:	2b00      	cmp	r3, #0
 801f7d6:	d154      	bne.n	801f882 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801f7d8:	7dbb      	ldrb	r3, [r7, #22]
 801f7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f7de:	2b00      	cmp	r3, #0
 801f7e0:	d00d      	beq.n	801f7fe <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801f7e2:	687b      	ldr	r3, [r7, #4]
 801f7e4:	6a1b      	ldr	r3, [r3, #32]
 801f7e6:	7b5b      	ldrb	r3, [r3, #13]
 801f7e8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801f7ea:	7dbb      	ldrb	r3, [r7, #22]
 801f7ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801f7f0:	75bb      	strb	r3, [r7, #22]
 801f7f2:	7dbb      	ldrb	r3, [r7, #22]
 801f7f4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801f7f6:	687b      	ldr	r3, [r7, #4]
 801f7f8:	695a      	ldr	r2, [r3, #20]
 801f7fa:	687b      	ldr	r3, [r7, #4]
 801f7fc:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801f7fe:	7dba      	ldrb	r2, [r7, #22]
 801f800:	7d7b      	ldrb	r3, [r7, #21]
 801f802:	429a      	cmp	r2, r3
 801f804:	d115      	bne.n	801f832 <dir_find+0x106>
 801f806:	687b      	ldr	r3, [r7, #4]
 801f808:	6a1b      	ldr	r3, [r3, #32]
 801f80a:	330d      	adds	r3, #13
 801f80c:	781b      	ldrb	r3, [r3, #0]
 801f80e:	7d3a      	ldrb	r2, [r7, #20]
 801f810:	429a      	cmp	r2, r3
 801f812:	d10e      	bne.n	801f832 <dir_find+0x106>
 801f814:	693b      	ldr	r3, [r7, #16]
 801f816:	691a      	ldr	r2, [r3, #16]
 801f818:	687b      	ldr	r3, [r7, #4]
 801f81a:	6a1b      	ldr	r3, [r3, #32]
 801f81c:	4619      	mov	r1, r3
 801f81e:	4610      	mov	r0, r2
 801f820:	f7ff fdfc 	bl	801f41c <cmp_lfn>
 801f824:	4603      	mov	r3, r0
 801f826:	2b00      	cmp	r3, #0
 801f828:	d003      	beq.n	801f832 <dir_find+0x106>
 801f82a:	7d7b      	ldrb	r3, [r7, #21]
 801f82c:	3b01      	subs	r3, #1
 801f82e:	b2db      	uxtb	r3, r3
 801f830:	e000      	b.n	801f834 <dir_find+0x108>
 801f832:	23ff      	movs	r3, #255	; 0xff
 801f834:	757b      	strb	r3, [r7, #21]
 801f836:	e024      	b.n	801f882 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801f838:	7d7b      	ldrb	r3, [r7, #21]
 801f83a:	2b00      	cmp	r3, #0
 801f83c:	d109      	bne.n	801f852 <dir_find+0x126>
 801f83e:	687b      	ldr	r3, [r7, #4]
 801f840:	6a1b      	ldr	r3, [r3, #32]
 801f842:	4618      	mov	r0, r3
 801f844:	f7ff ff51 	bl	801f6ea <sum_sfn>
 801f848:	4603      	mov	r3, r0
 801f84a:	461a      	mov	r2, r3
 801f84c:	7d3b      	ldrb	r3, [r7, #20]
 801f84e:	4293      	cmp	r3, r2
 801f850:	d024      	beq.n	801f89c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801f852:	687b      	ldr	r3, [r7, #4]
 801f854:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801f858:	f003 0301 	and.w	r3, r3, #1
 801f85c:	2b00      	cmp	r3, #0
 801f85e:	d10a      	bne.n	801f876 <dir_find+0x14a>
 801f860:	687b      	ldr	r3, [r7, #4]
 801f862:	6a18      	ldr	r0, [r3, #32]
 801f864:	687b      	ldr	r3, [r7, #4]
 801f866:	3324      	adds	r3, #36	; 0x24
 801f868:	220b      	movs	r2, #11
 801f86a:	4619      	mov	r1, r3
 801f86c:	f7fe fdf5 	bl	801e45a <mem_cmp>
 801f870:	4603      	mov	r3, r0
 801f872:	2b00      	cmp	r3, #0
 801f874:	d014      	beq.n	801f8a0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801f876:	23ff      	movs	r3, #255	; 0xff
 801f878:	757b      	strb	r3, [r7, #21]
 801f87a:	687b      	ldr	r3, [r7, #4]
 801f87c:	f04f 32ff 	mov.w	r2, #4294967295
 801f880:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801f882:	2100      	movs	r1, #0
 801f884:	6878      	ldr	r0, [r7, #4]
 801f886:	f7ff fc6d 	bl	801f164 <dir_next>
 801f88a:	4603      	mov	r3, r0
 801f88c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801f88e:	7dfb      	ldrb	r3, [r7, #23]
 801f890:	2b00      	cmp	r3, #0
 801f892:	f43f af65 	beq.w	801f760 <dir_find+0x34>
 801f896:	e004      	b.n	801f8a2 <dir_find+0x176>
		if (res != FR_OK) break;
 801f898:	bf00      	nop
 801f89a:	e002      	b.n	801f8a2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801f89c:	bf00      	nop
 801f89e:	e000      	b.n	801f8a2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801f8a0:	bf00      	nop

	return res;
 801f8a2:	7dfb      	ldrb	r3, [r7, #23]
}
 801f8a4:	4618      	mov	r0, r3
 801f8a6:	3718      	adds	r7, #24
 801f8a8:	46bd      	mov	sp, r7
 801f8aa:	bd80      	pop	{r7, pc}

0801f8ac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801f8ac:	b580      	push	{r7, lr}
 801f8ae:	b08c      	sub	sp, #48	; 0x30
 801f8b0:	af00      	add	r7, sp, #0
 801f8b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801f8b4:	687b      	ldr	r3, [r7, #4]
 801f8b6:	681b      	ldr	r3, [r3, #0]
 801f8b8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801f8ba:	687b      	ldr	r3, [r7, #4]
 801f8bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801f8c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801f8c4:	2b00      	cmp	r3, #0
 801f8c6:	d001      	beq.n	801f8cc <dir_register+0x20>
 801f8c8:	2306      	movs	r3, #6
 801f8ca:	e0e0      	b.n	801fa8e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801f8cc:	2300      	movs	r3, #0
 801f8ce:	627b      	str	r3, [r7, #36]	; 0x24
 801f8d0:	e002      	b.n	801f8d8 <dir_register+0x2c>
 801f8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8d4:	3301      	adds	r3, #1
 801f8d6:	627b      	str	r3, [r7, #36]	; 0x24
 801f8d8:	69fb      	ldr	r3, [r7, #28]
 801f8da:	691a      	ldr	r2, [r3, #16]
 801f8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8de:	005b      	lsls	r3, r3, #1
 801f8e0:	4413      	add	r3, r2
 801f8e2:	881b      	ldrh	r3, [r3, #0]
 801f8e4:	2b00      	cmp	r3, #0
 801f8e6:	d1f4      	bne.n	801f8d2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801f8e8:	687b      	ldr	r3, [r7, #4]
 801f8ea:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801f8ee:	f107 030c 	add.w	r3, r7, #12
 801f8f2:	220c      	movs	r2, #12
 801f8f4:	4618      	mov	r0, r3
 801f8f6:	f7fe fd75 	bl	801e3e4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801f8fa:	7dfb      	ldrb	r3, [r7, #23]
 801f8fc:	f003 0301 	and.w	r3, r3, #1
 801f900:	2b00      	cmp	r3, #0
 801f902:	d032      	beq.n	801f96a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801f904:	687b      	ldr	r3, [r7, #4]
 801f906:	2240      	movs	r2, #64	; 0x40
 801f908:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 801f90c:	2301      	movs	r3, #1
 801f90e:	62bb      	str	r3, [r7, #40]	; 0x28
 801f910:	e016      	b.n	801f940 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801f912:	687b      	ldr	r3, [r7, #4]
 801f914:	f103 0024 	add.w	r0, r3, #36	; 0x24
 801f918:	69fb      	ldr	r3, [r7, #28]
 801f91a:	691a      	ldr	r2, [r3, #16]
 801f91c:	f107 010c 	add.w	r1, r7, #12
 801f920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f922:	f7ff fe53 	bl	801f5cc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801f926:	6878      	ldr	r0, [r7, #4]
 801f928:	f7ff ff00 	bl	801f72c <dir_find>
 801f92c:	4603      	mov	r3, r0
 801f92e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801f932:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f936:	2b00      	cmp	r3, #0
 801f938:	d106      	bne.n	801f948 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801f93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f93c:	3301      	adds	r3, #1
 801f93e:	62bb      	str	r3, [r7, #40]	; 0x28
 801f940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f942:	2b63      	cmp	r3, #99	; 0x63
 801f944:	d9e5      	bls.n	801f912 <dir_register+0x66>
 801f946:	e000      	b.n	801f94a <dir_register+0x9e>
			if (res != FR_OK) break;
 801f948:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801f94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f94c:	2b64      	cmp	r3, #100	; 0x64
 801f94e:	d101      	bne.n	801f954 <dir_register+0xa8>
 801f950:	2307      	movs	r3, #7
 801f952:	e09c      	b.n	801fa8e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801f954:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f958:	2b04      	cmp	r3, #4
 801f95a:	d002      	beq.n	801f962 <dir_register+0xb6>
 801f95c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f960:	e095      	b.n	801fa8e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801f962:	7dfa      	ldrb	r2, [r7, #23]
 801f964:	687b      	ldr	r3, [r7, #4]
 801f966:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801f96a:	7dfb      	ldrb	r3, [r7, #23]
 801f96c:	f003 0302 	and.w	r3, r3, #2
 801f970:	2b00      	cmp	r3, #0
 801f972:	d007      	beq.n	801f984 <dir_register+0xd8>
 801f974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f976:	330c      	adds	r3, #12
 801f978:	4a47      	ldr	r2, [pc, #284]	; (801fa98 <dir_register+0x1ec>)
 801f97a:	fba2 2303 	umull	r2, r3, r2, r3
 801f97e:	089b      	lsrs	r3, r3, #2
 801f980:	3301      	adds	r3, #1
 801f982:	e000      	b.n	801f986 <dir_register+0xda>
 801f984:	2301      	movs	r3, #1
 801f986:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801f988:	6a39      	ldr	r1, [r7, #32]
 801f98a:	6878      	ldr	r0, [r7, #4]
 801f98c:	f7ff fcc0 	bl	801f310 <dir_alloc>
 801f990:	4603      	mov	r3, r0
 801f992:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801f996:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f99a:	2b00      	cmp	r3, #0
 801f99c:	d148      	bne.n	801fa30 <dir_register+0x184>
 801f99e:	6a3b      	ldr	r3, [r7, #32]
 801f9a0:	3b01      	subs	r3, #1
 801f9a2:	623b      	str	r3, [r7, #32]
 801f9a4:	6a3b      	ldr	r3, [r7, #32]
 801f9a6:	2b00      	cmp	r3, #0
 801f9a8:	d042      	beq.n	801fa30 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801f9aa:	687b      	ldr	r3, [r7, #4]
 801f9ac:	695a      	ldr	r2, [r3, #20]
 801f9ae:	6a3b      	ldr	r3, [r7, #32]
 801f9b0:	015b      	lsls	r3, r3, #5
 801f9b2:	1ad3      	subs	r3, r2, r3
 801f9b4:	4619      	mov	r1, r3
 801f9b6:	6878      	ldr	r0, [r7, #4]
 801f9b8:	f7ff fb4b 	bl	801f052 <dir_sdi>
 801f9bc:	4603      	mov	r3, r0
 801f9be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801f9c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f9c6:	2b00      	cmp	r3, #0
 801f9c8:	d132      	bne.n	801fa30 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801f9ca:	687b      	ldr	r3, [r7, #4]
 801f9cc:	3324      	adds	r3, #36	; 0x24
 801f9ce:	4618      	mov	r0, r3
 801f9d0:	f7ff fe8b 	bl	801f6ea <sum_sfn>
 801f9d4:	4603      	mov	r3, r0
 801f9d6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801f9d8:	687b      	ldr	r3, [r7, #4]
 801f9da:	69db      	ldr	r3, [r3, #28]
 801f9dc:	4619      	mov	r1, r3
 801f9de:	69f8      	ldr	r0, [r7, #28]
 801f9e0:	f7fe ff5e 	bl	801e8a0 <move_window>
 801f9e4:	4603      	mov	r3, r0
 801f9e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801f9ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f9ee:	2b00      	cmp	r3, #0
 801f9f0:	d11d      	bne.n	801fa2e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801f9f2:	69fb      	ldr	r3, [r7, #28]
 801f9f4:	6918      	ldr	r0, [r3, #16]
 801f9f6:	687b      	ldr	r3, [r7, #4]
 801f9f8:	6a19      	ldr	r1, [r3, #32]
 801f9fa:	6a3b      	ldr	r3, [r7, #32]
 801f9fc:	b2da      	uxtb	r2, r3
 801f9fe:	7efb      	ldrb	r3, [r7, #27]
 801fa00:	f7ff fd7c 	bl	801f4fc <put_lfn>
				fs->wflag = 1;
 801fa04:	69fb      	ldr	r3, [r7, #28]
 801fa06:	2201      	movs	r2, #1
 801fa08:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801fa0a:	2100      	movs	r1, #0
 801fa0c:	6878      	ldr	r0, [r7, #4]
 801fa0e:	f7ff fba9 	bl	801f164 <dir_next>
 801fa12:	4603      	mov	r3, r0
 801fa14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 801fa18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801fa1c:	2b00      	cmp	r3, #0
 801fa1e:	d107      	bne.n	801fa30 <dir_register+0x184>
 801fa20:	6a3b      	ldr	r3, [r7, #32]
 801fa22:	3b01      	subs	r3, #1
 801fa24:	623b      	str	r3, [r7, #32]
 801fa26:	6a3b      	ldr	r3, [r7, #32]
 801fa28:	2b00      	cmp	r3, #0
 801fa2a:	d1d5      	bne.n	801f9d8 <dir_register+0x12c>
 801fa2c:	e000      	b.n	801fa30 <dir_register+0x184>
				if (res != FR_OK) break;
 801fa2e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801fa30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801fa34:	2b00      	cmp	r3, #0
 801fa36:	d128      	bne.n	801fa8a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801fa38:	687b      	ldr	r3, [r7, #4]
 801fa3a:	69db      	ldr	r3, [r3, #28]
 801fa3c:	4619      	mov	r1, r3
 801fa3e:	69f8      	ldr	r0, [r7, #28]
 801fa40:	f7fe ff2e 	bl	801e8a0 <move_window>
 801fa44:	4603      	mov	r3, r0
 801fa46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801fa4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801fa4e:	2b00      	cmp	r3, #0
 801fa50:	d11b      	bne.n	801fa8a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801fa52:	687b      	ldr	r3, [r7, #4]
 801fa54:	6a1b      	ldr	r3, [r3, #32]
 801fa56:	2220      	movs	r2, #32
 801fa58:	2100      	movs	r1, #0
 801fa5a:	4618      	mov	r0, r3
 801fa5c:	f7fe fce3 	bl	801e426 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801fa60:	687b      	ldr	r3, [r7, #4]
 801fa62:	6a18      	ldr	r0, [r3, #32]
 801fa64:	687b      	ldr	r3, [r7, #4]
 801fa66:	3324      	adds	r3, #36	; 0x24
 801fa68:	220b      	movs	r2, #11
 801fa6a:	4619      	mov	r1, r3
 801fa6c:	f7fe fcba 	bl	801e3e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801fa70:	687b      	ldr	r3, [r7, #4]
 801fa72:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801fa76:	687b      	ldr	r3, [r7, #4]
 801fa78:	6a1b      	ldr	r3, [r3, #32]
 801fa7a:	330c      	adds	r3, #12
 801fa7c:	f002 0218 	and.w	r2, r2, #24
 801fa80:	b2d2      	uxtb	r2, r2
 801fa82:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801fa84:	69fb      	ldr	r3, [r7, #28]
 801fa86:	2201      	movs	r2, #1
 801fa88:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801fa8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801fa8e:	4618      	mov	r0, r3
 801fa90:	3730      	adds	r7, #48	; 0x30
 801fa92:	46bd      	mov	sp, r7
 801fa94:	bd80      	pop	{r7, pc}
 801fa96:	bf00      	nop
 801fa98:	4ec4ec4f 	.word	0x4ec4ec4f

0801fa9c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801fa9c:	b580      	push	{r7, lr}
 801fa9e:	b08a      	sub	sp, #40	; 0x28
 801faa0:	af00      	add	r7, sp, #0
 801faa2:	6078      	str	r0, [r7, #4]
 801faa4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801faa6:	683b      	ldr	r3, [r7, #0]
 801faa8:	681b      	ldr	r3, [r3, #0]
 801faaa:	613b      	str	r3, [r7, #16]
 801faac:	687b      	ldr	r3, [r7, #4]
 801faae:	681b      	ldr	r3, [r3, #0]
 801fab0:	691b      	ldr	r3, [r3, #16]
 801fab2:	60fb      	str	r3, [r7, #12]
 801fab4:	2300      	movs	r3, #0
 801fab6:	617b      	str	r3, [r7, #20]
 801fab8:	697b      	ldr	r3, [r7, #20]
 801faba:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801fabc:	69bb      	ldr	r3, [r7, #24]
 801fabe:	1c5a      	adds	r2, r3, #1
 801fac0:	61ba      	str	r2, [r7, #24]
 801fac2:	693a      	ldr	r2, [r7, #16]
 801fac4:	4413      	add	r3, r2
 801fac6:	781b      	ldrb	r3, [r3, #0]
 801fac8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801faca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801facc:	2b1f      	cmp	r3, #31
 801face:	d940      	bls.n	801fb52 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801fad0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fad2:	2b2f      	cmp	r3, #47	; 0x2f
 801fad4:	d006      	beq.n	801fae4 <create_name+0x48>
 801fad6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fad8:	2b5c      	cmp	r3, #92	; 0x5c
 801fada:	d110      	bne.n	801fafe <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801fadc:	e002      	b.n	801fae4 <create_name+0x48>
 801fade:	69bb      	ldr	r3, [r7, #24]
 801fae0:	3301      	adds	r3, #1
 801fae2:	61bb      	str	r3, [r7, #24]
 801fae4:	693a      	ldr	r2, [r7, #16]
 801fae6:	69bb      	ldr	r3, [r7, #24]
 801fae8:	4413      	add	r3, r2
 801faea:	781b      	ldrb	r3, [r3, #0]
 801faec:	2b2f      	cmp	r3, #47	; 0x2f
 801faee:	d0f6      	beq.n	801fade <create_name+0x42>
 801faf0:	693a      	ldr	r2, [r7, #16]
 801faf2:	69bb      	ldr	r3, [r7, #24]
 801faf4:	4413      	add	r3, r2
 801faf6:	781b      	ldrb	r3, [r3, #0]
 801faf8:	2b5c      	cmp	r3, #92	; 0x5c
 801fafa:	d0f0      	beq.n	801fade <create_name+0x42>
			break;
 801fafc:	e02a      	b.n	801fb54 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801fafe:	697b      	ldr	r3, [r7, #20]
 801fb00:	2bfe      	cmp	r3, #254	; 0xfe
 801fb02:	d901      	bls.n	801fb08 <create_name+0x6c>
 801fb04:	2306      	movs	r3, #6
 801fb06:	e177      	b.n	801fdf8 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 801fb08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fb0a:	b2db      	uxtb	r3, r3
 801fb0c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801fb0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fb10:	2101      	movs	r1, #1
 801fb12:	4618      	mov	r0, r3
 801fb14:	f001 fa80 	bl	8021018 <ff_convert>
 801fb18:	4603      	mov	r3, r0
 801fb1a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801fb1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fb1e:	2b00      	cmp	r3, #0
 801fb20:	d101      	bne.n	801fb26 <create_name+0x8a>
 801fb22:	2306      	movs	r3, #6
 801fb24:	e168      	b.n	801fdf8 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801fb26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fb28:	2b7f      	cmp	r3, #127	; 0x7f
 801fb2a:	d809      	bhi.n	801fb40 <create_name+0xa4>
 801fb2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fb2e:	4619      	mov	r1, r3
 801fb30:	48b3      	ldr	r0, [pc, #716]	; (801fe00 <create_name+0x364>)
 801fb32:	f7fe fcb9 	bl	801e4a8 <chk_chr>
 801fb36:	4603      	mov	r3, r0
 801fb38:	2b00      	cmp	r3, #0
 801fb3a:	d001      	beq.n	801fb40 <create_name+0xa4>
 801fb3c:	2306      	movs	r3, #6
 801fb3e:	e15b      	b.n	801fdf8 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 801fb40:	697b      	ldr	r3, [r7, #20]
 801fb42:	1c5a      	adds	r2, r3, #1
 801fb44:	617a      	str	r2, [r7, #20]
 801fb46:	005b      	lsls	r3, r3, #1
 801fb48:	68fa      	ldr	r2, [r7, #12]
 801fb4a:	4413      	add	r3, r2
 801fb4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801fb4e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801fb50:	e7b4      	b.n	801fabc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801fb52:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801fb54:	693a      	ldr	r2, [r7, #16]
 801fb56:	69bb      	ldr	r3, [r7, #24]
 801fb58:	441a      	add	r2, r3
 801fb5a:	683b      	ldr	r3, [r7, #0]
 801fb5c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801fb5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fb60:	2b1f      	cmp	r3, #31
 801fb62:	d801      	bhi.n	801fb68 <create_name+0xcc>
 801fb64:	2304      	movs	r3, #4
 801fb66:	e000      	b.n	801fb6a <create_name+0xce>
 801fb68:	2300      	movs	r3, #0
 801fb6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801fb6e:	e011      	b.n	801fb94 <create_name+0xf8>
		w = lfn[di - 1];
 801fb70:	697b      	ldr	r3, [r7, #20]
 801fb72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801fb76:	3b01      	subs	r3, #1
 801fb78:	005b      	lsls	r3, r3, #1
 801fb7a:	68fa      	ldr	r2, [r7, #12]
 801fb7c:	4413      	add	r3, r2
 801fb7e:	881b      	ldrh	r3, [r3, #0]
 801fb80:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801fb82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fb84:	2b20      	cmp	r3, #32
 801fb86:	d002      	beq.n	801fb8e <create_name+0xf2>
 801fb88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fb8a:	2b2e      	cmp	r3, #46	; 0x2e
 801fb8c:	d106      	bne.n	801fb9c <create_name+0x100>
		di--;
 801fb8e:	697b      	ldr	r3, [r7, #20]
 801fb90:	3b01      	subs	r3, #1
 801fb92:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801fb94:	697b      	ldr	r3, [r7, #20]
 801fb96:	2b00      	cmp	r3, #0
 801fb98:	d1ea      	bne.n	801fb70 <create_name+0xd4>
 801fb9a:	e000      	b.n	801fb9e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801fb9c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801fb9e:	697b      	ldr	r3, [r7, #20]
 801fba0:	005b      	lsls	r3, r3, #1
 801fba2:	68fa      	ldr	r2, [r7, #12]
 801fba4:	4413      	add	r3, r2
 801fba6:	2200      	movs	r2, #0
 801fba8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801fbaa:	697b      	ldr	r3, [r7, #20]
 801fbac:	2b00      	cmp	r3, #0
 801fbae:	d101      	bne.n	801fbb4 <create_name+0x118>
 801fbb0:	2306      	movs	r3, #6
 801fbb2:	e121      	b.n	801fdf8 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801fbb4:	687b      	ldr	r3, [r7, #4]
 801fbb6:	3324      	adds	r3, #36	; 0x24
 801fbb8:	220b      	movs	r2, #11
 801fbba:	2120      	movs	r1, #32
 801fbbc:	4618      	mov	r0, r3
 801fbbe:	f7fe fc32 	bl	801e426 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801fbc2:	2300      	movs	r3, #0
 801fbc4:	61bb      	str	r3, [r7, #24]
 801fbc6:	e002      	b.n	801fbce <create_name+0x132>
 801fbc8:	69bb      	ldr	r3, [r7, #24]
 801fbca:	3301      	adds	r3, #1
 801fbcc:	61bb      	str	r3, [r7, #24]
 801fbce:	69bb      	ldr	r3, [r7, #24]
 801fbd0:	005b      	lsls	r3, r3, #1
 801fbd2:	68fa      	ldr	r2, [r7, #12]
 801fbd4:	4413      	add	r3, r2
 801fbd6:	881b      	ldrh	r3, [r3, #0]
 801fbd8:	2b20      	cmp	r3, #32
 801fbda:	d0f5      	beq.n	801fbc8 <create_name+0x12c>
 801fbdc:	69bb      	ldr	r3, [r7, #24]
 801fbde:	005b      	lsls	r3, r3, #1
 801fbe0:	68fa      	ldr	r2, [r7, #12]
 801fbe2:	4413      	add	r3, r2
 801fbe4:	881b      	ldrh	r3, [r3, #0]
 801fbe6:	2b2e      	cmp	r3, #46	; 0x2e
 801fbe8:	d0ee      	beq.n	801fbc8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801fbea:	69bb      	ldr	r3, [r7, #24]
 801fbec:	2b00      	cmp	r3, #0
 801fbee:	d009      	beq.n	801fc04 <create_name+0x168>
 801fbf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801fbf4:	f043 0303 	orr.w	r3, r3, #3
 801fbf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801fbfc:	e002      	b.n	801fc04 <create_name+0x168>
 801fbfe:	697b      	ldr	r3, [r7, #20]
 801fc00:	3b01      	subs	r3, #1
 801fc02:	617b      	str	r3, [r7, #20]
 801fc04:	697b      	ldr	r3, [r7, #20]
 801fc06:	2b00      	cmp	r3, #0
 801fc08:	d009      	beq.n	801fc1e <create_name+0x182>
 801fc0a:	697b      	ldr	r3, [r7, #20]
 801fc0c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801fc10:	3b01      	subs	r3, #1
 801fc12:	005b      	lsls	r3, r3, #1
 801fc14:	68fa      	ldr	r2, [r7, #12]
 801fc16:	4413      	add	r3, r2
 801fc18:	881b      	ldrh	r3, [r3, #0]
 801fc1a:	2b2e      	cmp	r3, #46	; 0x2e
 801fc1c:	d1ef      	bne.n	801fbfe <create_name+0x162>

	i = b = 0; ni = 8;
 801fc1e:	2300      	movs	r3, #0
 801fc20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801fc24:	2300      	movs	r3, #0
 801fc26:	623b      	str	r3, [r7, #32]
 801fc28:	2308      	movs	r3, #8
 801fc2a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801fc2c:	69bb      	ldr	r3, [r7, #24]
 801fc2e:	1c5a      	adds	r2, r3, #1
 801fc30:	61ba      	str	r2, [r7, #24]
 801fc32:	005b      	lsls	r3, r3, #1
 801fc34:	68fa      	ldr	r2, [r7, #12]
 801fc36:	4413      	add	r3, r2
 801fc38:	881b      	ldrh	r3, [r3, #0]
 801fc3a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801fc3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fc3e:	2b00      	cmp	r3, #0
 801fc40:	f000 8090 	beq.w	801fd64 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801fc44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fc46:	2b20      	cmp	r3, #32
 801fc48:	d006      	beq.n	801fc58 <create_name+0x1bc>
 801fc4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fc4c:	2b2e      	cmp	r3, #46	; 0x2e
 801fc4e:	d10a      	bne.n	801fc66 <create_name+0x1ca>
 801fc50:	69ba      	ldr	r2, [r7, #24]
 801fc52:	697b      	ldr	r3, [r7, #20]
 801fc54:	429a      	cmp	r2, r3
 801fc56:	d006      	beq.n	801fc66 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801fc58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801fc5c:	f043 0303 	orr.w	r3, r3, #3
 801fc60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801fc64:	e07d      	b.n	801fd62 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801fc66:	6a3a      	ldr	r2, [r7, #32]
 801fc68:	69fb      	ldr	r3, [r7, #28]
 801fc6a:	429a      	cmp	r2, r3
 801fc6c:	d203      	bcs.n	801fc76 <create_name+0x1da>
 801fc6e:	69ba      	ldr	r2, [r7, #24]
 801fc70:	697b      	ldr	r3, [r7, #20]
 801fc72:	429a      	cmp	r2, r3
 801fc74:	d123      	bne.n	801fcbe <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801fc76:	69fb      	ldr	r3, [r7, #28]
 801fc78:	2b0b      	cmp	r3, #11
 801fc7a:	d106      	bne.n	801fc8a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801fc7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801fc80:	f043 0303 	orr.w	r3, r3, #3
 801fc84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801fc88:	e06f      	b.n	801fd6a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801fc8a:	69ba      	ldr	r2, [r7, #24]
 801fc8c:	697b      	ldr	r3, [r7, #20]
 801fc8e:	429a      	cmp	r2, r3
 801fc90:	d005      	beq.n	801fc9e <create_name+0x202>
 801fc92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801fc96:	f043 0303 	orr.w	r3, r3, #3
 801fc9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801fc9e:	69ba      	ldr	r2, [r7, #24]
 801fca0:	697b      	ldr	r3, [r7, #20]
 801fca2:	429a      	cmp	r2, r3
 801fca4:	d860      	bhi.n	801fd68 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801fca6:	697b      	ldr	r3, [r7, #20]
 801fca8:	61bb      	str	r3, [r7, #24]
 801fcaa:	2308      	movs	r3, #8
 801fcac:	623b      	str	r3, [r7, #32]
 801fcae:	230b      	movs	r3, #11
 801fcb0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801fcb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801fcb6:	009b      	lsls	r3, r3, #2
 801fcb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801fcbc:	e051      	b.n	801fd62 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801fcbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fcc0:	2b7f      	cmp	r3, #127	; 0x7f
 801fcc2:	d914      	bls.n	801fcee <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801fcc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fcc6:	2100      	movs	r1, #0
 801fcc8:	4618      	mov	r0, r3
 801fcca:	f001 f9a5 	bl	8021018 <ff_convert>
 801fcce:	4603      	mov	r3, r0
 801fcd0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801fcd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fcd4:	2b00      	cmp	r3, #0
 801fcd6:	d004      	beq.n	801fce2 <create_name+0x246>
 801fcd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fcda:	3b80      	subs	r3, #128	; 0x80
 801fcdc:	4a49      	ldr	r2, [pc, #292]	; (801fe04 <create_name+0x368>)
 801fcde:	5cd3      	ldrb	r3, [r2, r3]
 801fce0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801fce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801fce6:	f043 0302 	orr.w	r3, r3, #2
 801fcea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801fcee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fcf0:	2b00      	cmp	r3, #0
 801fcf2:	d007      	beq.n	801fd04 <create_name+0x268>
 801fcf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fcf6:	4619      	mov	r1, r3
 801fcf8:	4843      	ldr	r0, [pc, #268]	; (801fe08 <create_name+0x36c>)
 801fcfa:	f7fe fbd5 	bl	801e4a8 <chk_chr>
 801fcfe:	4603      	mov	r3, r0
 801fd00:	2b00      	cmp	r3, #0
 801fd02:	d008      	beq.n	801fd16 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801fd04:	235f      	movs	r3, #95	; 0x5f
 801fd06:	84bb      	strh	r3, [r7, #36]	; 0x24
 801fd08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801fd0c:	f043 0303 	orr.w	r3, r3, #3
 801fd10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801fd14:	e01b      	b.n	801fd4e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801fd16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fd18:	2b40      	cmp	r3, #64	; 0x40
 801fd1a:	d909      	bls.n	801fd30 <create_name+0x294>
 801fd1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fd1e:	2b5a      	cmp	r3, #90	; 0x5a
 801fd20:	d806      	bhi.n	801fd30 <create_name+0x294>
					b |= 2;
 801fd22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801fd26:	f043 0302 	orr.w	r3, r3, #2
 801fd2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801fd2e:	e00e      	b.n	801fd4e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801fd30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fd32:	2b60      	cmp	r3, #96	; 0x60
 801fd34:	d90b      	bls.n	801fd4e <create_name+0x2b2>
 801fd36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fd38:	2b7a      	cmp	r3, #122	; 0x7a
 801fd3a:	d808      	bhi.n	801fd4e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801fd3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801fd40:	f043 0301 	orr.w	r3, r3, #1
 801fd44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801fd48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fd4a:	3b20      	subs	r3, #32
 801fd4c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801fd4e:	6a3b      	ldr	r3, [r7, #32]
 801fd50:	1c5a      	adds	r2, r3, #1
 801fd52:	623a      	str	r2, [r7, #32]
 801fd54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801fd56:	b2d1      	uxtb	r1, r2
 801fd58:	687a      	ldr	r2, [r7, #4]
 801fd5a:	4413      	add	r3, r2
 801fd5c:	460a      	mov	r2, r1
 801fd5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801fd62:	e763      	b.n	801fc2c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801fd64:	bf00      	nop
 801fd66:	e000      	b.n	801fd6a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 801fd68:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801fd6a:	687b      	ldr	r3, [r7, #4]
 801fd6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801fd70:	2be5      	cmp	r3, #229	; 0xe5
 801fd72:	d103      	bne.n	801fd7c <create_name+0x2e0>
 801fd74:	687b      	ldr	r3, [r7, #4]
 801fd76:	2205      	movs	r2, #5
 801fd78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 801fd7c:	69fb      	ldr	r3, [r7, #28]
 801fd7e:	2b08      	cmp	r3, #8
 801fd80:	d104      	bne.n	801fd8c <create_name+0x2f0>
 801fd82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801fd86:	009b      	lsls	r3, r3, #2
 801fd88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801fd8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801fd90:	f003 030c 	and.w	r3, r3, #12
 801fd94:	2b0c      	cmp	r3, #12
 801fd96:	d005      	beq.n	801fda4 <create_name+0x308>
 801fd98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801fd9c:	f003 0303 	and.w	r3, r3, #3
 801fda0:	2b03      	cmp	r3, #3
 801fda2:	d105      	bne.n	801fdb0 <create_name+0x314>
 801fda4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801fda8:	f043 0302 	orr.w	r3, r3, #2
 801fdac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801fdb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801fdb4:	f003 0302 	and.w	r3, r3, #2
 801fdb8:	2b00      	cmp	r3, #0
 801fdba:	d117      	bne.n	801fdec <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801fdbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801fdc0:	f003 0303 	and.w	r3, r3, #3
 801fdc4:	2b01      	cmp	r3, #1
 801fdc6:	d105      	bne.n	801fdd4 <create_name+0x338>
 801fdc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801fdcc:	f043 0310 	orr.w	r3, r3, #16
 801fdd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801fdd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801fdd8:	f003 030c 	and.w	r3, r3, #12
 801fddc:	2b04      	cmp	r3, #4
 801fdde:	d105      	bne.n	801fdec <create_name+0x350>
 801fde0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801fde4:	f043 0308 	orr.w	r3, r3, #8
 801fde8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801fdec:	687b      	ldr	r3, [r7, #4]
 801fdee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801fdf2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801fdf6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801fdf8:	4618      	mov	r0, r3
 801fdfa:	3728      	adds	r7, #40	; 0x28
 801fdfc:	46bd      	mov	sp, r7
 801fdfe:	bd80      	pop	{r7, pc}
 801fe00:	0802d898 	.word	0x0802d898
 801fe04:	0802e370 	.word	0x0802e370
 801fe08:	0802d8a4 	.word	0x0802d8a4

0801fe0c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801fe0c:	b580      	push	{r7, lr}
 801fe0e:	b086      	sub	sp, #24
 801fe10:	af00      	add	r7, sp, #0
 801fe12:	6078      	str	r0, [r7, #4]
 801fe14:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801fe16:	687b      	ldr	r3, [r7, #4]
 801fe18:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801fe1a:	693b      	ldr	r3, [r7, #16]
 801fe1c:	681b      	ldr	r3, [r3, #0]
 801fe1e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801fe20:	e002      	b.n	801fe28 <follow_path+0x1c>
 801fe22:	683b      	ldr	r3, [r7, #0]
 801fe24:	3301      	adds	r3, #1
 801fe26:	603b      	str	r3, [r7, #0]
 801fe28:	683b      	ldr	r3, [r7, #0]
 801fe2a:	781b      	ldrb	r3, [r3, #0]
 801fe2c:	2b2f      	cmp	r3, #47	; 0x2f
 801fe2e:	d0f8      	beq.n	801fe22 <follow_path+0x16>
 801fe30:	683b      	ldr	r3, [r7, #0]
 801fe32:	781b      	ldrb	r3, [r3, #0]
 801fe34:	2b5c      	cmp	r3, #92	; 0x5c
 801fe36:	d0f4      	beq.n	801fe22 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801fe38:	693b      	ldr	r3, [r7, #16]
 801fe3a:	2200      	movs	r2, #0
 801fe3c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801fe3e:	683b      	ldr	r3, [r7, #0]
 801fe40:	781b      	ldrb	r3, [r3, #0]
 801fe42:	2b1f      	cmp	r3, #31
 801fe44:	d80a      	bhi.n	801fe5c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801fe46:	687b      	ldr	r3, [r7, #4]
 801fe48:	2280      	movs	r2, #128	; 0x80
 801fe4a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801fe4e:	2100      	movs	r1, #0
 801fe50:	6878      	ldr	r0, [r7, #4]
 801fe52:	f7ff f8fe 	bl	801f052 <dir_sdi>
 801fe56:	4603      	mov	r3, r0
 801fe58:	75fb      	strb	r3, [r7, #23]
 801fe5a:	e048      	b.n	801feee <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801fe5c:	463b      	mov	r3, r7
 801fe5e:	4619      	mov	r1, r3
 801fe60:	6878      	ldr	r0, [r7, #4]
 801fe62:	f7ff fe1b 	bl	801fa9c <create_name>
 801fe66:	4603      	mov	r3, r0
 801fe68:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801fe6a:	7dfb      	ldrb	r3, [r7, #23]
 801fe6c:	2b00      	cmp	r3, #0
 801fe6e:	d139      	bne.n	801fee4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801fe70:	6878      	ldr	r0, [r7, #4]
 801fe72:	f7ff fc5b 	bl	801f72c <dir_find>
 801fe76:	4603      	mov	r3, r0
 801fe78:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801fe7a:	687b      	ldr	r3, [r7, #4]
 801fe7c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801fe80:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801fe82:	7dfb      	ldrb	r3, [r7, #23]
 801fe84:	2b00      	cmp	r3, #0
 801fe86:	d00a      	beq.n	801fe9e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801fe88:	7dfb      	ldrb	r3, [r7, #23]
 801fe8a:	2b04      	cmp	r3, #4
 801fe8c:	d12c      	bne.n	801fee8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801fe8e:	7afb      	ldrb	r3, [r7, #11]
 801fe90:	f003 0304 	and.w	r3, r3, #4
 801fe94:	2b00      	cmp	r3, #0
 801fe96:	d127      	bne.n	801fee8 <follow_path+0xdc>
 801fe98:	2305      	movs	r3, #5
 801fe9a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801fe9c:	e024      	b.n	801fee8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801fe9e:	7afb      	ldrb	r3, [r7, #11]
 801fea0:	f003 0304 	and.w	r3, r3, #4
 801fea4:	2b00      	cmp	r3, #0
 801fea6:	d121      	bne.n	801feec <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801fea8:	693b      	ldr	r3, [r7, #16]
 801feaa:	799b      	ldrb	r3, [r3, #6]
 801feac:	f003 0310 	and.w	r3, r3, #16
 801feb0:	2b00      	cmp	r3, #0
 801feb2:	d102      	bne.n	801feba <follow_path+0xae>
				res = FR_NO_PATH; break;
 801feb4:	2305      	movs	r3, #5
 801feb6:	75fb      	strb	r3, [r7, #23]
 801feb8:	e019      	b.n	801feee <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801feba:	68fb      	ldr	r3, [r7, #12]
 801febc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801fec0:	687b      	ldr	r3, [r7, #4]
 801fec2:	695b      	ldr	r3, [r3, #20]
 801fec4:	68fa      	ldr	r2, [r7, #12]
 801fec6:	8992      	ldrh	r2, [r2, #12]
 801fec8:	fbb3 f0f2 	udiv	r0, r3, r2
 801fecc:	fb02 f200 	mul.w	r2, r2, r0
 801fed0:	1a9b      	subs	r3, r3, r2
 801fed2:	440b      	add	r3, r1
 801fed4:	4619      	mov	r1, r3
 801fed6:	68f8      	ldr	r0, [r7, #12]
 801fed8:	f7ff fa61 	bl	801f39e <ld_clust>
 801fedc:	4602      	mov	r2, r0
 801fede:	693b      	ldr	r3, [r7, #16]
 801fee0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801fee2:	e7bb      	b.n	801fe5c <follow_path+0x50>
			if (res != FR_OK) break;
 801fee4:	bf00      	nop
 801fee6:	e002      	b.n	801feee <follow_path+0xe2>
				break;
 801fee8:	bf00      	nop
 801feea:	e000      	b.n	801feee <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801feec:	bf00      	nop
			}
		}
	}

	return res;
 801feee:	7dfb      	ldrb	r3, [r7, #23]
}
 801fef0:	4618      	mov	r0, r3
 801fef2:	3718      	adds	r7, #24
 801fef4:	46bd      	mov	sp, r7
 801fef6:	bd80      	pop	{r7, pc}

0801fef8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801fef8:	b480      	push	{r7}
 801fefa:	b087      	sub	sp, #28
 801fefc:	af00      	add	r7, sp, #0
 801fefe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801ff00:	f04f 33ff 	mov.w	r3, #4294967295
 801ff04:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801ff06:	687b      	ldr	r3, [r7, #4]
 801ff08:	681b      	ldr	r3, [r3, #0]
 801ff0a:	2b00      	cmp	r3, #0
 801ff0c:	d031      	beq.n	801ff72 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801ff0e:	687b      	ldr	r3, [r7, #4]
 801ff10:	681b      	ldr	r3, [r3, #0]
 801ff12:	617b      	str	r3, [r7, #20]
 801ff14:	e002      	b.n	801ff1c <get_ldnumber+0x24>
 801ff16:	697b      	ldr	r3, [r7, #20]
 801ff18:	3301      	adds	r3, #1
 801ff1a:	617b      	str	r3, [r7, #20]
 801ff1c:	697b      	ldr	r3, [r7, #20]
 801ff1e:	781b      	ldrb	r3, [r3, #0]
 801ff20:	2b1f      	cmp	r3, #31
 801ff22:	d903      	bls.n	801ff2c <get_ldnumber+0x34>
 801ff24:	697b      	ldr	r3, [r7, #20]
 801ff26:	781b      	ldrb	r3, [r3, #0]
 801ff28:	2b3a      	cmp	r3, #58	; 0x3a
 801ff2a:	d1f4      	bne.n	801ff16 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801ff2c:	697b      	ldr	r3, [r7, #20]
 801ff2e:	781b      	ldrb	r3, [r3, #0]
 801ff30:	2b3a      	cmp	r3, #58	; 0x3a
 801ff32:	d11c      	bne.n	801ff6e <get_ldnumber+0x76>
			tp = *path;
 801ff34:	687b      	ldr	r3, [r7, #4]
 801ff36:	681b      	ldr	r3, [r3, #0]
 801ff38:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801ff3a:	68fb      	ldr	r3, [r7, #12]
 801ff3c:	1c5a      	adds	r2, r3, #1
 801ff3e:	60fa      	str	r2, [r7, #12]
 801ff40:	781b      	ldrb	r3, [r3, #0]
 801ff42:	3b30      	subs	r3, #48	; 0x30
 801ff44:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801ff46:	68bb      	ldr	r3, [r7, #8]
 801ff48:	2b09      	cmp	r3, #9
 801ff4a:	d80e      	bhi.n	801ff6a <get_ldnumber+0x72>
 801ff4c:	68fa      	ldr	r2, [r7, #12]
 801ff4e:	697b      	ldr	r3, [r7, #20]
 801ff50:	429a      	cmp	r2, r3
 801ff52:	d10a      	bne.n	801ff6a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801ff54:	68bb      	ldr	r3, [r7, #8]
 801ff56:	2b00      	cmp	r3, #0
 801ff58:	d107      	bne.n	801ff6a <get_ldnumber+0x72>
					vol = (int)i;
 801ff5a:	68bb      	ldr	r3, [r7, #8]
 801ff5c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801ff5e:	697b      	ldr	r3, [r7, #20]
 801ff60:	3301      	adds	r3, #1
 801ff62:	617b      	str	r3, [r7, #20]
 801ff64:	687b      	ldr	r3, [r7, #4]
 801ff66:	697a      	ldr	r2, [r7, #20]
 801ff68:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801ff6a:	693b      	ldr	r3, [r7, #16]
 801ff6c:	e002      	b.n	801ff74 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801ff6e:	2300      	movs	r3, #0
 801ff70:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801ff72:	693b      	ldr	r3, [r7, #16]
}
 801ff74:	4618      	mov	r0, r3
 801ff76:	371c      	adds	r7, #28
 801ff78:	46bd      	mov	sp, r7
 801ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff7e:	4770      	bx	lr

0801ff80 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801ff80:	b580      	push	{r7, lr}
 801ff82:	b082      	sub	sp, #8
 801ff84:	af00      	add	r7, sp, #0
 801ff86:	6078      	str	r0, [r7, #4]
 801ff88:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801ff8a:	687b      	ldr	r3, [r7, #4]
 801ff8c:	2200      	movs	r2, #0
 801ff8e:	70da      	strb	r2, [r3, #3]
 801ff90:	687b      	ldr	r3, [r7, #4]
 801ff92:	f04f 32ff 	mov.w	r2, #4294967295
 801ff96:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801ff98:	6839      	ldr	r1, [r7, #0]
 801ff9a:	6878      	ldr	r0, [r7, #4]
 801ff9c:	f7fe fc80 	bl	801e8a0 <move_window>
 801ffa0:	4603      	mov	r3, r0
 801ffa2:	2b00      	cmp	r3, #0
 801ffa4:	d001      	beq.n	801ffaa <check_fs+0x2a>
 801ffa6:	2304      	movs	r3, #4
 801ffa8:	e038      	b.n	802001c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801ffaa:	687b      	ldr	r3, [r7, #4]
 801ffac:	333c      	adds	r3, #60	; 0x3c
 801ffae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801ffb2:	4618      	mov	r0, r3
 801ffb4:	f7fe f994 	bl	801e2e0 <ld_word>
 801ffb8:	4603      	mov	r3, r0
 801ffba:	461a      	mov	r2, r3
 801ffbc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801ffc0:	429a      	cmp	r2, r3
 801ffc2:	d001      	beq.n	801ffc8 <check_fs+0x48>
 801ffc4:	2303      	movs	r3, #3
 801ffc6:	e029      	b.n	802001c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801ffc8:	687b      	ldr	r3, [r7, #4]
 801ffca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ffce:	2be9      	cmp	r3, #233	; 0xe9
 801ffd0:	d009      	beq.n	801ffe6 <check_fs+0x66>
 801ffd2:	687b      	ldr	r3, [r7, #4]
 801ffd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ffd8:	2beb      	cmp	r3, #235	; 0xeb
 801ffda:	d11e      	bne.n	802001a <check_fs+0x9a>
 801ffdc:	687b      	ldr	r3, [r7, #4]
 801ffde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ffe2:	2b90      	cmp	r3, #144	; 0x90
 801ffe4:	d119      	bne.n	802001a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801ffe6:	687b      	ldr	r3, [r7, #4]
 801ffe8:	333c      	adds	r3, #60	; 0x3c
 801ffea:	3336      	adds	r3, #54	; 0x36
 801ffec:	4618      	mov	r0, r3
 801ffee:	f7fe f98f 	bl	801e310 <ld_dword>
 801fff2:	4603      	mov	r3, r0
 801fff4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801fff8:	4a0a      	ldr	r2, [pc, #40]	; (8020024 <check_fs+0xa4>)
 801fffa:	4293      	cmp	r3, r2
 801fffc:	d101      	bne.n	8020002 <check_fs+0x82>
 801fffe:	2300      	movs	r3, #0
 8020000:	e00c      	b.n	802001c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8020002:	687b      	ldr	r3, [r7, #4]
 8020004:	333c      	adds	r3, #60	; 0x3c
 8020006:	3352      	adds	r3, #82	; 0x52
 8020008:	4618      	mov	r0, r3
 802000a:	f7fe f981 	bl	801e310 <ld_dword>
 802000e:	4602      	mov	r2, r0
 8020010:	4b05      	ldr	r3, [pc, #20]	; (8020028 <check_fs+0xa8>)
 8020012:	429a      	cmp	r2, r3
 8020014:	d101      	bne.n	802001a <check_fs+0x9a>
 8020016:	2300      	movs	r3, #0
 8020018:	e000      	b.n	802001c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 802001a:	2302      	movs	r3, #2
}
 802001c:	4618      	mov	r0, r3
 802001e:	3708      	adds	r7, #8
 8020020:	46bd      	mov	sp, r7
 8020022:	bd80      	pop	{r7, pc}
 8020024:	00544146 	.word	0x00544146
 8020028:	33544146 	.word	0x33544146

0802002c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 802002c:	b580      	push	{r7, lr}
 802002e:	b096      	sub	sp, #88	; 0x58
 8020030:	af00      	add	r7, sp, #0
 8020032:	60f8      	str	r0, [r7, #12]
 8020034:	60b9      	str	r1, [r7, #8]
 8020036:	4613      	mov	r3, r2
 8020038:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 802003a:	68bb      	ldr	r3, [r7, #8]
 802003c:	2200      	movs	r2, #0
 802003e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8020040:	68f8      	ldr	r0, [r7, #12]
 8020042:	f7ff ff59 	bl	801fef8 <get_ldnumber>
 8020046:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8020048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802004a:	2b00      	cmp	r3, #0
 802004c:	da01      	bge.n	8020052 <find_volume+0x26>
 802004e:	230b      	movs	r3, #11
 8020050:	e26c      	b.n	802052c <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8020052:	4aa4      	ldr	r2, [pc, #656]	; (80202e4 <find_volume+0x2b8>)
 8020054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802005a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 802005c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802005e:	2b00      	cmp	r3, #0
 8020060:	d101      	bne.n	8020066 <find_volume+0x3a>
 8020062:	230c      	movs	r3, #12
 8020064:	e262      	b.n	802052c <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 8020066:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8020068:	f7fe fa39 	bl	801e4de <lock_fs>
 802006c:	4603      	mov	r3, r0
 802006e:	2b00      	cmp	r3, #0
 8020070:	d101      	bne.n	8020076 <find_volume+0x4a>
 8020072:	230f      	movs	r3, #15
 8020074:	e25a      	b.n	802052c <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 8020076:	68bb      	ldr	r3, [r7, #8]
 8020078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802007a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 802007c:	79fb      	ldrb	r3, [r7, #7]
 802007e:	f023 0301 	bic.w	r3, r3, #1
 8020082:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8020084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020086:	781b      	ldrb	r3, [r3, #0]
 8020088:	2b00      	cmp	r3, #0
 802008a:	d01a      	beq.n	80200c2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 802008c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802008e:	785b      	ldrb	r3, [r3, #1]
 8020090:	4618      	mov	r0, r3
 8020092:	f7fe f887 	bl	801e1a4 <disk_status>
 8020096:	4603      	mov	r3, r0
 8020098:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 802009c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80200a0:	f003 0301 	and.w	r3, r3, #1
 80200a4:	2b00      	cmp	r3, #0
 80200a6:	d10c      	bne.n	80200c2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80200a8:	79fb      	ldrb	r3, [r7, #7]
 80200aa:	2b00      	cmp	r3, #0
 80200ac:	d007      	beq.n	80200be <find_volume+0x92>
 80200ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80200b2:	f003 0304 	and.w	r3, r3, #4
 80200b6:	2b00      	cmp	r3, #0
 80200b8:	d001      	beq.n	80200be <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80200ba:	230a      	movs	r3, #10
 80200bc:	e236      	b.n	802052c <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 80200be:	2300      	movs	r3, #0
 80200c0:	e234      	b.n	802052c <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80200c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80200c4:	2200      	movs	r2, #0
 80200c6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80200c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80200ca:	b2da      	uxtb	r2, r3
 80200cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80200ce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80200d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80200d2:	785b      	ldrb	r3, [r3, #1]
 80200d4:	4618      	mov	r0, r3
 80200d6:	f7fe f87f 	bl	801e1d8 <disk_initialize>
 80200da:	4603      	mov	r3, r0
 80200dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80200e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80200e4:	f003 0301 	and.w	r3, r3, #1
 80200e8:	2b00      	cmp	r3, #0
 80200ea:	d001      	beq.n	80200f0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80200ec:	2303      	movs	r3, #3
 80200ee:	e21d      	b.n	802052c <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80200f0:	79fb      	ldrb	r3, [r7, #7]
 80200f2:	2b00      	cmp	r3, #0
 80200f4:	d007      	beq.n	8020106 <find_volume+0xda>
 80200f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80200fa:	f003 0304 	and.w	r3, r3, #4
 80200fe:	2b00      	cmp	r3, #0
 8020100:	d001      	beq.n	8020106 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8020102:	230a      	movs	r3, #10
 8020104:	e212      	b.n	802052c <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8020106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020108:	7858      	ldrb	r0, [r3, #1]
 802010a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802010c:	330c      	adds	r3, #12
 802010e:	461a      	mov	r2, r3
 8020110:	2102      	movs	r1, #2
 8020112:	f7fe f8c7 	bl	801e2a4 <disk_ioctl>
 8020116:	4603      	mov	r3, r0
 8020118:	2b00      	cmp	r3, #0
 802011a:	d001      	beq.n	8020120 <find_volume+0xf4>
 802011c:	2301      	movs	r3, #1
 802011e:	e205      	b.n	802052c <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8020120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020122:	899b      	ldrh	r3, [r3, #12]
 8020124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020128:	d80d      	bhi.n	8020146 <find_volume+0x11a>
 802012a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802012c:	899b      	ldrh	r3, [r3, #12]
 802012e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020132:	d308      	bcc.n	8020146 <find_volume+0x11a>
 8020134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020136:	899b      	ldrh	r3, [r3, #12]
 8020138:	461a      	mov	r2, r3
 802013a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802013c:	899b      	ldrh	r3, [r3, #12]
 802013e:	3b01      	subs	r3, #1
 8020140:	4013      	ands	r3, r2
 8020142:	2b00      	cmp	r3, #0
 8020144:	d001      	beq.n	802014a <find_volume+0x11e>
 8020146:	2301      	movs	r3, #1
 8020148:	e1f0      	b.n	802052c <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 802014a:	2300      	movs	r3, #0
 802014c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 802014e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8020150:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8020152:	f7ff ff15 	bl	801ff80 <check_fs>
 8020156:	4603      	mov	r3, r0
 8020158:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 802015c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8020160:	2b02      	cmp	r3, #2
 8020162:	d14b      	bne.n	80201fc <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8020164:	2300      	movs	r3, #0
 8020166:	643b      	str	r3, [r7, #64]	; 0x40
 8020168:	e01f      	b.n	80201aa <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 802016a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802016c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8020170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020172:	011b      	lsls	r3, r3, #4
 8020174:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8020178:	4413      	add	r3, r2
 802017a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 802017c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802017e:	3304      	adds	r3, #4
 8020180:	781b      	ldrb	r3, [r3, #0]
 8020182:	2b00      	cmp	r3, #0
 8020184:	d006      	beq.n	8020194 <find_volume+0x168>
 8020186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020188:	3308      	adds	r3, #8
 802018a:	4618      	mov	r0, r3
 802018c:	f7fe f8c0 	bl	801e310 <ld_dword>
 8020190:	4602      	mov	r2, r0
 8020192:	e000      	b.n	8020196 <find_volume+0x16a>
 8020194:	2200      	movs	r2, #0
 8020196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020198:	009b      	lsls	r3, r3, #2
 802019a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 802019e:	440b      	add	r3, r1
 80201a0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80201a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80201a6:	3301      	adds	r3, #1
 80201a8:	643b      	str	r3, [r7, #64]	; 0x40
 80201aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80201ac:	2b03      	cmp	r3, #3
 80201ae:	d9dc      	bls.n	802016a <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80201b0:	2300      	movs	r3, #0
 80201b2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80201b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80201b6:	2b00      	cmp	r3, #0
 80201b8:	d002      	beq.n	80201c0 <find_volume+0x194>
 80201ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80201bc:	3b01      	subs	r3, #1
 80201be:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80201c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80201c2:	009b      	lsls	r3, r3, #2
 80201c4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80201c8:	4413      	add	r3, r2
 80201ca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80201ce:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80201d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80201d2:	2b00      	cmp	r3, #0
 80201d4:	d005      	beq.n	80201e2 <find_volume+0x1b6>
 80201d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80201d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80201da:	f7ff fed1 	bl	801ff80 <check_fs>
 80201de:	4603      	mov	r3, r0
 80201e0:	e000      	b.n	80201e4 <find_volume+0x1b8>
 80201e2:	2303      	movs	r3, #3
 80201e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80201e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80201ec:	2b01      	cmp	r3, #1
 80201ee:	d905      	bls.n	80201fc <find_volume+0x1d0>
 80201f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80201f2:	3301      	adds	r3, #1
 80201f4:	643b      	str	r3, [r7, #64]	; 0x40
 80201f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80201f8:	2b03      	cmp	r3, #3
 80201fa:	d9e1      	bls.n	80201c0 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80201fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8020200:	2b04      	cmp	r3, #4
 8020202:	d101      	bne.n	8020208 <find_volume+0x1dc>
 8020204:	2301      	movs	r3, #1
 8020206:	e191      	b.n	802052c <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8020208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802020c:	2b01      	cmp	r3, #1
 802020e:	d901      	bls.n	8020214 <find_volume+0x1e8>
 8020210:	230d      	movs	r3, #13
 8020212:	e18b      	b.n	802052c <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8020214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020216:	333c      	adds	r3, #60	; 0x3c
 8020218:	330b      	adds	r3, #11
 802021a:	4618      	mov	r0, r3
 802021c:	f7fe f860 	bl	801e2e0 <ld_word>
 8020220:	4603      	mov	r3, r0
 8020222:	461a      	mov	r2, r3
 8020224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020226:	899b      	ldrh	r3, [r3, #12]
 8020228:	429a      	cmp	r2, r3
 802022a:	d001      	beq.n	8020230 <find_volume+0x204>
 802022c:	230d      	movs	r3, #13
 802022e:	e17d      	b.n	802052c <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8020230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020232:	333c      	adds	r3, #60	; 0x3c
 8020234:	3316      	adds	r3, #22
 8020236:	4618      	mov	r0, r3
 8020238:	f7fe f852 	bl	801e2e0 <ld_word>
 802023c:	4603      	mov	r3, r0
 802023e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8020240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020242:	2b00      	cmp	r3, #0
 8020244:	d106      	bne.n	8020254 <find_volume+0x228>
 8020246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020248:	333c      	adds	r3, #60	; 0x3c
 802024a:	3324      	adds	r3, #36	; 0x24
 802024c:	4618      	mov	r0, r3
 802024e:	f7fe f85f 	bl	801e310 <ld_dword>
 8020252:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8020254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020256:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8020258:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 802025a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802025c:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8020260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020262:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8020264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020266:	789b      	ldrb	r3, [r3, #2]
 8020268:	2b01      	cmp	r3, #1
 802026a:	d005      	beq.n	8020278 <find_volume+0x24c>
 802026c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802026e:	789b      	ldrb	r3, [r3, #2]
 8020270:	2b02      	cmp	r3, #2
 8020272:	d001      	beq.n	8020278 <find_volume+0x24c>
 8020274:	230d      	movs	r3, #13
 8020276:	e159      	b.n	802052c <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8020278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802027a:	789b      	ldrb	r3, [r3, #2]
 802027c:	461a      	mov	r2, r3
 802027e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020280:	fb02 f303 	mul.w	r3, r2, r3
 8020284:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8020286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020288:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 802028c:	b29a      	uxth	r2, r3
 802028e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020290:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8020292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020294:	895b      	ldrh	r3, [r3, #10]
 8020296:	2b00      	cmp	r3, #0
 8020298:	d008      	beq.n	80202ac <find_volume+0x280>
 802029a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802029c:	895b      	ldrh	r3, [r3, #10]
 802029e:	461a      	mov	r2, r3
 80202a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80202a2:	895b      	ldrh	r3, [r3, #10]
 80202a4:	3b01      	subs	r3, #1
 80202a6:	4013      	ands	r3, r2
 80202a8:	2b00      	cmp	r3, #0
 80202aa:	d001      	beq.n	80202b0 <find_volume+0x284>
 80202ac:	230d      	movs	r3, #13
 80202ae:	e13d      	b.n	802052c <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80202b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80202b2:	333c      	adds	r3, #60	; 0x3c
 80202b4:	3311      	adds	r3, #17
 80202b6:	4618      	mov	r0, r3
 80202b8:	f7fe f812 	bl	801e2e0 <ld_word>
 80202bc:	4603      	mov	r3, r0
 80202be:	461a      	mov	r2, r3
 80202c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80202c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80202c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80202c6:	891b      	ldrh	r3, [r3, #8]
 80202c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80202ca:	8992      	ldrh	r2, [r2, #12]
 80202cc:	0952      	lsrs	r2, r2, #5
 80202ce:	b292      	uxth	r2, r2
 80202d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80202d4:	fb02 f201 	mul.w	r2, r2, r1
 80202d8:	1a9b      	subs	r3, r3, r2
 80202da:	b29b      	uxth	r3, r3
 80202dc:	2b00      	cmp	r3, #0
 80202de:	d003      	beq.n	80202e8 <find_volume+0x2bc>
 80202e0:	230d      	movs	r3, #13
 80202e2:	e123      	b.n	802052c <find_volume+0x500>
 80202e4:	20001560 	.word	0x20001560

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80202e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80202ea:	333c      	adds	r3, #60	; 0x3c
 80202ec:	3313      	adds	r3, #19
 80202ee:	4618      	mov	r0, r3
 80202f0:	f7fd fff6 	bl	801e2e0 <ld_word>
 80202f4:	4603      	mov	r3, r0
 80202f6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80202f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80202fa:	2b00      	cmp	r3, #0
 80202fc:	d106      	bne.n	802030c <find_volume+0x2e0>
 80202fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020300:	333c      	adds	r3, #60	; 0x3c
 8020302:	3320      	adds	r3, #32
 8020304:	4618      	mov	r0, r3
 8020306:	f7fe f803 	bl	801e310 <ld_dword>
 802030a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 802030c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802030e:	333c      	adds	r3, #60	; 0x3c
 8020310:	330e      	adds	r3, #14
 8020312:	4618      	mov	r0, r3
 8020314:	f7fd ffe4 	bl	801e2e0 <ld_word>
 8020318:	4603      	mov	r3, r0
 802031a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 802031c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802031e:	2b00      	cmp	r3, #0
 8020320:	d101      	bne.n	8020326 <find_volume+0x2fa>
 8020322:	230d      	movs	r3, #13
 8020324:	e102      	b.n	802052c <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8020326:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8020328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802032a:	4413      	add	r3, r2
 802032c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802032e:	8911      	ldrh	r1, [r2, #8]
 8020330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8020332:	8992      	ldrh	r2, [r2, #12]
 8020334:	0952      	lsrs	r2, r2, #5
 8020336:	b292      	uxth	r2, r2
 8020338:	fbb1 f2f2 	udiv	r2, r1, r2
 802033c:	b292      	uxth	r2, r2
 802033e:	4413      	add	r3, r2
 8020340:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8020342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8020344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020346:	429a      	cmp	r2, r3
 8020348:	d201      	bcs.n	802034e <find_volume+0x322>
 802034a:	230d      	movs	r3, #13
 802034c:	e0ee      	b.n	802052c <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 802034e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8020350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020352:	1ad3      	subs	r3, r2, r3
 8020354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8020356:	8952      	ldrh	r2, [r2, #10]
 8020358:	fbb3 f3f2 	udiv	r3, r3, r2
 802035c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 802035e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020360:	2b00      	cmp	r3, #0
 8020362:	d101      	bne.n	8020368 <find_volume+0x33c>
 8020364:	230d      	movs	r3, #13
 8020366:	e0e1      	b.n	802052c <find_volume+0x500>
		fmt = FS_FAT32;
 8020368:	2303      	movs	r3, #3
 802036a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 802036e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020370:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8020374:	4293      	cmp	r3, r2
 8020376:	d802      	bhi.n	802037e <find_volume+0x352>
 8020378:	2302      	movs	r3, #2
 802037a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 802037e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020380:	f640 72f5 	movw	r2, #4085	; 0xff5
 8020384:	4293      	cmp	r3, r2
 8020386:	d802      	bhi.n	802038e <find_volume+0x362>
 8020388:	2301      	movs	r3, #1
 802038a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 802038e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020390:	1c9a      	adds	r2, r3, #2
 8020392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020394:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8020396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020398:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802039a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 802039c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 802039e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80203a0:	441a      	add	r2, r3
 80203a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80203a4:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 80203a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80203a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80203aa:	441a      	add	r2, r3
 80203ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80203ae:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 80203b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80203b4:	2b03      	cmp	r3, #3
 80203b6:	d11e      	bne.n	80203f6 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80203b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80203ba:	333c      	adds	r3, #60	; 0x3c
 80203bc:	332a      	adds	r3, #42	; 0x2a
 80203be:	4618      	mov	r0, r3
 80203c0:	f7fd ff8e 	bl	801e2e0 <ld_word>
 80203c4:	4603      	mov	r3, r0
 80203c6:	2b00      	cmp	r3, #0
 80203c8:	d001      	beq.n	80203ce <find_volume+0x3a2>
 80203ca:	230d      	movs	r3, #13
 80203cc:	e0ae      	b.n	802052c <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80203ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80203d0:	891b      	ldrh	r3, [r3, #8]
 80203d2:	2b00      	cmp	r3, #0
 80203d4:	d001      	beq.n	80203da <find_volume+0x3ae>
 80203d6:	230d      	movs	r3, #13
 80203d8:	e0a8      	b.n	802052c <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80203da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80203dc:	333c      	adds	r3, #60	; 0x3c
 80203de:	332c      	adds	r3, #44	; 0x2c
 80203e0:	4618      	mov	r0, r3
 80203e2:	f7fd ff95 	bl	801e310 <ld_dword>
 80203e6:	4602      	mov	r2, r0
 80203e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80203ea:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80203ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80203ee:	6a1b      	ldr	r3, [r3, #32]
 80203f0:	009b      	lsls	r3, r3, #2
 80203f2:	647b      	str	r3, [r7, #68]	; 0x44
 80203f4:	e01f      	b.n	8020436 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80203f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80203f8:	891b      	ldrh	r3, [r3, #8]
 80203fa:	2b00      	cmp	r3, #0
 80203fc:	d101      	bne.n	8020402 <find_volume+0x3d6>
 80203fe:	230d      	movs	r3, #13
 8020400:	e094      	b.n	802052c <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8020402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020408:	441a      	add	r2, r3
 802040a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802040c:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 802040e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8020412:	2b02      	cmp	r3, #2
 8020414:	d103      	bne.n	802041e <find_volume+0x3f2>
 8020416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020418:	6a1b      	ldr	r3, [r3, #32]
 802041a:	005b      	lsls	r3, r3, #1
 802041c:	e00a      	b.n	8020434 <find_volume+0x408>
 802041e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020420:	6a1a      	ldr	r2, [r3, #32]
 8020422:	4613      	mov	r3, r2
 8020424:	005b      	lsls	r3, r3, #1
 8020426:	4413      	add	r3, r2
 8020428:	085a      	lsrs	r2, r3, #1
 802042a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802042c:	6a1b      	ldr	r3, [r3, #32]
 802042e:	f003 0301 	and.w	r3, r3, #1
 8020432:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8020434:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8020436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802043a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802043c:	899b      	ldrh	r3, [r3, #12]
 802043e:	4619      	mov	r1, r3
 8020440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020442:	440b      	add	r3, r1
 8020444:	3b01      	subs	r3, #1
 8020446:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8020448:	8989      	ldrh	r1, [r1, #12]
 802044a:	fbb3 f3f1 	udiv	r3, r3, r1
 802044e:	429a      	cmp	r2, r3
 8020450:	d201      	bcs.n	8020456 <find_volume+0x42a>
 8020452:	230d      	movs	r3, #13
 8020454:	e06a      	b.n	802052c <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8020456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020458:	f04f 32ff 	mov.w	r2, #4294967295
 802045c:	61da      	str	r2, [r3, #28]
 802045e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020460:	69da      	ldr	r2, [r3, #28]
 8020462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020464:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8020466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020468:	2280      	movs	r2, #128	; 0x80
 802046a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 802046c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8020470:	2b03      	cmp	r3, #3
 8020472:	d149      	bne.n	8020508 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8020474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020476:	333c      	adds	r3, #60	; 0x3c
 8020478:	3330      	adds	r3, #48	; 0x30
 802047a:	4618      	mov	r0, r3
 802047c:	f7fd ff30 	bl	801e2e0 <ld_word>
 8020480:	4603      	mov	r3, r0
 8020482:	2b01      	cmp	r3, #1
 8020484:	d140      	bne.n	8020508 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8020486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020488:	3301      	adds	r3, #1
 802048a:	4619      	mov	r1, r3
 802048c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802048e:	f7fe fa07 	bl	801e8a0 <move_window>
 8020492:	4603      	mov	r3, r0
 8020494:	2b00      	cmp	r3, #0
 8020496:	d137      	bne.n	8020508 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8020498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802049a:	2200      	movs	r2, #0
 802049c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 802049e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80204a0:	333c      	adds	r3, #60	; 0x3c
 80204a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80204a6:	4618      	mov	r0, r3
 80204a8:	f7fd ff1a 	bl	801e2e0 <ld_word>
 80204ac:	4603      	mov	r3, r0
 80204ae:	461a      	mov	r2, r3
 80204b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80204b4:	429a      	cmp	r2, r3
 80204b6:	d127      	bne.n	8020508 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80204b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80204ba:	333c      	adds	r3, #60	; 0x3c
 80204bc:	4618      	mov	r0, r3
 80204be:	f7fd ff27 	bl	801e310 <ld_dword>
 80204c2:	4602      	mov	r2, r0
 80204c4:	4b1b      	ldr	r3, [pc, #108]	; (8020534 <find_volume+0x508>)
 80204c6:	429a      	cmp	r2, r3
 80204c8:	d11e      	bne.n	8020508 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80204ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80204cc:	333c      	adds	r3, #60	; 0x3c
 80204ce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80204d2:	4618      	mov	r0, r3
 80204d4:	f7fd ff1c 	bl	801e310 <ld_dword>
 80204d8:	4602      	mov	r2, r0
 80204da:	4b17      	ldr	r3, [pc, #92]	; (8020538 <find_volume+0x50c>)
 80204dc:	429a      	cmp	r2, r3
 80204de:	d113      	bne.n	8020508 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80204e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80204e2:	333c      	adds	r3, #60	; 0x3c
 80204e4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80204e8:	4618      	mov	r0, r3
 80204ea:	f7fd ff11 	bl	801e310 <ld_dword>
 80204ee:	4602      	mov	r2, r0
 80204f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80204f2:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80204f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80204f6:	333c      	adds	r3, #60	; 0x3c
 80204f8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80204fc:	4618      	mov	r0, r3
 80204fe:	f7fd ff07 	bl	801e310 <ld_dword>
 8020502:	4602      	mov	r2, r0
 8020504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020506:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8020508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802050a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 802050e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8020510:	4b0a      	ldr	r3, [pc, #40]	; (802053c <find_volume+0x510>)
 8020512:	881b      	ldrh	r3, [r3, #0]
 8020514:	3301      	adds	r3, #1
 8020516:	b29a      	uxth	r2, r3
 8020518:	4b08      	ldr	r3, [pc, #32]	; (802053c <find_volume+0x510>)
 802051a:	801a      	strh	r2, [r3, #0]
 802051c:	4b07      	ldr	r3, [pc, #28]	; (802053c <find_volume+0x510>)
 802051e:	881a      	ldrh	r2, [r3, #0]
 8020520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020522:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8020524:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8020526:	f7fe f953 	bl	801e7d0 <clear_lock>
#endif
	return FR_OK;
 802052a:	2300      	movs	r3, #0
}
 802052c:	4618      	mov	r0, r3
 802052e:	3758      	adds	r7, #88	; 0x58
 8020530:	46bd      	mov	sp, r7
 8020532:	bd80      	pop	{r7, pc}
 8020534:	41615252 	.word	0x41615252
 8020538:	61417272 	.word	0x61417272
 802053c:	20001564 	.word	0x20001564

08020540 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8020540:	b580      	push	{r7, lr}
 8020542:	b084      	sub	sp, #16
 8020544:	af00      	add	r7, sp, #0
 8020546:	6078      	str	r0, [r7, #4]
 8020548:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 802054a:	2309      	movs	r3, #9
 802054c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 802054e:	687b      	ldr	r3, [r7, #4]
 8020550:	2b00      	cmp	r3, #0
 8020552:	d02e      	beq.n	80205b2 <validate+0x72>
 8020554:	687b      	ldr	r3, [r7, #4]
 8020556:	681b      	ldr	r3, [r3, #0]
 8020558:	2b00      	cmp	r3, #0
 802055a:	d02a      	beq.n	80205b2 <validate+0x72>
 802055c:	687b      	ldr	r3, [r7, #4]
 802055e:	681b      	ldr	r3, [r3, #0]
 8020560:	781b      	ldrb	r3, [r3, #0]
 8020562:	2b00      	cmp	r3, #0
 8020564:	d025      	beq.n	80205b2 <validate+0x72>
 8020566:	687b      	ldr	r3, [r7, #4]
 8020568:	889a      	ldrh	r2, [r3, #4]
 802056a:	687b      	ldr	r3, [r7, #4]
 802056c:	681b      	ldr	r3, [r3, #0]
 802056e:	88db      	ldrh	r3, [r3, #6]
 8020570:	429a      	cmp	r2, r3
 8020572:	d11e      	bne.n	80205b2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8020574:	687b      	ldr	r3, [r7, #4]
 8020576:	681b      	ldr	r3, [r3, #0]
 8020578:	4618      	mov	r0, r3
 802057a:	f7fd ffb0 	bl	801e4de <lock_fs>
 802057e:	4603      	mov	r3, r0
 8020580:	2b00      	cmp	r3, #0
 8020582:	d014      	beq.n	80205ae <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8020584:	687b      	ldr	r3, [r7, #4]
 8020586:	681b      	ldr	r3, [r3, #0]
 8020588:	785b      	ldrb	r3, [r3, #1]
 802058a:	4618      	mov	r0, r3
 802058c:	f7fd fe0a 	bl	801e1a4 <disk_status>
 8020590:	4603      	mov	r3, r0
 8020592:	f003 0301 	and.w	r3, r3, #1
 8020596:	2b00      	cmp	r3, #0
 8020598:	d102      	bne.n	80205a0 <validate+0x60>
				res = FR_OK;
 802059a:	2300      	movs	r3, #0
 802059c:	73fb      	strb	r3, [r7, #15]
 802059e:	e008      	b.n	80205b2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80205a0:	687b      	ldr	r3, [r7, #4]
 80205a2:	681b      	ldr	r3, [r3, #0]
 80205a4:	2100      	movs	r1, #0
 80205a6:	4618      	mov	r0, r3
 80205a8:	f7fd ffaf 	bl	801e50a <unlock_fs>
 80205ac:	e001      	b.n	80205b2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80205ae:	230f      	movs	r3, #15
 80205b0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80205b2:	7bfb      	ldrb	r3, [r7, #15]
 80205b4:	2b00      	cmp	r3, #0
 80205b6:	d102      	bne.n	80205be <validate+0x7e>
 80205b8:	687b      	ldr	r3, [r7, #4]
 80205ba:	681b      	ldr	r3, [r3, #0]
 80205bc:	e000      	b.n	80205c0 <validate+0x80>
 80205be:	2300      	movs	r3, #0
 80205c0:	683a      	ldr	r2, [r7, #0]
 80205c2:	6013      	str	r3, [r2, #0]
	return res;
 80205c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80205c6:	4618      	mov	r0, r3
 80205c8:	3710      	adds	r7, #16
 80205ca:	46bd      	mov	sp, r7
 80205cc:	bd80      	pop	{r7, pc}
	...

080205d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80205d0:	b580      	push	{r7, lr}
 80205d2:	b088      	sub	sp, #32
 80205d4:	af00      	add	r7, sp, #0
 80205d6:	60f8      	str	r0, [r7, #12]
 80205d8:	60b9      	str	r1, [r7, #8]
 80205da:	4613      	mov	r3, r2
 80205dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80205de:	68bb      	ldr	r3, [r7, #8]
 80205e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80205e2:	f107 0310 	add.w	r3, r7, #16
 80205e6:	4618      	mov	r0, r3
 80205e8:	f7ff fc86 	bl	801fef8 <get_ldnumber>
 80205ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80205ee:	69fb      	ldr	r3, [r7, #28]
 80205f0:	2b00      	cmp	r3, #0
 80205f2:	da01      	bge.n	80205f8 <f_mount+0x28>
 80205f4:	230b      	movs	r3, #11
 80205f6:	e048      	b.n	802068a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80205f8:	4a26      	ldr	r2, [pc, #152]	; (8020694 <f_mount+0xc4>)
 80205fa:	69fb      	ldr	r3, [r7, #28]
 80205fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020600:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8020602:	69bb      	ldr	r3, [r7, #24]
 8020604:	2b00      	cmp	r3, #0
 8020606:	d00f      	beq.n	8020628 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8020608:	69b8      	ldr	r0, [r7, #24]
 802060a:	f7fe f8e1 	bl	801e7d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 802060e:	69bb      	ldr	r3, [r7, #24]
 8020610:	695b      	ldr	r3, [r3, #20]
 8020612:	4618      	mov	r0, r3
 8020614:	f000 fde1 	bl	80211da <ff_del_syncobj>
 8020618:	4603      	mov	r3, r0
 802061a:	2b00      	cmp	r3, #0
 802061c:	d101      	bne.n	8020622 <f_mount+0x52>
 802061e:	2302      	movs	r3, #2
 8020620:	e033      	b.n	802068a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8020622:	69bb      	ldr	r3, [r7, #24]
 8020624:	2200      	movs	r2, #0
 8020626:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8020628:	68fb      	ldr	r3, [r7, #12]
 802062a:	2b00      	cmp	r3, #0
 802062c:	d00f      	beq.n	802064e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 802062e:	68fb      	ldr	r3, [r7, #12]
 8020630:	2200      	movs	r2, #0
 8020632:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8020634:	69fb      	ldr	r3, [r7, #28]
 8020636:	b2da      	uxtb	r2, r3
 8020638:	68fb      	ldr	r3, [r7, #12]
 802063a:	3314      	adds	r3, #20
 802063c:	4619      	mov	r1, r3
 802063e:	4610      	mov	r0, r2
 8020640:	f000 fdb0 	bl	80211a4 <ff_cre_syncobj>
 8020644:	4603      	mov	r3, r0
 8020646:	2b00      	cmp	r3, #0
 8020648:	d101      	bne.n	802064e <f_mount+0x7e>
 802064a:	2302      	movs	r3, #2
 802064c:	e01d      	b.n	802068a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 802064e:	68fa      	ldr	r2, [r7, #12]
 8020650:	4910      	ldr	r1, [pc, #64]	; (8020694 <f_mount+0xc4>)
 8020652:	69fb      	ldr	r3, [r7, #28]
 8020654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8020658:	68fb      	ldr	r3, [r7, #12]
 802065a:	2b00      	cmp	r3, #0
 802065c:	d002      	beq.n	8020664 <f_mount+0x94>
 802065e:	79fb      	ldrb	r3, [r7, #7]
 8020660:	2b01      	cmp	r3, #1
 8020662:	d001      	beq.n	8020668 <f_mount+0x98>
 8020664:	2300      	movs	r3, #0
 8020666:	e010      	b.n	802068a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8020668:	f107 010c 	add.w	r1, r7, #12
 802066c:	f107 0308 	add.w	r3, r7, #8
 8020670:	2200      	movs	r2, #0
 8020672:	4618      	mov	r0, r3
 8020674:	f7ff fcda 	bl	802002c <find_volume>
 8020678:	4603      	mov	r3, r0
 802067a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 802067c:	68fb      	ldr	r3, [r7, #12]
 802067e:	7dfa      	ldrb	r2, [r7, #23]
 8020680:	4611      	mov	r1, r2
 8020682:	4618      	mov	r0, r3
 8020684:	f7fd ff41 	bl	801e50a <unlock_fs>
 8020688:	7dfb      	ldrb	r3, [r7, #23]
}
 802068a:	4618      	mov	r0, r3
 802068c:	3720      	adds	r7, #32
 802068e:	46bd      	mov	sp, r7
 8020690:	bd80      	pop	{r7, pc}
 8020692:	bf00      	nop
 8020694:	20001560 	.word	0x20001560

08020698 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8020698:	b580      	push	{r7, lr}
 802069a:	b09a      	sub	sp, #104	; 0x68
 802069c:	af00      	add	r7, sp, #0
 802069e:	60f8      	str	r0, [r7, #12]
 80206a0:	60b9      	str	r1, [r7, #8]
 80206a2:	4613      	mov	r3, r2
 80206a4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80206a6:	68fb      	ldr	r3, [r7, #12]
 80206a8:	2b00      	cmp	r3, #0
 80206aa:	d101      	bne.n	80206b0 <f_open+0x18>
 80206ac:	2309      	movs	r3, #9
 80206ae:	e1d7      	b.n	8020a60 <f_open+0x3c8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80206b0:	79fb      	ldrb	r3, [r7, #7]
 80206b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80206b6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80206b8:	79fa      	ldrb	r2, [r7, #7]
 80206ba:	f107 0110 	add.w	r1, r7, #16
 80206be:	f107 0308 	add.w	r3, r7, #8
 80206c2:	4618      	mov	r0, r3
 80206c4:	f7ff fcb2 	bl	802002c <find_volume>
 80206c8:	4603      	mov	r3, r0
 80206ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80206ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80206d2:	2b00      	cmp	r3, #0
 80206d4:	f040 81b4 	bne.w	8020a40 <f_open+0x3a8>
		dj.obj.fs = fs;
 80206d8:	693b      	ldr	r3, [r7, #16]
 80206da:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 80206dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80206e0:	f000 fda7 	bl	8021232 <ff_memalloc>
 80206e4:	65b8      	str	r0, [r7, #88]	; 0x58
 80206e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80206e8:	2b00      	cmp	r3, #0
 80206ea:	d106      	bne.n	80206fa <f_open+0x62>
 80206ec:	693b      	ldr	r3, [r7, #16]
 80206ee:	2111      	movs	r1, #17
 80206f0:	4618      	mov	r0, r3
 80206f2:	f7fd ff0a 	bl	801e50a <unlock_fs>
 80206f6:	2311      	movs	r3, #17
 80206f8:	e1b2      	b.n	8020a60 <f_open+0x3c8>
 80206fa:	693b      	ldr	r3, [r7, #16]
 80206fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80206fe:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8020700:	68ba      	ldr	r2, [r7, #8]
 8020702:	f107 0314 	add.w	r3, r7, #20
 8020706:	4611      	mov	r1, r2
 8020708:	4618      	mov	r0, r3
 802070a:	f7ff fb7f 	bl	801fe0c <follow_path>
 802070e:	4603      	mov	r3, r0
 8020710:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8020714:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8020718:	2b00      	cmp	r3, #0
 802071a:	d11a      	bne.n	8020752 <f_open+0xba>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 802071c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8020720:	b25b      	sxtb	r3, r3
 8020722:	2b00      	cmp	r3, #0
 8020724:	da03      	bge.n	802072e <f_open+0x96>
				res = FR_INVALID_NAME;
 8020726:	2306      	movs	r3, #6
 8020728:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 802072c:	e011      	b.n	8020752 <f_open+0xba>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 802072e:	79fb      	ldrb	r3, [r7, #7]
 8020730:	f023 0301 	bic.w	r3, r3, #1
 8020734:	2b00      	cmp	r3, #0
 8020736:	bf14      	ite	ne
 8020738:	2301      	movne	r3, #1
 802073a:	2300      	moveq	r3, #0
 802073c:	b2db      	uxtb	r3, r3
 802073e:	461a      	mov	r2, r3
 8020740:	f107 0314 	add.w	r3, r7, #20
 8020744:	4611      	mov	r1, r2
 8020746:	4618      	mov	r0, r3
 8020748:	f7fd fefa 	bl	801e540 <chk_lock>
 802074c:	4603      	mov	r3, r0
 802074e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8020752:	79fb      	ldrb	r3, [r7, #7]
 8020754:	f003 031c 	and.w	r3, r3, #28
 8020758:	2b00      	cmp	r3, #0
 802075a:	d07f      	beq.n	802085c <f_open+0x1c4>
			if (res != FR_OK) {					/* No file, create new */
 802075c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8020760:	2b00      	cmp	r3, #0
 8020762:	d017      	beq.n	8020794 <f_open+0xfc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8020764:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8020768:	2b04      	cmp	r3, #4
 802076a:	d10e      	bne.n	802078a <f_open+0xf2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 802076c:	f7fd ff44 	bl	801e5f8 <enq_lock>
 8020770:	4603      	mov	r3, r0
 8020772:	2b00      	cmp	r3, #0
 8020774:	d006      	beq.n	8020784 <f_open+0xec>
 8020776:	f107 0314 	add.w	r3, r7, #20
 802077a:	4618      	mov	r0, r3
 802077c:	f7ff f896 	bl	801f8ac <dir_register>
 8020780:	4603      	mov	r3, r0
 8020782:	e000      	b.n	8020786 <f_open+0xee>
 8020784:	2312      	movs	r3, #18
 8020786:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 802078a:	79fb      	ldrb	r3, [r7, #7]
 802078c:	f043 0308 	orr.w	r3, r3, #8
 8020790:	71fb      	strb	r3, [r7, #7]
 8020792:	e010      	b.n	80207b6 <f_open+0x11e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8020794:	7ebb      	ldrb	r3, [r7, #26]
 8020796:	f003 0311 	and.w	r3, r3, #17
 802079a:	2b00      	cmp	r3, #0
 802079c:	d003      	beq.n	80207a6 <f_open+0x10e>
					res = FR_DENIED;
 802079e:	2307      	movs	r3, #7
 80207a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80207a4:	e007      	b.n	80207b6 <f_open+0x11e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80207a6:	79fb      	ldrb	r3, [r7, #7]
 80207a8:	f003 0304 	and.w	r3, r3, #4
 80207ac:	2b00      	cmp	r3, #0
 80207ae:	d002      	beq.n	80207b6 <f_open+0x11e>
 80207b0:	2308      	movs	r3, #8
 80207b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80207b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80207ba:	2b00      	cmp	r3, #0
 80207bc:	d168      	bne.n	8020890 <f_open+0x1f8>
 80207be:	79fb      	ldrb	r3, [r7, #7]
 80207c0:	f003 0308 	and.w	r3, r3, #8
 80207c4:	2b00      	cmp	r3, #0
 80207c6:	d063      	beq.n	8020890 <f_open+0x1f8>
				dw = GET_FATTIME();
 80207c8:	f7fd faa0 	bl	801dd0c <get_fattime>
 80207cc:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80207ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80207d0:	330e      	adds	r3, #14
 80207d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80207d4:	4618      	mov	r0, r3
 80207d6:	f7fd fdd9 	bl	801e38c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80207da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80207dc:	3316      	adds	r3, #22
 80207de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80207e0:	4618      	mov	r0, r3
 80207e2:	f7fd fdd3 	bl	801e38c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80207e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80207e8:	330b      	adds	r3, #11
 80207ea:	2220      	movs	r2, #32
 80207ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80207ee:	693b      	ldr	r3, [r7, #16]
 80207f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80207f2:	4611      	mov	r1, r2
 80207f4:	4618      	mov	r0, r3
 80207f6:	f7fe fdd2 	bl	801f39e <ld_clust>
 80207fa:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80207fc:	693b      	ldr	r3, [r7, #16]
 80207fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8020800:	2200      	movs	r2, #0
 8020802:	4618      	mov	r0, r3
 8020804:	f7fe fdea 	bl	801f3dc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8020808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802080a:	331c      	adds	r3, #28
 802080c:	2100      	movs	r1, #0
 802080e:	4618      	mov	r0, r3
 8020810:	f7fd fdbc 	bl	801e38c <st_dword>
					fs->wflag = 1;
 8020814:	693b      	ldr	r3, [r7, #16]
 8020816:	2201      	movs	r2, #1
 8020818:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 802081a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802081c:	2b00      	cmp	r3, #0
 802081e:	d037      	beq.n	8020890 <f_open+0x1f8>
						dw = fs->winsect;
 8020820:	693b      	ldr	r3, [r7, #16]
 8020822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020824:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8020826:	f107 0314 	add.w	r3, r7, #20
 802082a:	2200      	movs	r2, #0
 802082c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 802082e:	4618      	mov	r0, r3
 8020830:	f7fe fada 	bl	801ede8 <remove_chain>
 8020834:	4603      	mov	r3, r0
 8020836:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 802083a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 802083e:	2b00      	cmp	r3, #0
 8020840:	d126      	bne.n	8020890 <f_open+0x1f8>
							res = move_window(fs, dw);
 8020842:	693b      	ldr	r3, [r7, #16]
 8020844:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8020846:	4618      	mov	r0, r3
 8020848:	f7fe f82a 	bl	801e8a0 <move_window>
 802084c:	4603      	mov	r3, r0
 802084e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8020852:	693b      	ldr	r3, [r7, #16]
 8020854:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8020856:	3a01      	subs	r2, #1
 8020858:	619a      	str	r2, [r3, #24]
 802085a:	e019      	b.n	8020890 <f_open+0x1f8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 802085c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8020860:	2b00      	cmp	r3, #0
 8020862:	d115      	bne.n	8020890 <f_open+0x1f8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8020864:	7ebb      	ldrb	r3, [r7, #26]
 8020866:	f003 0310 	and.w	r3, r3, #16
 802086a:	2b00      	cmp	r3, #0
 802086c:	d003      	beq.n	8020876 <f_open+0x1de>
					res = FR_NO_FILE;
 802086e:	2304      	movs	r3, #4
 8020870:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8020874:	e00c      	b.n	8020890 <f_open+0x1f8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8020876:	79fb      	ldrb	r3, [r7, #7]
 8020878:	f003 0302 	and.w	r3, r3, #2
 802087c:	2b00      	cmp	r3, #0
 802087e:	d007      	beq.n	8020890 <f_open+0x1f8>
 8020880:	7ebb      	ldrb	r3, [r7, #26]
 8020882:	f003 0301 	and.w	r3, r3, #1
 8020886:	2b00      	cmp	r3, #0
 8020888:	d002      	beq.n	8020890 <f_open+0x1f8>
						res = FR_DENIED;
 802088a:	2307      	movs	r3, #7
 802088c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8020890:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8020894:	2b00      	cmp	r3, #0
 8020896:	d128      	bne.n	80208ea <f_open+0x252>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8020898:	79fb      	ldrb	r3, [r7, #7]
 802089a:	f003 0308 	and.w	r3, r3, #8
 802089e:	2b00      	cmp	r3, #0
 80208a0:	d003      	beq.n	80208aa <f_open+0x212>
				mode |= FA_MODIFIED;
 80208a2:	79fb      	ldrb	r3, [r7, #7]
 80208a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80208a8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80208aa:	693b      	ldr	r3, [r7, #16]
 80208ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80208ae:	68fb      	ldr	r3, [r7, #12]
 80208b0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80208b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80208b4:	68fb      	ldr	r3, [r7, #12]
 80208b6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80208b8:	79fb      	ldrb	r3, [r7, #7]
 80208ba:	f023 0301 	bic.w	r3, r3, #1
 80208be:	2b00      	cmp	r3, #0
 80208c0:	bf14      	ite	ne
 80208c2:	2301      	movne	r3, #1
 80208c4:	2300      	moveq	r3, #0
 80208c6:	b2db      	uxtb	r3, r3
 80208c8:	461a      	mov	r2, r3
 80208ca:	f107 0314 	add.w	r3, r7, #20
 80208ce:	4611      	mov	r1, r2
 80208d0:	4618      	mov	r0, r3
 80208d2:	f7fd feb3 	bl	801e63c <inc_lock>
 80208d6:	4602      	mov	r2, r0
 80208d8:	68fb      	ldr	r3, [r7, #12]
 80208da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80208dc:	68fb      	ldr	r3, [r7, #12]
 80208de:	691b      	ldr	r3, [r3, #16]
 80208e0:	2b00      	cmp	r3, #0
 80208e2:	d102      	bne.n	80208ea <f_open+0x252>
 80208e4:	2302      	movs	r3, #2
 80208e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80208ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80208ee:	2b00      	cmp	r3, #0
 80208f0:	f040 80a3 	bne.w	8020a3a <f_open+0x3a2>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80208f4:	693b      	ldr	r3, [r7, #16]
 80208f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80208f8:	4611      	mov	r1, r2
 80208fa:	4618      	mov	r0, r3
 80208fc:	f7fe fd4f 	bl	801f39e <ld_clust>
 8020900:	4602      	mov	r2, r0
 8020902:	68fb      	ldr	r3, [r7, #12]
 8020904:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8020906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020908:	331c      	adds	r3, #28
 802090a:	4618      	mov	r0, r3
 802090c:	f7fd fd00 	bl	801e310 <ld_dword>
 8020910:	4602      	mov	r2, r0
 8020912:	68fb      	ldr	r3, [r7, #12]
 8020914:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8020916:	68fb      	ldr	r3, [r7, #12]
 8020918:	2200      	movs	r2, #0
 802091a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 802091c:	693a      	ldr	r2, [r7, #16]
 802091e:	68fb      	ldr	r3, [r7, #12]
 8020920:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8020922:	693b      	ldr	r3, [r7, #16]
 8020924:	88da      	ldrh	r2, [r3, #6]
 8020926:	68fb      	ldr	r3, [r7, #12]
 8020928:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 802092a:	68fb      	ldr	r3, [r7, #12]
 802092c:	79fa      	ldrb	r2, [r7, #7]
 802092e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8020930:	68fb      	ldr	r3, [r7, #12]
 8020932:	2200      	movs	r2, #0
 8020934:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8020936:	68fb      	ldr	r3, [r7, #12]
 8020938:	2200      	movs	r2, #0
 802093a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 802093c:	68fb      	ldr	r3, [r7, #12]
 802093e:	2200      	movs	r2, #0
 8020940:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8020942:	68fb      	ldr	r3, [r7, #12]
 8020944:	3330      	adds	r3, #48	; 0x30
 8020946:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802094a:	2100      	movs	r1, #0
 802094c:	4618      	mov	r0, r3
 802094e:	f7fd fd6a 	bl	801e426 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8020952:	79fb      	ldrb	r3, [r7, #7]
 8020954:	f003 0320 	and.w	r3, r3, #32
 8020958:	2b00      	cmp	r3, #0
 802095a:	d06e      	beq.n	8020a3a <f_open+0x3a2>
 802095c:	68fb      	ldr	r3, [r7, #12]
 802095e:	68db      	ldr	r3, [r3, #12]
 8020960:	2b00      	cmp	r3, #0
 8020962:	d06a      	beq.n	8020a3a <f_open+0x3a2>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8020964:	68fb      	ldr	r3, [r7, #12]
 8020966:	68da      	ldr	r2, [r3, #12]
 8020968:	68fb      	ldr	r3, [r7, #12]
 802096a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 802096c:	693b      	ldr	r3, [r7, #16]
 802096e:	895b      	ldrh	r3, [r3, #10]
 8020970:	461a      	mov	r2, r3
 8020972:	693b      	ldr	r3, [r7, #16]
 8020974:	899b      	ldrh	r3, [r3, #12]
 8020976:	fb03 f302 	mul.w	r3, r3, r2
 802097a:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 802097c:	68fb      	ldr	r3, [r7, #12]
 802097e:	689b      	ldr	r3, [r3, #8]
 8020980:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8020982:	68fb      	ldr	r3, [r7, #12]
 8020984:	68db      	ldr	r3, [r3, #12]
 8020986:	65fb      	str	r3, [r7, #92]	; 0x5c
 8020988:	e016      	b.n	80209b8 <f_open+0x320>
					clst = get_fat(&fp->obj, clst);
 802098a:	68fb      	ldr	r3, [r7, #12]
 802098c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 802098e:	4618      	mov	r0, r3
 8020990:	f7fe f843 	bl	801ea1a <get_fat>
 8020994:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8020996:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8020998:	2b01      	cmp	r3, #1
 802099a:	d802      	bhi.n	80209a2 <f_open+0x30a>
 802099c:	2302      	movs	r3, #2
 802099e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80209a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80209a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80209a8:	d102      	bne.n	80209b0 <f_open+0x318>
 80209aa:	2301      	movs	r3, #1
 80209ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80209b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80209b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80209b4:	1ad3      	subs	r3, r2, r3
 80209b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80209b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80209bc:	2b00      	cmp	r3, #0
 80209be:	d103      	bne.n	80209c8 <f_open+0x330>
 80209c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80209c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80209c4:	429a      	cmp	r2, r3
 80209c6:	d8e0      	bhi.n	802098a <f_open+0x2f2>
				}
				fp->clust = clst;
 80209c8:	68fb      	ldr	r3, [r7, #12]
 80209ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80209cc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80209ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80209d2:	2b00      	cmp	r3, #0
 80209d4:	d131      	bne.n	8020a3a <f_open+0x3a2>
 80209d6:	693b      	ldr	r3, [r7, #16]
 80209d8:	899b      	ldrh	r3, [r3, #12]
 80209da:	461a      	mov	r2, r3
 80209dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80209de:	fbb3 f1f2 	udiv	r1, r3, r2
 80209e2:	fb02 f201 	mul.w	r2, r2, r1
 80209e6:	1a9b      	subs	r3, r3, r2
 80209e8:	2b00      	cmp	r3, #0
 80209ea:	d026      	beq.n	8020a3a <f_open+0x3a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80209ec:	693b      	ldr	r3, [r7, #16]
 80209ee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80209f0:	4618      	mov	r0, r3
 80209f2:	f7fd fff3 	bl	801e9dc <clust2sect>
 80209f6:	64b8      	str	r0, [r7, #72]	; 0x48
 80209f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80209fa:	2b00      	cmp	r3, #0
 80209fc:	d103      	bne.n	8020a06 <f_open+0x36e>
						res = FR_INT_ERR;
 80209fe:	2302      	movs	r3, #2
 8020a00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8020a04:	e019      	b.n	8020a3a <f_open+0x3a2>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8020a06:	693b      	ldr	r3, [r7, #16]
 8020a08:	899b      	ldrh	r3, [r3, #12]
 8020a0a:	461a      	mov	r2, r3
 8020a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020a0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8020a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020a14:	441a      	add	r2, r3
 8020a16:	68fb      	ldr	r3, [r7, #12]
 8020a18:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8020a1a:	693b      	ldr	r3, [r7, #16]
 8020a1c:	7858      	ldrb	r0, [r3, #1]
 8020a1e:	68fb      	ldr	r3, [r7, #12]
 8020a20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8020a24:	68fb      	ldr	r3, [r7, #12]
 8020a26:	6a1a      	ldr	r2, [r3, #32]
 8020a28:	2301      	movs	r3, #1
 8020a2a:	f7fd fbfb 	bl	801e224 <disk_read>
 8020a2e:	4603      	mov	r3, r0
 8020a30:	2b00      	cmp	r3, #0
 8020a32:	d002      	beq.n	8020a3a <f_open+0x3a2>
 8020a34:	2301      	movs	r3, #1
 8020a36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8020a3a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8020a3c:	f000 fc05 	bl	802124a <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8020a40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8020a44:	2b00      	cmp	r3, #0
 8020a46:	d002      	beq.n	8020a4e <f_open+0x3b6>
 8020a48:	68fb      	ldr	r3, [r7, #12]
 8020a4a:	2200      	movs	r2, #0
 8020a4c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8020a4e:	693b      	ldr	r3, [r7, #16]
 8020a50:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8020a54:	4611      	mov	r1, r2
 8020a56:	4618      	mov	r0, r3
 8020a58:	f7fd fd57 	bl	801e50a <unlock_fs>
 8020a5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8020a60:	4618      	mov	r0, r3
 8020a62:	3768      	adds	r7, #104	; 0x68
 8020a64:	46bd      	mov	sp, r7
 8020a66:	bd80      	pop	{r7, pc}

08020a68 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8020a68:	b580      	push	{r7, lr}
 8020a6a:	b08c      	sub	sp, #48	; 0x30
 8020a6c:	af00      	add	r7, sp, #0
 8020a6e:	60f8      	str	r0, [r7, #12]
 8020a70:	60b9      	str	r1, [r7, #8]
 8020a72:	607a      	str	r2, [r7, #4]
 8020a74:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8020a76:	68bb      	ldr	r3, [r7, #8]
 8020a78:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8020a7a:	683b      	ldr	r3, [r7, #0]
 8020a7c:	2200      	movs	r2, #0
 8020a7e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8020a80:	68fb      	ldr	r3, [r7, #12]
 8020a82:	f107 0210 	add.w	r2, r7, #16
 8020a86:	4611      	mov	r1, r2
 8020a88:	4618      	mov	r0, r3
 8020a8a:	f7ff fd59 	bl	8020540 <validate>
 8020a8e:	4603      	mov	r3, r0
 8020a90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8020a94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8020a98:	2b00      	cmp	r3, #0
 8020a9a:	d107      	bne.n	8020aac <f_write+0x44>
 8020a9c:	68fb      	ldr	r3, [r7, #12]
 8020a9e:	7d5b      	ldrb	r3, [r3, #21]
 8020aa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8020aa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8020aa8:	2b00      	cmp	r3, #0
 8020aaa:	d009      	beq.n	8020ac0 <f_write+0x58>
 8020aac:	693b      	ldr	r3, [r7, #16]
 8020aae:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8020ab2:	4611      	mov	r1, r2
 8020ab4:	4618      	mov	r0, r3
 8020ab6:	f7fd fd28 	bl	801e50a <unlock_fs>
 8020aba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8020abe:	e192      	b.n	8020de6 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8020ac0:	68fb      	ldr	r3, [r7, #12]
 8020ac2:	7d1b      	ldrb	r3, [r3, #20]
 8020ac4:	f003 0302 	and.w	r3, r3, #2
 8020ac8:	2b00      	cmp	r3, #0
 8020aca:	d106      	bne.n	8020ada <f_write+0x72>
 8020acc:	693b      	ldr	r3, [r7, #16]
 8020ace:	2107      	movs	r1, #7
 8020ad0:	4618      	mov	r0, r3
 8020ad2:	f7fd fd1a 	bl	801e50a <unlock_fs>
 8020ad6:	2307      	movs	r3, #7
 8020ad8:	e185      	b.n	8020de6 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8020ada:	68fb      	ldr	r3, [r7, #12]
 8020adc:	699a      	ldr	r2, [r3, #24]
 8020ade:	687b      	ldr	r3, [r7, #4]
 8020ae0:	441a      	add	r2, r3
 8020ae2:	68fb      	ldr	r3, [r7, #12]
 8020ae4:	699b      	ldr	r3, [r3, #24]
 8020ae6:	429a      	cmp	r2, r3
 8020ae8:	f080 816a 	bcs.w	8020dc0 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8020aec:	68fb      	ldr	r3, [r7, #12]
 8020aee:	699b      	ldr	r3, [r3, #24]
 8020af0:	43db      	mvns	r3, r3
 8020af2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8020af4:	e164      	b.n	8020dc0 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8020af6:	68fb      	ldr	r3, [r7, #12]
 8020af8:	699b      	ldr	r3, [r3, #24]
 8020afa:	693a      	ldr	r2, [r7, #16]
 8020afc:	8992      	ldrh	r2, [r2, #12]
 8020afe:	fbb3 f1f2 	udiv	r1, r3, r2
 8020b02:	fb02 f201 	mul.w	r2, r2, r1
 8020b06:	1a9b      	subs	r3, r3, r2
 8020b08:	2b00      	cmp	r3, #0
 8020b0a:	f040 810f 	bne.w	8020d2c <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8020b0e:	68fb      	ldr	r3, [r7, #12]
 8020b10:	699b      	ldr	r3, [r3, #24]
 8020b12:	693a      	ldr	r2, [r7, #16]
 8020b14:	8992      	ldrh	r2, [r2, #12]
 8020b16:	fbb3 f3f2 	udiv	r3, r3, r2
 8020b1a:	693a      	ldr	r2, [r7, #16]
 8020b1c:	8952      	ldrh	r2, [r2, #10]
 8020b1e:	3a01      	subs	r2, #1
 8020b20:	4013      	ands	r3, r2
 8020b22:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8020b24:	69bb      	ldr	r3, [r7, #24]
 8020b26:	2b00      	cmp	r3, #0
 8020b28:	d14d      	bne.n	8020bc6 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8020b2a:	68fb      	ldr	r3, [r7, #12]
 8020b2c:	699b      	ldr	r3, [r3, #24]
 8020b2e:	2b00      	cmp	r3, #0
 8020b30:	d10c      	bne.n	8020b4c <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8020b32:	68fb      	ldr	r3, [r7, #12]
 8020b34:	689b      	ldr	r3, [r3, #8]
 8020b36:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8020b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b3a:	2b00      	cmp	r3, #0
 8020b3c:	d11a      	bne.n	8020b74 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8020b3e:	68fb      	ldr	r3, [r7, #12]
 8020b40:	2100      	movs	r1, #0
 8020b42:	4618      	mov	r0, r3
 8020b44:	f7fe f9b5 	bl	801eeb2 <create_chain>
 8020b48:	62b8      	str	r0, [r7, #40]	; 0x28
 8020b4a:	e013      	b.n	8020b74 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8020b4c:	68fb      	ldr	r3, [r7, #12]
 8020b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020b50:	2b00      	cmp	r3, #0
 8020b52:	d007      	beq.n	8020b64 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8020b54:	68fb      	ldr	r3, [r7, #12]
 8020b56:	699b      	ldr	r3, [r3, #24]
 8020b58:	4619      	mov	r1, r3
 8020b5a:	68f8      	ldr	r0, [r7, #12]
 8020b5c:	f7fe fa41 	bl	801efe2 <clmt_clust>
 8020b60:	62b8      	str	r0, [r7, #40]	; 0x28
 8020b62:	e007      	b.n	8020b74 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8020b64:	68fa      	ldr	r2, [r7, #12]
 8020b66:	68fb      	ldr	r3, [r7, #12]
 8020b68:	69db      	ldr	r3, [r3, #28]
 8020b6a:	4619      	mov	r1, r3
 8020b6c:	4610      	mov	r0, r2
 8020b6e:	f7fe f9a0 	bl	801eeb2 <create_chain>
 8020b72:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8020b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b76:	2b00      	cmp	r3, #0
 8020b78:	f000 8127 	beq.w	8020dca <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8020b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b7e:	2b01      	cmp	r3, #1
 8020b80:	d109      	bne.n	8020b96 <f_write+0x12e>
 8020b82:	68fb      	ldr	r3, [r7, #12]
 8020b84:	2202      	movs	r2, #2
 8020b86:	755a      	strb	r2, [r3, #21]
 8020b88:	693b      	ldr	r3, [r7, #16]
 8020b8a:	2102      	movs	r1, #2
 8020b8c:	4618      	mov	r0, r3
 8020b8e:	f7fd fcbc 	bl	801e50a <unlock_fs>
 8020b92:	2302      	movs	r3, #2
 8020b94:	e127      	b.n	8020de6 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8020b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020b9c:	d109      	bne.n	8020bb2 <f_write+0x14a>
 8020b9e:	68fb      	ldr	r3, [r7, #12]
 8020ba0:	2201      	movs	r2, #1
 8020ba2:	755a      	strb	r2, [r3, #21]
 8020ba4:	693b      	ldr	r3, [r7, #16]
 8020ba6:	2101      	movs	r1, #1
 8020ba8:	4618      	mov	r0, r3
 8020baa:	f7fd fcae 	bl	801e50a <unlock_fs>
 8020bae:	2301      	movs	r3, #1
 8020bb0:	e119      	b.n	8020de6 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8020bb2:	68fb      	ldr	r3, [r7, #12]
 8020bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020bb6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8020bb8:	68fb      	ldr	r3, [r7, #12]
 8020bba:	689b      	ldr	r3, [r3, #8]
 8020bbc:	2b00      	cmp	r3, #0
 8020bbe:	d102      	bne.n	8020bc6 <f_write+0x15e>
 8020bc0:	68fb      	ldr	r3, [r7, #12]
 8020bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020bc4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8020bc6:	68fb      	ldr	r3, [r7, #12]
 8020bc8:	7d1b      	ldrb	r3, [r3, #20]
 8020bca:	b25b      	sxtb	r3, r3
 8020bcc:	2b00      	cmp	r3, #0
 8020bce:	da1d      	bge.n	8020c0c <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8020bd0:	693b      	ldr	r3, [r7, #16]
 8020bd2:	7858      	ldrb	r0, [r3, #1]
 8020bd4:	68fb      	ldr	r3, [r7, #12]
 8020bd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8020bda:	68fb      	ldr	r3, [r7, #12]
 8020bdc:	6a1a      	ldr	r2, [r3, #32]
 8020bde:	2301      	movs	r3, #1
 8020be0:	f7fd fb40 	bl	801e264 <disk_write>
 8020be4:	4603      	mov	r3, r0
 8020be6:	2b00      	cmp	r3, #0
 8020be8:	d009      	beq.n	8020bfe <f_write+0x196>
 8020bea:	68fb      	ldr	r3, [r7, #12]
 8020bec:	2201      	movs	r2, #1
 8020bee:	755a      	strb	r2, [r3, #21]
 8020bf0:	693b      	ldr	r3, [r7, #16]
 8020bf2:	2101      	movs	r1, #1
 8020bf4:	4618      	mov	r0, r3
 8020bf6:	f7fd fc88 	bl	801e50a <unlock_fs>
 8020bfa:	2301      	movs	r3, #1
 8020bfc:	e0f3      	b.n	8020de6 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8020bfe:	68fb      	ldr	r3, [r7, #12]
 8020c00:	7d1b      	ldrb	r3, [r3, #20]
 8020c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020c06:	b2da      	uxtb	r2, r3
 8020c08:	68fb      	ldr	r3, [r7, #12]
 8020c0a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8020c0c:	693a      	ldr	r2, [r7, #16]
 8020c0e:	68fb      	ldr	r3, [r7, #12]
 8020c10:	69db      	ldr	r3, [r3, #28]
 8020c12:	4619      	mov	r1, r3
 8020c14:	4610      	mov	r0, r2
 8020c16:	f7fd fee1 	bl	801e9dc <clust2sect>
 8020c1a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8020c1c:	697b      	ldr	r3, [r7, #20]
 8020c1e:	2b00      	cmp	r3, #0
 8020c20:	d109      	bne.n	8020c36 <f_write+0x1ce>
 8020c22:	68fb      	ldr	r3, [r7, #12]
 8020c24:	2202      	movs	r2, #2
 8020c26:	755a      	strb	r2, [r3, #21]
 8020c28:	693b      	ldr	r3, [r7, #16]
 8020c2a:	2102      	movs	r1, #2
 8020c2c:	4618      	mov	r0, r3
 8020c2e:	f7fd fc6c 	bl	801e50a <unlock_fs>
 8020c32:	2302      	movs	r3, #2
 8020c34:	e0d7      	b.n	8020de6 <f_write+0x37e>
			sect += csect;
 8020c36:	697a      	ldr	r2, [r7, #20]
 8020c38:	69bb      	ldr	r3, [r7, #24]
 8020c3a:	4413      	add	r3, r2
 8020c3c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8020c3e:	693b      	ldr	r3, [r7, #16]
 8020c40:	899b      	ldrh	r3, [r3, #12]
 8020c42:	461a      	mov	r2, r3
 8020c44:	687b      	ldr	r3, [r7, #4]
 8020c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8020c4a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8020c4c:	6a3b      	ldr	r3, [r7, #32]
 8020c4e:	2b00      	cmp	r3, #0
 8020c50:	d048      	beq.n	8020ce4 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8020c52:	69ba      	ldr	r2, [r7, #24]
 8020c54:	6a3b      	ldr	r3, [r7, #32]
 8020c56:	4413      	add	r3, r2
 8020c58:	693a      	ldr	r2, [r7, #16]
 8020c5a:	8952      	ldrh	r2, [r2, #10]
 8020c5c:	4293      	cmp	r3, r2
 8020c5e:	d905      	bls.n	8020c6c <f_write+0x204>
					cc = fs->csize - csect;
 8020c60:	693b      	ldr	r3, [r7, #16]
 8020c62:	895b      	ldrh	r3, [r3, #10]
 8020c64:	461a      	mov	r2, r3
 8020c66:	69bb      	ldr	r3, [r7, #24]
 8020c68:	1ad3      	subs	r3, r2, r3
 8020c6a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8020c6c:	693b      	ldr	r3, [r7, #16]
 8020c6e:	7858      	ldrb	r0, [r3, #1]
 8020c70:	6a3b      	ldr	r3, [r7, #32]
 8020c72:	697a      	ldr	r2, [r7, #20]
 8020c74:	69f9      	ldr	r1, [r7, #28]
 8020c76:	f7fd faf5 	bl	801e264 <disk_write>
 8020c7a:	4603      	mov	r3, r0
 8020c7c:	2b00      	cmp	r3, #0
 8020c7e:	d009      	beq.n	8020c94 <f_write+0x22c>
 8020c80:	68fb      	ldr	r3, [r7, #12]
 8020c82:	2201      	movs	r2, #1
 8020c84:	755a      	strb	r2, [r3, #21]
 8020c86:	693b      	ldr	r3, [r7, #16]
 8020c88:	2101      	movs	r1, #1
 8020c8a:	4618      	mov	r0, r3
 8020c8c:	f7fd fc3d 	bl	801e50a <unlock_fs>
 8020c90:	2301      	movs	r3, #1
 8020c92:	e0a8      	b.n	8020de6 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8020c94:	68fb      	ldr	r3, [r7, #12]
 8020c96:	6a1a      	ldr	r2, [r3, #32]
 8020c98:	697b      	ldr	r3, [r7, #20]
 8020c9a:	1ad3      	subs	r3, r2, r3
 8020c9c:	6a3a      	ldr	r2, [r7, #32]
 8020c9e:	429a      	cmp	r2, r3
 8020ca0:	d918      	bls.n	8020cd4 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8020ca2:	68fb      	ldr	r3, [r7, #12]
 8020ca4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8020ca8:	68fb      	ldr	r3, [r7, #12]
 8020caa:	6a1a      	ldr	r2, [r3, #32]
 8020cac:	697b      	ldr	r3, [r7, #20]
 8020cae:	1ad3      	subs	r3, r2, r3
 8020cb0:	693a      	ldr	r2, [r7, #16]
 8020cb2:	8992      	ldrh	r2, [r2, #12]
 8020cb4:	fb02 f303 	mul.w	r3, r2, r3
 8020cb8:	69fa      	ldr	r2, [r7, #28]
 8020cba:	18d1      	adds	r1, r2, r3
 8020cbc:	693b      	ldr	r3, [r7, #16]
 8020cbe:	899b      	ldrh	r3, [r3, #12]
 8020cc0:	461a      	mov	r2, r3
 8020cc2:	f7fd fb8f 	bl	801e3e4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8020cc6:	68fb      	ldr	r3, [r7, #12]
 8020cc8:	7d1b      	ldrb	r3, [r3, #20]
 8020cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020cce:	b2da      	uxtb	r2, r3
 8020cd0:	68fb      	ldr	r3, [r7, #12]
 8020cd2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8020cd4:	693b      	ldr	r3, [r7, #16]
 8020cd6:	899b      	ldrh	r3, [r3, #12]
 8020cd8:	461a      	mov	r2, r3
 8020cda:	6a3b      	ldr	r3, [r7, #32]
 8020cdc:	fb02 f303 	mul.w	r3, r2, r3
 8020ce0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8020ce2:	e050      	b.n	8020d86 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8020ce4:	68fb      	ldr	r3, [r7, #12]
 8020ce6:	6a1b      	ldr	r3, [r3, #32]
 8020ce8:	697a      	ldr	r2, [r7, #20]
 8020cea:	429a      	cmp	r2, r3
 8020cec:	d01b      	beq.n	8020d26 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8020cee:	68fb      	ldr	r3, [r7, #12]
 8020cf0:	699a      	ldr	r2, [r3, #24]
 8020cf2:	68fb      	ldr	r3, [r7, #12]
 8020cf4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8020cf6:	429a      	cmp	r2, r3
 8020cf8:	d215      	bcs.n	8020d26 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8020cfa:	693b      	ldr	r3, [r7, #16]
 8020cfc:	7858      	ldrb	r0, [r3, #1]
 8020cfe:	68fb      	ldr	r3, [r7, #12]
 8020d00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8020d04:	2301      	movs	r3, #1
 8020d06:	697a      	ldr	r2, [r7, #20]
 8020d08:	f7fd fa8c 	bl	801e224 <disk_read>
 8020d0c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8020d0e:	2b00      	cmp	r3, #0
 8020d10:	d009      	beq.n	8020d26 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8020d12:	68fb      	ldr	r3, [r7, #12]
 8020d14:	2201      	movs	r2, #1
 8020d16:	755a      	strb	r2, [r3, #21]
 8020d18:	693b      	ldr	r3, [r7, #16]
 8020d1a:	2101      	movs	r1, #1
 8020d1c:	4618      	mov	r0, r3
 8020d1e:	f7fd fbf4 	bl	801e50a <unlock_fs>
 8020d22:	2301      	movs	r3, #1
 8020d24:	e05f      	b.n	8020de6 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8020d26:	68fb      	ldr	r3, [r7, #12]
 8020d28:	697a      	ldr	r2, [r7, #20]
 8020d2a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8020d2c:	693b      	ldr	r3, [r7, #16]
 8020d2e:	899b      	ldrh	r3, [r3, #12]
 8020d30:	4618      	mov	r0, r3
 8020d32:	68fb      	ldr	r3, [r7, #12]
 8020d34:	699b      	ldr	r3, [r3, #24]
 8020d36:	693a      	ldr	r2, [r7, #16]
 8020d38:	8992      	ldrh	r2, [r2, #12]
 8020d3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8020d3e:	fb02 f201 	mul.w	r2, r2, r1
 8020d42:	1a9b      	subs	r3, r3, r2
 8020d44:	1ac3      	subs	r3, r0, r3
 8020d46:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8020d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020d4a:	687b      	ldr	r3, [r7, #4]
 8020d4c:	429a      	cmp	r2, r3
 8020d4e:	d901      	bls.n	8020d54 <f_write+0x2ec>
 8020d50:	687b      	ldr	r3, [r7, #4]
 8020d52:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8020d54:	68fb      	ldr	r3, [r7, #12]
 8020d56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8020d5a:	68fb      	ldr	r3, [r7, #12]
 8020d5c:	699b      	ldr	r3, [r3, #24]
 8020d5e:	693a      	ldr	r2, [r7, #16]
 8020d60:	8992      	ldrh	r2, [r2, #12]
 8020d62:	fbb3 f0f2 	udiv	r0, r3, r2
 8020d66:	fb02 f200 	mul.w	r2, r2, r0
 8020d6a:	1a9b      	subs	r3, r3, r2
 8020d6c:	440b      	add	r3, r1
 8020d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020d70:	69f9      	ldr	r1, [r7, #28]
 8020d72:	4618      	mov	r0, r3
 8020d74:	f7fd fb36 	bl	801e3e4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8020d78:	68fb      	ldr	r3, [r7, #12]
 8020d7a:	7d1b      	ldrb	r3, [r3, #20]
 8020d7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8020d80:	b2da      	uxtb	r2, r3
 8020d82:	68fb      	ldr	r3, [r7, #12]
 8020d84:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8020d86:	69fa      	ldr	r2, [r7, #28]
 8020d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d8a:	4413      	add	r3, r2
 8020d8c:	61fb      	str	r3, [r7, #28]
 8020d8e:	68fb      	ldr	r3, [r7, #12]
 8020d90:	699a      	ldr	r2, [r3, #24]
 8020d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d94:	441a      	add	r2, r3
 8020d96:	68fb      	ldr	r3, [r7, #12]
 8020d98:	619a      	str	r2, [r3, #24]
 8020d9a:	68fb      	ldr	r3, [r7, #12]
 8020d9c:	68da      	ldr	r2, [r3, #12]
 8020d9e:	68fb      	ldr	r3, [r7, #12]
 8020da0:	699b      	ldr	r3, [r3, #24]
 8020da2:	429a      	cmp	r2, r3
 8020da4:	bf38      	it	cc
 8020da6:	461a      	movcc	r2, r3
 8020da8:	68fb      	ldr	r3, [r7, #12]
 8020daa:	60da      	str	r2, [r3, #12]
 8020dac:	683b      	ldr	r3, [r7, #0]
 8020dae:	681a      	ldr	r2, [r3, #0]
 8020db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020db2:	441a      	add	r2, r3
 8020db4:	683b      	ldr	r3, [r7, #0]
 8020db6:	601a      	str	r2, [r3, #0]
 8020db8:	687a      	ldr	r2, [r7, #4]
 8020dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020dbc:	1ad3      	subs	r3, r2, r3
 8020dbe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8020dc0:	687b      	ldr	r3, [r7, #4]
 8020dc2:	2b00      	cmp	r3, #0
 8020dc4:	f47f ae97 	bne.w	8020af6 <f_write+0x8e>
 8020dc8:	e000      	b.n	8020dcc <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8020dca:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8020dcc:	68fb      	ldr	r3, [r7, #12]
 8020dce:	7d1b      	ldrb	r3, [r3, #20]
 8020dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020dd4:	b2da      	uxtb	r2, r3
 8020dd6:	68fb      	ldr	r3, [r7, #12]
 8020dd8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8020dda:	693b      	ldr	r3, [r7, #16]
 8020ddc:	2100      	movs	r1, #0
 8020dde:	4618      	mov	r0, r3
 8020de0:	f7fd fb93 	bl	801e50a <unlock_fs>
 8020de4:	2300      	movs	r3, #0
}
 8020de6:	4618      	mov	r0, r3
 8020de8:	3730      	adds	r7, #48	; 0x30
 8020dea:	46bd      	mov	sp, r7
 8020dec:	bd80      	pop	{r7, pc}

08020dee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8020dee:	b580      	push	{r7, lr}
 8020df0:	b086      	sub	sp, #24
 8020df2:	af00      	add	r7, sp, #0
 8020df4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8020df6:	687b      	ldr	r3, [r7, #4]
 8020df8:	f107 0208 	add.w	r2, r7, #8
 8020dfc:	4611      	mov	r1, r2
 8020dfe:	4618      	mov	r0, r3
 8020e00:	f7ff fb9e 	bl	8020540 <validate>
 8020e04:	4603      	mov	r3, r0
 8020e06:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8020e08:	7dfb      	ldrb	r3, [r7, #23]
 8020e0a:	2b00      	cmp	r3, #0
 8020e0c:	d16d      	bne.n	8020eea <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8020e0e:	687b      	ldr	r3, [r7, #4]
 8020e10:	7d1b      	ldrb	r3, [r3, #20]
 8020e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020e16:	2b00      	cmp	r3, #0
 8020e18:	d067      	beq.n	8020eea <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8020e1a:	687b      	ldr	r3, [r7, #4]
 8020e1c:	7d1b      	ldrb	r3, [r3, #20]
 8020e1e:	b25b      	sxtb	r3, r3
 8020e20:	2b00      	cmp	r3, #0
 8020e22:	da1a      	bge.n	8020e5a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8020e24:	68bb      	ldr	r3, [r7, #8]
 8020e26:	7858      	ldrb	r0, [r3, #1]
 8020e28:	687b      	ldr	r3, [r7, #4]
 8020e2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8020e2e:	687b      	ldr	r3, [r7, #4]
 8020e30:	6a1a      	ldr	r2, [r3, #32]
 8020e32:	2301      	movs	r3, #1
 8020e34:	f7fd fa16 	bl	801e264 <disk_write>
 8020e38:	4603      	mov	r3, r0
 8020e3a:	2b00      	cmp	r3, #0
 8020e3c:	d006      	beq.n	8020e4c <f_sync+0x5e>
 8020e3e:	68bb      	ldr	r3, [r7, #8]
 8020e40:	2101      	movs	r1, #1
 8020e42:	4618      	mov	r0, r3
 8020e44:	f7fd fb61 	bl	801e50a <unlock_fs>
 8020e48:	2301      	movs	r3, #1
 8020e4a:	e055      	b.n	8020ef8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8020e4c:	687b      	ldr	r3, [r7, #4]
 8020e4e:	7d1b      	ldrb	r3, [r3, #20]
 8020e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020e54:	b2da      	uxtb	r2, r3
 8020e56:	687b      	ldr	r3, [r7, #4]
 8020e58:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8020e5a:	f7fc ff57 	bl	801dd0c <get_fattime>
 8020e5e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8020e60:	68ba      	ldr	r2, [r7, #8]
 8020e62:	687b      	ldr	r3, [r7, #4]
 8020e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020e66:	4619      	mov	r1, r3
 8020e68:	4610      	mov	r0, r2
 8020e6a:	f7fd fd19 	bl	801e8a0 <move_window>
 8020e6e:	4603      	mov	r3, r0
 8020e70:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8020e72:	7dfb      	ldrb	r3, [r7, #23]
 8020e74:	2b00      	cmp	r3, #0
 8020e76:	d138      	bne.n	8020eea <f_sync+0xfc>
					dir = fp->dir_ptr;
 8020e78:	687b      	ldr	r3, [r7, #4]
 8020e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020e7c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8020e7e:	68fb      	ldr	r3, [r7, #12]
 8020e80:	330b      	adds	r3, #11
 8020e82:	781a      	ldrb	r2, [r3, #0]
 8020e84:	68fb      	ldr	r3, [r7, #12]
 8020e86:	330b      	adds	r3, #11
 8020e88:	f042 0220 	orr.w	r2, r2, #32
 8020e8c:	b2d2      	uxtb	r2, r2
 8020e8e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8020e90:	687b      	ldr	r3, [r7, #4]
 8020e92:	6818      	ldr	r0, [r3, #0]
 8020e94:	687b      	ldr	r3, [r7, #4]
 8020e96:	689b      	ldr	r3, [r3, #8]
 8020e98:	461a      	mov	r2, r3
 8020e9a:	68f9      	ldr	r1, [r7, #12]
 8020e9c:	f7fe fa9e 	bl	801f3dc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8020ea0:	68fb      	ldr	r3, [r7, #12]
 8020ea2:	f103 021c 	add.w	r2, r3, #28
 8020ea6:	687b      	ldr	r3, [r7, #4]
 8020ea8:	68db      	ldr	r3, [r3, #12]
 8020eaa:	4619      	mov	r1, r3
 8020eac:	4610      	mov	r0, r2
 8020eae:	f7fd fa6d 	bl	801e38c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8020eb2:	68fb      	ldr	r3, [r7, #12]
 8020eb4:	3316      	adds	r3, #22
 8020eb6:	6939      	ldr	r1, [r7, #16]
 8020eb8:	4618      	mov	r0, r3
 8020eba:	f7fd fa67 	bl	801e38c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8020ebe:	68fb      	ldr	r3, [r7, #12]
 8020ec0:	3312      	adds	r3, #18
 8020ec2:	2100      	movs	r1, #0
 8020ec4:	4618      	mov	r0, r3
 8020ec6:	f7fd fa46 	bl	801e356 <st_word>
					fs->wflag = 1;
 8020eca:	68bb      	ldr	r3, [r7, #8]
 8020ecc:	2201      	movs	r2, #1
 8020ece:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8020ed0:	68bb      	ldr	r3, [r7, #8]
 8020ed2:	4618      	mov	r0, r3
 8020ed4:	f7fd fd12 	bl	801e8fc <sync_fs>
 8020ed8:	4603      	mov	r3, r0
 8020eda:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8020edc:	687b      	ldr	r3, [r7, #4]
 8020ede:	7d1b      	ldrb	r3, [r3, #20]
 8020ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8020ee4:	b2da      	uxtb	r2, r3
 8020ee6:	687b      	ldr	r3, [r7, #4]
 8020ee8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8020eea:	68bb      	ldr	r3, [r7, #8]
 8020eec:	7dfa      	ldrb	r2, [r7, #23]
 8020eee:	4611      	mov	r1, r2
 8020ef0:	4618      	mov	r0, r3
 8020ef2:	f7fd fb0a 	bl	801e50a <unlock_fs>
 8020ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8020ef8:	4618      	mov	r0, r3
 8020efa:	3718      	adds	r7, #24
 8020efc:	46bd      	mov	sp, r7
 8020efe:	bd80      	pop	{r7, pc}

08020f00 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8020f00:	b580      	push	{r7, lr}
 8020f02:	b084      	sub	sp, #16
 8020f04:	af00      	add	r7, sp, #0
 8020f06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8020f08:	6878      	ldr	r0, [r7, #4]
 8020f0a:	f7ff ff70 	bl	8020dee <f_sync>
 8020f0e:	4603      	mov	r3, r0
 8020f10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8020f12:	7bfb      	ldrb	r3, [r7, #15]
 8020f14:	2b00      	cmp	r3, #0
 8020f16:	d11d      	bne.n	8020f54 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8020f18:	687b      	ldr	r3, [r7, #4]
 8020f1a:	f107 0208 	add.w	r2, r7, #8
 8020f1e:	4611      	mov	r1, r2
 8020f20:	4618      	mov	r0, r3
 8020f22:	f7ff fb0d 	bl	8020540 <validate>
 8020f26:	4603      	mov	r3, r0
 8020f28:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8020f2a:	7bfb      	ldrb	r3, [r7, #15]
 8020f2c:	2b00      	cmp	r3, #0
 8020f2e:	d111      	bne.n	8020f54 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8020f30:	687b      	ldr	r3, [r7, #4]
 8020f32:	691b      	ldr	r3, [r3, #16]
 8020f34:	4618      	mov	r0, r3
 8020f36:	f7fd fc0f 	bl	801e758 <dec_lock>
 8020f3a:	4603      	mov	r3, r0
 8020f3c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8020f3e:	7bfb      	ldrb	r3, [r7, #15]
 8020f40:	2b00      	cmp	r3, #0
 8020f42:	d102      	bne.n	8020f4a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8020f44:	687b      	ldr	r3, [r7, #4]
 8020f46:	2200      	movs	r2, #0
 8020f48:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8020f4a:	68bb      	ldr	r3, [r7, #8]
 8020f4c:	2100      	movs	r1, #0
 8020f4e:	4618      	mov	r0, r3
 8020f50:	f7fd fadb 	bl	801e50a <unlock_fs>
#endif
		}
	}
	return res;
 8020f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8020f56:	4618      	mov	r0, r3
 8020f58:	3710      	adds	r7, #16
 8020f5a:	46bd      	mov	sp, r7
 8020f5c:	bd80      	pop	{r7, pc}
	...

08020f60 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8020f60:	b480      	push	{r7}
 8020f62:	b087      	sub	sp, #28
 8020f64:	af00      	add	r7, sp, #0
 8020f66:	60f8      	str	r0, [r7, #12]
 8020f68:	60b9      	str	r1, [r7, #8]
 8020f6a:	4613      	mov	r3, r2
 8020f6c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8020f6e:	2301      	movs	r3, #1
 8020f70:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8020f72:	2300      	movs	r3, #0
 8020f74:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8020f76:	4b1f      	ldr	r3, [pc, #124]	; (8020ff4 <FATFS_LinkDriverEx+0x94>)
 8020f78:	7a5b      	ldrb	r3, [r3, #9]
 8020f7a:	b2db      	uxtb	r3, r3
 8020f7c:	2b00      	cmp	r3, #0
 8020f7e:	d131      	bne.n	8020fe4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8020f80:	4b1c      	ldr	r3, [pc, #112]	; (8020ff4 <FATFS_LinkDriverEx+0x94>)
 8020f82:	7a5b      	ldrb	r3, [r3, #9]
 8020f84:	b2db      	uxtb	r3, r3
 8020f86:	461a      	mov	r2, r3
 8020f88:	4b1a      	ldr	r3, [pc, #104]	; (8020ff4 <FATFS_LinkDriverEx+0x94>)
 8020f8a:	2100      	movs	r1, #0
 8020f8c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8020f8e:	4b19      	ldr	r3, [pc, #100]	; (8020ff4 <FATFS_LinkDriverEx+0x94>)
 8020f90:	7a5b      	ldrb	r3, [r3, #9]
 8020f92:	b2db      	uxtb	r3, r3
 8020f94:	4a17      	ldr	r2, [pc, #92]	; (8020ff4 <FATFS_LinkDriverEx+0x94>)
 8020f96:	009b      	lsls	r3, r3, #2
 8020f98:	4413      	add	r3, r2
 8020f9a:	68fa      	ldr	r2, [r7, #12]
 8020f9c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8020f9e:	4b15      	ldr	r3, [pc, #84]	; (8020ff4 <FATFS_LinkDriverEx+0x94>)
 8020fa0:	7a5b      	ldrb	r3, [r3, #9]
 8020fa2:	b2db      	uxtb	r3, r3
 8020fa4:	461a      	mov	r2, r3
 8020fa6:	4b13      	ldr	r3, [pc, #76]	; (8020ff4 <FATFS_LinkDriverEx+0x94>)
 8020fa8:	4413      	add	r3, r2
 8020faa:	79fa      	ldrb	r2, [r7, #7]
 8020fac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8020fae:	4b11      	ldr	r3, [pc, #68]	; (8020ff4 <FATFS_LinkDriverEx+0x94>)
 8020fb0:	7a5b      	ldrb	r3, [r3, #9]
 8020fb2:	b2db      	uxtb	r3, r3
 8020fb4:	1c5a      	adds	r2, r3, #1
 8020fb6:	b2d1      	uxtb	r1, r2
 8020fb8:	4a0e      	ldr	r2, [pc, #56]	; (8020ff4 <FATFS_LinkDriverEx+0x94>)
 8020fba:	7251      	strb	r1, [r2, #9]
 8020fbc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8020fbe:	7dbb      	ldrb	r3, [r7, #22]
 8020fc0:	3330      	adds	r3, #48	; 0x30
 8020fc2:	b2da      	uxtb	r2, r3
 8020fc4:	68bb      	ldr	r3, [r7, #8]
 8020fc6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8020fc8:	68bb      	ldr	r3, [r7, #8]
 8020fca:	3301      	adds	r3, #1
 8020fcc:	223a      	movs	r2, #58	; 0x3a
 8020fce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8020fd0:	68bb      	ldr	r3, [r7, #8]
 8020fd2:	3302      	adds	r3, #2
 8020fd4:	222f      	movs	r2, #47	; 0x2f
 8020fd6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8020fd8:	68bb      	ldr	r3, [r7, #8]
 8020fda:	3303      	adds	r3, #3
 8020fdc:	2200      	movs	r2, #0
 8020fde:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8020fe0:	2300      	movs	r3, #0
 8020fe2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8020fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8020fe6:	4618      	mov	r0, r3
 8020fe8:	371c      	adds	r7, #28
 8020fea:	46bd      	mov	sp, r7
 8020fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ff0:	4770      	bx	lr
 8020ff2:	bf00      	nop
 8020ff4:	20001588 	.word	0x20001588

08020ff8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8020ff8:	b580      	push	{r7, lr}
 8020ffa:	b082      	sub	sp, #8
 8020ffc:	af00      	add	r7, sp, #0
 8020ffe:	6078      	str	r0, [r7, #4]
 8021000:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8021002:	2200      	movs	r2, #0
 8021004:	6839      	ldr	r1, [r7, #0]
 8021006:	6878      	ldr	r0, [r7, #4]
 8021008:	f7ff ffaa 	bl	8020f60 <FATFS_LinkDriverEx>
 802100c:	4603      	mov	r3, r0
}
 802100e:	4618      	mov	r0, r3
 8021010:	3708      	adds	r7, #8
 8021012:	46bd      	mov	sp, r7
 8021014:	bd80      	pop	{r7, pc}
	...

08021018 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8021018:	b480      	push	{r7}
 802101a:	b085      	sub	sp, #20
 802101c:	af00      	add	r7, sp, #0
 802101e:	4603      	mov	r3, r0
 8021020:	6039      	str	r1, [r7, #0]
 8021022:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8021024:	88fb      	ldrh	r3, [r7, #6]
 8021026:	2b7f      	cmp	r3, #127	; 0x7f
 8021028:	d802      	bhi.n	8021030 <ff_convert+0x18>
		c = chr;
 802102a:	88fb      	ldrh	r3, [r7, #6]
 802102c:	81fb      	strh	r3, [r7, #14]
 802102e:	e025      	b.n	802107c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8021030:	683b      	ldr	r3, [r7, #0]
 8021032:	2b00      	cmp	r3, #0
 8021034:	d00b      	beq.n	802104e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8021036:	88fb      	ldrh	r3, [r7, #6]
 8021038:	2bff      	cmp	r3, #255	; 0xff
 802103a:	d805      	bhi.n	8021048 <ff_convert+0x30>
 802103c:	88fb      	ldrh	r3, [r7, #6]
 802103e:	3b80      	subs	r3, #128	; 0x80
 8021040:	4a12      	ldr	r2, [pc, #72]	; (802108c <ff_convert+0x74>)
 8021042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021046:	e000      	b.n	802104a <ff_convert+0x32>
 8021048:	2300      	movs	r3, #0
 802104a:	81fb      	strh	r3, [r7, #14]
 802104c:	e016      	b.n	802107c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 802104e:	2300      	movs	r3, #0
 8021050:	81fb      	strh	r3, [r7, #14]
 8021052:	e009      	b.n	8021068 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8021054:	89fb      	ldrh	r3, [r7, #14]
 8021056:	4a0d      	ldr	r2, [pc, #52]	; (802108c <ff_convert+0x74>)
 8021058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802105c:	88fa      	ldrh	r2, [r7, #6]
 802105e:	429a      	cmp	r2, r3
 8021060:	d006      	beq.n	8021070 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8021062:	89fb      	ldrh	r3, [r7, #14]
 8021064:	3301      	adds	r3, #1
 8021066:	81fb      	strh	r3, [r7, #14]
 8021068:	89fb      	ldrh	r3, [r7, #14]
 802106a:	2b7f      	cmp	r3, #127	; 0x7f
 802106c:	d9f2      	bls.n	8021054 <ff_convert+0x3c>
 802106e:	e000      	b.n	8021072 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8021070:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8021072:	89fb      	ldrh	r3, [r7, #14]
 8021074:	3380      	adds	r3, #128	; 0x80
 8021076:	b29b      	uxth	r3, r3
 8021078:	b2db      	uxtb	r3, r3
 802107a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 802107c:	89fb      	ldrh	r3, [r7, #14]
}
 802107e:	4618      	mov	r0, r3
 8021080:	3714      	adds	r7, #20
 8021082:	46bd      	mov	sp, r7
 8021084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021088:	4770      	bx	lr
 802108a:	bf00      	nop
 802108c:	0802e400 	.word	0x0802e400

08021090 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8021090:	b480      	push	{r7}
 8021092:	b087      	sub	sp, #28
 8021094:	af00      	add	r7, sp, #0
 8021096:	4603      	mov	r3, r0
 8021098:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 802109a:	88fb      	ldrh	r3, [r7, #6]
 802109c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80210a0:	d201      	bcs.n	80210a6 <ff_wtoupper+0x16>
 80210a2:	4b3e      	ldr	r3, [pc, #248]	; (802119c <ff_wtoupper+0x10c>)
 80210a4:	e000      	b.n	80210a8 <ff_wtoupper+0x18>
 80210a6:	4b3e      	ldr	r3, [pc, #248]	; (80211a0 <ff_wtoupper+0x110>)
 80210a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80210aa:	697b      	ldr	r3, [r7, #20]
 80210ac:	1c9a      	adds	r2, r3, #2
 80210ae:	617a      	str	r2, [r7, #20]
 80210b0:	881b      	ldrh	r3, [r3, #0]
 80210b2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80210b4:	8a7b      	ldrh	r3, [r7, #18]
 80210b6:	2b00      	cmp	r3, #0
 80210b8:	d068      	beq.n	802118c <ff_wtoupper+0xfc>
 80210ba:	88fa      	ldrh	r2, [r7, #6]
 80210bc:	8a7b      	ldrh	r3, [r7, #18]
 80210be:	429a      	cmp	r2, r3
 80210c0:	d364      	bcc.n	802118c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80210c2:	697b      	ldr	r3, [r7, #20]
 80210c4:	1c9a      	adds	r2, r3, #2
 80210c6:	617a      	str	r2, [r7, #20]
 80210c8:	881b      	ldrh	r3, [r3, #0]
 80210ca:	823b      	strh	r3, [r7, #16]
 80210cc:	8a3b      	ldrh	r3, [r7, #16]
 80210ce:	0a1b      	lsrs	r3, r3, #8
 80210d0:	81fb      	strh	r3, [r7, #14]
 80210d2:	8a3b      	ldrh	r3, [r7, #16]
 80210d4:	b2db      	uxtb	r3, r3
 80210d6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80210d8:	88fa      	ldrh	r2, [r7, #6]
 80210da:	8a79      	ldrh	r1, [r7, #18]
 80210dc:	8a3b      	ldrh	r3, [r7, #16]
 80210de:	440b      	add	r3, r1
 80210e0:	429a      	cmp	r2, r3
 80210e2:	da49      	bge.n	8021178 <ff_wtoupper+0xe8>
			switch (cmd) {
 80210e4:	89fb      	ldrh	r3, [r7, #14]
 80210e6:	2b08      	cmp	r3, #8
 80210e8:	d84f      	bhi.n	802118a <ff_wtoupper+0xfa>
 80210ea:	a201      	add	r2, pc, #4	; (adr r2, 80210f0 <ff_wtoupper+0x60>)
 80210ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80210f0:	08021115 	.word	0x08021115
 80210f4:	08021127 	.word	0x08021127
 80210f8:	0802113d 	.word	0x0802113d
 80210fc:	08021145 	.word	0x08021145
 8021100:	0802114d 	.word	0x0802114d
 8021104:	08021155 	.word	0x08021155
 8021108:	0802115d 	.word	0x0802115d
 802110c:	08021165 	.word	0x08021165
 8021110:	0802116d 	.word	0x0802116d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8021114:	88fa      	ldrh	r2, [r7, #6]
 8021116:	8a7b      	ldrh	r3, [r7, #18]
 8021118:	1ad3      	subs	r3, r2, r3
 802111a:	005b      	lsls	r3, r3, #1
 802111c:	697a      	ldr	r2, [r7, #20]
 802111e:	4413      	add	r3, r2
 8021120:	881b      	ldrh	r3, [r3, #0]
 8021122:	80fb      	strh	r3, [r7, #6]
 8021124:	e027      	b.n	8021176 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8021126:	88fa      	ldrh	r2, [r7, #6]
 8021128:	8a7b      	ldrh	r3, [r7, #18]
 802112a:	1ad3      	subs	r3, r2, r3
 802112c:	b29b      	uxth	r3, r3
 802112e:	f003 0301 	and.w	r3, r3, #1
 8021132:	b29b      	uxth	r3, r3
 8021134:	88fa      	ldrh	r2, [r7, #6]
 8021136:	1ad3      	subs	r3, r2, r3
 8021138:	80fb      	strh	r3, [r7, #6]
 802113a:	e01c      	b.n	8021176 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 802113c:	88fb      	ldrh	r3, [r7, #6]
 802113e:	3b10      	subs	r3, #16
 8021140:	80fb      	strh	r3, [r7, #6]
 8021142:	e018      	b.n	8021176 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8021144:	88fb      	ldrh	r3, [r7, #6]
 8021146:	3b20      	subs	r3, #32
 8021148:	80fb      	strh	r3, [r7, #6]
 802114a:	e014      	b.n	8021176 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 802114c:	88fb      	ldrh	r3, [r7, #6]
 802114e:	3b30      	subs	r3, #48	; 0x30
 8021150:	80fb      	strh	r3, [r7, #6]
 8021152:	e010      	b.n	8021176 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8021154:	88fb      	ldrh	r3, [r7, #6]
 8021156:	3b1a      	subs	r3, #26
 8021158:	80fb      	strh	r3, [r7, #6]
 802115a:	e00c      	b.n	8021176 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 802115c:	88fb      	ldrh	r3, [r7, #6]
 802115e:	3308      	adds	r3, #8
 8021160:	80fb      	strh	r3, [r7, #6]
 8021162:	e008      	b.n	8021176 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8021164:	88fb      	ldrh	r3, [r7, #6]
 8021166:	3b50      	subs	r3, #80	; 0x50
 8021168:	80fb      	strh	r3, [r7, #6]
 802116a:	e004      	b.n	8021176 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 802116c:	88fb      	ldrh	r3, [r7, #6]
 802116e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8021172:	80fb      	strh	r3, [r7, #6]
 8021174:	bf00      	nop
			}
			break;
 8021176:	e008      	b.n	802118a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8021178:	89fb      	ldrh	r3, [r7, #14]
 802117a:	2b00      	cmp	r3, #0
 802117c:	d195      	bne.n	80210aa <ff_wtoupper+0x1a>
 802117e:	8a3b      	ldrh	r3, [r7, #16]
 8021180:	005b      	lsls	r3, r3, #1
 8021182:	697a      	ldr	r2, [r7, #20]
 8021184:	4413      	add	r3, r2
 8021186:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8021188:	e78f      	b.n	80210aa <ff_wtoupper+0x1a>
			break;
 802118a:	bf00      	nop
	}

	return chr;
 802118c:	88fb      	ldrh	r3, [r7, #6]
}
 802118e:	4618      	mov	r0, r3
 8021190:	371c      	adds	r7, #28
 8021192:	46bd      	mov	sp, r7
 8021194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021198:	4770      	bx	lr
 802119a:	bf00      	nop
 802119c:	0802e500 	.word	0x0802e500
 80211a0:	0802e6f4 	.word	0x0802e6f4

080211a4 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80211a4:	b580      	push	{r7, lr}
 80211a6:	b084      	sub	sp, #16
 80211a8:	af00      	add	r7, sp, #0
 80211aa:	4603      	mov	r3, r0
 80211ac:	6039      	str	r1, [r7, #0]
 80211ae:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80211b0:	2200      	movs	r2, #0
 80211b2:	2101      	movs	r1, #1
 80211b4:	2001      	movs	r0, #1
 80211b6:	f000 fbd5 	bl	8021964 <osSemaphoreNew>
 80211ba:	4602      	mov	r2, r0
 80211bc:	683b      	ldr	r3, [r7, #0]
 80211be:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80211c0:	683b      	ldr	r3, [r7, #0]
 80211c2:	681b      	ldr	r3, [r3, #0]
 80211c4:	2b00      	cmp	r3, #0
 80211c6:	bf14      	ite	ne
 80211c8:	2301      	movne	r3, #1
 80211ca:	2300      	moveq	r3, #0
 80211cc:	b2db      	uxtb	r3, r3
 80211ce:	60fb      	str	r3, [r7, #12]

    return ret;
 80211d0:	68fb      	ldr	r3, [r7, #12]
}
 80211d2:	4618      	mov	r0, r3
 80211d4:	3710      	adds	r7, #16
 80211d6:	46bd      	mov	sp, r7
 80211d8:	bd80      	pop	{r7, pc}

080211da <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80211da:	b580      	push	{r7, lr}
 80211dc:	b082      	sub	sp, #8
 80211de:	af00      	add	r7, sp, #0
 80211e0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80211e2:	6878      	ldr	r0, [r7, #4]
 80211e4:	f000 fd1a 	bl	8021c1c <osSemaphoreDelete>
#endif
    return 1;
 80211e8:	2301      	movs	r3, #1
}
 80211ea:	4618      	mov	r0, r3
 80211ec:	3708      	adds	r7, #8
 80211ee:	46bd      	mov	sp, r7
 80211f0:	bd80      	pop	{r7, pc}

080211f2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80211f2:	b580      	push	{r7, lr}
 80211f4:	b084      	sub	sp, #16
 80211f6:	af00      	add	r7, sp, #0
 80211f8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80211fa:	2300      	movs	r3, #0
 80211fc:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80211fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8021202:	6878      	ldr	r0, [r7, #4]
 8021204:	f000 fc4c 	bl	8021aa0 <osSemaphoreAcquire>
 8021208:	4603      	mov	r3, r0
 802120a:	2b00      	cmp	r3, #0
 802120c:	d101      	bne.n	8021212 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 802120e:	2301      	movs	r3, #1
 8021210:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8021212:	68fb      	ldr	r3, [r7, #12]
}
 8021214:	4618      	mov	r0, r3
 8021216:	3710      	adds	r7, #16
 8021218:	46bd      	mov	sp, r7
 802121a:	bd80      	pop	{r7, pc}

0802121c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 802121c:	b580      	push	{r7, lr}
 802121e:	b082      	sub	sp, #8
 8021220:	af00      	add	r7, sp, #0
 8021222:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8021224:	6878      	ldr	r0, [r7, #4]
 8021226:	f000 fca1 	bl	8021b6c <osSemaphoreRelease>
#endif
}
 802122a:	bf00      	nop
 802122c:	3708      	adds	r7, #8
 802122e:	46bd      	mov	sp, r7
 8021230:	bd80      	pop	{r7, pc}

08021232 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8021232:	b580      	push	{r7, lr}
 8021234:	b082      	sub	sp, #8
 8021236:	af00      	add	r7, sp, #0
 8021238:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 802123a:	6878      	ldr	r0, [r7, #4]
 802123c:	f003 fff0 	bl	8025220 <pvPortMalloc>
 8021240:	4603      	mov	r3, r0
}
 8021242:	4618      	mov	r0, r3
 8021244:	3708      	adds	r7, #8
 8021246:	46bd      	mov	sp, r7
 8021248:	bd80      	pop	{r7, pc}

0802124a <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 802124a:	b580      	push	{r7, lr}
 802124c:	b082      	sub	sp, #8
 802124e:	af00      	add	r7, sp, #0
 8021250:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8021252:	6878      	ldr	r0, [r7, #4]
 8021254:	f004 f8a6 	bl	80253a4 <vPortFree>
}
 8021258:	bf00      	nop
 802125a:	3708      	adds	r7, #8
 802125c:	46bd      	mov	sp, r7
 802125e:	bd80      	pop	{r7, pc}

08021260 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8021260:	b480      	push	{r7}
 8021262:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8021264:	bf00      	nop
 8021266:	46bd      	mov	sp, r7
 8021268:	f85d 7b04 	ldr.w	r7, [sp], #4
 802126c:	4770      	bx	lr
	...

08021270 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8021270:	b480      	push	{r7}
 8021272:	b085      	sub	sp, #20
 8021274:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021276:	f3ef 8305 	mrs	r3, IPSR
 802127a:	60bb      	str	r3, [r7, #8]
  return(result);
 802127c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 802127e:	2b00      	cmp	r3, #0
 8021280:	d10f      	bne.n	80212a2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021282:	f3ef 8310 	mrs	r3, PRIMASK
 8021286:	607b      	str	r3, [r7, #4]
  return(result);
 8021288:	687b      	ldr	r3, [r7, #4]
 802128a:	2b00      	cmp	r3, #0
 802128c:	d105      	bne.n	802129a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 802128e:	f3ef 8311 	mrs	r3, BASEPRI
 8021292:	603b      	str	r3, [r7, #0]
  return(result);
 8021294:	683b      	ldr	r3, [r7, #0]
 8021296:	2b00      	cmp	r3, #0
 8021298:	d007      	beq.n	80212aa <osKernelInitialize+0x3a>
 802129a:	4b0e      	ldr	r3, [pc, #56]	; (80212d4 <osKernelInitialize+0x64>)
 802129c:	681b      	ldr	r3, [r3, #0]
 802129e:	2b02      	cmp	r3, #2
 80212a0:	d103      	bne.n	80212aa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80212a2:	f06f 0305 	mvn.w	r3, #5
 80212a6:	60fb      	str	r3, [r7, #12]
 80212a8:	e00c      	b.n	80212c4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80212aa:	4b0a      	ldr	r3, [pc, #40]	; (80212d4 <osKernelInitialize+0x64>)
 80212ac:	681b      	ldr	r3, [r3, #0]
 80212ae:	2b00      	cmp	r3, #0
 80212b0:	d105      	bne.n	80212be <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80212b2:	4b08      	ldr	r3, [pc, #32]	; (80212d4 <osKernelInitialize+0x64>)
 80212b4:	2201      	movs	r2, #1
 80212b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80212b8:	2300      	movs	r3, #0
 80212ba:	60fb      	str	r3, [r7, #12]
 80212bc:	e002      	b.n	80212c4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80212be:	f04f 33ff 	mov.w	r3, #4294967295
 80212c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80212c4:	68fb      	ldr	r3, [r7, #12]
}
 80212c6:	4618      	mov	r0, r3
 80212c8:	3714      	adds	r7, #20
 80212ca:	46bd      	mov	sp, r7
 80212cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212d0:	4770      	bx	lr
 80212d2:	bf00      	nop
 80212d4:	20001594 	.word	0x20001594

080212d8 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 80212d8:	b580      	push	{r7, lr}
 80212da:	b082      	sub	sp, #8
 80212dc:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80212de:	f002 fe57 	bl	8023f90 <xTaskGetSchedulerState>
 80212e2:	4603      	mov	r3, r0
 80212e4:	2b00      	cmp	r3, #0
 80212e6:	d004      	beq.n	80212f2 <osKernelGetState+0x1a>
 80212e8:	2b02      	cmp	r3, #2
 80212ea:	d105      	bne.n	80212f8 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80212ec:	2302      	movs	r3, #2
 80212ee:	607b      	str	r3, [r7, #4]
      break;
 80212f0:	e00c      	b.n	802130c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80212f2:	2303      	movs	r3, #3
 80212f4:	607b      	str	r3, [r7, #4]
      break;
 80212f6:	e009      	b.n	802130c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80212f8:	4b07      	ldr	r3, [pc, #28]	; (8021318 <osKernelGetState+0x40>)
 80212fa:	681b      	ldr	r3, [r3, #0]
 80212fc:	2b01      	cmp	r3, #1
 80212fe:	d102      	bne.n	8021306 <osKernelGetState+0x2e>
        state = osKernelReady;
 8021300:	2301      	movs	r3, #1
 8021302:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8021304:	e001      	b.n	802130a <osKernelGetState+0x32>
        state = osKernelInactive;
 8021306:	2300      	movs	r3, #0
 8021308:	607b      	str	r3, [r7, #4]
      break;
 802130a:	bf00      	nop
  }

  return (state);
 802130c:	687b      	ldr	r3, [r7, #4]
}
 802130e:	4618      	mov	r0, r3
 8021310:	3708      	adds	r7, #8
 8021312:	46bd      	mov	sp, r7
 8021314:	bd80      	pop	{r7, pc}
 8021316:	bf00      	nop
 8021318:	20001594 	.word	0x20001594

0802131c <osKernelStart>:

osStatus_t osKernelStart (void) {
 802131c:	b580      	push	{r7, lr}
 802131e:	b084      	sub	sp, #16
 8021320:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021322:	f3ef 8305 	mrs	r3, IPSR
 8021326:	60bb      	str	r3, [r7, #8]
  return(result);
 8021328:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 802132a:	2b00      	cmp	r3, #0
 802132c:	d10f      	bne.n	802134e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802132e:	f3ef 8310 	mrs	r3, PRIMASK
 8021332:	607b      	str	r3, [r7, #4]
  return(result);
 8021334:	687b      	ldr	r3, [r7, #4]
 8021336:	2b00      	cmp	r3, #0
 8021338:	d105      	bne.n	8021346 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 802133a:	f3ef 8311 	mrs	r3, BASEPRI
 802133e:	603b      	str	r3, [r7, #0]
  return(result);
 8021340:	683b      	ldr	r3, [r7, #0]
 8021342:	2b00      	cmp	r3, #0
 8021344:	d007      	beq.n	8021356 <osKernelStart+0x3a>
 8021346:	4b0f      	ldr	r3, [pc, #60]	; (8021384 <osKernelStart+0x68>)
 8021348:	681b      	ldr	r3, [r3, #0]
 802134a:	2b02      	cmp	r3, #2
 802134c:	d103      	bne.n	8021356 <osKernelStart+0x3a>
    stat = osErrorISR;
 802134e:	f06f 0305 	mvn.w	r3, #5
 8021352:	60fb      	str	r3, [r7, #12]
 8021354:	e010      	b.n	8021378 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8021356:	4b0b      	ldr	r3, [pc, #44]	; (8021384 <osKernelStart+0x68>)
 8021358:	681b      	ldr	r3, [r3, #0]
 802135a:	2b01      	cmp	r3, #1
 802135c:	d109      	bne.n	8021372 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 802135e:	f7ff ff7f 	bl	8021260 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8021362:	4b08      	ldr	r3, [pc, #32]	; (8021384 <osKernelStart+0x68>)
 8021364:	2202      	movs	r2, #2
 8021366:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8021368:	f002 f9ba 	bl	80236e0 <vTaskStartScheduler>
      stat = osOK;
 802136c:	2300      	movs	r3, #0
 802136e:	60fb      	str	r3, [r7, #12]
 8021370:	e002      	b.n	8021378 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8021372:	f04f 33ff 	mov.w	r3, #4294967295
 8021376:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8021378:	68fb      	ldr	r3, [r7, #12]
}
 802137a:	4618      	mov	r0, r3
 802137c:	3710      	adds	r7, #16
 802137e:	46bd      	mov	sp, r7
 8021380:	bd80      	pop	{r7, pc}
 8021382:	bf00      	nop
 8021384:	20001594 	.word	0x20001594

08021388 <osKernelLock>:

int32_t osKernelLock (void) {
 8021388:	b580      	push	{r7, lr}
 802138a:	b084      	sub	sp, #16
 802138c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802138e:	f3ef 8305 	mrs	r3, IPSR
 8021392:	60bb      	str	r3, [r7, #8]
  return(result);
 8021394:	68bb      	ldr	r3, [r7, #8]
  int32_t lock;

  if (IS_IRQ()) {
 8021396:	2b00      	cmp	r3, #0
 8021398:	d10f      	bne.n	80213ba <osKernelLock+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802139a:	f3ef 8310 	mrs	r3, PRIMASK
 802139e:	607b      	str	r3, [r7, #4]
  return(result);
 80213a0:	687b      	ldr	r3, [r7, #4]
 80213a2:	2b00      	cmp	r3, #0
 80213a4:	d105      	bne.n	80213b2 <osKernelLock+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80213a6:	f3ef 8311 	mrs	r3, BASEPRI
 80213aa:	603b      	str	r3, [r7, #0]
  return(result);
 80213ac:	683b      	ldr	r3, [r7, #0]
 80213ae:	2b00      	cmp	r3, #0
 80213b0:	d007      	beq.n	80213c2 <osKernelLock+0x3a>
 80213b2:	4b10      	ldr	r3, [pc, #64]	; (80213f4 <osKernelLock+0x6c>)
 80213b4:	681b      	ldr	r3, [r3, #0]
 80213b6:	2b02      	cmp	r3, #2
 80213b8:	d103      	bne.n	80213c2 <osKernelLock+0x3a>
    lock = (int32_t)osErrorISR;
 80213ba:	f06f 0305 	mvn.w	r3, #5
 80213be:	60fb      	str	r3, [r7, #12]
 80213c0:	e013      	b.n	80213ea <osKernelLock+0x62>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 80213c2:	f002 fde5 	bl	8023f90 <xTaskGetSchedulerState>
 80213c6:	4603      	mov	r3, r0
 80213c8:	2b00      	cmp	r3, #0
 80213ca:	d002      	beq.n	80213d2 <osKernelLock+0x4a>
 80213cc:	2b02      	cmp	r3, #2
 80213ce:	d003      	beq.n	80213d8 <osKernelLock+0x50>
 80213d0:	e007      	b.n	80213e2 <osKernelLock+0x5a>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 80213d2:	2301      	movs	r3, #1
 80213d4:	60fb      	str	r3, [r7, #12]
        break;
 80213d6:	e008      	b.n	80213ea <osKernelLock+0x62>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 80213d8:	f002 f9e6 	bl	80237a8 <vTaskSuspendAll>
        lock = 0;
 80213dc:	2300      	movs	r3, #0
 80213de:	60fb      	str	r3, [r7, #12]
        break;
 80213e0:	e003      	b.n	80213ea <osKernelLock+0x62>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 80213e2:	f04f 33ff 	mov.w	r3, #4294967295
 80213e6:	60fb      	str	r3, [r7, #12]
        break;
 80213e8:	bf00      	nop
    }
  }

  return (lock);
 80213ea:	68fb      	ldr	r3, [r7, #12]
}
 80213ec:	4618      	mov	r0, r3
 80213ee:	3710      	adds	r7, #16
 80213f0:	46bd      	mov	sp, r7
 80213f2:	bd80      	pop	{r7, pc}
 80213f4:	20001594 	.word	0x20001594

080213f8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80213f8:	b580      	push	{r7, lr}
 80213fa:	b084      	sub	sp, #16
 80213fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80213fe:	f3ef 8305 	mrs	r3, IPSR
 8021402:	60bb      	str	r3, [r7, #8]
  return(result);
 8021404:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8021406:	2b00      	cmp	r3, #0
 8021408:	d10f      	bne.n	802142a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802140a:	f3ef 8310 	mrs	r3, PRIMASK
 802140e:	607b      	str	r3, [r7, #4]
  return(result);
 8021410:	687b      	ldr	r3, [r7, #4]
 8021412:	2b00      	cmp	r3, #0
 8021414:	d105      	bne.n	8021422 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8021416:	f3ef 8311 	mrs	r3, BASEPRI
 802141a:	603b      	str	r3, [r7, #0]
  return(result);
 802141c:	683b      	ldr	r3, [r7, #0]
 802141e:	2b00      	cmp	r3, #0
 8021420:	d007      	beq.n	8021432 <osKernelGetTickCount+0x3a>
 8021422:	4b08      	ldr	r3, [pc, #32]	; (8021444 <osKernelGetTickCount+0x4c>)
 8021424:	681b      	ldr	r3, [r3, #0]
 8021426:	2b02      	cmp	r3, #2
 8021428:	d103      	bne.n	8021432 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 802142a:	f002 fa77 	bl	802391c <xTaskGetTickCountFromISR>
 802142e:	60f8      	str	r0, [r7, #12]
 8021430:	e002      	b.n	8021438 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8021432:	f002 fa63 	bl	80238fc <xTaskGetTickCount>
 8021436:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8021438:	68fb      	ldr	r3, [r7, #12]
}
 802143a:	4618      	mov	r0, r3
 802143c:	3710      	adds	r7, #16
 802143e:	46bd      	mov	sp, r7
 8021440:	bd80      	pop	{r7, pc}
 8021442:	bf00      	nop
 8021444:	20001594 	.word	0x20001594

08021448 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8021448:	b580      	push	{r7, lr}
 802144a:	b090      	sub	sp, #64	; 0x40
 802144c:	af04      	add	r7, sp, #16
 802144e:	60f8      	str	r0, [r7, #12]
 8021450:	60b9      	str	r1, [r7, #8]
 8021452:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8021454:	2300      	movs	r3, #0
 8021456:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021458:	f3ef 8305 	mrs	r3, IPSR
 802145c:	61fb      	str	r3, [r7, #28]
  return(result);
 802145e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8021460:	2b00      	cmp	r3, #0
 8021462:	f040 808f 	bne.w	8021584 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021466:	f3ef 8310 	mrs	r3, PRIMASK
 802146a:	61bb      	str	r3, [r7, #24]
  return(result);
 802146c:	69bb      	ldr	r3, [r7, #24]
 802146e:	2b00      	cmp	r3, #0
 8021470:	d105      	bne.n	802147e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8021472:	f3ef 8311 	mrs	r3, BASEPRI
 8021476:	617b      	str	r3, [r7, #20]
  return(result);
 8021478:	697b      	ldr	r3, [r7, #20]
 802147a:	2b00      	cmp	r3, #0
 802147c:	d003      	beq.n	8021486 <osThreadNew+0x3e>
 802147e:	4b44      	ldr	r3, [pc, #272]	; (8021590 <osThreadNew+0x148>)
 8021480:	681b      	ldr	r3, [r3, #0]
 8021482:	2b02      	cmp	r3, #2
 8021484:	d07e      	beq.n	8021584 <osThreadNew+0x13c>
 8021486:	68fb      	ldr	r3, [r7, #12]
 8021488:	2b00      	cmp	r3, #0
 802148a:	d07b      	beq.n	8021584 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 802148c:	2380      	movs	r3, #128	; 0x80
 802148e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8021490:	2318      	movs	r3, #24
 8021492:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8021494:	2300      	movs	r3, #0
 8021496:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8021498:	f04f 33ff 	mov.w	r3, #4294967295
 802149c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 802149e:	687b      	ldr	r3, [r7, #4]
 80214a0:	2b00      	cmp	r3, #0
 80214a2:	d045      	beq.n	8021530 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80214a4:	687b      	ldr	r3, [r7, #4]
 80214a6:	681b      	ldr	r3, [r3, #0]
 80214a8:	2b00      	cmp	r3, #0
 80214aa:	d002      	beq.n	80214b2 <osThreadNew+0x6a>
        name = attr->name;
 80214ac:	687b      	ldr	r3, [r7, #4]
 80214ae:	681b      	ldr	r3, [r3, #0]
 80214b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80214b2:	687b      	ldr	r3, [r7, #4]
 80214b4:	699b      	ldr	r3, [r3, #24]
 80214b6:	2b00      	cmp	r3, #0
 80214b8:	d002      	beq.n	80214c0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80214ba:	687b      	ldr	r3, [r7, #4]
 80214bc:	699b      	ldr	r3, [r3, #24]
 80214be:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80214c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80214c2:	2b00      	cmp	r3, #0
 80214c4:	d008      	beq.n	80214d8 <osThreadNew+0x90>
 80214c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80214c8:	2b38      	cmp	r3, #56	; 0x38
 80214ca:	d805      	bhi.n	80214d8 <osThreadNew+0x90>
 80214cc:	687b      	ldr	r3, [r7, #4]
 80214ce:	685b      	ldr	r3, [r3, #4]
 80214d0:	f003 0301 	and.w	r3, r3, #1
 80214d4:	2b00      	cmp	r3, #0
 80214d6:	d001      	beq.n	80214dc <osThreadNew+0x94>
        return (NULL);
 80214d8:	2300      	movs	r3, #0
 80214da:	e054      	b.n	8021586 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80214dc:	687b      	ldr	r3, [r7, #4]
 80214de:	695b      	ldr	r3, [r3, #20]
 80214e0:	2b00      	cmp	r3, #0
 80214e2:	d003      	beq.n	80214ec <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80214e4:	687b      	ldr	r3, [r7, #4]
 80214e6:	695b      	ldr	r3, [r3, #20]
 80214e8:	089b      	lsrs	r3, r3, #2
 80214ea:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80214ec:	687b      	ldr	r3, [r7, #4]
 80214ee:	689b      	ldr	r3, [r3, #8]
 80214f0:	2b00      	cmp	r3, #0
 80214f2:	d00e      	beq.n	8021512 <osThreadNew+0xca>
 80214f4:	687b      	ldr	r3, [r7, #4]
 80214f6:	68db      	ldr	r3, [r3, #12]
 80214f8:	2b5b      	cmp	r3, #91	; 0x5b
 80214fa:	d90a      	bls.n	8021512 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80214fc:	687b      	ldr	r3, [r7, #4]
 80214fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8021500:	2b00      	cmp	r3, #0
 8021502:	d006      	beq.n	8021512 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8021504:	687b      	ldr	r3, [r7, #4]
 8021506:	695b      	ldr	r3, [r3, #20]
 8021508:	2b00      	cmp	r3, #0
 802150a:	d002      	beq.n	8021512 <osThreadNew+0xca>
        mem = 1;
 802150c:	2301      	movs	r3, #1
 802150e:	623b      	str	r3, [r7, #32]
 8021510:	e010      	b.n	8021534 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8021512:	687b      	ldr	r3, [r7, #4]
 8021514:	689b      	ldr	r3, [r3, #8]
 8021516:	2b00      	cmp	r3, #0
 8021518:	d10c      	bne.n	8021534 <osThreadNew+0xec>
 802151a:	687b      	ldr	r3, [r7, #4]
 802151c:	68db      	ldr	r3, [r3, #12]
 802151e:	2b00      	cmp	r3, #0
 8021520:	d108      	bne.n	8021534 <osThreadNew+0xec>
 8021522:	687b      	ldr	r3, [r7, #4]
 8021524:	691b      	ldr	r3, [r3, #16]
 8021526:	2b00      	cmp	r3, #0
 8021528:	d104      	bne.n	8021534 <osThreadNew+0xec>
          mem = 0;
 802152a:	2300      	movs	r3, #0
 802152c:	623b      	str	r3, [r7, #32]
 802152e:	e001      	b.n	8021534 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8021530:	2300      	movs	r3, #0
 8021532:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8021534:	6a3b      	ldr	r3, [r7, #32]
 8021536:	2b01      	cmp	r3, #1
 8021538:	d110      	bne.n	802155c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 802153a:	687b      	ldr	r3, [r7, #4]
 802153c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 802153e:	687a      	ldr	r2, [r7, #4]
 8021540:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8021542:	9202      	str	r2, [sp, #8]
 8021544:	9301      	str	r3, [sp, #4]
 8021546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021548:	9300      	str	r3, [sp, #0]
 802154a:	68bb      	ldr	r3, [r7, #8]
 802154c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802154e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021550:	68f8      	ldr	r0, [r7, #12]
 8021552:	f001 fe79 	bl	8023248 <xTaskCreateStatic>
 8021556:	4603      	mov	r3, r0
 8021558:	613b      	str	r3, [r7, #16]
 802155a:	e013      	b.n	8021584 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 802155c:	6a3b      	ldr	r3, [r7, #32]
 802155e:	2b00      	cmp	r3, #0
 8021560:	d110      	bne.n	8021584 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8021562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021564:	b29a      	uxth	r2, r3
 8021566:	f107 0310 	add.w	r3, r7, #16
 802156a:	9301      	str	r3, [sp, #4]
 802156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802156e:	9300      	str	r3, [sp, #0]
 8021570:	68bb      	ldr	r3, [r7, #8]
 8021572:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021574:	68f8      	ldr	r0, [r7, #12]
 8021576:	f001 fec1 	bl	80232fc <xTaskCreate>
 802157a:	4603      	mov	r3, r0
 802157c:	2b01      	cmp	r3, #1
 802157e:	d001      	beq.n	8021584 <osThreadNew+0x13c>
          hTask = NULL;
 8021580:	2300      	movs	r3, #0
 8021582:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8021584:	693b      	ldr	r3, [r7, #16]
}
 8021586:	4618      	mov	r0, r3
 8021588:	3730      	adds	r7, #48	; 0x30
 802158a:	46bd      	mov	sp, r7
 802158c:	bd80      	pop	{r7, pc}
 802158e:	bf00      	nop
 8021590:	20001594 	.word	0x20001594

08021594 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8021594:	b580      	push	{r7, lr}
 8021596:	b08a      	sub	sp, #40	; 0x28
 8021598:	af02      	add	r7, sp, #8
 802159a:	6078      	str	r0, [r7, #4]
 802159c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 802159e:	687b      	ldr	r3, [r7, #4]
 80215a0:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80215a2:	69fb      	ldr	r3, [r7, #28]
 80215a4:	2b00      	cmp	r3, #0
 80215a6:	d002      	beq.n	80215ae <osThreadFlagsSet+0x1a>
 80215a8:	683b      	ldr	r3, [r7, #0]
 80215aa:	2b00      	cmp	r3, #0
 80215ac:	da03      	bge.n	80215b6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80215ae:	f06f 0303 	mvn.w	r3, #3
 80215b2:	60fb      	str	r3, [r7, #12]
 80215b4:	e046      	b.n	8021644 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 80215b6:	f04f 33ff 	mov.w	r3, #4294967295
 80215ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80215bc:	f3ef 8305 	mrs	r3, IPSR
 80215c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80215c2:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 80215c4:	2b00      	cmp	r3, #0
 80215c6:	d10f      	bne.n	80215e8 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80215c8:	f3ef 8310 	mrs	r3, PRIMASK
 80215cc:	617b      	str	r3, [r7, #20]
  return(result);
 80215ce:	697b      	ldr	r3, [r7, #20]
 80215d0:	2b00      	cmp	r3, #0
 80215d2:	d105      	bne.n	80215e0 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80215d4:	f3ef 8311 	mrs	r3, BASEPRI
 80215d8:	613b      	str	r3, [r7, #16]
  return(result);
 80215da:	693b      	ldr	r3, [r7, #16]
 80215dc:	2b00      	cmp	r3, #0
 80215de:	d024      	beq.n	802162a <osThreadFlagsSet+0x96>
 80215e0:	4b1b      	ldr	r3, [pc, #108]	; (8021650 <osThreadFlagsSet+0xbc>)
 80215e2:	681b      	ldr	r3, [r3, #0]
 80215e4:	2b02      	cmp	r3, #2
 80215e6:	d120      	bne.n	802162a <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 80215e8:	2300      	movs	r3, #0
 80215ea:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80215ec:	f107 0308 	add.w	r3, r7, #8
 80215f0:	9300      	str	r3, [sp, #0]
 80215f2:	2300      	movs	r3, #0
 80215f4:	2201      	movs	r2, #1
 80215f6:	6839      	ldr	r1, [r7, #0]
 80215f8:	69f8      	ldr	r0, [r7, #28]
 80215fa:	f002 ff5d 	bl	80244b8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80215fe:	f107 020c 	add.w	r2, r7, #12
 8021602:	2300      	movs	r3, #0
 8021604:	9300      	str	r3, [sp, #0]
 8021606:	4613      	mov	r3, r2
 8021608:	2200      	movs	r2, #0
 802160a:	2100      	movs	r1, #0
 802160c:	69f8      	ldr	r0, [r7, #28]
 802160e:	f002 ff53 	bl	80244b8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8021612:	68bb      	ldr	r3, [r7, #8]
 8021614:	2b00      	cmp	r3, #0
 8021616:	d015      	beq.n	8021644 <osThreadFlagsSet+0xb0>
 8021618:	4b0e      	ldr	r3, [pc, #56]	; (8021654 <osThreadFlagsSet+0xc0>)
 802161a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802161e:	601a      	str	r2, [r3, #0]
 8021620:	f3bf 8f4f 	dsb	sy
 8021624:	f3bf 8f6f 	isb	sy
 8021628:	e00c      	b.n	8021644 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 802162a:	2300      	movs	r3, #0
 802162c:	2201      	movs	r2, #1
 802162e:	6839      	ldr	r1, [r7, #0]
 8021630:	69f8      	ldr	r0, [r7, #28]
 8021632:	f002 fe8d 	bl	8024350 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8021636:	f107 030c 	add.w	r3, r7, #12
 802163a:	2200      	movs	r2, #0
 802163c:	2100      	movs	r1, #0
 802163e:	69f8      	ldr	r0, [r7, #28]
 8021640:	f002 fe86 	bl	8024350 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8021644:	68fb      	ldr	r3, [r7, #12]
}
 8021646:	4618      	mov	r0, r3
 8021648:	3720      	adds	r7, #32
 802164a:	46bd      	mov	sp, r7
 802164c:	bd80      	pop	{r7, pc}
 802164e:	bf00      	nop
 8021650:	20001594 	.word	0x20001594
 8021654:	e000ed04 	.word	0xe000ed04

08021658 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8021658:	b580      	push	{r7, lr}
 802165a:	b088      	sub	sp, #32
 802165c:	af00      	add	r7, sp, #0
 802165e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021660:	f3ef 8305 	mrs	r3, IPSR
 8021664:	617b      	str	r3, [r7, #20]
  return(result);
 8021666:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 8021668:	2b00      	cmp	r3, #0
 802166a:	d10f      	bne.n	802168c <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802166c:	f3ef 8310 	mrs	r3, PRIMASK
 8021670:	613b      	str	r3, [r7, #16]
  return(result);
 8021672:	693b      	ldr	r3, [r7, #16]
 8021674:	2b00      	cmp	r3, #0
 8021676:	d105      	bne.n	8021684 <osThreadFlagsClear+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8021678:	f3ef 8311 	mrs	r3, BASEPRI
 802167c:	60fb      	str	r3, [r7, #12]
  return(result);
 802167e:	68fb      	ldr	r3, [r7, #12]
 8021680:	2b00      	cmp	r3, #0
 8021682:	d007      	beq.n	8021694 <osThreadFlagsClear+0x3c>
 8021684:	4b1b      	ldr	r3, [pc, #108]	; (80216f4 <osThreadFlagsClear+0x9c>)
 8021686:	681b      	ldr	r3, [r3, #0]
 8021688:	2b02      	cmp	r3, #2
 802168a:	d103      	bne.n	8021694 <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 802168c:	f06f 0305 	mvn.w	r3, #5
 8021690:	61fb      	str	r3, [r7, #28]
 8021692:	e02a      	b.n	80216ea <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8021694:	687b      	ldr	r3, [r7, #4]
 8021696:	2b00      	cmp	r3, #0
 8021698:	da03      	bge.n	80216a2 <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 802169a:	f06f 0303 	mvn.w	r3, #3
 802169e:	61fb      	str	r3, [r7, #28]
 80216a0:	e023      	b.n	80216ea <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 80216a2:	f002 fc65 	bl	8023f70 <xTaskGetCurrentTaskHandle>
 80216a6:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 80216a8:	f107 0308 	add.w	r3, r7, #8
 80216ac:	2200      	movs	r2, #0
 80216ae:	2100      	movs	r1, #0
 80216b0:	69b8      	ldr	r0, [r7, #24]
 80216b2:	f002 fe4d 	bl	8024350 <xTaskGenericNotify>
 80216b6:	4603      	mov	r3, r0
 80216b8:	2b01      	cmp	r3, #1
 80216ba:	d113      	bne.n	80216e4 <osThreadFlagsClear+0x8c>
      rflags = cflags;
 80216bc:	68bb      	ldr	r3, [r7, #8]
 80216be:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 80216c0:	687b      	ldr	r3, [r7, #4]
 80216c2:	43da      	mvns	r2, r3
 80216c4:	68bb      	ldr	r3, [r7, #8]
 80216c6:	4013      	ands	r3, r2
 80216c8:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 80216ca:	68b9      	ldr	r1, [r7, #8]
 80216cc:	2300      	movs	r3, #0
 80216ce:	2203      	movs	r2, #3
 80216d0:	69b8      	ldr	r0, [r7, #24]
 80216d2:	f002 fe3d 	bl	8024350 <xTaskGenericNotify>
 80216d6:	4603      	mov	r3, r0
 80216d8:	2b01      	cmp	r3, #1
 80216da:	d006      	beq.n	80216ea <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 80216dc:	f04f 33ff 	mov.w	r3, #4294967295
 80216e0:	61fb      	str	r3, [r7, #28]
 80216e2:	e002      	b.n	80216ea <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 80216e4:	f04f 33ff 	mov.w	r3, #4294967295
 80216e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 80216ea:	69fb      	ldr	r3, [r7, #28]
}
 80216ec:	4618      	mov	r0, r3
 80216ee:	3720      	adds	r7, #32
 80216f0:	46bd      	mov	sp, r7
 80216f2:	bd80      	pop	{r7, pc}
 80216f4:	20001594 	.word	0x20001594

080216f8 <osThreadFlagsGet>:

uint32_t osThreadFlagsGet (void) {
 80216f8:	b580      	push	{r7, lr}
 80216fa:	b086      	sub	sp, #24
 80216fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80216fe:	f3ef 8305 	mrs	r3, IPSR
 8021702:	613b      	str	r3, [r7, #16]
  return(result);
 8021704:	693b      	ldr	r3, [r7, #16]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 8021706:	2b00      	cmp	r3, #0
 8021708:	d10f      	bne.n	802172a <osThreadFlagsGet+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802170a:	f3ef 8310 	mrs	r3, PRIMASK
 802170e:	60fb      	str	r3, [r7, #12]
  return(result);
 8021710:	68fb      	ldr	r3, [r7, #12]
 8021712:	2b00      	cmp	r3, #0
 8021714:	d105      	bne.n	8021722 <osThreadFlagsGet+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8021716:	f3ef 8311 	mrs	r3, BASEPRI
 802171a:	60bb      	str	r3, [r7, #8]
  return(result);
 802171c:	68bb      	ldr	r3, [r7, #8]
 802171e:	2b00      	cmp	r3, #0
 8021720:	d007      	beq.n	8021732 <osThreadFlagsGet+0x3a>
 8021722:	4b0e      	ldr	r3, [pc, #56]	; (802175c <osThreadFlagsGet+0x64>)
 8021724:	681b      	ldr	r3, [r3, #0]
 8021726:	2b02      	cmp	r3, #2
 8021728:	d103      	bne.n	8021732 <osThreadFlagsGet+0x3a>
    rflags = (uint32_t)osErrorISR;
 802172a:	f06f 0305 	mvn.w	r3, #5
 802172e:	607b      	str	r3, [r7, #4]
 8021730:	e00e      	b.n	8021750 <osThreadFlagsGet+0x58>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 8021732:	f002 fc1d 	bl	8023f70 <xTaskGetCurrentTaskHandle>
 8021736:	6178      	str	r0, [r7, #20]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 8021738:	1d3b      	adds	r3, r7, #4
 802173a:	2200      	movs	r2, #0
 802173c:	2100      	movs	r1, #0
 802173e:	6978      	ldr	r0, [r7, #20]
 8021740:	f002 fe06 	bl	8024350 <xTaskGenericNotify>
 8021744:	4603      	mov	r3, r0
 8021746:	2b01      	cmp	r3, #1
 8021748:	d002      	beq.n	8021750 <osThreadFlagsGet+0x58>
      rflags = (uint32_t)osError;
 802174a:	f04f 33ff 	mov.w	r3, #4294967295
 802174e:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 8021750:	687b      	ldr	r3, [r7, #4]
}
 8021752:	4618      	mov	r0, r3
 8021754:	3718      	adds	r7, #24
 8021756:	46bd      	mov	sp, r7
 8021758:	bd80      	pop	{r7, pc}
 802175a:	bf00      	nop
 802175c:	20001594 	.word	0x20001594

08021760 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8021760:	b580      	push	{r7, lr}
 8021762:	b08e      	sub	sp, #56	; 0x38
 8021764:	af00      	add	r7, sp, #0
 8021766:	60f8      	str	r0, [r7, #12]
 8021768:	60b9      	str	r1, [r7, #8]
 802176a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802176c:	f3ef 8305 	mrs	r3, IPSR
 8021770:	61fb      	str	r3, [r7, #28]
  return(result);
 8021772:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8021774:	2b00      	cmp	r3, #0
 8021776:	d10f      	bne.n	8021798 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021778:	f3ef 8310 	mrs	r3, PRIMASK
 802177c:	61bb      	str	r3, [r7, #24]
  return(result);
 802177e:	69bb      	ldr	r3, [r7, #24]
 8021780:	2b00      	cmp	r3, #0
 8021782:	d105      	bne.n	8021790 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8021784:	f3ef 8311 	mrs	r3, BASEPRI
 8021788:	617b      	str	r3, [r7, #20]
  return(result);
 802178a:	697b      	ldr	r3, [r7, #20]
 802178c:	2b00      	cmp	r3, #0
 802178e:	d007      	beq.n	80217a0 <osThreadFlagsWait+0x40>
 8021790:	4b3c      	ldr	r3, [pc, #240]	; (8021884 <osThreadFlagsWait+0x124>)
 8021792:	681b      	ldr	r3, [r3, #0]
 8021794:	2b02      	cmp	r3, #2
 8021796:	d103      	bne.n	80217a0 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8021798:	f06f 0305 	mvn.w	r3, #5
 802179c:	637b      	str	r3, [r7, #52]	; 0x34
 802179e:	e06b      	b.n	8021878 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80217a0:	68fb      	ldr	r3, [r7, #12]
 80217a2:	2b00      	cmp	r3, #0
 80217a4:	da03      	bge.n	80217ae <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 80217a6:	f06f 0303 	mvn.w	r3, #3
 80217aa:	637b      	str	r3, [r7, #52]	; 0x34
 80217ac:	e064      	b.n	8021878 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80217ae:	68bb      	ldr	r3, [r7, #8]
 80217b0:	f003 0302 	and.w	r3, r3, #2
 80217b4:	2b00      	cmp	r3, #0
 80217b6:	d002      	beq.n	80217be <osThreadFlagsWait+0x5e>
      clear = 0U;
 80217b8:	2300      	movs	r3, #0
 80217ba:	633b      	str	r3, [r7, #48]	; 0x30
 80217bc:	e001      	b.n	80217c2 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 80217be:	68fb      	ldr	r3, [r7, #12]
 80217c0:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 80217c2:	2300      	movs	r3, #0
 80217c4:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 80217c6:	687b      	ldr	r3, [r7, #4]
 80217c8:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 80217ca:	f002 f897 	bl	80238fc <xTaskGetTickCount>
 80217ce:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80217d0:	f107 0210 	add.w	r2, r7, #16
 80217d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80217d8:	2000      	movs	r0, #0
 80217da:	f002 fd5f 	bl	802429c <xTaskNotifyWait>
 80217de:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 80217e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217e2:	2b01      	cmp	r3, #1
 80217e4:	d137      	bne.n	8021856 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 80217e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80217e8:	68fb      	ldr	r3, [r7, #12]
 80217ea:	4013      	ands	r3, r2
 80217ec:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 80217ee:	693b      	ldr	r3, [r7, #16]
 80217f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80217f2:	4313      	orrs	r3, r2
 80217f4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80217f6:	68bb      	ldr	r3, [r7, #8]
 80217f8:	f003 0301 	and.w	r3, r3, #1
 80217fc:	2b00      	cmp	r3, #0
 80217fe:	d00c      	beq.n	802181a <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8021800:	68fa      	ldr	r2, [r7, #12]
 8021802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021804:	4013      	ands	r3, r2
 8021806:	68fa      	ldr	r2, [r7, #12]
 8021808:	429a      	cmp	r2, r3
 802180a:	d032      	beq.n	8021872 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 802180c:	687b      	ldr	r3, [r7, #4]
 802180e:	2b00      	cmp	r3, #0
 8021810:	d10f      	bne.n	8021832 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8021812:	f06f 0302 	mvn.w	r3, #2
 8021816:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8021818:	e02e      	b.n	8021878 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 802181a:	68fa      	ldr	r2, [r7, #12]
 802181c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802181e:	4013      	ands	r3, r2
 8021820:	2b00      	cmp	r3, #0
 8021822:	d128      	bne.n	8021876 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8021824:	687b      	ldr	r3, [r7, #4]
 8021826:	2b00      	cmp	r3, #0
 8021828:	d103      	bne.n	8021832 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 802182a:	f06f 0302 	mvn.w	r3, #2
 802182e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8021830:	e022      	b.n	8021878 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8021832:	f002 f863 	bl	80238fc <xTaskGetTickCount>
 8021836:	4602      	mov	r2, r0
 8021838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802183a:	1ad3      	subs	r3, r2, r3
 802183c:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 802183e:	6a3a      	ldr	r2, [r7, #32]
 8021840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021842:	429a      	cmp	r2, r3
 8021844:	d902      	bls.n	802184c <osThreadFlagsWait+0xec>
          tout  = 0;
 8021846:	2300      	movs	r3, #0
 8021848:	62fb      	str	r3, [r7, #44]	; 0x2c
 802184a:	e00e      	b.n	802186a <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 802184c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802184e:	6a3b      	ldr	r3, [r7, #32]
 8021850:	1ad3      	subs	r3, r2, r3
 8021852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021854:	e009      	b.n	802186a <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8021856:	687b      	ldr	r3, [r7, #4]
 8021858:	2b00      	cmp	r3, #0
 802185a:	d103      	bne.n	8021864 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 802185c:	f06f 0302 	mvn.w	r3, #2
 8021860:	637b      	str	r3, [r7, #52]	; 0x34
 8021862:	e002      	b.n	802186a <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8021864:	f06f 0301 	mvn.w	r3, #1
 8021868:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 802186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802186c:	2b00      	cmp	r3, #0
 802186e:	d1af      	bne.n	80217d0 <osThreadFlagsWait+0x70>
 8021870:	e002      	b.n	8021878 <osThreadFlagsWait+0x118>
            break;
 8021872:	bf00      	nop
 8021874:	e000      	b.n	8021878 <osThreadFlagsWait+0x118>
            break;
 8021876:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8021878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 802187a:	4618      	mov	r0, r3
 802187c:	3738      	adds	r7, #56	; 0x38
 802187e:	46bd      	mov	sp, r7
 8021880:	bd80      	pop	{r7, pc}
 8021882:	bf00      	nop
 8021884:	20001594 	.word	0x20001594

08021888 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8021888:	b580      	push	{r7, lr}
 802188a:	b086      	sub	sp, #24
 802188c:	af00      	add	r7, sp, #0
 802188e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021890:	f3ef 8305 	mrs	r3, IPSR
 8021894:	613b      	str	r3, [r7, #16]
  return(result);
 8021896:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8021898:	2b00      	cmp	r3, #0
 802189a:	d10f      	bne.n	80218bc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802189c:	f3ef 8310 	mrs	r3, PRIMASK
 80218a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80218a2:	68fb      	ldr	r3, [r7, #12]
 80218a4:	2b00      	cmp	r3, #0
 80218a6:	d105      	bne.n	80218b4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80218a8:	f3ef 8311 	mrs	r3, BASEPRI
 80218ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80218ae:	68bb      	ldr	r3, [r7, #8]
 80218b0:	2b00      	cmp	r3, #0
 80218b2:	d007      	beq.n	80218c4 <osDelay+0x3c>
 80218b4:	4b0a      	ldr	r3, [pc, #40]	; (80218e0 <osDelay+0x58>)
 80218b6:	681b      	ldr	r3, [r3, #0]
 80218b8:	2b02      	cmp	r3, #2
 80218ba:	d103      	bne.n	80218c4 <osDelay+0x3c>
    stat = osErrorISR;
 80218bc:	f06f 0305 	mvn.w	r3, #5
 80218c0:	617b      	str	r3, [r7, #20]
 80218c2:	e007      	b.n	80218d4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80218c4:	2300      	movs	r3, #0
 80218c6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80218c8:	687b      	ldr	r3, [r7, #4]
 80218ca:	2b00      	cmp	r3, #0
 80218cc:	d002      	beq.n	80218d4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80218ce:	6878      	ldr	r0, [r7, #4]
 80218d0:	f001 fed2 	bl	8023678 <vTaskDelay>
    }
  }

  return (stat);
 80218d4:	697b      	ldr	r3, [r7, #20]
}
 80218d6:	4618      	mov	r0, r3
 80218d8:	3718      	adds	r7, #24
 80218da:	46bd      	mov	sp, r7
 80218dc:	bd80      	pop	{r7, pc}
 80218de:	bf00      	nop
 80218e0:	20001594 	.word	0x20001594

080218e4 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 80218e4:	b580      	push	{r7, lr}
 80218e6:	b088      	sub	sp, #32
 80218e8:	af00      	add	r7, sp, #0
 80218ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80218ec:	f3ef 8305 	mrs	r3, IPSR
 80218f0:	617b      	str	r3, [r7, #20]
  return(result);
 80218f2:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80218f4:	2b00      	cmp	r3, #0
 80218f6:	d10f      	bne.n	8021918 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80218f8:	f3ef 8310 	mrs	r3, PRIMASK
 80218fc:	613b      	str	r3, [r7, #16]
  return(result);
 80218fe:	693b      	ldr	r3, [r7, #16]
 8021900:	2b00      	cmp	r3, #0
 8021902:	d105      	bne.n	8021910 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8021904:	f3ef 8311 	mrs	r3, BASEPRI
 8021908:	60fb      	str	r3, [r7, #12]
  return(result);
 802190a:	68fb      	ldr	r3, [r7, #12]
 802190c:	2b00      	cmp	r3, #0
 802190e:	d007      	beq.n	8021920 <osDelayUntil+0x3c>
 8021910:	4b13      	ldr	r3, [pc, #76]	; (8021960 <osDelayUntil+0x7c>)
 8021912:	681b      	ldr	r3, [r3, #0]
 8021914:	2b02      	cmp	r3, #2
 8021916:	d103      	bne.n	8021920 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8021918:	f06f 0305 	mvn.w	r3, #5
 802191c:	61fb      	str	r3, [r7, #28]
 802191e:	e019      	b.n	8021954 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8021920:	2300      	movs	r3, #0
 8021922:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8021924:	f001 ffea 	bl	80238fc <xTaskGetTickCount>
 8021928:	4603      	mov	r3, r0
 802192a:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 802192c:	68bb      	ldr	r3, [r7, #8]
 802192e:	687a      	ldr	r2, [r7, #4]
 8021930:	1ad3      	subs	r3, r2, r3
 8021932:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8021934:	69bb      	ldr	r3, [r7, #24]
 8021936:	2b00      	cmp	r3, #0
 8021938:	d009      	beq.n	802194e <osDelayUntil+0x6a>
 802193a:	69bb      	ldr	r3, [r7, #24]
 802193c:	2b00      	cmp	r3, #0
 802193e:	db06      	blt.n	802194e <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8021940:	f107 0308 	add.w	r3, r7, #8
 8021944:	69b9      	ldr	r1, [r7, #24]
 8021946:	4618      	mov	r0, r3
 8021948:	f001 fe1c 	bl	8023584 <vTaskDelayUntil>
 802194c:	e002      	b.n	8021954 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 802194e:	f06f 0303 	mvn.w	r3, #3
 8021952:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8021954:	69fb      	ldr	r3, [r7, #28]
}
 8021956:	4618      	mov	r0, r3
 8021958:	3720      	adds	r7, #32
 802195a:	46bd      	mov	sp, r7
 802195c:	bd80      	pop	{r7, pc}
 802195e:	bf00      	nop
 8021960:	20001594 	.word	0x20001594

08021964 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8021964:	b580      	push	{r7, lr}
 8021966:	b08c      	sub	sp, #48	; 0x30
 8021968:	af02      	add	r7, sp, #8
 802196a:	60f8      	str	r0, [r7, #12]
 802196c:	60b9      	str	r1, [r7, #8]
 802196e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8021970:	2300      	movs	r3, #0
 8021972:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021974:	f3ef 8305 	mrs	r3, IPSR
 8021978:	61bb      	str	r3, [r7, #24]
  return(result);
 802197a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 802197c:	2b00      	cmp	r3, #0
 802197e:	f040 8087 	bne.w	8021a90 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021982:	f3ef 8310 	mrs	r3, PRIMASK
 8021986:	617b      	str	r3, [r7, #20]
  return(result);
 8021988:	697b      	ldr	r3, [r7, #20]
 802198a:	2b00      	cmp	r3, #0
 802198c:	d105      	bne.n	802199a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 802198e:	f3ef 8311 	mrs	r3, BASEPRI
 8021992:	613b      	str	r3, [r7, #16]
  return(result);
 8021994:	693b      	ldr	r3, [r7, #16]
 8021996:	2b00      	cmp	r3, #0
 8021998:	d003      	beq.n	80219a2 <osSemaphoreNew+0x3e>
 802199a:	4b40      	ldr	r3, [pc, #256]	; (8021a9c <osSemaphoreNew+0x138>)
 802199c:	681b      	ldr	r3, [r3, #0]
 802199e:	2b02      	cmp	r3, #2
 80219a0:	d076      	beq.n	8021a90 <osSemaphoreNew+0x12c>
 80219a2:	68fb      	ldr	r3, [r7, #12]
 80219a4:	2b00      	cmp	r3, #0
 80219a6:	d073      	beq.n	8021a90 <osSemaphoreNew+0x12c>
 80219a8:	68ba      	ldr	r2, [r7, #8]
 80219aa:	68fb      	ldr	r3, [r7, #12]
 80219ac:	429a      	cmp	r2, r3
 80219ae:	d86f      	bhi.n	8021a90 <osSemaphoreNew+0x12c>
    mem = -1;
 80219b0:	f04f 33ff 	mov.w	r3, #4294967295
 80219b4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80219b6:	687b      	ldr	r3, [r7, #4]
 80219b8:	2b00      	cmp	r3, #0
 80219ba:	d015      	beq.n	80219e8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80219bc:	687b      	ldr	r3, [r7, #4]
 80219be:	689b      	ldr	r3, [r3, #8]
 80219c0:	2b00      	cmp	r3, #0
 80219c2:	d006      	beq.n	80219d2 <osSemaphoreNew+0x6e>
 80219c4:	687b      	ldr	r3, [r7, #4]
 80219c6:	68db      	ldr	r3, [r3, #12]
 80219c8:	2b4f      	cmp	r3, #79	; 0x4f
 80219ca:	d902      	bls.n	80219d2 <osSemaphoreNew+0x6e>
        mem = 1;
 80219cc:	2301      	movs	r3, #1
 80219ce:	623b      	str	r3, [r7, #32]
 80219d0:	e00c      	b.n	80219ec <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80219d2:	687b      	ldr	r3, [r7, #4]
 80219d4:	689b      	ldr	r3, [r3, #8]
 80219d6:	2b00      	cmp	r3, #0
 80219d8:	d108      	bne.n	80219ec <osSemaphoreNew+0x88>
 80219da:	687b      	ldr	r3, [r7, #4]
 80219dc:	68db      	ldr	r3, [r3, #12]
 80219de:	2b00      	cmp	r3, #0
 80219e0:	d104      	bne.n	80219ec <osSemaphoreNew+0x88>
          mem = 0;
 80219e2:	2300      	movs	r3, #0
 80219e4:	623b      	str	r3, [r7, #32]
 80219e6:	e001      	b.n	80219ec <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80219e8:	2300      	movs	r3, #0
 80219ea:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80219ec:	6a3b      	ldr	r3, [r7, #32]
 80219ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80219f2:	d04d      	beq.n	8021a90 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80219f4:	68fb      	ldr	r3, [r7, #12]
 80219f6:	2b01      	cmp	r3, #1
 80219f8:	d129      	bne.n	8021a4e <osSemaphoreNew+0xea>
        if (mem == 1) {
 80219fa:	6a3b      	ldr	r3, [r7, #32]
 80219fc:	2b01      	cmp	r3, #1
 80219fe:	d10b      	bne.n	8021a18 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8021a00:	687b      	ldr	r3, [r7, #4]
 8021a02:	689a      	ldr	r2, [r3, #8]
 8021a04:	2303      	movs	r3, #3
 8021a06:	9300      	str	r3, [sp, #0]
 8021a08:	4613      	mov	r3, r2
 8021a0a:	2200      	movs	r2, #0
 8021a0c:	2100      	movs	r1, #0
 8021a0e:	2001      	movs	r0, #1
 8021a10:	f000 fc72 	bl	80222f8 <xQueueGenericCreateStatic>
 8021a14:	6278      	str	r0, [r7, #36]	; 0x24
 8021a16:	e005      	b.n	8021a24 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8021a18:	2203      	movs	r2, #3
 8021a1a:	2100      	movs	r1, #0
 8021a1c:	2001      	movs	r0, #1
 8021a1e:	f000 fcde 	bl	80223de <xQueueGenericCreate>
 8021a22:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8021a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a26:	2b00      	cmp	r3, #0
 8021a28:	d022      	beq.n	8021a70 <osSemaphoreNew+0x10c>
 8021a2a:	68bb      	ldr	r3, [r7, #8]
 8021a2c:	2b00      	cmp	r3, #0
 8021a2e:	d01f      	beq.n	8021a70 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8021a30:	2300      	movs	r3, #0
 8021a32:	2200      	movs	r2, #0
 8021a34:	2100      	movs	r1, #0
 8021a36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021a38:	f000 fd9a 	bl	8022570 <xQueueGenericSend>
 8021a3c:	4603      	mov	r3, r0
 8021a3e:	2b01      	cmp	r3, #1
 8021a40:	d016      	beq.n	8021a70 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8021a42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021a44:	f001 fa2f 	bl	8022ea6 <vQueueDelete>
            hSemaphore = NULL;
 8021a48:	2300      	movs	r3, #0
 8021a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8021a4c:	e010      	b.n	8021a70 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8021a4e:	6a3b      	ldr	r3, [r7, #32]
 8021a50:	2b01      	cmp	r3, #1
 8021a52:	d108      	bne.n	8021a66 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8021a54:	687b      	ldr	r3, [r7, #4]
 8021a56:	689b      	ldr	r3, [r3, #8]
 8021a58:	461a      	mov	r2, r3
 8021a5a:	68b9      	ldr	r1, [r7, #8]
 8021a5c:	68f8      	ldr	r0, [r7, #12]
 8021a5e:	f000 fd20 	bl	80224a2 <xQueueCreateCountingSemaphoreStatic>
 8021a62:	6278      	str	r0, [r7, #36]	; 0x24
 8021a64:	e004      	b.n	8021a70 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8021a66:	68b9      	ldr	r1, [r7, #8]
 8021a68:	68f8      	ldr	r0, [r7, #12]
 8021a6a:	f000 fd4f 	bl	802250c <xQueueCreateCountingSemaphore>
 8021a6e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8021a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a72:	2b00      	cmp	r3, #0
 8021a74:	d00c      	beq.n	8021a90 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8021a76:	687b      	ldr	r3, [r7, #4]
 8021a78:	2b00      	cmp	r3, #0
 8021a7a:	d003      	beq.n	8021a84 <osSemaphoreNew+0x120>
          name = attr->name;
 8021a7c:	687b      	ldr	r3, [r7, #4]
 8021a7e:	681b      	ldr	r3, [r3, #0]
 8021a80:	61fb      	str	r3, [r7, #28]
 8021a82:	e001      	b.n	8021a88 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8021a84:	2300      	movs	r3, #0
 8021a86:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8021a88:	69f9      	ldr	r1, [r7, #28]
 8021a8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021a8c:	f001 fb56 	bl	802313c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8021a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8021a92:	4618      	mov	r0, r3
 8021a94:	3728      	adds	r7, #40	; 0x28
 8021a96:	46bd      	mov	sp, r7
 8021a98:	bd80      	pop	{r7, pc}
 8021a9a:	bf00      	nop
 8021a9c:	20001594 	.word	0x20001594

08021aa0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8021aa0:	b580      	push	{r7, lr}
 8021aa2:	b088      	sub	sp, #32
 8021aa4:	af00      	add	r7, sp, #0
 8021aa6:	6078      	str	r0, [r7, #4]
 8021aa8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8021aaa:	687b      	ldr	r3, [r7, #4]
 8021aac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8021aae:	2300      	movs	r3, #0
 8021ab0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8021ab2:	69bb      	ldr	r3, [r7, #24]
 8021ab4:	2b00      	cmp	r3, #0
 8021ab6:	d103      	bne.n	8021ac0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8021ab8:	f06f 0303 	mvn.w	r3, #3
 8021abc:	61fb      	str	r3, [r7, #28]
 8021abe:	e04b      	b.n	8021b58 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021ac0:	f3ef 8305 	mrs	r3, IPSR
 8021ac4:	617b      	str	r3, [r7, #20]
  return(result);
 8021ac6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8021ac8:	2b00      	cmp	r3, #0
 8021aca:	d10f      	bne.n	8021aec <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021acc:	f3ef 8310 	mrs	r3, PRIMASK
 8021ad0:	613b      	str	r3, [r7, #16]
  return(result);
 8021ad2:	693b      	ldr	r3, [r7, #16]
 8021ad4:	2b00      	cmp	r3, #0
 8021ad6:	d105      	bne.n	8021ae4 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8021ad8:	f3ef 8311 	mrs	r3, BASEPRI
 8021adc:	60fb      	str	r3, [r7, #12]
  return(result);
 8021ade:	68fb      	ldr	r3, [r7, #12]
 8021ae0:	2b00      	cmp	r3, #0
 8021ae2:	d026      	beq.n	8021b32 <osSemaphoreAcquire+0x92>
 8021ae4:	4b1f      	ldr	r3, [pc, #124]	; (8021b64 <osSemaphoreAcquire+0xc4>)
 8021ae6:	681b      	ldr	r3, [r3, #0]
 8021ae8:	2b02      	cmp	r3, #2
 8021aea:	d122      	bne.n	8021b32 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8021aec:	683b      	ldr	r3, [r7, #0]
 8021aee:	2b00      	cmp	r3, #0
 8021af0:	d003      	beq.n	8021afa <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8021af2:	f06f 0303 	mvn.w	r3, #3
 8021af6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8021af8:	e02d      	b.n	8021b56 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8021afa:	2300      	movs	r3, #0
 8021afc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8021afe:	f107 0308 	add.w	r3, r7, #8
 8021b02:	461a      	mov	r2, r3
 8021b04:	2100      	movs	r1, #0
 8021b06:	69b8      	ldr	r0, [r7, #24]
 8021b08:	f001 f92e 	bl	8022d68 <xQueueReceiveFromISR>
 8021b0c:	4603      	mov	r3, r0
 8021b0e:	2b01      	cmp	r3, #1
 8021b10:	d003      	beq.n	8021b1a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8021b12:	f06f 0302 	mvn.w	r3, #2
 8021b16:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8021b18:	e01d      	b.n	8021b56 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8021b1a:	68bb      	ldr	r3, [r7, #8]
 8021b1c:	2b00      	cmp	r3, #0
 8021b1e:	d01a      	beq.n	8021b56 <osSemaphoreAcquire+0xb6>
 8021b20:	4b11      	ldr	r3, [pc, #68]	; (8021b68 <osSemaphoreAcquire+0xc8>)
 8021b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021b26:	601a      	str	r2, [r3, #0]
 8021b28:	f3bf 8f4f 	dsb	sy
 8021b2c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8021b30:	e011      	b.n	8021b56 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8021b32:	6839      	ldr	r1, [r7, #0]
 8021b34:	69b8      	ldr	r0, [r7, #24]
 8021b36:	f001 f80f 	bl	8022b58 <xQueueSemaphoreTake>
 8021b3a:	4603      	mov	r3, r0
 8021b3c:	2b01      	cmp	r3, #1
 8021b3e:	d00b      	beq.n	8021b58 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8021b40:	683b      	ldr	r3, [r7, #0]
 8021b42:	2b00      	cmp	r3, #0
 8021b44:	d003      	beq.n	8021b4e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8021b46:	f06f 0301 	mvn.w	r3, #1
 8021b4a:	61fb      	str	r3, [r7, #28]
 8021b4c:	e004      	b.n	8021b58 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8021b4e:	f06f 0302 	mvn.w	r3, #2
 8021b52:	61fb      	str	r3, [r7, #28]
 8021b54:	e000      	b.n	8021b58 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8021b56:	bf00      	nop
      }
    }
  }

  return (stat);
 8021b58:	69fb      	ldr	r3, [r7, #28]
}
 8021b5a:	4618      	mov	r0, r3
 8021b5c:	3720      	adds	r7, #32
 8021b5e:	46bd      	mov	sp, r7
 8021b60:	bd80      	pop	{r7, pc}
 8021b62:	bf00      	nop
 8021b64:	20001594 	.word	0x20001594
 8021b68:	e000ed04 	.word	0xe000ed04

08021b6c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8021b6c:	b580      	push	{r7, lr}
 8021b6e:	b088      	sub	sp, #32
 8021b70:	af00      	add	r7, sp, #0
 8021b72:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8021b74:	687b      	ldr	r3, [r7, #4]
 8021b76:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8021b78:	2300      	movs	r3, #0
 8021b7a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8021b7c:	69bb      	ldr	r3, [r7, #24]
 8021b7e:	2b00      	cmp	r3, #0
 8021b80:	d103      	bne.n	8021b8a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8021b82:	f06f 0303 	mvn.w	r3, #3
 8021b86:	61fb      	str	r3, [r7, #28]
 8021b88:	e03e      	b.n	8021c08 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021b8a:	f3ef 8305 	mrs	r3, IPSR
 8021b8e:	617b      	str	r3, [r7, #20]
  return(result);
 8021b90:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8021b92:	2b00      	cmp	r3, #0
 8021b94:	d10f      	bne.n	8021bb6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021b96:	f3ef 8310 	mrs	r3, PRIMASK
 8021b9a:	613b      	str	r3, [r7, #16]
  return(result);
 8021b9c:	693b      	ldr	r3, [r7, #16]
 8021b9e:	2b00      	cmp	r3, #0
 8021ba0:	d105      	bne.n	8021bae <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8021ba2:	f3ef 8311 	mrs	r3, BASEPRI
 8021ba6:	60fb      	str	r3, [r7, #12]
  return(result);
 8021ba8:	68fb      	ldr	r3, [r7, #12]
 8021baa:	2b00      	cmp	r3, #0
 8021bac:	d01e      	beq.n	8021bec <osSemaphoreRelease+0x80>
 8021bae:	4b19      	ldr	r3, [pc, #100]	; (8021c14 <osSemaphoreRelease+0xa8>)
 8021bb0:	681b      	ldr	r3, [r3, #0]
 8021bb2:	2b02      	cmp	r3, #2
 8021bb4:	d11a      	bne.n	8021bec <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8021bb6:	2300      	movs	r3, #0
 8021bb8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8021bba:	f107 0308 	add.w	r3, r7, #8
 8021bbe:	4619      	mov	r1, r3
 8021bc0:	69b8      	ldr	r0, [r7, #24]
 8021bc2:	f000 fe63 	bl	802288c <xQueueGiveFromISR>
 8021bc6:	4603      	mov	r3, r0
 8021bc8:	2b01      	cmp	r3, #1
 8021bca:	d003      	beq.n	8021bd4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8021bcc:	f06f 0302 	mvn.w	r3, #2
 8021bd0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8021bd2:	e018      	b.n	8021c06 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8021bd4:	68bb      	ldr	r3, [r7, #8]
 8021bd6:	2b00      	cmp	r3, #0
 8021bd8:	d015      	beq.n	8021c06 <osSemaphoreRelease+0x9a>
 8021bda:	4b0f      	ldr	r3, [pc, #60]	; (8021c18 <osSemaphoreRelease+0xac>)
 8021bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021be0:	601a      	str	r2, [r3, #0]
 8021be2:	f3bf 8f4f 	dsb	sy
 8021be6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8021bea:	e00c      	b.n	8021c06 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8021bec:	2300      	movs	r3, #0
 8021bee:	2200      	movs	r2, #0
 8021bf0:	2100      	movs	r1, #0
 8021bf2:	69b8      	ldr	r0, [r7, #24]
 8021bf4:	f000 fcbc 	bl	8022570 <xQueueGenericSend>
 8021bf8:	4603      	mov	r3, r0
 8021bfa:	2b01      	cmp	r3, #1
 8021bfc:	d004      	beq.n	8021c08 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8021bfe:	f06f 0302 	mvn.w	r3, #2
 8021c02:	61fb      	str	r3, [r7, #28]
 8021c04:	e000      	b.n	8021c08 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8021c06:	bf00      	nop
    }
  }

  return (stat);
 8021c08:	69fb      	ldr	r3, [r7, #28]
}
 8021c0a:	4618      	mov	r0, r3
 8021c0c:	3720      	adds	r7, #32
 8021c0e:	46bd      	mov	sp, r7
 8021c10:	bd80      	pop	{r7, pc}
 8021c12:	bf00      	nop
 8021c14:	20001594 	.word	0x20001594
 8021c18:	e000ed04 	.word	0xe000ed04

08021c1c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8021c1c:	b580      	push	{r7, lr}
 8021c1e:	b088      	sub	sp, #32
 8021c20:	af00      	add	r7, sp, #0
 8021c22:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8021c24:	687b      	ldr	r3, [r7, #4]
 8021c26:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021c28:	f3ef 8305 	mrs	r3, IPSR
 8021c2c:	617b      	str	r3, [r7, #20]
  return(result);
 8021c2e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8021c30:	2b00      	cmp	r3, #0
 8021c32:	d10f      	bne.n	8021c54 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021c34:	f3ef 8310 	mrs	r3, PRIMASK
 8021c38:	613b      	str	r3, [r7, #16]
  return(result);
 8021c3a:	693b      	ldr	r3, [r7, #16]
 8021c3c:	2b00      	cmp	r3, #0
 8021c3e:	d105      	bne.n	8021c4c <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8021c40:	f3ef 8311 	mrs	r3, BASEPRI
 8021c44:	60fb      	str	r3, [r7, #12]
  return(result);
 8021c46:	68fb      	ldr	r3, [r7, #12]
 8021c48:	2b00      	cmp	r3, #0
 8021c4a:	d007      	beq.n	8021c5c <osSemaphoreDelete+0x40>
 8021c4c:	4b0d      	ldr	r3, [pc, #52]	; (8021c84 <osSemaphoreDelete+0x68>)
 8021c4e:	681b      	ldr	r3, [r3, #0]
 8021c50:	2b02      	cmp	r3, #2
 8021c52:	d103      	bne.n	8021c5c <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8021c54:	f06f 0305 	mvn.w	r3, #5
 8021c58:	61fb      	str	r3, [r7, #28]
 8021c5a:	e00e      	b.n	8021c7a <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8021c5c:	69bb      	ldr	r3, [r7, #24]
 8021c5e:	2b00      	cmp	r3, #0
 8021c60:	d103      	bne.n	8021c6a <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8021c62:	f06f 0303 	mvn.w	r3, #3
 8021c66:	61fb      	str	r3, [r7, #28]
 8021c68:	e007      	b.n	8021c7a <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8021c6a:	69b8      	ldr	r0, [r7, #24]
 8021c6c:	f001 fa8e 	bl	802318c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8021c70:	2300      	movs	r3, #0
 8021c72:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8021c74:	69b8      	ldr	r0, [r7, #24]
 8021c76:	f001 f916 	bl	8022ea6 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8021c7a:	69fb      	ldr	r3, [r7, #28]
}
 8021c7c:	4618      	mov	r0, r3
 8021c7e:	3720      	adds	r7, #32
 8021c80:	46bd      	mov	sp, r7
 8021c82:	bd80      	pop	{r7, pc}
 8021c84:	20001594 	.word	0x20001594

08021c88 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8021c88:	b580      	push	{r7, lr}
 8021c8a:	b08c      	sub	sp, #48	; 0x30
 8021c8c:	af02      	add	r7, sp, #8
 8021c8e:	60f8      	str	r0, [r7, #12]
 8021c90:	60b9      	str	r1, [r7, #8]
 8021c92:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8021c94:	2300      	movs	r3, #0
 8021c96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021c98:	f3ef 8305 	mrs	r3, IPSR
 8021c9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8021c9e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8021ca0:	2b00      	cmp	r3, #0
 8021ca2:	d170      	bne.n	8021d86 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8021ca8:	617b      	str	r3, [r7, #20]
  return(result);
 8021caa:	697b      	ldr	r3, [r7, #20]
 8021cac:	2b00      	cmp	r3, #0
 8021cae:	d105      	bne.n	8021cbc <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8021cb0:	f3ef 8311 	mrs	r3, BASEPRI
 8021cb4:	613b      	str	r3, [r7, #16]
  return(result);
 8021cb6:	693b      	ldr	r3, [r7, #16]
 8021cb8:	2b00      	cmp	r3, #0
 8021cba:	d003      	beq.n	8021cc4 <osMessageQueueNew+0x3c>
 8021cbc:	4b34      	ldr	r3, [pc, #208]	; (8021d90 <osMessageQueueNew+0x108>)
 8021cbe:	681b      	ldr	r3, [r3, #0]
 8021cc0:	2b02      	cmp	r3, #2
 8021cc2:	d060      	beq.n	8021d86 <osMessageQueueNew+0xfe>
 8021cc4:	68fb      	ldr	r3, [r7, #12]
 8021cc6:	2b00      	cmp	r3, #0
 8021cc8:	d05d      	beq.n	8021d86 <osMessageQueueNew+0xfe>
 8021cca:	68bb      	ldr	r3, [r7, #8]
 8021ccc:	2b00      	cmp	r3, #0
 8021cce:	d05a      	beq.n	8021d86 <osMessageQueueNew+0xfe>
    mem = -1;
 8021cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8021cd4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8021cd6:	687b      	ldr	r3, [r7, #4]
 8021cd8:	2b00      	cmp	r3, #0
 8021cda:	d029      	beq.n	8021d30 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8021cdc:	687b      	ldr	r3, [r7, #4]
 8021cde:	689b      	ldr	r3, [r3, #8]
 8021ce0:	2b00      	cmp	r3, #0
 8021ce2:	d012      	beq.n	8021d0a <osMessageQueueNew+0x82>
 8021ce4:	687b      	ldr	r3, [r7, #4]
 8021ce6:	68db      	ldr	r3, [r3, #12]
 8021ce8:	2b4f      	cmp	r3, #79	; 0x4f
 8021cea:	d90e      	bls.n	8021d0a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8021cec:	687b      	ldr	r3, [r7, #4]
 8021cee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8021cf0:	2b00      	cmp	r3, #0
 8021cf2:	d00a      	beq.n	8021d0a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8021cf4:	687b      	ldr	r3, [r7, #4]
 8021cf6:	695a      	ldr	r2, [r3, #20]
 8021cf8:	68fb      	ldr	r3, [r7, #12]
 8021cfa:	68b9      	ldr	r1, [r7, #8]
 8021cfc:	fb01 f303 	mul.w	r3, r1, r3
 8021d00:	429a      	cmp	r2, r3
 8021d02:	d302      	bcc.n	8021d0a <osMessageQueueNew+0x82>
        mem = 1;
 8021d04:	2301      	movs	r3, #1
 8021d06:	623b      	str	r3, [r7, #32]
 8021d08:	e014      	b.n	8021d34 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8021d0a:	687b      	ldr	r3, [r7, #4]
 8021d0c:	689b      	ldr	r3, [r3, #8]
 8021d0e:	2b00      	cmp	r3, #0
 8021d10:	d110      	bne.n	8021d34 <osMessageQueueNew+0xac>
 8021d12:	687b      	ldr	r3, [r7, #4]
 8021d14:	68db      	ldr	r3, [r3, #12]
 8021d16:	2b00      	cmp	r3, #0
 8021d18:	d10c      	bne.n	8021d34 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8021d1a:	687b      	ldr	r3, [r7, #4]
 8021d1c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8021d1e:	2b00      	cmp	r3, #0
 8021d20:	d108      	bne.n	8021d34 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8021d22:	687b      	ldr	r3, [r7, #4]
 8021d24:	695b      	ldr	r3, [r3, #20]
 8021d26:	2b00      	cmp	r3, #0
 8021d28:	d104      	bne.n	8021d34 <osMessageQueueNew+0xac>
          mem = 0;
 8021d2a:	2300      	movs	r3, #0
 8021d2c:	623b      	str	r3, [r7, #32]
 8021d2e:	e001      	b.n	8021d34 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8021d30:	2300      	movs	r3, #0
 8021d32:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8021d34:	6a3b      	ldr	r3, [r7, #32]
 8021d36:	2b01      	cmp	r3, #1
 8021d38:	d10c      	bne.n	8021d54 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8021d3a:	687b      	ldr	r3, [r7, #4]
 8021d3c:	691a      	ldr	r2, [r3, #16]
 8021d3e:	687b      	ldr	r3, [r7, #4]
 8021d40:	6899      	ldr	r1, [r3, #8]
 8021d42:	2300      	movs	r3, #0
 8021d44:	9300      	str	r3, [sp, #0]
 8021d46:	460b      	mov	r3, r1
 8021d48:	68b9      	ldr	r1, [r7, #8]
 8021d4a:	68f8      	ldr	r0, [r7, #12]
 8021d4c:	f000 fad4 	bl	80222f8 <xQueueGenericCreateStatic>
 8021d50:	6278      	str	r0, [r7, #36]	; 0x24
 8021d52:	e008      	b.n	8021d66 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8021d54:	6a3b      	ldr	r3, [r7, #32]
 8021d56:	2b00      	cmp	r3, #0
 8021d58:	d105      	bne.n	8021d66 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8021d5a:	2200      	movs	r2, #0
 8021d5c:	68b9      	ldr	r1, [r7, #8]
 8021d5e:	68f8      	ldr	r0, [r7, #12]
 8021d60:	f000 fb3d 	bl	80223de <xQueueGenericCreate>
 8021d64:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8021d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d68:	2b00      	cmp	r3, #0
 8021d6a:	d00c      	beq.n	8021d86 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8021d6c:	687b      	ldr	r3, [r7, #4]
 8021d6e:	2b00      	cmp	r3, #0
 8021d70:	d003      	beq.n	8021d7a <osMessageQueueNew+0xf2>
        name = attr->name;
 8021d72:	687b      	ldr	r3, [r7, #4]
 8021d74:	681b      	ldr	r3, [r3, #0]
 8021d76:	61fb      	str	r3, [r7, #28]
 8021d78:	e001      	b.n	8021d7e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8021d7a:	2300      	movs	r3, #0
 8021d7c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8021d7e:	69f9      	ldr	r1, [r7, #28]
 8021d80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021d82:	f001 f9db 	bl	802313c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8021d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8021d88:	4618      	mov	r0, r3
 8021d8a:	3728      	adds	r7, #40	; 0x28
 8021d8c:	46bd      	mov	sp, r7
 8021d8e:	bd80      	pop	{r7, pc}
 8021d90:	20001594 	.word	0x20001594

08021d94 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8021d94:	b580      	push	{r7, lr}
 8021d96:	b08a      	sub	sp, #40	; 0x28
 8021d98:	af00      	add	r7, sp, #0
 8021d9a:	60f8      	str	r0, [r7, #12]
 8021d9c:	60b9      	str	r1, [r7, #8]
 8021d9e:	603b      	str	r3, [r7, #0]
 8021da0:	4613      	mov	r3, r2
 8021da2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8021da4:	68fb      	ldr	r3, [r7, #12]
 8021da6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8021da8:	2300      	movs	r3, #0
 8021daa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021dac:	f3ef 8305 	mrs	r3, IPSR
 8021db0:	61fb      	str	r3, [r7, #28]
  return(result);
 8021db2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8021db4:	2b00      	cmp	r3, #0
 8021db6:	d10f      	bne.n	8021dd8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021db8:	f3ef 8310 	mrs	r3, PRIMASK
 8021dbc:	61bb      	str	r3, [r7, #24]
  return(result);
 8021dbe:	69bb      	ldr	r3, [r7, #24]
 8021dc0:	2b00      	cmp	r3, #0
 8021dc2:	d105      	bne.n	8021dd0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8021dc4:	f3ef 8311 	mrs	r3, BASEPRI
 8021dc8:	617b      	str	r3, [r7, #20]
  return(result);
 8021dca:	697b      	ldr	r3, [r7, #20]
 8021dcc:	2b00      	cmp	r3, #0
 8021dce:	d02c      	beq.n	8021e2a <osMessageQueuePut+0x96>
 8021dd0:	4b28      	ldr	r3, [pc, #160]	; (8021e74 <osMessageQueuePut+0xe0>)
 8021dd2:	681b      	ldr	r3, [r3, #0]
 8021dd4:	2b02      	cmp	r3, #2
 8021dd6:	d128      	bne.n	8021e2a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8021dd8:	6a3b      	ldr	r3, [r7, #32]
 8021dda:	2b00      	cmp	r3, #0
 8021ddc:	d005      	beq.n	8021dea <osMessageQueuePut+0x56>
 8021dde:	68bb      	ldr	r3, [r7, #8]
 8021de0:	2b00      	cmp	r3, #0
 8021de2:	d002      	beq.n	8021dea <osMessageQueuePut+0x56>
 8021de4:	683b      	ldr	r3, [r7, #0]
 8021de6:	2b00      	cmp	r3, #0
 8021de8:	d003      	beq.n	8021df2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8021dea:	f06f 0303 	mvn.w	r3, #3
 8021dee:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8021df0:	e039      	b.n	8021e66 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8021df2:	2300      	movs	r3, #0
 8021df4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8021df6:	f107 0210 	add.w	r2, r7, #16
 8021dfa:	2300      	movs	r3, #0
 8021dfc:	68b9      	ldr	r1, [r7, #8]
 8021dfe:	6a38      	ldr	r0, [r7, #32]
 8021e00:	f000 fcb0 	bl	8022764 <xQueueGenericSendFromISR>
 8021e04:	4603      	mov	r3, r0
 8021e06:	2b01      	cmp	r3, #1
 8021e08:	d003      	beq.n	8021e12 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8021e0a:	f06f 0302 	mvn.w	r3, #2
 8021e0e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8021e10:	e029      	b.n	8021e66 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8021e12:	693b      	ldr	r3, [r7, #16]
 8021e14:	2b00      	cmp	r3, #0
 8021e16:	d026      	beq.n	8021e66 <osMessageQueuePut+0xd2>
 8021e18:	4b17      	ldr	r3, [pc, #92]	; (8021e78 <osMessageQueuePut+0xe4>)
 8021e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021e1e:	601a      	str	r2, [r3, #0]
 8021e20:	f3bf 8f4f 	dsb	sy
 8021e24:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8021e28:	e01d      	b.n	8021e66 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8021e2a:	6a3b      	ldr	r3, [r7, #32]
 8021e2c:	2b00      	cmp	r3, #0
 8021e2e:	d002      	beq.n	8021e36 <osMessageQueuePut+0xa2>
 8021e30:	68bb      	ldr	r3, [r7, #8]
 8021e32:	2b00      	cmp	r3, #0
 8021e34:	d103      	bne.n	8021e3e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8021e36:	f06f 0303 	mvn.w	r3, #3
 8021e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8021e3c:	e014      	b.n	8021e68 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8021e3e:	2300      	movs	r3, #0
 8021e40:	683a      	ldr	r2, [r7, #0]
 8021e42:	68b9      	ldr	r1, [r7, #8]
 8021e44:	6a38      	ldr	r0, [r7, #32]
 8021e46:	f000 fb93 	bl	8022570 <xQueueGenericSend>
 8021e4a:	4603      	mov	r3, r0
 8021e4c:	2b01      	cmp	r3, #1
 8021e4e:	d00b      	beq.n	8021e68 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8021e50:	683b      	ldr	r3, [r7, #0]
 8021e52:	2b00      	cmp	r3, #0
 8021e54:	d003      	beq.n	8021e5e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8021e56:	f06f 0301 	mvn.w	r3, #1
 8021e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8021e5c:	e004      	b.n	8021e68 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8021e5e:	f06f 0302 	mvn.w	r3, #2
 8021e62:	627b      	str	r3, [r7, #36]	; 0x24
 8021e64:	e000      	b.n	8021e68 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8021e66:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8021e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8021e6a:	4618      	mov	r0, r3
 8021e6c:	3728      	adds	r7, #40	; 0x28
 8021e6e:	46bd      	mov	sp, r7
 8021e70:	bd80      	pop	{r7, pc}
 8021e72:	bf00      	nop
 8021e74:	20001594 	.word	0x20001594
 8021e78:	e000ed04 	.word	0xe000ed04

08021e7c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8021e7c:	b580      	push	{r7, lr}
 8021e7e:	b08a      	sub	sp, #40	; 0x28
 8021e80:	af00      	add	r7, sp, #0
 8021e82:	60f8      	str	r0, [r7, #12]
 8021e84:	60b9      	str	r1, [r7, #8]
 8021e86:	607a      	str	r2, [r7, #4]
 8021e88:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8021e8a:	68fb      	ldr	r3, [r7, #12]
 8021e8c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8021e8e:	2300      	movs	r3, #0
 8021e90:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021e92:	f3ef 8305 	mrs	r3, IPSR
 8021e96:	61fb      	str	r3, [r7, #28]
  return(result);
 8021e98:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8021e9a:	2b00      	cmp	r3, #0
 8021e9c:	d10f      	bne.n	8021ebe <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8021ea2:	61bb      	str	r3, [r7, #24]
  return(result);
 8021ea4:	69bb      	ldr	r3, [r7, #24]
 8021ea6:	2b00      	cmp	r3, #0
 8021ea8:	d105      	bne.n	8021eb6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8021eaa:	f3ef 8311 	mrs	r3, BASEPRI
 8021eae:	617b      	str	r3, [r7, #20]
  return(result);
 8021eb0:	697b      	ldr	r3, [r7, #20]
 8021eb2:	2b00      	cmp	r3, #0
 8021eb4:	d02c      	beq.n	8021f10 <osMessageQueueGet+0x94>
 8021eb6:	4b28      	ldr	r3, [pc, #160]	; (8021f58 <osMessageQueueGet+0xdc>)
 8021eb8:	681b      	ldr	r3, [r3, #0]
 8021eba:	2b02      	cmp	r3, #2
 8021ebc:	d128      	bne.n	8021f10 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8021ebe:	6a3b      	ldr	r3, [r7, #32]
 8021ec0:	2b00      	cmp	r3, #0
 8021ec2:	d005      	beq.n	8021ed0 <osMessageQueueGet+0x54>
 8021ec4:	68bb      	ldr	r3, [r7, #8]
 8021ec6:	2b00      	cmp	r3, #0
 8021ec8:	d002      	beq.n	8021ed0 <osMessageQueueGet+0x54>
 8021eca:	683b      	ldr	r3, [r7, #0]
 8021ecc:	2b00      	cmp	r3, #0
 8021ece:	d003      	beq.n	8021ed8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8021ed0:	f06f 0303 	mvn.w	r3, #3
 8021ed4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8021ed6:	e038      	b.n	8021f4a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8021ed8:	2300      	movs	r3, #0
 8021eda:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8021edc:	f107 0310 	add.w	r3, r7, #16
 8021ee0:	461a      	mov	r2, r3
 8021ee2:	68b9      	ldr	r1, [r7, #8]
 8021ee4:	6a38      	ldr	r0, [r7, #32]
 8021ee6:	f000 ff3f 	bl	8022d68 <xQueueReceiveFromISR>
 8021eea:	4603      	mov	r3, r0
 8021eec:	2b01      	cmp	r3, #1
 8021eee:	d003      	beq.n	8021ef8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8021ef0:	f06f 0302 	mvn.w	r3, #2
 8021ef4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8021ef6:	e028      	b.n	8021f4a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8021ef8:	693b      	ldr	r3, [r7, #16]
 8021efa:	2b00      	cmp	r3, #0
 8021efc:	d025      	beq.n	8021f4a <osMessageQueueGet+0xce>
 8021efe:	4b17      	ldr	r3, [pc, #92]	; (8021f5c <osMessageQueueGet+0xe0>)
 8021f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021f04:	601a      	str	r2, [r3, #0]
 8021f06:	f3bf 8f4f 	dsb	sy
 8021f0a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8021f0e:	e01c      	b.n	8021f4a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8021f10:	6a3b      	ldr	r3, [r7, #32]
 8021f12:	2b00      	cmp	r3, #0
 8021f14:	d002      	beq.n	8021f1c <osMessageQueueGet+0xa0>
 8021f16:	68bb      	ldr	r3, [r7, #8]
 8021f18:	2b00      	cmp	r3, #0
 8021f1a:	d103      	bne.n	8021f24 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8021f1c:	f06f 0303 	mvn.w	r3, #3
 8021f20:	627b      	str	r3, [r7, #36]	; 0x24
 8021f22:	e013      	b.n	8021f4c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8021f24:	683a      	ldr	r2, [r7, #0]
 8021f26:	68b9      	ldr	r1, [r7, #8]
 8021f28:	6a38      	ldr	r0, [r7, #32]
 8021f2a:	f000 fd39 	bl	80229a0 <xQueueReceive>
 8021f2e:	4603      	mov	r3, r0
 8021f30:	2b01      	cmp	r3, #1
 8021f32:	d00b      	beq.n	8021f4c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8021f34:	683b      	ldr	r3, [r7, #0]
 8021f36:	2b00      	cmp	r3, #0
 8021f38:	d003      	beq.n	8021f42 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8021f3a:	f06f 0301 	mvn.w	r3, #1
 8021f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8021f40:	e004      	b.n	8021f4c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8021f42:	f06f 0302 	mvn.w	r3, #2
 8021f46:	627b      	str	r3, [r7, #36]	; 0x24
 8021f48:	e000      	b.n	8021f4c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8021f4a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8021f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8021f4e:	4618      	mov	r0, r3
 8021f50:	3728      	adds	r7, #40	; 0x28
 8021f52:	46bd      	mov	sp, r7
 8021f54:	bd80      	pop	{r7, pc}
 8021f56:	bf00      	nop
 8021f58:	20001594 	.word	0x20001594
 8021f5c:	e000ed04 	.word	0xe000ed04

08021f60 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8021f60:	b580      	push	{r7, lr}
 8021f62:	b08c      	sub	sp, #48	; 0x30
 8021f64:	af00      	add	r7, sp, #0
 8021f66:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8021f68:	687b      	ldr	r3, [r7, #4]
 8021f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8021f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f6e:	2b00      	cmp	r3, #0
 8021f70:	d102      	bne.n	8021f78 <osMessageQueueGetSpace+0x18>
    space = 0U;
 8021f72:	2300      	movs	r3, #0
 8021f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021f76:	e033      	b.n	8021fe0 <osMessageQueueGetSpace+0x80>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021f78:	f3ef 8305 	mrs	r3, IPSR
 8021f7c:	623b      	str	r3, [r7, #32]
  return(result);
 8021f7e:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 8021f80:	2b00      	cmp	r3, #0
 8021f82:	d10f      	bne.n	8021fa4 <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021f84:	f3ef 8310 	mrs	r3, PRIMASK
 8021f88:	61fb      	str	r3, [r7, #28]
  return(result);
 8021f8a:	69fb      	ldr	r3, [r7, #28]
 8021f8c:	2b00      	cmp	r3, #0
 8021f8e:	d105      	bne.n	8021f9c <osMessageQueueGetSpace+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8021f90:	f3ef 8311 	mrs	r3, BASEPRI
 8021f94:	61bb      	str	r3, [r7, #24]
  return(result);
 8021f96:	69bb      	ldr	r3, [r7, #24]
 8021f98:	2b00      	cmp	r3, #0
 8021f9a:	d01d      	beq.n	8021fd8 <osMessageQueueGetSpace+0x78>
 8021f9c:	4b13      	ldr	r3, [pc, #76]	; (8021fec <osMessageQueueGetSpace+0x8c>)
 8021f9e:	681b      	ldr	r3, [r3, #0]
 8021fa0:	2b02      	cmp	r3, #2
 8021fa2:	d119      	bne.n	8021fd8 <osMessageQueueGetSpace+0x78>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8021fa4:	f3ef 8211 	mrs	r2, BASEPRI
 8021fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021fac:	f383 8811 	msr	BASEPRI, r3
 8021fb0:	f3bf 8f6f 	isb	sy
 8021fb4:	f3bf 8f4f 	dsb	sy
 8021fb8:	613a      	str	r2, [r7, #16]
 8021fba:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8021fbc:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 8021fbe:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8021fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8021fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021fc8:	1ad3      	subs	r3, r2, r3
 8021fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021fce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8021fd0:	697b      	ldr	r3, [r7, #20]
 8021fd2:	f383 8811 	msr	BASEPRI, r3

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 8021fd6:	e003      	b.n	8021fe0 <osMessageQueueGetSpace+0x80>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8021fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021fda:	f000 ff42 	bl	8022e62 <uxQueueSpacesAvailable>
 8021fde:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 8021fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8021fe2:	4618      	mov	r0, r3
 8021fe4:	3730      	adds	r7, #48	; 0x30
 8021fe6:	46bd      	mov	sp, r7
 8021fe8:	bd80      	pop	{r7, pc}
 8021fea:	bf00      	nop
 8021fec:	20001594 	.word	0x20001594

08021ff0 <osMessageQueueReset>:

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8021ff0:	b580      	push	{r7, lr}
 8021ff2:	b088      	sub	sp, #32
 8021ff4:	af00      	add	r7, sp, #0
 8021ff6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8021ff8:	687b      	ldr	r3, [r7, #4]
 8021ffa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021ffc:	f3ef 8305 	mrs	r3, IPSR
 8022000:	617b      	str	r3, [r7, #20]
  return(result);
 8022002:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8022004:	2b00      	cmp	r3, #0
 8022006:	d10f      	bne.n	8022028 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022008:	f3ef 8310 	mrs	r3, PRIMASK
 802200c:	613b      	str	r3, [r7, #16]
  return(result);
 802200e:	693b      	ldr	r3, [r7, #16]
 8022010:	2b00      	cmp	r3, #0
 8022012:	d105      	bne.n	8022020 <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8022014:	f3ef 8311 	mrs	r3, BASEPRI
 8022018:	60fb      	str	r3, [r7, #12]
  return(result);
 802201a:	68fb      	ldr	r3, [r7, #12]
 802201c:	2b00      	cmp	r3, #0
 802201e:	d007      	beq.n	8022030 <osMessageQueueReset+0x40>
 8022020:	4b0c      	ldr	r3, [pc, #48]	; (8022054 <osMessageQueueReset+0x64>)
 8022022:	681b      	ldr	r3, [r3, #0]
 8022024:	2b02      	cmp	r3, #2
 8022026:	d103      	bne.n	8022030 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 8022028:	f06f 0305 	mvn.w	r3, #5
 802202c:	61fb      	str	r3, [r7, #28]
 802202e:	e00c      	b.n	802204a <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 8022030:	69bb      	ldr	r3, [r7, #24]
 8022032:	2b00      	cmp	r3, #0
 8022034:	d103      	bne.n	802203e <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 8022036:	f06f 0303 	mvn.w	r3, #3
 802203a:	61fb      	str	r3, [r7, #28]
 802203c:	e005      	b.n	802204a <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 802203e:	2300      	movs	r3, #0
 8022040:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 8022042:	2100      	movs	r1, #0
 8022044:	69b8      	ldr	r0, [r7, #24]
 8022046:	f000 f8ef 	bl	8022228 <xQueueGenericReset>
  }

  return (stat);
 802204a:	69fb      	ldr	r3, [r7, #28]
}
 802204c:	4618      	mov	r0, r3
 802204e:	3720      	adds	r7, #32
 8022050:	46bd      	mov	sp, r7
 8022052:	bd80      	pop	{r7, pc}
 8022054:	20001594 	.word	0x20001594

08022058 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8022058:	b480      	push	{r7}
 802205a:	b085      	sub	sp, #20
 802205c:	af00      	add	r7, sp, #0
 802205e:	60f8      	str	r0, [r7, #12]
 8022060:	60b9      	str	r1, [r7, #8]
 8022062:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8022064:	68fb      	ldr	r3, [r7, #12]
 8022066:	4a07      	ldr	r2, [pc, #28]	; (8022084 <vApplicationGetIdleTaskMemory+0x2c>)
 8022068:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 802206a:	68bb      	ldr	r3, [r7, #8]
 802206c:	4a06      	ldr	r2, [pc, #24]	; (8022088 <vApplicationGetIdleTaskMemory+0x30>)
 802206e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8022070:	687b      	ldr	r3, [r7, #4]
 8022072:	2280      	movs	r2, #128	; 0x80
 8022074:	601a      	str	r2, [r3, #0]
}
 8022076:	bf00      	nop
 8022078:	3714      	adds	r7, #20
 802207a:	46bd      	mov	sp, r7
 802207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022080:	4770      	bx	lr
 8022082:	bf00      	nop
 8022084:	20001598 	.word	0x20001598
 8022088:	200015f4 	.word	0x200015f4

0802208c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 802208c:	b480      	push	{r7}
 802208e:	b085      	sub	sp, #20
 8022090:	af00      	add	r7, sp, #0
 8022092:	60f8      	str	r0, [r7, #12]
 8022094:	60b9      	str	r1, [r7, #8]
 8022096:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8022098:	68fb      	ldr	r3, [r7, #12]
 802209a:	4a07      	ldr	r2, [pc, #28]	; (80220b8 <vApplicationGetTimerTaskMemory+0x2c>)
 802209c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 802209e:	68bb      	ldr	r3, [r7, #8]
 80220a0:	4a06      	ldr	r2, [pc, #24]	; (80220bc <vApplicationGetTimerTaskMemory+0x30>)
 80220a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80220a4:	687b      	ldr	r3, [r7, #4]
 80220a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80220aa:	601a      	str	r2, [r3, #0]
}
 80220ac:	bf00      	nop
 80220ae:	3714      	adds	r7, #20
 80220b0:	46bd      	mov	sp, r7
 80220b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220b6:	4770      	bx	lr
 80220b8:	200017f4 	.word	0x200017f4
 80220bc:	20001850 	.word	0x20001850

080220c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80220c0:	b480      	push	{r7}
 80220c2:	b083      	sub	sp, #12
 80220c4:	af00      	add	r7, sp, #0
 80220c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80220c8:	687b      	ldr	r3, [r7, #4]
 80220ca:	f103 0208 	add.w	r2, r3, #8
 80220ce:	687b      	ldr	r3, [r7, #4]
 80220d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80220d2:	687b      	ldr	r3, [r7, #4]
 80220d4:	f04f 32ff 	mov.w	r2, #4294967295
 80220d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80220da:	687b      	ldr	r3, [r7, #4]
 80220dc:	f103 0208 	add.w	r2, r3, #8
 80220e0:	687b      	ldr	r3, [r7, #4]
 80220e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80220e4:	687b      	ldr	r3, [r7, #4]
 80220e6:	f103 0208 	add.w	r2, r3, #8
 80220ea:	687b      	ldr	r3, [r7, #4]
 80220ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80220ee:	687b      	ldr	r3, [r7, #4]
 80220f0:	2200      	movs	r2, #0
 80220f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80220f4:	bf00      	nop
 80220f6:	370c      	adds	r7, #12
 80220f8:	46bd      	mov	sp, r7
 80220fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220fe:	4770      	bx	lr

08022100 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8022100:	b480      	push	{r7}
 8022102:	b083      	sub	sp, #12
 8022104:	af00      	add	r7, sp, #0
 8022106:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8022108:	687b      	ldr	r3, [r7, #4]
 802210a:	2200      	movs	r2, #0
 802210c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 802210e:	bf00      	nop
 8022110:	370c      	adds	r7, #12
 8022112:	46bd      	mov	sp, r7
 8022114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022118:	4770      	bx	lr

0802211a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 802211a:	b480      	push	{r7}
 802211c:	b085      	sub	sp, #20
 802211e:	af00      	add	r7, sp, #0
 8022120:	6078      	str	r0, [r7, #4]
 8022122:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8022124:	687b      	ldr	r3, [r7, #4]
 8022126:	685b      	ldr	r3, [r3, #4]
 8022128:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 802212a:	683b      	ldr	r3, [r7, #0]
 802212c:	68fa      	ldr	r2, [r7, #12]
 802212e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8022130:	68fb      	ldr	r3, [r7, #12]
 8022132:	689a      	ldr	r2, [r3, #8]
 8022134:	683b      	ldr	r3, [r7, #0]
 8022136:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8022138:	68fb      	ldr	r3, [r7, #12]
 802213a:	689b      	ldr	r3, [r3, #8]
 802213c:	683a      	ldr	r2, [r7, #0]
 802213e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8022140:	68fb      	ldr	r3, [r7, #12]
 8022142:	683a      	ldr	r2, [r7, #0]
 8022144:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8022146:	683b      	ldr	r3, [r7, #0]
 8022148:	687a      	ldr	r2, [r7, #4]
 802214a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 802214c:	687b      	ldr	r3, [r7, #4]
 802214e:	681b      	ldr	r3, [r3, #0]
 8022150:	1c5a      	adds	r2, r3, #1
 8022152:	687b      	ldr	r3, [r7, #4]
 8022154:	601a      	str	r2, [r3, #0]
}
 8022156:	bf00      	nop
 8022158:	3714      	adds	r7, #20
 802215a:	46bd      	mov	sp, r7
 802215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022160:	4770      	bx	lr

08022162 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8022162:	b480      	push	{r7}
 8022164:	b085      	sub	sp, #20
 8022166:	af00      	add	r7, sp, #0
 8022168:	6078      	str	r0, [r7, #4]
 802216a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 802216c:	683b      	ldr	r3, [r7, #0]
 802216e:	681b      	ldr	r3, [r3, #0]
 8022170:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8022172:	68bb      	ldr	r3, [r7, #8]
 8022174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022178:	d103      	bne.n	8022182 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 802217a:	687b      	ldr	r3, [r7, #4]
 802217c:	691b      	ldr	r3, [r3, #16]
 802217e:	60fb      	str	r3, [r7, #12]
 8022180:	e00c      	b.n	802219c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8022182:	687b      	ldr	r3, [r7, #4]
 8022184:	3308      	adds	r3, #8
 8022186:	60fb      	str	r3, [r7, #12]
 8022188:	e002      	b.n	8022190 <vListInsert+0x2e>
 802218a:	68fb      	ldr	r3, [r7, #12]
 802218c:	685b      	ldr	r3, [r3, #4]
 802218e:	60fb      	str	r3, [r7, #12]
 8022190:	68fb      	ldr	r3, [r7, #12]
 8022192:	685b      	ldr	r3, [r3, #4]
 8022194:	681b      	ldr	r3, [r3, #0]
 8022196:	68ba      	ldr	r2, [r7, #8]
 8022198:	429a      	cmp	r2, r3
 802219a:	d2f6      	bcs.n	802218a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 802219c:	68fb      	ldr	r3, [r7, #12]
 802219e:	685a      	ldr	r2, [r3, #4]
 80221a0:	683b      	ldr	r3, [r7, #0]
 80221a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80221a4:	683b      	ldr	r3, [r7, #0]
 80221a6:	685b      	ldr	r3, [r3, #4]
 80221a8:	683a      	ldr	r2, [r7, #0]
 80221aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80221ac:	683b      	ldr	r3, [r7, #0]
 80221ae:	68fa      	ldr	r2, [r7, #12]
 80221b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80221b2:	68fb      	ldr	r3, [r7, #12]
 80221b4:	683a      	ldr	r2, [r7, #0]
 80221b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80221b8:	683b      	ldr	r3, [r7, #0]
 80221ba:	687a      	ldr	r2, [r7, #4]
 80221bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80221be:	687b      	ldr	r3, [r7, #4]
 80221c0:	681b      	ldr	r3, [r3, #0]
 80221c2:	1c5a      	adds	r2, r3, #1
 80221c4:	687b      	ldr	r3, [r7, #4]
 80221c6:	601a      	str	r2, [r3, #0]
}
 80221c8:	bf00      	nop
 80221ca:	3714      	adds	r7, #20
 80221cc:	46bd      	mov	sp, r7
 80221ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221d2:	4770      	bx	lr

080221d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80221d4:	b480      	push	{r7}
 80221d6:	b085      	sub	sp, #20
 80221d8:	af00      	add	r7, sp, #0
 80221da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80221dc:	687b      	ldr	r3, [r7, #4]
 80221de:	691b      	ldr	r3, [r3, #16]
 80221e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80221e2:	687b      	ldr	r3, [r7, #4]
 80221e4:	685b      	ldr	r3, [r3, #4]
 80221e6:	687a      	ldr	r2, [r7, #4]
 80221e8:	6892      	ldr	r2, [r2, #8]
 80221ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80221ec:	687b      	ldr	r3, [r7, #4]
 80221ee:	689b      	ldr	r3, [r3, #8]
 80221f0:	687a      	ldr	r2, [r7, #4]
 80221f2:	6852      	ldr	r2, [r2, #4]
 80221f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80221f6:	68fb      	ldr	r3, [r7, #12]
 80221f8:	685b      	ldr	r3, [r3, #4]
 80221fa:	687a      	ldr	r2, [r7, #4]
 80221fc:	429a      	cmp	r2, r3
 80221fe:	d103      	bne.n	8022208 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8022200:	687b      	ldr	r3, [r7, #4]
 8022202:	689a      	ldr	r2, [r3, #8]
 8022204:	68fb      	ldr	r3, [r7, #12]
 8022206:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8022208:	687b      	ldr	r3, [r7, #4]
 802220a:	2200      	movs	r2, #0
 802220c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 802220e:	68fb      	ldr	r3, [r7, #12]
 8022210:	681b      	ldr	r3, [r3, #0]
 8022212:	1e5a      	subs	r2, r3, #1
 8022214:	68fb      	ldr	r3, [r7, #12]
 8022216:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8022218:	68fb      	ldr	r3, [r7, #12]
 802221a:	681b      	ldr	r3, [r3, #0]
}
 802221c:	4618      	mov	r0, r3
 802221e:	3714      	adds	r7, #20
 8022220:	46bd      	mov	sp, r7
 8022222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022226:	4770      	bx	lr

08022228 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8022228:	b580      	push	{r7, lr}
 802222a:	b084      	sub	sp, #16
 802222c:	af00      	add	r7, sp, #0
 802222e:	6078      	str	r0, [r7, #4]
 8022230:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8022232:	687b      	ldr	r3, [r7, #4]
 8022234:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8022236:	68fb      	ldr	r3, [r7, #12]
 8022238:	2b00      	cmp	r3, #0
 802223a:	d109      	bne.n	8022250 <xQueueGenericReset+0x28>
	__asm volatile
 802223c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022240:	f383 8811 	msr	BASEPRI, r3
 8022244:	f3bf 8f6f 	isb	sy
 8022248:	f3bf 8f4f 	dsb	sy
 802224c:	60bb      	str	r3, [r7, #8]
 802224e:	e7fe      	b.n	802224e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8022250:	f002 fecc 	bl	8024fec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8022254:	68fb      	ldr	r3, [r7, #12]
 8022256:	681a      	ldr	r2, [r3, #0]
 8022258:	68fb      	ldr	r3, [r7, #12]
 802225a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802225c:	68f9      	ldr	r1, [r7, #12]
 802225e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8022260:	fb01 f303 	mul.w	r3, r1, r3
 8022264:	441a      	add	r2, r3
 8022266:	68fb      	ldr	r3, [r7, #12]
 8022268:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 802226a:	68fb      	ldr	r3, [r7, #12]
 802226c:	2200      	movs	r2, #0
 802226e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8022270:	68fb      	ldr	r3, [r7, #12]
 8022272:	681a      	ldr	r2, [r3, #0]
 8022274:	68fb      	ldr	r3, [r7, #12]
 8022276:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8022278:	68fb      	ldr	r3, [r7, #12]
 802227a:	681a      	ldr	r2, [r3, #0]
 802227c:	68fb      	ldr	r3, [r7, #12]
 802227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022280:	3b01      	subs	r3, #1
 8022282:	68f9      	ldr	r1, [r7, #12]
 8022284:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8022286:	fb01 f303 	mul.w	r3, r1, r3
 802228a:	441a      	add	r2, r3
 802228c:	68fb      	ldr	r3, [r7, #12]
 802228e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8022290:	68fb      	ldr	r3, [r7, #12]
 8022292:	22ff      	movs	r2, #255	; 0xff
 8022294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8022298:	68fb      	ldr	r3, [r7, #12]
 802229a:	22ff      	movs	r2, #255	; 0xff
 802229c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80222a0:	683b      	ldr	r3, [r7, #0]
 80222a2:	2b00      	cmp	r3, #0
 80222a4:	d114      	bne.n	80222d0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80222a6:	68fb      	ldr	r3, [r7, #12]
 80222a8:	691b      	ldr	r3, [r3, #16]
 80222aa:	2b00      	cmp	r3, #0
 80222ac:	d01a      	beq.n	80222e4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80222ae:	68fb      	ldr	r3, [r7, #12]
 80222b0:	3310      	adds	r3, #16
 80222b2:	4618      	mov	r0, r3
 80222b4:	f001 fca6 	bl	8023c04 <xTaskRemoveFromEventList>
 80222b8:	4603      	mov	r3, r0
 80222ba:	2b00      	cmp	r3, #0
 80222bc:	d012      	beq.n	80222e4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80222be:	4b0d      	ldr	r3, [pc, #52]	; (80222f4 <xQueueGenericReset+0xcc>)
 80222c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80222c4:	601a      	str	r2, [r3, #0]
 80222c6:	f3bf 8f4f 	dsb	sy
 80222ca:	f3bf 8f6f 	isb	sy
 80222ce:	e009      	b.n	80222e4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80222d0:	68fb      	ldr	r3, [r7, #12]
 80222d2:	3310      	adds	r3, #16
 80222d4:	4618      	mov	r0, r3
 80222d6:	f7ff fef3 	bl	80220c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80222da:	68fb      	ldr	r3, [r7, #12]
 80222dc:	3324      	adds	r3, #36	; 0x24
 80222de:	4618      	mov	r0, r3
 80222e0:	f7ff feee 	bl	80220c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80222e4:	f002 feb0 	bl	8025048 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80222e8:	2301      	movs	r3, #1
}
 80222ea:	4618      	mov	r0, r3
 80222ec:	3710      	adds	r7, #16
 80222ee:	46bd      	mov	sp, r7
 80222f0:	bd80      	pop	{r7, pc}
 80222f2:	bf00      	nop
 80222f4:	e000ed04 	.word	0xe000ed04

080222f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80222f8:	b580      	push	{r7, lr}
 80222fa:	b08e      	sub	sp, #56	; 0x38
 80222fc:	af02      	add	r7, sp, #8
 80222fe:	60f8      	str	r0, [r7, #12]
 8022300:	60b9      	str	r1, [r7, #8]
 8022302:	607a      	str	r2, [r7, #4]
 8022304:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8022306:	68fb      	ldr	r3, [r7, #12]
 8022308:	2b00      	cmp	r3, #0
 802230a:	d109      	bne.n	8022320 <xQueueGenericCreateStatic+0x28>
 802230c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022310:	f383 8811 	msr	BASEPRI, r3
 8022314:	f3bf 8f6f 	isb	sy
 8022318:	f3bf 8f4f 	dsb	sy
 802231c:	62bb      	str	r3, [r7, #40]	; 0x28
 802231e:	e7fe      	b.n	802231e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8022320:	683b      	ldr	r3, [r7, #0]
 8022322:	2b00      	cmp	r3, #0
 8022324:	d109      	bne.n	802233a <xQueueGenericCreateStatic+0x42>
 8022326:	f04f 0350 	mov.w	r3, #80	; 0x50
 802232a:	f383 8811 	msr	BASEPRI, r3
 802232e:	f3bf 8f6f 	isb	sy
 8022332:	f3bf 8f4f 	dsb	sy
 8022336:	627b      	str	r3, [r7, #36]	; 0x24
 8022338:	e7fe      	b.n	8022338 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 802233a:	687b      	ldr	r3, [r7, #4]
 802233c:	2b00      	cmp	r3, #0
 802233e:	d002      	beq.n	8022346 <xQueueGenericCreateStatic+0x4e>
 8022340:	68bb      	ldr	r3, [r7, #8]
 8022342:	2b00      	cmp	r3, #0
 8022344:	d001      	beq.n	802234a <xQueueGenericCreateStatic+0x52>
 8022346:	2301      	movs	r3, #1
 8022348:	e000      	b.n	802234c <xQueueGenericCreateStatic+0x54>
 802234a:	2300      	movs	r3, #0
 802234c:	2b00      	cmp	r3, #0
 802234e:	d109      	bne.n	8022364 <xQueueGenericCreateStatic+0x6c>
 8022350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022354:	f383 8811 	msr	BASEPRI, r3
 8022358:	f3bf 8f6f 	isb	sy
 802235c:	f3bf 8f4f 	dsb	sy
 8022360:	623b      	str	r3, [r7, #32]
 8022362:	e7fe      	b.n	8022362 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8022364:	687b      	ldr	r3, [r7, #4]
 8022366:	2b00      	cmp	r3, #0
 8022368:	d102      	bne.n	8022370 <xQueueGenericCreateStatic+0x78>
 802236a:	68bb      	ldr	r3, [r7, #8]
 802236c:	2b00      	cmp	r3, #0
 802236e:	d101      	bne.n	8022374 <xQueueGenericCreateStatic+0x7c>
 8022370:	2301      	movs	r3, #1
 8022372:	e000      	b.n	8022376 <xQueueGenericCreateStatic+0x7e>
 8022374:	2300      	movs	r3, #0
 8022376:	2b00      	cmp	r3, #0
 8022378:	d109      	bne.n	802238e <xQueueGenericCreateStatic+0x96>
 802237a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802237e:	f383 8811 	msr	BASEPRI, r3
 8022382:	f3bf 8f6f 	isb	sy
 8022386:	f3bf 8f4f 	dsb	sy
 802238a:	61fb      	str	r3, [r7, #28]
 802238c:	e7fe      	b.n	802238c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 802238e:	2350      	movs	r3, #80	; 0x50
 8022390:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8022392:	697b      	ldr	r3, [r7, #20]
 8022394:	2b50      	cmp	r3, #80	; 0x50
 8022396:	d009      	beq.n	80223ac <xQueueGenericCreateStatic+0xb4>
 8022398:	f04f 0350 	mov.w	r3, #80	; 0x50
 802239c:	f383 8811 	msr	BASEPRI, r3
 80223a0:	f3bf 8f6f 	isb	sy
 80223a4:	f3bf 8f4f 	dsb	sy
 80223a8:	61bb      	str	r3, [r7, #24]
 80223aa:	e7fe      	b.n	80223aa <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80223ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80223ae:	683b      	ldr	r3, [r7, #0]
 80223b0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80223b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80223b4:	2b00      	cmp	r3, #0
 80223b6:	d00d      	beq.n	80223d4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80223b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80223ba:	2201      	movs	r2, #1
 80223bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80223c0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80223c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80223c6:	9300      	str	r3, [sp, #0]
 80223c8:	4613      	mov	r3, r2
 80223ca:	687a      	ldr	r2, [r7, #4]
 80223cc:	68b9      	ldr	r1, [r7, #8]
 80223ce:	68f8      	ldr	r0, [r7, #12]
 80223d0:	f000 f844 	bl	802245c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80223d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80223d6:	4618      	mov	r0, r3
 80223d8:	3730      	adds	r7, #48	; 0x30
 80223da:	46bd      	mov	sp, r7
 80223dc:	bd80      	pop	{r7, pc}

080223de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80223de:	b580      	push	{r7, lr}
 80223e0:	b08a      	sub	sp, #40	; 0x28
 80223e2:	af02      	add	r7, sp, #8
 80223e4:	60f8      	str	r0, [r7, #12]
 80223e6:	60b9      	str	r1, [r7, #8]
 80223e8:	4613      	mov	r3, r2
 80223ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80223ec:	68fb      	ldr	r3, [r7, #12]
 80223ee:	2b00      	cmp	r3, #0
 80223f0:	d109      	bne.n	8022406 <xQueueGenericCreate+0x28>
 80223f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80223f6:	f383 8811 	msr	BASEPRI, r3
 80223fa:	f3bf 8f6f 	isb	sy
 80223fe:	f3bf 8f4f 	dsb	sy
 8022402:	613b      	str	r3, [r7, #16]
 8022404:	e7fe      	b.n	8022404 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8022406:	68bb      	ldr	r3, [r7, #8]
 8022408:	2b00      	cmp	r3, #0
 802240a:	d102      	bne.n	8022412 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 802240c:	2300      	movs	r3, #0
 802240e:	61fb      	str	r3, [r7, #28]
 8022410:	e004      	b.n	802241c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022412:	68fb      	ldr	r3, [r7, #12]
 8022414:	68ba      	ldr	r2, [r7, #8]
 8022416:	fb02 f303 	mul.w	r3, r2, r3
 802241a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 802241c:	69fb      	ldr	r3, [r7, #28]
 802241e:	3350      	adds	r3, #80	; 0x50
 8022420:	4618      	mov	r0, r3
 8022422:	f002 fefd 	bl	8025220 <pvPortMalloc>
 8022426:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8022428:	69bb      	ldr	r3, [r7, #24]
 802242a:	2b00      	cmp	r3, #0
 802242c:	d011      	beq.n	8022452 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 802242e:	69bb      	ldr	r3, [r7, #24]
 8022430:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8022432:	697b      	ldr	r3, [r7, #20]
 8022434:	3350      	adds	r3, #80	; 0x50
 8022436:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8022438:	69bb      	ldr	r3, [r7, #24]
 802243a:	2200      	movs	r2, #0
 802243c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8022440:	79fa      	ldrb	r2, [r7, #7]
 8022442:	69bb      	ldr	r3, [r7, #24]
 8022444:	9300      	str	r3, [sp, #0]
 8022446:	4613      	mov	r3, r2
 8022448:	697a      	ldr	r2, [r7, #20]
 802244a:	68b9      	ldr	r1, [r7, #8]
 802244c:	68f8      	ldr	r0, [r7, #12]
 802244e:	f000 f805 	bl	802245c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8022452:	69bb      	ldr	r3, [r7, #24]
	}
 8022454:	4618      	mov	r0, r3
 8022456:	3720      	adds	r7, #32
 8022458:	46bd      	mov	sp, r7
 802245a:	bd80      	pop	{r7, pc}

0802245c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 802245c:	b580      	push	{r7, lr}
 802245e:	b084      	sub	sp, #16
 8022460:	af00      	add	r7, sp, #0
 8022462:	60f8      	str	r0, [r7, #12]
 8022464:	60b9      	str	r1, [r7, #8]
 8022466:	607a      	str	r2, [r7, #4]
 8022468:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 802246a:	68bb      	ldr	r3, [r7, #8]
 802246c:	2b00      	cmp	r3, #0
 802246e:	d103      	bne.n	8022478 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8022470:	69bb      	ldr	r3, [r7, #24]
 8022472:	69ba      	ldr	r2, [r7, #24]
 8022474:	601a      	str	r2, [r3, #0]
 8022476:	e002      	b.n	802247e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8022478:	69bb      	ldr	r3, [r7, #24]
 802247a:	687a      	ldr	r2, [r7, #4]
 802247c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 802247e:	69bb      	ldr	r3, [r7, #24]
 8022480:	68fa      	ldr	r2, [r7, #12]
 8022482:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8022484:	69bb      	ldr	r3, [r7, #24]
 8022486:	68ba      	ldr	r2, [r7, #8]
 8022488:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 802248a:	2101      	movs	r1, #1
 802248c:	69b8      	ldr	r0, [r7, #24]
 802248e:	f7ff fecb 	bl	8022228 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8022492:	69bb      	ldr	r3, [r7, #24]
 8022494:	78fa      	ldrb	r2, [r7, #3]
 8022496:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 802249a:	bf00      	nop
 802249c:	3710      	adds	r7, #16
 802249e:	46bd      	mov	sp, r7
 80224a0:	bd80      	pop	{r7, pc}

080224a2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80224a2:	b580      	push	{r7, lr}
 80224a4:	b08a      	sub	sp, #40	; 0x28
 80224a6:	af02      	add	r7, sp, #8
 80224a8:	60f8      	str	r0, [r7, #12]
 80224aa:	60b9      	str	r1, [r7, #8]
 80224ac:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80224ae:	68fb      	ldr	r3, [r7, #12]
 80224b0:	2b00      	cmp	r3, #0
 80224b2:	d109      	bne.n	80224c8 <xQueueCreateCountingSemaphoreStatic+0x26>
 80224b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80224b8:	f383 8811 	msr	BASEPRI, r3
 80224bc:	f3bf 8f6f 	isb	sy
 80224c0:	f3bf 8f4f 	dsb	sy
 80224c4:	61bb      	str	r3, [r7, #24]
 80224c6:	e7fe      	b.n	80224c6 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80224c8:	68ba      	ldr	r2, [r7, #8]
 80224ca:	68fb      	ldr	r3, [r7, #12]
 80224cc:	429a      	cmp	r2, r3
 80224ce:	d909      	bls.n	80224e4 <xQueueCreateCountingSemaphoreStatic+0x42>
 80224d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80224d4:	f383 8811 	msr	BASEPRI, r3
 80224d8:	f3bf 8f6f 	isb	sy
 80224dc:	f3bf 8f4f 	dsb	sy
 80224e0:	617b      	str	r3, [r7, #20]
 80224e2:	e7fe      	b.n	80224e2 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80224e4:	2302      	movs	r3, #2
 80224e6:	9300      	str	r3, [sp, #0]
 80224e8:	687b      	ldr	r3, [r7, #4]
 80224ea:	2200      	movs	r2, #0
 80224ec:	2100      	movs	r1, #0
 80224ee:	68f8      	ldr	r0, [r7, #12]
 80224f0:	f7ff ff02 	bl	80222f8 <xQueueGenericCreateStatic>
 80224f4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80224f6:	69fb      	ldr	r3, [r7, #28]
 80224f8:	2b00      	cmp	r3, #0
 80224fa:	d002      	beq.n	8022502 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80224fc:	69fb      	ldr	r3, [r7, #28]
 80224fe:	68ba      	ldr	r2, [r7, #8]
 8022500:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8022502:	69fb      	ldr	r3, [r7, #28]
	}
 8022504:	4618      	mov	r0, r3
 8022506:	3720      	adds	r7, #32
 8022508:	46bd      	mov	sp, r7
 802250a:	bd80      	pop	{r7, pc}

0802250c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 802250c:	b580      	push	{r7, lr}
 802250e:	b086      	sub	sp, #24
 8022510:	af00      	add	r7, sp, #0
 8022512:	6078      	str	r0, [r7, #4]
 8022514:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8022516:	687b      	ldr	r3, [r7, #4]
 8022518:	2b00      	cmp	r3, #0
 802251a:	d109      	bne.n	8022530 <xQueueCreateCountingSemaphore+0x24>
 802251c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022520:	f383 8811 	msr	BASEPRI, r3
 8022524:	f3bf 8f6f 	isb	sy
 8022528:	f3bf 8f4f 	dsb	sy
 802252c:	613b      	str	r3, [r7, #16]
 802252e:	e7fe      	b.n	802252e <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8022530:	683a      	ldr	r2, [r7, #0]
 8022532:	687b      	ldr	r3, [r7, #4]
 8022534:	429a      	cmp	r2, r3
 8022536:	d909      	bls.n	802254c <xQueueCreateCountingSemaphore+0x40>
 8022538:	f04f 0350 	mov.w	r3, #80	; 0x50
 802253c:	f383 8811 	msr	BASEPRI, r3
 8022540:	f3bf 8f6f 	isb	sy
 8022544:	f3bf 8f4f 	dsb	sy
 8022548:	60fb      	str	r3, [r7, #12]
 802254a:	e7fe      	b.n	802254a <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 802254c:	2202      	movs	r2, #2
 802254e:	2100      	movs	r1, #0
 8022550:	6878      	ldr	r0, [r7, #4]
 8022552:	f7ff ff44 	bl	80223de <xQueueGenericCreate>
 8022556:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8022558:	697b      	ldr	r3, [r7, #20]
 802255a:	2b00      	cmp	r3, #0
 802255c:	d002      	beq.n	8022564 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 802255e:	697b      	ldr	r3, [r7, #20]
 8022560:	683a      	ldr	r2, [r7, #0]
 8022562:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8022564:	697b      	ldr	r3, [r7, #20]
	}
 8022566:	4618      	mov	r0, r3
 8022568:	3718      	adds	r7, #24
 802256a:	46bd      	mov	sp, r7
 802256c:	bd80      	pop	{r7, pc}
	...

08022570 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8022570:	b580      	push	{r7, lr}
 8022572:	b08e      	sub	sp, #56	; 0x38
 8022574:	af00      	add	r7, sp, #0
 8022576:	60f8      	str	r0, [r7, #12]
 8022578:	60b9      	str	r1, [r7, #8]
 802257a:	607a      	str	r2, [r7, #4]
 802257c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 802257e:	2300      	movs	r3, #0
 8022580:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8022582:	68fb      	ldr	r3, [r7, #12]
 8022584:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8022586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022588:	2b00      	cmp	r3, #0
 802258a:	d109      	bne.n	80225a0 <xQueueGenericSend+0x30>
 802258c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022590:	f383 8811 	msr	BASEPRI, r3
 8022594:	f3bf 8f6f 	isb	sy
 8022598:	f3bf 8f4f 	dsb	sy
 802259c:	62bb      	str	r3, [r7, #40]	; 0x28
 802259e:	e7fe      	b.n	802259e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80225a0:	68bb      	ldr	r3, [r7, #8]
 80225a2:	2b00      	cmp	r3, #0
 80225a4:	d103      	bne.n	80225ae <xQueueGenericSend+0x3e>
 80225a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80225a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80225aa:	2b00      	cmp	r3, #0
 80225ac:	d101      	bne.n	80225b2 <xQueueGenericSend+0x42>
 80225ae:	2301      	movs	r3, #1
 80225b0:	e000      	b.n	80225b4 <xQueueGenericSend+0x44>
 80225b2:	2300      	movs	r3, #0
 80225b4:	2b00      	cmp	r3, #0
 80225b6:	d109      	bne.n	80225cc <xQueueGenericSend+0x5c>
 80225b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80225bc:	f383 8811 	msr	BASEPRI, r3
 80225c0:	f3bf 8f6f 	isb	sy
 80225c4:	f3bf 8f4f 	dsb	sy
 80225c8:	627b      	str	r3, [r7, #36]	; 0x24
 80225ca:	e7fe      	b.n	80225ca <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80225cc:	683b      	ldr	r3, [r7, #0]
 80225ce:	2b02      	cmp	r3, #2
 80225d0:	d103      	bne.n	80225da <xQueueGenericSend+0x6a>
 80225d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80225d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80225d6:	2b01      	cmp	r3, #1
 80225d8:	d101      	bne.n	80225de <xQueueGenericSend+0x6e>
 80225da:	2301      	movs	r3, #1
 80225dc:	e000      	b.n	80225e0 <xQueueGenericSend+0x70>
 80225de:	2300      	movs	r3, #0
 80225e0:	2b00      	cmp	r3, #0
 80225e2:	d109      	bne.n	80225f8 <xQueueGenericSend+0x88>
 80225e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80225e8:	f383 8811 	msr	BASEPRI, r3
 80225ec:	f3bf 8f6f 	isb	sy
 80225f0:	f3bf 8f4f 	dsb	sy
 80225f4:	623b      	str	r3, [r7, #32]
 80225f6:	e7fe      	b.n	80225f6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80225f8:	f001 fcca 	bl	8023f90 <xTaskGetSchedulerState>
 80225fc:	4603      	mov	r3, r0
 80225fe:	2b00      	cmp	r3, #0
 8022600:	d102      	bne.n	8022608 <xQueueGenericSend+0x98>
 8022602:	687b      	ldr	r3, [r7, #4]
 8022604:	2b00      	cmp	r3, #0
 8022606:	d101      	bne.n	802260c <xQueueGenericSend+0x9c>
 8022608:	2301      	movs	r3, #1
 802260a:	e000      	b.n	802260e <xQueueGenericSend+0x9e>
 802260c:	2300      	movs	r3, #0
 802260e:	2b00      	cmp	r3, #0
 8022610:	d109      	bne.n	8022626 <xQueueGenericSend+0xb6>
 8022612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022616:	f383 8811 	msr	BASEPRI, r3
 802261a:	f3bf 8f6f 	isb	sy
 802261e:	f3bf 8f4f 	dsb	sy
 8022622:	61fb      	str	r3, [r7, #28]
 8022624:	e7fe      	b.n	8022624 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8022626:	f002 fce1 	bl	8024fec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 802262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802262c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022632:	429a      	cmp	r2, r3
 8022634:	d302      	bcc.n	802263c <xQueueGenericSend+0xcc>
 8022636:	683b      	ldr	r3, [r7, #0]
 8022638:	2b02      	cmp	r3, #2
 802263a:	d129      	bne.n	8022690 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 802263c:	683a      	ldr	r2, [r7, #0]
 802263e:	68b9      	ldr	r1, [r7, #8]
 8022640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022642:	f000 fc6a 	bl	8022f1a <prvCopyDataToQueue>
 8022646:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8022648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802264c:	2b00      	cmp	r3, #0
 802264e:	d010      	beq.n	8022672 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8022650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022652:	3324      	adds	r3, #36	; 0x24
 8022654:	4618      	mov	r0, r3
 8022656:	f001 fad5 	bl	8023c04 <xTaskRemoveFromEventList>
 802265a:	4603      	mov	r3, r0
 802265c:	2b00      	cmp	r3, #0
 802265e:	d013      	beq.n	8022688 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8022660:	4b3f      	ldr	r3, [pc, #252]	; (8022760 <xQueueGenericSend+0x1f0>)
 8022662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022666:	601a      	str	r2, [r3, #0]
 8022668:	f3bf 8f4f 	dsb	sy
 802266c:	f3bf 8f6f 	isb	sy
 8022670:	e00a      	b.n	8022688 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8022672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022674:	2b00      	cmp	r3, #0
 8022676:	d007      	beq.n	8022688 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8022678:	4b39      	ldr	r3, [pc, #228]	; (8022760 <xQueueGenericSend+0x1f0>)
 802267a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802267e:	601a      	str	r2, [r3, #0]
 8022680:	f3bf 8f4f 	dsb	sy
 8022684:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8022688:	f002 fcde 	bl	8025048 <vPortExitCritical>
				return pdPASS;
 802268c:	2301      	movs	r3, #1
 802268e:	e063      	b.n	8022758 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8022690:	687b      	ldr	r3, [r7, #4]
 8022692:	2b00      	cmp	r3, #0
 8022694:	d103      	bne.n	802269e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8022696:	f002 fcd7 	bl	8025048 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 802269a:	2300      	movs	r3, #0
 802269c:	e05c      	b.n	8022758 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 802269e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80226a0:	2b00      	cmp	r3, #0
 80226a2:	d106      	bne.n	80226b2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80226a4:	f107 0314 	add.w	r3, r7, #20
 80226a8:	4618      	mov	r0, r3
 80226aa:	f001 fb0d 	bl	8023cc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80226ae:	2301      	movs	r3, #1
 80226b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80226b2:	f002 fcc9 	bl	8025048 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80226b6:	f001 f877 	bl	80237a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80226ba:	f002 fc97 	bl	8024fec <vPortEnterCritical>
 80226be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80226c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80226c4:	b25b      	sxtb	r3, r3
 80226c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80226ca:	d103      	bne.n	80226d4 <xQueueGenericSend+0x164>
 80226cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80226ce:	2200      	movs	r2, #0
 80226d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80226d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80226d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80226da:	b25b      	sxtb	r3, r3
 80226dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80226e0:	d103      	bne.n	80226ea <xQueueGenericSend+0x17a>
 80226e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80226e4:	2200      	movs	r2, #0
 80226e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80226ea:	f002 fcad 	bl	8025048 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80226ee:	1d3a      	adds	r2, r7, #4
 80226f0:	f107 0314 	add.w	r3, r7, #20
 80226f4:	4611      	mov	r1, r2
 80226f6:	4618      	mov	r0, r3
 80226f8:	f001 fafc 	bl	8023cf4 <xTaskCheckForTimeOut>
 80226fc:	4603      	mov	r3, r0
 80226fe:	2b00      	cmp	r3, #0
 8022700:	d124      	bne.n	802274c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8022702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022704:	f000 fd01 	bl	802310a <prvIsQueueFull>
 8022708:	4603      	mov	r3, r0
 802270a:	2b00      	cmp	r3, #0
 802270c:	d018      	beq.n	8022740 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 802270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022710:	3310      	adds	r3, #16
 8022712:	687a      	ldr	r2, [r7, #4]
 8022714:	4611      	mov	r1, r2
 8022716:	4618      	mov	r0, r3
 8022718:	f001 fa26 	bl	8023b68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 802271c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802271e:	f000 fc8c 	bl	802303a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8022722:	f001 f84f 	bl	80237c4 <xTaskResumeAll>
 8022726:	4603      	mov	r3, r0
 8022728:	2b00      	cmp	r3, #0
 802272a:	f47f af7c 	bne.w	8022626 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 802272e:	4b0c      	ldr	r3, [pc, #48]	; (8022760 <xQueueGenericSend+0x1f0>)
 8022730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022734:	601a      	str	r2, [r3, #0]
 8022736:	f3bf 8f4f 	dsb	sy
 802273a:	f3bf 8f6f 	isb	sy
 802273e:	e772      	b.n	8022626 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8022740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022742:	f000 fc7a 	bl	802303a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8022746:	f001 f83d 	bl	80237c4 <xTaskResumeAll>
 802274a:	e76c      	b.n	8022626 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 802274c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802274e:	f000 fc74 	bl	802303a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8022752:	f001 f837 	bl	80237c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8022756:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8022758:	4618      	mov	r0, r3
 802275a:	3738      	adds	r7, #56	; 0x38
 802275c:	46bd      	mov	sp, r7
 802275e:	bd80      	pop	{r7, pc}
 8022760:	e000ed04 	.word	0xe000ed04

08022764 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8022764:	b580      	push	{r7, lr}
 8022766:	b08e      	sub	sp, #56	; 0x38
 8022768:	af00      	add	r7, sp, #0
 802276a:	60f8      	str	r0, [r7, #12]
 802276c:	60b9      	str	r1, [r7, #8]
 802276e:	607a      	str	r2, [r7, #4]
 8022770:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8022772:	68fb      	ldr	r3, [r7, #12]
 8022774:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8022776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022778:	2b00      	cmp	r3, #0
 802277a:	d109      	bne.n	8022790 <xQueueGenericSendFromISR+0x2c>
 802277c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022780:	f383 8811 	msr	BASEPRI, r3
 8022784:	f3bf 8f6f 	isb	sy
 8022788:	f3bf 8f4f 	dsb	sy
 802278c:	627b      	str	r3, [r7, #36]	; 0x24
 802278e:	e7fe      	b.n	802278e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8022790:	68bb      	ldr	r3, [r7, #8]
 8022792:	2b00      	cmp	r3, #0
 8022794:	d103      	bne.n	802279e <xQueueGenericSendFromISR+0x3a>
 8022796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802279a:	2b00      	cmp	r3, #0
 802279c:	d101      	bne.n	80227a2 <xQueueGenericSendFromISR+0x3e>
 802279e:	2301      	movs	r3, #1
 80227a0:	e000      	b.n	80227a4 <xQueueGenericSendFromISR+0x40>
 80227a2:	2300      	movs	r3, #0
 80227a4:	2b00      	cmp	r3, #0
 80227a6:	d109      	bne.n	80227bc <xQueueGenericSendFromISR+0x58>
 80227a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80227ac:	f383 8811 	msr	BASEPRI, r3
 80227b0:	f3bf 8f6f 	isb	sy
 80227b4:	f3bf 8f4f 	dsb	sy
 80227b8:	623b      	str	r3, [r7, #32]
 80227ba:	e7fe      	b.n	80227ba <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80227bc:	683b      	ldr	r3, [r7, #0]
 80227be:	2b02      	cmp	r3, #2
 80227c0:	d103      	bne.n	80227ca <xQueueGenericSendFromISR+0x66>
 80227c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80227c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80227c6:	2b01      	cmp	r3, #1
 80227c8:	d101      	bne.n	80227ce <xQueueGenericSendFromISR+0x6a>
 80227ca:	2301      	movs	r3, #1
 80227cc:	e000      	b.n	80227d0 <xQueueGenericSendFromISR+0x6c>
 80227ce:	2300      	movs	r3, #0
 80227d0:	2b00      	cmp	r3, #0
 80227d2:	d109      	bne.n	80227e8 <xQueueGenericSendFromISR+0x84>
 80227d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80227d8:	f383 8811 	msr	BASEPRI, r3
 80227dc:	f3bf 8f6f 	isb	sy
 80227e0:	f3bf 8f4f 	dsb	sy
 80227e4:	61fb      	str	r3, [r7, #28]
 80227e6:	e7fe      	b.n	80227e6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80227e8:	f002 fcdc 	bl	80251a4 <vPortValidateInterruptPriority>
	__asm volatile
 80227ec:	f3ef 8211 	mrs	r2, BASEPRI
 80227f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80227f4:	f383 8811 	msr	BASEPRI, r3
 80227f8:	f3bf 8f6f 	isb	sy
 80227fc:	f3bf 8f4f 	dsb	sy
 8022800:	61ba      	str	r2, [r7, #24]
 8022802:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8022804:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8022806:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8022808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802280a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802280c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802280e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022810:	429a      	cmp	r2, r3
 8022812:	d302      	bcc.n	802281a <xQueueGenericSendFromISR+0xb6>
 8022814:	683b      	ldr	r3, [r7, #0]
 8022816:	2b02      	cmp	r3, #2
 8022818:	d12c      	bne.n	8022874 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 802281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802281c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8022820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8022824:	683a      	ldr	r2, [r7, #0]
 8022826:	68b9      	ldr	r1, [r7, #8]
 8022828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802282a:	f000 fb76 	bl	8022f1a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 802282e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8022832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022836:	d112      	bne.n	802285e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8022838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802283c:	2b00      	cmp	r3, #0
 802283e:	d016      	beq.n	802286e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8022840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022842:	3324      	adds	r3, #36	; 0x24
 8022844:	4618      	mov	r0, r3
 8022846:	f001 f9dd 	bl	8023c04 <xTaskRemoveFromEventList>
 802284a:	4603      	mov	r3, r0
 802284c:	2b00      	cmp	r3, #0
 802284e:	d00e      	beq.n	802286e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8022850:	687b      	ldr	r3, [r7, #4]
 8022852:	2b00      	cmp	r3, #0
 8022854:	d00b      	beq.n	802286e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8022856:	687b      	ldr	r3, [r7, #4]
 8022858:	2201      	movs	r2, #1
 802285a:	601a      	str	r2, [r3, #0]
 802285c:	e007      	b.n	802286e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 802285e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8022862:	3301      	adds	r3, #1
 8022864:	b2db      	uxtb	r3, r3
 8022866:	b25a      	sxtb	r2, r3
 8022868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802286a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 802286e:	2301      	movs	r3, #1
 8022870:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8022872:	e001      	b.n	8022878 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8022874:	2300      	movs	r3, #0
 8022876:	637b      	str	r3, [r7, #52]	; 0x34
 8022878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802287a:	613b      	str	r3, [r7, #16]
	__asm volatile
 802287c:	693b      	ldr	r3, [r7, #16]
 802287e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8022882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8022884:	4618      	mov	r0, r3
 8022886:	3738      	adds	r7, #56	; 0x38
 8022888:	46bd      	mov	sp, r7
 802288a:	bd80      	pop	{r7, pc}

0802288c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 802288c:	b580      	push	{r7, lr}
 802288e:	b08e      	sub	sp, #56	; 0x38
 8022890:	af00      	add	r7, sp, #0
 8022892:	6078      	str	r0, [r7, #4]
 8022894:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8022896:	687b      	ldr	r3, [r7, #4]
 8022898:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 802289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802289c:	2b00      	cmp	r3, #0
 802289e:	d109      	bne.n	80228b4 <xQueueGiveFromISR+0x28>
	__asm volatile
 80228a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80228a4:	f383 8811 	msr	BASEPRI, r3
 80228a8:	f3bf 8f6f 	isb	sy
 80228ac:	f3bf 8f4f 	dsb	sy
 80228b0:	623b      	str	r3, [r7, #32]
 80228b2:	e7fe      	b.n	80228b2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80228b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80228b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80228b8:	2b00      	cmp	r3, #0
 80228ba:	d009      	beq.n	80228d0 <xQueueGiveFromISR+0x44>
 80228bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80228c0:	f383 8811 	msr	BASEPRI, r3
 80228c4:	f3bf 8f6f 	isb	sy
 80228c8:	f3bf 8f4f 	dsb	sy
 80228cc:	61fb      	str	r3, [r7, #28]
 80228ce:	e7fe      	b.n	80228ce <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80228d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80228d2:	681b      	ldr	r3, [r3, #0]
 80228d4:	2b00      	cmp	r3, #0
 80228d6:	d103      	bne.n	80228e0 <xQueueGiveFromISR+0x54>
 80228d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80228da:	689b      	ldr	r3, [r3, #8]
 80228dc:	2b00      	cmp	r3, #0
 80228de:	d101      	bne.n	80228e4 <xQueueGiveFromISR+0x58>
 80228e0:	2301      	movs	r3, #1
 80228e2:	e000      	b.n	80228e6 <xQueueGiveFromISR+0x5a>
 80228e4:	2300      	movs	r3, #0
 80228e6:	2b00      	cmp	r3, #0
 80228e8:	d109      	bne.n	80228fe <xQueueGiveFromISR+0x72>
 80228ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80228ee:	f383 8811 	msr	BASEPRI, r3
 80228f2:	f3bf 8f6f 	isb	sy
 80228f6:	f3bf 8f4f 	dsb	sy
 80228fa:	61bb      	str	r3, [r7, #24]
 80228fc:	e7fe      	b.n	80228fc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80228fe:	f002 fc51 	bl	80251a4 <vPortValidateInterruptPriority>
	__asm volatile
 8022902:	f3ef 8211 	mrs	r2, BASEPRI
 8022906:	f04f 0350 	mov.w	r3, #80	; 0x50
 802290a:	f383 8811 	msr	BASEPRI, r3
 802290e:	f3bf 8f6f 	isb	sy
 8022912:	f3bf 8f4f 	dsb	sy
 8022916:	617a      	str	r2, [r7, #20]
 8022918:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 802291a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 802291c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 802291e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022922:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8022924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802292a:	429a      	cmp	r2, r3
 802292c:	d22b      	bcs.n	8022986 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 802292e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8022934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8022938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802293a:	1c5a      	adds	r2, r3, #1
 802293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802293e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8022940:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8022944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022948:	d112      	bne.n	8022970 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802294a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802294e:	2b00      	cmp	r3, #0
 8022950:	d016      	beq.n	8022980 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8022952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022954:	3324      	adds	r3, #36	; 0x24
 8022956:	4618      	mov	r0, r3
 8022958:	f001 f954 	bl	8023c04 <xTaskRemoveFromEventList>
 802295c:	4603      	mov	r3, r0
 802295e:	2b00      	cmp	r3, #0
 8022960:	d00e      	beq.n	8022980 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8022962:	683b      	ldr	r3, [r7, #0]
 8022964:	2b00      	cmp	r3, #0
 8022966:	d00b      	beq.n	8022980 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8022968:	683b      	ldr	r3, [r7, #0]
 802296a:	2201      	movs	r2, #1
 802296c:	601a      	str	r2, [r3, #0]
 802296e:	e007      	b.n	8022980 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8022970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022974:	3301      	adds	r3, #1
 8022976:	b2db      	uxtb	r3, r3
 8022978:	b25a      	sxtb	r2, r3
 802297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802297c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8022980:	2301      	movs	r3, #1
 8022982:	637b      	str	r3, [r7, #52]	; 0x34
 8022984:	e001      	b.n	802298a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8022986:	2300      	movs	r3, #0
 8022988:	637b      	str	r3, [r7, #52]	; 0x34
 802298a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802298c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 802298e:	68fb      	ldr	r3, [r7, #12]
 8022990:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8022994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8022996:	4618      	mov	r0, r3
 8022998:	3738      	adds	r7, #56	; 0x38
 802299a:	46bd      	mov	sp, r7
 802299c:	bd80      	pop	{r7, pc}
	...

080229a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80229a0:	b580      	push	{r7, lr}
 80229a2:	b08c      	sub	sp, #48	; 0x30
 80229a4:	af00      	add	r7, sp, #0
 80229a6:	60f8      	str	r0, [r7, #12]
 80229a8:	60b9      	str	r1, [r7, #8]
 80229aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80229ac:	2300      	movs	r3, #0
 80229ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80229b0:	68fb      	ldr	r3, [r7, #12]
 80229b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80229b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229b6:	2b00      	cmp	r3, #0
 80229b8:	d109      	bne.n	80229ce <xQueueReceive+0x2e>
	__asm volatile
 80229ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80229be:	f383 8811 	msr	BASEPRI, r3
 80229c2:	f3bf 8f6f 	isb	sy
 80229c6:	f3bf 8f4f 	dsb	sy
 80229ca:	623b      	str	r3, [r7, #32]
 80229cc:	e7fe      	b.n	80229cc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80229ce:	68bb      	ldr	r3, [r7, #8]
 80229d0:	2b00      	cmp	r3, #0
 80229d2:	d103      	bne.n	80229dc <xQueueReceive+0x3c>
 80229d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80229d8:	2b00      	cmp	r3, #0
 80229da:	d101      	bne.n	80229e0 <xQueueReceive+0x40>
 80229dc:	2301      	movs	r3, #1
 80229de:	e000      	b.n	80229e2 <xQueueReceive+0x42>
 80229e0:	2300      	movs	r3, #0
 80229e2:	2b00      	cmp	r3, #0
 80229e4:	d109      	bne.n	80229fa <xQueueReceive+0x5a>
 80229e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80229ea:	f383 8811 	msr	BASEPRI, r3
 80229ee:	f3bf 8f6f 	isb	sy
 80229f2:	f3bf 8f4f 	dsb	sy
 80229f6:	61fb      	str	r3, [r7, #28]
 80229f8:	e7fe      	b.n	80229f8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80229fa:	f001 fac9 	bl	8023f90 <xTaskGetSchedulerState>
 80229fe:	4603      	mov	r3, r0
 8022a00:	2b00      	cmp	r3, #0
 8022a02:	d102      	bne.n	8022a0a <xQueueReceive+0x6a>
 8022a04:	687b      	ldr	r3, [r7, #4]
 8022a06:	2b00      	cmp	r3, #0
 8022a08:	d101      	bne.n	8022a0e <xQueueReceive+0x6e>
 8022a0a:	2301      	movs	r3, #1
 8022a0c:	e000      	b.n	8022a10 <xQueueReceive+0x70>
 8022a0e:	2300      	movs	r3, #0
 8022a10:	2b00      	cmp	r3, #0
 8022a12:	d109      	bne.n	8022a28 <xQueueReceive+0x88>
 8022a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022a18:	f383 8811 	msr	BASEPRI, r3
 8022a1c:	f3bf 8f6f 	isb	sy
 8022a20:	f3bf 8f4f 	dsb	sy
 8022a24:	61bb      	str	r3, [r7, #24]
 8022a26:	e7fe      	b.n	8022a26 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8022a28:	f002 fae0 	bl	8024fec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8022a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022a30:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8022a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a34:	2b00      	cmp	r3, #0
 8022a36:	d01f      	beq.n	8022a78 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8022a38:	68b9      	ldr	r1, [r7, #8]
 8022a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022a3c:	f000 fad7 	bl	8022fee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8022a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a42:	1e5a      	subs	r2, r3, #1
 8022a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a46:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8022a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a4a:	691b      	ldr	r3, [r3, #16]
 8022a4c:	2b00      	cmp	r3, #0
 8022a4e:	d00f      	beq.n	8022a70 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8022a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a52:	3310      	adds	r3, #16
 8022a54:	4618      	mov	r0, r3
 8022a56:	f001 f8d5 	bl	8023c04 <xTaskRemoveFromEventList>
 8022a5a:	4603      	mov	r3, r0
 8022a5c:	2b00      	cmp	r3, #0
 8022a5e:	d007      	beq.n	8022a70 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8022a60:	4b3c      	ldr	r3, [pc, #240]	; (8022b54 <xQueueReceive+0x1b4>)
 8022a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022a66:	601a      	str	r2, [r3, #0]
 8022a68:	f3bf 8f4f 	dsb	sy
 8022a6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8022a70:	f002 faea 	bl	8025048 <vPortExitCritical>
				return pdPASS;
 8022a74:	2301      	movs	r3, #1
 8022a76:	e069      	b.n	8022b4c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8022a78:	687b      	ldr	r3, [r7, #4]
 8022a7a:	2b00      	cmp	r3, #0
 8022a7c:	d103      	bne.n	8022a86 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8022a7e:	f002 fae3 	bl	8025048 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8022a82:	2300      	movs	r3, #0
 8022a84:	e062      	b.n	8022b4c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8022a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022a88:	2b00      	cmp	r3, #0
 8022a8a:	d106      	bne.n	8022a9a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8022a8c:	f107 0310 	add.w	r3, r7, #16
 8022a90:	4618      	mov	r0, r3
 8022a92:	f001 f919 	bl	8023cc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8022a96:	2301      	movs	r3, #1
 8022a98:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8022a9a:	f002 fad5 	bl	8025048 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8022a9e:	f000 fe83 	bl	80237a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8022aa2:	f002 faa3 	bl	8024fec <vPortEnterCritical>
 8022aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022aa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8022aac:	b25b      	sxtb	r3, r3
 8022aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022ab2:	d103      	bne.n	8022abc <xQueueReceive+0x11c>
 8022ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022ab6:	2200      	movs	r2, #0
 8022ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8022abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022abe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8022ac2:	b25b      	sxtb	r3, r3
 8022ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022ac8:	d103      	bne.n	8022ad2 <xQueueReceive+0x132>
 8022aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022acc:	2200      	movs	r2, #0
 8022ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8022ad2:	f002 fab9 	bl	8025048 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8022ad6:	1d3a      	adds	r2, r7, #4
 8022ad8:	f107 0310 	add.w	r3, r7, #16
 8022adc:	4611      	mov	r1, r2
 8022ade:	4618      	mov	r0, r3
 8022ae0:	f001 f908 	bl	8023cf4 <xTaskCheckForTimeOut>
 8022ae4:	4603      	mov	r3, r0
 8022ae6:	2b00      	cmp	r3, #0
 8022ae8:	d123      	bne.n	8022b32 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8022aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022aec:	f000 faf7 	bl	80230de <prvIsQueueEmpty>
 8022af0:	4603      	mov	r3, r0
 8022af2:	2b00      	cmp	r3, #0
 8022af4:	d017      	beq.n	8022b26 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8022af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022af8:	3324      	adds	r3, #36	; 0x24
 8022afa:	687a      	ldr	r2, [r7, #4]
 8022afc:	4611      	mov	r1, r2
 8022afe:	4618      	mov	r0, r3
 8022b00:	f001 f832 	bl	8023b68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8022b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022b06:	f000 fa98 	bl	802303a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8022b0a:	f000 fe5b 	bl	80237c4 <xTaskResumeAll>
 8022b0e:	4603      	mov	r3, r0
 8022b10:	2b00      	cmp	r3, #0
 8022b12:	d189      	bne.n	8022a28 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8022b14:	4b0f      	ldr	r3, [pc, #60]	; (8022b54 <xQueueReceive+0x1b4>)
 8022b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022b1a:	601a      	str	r2, [r3, #0]
 8022b1c:	f3bf 8f4f 	dsb	sy
 8022b20:	f3bf 8f6f 	isb	sy
 8022b24:	e780      	b.n	8022a28 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8022b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022b28:	f000 fa87 	bl	802303a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8022b2c:	f000 fe4a 	bl	80237c4 <xTaskResumeAll>
 8022b30:	e77a      	b.n	8022a28 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8022b32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022b34:	f000 fa81 	bl	802303a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8022b38:	f000 fe44 	bl	80237c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8022b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022b3e:	f000 face 	bl	80230de <prvIsQueueEmpty>
 8022b42:	4603      	mov	r3, r0
 8022b44:	2b00      	cmp	r3, #0
 8022b46:	f43f af6f 	beq.w	8022a28 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8022b4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8022b4c:	4618      	mov	r0, r3
 8022b4e:	3730      	adds	r7, #48	; 0x30
 8022b50:	46bd      	mov	sp, r7
 8022b52:	bd80      	pop	{r7, pc}
 8022b54:	e000ed04 	.word	0xe000ed04

08022b58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8022b58:	b580      	push	{r7, lr}
 8022b5a:	b08e      	sub	sp, #56	; 0x38
 8022b5c:	af00      	add	r7, sp, #0
 8022b5e:	6078      	str	r0, [r7, #4]
 8022b60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8022b62:	2300      	movs	r3, #0
 8022b64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8022b66:	687b      	ldr	r3, [r7, #4]
 8022b68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8022b6a:	2300      	movs	r3, #0
 8022b6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8022b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b70:	2b00      	cmp	r3, #0
 8022b72:	d109      	bne.n	8022b88 <xQueueSemaphoreTake+0x30>
 8022b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022b78:	f383 8811 	msr	BASEPRI, r3
 8022b7c:	f3bf 8f6f 	isb	sy
 8022b80:	f3bf 8f4f 	dsb	sy
 8022b84:	623b      	str	r3, [r7, #32]
 8022b86:	e7fe      	b.n	8022b86 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8022b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022b8c:	2b00      	cmp	r3, #0
 8022b8e:	d009      	beq.n	8022ba4 <xQueueSemaphoreTake+0x4c>
 8022b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022b94:	f383 8811 	msr	BASEPRI, r3
 8022b98:	f3bf 8f6f 	isb	sy
 8022b9c:	f3bf 8f4f 	dsb	sy
 8022ba0:	61fb      	str	r3, [r7, #28]
 8022ba2:	e7fe      	b.n	8022ba2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8022ba4:	f001 f9f4 	bl	8023f90 <xTaskGetSchedulerState>
 8022ba8:	4603      	mov	r3, r0
 8022baa:	2b00      	cmp	r3, #0
 8022bac:	d102      	bne.n	8022bb4 <xQueueSemaphoreTake+0x5c>
 8022bae:	683b      	ldr	r3, [r7, #0]
 8022bb0:	2b00      	cmp	r3, #0
 8022bb2:	d101      	bne.n	8022bb8 <xQueueSemaphoreTake+0x60>
 8022bb4:	2301      	movs	r3, #1
 8022bb6:	e000      	b.n	8022bba <xQueueSemaphoreTake+0x62>
 8022bb8:	2300      	movs	r3, #0
 8022bba:	2b00      	cmp	r3, #0
 8022bbc:	d109      	bne.n	8022bd2 <xQueueSemaphoreTake+0x7a>
 8022bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022bc2:	f383 8811 	msr	BASEPRI, r3
 8022bc6:	f3bf 8f6f 	isb	sy
 8022bca:	f3bf 8f4f 	dsb	sy
 8022bce:	61bb      	str	r3, [r7, #24]
 8022bd0:	e7fe      	b.n	8022bd0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8022bd2:	f002 fa0b 	bl	8024fec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8022bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022bda:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8022bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022bde:	2b00      	cmp	r3, #0
 8022be0:	d024      	beq.n	8022c2c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8022be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022be4:	1e5a      	subs	r2, r3, #1
 8022be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022be8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8022bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022bec:	681b      	ldr	r3, [r3, #0]
 8022bee:	2b00      	cmp	r3, #0
 8022bf0:	d104      	bne.n	8022bfc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8022bf2:	f001 fb3f 	bl	8024274 <pvTaskIncrementMutexHeldCount>
 8022bf6:	4602      	mov	r2, r0
 8022bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022bfa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8022bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022bfe:	691b      	ldr	r3, [r3, #16]
 8022c00:	2b00      	cmp	r3, #0
 8022c02:	d00f      	beq.n	8022c24 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8022c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022c06:	3310      	adds	r3, #16
 8022c08:	4618      	mov	r0, r3
 8022c0a:	f000 fffb 	bl	8023c04 <xTaskRemoveFromEventList>
 8022c0e:	4603      	mov	r3, r0
 8022c10:	2b00      	cmp	r3, #0
 8022c12:	d007      	beq.n	8022c24 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8022c14:	4b53      	ldr	r3, [pc, #332]	; (8022d64 <xQueueSemaphoreTake+0x20c>)
 8022c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022c1a:	601a      	str	r2, [r3, #0]
 8022c1c:	f3bf 8f4f 	dsb	sy
 8022c20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8022c24:	f002 fa10 	bl	8025048 <vPortExitCritical>
				return pdPASS;
 8022c28:	2301      	movs	r3, #1
 8022c2a:	e096      	b.n	8022d5a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8022c2c:	683b      	ldr	r3, [r7, #0]
 8022c2e:	2b00      	cmp	r3, #0
 8022c30:	d110      	bne.n	8022c54 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8022c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022c34:	2b00      	cmp	r3, #0
 8022c36:	d009      	beq.n	8022c4c <xQueueSemaphoreTake+0xf4>
 8022c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022c3c:	f383 8811 	msr	BASEPRI, r3
 8022c40:	f3bf 8f6f 	isb	sy
 8022c44:	f3bf 8f4f 	dsb	sy
 8022c48:	617b      	str	r3, [r7, #20]
 8022c4a:	e7fe      	b.n	8022c4a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8022c4c:	f002 f9fc 	bl	8025048 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8022c50:	2300      	movs	r3, #0
 8022c52:	e082      	b.n	8022d5a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8022c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022c56:	2b00      	cmp	r3, #0
 8022c58:	d106      	bne.n	8022c68 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8022c5a:	f107 030c 	add.w	r3, r7, #12
 8022c5e:	4618      	mov	r0, r3
 8022c60:	f001 f832 	bl	8023cc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8022c64:	2301      	movs	r3, #1
 8022c66:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8022c68:	f002 f9ee 	bl	8025048 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8022c6c:	f000 fd9c 	bl	80237a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8022c70:	f002 f9bc 	bl	8024fec <vPortEnterCritical>
 8022c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022c76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8022c7a:	b25b      	sxtb	r3, r3
 8022c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022c80:	d103      	bne.n	8022c8a <xQueueSemaphoreTake+0x132>
 8022c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022c84:	2200      	movs	r2, #0
 8022c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8022c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8022c90:	b25b      	sxtb	r3, r3
 8022c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022c96:	d103      	bne.n	8022ca0 <xQueueSemaphoreTake+0x148>
 8022c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022c9a:	2200      	movs	r2, #0
 8022c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8022ca0:	f002 f9d2 	bl	8025048 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8022ca4:	463a      	mov	r2, r7
 8022ca6:	f107 030c 	add.w	r3, r7, #12
 8022caa:	4611      	mov	r1, r2
 8022cac:	4618      	mov	r0, r3
 8022cae:	f001 f821 	bl	8023cf4 <xTaskCheckForTimeOut>
 8022cb2:	4603      	mov	r3, r0
 8022cb4:	2b00      	cmp	r3, #0
 8022cb6:	d132      	bne.n	8022d1e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8022cb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8022cba:	f000 fa10 	bl	80230de <prvIsQueueEmpty>
 8022cbe:	4603      	mov	r3, r0
 8022cc0:	2b00      	cmp	r3, #0
 8022cc2:	d026      	beq.n	8022d12 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8022cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022cc6:	681b      	ldr	r3, [r3, #0]
 8022cc8:	2b00      	cmp	r3, #0
 8022cca:	d109      	bne.n	8022ce0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8022ccc:	f002 f98e 	bl	8024fec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8022cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022cd2:	689b      	ldr	r3, [r3, #8]
 8022cd4:	4618      	mov	r0, r3
 8022cd6:	f001 f979 	bl	8023fcc <xTaskPriorityInherit>
 8022cda:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8022cdc:	f002 f9b4 	bl	8025048 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8022ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022ce2:	3324      	adds	r3, #36	; 0x24
 8022ce4:	683a      	ldr	r2, [r7, #0]
 8022ce6:	4611      	mov	r1, r2
 8022ce8:	4618      	mov	r0, r3
 8022cea:	f000 ff3d 	bl	8023b68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8022cee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8022cf0:	f000 f9a3 	bl	802303a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8022cf4:	f000 fd66 	bl	80237c4 <xTaskResumeAll>
 8022cf8:	4603      	mov	r3, r0
 8022cfa:	2b00      	cmp	r3, #0
 8022cfc:	f47f af69 	bne.w	8022bd2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8022d00:	4b18      	ldr	r3, [pc, #96]	; (8022d64 <xQueueSemaphoreTake+0x20c>)
 8022d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022d06:	601a      	str	r2, [r3, #0]
 8022d08:	f3bf 8f4f 	dsb	sy
 8022d0c:	f3bf 8f6f 	isb	sy
 8022d10:	e75f      	b.n	8022bd2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8022d12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8022d14:	f000 f991 	bl	802303a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8022d18:	f000 fd54 	bl	80237c4 <xTaskResumeAll>
 8022d1c:	e759      	b.n	8022bd2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8022d1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8022d20:	f000 f98b 	bl	802303a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8022d24:	f000 fd4e 	bl	80237c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8022d28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8022d2a:	f000 f9d8 	bl	80230de <prvIsQueueEmpty>
 8022d2e:	4603      	mov	r3, r0
 8022d30:	2b00      	cmp	r3, #0
 8022d32:	f43f af4e 	beq.w	8022bd2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8022d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022d38:	2b00      	cmp	r3, #0
 8022d3a:	d00d      	beq.n	8022d58 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8022d3c:	f002 f956 	bl	8024fec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8022d40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8022d42:	f000 f8d2 	bl	8022eea <prvGetDisinheritPriorityAfterTimeout>
 8022d46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8022d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022d4a:	689b      	ldr	r3, [r3, #8]
 8022d4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8022d4e:	4618      	mov	r0, r3
 8022d50:	f001 fa10 	bl	8024174 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8022d54:	f002 f978 	bl	8025048 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8022d58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8022d5a:	4618      	mov	r0, r3
 8022d5c:	3738      	adds	r7, #56	; 0x38
 8022d5e:	46bd      	mov	sp, r7
 8022d60:	bd80      	pop	{r7, pc}
 8022d62:	bf00      	nop
 8022d64:	e000ed04 	.word	0xe000ed04

08022d68 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8022d68:	b580      	push	{r7, lr}
 8022d6a:	b08e      	sub	sp, #56	; 0x38
 8022d6c:	af00      	add	r7, sp, #0
 8022d6e:	60f8      	str	r0, [r7, #12]
 8022d70:	60b9      	str	r1, [r7, #8]
 8022d72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8022d74:	68fb      	ldr	r3, [r7, #12]
 8022d76:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8022d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022d7a:	2b00      	cmp	r3, #0
 8022d7c:	d109      	bne.n	8022d92 <xQueueReceiveFromISR+0x2a>
 8022d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022d82:	f383 8811 	msr	BASEPRI, r3
 8022d86:	f3bf 8f6f 	isb	sy
 8022d8a:	f3bf 8f4f 	dsb	sy
 8022d8e:	623b      	str	r3, [r7, #32]
 8022d90:	e7fe      	b.n	8022d90 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8022d92:	68bb      	ldr	r3, [r7, #8]
 8022d94:	2b00      	cmp	r3, #0
 8022d96:	d103      	bne.n	8022da0 <xQueueReceiveFromISR+0x38>
 8022d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022d9c:	2b00      	cmp	r3, #0
 8022d9e:	d101      	bne.n	8022da4 <xQueueReceiveFromISR+0x3c>
 8022da0:	2301      	movs	r3, #1
 8022da2:	e000      	b.n	8022da6 <xQueueReceiveFromISR+0x3e>
 8022da4:	2300      	movs	r3, #0
 8022da6:	2b00      	cmp	r3, #0
 8022da8:	d109      	bne.n	8022dbe <xQueueReceiveFromISR+0x56>
 8022daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022dae:	f383 8811 	msr	BASEPRI, r3
 8022db2:	f3bf 8f6f 	isb	sy
 8022db6:	f3bf 8f4f 	dsb	sy
 8022dba:	61fb      	str	r3, [r7, #28]
 8022dbc:	e7fe      	b.n	8022dbc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8022dbe:	f002 f9f1 	bl	80251a4 <vPortValidateInterruptPriority>
	__asm volatile
 8022dc2:	f3ef 8211 	mrs	r2, BASEPRI
 8022dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022dca:	f383 8811 	msr	BASEPRI, r3
 8022dce:	f3bf 8f6f 	isb	sy
 8022dd2:	f3bf 8f4f 	dsb	sy
 8022dd6:	61ba      	str	r2, [r7, #24]
 8022dd8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8022dda:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8022ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8022dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022de2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8022de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022de6:	2b00      	cmp	r3, #0
 8022de8:	d02f      	beq.n	8022e4a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8022dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022dec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8022df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8022df4:	68b9      	ldr	r1, [r7, #8]
 8022df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022df8:	f000 f8f9 	bl	8022fee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8022dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022dfe:	1e5a      	subs	r2, r3, #1
 8022e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022e02:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8022e04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8022e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022e0c:	d112      	bne.n	8022e34 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8022e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022e10:	691b      	ldr	r3, [r3, #16]
 8022e12:	2b00      	cmp	r3, #0
 8022e14:	d016      	beq.n	8022e44 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8022e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022e18:	3310      	adds	r3, #16
 8022e1a:	4618      	mov	r0, r3
 8022e1c:	f000 fef2 	bl	8023c04 <xTaskRemoveFromEventList>
 8022e20:	4603      	mov	r3, r0
 8022e22:	2b00      	cmp	r3, #0
 8022e24:	d00e      	beq.n	8022e44 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8022e26:	687b      	ldr	r3, [r7, #4]
 8022e28:	2b00      	cmp	r3, #0
 8022e2a:	d00b      	beq.n	8022e44 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8022e2c:	687b      	ldr	r3, [r7, #4]
 8022e2e:	2201      	movs	r2, #1
 8022e30:	601a      	str	r2, [r3, #0]
 8022e32:	e007      	b.n	8022e44 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8022e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022e38:	3301      	adds	r3, #1
 8022e3a:	b2db      	uxtb	r3, r3
 8022e3c:	b25a      	sxtb	r2, r3
 8022e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8022e44:	2301      	movs	r3, #1
 8022e46:	637b      	str	r3, [r7, #52]	; 0x34
 8022e48:	e001      	b.n	8022e4e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8022e4a:	2300      	movs	r3, #0
 8022e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8022e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022e50:	613b      	str	r3, [r7, #16]
	__asm volatile
 8022e52:	693b      	ldr	r3, [r7, #16]
 8022e54:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8022e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8022e5a:	4618      	mov	r0, r3
 8022e5c:	3738      	adds	r7, #56	; 0x38
 8022e5e:	46bd      	mov	sp, r7
 8022e60:	bd80      	pop	{r7, pc}

08022e62 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8022e62:	b580      	push	{r7, lr}
 8022e64:	b086      	sub	sp, #24
 8022e66:	af00      	add	r7, sp, #0
 8022e68:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8022e6a:	687b      	ldr	r3, [r7, #4]
 8022e6c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8022e6e:	697b      	ldr	r3, [r7, #20]
 8022e70:	2b00      	cmp	r3, #0
 8022e72:	d109      	bne.n	8022e88 <uxQueueSpacesAvailable+0x26>
	__asm volatile
 8022e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022e78:	f383 8811 	msr	BASEPRI, r3
 8022e7c:	f3bf 8f6f 	isb	sy
 8022e80:	f3bf 8f4f 	dsb	sy
 8022e84:	60fb      	str	r3, [r7, #12]
 8022e86:	e7fe      	b.n	8022e86 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 8022e88:	f002 f8b0 	bl	8024fec <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8022e8c:	697b      	ldr	r3, [r7, #20]
 8022e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8022e90:	697b      	ldr	r3, [r7, #20]
 8022e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022e94:	1ad3      	subs	r3, r2, r3
 8022e96:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8022e98:	f002 f8d6 	bl	8025048 <vPortExitCritical>

	return uxReturn;
 8022e9c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8022e9e:	4618      	mov	r0, r3
 8022ea0:	3718      	adds	r7, #24
 8022ea2:	46bd      	mov	sp, r7
 8022ea4:	bd80      	pop	{r7, pc}

08022ea6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8022ea6:	b580      	push	{r7, lr}
 8022ea8:	b084      	sub	sp, #16
 8022eaa:	af00      	add	r7, sp, #0
 8022eac:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8022eae:	687b      	ldr	r3, [r7, #4]
 8022eb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8022eb2:	68fb      	ldr	r3, [r7, #12]
 8022eb4:	2b00      	cmp	r3, #0
 8022eb6:	d109      	bne.n	8022ecc <vQueueDelete+0x26>
 8022eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022ebc:	f383 8811 	msr	BASEPRI, r3
 8022ec0:	f3bf 8f6f 	isb	sy
 8022ec4:	f3bf 8f4f 	dsb	sy
 8022ec8:	60bb      	str	r3, [r7, #8]
 8022eca:	e7fe      	b.n	8022eca <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8022ecc:	68f8      	ldr	r0, [r7, #12]
 8022ece:	f000 f95d 	bl	802318c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8022ed2:	68fb      	ldr	r3, [r7, #12]
 8022ed4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8022ed8:	2b00      	cmp	r3, #0
 8022eda:	d102      	bne.n	8022ee2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8022edc:	68f8      	ldr	r0, [r7, #12]
 8022ede:	f002 fa61 	bl	80253a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8022ee2:	bf00      	nop
 8022ee4:	3710      	adds	r7, #16
 8022ee6:	46bd      	mov	sp, r7
 8022ee8:	bd80      	pop	{r7, pc}

08022eea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8022eea:	b480      	push	{r7}
 8022eec:	b085      	sub	sp, #20
 8022eee:	af00      	add	r7, sp, #0
 8022ef0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8022ef2:	687b      	ldr	r3, [r7, #4]
 8022ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022ef6:	2b00      	cmp	r3, #0
 8022ef8:	d006      	beq.n	8022f08 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8022efa:	687b      	ldr	r3, [r7, #4]
 8022efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022efe:	681b      	ldr	r3, [r3, #0]
 8022f00:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8022f04:	60fb      	str	r3, [r7, #12]
 8022f06:	e001      	b.n	8022f0c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8022f08:	2300      	movs	r3, #0
 8022f0a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8022f0c:	68fb      	ldr	r3, [r7, #12]
	}
 8022f0e:	4618      	mov	r0, r3
 8022f10:	3714      	adds	r7, #20
 8022f12:	46bd      	mov	sp, r7
 8022f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f18:	4770      	bx	lr

08022f1a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8022f1a:	b580      	push	{r7, lr}
 8022f1c:	b086      	sub	sp, #24
 8022f1e:	af00      	add	r7, sp, #0
 8022f20:	60f8      	str	r0, [r7, #12]
 8022f22:	60b9      	str	r1, [r7, #8]
 8022f24:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8022f26:	2300      	movs	r3, #0
 8022f28:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8022f2a:	68fb      	ldr	r3, [r7, #12]
 8022f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022f2e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8022f30:	68fb      	ldr	r3, [r7, #12]
 8022f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022f34:	2b00      	cmp	r3, #0
 8022f36:	d10d      	bne.n	8022f54 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8022f38:	68fb      	ldr	r3, [r7, #12]
 8022f3a:	681b      	ldr	r3, [r3, #0]
 8022f3c:	2b00      	cmp	r3, #0
 8022f3e:	d14d      	bne.n	8022fdc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8022f40:	68fb      	ldr	r3, [r7, #12]
 8022f42:	689b      	ldr	r3, [r3, #8]
 8022f44:	4618      	mov	r0, r3
 8022f46:	f001 f8a9 	bl	802409c <xTaskPriorityDisinherit>
 8022f4a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8022f4c:	68fb      	ldr	r3, [r7, #12]
 8022f4e:	2200      	movs	r2, #0
 8022f50:	609a      	str	r2, [r3, #8]
 8022f52:	e043      	b.n	8022fdc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8022f54:	687b      	ldr	r3, [r7, #4]
 8022f56:	2b00      	cmp	r3, #0
 8022f58:	d119      	bne.n	8022f8e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8022f5a:	68fb      	ldr	r3, [r7, #12]
 8022f5c:	6858      	ldr	r0, [r3, #4]
 8022f5e:	68fb      	ldr	r3, [r7, #12]
 8022f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022f62:	461a      	mov	r2, r3
 8022f64:	68b9      	ldr	r1, [r7, #8]
 8022f66:	f006 f82f 	bl	8028fc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8022f6a:	68fb      	ldr	r3, [r7, #12]
 8022f6c:	685a      	ldr	r2, [r3, #4]
 8022f6e:	68fb      	ldr	r3, [r7, #12]
 8022f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022f72:	441a      	add	r2, r3
 8022f74:	68fb      	ldr	r3, [r7, #12]
 8022f76:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8022f78:	68fb      	ldr	r3, [r7, #12]
 8022f7a:	685a      	ldr	r2, [r3, #4]
 8022f7c:	68fb      	ldr	r3, [r7, #12]
 8022f7e:	689b      	ldr	r3, [r3, #8]
 8022f80:	429a      	cmp	r2, r3
 8022f82:	d32b      	bcc.n	8022fdc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8022f84:	68fb      	ldr	r3, [r7, #12]
 8022f86:	681a      	ldr	r2, [r3, #0]
 8022f88:	68fb      	ldr	r3, [r7, #12]
 8022f8a:	605a      	str	r2, [r3, #4]
 8022f8c:	e026      	b.n	8022fdc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8022f8e:	68fb      	ldr	r3, [r7, #12]
 8022f90:	68d8      	ldr	r0, [r3, #12]
 8022f92:	68fb      	ldr	r3, [r7, #12]
 8022f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022f96:	461a      	mov	r2, r3
 8022f98:	68b9      	ldr	r1, [r7, #8]
 8022f9a:	f006 f815 	bl	8028fc8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8022f9e:	68fb      	ldr	r3, [r7, #12]
 8022fa0:	68da      	ldr	r2, [r3, #12]
 8022fa2:	68fb      	ldr	r3, [r7, #12]
 8022fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022fa6:	425b      	negs	r3, r3
 8022fa8:	441a      	add	r2, r3
 8022faa:	68fb      	ldr	r3, [r7, #12]
 8022fac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8022fae:	68fb      	ldr	r3, [r7, #12]
 8022fb0:	68da      	ldr	r2, [r3, #12]
 8022fb2:	68fb      	ldr	r3, [r7, #12]
 8022fb4:	681b      	ldr	r3, [r3, #0]
 8022fb6:	429a      	cmp	r2, r3
 8022fb8:	d207      	bcs.n	8022fca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8022fba:	68fb      	ldr	r3, [r7, #12]
 8022fbc:	689a      	ldr	r2, [r3, #8]
 8022fbe:	68fb      	ldr	r3, [r7, #12]
 8022fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022fc2:	425b      	negs	r3, r3
 8022fc4:	441a      	add	r2, r3
 8022fc6:	68fb      	ldr	r3, [r7, #12]
 8022fc8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8022fca:	687b      	ldr	r3, [r7, #4]
 8022fcc:	2b02      	cmp	r3, #2
 8022fce:	d105      	bne.n	8022fdc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8022fd0:	693b      	ldr	r3, [r7, #16]
 8022fd2:	2b00      	cmp	r3, #0
 8022fd4:	d002      	beq.n	8022fdc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8022fd6:	693b      	ldr	r3, [r7, #16]
 8022fd8:	3b01      	subs	r3, #1
 8022fda:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8022fdc:	693b      	ldr	r3, [r7, #16]
 8022fde:	1c5a      	adds	r2, r3, #1
 8022fe0:	68fb      	ldr	r3, [r7, #12]
 8022fe2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8022fe4:	697b      	ldr	r3, [r7, #20]
}
 8022fe6:	4618      	mov	r0, r3
 8022fe8:	3718      	adds	r7, #24
 8022fea:	46bd      	mov	sp, r7
 8022fec:	bd80      	pop	{r7, pc}

08022fee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8022fee:	b580      	push	{r7, lr}
 8022ff0:	b082      	sub	sp, #8
 8022ff2:	af00      	add	r7, sp, #0
 8022ff4:	6078      	str	r0, [r7, #4]
 8022ff6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8022ff8:	687b      	ldr	r3, [r7, #4]
 8022ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022ffc:	2b00      	cmp	r3, #0
 8022ffe:	d018      	beq.n	8023032 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8023000:	687b      	ldr	r3, [r7, #4]
 8023002:	68da      	ldr	r2, [r3, #12]
 8023004:	687b      	ldr	r3, [r7, #4]
 8023006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023008:	441a      	add	r2, r3
 802300a:	687b      	ldr	r3, [r7, #4]
 802300c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 802300e:	687b      	ldr	r3, [r7, #4]
 8023010:	68da      	ldr	r2, [r3, #12]
 8023012:	687b      	ldr	r3, [r7, #4]
 8023014:	689b      	ldr	r3, [r3, #8]
 8023016:	429a      	cmp	r2, r3
 8023018:	d303      	bcc.n	8023022 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 802301a:	687b      	ldr	r3, [r7, #4]
 802301c:	681a      	ldr	r2, [r3, #0]
 802301e:	687b      	ldr	r3, [r7, #4]
 8023020:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8023022:	687b      	ldr	r3, [r7, #4]
 8023024:	68d9      	ldr	r1, [r3, #12]
 8023026:	687b      	ldr	r3, [r7, #4]
 8023028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802302a:	461a      	mov	r2, r3
 802302c:	6838      	ldr	r0, [r7, #0]
 802302e:	f005 ffcb 	bl	8028fc8 <memcpy>
	}
}
 8023032:	bf00      	nop
 8023034:	3708      	adds	r7, #8
 8023036:	46bd      	mov	sp, r7
 8023038:	bd80      	pop	{r7, pc}

0802303a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 802303a:	b580      	push	{r7, lr}
 802303c:	b084      	sub	sp, #16
 802303e:	af00      	add	r7, sp, #0
 8023040:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8023042:	f001 ffd3 	bl	8024fec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8023046:	687b      	ldr	r3, [r7, #4]
 8023048:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802304c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 802304e:	e011      	b.n	8023074 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8023050:	687b      	ldr	r3, [r7, #4]
 8023052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023054:	2b00      	cmp	r3, #0
 8023056:	d012      	beq.n	802307e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8023058:	687b      	ldr	r3, [r7, #4]
 802305a:	3324      	adds	r3, #36	; 0x24
 802305c:	4618      	mov	r0, r3
 802305e:	f000 fdd1 	bl	8023c04 <xTaskRemoveFromEventList>
 8023062:	4603      	mov	r3, r0
 8023064:	2b00      	cmp	r3, #0
 8023066:	d001      	beq.n	802306c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8023068:	f000 fea4 	bl	8023db4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 802306c:	7bfb      	ldrb	r3, [r7, #15]
 802306e:	3b01      	subs	r3, #1
 8023070:	b2db      	uxtb	r3, r3
 8023072:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8023074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8023078:	2b00      	cmp	r3, #0
 802307a:	dce9      	bgt.n	8023050 <prvUnlockQueue+0x16>
 802307c:	e000      	b.n	8023080 <prvUnlockQueue+0x46>
					break;
 802307e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8023080:	687b      	ldr	r3, [r7, #4]
 8023082:	22ff      	movs	r2, #255	; 0xff
 8023084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8023088:	f001 ffde 	bl	8025048 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 802308c:	f001 ffae 	bl	8024fec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8023090:	687b      	ldr	r3, [r7, #4]
 8023092:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8023096:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8023098:	e011      	b.n	80230be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802309a:	687b      	ldr	r3, [r7, #4]
 802309c:	691b      	ldr	r3, [r3, #16]
 802309e:	2b00      	cmp	r3, #0
 80230a0:	d012      	beq.n	80230c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80230a2:	687b      	ldr	r3, [r7, #4]
 80230a4:	3310      	adds	r3, #16
 80230a6:	4618      	mov	r0, r3
 80230a8:	f000 fdac 	bl	8023c04 <xTaskRemoveFromEventList>
 80230ac:	4603      	mov	r3, r0
 80230ae:	2b00      	cmp	r3, #0
 80230b0:	d001      	beq.n	80230b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80230b2:	f000 fe7f 	bl	8023db4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80230b6:	7bbb      	ldrb	r3, [r7, #14]
 80230b8:	3b01      	subs	r3, #1
 80230ba:	b2db      	uxtb	r3, r3
 80230bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80230be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80230c2:	2b00      	cmp	r3, #0
 80230c4:	dce9      	bgt.n	802309a <prvUnlockQueue+0x60>
 80230c6:	e000      	b.n	80230ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80230c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80230ca:	687b      	ldr	r3, [r7, #4]
 80230cc:	22ff      	movs	r2, #255	; 0xff
 80230ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80230d2:	f001 ffb9 	bl	8025048 <vPortExitCritical>
}
 80230d6:	bf00      	nop
 80230d8:	3710      	adds	r7, #16
 80230da:	46bd      	mov	sp, r7
 80230dc:	bd80      	pop	{r7, pc}

080230de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80230de:	b580      	push	{r7, lr}
 80230e0:	b084      	sub	sp, #16
 80230e2:	af00      	add	r7, sp, #0
 80230e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80230e6:	f001 ff81 	bl	8024fec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80230ea:	687b      	ldr	r3, [r7, #4]
 80230ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80230ee:	2b00      	cmp	r3, #0
 80230f0:	d102      	bne.n	80230f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80230f2:	2301      	movs	r3, #1
 80230f4:	60fb      	str	r3, [r7, #12]
 80230f6:	e001      	b.n	80230fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80230f8:	2300      	movs	r3, #0
 80230fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80230fc:	f001 ffa4 	bl	8025048 <vPortExitCritical>

	return xReturn;
 8023100:	68fb      	ldr	r3, [r7, #12]
}
 8023102:	4618      	mov	r0, r3
 8023104:	3710      	adds	r7, #16
 8023106:	46bd      	mov	sp, r7
 8023108:	bd80      	pop	{r7, pc}

0802310a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 802310a:	b580      	push	{r7, lr}
 802310c:	b084      	sub	sp, #16
 802310e:	af00      	add	r7, sp, #0
 8023110:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8023112:	f001 ff6b 	bl	8024fec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8023116:	687b      	ldr	r3, [r7, #4]
 8023118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802311a:	687b      	ldr	r3, [r7, #4]
 802311c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802311e:	429a      	cmp	r2, r3
 8023120:	d102      	bne.n	8023128 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8023122:	2301      	movs	r3, #1
 8023124:	60fb      	str	r3, [r7, #12]
 8023126:	e001      	b.n	802312c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8023128:	2300      	movs	r3, #0
 802312a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 802312c:	f001 ff8c 	bl	8025048 <vPortExitCritical>

	return xReturn;
 8023130:	68fb      	ldr	r3, [r7, #12]
}
 8023132:	4618      	mov	r0, r3
 8023134:	3710      	adds	r7, #16
 8023136:	46bd      	mov	sp, r7
 8023138:	bd80      	pop	{r7, pc}
	...

0802313c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 802313c:	b480      	push	{r7}
 802313e:	b085      	sub	sp, #20
 8023140:	af00      	add	r7, sp, #0
 8023142:	6078      	str	r0, [r7, #4]
 8023144:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8023146:	2300      	movs	r3, #0
 8023148:	60fb      	str	r3, [r7, #12]
 802314a:	e014      	b.n	8023176 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 802314c:	4a0e      	ldr	r2, [pc, #56]	; (8023188 <vQueueAddToRegistry+0x4c>)
 802314e:	68fb      	ldr	r3, [r7, #12]
 8023150:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8023154:	2b00      	cmp	r3, #0
 8023156:	d10b      	bne.n	8023170 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8023158:	490b      	ldr	r1, [pc, #44]	; (8023188 <vQueueAddToRegistry+0x4c>)
 802315a:	68fb      	ldr	r3, [r7, #12]
 802315c:	683a      	ldr	r2, [r7, #0]
 802315e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8023162:	4a09      	ldr	r2, [pc, #36]	; (8023188 <vQueueAddToRegistry+0x4c>)
 8023164:	68fb      	ldr	r3, [r7, #12]
 8023166:	00db      	lsls	r3, r3, #3
 8023168:	4413      	add	r3, r2
 802316a:	687a      	ldr	r2, [r7, #4]
 802316c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 802316e:	e005      	b.n	802317c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8023170:	68fb      	ldr	r3, [r7, #12]
 8023172:	3301      	adds	r3, #1
 8023174:	60fb      	str	r3, [r7, #12]
 8023176:	68fb      	ldr	r3, [r7, #12]
 8023178:	2b07      	cmp	r3, #7
 802317a:	d9e7      	bls.n	802314c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 802317c:	bf00      	nop
 802317e:	3714      	adds	r7, #20
 8023180:	46bd      	mov	sp, r7
 8023182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023186:	4770      	bx	lr
 8023188:	200131c0 	.word	0x200131c0

0802318c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 802318c:	b480      	push	{r7}
 802318e:	b085      	sub	sp, #20
 8023190:	af00      	add	r7, sp, #0
 8023192:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8023194:	2300      	movs	r3, #0
 8023196:	60fb      	str	r3, [r7, #12]
 8023198:	e016      	b.n	80231c8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 802319a:	4a10      	ldr	r2, [pc, #64]	; (80231dc <vQueueUnregisterQueue+0x50>)
 802319c:	68fb      	ldr	r3, [r7, #12]
 802319e:	00db      	lsls	r3, r3, #3
 80231a0:	4413      	add	r3, r2
 80231a2:	685b      	ldr	r3, [r3, #4]
 80231a4:	687a      	ldr	r2, [r7, #4]
 80231a6:	429a      	cmp	r2, r3
 80231a8:	d10b      	bne.n	80231c2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80231aa:	4a0c      	ldr	r2, [pc, #48]	; (80231dc <vQueueUnregisterQueue+0x50>)
 80231ac:	68fb      	ldr	r3, [r7, #12]
 80231ae:	2100      	movs	r1, #0
 80231b0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80231b4:	4a09      	ldr	r2, [pc, #36]	; (80231dc <vQueueUnregisterQueue+0x50>)
 80231b6:	68fb      	ldr	r3, [r7, #12]
 80231b8:	00db      	lsls	r3, r3, #3
 80231ba:	4413      	add	r3, r2
 80231bc:	2200      	movs	r2, #0
 80231be:	605a      	str	r2, [r3, #4]
				break;
 80231c0:	e005      	b.n	80231ce <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80231c2:	68fb      	ldr	r3, [r7, #12]
 80231c4:	3301      	adds	r3, #1
 80231c6:	60fb      	str	r3, [r7, #12]
 80231c8:	68fb      	ldr	r3, [r7, #12]
 80231ca:	2b07      	cmp	r3, #7
 80231cc:	d9e5      	bls.n	802319a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80231ce:	bf00      	nop
 80231d0:	3714      	adds	r7, #20
 80231d2:	46bd      	mov	sp, r7
 80231d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231d8:	4770      	bx	lr
 80231da:	bf00      	nop
 80231dc:	200131c0 	.word	0x200131c0

080231e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80231e0:	b580      	push	{r7, lr}
 80231e2:	b086      	sub	sp, #24
 80231e4:	af00      	add	r7, sp, #0
 80231e6:	60f8      	str	r0, [r7, #12]
 80231e8:	60b9      	str	r1, [r7, #8]
 80231ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80231ec:	68fb      	ldr	r3, [r7, #12]
 80231ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80231f0:	f001 fefc 	bl	8024fec <vPortEnterCritical>
 80231f4:	697b      	ldr	r3, [r7, #20]
 80231f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80231fa:	b25b      	sxtb	r3, r3
 80231fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023200:	d103      	bne.n	802320a <vQueueWaitForMessageRestricted+0x2a>
 8023202:	697b      	ldr	r3, [r7, #20]
 8023204:	2200      	movs	r2, #0
 8023206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802320a:	697b      	ldr	r3, [r7, #20]
 802320c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8023210:	b25b      	sxtb	r3, r3
 8023212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023216:	d103      	bne.n	8023220 <vQueueWaitForMessageRestricted+0x40>
 8023218:	697b      	ldr	r3, [r7, #20]
 802321a:	2200      	movs	r2, #0
 802321c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8023220:	f001 ff12 	bl	8025048 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8023224:	697b      	ldr	r3, [r7, #20]
 8023226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023228:	2b00      	cmp	r3, #0
 802322a:	d106      	bne.n	802323a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 802322c:	697b      	ldr	r3, [r7, #20]
 802322e:	3324      	adds	r3, #36	; 0x24
 8023230:	687a      	ldr	r2, [r7, #4]
 8023232:	68b9      	ldr	r1, [r7, #8]
 8023234:	4618      	mov	r0, r3
 8023236:	f000 fcbb 	bl	8023bb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 802323a:	6978      	ldr	r0, [r7, #20]
 802323c:	f7ff fefd 	bl	802303a <prvUnlockQueue>
	}
 8023240:	bf00      	nop
 8023242:	3718      	adds	r7, #24
 8023244:	46bd      	mov	sp, r7
 8023246:	bd80      	pop	{r7, pc}

08023248 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8023248:	b580      	push	{r7, lr}
 802324a:	b08e      	sub	sp, #56	; 0x38
 802324c:	af04      	add	r7, sp, #16
 802324e:	60f8      	str	r0, [r7, #12]
 8023250:	60b9      	str	r1, [r7, #8]
 8023252:	607a      	str	r2, [r7, #4]
 8023254:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8023256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023258:	2b00      	cmp	r3, #0
 802325a:	d109      	bne.n	8023270 <xTaskCreateStatic+0x28>
 802325c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023260:	f383 8811 	msr	BASEPRI, r3
 8023264:	f3bf 8f6f 	isb	sy
 8023268:	f3bf 8f4f 	dsb	sy
 802326c:	623b      	str	r3, [r7, #32]
 802326e:	e7fe      	b.n	802326e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8023270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023272:	2b00      	cmp	r3, #0
 8023274:	d109      	bne.n	802328a <xTaskCreateStatic+0x42>
 8023276:	f04f 0350 	mov.w	r3, #80	; 0x50
 802327a:	f383 8811 	msr	BASEPRI, r3
 802327e:	f3bf 8f6f 	isb	sy
 8023282:	f3bf 8f4f 	dsb	sy
 8023286:	61fb      	str	r3, [r7, #28]
 8023288:	e7fe      	b.n	8023288 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 802328a:	235c      	movs	r3, #92	; 0x5c
 802328c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 802328e:	693b      	ldr	r3, [r7, #16]
 8023290:	2b5c      	cmp	r3, #92	; 0x5c
 8023292:	d009      	beq.n	80232a8 <xTaskCreateStatic+0x60>
 8023294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023298:	f383 8811 	msr	BASEPRI, r3
 802329c:	f3bf 8f6f 	isb	sy
 80232a0:	f3bf 8f4f 	dsb	sy
 80232a4:	61bb      	str	r3, [r7, #24]
 80232a6:	e7fe      	b.n	80232a6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80232a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80232aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80232ac:	2b00      	cmp	r3, #0
 80232ae:	d01e      	beq.n	80232ee <xTaskCreateStatic+0xa6>
 80232b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80232b2:	2b00      	cmp	r3, #0
 80232b4:	d01b      	beq.n	80232ee <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80232b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80232b8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80232ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80232be:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80232c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232c2:	2202      	movs	r2, #2
 80232c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80232c8:	2300      	movs	r3, #0
 80232ca:	9303      	str	r3, [sp, #12]
 80232cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232ce:	9302      	str	r3, [sp, #8]
 80232d0:	f107 0314 	add.w	r3, r7, #20
 80232d4:	9301      	str	r3, [sp, #4]
 80232d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80232d8:	9300      	str	r3, [sp, #0]
 80232da:	683b      	ldr	r3, [r7, #0]
 80232dc:	687a      	ldr	r2, [r7, #4]
 80232de:	68b9      	ldr	r1, [r7, #8]
 80232e0:	68f8      	ldr	r0, [r7, #12]
 80232e2:	f000 f850 	bl	8023386 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80232e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80232e8:	f000 f8dc 	bl	80234a4 <prvAddNewTaskToReadyList>
 80232ec:	e001      	b.n	80232f2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80232ee:	2300      	movs	r3, #0
 80232f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80232f2:	697b      	ldr	r3, [r7, #20]
	}
 80232f4:	4618      	mov	r0, r3
 80232f6:	3728      	adds	r7, #40	; 0x28
 80232f8:	46bd      	mov	sp, r7
 80232fa:	bd80      	pop	{r7, pc}

080232fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80232fc:	b580      	push	{r7, lr}
 80232fe:	b08c      	sub	sp, #48	; 0x30
 8023300:	af04      	add	r7, sp, #16
 8023302:	60f8      	str	r0, [r7, #12]
 8023304:	60b9      	str	r1, [r7, #8]
 8023306:	603b      	str	r3, [r7, #0]
 8023308:	4613      	mov	r3, r2
 802330a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 802330c:	88fb      	ldrh	r3, [r7, #6]
 802330e:	009b      	lsls	r3, r3, #2
 8023310:	4618      	mov	r0, r3
 8023312:	f001 ff85 	bl	8025220 <pvPortMalloc>
 8023316:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8023318:	697b      	ldr	r3, [r7, #20]
 802331a:	2b00      	cmp	r3, #0
 802331c:	d00e      	beq.n	802333c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 802331e:	205c      	movs	r0, #92	; 0x5c
 8023320:	f001 ff7e 	bl	8025220 <pvPortMalloc>
 8023324:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8023326:	69fb      	ldr	r3, [r7, #28]
 8023328:	2b00      	cmp	r3, #0
 802332a:	d003      	beq.n	8023334 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 802332c:	69fb      	ldr	r3, [r7, #28]
 802332e:	697a      	ldr	r2, [r7, #20]
 8023330:	631a      	str	r2, [r3, #48]	; 0x30
 8023332:	e005      	b.n	8023340 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8023334:	6978      	ldr	r0, [r7, #20]
 8023336:	f002 f835 	bl	80253a4 <vPortFree>
 802333a:	e001      	b.n	8023340 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 802333c:	2300      	movs	r3, #0
 802333e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8023340:	69fb      	ldr	r3, [r7, #28]
 8023342:	2b00      	cmp	r3, #0
 8023344:	d017      	beq.n	8023376 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8023346:	69fb      	ldr	r3, [r7, #28]
 8023348:	2200      	movs	r2, #0
 802334a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 802334e:	88fa      	ldrh	r2, [r7, #6]
 8023350:	2300      	movs	r3, #0
 8023352:	9303      	str	r3, [sp, #12]
 8023354:	69fb      	ldr	r3, [r7, #28]
 8023356:	9302      	str	r3, [sp, #8]
 8023358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802335a:	9301      	str	r3, [sp, #4]
 802335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802335e:	9300      	str	r3, [sp, #0]
 8023360:	683b      	ldr	r3, [r7, #0]
 8023362:	68b9      	ldr	r1, [r7, #8]
 8023364:	68f8      	ldr	r0, [r7, #12]
 8023366:	f000 f80e 	bl	8023386 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 802336a:	69f8      	ldr	r0, [r7, #28]
 802336c:	f000 f89a 	bl	80234a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8023370:	2301      	movs	r3, #1
 8023372:	61bb      	str	r3, [r7, #24]
 8023374:	e002      	b.n	802337c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8023376:	f04f 33ff 	mov.w	r3, #4294967295
 802337a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 802337c:	69bb      	ldr	r3, [r7, #24]
	}
 802337e:	4618      	mov	r0, r3
 8023380:	3720      	adds	r7, #32
 8023382:	46bd      	mov	sp, r7
 8023384:	bd80      	pop	{r7, pc}

08023386 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8023386:	b580      	push	{r7, lr}
 8023388:	b088      	sub	sp, #32
 802338a:	af00      	add	r7, sp, #0
 802338c:	60f8      	str	r0, [r7, #12]
 802338e:	60b9      	str	r1, [r7, #8]
 8023390:	607a      	str	r2, [r7, #4]
 8023392:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8023394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023396:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8023398:	687b      	ldr	r3, [r7, #4]
 802339a:	009b      	lsls	r3, r3, #2
 802339c:	461a      	mov	r2, r3
 802339e:	21a5      	movs	r1, #165	; 0xa5
 80233a0:	f005 fe1d 	bl	8028fde <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80233a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80233a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80233a8:	687b      	ldr	r3, [r7, #4]
 80233aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80233ae:	3b01      	subs	r3, #1
 80233b0:	009b      	lsls	r3, r3, #2
 80233b2:	4413      	add	r3, r2
 80233b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80233b6:	69bb      	ldr	r3, [r7, #24]
 80233b8:	f023 0307 	bic.w	r3, r3, #7
 80233bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80233be:	69bb      	ldr	r3, [r7, #24]
 80233c0:	f003 0307 	and.w	r3, r3, #7
 80233c4:	2b00      	cmp	r3, #0
 80233c6:	d009      	beq.n	80233dc <prvInitialiseNewTask+0x56>
 80233c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80233cc:	f383 8811 	msr	BASEPRI, r3
 80233d0:	f3bf 8f6f 	isb	sy
 80233d4:	f3bf 8f4f 	dsb	sy
 80233d8:	617b      	str	r3, [r7, #20]
 80233da:	e7fe      	b.n	80233da <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80233dc:	68bb      	ldr	r3, [r7, #8]
 80233de:	2b00      	cmp	r3, #0
 80233e0:	d01f      	beq.n	8023422 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80233e2:	2300      	movs	r3, #0
 80233e4:	61fb      	str	r3, [r7, #28]
 80233e6:	e012      	b.n	802340e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80233e8:	68ba      	ldr	r2, [r7, #8]
 80233ea:	69fb      	ldr	r3, [r7, #28]
 80233ec:	4413      	add	r3, r2
 80233ee:	7819      	ldrb	r1, [r3, #0]
 80233f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80233f2:	69fb      	ldr	r3, [r7, #28]
 80233f4:	4413      	add	r3, r2
 80233f6:	3334      	adds	r3, #52	; 0x34
 80233f8:	460a      	mov	r2, r1
 80233fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80233fc:	68ba      	ldr	r2, [r7, #8]
 80233fe:	69fb      	ldr	r3, [r7, #28]
 8023400:	4413      	add	r3, r2
 8023402:	781b      	ldrb	r3, [r3, #0]
 8023404:	2b00      	cmp	r3, #0
 8023406:	d006      	beq.n	8023416 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8023408:	69fb      	ldr	r3, [r7, #28]
 802340a:	3301      	adds	r3, #1
 802340c:	61fb      	str	r3, [r7, #28]
 802340e:	69fb      	ldr	r3, [r7, #28]
 8023410:	2b0f      	cmp	r3, #15
 8023412:	d9e9      	bls.n	80233e8 <prvInitialiseNewTask+0x62>
 8023414:	e000      	b.n	8023418 <prvInitialiseNewTask+0x92>
			{
				break;
 8023416:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8023418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802341a:	2200      	movs	r2, #0
 802341c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8023420:	e003      	b.n	802342a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8023422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023424:	2200      	movs	r2, #0
 8023426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 802342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802342c:	2b37      	cmp	r3, #55	; 0x37
 802342e:	d901      	bls.n	8023434 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8023430:	2337      	movs	r3, #55	; 0x37
 8023432:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8023434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023438:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 802343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802343c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802343e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8023440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023442:	2200      	movs	r2, #0
 8023444:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8023446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023448:	3304      	adds	r3, #4
 802344a:	4618      	mov	r0, r3
 802344c:	f7fe fe58 	bl	8022100 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8023450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023452:	3318      	adds	r3, #24
 8023454:	4618      	mov	r0, r3
 8023456:	f7fe fe53 	bl	8022100 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 802345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802345c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802345e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8023460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023462:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8023466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023468:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 802346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802346c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802346e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8023470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023472:	2200      	movs	r2, #0
 8023474:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8023476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023478:	2200      	movs	r2, #0
 802347a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 802347e:	683a      	ldr	r2, [r7, #0]
 8023480:	68f9      	ldr	r1, [r7, #12]
 8023482:	69b8      	ldr	r0, [r7, #24]
 8023484:	f001 fc8a 	bl	8024d9c <pxPortInitialiseStack>
 8023488:	4602      	mov	r2, r0
 802348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802348c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 802348e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023490:	2b00      	cmp	r3, #0
 8023492:	d002      	beq.n	802349a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8023494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023498:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 802349a:	bf00      	nop
 802349c:	3720      	adds	r7, #32
 802349e:	46bd      	mov	sp, r7
 80234a0:	bd80      	pop	{r7, pc}
	...

080234a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80234a4:	b580      	push	{r7, lr}
 80234a6:	b082      	sub	sp, #8
 80234a8:	af00      	add	r7, sp, #0
 80234aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80234ac:	f001 fd9e 	bl	8024fec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80234b0:	4b2d      	ldr	r3, [pc, #180]	; (8023568 <prvAddNewTaskToReadyList+0xc4>)
 80234b2:	681b      	ldr	r3, [r3, #0]
 80234b4:	3301      	adds	r3, #1
 80234b6:	4a2c      	ldr	r2, [pc, #176]	; (8023568 <prvAddNewTaskToReadyList+0xc4>)
 80234b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80234ba:	4b2c      	ldr	r3, [pc, #176]	; (802356c <prvAddNewTaskToReadyList+0xc8>)
 80234bc:	681b      	ldr	r3, [r3, #0]
 80234be:	2b00      	cmp	r3, #0
 80234c0:	d109      	bne.n	80234d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80234c2:	4a2a      	ldr	r2, [pc, #168]	; (802356c <prvAddNewTaskToReadyList+0xc8>)
 80234c4:	687b      	ldr	r3, [r7, #4]
 80234c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80234c8:	4b27      	ldr	r3, [pc, #156]	; (8023568 <prvAddNewTaskToReadyList+0xc4>)
 80234ca:	681b      	ldr	r3, [r3, #0]
 80234cc:	2b01      	cmp	r3, #1
 80234ce:	d110      	bne.n	80234f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80234d0:	f000 fc94 	bl	8023dfc <prvInitialiseTaskLists>
 80234d4:	e00d      	b.n	80234f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80234d6:	4b26      	ldr	r3, [pc, #152]	; (8023570 <prvAddNewTaskToReadyList+0xcc>)
 80234d8:	681b      	ldr	r3, [r3, #0]
 80234da:	2b00      	cmp	r3, #0
 80234dc:	d109      	bne.n	80234f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80234de:	4b23      	ldr	r3, [pc, #140]	; (802356c <prvAddNewTaskToReadyList+0xc8>)
 80234e0:	681b      	ldr	r3, [r3, #0]
 80234e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80234e4:	687b      	ldr	r3, [r7, #4]
 80234e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80234e8:	429a      	cmp	r2, r3
 80234ea:	d802      	bhi.n	80234f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80234ec:	4a1f      	ldr	r2, [pc, #124]	; (802356c <prvAddNewTaskToReadyList+0xc8>)
 80234ee:	687b      	ldr	r3, [r7, #4]
 80234f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80234f2:	4b20      	ldr	r3, [pc, #128]	; (8023574 <prvAddNewTaskToReadyList+0xd0>)
 80234f4:	681b      	ldr	r3, [r3, #0]
 80234f6:	3301      	adds	r3, #1
 80234f8:	4a1e      	ldr	r2, [pc, #120]	; (8023574 <prvAddNewTaskToReadyList+0xd0>)
 80234fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80234fc:	4b1d      	ldr	r3, [pc, #116]	; (8023574 <prvAddNewTaskToReadyList+0xd0>)
 80234fe:	681a      	ldr	r2, [r3, #0]
 8023500:	687b      	ldr	r3, [r7, #4]
 8023502:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8023504:	687b      	ldr	r3, [r7, #4]
 8023506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023508:	4b1b      	ldr	r3, [pc, #108]	; (8023578 <prvAddNewTaskToReadyList+0xd4>)
 802350a:	681b      	ldr	r3, [r3, #0]
 802350c:	429a      	cmp	r2, r3
 802350e:	d903      	bls.n	8023518 <prvAddNewTaskToReadyList+0x74>
 8023510:	687b      	ldr	r3, [r7, #4]
 8023512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023514:	4a18      	ldr	r2, [pc, #96]	; (8023578 <prvAddNewTaskToReadyList+0xd4>)
 8023516:	6013      	str	r3, [r2, #0]
 8023518:	687b      	ldr	r3, [r7, #4]
 802351a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802351c:	4613      	mov	r3, r2
 802351e:	009b      	lsls	r3, r3, #2
 8023520:	4413      	add	r3, r2
 8023522:	009b      	lsls	r3, r3, #2
 8023524:	4a15      	ldr	r2, [pc, #84]	; (802357c <prvAddNewTaskToReadyList+0xd8>)
 8023526:	441a      	add	r2, r3
 8023528:	687b      	ldr	r3, [r7, #4]
 802352a:	3304      	adds	r3, #4
 802352c:	4619      	mov	r1, r3
 802352e:	4610      	mov	r0, r2
 8023530:	f7fe fdf3 	bl	802211a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8023534:	f001 fd88 	bl	8025048 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8023538:	4b0d      	ldr	r3, [pc, #52]	; (8023570 <prvAddNewTaskToReadyList+0xcc>)
 802353a:	681b      	ldr	r3, [r3, #0]
 802353c:	2b00      	cmp	r3, #0
 802353e:	d00e      	beq.n	802355e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8023540:	4b0a      	ldr	r3, [pc, #40]	; (802356c <prvAddNewTaskToReadyList+0xc8>)
 8023542:	681b      	ldr	r3, [r3, #0]
 8023544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023546:	687b      	ldr	r3, [r7, #4]
 8023548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802354a:	429a      	cmp	r2, r3
 802354c:	d207      	bcs.n	802355e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 802354e:	4b0c      	ldr	r3, [pc, #48]	; (8023580 <prvAddNewTaskToReadyList+0xdc>)
 8023550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8023554:	601a      	str	r2, [r3, #0]
 8023556:	f3bf 8f4f 	dsb	sy
 802355a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 802355e:	bf00      	nop
 8023560:	3708      	adds	r7, #8
 8023562:	46bd      	mov	sp, r7
 8023564:	bd80      	pop	{r7, pc}
 8023566:	bf00      	nop
 8023568:	20002124 	.word	0x20002124
 802356c:	20001c50 	.word	0x20001c50
 8023570:	20002130 	.word	0x20002130
 8023574:	20002140 	.word	0x20002140
 8023578:	2000212c 	.word	0x2000212c
 802357c:	20001c54 	.word	0x20001c54
 8023580:	e000ed04 	.word	0xe000ed04

08023584 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8023584:	b580      	push	{r7, lr}
 8023586:	b08a      	sub	sp, #40	; 0x28
 8023588:	af00      	add	r7, sp, #0
 802358a:	6078      	str	r0, [r7, #4]
 802358c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 802358e:	2300      	movs	r3, #0
 8023590:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8023592:	687b      	ldr	r3, [r7, #4]
 8023594:	2b00      	cmp	r3, #0
 8023596:	d109      	bne.n	80235ac <vTaskDelayUntil+0x28>
 8023598:	f04f 0350 	mov.w	r3, #80	; 0x50
 802359c:	f383 8811 	msr	BASEPRI, r3
 80235a0:	f3bf 8f6f 	isb	sy
 80235a4:	f3bf 8f4f 	dsb	sy
 80235a8:	617b      	str	r3, [r7, #20]
 80235aa:	e7fe      	b.n	80235aa <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80235ac:	683b      	ldr	r3, [r7, #0]
 80235ae:	2b00      	cmp	r3, #0
 80235b0:	d109      	bne.n	80235c6 <vTaskDelayUntil+0x42>
 80235b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80235b6:	f383 8811 	msr	BASEPRI, r3
 80235ba:	f3bf 8f6f 	isb	sy
 80235be:	f3bf 8f4f 	dsb	sy
 80235c2:	613b      	str	r3, [r7, #16]
 80235c4:	e7fe      	b.n	80235c4 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80235c6:	4b29      	ldr	r3, [pc, #164]	; (802366c <vTaskDelayUntil+0xe8>)
 80235c8:	681b      	ldr	r3, [r3, #0]
 80235ca:	2b00      	cmp	r3, #0
 80235cc:	d009      	beq.n	80235e2 <vTaskDelayUntil+0x5e>
 80235ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80235d2:	f383 8811 	msr	BASEPRI, r3
 80235d6:	f3bf 8f6f 	isb	sy
 80235da:	f3bf 8f4f 	dsb	sy
 80235de:	60fb      	str	r3, [r7, #12]
 80235e0:	e7fe      	b.n	80235e0 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 80235e2:	f000 f8e1 	bl	80237a8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80235e6:	4b22      	ldr	r3, [pc, #136]	; (8023670 <vTaskDelayUntil+0xec>)
 80235e8:	681b      	ldr	r3, [r3, #0]
 80235ea:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80235ec:	687b      	ldr	r3, [r7, #4]
 80235ee:	681b      	ldr	r3, [r3, #0]
 80235f0:	683a      	ldr	r2, [r7, #0]
 80235f2:	4413      	add	r3, r2
 80235f4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80235f6:	687b      	ldr	r3, [r7, #4]
 80235f8:	681b      	ldr	r3, [r3, #0]
 80235fa:	6a3a      	ldr	r2, [r7, #32]
 80235fc:	429a      	cmp	r2, r3
 80235fe:	d20b      	bcs.n	8023618 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8023600:	687b      	ldr	r3, [r7, #4]
 8023602:	681b      	ldr	r3, [r3, #0]
 8023604:	69fa      	ldr	r2, [r7, #28]
 8023606:	429a      	cmp	r2, r3
 8023608:	d211      	bcs.n	802362e <vTaskDelayUntil+0xaa>
 802360a:	69fa      	ldr	r2, [r7, #28]
 802360c:	6a3b      	ldr	r3, [r7, #32]
 802360e:	429a      	cmp	r2, r3
 8023610:	d90d      	bls.n	802362e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8023612:	2301      	movs	r3, #1
 8023614:	627b      	str	r3, [r7, #36]	; 0x24
 8023616:	e00a      	b.n	802362e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8023618:	687b      	ldr	r3, [r7, #4]
 802361a:	681b      	ldr	r3, [r3, #0]
 802361c:	69fa      	ldr	r2, [r7, #28]
 802361e:	429a      	cmp	r2, r3
 8023620:	d303      	bcc.n	802362a <vTaskDelayUntil+0xa6>
 8023622:	69fa      	ldr	r2, [r7, #28]
 8023624:	6a3b      	ldr	r3, [r7, #32]
 8023626:	429a      	cmp	r2, r3
 8023628:	d901      	bls.n	802362e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 802362a:	2301      	movs	r3, #1
 802362c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 802362e:	687b      	ldr	r3, [r7, #4]
 8023630:	69fa      	ldr	r2, [r7, #28]
 8023632:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8023634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023636:	2b00      	cmp	r3, #0
 8023638:	d006      	beq.n	8023648 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 802363a:	69fa      	ldr	r2, [r7, #28]
 802363c:	6a3b      	ldr	r3, [r7, #32]
 802363e:	1ad3      	subs	r3, r2, r3
 8023640:	2100      	movs	r1, #0
 8023642:	4618      	mov	r0, r3
 8023644:	f001 f810 	bl	8024668 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8023648:	f000 f8bc 	bl	80237c4 <xTaskResumeAll>
 802364c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 802364e:	69bb      	ldr	r3, [r7, #24]
 8023650:	2b00      	cmp	r3, #0
 8023652:	d107      	bne.n	8023664 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8023654:	4b07      	ldr	r3, [pc, #28]	; (8023674 <vTaskDelayUntil+0xf0>)
 8023656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802365a:	601a      	str	r2, [r3, #0]
 802365c:	f3bf 8f4f 	dsb	sy
 8023660:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8023664:	bf00      	nop
 8023666:	3728      	adds	r7, #40	; 0x28
 8023668:	46bd      	mov	sp, r7
 802366a:	bd80      	pop	{r7, pc}
 802366c:	2000214c 	.word	0x2000214c
 8023670:	20002128 	.word	0x20002128
 8023674:	e000ed04 	.word	0xe000ed04

08023678 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8023678:	b580      	push	{r7, lr}
 802367a:	b084      	sub	sp, #16
 802367c:	af00      	add	r7, sp, #0
 802367e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8023680:	2300      	movs	r3, #0
 8023682:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8023684:	687b      	ldr	r3, [r7, #4]
 8023686:	2b00      	cmp	r3, #0
 8023688:	d016      	beq.n	80236b8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 802368a:	4b13      	ldr	r3, [pc, #76]	; (80236d8 <vTaskDelay+0x60>)
 802368c:	681b      	ldr	r3, [r3, #0]
 802368e:	2b00      	cmp	r3, #0
 8023690:	d009      	beq.n	80236a6 <vTaskDelay+0x2e>
 8023692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023696:	f383 8811 	msr	BASEPRI, r3
 802369a:	f3bf 8f6f 	isb	sy
 802369e:	f3bf 8f4f 	dsb	sy
 80236a2:	60bb      	str	r3, [r7, #8]
 80236a4:	e7fe      	b.n	80236a4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80236a6:	f000 f87f 	bl	80237a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80236aa:	2100      	movs	r1, #0
 80236ac:	6878      	ldr	r0, [r7, #4]
 80236ae:	f000 ffdb 	bl	8024668 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80236b2:	f000 f887 	bl	80237c4 <xTaskResumeAll>
 80236b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80236b8:	68fb      	ldr	r3, [r7, #12]
 80236ba:	2b00      	cmp	r3, #0
 80236bc:	d107      	bne.n	80236ce <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80236be:	4b07      	ldr	r3, [pc, #28]	; (80236dc <vTaskDelay+0x64>)
 80236c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80236c4:	601a      	str	r2, [r3, #0]
 80236c6:	f3bf 8f4f 	dsb	sy
 80236ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80236ce:	bf00      	nop
 80236d0:	3710      	adds	r7, #16
 80236d2:	46bd      	mov	sp, r7
 80236d4:	bd80      	pop	{r7, pc}
 80236d6:	bf00      	nop
 80236d8:	2000214c 	.word	0x2000214c
 80236dc:	e000ed04 	.word	0xe000ed04

080236e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80236e0:	b580      	push	{r7, lr}
 80236e2:	b08a      	sub	sp, #40	; 0x28
 80236e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80236e6:	2300      	movs	r3, #0
 80236e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80236ea:	2300      	movs	r3, #0
 80236ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80236ee:	463a      	mov	r2, r7
 80236f0:	1d39      	adds	r1, r7, #4
 80236f2:	f107 0308 	add.w	r3, r7, #8
 80236f6:	4618      	mov	r0, r3
 80236f8:	f7fe fcae 	bl	8022058 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80236fc:	6839      	ldr	r1, [r7, #0]
 80236fe:	687b      	ldr	r3, [r7, #4]
 8023700:	68ba      	ldr	r2, [r7, #8]
 8023702:	9202      	str	r2, [sp, #8]
 8023704:	9301      	str	r3, [sp, #4]
 8023706:	2300      	movs	r3, #0
 8023708:	9300      	str	r3, [sp, #0]
 802370a:	2300      	movs	r3, #0
 802370c:	460a      	mov	r2, r1
 802370e:	4920      	ldr	r1, [pc, #128]	; (8023790 <vTaskStartScheduler+0xb0>)
 8023710:	4820      	ldr	r0, [pc, #128]	; (8023794 <vTaskStartScheduler+0xb4>)
 8023712:	f7ff fd99 	bl	8023248 <xTaskCreateStatic>
 8023716:	4602      	mov	r2, r0
 8023718:	4b1f      	ldr	r3, [pc, #124]	; (8023798 <vTaskStartScheduler+0xb8>)
 802371a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 802371c:	4b1e      	ldr	r3, [pc, #120]	; (8023798 <vTaskStartScheduler+0xb8>)
 802371e:	681b      	ldr	r3, [r3, #0]
 8023720:	2b00      	cmp	r3, #0
 8023722:	d002      	beq.n	802372a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8023724:	2301      	movs	r3, #1
 8023726:	617b      	str	r3, [r7, #20]
 8023728:	e001      	b.n	802372e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 802372a:	2300      	movs	r3, #0
 802372c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 802372e:	697b      	ldr	r3, [r7, #20]
 8023730:	2b01      	cmp	r3, #1
 8023732:	d102      	bne.n	802373a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8023734:	f000 ffec 	bl	8024710 <xTimerCreateTimerTask>
 8023738:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 802373a:	697b      	ldr	r3, [r7, #20]
 802373c:	2b01      	cmp	r3, #1
 802373e:	d115      	bne.n	802376c <vTaskStartScheduler+0x8c>
 8023740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023744:	f383 8811 	msr	BASEPRI, r3
 8023748:	f3bf 8f6f 	isb	sy
 802374c:	f3bf 8f4f 	dsb	sy
 8023750:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8023752:	4b12      	ldr	r3, [pc, #72]	; (802379c <vTaskStartScheduler+0xbc>)
 8023754:	f04f 32ff 	mov.w	r2, #4294967295
 8023758:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 802375a:	4b11      	ldr	r3, [pc, #68]	; (80237a0 <vTaskStartScheduler+0xc0>)
 802375c:	2201      	movs	r2, #1
 802375e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8023760:	4b10      	ldr	r3, [pc, #64]	; (80237a4 <vTaskStartScheduler+0xc4>)
 8023762:	2200      	movs	r2, #0
 8023764:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8023766:	f001 fba3 	bl	8024eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 802376a:	e00d      	b.n	8023788 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 802376c:	697b      	ldr	r3, [r7, #20]
 802376e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023772:	d109      	bne.n	8023788 <vTaskStartScheduler+0xa8>
 8023774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023778:	f383 8811 	msr	BASEPRI, r3
 802377c:	f3bf 8f6f 	isb	sy
 8023780:	f3bf 8f4f 	dsb	sy
 8023784:	60fb      	str	r3, [r7, #12]
 8023786:	e7fe      	b.n	8023786 <vTaskStartScheduler+0xa6>
}
 8023788:	bf00      	nop
 802378a:	3718      	adds	r7, #24
 802378c:	46bd      	mov	sp, r7
 802378e:	bd80      	pop	{r7, pc}
 8023790:	0802d8e0 	.word	0x0802d8e0
 8023794:	08023dcd 	.word	0x08023dcd
 8023798:	20002148 	.word	0x20002148
 802379c:	20002144 	.word	0x20002144
 80237a0:	20002130 	.word	0x20002130
 80237a4:	20002128 	.word	0x20002128

080237a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80237a8:	b480      	push	{r7}
 80237aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80237ac:	4b04      	ldr	r3, [pc, #16]	; (80237c0 <vTaskSuspendAll+0x18>)
 80237ae:	681b      	ldr	r3, [r3, #0]
 80237b0:	3301      	adds	r3, #1
 80237b2:	4a03      	ldr	r2, [pc, #12]	; (80237c0 <vTaskSuspendAll+0x18>)
 80237b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80237b6:	bf00      	nop
 80237b8:	46bd      	mov	sp, r7
 80237ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237be:	4770      	bx	lr
 80237c0:	2000214c 	.word	0x2000214c

080237c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80237c4:	b580      	push	{r7, lr}
 80237c6:	b084      	sub	sp, #16
 80237c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80237ca:	2300      	movs	r3, #0
 80237cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80237ce:	2300      	movs	r3, #0
 80237d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80237d2:	4b41      	ldr	r3, [pc, #260]	; (80238d8 <xTaskResumeAll+0x114>)
 80237d4:	681b      	ldr	r3, [r3, #0]
 80237d6:	2b00      	cmp	r3, #0
 80237d8:	d109      	bne.n	80237ee <xTaskResumeAll+0x2a>
 80237da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80237de:	f383 8811 	msr	BASEPRI, r3
 80237e2:	f3bf 8f6f 	isb	sy
 80237e6:	f3bf 8f4f 	dsb	sy
 80237ea:	603b      	str	r3, [r7, #0]
 80237ec:	e7fe      	b.n	80237ec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80237ee:	f001 fbfd 	bl	8024fec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80237f2:	4b39      	ldr	r3, [pc, #228]	; (80238d8 <xTaskResumeAll+0x114>)
 80237f4:	681b      	ldr	r3, [r3, #0]
 80237f6:	3b01      	subs	r3, #1
 80237f8:	4a37      	ldr	r2, [pc, #220]	; (80238d8 <xTaskResumeAll+0x114>)
 80237fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80237fc:	4b36      	ldr	r3, [pc, #216]	; (80238d8 <xTaskResumeAll+0x114>)
 80237fe:	681b      	ldr	r3, [r3, #0]
 8023800:	2b00      	cmp	r3, #0
 8023802:	d162      	bne.n	80238ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8023804:	4b35      	ldr	r3, [pc, #212]	; (80238dc <xTaskResumeAll+0x118>)
 8023806:	681b      	ldr	r3, [r3, #0]
 8023808:	2b00      	cmp	r3, #0
 802380a:	d05e      	beq.n	80238ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 802380c:	e02f      	b.n	802386e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802380e:	4b34      	ldr	r3, [pc, #208]	; (80238e0 <xTaskResumeAll+0x11c>)
 8023810:	68db      	ldr	r3, [r3, #12]
 8023812:	68db      	ldr	r3, [r3, #12]
 8023814:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8023816:	68fb      	ldr	r3, [r7, #12]
 8023818:	3318      	adds	r3, #24
 802381a:	4618      	mov	r0, r3
 802381c:	f7fe fcda 	bl	80221d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8023820:	68fb      	ldr	r3, [r7, #12]
 8023822:	3304      	adds	r3, #4
 8023824:	4618      	mov	r0, r3
 8023826:	f7fe fcd5 	bl	80221d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 802382a:	68fb      	ldr	r3, [r7, #12]
 802382c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802382e:	4b2d      	ldr	r3, [pc, #180]	; (80238e4 <xTaskResumeAll+0x120>)
 8023830:	681b      	ldr	r3, [r3, #0]
 8023832:	429a      	cmp	r2, r3
 8023834:	d903      	bls.n	802383e <xTaskResumeAll+0x7a>
 8023836:	68fb      	ldr	r3, [r7, #12]
 8023838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802383a:	4a2a      	ldr	r2, [pc, #168]	; (80238e4 <xTaskResumeAll+0x120>)
 802383c:	6013      	str	r3, [r2, #0]
 802383e:	68fb      	ldr	r3, [r7, #12]
 8023840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023842:	4613      	mov	r3, r2
 8023844:	009b      	lsls	r3, r3, #2
 8023846:	4413      	add	r3, r2
 8023848:	009b      	lsls	r3, r3, #2
 802384a:	4a27      	ldr	r2, [pc, #156]	; (80238e8 <xTaskResumeAll+0x124>)
 802384c:	441a      	add	r2, r3
 802384e:	68fb      	ldr	r3, [r7, #12]
 8023850:	3304      	adds	r3, #4
 8023852:	4619      	mov	r1, r3
 8023854:	4610      	mov	r0, r2
 8023856:	f7fe fc60 	bl	802211a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802385a:	68fb      	ldr	r3, [r7, #12]
 802385c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802385e:	4b23      	ldr	r3, [pc, #140]	; (80238ec <xTaskResumeAll+0x128>)
 8023860:	681b      	ldr	r3, [r3, #0]
 8023862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023864:	429a      	cmp	r2, r3
 8023866:	d302      	bcc.n	802386e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8023868:	4b21      	ldr	r3, [pc, #132]	; (80238f0 <xTaskResumeAll+0x12c>)
 802386a:	2201      	movs	r2, #1
 802386c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 802386e:	4b1c      	ldr	r3, [pc, #112]	; (80238e0 <xTaskResumeAll+0x11c>)
 8023870:	681b      	ldr	r3, [r3, #0]
 8023872:	2b00      	cmp	r3, #0
 8023874:	d1cb      	bne.n	802380e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8023876:	68fb      	ldr	r3, [r7, #12]
 8023878:	2b00      	cmp	r3, #0
 802387a:	d001      	beq.n	8023880 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 802387c:	f000 fb58 	bl	8023f30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8023880:	4b1c      	ldr	r3, [pc, #112]	; (80238f4 <xTaskResumeAll+0x130>)
 8023882:	681b      	ldr	r3, [r3, #0]
 8023884:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8023886:	687b      	ldr	r3, [r7, #4]
 8023888:	2b00      	cmp	r3, #0
 802388a:	d010      	beq.n	80238ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 802388c:	f000 f858 	bl	8023940 <xTaskIncrementTick>
 8023890:	4603      	mov	r3, r0
 8023892:	2b00      	cmp	r3, #0
 8023894:	d002      	beq.n	802389c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8023896:	4b16      	ldr	r3, [pc, #88]	; (80238f0 <xTaskResumeAll+0x12c>)
 8023898:	2201      	movs	r2, #1
 802389a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 802389c:	687b      	ldr	r3, [r7, #4]
 802389e:	3b01      	subs	r3, #1
 80238a0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80238a2:	687b      	ldr	r3, [r7, #4]
 80238a4:	2b00      	cmp	r3, #0
 80238a6:	d1f1      	bne.n	802388c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80238a8:	4b12      	ldr	r3, [pc, #72]	; (80238f4 <xTaskResumeAll+0x130>)
 80238aa:	2200      	movs	r2, #0
 80238ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80238ae:	4b10      	ldr	r3, [pc, #64]	; (80238f0 <xTaskResumeAll+0x12c>)
 80238b0:	681b      	ldr	r3, [r3, #0]
 80238b2:	2b00      	cmp	r3, #0
 80238b4:	d009      	beq.n	80238ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80238b6:	2301      	movs	r3, #1
 80238b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80238ba:	4b0f      	ldr	r3, [pc, #60]	; (80238f8 <xTaskResumeAll+0x134>)
 80238bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80238c0:	601a      	str	r2, [r3, #0]
 80238c2:	f3bf 8f4f 	dsb	sy
 80238c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80238ca:	f001 fbbd 	bl	8025048 <vPortExitCritical>

	return xAlreadyYielded;
 80238ce:	68bb      	ldr	r3, [r7, #8]
}
 80238d0:	4618      	mov	r0, r3
 80238d2:	3710      	adds	r7, #16
 80238d4:	46bd      	mov	sp, r7
 80238d6:	bd80      	pop	{r7, pc}
 80238d8:	2000214c 	.word	0x2000214c
 80238dc:	20002124 	.word	0x20002124
 80238e0:	200020e4 	.word	0x200020e4
 80238e4:	2000212c 	.word	0x2000212c
 80238e8:	20001c54 	.word	0x20001c54
 80238ec:	20001c50 	.word	0x20001c50
 80238f0:	20002138 	.word	0x20002138
 80238f4:	20002134 	.word	0x20002134
 80238f8:	e000ed04 	.word	0xe000ed04

080238fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80238fc:	b480      	push	{r7}
 80238fe:	b083      	sub	sp, #12
 8023900:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8023902:	4b05      	ldr	r3, [pc, #20]	; (8023918 <xTaskGetTickCount+0x1c>)
 8023904:	681b      	ldr	r3, [r3, #0]
 8023906:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8023908:	687b      	ldr	r3, [r7, #4]
}
 802390a:	4618      	mov	r0, r3
 802390c:	370c      	adds	r7, #12
 802390e:	46bd      	mov	sp, r7
 8023910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023914:	4770      	bx	lr
 8023916:	bf00      	nop
 8023918:	20002128 	.word	0x20002128

0802391c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 802391c:	b580      	push	{r7, lr}
 802391e:	b082      	sub	sp, #8
 8023920:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8023922:	f001 fc3f 	bl	80251a4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8023926:	2300      	movs	r3, #0
 8023928:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 802392a:	4b04      	ldr	r3, [pc, #16]	; (802393c <xTaskGetTickCountFromISR+0x20>)
 802392c:	681b      	ldr	r3, [r3, #0]
 802392e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8023930:	683b      	ldr	r3, [r7, #0]
}
 8023932:	4618      	mov	r0, r3
 8023934:	3708      	adds	r7, #8
 8023936:	46bd      	mov	sp, r7
 8023938:	bd80      	pop	{r7, pc}
 802393a:	bf00      	nop
 802393c:	20002128 	.word	0x20002128

08023940 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8023940:	b580      	push	{r7, lr}
 8023942:	b086      	sub	sp, #24
 8023944:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8023946:	2300      	movs	r3, #0
 8023948:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802394a:	4b4e      	ldr	r3, [pc, #312]	; (8023a84 <xTaskIncrementTick+0x144>)
 802394c:	681b      	ldr	r3, [r3, #0]
 802394e:	2b00      	cmp	r3, #0
 8023950:	f040 8088 	bne.w	8023a64 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8023954:	4b4c      	ldr	r3, [pc, #304]	; (8023a88 <xTaskIncrementTick+0x148>)
 8023956:	681b      	ldr	r3, [r3, #0]
 8023958:	3301      	adds	r3, #1
 802395a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 802395c:	4a4a      	ldr	r2, [pc, #296]	; (8023a88 <xTaskIncrementTick+0x148>)
 802395e:	693b      	ldr	r3, [r7, #16]
 8023960:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8023962:	693b      	ldr	r3, [r7, #16]
 8023964:	2b00      	cmp	r3, #0
 8023966:	d11f      	bne.n	80239a8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8023968:	4b48      	ldr	r3, [pc, #288]	; (8023a8c <xTaskIncrementTick+0x14c>)
 802396a:	681b      	ldr	r3, [r3, #0]
 802396c:	681b      	ldr	r3, [r3, #0]
 802396e:	2b00      	cmp	r3, #0
 8023970:	d009      	beq.n	8023986 <xTaskIncrementTick+0x46>
 8023972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023976:	f383 8811 	msr	BASEPRI, r3
 802397a:	f3bf 8f6f 	isb	sy
 802397e:	f3bf 8f4f 	dsb	sy
 8023982:	603b      	str	r3, [r7, #0]
 8023984:	e7fe      	b.n	8023984 <xTaskIncrementTick+0x44>
 8023986:	4b41      	ldr	r3, [pc, #260]	; (8023a8c <xTaskIncrementTick+0x14c>)
 8023988:	681b      	ldr	r3, [r3, #0]
 802398a:	60fb      	str	r3, [r7, #12]
 802398c:	4b40      	ldr	r3, [pc, #256]	; (8023a90 <xTaskIncrementTick+0x150>)
 802398e:	681b      	ldr	r3, [r3, #0]
 8023990:	4a3e      	ldr	r2, [pc, #248]	; (8023a8c <xTaskIncrementTick+0x14c>)
 8023992:	6013      	str	r3, [r2, #0]
 8023994:	4a3e      	ldr	r2, [pc, #248]	; (8023a90 <xTaskIncrementTick+0x150>)
 8023996:	68fb      	ldr	r3, [r7, #12]
 8023998:	6013      	str	r3, [r2, #0]
 802399a:	4b3e      	ldr	r3, [pc, #248]	; (8023a94 <xTaskIncrementTick+0x154>)
 802399c:	681b      	ldr	r3, [r3, #0]
 802399e:	3301      	adds	r3, #1
 80239a0:	4a3c      	ldr	r2, [pc, #240]	; (8023a94 <xTaskIncrementTick+0x154>)
 80239a2:	6013      	str	r3, [r2, #0]
 80239a4:	f000 fac4 	bl	8023f30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80239a8:	4b3b      	ldr	r3, [pc, #236]	; (8023a98 <xTaskIncrementTick+0x158>)
 80239aa:	681b      	ldr	r3, [r3, #0]
 80239ac:	693a      	ldr	r2, [r7, #16]
 80239ae:	429a      	cmp	r2, r3
 80239b0:	d349      	bcc.n	8023a46 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80239b2:	4b36      	ldr	r3, [pc, #216]	; (8023a8c <xTaskIncrementTick+0x14c>)
 80239b4:	681b      	ldr	r3, [r3, #0]
 80239b6:	681b      	ldr	r3, [r3, #0]
 80239b8:	2b00      	cmp	r3, #0
 80239ba:	d104      	bne.n	80239c6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80239bc:	4b36      	ldr	r3, [pc, #216]	; (8023a98 <xTaskIncrementTick+0x158>)
 80239be:	f04f 32ff 	mov.w	r2, #4294967295
 80239c2:	601a      	str	r2, [r3, #0]
					break;
 80239c4:	e03f      	b.n	8023a46 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80239c6:	4b31      	ldr	r3, [pc, #196]	; (8023a8c <xTaskIncrementTick+0x14c>)
 80239c8:	681b      	ldr	r3, [r3, #0]
 80239ca:	68db      	ldr	r3, [r3, #12]
 80239cc:	68db      	ldr	r3, [r3, #12]
 80239ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80239d0:	68bb      	ldr	r3, [r7, #8]
 80239d2:	685b      	ldr	r3, [r3, #4]
 80239d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80239d6:	693a      	ldr	r2, [r7, #16]
 80239d8:	687b      	ldr	r3, [r7, #4]
 80239da:	429a      	cmp	r2, r3
 80239dc:	d203      	bcs.n	80239e6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80239de:	4a2e      	ldr	r2, [pc, #184]	; (8023a98 <xTaskIncrementTick+0x158>)
 80239e0:	687b      	ldr	r3, [r7, #4]
 80239e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80239e4:	e02f      	b.n	8023a46 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80239e6:	68bb      	ldr	r3, [r7, #8]
 80239e8:	3304      	adds	r3, #4
 80239ea:	4618      	mov	r0, r3
 80239ec:	f7fe fbf2 	bl	80221d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80239f0:	68bb      	ldr	r3, [r7, #8]
 80239f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80239f4:	2b00      	cmp	r3, #0
 80239f6:	d004      	beq.n	8023a02 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80239f8:	68bb      	ldr	r3, [r7, #8]
 80239fa:	3318      	adds	r3, #24
 80239fc:	4618      	mov	r0, r3
 80239fe:	f7fe fbe9 	bl	80221d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8023a02:	68bb      	ldr	r3, [r7, #8]
 8023a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023a06:	4b25      	ldr	r3, [pc, #148]	; (8023a9c <xTaskIncrementTick+0x15c>)
 8023a08:	681b      	ldr	r3, [r3, #0]
 8023a0a:	429a      	cmp	r2, r3
 8023a0c:	d903      	bls.n	8023a16 <xTaskIncrementTick+0xd6>
 8023a0e:	68bb      	ldr	r3, [r7, #8]
 8023a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023a12:	4a22      	ldr	r2, [pc, #136]	; (8023a9c <xTaskIncrementTick+0x15c>)
 8023a14:	6013      	str	r3, [r2, #0]
 8023a16:	68bb      	ldr	r3, [r7, #8]
 8023a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023a1a:	4613      	mov	r3, r2
 8023a1c:	009b      	lsls	r3, r3, #2
 8023a1e:	4413      	add	r3, r2
 8023a20:	009b      	lsls	r3, r3, #2
 8023a22:	4a1f      	ldr	r2, [pc, #124]	; (8023aa0 <xTaskIncrementTick+0x160>)
 8023a24:	441a      	add	r2, r3
 8023a26:	68bb      	ldr	r3, [r7, #8]
 8023a28:	3304      	adds	r3, #4
 8023a2a:	4619      	mov	r1, r3
 8023a2c:	4610      	mov	r0, r2
 8023a2e:	f7fe fb74 	bl	802211a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8023a32:	68bb      	ldr	r3, [r7, #8]
 8023a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023a36:	4b1b      	ldr	r3, [pc, #108]	; (8023aa4 <xTaskIncrementTick+0x164>)
 8023a38:	681b      	ldr	r3, [r3, #0]
 8023a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023a3c:	429a      	cmp	r2, r3
 8023a3e:	d3b8      	bcc.n	80239b2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8023a40:	2301      	movs	r3, #1
 8023a42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8023a44:	e7b5      	b.n	80239b2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8023a46:	4b17      	ldr	r3, [pc, #92]	; (8023aa4 <xTaskIncrementTick+0x164>)
 8023a48:	681b      	ldr	r3, [r3, #0]
 8023a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023a4c:	4914      	ldr	r1, [pc, #80]	; (8023aa0 <xTaskIncrementTick+0x160>)
 8023a4e:	4613      	mov	r3, r2
 8023a50:	009b      	lsls	r3, r3, #2
 8023a52:	4413      	add	r3, r2
 8023a54:	009b      	lsls	r3, r3, #2
 8023a56:	440b      	add	r3, r1
 8023a58:	681b      	ldr	r3, [r3, #0]
 8023a5a:	2b01      	cmp	r3, #1
 8023a5c:	d907      	bls.n	8023a6e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8023a5e:	2301      	movs	r3, #1
 8023a60:	617b      	str	r3, [r7, #20]
 8023a62:	e004      	b.n	8023a6e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8023a64:	4b10      	ldr	r3, [pc, #64]	; (8023aa8 <xTaskIncrementTick+0x168>)
 8023a66:	681b      	ldr	r3, [r3, #0]
 8023a68:	3301      	adds	r3, #1
 8023a6a:	4a0f      	ldr	r2, [pc, #60]	; (8023aa8 <xTaskIncrementTick+0x168>)
 8023a6c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8023a6e:	4b0f      	ldr	r3, [pc, #60]	; (8023aac <xTaskIncrementTick+0x16c>)
 8023a70:	681b      	ldr	r3, [r3, #0]
 8023a72:	2b00      	cmp	r3, #0
 8023a74:	d001      	beq.n	8023a7a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8023a76:	2301      	movs	r3, #1
 8023a78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8023a7a:	697b      	ldr	r3, [r7, #20]
}
 8023a7c:	4618      	mov	r0, r3
 8023a7e:	3718      	adds	r7, #24
 8023a80:	46bd      	mov	sp, r7
 8023a82:	bd80      	pop	{r7, pc}
 8023a84:	2000214c 	.word	0x2000214c
 8023a88:	20002128 	.word	0x20002128
 8023a8c:	200020dc 	.word	0x200020dc
 8023a90:	200020e0 	.word	0x200020e0
 8023a94:	2000213c 	.word	0x2000213c
 8023a98:	20002144 	.word	0x20002144
 8023a9c:	2000212c 	.word	0x2000212c
 8023aa0:	20001c54 	.word	0x20001c54
 8023aa4:	20001c50 	.word	0x20001c50
 8023aa8:	20002134 	.word	0x20002134
 8023aac:	20002138 	.word	0x20002138

08023ab0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8023ab0:	b480      	push	{r7}
 8023ab2:	b085      	sub	sp, #20
 8023ab4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8023ab6:	4b27      	ldr	r3, [pc, #156]	; (8023b54 <vTaskSwitchContext+0xa4>)
 8023ab8:	681b      	ldr	r3, [r3, #0]
 8023aba:	2b00      	cmp	r3, #0
 8023abc:	d003      	beq.n	8023ac6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8023abe:	4b26      	ldr	r3, [pc, #152]	; (8023b58 <vTaskSwitchContext+0xa8>)
 8023ac0:	2201      	movs	r2, #1
 8023ac2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8023ac4:	e040      	b.n	8023b48 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8023ac6:	4b24      	ldr	r3, [pc, #144]	; (8023b58 <vTaskSwitchContext+0xa8>)
 8023ac8:	2200      	movs	r2, #0
 8023aca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8023acc:	4b23      	ldr	r3, [pc, #140]	; (8023b5c <vTaskSwitchContext+0xac>)
 8023ace:	681b      	ldr	r3, [r3, #0]
 8023ad0:	60fb      	str	r3, [r7, #12]
 8023ad2:	e00f      	b.n	8023af4 <vTaskSwitchContext+0x44>
 8023ad4:	68fb      	ldr	r3, [r7, #12]
 8023ad6:	2b00      	cmp	r3, #0
 8023ad8:	d109      	bne.n	8023aee <vTaskSwitchContext+0x3e>
 8023ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023ade:	f383 8811 	msr	BASEPRI, r3
 8023ae2:	f3bf 8f6f 	isb	sy
 8023ae6:	f3bf 8f4f 	dsb	sy
 8023aea:	607b      	str	r3, [r7, #4]
 8023aec:	e7fe      	b.n	8023aec <vTaskSwitchContext+0x3c>
 8023aee:	68fb      	ldr	r3, [r7, #12]
 8023af0:	3b01      	subs	r3, #1
 8023af2:	60fb      	str	r3, [r7, #12]
 8023af4:	491a      	ldr	r1, [pc, #104]	; (8023b60 <vTaskSwitchContext+0xb0>)
 8023af6:	68fa      	ldr	r2, [r7, #12]
 8023af8:	4613      	mov	r3, r2
 8023afa:	009b      	lsls	r3, r3, #2
 8023afc:	4413      	add	r3, r2
 8023afe:	009b      	lsls	r3, r3, #2
 8023b00:	440b      	add	r3, r1
 8023b02:	681b      	ldr	r3, [r3, #0]
 8023b04:	2b00      	cmp	r3, #0
 8023b06:	d0e5      	beq.n	8023ad4 <vTaskSwitchContext+0x24>
 8023b08:	68fa      	ldr	r2, [r7, #12]
 8023b0a:	4613      	mov	r3, r2
 8023b0c:	009b      	lsls	r3, r3, #2
 8023b0e:	4413      	add	r3, r2
 8023b10:	009b      	lsls	r3, r3, #2
 8023b12:	4a13      	ldr	r2, [pc, #76]	; (8023b60 <vTaskSwitchContext+0xb0>)
 8023b14:	4413      	add	r3, r2
 8023b16:	60bb      	str	r3, [r7, #8]
 8023b18:	68bb      	ldr	r3, [r7, #8]
 8023b1a:	685b      	ldr	r3, [r3, #4]
 8023b1c:	685a      	ldr	r2, [r3, #4]
 8023b1e:	68bb      	ldr	r3, [r7, #8]
 8023b20:	605a      	str	r2, [r3, #4]
 8023b22:	68bb      	ldr	r3, [r7, #8]
 8023b24:	685a      	ldr	r2, [r3, #4]
 8023b26:	68bb      	ldr	r3, [r7, #8]
 8023b28:	3308      	adds	r3, #8
 8023b2a:	429a      	cmp	r2, r3
 8023b2c:	d104      	bne.n	8023b38 <vTaskSwitchContext+0x88>
 8023b2e:	68bb      	ldr	r3, [r7, #8]
 8023b30:	685b      	ldr	r3, [r3, #4]
 8023b32:	685a      	ldr	r2, [r3, #4]
 8023b34:	68bb      	ldr	r3, [r7, #8]
 8023b36:	605a      	str	r2, [r3, #4]
 8023b38:	68bb      	ldr	r3, [r7, #8]
 8023b3a:	685b      	ldr	r3, [r3, #4]
 8023b3c:	68db      	ldr	r3, [r3, #12]
 8023b3e:	4a09      	ldr	r2, [pc, #36]	; (8023b64 <vTaskSwitchContext+0xb4>)
 8023b40:	6013      	str	r3, [r2, #0]
 8023b42:	4a06      	ldr	r2, [pc, #24]	; (8023b5c <vTaskSwitchContext+0xac>)
 8023b44:	68fb      	ldr	r3, [r7, #12]
 8023b46:	6013      	str	r3, [r2, #0]
}
 8023b48:	bf00      	nop
 8023b4a:	3714      	adds	r7, #20
 8023b4c:	46bd      	mov	sp, r7
 8023b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b52:	4770      	bx	lr
 8023b54:	2000214c 	.word	0x2000214c
 8023b58:	20002138 	.word	0x20002138
 8023b5c:	2000212c 	.word	0x2000212c
 8023b60:	20001c54 	.word	0x20001c54
 8023b64:	20001c50 	.word	0x20001c50

08023b68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8023b68:	b580      	push	{r7, lr}
 8023b6a:	b084      	sub	sp, #16
 8023b6c:	af00      	add	r7, sp, #0
 8023b6e:	6078      	str	r0, [r7, #4]
 8023b70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8023b72:	687b      	ldr	r3, [r7, #4]
 8023b74:	2b00      	cmp	r3, #0
 8023b76:	d109      	bne.n	8023b8c <vTaskPlaceOnEventList+0x24>
 8023b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023b7c:	f383 8811 	msr	BASEPRI, r3
 8023b80:	f3bf 8f6f 	isb	sy
 8023b84:	f3bf 8f4f 	dsb	sy
 8023b88:	60fb      	str	r3, [r7, #12]
 8023b8a:	e7fe      	b.n	8023b8a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8023b8c:	4b07      	ldr	r3, [pc, #28]	; (8023bac <vTaskPlaceOnEventList+0x44>)
 8023b8e:	681b      	ldr	r3, [r3, #0]
 8023b90:	3318      	adds	r3, #24
 8023b92:	4619      	mov	r1, r3
 8023b94:	6878      	ldr	r0, [r7, #4]
 8023b96:	f7fe fae4 	bl	8022162 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8023b9a:	2101      	movs	r1, #1
 8023b9c:	6838      	ldr	r0, [r7, #0]
 8023b9e:	f000 fd63 	bl	8024668 <prvAddCurrentTaskToDelayedList>
}
 8023ba2:	bf00      	nop
 8023ba4:	3710      	adds	r7, #16
 8023ba6:	46bd      	mov	sp, r7
 8023ba8:	bd80      	pop	{r7, pc}
 8023baa:	bf00      	nop
 8023bac:	20001c50 	.word	0x20001c50

08023bb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8023bb0:	b580      	push	{r7, lr}
 8023bb2:	b086      	sub	sp, #24
 8023bb4:	af00      	add	r7, sp, #0
 8023bb6:	60f8      	str	r0, [r7, #12]
 8023bb8:	60b9      	str	r1, [r7, #8]
 8023bba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8023bbc:	68fb      	ldr	r3, [r7, #12]
 8023bbe:	2b00      	cmp	r3, #0
 8023bc0:	d109      	bne.n	8023bd6 <vTaskPlaceOnEventListRestricted+0x26>
 8023bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023bc6:	f383 8811 	msr	BASEPRI, r3
 8023bca:	f3bf 8f6f 	isb	sy
 8023bce:	f3bf 8f4f 	dsb	sy
 8023bd2:	617b      	str	r3, [r7, #20]
 8023bd4:	e7fe      	b.n	8023bd4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8023bd6:	4b0a      	ldr	r3, [pc, #40]	; (8023c00 <vTaskPlaceOnEventListRestricted+0x50>)
 8023bd8:	681b      	ldr	r3, [r3, #0]
 8023bda:	3318      	adds	r3, #24
 8023bdc:	4619      	mov	r1, r3
 8023bde:	68f8      	ldr	r0, [r7, #12]
 8023be0:	f7fe fa9b 	bl	802211a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8023be4:	687b      	ldr	r3, [r7, #4]
 8023be6:	2b00      	cmp	r3, #0
 8023be8:	d002      	beq.n	8023bf0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8023bea:	f04f 33ff 	mov.w	r3, #4294967295
 8023bee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8023bf0:	6879      	ldr	r1, [r7, #4]
 8023bf2:	68b8      	ldr	r0, [r7, #8]
 8023bf4:	f000 fd38 	bl	8024668 <prvAddCurrentTaskToDelayedList>
	}
 8023bf8:	bf00      	nop
 8023bfa:	3718      	adds	r7, #24
 8023bfc:	46bd      	mov	sp, r7
 8023bfe:	bd80      	pop	{r7, pc}
 8023c00:	20001c50 	.word	0x20001c50

08023c04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8023c04:	b580      	push	{r7, lr}
 8023c06:	b086      	sub	sp, #24
 8023c08:	af00      	add	r7, sp, #0
 8023c0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8023c0c:	687b      	ldr	r3, [r7, #4]
 8023c0e:	68db      	ldr	r3, [r3, #12]
 8023c10:	68db      	ldr	r3, [r3, #12]
 8023c12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8023c14:	693b      	ldr	r3, [r7, #16]
 8023c16:	2b00      	cmp	r3, #0
 8023c18:	d109      	bne.n	8023c2e <xTaskRemoveFromEventList+0x2a>
 8023c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023c1e:	f383 8811 	msr	BASEPRI, r3
 8023c22:	f3bf 8f6f 	isb	sy
 8023c26:	f3bf 8f4f 	dsb	sy
 8023c2a:	60fb      	str	r3, [r7, #12]
 8023c2c:	e7fe      	b.n	8023c2c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8023c2e:	693b      	ldr	r3, [r7, #16]
 8023c30:	3318      	adds	r3, #24
 8023c32:	4618      	mov	r0, r3
 8023c34:	f7fe face 	bl	80221d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8023c38:	4b1d      	ldr	r3, [pc, #116]	; (8023cb0 <xTaskRemoveFromEventList+0xac>)
 8023c3a:	681b      	ldr	r3, [r3, #0]
 8023c3c:	2b00      	cmp	r3, #0
 8023c3e:	d11d      	bne.n	8023c7c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8023c40:	693b      	ldr	r3, [r7, #16]
 8023c42:	3304      	adds	r3, #4
 8023c44:	4618      	mov	r0, r3
 8023c46:	f7fe fac5 	bl	80221d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8023c4a:	693b      	ldr	r3, [r7, #16]
 8023c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023c4e:	4b19      	ldr	r3, [pc, #100]	; (8023cb4 <xTaskRemoveFromEventList+0xb0>)
 8023c50:	681b      	ldr	r3, [r3, #0]
 8023c52:	429a      	cmp	r2, r3
 8023c54:	d903      	bls.n	8023c5e <xTaskRemoveFromEventList+0x5a>
 8023c56:	693b      	ldr	r3, [r7, #16]
 8023c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023c5a:	4a16      	ldr	r2, [pc, #88]	; (8023cb4 <xTaskRemoveFromEventList+0xb0>)
 8023c5c:	6013      	str	r3, [r2, #0]
 8023c5e:	693b      	ldr	r3, [r7, #16]
 8023c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023c62:	4613      	mov	r3, r2
 8023c64:	009b      	lsls	r3, r3, #2
 8023c66:	4413      	add	r3, r2
 8023c68:	009b      	lsls	r3, r3, #2
 8023c6a:	4a13      	ldr	r2, [pc, #76]	; (8023cb8 <xTaskRemoveFromEventList+0xb4>)
 8023c6c:	441a      	add	r2, r3
 8023c6e:	693b      	ldr	r3, [r7, #16]
 8023c70:	3304      	adds	r3, #4
 8023c72:	4619      	mov	r1, r3
 8023c74:	4610      	mov	r0, r2
 8023c76:	f7fe fa50 	bl	802211a <vListInsertEnd>
 8023c7a:	e005      	b.n	8023c88 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8023c7c:	693b      	ldr	r3, [r7, #16]
 8023c7e:	3318      	adds	r3, #24
 8023c80:	4619      	mov	r1, r3
 8023c82:	480e      	ldr	r0, [pc, #56]	; (8023cbc <xTaskRemoveFromEventList+0xb8>)
 8023c84:	f7fe fa49 	bl	802211a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8023c88:	693b      	ldr	r3, [r7, #16]
 8023c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023c8c:	4b0c      	ldr	r3, [pc, #48]	; (8023cc0 <xTaskRemoveFromEventList+0xbc>)
 8023c8e:	681b      	ldr	r3, [r3, #0]
 8023c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023c92:	429a      	cmp	r2, r3
 8023c94:	d905      	bls.n	8023ca2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8023c96:	2301      	movs	r3, #1
 8023c98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8023c9a:	4b0a      	ldr	r3, [pc, #40]	; (8023cc4 <xTaskRemoveFromEventList+0xc0>)
 8023c9c:	2201      	movs	r2, #1
 8023c9e:	601a      	str	r2, [r3, #0]
 8023ca0:	e001      	b.n	8023ca6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8023ca2:	2300      	movs	r3, #0
 8023ca4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8023ca6:	697b      	ldr	r3, [r7, #20]
}
 8023ca8:	4618      	mov	r0, r3
 8023caa:	3718      	adds	r7, #24
 8023cac:	46bd      	mov	sp, r7
 8023cae:	bd80      	pop	{r7, pc}
 8023cb0:	2000214c 	.word	0x2000214c
 8023cb4:	2000212c 	.word	0x2000212c
 8023cb8:	20001c54 	.word	0x20001c54
 8023cbc:	200020e4 	.word	0x200020e4
 8023cc0:	20001c50 	.word	0x20001c50
 8023cc4:	20002138 	.word	0x20002138

08023cc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8023cc8:	b480      	push	{r7}
 8023cca:	b083      	sub	sp, #12
 8023ccc:	af00      	add	r7, sp, #0
 8023cce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8023cd0:	4b06      	ldr	r3, [pc, #24]	; (8023cec <vTaskInternalSetTimeOutState+0x24>)
 8023cd2:	681a      	ldr	r2, [r3, #0]
 8023cd4:	687b      	ldr	r3, [r7, #4]
 8023cd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8023cd8:	4b05      	ldr	r3, [pc, #20]	; (8023cf0 <vTaskInternalSetTimeOutState+0x28>)
 8023cda:	681a      	ldr	r2, [r3, #0]
 8023cdc:	687b      	ldr	r3, [r7, #4]
 8023cde:	605a      	str	r2, [r3, #4]
}
 8023ce0:	bf00      	nop
 8023ce2:	370c      	adds	r7, #12
 8023ce4:	46bd      	mov	sp, r7
 8023ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cea:	4770      	bx	lr
 8023cec:	2000213c 	.word	0x2000213c
 8023cf0:	20002128 	.word	0x20002128

08023cf4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8023cf4:	b580      	push	{r7, lr}
 8023cf6:	b088      	sub	sp, #32
 8023cf8:	af00      	add	r7, sp, #0
 8023cfa:	6078      	str	r0, [r7, #4]
 8023cfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8023cfe:	687b      	ldr	r3, [r7, #4]
 8023d00:	2b00      	cmp	r3, #0
 8023d02:	d109      	bne.n	8023d18 <xTaskCheckForTimeOut+0x24>
 8023d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023d08:	f383 8811 	msr	BASEPRI, r3
 8023d0c:	f3bf 8f6f 	isb	sy
 8023d10:	f3bf 8f4f 	dsb	sy
 8023d14:	613b      	str	r3, [r7, #16]
 8023d16:	e7fe      	b.n	8023d16 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8023d18:	683b      	ldr	r3, [r7, #0]
 8023d1a:	2b00      	cmp	r3, #0
 8023d1c:	d109      	bne.n	8023d32 <xTaskCheckForTimeOut+0x3e>
 8023d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023d22:	f383 8811 	msr	BASEPRI, r3
 8023d26:	f3bf 8f6f 	isb	sy
 8023d2a:	f3bf 8f4f 	dsb	sy
 8023d2e:	60fb      	str	r3, [r7, #12]
 8023d30:	e7fe      	b.n	8023d30 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8023d32:	f001 f95b 	bl	8024fec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8023d36:	4b1d      	ldr	r3, [pc, #116]	; (8023dac <xTaskCheckForTimeOut+0xb8>)
 8023d38:	681b      	ldr	r3, [r3, #0]
 8023d3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8023d3c:	687b      	ldr	r3, [r7, #4]
 8023d3e:	685b      	ldr	r3, [r3, #4]
 8023d40:	69ba      	ldr	r2, [r7, #24]
 8023d42:	1ad3      	subs	r3, r2, r3
 8023d44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8023d46:	683b      	ldr	r3, [r7, #0]
 8023d48:	681b      	ldr	r3, [r3, #0]
 8023d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023d4e:	d102      	bne.n	8023d56 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8023d50:	2300      	movs	r3, #0
 8023d52:	61fb      	str	r3, [r7, #28]
 8023d54:	e023      	b.n	8023d9e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8023d56:	687b      	ldr	r3, [r7, #4]
 8023d58:	681a      	ldr	r2, [r3, #0]
 8023d5a:	4b15      	ldr	r3, [pc, #84]	; (8023db0 <xTaskCheckForTimeOut+0xbc>)
 8023d5c:	681b      	ldr	r3, [r3, #0]
 8023d5e:	429a      	cmp	r2, r3
 8023d60:	d007      	beq.n	8023d72 <xTaskCheckForTimeOut+0x7e>
 8023d62:	687b      	ldr	r3, [r7, #4]
 8023d64:	685b      	ldr	r3, [r3, #4]
 8023d66:	69ba      	ldr	r2, [r7, #24]
 8023d68:	429a      	cmp	r2, r3
 8023d6a:	d302      	bcc.n	8023d72 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8023d6c:	2301      	movs	r3, #1
 8023d6e:	61fb      	str	r3, [r7, #28]
 8023d70:	e015      	b.n	8023d9e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8023d72:	683b      	ldr	r3, [r7, #0]
 8023d74:	681b      	ldr	r3, [r3, #0]
 8023d76:	697a      	ldr	r2, [r7, #20]
 8023d78:	429a      	cmp	r2, r3
 8023d7a:	d20b      	bcs.n	8023d94 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8023d7c:	683b      	ldr	r3, [r7, #0]
 8023d7e:	681a      	ldr	r2, [r3, #0]
 8023d80:	697b      	ldr	r3, [r7, #20]
 8023d82:	1ad2      	subs	r2, r2, r3
 8023d84:	683b      	ldr	r3, [r7, #0]
 8023d86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8023d88:	6878      	ldr	r0, [r7, #4]
 8023d8a:	f7ff ff9d 	bl	8023cc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8023d8e:	2300      	movs	r3, #0
 8023d90:	61fb      	str	r3, [r7, #28]
 8023d92:	e004      	b.n	8023d9e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8023d94:	683b      	ldr	r3, [r7, #0]
 8023d96:	2200      	movs	r2, #0
 8023d98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8023d9a:	2301      	movs	r3, #1
 8023d9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8023d9e:	f001 f953 	bl	8025048 <vPortExitCritical>

	return xReturn;
 8023da2:	69fb      	ldr	r3, [r7, #28]
}
 8023da4:	4618      	mov	r0, r3
 8023da6:	3720      	adds	r7, #32
 8023da8:	46bd      	mov	sp, r7
 8023daa:	bd80      	pop	{r7, pc}
 8023dac:	20002128 	.word	0x20002128
 8023db0:	2000213c 	.word	0x2000213c

08023db4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8023db4:	b480      	push	{r7}
 8023db6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8023db8:	4b03      	ldr	r3, [pc, #12]	; (8023dc8 <vTaskMissedYield+0x14>)
 8023dba:	2201      	movs	r2, #1
 8023dbc:	601a      	str	r2, [r3, #0]
}
 8023dbe:	bf00      	nop
 8023dc0:	46bd      	mov	sp, r7
 8023dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dc6:	4770      	bx	lr
 8023dc8:	20002138 	.word	0x20002138

08023dcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8023dcc:	b580      	push	{r7, lr}
 8023dce:	b082      	sub	sp, #8
 8023dd0:	af00      	add	r7, sp, #0
 8023dd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8023dd4:	f000 f852 	bl	8023e7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8023dd8:	4b06      	ldr	r3, [pc, #24]	; (8023df4 <prvIdleTask+0x28>)
 8023dda:	681b      	ldr	r3, [r3, #0]
 8023ddc:	2b01      	cmp	r3, #1
 8023dde:	d9f9      	bls.n	8023dd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8023de0:	4b05      	ldr	r3, [pc, #20]	; (8023df8 <prvIdleTask+0x2c>)
 8023de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8023de6:	601a      	str	r2, [r3, #0]
 8023de8:	f3bf 8f4f 	dsb	sy
 8023dec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8023df0:	e7f0      	b.n	8023dd4 <prvIdleTask+0x8>
 8023df2:	bf00      	nop
 8023df4:	20001c54 	.word	0x20001c54
 8023df8:	e000ed04 	.word	0xe000ed04

08023dfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8023dfc:	b580      	push	{r7, lr}
 8023dfe:	b082      	sub	sp, #8
 8023e00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8023e02:	2300      	movs	r3, #0
 8023e04:	607b      	str	r3, [r7, #4]
 8023e06:	e00c      	b.n	8023e22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8023e08:	687a      	ldr	r2, [r7, #4]
 8023e0a:	4613      	mov	r3, r2
 8023e0c:	009b      	lsls	r3, r3, #2
 8023e0e:	4413      	add	r3, r2
 8023e10:	009b      	lsls	r3, r3, #2
 8023e12:	4a12      	ldr	r2, [pc, #72]	; (8023e5c <prvInitialiseTaskLists+0x60>)
 8023e14:	4413      	add	r3, r2
 8023e16:	4618      	mov	r0, r3
 8023e18:	f7fe f952 	bl	80220c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8023e1c:	687b      	ldr	r3, [r7, #4]
 8023e1e:	3301      	adds	r3, #1
 8023e20:	607b      	str	r3, [r7, #4]
 8023e22:	687b      	ldr	r3, [r7, #4]
 8023e24:	2b37      	cmp	r3, #55	; 0x37
 8023e26:	d9ef      	bls.n	8023e08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8023e28:	480d      	ldr	r0, [pc, #52]	; (8023e60 <prvInitialiseTaskLists+0x64>)
 8023e2a:	f7fe f949 	bl	80220c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8023e2e:	480d      	ldr	r0, [pc, #52]	; (8023e64 <prvInitialiseTaskLists+0x68>)
 8023e30:	f7fe f946 	bl	80220c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8023e34:	480c      	ldr	r0, [pc, #48]	; (8023e68 <prvInitialiseTaskLists+0x6c>)
 8023e36:	f7fe f943 	bl	80220c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8023e3a:	480c      	ldr	r0, [pc, #48]	; (8023e6c <prvInitialiseTaskLists+0x70>)
 8023e3c:	f7fe f940 	bl	80220c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8023e40:	480b      	ldr	r0, [pc, #44]	; (8023e70 <prvInitialiseTaskLists+0x74>)
 8023e42:	f7fe f93d 	bl	80220c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8023e46:	4b0b      	ldr	r3, [pc, #44]	; (8023e74 <prvInitialiseTaskLists+0x78>)
 8023e48:	4a05      	ldr	r2, [pc, #20]	; (8023e60 <prvInitialiseTaskLists+0x64>)
 8023e4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8023e4c:	4b0a      	ldr	r3, [pc, #40]	; (8023e78 <prvInitialiseTaskLists+0x7c>)
 8023e4e:	4a05      	ldr	r2, [pc, #20]	; (8023e64 <prvInitialiseTaskLists+0x68>)
 8023e50:	601a      	str	r2, [r3, #0]
}
 8023e52:	bf00      	nop
 8023e54:	3708      	adds	r7, #8
 8023e56:	46bd      	mov	sp, r7
 8023e58:	bd80      	pop	{r7, pc}
 8023e5a:	bf00      	nop
 8023e5c:	20001c54 	.word	0x20001c54
 8023e60:	200020b4 	.word	0x200020b4
 8023e64:	200020c8 	.word	0x200020c8
 8023e68:	200020e4 	.word	0x200020e4
 8023e6c:	200020f8 	.word	0x200020f8
 8023e70:	20002110 	.word	0x20002110
 8023e74:	200020dc 	.word	0x200020dc
 8023e78:	200020e0 	.word	0x200020e0

08023e7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8023e7c:	b580      	push	{r7, lr}
 8023e7e:	b082      	sub	sp, #8
 8023e80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8023e82:	e019      	b.n	8023eb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8023e84:	f001 f8b2 	bl	8024fec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8023e88:	4b0f      	ldr	r3, [pc, #60]	; (8023ec8 <prvCheckTasksWaitingTermination+0x4c>)
 8023e8a:	68db      	ldr	r3, [r3, #12]
 8023e8c:	68db      	ldr	r3, [r3, #12]
 8023e8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8023e90:	687b      	ldr	r3, [r7, #4]
 8023e92:	3304      	adds	r3, #4
 8023e94:	4618      	mov	r0, r3
 8023e96:	f7fe f99d 	bl	80221d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8023e9a:	4b0c      	ldr	r3, [pc, #48]	; (8023ecc <prvCheckTasksWaitingTermination+0x50>)
 8023e9c:	681b      	ldr	r3, [r3, #0]
 8023e9e:	3b01      	subs	r3, #1
 8023ea0:	4a0a      	ldr	r2, [pc, #40]	; (8023ecc <prvCheckTasksWaitingTermination+0x50>)
 8023ea2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8023ea4:	4b0a      	ldr	r3, [pc, #40]	; (8023ed0 <prvCheckTasksWaitingTermination+0x54>)
 8023ea6:	681b      	ldr	r3, [r3, #0]
 8023ea8:	3b01      	subs	r3, #1
 8023eaa:	4a09      	ldr	r2, [pc, #36]	; (8023ed0 <prvCheckTasksWaitingTermination+0x54>)
 8023eac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8023eae:	f001 f8cb 	bl	8025048 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8023eb2:	6878      	ldr	r0, [r7, #4]
 8023eb4:	f000 f80e 	bl	8023ed4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8023eb8:	4b05      	ldr	r3, [pc, #20]	; (8023ed0 <prvCheckTasksWaitingTermination+0x54>)
 8023eba:	681b      	ldr	r3, [r3, #0]
 8023ebc:	2b00      	cmp	r3, #0
 8023ebe:	d1e1      	bne.n	8023e84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8023ec0:	bf00      	nop
 8023ec2:	3708      	adds	r7, #8
 8023ec4:	46bd      	mov	sp, r7
 8023ec6:	bd80      	pop	{r7, pc}
 8023ec8:	200020f8 	.word	0x200020f8
 8023ecc:	20002124 	.word	0x20002124
 8023ed0:	2000210c 	.word	0x2000210c

08023ed4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8023ed4:	b580      	push	{r7, lr}
 8023ed6:	b084      	sub	sp, #16
 8023ed8:	af00      	add	r7, sp, #0
 8023eda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8023edc:	687b      	ldr	r3, [r7, #4]
 8023ede:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8023ee2:	2b00      	cmp	r3, #0
 8023ee4:	d108      	bne.n	8023ef8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8023ee6:	687b      	ldr	r3, [r7, #4]
 8023ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023eea:	4618      	mov	r0, r3
 8023eec:	f001 fa5a 	bl	80253a4 <vPortFree>
				vPortFree( pxTCB );
 8023ef0:	6878      	ldr	r0, [r7, #4]
 8023ef2:	f001 fa57 	bl	80253a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8023ef6:	e017      	b.n	8023f28 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8023ef8:	687b      	ldr	r3, [r7, #4]
 8023efa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8023efe:	2b01      	cmp	r3, #1
 8023f00:	d103      	bne.n	8023f0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8023f02:	6878      	ldr	r0, [r7, #4]
 8023f04:	f001 fa4e 	bl	80253a4 <vPortFree>
	}
 8023f08:	e00e      	b.n	8023f28 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8023f0a:	687b      	ldr	r3, [r7, #4]
 8023f0c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8023f10:	2b02      	cmp	r3, #2
 8023f12:	d009      	beq.n	8023f28 <prvDeleteTCB+0x54>
 8023f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023f18:	f383 8811 	msr	BASEPRI, r3
 8023f1c:	f3bf 8f6f 	isb	sy
 8023f20:	f3bf 8f4f 	dsb	sy
 8023f24:	60fb      	str	r3, [r7, #12]
 8023f26:	e7fe      	b.n	8023f26 <prvDeleteTCB+0x52>
	}
 8023f28:	bf00      	nop
 8023f2a:	3710      	adds	r7, #16
 8023f2c:	46bd      	mov	sp, r7
 8023f2e:	bd80      	pop	{r7, pc}

08023f30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8023f30:	b480      	push	{r7}
 8023f32:	b083      	sub	sp, #12
 8023f34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8023f36:	4b0c      	ldr	r3, [pc, #48]	; (8023f68 <prvResetNextTaskUnblockTime+0x38>)
 8023f38:	681b      	ldr	r3, [r3, #0]
 8023f3a:	681b      	ldr	r3, [r3, #0]
 8023f3c:	2b00      	cmp	r3, #0
 8023f3e:	d104      	bne.n	8023f4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8023f40:	4b0a      	ldr	r3, [pc, #40]	; (8023f6c <prvResetNextTaskUnblockTime+0x3c>)
 8023f42:	f04f 32ff 	mov.w	r2, #4294967295
 8023f46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8023f48:	e008      	b.n	8023f5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8023f4a:	4b07      	ldr	r3, [pc, #28]	; (8023f68 <prvResetNextTaskUnblockTime+0x38>)
 8023f4c:	681b      	ldr	r3, [r3, #0]
 8023f4e:	68db      	ldr	r3, [r3, #12]
 8023f50:	68db      	ldr	r3, [r3, #12]
 8023f52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8023f54:	687b      	ldr	r3, [r7, #4]
 8023f56:	685b      	ldr	r3, [r3, #4]
 8023f58:	4a04      	ldr	r2, [pc, #16]	; (8023f6c <prvResetNextTaskUnblockTime+0x3c>)
 8023f5a:	6013      	str	r3, [r2, #0]
}
 8023f5c:	bf00      	nop
 8023f5e:	370c      	adds	r7, #12
 8023f60:	46bd      	mov	sp, r7
 8023f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f66:	4770      	bx	lr
 8023f68:	200020dc 	.word	0x200020dc
 8023f6c:	20002144 	.word	0x20002144

08023f70 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8023f70:	b480      	push	{r7}
 8023f72:	b083      	sub	sp, #12
 8023f74:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8023f76:	4b05      	ldr	r3, [pc, #20]	; (8023f8c <xTaskGetCurrentTaskHandle+0x1c>)
 8023f78:	681b      	ldr	r3, [r3, #0]
 8023f7a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8023f7c:	687b      	ldr	r3, [r7, #4]
	}
 8023f7e:	4618      	mov	r0, r3
 8023f80:	370c      	adds	r7, #12
 8023f82:	46bd      	mov	sp, r7
 8023f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f88:	4770      	bx	lr
 8023f8a:	bf00      	nop
 8023f8c:	20001c50 	.word	0x20001c50

08023f90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8023f90:	b480      	push	{r7}
 8023f92:	b083      	sub	sp, #12
 8023f94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8023f96:	4b0b      	ldr	r3, [pc, #44]	; (8023fc4 <xTaskGetSchedulerState+0x34>)
 8023f98:	681b      	ldr	r3, [r3, #0]
 8023f9a:	2b00      	cmp	r3, #0
 8023f9c:	d102      	bne.n	8023fa4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8023f9e:	2301      	movs	r3, #1
 8023fa0:	607b      	str	r3, [r7, #4]
 8023fa2:	e008      	b.n	8023fb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8023fa4:	4b08      	ldr	r3, [pc, #32]	; (8023fc8 <xTaskGetSchedulerState+0x38>)
 8023fa6:	681b      	ldr	r3, [r3, #0]
 8023fa8:	2b00      	cmp	r3, #0
 8023faa:	d102      	bne.n	8023fb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8023fac:	2302      	movs	r3, #2
 8023fae:	607b      	str	r3, [r7, #4]
 8023fb0:	e001      	b.n	8023fb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8023fb2:	2300      	movs	r3, #0
 8023fb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8023fb6:	687b      	ldr	r3, [r7, #4]
	}
 8023fb8:	4618      	mov	r0, r3
 8023fba:	370c      	adds	r7, #12
 8023fbc:	46bd      	mov	sp, r7
 8023fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fc2:	4770      	bx	lr
 8023fc4:	20002130 	.word	0x20002130
 8023fc8:	2000214c 	.word	0x2000214c

08023fcc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8023fcc:	b580      	push	{r7, lr}
 8023fce:	b084      	sub	sp, #16
 8023fd0:	af00      	add	r7, sp, #0
 8023fd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8023fd4:	687b      	ldr	r3, [r7, #4]
 8023fd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8023fd8:	2300      	movs	r3, #0
 8023fda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8023fdc:	687b      	ldr	r3, [r7, #4]
 8023fde:	2b00      	cmp	r3, #0
 8023fe0:	d051      	beq.n	8024086 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8023fe2:	68bb      	ldr	r3, [r7, #8]
 8023fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023fe6:	4b2a      	ldr	r3, [pc, #168]	; (8024090 <xTaskPriorityInherit+0xc4>)
 8023fe8:	681b      	ldr	r3, [r3, #0]
 8023fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023fec:	429a      	cmp	r2, r3
 8023fee:	d241      	bcs.n	8024074 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8023ff0:	68bb      	ldr	r3, [r7, #8]
 8023ff2:	699b      	ldr	r3, [r3, #24]
 8023ff4:	2b00      	cmp	r3, #0
 8023ff6:	db06      	blt.n	8024006 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8023ff8:	4b25      	ldr	r3, [pc, #148]	; (8024090 <xTaskPriorityInherit+0xc4>)
 8023ffa:	681b      	ldr	r3, [r3, #0]
 8023ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023ffe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8024002:	68bb      	ldr	r3, [r7, #8]
 8024004:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8024006:	68bb      	ldr	r3, [r7, #8]
 8024008:	6959      	ldr	r1, [r3, #20]
 802400a:	68bb      	ldr	r3, [r7, #8]
 802400c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802400e:	4613      	mov	r3, r2
 8024010:	009b      	lsls	r3, r3, #2
 8024012:	4413      	add	r3, r2
 8024014:	009b      	lsls	r3, r3, #2
 8024016:	4a1f      	ldr	r2, [pc, #124]	; (8024094 <xTaskPriorityInherit+0xc8>)
 8024018:	4413      	add	r3, r2
 802401a:	4299      	cmp	r1, r3
 802401c:	d122      	bne.n	8024064 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802401e:	68bb      	ldr	r3, [r7, #8]
 8024020:	3304      	adds	r3, #4
 8024022:	4618      	mov	r0, r3
 8024024:	f7fe f8d6 	bl	80221d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8024028:	4b19      	ldr	r3, [pc, #100]	; (8024090 <xTaskPriorityInherit+0xc4>)
 802402a:	681b      	ldr	r3, [r3, #0]
 802402c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802402e:	68bb      	ldr	r3, [r7, #8]
 8024030:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8024032:	68bb      	ldr	r3, [r7, #8]
 8024034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024036:	4b18      	ldr	r3, [pc, #96]	; (8024098 <xTaskPriorityInherit+0xcc>)
 8024038:	681b      	ldr	r3, [r3, #0]
 802403a:	429a      	cmp	r2, r3
 802403c:	d903      	bls.n	8024046 <xTaskPriorityInherit+0x7a>
 802403e:	68bb      	ldr	r3, [r7, #8]
 8024040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024042:	4a15      	ldr	r2, [pc, #84]	; (8024098 <xTaskPriorityInherit+0xcc>)
 8024044:	6013      	str	r3, [r2, #0]
 8024046:	68bb      	ldr	r3, [r7, #8]
 8024048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802404a:	4613      	mov	r3, r2
 802404c:	009b      	lsls	r3, r3, #2
 802404e:	4413      	add	r3, r2
 8024050:	009b      	lsls	r3, r3, #2
 8024052:	4a10      	ldr	r2, [pc, #64]	; (8024094 <xTaskPriorityInherit+0xc8>)
 8024054:	441a      	add	r2, r3
 8024056:	68bb      	ldr	r3, [r7, #8]
 8024058:	3304      	adds	r3, #4
 802405a:	4619      	mov	r1, r3
 802405c:	4610      	mov	r0, r2
 802405e:	f7fe f85c 	bl	802211a <vListInsertEnd>
 8024062:	e004      	b.n	802406e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8024064:	4b0a      	ldr	r3, [pc, #40]	; (8024090 <xTaskPriorityInherit+0xc4>)
 8024066:	681b      	ldr	r3, [r3, #0]
 8024068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802406a:	68bb      	ldr	r3, [r7, #8]
 802406c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 802406e:	2301      	movs	r3, #1
 8024070:	60fb      	str	r3, [r7, #12]
 8024072:	e008      	b.n	8024086 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8024074:	68bb      	ldr	r3, [r7, #8]
 8024076:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8024078:	4b05      	ldr	r3, [pc, #20]	; (8024090 <xTaskPriorityInherit+0xc4>)
 802407a:	681b      	ldr	r3, [r3, #0]
 802407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802407e:	429a      	cmp	r2, r3
 8024080:	d201      	bcs.n	8024086 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8024082:	2301      	movs	r3, #1
 8024084:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8024086:	68fb      	ldr	r3, [r7, #12]
	}
 8024088:	4618      	mov	r0, r3
 802408a:	3710      	adds	r7, #16
 802408c:	46bd      	mov	sp, r7
 802408e:	bd80      	pop	{r7, pc}
 8024090:	20001c50 	.word	0x20001c50
 8024094:	20001c54 	.word	0x20001c54
 8024098:	2000212c 	.word	0x2000212c

0802409c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 802409c:	b580      	push	{r7, lr}
 802409e:	b086      	sub	sp, #24
 80240a0:	af00      	add	r7, sp, #0
 80240a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80240a4:	687b      	ldr	r3, [r7, #4]
 80240a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80240a8:	2300      	movs	r3, #0
 80240aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80240ac:	687b      	ldr	r3, [r7, #4]
 80240ae:	2b00      	cmp	r3, #0
 80240b0:	d054      	beq.n	802415c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80240b2:	4b2d      	ldr	r3, [pc, #180]	; (8024168 <xTaskPriorityDisinherit+0xcc>)
 80240b4:	681b      	ldr	r3, [r3, #0]
 80240b6:	693a      	ldr	r2, [r7, #16]
 80240b8:	429a      	cmp	r2, r3
 80240ba:	d009      	beq.n	80240d0 <xTaskPriorityDisinherit+0x34>
 80240bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80240c0:	f383 8811 	msr	BASEPRI, r3
 80240c4:	f3bf 8f6f 	isb	sy
 80240c8:	f3bf 8f4f 	dsb	sy
 80240cc:	60fb      	str	r3, [r7, #12]
 80240ce:	e7fe      	b.n	80240ce <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80240d0:	693b      	ldr	r3, [r7, #16]
 80240d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80240d4:	2b00      	cmp	r3, #0
 80240d6:	d109      	bne.n	80240ec <xTaskPriorityDisinherit+0x50>
 80240d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80240dc:	f383 8811 	msr	BASEPRI, r3
 80240e0:	f3bf 8f6f 	isb	sy
 80240e4:	f3bf 8f4f 	dsb	sy
 80240e8:	60bb      	str	r3, [r7, #8]
 80240ea:	e7fe      	b.n	80240ea <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80240ec:	693b      	ldr	r3, [r7, #16]
 80240ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80240f0:	1e5a      	subs	r2, r3, #1
 80240f2:	693b      	ldr	r3, [r7, #16]
 80240f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80240f6:	693b      	ldr	r3, [r7, #16]
 80240f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80240fa:	693b      	ldr	r3, [r7, #16]
 80240fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80240fe:	429a      	cmp	r2, r3
 8024100:	d02c      	beq.n	802415c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8024102:	693b      	ldr	r3, [r7, #16]
 8024104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8024106:	2b00      	cmp	r3, #0
 8024108:	d128      	bne.n	802415c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802410a:	693b      	ldr	r3, [r7, #16]
 802410c:	3304      	adds	r3, #4
 802410e:	4618      	mov	r0, r3
 8024110:	f7fe f860 	bl	80221d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8024114:	693b      	ldr	r3, [r7, #16]
 8024116:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8024118:	693b      	ldr	r3, [r7, #16]
 802411a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802411c:	693b      	ldr	r3, [r7, #16]
 802411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024120:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8024124:	693b      	ldr	r3, [r7, #16]
 8024126:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8024128:	693b      	ldr	r3, [r7, #16]
 802412a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802412c:	4b0f      	ldr	r3, [pc, #60]	; (802416c <xTaskPriorityDisinherit+0xd0>)
 802412e:	681b      	ldr	r3, [r3, #0]
 8024130:	429a      	cmp	r2, r3
 8024132:	d903      	bls.n	802413c <xTaskPriorityDisinherit+0xa0>
 8024134:	693b      	ldr	r3, [r7, #16]
 8024136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024138:	4a0c      	ldr	r2, [pc, #48]	; (802416c <xTaskPriorityDisinherit+0xd0>)
 802413a:	6013      	str	r3, [r2, #0]
 802413c:	693b      	ldr	r3, [r7, #16]
 802413e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024140:	4613      	mov	r3, r2
 8024142:	009b      	lsls	r3, r3, #2
 8024144:	4413      	add	r3, r2
 8024146:	009b      	lsls	r3, r3, #2
 8024148:	4a09      	ldr	r2, [pc, #36]	; (8024170 <xTaskPriorityDisinherit+0xd4>)
 802414a:	441a      	add	r2, r3
 802414c:	693b      	ldr	r3, [r7, #16]
 802414e:	3304      	adds	r3, #4
 8024150:	4619      	mov	r1, r3
 8024152:	4610      	mov	r0, r2
 8024154:	f7fd ffe1 	bl	802211a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8024158:	2301      	movs	r3, #1
 802415a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 802415c:	697b      	ldr	r3, [r7, #20]
	}
 802415e:	4618      	mov	r0, r3
 8024160:	3718      	adds	r7, #24
 8024162:	46bd      	mov	sp, r7
 8024164:	bd80      	pop	{r7, pc}
 8024166:	bf00      	nop
 8024168:	20001c50 	.word	0x20001c50
 802416c:	2000212c 	.word	0x2000212c
 8024170:	20001c54 	.word	0x20001c54

08024174 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8024174:	b580      	push	{r7, lr}
 8024176:	b088      	sub	sp, #32
 8024178:	af00      	add	r7, sp, #0
 802417a:	6078      	str	r0, [r7, #4]
 802417c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 802417e:	687b      	ldr	r3, [r7, #4]
 8024180:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8024182:	2301      	movs	r3, #1
 8024184:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8024186:	687b      	ldr	r3, [r7, #4]
 8024188:	2b00      	cmp	r3, #0
 802418a:	d068      	beq.n	802425e <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 802418c:	69bb      	ldr	r3, [r7, #24]
 802418e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8024190:	2b00      	cmp	r3, #0
 8024192:	d109      	bne.n	80241a8 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8024194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024198:	f383 8811 	msr	BASEPRI, r3
 802419c:	f3bf 8f6f 	isb	sy
 80241a0:	f3bf 8f4f 	dsb	sy
 80241a4:	60fb      	str	r3, [r7, #12]
 80241a6:	e7fe      	b.n	80241a6 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80241a8:	69bb      	ldr	r3, [r7, #24]
 80241aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80241ac:	683a      	ldr	r2, [r7, #0]
 80241ae:	429a      	cmp	r2, r3
 80241b0:	d902      	bls.n	80241b8 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80241b2:	683b      	ldr	r3, [r7, #0]
 80241b4:	61fb      	str	r3, [r7, #28]
 80241b6:	e002      	b.n	80241be <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80241b8:	69bb      	ldr	r3, [r7, #24]
 80241ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80241bc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80241be:	69bb      	ldr	r3, [r7, #24]
 80241c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80241c2:	69fa      	ldr	r2, [r7, #28]
 80241c4:	429a      	cmp	r2, r3
 80241c6:	d04a      	beq.n	802425e <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80241c8:	69bb      	ldr	r3, [r7, #24]
 80241ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80241cc:	697a      	ldr	r2, [r7, #20]
 80241ce:	429a      	cmp	r2, r3
 80241d0:	d145      	bne.n	802425e <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80241d2:	4b25      	ldr	r3, [pc, #148]	; (8024268 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 80241d4:	681b      	ldr	r3, [r3, #0]
 80241d6:	69ba      	ldr	r2, [r7, #24]
 80241d8:	429a      	cmp	r2, r3
 80241da:	d109      	bne.n	80241f0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80241dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80241e0:	f383 8811 	msr	BASEPRI, r3
 80241e4:	f3bf 8f6f 	isb	sy
 80241e8:	f3bf 8f4f 	dsb	sy
 80241ec:	60bb      	str	r3, [r7, #8]
 80241ee:	e7fe      	b.n	80241ee <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80241f0:	69bb      	ldr	r3, [r7, #24]
 80241f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80241f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80241f6:	69bb      	ldr	r3, [r7, #24]
 80241f8:	69fa      	ldr	r2, [r7, #28]
 80241fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80241fc:	69bb      	ldr	r3, [r7, #24]
 80241fe:	699b      	ldr	r3, [r3, #24]
 8024200:	2b00      	cmp	r3, #0
 8024202:	db04      	blt.n	802420e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8024204:	69fb      	ldr	r3, [r7, #28]
 8024206:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 802420a:	69bb      	ldr	r3, [r7, #24]
 802420c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 802420e:	69bb      	ldr	r3, [r7, #24]
 8024210:	6959      	ldr	r1, [r3, #20]
 8024212:	693a      	ldr	r2, [r7, #16]
 8024214:	4613      	mov	r3, r2
 8024216:	009b      	lsls	r3, r3, #2
 8024218:	4413      	add	r3, r2
 802421a:	009b      	lsls	r3, r3, #2
 802421c:	4a13      	ldr	r2, [pc, #76]	; (802426c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 802421e:	4413      	add	r3, r2
 8024220:	4299      	cmp	r1, r3
 8024222:	d11c      	bne.n	802425e <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8024224:	69bb      	ldr	r3, [r7, #24]
 8024226:	3304      	adds	r3, #4
 8024228:	4618      	mov	r0, r3
 802422a:	f7fd ffd3 	bl	80221d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 802422e:	69bb      	ldr	r3, [r7, #24]
 8024230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024232:	4b0f      	ldr	r3, [pc, #60]	; (8024270 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8024234:	681b      	ldr	r3, [r3, #0]
 8024236:	429a      	cmp	r2, r3
 8024238:	d903      	bls.n	8024242 <vTaskPriorityDisinheritAfterTimeout+0xce>
 802423a:	69bb      	ldr	r3, [r7, #24]
 802423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802423e:	4a0c      	ldr	r2, [pc, #48]	; (8024270 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8024240:	6013      	str	r3, [r2, #0]
 8024242:	69bb      	ldr	r3, [r7, #24]
 8024244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024246:	4613      	mov	r3, r2
 8024248:	009b      	lsls	r3, r3, #2
 802424a:	4413      	add	r3, r2
 802424c:	009b      	lsls	r3, r3, #2
 802424e:	4a07      	ldr	r2, [pc, #28]	; (802426c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8024250:	441a      	add	r2, r3
 8024252:	69bb      	ldr	r3, [r7, #24]
 8024254:	3304      	adds	r3, #4
 8024256:	4619      	mov	r1, r3
 8024258:	4610      	mov	r0, r2
 802425a:	f7fd ff5e 	bl	802211a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 802425e:	bf00      	nop
 8024260:	3720      	adds	r7, #32
 8024262:	46bd      	mov	sp, r7
 8024264:	bd80      	pop	{r7, pc}
 8024266:	bf00      	nop
 8024268:	20001c50 	.word	0x20001c50
 802426c:	20001c54 	.word	0x20001c54
 8024270:	2000212c 	.word	0x2000212c

08024274 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8024274:	b480      	push	{r7}
 8024276:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8024278:	4b07      	ldr	r3, [pc, #28]	; (8024298 <pvTaskIncrementMutexHeldCount+0x24>)
 802427a:	681b      	ldr	r3, [r3, #0]
 802427c:	2b00      	cmp	r3, #0
 802427e:	d004      	beq.n	802428a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8024280:	4b05      	ldr	r3, [pc, #20]	; (8024298 <pvTaskIncrementMutexHeldCount+0x24>)
 8024282:	681b      	ldr	r3, [r3, #0]
 8024284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8024286:	3201      	adds	r2, #1
 8024288:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 802428a:	4b03      	ldr	r3, [pc, #12]	; (8024298 <pvTaskIncrementMutexHeldCount+0x24>)
 802428c:	681b      	ldr	r3, [r3, #0]
	}
 802428e:	4618      	mov	r0, r3
 8024290:	46bd      	mov	sp, r7
 8024292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024296:	4770      	bx	lr
 8024298:	20001c50 	.word	0x20001c50

0802429c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 802429c:	b580      	push	{r7, lr}
 802429e:	b086      	sub	sp, #24
 80242a0:	af00      	add	r7, sp, #0
 80242a2:	60f8      	str	r0, [r7, #12]
 80242a4:	60b9      	str	r1, [r7, #8]
 80242a6:	607a      	str	r2, [r7, #4]
 80242a8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80242aa:	f000 fe9f 	bl	8024fec <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80242ae:	4b26      	ldr	r3, [pc, #152]	; (8024348 <xTaskNotifyWait+0xac>)
 80242b0:	681b      	ldr	r3, [r3, #0]
 80242b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80242b6:	b2db      	uxtb	r3, r3
 80242b8:	2b02      	cmp	r3, #2
 80242ba:	d01a      	beq.n	80242f2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80242bc:	4b22      	ldr	r3, [pc, #136]	; (8024348 <xTaskNotifyWait+0xac>)
 80242be:	681b      	ldr	r3, [r3, #0]
 80242c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80242c2:	68fa      	ldr	r2, [r7, #12]
 80242c4:	43d2      	mvns	r2, r2
 80242c6:	400a      	ands	r2, r1
 80242c8:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80242ca:	4b1f      	ldr	r3, [pc, #124]	; (8024348 <xTaskNotifyWait+0xac>)
 80242cc:	681b      	ldr	r3, [r3, #0]
 80242ce:	2201      	movs	r2, #1
 80242d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80242d4:	683b      	ldr	r3, [r7, #0]
 80242d6:	2b00      	cmp	r3, #0
 80242d8:	d00b      	beq.n	80242f2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80242da:	2101      	movs	r1, #1
 80242dc:	6838      	ldr	r0, [r7, #0]
 80242de:	f000 f9c3 	bl	8024668 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80242e2:	4b1a      	ldr	r3, [pc, #104]	; (802434c <xTaskNotifyWait+0xb0>)
 80242e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80242e8:	601a      	str	r2, [r3, #0]
 80242ea:	f3bf 8f4f 	dsb	sy
 80242ee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80242f2:	f000 fea9 	bl	8025048 <vPortExitCritical>

		taskENTER_CRITICAL();
 80242f6:	f000 fe79 	bl	8024fec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80242fa:	687b      	ldr	r3, [r7, #4]
 80242fc:	2b00      	cmp	r3, #0
 80242fe:	d004      	beq.n	802430a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8024300:	4b11      	ldr	r3, [pc, #68]	; (8024348 <xTaskNotifyWait+0xac>)
 8024302:	681b      	ldr	r3, [r3, #0]
 8024304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8024306:	687b      	ldr	r3, [r7, #4]
 8024308:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 802430a:	4b0f      	ldr	r3, [pc, #60]	; (8024348 <xTaskNotifyWait+0xac>)
 802430c:	681b      	ldr	r3, [r3, #0]
 802430e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8024312:	b2db      	uxtb	r3, r3
 8024314:	2b02      	cmp	r3, #2
 8024316:	d002      	beq.n	802431e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8024318:	2300      	movs	r3, #0
 802431a:	617b      	str	r3, [r7, #20]
 802431c:	e008      	b.n	8024330 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 802431e:	4b0a      	ldr	r3, [pc, #40]	; (8024348 <xTaskNotifyWait+0xac>)
 8024320:	681b      	ldr	r3, [r3, #0]
 8024322:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8024324:	68ba      	ldr	r2, [r7, #8]
 8024326:	43d2      	mvns	r2, r2
 8024328:	400a      	ands	r2, r1
 802432a:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 802432c:	2301      	movs	r3, #1
 802432e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8024330:	4b05      	ldr	r3, [pc, #20]	; (8024348 <xTaskNotifyWait+0xac>)
 8024332:	681b      	ldr	r3, [r3, #0]
 8024334:	2200      	movs	r2, #0
 8024336:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 802433a:	f000 fe85 	bl	8025048 <vPortExitCritical>

		return xReturn;
 802433e:	697b      	ldr	r3, [r7, #20]
	}
 8024340:	4618      	mov	r0, r3
 8024342:	3718      	adds	r7, #24
 8024344:	46bd      	mov	sp, r7
 8024346:	bd80      	pop	{r7, pc}
 8024348:	20001c50 	.word	0x20001c50
 802434c:	e000ed04 	.word	0xe000ed04

08024350 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8024350:	b580      	push	{r7, lr}
 8024352:	b08a      	sub	sp, #40	; 0x28
 8024354:	af00      	add	r7, sp, #0
 8024356:	60f8      	str	r0, [r7, #12]
 8024358:	60b9      	str	r1, [r7, #8]
 802435a:	603b      	str	r3, [r7, #0]
 802435c:	4613      	mov	r3, r2
 802435e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8024360:	2301      	movs	r3, #1
 8024362:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8024364:	68fb      	ldr	r3, [r7, #12]
 8024366:	2b00      	cmp	r3, #0
 8024368:	d109      	bne.n	802437e <xTaskGenericNotify+0x2e>
 802436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802436e:	f383 8811 	msr	BASEPRI, r3
 8024372:	f3bf 8f6f 	isb	sy
 8024376:	f3bf 8f4f 	dsb	sy
 802437a:	61bb      	str	r3, [r7, #24]
 802437c:	e7fe      	b.n	802437c <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 802437e:	68fb      	ldr	r3, [r7, #12]
 8024380:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8024382:	f000 fe33 	bl	8024fec <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8024386:	683b      	ldr	r3, [r7, #0]
 8024388:	2b00      	cmp	r3, #0
 802438a:	d003      	beq.n	8024394 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 802438c:	6a3b      	ldr	r3, [r7, #32]
 802438e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8024390:	683b      	ldr	r3, [r7, #0]
 8024392:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8024394:	6a3b      	ldr	r3, [r7, #32]
 8024396:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 802439a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 802439c:	6a3b      	ldr	r3, [r7, #32]
 802439e:	2202      	movs	r2, #2
 80243a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80243a4:	79fb      	ldrb	r3, [r7, #7]
 80243a6:	2b04      	cmp	r3, #4
 80243a8:	d827      	bhi.n	80243fa <xTaskGenericNotify+0xaa>
 80243aa:	a201      	add	r2, pc, #4	; (adr r2, 80243b0 <xTaskGenericNotify+0x60>)
 80243ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80243b0:	08024419 	.word	0x08024419
 80243b4:	080243c5 	.word	0x080243c5
 80243b8:	080243d3 	.word	0x080243d3
 80243bc:	080243df 	.word	0x080243df
 80243c0:	080243e7 	.word	0x080243e7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80243c4:	6a3b      	ldr	r3, [r7, #32]
 80243c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80243c8:	68bb      	ldr	r3, [r7, #8]
 80243ca:	431a      	orrs	r2, r3
 80243cc:	6a3b      	ldr	r3, [r7, #32]
 80243ce:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80243d0:	e025      	b.n	802441e <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80243d2:	6a3b      	ldr	r3, [r7, #32]
 80243d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80243d6:	1c5a      	adds	r2, r3, #1
 80243d8:	6a3b      	ldr	r3, [r7, #32]
 80243da:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80243dc:	e01f      	b.n	802441e <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80243de:	6a3b      	ldr	r3, [r7, #32]
 80243e0:	68ba      	ldr	r2, [r7, #8]
 80243e2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80243e4:	e01b      	b.n	802441e <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80243e6:	7ffb      	ldrb	r3, [r7, #31]
 80243e8:	2b02      	cmp	r3, #2
 80243ea:	d003      	beq.n	80243f4 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80243ec:	6a3b      	ldr	r3, [r7, #32]
 80243ee:	68ba      	ldr	r2, [r7, #8]
 80243f0:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80243f2:	e014      	b.n	802441e <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 80243f4:	2300      	movs	r3, #0
 80243f6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80243f8:	e011      	b.n	802441e <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80243fa:	6a3b      	ldr	r3, [r7, #32]
 80243fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80243fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024402:	d00b      	beq.n	802441c <xTaskGenericNotify+0xcc>
 8024404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024408:	f383 8811 	msr	BASEPRI, r3
 802440c:	f3bf 8f6f 	isb	sy
 8024410:	f3bf 8f4f 	dsb	sy
 8024414:	617b      	str	r3, [r7, #20]
 8024416:	e7fe      	b.n	8024416 <xTaskGenericNotify+0xc6>
					break;
 8024418:	bf00      	nop
 802441a:	e000      	b.n	802441e <xTaskGenericNotify+0xce>

					break;
 802441c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 802441e:	7ffb      	ldrb	r3, [r7, #31]
 8024420:	2b01      	cmp	r3, #1
 8024422:	d139      	bne.n	8024498 <xTaskGenericNotify+0x148>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8024424:	6a3b      	ldr	r3, [r7, #32]
 8024426:	3304      	adds	r3, #4
 8024428:	4618      	mov	r0, r3
 802442a:	f7fd fed3 	bl	80221d4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 802442e:	6a3b      	ldr	r3, [r7, #32]
 8024430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024432:	4b1d      	ldr	r3, [pc, #116]	; (80244a8 <xTaskGenericNotify+0x158>)
 8024434:	681b      	ldr	r3, [r3, #0]
 8024436:	429a      	cmp	r2, r3
 8024438:	d903      	bls.n	8024442 <xTaskGenericNotify+0xf2>
 802443a:	6a3b      	ldr	r3, [r7, #32]
 802443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802443e:	4a1a      	ldr	r2, [pc, #104]	; (80244a8 <xTaskGenericNotify+0x158>)
 8024440:	6013      	str	r3, [r2, #0]
 8024442:	6a3b      	ldr	r3, [r7, #32]
 8024444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024446:	4613      	mov	r3, r2
 8024448:	009b      	lsls	r3, r3, #2
 802444a:	4413      	add	r3, r2
 802444c:	009b      	lsls	r3, r3, #2
 802444e:	4a17      	ldr	r2, [pc, #92]	; (80244ac <xTaskGenericNotify+0x15c>)
 8024450:	441a      	add	r2, r3
 8024452:	6a3b      	ldr	r3, [r7, #32]
 8024454:	3304      	adds	r3, #4
 8024456:	4619      	mov	r1, r3
 8024458:	4610      	mov	r0, r2
 802445a:	f7fd fe5e 	bl	802211a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 802445e:	6a3b      	ldr	r3, [r7, #32]
 8024460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024462:	2b00      	cmp	r3, #0
 8024464:	d009      	beq.n	802447a <xTaskGenericNotify+0x12a>
 8024466:	f04f 0350 	mov.w	r3, #80	; 0x50
 802446a:	f383 8811 	msr	BASEPRI, r3
 802446e:	f3bf 8f6f 	isb	sy
 8024472:	f3bf 8f4f 	dsb	sy
 8024476:	613b      	str	r3, [r7, #16]
 8024478:	e7fe      	b.n	8024478 <xTaskGenericNotify+0x128>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 802447a:	6a3b      	ldr	r3, [r7, #32]
 802447c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802447e:	4b0c      	ldr	r3, [pc, #48]	; (80244b0 <xTaskGenericNotify+0x160>)
 8024480:	681b      	ldr	r3, [r3, #0]
 8024482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024484:	429a      	cmp	r2, r3
 8024486:	d907      	bls.n	8024498 <xTaskGenericNotify+0x148>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8024488:	4b0a      	ldr	r3, [pc, #40]	; (80244b4 <xTaskGenericNotify+0x164>)
 802448a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802448e:	601a      	str	r2, [r3, #0]
 8024490:	f3bf 8f4f 	dsb	sy
 8024494:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8024498:	f000 fdd6 	bl	8025048 <vPortExitCritical>

		return xReturn;
 802449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 802449e:	4618      	mov	r0, r3
 80244a0:	3728      	adds	r7, #40	; 0x28
 80244a2:	46bd      	mov	sp, r7
 80244a4:	bd80      	pop	{r7, pc}
 80244a6:	bf00      	nop
 80244a8:	2000212c 	.word	0x2000212c
 80244ac:	20001c54 	.word	0x20001c54
 80244b0:	20001c50 	.word	0x20001c50
 80244b4:	e000ed04 	.word	0xe000ed04

080244b8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80244b8:	b580      	push	{r7, lr}
 80244ba:	b08e      	sub	sp, #56	; 0x38
 80244bc:	af00      	add	r7, sp, #0
 80244be:	60f8      	str	r0, [r7, #12]
 80244c0:	60b9      	str	r1, [r7, #8]
 80244c2:	603b      	str	r3, [r7, #0]
 80244c4:	4613      	mov	r3, r2
 80244c6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80244c8:	2301      	movs	r3, #1
 80244ca:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80244cc:	68fb      	ldr	r3, [r7, #12]
 80244ce:	2b00      	cmp	r3, #0
 80244d0:	d109      	bne.n	80244e6 <xTaskGenericNotifyFromISR+0x2e>
 80244d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80244d6:	f383 8811 	msr	BASEPRI, r3
 80244da:	f3bf 8f6f 	isb	sy
 80244de:	f3bf 8f4f 	dsb	sy
 80244e2:	627b      	str	r3, [r7, #36]	; 0x24
 80244e4:	e7fe      	b.n	80244e4 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80244e6:	f000 fe5d 	bl	80251a4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80244ea:	68fb      	ldr	r3, [r7, #12]
 80244ec:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80244ee:	f3ef 8211 	mrs	r2, BASEPRI
 80244f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80244f6:	f383 8811 	msr	BASEPRI, r3
 80244fa:	f3bf 8f6f 	isb	sy
 80244fe:	f3bf 8f4f 	dsb	sy
 8024502:	623a      	str	r2, [r7, #32]
 8024504:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8024506:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8024508:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 802450a:	683b      	ldr	r3, [r7, #0]
 802450c:	2b00      	cmp	r3, #0
 802450e:	d003      	beq.n	8024518 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8024510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024512:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8024514:	683b      	ldr	r3, [r7, #0]
 8024516:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8024518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802451a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 802451e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8024522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024524:	2202      	movs	r2, #2
 8024526:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 802452a:	79fb      	ldrb	r3, [r7, #7]
 802452c:	2b04      	cmp	r3, #4
 802452e:	d829      	bhi.n	8024584 <xTaskGenericNotifyFromISR+0xcc>
 8024530:	a201      	add	r2, pc, #4	; (adr r2, 8024538 <xTaskGenericNotifyFromISR+0x80>)
 8024532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024536:	bf00      	nop
 8024538:	080245a3 	.word	0x080245a3
 802453c:	0802454d 	.word	0x0802454d
 8024540:	0802455b 	.word	0x0802455b
 8024544:	08024567 	.word	0x08024567
 8024548:	0802456f 	.word	0x0802456f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 802454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802454e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8024550:	68bb      	ldr	r3, [r7, #8]
 8024552:	431a      	orrs	r2, r3
 8024554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024556:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8024558:	e026      	b.n	80245a8 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 802455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802455c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802455e:	1c5a      	adds	r2, r3, #1
 8024560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024562:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8024564:	e020      	b.n	80245a8 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8024566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024568:	68ba      	ldr	r2, [r7, #8]
 802456a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 802456c:	e01c      	b.n	80245a8 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 802456e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8024572:	2b02      	cmp	r3, #2
 8024574:	d003      	beq.n	802457e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8024576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024578:	68ba      	ldr	r2, [r7, #8]
 802457a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 802457c:	e014      	b.n	80245a8 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 802457e:	2300      	movs	r3, #0
 8024580:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8024582:	e011      	b.n	80245a8 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8024584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024588:	f1b3 3fff 	cmp.w	r3, #4294967295
 802458c:	d00b      	beq.n	80245a6 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 802458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024592:	f383 8811 	msr	BASEPRI, r3
 8024596:	f3bf 8f6f 	isb	sy
 802459a:	f3bf 8f4f 	dsb	sy
 802459e:	61bb      	str	r3, [r7, #24]
 80245a0:	e7fe      	b.n	80245a0 <xTaskGenericNotifyFromISR+0xe8>
					break;
 80245a2:	bf00      	nop
 80245a4:	e000      	b.n	80245a8 <xTaskGenericNotifyFromISR+0xf0>
					break;
 80245a6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80245a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80245ac:	2b01      	cmp	r3, #1
 80245ae:	d145      	bne.n	802463c <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80245b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80245b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80245b4:	2b00      	cmp	r3, #0
 80245b6:	d009      	beq.n	80245cc <xTaskGenericNotifyFromISR+0x114>
 80245b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80245bc:	f383 8811 	msr	BASEPRI, r3
 80245c0:	f3bf 8f6f 	isb	sy
 80245c4:	f3bf 8f4f 	dsb	sy
 80245c8:	617b      	str	r3, [r7, #20]
 80245ca:	e7fe      	b.n	80245ca <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80245cc:	4b20      	ldr	r3, [pc, #128]	; (8024650 <xTaskGenericNotifyFromISR+0x198>)
 80245ce:	681b      	ldr	r3, [r3, #0]
 80245d0:	2b00      	cmp	r3, #0
 80245d2:	d11d      	bne.n	8024610 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80245d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80245d6:	3304      	adds	r3, #4
 80245d8:	4618      	mov	r0, r3
 80245da:	f7fd fdfb 	bl	80221d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80245de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80245e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80245e2:	4b1c      	ldr	r3, [pc, #112]	; (8024654 <xTaskGenericNotifyFromISR+0x19c>)
 80245e4:	681b      	ldr	r3, [r3, #0]
 80245e6:	429a      	cmp	r2, r3
 80245e8:	d903      	bls.n	80245f2 <xTaskGenericNotifyFromISR+0x13a>
 80245ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80245ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80245ee:	4a19      	ldr	r2, [pc, #100]	; (8024654 <xTaskGenericNotifyFromISR+0x19c>)
 80245f0:	6013      	str	r3, [r2, #0]
 80245f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80245f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80245f6:	4613      	mov	r3, r2
 80245f8:	009b      	lsls	r3, r3, #2
 80245fa:	4413      	add	r3, r2
 80245fc:	009b      	lsls	r3, r3, #2
 80245fe:	4a16      	ldr	r2, [pc, #88]	; (8024658 <xTaskGenericNotifyFromISR+0x1a0>)
 8024600:	441a      	add	r2, r3
 8024602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024604:	3304      	adds	r3, #4
 8024606:	4619      	mov	r1, r3
 8024608:	4610      	mov	r0, r2
 802460a:	f7fd fd86 	bl	802211a <vListInsertEnd>
 802460e:	e005      	b.n	802461c <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8024610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024612:	3318      	adds	r3, #24
 8024614:	4619      	mov	r1, r3
 8024616:	4811      	ldr	r0, [pc, #68]	; (802465c <xTaskGenericNotifyFromISR+0x1a4>)
 8024618:	f7fd fd7f 	bl	802211a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 802461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802461e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024620:	4b0f      	ldr	r3, [pc, #60]	; (8024660 <xTaskGenericNotifyFromISR+0x1a8>)
 8024622:	681b      	ldr	r3, [r3, #0]
 8024624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024626:	429a      	cmp	r2, r3
 8024628:	d908      	bls.n	802463c <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 802462a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802462c:	2b00      	cmp	r3, #0
 802462e:	d002      	beq.n	8024636 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8024630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024632:	2201      	movs	r2, #1
 8024634:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8024636:	4b0b      	ldr	r3, [pc, #44]	; (8024664 <xTaskGenericNotifyFromISR+0x1ac>)
 8024638:	2201      	movs	r2, #1
 802463a:	601a      	str	r2, [r3, #0]
 802463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802463e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8024640:	693b      	ldr	r3, [r7, #16]
 8024642:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8024646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8024648:	4618      	mov	r0, r3
 802464a:	3738      	adds	r7, #56	; 0x38
 802464c:	46bd      	mov	sp, r7
 802464e:	bd80      	pop	{r7, pc}
 8024650:	2000214c 	.word	0x2000214c
 8024654:	2000212c 	.word	0x2000212c
 8024658:	20001c54 	.word	0x20001c54
 802465c:	200020e4 	.word	0x200020e4
 8024660:	20001c50 	.word	0x20001c50
 8024664:	20002138 	.word	0x20002138

08024668 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8024668:	b580      	push	{r7, lr}
 802466a:	b084      	sub	sp, #16
 802466c:	af00      	add	r7, sp, #0
 802466e:	6078      	str	r0, [r7, #4]
 8024670:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8024672:	4b21      	ldr	r3, [pc, #132]	; (80246f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8024674:	681b      	ldr	r3, [r3, #0]
 8024676:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8024678:	4b20      	ldr	r3, [pc, #128]	; (80246fc <prvAddCurrentTaskToDelayedList+0x94>)
 802467a:	681b      	ldr	r3, [r3, #0]
 802467c:	3304      	adds	r3, #4
 802467e:	4618      	mov	r0, r3
 8024680:	f7fd fda8 	bl	80221d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8024684:	687b      	ldr	r3, [r7, #4]
 8024686:	f1b3 3fff 	cmp.w	r3, #4294967295
 802468a:	d10a      	bne.n	80246a2 <prvAddCurrentTaskToDelayedList+0x3a>
 802468c:	683b      	ldr	r3, [r7, #0]
 802468e:	2b00      	cmp	r3, #0
 8024690:	d007      	beq.n	80246a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8024692:	4b1a      	ldr	r3, [pc, #104]	; (80246fc <prvAddCurrentTaskToDelayedList+0x94>)
 8024694:	681b      	ldr	r3, [r3, #0]
 8024696:	3304      	adds	r3, #4
 8024698:	4619      	mov	r1, r3
 802469a:	4819      	ldr	r0, [pc, #100]	; (8024700 <prvAddCurrentTaskToDelayedList+0x98>)
 802469c:	f7fd fd3d 	bl	802211a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80246a0:	e026      	b.n	80246f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80246a2:	68fa      	ldr	r2, [r7, #12]
 80246a4:	687b      	ldr	r3, [r7, #4]
 80246a6:	4413      	add	r3, r2
 80246a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80246aa:	4b14      	ldr	r3, [pc, #80]	; (80246fc <prvAddCurrentTaskToDelayedList+0x94>)
 80246ac:	681b      	ldr	r3, [r3, #0]
 80246ae:	68ba      	ldr	r2, [r7, #8]
 80246b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80246b2:	68ba      	ldr	r2, [r7, #8]
 80246b4:	68fb      	ldr	r3, [r7, #12]
 80246b6:	429a      	cmp	r2, r3
 80246b8:	d209      	bcs.n	80246ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80246ba:	4b12      	ldr	r3, [pc, #72]	; (8024704 <prvAddCurrentTaskToDelayedList+0x9c>)
 80246bc:	681a      	ldr	r2, [r3, #0]
 80246be:	4b0f      	ldr	r3, [pc, #60]	; (80246fc <prvAddCurrentTaskToDelayedList+0x94>)
 80246c0:	681b      	ldr	r3, [r3, #0]
 80246c2:	3304      	adds	r3, #4
 80246c4:	4619      	mov	r1, r3
 80246c6:	4610      	mov	r0, r2
 80246c8:	f7fd fd4b 	bl	8022162 <vListInsert>
}
 80246cc:	e010      	b.n	80246f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80246ce:	4b0e      	ldr	r3, [pc, #56]	; (8024708 <prvAddCurrentTaskToDelayedList+0xa0>)
 80246d0:	681a      	ldr	r2, [r3, #0]
 80246d2:	4b0a      	ldr	r3, [pc, #40]	; (80246fc <prvAddCurrentTaskToDelayedList+0x94>)
 80246d4:	681b      	ldr	r3, [r3, #0]
 80246d6:	3304      	adds	r3, #4
 80246d8:	4619      	mov	r1, r3
 80246da:	4610      	mov	r0, r2
 80246dc:	f7fd fd41 	bl	8022162 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80246e0:	4b0a      	ldr	r3, [pc, #40]	; (802470c <prvAddCurrentTaskToDelayedList+0xa4>)
 80246e2:	681b      	ldr	r3, [r3, #0]
 80246e4:	68ba      	ldr	r2, [r7, #8]
 80246e6:	429a      	cmp	r2, r3
 80246e8:	d202      	bcs.n	80246f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80246ea:	4a08      	ldr	r2, [pc, #32]	; (802470c <prvAddCurrentTaskToDelayedList+0xa4>)
 80246ec:	68bb      	ldr	r3, [r7, #8]
 80246ee:	6013      	str	r3, [r2, #0]
}
 80246f0:	bf00      	nop
 80246f2:	3710      	adds	r7, #16
 80246f4:	46bd      	mov	sp, r7
 80246f6:	bd80      	pop	{r7, pc}
 80246f8:	20002128 	.word	0x20002128
 80246fc:	20001c50 	.word	0x20001c50
 8024700:	20002110 	.word	0x20002110
 8024704:	200020e0 	.word	0x200020e0
 8024708:	200020dc 	.word	0x200020dc
 802470c:	20002144 	.word	0x20002144

08024710 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8024710:	b580      	push	{r7, lr}
 8024712:	b08a      	sub	sp, #40	; 0x28
 8024714:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8024716:	2300      	movs	r3, #0
 8024718:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 802471a:	f000 faff 	bl	8024d1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 802471e:	4b1c      	ldr	r3, [pc, #112]	; (8024790 <xTimerCreateTimerTask+0x80>)
 8024720:	681b      	ldr	r3, [r3, #0]
 8024722:	2b00      	cmp	r3, #0
 8024724:	d021      	beq.n	802476a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8024726:	2300      	movs	r3, #0
 8024728:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 802472a:	2300      	movs	r3, #0
 802472c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 802472e:	1d3a      	adds	r2, r7, #4
 8024730:	f107 0108 	add.w	r1, r7, #8
 8024734:	f107 030c 	add.w	r3, r7, #12
 8024738:	4618      	mov	r0, r3
 802473a:	f7fd fca7 	bl	802208c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 802473e:	6879      	ldr	r1, [r7, #4]
 8024740:	68bb      	ldr	r3, [r7, #8]
 8024742:	68fa      	ldr	r2, [r7, #12]
 8024744:	9202      	str	r2, [sp, #8]
 8024746:	9301      	str	r3, [sp, #4]
 8024748:	2332      	movs	r3, #50	; 0x32
 802474a:	9300      	str	r3, [sp, #0]
 802474c:	2300      	movs	r3, #0
 802474e:	460a      	mov	r2, r1
 8024750:	4910      	ldr	r1, [pc, #64]	; (8024794 <xTimerCreateTimerTask+0x84>)
 8024752:	4811      	ldr	r0, [pc, #68]	; (8024798 <xTimerCreateTimerTask+0x88>)
 8024754:	f7fe fd78 	bl	8023248 <xTaskCreateStatic>
 8024758:	4602      	mov	r2, r0
 802475a:	4b10      	ldr	r3, [pc, #64]	; (802479c <xTimerCreateTimerTask+0x8c>)
 802475c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 802475e:	4b0f      	ldr	r3, [pc, #60]	; (802479c <xTimerCreateTimerTask+0x8c>)
 8024760:	681b      	ldr	r3, [r3, #0]
 8024762:	2b00      	cmp	r3, #0
 8024764:	d001      	beq.n	802476a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8024766:	2301      	movs	r3, #1
 8024768:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 802476a:	697b      	ldr	r3, [r7, #20]
 802476c:	2b00      	cmp	r3, #0
 802476e:	d109      	bne.n	8024784 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8024770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024774:	f383 8811 	msr	BASEPRI, r3
 8024778:	f3bf 8f6f 	isb	sy
 802477c:	f3bf 8f4f 	dsb	sy
 8024780:	613b      	str	r3, [r7, #16]
 8024782:	e7fe      	b.n	8024782 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8024784:	697b      	ldr	r3, [r7, #20]
}
 8024786:	4618      	mov	r0, r3
 8024788:	3718      	adds	r7, #24
 802478a:	46bd      	mov	sp, r7
 802478c:	bd80      	pop	{r7, pc}
 802478e:	bf00      	nop
 8024790:	20002180 	.word	0x20002180
 8024794:	0802d8e8 	.word	0x0802d8e8
 8024798:	080248d1 	.word	0x080248d1
 802479c:	20002184 	.word	0x20002184

080247a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80247a0:	b580      	push	{r7, lr}
 80247a2:	b08a      	sub	sp, #40	; 0x28
 80247a4:	af00      	add	r7, sp, #0
 80247a6:	60f8      	str	r0, [r7, #12]
 80247a8:	60b9      	str	r1, [r7, #8]
 80247aa:	607a      	str	r2, [r7, #4]
 80247ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80247ae:	2300      	movs	r3, #0
 80247b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80247b2:	68fb      	ldr	r3, [r7, #12]
 80247b4:	2b00      	cmp	r3, #0
 80247b6:	d109      	bne.n	80247cc <xTimerGenericCommand+0x2c>
 80247b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80247bc:	f383 8811 	msr	BASEPRI, r3
 80247c0:	f3bf 8f6f 	isb	sy
 80247c4:	f3bf 8f4f 	dsb	sy
 80247c8:	623b      	str	r3, [r7, #32]
 80247ca:	e7fe      	b.n	80247ca <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80247cc:	4b19      	ldr	r3, [pc, #100]	; (8024834 <xTimerGenericCommand+0x94>)
 80247ce:	681b      	ldr	r3, [r3, #0]
 80247d0:	2b00      	cmp	r3, #0
 80247d2:	d02a      	beq.n	802482a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80247d4:	68bb      	ldr	r3, [r7, #8]
 80247d6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80247d8:	687b      	ldr	r3, [r7, #4]
 80247da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80247dc:	68fb      	ldr	r3, [r7, #12]
 80247de:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80247e0:	68bb      	ldr	r3, [r7, #8]
 80247e2:	2b05      	cmp	r3, #5
 80247e4:	dc18      	bgt.n	8024818 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80247e6:	f7ff fbd3 	bl	8023f90 <xTaskGetSchedulerState>
 80247ea:	4603      	mov	r3, r0
 80247ec:	2b02      	cmp	r3, #2
 80247ee:	d109      	bne.n	8024804 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80247f0:	4b10      	ldr	r3, [pc, #64]	; (8024834 <xTimerGenericCommand+0x94>)
 80247f2:	6818      	ldr	r0, [r3, #0]
 80247f4:	f107 0110 	add.w	r1, r7, #16
 80247f8:	2300      	movs	r3, #0
 80247fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80247fc:	f7fd feb8 	bl	8022570 <xQueueGenericSend>
 8024800:	6278      	str	r0, [r7, #36]	; 0x24
 8024802:	e012      	b.n	802482a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8024804:	4b0b      	ldr	r3, [pc, #44]	; (8024834 <xTimerGenericCommand+0x94>)
 8024806:	6818      	ldr	r0, [r3, #0]
 8024808:	f107 0110 	add.w	r1, r7, #16
 802480c:	2300      	movs	r3, #0
 802480e:	2200      	movs	r2, #0
 8024810:	f7fd feae 	bl	8022570 <xQueueGenericSend>
 8024814:	6278      	str	r0, [r7, #36]	; 0x24
 8024816:	e008      	b.n	802482a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8024818:	4b06      	ldr	r3, [pc, #24]	; (8024834 <xTimerGenericCommand+0x94>)
 802481a:	6818      	ldr	r0, [r3, #0]
 802481c:	f107 0110 	add.w	r1, r7, #16
 8024820:	2300      	movs	r3, #0
 8024822:	683a      	ldr	r2, [r7, #0]
 8024824:	f7fd ff9e 	bl	8022764 <xQueueGenericSendFromISR>
 8024828:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 802482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802482c:	4618      	mov	r0, r3
 802482e:	3728      	adds	r7, #40	; 0x28
 8024830:	46bd      	mov	sp, r7
 8024832:	bd80      	pop	{r7, pc}
 8024834:	20002180 	.word	0x20002180

08024838 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8024838:	b580      	push	{r7, lr}
 802483a:	b088      	sub	sp, #32
 802483c:	af02      	add	r7, sp, #8
 802483e:	6078      	str	r0, [r7, #4]
 8024840:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8024842:	4b22      	ldr	r3, [pc, #136]	; (80248cc <prvProcessExpiredTimer+0x94>)
 8024844:	681b      	ldr	r3, [r3, #0]
 8024846:	68db      	ldr	r3, [r3, #12]
 8024848:	68db      	ldr	r3, [r3, #12]
 802484a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802484c:	697b      	ldr	r3, [r7, #20]
 802484e:	3304      	adds	r3, #4
 8024850:	4618      	mov	r0, r3
 8024852:	f7fd fcbf 	bl	80221d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8024856:	697b      	ldr	r3, [r7, #20]
 8024858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802485c:	f003 0304 	and.w	r3, r3, #4
 8024860:	2b00      	cmp	r3, #0
 8024862:	d021      	beq.n	80248a8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8024864:	697b      	ldr	r3, [r7, #20]
 8024866:	699a      	ldr	r2, [r3, #24]
 8024868:	687b      	ldr	r3, [r7, #4]
 802486a:	18d1      	adds	r1, r2, r3
 802486c:	687b      	ldr	r3, [r7, #4]
 802486e:	683a      	ldr	r2, [r7, #0]
 8024870:	6978      	ldr	r0, [r7, #20]
 8024872:	f000 f8d1 	bl	8024a18 <prvInsertTimerInActiveList>
 8024876:	4603      	mov	r3, r0
 8024878:	2b00      	cmp	r3, #0
 802487a:	d01e      	beq.n	80248ba <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 802487c:	2300      	movs	r3, #0
 802487e:	9300      	str	r3, [sp, #0]
 8024880:	2300      	movs	r3, #0
 8024882:	687a      	ldr	r2, [r7, #4]
 8024884:	2100      	movs	r1, #0
 8024886:	6978      	ldr	r0, [r7, #20]
 8024888:	f7ff ff8a 	bl	80247a0 <xTimerGenericCommand>
 802488c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 802488e:	693b      	ldr	r3, [r7, #16]
 8024890:	2b00      	cmp	r3, #0
 8024892:	d112      	bne.n	80248ba <prvProcessExpiredTimer+0x82>
 8024894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024898:	f383 8811 	msr	BASEPRI, r3
 802489c:	f3bf 8f6f 	isb	sy
 80248a0:	f3bf 8f4f 	dsb	sy
 80248a4:	60fb      	str	r3, [r7, #12]
 80248a6:	e7fe      	b.n	80248a6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80248a8:	697b      	ldr	r3, [r7, #20]
 80248aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80248ae:	f023 0301 	bic.w	r3, r3, #1
 80248b2:	b2da      	uxtb	r2, r3
 80248b4:	697b      	ldr	r3, [r7, #20]
 80248b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80248ba:	697b      	ldr	r3, [r7, #20]
 80248bc:	6a1b      	ldr	r3, [r3, #32]
 80248be:	6978      	ldr	r0, [r7, #20]
 80248c0:	4798      	blx	r3
}
 80248c2:	bf00      	nop
 80248c4:	3718      	adds	r7, #24
 80248c6:	46bd      	mov	sp, r7
 80248c8:	bd80      	pop	{r7, pc}
 80248ca:	bf00      	nop
 80248cc:	20002178 	.word	0x20002178

080248d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80248d0:	b580      	push	{r7, lr}
 80248d2:	b084      	sub	sp, #16
 80248d4:	af00      	add	r7, sp, #0
 80248d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80248d8:	f107 0308 	add.w	r3, r7, #8
 80248dc:	4618      	mov	r0, r3
 80248de:	f000 f857 	bl	8024990 <prvGetNextExpireTime>
 80248e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80248e4:	68bb      	ldr	r3, [r7, #8]
 80248e6:	4619      	mov	r1, r3
 80248e8:	68f8      	ldr	r0, [r7, #12]
 80248ea:	f000 f803 	bl	80248f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80248ee:	f000 f8d5 	bl	8024a9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80248f2:	e7f1      	b.n	80248d8 <prvTimerTask+0x8>

080248f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80248f4:	b580      	push	{r7, lr}
 80248f6:	b084      	sub	sp, #16
 80248f8:	af00      	add	r7, sp, #0
 80248fa:	6078      	str	r0, [r7, #4]
 80248fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80248fe:	f7fe ff53 	bl	80237a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8024902:	f107 0308 	add.w	r3, r7, #8
 8024906:	4618      	mov	r0, r3
 8024908:	f000 f866 	bl	80249d8 <prvSampleTimeNow>
 802490c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 802490e:	68bb      	ldr	r3, [r7, #8]
 8024910:	2b00      	cmp	r3, #0
 8024912:	d130      	bne.n	8024976 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8024914:	683b      	ldr	r3, [r7, #0]
 8024916:	2b00      	cmp	r3, #0
 8024918:	d10a      	bne.n	8024930 <prvProcessTimerOrBlockTask+0x3c>
 802491a:	687a      	ldr	r2, [r7, #4]
 802491c:	68fb      	ldr	r3, [r7, #12]
 802491e:	429a      	cmp	r2, r3
 8024920:	d806      	bhi.n	8024930 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8024922:	f7fe ff4f 	bl	80237c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8024926:	68f9      	ldr	r1, [r7, #12]
 8024928:	6878      	ldr	r0, [r7, #4]
 802492a:	f7ff ff85 	bl	8024838 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 802492e:	e024      	b.n	802497a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8024930:	683b      	ldr	r3, [r7, #0]
 8024932:	2b00      	cmp	r3, #0
 8024934:	d008      	beq.n	8024948 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8024936:	4b13      	ldr	r3, [pc, #76]	; (8024984 <prvProcessTimerOrBlockTask+0x90>)
 8024938:	681b      	ldr	r3, [r3, #0]
 802493a:	681b      	ldr	r3, [r3, #0]
 802493c:	2b00      	cmp	r3, #0
 802493e:	d101      	bne.n	8024944 <prvProcessTimerOrBlockTask+0x50>
 8024940:	2301      	movs	r3, #1
 8024942:	e000      	b.n	8024946 <prvProcessTimerOrBlockTask+0x52>
 8024944:	2300      	movs	r3, #0
 8024946:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8024948:	4b0f      	ldr	r3, [pc, #60]	; (8024988 <prvProcessTimerOrBlockTask+0x94>)
 802494a:	6818      	ldr	r0, [r3, #0]
 802494c:	687a      	ldr	r2, [r7, #4]
 802494e:	68fb      	ldr	r3, [r7, #12]
 8024950:	1ad3      	subs	r3, r2, r3
 8024952:	683a      	ldr	r2, [r7, #0]
 8024954:	4619      	mov	r1, r3
 8024956:	f7fe fc43 	bl	80231e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 802495a:	f7fe ff33 	bl	80237c4 <xTaskResumeAll>
 802495e:	4603      	mov	r3, r0
 8024960:	2b00      	cmp	r3, #0
 8024962:	d10a      	bne.n	802497a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8024964:	4b09      	ldr	r3, [pc, #36]	; (802498c <prvProcessTimerOrBlockTask+0x98>)
 8024966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802496a:	601a      	str	r2, [r3, #0]
 802496c:	f3bf 8f4f 	dsb	sy
 8024970:	f3bf 8f6f 	isb	sy
}
 8024974:	e001      	b.n	802497a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8024976:	f7fe ff25 	bl	80237c4 <xTaskResumeAll>
}
 802497a:	bf00      	nop
 802497c:	3710      	adds	r7, #16
 802497e:	46bd      	mov	sp, r7
 8024980:	bd80      	pop	{r7, pc}
 8024982:	bf00      	nop
 8024984:	2000217c 	.word	0x2000217c
 8024988:	20002180 	.word	0x20002180
 802498c:	e000ed04 	.word	0xe000ed04

08024990 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8024990:	b480      	push	{r7}
 8024992:	b085      	sub	sp, #20
 8024994:	af00      	add	r7, sp, #0
 8024996:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8024998:	4b0e      	ldr	r3, [pc, #56]	; (80249d4 <prvGetNextExpireTime+0x44>)
 802499a:	681b      	ldr	r3, [r3, #0]
 802499c:	681b      	ldr	r3, [r3, #0]
 802499e:	2b00      	cmp	r3, #0
 80249a0:	d101      	bne.n	80249a6 <prvGetNextExpireTime+0x16>
 80249a2:	2201      	movs	r2, #1
 80249a4:	e000      	b.n	80249a8 <prvGetNextExpireTime+0x18>
 80249a6:	2200      	movs	r2, #0
 80249a8:	687b      	ldr	r3, [r7, #4]
 80249aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80249ac:	687b      	ldr	r3, [r7, #4]
 80249ae:	681b      	ldr	r3, [r3, #0]
 80249b0:	2b00      	cmp	r3, #0
 80249b2:	d105      	bne.n	80249c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80249b4:	4b07      	ldr	r3, [pc, #28]	; (80249d4 <prvGetNextExpireTime+0x44>)
 80249b6:	681b      	ldr	r3, [r3, #0]
 80249b8:	68db      	ldr	r3, [r3, #12]
 80249ba:	681b      	ldr	r3, [r3, #0]
 80249bc:	60fb      	str	r3, [r7, #12]
 80249be:	e001      	b.n	80249c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80249c0:	2300      	movs	r3, #0
 80249c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80249c4:	68fb      	ldr	r3, [r7, #12]
}
 80249c6:	4618      	mov	r0, r3
 80249c8:	3714      	adds	r7, #20
 80249ca:	46bd      	mov	sp, r7
 80249cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249d0:	4770      	bx	lr
 80249d2:	bf00      	nop
 80249d4:	20002178 	.word	0x20002178

080249d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80249d8:	b580      	push	{r7, lr}
 80249da:	b084      	sub	sp, #16
 80249dc:	af00      	add	r7, sp, #0
 80249de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80249e0:	f7fe ff8c 	bl	80238fc <xTaskGetTickCount>
 80249e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80249e6:	4b0b      	ldr	r3, [pc, #44]	; (8024a14 <prvSampleTimeNow+0x3c>)
 80249e8:	681b      	ldr	r3, [r3, #0]
 80249ea:	68fa      	ldr	r2, [r7, #12]
 80249ec:	429a      	cmp	r2, r3
 80249ee:	d205      	bcs.n	80249fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80249f0:	f000 f930 	bl	8024c54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80249f4:	687b      	ldr	r3, [r7, #4]
 80249f6:	2201      	movs	r2, #1
 80249f8:	601a      	str	r2, [r3, #0]
 80249fa:	e002      	b.n	8024a02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80249fc:	687b      	ldr	r3, [r7, #4]
 80249fe:	2200      	movs	r2, #0
 8024a00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8024a02:	4a04      	ldr	r2, [pc, #16]	; (8024a14 <prvSampleTimeNow+0x3c>)
 8024a04:	68fb      	ldr	r3, [r7, #12]
 8024a06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8024a08:	68fb      	ldr	r3, [r7, #12]
}
 8024a0a:	4618      	mov	r0, r3
 8024a0c:	3710      	adds	r7, #16
 8024a0e:	46bd      	mov	sp, r7
 8024a10:	bd80      	pop	{r7, pc}
 8024a12:	bf00      	nop
 8024a14:	20002188 	.word	0x20002188

08024a18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8024a18:	b580      	push	{r7, lr}
 8024a1a:	b086      	sub	sp, #24
 8024a1c:	af00      	add	r7, sp, #0
 8024a1e:	60f8      	str	r0, [r7, #12]
 8024a20:	60b9      	str	r1, [r7, #8]
 8024a22:	607a      	str	r2, [r7, #4]
 8024a24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8024a26:	2300      	movs	r3, #0
 8024a28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8024a2a:	68fb      	ldr	r3, [r7, #12]
 8024a2c:	68ba      	ldr	r2, [r7, #8]
 8024a2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8024a30:	68fb      	ldr	r3, [r7, #12]
 8024a32:	68fa      	ldr	r2, [r7, #12]
 8024a34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8024a36:	68ba      	ldr	r2, [r7, #8]
 8024a38:	687b      	ldr	r3, [r7, #4]
 8024a3a:	429a      	cmp	r2, r3
 8024a3c:	d812      	bhi.n	8024a64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8024a3e:	687a      	ldr	r2, [r7, #4]
 8024a40:	683b      	ldr	r3, [r7, #0]
 8024a42:	1ad2      	subs	r2, r2, r3
 8024a44:	68fb      	ldr	r3, [r7, #12]
 8024a46:	699b      	ldr	r3, [r3, #24]
 8024a48:	429a      	cmp	r2, r3
 8024a4a:	d302      	bcc.n	8024a52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8024a4c:	2301      	movs	r3, #1
 8024a4e:	617b      	str	r3, [r7, #20]
 8024a50:	e01b      	b.n	8024a8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8024a52:	4b10      	ldr	r3, [pc, #64]	; (8024a94 <prvInsertTimerInActiveList+0x7c>)
 8024a54:	681a      	ldr	r2, [r3, #0]
 8024a56:	68fb      	ldr	r3, [r7, #12]
 8024a58:	3304      	adds	r3, #4
 8024a5a:	4619      	mov	r1, r3
 8024a5c:	4610      	mov	r0, r2
 8024a5e:	f7fd fb80 	bl	8022162 <vListInsert>
 8024a62:	e012      	b.n	8024a8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8024a64:	687a      	ldr	r2, [r7, #4]
 8024a66:	683b      	ldr	r3, [r7, #0]
 8024a68:	429a      	cmp	r2, r3
 8024a6a:	d206      	bcs.n	8024a7a <prvInsertTimerInActiveList+0x62>
 8024a6c:	68ba      	ldr	r2, [r7, #8]
 8024a6e:	683b      	ldr	r3, [r7, #0]
 8024a70:	429a      	cmp	r2, r3
 8024a72:	d302      	bcc.n	8024a7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8024a74:	2301      	movs	r3, #1
 8024a76:	617b      	str	r3, [r7, #20]
 8024a78:	e007      	b.n	8024a8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8024a7a:	4b07      	ldr	r3, [pc, #28]	; (8024a98 <prvInsertTimerInActiveList+0x80>)
 8024a7c:	681a      	ldr	r2, [r3, #0]
 8024a7e:	68fb      	ldr	r3, [r7, #12]
 8024a80:	3304      	adds	r3, #4
 8024a82:	4619      	mov	r1, r3
 8024a84:	4610      	mov	r0, r2
 8024a86:	f7fd fb6c 	bl	8022162 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8024a8a:	697b      	ldr	r3, [r7, #20]
}
 8024a8c:	4618      	mov	r0, r3
 8024a8e:	3718      	adds	r7, #24
 8024a90:	46bd      	mov	sp, r7
 8024a92:	bd80      	pop	{r7, pc}
 8024a94:	2000217c 	.word	0x2000217c
 8024a98:	20002178 	.word	0x20002178

08024a9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8024a9c:	b580      	push	{r7, lr}
 8024a9e:	b08e      	sub	sp, #56	; 0x38
 8024aa0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8024aa2:	e0c6      	b.n	8024c32 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8024aa4:	687b      	ldr	r3, [r7, #4]
 8024aa6:	2b00      	cmp	r3, #0
 8024aa8:	da17      	bge.n	8024ada <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8024aaa:	1d3b      	adds	r3, r7, #4
 8024aac:	3304      	adds	r3, #4
 8024aae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8024ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ab2:	2b00      	cmp	r3, #0
 8024ab4:	d109      	bne.n	8024aca <prvProcessReceivedCommands+0x2e>
 8024ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024aba:	f383 8811 	msr	BASEPRI, r3
 8024abe:	f3bf 8f6f 	isb	sy
 8024ac2:	f3bf 8f4f 	dsb	sy
 8024ac6:	61fb      	str	r3, [r7, #28]
 8024ac8:	e7fe      	b.n	8024ac8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8024aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024acc:	681b      	ldr	r3, [r3, #0]
 8024ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024ad0:	6850      	ldr	r0, [r2, #4]
 8024ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024ad4:	6892      	ldr	r2, [r2, #8]
 8024ad6:	4611      	mov	r1, r2
 8024ad8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8024ada:	687b      	ldr	r3, [r7, #4]
 8024adc:	2b00      	cmp	r3, #0
 8024ade:	f2c0 80a7 	blt.w	8024c30 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8024ae2:	68fb      	ldr	r3, [r7, #12]
 8024ae4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8024ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024ae8:	695b      	ldr	r3, [r3, #20]
 8024aea:	2b00      	cmp	r3, #0
 8024aec:	d004      	beq.n	8024af8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8024aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024af0:	3304      	adds	r3, #4
 8024af2:	4618      	mov	r0, r3
 8024af4:	f7fd fb6e 	bl	80221d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8024af8:	463b      	mov	r3, r7
 8024afa:	4618      	mov	r0, r3
 8024afc:	f7ff ff6c 	bl	80249d8 <prvSampleTimeNow>
 8024b00:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8024b02:	687b      	ldr	r3, [r7, #4]
 8024b04:	2b09      	cmp	r3, #9
 8024b06:	f200 8094 	bhi.w	8024c32 <prvProcessReceivedCommands+0x196>
 8024b0a:	a201      	add	r2, pc, #4	; (adr r2, 8024b10 <prvProcessReceivedCommands+0x74>)
 8024b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024b10:	08024b39 	.word	0x08024b39
 8024b14:	08024b39 	.word	0x08024b39
 8024b18:	08024b39 	.word	0x08024b39
 8024b1c:	08024bab 	.word	0x08024bab
 8024b20:	08024bbf 	.word	0x08024bbf
 8024b24:	08024c07 	.word	0x08024c07
 8024b28:	08024b39 	.word	0x08024b39
 8024b2c:	08024b39 	.word	0x08024b39
 8024b30:	08024bab 	.word	0x08024bab
 8024b34:	08024bbf 	.word	0x08024bbf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8024b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024b3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8024b3e:	f043 0301 	orr.w	r3, r3, #1
 8024b42:	b2da      	uxtb	r2, r3
 8024b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024b46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8024b4a:	68ba      	ldr	r2, [r7, #8]
 8024b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024b4e:	699b      	ldr	r3, [r3, #24]
 8024b50:	18d1      	adds	r1, r2, r3
 8024b52:	68bb      	ldr	r3, [r7, #8]
 8024b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024b58:	f7ff ff5e 	bl	8024a18 <prvInsertTimerInActiveList>
 8024b5c:	4603      	mov	r3, r0
 8024b5e:	2b00      	cmp	r3, #0
 8024b60:	d067      	beq.n	8024c32 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8024b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024b64:	6a1b      	ldr	r3, [r3, #32]
 8024b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024b68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8024b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8024b70:	f003 0304 	and.w	r3, r3, #4
 8024b74:	2b00      	cmp	r3, #0
 8024b76:	d05c      	beq.n	8024c32 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8024b78:	68ba      	ldr	r2, [r7, #8]
 8024b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024b7c:	699b      	ldr	r3, [r3, #24]
 8024b7e:	441a      	add	r2, r3
 8024b80:	2300      	movs	r3, #0
 8024b82:	9300      	str	r3, [sp, #0]
 8024b84:	2300      	movs	r3, #0
 8024b86:	2100      	movs	r1, #0
 8024b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024b8a:	f7ff fe09 	bl	80247a0 <xTimerGenericCommand>
 8024b8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8024b90:	6a3b      	ldr	r3, [r7, #32]
 8024b92:	2b00      	cmp	r3, #0
 8024b94:	d14d      	bne.n	8024c32 <prvProcessReceivedCommands+0x196>
 8024b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024b9a:	f383 8811 	msr	BASEPRI, r3
 8024b9e:	f3bf 8f6f 	isb	sy
 8024ba2:	f3bf 8f4f 	dsb	sy
 8024ba6:	61bb      	str	r3, [r7, #24]
 8024ba8:	e7fe      	b.n	8024ba8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8024baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024bac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8024bb0:	f023 0301 	bic.w	r3, r3, #1
 8024bb4:	b2da      	uxtb	r2, r3
 8024bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024bb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8024bbc:	e039      	b.n	8024c32 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8024bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8024bc4:	f043 0301 	orr.w	r3, r3, #1
 8024bc8:	b2da      	uxtb	r2, r3
 8024bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024bcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8024bd0:	68ba      	ldr	r2, [r7, #8]
 8024bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024bd4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8024bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024bd8:	699b      	ldr	r3, [r3, #24]
 8024bda:	2b00      	cmp	r3, #0
 8024bdc:	d109      	bne.n	8024bf2 <prvProcessReceivedCommands+0x156>
 8024bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024be2:	f383 8811 	msr	BASEPRI, r3
 8024be6:	f3bf 8f6f 	isb	sy
 8024bea:	f3bf 8f4f 	dsb	sy
 8024bee:	617b      	str	r3, [r7, #20]
 8024bf0:	e7fe      	b.n	8024bf0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8024bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024bf4:	699a      	ldr	r2, [r3, #24]
 8024bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024bf8:	18d1      	adds	r1, r2, r3
 8024bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024c00:	f7ff ff0a 	bl	8024a18 <prvInsertTimerInActiveList>
					break;
 8024c04:	e015      	b.n	8024c32 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8024c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8024c0c:	f003 0302 	and.w	r3, r3, #2
 8024c10:	2b00      	cmp	r3, #0
 8024c12:	d103      	bne.n	8024c1c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8024c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024c16:	f000 fbc5 	bl	80253a4 <vPortFree>
 8024c1a:	e00a      	b.n	8024c32 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8024c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8024c22:	f023 0301 	bic.w	r3, r3, #1
 8024c26:	b2da      	uxtb	r2, r3
 8024c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8024c2e:	e000      	b.n	8024c32 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8024c30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8024c32:	4b07      	ldr	r3, [pc, #28]	; (8024c50 <prvProcessReceivedCommands+0x1b4>)
 8024c34:	681b      	ldr	r3, [r3, #0]
 8024c36:	1d39      	adds	r1, r7, #4
 8024c38:	2200      	movs	r2, #0
 8024c3a:	4618      	mov	r0, r3
 8024c3c:	f7fd feb0 	bl	80229a0 <xQueueReceive>
 8024c40:	4603      	mov	r3, r0
 8024c42:	2b00      	cmp	r3, #0
 8024c44:	f47f af2e 	bne.w	8024aa4 <prvProcessReceivedCommands+0x8>
	}
}
 8024c48:	bf00      	nop
 8024c4a:	3730      	adds	r7, #48	; 0x30
 8024c4c:	46bd      	mov	sp, r7
 8024c4e:	bd80      	pop	{r7, pc}
 8024c50:	20002180 	.word	0x20002180

08024c54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8024c54:	b580      	push	{r7, lr}
 8024c56:	b088      	sub	sp, #32
 8024c58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8024c5a:	e047      	b.n	8024cec <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8024c5c:	4b2d      	ldr	r3, [pc, #180]	; (8024d14 <prvSwitchTimerLists+0xc0>)
 8024c5e:	681b      	ldr	r3, [r3, #0]
 8024c60:	68db      	ldr	r3, [r3, #12]
 8024c62:	681b      	ldr	r3, [r3, #0]
 8024c64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8024c66:	4b2b      	ldr	r3, [pc, #172]	; (8024d14 <prvSwitchTimerLists+0xc0>)
 8024c68:	681b      	ldr	r3, [r3, #0]
 8024c6a:	68db      	ldr	r3, [r3, #12]
 8024c6c:	68db      	ldr	r3, [r3, #12]
 8024c6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8024c70:	68fb      	ldr	r3, [r7, #12]
 8024c72:	3304      	adds	r3, #4
 8024c74:	4618      	mov	r0, r3
 8024c76:	f7fd faad 	bl	80221d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8024c7a:	68fb      	ldr	r3, [r7, #12]
 8024c7c:	6a1b      	ldr	r3, [r3, #32]
 8024c7e:	68f8      	ldr	r0, [r7, #12]
 8024c80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8024c82:	68fb      	ldr	r3, [r7, #12]
 8024c84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8024c88:	f003 0304 	and.w	r3, r3, #4
 8024c8c:	2b00      	cmp	r3, #0
 8024c8e:	d02d      	beq.n	8024cec <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8024c90:	68fb      	ldr	r3, [r7, #12]
 8024c92:	699b      	ldr	r3, [r3, #24]
 8024c94:	693a      	ldr	r2, [r7, #16]
 8024c96:	4413      	add	r3, r2
 8024c98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8024c9a:	68ba      	ldr	r2, [r7, #8]
 8024c9c:	693b      	ldr	r3, [r7, #16]
 8024c9e:	429a      	cmp	r2, r3
 8024ca0:	d90e      	bls.n	8024cc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8024ca2:	68fb      	ldr	r3, [r7, #12]
 8024ca4:	68ba      	ldr	r2, [r7, #8]
 8024ca6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8024ca8:	68fb      	ldr	r3, [r7, #12]
 8024caa:	68fa      	ldr	r2, [r7, #12]
 8024cac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8024cae:	4b19      	ldr	r3, [pc, #100]	; (8024d14 <prvSwitchTimerLists+0xc0>)
 8024cb0:	681a      	ldr	r2, [r3, #0]
 8024cb2:	68fb      	ldr	r3, [r7, #12]
 8024cb4:	3304      	adds	r3, #4
 8024cb6:	4619      	mov	r1, r3
 8024cb8:	4610      	mov	r0, r2
 8024cba:	f7fd fa52 	bl	8022162 <vListInsert>
 8024cbe:	e015      	b.n	8024cec <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8024cc0:	2300      	movs	r3, #0
 8024cc2:	9300      	str	r3, [sp, #0]
 8024cc4:	2300      	movs	r3, #0
 8024cc6:	693a      	ldr	r2, [r7, #16]
 8024cc8:	2100      	movs	r1, #0
 8024cca:	68f8      	ldr	r0, [r7, #12]
 8024ccc:	f7ff fd68 	bl	80247a0 <xTimerGenericCommand>
 8024cd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8024cd2:	687b      	ldr	r3, [r7, #4]
 8024cd4:	2b00      	cmp	r3, #0
 8024cd6:	d109      	bne.n	8024cec <prvSwitchTimerLists+0x98>
 8024cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024cdc:	f383 8811 	msr	BASEPRI, r3
 8024ce0:	f3bf 8f6f 	isb	sy
 8024ce4:	f3bf 8f4f 	dsb	sy
 8024ce8:	603b      	str	r3, [r7, #0]
 8024cea:	e7fe      	b.n	8024cea <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8024cec:	4b09      	ldr	r3, [pc, #36]	; (8024d14 <prvSwitchTimerLists+0xc0>)
 8024cee:	681b      	ldr	r3, [r3, #0]
 8024cf0:	681b      	ldr	r3, [r3, #0]
 8024cf2:	2b00      	cmp	r3, #0
 8024cf4:	d1b2      	bne.n	8024c5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8024cf6:	4b07      	ldr	r3, [pc, #28]	; (8024d14 <prvSwitchTimerLists+0xc0>)
 8024cf8:	681b      	ldr	r3, [r3, #0]
 8024cfa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8024cfc:	4b06      	ldr	r3, [pc, #24]	; (8024d18 <prvSwitchTimerLists+0xc4>)
 8024cfe:	681b      	ldr	r3, [r3, #0]
 8024d00:	4a04      	ldr	r2, [pc, #16]	; (8024d14 <prvSwitchTimerLists+0xc0>)
 8024d02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8024d04:	4a04      	ldr	r2, [pc, #16]	; (8024d18 <prvSwitchTimerLists+0xc4>)
 8024d06:	697b      	ldr	r3, [r7, #20]
 8024d08:	6013      	str	r3, [r2, #0]
}
 8024d0a:	bf00      	nop
 8024d0c:	3718      	adds	r7, #24
 8024d0e:	46bd      	mov	sp, r7
 8024d10:	bd80      	pop	{r7, pc}
 8024d12:	bf00      	nop
 8024d14:	20002178 	.word	0x20002178
 8024d18:	2000217c 	.word	0x2000217c

08024d1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8024d1c:	b580      	push	{r7, lr}
 8024d1e:	b082      	sub	sp, #8
 8024d20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8024d22:	f000 f963 	bl	8024fec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8024d26:	4b15      	ldr	r3, [pc, #84]	; (8024d7c <prvCheckForValidListAndQueue+0x60>)
 8024d28:	681b      	ldr	r3, [r3, #0]
 8024d2a:	2b00      	cmp	r3, #0
 8024d2c:	d120      	bne.n	8024d70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8024d2e:	4814      	ldr	r0, [pc, #80]	; (8024d80 <prvCheckForValidListAndQueue+0x64>)
 8024d30:	f7fd f9c6 	bl	80220c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8024d34:	4813      	ldr	r0, [pc, #76]	; (8024d84 <prvCheckForValidListAndQueue+0x68>)
 8024d36:	f7fd f9c3 	bl	80220c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8024d3a:	4b13      	ldr	r3, [pc, #76]	; (8024d88 <prvCheckForValidListAndQueue+0x6c>)
 8024d3c:	4a10      	ldr	r2, [pc, #64]	; (8024d80 <prvCheckForValidListAndQueue+0x64>)
 8024d3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8024d40:	4b12      	ldr	r3, [pc, #72]	; (8024d8c <prvCheckForValidListAndQueue+0x70>)
 8024d42:	4a10      	ldr	r2, [pc, #64]	; (8024d84 <prvCheckForValidListAndQueue+0x68>)
 8024d44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8024d46:	2300      	movs	r3, #0
 8024d48:	9300      	str	r3, [sp, #0]
 8024d4a:	4b11      	ldr	r3, [pc, #68]	; (8024d90 <prvCheckForValidListAndQueue+0x74>)
 8024d4c:	4a11      	ldr	r2, [pc, #68]	; (8024d94 <prvCheckForValidListAndQueue+0x78>)
 8024d4e:	2110      	movs	r1, #16
 8024d50:	200a      	movs	r0, #10
 8024d52:	f7fd fad1 	bl	80222f8 <xQueueGenericCreateStatic>
 8024d56:	4602      	mov	r2, r0
 8024d58:	4b08      	ldr	r3, [pc, #32]	; (8024d7c <prvCheckForValidListAndQueue+0x60>)
 8024d5a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8024d5c:	4b07      	ldr	r3, [pc, #28]	; (8024d7c <prvCheckForValidListAndQueue+0x60>)
 8024d5e:	681b      	ldr	r3, [r3, #0]
 8024d60:	2b00      	cmp	r3, #0
 8024d62:	d005      	beq.n	8024d70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8024d64:	4b05      	ldr	r3, [pc, #20]	; (8024d7c <prvCheckForValidListAndQueue+0x60>)
 8024d66:	681b      	ldr	r3, [r3, #0]
 8024d68:	490b      	ldr	r1, [pc, #44]	; (8024d98 <prvCheckForValidListAndQueue+0x7c>)
 8024d6a:	4618      	mov	r0, r3
 8024d6c:	f7fe f9e6 	bl	802313c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8024d70:	f000 f96a 	bl	8025048 <vPortExitCritical>
}
 8024d74:	bf00      	nop
 8024d76:	46bd      	mov	sp, r7
 8024d78:	bd80      	pop	{r7, pc}
 8024d7a:	bf00      	nop
 8024d7c:	20002180 	.word	0x20002180
 8024d80:	20002150 	.word	0x20002150
 8024d84:	20002164 	.word	0x20002164
 8024d88:	20002178 	.word	0x20002178
 8024d8c:	2000217c 	.word	0x2000217c
 8024d90:	2000222c 	.word	0x2000222c
 8024d94:	2000218c 	.word	0x2000218c
 8024d98:	0802d8f0 	.word	0x0802d8f0

08024d9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8024d9c:	b480      	push	{r7}
 8024d9e:	b085      	sub	sp, #20
 8024da0:	af00      	add	r7, sp, #0
 8024da2:	60f8      	str	r0, [r7, #12]
 8024da4:	60b9      	str	r1, [r7, #8]
 8024da6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8024da8:	68fb      	ldr	r3, [r7, #12]
 8024daa:	3b04      	subs	r3, #4
 8024dac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8024dae:	68fb      	ldr	r3, [r7, #12]
 8024db0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8024db4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8024db6:	68fb      	ldr	r3, [r7, #12]
 8024db8:	3b04      	subs	r3, #4
 8024dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8024dbc:	68bb      	ldr	r3, [r7, #8]
 8024dbe:	f023 0201 	bic.w	r2, r3, #1
 8024dc2:	68fb      	ldr	r3, [r7, #12]
 8024dc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8024dc6:	68fb      	ldr	r3, [r7, #12]
 8024dc8:	3b04      	subs	r3, #4
 8024dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8024dcc:	4a0c      	ldr	r2, [pc, #48]	; (8024e00 <pxPortInitialiseStack+0x64>)
 8024dce:	68fb      	ldr	r3, [r7, #12]
 8024dd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8024dd2:	68fb      	ldr	r3, [r7, #12]
 8024dd4:	3b14      	subs	r3, #20
 8024dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8024dd8:	687a      	ldr	r2, [r7, #4]
 8024dda:	68fb      	ldr	r3, [r7, #12]
 8024ddc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8024dde:	68fb      	ldr	r3, [r7, #12]
 8024de0:	3b04      	subs	r3, #4
 8024de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8024de4:	68fb      	ldr	r3, [r7, #12]
 8024de6:	f06f 0202 	mvn.w	r2, #2
 8024dea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8024dec:	68fb      	ldr	r3, [r7, #12]
 8024dee:	3b20      	subs	r3, #32
 8024df0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8024df2:	68fb      	ldr	r3, [r7, #12]
}
 8024df4:	4618      	mov	r0, r3
 8024df6:	3714      	adds	r7, #20
 8024df8:	46bd      	mov	sp, r7
 8024dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024dfe:	4770      	bx	lr
 8024e00:	08024e05 	.word	0x08024e05

08024e04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8024e04:	b480      	push	{r7}
 8024e06:	b085      	sub	sp, #20
 8024e08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8024e0a:	2300      	movs	r3, #0
 8024e0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8024e0e:	4b11      	ldr	r3, [pc, #68]	; (8024e54 <prvTaskExitError+0x50>)
 8024e10:	681b      	ldr	r3, [r3, #0]
 8024e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024e16:	d009      	beq.n	8024e2c <prvTaskExitError+0x28>
 8024e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024e1c:	f383 8811 	msr	BASEPRI, r3
 8024e20:	f3bf 8f6f 	isb	sy
 8024e24:	f3bf 8f4f 	dsb	sy
 8024e28:	60fb      	str	r3, [r7, #12]
 8024e2a:	e7fe      	b.n	8024e2a <prvTaskExitError+0x26>
 8024e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024e30:	f383 8811 	msr	BASEPRI, r3
 8024e34:	f3bf 8f6f 	isb	sy
 8024e38:	f3bf 8f4f 	dsb	sy
 8024e3c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8024e3e:	bf00      	nop
 8024e40:	687b      	ldr	r3, [r7, #4]
 8024e42:	2b00      	cmp	r3, #0
 8024e44:	d0fc      	beq.n	8024e40 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8024e46:	bf00      	nop
 8024e48:	3714      	adds	r7, #20
 8024e4a:	46bd      	mov	sp, r7
 8024e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e50:	4770      	bx	lr
 8024e52:	bf00      	nop
 8024e54:	200006a4 	.word	0x200006a4
	...

08024e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8024e60:	4b07      	ldr	r3, [pc, #28]	; (8024e80 <pxCurrentTCBConst2>)
 8024e62:	6819      	ldr	r1, [r3, #0]
 8024e64:	6808      	ldr	r0, [r1, #0]
 8024e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e6a:	f380 8809 	msr	PSP, r0
 8024e6e:	f3bf 8f6f 	isb	sy
 8024e72:	f04f 0000 	mov.w	r0, #0
 8024e76:	f380 8811 	msr	BASEPRI, r0
 8024e7a:	4770      	bx	lr
 8024e7c:	f3af 8000 	nop.w

08024e80 <pxCurrentTCBConst2>:
 8024e80:	20001c50 	.word	0x20001c50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8024e84:	bf00      	nop
 8024e86:	bf00      	nop

08024e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8024e88:	4808      	ldr	r0, [pc, #32]	; (8024eac <prvPortStartFirstTask+0x24>)
 8024e8a:	6800      	ldr	r0, [r0, #0]
 8024e8c:	6800      	ldr	r0, [r0, #0]
 8024e8e:	f380 8808 	msr	MSP, r0
 8024e92:	f04f 0000 	mov.w	r0, #0
 8024e96:	f380 8814 	msr	CONTROL, r0
 8024e9a:	b662      	cpsie	i
 8024e9c:	b661      	cpsie	f
 8024e9e:	f3bf 8f4f 	dsb	sy
 8024ea2:	f3bf 8f6f 	isb	sy
 8024ea6:	df00      	svc	0
 8024ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8024eaa:	bf00      	nop
 8024eac:	e000ed08 	.word	0xe000ed08

08024eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8024eb0:	b580      	push	{r7, lr}
 8024eb2:	b086      	sub	sp, #24
 8024eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8024eb6:	4b44      	ldr	r3, [pc, #272]	; (8024fc8 <xPortStartScheduler+0x118>)
 8024eb8:	681b      	ldr	r3, [r3, #0]
 8024eba:	4a44      	ldr	r2, [pc, #272]	; (8024fcc <xPortStartScheduler+0x11c>)
 8024ebc:	4293      	cmp	r3, r2
 8024ebe:	d109      	bne.n	8024ed4 <xPortStartScheduler+0x24>
 8024ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024ec4:	f383 8811 	msr	BASEPRI, r3
 8024ec8:	f3bf 8f6f 	isb	sy
 8024ecc:	f3bf 8f4f 	dsb	sy
 8024ed0:	613b      	str	r3, [r7, #16]
 8024ed2:	e7fe      	b.n	8024ed2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8024ed4:	4b3c      	ldr	r3, [pc, #240]	; (8024fc8 <xPortStartScheduler+0x118>)
 8024ed6:	681b      	ldr	r3, [r3, #0]
 8024ed8:	4a3d      	ldr	r2, [pc, #244]	; (8024fd0 <xPortStartScheduler+0x120>)
 8024eda:	4293      	cmp	r3, r2
 8024edc:	d109      	bne.n	8024ef2 <xPortStartScheduler+0x42>
 8024ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024ee2:	f383 8811 	msr	BASEPRI, r3
 8024ee6:	f3bf 8f6f 	isb	sy
 8024eea:	f3bf 8f4f 	dsb	sy
 8024eee:	60fb      	str	r3, [r7, #12]
 8024ef0:	e7fe      	b.n	8024ef0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8024ef2:	4b38      	ldr	r3, [pc, #224]	; (8024fd4 <xPortStartScheduler+0x124>)
 8024ef4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8024ef6:	697b      	ldr	r3, [r7, #20]
 8024ef8:	781b      	ldrb	r3, [r3, #0]
 8024efa:	b2db      	uxtb	r3, r3
 8024efc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8024efe:	697b      	ldr	r3, [r7, #20]
 8024f00:	22ff      	movs	r2, #255	; 0xff
 8024f02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8024f04:	697b      	ldr	r3, [r7, #20]
 8024f06:	781b      	ldrb	r3, [r3, #0]
 8024f08:	b2db      	uxtb	r3, r3
 8024f0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8024f0c:	78fb      	ldrb	r3, [r7, #3]
 8024f0e:	b2db      	uxtb	r3, r3
 8024f10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8024f14:	b2da      	uxtb	r2, r3
 8024f16:	4b30      	ldr	r3, [pc, #192]	; (8024fd8 <xPortStartScheduler+0x128>)
 8024f18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8024f1a:	4b30      	ldr	r3, [pc, #192]	; (8024fdc <xPortStartScheduler+0x12c>)
 8024f1c:	2207      	movs	r2, #7
 8024f1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8024f20:	e009      	b.n	8024f36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8024f22:	4b2e      	ldr	r3, [pc, #184]	; (8024fdc <xPortStartScheduler+0x12c>)
 8024f24:	681b      	ldr	r3, [r3, #0]
 8024f26:	3b01      	subs	r3, #1
 8024f28:	4a2c      	ldr	r2, [pc, #176]	; (8024fdc <xPortStartScheduler+0x12c>)
 8024f2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8024f2c:	78fb      	ldrb	r3, [r7, #3]
 8024f2e:	b2db      	uxtb	r3, r3
 8024f30:	005b      	lsls	r3, r3, #1
 8024f32:	b2db      	uxtb	r3, r3
 8024f34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8024f36:	78fb      	ldrb	r3, [r7, #3]
 8024f38:	b2db      	uxtb	r3, r3
 8024f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024f3e:	2b80      	cmp	r3, #128	; 0x80
 8024f40:	d0ef      	beq.n	8024f22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8024f42:	4b26      	ldr	r3, [pc, #152]	; (8024fdc <xPortStartScheduler+0x12c>)
 8024f44:	681b      	ldr	r3, [r3, #0]
 8024f46:	f1c3 0307 	rsb	r3, r3, #7
 8024f4a:	2b04      	cmp	r3, #4
 8024f4c:	d009      	beq.n	8024f62 <xPortStartScheduler+0xb2>
 8024f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024f52:	f383 8811 	msr	BASEPRI, r3
 8024f56:	f3bf 8f6f 	isb	sy
 8024f5a:	f3bf 8f4f 	dsb	sy
 8024f5e:	60bb      	str	r3, [r7, #8]
 8024f60:	e7fe      	b.n	8024f60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8024f62:	4b1e      	ldr	r3, [pc, #120]	; (8024fdc <xPortStartScheduler+0x12c>)
 8024f64:	681b      	ldr	r3, [r3, #0]
 8024f66:	021b      	lsls	r3, r3, #8
 8024f68:	4a1c      	ldr	r2, [pc, #112]	; (8024fdc <xPortStartScheduler+0x12c>)
 8024f6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8024f6c:	4b1b      	ldr	r3, [pc, #108]	; (8024fdc <xPortStartScheduler+0x12c>)
 8024f6e:	681b      	ldr	r3, [r3, #0]
 8024f70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8024f74:	4a19      	ldr	r2, [pc, #100]	; (8024fdc <xPortStartScheduler+0x12c>)
 8024f76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8024f78:	687b      	ldr	r3, [r7, #4]
 8024f7a:	b2da      	uxtb	r2, r3
 8024f7c:	697b      	ldr	r3, [r7, #20]
 8024f7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8024f80:	4b17      	ldr	r3, [pc, #92]	; (8024fe0 <xPortStartScheduler+0x130>)
 8024f82:	681b      	ldr	r3, [r3, #0]
 8024f84:	4a16      	ldr	r2, [pc, #88]	; (8024fe0 <xPortStartScheduler+0x130>)
 8024f86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8024f8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8024f8c:	4b14      	ldr	r3, [pc, #80]	; (8024fe0 <xPortStartScheduler+0x130>)
 8024f8e:	681b      	ldr	r3, [r3, #0]
 8024f90:	4a13      	ldr	r2, [pc, #76]	; (8024fe0 <xPortStartScheduler+0x130>)
 8024f92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8024f96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8024f98:	f000 f8d6 	bl	8025148 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8024f9c:	4b11      	ldr	r3, [pc, #68]	; (8024fe4 <xPortStartScheduler+0x134>)
 8024f9e:	2200      	movs	r2, #0
 8024fa0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8024fa2:	f000 f8f5 	bl	8025190 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8024fa6:	4b10      	ldr	r3, [pc, #64]	; (8024fe8 <xPortStartScheduler+0x138>)
 8024fa8:	681b      	ldr	r3, [r3, #0]
 8024faa:	4a0f      	ldr	r2, [pc, #60]	; (8024fe8 <xPortStartScheduler+0x138>)
 8024fac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8024fb0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8024fb2:	f7ff ff69 	bl	8024e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8024fb6:	f7fe fd7b 	bl	8023ab0 <vTaskSwitchContext>
	prvTaskExitError();
 8024fba:	f7ff ff23 	bl	8024e04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8024fbe:	2300      	movs	r3, #0
}
 8024fc0:	4618      	mov	r0, r3
 8024fc2:	3718      	adds	r7, #24
 8024fc4:	46bd      	mov	sp, r7
 8024fc6:	bd80      	pop	{r7, pc}
 8024fc8:	e000ed00 	.word	0xe000ed00
 8024fcc:	410fc271 	.word	0x410fc271
 8024fd0:	410fc270 	.word	0x410fc270
 8024fd4:	e000e400 	.word	0xe000e400
 8024fd8:	2000227c 	.word	0x2000227c
 8024fdc:	20002280 	.word	0x20002280
 8024fe0:	e000ed20 	.word	0xe000ed20
 8024fe4:	200006a4 	.word	0x200006a4
 8024fe8:	e000ef34 	.word	0xe000ef34

08024fec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8024fec:	b480      	push	{r7}
 8024fee:	b083      	sub	sp, #12
 8024ff0:	af00      	add	r7, sp, #0
 8024ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8024ff6:	f383 8811 	msr	BASEPRI, r3
 8024ffa:	f3bf 8f6f 	isb	sy
 8024ffe:	f3bf 8f4f 	dsb	sy
 8025002:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8025004:	4b0e      	ldr	r3, [pc, #56]	; (8025040 <vPortEnterCritical+0x54>)
 8025006:	681b      	ldr	r3, [r3, #0]
 8025008:	3301      	adds	r3, #1
 802500a:	4a0d      	ldr	r2, [pc, #52]	; (8025040 <vPortEnterCritical+0x54>)
 802500c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 802500e:	4b0c      	ldr	r3, [pc, #48]	; (8025040 <vPortEnterCritical+0x54>)
 8025010:	681b      	ldr	r3, [r3, #0]
 8025012:	2b01      	cmp	r3, #1
 8025014:	d10e      	bne.n	8025034 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8025016:	4b0b      	ldr	r3, [pc, #44]	; (8025044 <vPortEnterCritical+0x58>)
 8025018:	681b      	ldr	r3, [r3, #0]
 802501a:	b2db      	uxtb	r3, r3
 802501c:	2b00      	cmp	r3, #0
 802501e:	d009      	beq.n	8025034 <vPortEnterCritical+0x48>
 8025020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025024:	f383 8811 	msr	BASEPRI, r3
 8025028:	f3bf 8f6f 	isb	sy
 802502c:	f3bf 8f4f 	dsb	sy
 8025030:	603b      	str	r3, [r7, #0]
 8025032:	e7fe      	b.n	8025032 <vPortEnterCritical+0x46>
	}
}
 8025034:	bf00      	nop
 8025036:	370c      	adds	r7, #12
 8025038:	46bd      	mov	sp, r7
 802503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802503e:	4770      	bx	lr
 8025040:	200006a4 	.word	0x200006a4
 8025044:	e000ed04 	.word	0xe000ed04

08025048 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8025048:	b480      	push	{r7}
 802504a:	b083      	sub	sp, #12
 802504c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 802504e:	4b11      	ldr	r3, [pc, #68]	; (8025094 <vPortExitCritical+0x4c>)
 8025050:	681b      	ldr	r3, [r3, #0]
 8025052:	2b00      	cmp	r3, #0
 8025054:	d109      	bne.n	802506a <vPortExitCritical+0x22>
 8025056:	f04f 0350 	mov.w	r3, #80	; 0x50
 802505a:	f383 8811 	msr	BASEPRI, r3
 802505e:	f3bf 8f6f 	isb	sy
 8025062:	f3bf 8f4f 	dsb	sy
 8025066:	607b      	str	r3, [r7, #4]
 8025068:	e7fe      	b.n	8025068 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 802506a:	4b0a      	ldr	r3, [pc, #40]	; (8025094 <vPortExitCritical+0x4c>)
 802506c:	681b      	ldr	r3, [r3, #0]
 802506e:	3b01      	subs	r3, #1
 8025070:	4a08      	ldr	r2, [pc, #32]	; (8025094 <vPortExitCritical+0x4c>)
 8025072:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8025074:	4b07      	ldr	r3, [pc, #28]	; (8025094 <vPortExitCritical+0x4c>)
 8025076:	681b      	ldr	r3, [r3, #0]
 8025078:	2b00      	cmp	r3, #0
 802507a:	d104      	bne.n	8025086 <vPortExitCritical+0x3e>
 802507c:	2300      	movs	r3, #0
 802507e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8025080:	683b      	ldr	r3, [r7, #0]
 8025082:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8025086:	bf00      	nop
 8025088:	370c      	adds	r7, #12
 802508a:	46bd      	mov	sp, r7
 802508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025090:	4770      	bx	lr
 8025092:	bf00      	nop
 8025094:	200006a4 	.word	0x200006a4
	...

080250a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80250a0:	f3ef 8009 	mrs	r0, PSP
 80250a4:	f3bf 8f6f 	isb	sy
 80250a8:	4b15      	ldr	r3, [pc, #84]	; (8025100 <pxCurrentTCBConst>)
 80250aa:	681a      	ldr	r2, [r3, #0]
 80250ac:	f01e 0f10 	tst.w	lr, #16
 80250b0:	bf08      	it	eq
 80250b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80250b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80250ba:	6010      	str	r0, [r2, #0]
 80250bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80250c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80250c4:	f380 8811 	msr	BASEPRI, r0
 80250c8:	f3bf 8f4f 	dsb	sy
 80250cc:	f3bf 8f6f 	isb	sy
 80250d0:	f7fe fcee 	bl	8023ab0 <vTaskSwitchContext>
 80250d4:	f04f 0000 	mov.w	r0, #0
 80250d8:	f380 8811 	msr	BASEPRI, r0
 80250dc:	bc09      	pop	{r0, r3}
 80250de:	6819      	ldr	r1, [r3, #0]
 80250e0:	6808      	ldr	r0, [r1, #0]
 80250e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80250e6:	f01e 0f10 	tst.w	lr, #16
 80250ea:	bf08      	it	eq
 80250ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80250f0:	f380 8809 	msr	PSP, r0
 80250f4:	f3bf 8f6f 	isb	sy
 80250f8:	4770      	bx	lr
 80250fa:	bf00      	nop
 80250fc:	f3af 8000 	nop.w

08025100 <pxCurrentTCBConst>:
 8025100:	20001c50 	.word	0x20001c50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8025104:	bf00      	nop
 8025106:	bf00      	nop

08025108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8025108:	b580      	push	{r7, lr}
 802510a:	b082      	sub	sp, #8
 802510c:	af00      	add	r7, sp, #0
	__asm volatile
 802510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025112:	f383 8811 	msr	BASEPRI, r3
 8025116:	f3bf 8f6f 	isb	sy
 802511a:	f3bf 8f4f 	dsb	sy
 802511e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8025120:	f7fe fc0e 	bl	8023940 <xTaskIncrementTick>
 8025124:	4603      	mov	r3, r0
 8025126:	2b00      	cmp	r3, #0
 8025128:	d003      	beq.n	8025132 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 802512a:	4b06      	ldr	r3, [pc, #24]	; (8025144 <SysTick_Handler+0x3c>)
 802512c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8025130:	601a      	str	r2, [r3, #0]
 8025132:	2300      	movs	r3, #0
 8025134:	603b      	str	r3, [r7, #0]
	__asm volatile
 8025136:	683b      	ldr	r3, [r7, #0]
 8025138:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 802513c:	bf00      	nop
 802513e:	3708      	adds	r7, #8
 8025140:	46bd      	mov	sp, r7
 8025142:	bd80      	pop	{r7, pc}
 8025144:	e000ed04 	.word	0xe000ed04

08025148 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8025148:	b480      	push	{r7}
 802514a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 802514c:	4b0b      	ldr	r3, [pc, #44]	; (802517c <vPortSetupTimerInterrupt+0x34>)
 802514e:	2200      	movs	r2, #0
 8025150:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8025152:	4b0b      	ldr	r3, [pc, #44]	; (8025180 <vPortSetupTimerInterrupt+0x38>)
 8025154:	2200      	movs	r2, #0
 8025156:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8025158:	4b0a      	ldr	r3, [pc, #40]	; (8025184 <vPortSetupTimerInterrupt+0x3c>)
 802515a:	681b      	ldr	r3, [r3, #0]
 802515c:	4a0a      	ldr	r2, [pc, #40]	; (8025188 <vPortSetupTimerInterrupt+0x40>)
 802515e:	fba2 2303 	umull	r2, r3, r2, r3
 8025162:	099b      	lsrs	r3, r3, #6
 8025164:	4a09      	ldr	r2, [pc, #36]	; (802518c <vPortSetupTimerInterrupt+0x44>)
 8025166:	3b01      	subs	r3, #1
 8025168:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 802516a:	4b04      	ldr	r3, [pc, #16]	; (802517c <vPortSetupTimerInterrupt+0x34>)
 802516c:	2207      	movs	r2, #7
 802516e:	601a      	str	r2, [r3, #0]
}
 8025170:	bf00      	nop
 8025172:	46bd      	mov	sp, r7
 8025174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025178:	4770      	bx	lr
 802517a:	bf00      	nop
 802517c:	e000e010 	.word	0xe000e010
 8025180:	e000e018 	.word	0xe000e018
 8025184:	20000698 	.word	0x20000698
 8025188:	10624dd3 	.word	0x10624dd3
 802518c:	e000e014 	.word	0xe000e014

08025190 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8025190:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80251a0 <vPortEnableVFP+0x10>
 8025194:	6801      	ldr	r1, [r0, #0]
 8025196:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802519a:	6001      	str	r1, [r0, #0]
 802519c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 802519e:	bf00      	nop
 80251a0:	e000ed88 	.word	0xe000ed88

080251a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80251a4:	b480      	push	{r7}
 80251a6:	b085      	sub	sp, #20
 80251a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80251aa:	f3ef 8305 	mrs	r3, IPSR
 80251ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80251b0:	68fb      	ldr	r3, [r7, #12]
 80251b2:	2b0f      	cmp	r3, #15
 80251b4:	d913      	bls.n	80251de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80251b6:	4a16      	ldr	r2, [pc, #88]	; (8025210 <vPortValidateInterruptPriority+0x6c>)
 80251b8:	68fb      	ldr	r3, [r7, #12]
 80251ba:	4413      	add	r3, r2
 80251bc:	781b      	ldrb	r3, [r3, #0]
 80251be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80251c0:	4b14      	ldr	r3, [pc, #80]	; (8025214 <vPortValidateInterruptPriority+0x70>)
 80251c2:	781b      	ldrb	r3, [r3, #0]
 80251c4:	7afa      	ldrb	r2, [r7, #11]
 80251c6:	429a      	cmp	r2, r3
 80251c8:	d209      	bcs.n	80251de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80251ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80251ce:	f383 8811 	msr	BASEPRI, r3
 80251d2:	f3bf 8f6f 	isb	sy
 80251d6:	f3bf 8f4f 	dsb	sy
 80251da:	607b      	str	r3, [r7, #4]
 80251dc:	e7fe      	b.n	80251dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80251de:	4b0e      	ldr	r3, [pc, #56]	; (8025218 <vPortValidateInterruptPriority+0x74>)
 80251e0:	681b      	ldr	r3, [r3, #0]
 80251e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80251e6:	4b0d      	ldr	r3, [pc, #52]	; (802521c <vPortValidateInterruptPriority+0x78>)
 80251e8:	681b      	ldr	r3, [r3, #0]
 80251ea:	429a      	cmp	r2, r3
 80251ec:	d909      	bls.n	8025202 <vPortValidateInterruptPriority+0x5e>
 80251ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80251f2:	f383 8811 	msr	BASEPRI, r3
 80251f6:	f3bf 8f6f 	isb	sy
 80251fa:	f3bf 8f4f 	dsb	sy
 80251fe:	603b      	str	r3, [r7, #0]
 8025200:	e7fe      	b.n	8025200 <vPortValidateInterruptPriority+0x5c>
	}
 8025202:	bf00      	nop
 8025204:	3714      	adds	r7, #20
 8025206:	46bd      	mov	sp, r7
 8025208:	f85d 7b04 	ldr.w	r7, [sp], #4
 802520c:	4770      	bx	lr
 802520e:	bf00      	nop
 8025210:	e000e3f0 	.word	0xe000e3f0
 8025214:	2000227c 	.word	0x2000227c
 8025218:	e000ed0c 	.word	0xe000ed0c
 802521c:	20002280 	.word	0x20002280

08025220 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8025220:	b580      	push	{r7, lr}
 8025222:	b08a      	sub	sp, #40	; 0x28
 8025224:	af00      	add	r7, sp, #0
 8025226:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8025228:	2300      	movs	r3, #0
 802522a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 802522c:	f7fe fabc 	bl	80237a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8025230:	4b57      	ldr	r3, [pc, #348]	; (8025390 <pvPortMalloc+0x170>)
 8025232:	681b      	ldr	r3, [r3, #0]
 8025234:	2b00      	cmp	r3, #0
 8025236:	d101      	bne.n	802523c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8025238:	f000 f90c 	bl	8025454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 802523c:	4b55      	ldr	r3, [pc, #340]	; (8025394 <pvPortMalloc+0x174>)
 802523e:	681a      	ldr	r2, [r3, #0]
 8025240:	687b      	ldr	r3, [r7, #4]
 8025242:	4013      	ands	r3, r2
 8025244:	2b00      	cmp	r3, #0
 8025246:	f040 808c 	bne.w	8025362 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 802524a:	687b      	ldr	r3, [r7, #4]
 802524c:	2b00      	cmp	r3, #0
 802524e:	d01c      	beq.n	802528a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8025250:	2208      	movs	r2, #8
 8025252:	687b      	ldr	r3, [r7, #4]
 8025254:	4413      	add	r3, r2
 8025256:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8025258:	687b      	ldr	r3, [r7, #4]
 802525a:	f003 0307 	and.w	r3, r3, #7
 802525e:	2b00      	cmp	r3, #0
 8025260:	d013      	beq.n	802528a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8025262:	687b      	ldr	r3, [r7, #4]
 8025264:	f023 0307 	bic.w	r3, r3, #7
 8025268:	3308      	adds	r3, #8
 802526a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 802526c:	687b      	ldr	r3, [r7, #4]
 802526e:	f003 0307 	and.w	r3, r3, #7
 8025272:	2b00      	cmp	r3, #0
 8025274:	d009      	beq.n	802528a <pvPortMalloc+0x6a>
 8025276:	f04f 0350 	mov.w	r3, #80	; 0x50
 802527a:	f383 8811 	msr	BASEPRI, r3
 802527e:	f3bf 8f6f 	isb	sy
 8025282:	f3bf 8f4f 	dsb	sy
 8025286:	617b      	str	r3, [r7, #20]
 8025288:	e7fe      	b.n	8025288 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 802528a:	687b      	ldr	r3, [r7, #4]
 802528c:	2b00      	cmp	r3, #0
 802528e:	d068      	beq.n	8025362 <pvPortMalloc+0x142>
 8025290:	4b41      	ldr	r3, [pc, #260]	; (8025398 <pvPortMalloc+0x178>)
 8025292:	681b      	ldr	r3, [r3, #0]
 8025294:	687a      	ldr	r2, [r7, #4]
 8025296:	429a      	cmp	r2, r3
 8025298:	d863      	bhi.n	8025362 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 802529a:	4b40      	ldr	r3, [pc, #256]	; (802539c <pvPortMalloc+0x17c>)
 802529c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 802529e:	4b3f      	ldr	r3, [pc, #252]	; (802539c <pvPortMalloc+0x17c>)
 80252a0:	681b      	ldr	r3, [r3, #0]
 80252a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80252a4:	e004      	b.n	80252b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80252a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80252a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80252aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80252ac:	681b      	ldr	r3, [r3, #0]
 80252ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80252b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80252b2:	685b      	ldr	r3, [r3, #4]
 80252b4:	687a      	ldr	r2, [r7, #4]
 80252b6:	429a      	cmp	r2, r3
 80252b8:	d903      	bls.n	80252c2 <pvPortMalloc+0xa2>
 80252ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80252bc:	681b      	ldr	r3, [r3, #0]
 80252be:	2b00      	cmp	r3, #0
 80252c0:	d1f1      	bne.n	80252a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80252c2:	4b33      	ldr	r3, [pc, #204]	; (8025390 <pvPortMalloc+0x170>)
 80252c4:	681b      	ldr	r3, [r3, #0]
 80252c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80252c8:	429a      	cmp	r2, r3
 80252ca:	d04a      	beq.n	8025362 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80252cc:	6a3b      	ldr	r3, [r7, #32]
 80252ce:	681b      	ldr	r3, [r3, #0]
 80252d0:	2208      	movs	r2, #8
 80252d2:	4413      	add	r3, r2
 80252d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80252d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80252d8:	681a      	ldr	r2, [r3, #0]
 80252da:	6a3b      	ldr	r3, [r7, #32]
 80252dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80252de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80252e0:	685a      	ldr	r2, [r3, #4]
 80252e2:	687b      	ldr	r3, [r7, #4]
 80252e4:	1ad2      	subs	r2, r2, r3
 80252e6:	2308      	movs	r3, #8
 80252e8:	005b      	lsls	r3, r3, #1
 80252ea:	429a      	cmp	r2, r3
 80252ec:	d91e      	bls.n	802532c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80252ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80252f0:	687b      	ldr	r3, [r7, #4]
 80252f2:	4413      	add	r3, r2
 80252f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80252f6:	69bb      	ldr	r3, [r7, #24]
 80252f8:	f003 0307 	and.w	r3, r3, #7
 80252fc:	2b00      	cmp	r3, #0
 80252fe:	d009      	beq.n	8025314 <pvPortMalloc+0xf4>
 8025300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025304:	f383 8811 	msr	BASEPRI, r3
 8025308:	f3bf 8f6f 	isb	sy
 802530c:	f3bf 8f4f 	dsb	sy
 8025310:	613b      	str	r3, [r7, #16]
 8025312:	e7fe      	b.n	8025312 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8025314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025316:	685a      	ldr	r2, [r3, #4]
 8025318:	687b      	ldr	r3, [r7, #4]
 802531a:	1ad2      	subs	r2, r2, r3
 802531c:	69bb      	ldr	r3, [r7, #24]
 802531e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8025320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025322:	687a      	ldr	r2, [r7, #4]
 8025324:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8025326:	69b8      	ldr	r0, [r7, #24]
 8025328:	f000 f8f6 	bl	8025518 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 802532c:	4b1a      	ldr	r3, [pc, #104]	; (8025398 <pvPortMalloc+0x178>)
 802532e:	681a      	ldr	r2, [r3, #0]
 8025330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025332:	685b      	ldr	r3, [r3, #4]
 8025334:	1ad3      	subs	r3, r2, r3
 8025336:	4a18      	ldr	r2, [pc, #96]	; (8025398 <pvPortMalloc+0x178>)
 8025338:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 802533a:	4b17      	ldr	r3, [pc, #92]	; (8025398 <pvPortMalloc+0x178>)
 802533c:	681a      	ldr	r2, [r3, #0]
 802533e:	4b18      	ldr	r3, [pc, #96]	; (80253a0 <pvPortMalloc+0x180>)
 8025340:	681b      	ldr	r3, [r3, #0]
 8025342:	429a      	cmp	r2, r3
 8025344:	d203      	bcs.n	802534e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8025346:	4b14      	ldr	r3, [pc, #80]	; (8025398 <pvPortMalloc+0x178>)
 8025348:	681b      	ldr	r3, [r3, #0]
 802534a:	4a15      	ldr	r2, [pc, #84]	; (80253a0 <pvPortMalloc+0x180>)
 802534c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 802534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025350:	685a      	ldr	r2, [r3, #4]
 8025352:	4b10      	ldr	r3, [pc, #64]	; (8025394 <pvPortMalloc+0x174>)
 8025354:	681b      	ldr	r3, [r3, #0]
 8025356:	431a      	orrs	r2, r3
 8025358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802535a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 802535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802535e:	2200      	movs	r2, #0
 8025360:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8025362:	f7fe fa2f 	bl	80237c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8025366:	69fb      	ldr	r3, [r7, #28]
 8025368:	f003 0307 	and.w	r3, r3, #7
 802536c:	2b00      	cmp	r3, #0
 802536e:	d009      	beq.n	8025384 <pvPortMalloc+0x164>
 8025370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025374:	f383 8811 	msr	BASEPRI, r3
 8025378:	f3bf 8f6f 	isb	sy
 802537c:	f3bf 8f4f 	dsb	sy
 8025380:	60fb      	str	r3, [r7, #12]
 8025382:	e7fe      	b.n	8025382 <pvPortMalloc+0x162>
	return pvReturn;
 8025384:	69fb      	ldr	r3, [r7, #28]
}
 8025386:	4618      	mov	r0, r3
 8025388:	3728      	adds	r7, #40	; 0x28
 802538a:	46bd      	mov	sp, r7
 802538c:	bd80      	pop	{r7, pc}
 802538e:	bf00      	nop
 8025390:	200097bc 	.word	0x200097bc
 8025394:	200097c8 	.word	0x200097c8
 8025398:	200097c0 	.word	0x200097c0
 802539c:	200097b4 	.word	0x200097b4
 80253a0:	200097c4 	.word	0x200097c4

080253a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80253a4:	b580      	push	{r7, lr}
 80253a6:	b086      	sub	sp, #24
 80253a8:	af00      	add	r7, sp, #0
 80253aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80253ac:	687b      	ldr	r3, [r7, #4]
 80253ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80253b0:	687b      	ldr	r3, [r7, #4]
 80253b2:	2b00      	cmp	r3, #0
 80253b4:	d046      	beq.n	8025444 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80253b6:	2308      	movs	r3, #8
 80253b8:	425b      	negs	r3, r3
 80253ba:	697a      	ldr	r2, [r7, #20]
 80253bc:	4413      	add	r3, r2
 80253be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80253c0:	697b      	ldr	r3, [r7, #20]
 80253c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80253c4:	693b      	ldr	r3, [r7, #16]
 80253c6:	685a      	ldr	r2, [r3, #4]
 80253c8:	4b20      	ldr	r3, [pc, #128]	; (802544c <vPortFree+0xa8>)
 80253ca:	681b      	ldr	r3, [r3, #0]
 80253cc:	4013      	ands	r3, r2
 80253ce:	2b00      	cmp	r3, #0
 80253d0:	d109      	bne.n	80253e6 <vPortFree+0x42>
 80253d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80253d6:	f383 8811 	msr	BASEPRI, r3
 80253da:	f3bf 8f6f 	isb	sy
 80253de:	f3bf 8f4f 	dsb	sy
 80253e2:	60fb      	str	r3, [r7, #12]
 80253e4:	e7fe      	b.n	80253e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80253e6:	693b      	ldr	r3, [r7, #16]
 80253e8:	681b      	ldr	r3, [r3, #0]
 80253ea:	2b00      	cmp	r3, #0
 80253ec:	d009      	beq.n	8025402 <vPortFree+0x5e>
 80253ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80253f2:	f383 8811 	msr	BASEPRI, r3
 80253f6:	f3bf 8f6f 	isb	sy
 80253fa:	f3bf 8f4f 	dsb	sy
 80253fe:	60bb      	str	r3, [r7, #8]
 8025400:	e7fe      	b.n	8025400 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8025402:	693b      	ldr	r3, [r7, #16]
 8025404:	685a      	ldr	r2, [r3, #4]
 8025406:	4b11      	ldr	r3, [pc, #68]	; (802544c <vPortFree+0xa8>)
 8025408:	681b      	ldr	r3, [r3, #0]
 802540a:	4013      	ands	r3, r2
 802540c:	2b00      	cmp	r3, #0
 802540e:	d019      	beq.n	8025444 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8025410:	693b      	ldr	r3, [r7, #16]
 8025412:	681b      	ldr	r3, [r3, #0]
 8025414:	2b00      	cmp	r3, #0
 8025416:	d115      	bne.n	8025444 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8025418:	693b      	ldr	r3, [r7, #16]
 802541a:	685a      	ldr	r2, [r3, #4]
 802541c:	4b0b      	ldr	r3, [pc, #44]	; (802544c <vPortFree+0xa8>)
 802541e:	681b      	ldr	r3, [r3, #0]
 8025420:	43db      	mvns	r3, r3
 8025422:	401a      	ands	r2, r3
 8025424:	693b      	ldr	r3, [r7, #16]
 8025426:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8025428:	f7fe f9be 	bl	80237a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 802542c:	693b      	ldr	r3, [r7, #16]
 802542e:	685a      	ldr	r2, [r3, #4]
 8025430:	4b07      	ldr	r3, [pc, #28]	; (8025450 <vPortFree+0xac>)
 8025432:	681b      	ldr	r3, [r3, #0]
 8025434:	4413      	add	r3, r2
 8025436:	4a06      	ldr	r2, [pc, #24]	; (8025450 <vPortFree+0xac>)
 8025438:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 802543a:	6938      	ldr	r0, [r7, #16]
 802543c:	f000 f86c 	bl	8025518 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8025440:	f7fe f9c0 	bl	80237c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8025444:	bf00      	nop
 8025446:	3718      	adds	r7, #24
 8025448:	46bd      	mov	sp, r7
 802544a:	bd80      	pop	{r7, pc}
 802544c:	200097c8 	.word	0x200097c8
 8025450:	200097c0 	.word	0x200097c0

08025454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8025454:	b480      	push	{r7}
 8025456:	b085      	sub	sp, #20
 8025458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 802545a:	f247 5330 	movw	r3, #30000	; 0x7530
 802545e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8025460:	4b27      	ldr	r3, [pc, #156]	; (8025500 <prvHeapInit+0xac>)
 8025462:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8025464:	68fb      	ldr	r3, [r7, #12]
 8025466:	f003 0307 	and.w	r3, r3, #7
 802546a:	2b00      	cmp	r3, #0
 802546c:	d00c      	beq.n	8025488 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 802546e:	68fb      	ldr	r3, [r7, #12]
 8025470:	3307      	adds	r3, #7
 8025472:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8025474:	68fb      	ldr	r3, [r7, #12]
 8025476:	f023 0307 	bic.w	r3, r3, #7
 802547a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 802547c:	68ba      	ldr	r2, [r7, #8]
 802547e:	68fb      	ldr	r3, [r7, #12]
 8025480:	1ad3      	subs	r3, r2, r3
 8025482:	4a1f      	ldr	r2, [pc, #124]	; (8025500 <prvHeapInit+0xac>)
 8025484:	4413      	add	r3, r2
 8025486:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8025488:	68fb      	ldr	r3, [r7, #12]
 802548a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 802548c:	4a1d      	ldr	r2, [pc, #116]	; (8025504 <prvHeapInit+0xb0>)
 802548e:	687b      	ldr	r3, [r7, #4]
 8025490:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8025492:	4b1c      	ldr	r3, [pc, #112]	; (8025504 <prvHeapInit+0xb0>)
 8025494:	2200      	movs	r2, #0
 8025496:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8025498:	687b      	ldr	r3, [r7, #4]
 802549a:	68ba      	ldr	r2, [r7, #8]
 802549c:	4413      	add	r3, r2
 802549e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80254a0:	2208      	movs	r2, #8
 80254a2:	68fb      	ldr	r3, [r7, #12]
 80254a4:	1a9b      	subs	r3, r3, r2
 80254a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80254a8:	68fb      	ldr	r3, [r7, #12]
 80254aa:	f023 0307 	bic.w	r3, r3, #7
 80254ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80254b0:	68fb      	ldr	r3, [r7, #12]
 80254b2:	4a15      	ldr	r2, [pc, #84]	; (8025508 <prvHeapInit+0xb4>)
 80254b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80254b6:	4b14      	ldr	r3, [pc, #80]	; (8025508 <prvHeapInit+0xb4>)
 80254b8:	681b      	ldr	r3, [r3, #0]
 80254ba:	2200      	movs	r2, #0
 80254bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80254be:	4b12      	ldr	r3, [pc, #72]	; (8025508 <prvHeapInit+0xb4>)
 80254c0:	681b      	ldr	r3, [r3, #0]
 80254c2:	2200      	movs	r2, #0
 80254c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80254c6:	687b      	ldr	r3, [r7, #4]
 80254c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80254ca:	683b      	ldr	r3, [r7, #0]
 80254cc:	68fa      	ldr	r2, [r7, #12]
 80254ce:	1ad2      	subs	r2, r2, r3
 80254d0:	683b      	ldr	r3, [r7, #0]
 80254d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80254d4:	4b0c      	ldr	r3, [pc, #48]	; (8025508 <prvHeapInit+0xb4>)
 80254d6:	681a      	ldr	r2, [r3, #0]
 80254d8:	683b      	ldr	r3, [r7, #0]
 80254da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80254dc:	683b      	ldr	r3, [r7, #0]
 80254de:	685b      	ldr	r3, [r3, #4]
 80254e0:	4a0a      	ldr	r2, [pc, #40]	; (802550c <prvHeapInit+0xb8>)
 80254e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80254e4:	683b      	ldr	r3, [r7, #0]
 80254e6:	685b      	ldr	r3, [r3, #4]
 80254e8:	4a09      	ldr	r2, [pc, #36]	; (8025510 <prvHeapInit+0xbc>)
 80254ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80254ec:	4b09      	ldr	r3, [pc, #36]	; (8025514 <prvHeapInit+0xc0>)
 80254ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80254f2:	601a      	str	r2, [r3, #0]
}
 80254f4:	bf00      	nop
 80254f6:	3714      	adds	r7, #20
 80254f8:	46bd      	mov	sp, r7
 80254fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254fe:	4770      	bx	lr
 8025500:	20002284 	.word	0x20002284
 8025504:	200097b4 	.word	0x200097b4
 8025508:	200097bc 	.word	0x200097bc
 802550c:	200097c4 	.word	0x200097c4
 8025510:	200097c0 	.word	0x200097c0
 8025514:	200097c8 	.word	0x200097c8

08025518 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8025518:	b480      	push	{r7}
 802551a:	b085      	sub	sp, #20
 802551c:	af00      	add	r7, sp, #0
 802551e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8025520:	4b28      	ldr	r3, [pc, #160]	; (80255c4 <prvInsertBlockIntoFreeList+0xac>)
 8025522:	60fb      	str	r3, [r7, #12]
 8025524:	e002      	b.n	802552c <prvInsertBlockIntoFreeList+0x14>
 8025526:	68fb      	ldr	r3, [r7, #12]
 8025528:	681b      	ldr	r3, [r3, #0]
 802552a:	60fb      	str	r3, [r7, #12]
 802552c:	68fb      	ldr	r3, [r7, #12]
 802552e:	681b      	ldr	r3, [r3, #0]
 8025530:	687a      	ldr	r2, [r7, #4]
 8025532:	429a      	cmp	r2, r3
 8025534:	d8f7      	bhi.n	8025526 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8025536:	68fb      	ldr	r3, [r7, #12]
 8025538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 802553a:	68fb      	ldr	r3, [r7, #12]
 802553c:	685b      	ldr	r3, [r3, #4]
 802553e:	68ba      	ldr	r2, [r7, #8]
 8025540:	4413      	add	r3, r2
 8025542:	687a      	ldr	r2, [r7, #4]
 8025544:	429a      	cmp	r2, r3
 8025546:	d108      	bne.n	802555a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8025548:	68fb      	ldr	r3, [r7, #12]
 802554a:	685a      	ldr	r2, [r3, #4]
 802554c:	687b      	ldr	r3, [r7, #4]
 802554e:	685b      	ldr	r3, [r3, #4]
 8025550:	441a      	add	r2, r3
 8025552:	68fb      	ldr	r3, [r7, #12]
 8025554:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8025556:	68fb      	ldr	r3, [r7, #12]
 8025558:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 802555a:	687b      	ldr	r3, [r7, #4]
 802555c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 802555e:	687b      	ldr	r3, [r7, #4]
 8025560:	685b      	ldr	r3, [r3, #4]
 8025562:	68ba      	ldr	r2, [r7, #8]
 8025564:	441a      	add	r2, r3
 8025566:	68fb      	ldr	r3, [r7, #12]
 8025568:	681b      	ldr	r3, [r3, #0]
 802556a:	429a      	cmp	r2, r3
 802556c:	d118      	bne.n	80255a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 802556e:	68fb      	ldr	r3, [r7, #12]
 8025570:	681a      	ldr	r2, [r3, #0]
 8025572:	4b15      	ldr	r3, [pc, #84]	; (80255c8 <prvInsertBlockIntoFreeList+0xb0>)
 8025574:	681b      	ldr	r3, [r3, #0]
 8025576:	429a      	cmp	r2, r3
 8025578:	d00d      	beq.n	8025596 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 802557a:	687b      	ldr	r3, [r7, #4]
 802557c:	685a      	ldr	r2, [r3, #4]
 802557e:	68fb      	ldr	r3, [r7, #12]
 8025580:	681b      	ldr	r3, [r3, #0]
 8025582:	685b      	ldr	r3, [r3, #4]
 8025584:	441a      	add	r2, r3
 8025586:	687b      	ldr	r3, [r7, #4]
 8025588:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 802558a:	68fb      	ldr	r3, [r7, #12]
 802558c:	681b      	ldr	r3, [r3, #0]
 802558e:	681a      	ldr	r2, [r3, #0]
 8025590:	687b      	ldr	r3, [r7, #4]
 8025592:	601a      	str	r2, [r3, #0]
 8025594:	e008      	b.n	80255a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8025596:	4b0c      	ldr	r3, [pc, #48]	; (80255c8 <prvInsertBlockIntoFreeList+0xb0>)
 8025598:	681a      	ldr	r2, [r3, #0]
 802559a:	687b      	ldr	r3, [r7, #4]
 802559c:	601a      	str	r2, [r3, #0]
 802559e:	e003      	b.n	80255a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80255a0:	68fb      	ldr	r3, [r7, #12]
 80255a2:	681a      	ldr	r2, [r3, #0]
 80255a4:	687b      	ldr	r3, [r7, #4]
 80255a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80255a8:	68fa      	ldr	r2, [r7, #12]
 80255aa:	687b      	ldr	r3, [r7, #4]
 80255ac:	429a      	cmp	r2, r3
 80255ae:	d002      	beq.n	80255b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80255b0:	68fb      	ldr	r3, [r7, #12]
 80255b2:	687a      	ldr	r2, [r7, #4]
 80255b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80255b6:	bf00      	nop
 80255b8:	3714      	adds	r7, #20
 80255ba:	46bd      	mov	sp, r7
 80255bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255c0:	4770      	bx	lr
 80255c2:	bf00      	nop
 80255c4:	200097b4 	.word	0x200097b4
 80255c8:	200097bc 	.word	0x200097bc
 80255cc:	00000000 	.word	0x00000000

080255d0 <cos>:
 80255d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80255d2:	ec51 0b10 	vmov	r0, r1, d0
 80255d6:	4a1e      	ldr	r2, [pc, #120]	; (8025650 <cos+0x80>)
 80255d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80255dc:	4293      	cmp	r3, r2
 80255de:	dc06      	bgt.n	80255ee <cos+0x1e>
 80255e0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8025648 <cos+0x78>
 80255e4:	f002 f970 	bl	80278c8 <__kernel_cos>
 80255e8:	ec51 0b10 	vmov	r0, r1, d0
 80255ec:	e007      	b.n	80255fe <cos+0x2e>
 80255ee:	4a19      	ldr	r2, [pc, #100]	; (8025654 <cos+0x84>)
 80255f0:	4293      	cmp	r3, r2
 80255f2:	dd09      	ble.n	8025608 <cos+0x38>
 80255f4:	ee10 2a10 	vmov	r2, s0
 80255f8:	460b      	mov	r3, r1
 80255fa:	f7da fe4d 	bl	8000298 <__aeabi_dsub>
 80255fe:	ec41 0b10 	vmov	d0, r0, r1
 8025602:	b005      	add	sp, #20
 8025604:	f85d fb04 	ldr.w	pc, [sp], #4
 8025608:	4668      	mov	r0, sp
 802560a:	f001 fd8d 	bl	8027128 <__ieee754_rem_pio2>
 802560e:	f000 0003 	and.w	r0, r0, #3
 8025612:	2801      	cmp	r0, #1
 8025614:	ed9d 1b02 	vldr	d1, [sp, #8]
 8025618:	ed9d 0b00 	vldr	d0, [sp]
 802561c:	d007      	beq.n	802562e <cos+0x5e>
 802561e:	2802      	cmp	r0, #2
 8025620:	d00e      	beq.n	8025640 <cos+0x70>
 8025622:	2800      	cmp	r0, #0
 8025624:	d0de      	beq.n	80255e4 <cos+0x14>
 8025626:	2001      	movs	r0, #1
 8025628:	f002 fd56 	bl	80280d8 <__kernel_sin>
 802562c:	e7dc      	b.n	80255e8 <cos+0x18>
 802562e:	f002 fd53 	bl	80280d8 <__kernel_sin>
 8025632:	ec53 2b10 	vmov	r2, r3, d0
 8025636:	ee10 0a10 	vmov	r0, s0
 802563a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802563e:	e7de      	b.n	80255fe <cos+0x2e>
 8025640:	f002 f942 	bl	80278c8 <__kernel_cos>
 8025644:	e7f5      	b.n	8025632 <cos+0x62>
 8025646:	bf00      	nop
	...
 8025650:	3fe921fb 	.word	0x3fe921fb
 8025654:	7fefffff 	.word	0x7fefffff

08025658 <floor>:
 8025658:	ec51 0b10 	vmov	r0, r1, d0
 802565c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025660:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8025664:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8025668:	2e13      	cmp	r6, #19
 802566a:	460c      	mov	r4, r1
 802566c:	ee10 5a10 	vmov	r5, s0
 8025670:	4680      	mov	r8, r0
 8025672:	dc34      	bgt.n	80256de <floor+0x86>
 8025674:	2e00      	cmp	r6, #0
 8025676:	da16      	bge.n	80256a6 <floor+0x4e>
 8025678:	a335      	add	r3, pc, #212	; (adr r3, 8025750 <floor+0xf8>)
 802567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802567e:	f7da fe0d 	bl	800029c <__adddf3>
 8025682:	2200      	movs	r2, #0
 8025684:	2300      	movs	r3, #0
 8025686:	f7db fa4f 	bl	8000b28 <__aeabi_dcmpgt>
 802568a:	b148      	cbz	r0, 80256a0 <floor+0x48>
 802568c:	2c00      	cmp	r4, #0
 802568e:	da59      	bge.n	8025744 <floor+0xec>
 8025690:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8025694:	4a30      	ldr	r2, [pc, #192]	; (8025758 <floor+0x100>)
 8025696:	432b      	orrs	r3, r5
 8025698:	2500      	movs	r5, #0
 802569a:	42ab      	cmp	r3, r5
 802569c:	bf18      	it	ne
 802569e:	4614      	movne	r4, r2
 80256a0:	4621      	mov	r1, r4
 80256a2:	4628      	mov	r0, r5
 80256a4:	e025      	b.n	80256f2 <floor+0x9a>
 80256a6:	4f2d      	ldr	r7, [pc, #180]	; (802575c <floor+0x104>)
 80256a8:	4137      	asrs	r7, r6
 80256aa:	ea01 0307 	and.w	r3, r1, r7
 80256ae:	4303      	orrs	r3, r0
 80256b0:	d01f      	beq.n	80256f2 <floor+0x9a>
 80256b2:	a327      	add	r3, pc, #156	; (adr r3, 8025750 <floor+0xf8>)
 80256b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80256b8:	f7da fdf0 	bl	800029c <__adddf3>
 80256bc:	2200      	movs	r2, #0
 80256be:	2300      	movs	r3, #0
 80256c0:	f7db fa32 	bl	8000b28 <__aeabi_dcmpgt>
 80256c4:	2800      	cmp	r0, #0
 80256c6:	d0eb      	beq.n	80256a0 <floor+0x48>
 80256c8:	2c00      	cmp	r4, #0
 80256ca:	bfbe      	ittt	lt
 80256cc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80256d0:	fa43 f606 	asrlt.w	r6, r3, r6
 80256d4:	19a4      	addlt	r4, r4, r6
 80256d6:	ea24 0407 	bic.w	r4, r4, r7
 80256da:	2500      	movs	r5, #0
 80256dc:	e7e0      	b.n	80256a0 <floor+0x48>
 80256de:	2e33      	cmp	r6, #51	; 0x33
 80256e0:	dd0b      	ble.n	80256fa <floor+0xa2>
 80256e2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80256e6:	d104      	bne.n	80256f2 <floor+0x9a>
 80256e8:	ee10 2a10 	vmov	r2, s0
 80256ec:	460b      	mov	r3, r1
 80256ee:	f7da fdd5 	bl	800029c <__adddf3>
 80256f2:	ec41 0b10 	vmov	d0, r0, r1
 80256f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80256fa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80256fe:	f04f 33ff 	mov.w	r3, #4294967295
 8025702:	fa23 f707 	lsr.w	r7, r3, r7
 8025706:	4207      	tst	r7, r0
 8025708:	d0f3      	beq.n	80256f2 <floor+0x9a>
 802570a:	a311      	add	r3, pc, #68	; (adr r3, 8025750 <floor+0xf8>)
 802570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025710:	f7da fdc4 	bl	800029c <__adddf3>
 8025714:	2200      	movs	r2, #0
 8025716:	2300      	movs	r3, #0
 8025718:	f7db fa06 	bl	8000b28 <__aeabi_dcmpgt>
 802571c:	2800      	cmp	r0, #0
 802571e:	d0bf      	beq.n	80256a0 <floor+0x48>
 8025720:	2c00      	cmp	r4, #0
 8025722:	da02      	bge.n	802572a <floor+0xd2>
 8025724:	2e14      	cmp	r6, #20
 8025726:	d103      	bne.n	8025730 <floor+0xd8>
 8025728:	3401      	adds	r4, #1
 802572a:	ea25 0507 	bic.w	r5, r5, r7
 802572e:	e7b7      	b.n	80256a0 <floor+0x48>
 8025730:	2301      	movs	r3, #1
 8025732:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8025736:	fa03 f606 	lsl.w	r6, r3, r6
 802573a:	4435      	add	r5, r6
 802573c:	4545      	cmp	r5, r8
 802573e:	bf38      	it	cc
 8025740:	18e4      	addcc	r4, r4, r3
 8025742:	e7f2      	b.n	802572a <floor+0xd2>
 8025744:	2500      	movs	r5, #0
 8025746:	462c      	mov	r4, r5
 8025748:	e7aa      	b.n	80256a0 <floor+0x48>
 802574a:	bf00      	nop
 802574c:	f3af 8000 	nop.w
 8025750:	8800759c 	.word	0x8800759c
 8025754:	7e37e43c 	.word	0x7e37e43c
 8025758:	bff00000 	.word	0xbff00000
 802575c:	000fffff 	.word	0x000fffff

08025760 <sin>:
 8025760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025762:	ec51 0b10 	vmov	r0, r1, d0
 8025766:	4a20      	ldr	r2, [pc, #128]	; (80257e8 <sin+0x88>)
 8025768:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802576c:	4293      	cmp	r3, r2
 802576e:	dc07      	bgt.n	8025780 <sin+0x20>
 8025770:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80257e0 <sin+0x80>
 8025774:	2000      	movs	r0, #0
 8025776:	f002 fcaf 	bl	80280d8 <__kernel_sin>
 802577a:	ec51 0b10 	vmov	r0, r1, d0
 802577e:	e007      	b.n	8025790 <sin+0x30>
 8025780:	4a1a      	ldr	r2, [pc, #104]	; (80257ec <sin+0x8c>)
 8025782:	4293      	cmp	r3, r2
 8025784:	dd09      	ble.n	802579a <sin+0x3a>
 8025786:	ee10 2a10 	vmov	r2, s0
 802578a:	460b      	mov	r3, r1
 802578c:	f7da fd84 	bl	8000298 <__aeabi_dsub>
 8025790:	ec41 0b10 	vmov	d0, r0, r1
 8025794:	b005      	add	sp, #20
 8025796:	f85d fb04 	ldr.w	pc, [sp], #4
 802579a:	4668      	mov	r0, sp
 802579c:	f001 fcc4 	bl	8027128 <__ieee754_rem_pio2>
 80257a0:	f000 0003 	and.w	r0, r0, #3
 80257a4:	2801      	cmp	r0, #1
 80257a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80257aa:	ed9d 0b00 	vldr	d0, [sp]
 80257ae:	d004      	beq.n	80257ba <sin+0x5a>
 80257b0:	2802      	cmp	r0, #2
 80257b2:	d005      	beq.n	80257c0 <sin+0x60>
 80257b4:	b970      	cbnz	r0, 80257d4 <sin+0x74>
 80257b6:	2001      	movs	r0, #1
 80257b8:	e7dd      	b.n	8025776 <sin+0x16>
 80257ba:	f002 f885 	bl	80278c8 <__kernel_cos>
 80257be:	e7dc      	b.n	802577a <sin+0x1a>
 80257c0:	2001      	movs	r0, #1
 80257c2:	f002 fc89 	bl	80280d8 <__kernel_sin>
 80257c6:	ec53 2b10 	vmov	r2, r3, d0
 80257ca:	ee10 0a10 	vmov	r0, s0
 80257ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80257d2:	e7dd      	b.n	8025790 <sin+0x30>
 80257d4:	f002 f878 	bl	80278c8 <__kernel_cos>
 80257d8:	e7f5      	b.n	80257c6 <sin+0x66>
 80257da:	bf00      	nop
 80257dc:	f3af 8000 	nop.w
	...
 80257e8:	3fe921fb 	.word	0x3fe921fb
 80257ec:	7fefffff 	.word	0x7fefffff

080257f0 <ceilf>:
 80257f0:	ee10 3a10 	vmov	r3, s0
 80257f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80257f8:	0dca      	lsrs	r2, r1, #23
 80257fa:	3a7f      	subs	r2, #127	; 0x7f
 80257fc:	2a16      	cmp	r2, #22
 80257fe:	dc2a      	bgt.n	8025856 <ceilf+0x66>
 8025800:	2a00      	cmp	r2, #0
 8025802:	da11      	bge.n	8025828 <ceilf+0x38>
 8025804:	eddf 7a18 	vldr	s15, [pc, #96]	; 8025868 <ceilf+0x78>
 8025808:	ee30 0a27 	vadd.f32	s0, s0, s15
 802580c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025814:	dd05      	ble.n	8025822 <ceilf+0x32>
 8025816:	2b00      	cmp	r3, #0
 8025818:	db23      	blt.n	8025862 <ceilf+0x72>
 802581a:	2900      	cmp	r1, #0
 802581c:	bf18      	it	ne
 802581e:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8025822:	ee00 3a10 	vmov	s0, r3
 8025826:	4770      	bx	lr
 8025828:	4910      	ldr	r1, [pc, #64]	; (802586c <ceilf+0x7c>)
 802582a:	4111      	asrs	r1, r2
 802582c:	420b      	tst	r3, r1
 802582e:	d0fa      	beq.n	8025826 <ceilf+0x36>
 8025830:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8025868 <ceilf+0x78>
 8025834:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025838:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802583c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025840:	ddef      	ble.n	8025822 <ceilf+0x32>
 8025842:	2b00      	cmp	r3, #0
 8025844:	bfc2      	ittt	gt
 8025846:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 802584a:	fa40 f202 	asrgt.w	r2, r0, r2
 802584e:	189b      	addgt	r3, r3, r2
 8025850:	ea23 0301 	bic.w	r3, r3, r1
 8025854:	e7e5      	b.n	8025822 <ceilf+0x32>
 8025856:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802585a:	d3e4      	bcc.n	8025826 <ceilf+0x36>
 802585c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8025860:	4770      	bx	lr
 8025862:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8025866:	e7dc      	b.n	8025822 <ceilf+0x32>
 8025868:	7149f2ca 	.word	0x7149f2ca
 802586c:	007fffff 	.word	0x007fffff

08025870 <cosf>:
 8025870:	ee10 3a10 	vmov	r3, s0
 8025874:	b507      	push	{r0, r1, r2, lr}
 8025876:	4a1c      	ldr	r2, [pc, #112]	; (80258e8 <cosf+0x78>)
 8025878:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802587c:	4293      	cmp	r3, r2
 802587e:	dc04      	bgt.n	802588a <cosf+0x1a>
 8025880:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80258ec <cosf+0x7c>
 8025884:	f002 fce2 	bl	802824c <__kernel_cosf>
 8025888:	e004      	b.n	8025894 <cosf+0x24>
 802588a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802588e:	db04      	blt.n	802589a <cosf+0x2a>
 8025890:	ee30 0a40 	vsub.f32	s0, s0, s0
 8025894:	b003      	add	sp, #12
 8025896:	f85d fb04 	ldr.w	pc, [sp], #4
 802589a:	4668      	mov	r0, sp
 802589c:	f001 fee6 	bl	802766c <__ieee754_rem_pio2f>
 80258a0:	f000 0003 	and.w	r0, r0, #3
 80258a4:	2801      	cmp	r0, #1
 80258a6:	d007      	beq.n	80258b8 <cosf+0x48>
 80258a8:	2802      	cmp	r0, #2
 80258aa:	d00e      	beq.n	80258ca <cosf+0x5a>
 80258ac:	b9a0      	cbnz	r0, 80258d8 <cosf+0x68>
 80258ae:	eddd 0a01 	vldr	s1, [sp, #4]
 80258b2:	ed9d 0a00 	vldr	s0, [sp]
 80258b6:	e7e5      	b.n	8025884 <cosf+0x14>
 80258b8:	eddd 0a01 	vldr	s1, [sp, #4]
 80258bc:	ed9d 0a00 	vldr	s0, [sp]
 80258c0:	f002 ffa4 	bl	802880c <__kernel_sinf>
 80258c4:	eeb1 0a40 	vneg.f32	s0, s0
 80258c8:	e7e4      	b.n	8025894 <cosf+0x24>
 80258ca:	eddd 0a01 	vldr	s1, [sp, #4]
 80258ce:	ed9d 0a00 	vldr	s0, [sp]
 80258d2:	f002 fcbb 	bl	802824c <__kernel_cosf>
 80258d6:	e7f5      	b.n	80258c4 <cosf+0x54>
 80258d8:	2001      	movs	r0, #1
 80258da:	eddd 0a01 	vldr	s1, [sp, #4]
 80258de:	ed9d 0a00 	vldr	s0, [sp]
 80258e2:	f002 ff93 	bl	802880c <__kernel_sinf>
 80258e6:	e7d5      	b.n	8025894 <cosf+0x24>
 80258e8:	3f490fd8 	.word	0x3f490fd8
 80258ec:	00000000 	.word	0x00000000

080258f0 <floorf>:
 80258f0:	ee10 3a10 	vmov	r3, s0
 80258f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80258f8:	0dca      	lsrs	r2, r1, #23
 80258fa:	3a7f      	subs	r2, #127	; 0x7f
 80258fc:	2a16      	cmp	r2, #22
 80258fe:	dc2a      	bgt.n	8025956 <floorf+0x66>
 8025900:	2a00      	cmp	r2, #0
 8025902:	da11      	bge.n	8025928 <floorf+0x38>
 8025904:	eddf 7a18 	vldr	s15, [pc, #96]	; 8025968 <floorf+0x78>
 8025908:	ee30 0a27 	vadd.f32	s0, s0, s15
 802590c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025914:	dd05      	ble.n	8025922 <floorf+0x32>
 8025916:	2b00      	cmp	r3, #0
 8025918:	da23      	bge.n	8025962 <floorf+0x72>
 802591a:	4a14      	ldr	r2, [pc, #80]	; (802596c <floorf+0x7c>)
 802591c:	2900      	cmp	r1, #0
 802591e:	bf18      	it	ne
 8025920:	4613      	movne	r3, r2
 8025922:	ee00 3a10 	vmov	s0, r3
 8025926:	4770      	bx	lr
 8025928:	4911      	ldr	r1, [pc, #68]	; (8025970 <floorf+0x80>)
 802592a:	4111      	asrs	r1, r2
 802592c:	420b      	tst	r3, r1
 802592e:	d0fa      	beq.n	8025926 <floorf+0x36>
 8025930:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8025968 <floorf+0x78>
 8025934:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025938:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802593c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025940:	ddef      	ble.n	8025922 <floorf+0x32>
 8025942:	2b00      	cmp	r3, #0
 8025944:	bfbe      	ittt	lt
 8025946:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802594a:	fa40 f202 	asrlt.w	r2, r0, r2
 802594e:	189b      	addlt	r3, r3, r2
 8025950:	ea23 0301 	bic.w	r3, r3, r1
 8025954:	e7e5      	b.n	8025922 <floorf+0x32>
 8025956:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802595a:	d3e4      	bcc.n	8025926 <floorf+0x36>
 802595c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8025960:	4770      	bx	lr
 8025962:	2300      	movs	r3, #0
 8025964:	e7dd      	b.n	8025922 <floorf+0x32>
 8025966:	bf00      	nop
 8025968:	7149f2ca 	.word	0x7149f2ca
 802596c:	bf800000 	.word	0xbf800000
 8025970:	007fffff 	.word	0x007fffff

08025974 <sinf>:
 8025974:	ee10 3a10 	vmov	r3, s0
 8025978:	b507      	push	{r0, r1, r2, lr}
 802597a:	4a1d      	ldr	r2, [pc, #116]	; (80259f0 <sinf+0x7c>)
 802597c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025980:	4293      	cmp	r3, r2
 8025982:	dc05      	bgt.n	8025990 <sinf+0x1c>
 8025984:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80259f4 <sinf+0x80>
 8025988:	2000      	movs	r0, #0
 802598a:	f002 ff3f 	bl	802880c <__kernel_sinf>
 802598e:	e004      	b.n	802599a <sinf+0x26>
 8025990:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8025994:	db04      	blt.n	80259a0 <sinf+0x2c>
 8025996:	ee30 0a40 	vsub.f32	s0, s0, s0
 802599a:	b003      	add	sp, #12
 802599c:	f85d fb04 	ldr.w	pc, [sp], #4
 80259a0:	4668      	mov	r0, sp
 80259a2:	f001 fe63 	bl	802766c <__ieee754_rem_pio2f>
 80259a6:	f000 0003 	and.w	r0, r0, #3
 80259aa:	2801      	cmp	r0, #1
 80259ac:	d008      	beq.n	80259c0 <sinf+0x4c>
 80259ae:	2802      	cmp	r0, #2
 80259b0:	d00d      	beq.n	80259ce <sinf+0x5a>
 80259b2:	b9b0      	cbnz	r0, 80259e2 <sinf+0x6e>
 80259b4:	2001      	movs	r0, #1
 80259b6:	eddd 0a01 	vldr	s1, [sp, #4]
 80259ba:	ed9d 0a00 	vldr	s0, [sp]
 80259be:	e7e4      	b.n	802598a <sinf+0x16>
 80259c0:	eddd 0a01 	vldr	s1, [sp, #4]
 80259c4:	ed9d 0a00 	vldr	s0, [sp]
 80259c8:	f002 fc40 	bl	802824c <__kernel_cosf>
 80259cc:	e7e5      	b.n	802599a <sinf+0x26>
 80259ce:	2001      	movs	r0, #1
 80259d0:	eddd 0a01 	vldr	s1, [sp, #4]
 80259d4:	ed9d 0a00 	vldr	s0, [sp]
 80259d8:	f002 ff18 	bl	802880c <__kernel_sinf>
 80259dc:	eeb1 0a40 	vneg.f32	s0, s0
 80259e0:	e7db      	b.n	802599a <sinf+0x26>
 80259e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80259e6:	ed9d 0a00 	vldr	s0, [sp]
 80259ea:	f002 fc2f 	bl	802824c <__kernel_cosf>
 80259ee:	e7f5      	b.n	80259dc <sinf+0x68>
 80259f0:	3f490fd8 	.word	0x3f490fd8
 80259f4:	00000000 	.word	0x00000000

080259f8 <asin>:
 80259f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80259fa:	ed2d 8b02 	vpush	{d8}
 80259fe:	4e26      	ldr	r6, [pc, #152]	; (8025a98 <asin+0xa0>)
 8025a00:	b08b      	sub	sp, #44	; 0x2c
 8025a02:	ec55 4b10 	vmov	r4, r5, d0
 8025a06:	f000 fa7f 	bl	8025f08 <__ieee754_asin>
 8025a0a:	f996 3000 	ldrsb.w	r3, [r6]
 8025a0e:	eeb0 8a40 	vmov.f32	s16, s0
 8025a12:	eef0 8a60 	vmov.f32	s17, s1
 8025a16:	3301      	adds	r3, #1
 8025a18:	d036      	beq.n	8025a88 <asin+0x90>
 8025a1a:	4622      	mov	r2, r4
 8025a1c:	462b      	mov	r3, r5
 8025a1e:	4620      	mov	r0, r4
 8025a20:	4629      	mov	r1, r5
 8025a22:	f7db f88b 	bl	8000b3c <__aeabi_dcmpun>
 8025a26:	4607      	mov	r7, r0
 8025a28:	bb70      	cbnz	r0, 8025a88 <asin+0x90>
 8025a2a:	ec45 4b10 	vmov	d0, r4, r5
 8025a2e:	f003 f8d7 	bl	8028be0 <fabs>
 8025a32:	2200      	movs	r2, #0
 8025a34:	4b19      	ldr	r3, [pc, #100]	; (8025a9c <asin+0xa4>)
 8025a36:	ec51 0b10 	vmov	r0, r1, d0
 8025a3a:	f7db f875 	bl	8000b28 <__aeabi_dcmpgt>
 8025a3e:	b318      	cbz	r0, 8025a88 <asin+0x90>
 8025a40:	2301      	movs	r3, #1
 8025a42:	9300      	str	r3, [sp, #0]
 8025a44:	4816      	ldr	r0, [pc, #88]	; (8025aa0 <asin+0xa8>)
 8025a46:	4b17      	ldr	r3, [pc, #92]	; (8025aa4 <asin+0xac>)
 8025a48:	9301      	str	r3, [sp, #4]
 8025a4a:	9708      	str	r7, [sp, #32]
 8025a4c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8025a50:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8025a54:	f003 f8d8 	bl	8028c08 <nan>
 8025a58:	f996 3000 	ldrsb.w	r3, [r6]
 8025a5c:	2b02      	cmp	r3, #2
 8025a5e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8025a62:	d104      	bne.n	8025a6e <asin+0x76>
 8025a64:	f003 fa74 	bl	8028f50 <__errno>
 8025a68:	2321      	movs	r3, #33	; 0x21
 8025a6a:	6003      	str	r3, [r0, #0]
 8025a6c:	e004      	b.n	8025a78 <asin+0x80>
 8025a6e:	4668      	mov	r0, sp
 8025a70:	f003 f8c7 	bl	8028c02 <matherr>
 8025a74:	2800      	cmp	r0, #0
 8025a76:	d0f5      	beq.n	8025a64 <asin+0x6c>
 8025a78:	9b08      	ldr	r3, [sp, #32]
 8025a7a:	b11b      	cbz	r3, 8025a84 <asin+0x8c>
 8025a7c:	f003 fa68 	bl	8028f50 <__errno>
 8025a80:	9b08      	ldr	r3, [sp, #32]
 8025a82:	6003      	str	r3, [r0, #0]
 8025a84:	ed9d 8b06 	vldr	d8, [sp, #24]
 8025a88:	eeb0 0a48 	vmov.f32	s0, s16
 8025a8c:	eef0 0a68 	vmov.f32	s1, s17
 8025a90:	b00b      	add	sp, #44	; 0x2c
 8025a92:	ecbd 8b02 	vpop	{d8}
 8025a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025a98:	200006a8 	.word	0x200006a8
 8025a9c:	3ff00000 	.word	0x3ff00000
 8025aa0:	0802ee3b 	.word	0x0802ee3b
 8025aa4:	0802e7b0 	.word	0x0802e7b0

08025aa8 <atan2>:
 8025aa8:	f000 bc3e 	b.w	8026328 <__ieee754_atan2>

08025aac <fmod>:
 8025aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025ab0:	ed2d 8b02 	vpush	{d8}
 8025ab4:	b08b      	sub	sp, #44	; 0x2c
 8025ab6:	ec55 4b10 	vmov	r4, r5, d0
 8025aba:	ec57 6b11 	vmov	r6, r7, d1
 8025abe:	f000 fd11 	bl	80264e4 <__ieee754_fmod>
 8025ac2:	4b2a      	ldr	r3, [pc, #168]	; (8025b6c <fmod+0xc0>)
 8025ac4:	eeb0 8a40 	vmov.f32	s16, s0
 8025ac8:	eef0 8a60 	vmov.f32	s17, s1
 8025acc:	f993 8000 	ldrsb.w	r8, [r3]
 8025ad0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8025ad4:	d030      	beq.n	8025b38 <fmod+0x8c>
 8025ad6:	4632      	mov	r2, r6
 8025ad8:	463b      	mov	r3, r7
 8025ada:	4630      	mov	r0, r6
 8025adc:	4639      	mov	r1, r7
 8025ade:	f7db f82d 	bl	8000b3c <__aeabi_dcmpun>
 8025ae2:	bb48      	cbnz	r0, 8025b38 <fmod+0x8c>
 8025ae4:	4622      	mov	r2, r4
 8025ae6:	462b      	mov	r3, r5
 8025ae8:	4620      	mov	r0, r4
 8025aea:	4629      	mov	r1, r5
 8025aec:	f7db f826 	bl	8000b3c <__aeabi_dcmpun>
 8025af0:	4681      	mov	r9, r0
 8025af2:	bb08      	cbnz	r0, 8025b38 <fmod+0x8c>
 8025af4:	2200      	movs	r2, #0
 8025af6:	2300      	movs	r3, #0
 8025af8:	4630      	mov	r0, r6
 8025afa:	4639      	mov	r1, r7
 8025afc:	f7da ffec 	bl	8000ad8 <__aeabi_dcmpeq>
 8025b00:	b1d0      	cbz	r0, 8025b38 <fmod+0x8c>
 8025b02:	2301      	movs	r3, #1
 8025b04:	9300      	str	r3, [sp, #0]
 8025b06:	4b1a      	ldr	r3, [pc, #104]	; (8025b70 <fmod+0xc4>)
 8025b08:	9301      	str	r3, [sp, #4]
 8025b0a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8025b0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8025b12:	f8cd 9020 	str.w	r9, [sp, #32]
 8025b16:	f1b8 0f00 	cmp.w	r8, #0
 8025b1a:	d116      	bne.n	8025b4a <fmod+0x9e>
 8025b1c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8025b20:	4668      	mov	r0, sp
 8025b22:	f003 f86e 	bl	8028c02 <matherr>
 8025b26:	b1d8      	cbz	r0, 8025b60 <fmod+0xb4>
 8025b28:	9b08      	ldr	r3, [sp, #32]
 8025b2a:	b11b      	cbz	r3, 8025b34 <fmod+0x88>
 8025b2c:	f003 fa10 	bl	8028f50 <__errno>
 8025b30:	9b08      	ldr	r3, [sp, #32]
 8025b32:	6003      	str	r3, [r0, #0]
 8025b34:	ed9d 8b06 	vldr	d8, [sp, #24]
 8025b38:	eeb0 0a48 	vmov.f32	s0, s16
 8025b3c:	eef0 0a68 	vmov.f32	s1, s17
 8025b40:	b00b      	add	sp, #44	; 0x2c
 8025b42:	ecbd 8b02 	vpop	{d8}
 8025b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025b4a:	2200      	movs	r2, #0
 8025b4c:	2300      	movs	r3, #0
 8025b4e:	4610      	mov	r0, r2
 8025b50:	4619      	mov	r1, r3
 8025b52:	f7da fe83 	bl	800085c <__aeabi_ddiv>
 8025b56:	f1b8 0f02 	cmp.w	r8, #2
 8025b5a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025b5e:	d1df      	bne.n	8025b20 <fmod+0x74>
 8025b60:	f003 f9f6 	bl	8028f50 <__errno>
 8025b64:	2321      	movs	r3, #33	; 0x21
 8025b66:	6003      	str	r3, [r0, #0]
 8025b68:	e7de      	b.n	8025b28 <fmod+0x7c>
 8025b6a:	bf00      	nop
 8025b6c:	200006a8 	.word	0x200006a8
 8025b70:	0802e7b5 	.word	0x0802e7b5

08025b74 <pow>:
 8025b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b78:	ed2d 8b04 	vpush	{d8-d9}
 8025b7c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8025e50 <pow+0x2dc>
 8025b80:	b08d      	sub	sp, #52	; 0x34
 8025b82:	ec57 6b10 	vmov	r6, r7, d0
 8025b86:	ec55 4b11 	vmov	r4, r5, d1
 8025b8a:	f000 fdbd 	bl	8026708 <__ieee754_pow>
 8025b8e:	f999 3000 	ldrsb.w	r3, [r9]
 8025b92:	9300      	str	r3, [sp, #0]
 8025b94:	3301      	adds	r3, #1
 8025b96:	eeb0 8a40 	vmov.f32	s16, s0
 8025b9a:	eef0 8a60 	vmov.f32	s17, s1
 8025b9e:	46c8      	mov	r8, r9
 8025ba0:	d05f      	beq.n	8025c62 <pow+0xee>
 8025ba2:	4622      	mov	r2, r4
 8025ba4:	462b      	mov	r3, r5
 8025ba6:	4620      	mov	r0, r4
 8025ba8:	4629      	mov	r1, r5
 8025baa:	f7da ffc7 	bl	8000b3c <__aeabi_dcmpun>
 8025bae:	4683      	mov	fp, r0
 8025bb0:	2800      	cmp	r0, #0
 8025bb2:	d156      	bne.n	8025c62 <pow+0xee>
 8025bb4:	4632      	mov	r2, r6
 8025bb6:	463b      	mov	r3, r7
 8025bb8:	4630      	mov	r0, r6
 8025bba:	4639      	mov	r1, r7
 8025bbc:	f7da ffbe 	bl	8000b3c <__aeabi_dcmpun>
 8025bc0:	9001      	str	r0, [sp, #4]
 8025bc2:	b1e8      	cbz	r0, 8025c00 <pow+0x8c>
 8025bc4:	2200      	movs	r2, #0
 8025bc6:	2300      	movs	r3, #0
 8025bc8:	4620      	mov	r0, r4
 8025bca:	4629      	mov	r1, r5
 8025bcc:	f7da ff84 	bl	8000ad8 <__aeabi_dcmpeq>
 8025bd0:	2800      	cmp	r0, #0
 8025bd2:	d046      	beq.n	8025c62 <pow+0xee>
 8025bd4:	2301      	movs	r3, #1
 8025bd6:	9302      	str	r3, [sp, #8]
 8025bd8:	4b96      	ldr	r3, [pc, #600]	; (8025e34 <pow+0x2c0>)
 8025bda:	9303      	str	r3, [sp, #12]
 8025bdc:	4b96      	ldr	r3, [pc, #600]	; (8025e38 <pow+0x2c4>)
 8025bde:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8025be2:	2200      	movs	r2, #0
 8025be4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8025be8:	9b00      	ldr	r3, [sp, #0]
 8025bea:	2b02      	cmp	r3, #2
 8025bec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8025bf0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8025bf4:	d033      	beq.n	8025c5e <pow+0xea>
 8025bf6:	a802      	add	r0, sp, #8
 8025bf8:	f003 f803 	bl	8028c02 <matherr>
 8025bfc:	bb48      	cbnz	r0, 8025c52 <pow+0xde>
 8025bfe:	e05d      	b.n	8025cbc <pow+0x148>
 8025c00:	f04f 0a00 	mov.w	sl, #0
 8025c04:	f04f 0b00 	mov.w	fp, #0
 8025c08:	4652      	mov	r2, sl
 8025c0a:	465b      	mov	r3, fp
 8025c0c:	4630      	mov	r0, r6
 8025c0e:	4639      	mov	r1, r7
 8025c10:	f7da ff62 	bl	8000ad8 <__aeabi_dcmpeq>
 8025c14:	ec4b ab19 	vmov	d9, sl, fp
 8025c18:	2800      	cmp	r0, #0
 8025c1a:	d054      	beq.n	8025cc6 <pow+0x152>
 8025c1c:	4652      	mov	r2, sl
 8025c1e:	465b      	mov	r3, fp
 8025c20:	4620      	mov	r0, r4
 8025c22:	4629      	mov	r1, r5
 8025c24:	f7da ff58 	bl	8000ad8 <__aeabi_dcmpeq>
 8025c28:	4680      	mov	r8, r0
 8025c2a:	b318      	cbz	r0, 8025c74 <pow+0x100>
 8025c2c:	2301      	movs	r3, #1
 8025c2e:	9302      	str	r3, [sp, #8]
 8025c30:	4b80      	ldr	r3, [pc, #512]	; (8025e34 <pow+0x2c0>)
 8025c32:	9303      	str	r3, [sp, #12]
 8025c34:	9b01      	ldr	r3, [sp, #4]
 8025c36:	930a      	str	r3, [sp, #40]	; 0x28
 8025c38:	9b00      	ldr	r3, [sp, #0]
 8025c3a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8025c3e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8025c42:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8025c46:	2b00      	cmp	r3, #0
 8025c48:	d0d5      	beq.n	8025bf6 <pow+0x82>
 8025c4a:	4b7b      	ldr	r3, [pc, #492]	; (8025e38 <pow+0x2c4>)
 8025c4c:	2200      	movs	r2, #0
 8025c4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8025c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025c54:	b11b      	cbz	r3, 8025c5e <pow+0xea>
 8025c56:	f003 f97b 	bl	8028f50 <__errno>
 8025c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025c5c:	6003      	str	r3, [r0, #0]
 8025c5e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8025c62:	eeb0 0a48 	vmov.f32	s0, s16
 8025c66:	eef0 0a68 	vmov.f32	s1, s17
 8025c6a:	b00d      	add	sp, #52	; 0x34
 8025c6c:	ecbd 8b04 	vpop	{d8-d9}
 8025c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c74:	ec45 4b10 	vmov	d0, r4, r5
 8025c78:	f002 ffbb 	bl	8028bf2 <finite>
 8025c7c:	2800      	cmp	r0, #0
 8025c7e:	d0f0      	beq.n	8025c62 <pow+0xee>
 8025c80:	4652      	mov	r2, sl
 8025c82:	465b      	mov	r3, fp
 8025c84:	4620      	mov	r0, r4
 8025c86:	4629      	mov	r1, r5
 8025c88:	f7da ff30 	bl	8000aec <__aeabi_dcmplt>
 8025c8c:	2800      	cmp	r0, #0
 8025c8e:	d0e8      	beq.n	8025c62 <pow+0xee>
 8025c90:	2301      	movs	r3, #1
 8025c92:	9302      	str	r3, [sp, #8]
 8025c94:	4b67      	ldr	r3, [pc, #412]	; (8025e34 <pow+0x2c0>)
 8025c96:	9303      	str	r3, [sp, #12]
 8025c98:	f999 3000 	ldrsb.w	r3, [r9]
 8025c9c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8025ca0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8025ca4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8025ca8:	b913      	cbnz	r3, 8025cb0 <pow+0x13c>
 8025caa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8025cae:	e7a2      	b.n	8025bf6 <pow+0x82>
 8025cb0:	4962      	ldr	r1, [pc, #392]	; (8025e3c <pow+0x2c8>)
 8025cb2:	2000      	movs	r0, #0
 8025cb4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8025cb8:	2b02      	cmp	r3, #2
 8025cba:	d19c      	bne.n	8025bf6 <pow+0x82>
 8025cbc:	f003 f948 	bl	8028f50 <__errno>
 8025cc0:	2321      	movs	r3, #33	; 0x21
 8025cc2:	6003      	str	r3, [r0, #0]
 8025cc4:	e7c5      	b.n	8025c52 <pow+0xde>
 8025cc6:	eeb0 0a48 	vmov.f32	s0, s16
 8025cca:	eef0 0a68 	vmov.f32	s1, s17
 8025cce:	f002 ff90 	bl	8028bf2 <finite>
 8025cd2:	9000      	str	r0, [sp, #0]
 8025cd4:	2800      	cmp	r0, #0
 8025cd6:	f040 8081 	bne.w	8025ddc <pow+0x268>
 8025cda:	ec47 6b10 	vmov	d0, r6, r7
 8025cde:	f002 ff88 	bl	8028bf2 <finite>
 8025ce2:	2800      	cmp	r0, #0
 8025ce4:	d07a      	beq.n	8025ddc <pow+0x268>
 8025ce6:	ec45 4b10 	vmov	d0, r4, r5
 8025cea:	f002 ff82 	bl	8028bf2 <finite>
 8025cee:	2800      	cmp	r0, #0
 8025cf0:	d074      	beq.n	8025ddc <pow+0x268>
 8025cf2:	ec53 2b18 	vmov	r2, r3, d8
 8025cf6:	ee18 0a10 	vmov	r0, s16
 8025cfa:	4619      	mov	r1, r3
 8025cfc:	f7da ff1e 	bl	8000b3c <__aeabi_dcmpun>
 8025d00:	f999 9000 	ldrsb.w	r9, [r9]
 8025d04:	4b4b      	ldr	r3, [pc, #300]	; (8025e34 <pow+0x2c0>)
 8025d06:	b1b0      	cbz	r0, 8025d36 <pow+0x1c2>
 8025d08:	2201      	movs	r2, #1
 8025d0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8025d0e:	9b00      	ldr	r3, [sp, #0]
 8025d10:	930a      	str	r3, [sp, #40]	; 0x28
 8025d12:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8025d16:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8025d1a:	f1b9 0f00 	cmp.w	r9, #0
 8025d1e:	d0c4      	beq.n	8025caa <pow+0x136>
 8025d20:	4652      	mov	r2, sl
 8025d22:	465b      	mov	r3, fp
 8025d24:	4650      	mov	r0, sl
 8025d26:	4659      	mov	r1, fp
 8025d28:	f7da fd98 	bl	800085c <__aeabi_ddiv>
 8025d2c:	f1b9 0f02 	cmp.w	r9, #2
 8025d30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8025d34:	e7c1      	b.n	8025cba <pow+0x146>
 8025d36:	2203      	movs	r2, #3
 8025d38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8025d3c:	900a      	str	r0, [sp, #40]	; 0x28
 8025d3e:	4629      	mov	r1, r5
 8025d40:	4620      	mov	r0, r4
 8025d42:	2200      	movs	r2, #0
 8025d44:	4b3e      	ldr	r3, [pc, #248]	; (8025e40 <pow+0x2cc>)
 8025d46:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8025d4a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8025d4e:	f7da fc5b 	bl	8000608 <__aeabi_dmul>
 8025d52:	4604      	mov	r4, r0
 8025d54:	460d      	mov	r5, r1
 8025d56:	f1b9 0f00 	cmp.w	r9, #0
 8025d5a:	d124      	bne.n	8025da6 <pow+0x232>
 8025d5c:	4b39      	ldr	r3, [pc, #228]	; (8025e44 <pow+0x2d0>)
 8025d5e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8025d62:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8025d66:	4630      	mov	r0, r6
 8025d68:	4652      	mov	r2, sl
 8025d6a:	465b      	mov	r3, fp
 8025d6c:	4639      	mov	r1, r7
 8025d6e:	f7da febd 	bl	8000aec <__aeabi_dcmplt>
 8025d72:	2800      	cmp	r0, #0
 8025d74:	d056      	beq.n	8025e24 <pow+0x2b0>
 8025d76:	ec45 4b10 	vmov	d0, r4, r5
 8025d7a:	f002 ff4d 	bl	8028c18 <rint>
 8025d7e:	4622      	mov	r2, r4
 8025d80:	462b      	mov	r3, r5
 8025d82:	ec51 0b10 	vmov	r0, r1, d0
 8025d86:	f7da fea7 	bl	8000ad8 <__aeabi_dcmpeq>
 8025d8a:	b920      	cbnz	r0, 8025d96 <pow+0x222>
 8025d8c:	4b2e      	ldr	r3, [pc, #184]	; (8025e48 <pow+0x2d4>)
 8025d8e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8025d92:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8025d96:	f998 3000 	ldrsb.w	r3, [r8]
 8025d9a:	2b02      	cmp	r3, #2
 8025d9c:	d142      	bne.n	8025e24 <pow+0x2b0>
 8025d9e:	f003 f8d7 	bl	8028f50 <__errno>
 8025da2:	2322      	movs	r3, #34	; 0x22
 8025da4:	e78d      	b.n	8025cc2 <pow+0x14e>
 8025da6:	4b29      	ldr	r3, [pc, #164]	; (8025e4c <pow+0x2d8>)
 8025da8:	2200      	movs	r2, #0
 8025daa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8025dae:	4630      	mov	r0, r6
 8025db0:	4652      	mov	r2, sl
 8025db2:	465b      	mov	r3, fp
 8025db4:	4639      	mov	r1, r7
 8025db6:	f7da fe99 	bl	8000aec <__aeabi_dcmplt>
 8025dba:	2800      	cmp	r0, #0
 8025dbc:	d0eb      	beq.n	8025d96 <pow+0x222>
 8025dbe:	ec45 4b10 	vmov	d0, r4, r5
 8025dc2:	f002 ff29 	bl	8028c18 <rint>
 8025dc6:	4622      	mov	r2, r4
 8025dc8:	462b      	mov	r3, r5
 8025dca:	ec51 0b10 	vmov	r0, r1, d0
 8025dce:	f7da fe83 	bl	8000ad8 <__aeabi_dcmpeq>
 8025dd2:	2800      	cmp	r0, #0
 8025dd4:	d1df      	bne.n	8025d96 <pow+0x222>
 8025dd6:	2200      	movs	r2, #0
 8025dd8:	4b18      	ldr	r3, [pc, #96]	; (8025e3c <pow+0x2c8>)
 8025dda:	e7da      	b.n	8025d92 <pow+0x21e>
 8025ddc:	2200      	movs	r2, #0
 8025dde:	2300      	movs	r3, #0
 8025de0:	ec51 0b18 	vmov	r0, r1, d8
 8025de4:	f7da fe78 	bl	8000ad8 <__aeabi_dcmpeq>
 8025de8:	2800      	cmp	r0, #0
 8025dea:	f43f af3a 	beq.w	8025c62 <pow+0xee>
 8025dee:	ec47 6b10 	vmov	d0, r6, r7
 8025df2:	f002 fefe 	bl	8028bf2 <finite>
 8025df6:	2800      	cmp	r0, #0
 8025df8:	f43f af33 	beq.w	8025c62 <pow+0xee>
 8025dfc:	ec45 4b10 	vmov	d0, r4, r5
 8025e00:	f002 fef7 	bl	8028bf2 <finite>
 8025e04:	2800      	cmp	r0, #0
 8025e06:	f43f af2c 	beq.w	8025c62 <pow+0xee>
 8025e0a:	2304      	movs	r3, #4
 8025e0c:	9302      	str	r3, [sp, #8]
 8025e0e:	4b09      	ldr	r3, [pc, #36]	; (8025e34 <pow+0x2c0>)
 8025e10:	9303      	str	r3, [sp, #12]
 8025e12:	2300      	movs	r3, #0
 8025e14:	930a      	str	r3, [sp, #40]	; 0x28
 8025e16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8025e1a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8025e1e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8025e22:	e7b8      	b.n	8025d96 <pow+0x222>
 8025e24:	a802      	add	r0, sp, #8
 8025e26:	f002 feec 	bl	8028c02 <matherr>
 8025e2a:	2800      	cmp	r0, #0
 8025e2c:	f47f af11 	bne.w	8025c52 <pow+0xde>
 8025e30:	e7b5      	b.n	8025d9e <pow+0x22a>
 8025e32:	bf00      	nop
 8025e34:	0802e7ba 	.word	0x0802e7ba
 8025e38:	3ff00000 	.word	0x3ff00000
 8025e3c:	fff00000 	.word	0xfff00000
 8025e40:	3fe00000 	.word	0x3fe00000
 8025e44:	47efffff 	.word	0x47efffff
 8025e48:	c7efffff 	.word	0xc7efffff
 8025e4c:	7ff00000 	.word	0x7ff00000
 8025e50:	200006a8 	.word	0x200006a8

08025e54 <sqrt>:
 8025e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025e58:	ed2d 8b02 	vpush	{d8}
 8025e5c:	b08b      	sub	sp, #44	; 0x2c
 8025e5e:	ec55 4b10 	vmov	r4, r5, d0
 8025e62:	f001 fb53 	bl	802750c <__ieee754_sqrt>
 8025e66:	4b26      	ldr	r3, [pc, #152]	; (8025f00 <sqrt+0xac>)
 8025e68:	eeb0 8a40 	vmov.f32	s16, s0
 8025e6c:	eef0 8a60 	vmov.f32	s17, s1
 8025e70:	f993 6000 	ldrsb.w	r6, [r3]
 8025e74:	1c73      	adds	r3, r6, #1
 8025e76:	d02a      	beq.n	8025ece <sqrt+0x7a>
 8025e78:	4622      	mov	r2, r4
 8025e7a:	462b      	mov	r3, r5
 8025e7c:	4620      	mov	r0, r4
 8025e7e:	4629      	mov	r1, r5
 8025e80:	f7da fe5c 	bl	8000b3c <__aeabi_dcmpun>
 8025e84:	4607      	mov	r7, r0
 8025e86:	bb10      	cbnz	r0, 8025ece <sqrt+0x7a>
 8025e88:	f04f 0800 	mov.w	r8, #0
 8025e8c:	f04f 0900 	mov.w	r9, #0
 8025e90:	4642      	mov	r2, r8
 8025e92:	464b      	mov	r3, r9
 8025e94:	4620      	mov	r0, r4
 8025e96:	4629      	mov	r1, r5
 8025e98:	f7da fe28 	bl	8000aec <__aeabi_dcmplt>
 8025e9c:	b1b8      	cbz	r0, 8025ece <sqrt+0x7a>
 8025e9e:	2301      	movs	r3, #1
 8025ea0:	9300      	str	r3, [sp, #0]
 8025ea2:	4b18      	ldr	r3, [pc, #96]	; (8025f04 <sqrt+0xb0>)
 8025ea4:	9301      	str	r3, [sp, #4]
 8025ea6:	9708      	str	r7, [sp, #32]
 8025ea8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8025eac:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8025eb0:	b9b6      	cbnz	r6, 8025ee0 <sqrt+0x8c>
 8025eb2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8025eb6:	4668      	mov	r0, sp
 8025eb8:	f002 fea3 	bl	8028c02 <matherr>
 8025ebc:	b1d0      	cbz	r0, 8025ef4 <sqrt+0xa0>
 8025ebe:	9b08      	ldr	r3, [sp, #32]
 8025ec0:	b11b      	cbz	r3, 8025eca <sqrt+0x76>
 8025ec2:	f003 f845 	bl	8028f50 <__errno>
 8025ec6:	9b08      	ldr	r3, [sp, #32]
 8025ec8:	6003      	str	r3, [r0, #0]
 8025eca:	ed9d 8b06 	vldr	d8, [sp, #24]
 8025ece:	eeb0 0a48 	vmov.f32	s0, s16
 8025ed2:	eef0 0a68 	vmov.f32	s1, s17
 8025ed6:	b00b      	add	sp, #44	; 0x2c
 8025ed8:	ecbd 8b02 	vpop	{d8}
 8025edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025ee0:	4642      	mov	r2, r8
 8025ee2:	464b      	mov	r3, r9
 8025ee4:	4640      	mov	r0, r8
 8025ee6:	4649      	mov	r1, r9
 8025ee8:	f7da fcb8 	bl	800085c <__aeabi_ddiv>
 8025eec:	2e02      	cmp	r6, #2
 8025eee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025ef2:	d1e0      	bne.n	8025eb6 <sqrt+0x62>
 8025ef4:	f003 f82c 	bl	8028f50 <__errno>
 8025ef8:	2321      	movs	r3, #33	; 0x21
 8025efa:	6003      	str	r3, [r0, #0]
 8025efc:	e7df      	b.n	8025ebe <sqrt+0x6a>
 8025efe:	bf00      	nop
 8025f00:	200006a8 	.word	0x200006a8
 8025f04:	0802e7be 	.word	0x0802e7be

08025f08 <__ieee754_asin>:
 8025f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f0c:	ec55 4b10 	vmov	r4, r5, d0
 8025f10:	4bcb      	ldr	r3, [pc, #812]	; (8026240 <__ieee754_asin+0x338>)
 8025f12:	b087      	sub	sp, #28
 8025f14:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8025f18:	429f      	cmp	r7, r3
 8025f1a:	9501      	str	r5, [sp, #4]
 8025f1c:	dd31      	ble.n	8025f82 <__ieee754_asin+0x7a>
 8025f1e:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8025f22:	ee10 3a10 	vmov	r3, s0
 8025f26:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8025f2a:	433b      	orrs	r3, r7
 8025f2c:	d117      	bne.n	8025f5e <__ieee754_asin+0x56>
 8025f2e:	a3aa      	add	r3, pc, #680	; (adr r3, 80261d8 <__ieee754_asin+0x2d0>)
 8025f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f34:	ee10 0a10 	vmov	r0, s0
 8025f38:	4629      	mov	r1, r5
 8025f3a:	f7da fb65 	bl	8000608 <__aeabi_dmul>
 8025f3e:	a3a8      	add	r3, pc, #672	; (adr r3, 80261e0 <__ieee754_asin+0x2d8>)
 8025f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f44:	4606      	mov	r6, r0
 8025f46:	460f      	mov	r7, r1
 8025f48:	4620      	mov	r0, r4
 8025f4a:	4629      	mov	r1, r5
 8025f4c:	f7da fb5c 	bl	8000608 <__aeabi_dmul>
 8025f50:	4602      	mov	r2, r0
 8025f52:	460b      	mov	r3, r1
 8025f54:	4630      	mov	r0, r6
 8025f56:	4639      	mov	r1, r7
 8025f58:	f7da f9a0 	bl	800029c <__adddf3>
 8025f5c:	e00a      	b.n	8025f74 <__ieee754_asin+0x6c>
 8025f5e:	ee10 2a10 	vmov	r2, s0
 8025f62:	462b      	mov	r3, r5
 8025f64:	4620      	mov	r0, r4
 8025f66:	4629      	mov	r1, r5
 8025f68:	f7da f996 	bl	8000298 <__aeabi_dsub>
 8025f6c:	4602      	mov	r2, r0
 8025f6e:	460b      	mov	r3, r1
 8025f70:	f7da fc74 	bl	800085c <__aeabi_ddiv>
 8025f74:	4604      	mov	r4, r0
 8025f76:	460d      	mov	r5, r1
 8025f78:	ec45 4b10 	vmov	d0, r4, r5
 8025f7c:	b007      	add	sp, #28
 8025f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f82:	4bb0      	ldr	r3, [pc, #704]	; (8026244 <__ieee754_asin+0x33c>)
 8025f84:	429f      	cmp	r7, r3
 8025f86:	dc11      	bgt.n	8025fac <__ieee754_asin+0xa4>
 8025f88:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8025f8c:	f280 80ae 	bge.w	80260ec <__ieee754_asin+0x1e4>
 8025f90:	a395      	add	r3, pc, #596	; (adr r3, 80261e8 <__ieee754_asin+0x2e0>)
 8025f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f96:	ee10 0a10 	vmov	r0, s0
 8025f9a:	4629      	mov	r1, r5
 8025f9c:	f7da f97e 	bl	800029c <__adddf3>
 8025fa0:	2200      	movs	r2, #0
 8025fa2:	4ba9      	ldr	r3, [pc, #676]	; (8026248 <__ieee754_asin+0x340>)
 8025fa4:	f7da fdc0 	bl	8000b28 <__aeabi_dcmpgt>
 8025fa8:	2800      	cmp	r0, #0
 8025faa:	d1e5      	bne.n	8025f78 <__ieee754_asin+0x70>
 8025fac:	ec45 4b10 	vmov	d0, r4, r5
 8025fb0:	f002 fe16 	bl	8028be0 <fabs>
 8025fb4:	2000      	movs	r0, #0
 8025fb6:	ec53 2b10 	vmov	r2, r3, d0
 8025fba:	49a3      	ldr	r1, [pc, #652]	; (8026248 <__ieee754_asin+0x340>)
 8025fbc:	f7da f96c 	bl	8000298 <__aeabi_dsub>
 8025fc0:	2200      	movs	r2, #0
 8025fc2:	4ba2      	ldr	r3, [pc, #648]	; (802624c <__ieee754_asin+0x344>)
 8025fc4:	f7da fb20 	bl	8000608 <__aeabi_dmul>
 8025fc8:	a389      	add	r3, pc, #548	; (adr r3, 80261f0 <__ieee754_asin+0x2e8>)
 8025fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fce:	4604      	mov	r4, r0
 8025fd0:	460d      	mov	r5, r1
 8025fd2:	f7da fb19 	bl	8000608 <__aeabi_dmul>
 8025fd6:	a388      	add	r3, pc, #544	; (adr r3, 80261f8 <__ieee754_asin+0x2f0>)
 8025fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fdc:	f7da f95e 	bl	800029c <__adddf3>
 8025fe0:	4622      	mov	r2, r4
 8025fe2:	462b      	mov	r3, r5
 8025fe4:	f7da fb10 	bl	8000608 <__aeabi_dmul>
 8025fe8:	a385      	add	r3, pc, #532	; (adr r3, 8026200 <__ieee754_asin+0x2f8>)
 8025fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fee:	f7da f953 	bl	8000298 <__aeabi_dsub>
 8025ff2:	4622      	mov	r2, r4
 8025ff4:	462b      	mov	r3, r5
 8025ff6:	f7da fb07 	bl	8000608 <__aeabi_dmul>
 8025ffa:	a383      	add	r3, pc, #524	; (adr r3, 8026208 <__ieee754_asin+0x300>)
 8025ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026000:	f7da f94c 	bl	800029c <__adddf3>
 8026004:	4622      	mov	r2, r4
 8026006:	462b      	mov	r3, r5
 8026008:	f7da fafe 	bl	8000608 <__aeabi_dmul>
 802600c:	a380      	add	r3, pc, #512	; (adr r3, 8026210 <__ieee754_asin+0x308>)
 802600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026012:	f7da f941 	bl	8000298 <__aeabi_dsub>
 8026016:	4622      	mov	r2, r4
 8026018:	462b      	mov	r3, r5
 802601a:	f7da faf5 	bl	8000608 <__aeabi_dmul>
 802601e:	a37e      	add	r3, pc, #504	; (adr r3, 8026218 <__ieee754_asin+0x310>)
 8026020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026024:	f7da f93a 	bl	800029c <__adddf3>
 8026028:	4622      	mov	r2, r4
 802602a:	462b      	mov	r3, r5
 802602c:	f7da faec 	bl	8000608 <__aeabi_dmul>
 8026030:	a37b      	add	r3, pc, #492	; (adr r3, 8026220 <__ieee754_asin+0x318>)
 8026032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026036:	4680      	mov	r8, r0
 8026038:	4689      	mov	r9, r1
 802603a:	4620      	mov	r0, r4
 802603c:	4629      	mov	r1, r5
 802603e:	f7da fae3 	bl	8000608 <__aeabi_dmul>
 8026042:	a379      	add	r3, pc, #484	; (adr r3, 8026228 <__ieee754_asin+0x320>)
 8026044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026048:	f7da f926 	bl	8000298 <__aeabi_dsub>
 802604c:	4622      	mov	r2, r4
 802604e:	462b      	mov	r3, r5
 8026050:	f7da fada 	bl	8000608 <__aeabi_dmul>
 8026054:	a376      	add	r3, pc, #472	; (adr r3, 8026230 <__ieee754_asin+0x328>)
 8026056:	e9d3 2300 	ldrd	r2, r3, [r3]
 802605a:	f7da f91f 	bl	800029c <__adddf3>
 802605e:	4622      	mov	r2, r4
 8026060:	462b      	mov	r3, r5
 8026062:	f7da fad1 	bl	8000608 <__aeabi_dmul>
 8026066:	a374      	add	r3, pc, #464	; (adr r3, 8026238 <__ieee754_asin+0x330>)
 8026068:	e9d3 2300 	ldrd	r2, r3, [r3]
 802606c:	f7da f914 	bl	8000298 <__aeabi_dsub>
 8026070:	4622      	mov	r2, r4
 8026072:	462b      	mov	r3, r5
 8026074:	f7da fac8 	bl	8000608 <__aeabi_dmul>
 8026078:	4b73      	ldr	r3, [pc, #460]	; (8026248 <__ieee754_asin+0x340>)
 802607a:	2200      	movs	r2, #0
 802607c:	f7da f90e 	bl	800029c <__adddf3>
 8026080:	ec45 4b10 	vmov	d0, r4, r5
 8026084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8026088:	f001 fa40 	bl	802750c <__ieee754_sqrt>
 802608c:	4b70      	ldr	r3, [pc, #448]	; (8026250 <__ieee754_asin+0x348>)
 802608e:	429f      	cmp	r7, r3
 8026090:	ec5b ab10 	vmov	sl, fp, d0
 8026094:	f340 80de 	ble.w	8026254 <__ieee754_asin+0x34c>
 8026098:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802609c:	4640      	mov	r0, r8
 802609e:	4649      	mov	r1, r9
 80260a0:	f7da fbdc 	bl	800085c <__aeabi_ddiv>
 80260a4:	4652      	mov	r2, sl
 80260a6:	465b      	mov	r3, fp
 80260a8:	f7da faae 	bl	8000608 <__aeabi_dmul>
 80260ac:	4652      	mov	r2, sl
 80260ae:	465b      	mov	r3, fp
 80260b0:	f7da f8f4 	bl	800029c <__adddf3>
 80260b4:	4602      	mov	r2, r0
 80260b6:	460b      	mov	r3, r1
 80260b8:	f7da f8f0 	bl	800029c <__adddf3>
 80260bc:	a348      	add	r3, pc, #288	; (adr r3, 80261e0 <__ieee754_asin+0x2d8>)
 80260be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80260c2:	f7da f8e9 	bl	8000298 <__aeabi_dsub>
 80260c6:	4602      	mov	r2, r0
 80260c8:	460b      	mov	r3, r1
 80260ca:	a143      	add	r1, pc, #268	; (adr r1, 80261d8 <__ieee754_asin+0x2d0>)
 80260cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80260d0:	f7da f8e2 	bl	8000298 <__aeabi_dsub>
 80260d4:	9b01      	ldr	r3, [sp, #4]
 80260d6:	2b00      	cmp	r3, #0
 80260d8:	bfdc      	itt	le
 80260da:	4602      	movle	r2, r0
 80260dc:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80260e0:	4604      	mov	r4, r0
 80260e2:	460d      	mov	r5, r1
 80260e4:	bfdc      	itt	le
 80260e6:	4614      	movle	r4, r2
 80260e8:	461d      	movle	r5, r3
 80260ea:	e745      	b.n	8025f78 <__ieee754_asin+0x70>
 80260ec:	ee10 2a10 	vmov	r2, s0
 80260f0:	ee10 0a10 	vmov	r0, s0
 80260f4:	462b      	mov	r3, r5
 80260f6:	4629      	mov	r1, r5
 80260f8:	f7da fa86 	bl	8000608 <__aeabi_dmul>
 80260fc:	a33c      	add	r3, pc, #240	; (adr r3, 80261f0 <__ieee754_asin+0x2e8>)
 80260fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026102:	4606      	mov	r6, r0
 8026104:	460f      	mov	r7, r1
 8026106:	f7da fa7f 	bl	8000608 <__aeabi_dmul>
 802610a:	a33b      	add	r3, pc, #236	; (adr r3, 80261f8 <__ieee754_asin+0x2f0>)
 802610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026110:	f7da f8c4 	bl	800029c <__adddf3>
 8026114:	4632      	mov	r2, r6
 8026116:	463b      	mov	r3, r7
 8026118:	f7da fa76 	bl	8000608 <__aeabi_dmul>
 802611c:	a338      	add	r3, pc, #224	; (adr r3, 8026200 <__ieee754_asin+0x2f8>)
 802611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026122:	f7da f8b9 	bl	8000298 <__aeabi_dsub>
 8026126:	4632      	mov	r2, r6
 8026128:	463b      	mov	r3, r7
 802612a:	f7da fa6d 	bl	8000608 <__aeabi_dmul>
 802612e:	a336      	add	r3, pc, #216	; (adr r3, 8026208 <__ieee754_asin+0x300>)
 8026130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026134:	f7da f8b2 	bl	800029c <__adddf3>
 8026138:	4632      	mov	r2, r6
 802613a:	463b      	mov	r3, r7
 802613c:	f7da fa64 	bl	8000608 <__aeabi_dmul>
 8026140:	a333      	add	r3, pc, #204	; (adr r3, 8026210 <__ieee754_asin+0x308>)
 8026142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026146:	f7da f8a7 	bl	8000298 <__aeabi_dsub>
 802614a:	4632      	mov	r2, r6
 802614c:	463b      	mov	r3, r7
 802614e:	f7da fa5b 	bl	8000608 <__aeabi_dmul>
 8026152:	a331      	add	r3, pc, #196	; (adr r3, 8026218 <__ieee754_asin+0x310>)
 8026154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026158:	f7da f8a0 	bl	800029c <__adddf3>
 802615c:	4632      	mov	r2, r6
 802615e:	463b      	mov	r3, r7
 8026160:	f7da fa52 	bl	8000608 <__aeabi_dmul>
 8026164:	a32e      	add	r3, pc, #184	; (adr r3, 8026220 <__ieee754_asin+0x318>)
 8026166:	e9d3 2300 	ldrd	r2, r3, [r3]
 802616a:	4680      	mov	r8, r0
 802616c:	4689      	mov	r9, r1
 802616e:	4630      	mov	r0, r6
 8026170:	4639      	mov	r1, r7
 8026172:	f7da fa49 	bl	8000608 <__aeabi_dmul>
 8026176:	a32c      	add	r3, pc, #176	; (adr r3, 8026228 <__ieee754_asin+0x320>)
 8026178:	e9d3 2300 	ldrd	r2, r3, [r3]
 802617c:	f7da f88c 	bl	8000298 <__aeabi_dsub>
 8026180:	4632      	mov	r2, r6
 8026182:	463b      	mov	r3, r7
 8026184:	f7da fa40 	bl	8000608 <__aeabi_dmul>
 8026188:	a329      	add	r3, pc, #164	; (adr r3, 8026230 <__ieee754_asin+0x328>)
 802618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802618e:	f7da f885 	bl	800029c <__adddf3>
 8026192:	4632      	mov	r2, r6
 8026194:	463b      	mov	r3, r7
 8026196:	f7da fa37 	bl	8000608 <__aeabi_dmul>
 802619a:	a327      	add	r3, pc, #156	; (adr r3, 8026238 <__ieee754_asin+0x330>)
 802619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261a0:	f7da f87a 	bl	8000298 <__aeabi_dsub>
 80261a4:	4632      	mov	r2, r6
 80261a6:	463b      	mov	r3, r7
 80261a8:	f7da fa2e 	bl	8000608 <__aeabi_dmul>
 80261ac:	2200      	movs	r2, #0
 80261ae:	4b26      	ldr	r3, [pc, #152]	; (8026248 <__ieee754_asin+0x340>)
 80261b0:	f7da f874 	bl	800029c <__adddf3>
 80261b4:	4602      	mov	r2, r0
 80261b6:	460b      	mov	r3, r1
 80261b8:	4640      	mov	r0, r8
 80261ba:	4649      	mov	r1, r9
 80261bc:	f7da fb4e 	bl	800085c <__aeabi_ddiv>
 80261c0:	4622      	mov	r2, r4
 80261c2:	462b      	mov	r3, r5
 80261c4:	f7da fa20 	bl	8000608 <__aeabi_dmul>
 80261c8:	4602      	mov	r2, r0
 80261ca:	460b      	mov	r3, r1
 80261cc:	4620      	mov	r0, r4
 80261ce:	4629      	mov	r1, r5
 80261d0:	e6c2      	b.n	8025f58 <__ieee754_asin+0x50>
 80261d2:	bf00      	nop
 80261d4:	f3af 8000 	nop.w
 80261d8:	54442d18 	.word	0x54442d18
 80261dc:	3ff921fb 	.word	0x3ff921fb
 80261e0:	33145c07 	.word	0x33145c07
 80261e4:	3c91a626 	.word	0x3c91a626
 80261e8:	8800759c 	.word	0x8800759c
 80261ec:	7e37e43c 	.word	0x7e37e43c
 80261f0:	0dfdf709 	.word	0x0dfdf709
 80261f4:	3f023de1 	.word	0x3f023de1
 80261f8:	7501b288 	.word	0x7501b288
 80261fc:	3f49efe0 	.word	0x3f49efe0
 8026200:	b5688f3b 	.word	0xb5688f3b
 8026204:	3fa48228 	.word	0x3fa48228
 8026208:	0e884455 	.word	0x0e884455
 802620c:	3fc9c155 	.word	0x3fc9c155
 8026210:	03eb6f7d 	.word	0x03eb6f7d
 8026214:	3fd4d612 	.word	0x3fd4d612
 8026218:	55555555 	.word	0x55555555
 802621c:	3fc55555 	.word	0x3fc55555
 8026220:	b12e9282 	.word	0xb12e9282
 8026224:	3fb3b8c5 	.word	0x3fb3b8c5
 8026228:	1b8d0159 	.word	0x1b8d0159
 802622c:	3fe6066c 	.word	0x3fe6066c
 8026230:	9c598ac8 	.word	0x9c598ac8
 8026234:	40002ae5 	.word	0x40002ae5
 8026238:	1c8a2d4b 	.word	0x1c8a2d4b
 802623c:	40033a27 	.word	0x40033a27
 8026240:	3fefffff 	.word	0x3fefffff
 8026244:	3fdfffff 	.word	0x3fdfffff
 8026248:	3ff00000 	.word	0x3ff00000
 802624c:	3fe00000 	.word	0x3fe00000
 8026250:	3fef3332 	.word	0x3fef3332
 8026254:	ee10 2a10 	vmov	r2, s0
 8026258:	ee10 0a10 	vmov	r0, s0
 802625c:	465b      	mov	r3, fp
 802625e:	4659      	mov	r1, fp
 8026260:	f7da f81c 	bl	800029c <__adddf3>
 8026264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8026268:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802626c:	4640      	mov	r0, r8
 802626e:	4649      	mov	r1, r9
 8026270:	f7da faf4 	bl	800085c <__aeabi_ddiv>
 8026274:	4602      	mov	r2, r0
 8026276:	460b      	mov	r3, r1
 8026278:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802627c:	f7da f9c4 	bl	8000608 <__aeabi_dmul>
 8026280:	2600      	movs	r6, #0
 8026282:	4680      	mov	r8, r0
 8026284:	4689      	mov	r9, r1
 8026286:	4632      	mov	r2, r6
 8026288:	465b      	mov	r3, fp
 802628a:	4630      	mov	r0, r6
 802628c:	4659      	mov	r1, fp
 802628e:	f7da f9bb 	bl	8000608 <__aeabi_dmul>
 8026292:	4602      	mov	r2, r0
 8026294:	460b      	mov	r3, r1
 8026296:	4620      	mov	r0, r4
 8026298:	4629      	mov	r1, r5
 802629a:	f7d9 fffd 	bl	8000298 <__aeabi_dsub>
 802629e:	4632      	mov	r2, r6
 80262a0:	4604      	mov	r4, r0
 80262a2:	460d      	mov	r5, r1
 80262a4:	465b      	mov	r3, fp
 80262a6:	4650      	mov	r0, sl
 80262a8:	4659      	mov	r1, fp
 80262aa:	f7d9 fff7 	bl	800029c <__adddf3>
 80262ae:	4602      	mov	r2, r0
 80262b0:	460b      	mov	r3, r1
 80262b2:	4620      	mov	r0, r4
 80262b4:	4629      	mov	r1, r5
 80262b6:	f7da fad1 	bl	800085c <__aeabi_ddiv>
 80262ba:	4602      	mov	r2, r0
 80262bc:	460b      	mov	r3, r1
 80262be:	f7d9 ffed 	bl	800029c <__adddf3>
 80262c2:	4602      	mov	r2, r0
 80262c4:	460b      	mov	r3, r1
 80262c6:	a114      	add	r1, pc, #80	; (adr r1, 8026318 <__ieee754_asin+0x410>)
 80262c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80262cc:	f7d9 ffe4 	bl	8000298 <__aeabi_dsub>
 80262d0:	4602      	mov	r2, r0
 80262d2:	460b      	mov	r3, r1
 80262d4:	4640      	mov	r0, r8
 80262d6:	4649      	mov	r1, r9
 80262d8:	f7d9 ffde 	bl	8000298 <__aeabi_dsub>
 80262dc:	465f      	mov	r7, fp
 80262de:	4604      	mov	r4, r0
 80262e0:	460d      	mov	r5, r1
 80262e2:	4632      	mov	r2, r6
 80262e4:	465b      	mov	r3, fp
 80262e6:	4630      	mov	r0, r6
 80262e8:	4639      	mov	r1, r7
 80262ea:	f7d9 ffd7 	bl	800029c <__adddf3>
 80262ee:	4602      	mov	r2, r0
 80262f0:	460b      	mov	r3, r1
 80262f2:	a10b      	add	r1, pc, #44	; (adr r1, 8026320 <__ieee754_asin+0x418>)
 80262f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80262f8:	f7d9 ffce 	bl	8000298 <__aeabi_dsub>
 80262fc:	4602      	mov	r2, r0
 80262fe:	460b      	mov	r3, r1
 8026300:	4620      	mov	r0, r4
 8026302:	4629      	mov	r1, r5
 8026304:	f7d9 ffc8 	bl	8000298 <__aeabi_dsub>
 8026308:	4602      	mov	r2, r0
 802630a:	460b      	mov	r3, r1
 802630c:	a104      	add	r1, pc, #16	; (adr r1, 8026320 <__ieee754_asin+0x418>)
 802630e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8026312:	e6dd      	b.n	80260d0 <__ieee754_asin+0x1c8>
 8026314:	f3af 8000 	nop.w
 8026318:	33145c07 	.word	0x33145c07
 802631c:	3c91a626 	.word	0x3c91a626
 8026320:	54442d18 	.word	0x54442d18
 8026324:	3fe921fb 	.word	0x3fe921fb

08026328 <__ieee754_atan2>:
 8026328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802632c:	ec57 6b11 	vmov	r6, r7, d1
 8026330:	4273      	negs	r3, r6
 8026332:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8026336:	4333      	orrs	r3, r6
 8026338:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80264e0 <__ieee754_atan2+0x1b8>
 802633c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8026340:	4573      	cmp	r3, lr
 8026342:	ec51 0b10 	vmov	r0, r1, d0
 8026346:	ee11 8a10 	vmov	r8, s2
 802634a:	d80a      	bhi.n	8026362 <__ieee754_atan2+0x3a>
 802634c:	4244      	negs	r4, r0
 802634e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8026352:	4304      	orrs	r4, r0
 8026354:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8026358:	4574      	cmp	r4, lr
 802635a:	468c      	mov	ip, r1
 802635c:	ee10 9a10 	vmov	r9, s0
 8026360:	d907      	bls.n	8026372 <__ieee754_atan2+0x4a>
 8026362:	4632      	mov	r2, r6
 8026364:	463b      	mov	r3, r7
 8026366:	f7d9 ff99 	bl	800029c <__adddf3>
 802636a:	ec41 0b10 	vmov	d0, r0, r1
 802636e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026372:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8026376:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802637a:	4334      	orrs	r4, r6
 802637c:	d103      	bne.n	8026386 <__ieee754_atan2+0x5e>
 802637e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026382:	f002 ba8d 	b.w	80288a0 <atan>
 8026386:	17bc      	asrs	r4, r7, #30
 8026388:	f004 0402 	and.w	r4, r4, #2
 802638c:	ea53 0909 	orrs.w	r9, r3, r9
 8026390:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8026394:	d107      	bne.n	80263a6 <__ieee754_atan2+0x7e>
 8026396:	2c02      	cmp	r4, #2
 8026398:	d073      	beq.n	8026482 <__ieee754_atan2+0x15a>
 802639a:	2c03      	cmp	r4, #3
 802639c:	d1e5      	bne.n	802636a <__ieee754_atan2+0x42>
 802639e:	a13e      	add	r1, pc, #248	; (adr r1, 8026498 <__ieee754_atan2+0x170>)
 80263a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80263a4:	e7e1      	b.n	802636a <__ieee754_atan2+0x42>
 80263a6:	ea52 0808 	orrs.w	r8, r2, r8
 80263aa:	d106      	bne.n	80263ba <__ieee754_atan2+0x92>
 80263ac:	f1bc 0f00 	cmp.w	ip, #0
 80263b0:	da6b      	bge.n	802648a <__ieee754_atan2+0x162>
 80263b2:	a13b      	add	r1, pc, #236	; (adr r1, 80264a0 <__ieee754_atan2+0x178>)
 80263b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80263b8:	e7d7      	b.n	802636a <__ieee754_atan2+0x42>
 80263ba:	4572      	cmp	r2, lr
 80263bc:	d120      	bne.n	8026400 <__ieee754_atan2+0xd8>
 80263be:	4293      	cmp	r3, r2
 80263c0:	d111      	bne.n	80263e6 <__ieee754_atan2+0xbe>
 80263c2:	2c02      	cmp	r4, #2
 80263c4:	d007      	beq.n	80263d6 <__ieee754_atan2+0xae>
 80263c6:	2c03      	cmp	r4, #3
 80263c8:	d009      	beq.n	80263de <__ieee754_atan2+0xb6>
 80263ca:	2c01      	cmp	r4, #1
 80263cc:	d155      	bne.n	802647a <__ieee754_atan2+0x152>
 80263ce:	a136      	add	r1, pc, #216	; (adr r1, 80264a8 <__ieee754_atan2+0x180>)
 80263d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80263d4:	e7c9      	b.n	802636a <__ieee754_atan2+0x42>
 80263d6:	a136      	add	r1, pc, #216	; (adr r1, 80264b0 <__ieee754_atan2+0x188>)
 80263d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80263dc:	e7c5      	b.n	802636a <__ieee754_atan2+0x42>
 80263de:	a136      	add	r1, pc, #216	; (adr r1, 80264b8 <__ieee754_atan2+0x190>)
 80263e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80263e4:	e7c1      	b.n	802636a <__ieee754_atan2+0x42>
 80263e6:	2c02      	cmp	r4, #2
 80263e8:	d04b      	beq.n	8026482 <__ieee754_atan2+0x15a>
 80263ea:	2c03      	cmp	r4, #3
 80263ec:	d0d7      	beq.n	802639e <__ieee754_atan2+0x76>
 80263ee:	2c01      	cmp	r4, #1
 80263f0:	f04f 0000 	mov.w	r0, #0
 80263f4:	d102      	bne.n	80263fc <__ieee754_atan2+0xd4>
 80263f6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80263fa:	e7b6      	b.n	802636a <__ieee754_atan2+0x42>
 80263fc:	2100      	movs	r1, #0
 80263fe:	e7b4      	b.n	802636a <__ieee754_atan2+0x42>
 8026400:	4573      	cmp	r3, lr
 8026402:	d0d3      	beq.n	80263ac <__ieee754_atan2+0x84>
 8026404:	1a9b      	subs	r3, r3, r2
 8026406:	151b      	asrs	r3, r3, #20
 8026408:	2b3c      	cmp	r3, #60	; 0x3c
 802640a:	dc1e      	bgt.n	802644a <__ieee754_atan2+0x122>
 802640c:	2f00      	cmp	r7, #0
 802640e:	da01      	bge.n	8026414 <__ieee754_atan2+0xec>
 8026410:	333c      	adds	r3, #60	; 0x3c
 8026412:	db1e      	blt.n	8026452 <__ieee754_atan2+0x12a>
 8026414:	4632      	mov	r2, r6
 8026416:	463b      	mov	r3, r7
 8026418:	f7da fa20 	bl	800085c <__aeabi_ddiv>
 802641c:	ec41 0b10 	vmov	d0, r0, r1
 8026420:	f002 fbde 	bl	8028be0 <fabs>
 8026424:	f002 fa3c 	bl	80288a0 <atan>
 8026428:	ec51 0b10 	vmov	r0, r1, d0
 802642c:	2c01      	cmp	r4, #1
 802642e:	d013      	beq.n	8026458 <__ieee754_atan2+0x130>
 8026430:	2c02      	cmp	r4, #2
 8026432:	d015      	beq.n	8026460 <__ieee754_atan2+0x138>
 8026434:	2c00      	cmp	r4, #0
 8026436:	d098      	beq.n	802636a <__ieee754_atan2+0x42>
 8026438:	a321      	add	r3, pc, #132	; (adr r3, 80264c0 <__ieee754_atan2+0x198>)
 802643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802643e:	f7d9 ff2b 	bl	8000298 <__aeabi_dsub>
 8026442:	a321      	add	r3, pc, #132	; (adr r3, 80264c8 <__ieee754_atan2+0x1a0>)
 8026444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026448:	e014      	b.n	8026474 <__ieee754_atan2+0x14c>
 802644a:	a121      	add	r1, pc, #132	; (adr r1, 80264d0 <__ieee754_atan2+0x1a8>)
 802644c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8026450:	e7ec      	b.n	802642c <__ieee754_atan2+0x104>
 8026452:	2000      	movs	r0, #0
 8026454:	2100      	movs	r1, #0
 8026456:	e7e9      	b.n	802642c <__ieee754_atan2+0x104>
 8026458:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802645c:	4619      	mov	r1, r3
 802645e:	e784      	b.n	802636a <__ieee754_atan2+0x42>
 8026460:	a317      	add	r3, pc, #92	; (adr r3, 80264c0 <__ieee754_atan2+0x198>)
 8026462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026466:	f7d9 ff17 	bl	8000298 <__aeabi_dsub>
 802646a:	4602      	mov	r2, r0
 802646c:	460b      	mov	r3, r1
 802646e:	a116      	add	r1, pc, #88	; (adr r1, 80264c8 <__ieee754_atan2+0x1a0>)
 8026470:	e9d1 0100 	ldrd	r0, r1, [r1]
 8026474:	f7d9 ff10 	bl	8000298 <__aeabi_dsub>
 8026478:	e777      	b.n	802636a <__ieee754_atan2+0x42>
 802647a:	a117      	add	r1, pc, #92	; (adr r1, 80264d8 <__ieee754_atan2+0x1b0>)
 802647c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8026480:	e773      	b.n	802636a <__ieee754_atan2+0x42>
 8026482:	a111      	add	r1, pc, #68	; (adr r1, 80264c8 <__ieee754_atan2+0x1a0>)
 8026484:	e9d1 0100 	ldrd	r0, r1, [r1]
 8026488:	e76f      	b.n	802636a <__ieee754_atan2+0x42>
 802648a:	a111      	add	r1, pc, #68	; (adr r1, 80264d0 <__ieee754_atan2+0x1a8>)
 802648c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8026490:	e76b      	b.n	802636a <__ieee754_atan2+0x42>
 8026492:	bf00      	nop
 8026494:	f3af 8000 	nop.w
 8026498:	54442d18 	.word	0x54442d18
 802649c:	c00921fb 	.word	0xc00921fb
 80264a0:	54442d18 	.word	0x54442d18
 80264a4:	bff921fb 	.word	0xbff921fb
 80264a8:	54442d18 	.word	0x54442d18
 80264ac:	bfe921fb 	.word	0xbfe921fb
 80264b0:	7f3321d2 	.word	0x7f3321d2
 80264b4:	4002d97c 	.word	0x4002d97c
 80264b8:	7f3321d2 	.word	0x7f3321d2
 80264bc:	c002d97c 	.word	0xc002d97c
 80264c0:	33145c07 	.word	0x33145c07
 80264c4:	3ca1a626 	.word	0x3ca1a626
 80264c8:	54442d18 	.word	0x54442d18
 80264cc:	400921fb 	.word	0x400921fb
 80264d0:	54442d18 	.word	0x54442d18
 80264d4:	3ff921fb 	.word	0x3ff921fb
 80264d8:	54442d18 	.word	0x54442d18
 80264dc:	3fe921fb 	.word	0x3fe921fb
 80264e0:	7ff00000 	.word	0x7ff00000

080264e4 <__ieee754_fmod>:
 80264e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80264e8:	ec53 2b11 	vmov	r2, r3, d1
 80264ec:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 80264f0:	ea5e 0402 	orrs.w	r4, lr, r2
 80264f4:	ec51 0b10 	vmov	r0, r1, d0
 80264f8:	461e      	mov	r6, r3
 80264fa:	ee11 5a10 	vmov	r5, s2
 80264fe:	4694      	mov	ip, r2
 8026500:	d00c      	beq.n	802651c <__ieee754_fmod+0x38>
 8026502:	4c7a      	ldr	r4, [pc, #488]	; (80266ec <__ieee754_fmod+0x208>)
 8026504:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8026508:	45a0      	cmp	r8, r4
 802650a:	4689      	mov	r9, r1
 802650c:	dc06      	bgt.n	802651c <__ieee754_fmod+0x38>
 802650e:	4254      	negs	r4, r2
 8026510:	4314      	orrs	r4, r2
 8026512:	4f77      	ldr	r7, [pc, #476]	; (80266f0 <__ieee754_fmod+0x20c>)
 8026514:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8026518:	42bc      	cmp	r4, r7
 802651a:	d909      	bls.n	8026530 <__ieee754_fmod+0x4c>
 802651c:	f7da f874 	bl	8000608 <__aeabi_dmul>
 8026520:	4602      	mov	r2, r0
 8026522:	460b      	mov	r3, r1
 8026524:	f7da f99a 	bl	800085c <__aeabi_ddiv>
 8026528:	ec41 0b10 	vmov	d0, r0, r1
 802652c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026530:	45f0      	cmp	r8, lr
 8026532:	ee10 2a10 	vmov	r2, s0
 8026536:	4607      	mov	r7, r0
 8026538:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 802653c:	dc0a      	bgt.n	8026554 <__ieee754_fmod+0x70>
 802653e:	dbf3      	blt.n	8026528 <__ieee754_fmod+0x44>
 8026540:	42a8      	cmp	r0, r5
 8026542:	d3f1      	bcc.n	8026528 <__ieee754_fmod+0x44>
 8026544:	d106      	bne.n	8026554 <__ieee754_fmod+0x70>
 8026546:	496b      	ldr	r1, [pc, #428]	; (80266f4 <__ieee754_fmod+0x210>)
 8026548:	0fe4      	lsrs	r4, r4, #31
 802654a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 802654e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8026552:	e7e9      	b.n	8026528 <__ieee754_fmod+0x44>
 8026554:	4b68      	ldr	r3, [pc, #416]	; (80266f8 <__ieee754_fmod+0x214>)
 8026556:	4598      	cmp	r8, r3
 8026558:	dc49      	bgt.n	80265ee <__ieee754_fmod+0x10a>
 802655a:	f1b8 0f00 	cmp.w	r8, #0
 802655e:	d13d      	bne.n	80265dc <__ieee754_fmod+0xf8>
 8026560:	4866      	ldr	r0, [pc, #408]	; (80266fc <__ieee754_fmod+0x218>)
 8026562:	4611      	mov	r1, r2
 8026564:	2900      	cmp	r1, #0
 8026566:	dc36      	bgt.n	80265d6 <__ieee754_fmod+0xf2>
 8026568:	459e      	cmp	lr, r3
 802656a:	dc51      	bgt.n	8026610 <__ieee754_fmod+0x12c>
 802656c:	f1be 0f00 	cmp.w	lr, #0
 8026570:	d145      	bne.n	80265fe <__ieee754_fmod+0x11a>
 8026572:	4b62      	ldr	r3, [pc, #392]	; (80266fc <__ieee754_fmod+0x218>)
 8026574:	4629      	mov	r1, r5
 8026576:	2900      	cmp	r1, #0
 8026578:	dc3e      	bgt.n	80265f8 <__ieee754_fmod+0x114>
 802657a:	4961      	ldr	r1, [pc, #388]	; (8026700 <__ieee754_fmod+0x21c>)
 802657c:	4288      	cmp	r0, r1
 802657e:	db4c      	blt.n	802661a <__ieee754_fmod+0x136>
 8026580:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8026584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8026588:	4a5d      	ldr	r2, [pc, #372]	; (8026700 <__ieee754_fmod+0x21c>)
 802658a:	4293      	cmp	r3, r2
 802658c:	db59      	blt.n	8026642 <__ieee754_fmod+0x15e>
 802658e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8026592:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8026596:	1ac0      	subs	r0, r0, r3
 8026598:	1b8a      	subs	r2, r1, r6
 802659a:	eba7 050c 	sub.w	r5, r7, ip
 802659e:	2800      	cmp	r0, #0
 80265a0:	d166      	bne.n	8026670 <__ieee754_fmod+0x18c>
 80265a2:	4567      	cmp	r7, ip
 80265a4:	bf38      	it	cc
 80265a6:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80265aa:	2a00      	cmp	r2, #0
 80265ac:	bfbc      	itt	lt
 80265ae:	463d      	movlt	r5, r7
 80265b0:	460a      	movlt	r2, r1
 80265b2:	ea52 0105 	orrs.w	r1, r2, r5
 80265b6:	d0c6      	beq.n	8026546 <__ieee754_fmod+0x62>
 80265b8:	494f      	ldr	r1, [pc, #316]	; (80266f8 <__ieee754_fmod+0x214>)
 80265ba:	428a      	cmp	r2, r1
 80265bc:	dd6d      	ble.n	802669a <__ieee754_fmod+0x1b6>
 80265be:	4950      	ldr	r1, [pc, #320]	; (8026700 <__ieee754_fmod+0x21c>)
 80265c0:	428b      	cmp	r3, r1
 80265c2:	db70      	blt.n	80266a6 <__ieee754_fmod+0x1c2>
 80265c4:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 80265c8:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80265cc:	4314      	orrs	r4, r2
 80265ce:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 80265d2:	4628      	mov	r0, r5
 80265d4:	e7a8      	b.n	8026528 <__ieee754_fmod+0x44>
 80265d6:	3801      	subs	r0, #1
 80265d8:	0049      	lsls	r1, r1, #1
 80265da:	e7c3      	b.n	8026564 <__ieee754_fmod+0x80>
 80265dc:	4848      	ldr	r0, [pc, #288]	; (8026700 <__ieee754_fmod+0x21c>)
 80265de:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 80265e2:	0049      	lsls	r1, r1, #1
 80265e4:	2900      	cmp	r1, #0
 80265e6:	f100 30ff 	add.w	r0, r0, #4294967295
 80265ea:	dcfa      	bgt.n	80265e2 <__ieee754_fmod+0xfe>
 80265ec:	e7bc      	b.n	8026568 <__ieee754_fmod+0x84>
 80265ee:	ea4f 5028 	mov.w	r0, r8, asr #20
 80265f2:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80265f6:	e7b7      	b.n	8026568 <__ieee754_fmod+0x84>
 80265f8:	3b01      	subs	r3, #1
 80265fa:	0049      	lsls	r1, r1, #1
 80265fc:	e7bb      	b.n	8026576 <__ieee754_fmod+0x92>
 80265fe:	4b40      	ldr	r3, [pc, #256]	; (8026700 <__ieee754_fmod+0x21c>)
 8026600:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8026604:	0049      	lsls	r1, r1, #1
 8026606:	2900      	cmp	r1, #0
 8026608:	f103 33ff 	add.w	r3, r3, #4294967295
 802660c:	dcfa      	bgt.n	8026604 <__ieee754_fmod+0x120>
 802660e:	e7b4      	b.n	802657a <__ieee754_fmod+0x96>
 8026610:	ea4f 532e 	mov.w	r3, lr, asr #20
 8026614:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8026618:	e7af      	b.n	802657a <__ieee754_fmod+0x96>
 802661a:	1a0f      	subs	r7, r1, r0
 802661c:	2f1f      	cmp	r7, #31
 802661e:	dc0a      	bgt.n	8026636 <__ieee754_fmod+0x152>
 8026620:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8026624:	fa08 f807 	lsl.w	r8, r8, r7
 8026628:	fa22 f101 	lsr.w	r1, r2, r1
 802662c:	ea41 0108 	orr.w	r1, r1, r8
 8026630:	fa02 f707 	lsl.w	r7, r2, r7
 8026634:	e7a8      	b.n	8026588 <__ieee754_fmod+0xa4>
 8026636:	4933      	ldr	r1, [pc, #204]	; (8026704 <__ieee754_fmod+0x220>)
 8026638:	1a09      	subs	r1, r1, r0
 802663a:	fa02 f101 	lsl.w	r1, r2, r1
 802663e:	2700      	movs	r7, #0
 8026640:	e7a2      	b.n	8026588 <__ieee754_fmod+0xa4>
 8026642:	eba2 0c03 	sub.w	ip, r2, r3
 8026646:	f1bc 0f1f 	cmp.w	ip, #31
 802664a:	dc0a      	bgt.n	8026662 <__ieee754_fmod+0x17e>
 802664c:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8026650:	fa0e fe0c 	lsl.w	lr, lr, ip
 8026654:	fa25 f606 	lsr.w	r6, r5, r6
 8026658:	ea46 060e 	orr.w	r6, r6, lr
 802665c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8026660:	e799      	b.n	8026596 <__ieee754_fmod+0xb2>
 8026662:	4e28      	ldr	r6, [pc, #160]	; (8026704 <__ieee754_fmod+0x220>)
 8026664:	1af6      	subs	r6, r6, r3
 8026666:	fa05 f606 	lsl.w	r6, r5, r6
 802666a:	f04f 0c00 	mov.w	ip, #0
 802666e:	e792      	b.n	8026596 <__ieee754_fmod+0xb2>
 8026670:	4567      	cmp	r7, ip
 8026672:	bf38      	it	cc
 8026674:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8026678:	2a00      	cmp	r2, #0
 802667a:	da05      	bge.n	8026688 <__ieee754_fmod+0x1a4>
 802667c:	0ffa      	lsrs	r2, r7, #31
 802667e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8026682:	007f      	lsls	r7, r7, #1
 8026684:	3801      	subs	r0, #1
 8026686:	e787      	b.n	8026598 <__ieee754_fmod+0xb4>
 8026688:	ea52 0105 	orrs.w	r1, r2, r5
 802668c:	f43f af5b 	beq.w	8026546 <__ieee754_fmod+0x62>
 8026690:	0fe9      	lsrs	r1, r5, #31
 8026692:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8026696:	006f      	lsls	r7, r5, #1
 8026698:	e7f4      	b.n	8026684 <__ieee754_fmod+0x1a0>
 802669a:	0fe8      	lsrs	r0, r5, #31
 802669c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80266a0:	006d      	lsls	r5, r5, #1
 80266a2:	3b01      	subs	r3, #1
 80266a4:	e789      	b.n	80265ba <__ieee754_fmod+0xd6>
 80266a6:	1ac9      	subs	r1, r1, r3
 80266a8:	2914      	cmp	r1, #20
 80266aa:	dc0a      	bgt.n	80266c2 <__ieee754_fmod+0x1de>
 80266ac:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80266b0:	fa02 f303 	lsl.w	r3, r2, r3
 80266b4:	40cd      	lsrs	r5, r1
 80266b6:	432b      	orrs	r3, r5
 80266b8:	410a      	asrs	r2, r1
 80266ba:	ea42 0104 	orr.w	r1, r2, r4
 80266be:	4618      	mov	r0, r3
 80266c0:	e732      	b.n	8026528 <__ieee754_fmod+0x44>
 80266c2:	291f      	cmp	r1, #31
 80266c4:	dc07      	bgt.n	80266d6 <__ieee754_fmod+0x1f2>
 80266c6:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80266ca:	40cd      	lsrs	r5, r1
 80266cc:	fa02 f303 	lsl.w	r3, r2, r3
 80266d0:	432b      	orrs	r3, r5
 80266d2:	4622      	mov	r2, r4
 80266d4:	e7f1      	b.n	80266ba <__ieee754_fmod+0x1d6>
 80266d6:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80266da:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80266de:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80266e2:	33e2      	adds	r3, #226	; 0xe2
 80266e4:	fa42 f303 	asr.w	r3, r2, r3
 80266e8:	e7f3      	b.n	80266d2 <__ieee754_fmod+0x1ee>
 80266ea:	bf00      	nop
 80266ec:	7fefffff 	.word	0x7fefffff
 80266f0:	7ff00000 	.word	0x7ff00000
 80266f4:	0802e7c8 	.word	0x0802e7c8
 80266f8:	000fffff 	.word	0x000fffff
 80266fc:	fffffbed 	.word	0xfffffbed
 8026700:	fffffc02 	.word	0xfffffc02
 8026704:	fffffbe2 	.word	0xfffffbe2

08026708 <__ieee754_pow>:
 8026708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802670c:	b091      	sub	sp, #68	; 0x44
 802670e:	ed8d 1b00 	vstr	d1, [sp]
 8026712:	e9dd 2900 	ldrd	r2, r9, [sp]
 8026716:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 802671a:	ea58 0302 	orrs.w	r3, r8, r2
 802671e:	ec57 6b10 	vmov	r6, r7, d0
 8026722:	f000 84be 	beq.w	80270a2 <__ieee754_pow+0x99a>
 8026726:	4b7a      	ldr	r3, [pc, #488]	; (8026910 <__ieee754_pow+0x208>)
 8026728:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 802672c:	429c      	cmp	r4, r3
 802672e:	463d      	mov	r5, r7
 8026730:	ee10 aa10 	vmov	sl, s0
 8026734:	dc09      	bgt.n	802674a <__ieee754_pow+0x42>
 8026736:	d103      	bne.n	8026740 <__ieee754_pow+0x38>
 8026738:	b93e      	cbnz	r6, 802674a <__ieee754_pow+0x42>
 802673a:	45a0      	cmp	r8, r4
 802673c:	dc0d      	bgt.n	802675a <__ieee754_pow+0x52>
 802673e:	e001      	b.n	8026744 <__ieee754_pow+0x3c>
 8026740:	4598      	cmp	r8, r3
 8026742:	dc02      	bgt.n	802674a <__ieee754_pow+0x42>
 8026744:	4598      	cmp	r8, r3
 8026746:	d10e      	bne.n	8026766 <__ieee754_pow+0x5e>
 8026748:	b16a      	cbz	r2, 8026766 <__ieee754_pow+0x5e>
 802674a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802674e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8026752:	ea54 030a 	orrs.w	r3, r4, sl
 8026756:	f000 84a4 	beq.w	80270a2 <__ieee754_pow+0x99a>
 802675a:	486e      	ldr	r0, [pc, #440]	; (8026914 <__ieee754_pow+0x20c>)
 802675c:	b011      	add	sp, #68	; 0x44
 802675e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026762:	f002 ba51 	b.w	8028c08 <nan>
 8026766:	2d00      	cmp	r5, #0
 8026768:	da53      	bge.n	8026812 <__ieee754_pow+0x10a>
 802676a:	4b6b      	ldr	r3, [pc, #428]	; (8026918 <__ieee754_pow+0x210>)
 802676c:	4598      	cmp	r8, r3
 802676e:	dc4d      	bgt.n	802680c <__ieee754_pow+0x104>
 8026770:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8026774:	4598      	cmp	r8, r3
 8026776:	dd4c      	ble.n	8026812 <__ieee754_pow+0x10a>
 8026778:	ea4f 5328 	mov.w	r3, r8, asr #20
 802677c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8026780:	2b14      	cmp	r3, #20
 8026782:	dd26      	ble.n	80267d2 <__ieee754_pow+0xca>
 8026784:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8026788:	fa22 f103 	lsr.w	r1, r2, r3
 802678c:	fa01 f303 	lsl.w	r3, r1, r3
 8026790:	4293      	cmp	r3, r2
 8026792:	d13e      	bne.n	8026812 <__ieee754_pow+0x10a>
 8026794:	f001 0101 	and.w	r1, r1, #1
 8026798:	f1c1 0b02 	rsb	fp, r1, #2
 802679c:	2a00      	cmp	r2, #0
 802679e:	d15b      	bne.n	8026858 <__ieee754_pow+0x150>
 80267a0:	4b5b      	ldr	r3, [pc, #364]	; (8026910 <__ieee754_pow+0x208>)
 80267a2:	4598      	cmp	r8, r3
 80267a4:	d124      	bne.n	80267f0 <__ieee754_pow+0xe8>
 80267a6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80267aa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80267ae:	ea53 030a 	orrs.w	r3, r3, sl
 80267b2:	f000 8476 	beq.w	80270a2 <__ieee754_pow+0x99a>
 80267b6:	4b59      	ldr	r3, [pc, #356]	; (802691c <__ieee754_pow+0x214>)
 80267b8:	429c      	cmp	r4, r3
 80267ba:	dd2d      	ble.n	8026818 <__ieee754_pow+0x110>
 80267bc:	f1b9 0f00 	cmp.w	r9, #0
 80267c0:	f280 8473 	bge.w	80270aa <__ieee754_pow+0x9a2>
 80267c4:	2000      	movs	r0, #0
 80267c6:	2100      	movs	r1, #0
 80267c8:	ec41 0b10 	vmov	d0, r0, r1
 80267cc:	b011      	add	sp, #68	; 0x44
 80267ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80267d2:	2a00      	cmp	r2, #0
 80267d4:	d13e      	bne.n	8026854 <__ieee754_pow+0x14c>
 80267d6:	f1c3 0314 	rsb	r3, r3, #20
 80267da:	fa48 f103 	asr.w	r1, r8, r3
 80267de:	fa01 f303 	lsl.w	r3, r1, r3
 80267e2:	4543      	cmp	r3, r8
 80267e4:	f040 8469 	bne.w	80270ba <__ieee754_pow+0x9b2>
 80267e8:	f001 0101 	and.w	r1, r1, #1
 80267ec:	f1c1 0b02 	rsb	fp, r1, #2
 80267f0:	4b4b      	ldr	r3, [pc, #300]	; (8026920 <__ieee754_pow+0x218>)
 80267f2:	4598      	cmp	r8, r3
 80267f4:	d118      	bne.n	8026828 <__ieee754_pow+0x120>
 80267f6:	f1b9 0f00 	cmp.w	r9, #0
 80267fa:	f280 845a 	bge.w	80270b2 <__ieee754_pow+0x9aa>
 80267fe:	4948      	ldr	r1, [pc, #288]	; (8026920 <__ieee754_pow+0x218>)
 8026800:	4632      	mov	r2, r6
 8026802:	463b      	mov	r3, r7
 8026804:	2000      	movs	r0, #0
 8026806:	f7da f829 	bl	800085c <__aeabi_ddiv>
 802680a:	e7dd      	b.n	80267c8 <__ieee754_pow+0xc0>
 802680c:	f04f 0b02 	mov.w	fp, #2
 8026810:	e7c4      	b.n	802679c <__ieee754_pow+0x94>
 8026812:	f04f 0b00 	mov.w	fp, #0
 8026816:	e7c1      	b.n	802679c <__ieee754_pow+0x94>
 8026818:	f1b9 0f00 	cmp.w	r9, #0
 802681c:	dad2      	bge.n	80267c4 <__ieee754_pow+0xbc>
 802681e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8026822:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8026826:	e7cf      	b.n	80267c8 <__ieee754_pow+0xc0>
 8026828:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 802682c:	d106      	bne.n	802683c <__ieee754_pow+0x134>
 802682e:	4632      	mov	r2, r6
 8026830:	463b      	mov	r3, r7
 8026832:	4610      	mov	r0, r2
 8026834:	4619      	mov	r1, r3
 8026836:	f7d9 fee7 	bl	8000608 <__aeabi_dmul>
 802683a:	e7c5      	b.n	80267c8 <__ieee754_pow+0xc0>
 802683c:	4b39      	ldr	r3, [pc, #228]	; (8026924 <__ieee754_pow+0x21c>)
 802683e:	4599      	cmp	r9, r3
 8026840:	d10a      	bne.n	8026858 <__ieee754_pow+0x150>
 8026842:	2d00      	cmp	r5, #0
 8026844:	db08      	blt.n	8026858 <__ieee754_pow+0x150>
 8026846:	ec47 6b10 	vmov	d0, r6, r7
 802684a:	b011      	add	sp, #68	; 0x44
 802684c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026850:	f000 be5c 	b.w	802750c <__ieee754_sqrt>
 8026854:	f04f 0b00 	mov.w	fp, #0
 8026858:	ec47 6b10 	vmov	d0, r6, r7
 802685c:	f002 f9c0 	bl	8028be0 <fabs>
 8026860:	ec51 0b10 	vmov	r0, r1, d0
 8026864:	f1ba 0f00 	cmp.w	sl, #0
 8026868:	d127      	bne.n	80268ba <__ieee754_pow+0x1b2>
 802686a:	b124      	cbz	r4, 8026876 <__ieee754_pow+0x16e>
 802686c:	4b2c      	ldr	r3, [pc, #176]	; (8026920 <__ieee754_pow+0x218>)
 802686e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8026872:	429a      	cmp	r2, r3
 8026874:	d121      	bne.n	80268ba <__ieee754_pow+0x1b2>
 8026876:	f1b9 0f00 	cmp.w	r9, #0
 802687a:	da05      	bge.n	8026888 <__ieee754_pow+0x180>
 802687c:	4602      	mov	r2, r0
 802687e:	460b      	mov	r3, r1
 8026880:	2000      	movs	r0, #0
 8026882:	4927      	ldr	r1, [pc, #156]	; (8026920 <__ieee754_pow+0x218>)
 8026884:	f7d9 ffea 	bl	800085c <__aeabi_ddiv>
 8026888:	2d00      	cmp	r5, #0
 802688a:	da9d      	bge.n	80267c8 <__ieee754_pow+0xc0>
 802688c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8026890:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8026894:	ea54 030b 	orrs.w	r3, r4, fp
 8026898:	d108      	bne.n	80268ac <__ieee754_pow+0x1a4>
 802689a:	4602      	mov	r2, r0
 802689c:	460b      	mov	r3, r1
 802689e:	4610      	mov	r0, r2
 80268a0:	4619      	mov	r1, r3
 80268a2:	f7d9 fcf9 	bl	8000298 <__aeabi_dsub>
 80268a6:	4602      	mov	r2, r0
 80268a8:	460b      	mov	r3, r1
 80268aa:	e7ac      	b.n	8026806 <__ieee754_pow+0xfe>
 80268ac:	f1bb 0f01 	cmp.w	fp, #1
 80268b0:	d18a      	bne.n	80267c8 <__ieee754_pow+0xc0>
 80268b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80268b6:	4619      	mov	r1, r3
 80268b8:	e786      	b.n	80267c8 <__ieee754_pow+0xc0>
 80268ba:	0fed      	lsrs	r5, r5, #31
 80268bc:	1e6b      	subs	r3, r5, #1
 80268be:	930d      	str	r3, [sp, #52]	; 0x34
 80268c0:	ea5b 0303 	orrs.w	r3, fp, r3
 80268c4:	d102      	bne.n	80268cc <__ieee754_pow+0x1c4>
 80268c6:	4632      	mov	r2, r6
 80268c8:	463b      	mov	r3, r7
 80268ca:	e7e8      	b.n	802689e <__ieee754_pow+0x196>
 80268cc:	4b16      	ldr	r3, [pc, #88]	; (8026928 <__ieee754_pow+0x220>)
 80268ce:	4598      	cmp	r8, r3
 80268d0:	f340 80fe 	ble.w	8026ad0 <__ieee754_pow+0x3c8>
 80268d4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80268d8:	4598      	cmp	r8, r3
 80268da:	dd0a      	ble.n	80268f2 <__ieee754_pow+0x1ea>
 80268dc:	4b0f      	ldr	r3, [pc, #60]	; (802691c <__ieee754_pow+0x214>)
 80268de:	429c      	cmp	r4, r3
 80268e0:	dc0d      	bgt.n	80268fe <__ieee754_pow+0x1f6>
 80268e2:	f1b9 0f00 	cmp.w	r9, #0
 80268e6:	f6bf af6d 	bge.w	80267c4 <__ieee754_pow+0xbc>
 80268ea:	a307      	add	r3, pc, #28	; (adr r3, 8026908 <__ieee754_pow+0x200>)
 80268ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80268f0:	e79f      	b.n	8026832 <__ieee754_pow+0x12a>
 80268f2:	4b0e      	ldr	r3, [pc, #56]	; (802692c <__ieee754_pow+0x224>)
 80268f4:	429c      	cmp	r4, r3
 80268f6:	ddf4      	ble.n	80268e2 <__ieee754_pow+0x1da>
 80268f8:	4b09      	ldr	r3, [pc, #36]	; (8026920 <__ieee754_pow+0x218>)
 80268fa:	429c      	cmp	r4, r3
 80268fc:	dd18      	ble.n	8026930 <__ieee754_pow+0x228>
 80268fe:	f1b9 0f00 	cmp.w	r9, #0
 8026902:	dcf2      	bgt.n	80268ea <__ieee754_pow+0x1e2>
 8026904:	e75e      	b.n	80267c4 <__ieee754_pow+0xbc>
 8026906:	bf00      	nop
 8026908:	8800759c 	.word	0x8800759c
 802690c:	7e37e43c 	.word	0x7e37e43c
 8026910:	7ff00000 	.word	0x7ff00000
 8026914:	0802ee3b 	.word	0x0802ee3b
 8026918:	433fffff 	.word	0x433fffff
 802691c:	3fefffff 	.word	0x3fefffff
 8026920:	3ff00000 	.word	0x3ff00000
 8026924:	3fe00000 	.word	0x3fe00000
 8026928:	41e00000 	.word	0x41e00000
 802692c:	3feffffe 	.word	0x3feffffe
 8026930:	2200      	movs	r2, #0
 8026932:	4b63      	ldr	r3, [pc, #396]	; (8026ac0 <__ieee754_pow+0x3b8>)
 8026934:	f7d9 fcb0 	bl	8000298 <__aeabi_dsub>
 8026938:	a355      	add	r3, pc, #340	; (adr r3, 8026a90 <__ieee754_pow+0x388>)
 802693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802693e:	4604      	mov	r4, r0
 8026940:	460d      	mov	r5, r1
 8026942:	f7d9 fe61 	bl	8000608 <__aeabi_dmul>
 8026946:	a354      	add	r3, pc, #336	; (adr r3, 8026a98 <__ieee754_pow+0x390>)
 8026948:	e9d3 2300 	ldrd	r2, r3, [r3]
 802694c:	4606      	mov	r6, r0
 802694e:	460f      	mov	r7, r1
 8026950:	4620      	mov	r0, r4
 8026952:	4629      	mov	r1, r5
 8026954:	f7d9 fe58 	bl	8000608 <__aeabi_dmul>
 8026958:	2200      	movs	r2, #0
 802695a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802695e:	4b59      	ldr	r3, [pc, #356]	; (8026ac4 <__ieee754_pow+0x3bc>)
 8026960:	4620      	mov	r0, r4
 8026962:	4629      	mov	r1, r5
 8026964:	f7d9 fe50 	bl	8000608 <__aeabi_dmul>
 8026968:	4602      	mov	r2, r0
 802696a:	460b      	mov	r3, r1
 802696c:	a14c      	add	r1, pc, #304	; (adr r1, 8026aa0 <__ieee754_pow+0x398>)
 802696e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8026972:	f7d9 fc91 	bl	8000298 <__aeabi_dsub>
 8026976:	4622      	mov	r2, r4
 8026978:	462b      	mov	r3, r5
 802697a:	f7d9 fe45 	bl	8000608 <__aeabi_dmul>
 802697e:	4602      	mov	r2, r0
 8026980:	460b      	mov	r3, r1
 8026982:	2000      	movs	r0, #0
 8026984:	4950      	ldr	r1, [pc, #320]	; (8026ac8 <__ieee754_pow+0x3c0>)
 8026986:	f7d9 fc87 	bl	8000298 <__aeabi_dsub>
 802698a:	4622      	mov	r2, r4
 802698c:	462b      	mov	r3, r5
 802698e:	4680      	mov	r8, r0
 8026990:	4689      	mov	r9, r1
 8026992:	4620      	mov	r0, r4
 8026994:	4629      	mov	r1, r5
 8026996:	f7d9 fe37 	bl	8000608 <__aeabi_dmul>
 802699a:	4602      	mov	r2, r0
 802699c:	460b      	mov	r3, r1
 802699e:	4640      	mov	r0, r8
 80269a0:	4649      	mov	r1, r9
 80269a2:	f7d9 fe31 	bl	8000608 <__aeabi_dmul>
 80269a6:	a340      	add	r3, pc, #256	; (adr r3, 8026aa8 <__ieee754_pow+0x3a0>)
 80269a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80269ac:	f7d9 fe2c 	bl	8000608 <__aeabi_dmul>
 80269b0:	4602      	mov	r2, r0
 80269b2:	460b      	mov	r3, r1
 80269b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80269b8:	f7d9 fc6e 	bl	8000298 <__aeabi_dsub>
 80269bc:	4602      	mov	r2, r0
 80269be:	460b      	mov	r3, r1
 80269c0:	4604      	mov	r4, r0
 80269c2:	460d      	mov	r5, r1
 80269c4:	4630      	mov	r0, r6
 80269c6:	4639      	mov	r1, r7
 80269c8:	f7d9 fc68 	bl	800029c <__adddf3>
 80269cc:	2000      	movs	r0, #0
 80269ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80269d2:	4632      	mov	r2, r6
 80269d4:	463b      	mov	r3, r7
 80269d6:	f7d9 fc5f 	bl	8000298 <__aeabi_dsub>
 80269da:	4602      	mov	r2, r0
 80269dc:	460b      	mov	r3, r1
 80269de:	4620      	mov	r0, r4
 80269e0:	4629      	mov	r1, r5
 80269e2:	f7d9 fc59 	bl	8000298 <__aeabi_dsub>
 80269e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80269e8:	f10b 33ff 	add.w	r3, fp, #4294967295
 80269ec:	4313      	orrs	r3, r2
 80269ee:	4606      	mov	r6, r0
 80269f0:	460f      	mov	r7, r1
 80269f2:	f040 81eb 	bne.w	8026dcc <__ieee754_pow+0x6c4>
 80269f6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8026ab0 <__ieee754_pow+0x3a8>
 80269fa:	e9dd 4500 	ldrd	r4, r5, [sp]
 80269fe:	2400      	movs	r4, #0
 8026a00:	4622      	mov	r2, r4
 8026a02:	462b      	mov	r3, r5
 8026a04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026a08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8026a0c:	f7d9 fc44 	bl	8000298 <__aeabi_dsub>
 8026a10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8026a14:	f7d9 fdf8 	bl	8000608 <__aeabi_dmul>
 8026a18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026a1c:	4680      	mov	r8, r0
 8026a1e:	4689      	mov	r9, r1
 8026a20:	4630      	mov	r0, r6
 8026a22:	4639      	mov	r1, r7
 8026a24:	f7d9 fdf0 	bl	8000608 <__aeabi_dmul>
 8026a28:	4602      	mov	r2, r0
 8026a2a:	460b      	mov	r3, r1
 8026a2c:	4640      	mov	r0, r8
 8026a2e:	4649      	mov	r1, r9
 8026a30:	f7d9 fc34 	bl	800029c <__adddf3>
 8026a34:	4622      	mov	r2, r4
 8026a36:	462b      	mov	r3, r5
 8026a38:	4680      	mov	r8, r0
 8026a3a:	4689      	mov	r9, r1
 8026a3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8026a40:	f7d9 fde2 	bl	8000608 <__aeabi_dmul>
 8026a44:	460b      	mov	r3, r1
 8026a46:	4604      	mov	r4, r0
 8026a48:	460d      	mov	r5, r1
 8026a4a:	4602      	mov	r2, r0
 8026a4c:	4649      	mov	r1, r9
 8026a4e:	4640      	mov	r0, r8
 8026a50:	e9cd 4500 	strd	r4, r5, [sp]
 8026a54:	f7d9 fc22 	bl	800029c <__adddf3>
 8026a58:	4b1c      	ldr	r3, [pc, #112]	; (8026acc <__ieee754_pow+0x3c4>)
 8026a5a:	4299      	cmp	r1, r3
 8026a5c:	4606      	mov	r6, r0
 8026a5e:	460f      	mov	r7, r1
 8026a60:	468b      	mov	fp, r1
 8026a62:	f340 82f7 	ble.w	8027054 <__ieee754_pow+0x94c>
 8026a66:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8026a6a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8026a6e:	4303      	orrs	r3, r0
 8026a70:	f000 81ea 	beq.w	8026e48 <__ieee754_pow+0x740>
 8026a74:	a310      	add	r3, pc, #64	; (adr r3, 8026ab8 <__ieee754_pow+0x3b0>)
 8026a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026a7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8026a7e:	f7d9 fdc3 	bl	8000608 <__aeabi_dmul>
 8026a82:	a30d      	add	r3, pc, #52	; (adr r3, 8026ab8 <__ieee754_pow+0x3b0>)
 8026a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026a88:	e6d5      	b.n	8026836 <__ieee754_pow+0x12e>
 8026a8a:	bf00      	nop
 8026a8c:	f3af 8000 	nop.w
 8026a90:	60000000 	.word	0x60000000
 8026a94:	3ff71547 	.word	0x3ff71547
 8026a98:	f85ddf44 	.word	0xf85ddf44
 8026a9c:	3e54ae0b 	.word	0x3e54ae0b
 8026aa0:	55555555 	.word	0x55555555
 8026aa4:	3fd55555 	.word	0x3fd55555
 8026aa8:	652b82fe 	.word	0x652b82fe
 8026aac:	3ff71547 	.word	0x3ff71547
 8026ab0:	00000000 	.word	0x00000000
 8026ab4:	bff00000 	.word	0xbff00000
 8026ab8:	8800759c 	.word	0x8800759c
 8026abc:	7e37e43c 	.word	0x7e37e43c
 8026ac0:	3ff00000 	.word	0x3ff00000
 8026ac4:	3fd00000 	.word	0x3fd00000
 8026ac8:	3fe00000 	.word	0x3fe00000
 8026acc:	408fffff 	.word	0x408fffff
 8026ad0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8026ad4:	f04f 0200 	mov.w	r2, #0
 8026ad8:	da05      	bge.n	8026ae6 <__ieee754_pow+0x3de>
 8026ada:	4bd3      	ldr	r3, [pc, #844]	; (8026e28 <__ieee754_pow+0x720>)
 8026adc:	f7d9 fd94 	bl	8000608 <__aeabi_dmul>
 8026ae0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8026ae4:	460c      	mov	r4, r1
 8026ae6:	1523      	asrs	r3, r4, #20
 8026ae8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8026aec:	4413      	add	r3, r2
 8026aee:	9309      	str	r3, [sp, #36]	; 0x24
 8026af0:	4bce      	ldr	r3, [pc, #824]	; (8026e2c <__ieee754_pow+0x724>)
 8026af2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8026af6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8026afa:	429c      	cmp	r4, r3
 8026afc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8026b00:	dd08      	ble.n	8026b14 <__ieee754_pow+0x40c>
 8026b02:	4bcb      	ldr	r3, [pc, #812]	; (8026e30 <__ieee754_pow+0x728>)
 8026b04:	429c      	cmp	r4, r3
 8026b06:	f340 815e 	ble.w	8026dc6 <__ieee754_pow+0x6be>
 8026b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026b0c:	3301      	adds	r3, #1
 8026b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8026b10:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8026b14:	f04f 0a00 	mov.w	sl, #0
 8026b18:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8026b1c:	930c      	str	r3, [sp, #48]	; 0x30
 8026b1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026b20:	4bc4      	ldr	r3, [pc, #784]	; (8026e34 <__ieee754_pow+0x72c>)
 8026b22:	4413      	add	r3, r2
 8026b24:	ed93 7b00 	vldr	d7, [r3]
 8026b28:	4629      	mov	r1, r5
 8026b2a:	ec53 2b17 	vmov	r2, r3, d7
 8026b2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8026b32:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8026b36:	f7d9 fbaf 	bl	8000298 <__aeabi_dsub>
 8026b3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8026b3e:	4606      	mov	r6, r0
 8026b40:	460f      	mov	r7, r1
 8026b42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8026b46:	f7d9 fba9 	bl	800029c <__adddf3>
 8026b4a:	4602      	mov	r2, r0
 8026b4c:	460b      	mov	r3, r1
 8026b4e:	2000      	movs	r0, #0
 8026b50:	49b9      	ldr	r1, [pc, #740]	; (8026e38 <__ieee754_pow+0x730>)
 8026b52:	f7d9 fe83 	bl	800085c <__aeabi_ddiv>
 8026b56:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8026b5a:	4602      	mov	r2, r0
 8026b5c:	460b      	mov	r3, r1
 8026b5e:	4630      	mov	r0, r6
 8026b60:	4639      	mov	r1, r7
 8026b62:	f7d9 fd51 	bl	8000608 <__aeabi_dmul>
 8026b66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8026b6a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8026b6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8026b72:	2300      	movs	r3, #0
 8026b74:	9302      	str	r3, [sp, #8]
 8026b76:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8026b7a:	106d      	asrs	r5, r5, #1
 8026b7c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8026b80:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8026b84:	2200      	movs	r2, #0
 8026b86:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8026b8a:	4640      	mov	r0, r8
 8026b8c:	4649      	mov	r1, r9
 8026b8e:	4614      	mov	r4, r2
 8026b90:	461d      	mov	r5, r3
 8026b92:	f7d9 fd39 	bl	8000608 <__aeabi_dmul>
 8026b96:	4602      	mov	r2, r0
 8026b98:	460b      	mov	r3, r1
 8026b9a:	4630      	mov	r0, r6
 8026b9c:	4639      	mov	r1, r7
 8026b9e:	f7d9 fb7b 	bl	8000298 <__aeabi_dsub>
 8026ba2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8026ba6:	4606      	mov	r6, r0
 8026ba8:	460f      	mov	r7, r1
 8026baa:	4620      	mov	r0, r4
 8026bac:	4629      	mov	r1, r5
 8026bae:	f7d9 fb73 	bl	8000298 <__aeabi_dsub>
 8026bb2:	4602      	mov	r2, r0
 8026bb4:	460b      	mov	r3, r1
 8026bb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8026bba:	f7d9 fb6d 	bl	8000298 <__aeabi_dsub>
 8026bbe:	4642      	mov	r2, r8
 8026bc0:	464b      	mov	r3, r9
 8026bc2:	f7d9 fd21 	bl	8000608 <__aeabi_dmul>
 8026bc6:	4602      	mov	r2, r0
 8026bc8:	460b      	mov	r3, r1
 8026bca:	4630      	mov	r0, r6
 8026bcc:	4639      	mov	r1, r7
 8026bce:	f7d9 fb63 	bl	8000298 <__aeabi_dsub>
 8026bd2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8026bd6:	f7d9 fd17 	bl	8000608 <__aeabi_dmul>
 8026bda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8026bde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8026be2:	4610      	mov	r0, r2
 8026be4:	4619      	mov	r1, r3
 8026be6:	f7d9 fd0f 	bl	8000608 <__aeabi_dmul>
 8026bea:	a37b      	add	r3, pc, #492	; (adr r3, 8026dd8 <__ieee754_pow+0x6d0>)
 8026bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026bf0:	4604      	mov	r4, r0
 8026bf2:	460d      	mov	r5, r1
 8026bf4:	f7d9 fd08 	bl	8000608 <__aeabi_dmul>
 8026bf8:	a379      	add	r3, pc, #484	; (adr r3, 8026de0 <__ieee754_pow+0x6d8>)
 8026bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026bfe:	f7d9 fb4d 	bl	800029c <__adddf3>
 8026c02:	4622      	mov	r2, r4
 8026c04:	462b      	mov	r3, r5
 8026c06:	f7d9 fcff 	bl	8000608 <__aeabi_dmul>
 8026c0a:	a377      	add	r3, pc, #476	; (adr r3, 8026de8 <__ieee754_pow+0x6e0>)
 8026c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026c10:	f7d9 fb44 	bl	800029c <__adddf3>
 8026c14:	4622      	mov	r2, r4
 8026c16:	462b      	mov	r3, r5
 8026c18:	f7d9 fcf6 	bl	8000608 <__aeabi_dmul>
 8026c1c:	a374      	add	r3, pc, #464	; (adr r3, 8026df0 <__ieee754_pow+0x6e8>)
 8026c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026c22:	f7d9 fb3b 	bl	800029c <__adddf3>
 8026c26:	4622      	mov	r2, r4
 8026c28:	462b      	mov	r3, r5
 8026c2a:	f7d9 fced 	bl	8000608 <__aeabi_dmul>
 8026c2e:	a372      	add	r3, pc, #456	; (adr r3, 8026df8 <__ieee754_pow+0x6f0>)
 8026c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026c34:	f7d9 fb32 	bl	800029c <__adddf3>
 8026c38:	4622      	mov	r2, r4
 8026c3a:	462b      	mov	r3, r5
 8026c3c:	f7d9 fce4 	bl	8000608 <__aeabi_dmul>
 8026c40:	a36f      	add	r3, pc, #444	; (adr r3, 8026e00 <__ieee754_pow+0x6f8>)
 8026c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026c46:	f7d9 fb29 	bl	800029c <__adddf3>
 8026c4a:	4622      	mov	r2, r4
 8026c4c:	4606      	mov	r6, r0
 8026c4e:	460f      	mov	r7, r1
 8026c50:	462b      	mov	r3, r5
 8026c52:	4620      	mov	r0, r4
 8026c54:	4629      	mov	r1, r5
 8026c56:	f7d9 fcd7 	bl	8000608 <__aeabi_dmul>
 8026c5a:	4602      	mov	r2, r0
 8026c5c:	460b      	mov	r3, r1
 8026c5e:	4630      	mov	r0, r6
 8026c60:	4639      	mov	r1, r7
 8026c62:	f7d9 fcd1 	bl	8000608 <__aeabi_dmul>
 8026c66:	4642      	mov	r2, r8
 8026c68:	4604      	mov	r4, r0
 8026c6a:	460d      	mov	r5, r1
 8026c6c:	464b      	mov	r3, r9
 8026c6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8026c72:	f7d9 fb13 	bl	800029c <__adddf3>
 8026c76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8026c7a:	f7d9 fcc5 	bl	8000608 <__aeabi_dmul>
 8026c7e:	4622      	mov	r2, r4
 8026c80:	462b      	mov	r3, r5
 8026c82:	f7d9 fb0b 	bl	800029c <__adddf3>
 8026c86:	4642      	mov	r2, r8
 8026c88:	4606      	mov	r6, r0
 8026c8a:	460f      	mov	r7, r1
 8026c8c:	464b      	mov	r3, r9
 8026c8e:	4640      	mov	r0, r8
 8026c90:	4649      	mov	r1, r9
 8026c92:	f7d9 fcb9 	bl	8000608 <__aeabi_dmul>
 8026c96:	2200      	movs	r2, #0
 8026c98:	4b68      	ldr	r3, [pc, #416]	; (8026e3c <__ieee754_pow+0x734>)
 8026c9a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8026c9e:	f7d9 fafd 	bl	800029c <__adddf3>
 8026ca2:	4632      	mov	r2, r6
 8026ca4:	463b      	mov	r3, r7
 8026ca6:	f7d9 faf9 	bl	800029c <__adddf3>
 8026caa:	9802      	ldr	r0, [sp, #8]
 8026cac:	460d      	mov	r5, r1
 8026cae:	4604      	mov	r4, r0
 8026cb0:	4602      	mov	r2, r0
 8026cb2:	460b      	mov	r3, r1
 8026cb4:	4640      	mov	r0, r8
 8026cb6:	4649      	mov	r1, r9
 8026cb8:	f7d9 fca6 	bl	8000608 <__aeabi_dmul>
 8026cbc:	2200      	movs	r2, #0
 8026cbe:	4680      	mov	r8, r0
 8026cc0:	4689      	mov	r9, r1
 8026cc2:	4b5e      	ldr	r3, [pc, #376]	; (8026e3c <__ieee754_pow+0x734>)
 8026cc4:	4620      	mov	r0, r4
 8026cc6:	4629      	mov	r1, r5
 8026cc8:	f7d9 fae6 	bl	8000298 <__aeabi_dsub>
 8026ccc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8026cd0:	f7d9 fae2 	bl	8000298 <__aeabi_dsub>
 8026cd4:	4602      	mov	r2, r0
 8026cd6:	460b      	mov	r3, r1
 8026cd8:	4630      	mov	r0, r6
 8026cda:	4639      	mov	r1, r7
 8026cdc:	f7d9 fadc 	bl	8000298 <__aeabi_dsub>
 8026ce0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8026ce4:	f7d9 fc90 	bl	8000608 <__aeabi_dmul>
 8026ce8:	4622      	mov	r2, r4
 8026cea:	4606      	mov	r6, r0
 8026cec:	460f      	mov	r7, r1
 8026cee:	462b      	mov	r3, r5
 8026cf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8026cf4:	f7d9 fc88 	bl	8000608 <__aeabi_dmul>
 8026cf8:	4602      	mov	r2, r0
 8026cfa:	460b      	mov	r3, r1
 8026cfc:	4630      	mov	r0, r6
 8026cfe:	4639      	mov	r1, r7
 8026d00:	f7d9 facc 	bl	800029c <__adddf3>
 8026d04:	4606      	mov	r6, r0
 8026d06:	460f      	mov	r7, r1
 8026d08:	4602      	mov	r2, r0
 8026d0a:	460b      	mov	r3, r1
 8026d0c:	4640      	mov	r0, r8
 8026d0e:	4649      	mov	r1, r9
 8026d10:	f7d9 fac4 	bl	800029c <__adddf3>
 8026d14:	9802      	ldr	r0, [sp, #8]
 8026d16:	a33c      	add	r3, pc, #240	; (adr r3, 8026e08 <__ieee754_pow+0x700>)
 8026d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026d1c:	4604      	mov	r4, r0
 8026d1e:	460d      	mov	r5, r1
 8026d20:	f7d9 fc72 	bl	8000608 <__aeabi_dmul>
 8026d24:	4642      	mov	r2, r8
 8026d26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8026d2a:	464b      	mov	r3, r9
 8026d2c:	4620      	mov	r0, r4
 8026d2e:	4629      	mov	r1, r5
 8026d30:	f7d9 fab2 	bl	8000298 <__aeabi_dsub>
 8026d34:	4602      	mov	r2, r0
 8026d36:	460b      	mov	r3, r1
 8026d38:	4630      	mov	r0, r6
 8026d3a:	4639      	mov	r1, r7
 8026d3c:	f7d9 faac 	bl	8000298 <__aeabi_dsub>
 8026d40:	a333      	add	r3, pc, #204	; (adr r3, 8026e10 <__ieee754_pow+0x708>)
 8026d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026d46:	f7d9 fc5f 	bl	8000608 <__aeabi_dmul>
 8026d4a:	a333      	add	r3, pc, #204	; (adr r3, 8026e18 <__ieee754_pow+0x710>)
 8026d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026d50:	4606      	mov	r6, r0
 8026d52:	460f      	mov	r7, r1
 8026d54:	4620      	mov	r0, r4
 8026d56:	4629      	mov	r1, r5
 8026d58:	f7d9 fc56 	bl	8000608 <__aeabi_dmul>
 8026d5c:	4602      	mov	r2, r0
 8026d5e:	460b      	mov	r3, r1
 8026d60:	4630      	mov	r0, r6
 8026d62:	4639      	mov	r1, r7
 8026d64:	f7d9 fa9a 	bl	800029c <__adddf3>
 8026d68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026d6a:	4b35      	ldr	r3, [pc, #212]	; (8026e40 <__ieee754_pow+0x738>)
 8026d6c:	4413      	add	r3, r2
 8026d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026d72:	f7d9 fa93 	bl	800029c <__adddf3>
 8026d76:	4604      	mov	r4, r0
 8026d78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026d7a:	460d      	mov	r5, r1
 8026d7c:	f7d9 fbda 	bl	8000534 <__aeabi_i2d>
 8026d80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026d82:	4b30      	ldr	r3, [pc, #192]	; (8026e44 <__ieee754_pow+0x73c>)
 8026d84:	4413      	add	r3, r2
 8026d86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8026d8a:	4606      	mov	r6, r0
 8026d8c:	460f      	mov	r7, r1
 8026d8e:	4622      	mov	r2, r4
 8026d90:	462b      	mov	r3, r5
 8026d92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8026d96:	f7d9 fa81 	bl	800029c <__adddf3>
 8026d9a:	4642      	mov	r2, r8
 8026d9c:	464b      	mov	r3, r9
 8026d9e:	f7d9 fa7d 	bl	800029c <__adddf3>
 8026da2:	4632      	mov	r2, r6
 8026da4:	463b      	mov	r3, r7
 8026da6:	f7d9 fa79 	bl	800029c <__adddf3>
 8026daa:	9802      	ldr	r0, [sp, #8]
 8026dac:	4632      	mov	r2, r6
 8026dae:	463b      	mov	r3, r7
 8026db0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8026db4:	f7d9 fa70 	bl	8000298 <__aeabi_dsub>
 8026db8:	4642      	mov	r2, r8
 8026dba:	464b      	mov	r3, r9
 8026dbc:	f7d9 fa6c 	bl	8000298 <__aeabi_dsub>
 8026dc0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8026dc4:	e607      	b.n	80269d6 <__ieee754_pow+0x2ce>
 8026dc6:	f04f 0a01 	mov.w	sl, #1
 8026dca:	e6a5      	b.n	8026b18 <__ieee754_pow+0x410>
 8026dcc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8026e20 <__ieee754_pow+0x718>
 8026dd0:	e613      	b.n	80269fa <__ieee754_pow+0x2f2>
 8026dd2:	bf00      	nop
 8026dd4:	f3af 8000 	nop.w
 8026dd8:	4a454eef 	.word	0x4a454eef
 8026ddc:	3fca7e28 	.word	0x3fca7e28
 8026de0:	93c9db65 	.word	0x93c9db65
 8026de4:	3fcd864a 	.word	0x3fcd864a
 8026de8:	a91d4101 	.word	0xa91d4101
 8026dec:	3fd17460 	.word	0x3fd17460
 8026df0:	518f264d 	.word	0x518f264d
 8026df4:	3fd55555 	.word	0x3fd55555
 8026df8:	db6fabff 	.word	0xdb6fabff
 8026dfc:	3fdb6db6 	.word	0x3fdb6db6
 8026e00:	33333303 	.word	0x33333303
 8026e04:	3fe33333 	.word	0x3fe33333
 8026e08:	e0000000 	.word	0xe0000000
 8026e0c:	3feec709 	.word	0x3feec709
 8026e10:	dc3a03fd 	.word	0xdc3a03fd
 8026e14:	3feec709 	.word	0x3feec709
 8026e18:	145b01f5 	.word	0x145b01f5
 8026e1c:	be3e2fe0 	.word	0xbe3e2fe0
 8026e20:	00000000 	.word	0x00000000
 8026e24:	3ff00000 	.word	0x3ff00000
 8026e28:	43400000 	.word	0x43400000
 8026e2c:	0003988e 	.word	0x0003988e
 8026e30:	000bb679 	.word	0x000bb679
 8026e34:	0802e7d8 	.word	0x0802e7d8
 8026e38:	3ff00000 	.word	0x3ff00000
 8026e3c:	40080000 	.word	0x40080000
 8026e40:	0802e7f8 	.word	0x0802e7f8
 8026e44:	0802e7e8 	.word	0x0802e7e8
 8026e48:	a3b4      	add	r3, pc, #720	; (adr r3, 802711c <__ieee754_pow+0xa14>)
 8026e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e4e:	4640      	mov	r0, r8
 8026e50:	4649      	mov	r1, r9
 8026e52:	f7d9 fa23 	bl	800029c <__adddf3>
 8026e56:	4622      	mov	r2, r4
 8026e58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8026e5c:	462b      	mov	r3, r5
 8026e5e:	4630      	mov	r0, r6
 8026e60:	4639      	mov	r1, r7
 8026e62:	f7d9 fa19 	bl	8000298 <__aeabi_dsub>
 8026e66:	4602      	mov	r2, r0
 8026e68:	460b      	mov	r3, r1
 8026e6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8026e6e:	f7d9 fe5b 	bl	8000b28 <__aeabi_dcmpgt>
 8026e72:	2800      	cmp	r0, #0
 8026e74:	f47f adfe 	bne.w	8026a74 <__ieee754_pow+0x36c>
 8026e78:	4aa3      	ldr	r2, [pc, #652]	; (8027108 <__ieee754_pow+0xa00>)
 8026e7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8026e7e:	4293      	cmp	r3, r2
 8026e80:	f340 810a 	ble.w	8027098 <__ieee754_pow+0x990>
 8026e84:	151b      	asrs	r3, r3, #20
 8026e86:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8026e8a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8026e8e:	fa4a f303 	asr.w	r3, sl, r3
 8026e92:	445b      	add	r3, fp
 8026e94:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8026e98:	4e9c      	ldr	r6, [pc, #624]	; (802710c <__ieee754_pow+0xa04>)
 8026e9a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8026e9e:	4116      	asrs	r6, r2
 8026ea0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8026ea4:	2000      	movs	r0, #0
 8026ea6:	ea23 0106 	bic.w	r1, r3, r6
 8026eaa:	f1c2 0214 	rsb	r2, r2, #20
 8026eae:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8026eb2:	fa4a fa02 	asr.w	sl, sl, r2
 8026eb6:	f1bb 0f00 	cmp.w	fp, #0
 8026eba:	4602      	mov	r2, r0
 8026ebc:	460b      	mov	r3, r1
 8026ebe:	4620      	mov	r0, r4
 8026ec0:	4629      	mov	r1, r5
 8026ec2:	bfb8      	it	lt
 8026ec4:	f1ca 0a00 	rsblt	sl, sl, #0
 8026ec8:	f7d9 f9e6 	bl	8000298 <__aeabi_dsub>
 8026ecc:	e9cd 0100 	strd	r0, r1, [sp]
 8026ed0:	4642      	mov	r2, r8
 8026ed2:	464b      	mov	r3, r9
 8026ed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026ed8:	f7d9 f9e0 	bl	800029c <__adddf3>
 8026edc:	2000      	movs	r0, #0
 8026ede:	a378      	add	r3, pc, #480	; (adr r3, 80270c0 <__ieee754_pow+0x9b8>)
 8026ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026ee4:	4604      	mov	r4, r0
 8026ee6:	460d      	mov	r5, r1
 8026ee8:	f7d9 fb8e 	bl	8000608 <__aeabi_dmul>
 8026eec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026ef0:	4606      	mov	r6, r0
 8026ef2:	460f      	mov	r7, r1
 8026ef4:	4620      	mov	r0, r4
 8026ef6:	4629      	mov	r1, r5
 8026ef8:	f7d9 f9ce 	bl	8000298 <__aeabi_dsub>
 8026efc:	4602      	mov	r2, r0
 8026efe:	460b      	mov	r3, r1
 8026f00:	4640      	mov	r0, r8
 8026f02:	4649      	mov	r1, r9
 8026f04:	f7d9 f9c8 	bl	8000298 <__aeabi_dsub>
 8026f08:	a36f      	add	r3, pc, #444	; (adr r3, 80270c8 <__ieee754_pow+0x9c0>)
 8026f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f0e:	f7d9 fb7b 	bl	8000608 <__aeabi_dmul>
 8026f12:	a36f      	add	r3, pc, #444	; (adr r3, 80270d0 <__ieee754_pow+0x9c8>)
 8026f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f18:	4680      	mov	r8, r0
 8026f1a:	4689      	mov	r9, r1
 8026f1c:	4620      	mov	r0, r4
 8026f1e:	4629      	mov	r1, r5
 8026f20:	f7d9 fb72 	bl	8000608 <__aeabi_dmul>
 8026f24:	4602      	mov	r2, r0
 8026f26:	460b      	mov	r3, r1
 8026f28:	4640      	mov	r0, r8
 8026f2a:	4649      	mov	r1, r9
 8026f2c:	f7d9 f9b6 	bl	800029c <__adddf3>
 8026f30:	4604      	mov	r4, r0
 8026f32:	460d      	mov	r5, r1
 8026f34:	4602      	mov	r2, r0
 8026f36:	460b      	mov	r3, r1
 8026f38:	4630      	mov	r0, r6
 8026f3a:	4639      	mov	r1, r7
 8026f3c:	f7d9 f9ae 	bl	800029c <__adddf3>
 8026f40:	4632      	mov	r2, r6
 8026f42:	463b      	mov	r3, r7
 8026f44:	4680      	mov	r8, r0
 8026f46:	4689      	mov	r9, r1
 8026f48:	f7d9 f9a6 	bl	8000298 <__aeabi_dsub>
 8026f4c:	4602      	mov	r2, r0
 8026f4e:	460b      	mov	r3, r1
 8026f50:	4620      	mov	r0, r4
 8026f52:	4629      	mov	r1, r5
 8026f54:	f7d9 f9a0 	bl	8000298 <__aeabi_dsub>
 8026f58:	4642      	mov	r2, r8
 8026f5a:	4606      	mov	r6, r0
 8026f5c:	460f      	mov	r7, r1
 8026f5e:	464b      	mov	r3, r9
 8026f60:	4640      	mov	r0, r8
 8026f62:	4649      	mov	r1, r9
 8026f64:	f7d9 fb50 	bl	8000608 <__aeabi_dmul>
 8026f68:	a35b      	add	r3, pc, #364	; (adr r3, 80270d8 <__ieee754_pow+0x9d0>)
 8026f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f6e:	4604      	mov	r4, r0
 8026f70:	460d      	mov	r5, r1
 8026f72:	f7d9 fb49 	bl	8000608 <__aeabi_dmul>
 8026f76:	a35a      	add	r3, pc, #360	; (adr r3, 80270e0 <__ieee754_pow+0x9d8>)
 8026f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f7c:	f7d9 f98c 	bl	8000298 <__aeabi_dsub>
 8026f80:	4622      	mov	r2, r4
 8026f82:	462b      	mov	r3, r5
 8026f84:	f7d9 fb40 	bl	8000608 <__aeabi_dmul>
 8026f88:	a357      	add	r3, pc, #348	; (adr r3, 80270e8 <__ieee754_pow+0x9e0>)
 8026f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f8e:	f7d9 f985 	bl	800029c <__adddf3>
 8026f92:	4622      	mov	r2, r4
 8026f94:	462b      	mov	r3, r5
 8026f96:	f7d9 fb37 	bl	8000608 <__aeabi_dmul>
 8026f9a:	a355      	add	r3, pc, #340	; (adr r3, 80270f0 <__ieee754_pow+0x9e8>)
 8026f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026fa0:	f7d9 f97a 	bl	8000298 <__aeabi_dsub>
 8026fa4:	4622      	mov	r2, r4
 8026fa6:	462b      	mov	r3, r5
 8026fa8:	f7d9 fb2e 	bl	8000608 <__aeabi_dmul>
 8026fac:	a352      	add	r3, pc, #328	; (adr r3, 80270f8 <__ieee754_pow+0x9f0>)
 8026fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026fb2:	f7d9 f973 	bl	800029c <__adddf3>
 8026fb6:	4622      	mov	r2, r4
 8026fb8:	462b      	mov	r3, r5
 8026fba:	f7d9 fb25 	bl	8000608 <__aeabi_dmul>
 8026fbe:	4602      	mov	r2, r0
 8026fc0:	460b      	mov	r3, r1
 8026fc2:	4640      	mov	r0, r8
 8026fc4:	4649      	mov	r1, r9
 8026fc6:	f7d9 f967 	bl	8000298 <__aeabi_dsub>
 8026fca:	4604      	mov	r4, r0
 8026fcc:	460d      	mov	r5, r1
 8026fce:	4602      	mov	r2, r0
 8026fd0:	460b      	mov	r3, r1
 8026fd2:	4640      	mov	r0, r8
 8026fd4:	4649      	mov	r1, r9
 8026fd6:	f7d9 fb17 	bl	8000608 <__aeabi_dmul>
 8026fda:	2200      	movs	r2, #0
 8026fdc:	e9cd 0100 	strd	r0, r1, [sp]
 8026fe0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8026fe4:	4620      	mov	r0, r4
 8026fe6:	4629      	mov	r1, r5
 8026fe8:	f7d9 f956 	bl	8000298 <__aeabi_dsub>
 8026fec:	4602      	mov	r2, r0
 8026fee:	460b      	mov	r3, r1
 8026ff0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026ff4:	f7d9 fc32 	bl	800085c <__aeabi_ddiv>
 8026ff8:	4632      	mov	r2, r6
 8026ffa:	4604      	mov	r4, r0
 8026ffc:	460d      	mov	r5, r1
 8026ffe:	463b      	mov	r3, r7
 8027000:	4640      	mov	r0, r8
 8027002:	4649      	mov	r1, r9
 8027004:	f7d9 fb00 	bl	8000608 <__aeabi_dmul>
 8027008:	4632      	mov	r2, r6
 802700a:	463b      	mov	r3, r7
 802700c:	f7d9 f946 	bl	800029c <__adddf3>
 8027010:	4602      	mov	r2, r0
 8027012:	460b      	mov	r3, r1
 8027014:	4620      	mov	r0, r4
 8027016:	4629      	mov	r1, r5
 8027018:	f7d9 f93e 	bl	8000298 <__aeabi_dsub>
 802701c:	4642      	mov	r2, r8
 802701e:	464b      	mov	r3, r9
 8027020:	f7d9 f93a 	bl	8000298 <__aeabi_dsub>
 8027024:	4602      	mov	r2, r0
 8027026:	460b      	mov	r3, r1
 8027028:	2000      	movs	r0, #0
 802702a:	4939      	ldr	r1, [pc, #228]	; (8027110 <__ieee754_pow+0xa08>)
 802702c:	f7d9 f934 	bl	8000298 <__aeabi_dsub>
 8027030:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8027034:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8027038:	4602      	mov	r2, r0
 802703a:	460b      	mov	r3, r1
 802703c:	da2f      	bge.n	802709e <__ieee754_pow+0x996>
 802703e:	4650      	mov	r0, sl
 8027040:	ec43 2b10 	vmov	d0, r2, r3
 8027044:	f001 fe6c 	bl	8028d20 <scalbn>
 8027048:	ec51 0b10 	vmov	r0, r1, d0
 802704c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8027050:	f7ff bbf1 	b.w	8026836 <__ieee754_pow+0x12e>
 8027054:	4b2f      	ldr	r3, [pc, #188]	; (8027114 <__ieee754_pow+0xa0c>)
 8027056:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 802705a:	429e      	cmp	r6, r3
 802705c:	f77f af0c 	ble.w	8026e78 <__ieee754_pow+0x770>
 8027060:	4b2d      	ldr	r3, [pc, #180]	; (8027118 <__ieee754_pow+0xa10>)
 8027062:	440b      	add	r3, r1
 8027064:	4303      	orrs	r3, r0
 8027066:	d00b      	beq.n	8027080 <__ieee754_pow+0x978>
 8027068:	a325      	add	r3, pc, #148	; (adr r3, 8027100 <__ieee754_pow+0x9f8>)
 802706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802706e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027072:	f7d9 fac9 	bl	8000608 <__aeabi_dmul>
 8027076:	a322      	add	r3, pc, #136	; (adr r3, 8027100 <__ieee754_pow+0x9f8>)
 8027078:	e9d3 2300 	ldrd	r2, r3, [r3]
 802707c:	f7ff bbdb 	b.w	8026836 <__ieee754_pow+0x12e>
 8027080:	4622      	mov	r2, r4
 8027082:	462b      	mov	r3, r5
 8027084:	f7d9 f908 	bl	8000298 <__aeabi_dsub>
 8027088:	4642      	mov	r2, r8
 802708a:	464b      	mov	r3, r9
 802708c:	f7d9 fd42 	bl	8000b14 <__aeabi_dcmpge>
 8027090:	2800      	cmp	r0, #0
 8027092:	f43f aef1 	beq.w	8026e78 <__ieee754_pow+0x770>
 8027096:	e7e7      	b.n	8027068 <__ieee754_pow+0x960>
 8027098:	f04f 0a00 	mov.w	sl, #0
 802709c:	e718      	b.n	8026ed0 <__ieee754_pow+0x7c8>
 802709e:	4621      	mov	r1, r4
 80270a0:	e7d4      	b.n	802704c <__ieee754_pow+0x944>
 80270a2:	2000      	movs	r0, #0
 80270a4:	491a      	ldr	r1, [pc, #104]	; (8027110 <__ieee754_pow+0xa08>)
 80270a6:	f7ff bb8f 	b.w	80267c8 <__ieee754_pow+0xc0>
 80270aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80270ae:	f7ff bb8b 	b.w	80267c8 <__ieee754_pow+0xc0>
 80270b2:	4630      	mov	r0, r6
 80270b4:	4639      	mov	r1, r7
 80270b6:	f7ff bb87 	b.w	80267c8 <__ieee754_pow+0xc0>
 80270ba:	4693      	mov	fp, r2
 80270bc:	f7ff bb98 	b.w	80267f0 <__ieee754_pow+0xe8>
 80270c0:	00000000 	.word	0x00000000
 80270c4:	3fe62e43 	.word	0x3fe62e43
 80270c8:	fefa39ef 	.word	0xfefa39ef
 80270cc:	3fe62e42 	.word	0x3fe62e42
 80270d0:	0ca86c39 	.word	0x0ca86c39
 80270d4:	be205c61 	.word	0xbe205c61
 80270d8:	72bea4d0 	.word	0x72bea4d0
 80270dc:	3e663769 	.word	0x3e663769
 80270e0:	c5d26bf1 	.word	0xc5d26bf1
 80270e4:	3ebbbd41 	.word	0x3ebbbd41
 80270e8:	af25de2c 	.word	0xaf25de2c
 80270ec:	3f11566a 	.word	0x3f11566a
 80270f0:	16bebd93 	.word	0x16bebd93
 80270f4:	3f66c16c 	.word	0x3f66c16c
 80270f8:	5555553e 	.word	0x5555553e
 80270fc:	3fc55555 	.word	0x3fc55555
 8027100:	c2f8f359 	.word	0xc2f8f359
 8027104:	01a56e1f 	.word	0x01a56e1f
 8027108:	3fe00000 	.word	0x3fe00000
 802710c:	000fffff 	.word	0x000fffff
 8027110:	3ff00000 	.word	0x3ff00000
 8027114:	4090cbff 	.word	0x4090cbff
 8027118:	3f6f3400 	.word	0x3f6f3400
 802711c:	652b82fe 	.word	0x652b82fe
 8027120:	3c971547 	.word	0x3c971547
 8027124:	00000000 	.word	0x00000000

08027128 <__ieee754_rem_pio2>:
 8027128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802712c:	ec57 6b10 	vmov	r6, r7, d0
 8027130:	4bc3      	ldr	r3, [pc, #780]	; (8027440 <__ieee754_rem_pio2+0x318>)
 8027132:	b08d      	sub	sp, #52	; 0x34
 8027134:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8027138:	4598      	cmp	r8, r3
 802713a:	4604      	mov	r4, r0
 802713c:	9704      	str	r7, [sp, #16]
 802713e:	dc07      	bgt.n	8027150 <__ieee754_rem_pio2+0x28>
 8027140:	2200      	movs	r2, #0
 8027142:	2300      	movs	r3, #0
 8027144:	ed84 0b00 	vstr	d0, [r4]
 8027148:	e9c0 2302 	strd	r2, r3, [r0, #8]
 802714c:	2500      	movs	r5, #0
 802714e:	e027      	b.n	80271a0 <__ieee754_rem_pio2+0x78>
 8027150:	4bbc      	ldr	r3, [pc, #752]	; (8027444 <__ieee754_rem_pio2+0x31c>)
 8027152:	4598      	cmp	r8, r3
 8027154:	dc75      	bgt.n	8027242 <__ieee754_rem_pio2+0x11a>
 8027156:	9b04      	ldr	r3, [sp, #16]
 8027158:	4dbb      	ldr	r5, [pc, #748]	; (8027448 <__ieee754_rem_pio2+0x320>)
 802715a:	2b00      	cmp	r3, #0
 802715c:	ee10 0a10 	vmov	r0, s0
 8027160:	a3a9      	add	r3, pc, #676	; (adr r3, 8027408 <__ieee754_rem_pio2+0x2e0>)
 8027162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027166:	4639      	mov	r1, r7
 8027168:	dd36      	ble.n	80271d8 <__ieee754_rem_pio2+0xb0>
 802716a:	f7d9 f895 	bl	8000298 <__aeabi_dsub>
 802716e:	45a8      	cmp	r8, r5
 8027170:	4606      	mov	r6, r0
 8027172:	460f      	mov	r7, r1
 8027174:	d018      	beq.n	80271a8 <__ieee754_rem_pio2+0x80>
 8027176:	a3a6      	add	r3, pc, #664	; (adr r3, 8027410 <__ieee754_rem_pio2+0x2e8>)
 8027178:	e9d3 2300 	ldrd	r2, r3, [r3]
 802717c:	f7d9 f88c 	bl	8000298 <__aeabi_dsub>
 8027180:	4602      	mov	r2, r0
 8027182:	460b      	mov	r3, r1
 8027184:	e9c4 2300 	strd	r2, r3, [r4]
 8027188:	4630      	mov	r0, r6
 802718a:	4639      	mov	r1, r7
 802718c:	f7d9 f884 	bl	8000298 <__aeabi_dsub>
 8027190:	a39f      	add	r3, pc, #636	; (adr r3, 8027410 <__ieee754_rem_pio2+0x2e8>)
 8027192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027196:	f7d9 f87f 	bl	8000298 <__aeabi_dsub>
 802719a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 802719e:	2501      	movs	r5, #1
 80271a0:	4628      	mov	r0, r5
 80271a2:	b00d      	add	sp, #52	; 0x34
 80271a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80271a8:	a39b      	add	r3, pc, #620	; (adr r3, 8027418 <__ieee754_rem_pio2+0x2f0>)
 80271aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271ae:	f7d9 f873 	bl	8000298 <__aeabi_dsub>
 80271b2:	a39b      	add	r3, pc, #620	; (adr r3, 8027420 <__ieee754_rem_pio2+0x2f8>)
 80271b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271b8:	4606      	mov	r6, r0
 80271ba:	460f      	mov	r7, r1
 80271bc:	f7d9 f86c 	bl	8000298 <__aeabi_dsub>
 80271c0:	4602      	mov	r2, r0
 80271c2:	460b      	mov	r3, r1
 80271c4:	e9c4 2300 	strd	r2, r3, [r4]
 80271c8:	4630      	mov	r0, r6
 80271ca:	4639      	mov	r1, r7
 80271cc:	f7d9 f864 	bl	8000298 <__aeabi_dsub>
 80271d0:	a393      	add	r3, pc, #588	; (adr r3, 8027420 <__ieee754_rem_pio2+0x2f8>)
 80271d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271d6:	e7de      	b.n	8027196 <__ieee754_rem_pio2+0x6e>
 80271d8:	f7d9 f860 	bl	800029c <__adddf3>
 80271dc:	45a8      	cmp	r8, r5
 80271de:	4606      	mov	r6, r0
 80271e0:	460f      	mov	r7, r1
 80271e2:	d016      	beq.n	8027212 <__ieee754_rem_pio2+0xea>
 80271e4:	a38a      	add	r3, pc, #552	; (adr r3, 8027410 <__ieee754_rem_pio2+0x2e8>)
 80271e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271ea:	f7d9 f857 	bl	800029c <__adddf3>
 80271ee:	4602      	mov	r2, r0
 80271f0:	460b      	mov	r3, r1
 80271f2:	e9c4 2300 	strd	r2, r3, [r4]
 80271f6:	4630      	mov	r0, r6
 80271f8:	4639      	mov	r1, r7
 80271fa:	f7d9 f84d 	bl	8000298 <__aeabi_dsub>
 80271fe:	a384      	add	r3, pc, #528	; (adr r3, 8027410 <__ieee754_rem_pio2+0x2e8>)
 8027200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027204:	f7d9 f84a 	bl	800029c <__adddf3>
 8027208:	f04f 35ff 	mov.w	r5, #4294967295
 802720c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8027210:	e7c6      	b.n	80271a0 <__ieee754_rem_pio2+0x78>
 8027212:	a381      	add	r3, pc, #516	; (adr r3, 8027418 <__ieee754_rem_pio2+0x2f0>)
 8027214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027218:	f7d9 f840 	bl	800029c <__adddf3>
 802721c:	a380      	add	r3, pc, #512	; (adr r3, 8027420 <__ieee754_rem_pio2+0x2f8>)
 802721e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027222:	4606      	mov	r6, r0
 8027224:	460f      	mov	r7, r1
 8027226:	f7d9 f839 	bl	800029c <__adddf3>
 802722a:	4602      	mov	r2, r0
 802722c:	460b      	mov	r3, r1
 802722e:	e9c4 2300 	strd	r2, r3, [r4]
 8027232:	4630      	mov	r0, r6
 8027234:	4639      	mov	r1, r7
 8027236:	f7d9 f82f 	bl	8000298 <__aeabi_dsub>
 802723a:	a379      	add	r3, pc, #484	; (adr r3, 8027420 <__ieee754_rem_pio2+0x2f8>)
 802723c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027240:	e7e0      	b.n	8027204 <__ieee754_rem_pio2+0xdc>
 8027242:	4b82      	ldr	r3, [pc, #520]	; (802744c <__ieee754_rem_pio2+0x324>)
 8027244:	4598      	cmp	r8, r3
 8027246:	f300 80d0 	bgt.w	80273ea <__ieee754_rem_pio2+0x2c2>
 802724a:	f001 fcc9 	bl	8028be0 <fabs>
 802724e:	ec57 6b10 	vmov	r6, r7, d0
 8027252:	ee10 0a10 	vmov	r0, s0
 8027256:	a374      	add	r3, pc, #464	; (adr r3, 8027428 <__ieee754_rem_pio2+0x300>)
 8027258:	e9d3 2300 	ldrd	r2, r3, [r3]
 802725c:	4639      	mov	r1, r7
 802725e:	f7d9 f9d3 	bl	8000608 <__aeabi_dmul>
 8027262:	2200      	movs	r2, #0
 8027264:	4b7a      	ldr	r3, [pc, #488]	; (8027450 <__ieee754_rem_pio2+0x328>)
 8027266:	f7d9 f819 	bl	800029c <__adddf3>
 802726a:	f7d9 fc7d 	bl	8000b68 <__aeabi_d2iz>
 802726e:	4605      	mov	r5, r0
 8027270:	f7d9 f960 	bl	8000534 <__aeabi_i2d>
 8027274:	a364      	add	r3, pc, #400	; (adr r3, 8027408 <__ieee754_rem_pio2+0x2e0>)
 8027276:	e9d3 2300 	ldrd	r2, r3, [r3]
 802727a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802727e:	f7d9 f9c3 	bl	8000608 <__aeabi_dmul>
 8027282:	4602      	mov	r2, r0
 8027284:	460b      	mov	r3, r1
 8027286:	4630      	mov	r0, r6
 8027288:	4639      	mov	r1, r7
 802728a:	f7d9 f805 	bl	8000298 <__aeabi_dsub>
 802728e:	a360      	add	r3, pc, #384	; (adr r3, 8027410 <__ieee754_rem_pio2+0x2e8>)
 8027290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027294:	4682      	mov	sl, r0
 8027296:	468b      	mov	fp, r1
 8027298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802729c:	f7d9 f9b4 	bl	8000608 <__aeabi_dmul>
 80272a0:	2d1f      	cmp	r5, #31
 80272a2:	4606      	mov	r6, r0
 80272a4:	460f      	mov	r7, r1
 80272a6:	dc0c      	bgt.n	80272c2 <__ieee754_rem_pio2+0x19a>
 80272a8:	1e6a      	subs	r2, r5, #1
 80272aa:	4b6a      	ldr	r3, [pc, #424]	; (8027454 <__ieee754_rem_pio2+0x32c>)
 80272ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80272b0:	4543      	cmp	r3, r8
 80272b2:	d006      	beq.n	80272c2 <__ieee754_rem_pio2+0x19a>
 80272b4:	4632      	mov	r2, r6
 80272b6:	463b      	mov	r3, r7
 80272b8:	4650      	mov	r0, sl
 80272ba:	4659      	mov	r1, fp
 80272bc:	f7d8 ffec 	bl	8000298 <__aeabi_dsub>
 80272c0:	e00e      	b.n	80272e0 <__ieee754_rem_pio2+0x1b8>
 80272c2:	4632      	mov	r2, r6
 80272c4:	463b      	mov	r3, r7
 80272c6:	4650      	mov	r0, sl
 80272c8:	4659      	mov	r1, fp
 80272ca:	f7d8 ffe5 	bl	8000298 <__aeabi_dsub>
 80272ce:	ea4f 5328 	mov.w	r3, r8, asr #20
 80272d2:	9305      	str	r3, [sp, #20]
 80272d4:	9a05      	ldr	r2, [sp, #20]
 80272d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80272da:	1ad3      	subs	r3, r2, r3
 80272dc:	2b10      	cmp	r3, #16
 80272de:	dc02      	bgt.n	80272e6 <__ieee754_rem_pio2+0x1be>
 80272e0:	e9c4 0100 	strd	r0, r1, [r4]
 80272e4:	e039      	b.n	802735a <__ieee754_rem_pio2+0x232>
 80272e6:	a34c      	add	r3, pc, #304	; (adr r3, 8027418 <__ieee754_rem_pio2+0x2f0>)
 80272e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80272ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80272f0:	f7d9 f98a 	bl	8000608 <__aeabi_dmul>
 80272f4:	4606      	mov	r6, r0
 80272f6:	460f      	mov	r7, r1
 80272f8:	4602      	mov	r2, r0
 80272fa:	460b      	mov	r3, r1
 80272fc:	4650      	mov	r0, sl
 80272fe:	4659      	mov	r1, fp
 8027300:	f7d8 ffca 	bl	8000298 <__aeabi_dsub>
 8027304:	4602      	mov	r2, r0
 8027306:	460b      	mov	r3, r1
 8027308:	4680      	mov	r8, r0
 802730a:	4689      	mov	r9, r1
 802730c:	4650      	mov	r0, sl
 802730e:	4659      	mov	r1, fp
 8027310:	f7d8 ffc2 	bl	8000298 <__aeabi_dsub>
 8027314:	4632      	mov	r2, r6
 8027316:	463b      	mov	r3, r7
 8027318:	f7d8 ffbe 	bl	8000298 <__aeabi_dsub>
 802731c:	a340      	add	r3, pc, #256	; (adr r3, 8027420 <__ieee754_rem_pio2+0x2f8>)
 802731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027322:	4606      	mov	r6, r0
 8027324:	460f      	mov	r7, r1
 8027326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802732a:	f7d9 f96d 	bl	8000608 <__aeabi_dmul>
 802732e:	4632      	mov	r2, r6
 8027330:	463b      	mov	r3, r7
 8027332:	f7d8 ffb1 	bl	8000298 <__aeabi_dsub>
 8027336:	4602      	mov	r2, r0
 8027338:	460b      	mov	r3, r1
 802733a:	4606      	mov	r6, r0
 802733c:	460f      	mov	r7, r1
 802733e:	4640      	mov	r0, r8
 8027340:	4649      	mov	r1, r9
 8027342:	f7d8 ffa9 	bl	8000298 <__aeabi_dsub>
 8027346:	9a05      	ldr	r2, [sp, #20]
 8027348:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802734c:	1ad3      	subs	r3, r2, r3
 802734e:	2b31      	cmp	r3, #49	; 0x31
 8027350:	dc20      	bgt.n	8027394 <__ieee754_rem_pio2+0x26c>
 8027352:	e9c4 0100 	strd	r0, r1, [r4]
 8027356:	46c2      	mov	sl, r8
 8027358:	46cb      	mov	fp, r9
 802735a:	e9d4 8900 	ldrd	r8, r9, [r4]
 802735e:	4650      	mov	r0, sl
 8027360:	4642      	mov	r2, r8
 8027362:	464b      	mov	r3, r9
 8027364:	4659      	mov	r1, fp
 8027366:	f7d8 ff97 	bl	8000298 <__aeabi_dsub>
 802736a:	463b      	mov	r3, r7
 802736c:	4632      	mov	r2, r6
 802736e:	f7d8 ff93 	bl	8000298 <__aeabi_dsub>
 8027372:	9b04      	ldr	r3, [sp, #16]
 8027374:	2b00      	cmp	r3, #0
 8027376:	e9c4 0102 	strd	r0, r1, [r4, #8]
 802737a:	f6bf af11 	bge.w	80271a0 <__ieee754_rem_pio2+0x78>
 802737e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8027382:	6063      	str	r3, [r4, #4]
 8027384:	f8c4 8000 	str.w	r8, [r4]
 8027388:	60a0      	str	r0, [r4, #8]
 802738a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802738e:	60e3      	str	r3, [r4, #12]
 8027390:	426d      	negs	r5, r5
 8027392:	e705      	b.n	80271a0 <__ieee754_rem_pio2+0x78>
 8027394:	a326      	add	r3, pc, #152	; (adr r3, 8027430 <__ieee754_rem_pio2+0x308>)
 8027396:	e9d3 2300 	ldrd	r2, r3, [r3]
 802739a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802739e:	f7d9 f933 	bl	8000608 <__aeabi_dmul>
 80273a2:	4606      	mov	r6, r0
 80273a4:	460f      	mov	r7, r1
 80273a6:	4602      	mov	r2, r0
 80273a8:	460b      	mov	r3, r1
 80273aa:	4640      	mov	r0, r8
 80273ac:	4649      	mov	r1, r9
 80273ae:	f7d8 ff73 	bl	8000298 <__aeabi_dsub>
 80273b2:	4602      	mov	r2, r0
 80273b4:	460b      	mov	r3, r1
 80273b6:	4682      	mov	sl, r0
 80273b8:	468b      	mov	fp, r1
 80273ba:	4640      	mov	r0, r8
 80273bc:	4649      	mov	r1, r9
 80273be:	f7d8 ff6b 	bl	8000298 <__aeabi_dsub>
 80273c2:	4632      	mov	r2, r6
 80273c4:	463b      	mov	r3, r7
 80273c6:	f7d8 ff67 	bl	8000298 <__aeabi_dsub>
 80273ca:	a31b      	add	r3, pc, #108	; (adr r3, 8027438 <__ieee754_rem_pio2+0x310>)
 80273cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80273d0:	4606      	mov	r6, r0
 80273d2:	460f      	mov	r7, r1
 80273d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80273d8:	f7d9 f916 	bl	8000608 <__aeabi_dmul>
 80273dc:	4632      	mov	r2, r6
 80273de:	463b      	mov	r3, r7
 80273e0:	f7d8 ff5a 	bl	8000298 <__aeabi_dsub>
 80273e4:	4606      	mov	r6, r0
 80273e6:	460f      	mov	r7, r1
 80273e8:	e764      	b.n	80272b4 <__ieee754_rem_pio2+0x18c>
 80273ea:	4b1b      	ldr	r3, [pc, #108]	; (8027458 <__ieee754_rem_pio2+0x330>)
 80273ec:	4598      	cmp	r8, r3
 80273ee:	dd35      	ble.n	802745c <__ieee754_rem_pio2+0x334>
 80273f0:	ee10 2a10 	vmov	r2, s0
 80273f4:	463b      	mov	r3, r7
 80273f6:	4630      	mov	r0, r6
 80273f8:	4639      	mov	r1, r7
 80273fa:	f7d8 ff4d 	bl	8000298 <__aeabi_dsub>
 80273fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8027402:	e9c4 0100 	strd	r0, r1, [r4]
 8027406:	e6a1      	b.n	802714c <__ieee754_rem_pio2+0x24>
 8027408:	54400000 	.word	0x54400000
 802740c:	3ff921fb 	.word	0x3ff921fb
 8027410:	1a626331 	.word	0x1a626331
 8027414:	3dd0b461 	.word	0x3dd0b461
 8027418:	1a600000 	.word	0x1a600000
 802741c:	3dd0b461 	.word	0x3dd0b461
 8027420:	2e037073 	.word	0x2e037073
 8027424:	3ba3198a 	.word	0x3ba3198a
 8027428:	6dc9c883 	.word	0x6dc9c883
 802742c:	3fe45f30 	.word	0x3fe45f30
 8027430:	2e000000 	.word	0x2e000000
 8027434:	3ba3198a 	.word	0x3ba3198a
 8027438:	252049c1 	.word	0x252049c1
 802743c:	397b839a 	.word	0x397b839a
 8027440:	3fe921fb 	.word	0x3fe921fb
 8027444:	4002d97b 	.word	0x4002d97b
 8027448:	3ff921fb 	.word	0x3ff921fb
 802744c:	413921fb 	.word	0x413921fb
 8027450:	3fe00000 	.word	0x3fe00000
 8027454:	0802e808 	.word	0x0802e808
 8027458:	7fefffff 	.word	0x7fefffff
 802745c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8027460:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8027464:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8027468:	4630      	mov	r0, r6
 802746a:	460f      	mov	r7, r1
 802746c:	f7d9 fb7c 	bl	8000b68 <__aeabi_d2iz>
 8027470:	f7d9 f860 	bl	8000534 <__aeabi_i2d>
 8027474:	4602      	mov	r2, r0
 8027476:	460b      	mov	r3, r1
 8027478:	4630      	mov	r0, r6
 802747a:	4639      	mov	r1, r7
 802747c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8027480:	f7d8 ff0a 	bl	8000298 <__aeabi_dsub>
 8027484:	2200      	movs	r2, #0
 8027486:	4b1f      	ldr	r3, [pc, #124]	; (8027504 <__ieee754_rem_pio2+0x3dc>)
 8027488:	f7d9 f8be 	bl	8000608 <__aeabi_dmul>
 802748c:	460f      	mov	r7, r1
 802748e:	4606      	mov	r6, r0
 8027490:	f7d9 fb6a 	bl	8000b68 <__aeabi_d2iz>
 8027494:	f7d9 f84e 	bl	8000534 <__aeabi_i2d>
 8027498:	4602      	mov	r2, r0
 802749a:	460b      	mov	r3, r1
 802749c:	4630      	mov	r0, r6
 802749e:	4639      	mov	r1, r7
 80274a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80274a4:	f7d8 fef8 	bl	8000298 <__aeabi_dsub>
 80274a8:	2200      	movs	r2, #0
 80274aa:	4b16      	ldr	r3, [pc, #88]	; (8027504 <__ieee754_rem_pio2+0x3dc>)
 80274ac:	f7d9 f8ac 	bl	8000608 <__aeabi_dmul>
 80274b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80274b4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80274b8:	f04f 0803 	mov.w	r8, #3
 80274bc:	2600      	movs	r6, #0
 80274be:	2700      	movs	r7, #0
 80274c0:	4632      	mov	r2, r6
 80274c2:	463b      	mov	r3, r7
 80274c4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80274c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80274cc:	f7d9 fb04 	bl	8000ad8 <__aeabi_dcmpeq>
 80274d0:	b9b0      	cbnz	r0, 8027500 <__ieee754_rem_pio2+0x3d8>
 80274d2:	4b0d      	ldr	r3, [pc, #52]	; (8027508 <__ieee754_rem_pio2+0x3e0>)
 80274d4:	9301      	str	r3, [sp, #4]
 80274d6:	2302      	movs	r3, #2
 80274d8:	9300      	str	r3, [sp, #0]
 80274da:	462a      	mov	r2, r5
 80274dc:	4643      	mov	r3, r8
 80274de:	4621      	mov	r1, r4
 80274e0:	a806      	add	r0, sp, #24
 80274e2:	f000 fab9 	bl	8027a58 <__kernel_rem_pio2>
 80274e6:	9b04      	ldr	r3, [sp, #16]
 80274e8:	2b00      	cmp	r3, #0
 80274ea:	4605      	mov	r5, r0
 80274ec:	f6bf ae58 	bge.w	80271a0 <__ieee754_rem_pio2+0x78>
 80274f0:	6863      	ldr	r3, [r4, #4]
 80274f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80274f6:	6063      	str	r3, [r4, #4]
 80274f8:	68e3      	ldr	r3, [r4, #12]
 80274fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80274fe:	e746      	b.n	802738e <__ieee754_rem_pio2+0x266>
 8027500:	46d0      	mov	r8, sl
 8027502:	e7dd      	b.n	80274c0 <__ieee754_rem_pio2+0x398>
 8027504:	41700000 	.word	0x41700000
 8027508:	0802e888 	.word	0x0802e888

0802750c <__ieee754_sqrt>:
 802750c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027510:	4955      	ldr	r1, [pc, #340]	; (8027668 <__ieee754_sqrt+0x15c>)
 8027512:	ec55 4b10 	vmov	r4, r5, d0
 8027516:	43a9      	bics	r1, r5
 8027518:	462b      	mov	r3, r5
 802751a:	462a      	mov	r2, r5
 802751c:	d112      	bne.n	8027544 <__ieee754_sqrt+0x38>
 802751e:	ee10 2a10 	vmov	r2, s0
 8027522:	ee10 0a10 	vmov	r0, s0
 8027526:	4629      	mov	r1, r5
 8027528:	f7d9 f86e 	bl	8000608 <__aeabi_dmul>
 802752c:	4602      	mov	r2, r0
 802752e:	460b      	mov	r3, r1
 8027530:	4620      	mov	r0, r4
 8027532:	4629      	mov	r1, r5
 8027534:	f7d8 feb2 	bl	800029c <__adddf3>
 8027538:	4604      	mov	r4, r0
 802753a:	460d      	mov	r5, r1
 802753c:	ec45 4b10 	vmov	d0, r4, r5
 8027540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027544:	2d00      	cmp	r5, #0
 8027546:	ee10 0a10 	vmov	r0, s0
 802754a:	4621      	mov	r1, r4
 802754c:	dc0f      	bgt.n	802756e <__ieee754_sqrt+0x62>
 802754e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8027552:	4330      	orrs	r0, r6
 8027554:	d0f2      	beq.n	802753c <__ieee754_sqrt+0x30>
 8027556:	b155      	cbz	r5, 802756e <__ieee754_sqrt+0x62>
 8027558:	ee10 2a10 	vmov	r2, s0
 802755c:	4620      	mov	r0, r4
 802755e:	4629      	mov	r1, r5
 8027560:	f7d8 fe9a 	bl	8000298 <__aeabi_dsub>
 8027564:	4602      	mov	r2, r0
 8027566:	460b      	mov	r3, r1
 8027568:	f7d9 f978 	bl	800085c <__aeabi_ddiv>
 802756c:	e7e4      	b.n	8027538 <__ieee754_sqrt+0x2c>
 802756e:	151b      	asrs	r3, r3, #20
 8027570:	d073      	beq.n	802765a <__ieee754_sqrt+0x14e>
 8027572:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8027576:	07dd      	lsls	r5, r3, #31
 8027578:	f3c2 0213 	ubfx	r2, r2, #0, #20
 802757c:	bf48      	it	mi
 802757e:	0fc8      	lsrmi	r0, r1, #31
 8027580:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8027584:	bf44      	itt	mi
 8027586:	0049      	lslmi	r1, r1, #1
 8027588:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 802758c:	2500      	movs	r5, #0
 802758e:	1058      	asrs	r0, r3, #1
 8027590:	0fcb      	lsrs	r3, r1, #31
 8027592:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8027596:	0049      	lsls	r1, r1, #1
 8027598:	2316      	movs	r3, #22
 802759a:	462c      	mov	r4, r5
 802759c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80275a0:	19a7      	adds	r7, r4, r6
 80275a2:	4297      	cmp	r7, r2
 80275a4:	bfde      	ittt	le
 80275a6:	19bc      	addle	r4, r7, r6
 80275a8:	1bd2      	suble	r2, r2, r7
 80275aa:	19ad      	addle	r5, r5, r6
 80275ac:	0fcf      	lsrs	r7, r1, #31
 80275ae:	3b01      	subs	r3, #1
 80275b0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80275b4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80275b8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80275bc:	d1f0      	bne.n	80275a0 <__ieee754_sqrt+0x94>
 80275be:	f04f 0c20 	mov.w	ip, #32
 80275c2:	469e      	mov	lr, r3
 80275c4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80275c8:	42a2      	cmp	r2, r4
 80275ca:	eb06 070e 	add.w	r7, r6, lr
 80275ce:	dc02      	bgt.n	80275d6 <__ieee754_sqrt+0xca>
 80275d0:	d112      	bne.n	80275f8 <__ieee754_sqrt+0xec>
 80275d2:	428f      	cmp	r7, r1
 80275d4:	d810      	bhi.n	80275f8 <__ieee754_sqrt+0xec>
 80275d6:	2f00      	cmp	r7, #0
 80275d8:	eb07 0e06 	add.w	lr, r7, r6
 80275dc:	da42      	bge.n	8027664 <__ieee754_sqrt+0x158>
 80275de:	f1be 0f00 	cmp.w	lr, #0
 80275e2:	db3f      	blt.n	8027664 <__ieee754_sqrt+0x158>
 80275e4:	f104 0801 	add.w	r8, r4, #1
 80275e8:	1b12      	subs	r2, r2, r4
 80275ea:	428f      	cmp	r7, r1
 80275ec:	bf88      	it	hi
 80275ee:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80275f2:	1bc9      	subs	r1, r1, r7
 80275f4:	4433      	add	r3, r6
 80275f6:	4644      	mov	r4, r8
 80275f8:	0052      	lsls	r2, r2, #1
 80275fa:	f1bc 0c01 	subs.w	ip, ip, #1
 80275fe:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8027602:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8027606:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802760a:	d1dd      	bne.n	80275c8 <__ieee754_sqrt+0xbc>
 802760c:	430a      	orrs	r2, r1
 802760e:	d006      	beq.n	802761e <__ieee754_sqrt+0x112>
 8027610:	1c5c      	adds	r4, r3, #1
 8027612:	bf13      	iteet	ne
 8027614:	3301      	addne	r3, #1
 8027616:	3501      	addeq	r5, #1
 8027618:	4663      	moveq	r3, ip
 802761a:	f023 0301 	bicne.w	r3, r3, #1
 802761e:	106a      	asrs	r2, r5, #1
 8027620:	085b      	lsrs	r3, r3, #1
 8027622:	07e9      	lsls	r1, r5, #31
 8027624:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8027628:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 802762c:	bf48      	it	mi
 802762e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8027632:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8027636:	461c      	mov	r4, r3
 8027638:	e780      	b.n	802753c <__ieee754_sqrt+0x30>
 802763a:	0aca      	lsrs	r2, r1, #11
 802763c:	3815      	subs	r0, #21
 802763e:	0549      	lsls	r1, r1, #21
 8027640:	2a00      	cmp	r2, #0
 8027642:	d0fa      	beq.n	802763a <__ieee754_sqrt+0x12e>
 8027644:	02d6      	lsls	r6, r2, #11
 8027646:	d50a      	bpl.n	802765e <__ieee754_sqrt+0x152>
 8027648:	f1c3 0420 	rsb	r4, r3, #32
 802764c:	fa21 f404 	lsr.w	r4, r1, r4
 8027650:	1e5d      	subs	r5, r3, #1
 8027652:	4099      	lsls	r1, r3
 8027654:	4322      	orrs	r2, r4
 8027656:	1b43      	subs	r3, r0, r5
 8027658:	e78b      	b.n	8027572 <__ieee754_sqrt+0x66>
 802765a:	4618      	mov	r0, r3
 802765c:	e7f0      	b.n	8027640 <__ieee754_sqrt+0x134>
 802765e:	0052      	lsls	r2, r2, #1
 8027660:	3301      	adds	r3, #1
 8027662:	e7ef      	b.n	8027644 <__ieee754_sqrt+0x138>
 8027664:	46a0      	mov	r8, r4
 8027666:	e7bf      	b.n	80275e8 <__ieee754_sqrt+0xdc>
 8027668:	7ff00000 	.word	0x7ff00000

0802766c <__ieee754_rem_pio2f>:
 802766c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802766e:	ee10 6a10 	vmov	r6, s0
 8027672:	4b86      	ldr	r3, [pc, #536]	; (802788c <__ieee754_rem_pio2f+0x220>)
 8027674:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8027678:	429c      	cmp	r4, r3
 802767a:	b087      	sub	sp, #28
 802767c:	4605      	mov	r5, r0
 802767e:	dc05      	bgt.n	802768c <__ieee754_rem_pio2f+0x20>
 8027680:	2300      	movs	r3, #0
 8027682:	ed85 0a00 	vstr	s0, [r5]
 8027686:	6043      	str	r3, [r0, #4]
 8027688:	2000      	movs	r0, #0
 802768a:	e020      	b.n	80276ce <__ieee754_rem_pio2f+0x62>
 802768c:	4b80      	ldr	r3, [pc, #512]	; (8027890 <__ieee754_rem_pio2f+0x224>)
 802768e:	429c      	cmp	r4, r3
 8027690:	dc38      	bgt.n	8027704 <__ieee754_rem_pio2f+0x98>
 8027692:	2e00      	cmp	r6, #0
 8027694:	f024 040f 	bic.w	r4, r4, #15
 8027698:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8027894 <__ieee754_rem_pio2f+0x228>
 802769c:	4b7e      	ldr	r3, [pc, #504]	; (8027898 <__ieee754_rem_pio2f+0x22c>)
 802769e:	dd18      	ble.n	80276d2 <__ieee754_rem_pio2f+0x66>
 80276a0:	429c      	cmp	r4, r3
 80276a2:	ee70 7a47 	vsub.f32	s15, s0, s14
 80276a6:	bf09      	itett	eq
 80276a8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 802789c <__ieee754_rem_pio2f+0x230>
 80276ac:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80278a0 <__ieee754_rem_pio2f+0x234>
 80276b0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80276b4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80278a4 <__ieee754_rem_pio2f+0x238>
 80276b8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80276bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80276c0:	edc0 6a00 	vstr	s13, [r0]
 80276c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80276c8:	edc0 7a01 	vstr	s15, [r0, #4]
 80276cc:	2001      	movs	r0, #1
 80276ce:	b007      	add	sp, #28
 80276d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80276d2:	429c      	cmp	r4, r3
 80276d4:	ee70 7a07 	vadd.f32	s15, s0, s14
 80276d8:	bf09      	itett	eq
 80276da:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 802789c <__ieee754_rem_pio2f+0x230>
 80276de:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80278a0 <__ieee754_rem_pio2f+0x234>
 80276e2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80276e6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80278a4 <__ieee754_rem_pio2f+0x238>
 80276ea:	ee77 6a87 	vadd.f32	s13, s15, s14
 80276ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80276f2:	edc0 6a00 	vstr	s13, [r0]
 80276f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80276fa:	edc0 7a01 	vstr	s15, [r0, #4]
 80276fe:	f04f 30ff 	mov.w	r0, #4294967295
 8027702:	e7e4      	b.n	80276ce <__ieee754_rem_pio2f+0x62>
 8027704:	4b68      	ldr	r3, [pc, #416]	; (80278a8 <__ieee754_rem_pio2f+0x23c>)
 8027706:	429c      	cmp	r4, r3
 8027708:	dc71      	bgt.n	80277ee <__ieee754_rem_pio2f+0x182>
 802770a:	f001 fb7f 	bl	8028e0c <fabsf>
 802770e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80278ac <__ieee754_rem_pio2f+0x240>
 8027712:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8027716:	eee0 7a07 	vfma.f32	s15, s0, s14
 802771a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802771e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8027722:	ee17 0a90 	vmov	r0, s15
 8027726:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8027894 <__ieee754_rem_pio2f+0x228>
 802772a:	eeb1 7a46 	vneg.f32	s14, s12
 802772e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8027732:	281f      	cmp	r0, #31
 8027734:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80278a0 <__ieee754_rem_pio2f+0x234>
 8027738:	ee66 7a27 	vmul.f32	s15, s12, s15
 802773c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8027740:	ee16 3a90 	vmov	r3, s13
 8027744:	dc1c      	bgt.n	8027780 <__ieee754_rem_pio2f+0x114>
 8027746:	1e47      	subs	r7, r0, #1
 8027748:	4959      	ldr	r1, [pc, #356]	; (80278b0 <__ieee754_rem_pio2f+0x244>)
 802774a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802774e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8027752:	428a      	cmp	r2, r1
 8027754:	d014      	beq.n	8027780 <__ieee754_rem_pio2f+0x114>
 8027756:	602b      	str	r3, [r5, #0]
 8027758:	ed95 7a00 	vldr	s14, [r5]
 802775c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8027760:	2e00      	cmp	r6, #0
 8027762:	ee30 0a67 	vsub.f32	s0, s0, s15
 8027766:	ed85 0a01 	vstr	s0, [r5, #4]
 802776a:	dab0      	bge.n	80276ce <__ieee754_rem_pio2f+0x62>
 802776c:	eeb1 7a47 	vneg.f32	s14, s14
 8027770:	eeb1 0a40 	vneg.f32	s0, s0
 8027774:	ed85 7a00 	vstr	s14, [r5]
 8027778:	ed85 0a01 	vstr	s0, [r5, #4]
 802777c:	4240      	negs	r0, r0
 802777e:	e7a6      	b.n	80276ce <__ieee754_rem_pio2f+0x62>
 8027780:	15e4      	asrs	r4, r4, #23
 8027782:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8027786:	1aa2      	subs	r2, r4, r2
 8027788:	2a08      	cmp	r2, #8
 802778a:	dde4      	ble.n	8027756 <__ieee754_rem_pio2f+0xea>
 802778c:	eddf 7a43 	vldr	s15, [pc, #268]	; 802789c <__ieee754_rem_pio2f+0x230>
 8027790:	eef0 6a40 	vmov.f32	s13, s0
 8027794:	eee7 6a27 	vfma.f32	s13, s14, s15
 8027798:	ee30 0a66 	vsub.f32	s0, s0, s13
 802779c:	eea7 0a27 	vfma.f32	s0, s14, s15
 80277a0:	eddf 7a40 	vldr	s15, [pc, #256]	; 80278a4 <__ieee754_rem_pio2f+0x238>
 80277a4:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80277a8:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80277ac:	eef0 7a40 	vmov.f32	s15, s0
 80277b0:	ee15 3a90 	vmov	r3, s11
 80277b4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80277b8:	1aa4      	subs	r4, r4, r2
 80277ba:	2c19      	cmp	r4, #25
 80277bc:	dc04      	bgt.n	80277c8 <__ieee754_rem_pio2f+0x15c>
 80277be:	edc5 5a00 	vstr	s11, [r5]
 80277c2:	eeb0 0a66 	vmov.f32	s0, s13
 80277c6:	e7c7      	b.n	8027758 <__ieee754_rem_pio2f+0xec>
 80277c8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80278b4 <__ieee754_rem_pio2f+0x248>
 80277cc:	eeb0 0a66 	vmov.f32	s0, s13
 80277d0:	eea7 0a25 	vfma.f32	s0, s14, s11
 80277d4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80277d8:	eee7 7a25 	vfma.f32	s15, s14, s11
 80277dc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80278b8 <__ieee754_rem_pio2f+0x24c>
 80277e0:	eed6 7a07 	vfnms.f32	s15, s12, s14
 80277e4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80277e8:	ed85 7a00 	vstr	s14, [r5]
 80277ec:	e7b4      	b.n	8027758 <__ieee754_rem_pio2f+0xec>
 80277ee:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80277f2:	db06      	blt.n	8027802 <__ieee754_rem_pio2f+0x196>
 80277f4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80277f8:	edc0 7a01 	vstr	s15, [r0, #4]
 80277fc:	edc0 7a00 	vstr	s15, [r0]
 8027800:	e742      	b.n	8027688 <__ieee754_rem_pio2f+0x1c>
 8027802:	15e2      	asrs	r2, r4, #23
 8027804:	3a86      	subs	r2, #134	; 0x86
 8027806:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 802780a:	ee07 3a90 	vmov	s15, r3
 802780e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8027812:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80278bc <__ieee754_rem_pio2f+0x250>
 8027816:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802781a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802781e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8027822:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8027826:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802782a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802782e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027832:	ed8d 7a04 	vstr	s14, [sp, #16]
 8027836:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802783a:	eef5 7a40 	vcmp.f32	s15, #0.0
 802783e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027842:	edcd 7a05 	vstr	s15, [sp, #20]
 8027846:	d11e      	bne.n	8027886 <__ieee754_rem_pio2f+0x21a>
 8027848:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802784c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027850:	bf0c      	ite	eq
 8027852:	2301      	moveq	r3, #1
 8027854:	2302      	movne	r3, #2
 8027856:	491a      	ldr	r1, [pc, #104]	; (80278c0 <__ieee754_rem_pio2f+0x254>)
 8027858:	9101      	str	r1, [sp, #4]
 802785a:	2102      	movs	r1, #2
 802785c:	9100      	str	r1, [sp, #0]
 802785e:	a803      	add	r0, sp, #12
 8027860:	4629      	mov	r1, r5
 8027862:	f000 fd51 	bl	8028308 <__kernel_rem_pio2f>
 8027866:	2e00      	cmp	r6, #0
 8027868:	f6bf af31 	bge.w	80276ce <__ieee754_rem_pio2f+0x62>
 802786c:	edd5 7a00 	vldr	s15, [r5]
 8027870:	eef1 7a67 	vneg.f32	s15, s15
 8027874:	edc5 7a00 	vstr	s15, [r5]
 8027878:	edd5 7a01 	vldr	s15, [r5, #4]
 802787c:	eef1 7a67 	vneg.f32	s15, s15
 8027880:	edc5 7a01 	vstr	s15, [r5, #4]
 8027884:	e77a      	b.n	802777c <__ieee754_rem_pio2f+0x110>
 8027886:	2303      	movs	r3, #3
 8027888:	e7e5      	b.n	8027856 <__ieee754_rem_pio2f+0x1ea>
 802788a:	bf00      	nop
 802788c:	3f490fd8 	.word	0x3f490fd8
 8027890:	4016cbe3 	.word	0x4016cbe3
 8027894:	3fc90f80 	.word	0x3fc90f80
 8027898:	3fc90fd0 	.word	0x3fc90fd0
 802789c:	37354400 	.word	0x37354400
 80278a0:	37354443 	.word	0x37354443
 80278a4:	2e85a308 	.word	0x2e85a308
 80278a8:	43490f80 	.word	0x43490f80
 80278ac:	3f22f984 	.word	0x3f22f984
 80278b0:	0802e990 	.word	0x0802e990
 80278b4:	2e85a300 	.word	0x2e85a300
 80278b8:	248d3132 	.word	0x248d3132
 80278bc:	43800000 	.word	0x43800000
 80278c0:	0802ea10 	.word	0x0802ea10
 80278c4:	00000000 	.word	0x00000000

080278c8 <__kernel_cos>:
 80278c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80278cc:	ec59 8b10 	vmov	r8, r9, d0
 80278d0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80278d4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80278d8:	ed2d 8b02 	vpush	{d8}
 80278dc:	eeb0 8a41 	vmov.f32	s16, s2
 80278e0:	eef0 8a61 	vmov.f32	s17, s3
 80278e4:	da07      	bge.n	80278f6 <__kernel_cos+0x2e>
 80278e6:	ee10 0a10 	vmov	r0, s0
 80278ea:	4649      	mov	r1, r9
 80278ec:	f7d9 f93c 	bl	8000b68 <__aeabi_d2iz>
 80278f0:	2800      	cmp	r0, #0
 80278f2:	f000 8089 	beq.w	8027a08 <__kernel_cos+0x140>
 80278f6:	4642      	mov	r2, r8
 80278f8:	464b      	mov	r3, r9
 80278fa:	4640      	mov	r0, r8
 80278fc:	4649      	mov	r1, r9
 80278fe:	f7d8 fe83 	bl	8000608 <__aeabi_dmul>
 8027902:	2200      	movs	r2, #0
 8027904:	4b4e      	ldr	r3, [pc, #312]	; (8027a40 <__kernel_cos+0x178>)
 8027906:	4604      	mov	r4, r0
 8027908:	460d      	mov	r5, r1
 802790a:	f7d8 fe7d 	bl	8000608 <__aeabi_dmul>
 802790e:	a340      	add	r3, pc, #256	; (adr r3, 8027a10 <__kernel_cos+0x148>)
 8027910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027914:	4682      	mov	sl, r0
 8027916:	468b      	mov	fp, r1
 8027918:	4620      	mov	r0, r4
 802791a:	4629      	mov	r1, r5
 802791c:	f7d8 fe74 	bl	8000608 <__aeabi_dmul>
 8027920:	a33d      	add	r3, pc, #244	; (adr r3, 8027a18 <__kernel_cos+0x150>)
 8027922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027926:	f7d8 fcb9 	bl	800029c <__adddf3>
 802792a:	4622      	mov	r2, r4
 802792c:	462b      	mov	r3, r5
 802792e:	f7d8 fe6b 	bl	8000608 <__aeabi_dmul>
 8027932:	a33b      	add	r3, pc, #236	; (adr r3, 8027a20 <__kernel_cos+0x158>)
 8027934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027938:	f7d8 fcae 	bl	8000298 <__aeabi_dsub>
 802793c:	4622      	mov	r2, r4
 802793e:	462b      	mov	r3, r5
 8027940:	f7d8 fe62 	bl	8000608 <__aeabi_dmul>
 8027944:	a338      	add	r3, pc, #224	; (adr r3, 8027a28 <__kernel_cos+0x160>)
 8027946:	e9d3 2300 	ldrd	r2, r3, [r3]
 802794a:	f7d8 fca7 	bl	800029c <__adddf3>
 802794e:	4622      	mov	r2, r4
 8027950:	462b      	mov	r3, r5
 8027952:	f7d8 fe59 	bl	8000608 <__aeabi_dmul>
 8027956:	a336      	add	r3, pc, #216	; (adr r3, 8027a30 <__kernel_cos+0x168>)
 8027958:	e9d3 2300 	ldrd	r2, r3, [r3]
 802795c:	f7d8 fc9c 	bl	8000298 <__aeabi_dsub>
 8027960:	4622      	mov	r2, r4
 8027962:	462b      	mov	r3, r5
 8027964:	f7d8 fe50 	bl	8000608 <__aeabi_dmul>
 8027968:	a333      	add	r3, pc, #204	; (adr r3, 8027a38 <__kernel_cos+0x170>)
 802796a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802796e:	f7d8 fc95 	bl	800029c <__adddf3>
 8027972:	4622      	mov	r2, r4
 8027974:	462b      	mov	r3, r5
 8027976:	f7d8 fe47 	bl	8000608 <__aeabi_dmul>
 802797a:	4622      	mov	r2, r4
 802797c:	462b      	mov	r3, r5
 802797e:	f7d8 fe43 	bl	8000608 <__aeabi_dmul>
 8027982:	ec53 2b18 	vmov	r2, r3, d8
 8027986:	4604      	mov	r4, r0
 8027988:	460d      	mov	r5, r1
 802798a:	4640      	mov	r0, r8
 802798c:	4649      	mov	r1, r9
 802798e:	f7d8 fe3b 	bl	8000608 <__aeabi_dmul>
 8027992:	460b      	mov	r3, r1
 8027994:	4602      	mov	r2, r0
 8027996:	4629      	mov	r1, r5
 8027998:	4620      	mov	r0, r4
 802799a:	f7d8 fc7d 	bl	8000298 <__aeabi_dsub>
 802799e:	4b29      	ldr	r3, [pc, #164]	; (8027a44 <__kernel_cos+0x17c>)
 80279a0:	429e      	cmp	r6, r3
 80279a2:	4680      	mov	r8, r0
 80279a4:	4689      	mov	r9, r1
 80279a6:	dc11      	bgt.n	80279cc <__kernel_cos+0x104>
 80279a8:	4602      	mov	r2, r0
 80279aa:	460b      	mov	r3, r1
 80279ac:	4650      	mov	r0, sl
 80279ae:	4659      	mov	r1, fp
 80279b0:	f7d8 fc72 	bl	8000298 <__aeabi_dsub>
 80279b4:	460b      	mov	r3, r1
 80279b6:	4924      	ldr	r1, [pc, #144]	; (8027a48 <__kernel_cos+0x180>)
 80279b8:	4602      	mov	r2, r0
 80279ba:	2000      	movs	r0, #0
 80279bc:	f7d8 fc6c 	bl	8000298 <__aeabi_dsub>
 80279c0:	ecbd 8b02 	vpop	{d8}
 80279c4:	ec41 0b10 	vmov	d0, r0, r1
 80279c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80279cc:	4b1f      	ldr	r3, [pc, #124]	; (8027a4c <__kernel_cos+0x184>)
 80279ce:	491e      	ldr	r1, [pc, #120]	; (8027a48 <__kernel_cos+0x180>)
 80279d0:	429e      	cmp	r6, r3
 80279d2:	bfcc      	ite	gt
 80279d4:	4d1e      	ldrgt	r5, [pc, #120]	; (8027a50 <__kernel_cos+0x188>)
 80279d6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80279da:	2400      	movs	r4, #0
 80279dc:	4622      	mov	r2, r4
 80279de:	462b      	mov	r3, r5
 80279e0:	2000      	movs	r0, #0
 80279e2:	f7d8 fc59 	bl	8000298 <__aeabi_dsub>
 80279e6:	4622      	mov	r2, r4
 80279e8:	4606      	mov	r6, r0
 80279ea:	460f      	mov	r7, r1
 80279ec:	462b      	mov	r3, r5
 80279ee:	4650      	mov	r0, sl
 80279f0:	4659      	mov	r1, fp
 80279f2:	f7d8 fc51 	bl	8000298 <__aeabi_dsub>
 80279f6:	4642      	mov	r2, r8
 80279f8:	464b      	mov	r3, r9
 80279fa:	f7d8 fc4d 	bl	8000298 <__aeabi_dsub>
 80279fe:	4602      	mov	r2, r0
 8027a00:	460b      	mov	r3, r1
 8027a02:	4630      	mov	r0, r6
 8027a04:	4639      	mov	r1, r7
 8027a06:	e7d9      	b.n	80279bc <__kernel_cos+0xf4>
 8027a08:	2000      	movs	r0, #0
 8027a0a:	490f      	ldr	r1, [pc, #60]	; (8027a48 <__kernel_cos+0x180>)
 8027a0c:	e7d8      	b.n	80279c0 <__kernel_cos+0xf8>
 8027a0e:	bf00      	nop
 8027a10:	be8838d4 	.word	0xbe8838d4
 8027a14:	bda8fae9 	.word	0xbda8fae9
 8027a18:	bdb4b1c4 	.word	0xbdb4b1c4
 8027a1c:	3e21ee9e 	.word	0x3e21ee9e
 8027a20:	809c52ad 	.word	0x809c52ad
 8027a24:	3e927e4f 	.word	0x3e927e4f
 8027a28:	19cb1590 	.word	0x19cb1590
 8027a2c:	3efa01a0 	.word	0x3efa01a0
 8027a30:	16c15177 	.word	0x16c15177
 8027a34:	3f56c16c 	.word	0x3f56c16c
 8027a38:	5555554c 	.word	0x5555554c
 8027a3c:	3fa55555 	.word	0x3fa55555
 8027a40:	3fe00000 	.word	0x3fe00000
 8027a44:	3fd33332 	.word	0x3fd33332
 8027a48:	3ff00000 	.word	0x3ff00000
 8027a4c:	3fe90000 	.word	0x3fe90000
 8027a50:	3fd20000 	.word	0x3fd20000
 8027a54:	00000000 	.word	0x00000000

08027a58 <__kernel_rem_pio2>:
 8027a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a5c:	ed2d 8b02 	vpush	{d8}
 8027a60:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8027a64:	1ed4      	subs	r4, r2, #3
 8027a66:	9308      	str	r3, [sp, #32]
 8027a68:	9101      	str	r1, [sp, #4]
 8027a6a:	4bc5      	ldr	r3, [pc, #788]	; (8027d80 <__kernel_rem_pio2+0x328>)
 8027a6c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8027a6e:	9009      	str	r0, [sp, #36]	; 0x24
 8027a70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8027a74:	9304      	str	r3, [sp, #16]
 8027a76:	9b08      	ldr	r3, [sp, #32]
 8027a78:	3b01      	subs	r3, #1
 8027a7a:	9307      	str	r3, [sp, #28]
 8027a7c:	2318      	movs	r3, #24
 8027a7e:	fb94 f4f3 	sdiv	r4, r4, r3
 8027a82:	f06f 0317 	mvn.w	r3, #23
 8027a86:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8027a8a:	fb04 3303 	mla	r3, r4, r3, r3
 8027a8e:	eb03 0a02 	add.w	sl, r3, r2
 8027a92:	9b04      	ldr	r3, [sp, #16]
 8027a94:	9a07      	ldr	r2, [sp, #28]
 8027a96:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8027d70 <__kernel_rem_pio2+0x318>
 8027a9a:	eb03 0802 	add.w	r8, r3, r2
 8027a9e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8027aa0:	1aa7      	subs	r7, r4, r2
 8027aa2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8027aa6:	ae22      	add	r6, sp, #136	; 0x88
 8027aa8:	2500      	movs	r5, #0
 8027aaa:	4545      	cmp	r5, r8
 8027aac:	dd13      	ble.n	8027ad6 <__kernel_rem_pio2+0x7e>
 8027aae:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8027d70 <__kernel_rem_pio2+0x318>
 8027ab2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8027ab6:	2600      	movs	r6, #0
 8027ab8:	9b04      	ldr	r3, [sp, #16]
 8027aba:	429e      	cmp	r6, r3
 8027abc:	dc32      	bgt.n	8027b24 <__kernel_rem_pio2+0xcc>
 8027abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027ac0:	9302      	str	r3, [sp, #8]
 8027ac2:	9b08      	ldr	r3, [sp, #32]
 8027ac4:	199d      	adds	r5, r3, r6
 8027ac6:	ab22      	add	r3, sp, #136	; 0x88
 8027ac8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8027acc:	9306      	str	r3, [sp, #24]
 8027ace:	ec59 8b18 	vmov	r8, r9, d8
 8027ad2:	2700      	movs	r7, #0
 8027ad4:	e01f      	b.n	8027b16 <__kernel_rem_pio2+0xbe>
 8027ad6:	42ef      	cmn	r7, r5
 8027ad8:	d407      	bmi.n	8027aea <__kernel_rem_pio2+0x92>
 8027ada:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8027ade:	f7d8 fd29 	bl	8000534 <__aeabi_i2d>
 8027ae2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8027ae6:	3501      	adds	r5, #1
 8027ae8:	e7df      	b.n	8027aaa <__kernel_rem_pio2+0x52>
 8027aea:	ec51 0b18 	vmov	r0, r1, d8
 8027aee:	e7f8      	b.n	8027ae2 <__kernel_rem_pio2+0x8a>
 8027af0:	9906      	ldr	r1, [sp, #24]
 8027af2:	9d02      	ldr	r5, [sp, #8]
 8027af4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8027af8:	9106      	str	r1, [sp, #24]
 8027afa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8027afe:	9502      	str	r5, [sp, #8]
 8027b00:	f7d8 fd82 	bl	8000608 <__aeabi_dmul>
 8027b04:	4602      	mov	r2, r0
 8027b06:	460b      	mov	r3, r1
 8027b08:	4640      	mov	r0, r8
 8027b0a:	4649      	mov	r1, r9
 8027b0c:	f7d8 fbc6 	bl	800029c <__adddf3>
 8027b10:	3701      	adds	r7, #1
 8027b12:	4680      	mov	r8, r0
 8027b14:	4689      	mov	r9, r1
 8027b16:	9b07      	ldr	r3, [sp, #28]
 8027b18:	429f      	cmp	r7, r3
 8027b1a:	dde9      	ble.n	8027af0 <__kernel_rem_pio2+0x98>
 8027b1c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8027b20:	3601      	adds	r6, #1
 8027b22:	e7c9      	b.n	8027ab8 <__kernel_rem_pio2+0x60>
 8027b24:	9b04      	ldr	r3, [sp, #16]
 8027b26:	aa0e      	add	r2, sp, #56	; 0x38
 8027b28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027b2c:	930c      	str	r3, [sp, #48]	; 0x30
 8027b2e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8027b30:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8027b34:	9c04      	ldr	r4, [sp, #16]
 8027b36:	930b      	str	r3, [sp, #44]	; 0x2c
 8027b38:	ab9a      	add	r3, sp, #616	; 0x268
 8027b3a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8027b3e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8027b42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027b46:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8027b4a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8027b4e:	ab9a      	add	r3, sp, #616	; 0x268
 8027b50:	445b      	add	r3, fp
 8027b52:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8027b56:	2500      	movs	r5, #0
 8027b58:	1b63      	subs	r3, r4, r5
 8027b5a:	2b00      	cmp	r3, #0
 8027b5c:	dc78      	bgt.n	8027c50 <__kernel_rem_pio2+0x1f8>
 8027b5e:	4650      	mov	r0, sl
 8027b60:	ec49 8b10 	vmov	d0, r8, r9
 8027b64:	f001 f8dc 	bl	8028d20 <scalbn>
 8027b68:	ec57 6b10 	vmov	r6, r7, d0
 8027b6c:	2200      	movs	r2, #0
 8027b6e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8027b72:	ee10 0a10 	vmov	r0, s0
 8027b76:	4639      	mov	r1, r7
 8027b78:	f7d8 fd46 	bl	8000608 <__aeabi_dmul>
 8027b7c:	ec41 0b10 	vmov	d0, r0, r1
 8027b80:	f7fd fd6a 	bl	8025658 <floor>
 8027b84:	2200      	movs	r2, #0
 8027b86:	ec51 0b10 	vmov	r0, r1, d0
 8027b8a:	4b7e      	ldr	r3, [pc, #504]	; (8027d84 <__kernel_rem_pio2+0x32c>)
 8027b8c:	f7d8 fd3c 	bl	8000608 <__aeabi_dmul>
 8027b90:	4602      	mov	r2, r0
 8027b92:	460b      	mov	r3, r1
 8027b94:	4630      	mov	r0, r6
 8027b96:	4639      	mov	r1, r7
 8027b98:	f7d8 fb7e 	bl	8000298 <__aeabi_dsub>
 8027b9c:	460f      	mov	r7, r1
 8027b9e:	4606      	mov	r6, r0
 8027ba0:	f7d8 ffe2 	bl	8000b68 <__aeabi_d2iz>
 8027ba4:	9006      	str	r0, [sp, #24]
 8027ba6:	f7d8 fcc5 	bl	8000534 <__aeabi_i2d>
 8027baa:	4602      	mov	r2, r0
 8027bac:	460b      	mov	r3, r1
 8027bae:	4630      	mov	r0, r6
 8027bb0:	4639      	mov	r1, r7
 8027bb2:	f7d8 fb71 	bl	8000298 <__aeabi_dsub>
 8027bb6:	f1ba 0f00 	cmp.w	sl, #0
 8027bba:	4606      	mov	r6, r0
 8027bbc:	460f      	mov	r7, r1
 8027bbe:	dd6c      	ble.n	8027c9a <__kernel_rem_pio2+0x242>
 8027bc0:	1e62      	subs	r2, r4, #1
 8027bc2:	ab0e      	add	r3, sp, #56	; 0x38
 8027bc4:	f1ca 0118 	rsb	r1, sl, #24
 8027bc8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8027bcc:	9d06      	ldr	r5, [sp, #24]
 8027bce:	fa40 f301 	asr.w	r3, r0, r1
 8027bd2:	441d      	add	r5, r3
 8027bd4:	408b      	lsls	r3, r1
 8027bd6:	1ac0      	subs	r0, r0, r3
 8027bd8:	ab0e      	add	r3, sp, #56	; 0x38
 8027bda:	9506      	str	r5, [sp, #24]
 8027bdc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8027be0:	f1ca 0317 	rsb	r3, sl, #23
 8027be4:	fa40 f303 	asr.w	r3, r0, r3
 8027be8:	9302      	str	r3, [sp, #8]
 8027bea:	9b02      	ldr	r3, [sp, #8]
 8027bec:	2b00      	cmp	r3, #0
 8027bee:	dd62      	ble.n	8027cb6 <__kernel_rem_pio2+0x25e>
 8027bf0:	9b06      	ldr	r3, [sp, #24]
 8027bf2:	2200      	movs	r2, #0
 8027bf4:	3301      	adds	r3, #1
 8027bf6:	9306      	str	r3, [sp, #24]
 8027bf8:	4615      	mov	r5, r2
 8027bfa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8027bfe:	4294      	cmp	r4, r2
 8027c00:	f300 8095 	bgt.w	8027d2e <__kernel_rem_pio2+0x2d6>
 8027c04:	f1ba 0f00 	cmp.w	sl, #0
 8027c08:	dd07      	ble.n	8027c1a <__kernel_rem_pio2+0x1c2>
 8027c0a:	f1ba 0f01 	cmp.w	sl, #1
 8027c0e:	f000 80a2 	beq.w	8027d56 <__kernel_rem_pio2+0x2fe>
 8027c12:	f1ba 0f02 	cmp.w	sl, #2
 8027c16:	f000 80c1 	beq.w	8027d9c <__kernel_rem_pio2+0x344>
 8027c1a:	9b02      	ldr	r3, [sp, #8]
 8027c1c:	2b02      	cmp	r3, #2
 8027c1e:	d14a      	bne.n	8027cb6 <__kernel_rem_pio2+0x25e>
 8027c20:	4632      	mov	r2, r6
 8027c22:	463b      	mov	r3, r7
 8027c24:	2000      	movs	r0, #0
 8027c26:	4958      	ldr	r1, [pc, #352]	; (8027d88 <__kernel_rem_pio2+0x330>)
 8027c28:	f7d8 fb36 	bl	8000298 <__aeabi_dsub>
 8027c2c:	4606      	mov	r6, r0
 8027c2e:	460f      	mov	r7, r1
 8027c30:	2d00      	cmp	r5, #0
 8027c32:	d040      	beq.n	8027cb6 <__kernel_rem_pio2+0x25e>
 8027c34:	4650      	mov	r0, sl
 8027c36:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8027d78 <__kernel_rem_pio2+0x320>
 8027c3a:	f001 f871 	bl	8028d20 <scalbn>
 8027c3e:	4630      	mov	r0, r6
 8027c40:	4639      	mov	r1, r7
 8027c42:	ec53 2b10 	vmov	r2, r3, d0
 8027c46:	f7d8 fb27 	bl	8000298 <__aeabi_dsub>
 8027c4a:	4606      	mov	r6, r0
 8027c4c:	460f      	mov	r7, r1
 8027c4e:	e032      	b.n	8027cb6 <__kernel_rem_pio2+0x25e>
 8027c50:	2200      	movs	r2, #0
 8027c52:	4b4e      	ldr	r3, [pc, #312]	; (8027d8c <__kernel_rem_pio2+0x334>)
 8027c54:	4640      	mov	r0, r8
 8027c56:	4649      	mov	r1, r9
 8027c58:	f7d8 fcd6 	bl	8000608 <__aeabi_dmul>
 8027c5c:	f7d8 ff84 	bl	8000b68 <__aeabi_d2iz>
 8027c60:	f7d8 fc68 	bl	8000534 <__aeabi_i2d>
 8027c64:	2200      	movs	r2, #0
 8027c66:	4b4a      	ldr	r3, [pc, #296]	; (8027d90 <__kernel_rem_pio2+0x338>)
 8027c68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027c6c:	f7d8 fccc 	bl	8000608 <__aeabi_dmul>
 8027c70:	4602      	mov	r2, r0
 8027c72:	460b      	mov	r3, r1
 8027c74:	4640      	mov	r0, r8
 8027c76:	4649      	mov	r1, r9
 8027c78:	f7d8 fb0e 	bl	8000298 <__aeabi_dsub>
 8027c7c:	f7d8 ff74 	bl	8000b68 <__aeabi_d2iz>
 8027c80:	ab0e      	add	r3, sp, #56	; 0x38
 8027c82:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8027c86:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8027c8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027c8e:	f7d8 fb05 	bl	800029c <__adddf3>
 8027c92:	3501      	adds	r5, #1
 8027c94:	4680      	mov	r8, r0
 8027c96:	4689      	mov	r9, r1
 8027c98:	e75e      	b.n	8027b58 <__kernel_rem_pio2+0x100>
 8027c9a:	d105      	bne.n	8027ca8 <__kernel_rem_pio2+0x250>
 8027c9c:	1e63      	subs	r3, r4, #1
 8027c9e:	aa0e      	add	r2, sp, #56	; 0x38
 8027ca0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8027ca4:	15c3      	asrs	r3, r0, #23
 8027ca6:	e79f      	b.n	8027be8 <__kernel_rem_pio2+0x190>
 8027ca8:	2200      	movs	r2, #0
 8027caa:	4b3a      	ldr	r3, [pc, #232]	; (8027d94 <__kernel_rem_pio2+0x33c>)
 8027cac:	f7d8 ff32 	bl	8000b14 <__aeabi_dcmpge>
 8027cb0:	2800      	cmp	r0, #0
 8027cb2:	d139      	bne.n	8027d28 <__kernel_rem_pio2+0x2d0>
 8027cb4:	9002      	str	r0, [sp, #8]
 8027cb6:	2200      	movs	r2, #0
 8027cb8:	2300      	movs	r3, #0
 8027cba:	4630      	mov	r0, r6
 8027cbc:	4639      	mov	r1, r7
 8027cbe:	f7d8 ff0b 	bl	8000ad8 <__aeabi_dcmpeq>
 8027cc2:	2800      	cmp	r0, #0
 8027cc4:	f000 80c7 	beq.w	8027e56 <__kernel_rem_pio2+0x3fe>
 8027cc8:	1e65      	subs	r5, r4, #1
 8027cca:	462b      	mov	r3, r5
 8027ccc:	2200      	movs	r2, #0
 8027cce:	9904      	ldr	r1, [sp, #16]
 8027cd0:	428b      	cmp	r3, r1
 8027cd2:	da6a      	bge.n	8027daa <__kernel_rem_pio2+0x352>
 8027cd4:	2a00      	cmp	r2, #0
 8027cd6:	f000 8088 	beq.w	8027dea <__kernel_rem_pio2+0x392>
 8027cda:	ab0e      	add	r3, sp, #56	; 0x38
 8027cdc:	f1aa 0a18 	sub.w	sl, sl, #24
 8027ce0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8027ce4:	2b00      	cmp	r3, #0
 8027ce6:	f000 80b4 	beq.w	8027e52 <__kernel_rem_pio2+0x3fa>
 8027cea:	4650      	mov	r0, sl
 8027cec:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8027d78 <__kernel_rem_pio2+0x320>
 8027cf0:	f001 f816 	bl	8028d20 <scalbn>
 8027cf4:	00ec      	lsls	r4, r5, #3
 8027cf6:	ab72      	add	r3, sp, #456	; 0x1c8
 8027cf8:	191e      	adds	r6, r3, r4
 8027cfa:	ec59 8b10 	vmov	r8, r9, d0
 8027cfe:	f106 0a08 	add.w	sl, r6, #8
 8027d02:	462f      	mov	r7, r5
 8027d04:	2f00      	cmp	r7, #0
 8027d06:	f280 80df 	bge.w	8027ec8 <__kernel_rem_pio2+0x470>
 8027d0a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8027d70 <__kernel_rem_pio2+0x318>
 8027d0e:	f04f 0a00 	mov.w	sl, #0
 8027d12:	eba5 030a 	sub.w	r3, r5, sl
 8027d16:	2b00      	cmp	r3, #0
 8027d18:	f2c0 810a 	blt.w	8027f30 <__kernel_rem_pio2+0x4d8>
 8027d1c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8027d98 <__kernel_rem_pio2+0x340>
 8027d20:	ec59 8b18 	vmov	r8, r9, d8
 8027d24:	2700      	movs	r7, #0
 8027d26:	e0f5      	b.n	8027f14 <__kernel_rem_pio2+0x4bc>
 8027d28:	2302      	movs	r3, #2
 8027d2a:	9302      	str	r3, [sp, #8]
 8027d2c:	e760      	b.n	8027bf0 <__kernel_rem_pio2+0x198>
 8027d2e:	ab0e      	add	r3, sp, #56	; 0x38
 8027d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8027d34:	b94d      	cbnz	r5, 8027d4a <__kernel_rem_pio2+0x2f2>
 8027d36:	b12b      	cbz	r3, 8027d44 <__kernel_rem_pio2+0x2ec>
 8027d38:	a80e      	add	r0, sp, #56	; 0x38
 8027d3a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8027d3e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8027d42:	2301      	movs	r3, #1
 8027d44:	3201      	adds	r2, #1
 8027d46:	461d      	mov	r5, r3
 8027d48:	e759      	b.n	8027bfe <__kernel_rem_pio2+0x1a6>
 8027d4a:	a80e      	add	r0, sp, #56	; 0x38
 8027d4c:	1acb      	subs	r3, r1, r3
 8027d4e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8027d52:	462b      	mov	r3, r5
 8027d54:	e7f6      	b.n	8027d44 <__kernel_rem_pio2+0x2ec>
 8027d56:	1e62      	subs	r2, r4, #1
 8027d58:	ab0e      	add	r3, sp, #56	; 0x38
 8027d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8027d5e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8027d62:	a90e      	add	r1, sp, #56	; 0x38
 8027d64:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8027d68:	e757      	b.n	8027c1a <__kernel_rem_pio2+0x1c2>
 8027d6a:	bf00      	nop
 8027d6c:	f3af 8000 	nop.w
	...
 8027d7c:	3ff00000 	.word	0x3ff00000
 8027d80:	0802ed68 	.word	0x0802ed68
 8027d84:	40200000 	.word	0x40200000
 8027d88:	3ff00000 	.word	0x3ff00000
 8027d8c:	3e700000 	.word	0x3e700000
 8027d90:	41700000 	.word	0x41700000
 8027d94:	3fe00000 	.word	0x3fe00000
 8027d98:	0802ed28 	.word	0x0802ed28
 8027d9c:	1e62      	subs	r2, r4, #1
 8027d9e:	ab0e      	add	r3, sp, #56	; 0x38
 8027da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8027da4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8027da8:	e7db      	b.n	8027d62 <__kernel_rem_pio2+0x30a>
 8027daa:	a90e      	add	r1, sp, #56	; 0x38
 8027dac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8027db0:	3b01      	subs	r3, #1
 8027db2:	430a      	orrs	r2, r1
 8027db4:	e78b      	b.n	8027cce <__kernel_rem_pio2+0x276>
 8027db6:	3301      	adds	r3, #1
 8027db8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8027dbc:	2900      	cmp	r1, #0
 8027dbe:	d0fa      	beq.n	8027db6 <__kernel_rem_pio2+0x35e>
 8027dc0:	9a08      	ldr	r2, [sp, #32]
 8027dc2:	4422      	add	r2, r4
 8027dc4:	00d2      	lsls	r2, r2, #3
 8027dc6:	a922      	add	r1, sp, #136	; 0x88
 8027dc8:	18e3      	adds	r3, r4, r3
 8027dca:	9206      	str	r2, [sp, #24]
 8027dcc:	440a      	add	r2, r1
 8027dce:	9302      	str	r3, [sp, #8]
 8027dd0:	f10b 0108 	add.w	r1, fp, #8
 8027dd4:	f102 0308 	add.w	r3, r2, #8
 8027dd8:	1c66      	adds	r6, r4, #1
 8027dda:	910a      	str	r1, [sp, #40]	; 0x28
 8027ddc:	2500      	movs	r5, #0
 8027dde:	930d      	str	r3, [sp, #52]	; 0x34
 8027de0:	9b02      	ldr	r3, [sp, #8]
 8027de2:	42b3      	cmp	r3, r6
 8027de4:	da04      	bge.n	8027df0 <__kernel_rem_pio2+0x398>
 8027de6:	461c      	mov	r4, r3
 8027de8:	e6a6      	b.n	8027b38 <__kernel_rem_pio2+0xe0>
 8027dea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027dec:	2301      	movs	r3, #1
 8027dee:	e7e3      	b.n	8027db8 <__kernel_rem_pio2+0x360>
 8027df0:	9b06      	ldr	r3, [sp, #24]
 8027df2:	18ef      	adds	r7, r5, r3
 8027df4:	ab22      	add	r3, sp, #136	; 0x88
 8027df6:	441f      	add	r7, r3
 8027df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027dfa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8027dfe:	f7d8 fb99 	bl	8000534 <__aeabi_i2d>
 8027e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027e04:	461c      	mov	r4, r3
 8027e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027e08:	e9c7 0100 	strd	r0, r1, [r7]
 8027e0c:	eb03 0b05 	add.w	fp, r3, r5
 8027e10:	2700      	movs	r7, #0
 8027e12:	f04f 0800 	mov.w	r8, #0
 8027e16:	f04f 0900 	mov.w	r9, #0
 8027e1a:	9b07      	ldr	r3, [sp, #28]
 8027e1c:	429f      	cmp	r7, r3
 8027e1e:	dd08      	ble.n	8027e32 <__kernel_rem_pio2+0x3da>
 8027e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027e22:	aa72      	add	r2, sp, #456	; 0x1c8
 8027e24:	18eb      	adds	r3, r5, r3
 8027e26:	4413      	add	r3, r2
 8027e28:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8027e2c:	3601      	adds	r6, #1
 8027e2e:	3508      	adds	r5, #8
 8027e30:	e7d6      	b.n	8027de0 <__kernel_rem_pio2+0x388>
 8027e32:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8027e36:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8027e3a:	f7d8 fbe5 	bl	8000608 <__aeabi_dmul>
 8027e3e:	4602      	mov	r2, r0
 8027e40:	460b      	mov	r3, r1
 8027e42:	4640      	mov	r0, r8
 8027e44:	4649      	mov	r1, r9
 8027e46:	f7d8 fa29 	bl	800029c <__adddf3>
 8027e4a:	3701      	adds	r7, #1
 8027e4c:	4680      	mov	r8, r0
 8027e4e:	4689      	mov	r9, r1
 8027e50:	e7e3      	b.n	8027e1a <__kernel_rem_pio2+0x3c2>
 8027e52:	3d01      	subs	r5, #1
 8027e54:	e741      	b.n	8027cda <__kernel_rem_pio2+0x282>
 8027e56:	f1ca 0000 	rsb	r0, sl, #0
 8027e5a:	ec47 6b10 	vmov	d0, r6, r7
 8027e5e:	f000 ff5f 	bl	8028d20 <scalbn>
 8027e62:	ec57 6b10 	vmov	r6, r7, d0
 8027e66:	2200      	movs	r2, #0
 8027e68:	4b99      	ldr	r3, [pc, #612]	; (80280d0 <__kernel_rem_pio2+0x678>)
 8027e6a:	ee10 0a10 	vmov	r0, s0
 8027e6e:	4639      	mov	r1, r7
 8027e70:	f7d8 fe50 	bl	8000b14 <__aeabi_dcmpge>
 8027e74:	b1f8      	cbz	r0, 8027eb6 <__kernel_rem_pio2+0x45e>
 8027e76:	2200      	movs	r2, #0
 8027e78:	4b96      	ldr	r3, [pc, #600]	; (80280d4 <__kernel_rem_pio2+0x67c>)
 8027e7a:	4630      	mov	r0, r6
 8027e7c:	4639      	mov	r1, r7
 8027e7e:	f7d8 fbc3 	bl	8000608 <__aeabi_dmul>
 8027e82:	f7d8 fe71 	bl	8000b68 <__aeabi_d2iz>
 8027e86:	4680      	mov	r8, r0
 8027e88:	f7d8 fb54 	bl	8000534 <__aeabi_i2d>
 8027e8c:	2200      	movs	r2, #0
 8027e8e:	4b90      	ldr	r3, [pc, #576]	; (80280d0 <__kernel_rem_pio2+0x678>)
 8027e90:	f7d8 fbba 	bl	8000608 <__aeabi_dmul>
 8027e94:	460b      	mov	r3, r1
 8027e96:	4602      	mov	r2, r0
 8027e98:	4639      	mov	r1, r7
 8027e9a:	4630      	mov	r0, r6
 8027e9c:	f7d8 f9fc 	bl	8000298 <__aeabi_dsub>
 8027ea0:	f7d8 fe62 	bl	8000b68 <__aeabi_d2iz>
 8027ea4:	1c65      	adds	r5, r4, #1
 8027ea6:	ab0e      	add	r3, sp, #56	; 0x38
 8027ea8:	f10a 0a18 	add.w	sl, sl, #24
 8027eac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8027eb0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8027eb4:	e719      	b.n	8027cea <__kernel_rem_pio2+0x292>
 8027eb6:	4630      	mov	r0, r6
 8027eb8:	4639      	mov	r1, r7
 8027eba:	f7d8 fe55 	bl	8000b68 <__aeabi_d2iz>
 8027ebe:	ab0e      	add	r3, sp, #56	; 0x38
 8027ec0:	4625      	mov	r5, r4
 8027ec2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8027ec6:	e710      	b.n	8027cea <__kernel_rem_pio2+0x292>
 8027ec8:	ab0e      	add	r3, sp, #56	; 0x38
 8027eca:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8027ece:	f7d8 fb31 	bl	8000534 <__aeabi_i2d>
 8027ed2:	4642      	mov	r2, r8
 8027ed4:	464b      	mov	r3, r9
 8027ed6:	f7d8 fb97 	bl	8000608 <__aeabi_dmul>
 8027eda:	2200      	movs	r2, #0
 8027edc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8027ee0:	4b7c      	ldr	r3, [pc, #496]	; (80280d4 <__kernel_rem_pio2+0x67c>)
 8027ee2:	4640      	mov	r0, r8
 8027ee4:	4649      	mov	r1, r9
 8027ee6:	f7d8 fb8f 	bl	8000608 <__aeabi_dmul>
 8027eea:	3f01      	subs	r7, #1
 8027eec:	4680      	mov	r8, r0
 8027eee:	4689      	mov	r9, r1
 8027ef0:	e708      	b.n	8027d04 <__kernel_rem_pio2+0x2ac>
 8027ef2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8027ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027efa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8027efe:	f7d8 fb83 	bl	8000608 <__aeabi_dmul>
 8027f02:	4602      	mov	r2, r0
 8027f04:	460b      	mov	r3, r1
 8027f06:	4640      	mov	r0, r8
 8027f08:	4649      	mov	r1, r9
 8027f0a:	f7d8 f9c7 	bl	800029c <__adddf3>
 8027f0e:	3701      	adds	r7, #1
 8027f10:	4680      	mov	r8, r0
 8027f12:	4689      	mov	r9, r1
 8027f14:	9b04      	ldr	r3, [sp, #16]
 8027f16:	429f      	cmp	r7, r3
 8027f18:	dc01      	bgt.n	8027f1e <__kernel_rem_pio2+0x4c6>
 8027f1a:	45ba      	cmp	sl, r7
 8027f1c:	dae9      	bge.n	8027ef2 <__kernel_rem_pio2+0x49a>
 8027f1e:	ab4a      	add	r3, sp, #296	; 0x128
 8027f20:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8027f24:	e9c3 8900 	strd	r8, r9, [r3]
 8027f28:	f10a 0a01 	add.w	sl, sl, #1
 8027f2c:	3e08      	subs	r6, #8
 8027f2e:	e6f0      	b.n	8027d12 <__kernel_rem_pio2+0x2ba>
 8027f30:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8027f32:	2b03      	cmp	r3, #3
 8027f34:	d85b      	bhi.n	8027fee <__kernel_rem_pio2+0x596>
 8027f36:	e8df f003 	tbb	[pc, r3]
 8027f3a:	264a      	.short	0x264a
 8027f3c:	0226      	.short	0x0226
 8027f3e:	ab9a      	add	r3, sp, #616	; 0x268
 8027f40:	441c      	add	r4, r3
 8027f42:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8027f46:	46a2      	mov	sl, r4
 8027f48:	46ab      	mov	fp, r5
 8027f4a:	f1bb 0f00 	cmp.w	fp, #0
 8027f4e:	dc6c      	bgt.n	802802a <__kernel_rem_pio2+0x5d2>
 8027f50:	46a2      	mov	sl, r4
 8027f52:	46ab      	mov	fp, r5
 8027f54:	f1bb 0f01 	cmp.w	fp, #1
 8027f58:	f300 8086 	bgt.w	8028068 <__kernel_rem_pio2+0x610>
 8027f5c:	2000      	movs	r0, #0
 8027f5e:	2100      	movs	r1, #0
 8027f60:	2d01      	cmp	r5, #1
 8027f62:	f300 80a0 	bgt.w	80280a6 <__kernel_rem_pio2+0x64e>
 8027f66:	9b02      	ldr	r3, [sp, #8]
 8027f68:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8027f6c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8027f70:	2b00      	cmp	r3, #0
 8027f72:	f040 809e 	bne.w	80280b2 <__kernel_rem_pio2+0x65a>
 8027f76:	9b01      	ldr	r3, [sp, #4]
 8027f78:	e9c3 7800 	strd	r7, r8, [r3]
 8027f7c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8027f80:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8027f84:	e033      	b.n	8027fee <__kernel_rem_pio2+0x596>
 8027f86:	3408      	adds	r4, #8
 8027f88:	ab4a      	add	r3, sp, #296	; 0x128
 8027f8a:	441c      	add	r4, r3
 8027f8c:	462e      	mov	r6, r5
 8027f8e:	2000      	movs	r0, #0
 8027f90:	2100      	movs	r1, #0
 8027f92:	2e00      	cmp	r6, #0
 8027f94:	da3a      	bge.n	802800c <__kernel_rem_pio2+0x5b4>
 8027f96:	9b02      	ldr	r3, [sp, #8]
 8027f98:	2b00      	cmp	r3, #0
 8027f9a:	d03d      	beq.n	8028018 <__kernel_rem_pio2+0x5c0>
 8027f9c:	4602      	mov	r2, r0
 8027f9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8027fa2:	9c01      	ldr	r4, [sp, #4]
 8027fa4:	e9c4 2300 	strd	r2, r3, [r4]
 8027fa8:	4602      	mov	r2, r0
 8027faa:	460b      	mov	r3, r1
 8027fac:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8027fb0:	f7d8 f972 	bl	8000298 <__aeabi_dsub>
 8027fb4:	ae4c      	add	r6, sp, #304	; 0x130
 8027fb6:	2401      	movs	r4, #1
 8027fb8:	42a5      	cmp	r5, r4
 8027fba:	da30      	bge.n	802801e <__kernel_rem_pio2+0x5c6>
 8027fbc:	9b02      	ldr	r3, [sp, #8]
 8027fbe:	b113      	cbz	r3, 8027fc6 <__kernel_rem_pio2+0x56e>
 8027fc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8027fc4:	4619      	mov	r1, r3
 8027fc6:	9b01      	ldr	r3, [sp, #4]
 8027fc8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8027fcc:	e00f      	b.n	8027fee <__kernel_rem_pio2+0x596>
 8027fce:	ab9a      	add	r3, sp, #616	; 0x268
 8027fd0:	441c      	add	r4, r3
 8027fd2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8027fd6:	2000      	movs	r0, #0
 8027fd8:	2100      	movs	r1, #0
 8027fda:	2d00      	cmp	r5, #0
 8027fdc:	da10      	bge.n	8028000 <__kernel_rem_pio2+0x5a8>
 8027fde:	9b02      	ldr	r3, [sp, #8]
 8027fe0:	b113      	cbz	r3, 8027fe8 <__kernel_rem_pio2+0x590>
 8027fe2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8027fe6:	4619      	mov	r1, r3
 8027fe8:	9b01      	ldr	r3, [sp, #4]
 8027fea:	e9c3 0100 	strd	r0, r1, [r3]
 8027fee:	9b06      	ldr	r3, [sp, #24]
 8027ff0:	f003 0007 	and.w	r0, r3, #7
 8027ff4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8027ff8:	ecbd 8b02 	vpop	{d8}
 8027ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028000:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8028004:	f7d8 f94a 	bl	800029c <__adddf3>
 8028008:	3d01      	subs	r5, #1
 802800a:	e7e6      	b.n	8027fda <__kernel_rem_pio2+0x582>
 802800c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8028010:	f7d8 f944 	bl	800029c <__adddf3>
 8028014:	3e01      	subs	r6, #1
 8028016:	e7bc      	b.n	8027f92 <__kernel_rem_pio2+0x53a>
 8028018:	4602      	mov	r2, r0
 802801a:	460b      	mov	r3, r1
 802801c:	e7c1      	b.n	8027fa2 <__kernel_rem_pio2+0x54a>
 802801e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8028022:	f7d8 f93b 	bl	800029c <__adddf3>
 8028026:	3401      	adds	r4, #1
 8028028:	e7c6      	b.n	8027fb8 <__kernel_rem_pio2+0x560>
 802802a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 802802e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8028032:	4640      	mov	r0, r8
 8028034:	ec53 2b17 	vmov	r2, r3, d7
 8028038:	4649      	mov	r1, r9
 802803a:	ed8d 7b04 	vstr	d7, [sp, #16]
 802803e:	f7d8 f92d 	bl	800029c <__adddf3>
 8028042:	4602      	mov	r2, r0
 8028044:	460b      	mov	r3, r1
 8028046:	4606      	mov	r6, r0
 8028048:	460f      	mov	r7, r1
 802804a:	4640      	mov	r0, r8
 802804c:	4649      	mov	r1, r9
 802804e:	f7d8 f923 	bl	8000298 <__aeabi_dsub>
 8028052:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8028056:	f7d8 f921 	bl	800029c <__adddf3>
 802805a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802805e:	e9ca 0100 	strd	r0, r1, [sl]
 8028062:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8028066:	e770      	b.n	8027f4a <__kernel_rem_pio2+0x4f2>
 8028068:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 802806c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8028070:	4630      	mov	r0, r6
 8028072:	ec53 2b17 	vmov	r2, r3, d7
 8028076:	4639      	mov	r1, r7
 8028078:	ed8d 7b04 	vstr	d7, [sp, #16]
 802807c:	f7d8 f90e 	bl	800029c <__adddf3>
 8028080:	4602      	mov	r2, r0
 8028082:	460b      	mov	r3, r1
 8028084:	4680      	mov	r8, r0
 8028086:	4689      	mov	r9, r1
 8028088:	4630      	mov	r0, r6
 802808a:	4639      	mov	r1, r7
 802808c:	f7d8 f904 	bl	8000298 <__aeabi_dsub>
 8028090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8028094:	f7d8 f902 	bl	800029c <__adddf3>
 8028098:	f10b 3bff 	add.w	fp, fp, #4294967295
 802809c:	e9ca 0100 	strd	r0, r1, [sl]
 80280a0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80280a4:	e756      	b.n	8027f54 <__kernel_rem_pio2+0x4fc>
 80280a6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80280aa:	f7d8 f8f7 	bl	800029c <__adddf3>
 80280ae:	3d01      	subs	r5, #1
 80280b0:	e756      	b.n	8027f60 <__kernel_rem_pio2+0x508>
 80280b2:	9b01      	ldr	r3, [sp, #4]
 80280b4:	9a01      	ldr	r2, [sp, #4]
 80280b6:	601f      	str	r7, [r3, #0]
 80280b8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80280bc:	605c      	str	r4, [r3, #4]
 80280be:	609d      	str	r5, [r3, #8]
 80280c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80280c4:	60d3      	str	r3, [r2, #12]
 80280c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80280ca:	6110      	str	r0, [r2, #16]
 80280cc:	6153      	str	r3, [r2, #20]
 80280ce:	e78e      	b.n	8027fee <__kernel_rem_pio2+0x596>
 80280d0:	41700000 	.word	0x41700000
 80280d4:	3e700000 	.word	0x3e700000

080280d8 <__kernel_sin>:
 80280d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80280dc:	ec55 4b10 	vmov	r4, r5, d0
 80280e0:	b085      	sub	sp, #20
 80280e2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80280e6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80280ea:	ed8d 1b00 	vstr	d1, [sp]
 80280ee:	9002      	str	r0, [sp, #8]
 80280f0:	da06      	bge.n	8028100 <__kernel_sin+0x28>
 80280f2:	ee10 0a10 	vmov	r0, s0
 80280f6:	4629      	mov	r1, r5
 80280f8:	f7d8 fd36 	bl	8000b68 <__aeabi_d2iz>
 80280fc:	2800      	cmp	r0, #0
 80280fe:	d051      	beq.n	80281a4 <__kernel_sin+0xcc>
 8028100:	4622      	mov	r2, r4
 8028102:	462b      	mov	r3, r5
 8028104:	4620      	mov	r0, r4
 8028106:	4629      	mov	r1, r5
 8028108:	f7d8 fa7e 	bl	8000608 <__aeabi_dmul>
 802810c:	4682      	mov	sl, r0
 802810e:	468b      	mov	fp, r1
 8028110:	4602      	mov	r2, r0
 8028112:	460b      	mov	r3, r1
 8028114:	4620      	mov	r0, r4
 8028116:	4629      	mov	r1, r5
 8028118:	f7d8 fa76 	bl	8000608 <__aeabi_dmul>
 802811c:	a341      	add	r3, pc, #260	; (adr r3, 8028224 <__kernel_sin+0x14c>)
 802811e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028122:	4680      	mov	r8, r0
 8028124:	4689      	mov	r9, r1
 8028126:	4650      	mov	r0, sl
 8028128:	4659      	mov	r1, fp
 802812a:	f7d8 fa6d 	bl	8000608 <__aeabi_dmul>
 802812e:	a33f      	add	r3, pc, #252	; (adr r3, 802822c <__kernel_sin+0x154>)
 8028130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028134:	f7d8 f8b0 	bl	8000298 <__aeabi_dsub>
 8028138:	4652      	mov	r2, sl
 802813a:	465b      	mov	r3, fp
 802813c:	f7d8 fa64 	bl	8000608 <__aeabi_dmul>
 8028140:	a33c      	add	r3, pc, #240	; (adr r3, 8028234 <__kernel_sin+0x15c>)
 8028142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028146:	f7d8 f8a9 	bl	800029c <__adddf3>
 802814a:	4652      	mov	r2, sl
 802814c:	465b      	mov	r3, fp
 802814e:	f7d8 fa5b 	bl	8000608 <__aeabi_dmul>
 8028152:	a33a      	add	r3, pc, #232	; (adr r3, 802823c <__kernel_sin+0x164>)
 8028154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028158:	f7d8 f89e 	bl	8000298 <__aeabi_dsub>
 802815c:	4652      	mov	r2, sl
 802815e:	465b      	mov	r3, fp
 8028160:	f7d8 fa52 	bl	8000608 <__aeabi_dmul>
 8028164:	a337      	add	r3, pc, #220	; (adr r3, 8028244 <__kernel_sin+0x16c>)
 8028166:	e9d3 2300 	ldrd	r2, r3, [r3]
 802816a:	f7d8 f897 	bl	800029c <__adddf3>
 802816e:	9b02      	ldr	r3, [sp, #8]
 8028170:	4606      	mov	r6, r0
 8028172:	460f      	mov	r7, r1
 8028174:	b9db      	cbnz	r3, 80281ae <__kernel_sin+0xd6>
 8028176:	4602      	mov	r2, r0
 8028178:	460b      	mov	r3, r1
 802817a:	4650      	mov	r0, sl
 802817c:	4659      	mov	r1, fp
 802817e:	f7d8 fa43 	bl	8000608 <__aeabi_dmul>
 8028182:	a325      	add	r3, pc, #148	; (adr r3, 8028218 <__kernel_sin+0x140>)
 8028184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028188:	f7d8 f886 	bl	8000298 <__aeabi_dsub>
 802818c:	4642      	mov	r2, r8
 802818e:	464b      	mov	r3, r9
 8028190:	f7d8 fa3a 	bl	8000608 <__aeabi_dmul>
 8028194:	4602      	mov	r2, r0
 8028196:	460b      	mov	r3, r1
 8028198:	4620      	mov	r0, r4
 802819a:	4629      	mov	r1, r5
 802819c:	f7d8 f87e 	bl	800029c <__adddf3>
 80281a0:	4604      	mov	r4, r0
 80281a2:	460d      	mov	r5, r1
 80281a4:	ec45 4b10 	vmov	d0, r4, r5
 80281a8:	b005      	add	sp, #20
 80281aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80281ae:	2200      	movs	r2, #0
 80281b0:	4b1b      	ldr	r3, [pc, #108]	; (8028220 <__kernel_sin+0x148>)
 80281b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80281b6:	f7d8 fa27 	bl	8000608 <__aeabi_dmul>
 80281ba:	4632      	mov	r2, r6
 80281bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80281c0:	463b      	mov	r3, r7
 80281c2:	4640      	mov	r0, r8
 80281c4:	4649      	mov	r1, r9
 80281c6:	f7d8 fa1f 	bl	8000608 <__aeabi_dmul>
 80281ca:	4602      	mov	r2, r0
 80281cc:	460b      	mov	r3, r1
 80281ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80281d2:	f7d8 f861 	bl	8000298 <__aeabi_dsub>
 80281d6:	4652      	mov	r2, sl
 80281d8:	465b      	mov	r3, fp
 80281da:	f7d8 fa15 	bl	8000608 <__aeabi_dmul>
 80281de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80281e2:	f7d8 f859 	bl	8000298 <__aeabi_dsub>
 80281e6:	a30c      	add	r3, pc, #48	; (adr r3, 8028218 <__kernel_sin+0x140>)
 80281e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80281ec:	4606      	mov	r6, r0
 80281ee:	460f      	mov	r7, r1
 80281f0:	4640      	mov	r0, r8
 80281f2:	4649      	mov	r1, r9
 80281f4:	f7d8 fa08 	bl	8000608 <__aeabi_dmul>
 80281f8:	4602      	mov	r2, r0
 80281fa:	460b      	mov	r3, r1
 80281fc:	4630      	mov	r0, r6
 80281fe:	4639      	mov	r1, r7
 8028200:	f7d8 f84c 	bl	800029c <__adddf3>
 8028204:	4602      	mov	r2, r0
 8028206:	460b      	mov	r3, r1
 8028208:	4620      	mov	r0, r4
 802820a:	4629      	mov	r1, r5
 802820c:	f7d8 f844 	bl	8000298 <__aeabi_dsub>
 8028210:	e7c6      	b.n	80281a0 <__kernel_sin+0xc8>
 8028212:	bf00      	nop
 8028214:	f3af 8000 	nop.w
 8028218:	55555549 	.word	0x55555549
 802821c:	3fc55555 	.word	0x3fc55555
 8028220:	3fe00000 	.word	0x3fe00000
 8028224:	5acfd57c 	.word	0x5acfd57c
 8028228:	3de5d93a 	.word	0x3de5d93a
 802822c:	8a2b9ceb 	.word	0x8a2b9ceb
 8028230:	3e5ae5e6 	.word	0x3e5ae5e6
 8028234:	57b1fe7d 	.word	0x57b1fe7d
 8028238:	3ec71de3 	.word	0x3ec71de3
 802823c:	19c161d5 	.word	0x19c161d5
 8028240:	3f2a01a0 	.word	0x3f2a01a0
 8028244:	1110f8a6 	.word	0x1110f8a6
 8028248:	3f811111 	.word	0x3f811111

0802824c <__kernel_cosf>:
 802824c:	ee10 3a10 	vmov	r3, s0
 8028250:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8028254:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8028258:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802825c:	da05      	bge.n	802826a <__kernel_cosf+0x1e>
 802825e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8028262:	ee17 2a90 	vmov	r2, s15
 8028266:	2a00      	cmp	r2, #0
 8028268:	d03b      	beq.n	80282e2 <__kernel_cosf+0x96>
 802826a:	ee20 6a00 	vmul.f32	s12, s0, s0
 802826e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8028272:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80282e8 <__kernel_cosf+0x9c>
 8028276:	4a1d      	ldr	r2, [pc, #116]	; (80282ec <__kernel_cosf+0xa0>)
 8028278:	ee66 7a07 	vmul.f32	s15, s12, s14
 802827c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80282f0 <__kernel_cosf+0xa4>
 8028280:	eea6 7a25 	vfma.f32	s14, s12, s11
 8028284:	4293      	cmp	r3, r2
 8028286:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80282f4 <__kernel_cosf+0xa8>
 802828a:	eee7 5a06 	vfma.f32	s11, s14, s12
 802828e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80282f8 <__kernel_cosf+0xac>
 8028292:	eea5 7a86 	vfma.f32	s14, s11, s12
 8028296:	eddf 5a19 	vldr	s11, [pc, #100]	; 80282fc <__kernel_cosf+0xb0>
 802829a:	eee7 5a06 	vfma.f32	s11, s14, s12
 802829e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8028300 <__kernel_cosf+0xb4>
 80282a2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80282a6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80282aa:	ee27 7a06 	vmul.f32	s14, s14, s12
 80282ae:	eee6 0a07 	vfma.f32	s1, s12, s14
 80282b2:	dc04      	bgt.n	80282be <__kernel_cosf+0x72>
 80282b4:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80282b8:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80282bc:	4770      	bx	lr
 80282be:	4a11      	ldr	r2, [pc, #68]	; (8028304 <__kernel_cosf+0xb8>)
 80282c0:	4293      	cmp	r3, r2
 80282c2:	bfda      	itte	le
 80282c4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80282c8:	ee07 3a10 	vmovle	s14, r3
 80282cc:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80282d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80282d4:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80282d8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80282dc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80282e0:	4770      	bx	lr
 80282e2:	eeb0 0a66 	vmov.f32	s0, s13
 80282e6:	4770      	bx	lr
 80282e8:	ad47d74e 	.word	0xad47d74e
 80282ec:	3e999999 	.word	0x3e999999
 80282f0:	310f74f6 	.word	0x310f74f6
 80282f4:	b493f27c 	.word	0xb493f27c
 80282f8:	37d00d01 	.word	0x37d00d01
 80282fc:	bab60b61 	.word	0xbab60b61
 8028300:	3d2aaaab 	.word	0x3d2aaaab
 8028304:	3f480000 	.word	0x3f480000

08028308 <__kernel_rem_pio2f>:
 8028308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802830c:	ed2d 8b04 	vpush	{d8-d9}
 8028310:	b0d7      	sub	sp, #348	; 0x15c
 8028312:	469b      	mov	fp, r3
 8028314:	460e      	mov	r6, r1
 8028316:	4bbe      	ldr	r3, [pc, #760]	; (8028610 <__kernel_rem_pio2f+0x308>)
 8028318:	9964      	ldr	r1, [sp, #400]	; 0x190
 802831a:	9002      	str	r0, [sp, #8]
 802831c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8028320:	9865      	ldr	r0, [sp, #404]	; 0x194
 8028322:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8028620 <__kernel_rem_pio2f+0x318>
 8028326:	1ed1      	subs	r1, r2, #3
 8028328:	2308      	movs	r3, #8
 802832a:	fb91 f1f3 	sdiv	r1, r1, r3
 802832e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8028332:	f10b 3aff 	add.w	sl, fp, #4294967295
 8028336:	1c4c      	adds	r4, r1, #1
 8028338:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 802833c:	eba1 050a 	sub.w	r5, r1, sl
 8028340:	aa1a      	add	r2, sp, #104	; 0x68
 8028342:	eb09 070a 	add.w	r7, r9, sl
 8028346:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 802834a:	4696      	mov	lr, r2
 802834c:	2300      	movs	r3, #0
 802834e:	42bb      	cmp	r3, r7
 8028350:	dd0f      	ble.n	8028372 <__kernel_rem_pio2f+0x6a>
 8028352:	af42      	add	r7, sp, #264	; 0x108
 8028354:	2200      	movs	r2, #0
 8028356:	454a      	cmp	r2, r9
 8028358:	dc27      	bgt.n	80283aa <__kernel_rem_pio2f+0xa2>
 802835a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 802835e:	eb0b 0302 	add.w	r3, fp, r2
 8028362:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8028366:	9d02      	ldr	r5, [sp, #8]
 8028368:	eddf 7aad 	vldr	s15, [pc, #692]	; 8028620 <__kernel_rem_pio2f+0x318>
 802836c:	f04f 0c00 	mov.w	ip, #0
 8028370:	e015      	b.n	802839e <__kernel_rem_pio2f+0x96>
 8028372:	42dd      	cmn	r5, r3
 8028374:	bf5d      	ittte	pl
 8028376:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 802837a:	ee07 2a90 	vmovpl	s15, r2
 802837e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8028382:	eef0 7a47 	vmovmi.f32	s15, s14
 8028386:	ecee 7a01 	vstmia	lr!, {s15}
 802838a:	3301      	adds	r3, #1
 802838c:	e7df      	b.n	802834e <__kernel_rem_pio2f+0x46>
 802838e:	ecf5 6a01 	vldmia	r5!, {s13}
 8028392:	ed33 7a01 	vldmdb	r3!, {s14}
 8028396:	eee6 7a87 	vfma.f32	s15, s13, s14
 802839a:	f10c 0c01 	add.w	ip, ip, #1
 802839e:	45d4      	cmp	ip, sl
 80283a0:	ddf5      	ble.n	802838e <__kernel_rem_pio2f+0x86>
 80283a2:	ece7 7a01 	vstmia	r7!, {s15}
 80283a6:	3201      	adds	r2, #1
 80283a8:	e7d5      	b.n	8028356 <__kernel_rem_pio2f+0x4e>
 80283aa:	ab06      	add	r3, sp, #24
 80283ac:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80283b0:	9304      	str	r3, [sp, #16]
 80283b2:	eddf 8a9a 	vldr	s17, [pc, #616]	; 802861c <__kernel_rem_pio2f+0x314>
 80283b6:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8028618 <__kernel_rem_pio2f+0x310>
 80283ba:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80283be:	9303      	str	r3, [sp, #12]
 80283c0:	464d      	mov	r5, r9
 80283c2:	ab56      	add	r3, sp, #344	; 0x158
 80283c4:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80283c8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80283cc:	3f01      	subs	r7, #1
 80283ce:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80283d2:	00bf      	lsls	r7, r7, #2
 80283d4:	ab56      	add	r3, sp, #344	; 0x158
 80283d6:	19da      	adds	r2, r3, r7
 80283d8:	3a4c      	subs	r2, #76	; 0x4c
 80283da:	2300      	movs	r3, #0
 80283dc:	1ae9      	subs	r1, r5, r3
 80283de:	2900      	cmp	r1, #0
 80283e0:	dc4c      	bgt.n	802847c <__kernel_rem_pio2f+0x174>
 80283e2:	4620      	mov	r0, r4
 80283e4:	f000 fd1a 	bl	8028e1c <scalbnf>
 80283e8:	eeb0 8a40 	vmov.f32	s16, s0
 80283ec:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80283f0:	ee28 0a00 	vmul.f32	s0, s16, s0
 80283f4:	f7fd fa7c 	bl	80258f0 <floorf>
 80283f8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80283fc:	eea0 8a67 	vfms.f32	s16, s0, s15
 8028400:	2c00      	cmp	r4, #0
 8028402:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8028406:	edcd 7a01 	vstr	s15, [sp, #4]
 802840a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802840e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8028412:	dd48      	ble.n	80284a6 <__kernel_rem_pio2f+0x19e>
 8028414:	1e69      	subs	r1, r5, #1
 8028416:	ab06      	add	r3, sp, #24
 8028418:	f1c4 0008 	rsb	r0, r4, #8
 802841c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8028420:	9a01      	ldr	r2, [sp, #4]
 8028422:	fa4c f300 	asr.w	r3, ip, r0
 8028426:	441a      	add	r2, r3
 8028428:	4083      	lsls	r3, r0
 802842a:	9201      	str	r2, [sp, #4]
 802842c:	ebac 0203 	sub.w	r2, ip, r3
 8028430:	ab06      	add	r3, sp, #24
 8028432:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8028436:	f1c4 0307 	rsb	r3, r4, #7
 802843a:	fa42 f803 	asr.w	r8, r2, r3
 802843e:	f1b8 0f00 	cmp.w	r8, #0
 8028442:	dd41      	ble.n	80284c8 <__kernel_rem_pio2f+0x1c0>
 8028444:	9b01      	ldr	r3, [sp, #4]
 8028446:	2000      	movs	r0, #0
 8028448:	3301      	adds	r3, #1
 802844a:	9301      	str	r3, [sp, #4]
 802844c:	4601      	mov	r1, r0
 802844e:	4285      	cmp	r5, r0
 8028450:	dc6d      	bgt.n	802852e <__kernel_rem_pio2f+0x226>
 8028452:	2c00      	cmp	r4, #0
 8028454:	dd04      	ble.n	8028460 <__kernel_rem_pio2f+0x158>
 8028456:	2c01      	cmp	r4, #1
 8028458:	d07e      	beq.n	8028558 <__kernel_rem_pio2f+0x250>
 802845a:	2c02      	cmp	r4, #2
 802845c:	f000 8086 	beq.w	802856c <__kernel_rem_pio2f+0x264>
 8028460:	f1b8 0f02 	cmp.w	r8, #2
 8028464:	d130      	bne.n	80284c8 <__kernel_rem_pio2f+0x1c0>
 8028466:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802846a:	ee30 8a48 	vsub.f32	s16, s0, s16
 802846e:	b359      	cbz	r1, 80284c8 <__kernel_rem_pio2f+0x1c0>
 8028470:	4620      	mov	r0, r4
 8028472:	f000 fcd3 	bl	8028e1c <scalbnf>
 8028476:	ee38 8a40 	vsub.f32	s16, s16, s0
 802847a:	e025      	b.n	80284c8 <__kernel_rem_pio2f+0x1c0>
 802847c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8028480:	a806      	add	r0, sp, #24
 8028482:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802848a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802848e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8028492:	ee10 1a10 	vmov	r1, s0
 8028496:	ed32 0a01 	vldmdb	r2!, {s0}
 802849a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 802849e:	ee37 0a80 	vadd.f32	s0, s15, s0
 80284a2:	3301      	adds	r3, #1
 80284a4:	e79a      	b.n	80283dc <__kernel_rem_pio2f+0xd4>
 80284a6:	d106      	bne.n	80284b6 <__kernel_rem_pio2f+0x1ae>
 80284a8:	1e6b      	subs	r3, r5, #1
 80284aa:	aa06      	add	r2, sp, #24
 80284ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80284b0:	ea4f 2822 	mov.w	r8, r2, asr #8
 80284b4:	e7c3      	b.n	802843e <__kernel_rem_pio2f+0x136>
 80284b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80284ba:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80284be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80284c2:	da31      	bge.n	8028528 <__kernel_rem_pio2f+0x220>
 80284c4:	f04f 0800 	mov.w	r8, #0
 80284c8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80284cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80284d0:	f040 80a8 	bne.w	8028624 <__kernel_rem_pio2f+0x31c>
 80284d4:	1e6b      	subs	r3, r5, #1
 80284d6:	4618      	mov	r0, r3
 80284d8:	2200      	movs	r2, #0
 80284da:	4548      	cmp	r0, r9
 80284dc:	da4d      	bge.n	802857a <__kernel_rem_pio2f+0x272>
 80284de:	2a00      	cmp	r2, #0
 80284e0:	f000 8087 	beq.w	80285f2 <__kernel_rem_pio2f+0x2ea>
 80284e4:	aa06      	add	r2, sp, #24
 80284e6:	3c08      	subs	r4, #8
 80284e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80284ec:	2900      	cmp	r1, #0
 80284ee:	f000 808d 	beq.w	802860c <__kernel_rem_pio2f+0x304>
 80284f2:	4620      	mov	r0, r4
 80284f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80284f8:	9302      	str	r3, [sp, #8]
 80284fa:	f000 fc8f 	bl	8028e1c <scalbnf>
 80284fe:	9b02      	ldr	r3, [sp, #8]
 8028500:	ed9f 7a46 	vldr	s14, [pc, #280]	; 802861c <__kernel_rem_pio2f+0x314>
 8028504:	0099      	lsls	r1, r3, #2
 8028506:	aa42      	add	r2, sp, #264	; 0x108
 8028508:	1850      	adds	r0, r2, r1
 802850a:	1d05      	adds	r5, r0, #4
 802850c:	461c      	mov	r4, r3
 802850e:	2c00      	cmp	r4, #0
 8028510:	f280 80b8 	bge.w	8028684 <__kernel_rem_pio2f+0x37c>
 8028514:	2500      	movs	r5, #0
 8028516:	1b5c      	subs	r4, r3, r5
 8028518:	2c00      	cmp	r4, #0
 802851a:	f2c0 80d8 	blt.w	80286ce <__kernel_rem_pio2f+0x3c6>
 802851e:	4f3d      	ldr	r7, [pc, #244]	; (8028614 <__kernel_rem_pio2f+0x30c>)
 8028520:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8028620 <__kernel_rem_pio2f+0x318>
 8028524:	2400      	movs	r4, #0
 8028526:	e0c6      	b.n	80286b6 <__kernel_rem_pio2f+0x3ae>
 8028528:	f04f 0802 	mov.w	r8, #2
 802852c:	e78a      	b.n	8028444 <__kernel_rem_pio2f+0x13c>
 802852e:	ab06      	add	r3, sp, #24
 8028530:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8028534:	b949      	cbnz	r1, 802854a <__kernel_rem_pio2f+0x242>
 8028536:	b12b      	cbz	r3, 8028544 <__kernel_rem_pio2f+0x23c>
 8028538:	aa06      	add	r2, sp, #24
 802853a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802853e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8028542:	2301      	movs	r3, #1
 8028544:	3001      	adds	r0, #1
 8028546:	4619      	mov	r1, r3
 8028548:	e781      	b.n	802844e <__kernel_rem_pio2f+0x146>
 802854a:	aa06      	add	r2, sp, #24
 802854c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8028550:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8028554:	460b      	mov	r3, r1
 8028556:	e7f5      	b.n	8028544 <__kernel_rem_pio2f+0x23c>
 8028558:	1e68      	subs	r0, r5, #1
 802855a:	ab06      	add	r3, sp, #24
 802855c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8028560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028564:	aa06      	add	r2, sp, #24
 8028566:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802856a:	e779      	b.n	8028460 <__kernel_rem_pio2f+0x158>
 802856c:	1e68      	subs	r0, r5, #1
 802856e:	ab06      	add	r3, sp, #24
 8028570:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8028574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8028578:	e7f4      	b.n	8028564 <__kernel_rem_pio2f+0x25c>
 802857a:	a906      	add	r1, sp, #24
 802857c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8028580:	3801      	subs	r0, #1
 8028582:	430a      	orrs	r2, r1
 8028584:	e7a9      	b.n	80284da <__kernel_rem_pio2f+0x1d2>
 8028586:	f10c 0c01 	add.w	ip, ip, #1
 802858a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802858e:	2a00      	cmp	r2, #0
 8028590:	d0f9      	beq.n	8028586 <__kernel_rem_pio2f+0x27e>
 8028592:	eb0b 0305 	add.w	r3, fp, r5
 8028596:	aa1a      	add	r2, sp, #104	; 0x68
 8028598:	009b      	lsls	r3, r3, #2
 802859a:	1898      	adds	r0, r3, r2
 802859c:	3004      	adds	r0, #4
 802859e:	1c69      	adds	r1, r5, #1
 80285a0:	3704      	adds	r7, #4
 80285a2:	2200      	movs	r2, #0
 80285a4:	4465      	add	r5, ip
 80285a6:	9005      	str	r0, [sp, #20]
 80285a8:	428d      	cmp	r5, r1
 80285aa:	f6ff af0a 	blt.w	80283c2 <__kernel_rem_pio2f+0xba>
 80285ae:	a81a      	add	r0, sp, #104	; 0x68
 80285b0:	eb02 0c03 	add.w	ip, r2, r3
 80285b4:	4484      	add	ip, r0
 80285b6:	9803      	ldr	r0, [sp, #12]
 80285b8:	f8dd e008 	ldr.w	lr, [sp, #8]
 80285bc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80285c0:	9001      	str	r0, [sp, #4]
 80285c2:	ee07 0a90 	vmov	s15, r0
 80285c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80285ca:	9805      	ldr	r0, [sp, #20]
 80285cc:	edcc 7a00 	vstr	s15, [ip]
 80285d0:	eddf 7a13 	vldr	s15, [pc, #76]	; 8028620 <__kernel_rem_pio2f+0x318>
 80285d4:	eb00 0802 	add.w	r8, r0, r2
 80285d8:	f04f 0c00 	mov.w	ip, #0
 80285dc:	45d4      	cmp	ip, sl
 80285de:	dd0c      	ble.n	80285fa <__kernel_rem_pio2f+0x2f2>
 80285e0:	eb02 0c07 	add.w	ip, r2, r7
 80285e4:	a842      	add	r0, sp, #264	; 0x108
 80285e6:	4484      	add	ip, r0
 80285e8:	edcc 7a01 	vstr	s15, [ip, #4]
 80285ec:	3101      	adds	r1, #1
 80285ee:	3204      	adds	r2, #4
 80285f0:	e7da      	b.n	80285a8 <__kernel_rem_pio2f+0x2a0>
 80285f2:	9b04      	ldr	r3, [sp, #16]
 80285f4:	f04f 0c01 	mov.w	ip, #1
 80285f8:	e7c7      	b.n	802858a <__kernel_rem_pio2f+0x282>
 80285fa:	ecfe 6a01 	vldmia	lr!, {s13}
 80285fe:	ed38 7a01 	vldmdb	r8!, {s14}
 8028602:	f10c 0c01 	add.w	ip, ip, #1
 8028606:	eee6 7a87 	vfma.f32	s15, s13, s14
 802860a:	e7e7      	b.n	80285dc <__kernel_rem_pio2f+0x2d4>
 802860c:	3b01      	subs	r3, #1
 802860e:	e769      	b.n	80284e4 <__kernel_rem_pio2f+0x1dc>
 8028610:	0802eda4 	.word	0x0802eda4
 8028614:	0802ed78 	.word	0x0802ed78
 8028618:	43800000 	.word	0x43800000
 802861c:	3b800000 	.word	0x3b800000
 8028620:	00000000 	.word	0x00000000
 8028624:	4260      	negs	r0, r4
 8028626:	eeb0 0a48 	vmov.f32	s0, s16
 802862a:	f000 fbf7 	bl	8028e1c <scalbnf>
 802862e:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8028618 <__kernel_rem_pio2f+0x310>
 8028632:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8028636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802863a:	db1a      	blt.n	8028672 <__kernel_rem_pio2f+0x36a>
 802863c:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 802861c <__kernel_rem_pio2f+0x314>
 8028640:	ee60 7a27 	vmul.f32	s15, s0, s15
 8028644:	aa06      	add	r2, sp, #24
 8028646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802864a:	a906      	add	r1, sp, #24
 802864c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028650:	3408      	adds	r4, #8
 8028652:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8028656:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802865a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802865e:	ee10 3a10 	vmov	r3, s0
 8028662:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8028666:	1c6b      	adds	r3, r5, #1
 8028668:	ee17 2a90 	vmov	r2, s15
 802866c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8028670:	e73f      	b.n	80284f2 <__kernel_rem_pio2f+0x1ea>
 8028672:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8028676:	aa06      	add	r2, sp, #24
 8028678:	ee10 3a10 	vmov	r3, s0
 802867c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8028680:	462b      	mov	r3, r5
 8028682:	e736      	b.n	80284f2 <__kernel_rem_pio2f+0x1ea>
 8028684:	aa06      	add	r2, sp, #24
 8028686:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 802868a:	9202      	str	r2, [sp, #8]
 802868c:	ee07 2a90 	vmov	s15, r2
 8028690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028694:	3c01      	subs	r4, #1
 8028696:	ee67 7a80 	vmul.f32	s15, s15, s0
 802869a:	ee20 0a07 	vmul.f32	s0, s0, s14
 802869e:	ed65 7a01 	vstmdb	r5!, {s15}
 80286a2:	e734      	b.n	802850e <__kernel_rem_pio2f+0x206>
 80286a4:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80286a8:	ecf7 6a01 	vldmia	r7!, {s13}
 80286ac:	ed9c 7a00 	vldr	s14, [ip]
 80286b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80286b4:	3401      	adds	r4, #1
 80286b6:	454c      	cmp	r4, r9
 80286b8:	dc01      	bgt.n	80286be <__kernel_rem_pio2f+0x3b6>
 80286ba:	42a5      	cmp	r5, r4
 80286bc:	daf2      	bge.n	80286a4 <__kernel_rem_pio2f+0x39c>
 80286be:	aa56      	add	r2, sp, #344	; 0x158
 80286c0:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80286c4:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80286c8:	3501      	adds	r5, #1
 80286ca:	3804      	subs	r0, #4
 80286cc:	e723      	b.n	8028516 <__kernel_rem_pio2f+0x20e>
 80286ce:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80286d0:	2a03      	cmp	r2, #3
 80286d2:	d84d      	bhi.n	8028770 <__kernel_rem_pio2f+0x468>
 80286d4:	e8df f002 	tbb	[pc, r2]
 80286d8:	021f1f3e 	.word	0x021f1f3e
 80286dc:	aa56      	add	r2, sp, #344	; 0x158
 80286de:	4411      	add	r1, r2
 80286e0:	399c      	subs	r1, #156	; 0x9c
 80286e2:	4608      	mov	r0, r1
 80286e4:	461c      	mov	r4, r3
 80286e6:	2c00      	cmp	r4, #0
 80286e8:	dc5f      	bgt.n	80287aa <__kernel_rem_pio2f+0x4a2>
 80286ea:	4608      	mov	r0, r1
 80286ec:	461c      	mov	r4, r3
 80286ee:	2c01      	cmp	r4, #1
 80286f0:	dc6b      	bgt.n	80287ca <__kernel_rem_pio2f+0x4c2>
 80286f2:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8028620 <__kernel_rem_pio2f+0x318>
 80286f6:	2b01      	cmp	r3, #1
 80286f8:	dc77      	bgt.n	80287ea <__kernel_rem_pio2f+0x4e2>
 80286fa:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80286fe:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8028702:	f1b8 0f00 	cmp.w	r8, #0
 8028706:	d176      	bne.n	80287f6 <__kernel_rem_pio2f+0x4ee>
 8028708:	edc6 6a00 	vstr	s13, [r6]
 802870c:	ed86 7a01 	vstr	s14, [r6, #4]
 8028710:	edc6 7a02 	vstr	s15, [r6, #8]
 8028714:	e02c      	b.n	8028770 <__kernel_rem_pio2f+0x468>
 8028716:	aa56      	add	r2, sp, #344	; 0x158
 8028718:	4411      	add	r1, r2
 802871a:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8028620 <__kernel_rem_pio2f+0x318>
 802871e:	399c      	subs	r1, #156	; 0x9c
 8028720:	4618      	mov	r0, r3
 8028722:	2800      	cmp	r0, #0
 8028724:	da32      	bge.n	802878c <__kernel_rem_pio2f+0x484>
 8028726:	f1b8 0f00 	cmp.w	r8, #0
 802872a:	d035      	beq.n	8028798 <__kernel_rem_pio2f+0x490>
 802872c:	eef1 7a47 	vneg.f32	s15, s14
 8028730:	edc6 7a00 	vstr	s15, [r6]
 8028734:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8028738:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802873c:	a82f      	add	r0, sp, #188	; 0xbc
 802873e:	2101      	movs	r1, #1
 8028740:	428b      	cmp	r3, r1
 8028742:	da2c      	bge.n	802879e <__kernel_rem_pio2f+0x496>
 8028744:	f1b8 0f00 	cmp.w	r8, #0
 8028748:	d001      	beq.n	802874e <__kernel_rem_pio2f+0x446>
 802874a:	eef1 7a67 	vneg.f32	s15, s15
 802874e:	edc6 7a01 	vstr	s15, [r6, #4]
 8028752:	e00d      	b.n	8028770 <__kernel_rem_pio2f+0x468>
 8028754:	aa56      	add	r2, sp, #344	; 0x158
 8028756:	4411      	add	r1, r2
 8028758:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8028620 <__kernel_rem_pio2f+0x318>
 802875c:	399c      	subs	r1, #156	; 0x9c
 802875e:	2b00      	cmp	r3, #0
 8028760:	da0e      	bge.n	8028780 <__kernel_rem_pio2f+0x478>
 8028762:	f1b8 0f00 	cmp.w	r8, #0
 8028766:	d001      	beq.n	802876c <__kernel_rem_pio2f+0x464>
 8028768:	eef1 7a67 	vneg.f32	s15, s15
 802876c:	edc6 7a00 	vstr	s15, [r6]
 8028770:	9b01      	ldr	r3, [sp, #4]
 8028772:	f003 0007 	and.w	r0, r3, #7
 8028776:	b057      	add	sp, #348	; 0x15c
 8028778:	ecbd 8b04 	vpop	{d8-d9}
 802877c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028780:	ed31 7a01 	vldmdb	r1!, {s14}
 8028784:	3b01      	subs	r3, #1
 8028786:	ee77 7a87 	vadd.f32	s15, s15, s14
 802878a:	e7e8      	b.n	802875e <__kernel_rem_pio2f+0x456>
 802878c:	ed71 7a01 	vldmdb	r1!, {s15}
 8028790:	3801      	subs	r0, #1
 8028792:	ee37 7a27 	vadd.f32	s14, s14, s15
 8028796:	e7c4      	b.n	8028722 <__kernel_rem_pio2f+0x41a>
 8028798:	eef0 7a47 	vmov.f32	s15, s14
 802879c:	e7c8      	b.n	8028730 <__kernel_rem_pio2f+0x428>
 802879e:	ecb0 7a01 	vldmia	r0!, {s14}
 80287a2:	3101      	adds	r1, #1
 80287a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80287a8:	e7ca      	b.n	8028740 <__kernel_rem_pio2f+0x438>
 80287aa:	ed50 7a02 	vldr	s15, [r0, #-8]
 80287ae:	ed70 6a01 	vldmdb	r0!, {s13}
 80287b2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80287b6:	3c01      	subs	r4, #1
 80287b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80287bc:	ed00 7a01 	vstr	s14, [r0, #-4]
 80287c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80287c4:	edc0 7a00 	vstr	s15, [r0]
 80287c8:	e78d      	b.n	80286e6 <__kernel_rem_pio2f+0x3de>
 80287ca:	ed50 7a02 	vldr	s15, [r0, #-8]
 80287ce:	ed70 6a01 	vldmdb	r0!, {s13}
 80287d2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80287d6:	3c01      	subs	r4, #1
 80287d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80287dc:	ed00 7a01 	vstr	s14, [r0, #-4]
 80287e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80287e4:	edc0 7a00 	vstr	s15, [r0]
 80287e8:	e781      	b.n	80286ee <__kernel_rem_pio2f+0x3e6>
 80287ea:	ed31 7a01 	vldmdb	r1!, {s14}
 80287ee:	3b01      	subs	r3, #1
 80287f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80287f4:	e77f      	b.n	80286f6 <__kernel_rem_pio2f+0x3ee>
 80287f6:	eef1 6a66 	vneg.f32	s13, s13
 80287fa:	eeb1 7a47 	vneg.f32	s14, s14
 80287fe:	edc6 6a00 	vstr	s13, [r6]
 8028802:	ed86 7a01 	vstr	s14, [r6, #4]
 8028806:	eef1 7a67 	vneg.f32	s15, s15
 802880a:	e781      	b.n	8028710 <__kernel_rem_pio2f+0x408>

0802880c <__kernel_sinf>:
 802880c:	ee10 3a10 	vmov	r3, s0
 8028810:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8028814:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8028818:	da04      	bge.n	8028824 <__kernel_sinf+0x18>
 802881a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802881e:	ee17 3a90 	vmov	r3, s15
 8028822:	b35b      	cbz	r3, 802887c <__kernel_sinf+0x70>
 8028824:	ee20 7a00 	vmul.f32	s14, s0, s0
 8028828:	eddf 7a15 	vldr	s15, [pc, #84]	; 8028880 <__kernel_sinf+0x74>
 802882c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8028884 <__kernel_sinf+0x78>
 8028830:	eea7 6a27 	vfma.f32	s12, s14, s15
 8028834:	eddf 7a14 	vldr	s15, [pc, #80]	; 8028888 <__kernel_sinf+0x7c>
 8028838:	eee6 7a07 	vfma.f32	s15, s12, s14
 802883c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 802888c <__kernel_sinf+0x80>
 8028840:	eea7 6a87 	vfma.f32	s12, s15, s14
 8028844:	eddf 7a12 	vldr	s15, [pc, #72]	; 8028890 <__kernel_sinf+0x84>
 8028848:	ee60 6a07 	vmul.f32	s13, s0, s14
 802884c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8028850:	b930      	cbnz	r0, 8028860 <__kernel_sinf+0x54>
 8028852:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8028894 <__kernel_sinf+0x88>
 8028856:	eea7 6a27 	vfma.f32	s12, s14, s15
 802885a:	eea6 0a26 	vfma.f32	s0, s12, s13
 802885e:	4770      	bx	lr
 8028860:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8028864:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8028868:	eee0 7a86 	vfma.f32	s15, s1, s12
 802886c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8028870:	eddf 7a09 	vldr	s15, [pc, #36]	; 8028898 <__kernel_sinf+0x8c>
 8028874:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8028878:	ee30 0a60 	vsub.f32	s0, s0, s1
 802887c:	4770      	bx	lr
 802887e:	bf00      	nop
 8028880:	2f2ec9d3 	.word	0x2f2ec9d3
 8028884:	b2d72f34 	.word	0xb2d72f34
 8028888:	3638ef1b 	.word	0x3638ef1b
 802888c:	b9500d01 	.word	0xb9500d01
 8028890:	3c088889 	.word	0x3c088889
 8028894:	be2aaaab 	.word	0xbe2aaaab
 8028898:	3e2aaaab 	.word	0x3e2aaaab
 802889c:	00000000 	.word	0x00000000

080288a0 <atan>:
 80288a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80288a4:	ec55 4b10 	vmov	r4, r5, d0
 80288a8:	4bc3      	ldr	r3, [pc, #780]	; (8028bb8 <atan+0x318>)
 80288aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80288ae:	429e      	cmp	r6, r3
 80288b0:	46ab      	mov	fp, r5
 80288b2:	dd18      	ble.n	80288e6 <atan+0x46>
 80288b4:	4bc1      	ldr	r3, [pc, #772]	; (8028bbc <atan+0x31c>)
 80288b6:	429e      	cmp	r6, r3
 80288b8:	dc01      	bgt.n	80288be <atan+0x1e>
 80288ba:	d109      	bne.n	80288d0 <atan+0x30>
 80288bc:	b144      	cbz	r4, 80288d0 <atan+0x30>
 80288be:	4622      	mov	r2, r4
 80288c0:	462b      	mov	r3, r5
 80288c2:	4620      	mov	r0, r4
 80288c4:	4629      	mov	r1, r5
 80288c6:	f7d7 fce9 	bl	800029c <__adddf3>
 80288ca:	4604      	mov	r4, r0
 80288cc:	460d      	mov	r5, r1
 80288ce:	e006      	b.n	80288de <atan+0x3e>
 80288d0:	f1bb 0f00 	cmp.w	fp, #0
 80288d4:	f340 8131 	ble.w	8028b3a <atan+0x29a>
 80288d8:	a59b      	add	r5, pc, #620	; (adr r5, 8028b48 <atan+0x2a8>)
 80288da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80288de:	ec45 4b10 	vmov	d0, r4, r5
 80288e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80288e6:	4bb6      	ldr	r3, [pc, #728]	; (8028bc0 <atan+0x320>)
 80288e8:	429e      	cmp	r6, r3
 80288ea:	dc14      	bgt.n	8028916 <atan+0x76>
 80288ec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80288f0:	429e      	cmp	r6, r3
 80288f2:	dc0d      	bgt.n	8028910 <atan+0x70>
 80288f4:	a396      	add	r3, pc, #600	; (adr r3, 8028b50 <atan+0x2b0>)
 80288f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80288fa:	ee10 0a10 	vmov	r0, s0
 80288fe:	4629      	mov	r1, r5
 8028900:	f7d7 fccc 	bl	800029c <__adddf3>
 8028904:	2200      	movs	r2, #0
 8028906:	4baf      	ldr	r3, [pc, #700]	; (8028bc4 <atan+0x324>)
 8028908:	f7d8 f90e 	bl	8000b28 <__aeabi_dcmpgt>
 802890c:	2800      	cmp	r0, #0
 802890e:	d1e6      	bne.n	80288de <atan+0x3e>
 8028910:	f04f 3aff 	mov.w	sl, #4294967295
 8028914:	e02b      	b.n	802896e <atan+0xce>
 8028916:	f000 f963 	bl	8028be0 <fabs>
 802891a:	4bab      	ldr	r3, [pc, #684]	; (8028bc8 <atan+0x328>)
 802891c:	429e      	cmp	r6, r3
 802891e:	ec55 4b10 	vmov	r4, r5, d0
 8028922:	f300 80bf 	bgt.w	8028aa4 <atan+0x204>
 8028926:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 802892a:	429e      	cmp	r6, r3
 802892c:	f300 80a0 	bgt.w	8028a70 <atan+0x1d0>
 8028930:	ee10 2a10 	vmov	r2, s0
 8028934:	ee10 0a10 	vmov	r0, s0
 8028938:	462b      	mov	r3, r5
 802893a:	4629      	mov	r1, r5
 802893c:	f7d7 fcae 	bl	800029c <__adddf3>
 8028940:	2200      	movs	r2, #0
 8028942:	4ba0      	ldr	r3, [pc, #640]	; (8028bc4 <atan+0x324>)
 8028944:	f7d7 fca8 	bl	8000298 <__aeabi_dsub>
 8028948:	2200      	movs	r2, #0
 802894a:	4606      	mov	r6, r0
 802894c:	460f      	mov	r7, r1
 802894e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8028952:	4620      	mov	r0, r4
 8028954:	4629      	mov	r1, r5
 8028956:	f7d7 fca1 	bl	800029c <__adddf3>
 802895a:	4602      	mov	r2, r0
 802895c:	460b      	mov	r3, r1
 802895e:	4630      	mov	r0, r6
 8028960:	4639      	mov	r1, r7
 8028962:	f7d7 ff7b 	bl	800085c <__aeabi_ddiv>
 8028966:	f04f 0a00 	mov.w	sl, #0
 802896a:	4604      	mov	r4, r0
 802896c:	460d      	mov	r5, r1
 802896e:	4622      	mov	r2, r4
 8028970:	462b      	mov	r3, r5
 8028972:	4620      	mov	r0, r4
 8028974:	4629      	mov	r1, r5
 8028976:	f7d7 fe47 	bl	8000608 <__aeabi_dmul>
 802897a:	4602      	mov	r2, r0
 802897c:	460b      	mov	r3, r1
 802897e:	4680      	mov	r8, r0
 8028980:	4689      	mov	r9, r1
 8028982:	f7d7 fe41 	bl	8000608 <__aeabi_dmul>
 8028986:	a374      	add	r3, pc, #464	; (adr r3, 8028b58 <atan+0x2b8>)
 8028988:	e9d3 2300 	ldrd	r2, r3, [r3]
 802898c:	4606      	mov	r6, r0
 802898e:	460f      	mov	r7, r1
 8028990:	f7d7 fe3a 	bl	8000608 <__aeabi_dmul>
 8028994:	a372      	add	r3, pc, #456	; (adr r3, 8028b60 <atan+0x2c0>)
 8028996:	e9d3 2300 	ldrd	r2, r3, [r3]
 802899a:	f7d7 fc7f 	bl	800029c <__adddf3>
 802899e:	4632      	mov	r2, r6
 80289a0:	463b      	mov	r3, r7
 80289a2:	f7d7 fe31 	bl	8000608 <__aeabi_dmul>
 80289a6:	a370      	add	r3, pc, #448	; (adr r3, 8028b68 <atan+0x2c8>)
 80289a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80289ac:	f7d7 fc76 	bl	800029c <__adddf3>
 80289b0:	4632      	mov	r2, r6
 80289b2:	463b      	mov	r3, r7
 80289b4:	f7d7 fe28 	bl	8000608 <__aeabi_dmul>
 80289b8:	a36d      	add	r3, pc, #436	; (adr r3, 8028b70 <atan+0x2d0>)
 80289ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80289be:	f7d7 fc6d 	bl	800029c <__adddf3>
 80289c2:	4632      	mov	r2, r6
 80289c4:	463b      	mov	r3, r7
 80289c6:	f7d7 fe1f 	bl	8000608 <__aeabi_dmul>
 80289ca:	a36b      	add	r3, pc, #428	; (adr r3, 8028b78 <atan+0x2d8>)
 80289cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80289d0:	f7d7 fc64 	bl	800029c <__adddf3>
 80289d4:	4632      	mov	r2, r6
 80289d6:	463b      	mov	r3, r7
 80289d8:	f7d7 fe16 	bl	8000608 <__aeabi_dmul>
 80289dc:	a368      	add	r3, pc, #416	; (adr r3, 8028b80 <atan+0x2e0>)
 80289de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80289e2:	f7d7 fc5b 	bl	800029c <__adddf3>
 80289e6:	4642      	mov	r2, r8
 80289e8:	464b      	mov	r3, r9
 80289ea:	f7d7 fe0d 	bl	8000608 <__aeabi_dmul>
 80289ee:	a366      	add	r3, pc, #408	; (adr r3, 8028b88 <atan+0x2e8>)
 80289f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80289f4:	4680      	mov	r8, r0
 80289f6:	4689      	mov	r9, r1
 80289f8:	4630      	mov	r0, r6
 80289fa:	4639      	mov	r1, r7
 80289fc:	f7d7 fe04 	bl	8000608 <__aeabi_dmul>
 8028a00:	a363      	add	r3, pc, #396	; (adr r3, 8028b90 <atan+0x2f0>)
 8028a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028a06:	f7d7 fc47 	bl	8000298 <__aeabi_dsub>
 8028a0a:	4632      	mov	r2, r6
 8028a0c:	463b      	mov	r3, r7
 8028a0e:	f7d7 fdfb 	bl	8000608 <__aeabi_dmul>
 8028a12:	a361      	add	r3, pc, #388	; (adr r3, 8028b98 <atan+0x2f8>)
 8028a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028a18:	f7d7 fc3e 	bl	8000298 <__aeabi_dsub>
 8028a1c:	4632      	mov	r2, r6
 8028a1e:	463b      	mov	r3, r7
 8028a20:	f7d7 fdf2 	bl	8000608 <__aeabi_dmul>
 8028a24:	a35e      	add	r3, pc, #376	; (adr r3, 8028ba0 <atan+0x300>)
 8028a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028a2a:	f7d7 fc35 	bl	8000298 <__aeabi_dsub>
 8028a2e:	4632      	mov	r2, r6
 8028a30:	463b      	mov	r3, r7
 8028a32:	f7d7 fde9 	bl	8000608 <__aeabi_dmul>
 8028a36:	a35c      	add	r3, pc, #368	; (adr r3, 8028ba8 <atan+0x308>)
 8028a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028a3c:	f7d7 fc2c 	bl	8000298 <__aeabi_dsub>
 8028a40:	4632      	mov	r2, r6
 8028a42:	463b      	mov	r3, r7
 8028a44:	f7d7 fde0 	bl	8000608 <__aeabi_dmul>
 8028a48:	4602      	mov	r2, r0
 8028a4a:	460b      	mov	r3, r1
 8028a4c:	4640      	mov	r0, r8
 8028a4e:	4649      	mov	r1, r9
 8028a50:	f7d7 fc24 	bl	800029c <__adddf3>
 8028a54:	4622      	mov	r2, r4
 8028a56:	462b      	mov	r3, r5
 8028a58:	f7d7 fdd6 	bl	8000608 <__aeabi_dmul>
 8028a5c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8028a60:	4602      	mov	r2, r0
 8028a62:	460b      	mov	r3, r1
 8028a64:	d14b      	bne.n	8028afe <atan+0x25e>
 8028a66:	4620      	mov	r0, r4
 8028a68:	4629      	mov	r1, r5
 8028a6a:	f7d7 fc15 	bl	8000298 <__aeabi_dsub>
 8028a6e:	e72c      	b.n	80288ca <atan+0x2a>
 8028a70:	ee10 0a10 	vmov	r0, s0
 8028a74:	2200      	movs	r2, #0
 8028a76:	4b53      	ldr	r3, [pc, #332]	; (8028bc4 <atan+0x324>)
 8028a78:	4629      	mov	r1, r5
 8028a7a:	f7d7 fc0d 	bl	8000298 <__aeabi_dsub>
 8028a7e:	2200      	movs	r2, #0
 8028a80:	4606      	mov	r6, r0
 8028a82:	460f      	mov	r7, r1
 8028a84:	4b4f      	ldr	r3, [pc, #316]	; (8028bc4 <atan+0x324>)
 8028a86:	4620      	mov	r0, r4
 8028a88:	4629      	mov	r1, r5
 8028a8a:	f7d7 fc07 	bl	800029c <__adddf3>
 8028a8e:	4602      	mov	r2, r0
 8028a90:	460b      	mov	r3, r1
 8028a92:	4630      	mov	r0, r6
 8028a94:	4639      	mov	r1, r7
 8028a96:	f7d7 fee1 	bl	800085c <__aeabi_ddiv>
 8028a9a:	f04f 0a01 	mov.w	sl, #1
 8028a9e:	4604      	mov	r4, r0
 8028aa0:	460d      	mov	r5, r1
 8028aa2:	e764      	b.n	802896e <atan+0xce>
 8028aa4:	4b49      	ldr	r3, [pc, #292]	; (8028bcc <atan+0x32c>)
 8028aa6:	429e      	cmp	r6, r3
 8028aa8:	dc1d      	bgt.n	8028ae6 <atan+0x246>
 8028aaa:	ee10 0a10 	vmov	r0, s0
 8028aae:	2200      	movs	r2, #0
 8028ab0:	4b47      	ldr	r3, [pc, #284]	; (8028bd0 <atan+0x330>)
 8028ab2:	4629      	mov	r1, r5
 8028ab4:	f7d7 fbf0 	bl	8000298 <__aeabi_dsub>
 8028ab8:	2200      	movs	r2, #0
 8028aba:	4606      	mov	r6, r0
 8028abc:	460f      	mov	r7, r1
 8028abe:	4b44      	ldr	r3, [pc, #272]	; (8028bd0 <atan+0x330>)
 8028ac0:	4620      	mov	r0, r4
 8028ac2:	4629      	mov	r1, r5
 8028ac4:	f7d7 fda0 	bl	8000608 <__aeabi_dmul>
 8028ac8:	2200      	movs	r2, #0
 8028aca:	4b3e      	ldr	r3, [pc, #248]	; (8028bc4 <atan+0x324>)
 8028acc:	f7d7 fbe6 	bl	800029c <__adddf3>
 8028ad0:	4602      	mov	r2, r0
 8028ad2:	460b      	mov	r3, r1
 8028ad4:	4630      	mov	r0, r6
 8028ad6:	4639      	mov	r1, r7
 8028ad8:	f7d7 fec0 	bl	800085c <__aeabi_ddiv>
 8028adc:	f04f 0a02 	mov.w	sl, #2
 8028ae0:	4604      	mov	r4, r0
 8028ae2:	460d      	mov	r5, r1
 8028ae4:	e743      	b.n	802896e <atan+0xce>
 8028ae6:	462b      	mov	r3, r5
 8028ae8:	ee10 2a10 	vmov	r2, s0
 8028aec:	2000      	movs	r0, #0
 8028aee:	4939      	ldr	r1, [pc, #228]	; (8028bd4 <atan+0x334>)
 8028af0:	f7d7 feb4 	bl	800085c <__aeabi_ddiv>
 8028af4:	f04f 0a03 	mov.w	sl, #3
 8028af8:	4604      	mov	r4, r0
 8028afa:	460d      	mov	r5, r1
 8028afc:	e737      	b.n	802896e <atan+0xce>
 8028afe:	4b36      	ldr	r3, [pc, #216]	; (8028bd8 <atan+0x338>)
 8028b00:	4e36      	ldr	r6, [pc, #216]	; (8028bdc <atan+0x33c>)
 8028b02:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8028b06:	4456      	add	r6, sl
 8028b08:	449a      	add	sl, r3
 8028b0a:	e9da 2300 	ldrd	r2, r3, [sl]
 8028b0e:	f7d7 fbc3 	bl	8000298 <__aeabi_dsub>
 8028b12:	4622      	mov	r2, r4
 8028b14:	462b      	mov	r3, r5
 8028b16:	f7d7 fbbf 	bl	8000298 <__aeabi_dsub>
 8028b1a:	4602      	mov	r2, r0
 8028b1c:	460b      	mov	r3, r1
 8028b1e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8028b22:	f7d7 fbb9 	bl	8000298 <__aeabi_dsub>
 8028b26:	f1bb 0f00 	cmp.w	fp, #0
 8028b2a:	4604      	mov	r4, r0
 8028b2c:	460d      	mov	r5, r1
 8028b2e:	f6bf aed6 	bge.w	80288de <atan+0x3e>
 8028b32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8028b36:	461d      	mov	r5, r3
 8028b38:	e6d1      	b.n	80288de <atan+0x3e>
 8028b3a:	a51d      	add	r5, pc, #116	; (adr r5, 8028bb0 <atan+0x310>)
 8028b3c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8028b40:	e6cd      	b.n	80288de <atan+0x3e>
 8028b42:	bf00      	nop
 8028b44:	f3af 8000 	nop.w
 8028b48:	54442d18 	.word	0x54442d18
 8028b4c:	3ff921fb 	.word	0x3ff921fb
 8028b50:	8800759c 	.word	0x8800759c
 8028b54:	7e37e43c 	.word	0x7e37e43c
 8028b58:	e322da11 	.word	0xe322da11
 8028b5c:	3f90ad3a 	.word	0x3f90ad3a
 8028b60:	24760deb 	.word	0x24760deb
 8028b64:	3fa97b4b 	.word	0x3fa97b4b
 8028b68:	a0d03d51 	.word	0xa0d03d51
 8028b6c:	3fb10d66 	.word	0x3fb10d66
 8028b70:	c54c206e 	.word	0xc54c206e
 8028b74:	3fb745cd 	.word	0x3fb745cd
 8028b78:	920083ff 	.word	0x920083ff
 8028b7c:	3fc24924 	.word	0x3fc24924
 8028b80:	5555550d 	.word	0x5555550d
 8028b84:	3fd55555 	.word	0x3fd55555
 8028b88:	2c6a6c2f 	.word	0x2c6a6c2f
 8028b8c:	bfa2b444 	.word	0xbfa2b444
 8028b90:	52defd9a 	.word	0x52defd9a
 8028b94:	3fadde2d 	.word	0x3fadde2d
 8028b98:	af749a6d 	.word	0xaf749a6d
 8028b9c:	3fb3b0f2 	.word	0x3fb3b0f2
 8028ba0:	fe231671 	.word	0xfe231671
 8028ba4:	3fbc71c6 	.word	0x3fbc71c6
 8028ba8:	9998ebc4 	.word	0x9998ebc4
 8028bac:	3fc99999 	.word	0x3fc99999
 8028bb0:	54442d18 	.word	0x54442d18
 8028bb4:	bff921fb 	.word	0xbff921fb
 8028bb8:	440fffff 	.word	0x440fffff
 8028bbc:	7ff00000 	.word	0x7ff00000
 8028bc0:	3fdbffff 	.word	0x3fdbffff
 8028bc4:	3ff00000 	.word	0x3ff00000
 8028bc8:	3ff2ffff 	.word	0x3ff2ffff
 8028bcc:	40037fff 	.word	0x40037fff
 8028bd0:	3ff80000 	.word	0x3ff80000
 8028bd4:	bff00000 	.word	0xbff00000
 8028bd8:	0802edd0 	.word	0x0802edd0
 8028bdc:	0802edb0 	.word	0x0802edb0

08028be0 <fabs>:
 8028be0:	ec51 0b10 	vmov	r0, r1, d0
 8028be4:	ee10 2a10 	vmov	r2, s0
 8028be8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8028bec:	ec43 2b10 	vmov	d0, r2, r3
 8028bf0:	4770      	bx	lr

08028bf2 <finite>:
 8028bf2:	ee10 3a90 	vmov	r3, s1
 8028bf6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8028bfa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8028bfe:	0fc0      	lsrs	r0, r0, #31
 8028c00:	4770      	bx	lr

08028c02 <matherr>:
 8028c02:	2000      	movs	r0, #0
 8028c04:	4770      	bx	lr
	...

08028c08 <nan>:
 8028c08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8028c10 <nan+0x8>
 8028c0c:	4770      	bx	lr
 8028c0e:	bf00      	nop
 8028c10:	00000000 	.word	0x00000000
 8028c14:	7ff80000 	.word	0x7ff80000

08028c18 <rint>:
 8028c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028c1a:	ec51 0b10 	vmov	r0, r1, d0
 8028c1e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8028c22:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8028c26:	2e13      	cmp	r6, #19
 8028c28:	460b      	mov	r3, r1
 8028c2a:	ee10 4a10 	vmov	r4, s0
 8028c2e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8028c32:	dc56      	bgt.n	8028ce2 <rint+0xca>
 8028c34:	2e00      	cmp	r6, #0
 8028c36:	da2b      	bge.n	8028c90 <rint+0x78>
 8028c38:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8028c3c:	4302      	orrs	r2, r0
 8028c3e:	d023      	beq.n	8028c88 <rint+0x70>
 8028c40:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8028c44:	4302      	orrs	r2, r0
 8028c46:	4254      	negs	r4, r2
 8028c48:	4314      	orrs	r4, r2
 8028c4a:	0c4b      	lsrs	r3, r1, #17
 8028c4c:	0b24      	lsrs	r4, r4, #12
 8028c4e:	045b      	lsls	r3, r3, #17
 8028c50:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8028c54:	ea44 0103 	orr.w	r1, r4, r3
 8028c58:	460b      	mov	r3, r1
 8028c5a:	492f      	ldr	r1, [pc, #188]	; (8028d18 <rint+0x100>)
 8028c5c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8028c60:	e9d1 6700 	ldrd	r6, r7, [r1]
 8028c64:	4602      	mov	r2, r0
 8028c66:	4639      	mov	r1, r7
 8028c68:	4630      	mov	r0, r6
 8028c6a:	f7d7 fb17 	bl	800029c <__adddf3>
 8028c6e:	e9cd 0100 	strd	r0, r1, [sp]
 8028c72:	463b      	mov	r3, r7
 8028c74:	4632      	mov	r2, r6
 8028c76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8028c7a:	f7d7 fb0d 	bl	8000298 <__aeabi_dsub>
 8028c7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8028c82:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8028c86:	4639      	mov	r1, r7
 8028c88:	ec41 0b10 	vmov	d0, r0, r1
 8028c8c:	b003      	add	sp, #12
 8028c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028c90:	4a22      	ldr	r2, [pc, #136]	; (8028d1c <rint+0x104>)
 8028c92:	4132      	asrs	r2, r6
 8028c94:	ea01 0702 	and.w	r7, r1, r2
 8028c98:	4307      	orrs	r7, r0
 8028c9a:	d0f5      	beq.n	8028c88 <rint+0x70>
 8028c9c:	0852      	lsrs	r2, r2, #1
 8028c9e:	4011      	ands	r1, r2
 8028ca0:	430c      	orrs	r4, r1
 8028ca2:	d00b      	beq.n	8028cbc <rint+0xa4>
 8028ca4:	ea23 0202 	bic.w	r2, r3, r2
 8028ca8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8028cac:	2e13      	cmp	r6, #19
 8028cae:	fa43 f306 	asr.w	r3, r3, r6
 8028cb2:	bf0c      	ite	eq
 8028cb4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8028cb8:	2400      	movne	r4, #0
 8028cba:	4313      	orrs	r3, r2
 8028cbc:	4916      	ldr	r1, [pc, #88]	; (8028d18 <rint+0x100>)
 8028cbe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8028cc2:	4622      	mov	r2, r4
 8028cc4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8028cc8:	4620      	mov	r0, r4
 8028cca:	4629      	mov	r1, r5
 8028ccc:	f7d7 fae6 	bl	800029c <__adddf3>
 8028cd0:	e9cd 0100 	strd	r0, r1, [sp]
 8028cd4:	4622      	mov	r2, r4
 8028cd6:	462b      	mov	r3, r5
 8028cd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8028cdc:	f7d7 fadc 	bl	8000298 <__aeabi_dsub>
 8028ce0:	e7d2      	b.n	8028c88 <rint+0x70>
 8028ce2:	2e33      	cmp	r6, #51	; 0x33
 8028ce4:	dd07      	ble.n	8028cf6 <rint+0xde>
 8028ce6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8028cea:	d1cd      	bne.n	8028c88 <rint+0x70>
 8028cec:	ee10 2a10 	vmov	r2, s0
 8028cf0:	f7d7 fad4 	bl	800029c <__adddf3>
 8028cf4:	e7c8      	b.n	8028c88 <rint+0x70>
 8028cf6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8028cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8028cfe:	40f2      	lsrs	r2, r6
 8028d00:	4210      	tst	r0, r2
 8028d02:	d0c1      	beq.n	8028c88 <rint+0x70>
 8028d04:	0852      	lsrs	r2, r2, #1
 8028d06:	4210      	tst	r0, r2
 8028d08:	bf1f      	itttt	ne
 8028d0a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8028d0e:	ea20 0202 	bicne.w	r2, r0, r2
 8028d12:	4134      	asrne	r4, r6
 8028d14:	4314      	orrne	r4, r2
 8028d16:	e7d1      	b.n	8028cbc <rint+0xa4>
 8028d18:	0802edf0 	.word	0x0802edf0
 8028d1c:	000fffff 	.word	0x000fffff

08028d20 <scalbn>:
 8028d20:	b570      	push	{r4, r5, r6, lr}
 8028d22:	ec55 4b10 	vmov	r4, r5, d0
 8028d26:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8028d2a:	4606      	mov	r6, r0
 8028d2c:	462b      	mov	r3, r5
 8028d2e:	b9aa      	cbnz	r2, 8028d5c <scalbn+0x3c>
 8028d30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8028d34:	4323      	orrs	r3, r4
 8028d36:	d03b      	beq.n	8028db0 <scalbn+0x90>
 8028d38:	4b31      	ldr	r3, [pc, #196]	; (8028e00 <scalbn+0xe0>)
 8028d3a:	4629      	mov	r1, r5
 8028d3c:	2200      	movs	r2, #0
 8028d3e:	ee10 0a10 	vmov	r0, s0
 8028d42:	f7d7 fc61 	bl	8000608 <__aeabi_dmul>
 8028d46:	4b2f      	ldr	r3, [pc, #188]	; (8028e04 <scalbn+0xe4>)
 8028d48:	429e      	cmp	r6, r3
 8028d4a:	4604      	mov	r4, r0
 8028d4c:	460d      	mov	r5, r1
 8028d4e:	da12      	bge.n	8028d76 <scalbn+0x56>
 8028d50:	a327      	add	r3, pc, #156	; (adr r3, 8028df0 <scalbn+0xd0>)
 8028d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028d56:	f7d7 fc57 	bl	8000608 <__aeabi_dmul>
 8028d5a:	e009      	b.n	8028d70 <scalbn+0x50>
 8028d5c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8028d60:	428a      	cmp	r2, r1
 8028d62:	d10c      	bne.n	8028d7e <scalbn+0x5e>
 8028d64:	ee10 2a10 	vmov	r2, s0
 8028d68:	4620      	mov	r0, r4
 8028d6a:	4629      	mov	r1, r5
 8028d6c:	f7d7 fa96 	bl	800029c <__adddf3>
 8028d70:	4604      	mov	r4, r0
 8028d72:	460d      	mov	r5, r1
 8028d74:	e01c      	b.n	8028db0 <scalbn+0x90>
 8028d76:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8028d7a:	460b      	mov	r3, r1
 8028d7c:	3a36      	subs	r2, #54	; 0x36
 8028d7e:	4432      	add	r2, r6
 8028d80:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8028d84:	428a      	cmp	r2, r1
 8028d86:	dd0b      	ble.n	8028da0 <scalbn+0x80>
 8028d88:	ec45 4b11 	vmov	d1, r4, r5
 8028d8c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8028df8 <scalbn+0xd8>
 8028d90:	f000 f8a4 	bl	8028edc <copysign>
 8028d94:	a318      	add	r3, pc, #96	; (adr r3, 8028df8 <scalbn+0xd8>)
 8028d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028d9a:	ec51 0b10 	vmov	r0, r1, d0
 8028d9e:	e7da      	b.n	8028d56 <scalbn+0x36>
 8028da0:	2a00      	cmp	r2, #0
 8028da2:	dd08      	ble.n	8028db6 <scalbn+0x96>
 8028da4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8028da8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8028dac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8028db0:	ec45 4b10 	vmov	d0, r4, r5
 8028db4:	bd70      	pop	{r4, r5, r6, pc}
 8028db6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8028dba:	da0d      	bge.n	8028dd8 <scalbn+0xb8>
 8028dbc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8028dc0:	429e      	cmp	r6, r3
 8028dc2:	ec45 4b11 	vmov	d1, r4, r5
 8028dc6:	dce1      	bgt.n	8028d8c <scalbn+0x6c>
 8028dc8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8028df0 <scalbn+0xd0>
 8028dcc:	f000 f886 	bl	8028edc <copysign>
 8028dd0:	a307      	add	r3, pc, #28	; (adr r3, 8028df0 <scalbn+0xd0>)
 8028dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028dd6:	e7e0      	b.n	8028d9a <scalbn+0x7a>
 8028dd8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8028ddc:	3236      	adds	r2, #54	; 0x36
 8028dde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8028de2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8028de6:	4620      	mov	r0, r4
 8028de8:	4629      	mov	r1, r5
 8028dea:	2200      	movs	r2, #0
 8028dec:	4b06      	ldr	r3, [pc, #24]	; (8028e08 <scalbn+0xe8>)
 8028dee:	e7b2      	b.n	8028d56 <scalbn+0x36>
 8028df0:	c2f8f359 	.word	0xc2f8f359
 8028df4:	01a56e1f 	.word	0x01a56e1f
 8028df8:	8800759c 	.word	0x8800759c
 8028dfc:	7e37e43c 	.word	0x7e37e43c
 8028e00:	43500000 	.word	0x43500000
 8028e04:	ffff3cb0 	.word	0xffff3cb0
 8028e08:	3c900000 	.word	0x3c900000

08028e0c <fabsf>:
 8028e0c:	ee10 3a10 	vmov	r3, s0
 8028e10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8028e14:	ee00 3a10 	vmov	s0, r3
 8028e18:	4770      	bx	lr
	...

08028e1c <scalbnf>:
 8028e1c:	b508      	push	{r3, lr}
 8028e1e:	ee10 2a10 	vmov	r2, s0
 8028e22:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8028e26:	ed2d 8b02 	vpush	{d8}
 8028e2a:	eef0 0a40 	vmov.f32	s1, s0
 8028e2e:	d004      	beq.n	8028e3a <scalbnf+0x1e>
 8028e30:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8028e34:	d306      	bcc.n	8028e44 <scalbnf+0x28>
 8028e36:	ee70 0a00 	vadd.f32	s1, s0, s0
 8028e3a:	ecbd 8b02 	vpop	{d8}
 8028e3e:	eeb0 0a60 	vmov.f32	s0, s1
 8028e42:	bd08      	pop	{r3, pc}
 8028e44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8028e48:	d21c      	bcs.n	8028e84 <scalbnf+0x68>
 8028e4a:	4b1f      	ldr	r3, [pc, #124]	; (8028ec8 <scalbnf+0xac>)
 8028e4c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8028ecc <scalbnf+0xb0>
 8028e50:	4298      	cmp	r0, r3
 8028e52:	ee60 0a27 	vmul.f32	s1, s0, s15
 8028e56:	db10      	blt.n	8028e7a <scalbnf+0x5e>
 8028e58:	ee10 2a90 	vmov	r2, s1
 8028e5c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8028e60:	3b19      	subs	r3, #25
 8028e62:	4403      	add	r3, r0
 8028e64:	2bfe      	cmp	r3, #254	; 0xfe
 8028e66:	dd0f      	ble.n	8028e88 <scalbnf+0x6c>
 8028e68:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8028ed0 <scalbnf+0xb4>
 8028e6c:	eeb0 0a48 	vmov.f32	s0, s16
 8028e70:	f000 f843 	bl	8028efa <copysignf>
 8028e74:	ee60 0a08 	vmul.f32	s1, s0, s16
 8028e78:	e7df      	b.n	8028e3a <scalbnf+0x1e>
 8028e7a:	eddf 7a16 	vldr	s15, [pc, #88]	; 8028ed4 <scalbnf+0xb8>
 8028e7e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8028e82:	e7da      	b.n	8028e3a <scalbnf+0x1e>
 8028e84:	0ddb      	lsrs	r3, r3, #23
 8028e86:	e7ec      	b.n	8028e62 <scalbnf+0x46>
 8028e88:	2b00      	cmp	r3, #0
 8028e8a:	dd06      	ble.n	8028e9a <scalbnf+0x7e>
 8028e8c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8028e90:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8028e94:	ee00 3a90 	vmov	s1, r3
 8028e98:	e7cf      	b.n	8028e3a <scalbnf+0x1e>
 8028e9a:	f113 0f16 	cmn.w	r3, #22
 8028e9e:	da06      	bge.n	8028eae <scalbnf+0x92>
 8028ea0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8028ea4:	4298      	cmp	r0, r3
 8028ea6:	dcdf      	bgt.n	8028e68 <scalbnf+0x4c>
 8028ea8:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8028ed4 <scalbnf+0xb8>
 8028eac:	e7de      	b.n	8028e6c <scalbnf+0x50>
 8028eae:	3319      	adds	r3, #25
 8028eb0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8028eb4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8028eb8:	eddf 7a07 	vldr	s15, [pc, #28]	; 8028ed8 <scalbnf+0xbc>
 8028ebc:	ee07 3a10 	vmov	s14, r3
 8028ec0:	ee67 0a27 	vmul.f32	s1, s14, s15
 8028ec4:	e7b9      	b.n	8028e3a <scalbnf+0x1e>
 8028ec6:	bf00      	nop
 8028ec8:	ffff3cb0 	.word	0xffff3cb0
 8028ecc:	4c000000 	.word	0x4c000000
 8028ed0:	7149f2ca 	.word	0x7149f2ca
 8028ed4:	0da24260 	.word	0x0da24260
 8028ed8:	33000000 	.word	0x33000000

08028edc <copysign>:
 8028edc:	ec51 0b10 	vmov	r0, r1, d0
 8028ee0:	ee11 0a90 	vmov	r0, s3
 8028ee4:	ee10 2a10 	vmov	r2, s0
 8028ee8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8028eec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8028ef0:	ea41 0300 	orr.w	r3, r1, r0
 8028ef4:	ec43 2b10 	vmov	d0, r2, r3
 8028ef8:	4770      	bx	lr

08028efa <copysignf>:
 8028efa:	ee10 3a10 	vmov	r3, s0
 8028efe:	ee10 2a90 	vmov	r2, s1
 8028f02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8028f06:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8028f0a:	4313      	orrs	r3, r2
 8028f0c:	ee00 3a10 	vmov	s0, r3
 8028f10:	4770      	bx	lr
	...

08028f14 <__assert_func>:
 8028f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8028f16:	461c      	mov	r4, r3
 8028f18:	4b09      	ldr	r3, [pc, #36]	; (8028f40 <__assert_func+0x2c>)
 8028f1a:	681b      	ldr	r3, [r3, #0]
 8028f1c:	4605      	mov	r5, r0
 8028f1e:	68d8      	ldr	r0, [r3, #12]
 8028f20:	b152      	cbz	r2, 8028f38 <__assert_func+0x24>
 8028f22:	4b08      	ldr	r3, [pc, #32]	; (8028f44 <__assert_func+0x30>)
 8028f24:	9100      	str	r1, [sp, #0]
 8028f26:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8028f2a:	4907      	ldr	r1, [pc, #28]	; (8028f48 <__assert_func+0x34>)
 8028f2c:	462b      	mov	r3, r5
 8028f2e:	4622      	mov	r2, r4
 8028f30:	f000 f814 	bl	8028f5c <fiprintf>
 8028f34:	f002 f89e 	bl	802b074 <abort>
 8028f38:	4b04      	ldr	r3, [pc, #16]	; (8028f4c <__assert_func+0x38>)
 8028f3a:	461a      	mov	r2, r3
 8028f3c:	e7f2      	b.n	8028f24 <__assert_func+0x10>
 8028f3e:	bf00      	nop
 8028f40:	200006ac 	.word	0x200006ac
 8028f44:	0802ee00 	.word	0x0802ee00
 8028f48:	0802ee0d 	.word	0x0802ee0d
 8028f4c:	0802ee3b 	.word	0x0802ee3b

08028f50 <__errno>:
 8028f50:	4b01      	ldr	r3, [pc, #4]	; (8028f58 <__errno+0x8>)
 8028f52:	6818      	ldr	r0, [r3, #0]
 8028f54:	4770      	bx	lr
 8028f56:	bf00      	nop
 8028f58:	200006ac 	.word	0x200006ac

08028f5c <fiprintf>:
 8028f5c:	b40e      	push	{r1, r2, r3}
 8028f5e:	b503      	push	{r0, r1, lr}
 8028f60:	4601      	mov	r1, r0
 8028f62:	ab03      	add	r3, sp, #12
 8028f64:	4805      	ldr	r0, [pc, #20]	; (8028f7c <fiprintf+0x20>)
 8028f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8028f6a:	6800      	ldr	r0, [r0, #0]
 8028f6c:	9301      	str	r3, [sp, #4]
 8028f6e:	f000 f867 	bl	8029040 <_vfiprintf_r>
 8028f72:	b002      	add	sp, #8
 8028f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8028f78:	b003      	add	sp, #12
 8028f7a:	4770      	bx	lr
 8028f7c:	200006ac 	.word	0x200006ac

08028f80 <__libc_init_array>:
 8028f80:	b570      	push	{r4, r5, r6, lr}
 8028f82:	4e0d      	ldr	r6, [pc, #52]	; (8028fb8 <__libc_init_array+0x38>)
 8028f84:	4c0d      	ldr	r4, [pc, #52]	; (8028fbc <__libc_init_array+0x3c>)
 8028f86:	1ba4      	subs	r4, r4, r6
 8028f88:	10a4      	asrs	r4, r4, #2
 8028f8a:	2500      	movs	r5, #0
 8028f8c:	42a5      	cmp	r5, r4
 8028f8e:	d109      	bne.n	8028fa4 <__libc_init_array+0x24>
 8028f90:	4e0b      	ldr	r6, [pc, #44]	; (8028fc0 <__libc_init_array+0x40>)
 8028f92:	4c0c      	ldr	r4, [pc, #48]	; (8028fc4 <__libc_init_array+0x44>)
 8028f94:	f004 fb5c 	bl	802d650 <_init>
 8028f98:	1ba4      	subs	r4, r4, r6
 8028f9a:	10a4      	asrs	r4, r4, #2
 8028f9c:	2500      	movs	r5, #0
 8028f9e:	42a5      	cmp	r5, r4
 8028fa0:	d105      	bne.n	8028fae <__libc_init_array+0x2e>
 8028fa2:	bd70      	pop	{r4, r5, r6, pc}
 8028fa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8028fa8:	4798      	blx	r3
 8028faa:	3501      	adds	r5, #1
 8028fac:	e7ee      	b.n	8028f8c <__libc_init_array+0xc>
 8028fae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8028fb2:	4798      	blx	r3
 8028fb4:	3501      	adds	r5, #1
 8028fb6:	e7f2      	b.n	8028f9e <__libc_init_array+0x1e>
 8028fb8:	0802f168 	.word	0x0802f168
 8028fbc:	0802f168 	.word	0x0802f168
 8028fc0:	0802f168 	.word	0x0802f168
 8028fc4:	0802f18c 	.word	0x0802f18c

08028fc8 <memcpy>:
 8028fc8:	b510      	push	{r4, lr}
 8028fca:	1e43      	subs	r3, r0, #1
 8028fcc:	440a      	add	r2, r1
 8028fce:	4291      	cmp	r1, r2
 8028fd0:	d100      	bne.n	8028fd4 <memcpy+0xc>
 8028fd2:	bd10      	pop	{r4, pc}
 8028fd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028fd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8028fdc:	e7f7      	b.n	8028fce <memcpy+0x6>

08028fde <memset>:
 8028fde:	4402      	add	r2, r0
 8028fe0:	4603      	mov	r3, r0
 8028fe2:	4293      	cmp	r3, r2
 8028fe4:	d100      	bne.n	8028fe8 <memset+0xa>
 8028fe6:	4770      	bx	lr
 8028fe8:	f803 1b01 	strb.w	r1, [r3], #1
 8028fec:	e7f9      	b.n	8028fe2 <memset+0x4>

08028fee <__sfputc_r>:
 8028fee:	6893      	ldr	r3, [r2, #8]
 8028ff0:	3b01      	subs	r3, #1
 8028ff2:	2b00      	cmp	r3, #0
 8028ff4:	b410      	push	{r4}
 8028ff6:	6093      	str	r3, [r2, #8]
 8028ff8:	da08      	bge.n	802900c <__sfputc_r+0x1e>
 8028ffa:	6994      	ldr	r4, [r2, #24]
 8028ffc:	42a3      	cmp	r3, r4
 8028ffe:	db01      	blt.n	8029004 <__sfputc_r+0x16>
 8029000:	290a      	cmp	r1, #10
 8029002:	d103      	bne.n	802900c <__sfputc_r+0x1e>
 8029004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029008:	f001 bf74 	b.w	802aef4 <__swbuf_r>
 802900c:	6813      	ldr	r3, [r2, #0]
 802900e:	1c58      	adds	r0, r3, #1
 8029010:	6010      	str	r0, [r2, #0]
 8029012:	7019      	strb	r1, [r3, #0]
 8029014:	4608      	mov	r0, r1
 8029016:	f85d 4b04 	ldr.w	r4, [sp], #4
 802901a:	4770      	bx	lr

0802901c <__sfputs_r>:
 802901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802901e:	4606      	mov	r6, r0
 8029020:	460f      	mov	r7, r1
 8029022:	4614      	mov	r4, r2
 8029024:	18d5      	adds	r5, r2, r3
 8029026:	42ac      	cmp	r4, r5
 8029028:	d101      	bne.n	802902e <__sfputs_r+0x12>
 802902a:	2000      	movs	r0, #0
 802902c:	e007      	b.n	802903e <__sfputs_r+0x22>
 802902e:	463a      	mov	r2, r7
 8029030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029034:	4630      	mov	r0, r6
 8029036:	f7ff ffda 	bl	8028fee <__sfputc_r>
 802903a:	1c43      	adds	r3, r0, #1
 802903c:	d1f3      	bne.n	8029026 <__sfputs_r+0xa>
 802903e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08029040 <_vfiprintf_r>:
 8029040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029044:	460c      	mov	r4, r1
 8029046:	b09d      	sub	sp, #116	; 0x74
 8029048:	4617      	mov	r7, r2
 802904a:	461d      	mov	r5, r3
 802904c:	4606      	mov	r6, r0
 802904e:	b118      	cbz	r0, 8029058 <_vfiprintf_r+0x18>
 8029050:	6983      	ldr	r3, [r0, #24]
 8029052:	b90b      	cbnz	r3, 8029058 <_vfiprintf_r+0x18>
 8029054:	f002 ff4c 	bl	802bef0 <__sinit>
 8029058:	4b7c      	ldr	r3, [pc, #496]	; (802924c <_vfiprintf_r+0x20c>)
 802905a:	429c      	cmp	r4, r3
 802905c:	d158      	bne.n	8029110 <_vfiprintf_r+0xd0>
 802905e:	6874      	ldr	r4, [r6, #4]
 8029060:	89a3      	ldrh	r3, [r4, #12]
 8029062:	0718      	lsls	r0, r3, #28
 8029064:	d55e      	bpl.n	8029124 <_vfiprintf_r+0xe4>
 8029066:	6923      	ldr	r3, [r4, #16]
 8029068:	2b00      	cmp	r3, #0
 802906a:	d05b      	beq.n	8029124 <_vfiprintf_r+0xe4>
 802906c:	2300      	movs	r3, #0
 802906e:	9309      	str	r3, [sp, #36]	; 0x24
 8029070:	2320      	movs	r3, #32
 8029072:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029076:	2330      	movs	r3, #48	; 0x30
 8029078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802907c:	9503      	str	r5, [sp, #12]
 802907e:	f04f 0b01 	mov.w	fp, #1
 8029082:	46b8      	mov	r8, r7
 8029084:	4645      	mov	r5, r8
 8029086:	f815 3b01 	ldrb.w	r3, [r5], #1
 802908a:	b10b      	cbz	r3, 8029090 <_vfiprintf_r+0x50>
 802908c:	2b25      	cmp	r3, #37	; 0x25
 802908e:	d154      	bne.n	802913a <_vfiprintf_r+0xfa>
 8029090:	ebb8 0a07 	subs.w	sl, r8, r7
 8029094:	d00b      	beq.n	80290ae <_vfiprintf_r+0x6e>
 8029096:	4653      	mov	r3, sl
 8029098:	463a      	mov	r2, r7
 802909a:	4621      	mov	r1, r4
 802909c:	4630      	mov	r0, r6
 802909e:	f7ff ffbd 	bl	802901c <__sfputs_r>
 80290a2:	3001      	adds	r0, #1
 80290a4:	f000 80c2 	beq.w	802922c <_vfiprintf_r+0x1ec>
 80290a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80290aa:	4453      	add	r3, sl
 80290ac:	9309      	str	r3, [sp, #36]	; 0x24
 80290ae:	f898 3000 	ldrb.w	r3, [r8]
 80290b2:	2b00      	cmp	r3, #0
 80290b4:	f000 80ba 	beq.w	802922c <_vfiprintf_r+0x1ec>
 80290b8:	2300      	movs	r3, #0
 80290ba:	f04f 32ff 	mov.w	r2, #4294967295
 80290be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80290c2:	9304      	str	r3, [sp, #16]
 80290c4:	9307      	str	r3, [sp, #28]
 80290c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80290ca:	931a      	str	r3, [sp, #104]	; 0x68
 80290cc:	46a8      	mov	r8, r5
 80290ce:	2205      	movs	r2, #5
 80290d0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80290d4:	485e      	ldr	r0, [pc, #376]	; (8029250 <_vfiprintf_r+0x210>)
 80290d6:	f7d7 f88b 	bl	80001f0 <memchr>
 80290da:	9b04      	ldr	r3, [sp, #16]
 80290dc:	bb78      	cbnz	r0, 802913e <_vfiprintf_r+0xfe>
 80290de:	06d9      	lsls	r1, r3, #27
 80290e0:	bf44      	itt	mi
 80290e2:	2220      	movmi	r2, #32
 80290e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80290e8:	071a      	lsls	r2, r3, #28
 80290ea:	bf44      	itt	mi
 80290ec:	222b      	movmi	r2, #43	; 0x2b
 80290ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80290f2:	782a      	ldrb	r2, [r5, #0]
 80290f4:	2a2a      	cmp	r2, #42	; 0x2a
 80290f6:	d02a      	beq.n	802914e <_vfiprintf_r+0x10e>
 80290f8:	9a07      	ldr	r2, [sp, #28]
 80290fa:	46a8      	mov	r8, r5
 80290fc:	2000      	movs	r0, #0
 80290fe:	250a      	movs	r5, #10
 8029100:	4641      	mov	r1, r8
 8029102:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029106:	3b30      	subs	r3, #48	; 0x30
 8029108:	2b09      	cmp	r3, #9
 802910a:	d969      	bls.n	80291e0 <_vfiprintf_r+0x1a0>
 802910c:	b360      	cbz	r0, 8029168 <_vfiprintf_r+0x128>
 802910e:	e024      	b.n	802915a <_vfiprintf_r+0x11a>
 8029110:	4b50      	ldr	r3, [pc, #320]	; (8029254 <_vfiprintf_r+0x214>)
 8029112:	429c      	cmp	r4, r3
 8029114:	d101      	bne.n	802911a <_vfiprintf_r+0xda>
 8029116:	68b4      	ldr	r4, [r6, #8]
 8029118:	e7a2      	b.n	8029060 <_vfiprintf_r+0x20>
 802911a:	4b4f      	ldr	r3, [pc, #316]	; (8029258 <_vfiprintf_r+0x218>)
 802911c:	429c      	cmp	r4, r3
 802911e:	bf08      	it	eq
 8029120:	68f4      	ldreq	r4, [r6, #12]
 8029122:	e79d      	b.n	8029060 <_vfiprintf_r+0x20>
 8029124:	4621      	mov	r1, r4
 8029126:	4630      	mov	r0, r6
 8029128:	f001 ff36 	bl	802af98 <__swsetup_r>
 802912c:	2800      	cmp	r0, #0
 802912e:	d09d      	beq.n	802906c <_vfiprintf_r+0x2c>
 8029130:	f04f 30ff 	mov.w	r0, #4294967295
 8029134:	b01d      	add	sp, #116	; 0x74
 8029136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802913a:	46a8      	mov	r8, r5
 802913c:	e7a2      	b.n	8029084 <_vfiprintf_r+0x44>
 802913e:	4a44      	ldr	r2, [pc, #272]	; (8029250 <_vfiprintf_r+0x210>)
 8029140:	1a80      	subs	r0, r0, r2
 8029142:	fa0b f000 	lsl.w	r0, fp, r0
 8029146:	4318      	orrs	r0, r3
 8029148:	9004      	str	r0, [sp, #16]
 802914a:	4645      	mov	r5, r8
 802914c:	e7be      	b.n	80290cc <_vfiprintf_r+0x8c>
 802914e:	9a03      	ldr	r2, [sp, #12]
 8029150:	1d11      	adds	r1, r2, #4
 8029152:	6812      	ldr	r2, [r2, #0]
 8029154:	9103      	str	r1, [sp, #12]
 8029156:	2a00      	cmp	r2, #0
 8029158:	db01      	blt.n	802915e <_vfiprintf_r+0x11e>
 802915a:	9207      	str	r2, [sp, #28]
 802915c:	e004      	b.n	8029168 <_vfiprintf_r+0x128>
 802915e:	4252      	negs	r2, r2
 8029160:	f043 0302 	orr.w	r3, r3, #2
 8029164:	9207      	str	r2, [sp, #28]
 8029166:	9304      	str	r3, [sp, #16]
 8029168:	f898 3000 	ldrb.w	r3, [r8]
 802916c:	2b2e      	cmp	r3, #46	; 0x2e
 802916e:	d10e      	bne.n	802918e <_vfiprintf_r+0x14e>
 8029170:	f898 3001 	ldrb.w	r3, [r8, #1]
 8029174:	2b2a      	cmp	r3, #42	; 0x2a
 8029176:	d138      	bne.n	80291ea <_vfiprintf_r+0x1aa>
 8029178:	9b03      	ldr	r3, [sp, #12]
 802917a:	1d1a      	adds	r2, r3, #4
 802917c:	681b      	ldr	r3, [r3, #0]
 802917e:	9203      	str	r2, [sp, #12]
 8029180:	2b00      	cmp	r3, #0
 8029182:	bfb8      	it	lt
 8029184:	f04f 33ff 	movlt.w	r3, #4294967295
 8029188:	f108 0802 	add.w	r8, r8, #2
 802918c:	9305      	str	r3, [sp, #20]
 802918e:	4d33      	ldr	r5, [pc, #204]	; (802925c <_vfiprintf_r+0x21c>)
 8029190:	f898 1000 	ldrb.w	r1, [r8]
 8029194:	2203      	movs	r2, #3
 8029196:	4628      	mov	r0, r5
 8029198:	f7d7 f82a 	bl	80001f0 <memchr>
 802919c:	b140      	cbz	r0, 80291b0 <_vfiprintf_r+0x170>
 802919e:	2340      	movs	r3, #64	; 0x40
 80291a0:	1b40      	subs	r0, r0, r5
 80291a2:	fa03 f000 	lsl.w	r0, r3, r0
 80291a6:	9b04      	ldr	r3, [sp, #16]
 80291a8:	4303      	orrs	r3, r0
 80291aa:	f108 0801 	add.w	r8, r8, #1
 80291ae:	9304      	str	r3, [sp, #16]
 80291b0:	f898 1000 	ldrb.w	r1, [r8]
 80291b4:	482a      	ldr	r0, [pc, #168]	; (8029260 <_vfiprintf_r+0x220>)
 80291b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80291ba:	2206      	movs	r2, #6
 80291bc:	f108 0701 	add.w	r7, r8, #1
 80291c0:	f7d7 f816 	bl	80001f0 <memchr>
 80291c4:	2800      	cmp	r0, #0
 80291c6:	d037      	beq.n	8029238 <_vfiprintf_r+0x1f8>
 80291c8:	4b26      	ldr	r3, [pc, #152]	; (8029264 <_vfiprintf_r+0x224>)
 80291ca:	bb1b      	cbnz	r3, 8029214 <_vfiprintf_r+0x1d4>
 80291cc:	9b03      	ldr	r3, [sp, #12]
 80291ce:	3307      	adds	r3, #7
 80291d0:	f023 0307 	bic.w	r3, r3, #7
 80291d4:	3308      	adds	r3, #8
 80291d6:	9303      	str	r3, [sp, #12]
 80291d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80291da:	444b      	add	r3, r9
 80291dc:	9309      	str	r3, [sp, #36]	; 0x24
 80291de:	e750      	b.n	8029082 <_vfiprintf_r+0x42>
 80291e0:	fb05 3202 	mla	r2, r5, r2, r3
 80291e4:	2001      	movs	r0, #1
 80291e6:	4688      	mov	r8, r1
 80291e8:	e78a      	b.n	8029100 <_vfiprintf_r+0xc0>
 80291ea:	2300      	movs	r3, #0
 80291ec:	f108 0801 	add.w	r8, r8, #1
 80291f0:	9305      	str	r3, [sp, #20]
 80291f2:	4619      	mov	r1, r3
 80291f4:	250a      	movs	r5, #10
 80291f6:	4640      	mov	r0, r8
 80291f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80291fc:	3a30      	subs	r2, #48	; 0x30
 80291fe:	2a09      	cmp	r2, #9
 8029200:	d903      	bls.n	802920a <_vfiprintf_r+0x1ca>
 8029202:	2b00      	cmp	r3, #0
 8029204:	d0c3      	beq.n	802918e <_vfiprintf_r+0x14e>
 8029206:	9105      	str	r1, [sp, #20]
 8029208:	e7c1      	b.n	802918e <_vfiprintf_r+0x14e>
 802920a:	fb05 2101 	mla	r1, r5, r1, r2
 802920e:	2301      	movs	r3, #1
 8029210:	4680      	mov	r8, r0
 8029212:	e7f0      	b.n	80291f6 <_vfiprintf_r+0x1b6>
 8029214:	ab03      	add	r3, sp, #12
 8029216:	9300      	str	r3, [sp, #0]
 8029218:	4622      	mov	r2, r4
 802921a:	4b13      	ldr	r3, [pc, #76]	; (8029268 <_vfiprintf_r+0x228>)
 802921c:	a904      	add	r1, sp, #16
 802921e:	4630      	mov	r0, r6
 8029220:	f000 f8b8 	bl	8029394 <_printf_float>
 8029224:	f1b0 3fff 	cmp.w	r0, #4294967295
 8029228:	4681      	mov	r9, r0
 802922a:	d1d5      	bne.n	80291d8 <_vfiprintf_r+0x198>
 802922c:	89a3      	ldrh	r3, [r4, #12]
 802922e:	065b      	lsls	r3, r3, #25
 8029230:	f53f af7e 	bmi.w	8029130 <_vfiprintf_r+0xf0>
 8029234:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029236:	e77d      	b.n	8029134 <_vfiprintf_r+0xf4>
 8029238:	ab03      	add	r3, sp, #12
 802923a:	9300      	str	r3, [sp, #0]
 802923c:	4622      	mov	r2, r4
 802923e:	4b0a      	ldr	r3, [pc, #40]	; (8029268 <_vfiprintf_r+0x228>)
 8029240:	a904      	add	r1, sp, #16
 8029242:	4630      	mov	r0, r6
 8029244:	f000 fb5c 	bl	8029900 <_printf_i>
 8029248:	e7ec      	b.n	8029224 <_vfiprintf_r+0x1e4>
 802924a:	bf00      	nop
 802924c:	0802ef10 	.word	0x0802ef10
 8029250:	0802ee40 	.word	0x0802ee40
 8029254:	0802ef30 	.word	0x0802ef30
 8029258:	0802eef0 	.word	0x0802eef0
 802925c:	0802ee46 	.word	0x0802ee46
 8029260:	0802ee4a 	.word	0x0802ee4a
 8029264:	08029395 	.word	0x08029395
 8029268:	0802901d 	.word	0x0802901d

0802926c <__cvt>:
 802926c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8029270:	ec55 4b10 	vmov	r4, r5, d0
 8029274:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8029276:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 802927a:	2d00      	cmp	r5, #0
 802927c:	460e      	mov	r6, r1
 802927e:	4691      	mov	r9, r2
 8029280:	4619      	mov	r1, r3
 8029282:	bfb8      	it	lt
 8029284:	4622      	movlt	r2, r4
 8029286:	462b      	mov	r3, r5
 8029288:	f027 0720 	bic.w	r7, r7, #32
 802928c:	bfbb      	ittet	lt
 802928e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8029292:	461d      	movlt	r5, r3
 8029294:	2300      	movge	r3, #0
 8029296:	232d      	movlt	r3, #45	; 0x2d
 8029298:	bfb8      	it	lt
 802929a:	4614      	movlt	r4, r2
 802929c:	2f46      	cmp	r7, #70	; 0x46
 802929e:	700b      	strb	r3, [r1, #0]
 80292a0:	d004      	beq.n	80292ac <__cvt+0x40>
 80292a2:	2f45      	cmp	r7, #69	; 0x45
 80292a4:	d100      	bne.n	80292a8 <__cvt+0x3c>
 80292a6:	3601      	adds	r6, #1
 80292a8:	2102      	movs	r1, #2
 80292aa:	e000      	b.n	80292ae <__cvt+0x42>
 80292ac:	2103      	movs	r1, #3
 80292ae:	ab03      	add	r3, sp, #12
 80292b0:	9301      	str	r3, [sp, #4]
 80292b2:	ab02      	add	r3, sp, #8
 80292b4:	9300      	str	r3, [sp, #0]
 80292b6:	4632      	mov	r2, r6
 80292b8:	4653      	mov	r3, sl
 80292ba:	ec45 4b10 	vmov	d0, r4, r5
 80292be:	f001 ff6f 	bl	802b1a0 <_dtoa_r>
 80292c2:	2f47      	cmp	r7, #71	; 0x47
 80292c4:	4680      	mov	r8, r0
 80292c6:	d102      	bne.n	80292ce <__cvt+0x62>
 80292c8:	f019 0f01 	tst.w	r9, #1
 80292cc:	d026      	beq.n	802931c <__cvt+0xb0>
 80292ce:	2f46      	cmp	r7, #70	; 0x46
 80292d0:	eb08 0906 	add.w	r9, r8, r6
 80292d4:	d111      	bne.n	80292fa <__cvt+0x8e>
 80292d6:	f898 3000 	ldrb.w	r3, [r8]
 80292da:	2b30      	cmp	r3, #48	; 0x30
 80292dc:	d10a      	bne.n	80292f4 <__cvt+0x88>
 80292de:	2200      	movs	r2, #0
 80292e0:	2300      	movs	r3, #0
 80292e2:	4620      	mov	r0, r4
 80292e4:	4629      	mov	r1, r5
 80292e6:	f7d7 fbf7 	bl	8000ad8 <__aeabi_dcmpeq>
 80292ea:	b918      	cbnz	r0, 80292f4 <__cvt+0x88>
 80292ec:	f1c6 0601 	rsb	r6, r6, #1
 80292f0:	f8ca 6000 	str.w	r6, [sl]
 80292f4:	f8da 3000 	ldr.w	r3, [sl]
 80292f8:	4499      	add	r9, r3
 80292fa:	2200      	movs	r2, #0
 80292fc:	2300      	movs	r3, #0
 80292fe:	4620      	mov	r0, r4
 8029300:	4629      	mov	r1, r5
 8029302:	f7d7 fbe9 	bl	8000ad8 <__aeabi_dcmpeq>
 8029306:	b938      	cbnz	r0, 8029318 <__cvt+0xac>
 8029308:	2230      	movs	r2, #48	; 0x30
 802930a:	9b03      	ldr	r3, [sp, #12]
 802930c:	454b      	cmp	r3, r9
 802930e:	d205      	bcs.n	802931c <__cvt+0xb0>
 8029310:	1c59      	adds	r1, r3, #1
 8029312:	9103      	str	r1, [sp, #12]
 8029314:	701a      	strb	r2, [r3, #0]
 8029316:	e7f8      	b.n	802930a <__cvt+0x9e>
 8029318:	f8cd 900c 	str.w	r9, [sp, #12]
 802931c:	9b03      	ldr	r3, [sp, #12]
 802931e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029320:	eba3 0308 	sub.w	r3, r3, r8
 8029324:	4640      	mov	r0, r8
 8029326:	6013      	str	r3, [r2, #0]
 8029328:	b004      	add	sp, #16
 802932a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0802932e <__exponent>:
 802932e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029330:	2900      	cmp	r1, #0
 8029332:	4604      	mov	r4, r0
 8029334:	bfba      	itte	lt
 8029336:	4249      	neglt	r1, r1
 8029338:	232d      	movlt	r3, #45	; 0x2d
 802933a:	232b      	movge	r3, #43	; 0x2b
 802933c:	2909      	cmp	r1, #9
 802933e:	f804 2b02 	strb.w	r2, [r4], #2
 8029342:	7043      	strb	r3, [r0, #1]
 8029344:	dd20      	ble.n	8029388 <__exponent+0x5a>
 8029346:	f10d 0307 	add.w	r3, sp, #7
 802934a:	461f      	mov	r7, r3
 802934c:	260a      	movs	r6, #10
 802934e:	fb91 f5f6 	sdiv	r5, r1, r6
 8029352:	fb06 1115 	mls	r1, r6, r5, r1
 8029356:	3130      	adds	r1, #48	; 0x30
 8029358:	2d09      	cmp	r5, #9
 802935a:	f803 1c01 	strb.w	r1, [r3, #-1]
 802935e:	f103 32ff 	add.w	r2, r3, #4294967295
 8029362:	4629      	mov	r1, r5
 8029364:	dc09      	bgt.n	802937a <__exponent+0x4c>
 8029366:	3130      	adds	r1, #48	; 0x30
 8029368:	3b02      	subs	r3, #2
 802936a:	f802 1c01 	strb.w	r1, [r2, #-1]
 802936e:	42bb      	cmp	r3, r7
 8029370:	4622      	mov	r2, r4
 8029372:	d304      	bcc.n	802937e <__exponent+0x50>
 8029374:	1a10      	subs	r0, r2, r0
 8029376:	b003      	add	sp, #12
 8029378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802937a:	4613      	mov	r3, r2
 802937c:	e7e7      	b.n	802934e <__exponent+0x20>
 802937e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029382:	f804 2b01 	strb.w	r2, [r4], #1
 8029386:	e7f2      	b.n	802936e <__exponent+0x40>
 8029388:	2330      	movs	r3, #48	; 0x30
 802938a:	4419      	add	r1, r3
 802938c:	7083      	strb	r3, [r0, #2]
 802938e:	1d02      	adds	r2, r0, #4
 8029390:	70c1      	strb	r1, [r0, #3]
 8029392:	e7ef      	b.n	8029374 <__exponent+0x46>

08029394 <_printf_float>:
 8029394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029398:	b08d      	sub	sp, #52	; 0x34
 802939a:	460c      	mov	r4, r1
 802939c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80293a0:	4616      	mov	r6, r2
 80293a2:	461f      	mov	r7, r3
 80293a4:	4605      	mov	r5, r0
 80293a6:	f003 f959 	bl	802c65c <_localeconv_r>
 80293aa:	6803      	ldr	r3, [r0, #0]
 80293ac:	9304      	str	r3, [sp, #16]
 80293ae:	4618      	mov	r0, r3
 80293b0:	f7d6 ff16 	bl	80001e0 <strlen>
 80293b4:	2300      	movs	r3, #0
 80293b6:	930a      	str	r3, [sp, #40]	; 0x28
 80293b8:	f8d8 3000 	ldr.w	r3, [r8]
 80293bc:	9005      	str	r0, [sp, #20]
 80293be:	3307      	adds	r3, #7
 80293c0:	f023 0307 	bic.w	r3, r3, #7
 80293c4:	f103 0208 	add.w	r2, r3, #8
 80293c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80293cc:	f8d4 b000 	ldr.w	fp, [r4]
 80293d0:	f8c8 2000 	str.w	r2, [r8]
 80293d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80293d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80293dc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80293e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80293e4:	9307      	str	r3, [sp, #28]
 80293e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80293ea:	f04f 32ff 	mov.w	r2, #4294967295
 80293ee:	4ba7      	ldr	r3, [pc, #668]	; (802968c <_printf_float+0x2f8>)
 80293f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80293f4:	f7d7 fba2 	bl	8000b3c <__aeabi_dcmpun>
 80293f8:	bb70      	cbnz	r0, 8029458 <_printf_float+0xc4>
 80293fa:	f04f 32ff 	mov.w	r2, #4294967295
 80293fe:	4ba3      	ldr	r3, [pc, #652]	; (802968c <_printf_float+0x2f8>)
 8029400:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8029404:	f7d7 fb7c 	bl	8000b00 <__aeabi_dcmple>
 8029408:	bb30      	cbnz	r0, 8029458 <_printf_float+0xc4>
 802940a:	2200      	movs	r2, #0
 802940c:	2300      	movs	r3, #0
 802940e:	4640      	mov	r0, r8
 8029410:	4649      	mov	r1, r9
 8029412:	f7d7 fb6b 	bl	8000aec <__aeabi_dcmplt>
 8029416:	b110      	cbz	r0, 802941e <_printf_float+0x8a>
 8029418:	232d      	movs	r3, #45	; 0x2d
 802941a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802941e:	4a9c      	ldr	r2, [pc, #624]	; (8029690 <_printf_float+0x2fc>)
 8029420:	4b9c      	ldr	r3, [pc, #624]	; (8029694 <_printf_float+0x300>)
 8029422:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8029426:	bf8c      	ite	hi
 8029428:	4690      	movhi	r8, r2
 802942a:	4698      	movls	r8, r3
 802942c:	2303      	movs	r3, #3
 802942e:	f02b 0204 	bic.w	r2, fp, #4
 8029432:	6123      	str	r3, [r4, #16]
 8029434:	6022      	str	r2, [r4, #0]
 8029436:	f04f 0900 	mov.w	r9, #0
 802943a:	9700      	str	r7, [sp, #0]
 802943c:	4633      	mov	r3, r6
 802943e:	aa0b      	add	r2, sp, #44	; 0x2c
 8029440:	4621      	mov	r1, r4
 8029442:	4628      	mov	r0, r5
 8029444:	f000 f9e6 	bl	8029814 <_printf_common>
 8029448:	3001      	adds	r0, #1
 802944a:	f040 808d 	bne.w	8029568 <_printf_float+0x1d4>
 802944e:	f04f 30ff 	mov.w	r0, #4294967295
 8029452:	b00d      	add	sp, #52	; 0x34
 8029454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029458:	4642      	mov	r2, r8
 802945a:	464b      	mov	r3, r9
 802945c:	4640      	mov	r0, r8
 802945e:	4649      	mov	r1, r9
 8029460:	f7d7 fb6c 	bl	8000b3c <__aeabi_dcmpun>
 8029464:	b110      	cbz	r0, 802946c <_printf_float+0xd8>
 8029466:	4a8c      	ldr	r2, [pc, #560]	; (8029698 <_printf_float+0x304>)
 8029468:	4b8c      	ldr	r3, [pc, #560]	; (802969c <_printf_float+0x308>)
 802946a:	e7da      	b.n	8029422 <_printf_float+0x8e>
 802946c:	6861      	ldr	r1, [r4, #4]
 802946e:	1c4b      	adds	r3, r1, #1
 8029470:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8029474:	a80a      	add	r0, sp, #40	; 0x28
 8029476:	d13e      	bne.n	80294f6 <_printf_float+0x162>
 8029478:	2306      	movs	r3, #6
 802947a:	6063      	str	r3, [r4, #4]
 802947c:	2300      	movs	r3, #0
 802947e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8029482:	ab09      	add	r3, sp, #36	; 0x24
 8029484:	9300      	str	r3, [sp, #0]
 8029486:	ec49 8b10 	vmov	d0, r8, r9
 802948a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802948e:	6022      	str	r2, [r4, #0]
 8029490:	f8cd a004 	str.w	sl, [sp, #4]
 8029494:	6861      	ldr	r1, [r4, #4]
 8029496:	4628      	mov	r0, r5
 8029498:	f7ff fee8 	bl	802926c <__cvt>
 802949c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80294a0:	2b47      	cmp	r3, #71	; 0x47
 80294a2:	4680      	mov	r8, r0
 80294a4:	d109      	bne.n	80294ba <_printf_float+0x126>
 80294a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80294a8:	1cd8      	adds	r0, r3, #3
 80294aa:	db02      	blt.n	80294b2 <_printf_float+0x11e>
 80294ac:	6862      	ldr	r2, [r4, #4]
 80294ae:	4293      	cmp	r3, r2
 80294b0:	dd47      	ble.n	8029542 <_printf_float+0x1ae>
 80294b2:	f1aa 0a02 	sub.w	sl, sl, #2
 80294b6:	fa5f fa8a 	uxtb.w	sl, sl
 80294ba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80294be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80294c0:	d824      	bhi.n	802950c <_printf_float+0x178>
 80294c2:	3901      	subs	r1, #1
 80294c4:	4652      	mov	r2, sl
 80294c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80294ca:	9109      	str	r1, [sp, #36]	; 0x24
 80294cc:	f7ff ff2f 	bl	802932e <__exponent>
 80294d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80294d2:	1813      	adds	r3, r2, r0
 80294d4:	2a01      	cmp	r2, #1
 80294d6:	4681      	mov	r9, r0
 80294d8:	6123      	str	r3, [r4, #16]
 80294da:	dc02      	bgt.n	80294e2 <_printf_float+0x14e>
 80294dc:	6822      	ldr	r2, [r4, #0]
 80294de:	07d1      	lsls	r1, r2, #31
 80294e0:	d501      	bpl.n	80294e6 <_printf_float+0x152>
 80294e2:	3301      	adds	r3, #1
 80294e4:	6123      	str	r3, [r4, #16]
 80294e6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80294ea:	2b00      	cmp	r3, #0
 80294ec:	d0a5      	beq.n	802943a <_printf_float+0xa6>
 80294ee:	232d      	movs	r3, #45	; 0x2d
 80294f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80294f4:	e7a1      	b.n	802943a <_printf_float+0xa6>
 80294f6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80294fa:	f000 8177 	beq.w	80297ec <_printf_float+0x458>
 80294fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8029502:	d1bb      	bne.n	802947c <_printf_float+0xe8>
 8029504:	2900      	cmp	r1, #0
 8029506:	d1b9      	bne.n	802947c <_printf_float+0xe8>
 8029508:	2301      	movs	r3, #1
 802950a:	e7b6      	b.n	802947a <_printf_float+0xe6>
 802950c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8029510:	d119      	bne.n	8029546 <_printf_float+0x1b2>
 8029512:	2900      	cmp	r1, #0
 8029514:	6863      	ldr	r3, [r4, #4]
 8029516:	dd0c      	ble.n	8029532 <_printf_float+0x19e>
 8029518:	6121      	str	r1, [r4, #16]
 802951a:	b913      	cbnz	r3, 8029522 <_printf_float+0x18e>
 802951c:	6822      	ldr	r2, [r4, #0]
 802951e:	07d2      	lsls	r2, r2, #31
 8029520:	d502      	bpl.n	8029528 <_printf_float+0x194>
 8029522:	3301      	adds	r3, #1
 8029524:	440b      	add	r3, r1
 8029526:	6123      	str	r3, [r4, #16]
 8029528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802952a:	65a3      	str	r3, [r4, #88]	; 0x58
 802952c:	f04f 0900 	mov.w	r9, #0
 8029530:	e7d9      	b.n	80294e6 <_printf_float+0x152>
 8029532:	b913      	cbnz	r3, 802953a <_printf_float+0x1a6>
 8029534:	6822      	ldr	r2, [r4, #0]
 8029536:	07d0      	lsls	r0, r2, #31
 8029538:	d501      	bpl.n	802953e <_printf_float+0x1aa>
 802953a:	3302      	adds	r3, #2
 802953c:	e7f3      	b.n	8029526 <_printf_float+0x192>
 802953e:	2301      	movs	r3, #1
 8029540:	e7f1      	b.n	8029526 <_printf_float+0x192>
 8029542:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8029546:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802954a:	4293      	cmp	r3, r2
 802954c:	db05      	blt.n	802955a <_printf_float+0x1c6>
 802954e:	6822      	ldr	r2, [r4, #0]
 8029550:	6123      	str	r3, [r4, #16]
 8029552:	07d1      	lsls	r1, r2, #31
 8029554:	d5e8      	bpl.n	8029528 <_printf_float+0x194>
 8029556:	3301      	adds	r3, #1
 8029558:	e7e5      	b.n	8029526 <_printf_float+0x192>
 802955a:	2b00      	cmp	r3, #0
 802955c:	bfd4      	ite	le
 802955e:	f1c3 0302 	rsble	r3, r3, #2
 8029562:	2301      	movgt	r3, #1
 8029564:	4413      	add	r3, r2
 8029566:	e7de      	b.n	8029526 <_printf_float+0x192>
 8029568:	6823      	ldr	r3, [r4, #0]
 802956a:	055a      	lsls	r2, r3, #21
 802956c:	d407      	bmi.n	802957e <_printf_float+0x1ea>
 802956e:	6923      	ldr	r3, [r4, #16]
 8029570:	4642      	mov	r2, r8
 8029572:	4631      	mov	r1, r6
 8029574:	4628      	mov	r0, r5
 8029576:	47b8      	blx	r7
 8029578:	3001      	adds	r0, #1
 802957a:	d12b      	bne.n	80295d4 <_printf_float+0x240>
 802957c:	e767      	b.n	802944e <_printf_float+0xba>
 802957e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8029582:	f240 80dc 	bls.w	802973e <_printf_float+0x3aa>
 8029586:	2200      	movs	r2, #0
 8029588:	2300      	movs	r3, #0
 802958a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802958e:	f7d7 faa3 	bl	8000ad8 <__aeabi_dcmpeq>
 8029592:	2800      	cmp	r0, #0
 8029594:	d033      	beq.n	80295fe <_printf_float+0x26a>
 8029596:	2301      	movs	r3, #1
 8029598:	4a41      	ldr	r2, [pc, #260]	; (80296a0 <_printf_float+0x30c>)
 802959a:	4631      	mov	r1, r6
 802959c:	4628      	mov	r0, r5
 802959e:	47b8      	blx	r7
 80295a0:	3001      	adds	r0, #1
 80295a2:	f43f af54 	beq.w	802944e <_printf_float+0xba>
 80295a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80295aa:	429a      	cmp	r2, r3
 80295ac:	db02      	blt.n	80295b4 <_printf_float+0x220>
 80295ae:	6823      	ldr	r3, [r4, #0]
 80295b0:	07d8      	lsls	r0, r3, #31
 80295b2:	d50f      	bpl.n	80295d4 <_printf_float+0x240>
 80295b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80295b8:	4631      	mov	r1, r6
 80295ba:	4628      	mov	r0, r5
 80295bc:	47b8      	blx	r7
 80295be:	3001      	adds	r0, #1
 80295c0:	f43f af45 	beq.w	802944e <_printf_float+0xba>
 80295c4:	f04f 0800 	mov.w	r8, #0
 80295c8:	f104 091a 	add.w	r9, r4, #26
 80295cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80295ce:	3b01      	subs	r3, #1
 80295d0:	4543      	cmp	r3, r8
 80295d2:	dc09      	bgt.n	80295e8 <_printf_float+0x254>
 80295d4:	6823      	ldr	r3, [r4, #0]
 80295d6:	079b      	lsls	r3, r3, #30
 80295d8:	f100 8103 	bmi.w	80297e2 <_printf_float+0x44e>
 80295dc:	68e0      	ldr	r0, [r4, #12]
 80295de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80295e0:	4298      	cmp	r0, r3
 80295e2:	bfb8      	it	lt
 80295e4:	4618      	movlt	r0, r3
 80295e6:	e734      	b.n	8029452 <_printf_float+0xbe>
 80295e8:	2301      	movs	r3, #1
 80295ea:	464a      	mov	r2, r9
 80295ec:	4631      	mov	r1, r6
 80295ee:	4628      	mov	r0, r5
 80295f0:	47b8      	blx	r7
 80295f2:	3001      	adds	r0, #1
 80295f4:	f43f af2b 	beq.w	802944e <_printf_float+0xba>
 80295f8:	f108 0801 	add.w	r8, r8, #1
 80295fc:	e7e6      	b.n	80295cc <_printf_float+0x238>
 80295fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029600:	2b00      	cmp	r3, #0
 8029602:	dc2b      	bgt.n	802965c <_printf_float+0x2c8>
 8029604:	2301      	movs	r3, #1
 8029606:	4a26      	ldr	r2, [pc, #152]	; (80296a0 <_printf_float+0x30c>)
 8029608:	4631      	mov	r1, r6
 802960a:	4628      	mov	r0, r5
 802960c:	47b8      	blx	r7
 802960e:	3001      	adds	r0, #1
 8029610:	f43f af1d 	beq.w	802944e <_printf_float+0xba>
 8029614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029616:	b923      	cbnz	r3, 8029622 <_printf_float+0x28e>
 8029618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802961a:	b913      	cbnz	r3, 8029622 <_printf_float+0x28e>
 802961c:	6823      	ldr	r3, [r4, #0]
 802961e:	07d9      	lsls	r1, r3, #31
 8029620:	d5d8      	bpl.n	80295d4 <_printf_float+0x240>
 8029622:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8029626:	4631      	mov	r1, r6
 8029628:	4628      	mov	r0, r5
 802962a:	47b8      	blx	r7
 802962c:	3001      	adds	r0, #1
 802962e:	f43f af0e 	beq.w	802944e <_printf_float+0xba>
 8029632:	f04f 0900 	mov.w	r9, #0
 8029636:	f104 0a1a 	add.w	sl, r4, #26
 802963a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802963c:	425b      	negs	r3, r3
 802963e:	454b      	cmp	r3, r9
 8029640:	dc01      	bgt.n	8029646 <_printf_float+0x2b2>
 8029642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029644:	e794      	b.n	8029570 <_printf_float+0x1dc>
 8029646:	2301      	movs	r3, #1
 8029648:	4652      	mov	r2, sl
 802964a:	4631      	mov	r1, r6
 802964c:	4628      	mov	r0, r5
 802964e:	47b8      	blx	r7
 8029650:	3001      	adds	r0, #1
 8029652:	f43f aefc 	beq.w	802944e <_printf_float+0xba>
 8029656:	f109 0901 	add.w	r9, r9, #1
 802965a:	e7ee      	b.n	802963a <_printf_float+0x2a6>
 802965c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802965e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8029660:	429a      	cmp	r2, r3
 8029662:	bfa8      	it	ge
 8029664:	461a      	movge	r2, r3
 8029666:	2a00      	cmp	r2, #0
 8029668:	4691      	mov	r9, r2
 802966a:	dd07      	ble.n	802967c <_printf_float+0x2e8>
 802966c:	4613      	mov	r3, r2
 802966e:	4631      	mov	r1, r6
 8029670:	4642      	mov	r2, r8
 8029672:	4628      	mov	r0, r5
 8029674:	47b8      	blx	r7
 8029676:	3001      	adds	r0, #1
 8029678:	f43f aee9 	beq.w	802944e <_printf_float+0xba>
 802967c:	f104 031a 	add.w	r3, r4, #26
 8029680:	f04f 0b00 	mov.w	fp, #0
 8029684:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8029688:	9306      	str	r3, [sp, #24]
 802968a:	e015      	b.n	80296b8 <_printf_float+0x324>
 802968c:	7fefffff 	.word	0x7fefffff
 8029690:	0802ee55 	.word	0x0802ee55
 8029694:	0802ee51 	.word	0x0802ee51
 8029698:	0802ee5d 	.word	0x0802ee5d
 802969c:	0802ee59 	.word	0x0802ee59
 80296a0:	0802ee61 	.word	0x0802ee61
 80296a4:	2301      	movs	r3, #1
 80296a6:	9a06      	ldr	r2, [sp, #24]
 80296a8:	4631      	mov	r1, r6
 80296aa:	4628      	mov	r0, r5
 80296ac:	47b8      	blx	r7
 80296ae:	3001      	adds	r0, #1
 80296b0:	f43f aecd 	beq.w	802944e <_printf_float+0xba>
 80296b4:	f10b 0b01 	add.w	fp, fp, #1
 80296b8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80296bc:	ebaa 0309 	sub.w	r3, sl, r9
 80296c0:	455b      	cmp	r3, fp
 80296c2:	dcef      	bgt.n	80296a4 <_printf_float+0x310>
 80296c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80296c8:	429a      	cmp	r2, r3
 80296ca:	44d0      	add	r8, sl
 80296cc:	db15      	blt.n	80296fa <_printf_float+0x366>
 80296ce:	6823      	ldr	r3, [r4, #0]
 80296d0:	07da      	lsls	r2, r3, #31
 80296d2:	d412      	bmi.n	80296fa <_printf_float+0x366>
 80296d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80296d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80296d8:	eba3 020a 	sub.w	r2, r3, sl
 80296dc:	eba3 0a01 	sub.w	sl, r3, r1
 80296e0:	4592      	cmp	sl, r2
 80296e2:	bfa8      	it	ge
 80296e4:	4692      	movge	sl, r2
 80296e6:	f1ba 0f00 	cmp.w	sl, #0
 80296ea:	dc0e      	bgt.n	802970a <_printf_float+0x376>
 80296ec:	f04f 0800 	mov.w	r8, #0
 80296f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80296f4:	f104 091a 	add.w	r9, r4, #26
 80296f8:	e019      	b.n	802972e <_printf_float+0x39a>
 80296fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80296fe:	4631      	mov	r1, r6
 8029700:	4628      	mov	r0, r5
 8029702:	47b8      	blx	r7
 8029704:	3001      	adds	r0, #1
 8029706:	d1e5      	bne.n	80296d4 <_printf_float+0x340>
 8029708:	e6a1      	b.n	802944e <_printf_float+0xba>
 802970a:	4653      	mov	r3, sl
 802970c:	4642      	mov	r2, r8
 802970e:	4631      	mov	r1, r6
 8029710:	4628      	mov	r0, r5
 8029712:	47b8      	blx	r7
 8029714:	3001      	adds	r0, #1
 8029716:	d1e9      	bne.n	80296ec <_printf_float+0x358>
 8029718:	e699      	b.n	802944e <_printf_float+0xba>
 802971a:	2301      	movs	r3, #1
 802971c:	464a      	mov	r2, r9
 802971e:	4631      	mov	r1, r6
 8029720:	4628      	mov	r0, r5
 8029722:	47b8      	blx	r7
 8029724:	3001      	adds	r0, #1
 8029726:	f43f ae92 	beq.w	802944e <_printf_float+0xba>
 802972a:	f108 0801 	add.w	r8, r8, #1
 802972e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8029732:	1a9b      	subs	r3, r3, r2
 8029734:	eba3 030a 	sub.w	r3, r3, sl
 8029738:	4543      	cmp	r3, r8
 802973a:	dcee      	bgt.n	802971a <_printf_float+0x386>
 802973c:	e74a      	b.n	80295d4 <_printf_float+0x240>
 802973e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029740:	2a01      	cmp	r2, #1
 8029742:	dc01      	bgt.n	8029748 <_printf_float+0x3b4>
 8029744:	07db      	lsls	r3, r3, #31
 8029746:	d53a      	bpl.n	80297be <_printf_float+0x42a>
 8029748:	2301      	movs	r3, #1
 802974a:	4642      	mov	r2, r8
 802974c:	4631      	mov	r1, r6
 802974e:	4628      	mov	r0, r5
 8029750:	47b8      	blx	r7
 8029752:	3001      	adds	r0, #1
 8029754:	f43f ae7b 	beq.w	802944e <_printf_float+0xba>
 8029758:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802975c:	4631      	mov	r1, r6
 802975e:	4628      	mov	r0, r5
 8029760:	47b8      	blx	r7
 8029762:	3001      	adds	r0, #1
 8029764:	f108 0801 	add.w	r8, r8, #1
 8029768:	f43f ae71 	beq.w	802944e <_printf_float+0xba>
 802976c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802976e:	2200      	movs	r2, #0
 8029770:	f103 3aff 	add.w	sl, r3, #4294967295
 8029774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8029778:	2300      	movs	r3, #0
 802977a:	f7d7 f9ad 	bl	8000ad8 <__aeabi_dcmpeq>
 802977e:	b9c8      	cbnz	r0, 80297b4 <_printf_float+0x420>
 8029780:	4653      	mov	r3, sl
 8029782:	4642      	mov	r2, r8
 8029784:	4631      	mov	r1, r6
 8029786:	4628      	mov	r0, r5
 8029788:	47b8      	blx	r7
 802978a:	3001      	adds	r0, #1
 802978c:	d10e      	bne.n	80297ac <_printf_float+0x418>
 802978e:	e65e      	b.n	802944e <_printf_float+0xba>
 8029790:	2301      	movs	r3, #1
 8029792:	4652      	mov	r2, sl
 8029794:	4631      	mov	r1, r6
 8029796:	4628      	mov	r0, r5
 8029798:	47b8      	blx	r7
 802979a:	3001      	adds	r0, #1
 802979c:	f43f ae57 	beq.w	802944e <_printf_float+0xba>
 80297a0:	f108 0801 	add.w	r8, r8, #1
 80297a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80297a6:	3b01      	subs	r3, #1
 80297a8:	4543      	cmp	r3, r8
 80297aa:	dcf1      	bgt.n	8029790 <_printf_float+0x3fc>
 80297ac:	464b      	mov	r3, r9
 80297ae:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80297b2:	e6de      	b.n	8029572 <_printf_float+0x1de>
 80297b4:	f04f 0800 	mov.w	r8, #0
 80297b8:	f104 0a1a 	add.w	sl, r4, #26
 80297bc:	e7f2      	b.n	80297a4 <_printf_float+0x410>
 80297be:	2301      	movs	r3, #1
 80297c0:	e7df      	b.n	8029782 <_printf_float+0x3ee>
 80297c2:	2301      	movs	r3, #1
 80297c4:	464a      	mov	r2, r9
 80297c6:	4631      	mov	r1, r6
 80297c8:	4628      	mov	r0, r5
 80297ca:	47b8      	blx	r7
 80297cc:	3001      	adds	r0, #1
 80297ce:	f43f ae3e 	beq.w	802944e <_printf_float+0xba>
 80297d2:	f108 0801 	add.w	r8, r8, #1
 80297d6:	68e3      	ldr	r3, [r4, #12]
 80297d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80297da:	1a9b      	subs	r3, r3, r2
 80297dc:	4543      	cmp	r3, r8
 80297de:	dcf0      	bgt.n	80297c2 <_printf_float+0x42e>
 80297e0:	e6fc      	b.n	80295dc <_printf_float+0x248>
 80297e2:	f04f 0800 	mov.w	r8, #0
 80297e6:	f104 0919 	add.w	r9, r4, #25
 80297ea:	e7f4      	b.n	80297d6 <_printf_float+0x442>
 80297ec:	2900      	cmp	r1, #0
 80297ee:	f43f ae8b 	beq.w	8029508 <_printf_float+0x174>
 80297f2:	2300      	movs	r3, #0
 80297f4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80297f8:	ab09      	add	r3, sp, #36	; 0x24
 80297fa:	9300      	str	r3, [sp, #0]
 80297fc:	ec49 8b10 	vmov	d0, r8, r9
 8029800:	6022      	str	r2, [r4, #0]
 8029802:	f8cd a004 	str.w	sl, [sp, #4]
 8029806:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802980a:	4628      	mov	r0, r5
 802980c:	f7ff fd2e 	bl	802926c <__cvt>
 8029810:	4680      	mov	r8, r0
 8029812:	e648      	b.n	80294a6 <_printf_float+0x112>

08029814 <_printf_common>:
 8029814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029818:	4691      	mov	r9, r2
 802981a:	461f      	mov	r7, r3
 802981c:	688a      	ldr	r2, [r1, #8]
 802981e:	690b      	ldr	r3, [r1, #16]
 8029820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8029824:	4293      	cmp	r3, r2
 8029826:	bfb8      	it	lt
 8029828:	4613      	movlt	r3, r2
 802982a:	f8c9 3000 	str.w	r3, [r9]
 802982e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8029832:	4606      	mov	r6, r0
 8029834:	460c      	mov	r4, r1
 8029836:	b112      	cbz	r2, 802983e <_printf_common+0x2a>
 8029838:	3301      	adds	r3, #1
 802983a:	f8c9 3000 	str.w	r3, [r9]
 802983e:	6823      	ldr	r3, [r4, #0]
 8029840:	0699      	lsls	r1, r3, #26
 8029842:	bf42      	ittt	mi
 8029844:	f8d9 3000 	ldrmi.w	r3, [r9]
 8029848:	3302      	addmi	r3, #2
 802984a:	f8c9 3000 	strmi.w	r3, [r9]
 802984e:	6825      	ldr	r5, [r4, #0]
 8029850:	f015 0506 	ands.w	r5, r5, #6
 8029854:	d107      	bne.n	8029866 <_printf_common+0x52>
 8029856:	f104 0a19 	add.w	sl, r4, #25
 802985a:	68e3      	ldr	r3, [r4, #12]
 802985c:	f8d9 2000 	ldr.w	r2, [r9]
 8029860:	1a9b      	subs	r3, r3, r2
 8029862:	42ab      	cmp	r3, r5
 8029864:	dc28      	bgt.n	80298b8 <_printf_common+0xa4>
 8029866:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802986a:	6822      	ldr	r2, [r4, #0]
 802986c:	3300      	adds	r3, #0
 802986e:	bf18      	it	ne
 8029870:	2301      	movne	r3, #1
 8029872:	0692      	lsls	r2, r2, #26
 8029874:	d42d      	bmi.n	80298d2 <_printf_common+0xbe>
 8029876:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802987a:	4639      	mov	r1, r7
 802987c:	4630      	mov	r0, r6
 802987e:	47c0      	blx	r8
 8029880:	3001      	adds	r0, #1
 8029882:	d020      	beq.n	80298c6 <_printf_common+0xb2>
 8029884:	6823      	ldr	r3, [r4, #0]
 8029886:	68e5      	ldr	r5, [r4, #12]
 8029888:	f8d9 2000 	ldr.w	r2, [r9]
 802988c:	f003 0306 	and.w	r3, r3, #6
 8029890:	2b04      	cmp	r3, #4
 8029892:	bf08      	it	eq
 8029894:	1aad      	subeq	r5, r5, r2
 8029896:	68a3      	ldr	r3, [r4, #8]
 8029898:	6922      	ldr	r2, [r4, #16]
 802989a:	bf0c      	ite	eq
 802989c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80298a0:	2500      	movne	r5, #0
 80298a2:	4293      	cmp	r3, r2
 80298a4:	bfc4      	itt	gt
 80298a6:	1a9b      	subgt	r3, r3, r2
 80298a8:	18ed      	addgt	r5, r5, r3
 80298aa:	f04f 0900 	mov.w	r9, #0
 80298ae:	341a      	adds	r4, #26
 80298b0:	454d      	cmp	r5, r9
 80298b2:	d11a      	bne.n	80298ea <_printf_common+0xd6>
 80298b4:	2000      	movs	r0, #0
 80298b6:	e008      	b.n	80298ca <_printf_common+0xb6>
 80298b8:	2301      	movs	r3, #1
 80298ba:	4652      	mov	r2, sl
 80298bc:	4639      	mov	r1, r7
 80298be:	4630      	mov	r0, r6
 80298c0:	47c0      	blx	r8
 80298c2:	3001      	adds	r0, #1
 80298c4:	d103      	bne.n	80298ce <_printf_common+0xba>
 80298c6:	f04f 30ff 	mov.w	r0, #4294967295
 80298ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80298ce:	3501      	adds	r5, #1
 80298d0:	e7c3      	b.n	802985a <_printf_common+0x46>
 80298d2:	18e1      	adds	r1, r4, r3
 80298d4:	1c5a      	adds	r2, r3, #1
 80298d6:	2030      	movs	r0, #48	; 0x30
 80298d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80298dc:	4422      	add	r2, r4
 80298de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80298e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80298e6:	3302      	adds	r3, #2
 80298e8:	e7c5      	b.n	8029876 <_printf_common+0x62>
 80298ea:	2301      	movs	r3, #1
 80298ec:	4622      	mov	r2, r4
 80298ee:	4639      	mov	r1, r7
 80298f0:	4630      	mov	r0, r6
 80298f2:	47c0      	blx	r8
 80298f4:	3001      	adds	r0, #1
 80298f6:	d0e6      	beq.n	80298c6 <_printf_common+0xb2>
 80298f8:	f109 0901 	add.w	r9, r9, #1
 80298fc:	e7d8      	b.n	80298b0 <_printf_common+0x9c>
	...

08029900 <_printf_i>:
 8029900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029904:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8029908:	460c      	mov	r4, r1
 802990a:	7e09      	ldrb	r1, [r1, #24]
 802990c:	b085      	sub	sp, #20
 802990e:	296e      	cmp	r1, #110	; 0x6e
 8029910:	4617      	mov	r7, r2
 8029912:	4606      	mov	r6, r0
 8029914:	4698      	mov	r8, r3
 8029916:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029918:	f000 80b3 	beq.w	8029a82 <_printf_i+0x182>
 802991c:	d822      	bhi.n	8029964 <_printf_i+0x64>
 802991e:	2963      	cmp	r1, #99	; 0x63
 8029920:	d036      	beq.n	8029990 <_printf_i+0x90>
 8029922:	d80a      	bhi.n	802993a <_printf_i+0x3a>
 8029924:	2900      	cmp	r1, #0
 8029926:	f000 80b9 	beq.w	8029a9c <_printf_i+0x19c>
 802992a:	2958      	cmp	r1, #88	; 0x58
 802992c:	f000 8083 	beq.w	8029a36 <_printf_i+0x136>
 8029930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8029934:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8029938:	e032      	b.n	80299a0 <_printf_i+0xa0>
 802993a:	2964      	cmp	r1, #100	; 0x64
 802993c:	d001      	beq.n	8029942 <_printf_i+0x42>
 802993e:	2969      	cmp	r1, #105	; 0x69
 8029940:	d1f6      	bne.n	8029930 <_printf_i+0x30>
 8029942:	6820      	ldr	r0, [r4, #0]
 8029944:	6813      	ldr	r3, [r2, #0]
 8029946:	0605      	lsls	r5, r0, #24
 8029948:	f103 0104 	add.w	r1, r3, #4
 802994c:	d52a      	bpl.n	80299a4 <_printf_i+0xa4>
 802994e:	681b      	ldr	r3, [r3, #0]
 8029950:	6011      	str	r1, [r2, #0]
 8029952:	2b00      	cmp	r3, #0
 8029954:	da03      	bge.n	802995e <_printf_i+0x5e>
 8029956:	222d      	movs	r2, #45	; 0x2d
 8029958:	425b      	negs	r3, r3
 802995a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802995e:	486f      	ldr	r0, [pc, #444]	; (8029b1c <_printf_i+0x21c>)
 8029960:	220a      	movs	r2, #10
 8029962:	e039      	b.n	80299d8 <_printf_i+0xd8>
 8029964:	2973      	cmp	r1, #115	; 0x73
 8029966:	f000 809d 	beq.w	8029aa4 <_printf_i+0x1a4>
 802996a:	d808      	bhi.n	802997e <_printf_i+0x7e>
 802996c:	296f      	cmp	r1, #111	; 0x6f
 802996e:	d020      	beq.n	80299b2 <_printf_i+0xb2>
 8029970:	2970      	cmp	r1, #112	; 0x70
 8029972:	d1dd      	bne.n	8029930 <_printf_i+0x30>
 8029974:	6823      	ldr	r3, [r4, #0]
 8029976:	f043 0320 	orr.w	r3, r3, #32
 802997a:	6023      	str	r3, [r4, #0]
 802997c:	e003      	b.n	8029986 <_printf_i+0x86>
 802997e:	2975      	cmp	r1, #117	; 0x75
 8029980:	d017      	beq.n	80299b2 <_printf_i+0xb2>
 8029982:	2978      	cmp	r1, #120	; 0x78
 8029984:	d1d4      	bne.n	8029930 <_printf_i+0x30>
 8029986:	2378      	movs	r3, #120	; 0x78
 8029988:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802998c:	4864      	ldr	r0, [pc, #400]	; (8029b20 <_printf_i+0x220>)
 802998e:	e055      	b.n	8029a3c <_printf_i+0x13c>
 8029990:	6813      	ldr	r3, [r2, #0]
 8029992:	1d19      	adds	r1, r3, #4
 8029994:	681b      	ldr	r3, [r3, #0]
 8029996:	6011      	str	r1, [r2, #0]
 8029998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802999c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80299a0:	2301      	movs	r3, #1
 80299a2:	e08c      	b.n	8029abe <_printf_i+0x1be>
 80299a4:	681b      	ldr	r3, [r3, #0]
 80299a6:	6011      	str	r1, [r2, #0]
 80299a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80299ac:	bf18      	it	ne
 80299ae:	b21b      	sxthne	r3, r3
 80299b0:	e7cf      	b.n	8029952 <_printf_i+0x52>
 80299b2:	6813      	ldr	r3, [r2, #0]
 80299b4:	6825      	ldr	r5, [r4, #0]
 80299b6:	1d18      	adds	r0, r3, #4
 80299b8:	6010      	str	r0, [r2, #0]
 80299ba:	0628      	lsls	r0, r5, #24
 80299bc:	d501      	bpl.n	80299c2 <_printf_i+0xc2>
 80299be:	681b      	ldr	r3, [r3, #0]
 80299c0:	e002      	b.n	80299c8 <_printf_i+0xc8>
 80299c2:	0668      	lsls	r0, r5, #25
 80299c4:	d5fb      	bpl.n	80299be <_printf_i+0xbe>
 80299c6:	881b      	ldrh	r3, [r3, #0]
 80299c8:	4854      	ldr	r0, [pc, #336]	; (8029b1c <_printf_i+0x21c>)
 80299ca:	296f      	cmp	r1, #111	; 0x6f
 80299cc:	bf14      	ite	ne
 80299ce:	220a      	movne	r2, #10
 80299d0:	2208      	moveq	r2, #8
 80299d2:	2100      	movs	r1, #0
 80299d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80299d8:	6865      	ldr	r5, [r4, #4]
 80299da:	60a5      	str	r5, [r4, #8]
 80299dc:	2d00      	cmp	r5, #0
 80299de:	f2c0 8095 	blt.w	8029b0c <_printf_i+0x20c>
 80299e2:	6821      	ldr	r1, [r4, #0]
 80299e4:	f021 0104 	bic.w	r1, r1, #4
 80299e8:	6021      	str	r1, [r4, #0]
 80299ea:	2b00      	cmp	r3, #0
 80299ec:	d13d      	bne.n	8029a6a <_printf_i+0x16a>
 80299ee:	2d00      	cmp	r5, #0
 80299f0:	f040 808e 	bne.w	8029b10 <_printf_i+0x210>
 80299f4:	4665      	mov	r5, ip
 80299f6:	2a08      	cmp	r2, #8
 80299f8:	d10b      	bne.n	8029a12 <_printf_i+0x112>
 80299fa:	6823      	ldr	r3, [r4, #0]
 80299fc:	07db      	lsls	r3, r3, #31
 80299fe:	d508      	bpl.n	8029a12 <_printf_i+0x112>
 8029a00:	6923      	ldr	r3, [r4, #16]
 8029a02:	6862      	ldr	r2, [r4, #4]
 8029a04:	429a      	cmp	r2, r3
 8029a06:	bfde      	ittt	le
 8029a08:	2330      	movle	r3, #48	; 0x30
 8029a0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8029a0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8029a12:	ebac 0305 	sub.w	r3, ip, r5
 8029a16:	6123      	str	r3, [r4, #16]
 8029a18:	f8cd 8000 	str.w	r8, [sp]
 8029a1c:	463b      	mov	r3, r7
 8029a1e:	aa03      	add	r2, sp, #12
 8029a20:	4621      	mov	r1, r4
 8029a22:	4630      	mov	r0, r6
 8029a24:	f7ff fef6 	bl	8029814 <_printf_common>
 8029a28:	3001      	adds	r0, #1
 8029a2a:	d14d      	bne.n	8029ac8 <_printf_i+0x1c8>
 8029a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8029a30:	b005      	add	sp, #20
 8029a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029a36:	4839      	ldr	r0, [pc, #228]	; (8029b1c <_printf_i+0x21c>)
 8029a38:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8029a3c:	6813      	ldr	r3, [r2, #0]
 8029a3e:	6821      	ldr	r1, [r4, #0]
 8029a40:	1d1d      	adds	r5, r3, #4
 8029a42:	681b      	ldr	r3, [r3, #0]
 8029a44:	6015      	str	r5, [r2, #0]
 8029a46:	060a      	lsls	r2, r1, #24
 8029a48:	d50b      	bpl.n	8029a62 <_printf_i+0x162>
 8029a4a:	07ca      	lsls	r2, r1, #31
 8029a4c:	bf44      	itt	mi
 8029a4e:	f041 0120 	orrmi.w	r1, r1, #32
 8029a52:	6021      	strmi	r1, [r4, #0]
 8029a54:	b91b      	cbnz	r3, 8029a5e <_printf_i+0x15e>
 8029a56:	6822      	ldr	r2, [r4, #0]
 8029a58:	f022 0220 	bic.w	r2, r2, #32
 8029a5c:	6022      	str	r2, [r4, #0]
 8029a5e:	2210      	movs	r2, #16
 8029a60:	e7b7      	b.n	80299d2 <_printf_i+0xd2>
 8029a62:	064d      	lsls	r5, r1, #25
 8029a64:	bf48      	it	mi
 8029a66:	b29b      	uxthmi	r3, r3
 8029a68:	e7ef      	b.n	8029a4a <_printf_i+0x14a>
 8029a6a:	4665      	mov	r5, ip
 8029a6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8029a70:	fb02 3311 	mls	r3, r2, r1, r3
 8029a74:	5cc3      	ldrb	r3, [r0, r3]
 8029a76:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8029a7a:	460b      	mov	r3, r1
 8029a7c:	2900      	cmp	r1, #0
 8029a7e:	d1f5      	bne.n	8029a6c <_printf_i+0x16c>
 8029a80:	e7b9      	b.n	80299f6 <_printf_i+0xf6>
 8029a82:	6813      	ldr	r3, [r2, #0]
 8029a84:	6825      	ldr	r5, [r4, #0]
 8029a86:	6961      	ldr	r1, [r4, #20]
 8029a88:	1d18      	adds	r0, r3, #4
 8029a8a:	6010      	str	r0, [r2, #0]
 8029a8c:	0628      	lsls	r0, r5, #24
 8029a8e:	681b      	ldr	r3, [r3, #0]
 8029a90:	d501      	bpl.n	8029a96 <_printf_i+0x196>
 8029a92:	6019      	str	r1, [r3, #0]
 8029a94:	e002      	b.n	8029a9c <_printf_i+0x19c>
 8029a96:	066a      	lsls	r2, r5, #25
 8029a98:	d5fb      	bpl.n	8029a92 <_printf_i+0x192>
 8029a9a:	8019      	strh	r1, [r3, #0]
 8029a9c:	2300      	movs	r3, #0
 8029a9e:	6123      	str	r3, [r4, #16]
 8029aa0:	4665      	mov	r5, ip
 8029aa2:	e7b9      	b.n	8029a18 <_printf_i+0x118>
 8029aa4:	6813      	ldr	r3, [r2, #0]
 8029aa6:	1d19      	adds	r1, r3, #4
 8029aa8:	6011      	str	r1, [r2, #0]
 8029aaa:	681d      	ldr	r5, [r3, #0]
 8029aac:	6862      	ldr	r2, [r4, #4]
 8029aae:	2100      	movs	r1, #0
 8029ab0:	4628      	mov	r0, r5
 8029ab2:	f7d6 fb9d 	bl	80001f0 <memchr>
 8029ab6:	b108      	cbz	r0, 8029abc <_printf_i+0x1bc>
 8029ab8:	1b40      	subs	r0, r0, r5
 8029aba:	6060      	str	r0, [r4, #4]
 8029abc:	6863      	ldr	r3, [r4, #4]
 8029abe:	6123      	str	r3, [r4, #16]
 8029ac0:	2300      	movs	r3, #0
 8029ac2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8029ac6:	e7a7      	b.n	8029a18 <_printf_i+0x118>
 8029ac8:	6923      	ldr	r3, [r4, #16]
 8029aca:	462a      	mov	r2, r5
 8029acc:	4639      	mov	r1, r7
 8029ace:	4630      	mov	r0, r6
 8029ad0:	47c0      	blx	r8
 8029ad2:	3001      	adds	r0, #1
 8029ad4:	d0aa      	beq.n	8029a2c <_printf_i+0x12c>
 8029ad6:	6823      	ldr	r3, [r4, #0]
 8029ad8:	079b      	lsls	r3, r3, #30
 8029ada:	d413      	bmi.n	8029b04 <_printf_i+0x204>
 8029adc:	68e0      	ldr	r0, [r4, #12]
 8029ade:	9b03      	ldr	r3, [sp, #12]
 8029ae0:	4298      	cmp	r0, r3
 8029ae2:	bfb8      	it	lt
 8029ae4:	4618      	movlt	r0, r3
 8029ae6:	e7a3      	b.n	8029a30 <_printf_i+0x130>
 8029ae8:	2301      	movs	r3, #1
 8029aea:	464a      	mov	r2, r9
 8029aec:	4639      	mov	r1, r7
 8029aee:	4630      	mov	r0, r6
 8029af0:	47c0      	blx	r8
 8029af2:	3001      	adds	r0, #1
 8029af4:	d09a      	beq.n	8029a2c <_printf_i+0x12c>
 8029af6:	3501      	adds	r5, #1
 8029af8:	68e3      	ldr	r3, [r4, #12]
 8029afa:	9a03      	ldr	r2, [sp, #12]
 8029afc:	1a9b      	subs	r3, r3, r2
 8029afe:	42ab      	cmp	r3, r5
 8029b00:	dcf2      	bgt.n	8029ae8 <_printf_i+0x1e8>
 8029b02:	e7eb      	b.n	8029adc <_printf_i+0x1dc>
 8029b04:	2500      	movs	r5, #0
 8029b06:	f104 0919 	add.w	r9, r4, #25
 8029b0a:	e7f5      	b.n	8029af8 <_printf_i+0x1f8>
 8029b0c:	2b00      	cmp	r3, #0
 8029b0e:	d1ac      	bne.n	8029a6a <_printf_i+0x16a>
 8029b10:	7803      	ldrb	r3, [r0, #0]
 8029b12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8029b16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8029b1a:	e76c      	b.n	80299f6 <_printf_i+0xf6>
 8029b1c:	0802ee63 	.word	0x0802ee63
 8029b20:	0802ee74 	.word	0x0802ee74

08029b24 <_scanf_float>:
 8029b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029b28:	469a      	mov	sl, r3
 8029b2a:	688b      	ldr	r3, [r1, #8]
 8029b2c:	4616      	mov	r6, r2
 8029b2e:	1e5a      	subs	r2, r3, #1
 8029b30:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8029b34:	b087      	sub	sp, #28
 8029b36:	bf83      	ittte	hi
 8029b38:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8029b3c:	189b      	addhi	r3, r3, r2
 8029b3e:	9301      	strhi	r3, [sp, #4]
 8029b40:	2300      	movls	r3, #0
 8029b42:	bf86      	itte	hi
 8029b44:	f240 135d 	movwhi	r3, #349	; 0x15d
 8029b48:	608b      	strhi	r3, [r1, #8]
 8029b4a:	9301      	strls	r3, [sp, #4]
 8029b4c:	680b      	ldr	r3, [r1, #0]
 8029b4e:	4688      	mov	r8, r1
 8029b50:	f04f 0b00 	mov.w	fp, #0
 8029b54:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8029b58:	f848 3b1c 	str.w	r3, [r8], #28
 8029b5c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8029b60:	4607      	mov	r7, r0
 8029b62:	460c      	mov	r4, r1
 8029b64:	4645      	mov	r5, r8
 8029b66:	465a      	mov	r2, fp
 8029b68:	46d9      	mov	r9, fp
 8029b6a:	f8cd b008 	str.w	fp, [sp, #8]
 8029b6e:	68a1      	ldr	r1, [r4, #8]
 8029b70:	b181      	cbz	r1, 8029b94 <_scanf_float+0x70>
 8029b72:	6833      	ldr	r3, [r6, #0]
 8029b74:	781b      	ldrb	r3, [r3, #0]
 8029b76:	2b49      	cmp	r3, #73	; 0x49
 8029b78:	d071      	beq.n	8029c5e <_scanf_float+0x13a>
 8029b7a:	d84d      	bhi.n	8029c18 <_scanf_float+0xf4>
 8029b7c:	2b39      	cmp	r3, #57	; 0x39
 8029b7e:	d840      	bhi.n	8029c02 <_scanf_float+0xde>
 8029b80:	2b31      	cmp	r3, #49	; 0x31
 8029b82:	f080 8088 	bcs.w	8029c96 <_scanf_float+0x172>
 8029b86:	2b2d      	cmp	r3, #45	; 0x2d
 8029b88:	f000 8090 	beq.w	8029cac <_scanf_float+0x188>
 8029b8c:	d815      	bhi.n	8029bba <_scanf_float+0x96>
 8029b8e:	2b2b      	cmp	r3, #43	; 0x2b
 8029b90:	f000 808c 	beq.w	8029cac <_scanf_float+0x188>
 8029b94:	f1b9 0f00 	cmp.w	r9, #0
 8029b98:	d003      	beq.n	8029ba2 <_scanf_float+0x7e>
 8029b9a:	6823      	ldr	r3, [r4, #0]
 8029b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029ba0:	6023      	str	r3, [r4, #0]
 8029ba2:	3a01      	subs	r2, #1
 8029ba4:	2a01      	cmp	r2, #1
 8029ba6:	f200 80ea 	bhi.w	8029d7e <_scanf_float+0x25a>
 8029baa:	4545      	cmp	r5, r8
 8029bac:	f200 80dc 	bhi.w	8029d68 <_scanf_float+0x244>
 8029bb0:	2601      	movs	r6, #1
 8029bb2:	4630      	mov	r0, r6
 8029bb4:	b007      	add	sp, #28
 8029bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029bba:	2b2e      	cmp	r3, #46	; 0x2e
 8029bbc:	f000 809f 	beq.w	8029cfe <_scanf_float+0x1da>
 8029bc0:	2b30      	cmp	r3, #48	; 0x30
 8029bc2:	d1e7      	bne.n	8029b94 <_scanf_float+0x70>
 8029bc4:	6820      	ldr	r0, [r4, #0]
 8029bc6:	f410 7f80 	tst.w	r0, #256	; 0x100
 8029bca:	d064      	beq.n	8029c96 <_scanf_float+0x172>
 8029bcc:	9b01      	ldr	r3, [sp, #4]
 8029bce:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8029bd2:	6020      	str	r0, [r4, #0]
 8029bd4:	f109 0901 	add.w	r9, r9, #1
 8029bd8:	b11b      	cbz	r3, 8029be2 <_scanf_float+0xbe>
 8029bda:	3b01      	subs	r3, #1
 8029bdc:	3101      	adds	r1, #1
 8029bde:	9301      	str	r3, [sp, #4]
 8029be0:	60a1      	str	r1, [r4, #8]
 8029be2:	68a3      	ldr	r3, [r4, #8]
 8029be4:	3b01      	subs	r3, #1
 8029be6:	60a3      	str	r3, [r4, #8]
 8029be8:	6923      	ldr	r3, [r4, #16]
 8029bea:	3301      	adds	r3, #1
 8029bec:	6123      	str	r3, [r4, #16]
 8029bee:	6873      	ldr	r3, [r6, #4]
 8029bf0:	3b01      	subs	r3, #1
 8029bf2:	2b00      	cmp	r3, #0
 8029bf4:	6073      	str	r3, [r6, #4]
 8029bf6:	f340 80ac 	ble.w	8029d52 <_scanf_float+0x22e>
 8029bfa:	6833      	ldr	r3, [r6, #0]
 8029bfc:	3301      	adds	r3, #1
 8029bfe:	6033      	str	r3, [r6, #0]
 8029c00:	e7b5      	b.n	8029b6e <_scanf_float+0x4a>
 8029c02:	2b45      	cmp	r3, #69	; 0x45
 8029c04:	f000 8085 	beq.w	8029d12 <_scanf_float+0x1ee>
 8029c08:	2b46      	cmp	r3, #70	; 0x46
 8029c0a:	d06a      	beq.n	8029ce2 <_scanf_float+0x1be>
 8029c0c:	2b41      	cmp	r3, #65	; 0x41
 8029c0e:	d1c1      	bne.n	8029b94 <_scanf_float+0x70>
 8029c10:	2a01      	cmp	r2, #1
 8029c12:	d1bf      	bne.n	8029b94 <_scanf_float+0x70>
 8029c14:	2202      	movs	r2, #2
 8029c16:	e046      	b.n	8029ca6 <_scanf_float+0x182>
 8029c18:	2b65      	cmp	r3, #101	; 0x65
 8029c1a:	d07a      	beq.n	8029d12 <_scanf_float+0x1ee>
 8029c1c:	d818      	bhi.n	8029c50 <_scanf_float+0x12c>
 8029c1e:	2b54      	cmp	r3, #84	; 0x54
 8029c20:	d066      	beq.n	8029cf0 <_scanf_float+0x1cc>
 8029c22:	d811      	bhi.n	8029c48 <_scanf_float+0x124>
 8029c24:	2b4e      	cmp	r3, #78	; 0x4e
 8029c26:	d1b5      	bne.n	8029b94 <_scanf_float+0x70>
 8029c28:	2a00      	cmp	r2, #0
 8029c2a:	d146      	bne.n	8029cba <_scanf_float+0x196>
 8029c2c:	f1b9 0f00 	cmp.w	r9, #0
 8029c30:	d145      	bne.n	8029cbe <_scanf_float+0x19a>
 8029c32:	6821      	ldr	r1, [r4, #0]
 8029c34:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8029c38:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8029c3c:	d13f      	bne.n	8029cbe <_scanf_float+0x19a>
 8029c3e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8029c42:	6021      	str	r1, [r4, #0]
 8029c44:	2201      	movs	r2, #1
 8029c46:	e02e      	b.n	8029ca6 <_scanf_float+0x182>
 8029c48:	2b59      	cmp	r3, #89	; 0x59
 8029c4a:	d01e      	beq.n	8029c8a <_scanf_float+0x166>
 8029c4c:	2b61      	cmp	r3, #97	; 0x61
 8029c4e:	e7de      	b.n	8029c0e <_scanf_float+0xea>
 8029c50:	2b6e      	cmp	r3, #110	; 0x6e
 8029c52:	d0e9      	beq.n	8029c28 <_scanf_float+0x104>
 8029c54:	d815      	bhi.n	8029c82 <_scanf_float+0x15e>
 8029c56:	2b66      	cmp	r3, #102	; 0x66
 8029c58:	d043      	beq.n	8029ce2 <_scanf_float+0x1be>
 8029c5a:	2b69      	cmp	r3, #105	; 0x69
 8029c5c:	d19a      	bne.n	8029b94 <_scanf_float+0x70>
 8029c5e:	f1bb 0f00 	cmp.w	fp, #0
 8029c62:	d138      	bne.n	8029cd6 <_scanf_float+0x1b2>
 8029c64:	f1b9 0f00 	cmp.w	r9, #0
 8029c68:	d197      	bne.n	8029b9a <_scanf_float+0x76>
 8029c6a:	6821      	ldr	r1, [r4, #0]
 8029c6c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8029c70:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8029c74:	d195      	bne.n	8029ba2 <_scanf_float+0x7e>
 8029c76:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8029c7a:	6021      	str	r1, [r4, #0]
 8029c7c:	f04f 0b01 	mov.w	fp, #1
 8029c80:	e011      	b.n	8029ca6 <_scanf_float+0x182>
 8029c82:	2b74      	cmp	r3, #116	; 0x74
 8029c84:	d034      	beq.n	8029cf0 <_scanf_float+0x1cc>
 8029c86:	2b79      	cmp	r3, #121	; 0x79
 8029c88:	d184      	bne.n	8029b94 <_scanf_float+0x70>
 8029c8a:	f1bb 0f07 	cmp.w	fp, #7
 8029c8e:	d181      	bne.n	8029b94 <_scanf_float+0x70>
 8029c90:	f04f 0b08 	mov.w	fp, #8
 8029c94:	e007      	b.n	8029ca6 <_scanf_float+0x182>
 8029c96:	eb12 0f0b 	cmn.w	r2, fp
 8029c9a:	f47f af7b 	bne.w	8029b94 <_scanf_float+0x70>
 8029c9e:	6821      	ldr	r1, [r4, #0]
 8029ca0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8029ca4:	6021      	str	r1, [r4, #0]
 8029ca6:	702b      	strb	r3, [r5, #0]
 8029ca8:	3501      	adds	r5, #1
 8029caa:	e79a      	b.n	8029be2 <_scanf_float+0xbe>
 8029cac:	6821      	ldr	r1, [r4, #0]
 8029cae:	0608      	lsls	r0, r1, #24
 8029cb0:	f57f af70 	bpl.w	8029b94 <_scanf_float+0x70>
 8029cb4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8029cb8:	e7f4      	b.n	8029ca4 <_scanf_float+0x180>
 8029cba:	2a02      	cmp	r2, #2
 8029cbc:	d047      	beq.n	8029d4e <_scanf_float+0x22a>
 8029cbe:	f1bb 0f01 	cmp.w	fp, #1
 8029cc2:	d003      	beq.n	8029ccc <_scanf_float+0x1a8>
 8029cc4:	f1bb 0f04 	cmp.w	fp, #4
 8029cc8:	f47f af64 	bne.w	8029b94 <_scanf_float+0x70>
 8029ccc:	f10b 0b01 	add.w	fp, fp, #1
 8029cd0:	fa5f fb8b 	uxtb.w	fp, fp
 8029cd4:	e7e7      	b.n	8029ca6 <_scanf_float+0x182>
 8029cd6:	f1bb 0f03 	cmp.w	fp, #3
 8029cda:	d0f7      	beq.n	8029ccc <_scanf_float+0x1a8>
 8029cdc:	f1bb 0f05 	cmp.w	fp, #5
 8029ce0:	e7f2      	b.n	8029cc8 <_scanf_float+0x1a4>
 8029ce2:	f1bb 0f02 	cmp.w	fp, #2
 8029ce6:	f47f af55 	bne.w	8029b94 <_scanf_float+0x70>
 8029cea:	f04f 0b03 	mov.w	fp, #3
 8029cee:	e7da      	b.n	8029ca6 <_scanf_float+0x182>
 8029cf0:	f1bb 0f06 	cmp.w	fp, #6
 8029cf4:	f47f af4e 	bne.w	8029b94 <_scanf_float+0x70>
 8029cf8:	f04f 0b07 	mov.w	fp, #7
 8029cfc:	e7d3      	b.n	8029ca6 <_scanf_float+0x182>
 8029cfe:	6821      	ldr	r1, [r4, #0]
 8029d00:	0588      	lsls	r0, r1, #22
 8029d02:	f57f af47 	bpl.w	8029b94 <_scanf_float+0x70>
 8029d06:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8029d0a:	6021      	str	r1, [r4, #0]
 8029d0c:	f8cd 9008 	str.w	r9, [sp, #8]
 8029d10:	e7c9      	b.n	8029ca6 <_scanf_float+0x182>
 8029d12:	6821      	ldr	r1, [r4, #0]
 8029d14:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8029d18:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8029d1c:	d006      	beq.n	8029d2c <_scanf_float+0x208>
 8029d1e:	0548      	lsls	r0, r1, #21
 8029d20:	f57f af38 	bpl.w	8029b94 <_scanf_float+0x70>
 8029d24:	f1b9 0f00 	cmp.w	r9, #0
 8029d28:	f43f af3b 	beq.w	8029ba2 <_scanf_float+0x7e>
 8029d2c:	0588      	lsls	r0, r1, #22
 8029d2e:	bf58      	it	pl
 8029d30:	9802      	ldrpl	r0, [sp, #8]
 8029d32:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8029d36:	bf58      	it	pl
 8029d38:	eba9 0000 	subpl.w	r0, r9, r0
 8029d3c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8029d40:	bf58      	it	pl
 8029d42:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8029d46:	6021      	str	r1, [r4, #0]
 8029d48:	f04f 0900 	mov.w	r9, #0
 8029d4c:	e7ab      	b.n	8029ca6 <_scanf_float+0x182>
 8029d4e:	2203      	movs	r2, #3
 8029d50:	e7a9      	b.n	8029ca6 <_scanf_float+0x182>
 8029d52:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8029d56:	9205      	str	r2, [sp, #20]
 8029d58:	4631      	mov	r1, r6
 8029d5a:	4638      	mov	r0, r7
 8029d5c:	4798      	blx	r3
 8029d5e:	9a05      	ldr	r2, [sp, #20]
 8029d60:	2800      	cmp	r0, #0
 8029d62:	f43f af04 	beq.w	8029b6e <_scanf_float+0x4a>
 8029d66:	e715      	b.n	8029b94 <_scanf_float+0x70>
 8029d68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8029d6c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8029d70:	4632      	mov	r2, r6
 8029d72:	4638      	mov	r0, r7
 8029d74:	4798      	blx	r3
 8029d76:	6923      	ldr	r3, [r4, #16]
 8029d78:	3b01      	subs	r3, #1
 8029d7a:	6123      	str	r3, [r4, #16]
 8029d7c:	e715      	b.n	8029baa <_scanf_float+0x86>
 8029d7e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8029d82:	2b06      	cmp	r3, #6
 8029d84:	d80a      	bhi.n	8029d9c <_scanf_float+0x278>
 8029d86:	f1bb 0f02 	cmp.w	fp, #2
 8029d8a:	d968      	bls.n	8029e5e <_scanf_float+0x33a>
 8029d8c:	f1ab 0b03 	sub.w	fp, fp, #3
 8029d90:	fa5f fb8b 	uxtb.w	fp, fp
 8029d94:	eba5 0b0b 	sub.w	fp, r5, fp
 8029d98:	455d      	cmp	r5, fp
 8029d9a:	d14b      	bne.n	8029e34 <_scanf_float+0x310>
 8029d9c:	6823      	ldr	r3, [r4, #0]
 8029d9e:	05da      	lsls	r2, r3, #23
 8029da0:	d51f      	bpl.n	8029de2 <_scanf_float+0x2be>
 8029da2:	055b      	lsls	r3, r3, #21
 8029da4:	d468      	bmi.n	8029e78 <_scanf_float+0x354>
 8029da6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8029daa:	6923      	ldr	r3, [r4, #16]
 8029dac:	2965      	cmp	r1, #101	; 0x65
 8029dae:	f103 33ff 	add.w	r3, r3, #4294967295
 8029db2:	f105 3bff 	add.w	fp, r5, #4294967295
 8029db6:	6123      	str	r3, [r4, #16]
 8029db8:	d00d      	beq.n	8029dd6 <_scanf_float+0x2b2>
 8029dba:	2945      	cmp	r1, #69	; 0x45
 8029dbc:	d00b      	beq.n	8029dd6 <_scanf_float+0x2b2>
 8029dbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8029dc2:	4632      	mov	r2, r6
 8029dc4:	4638      	mov	r0, r7
 8029dc6:	4798      	blx	r3
 8029dc8:	6923      	ldr	r3, [r4, #16]
 8029dca:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8029dce:	3b01      	subs	r3, #1
 8029dd0:	f1a5 0b02 	sub.w	fp, r5, #2
 8029dd4:	6123      	str	r3, [r4, #16]
 8029dd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8029dda:	4632      	mov	r2, r6
 8029ddc:	4638      	mov	r0, r7
 8029dde:	4798      	blx	r3
 8029de0:	465d      	mov	r5, fp
 8029de2:	6826      	ldr	r6, [r4, #0]
 8029de4:	f016 0610 	ands.w	r6, r6, #16
 8029de8:	d17a      	bne.n	8029ee0 <_scanf_float+0x3bc>
 8029dea:	702e      	strb	r6, [r5, #0]
 8029dec:	6823      	ldr	r3, [r4, #0]
 8029dee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8029df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029df6:	d142      	bne.n	8029e7e <_scanf_float+0x35a>
 8029df8:	9b02      	ldr	r3, [sp, #8]
 8029dfa:	eba9 0303 	sub.w	r3, r9, r3
 8029dfe:	425a      	negs	r2, r3
 8029e00:	2b00      	cmp	r3, #0
 8029e02:	d149      	bne.n	8029e98 <_scanf_float+0x374>
 8029e04:	2200      	movs	r2, #0
 8029e06:	4641      	mov	r1, r8
 8029e08:	4638      	mov	r0, r7
 8029e0a:	f000 ffd5 	bl	802adb8 <_strtod_r>
 8029e0e:	6825      	ldr	r5, [r4, #0]
 8029e10:	f8da 3000 	ldr.w	r3, [sl]
 8029e14:	f015 0f02 	tst.w	r5, #2
 8029e18:	f103 0204 	add.w	r2, r3, #4
 8029e1c:	ec59 8b10 	vmov	r8, r9, d0
 8029e20:	f8ca 2000 	str.w	r2, [sl]
 8029e24:	d043      	beq.n	8029eae <_scanf_float+0x38a>
 8029e26:	681b      	ldr	r3, [r3, #0]
 8029e28:	e9c3 8900 	strd	r8, r9, [r3]
 8029e2c:	68e3      	ldr	r3, [r4, #12]
 8029e2e:	3301      	adds	r3, #1
 8029e30:	60e3      	str	r3, [r4, #12]
 8029e32:	e6be      	b.n	8029bb2 <_scanf_float+0x8e>
 8029e34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8029e38:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8029e3c:	4632      	mov	r2, r6
 8029e3e:	4638      	mov	r0, r7
 8029e40:	4798      	blx	r3
 8029e42:	6923      	ldr	r3, [r4, #16]
 8029e44:	3b01      	subs	r3, #1
 8029e46:	6123      	str	r3, [r4, #16]
 8029e48:	e7a6      	b.n	8029d98 <_scanf_float+0x274>
 8029e4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8029e4e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8029e52:	4632      	mov	r2, r6
 8029e54:	4638      	mov	r0, r7
 8029e56:	4798      	blx	r3
 8029e58:	6923      	ldr	r3, [r4, #16]
 8029e5a:	3b01      	subs	r3, #1
 8029e5c:	6123      	str	r3, [r4, #16]
 8029e5e:	4545      	cmp	r5, r8
 8029e60:	d8f3      	bhi.n	8029e4a <_scanf_float+0x326>
 8029e62:	e6a5      	b.n	8029bb0 <_scanf_float+0x8c>
 8029e64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8029e68:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8029e6c:	4632      	mov	r2, r6
 8029e6e:	4638      	mov	r0, r7
 8029e70:	4798      	blx	r3
 8029e72:	6923      	ldr	r3, [r4, #16]
 8029e74:	3b01      	subs	r3, #1
 8029e76:	6123      	str	r3, [r4, #16]
 8029e78:	4545      	cmp	r5, r8
 8029e7a:	d8f3      	bhi.n	8029e64 <_scanf_float+0x340>
 8029e7c:	e698      	b.n	8029bb0 <_scanf_float+0x8c>
 8029e7e:	9b03      	ldr	r3, [sp, #12]
 8029e80:	2b00      	cmp	r3, #0
 8029e82:	d0bf      	beq.n	8029e04 <_scanf_float+0x2e0>
 8029e84:	9904      	ldr	r1, [sp, #16]
 8029e86:	230a      	movs	r3, #10
 8029e88:	4632      	mov	r2, r6
 8029e8a:	3101      	adds	r1, #1
 8029e8c:	4638      	mov	r0, r7
 8029e8e:	f001 f81f 	bl	802aed0 <_strtol_r>
 8029e92:	9b03      	ldr	r3, [sp, #12]
 8029e94:	9d04      	ldr	r5, [sp, #16]
 8029e96:	1ac2      	subs	r2, r0, r3
 8029e98:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8029e9c:	429d      	cmp	r5, r3
 8029e9e:	bf28      	it	cs
 8029ea0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8029ea4:	490f      	ldr	r1, [pc, #60]	; (8029ee4 <_scanf_float+0x3c0>)
 8029ea6:	4628      	mov	r0, r5
 8029ea8:	f000 f94e 	bl	802a148 <siprintf>
 8029eac:	e7aa      	b.n	8029e04 <_scanf_float+0x2e0>
 8029eae:	f015 0504 	ands.w	r5, r5, #4
 8029eb2:	d1b8      	bne.n	8029e26 <_scanf_float+0x302>
 8029eb4:	681f      	ldr	r7, [r3, #0]
 8029eb6:	ee10 2a10 	vmov	r2, s0
 8029eba:	464b      	mov	r3, r9
 8029ebc:	ee10 0a10 	vmov	r0, s0
 8029ec0:	4649      	mov	r1, r9
 8029ec2:	f7d6 fe3b 	bl	8000b3c <__aeabi_dcmpun>
 8029ec6:	b128      	cbz	r0, 8029ed4 <_scanf_float+0x3b0>
 8029ec8:	4628      	mov	r0, r5
 8029eca:	f000 f937 	bl	802a13c <nanf>
 8029ece:	ed87 0a00 	vstr	s0, [r7]
 8029ed2:	e7ab      	b.n	8029e2c <_scanf_float+0x308>
 8029ed4:	4640      	mov	r0, r8
 8029ed6:	4649      	mov	r1, r9
 8029ed8:	f7d6 fe8e 	bl	8000bf8 <__aeabi_d2f>
 8029edc:	6038      	str	r0, [r7, #0]
 8029ede:	e7a5      	b.n	8029e2c <_scanf_float+0x308>
 8029ee0:	2600      	movs	r6, #0
 8029ee2:	e666      	b.n	8029bb2 <_scanf_float+0x8e>
 8029ee4:	0802ee85 	.word	0x0802ee85

08029ee8 <iprintf>:
 8029ee8:	b40f      	push	{r0, r1, r2, r3}
 8029eea:	4b0a      	ldr	r3, [pc, #40]	; (8029f14 <iprintf+0x2c>)
 8029eec:	b513      	push	{r0, r1, r4, lr}
 8029eee:	681c      	ldr	r4, [r3, #0]
 8029ef0:	b124      	cbz	r4, 8029efc <iprintf+0x14>
 8029ef2:	69a3      	ldr	r3, [r4, #24]
 8029ef4:	b913      	cbnz	r3, 8029efc <iprintf+0x14>
 8029ef6:	4620      	mov	r0, r4
 8029ef8:	f001 fffa 	bl	802bef0 <__sinit>
 8029efc:	ab05      	add	r3, sp, #20
 8029efe:	9a04      	ldr	r2, [sp, #16]
 8029f00:	68a1      	ldr	r1, [r4, #8]
 8029f02:	9301      	str	r3, [sp, #4]
 8029f04:	4620      	mov	r0, r4
 8029f06:	f7ff f89b 	bl	8029040 <_vfiprintf_r>
 8029f0a:	b002      	add	sp, #8
 8029f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029f10:	b004      	add	sp, #16
 8029f12:	4770      	bx	lr
 8029f14:	200006ac 	.word	0x200006ac

08029f18 <_puts_r>:
 8029f18:	b570      	push	{r4, r5, r6, lr}
 8029f1a:	460e      	mov	r6, r1
 8029f1c:	4605      	mov	r5, r0
 8029f1e:	b118      	cbz	r0, 8029f28 <_puts_r+0x10>
 8029f20:	6983      	ldr	r3, [r0, #24]
 8029f22:	b90b      	cbnz	r3, 8029f28 <_puts_r+0x10>
 8029f24:	f001 ffe4 	bl	802bef0 <__sinit>
 8029f28:	69ab      	ldr	r3, [r5, #24]
 8029f2a:	68ac      	ldr	r4, [r5, #8]
 8029f2c:	b913      	cbnz	r3, 8029f34 <_puts_r+0x1c>
 8029f2e:	4628      	mov	r0, r5
 8029f30:	f001 ffde 	bl	802bef0 <__sinit>
 8029f34:	4b23      	ldr	r3, [pc, #140]	; (8029fc4 <_puts_r+0xac>)
 8029f36:	429c      	cmp	r4, r3
 8029f38:	d117      	bne.n	8029f6a <_puts_r+0x52>
 8029f3a:	686c      	ldr	r4, [r5, #4]
 8029f3c:	89a3      	ldrh	r3, [r4, #12]
 8029f3e:	071b      	lsls	r3, r3, #28
 8029f40:	d51d      	bpl.n	8029f7e <_puts_r+0x66>
 8029f42:	6923      	ldr	r3, [r4, #16]
 8029f44:	b1db      	cbz	r3, 8029f7e <_puts_r+0x66>
 8029f46:	3e01      	subs	r6, #1
 8029f48:	68a3      	ldr	r3, [r4, #8]
 8029f4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8029f4e:	3b01      	subs	r3, #1
 8029f50:	60a3      	str	r3, [r4, #8]
 8029f52:	b9e9      	cbnz	r1, 8029f90 <_puts_r+0x78>
 8029f54:	2b00      	cmp	r3, #0
 8029f56:	da2e      	bge.n	8029fb6 <_puts_r+0x9e>
 8029f58:	4622      	mov	r2, r4
 8029f5a:	210a      	movs	r1, #10
 8029f5c:	4628      	mov	r0, r5
 8029f5e:	f000 ffc9 	bl	802aef4 <__swbuf_r>
 8029f62:	3001      	adds	r0, #1
 8029f64:	d011      	beq.n	8029f8a <_puts_r+0x72>
 8029f66:	200a      	movs	r0, #10
 8029f68:	e011      	b.n	8029f8e <_puts_r+0x76>
 8029f6a:	4b17      	ldr	r3, [pc, #92]	; (8029fc8 <_puts_r+0xb0>)
 8029f6c:	429c      	cmp	r4, r3
 8029f6e:	d101      	bne.n	8029f74 <_puts_r+0x5c>
 8029f70:	68ac      	ldr	r4, [r5, #8]
 8029f72:	e7e3      	b.n	8029f3c <_puts_r+0x24>
 8029f74:	4b15      	ldr	r3, [pc, #84]	; (8029fcc <_puts_r+0xb4>)
 8029f76:	429c      	cmp	r4, r3
 8029f78:	bf08      	it	eq
 8029f7a:	68ec      	ldreq	r4, [r5, #12]
 8029f7c:	e7de      	b.n	8029f3c <_puts_r+0x24>
 8029f7e:	4621      	mov	r1, r4
 8029f80:	4628      	mov	r0, r5
 8029f82:	f001 f809 	bl	802af98 <__swsetup_r>
 8029f86:	2800      	cmp	r0, #0
 8029f88:	d0dd      	beq.n	8029f46 <_puts_r+0x2e>
 8029f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8029f8e:	bd70      	pop	{r4, r5, r6, pc}
 8029f90:	2b00      	cmp	r3, #0
 8029f92:	da04      	bge.n	8029f9e <_puts_r+0x86>
 8029f94:	69a2      	ldr	r2, [r4, #24]
 8029f96:	429a      	cmp	r2, r3
 8029f98:	dc06      	bgt.n	8029fa8 <_puts_r+0x90>
 8029f9a:	290a      	cmp	r1, #10
 8029f9c:	d004      	beq.n	8029fa8 <_puts_r+0x90>
 8029f9e:	6823      	ldr	r3, [r4, #0]
 8029fa0:	1c5a      	adds	r2, r3, #1
 8029fa2:	6022      	str	r2, [r4, #0]
 8029fa4:	7019      	strb	r1, [r3, #0]
 8029fa6:	e7cf      	b.n	8029f48 <_puts_r+0x30>
 8029fa8:	4622      	mov	r2, r4
 8029faa:	4628      	mov	r0, r5
 8029fac:	f000 ffa2 	bl	802aef4 <__swbuf_r>
 8029fb0:	3001      	adds	r0, #1
 8029fb2:	d1c9      	bne.n	8029f48 <_puts_r+0x30>
 8029fb4:	e7e9      	b.n	8029f8a <_puts_r+0x72>
 8029fb6:	6823      	ldr	r3, [r4, #0]
 8029fb8:	200a      	movs	r0, #10
 8029fba:	1c5a      	adds	r2, r3, #1
 8029fbc:	6022      	str	r2, [r4, #0]
 8029fbe:	7018      	strb	r0, [r3, #0]
 8029fc0:	e7e5      	b.n	8029f8e <_puts_r+0x76>
 8029fc2:	bf00      	nop
 8029fc4:	0802ef10 	.word	0x0802ef10
 8029fc8:	0802ef30 	.word	0x0802ef30
 8029fcc:	0802eef0 	.word	0x0802eef0

08029fd0 <puts>:
 8029fd0:	4b02      	ldr	r3, [pc, #8]	; (8029fdc <puts+0xc>)
 8029fd2:	4601      	mov	r1, r0
 8029fd4:	6818      	ldr	r0, [r3, #0]
 8029fd6:	f7ff bf9f 	b.w	8029f18 <_puts_r>
 8029fda:	bf00      	nop
 8029fdc:	200006ac 	.word	0x200006ac

08029fe0 <setvbuf>:
 8029fe0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8029fe4:	461d      	mov	r5, r3
 8029fe6:	4b51      	ldr	r3, [pc, #324]	; (802a12c <setvbuf+0x14c>)
 8029fe8:	681e      	ldr	r6, [r3, #0]
 8029fea:	4604      	mov	r4, r0
 8029fec:	460f      	mov	r7, r1
 8029fee:	4690      	mov	r8, r2
 8029ff0:	b126      	cbz	r6, 8029ffc <setvbuf+0x1c>
 8029ff2:	69b3      	ldr	r3, [r6, #24]
 8029ff4:	b913      	cbnz	r3, 8029ffc <setvbuf+0x1c>
 8029ff6:	4630      	mov	r0, r6
 8029ff8:	f001 ff7a 	bl	802bef0 <__sinit>
 8029ffc:	4b4c      	ldr	r3, [pc, #304]	; (802a130 <setvbuf+0x150>)
 8029ffe:	429c      	cmp	r4, r3
 802a000:	d152      	bne.n	802a0a8 <setvbuf+0xc8>
 802a002:	6874      	ldr	r4, [r6, #4]
 802a004:	f1b8 0f02 	cmp.w	r8, #2
 802a008:	d006      	beq.n	802a018 <setvbuf+0x38>
 802a00a:	f1b8 0f01 	cmp.w	r8, #1
 802a00e:	f200 8089 	bhi.w	802a124 <setvbuf+0x144>
 802a012:	2d00      	cmp	r5, #0
 802a014:	f2c0 8086 	blt.w	802a124 <setvbuf+0x144>
 802a018:	4621      	mov	r1, r4
 802a01a:	4630      	mov	r0, r6
 802a01c:	f001 fefe 	bl	802be1c <_fflush_r>
 802a020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a022:	b141      	cbz	r1, 802a036 <setvbuf+0x56>
 802a024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a028:	4299      	cmp	r1, r3
 802a02a:	d002      	beq.n	802a032 <setvbuf+0x52>
 802a02c:	4630      	mov	r0, r6
 802a02e:	f002 ffc7 	bl	802cfc0 <_free_r>
 802a032:	2300      	movs	r3, #0
 802a034:	6363      	str	r3, [r4, #52]	; 0x34
 802a036:	2300      	movs	r3, #0
 802a038:	61a3      	str	r3, [r4, #24]
 802a03a:	6063      	str	r3, [r4, #4]
 802a03c:	89a3      	ldrh	r3, [r4, #12]
 802a03e:	061b      	lsls	r3, r3, #24
 802a040:	d503      	bpl.n	802a04a <setvbuf+0x6a>
 802a042:	6921      	ldr	r1, [r4, #16]
 802a044:	4630      	mov	r0, r6
 802a046:	f002 ffbb 	bl	802cfc0 <_free_r>
 802a04a:	89a3      	ldrh	r3, [r4, #12]
 802a04c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 802a050:	f023 0303 	bic.w	r3, r3, #3
 802a054:	f1b8 0f02 	cmp.w	r8, #2
 802a058:	81a3      	strh	r3, [r4, #12]
 802a05a:	d05d      	beq.n	802a118 <setvbuf+0x138>
 802a05c:	ab01      	add	r3, sp, #4
 802a05e:	466a      	mov	r2, sp
 802a060:	4621      	mov	r1, r4
 802a062:	4630      	mov	r0, r6
 802a064:	f002 fb08 	bl	802c678 <__swhatbuf_r>
 802a068:	89a3      	ldrh	r3, [r4, #12]
 802a06a:	4318      	orrs	r0, r3
 802a06c:	81a0      	strh	r0, [r4, #12]
 802a06e:	bb2d      	cbnz	r5, 802a0bc <setvbuf+0xdc>
 802a070:	9d00      	ldr	r5, [sp, #0]
 802a072:	4628      	mov	r0, r5
 802a074:	f002 fb64 	bl	802c740 <malloc>
 802a078:	4607      	mov	r7, r0
 802a07a:	2800      	cmp	r0, #0
 802a07c:	d14e      	bne.n	802a11c <setvbuf+0x13c>
 802a07e:	f8dd 9000 	ldr.w	r9, [sp]
 802a082:	45a9      	cmp	r9, r5
 802a084:	d13c      	bne.n	802a100 <setvbuf+0x120>
 802a086:	f04f 30ff 	mov.w	r0, #4294967295
 802a08a:	89a3      	ldrh	r3, [r4, #12]
 802a08c:	f043 0302 	orr.w	r3, r3, #2
 802a090:	81a3      	strh	r3, [r4, #12]
 802a092:	2300      	movs	r3, #0
 802a094:	60a3      	str	r3, [r4, #8]
 802a096:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802a09a:	6023      	str	r3, [r4, #0]
 802a09c:	6123      	str	r3, [r4, #16]
 802a09e:	2301      	movs	r3, #1
 802a0a0:	6163      	str	r3, [r4, #20]
 802a0a2:	b003      	add	sp, #12
 802a0a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802a0a8:	4b22      	ldr	r3, [pc, #136]	; (802a134 <setvbuf+0x154>)
 802a0aa:	429c      	cmp	r4, r3
 802a0ac:	d101      	bne.n	802a0b2 <setvbuf+0xd2>
 802a0ae:	68b4      	ldr	r4, [r6, #8]
 802a0b0:	e7a8      	b.n	802a004 <setvbuf+0x24>
 802a0b2:	4b21      	ldr	r3, [pc, #132]	; (802a138 <setvbuf+0x158>)
 802a0b4:	429c      	cmp	r4, r3
 802a0b6:	bf08      	it	eq
 802a0b8:	68f4      	ldreq	r4, [r6, #12]
 802a0ba:	e7a3      	b.n	802a004 <setvbuf+0x24>
 802a0bc:	2f00      	cmp	r7, #0
 802a0be:	d0d8      	beq.n	802a072 <setvbuf+0x92>
 802a0c0:	69b3      	ldr	r3, [r6, #24]
 802a0c2:	b913      	cbnz	r3, 802a0ca <setvbuf+0xea>
 802a0c4:	4630      	mov	r0, r6
 802a0c6:	f001 ff13 	bl	802bef0 <__sinit>
 802a0ca:	f1b8 0f01 	cmp.w	r8, #1
 802a0ce:	bf08      	it	eq
 802a0d0:	89a3      	ldrheq	r3, [r4, #12]
 802a0d2:	6027      	str	r7, [r4, #0]
 802a0d4:	bf04      	itt	eq
 802a0d6:	f043 0301 	orreq.w	r3, r3, #1
 802a0da:	81a3      	strheq	r3, [r4, #12]
 802a0dc:	89a3      	ldrh	r3, [r4, #12]
 802a0de:	f013 0008 	ands.w	r0, r3, #8
 802a0e2:	e9c4 7504 	strd	r7, r5, [r4, #16]
 802a0e6:	d01b      	beq.n	802a120 <setvbuf+0x140>
 802a0e8:	f013 0001 	ands.w	r0, r3, #1
 802a0ec:	bf18      	it	ne
 802a0ee:	426d      	negne	r5, r5
 802a0f0:	f04f 0300 	mov.w	r3, #0
 802a0f4:	bf1d      	ittte	ne
 802a0f6:	60a3      	strne	r3, [r4, #8]
 802a0f8:	61a5      	strne	r5, [r4, #24]
 802a0fa:	4618      	movne	r0, r3
 802a0fc:	60a5      	streq	r5, [r4, #8]
 802a0fe:	e7d0      	b.n	802a0a2 <setvbuf+0xc2>
 802a100:	4648      	mov	r0, r9
 802a102:	f002 fb1d 	bl	802c740 <malloc>
 802a106:	4607      	mov	r7, r0
 802a108:	2800      	cmp	r0, #0
 802a10a:	d0bc      	beq.n	802a086 <setvbuf+0xa6>
 802a10c:	89a3      	ldrh	r3, [r4, #12]
 802a10e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a112:	81a3      	strh	r3, [r4, #12]
 802a114:	464d      	mov	r5, r9
 802a116:	e7d3      	b.n	802a0c0 <setvbuf+0xe0>
 802a118:	2000      	movs	r0, #0
 802a11a:	e7b6      	b.n	802a08a <setvbuf+0xaa>
 802a11c:	46a9      	mov	r9, r5
 802a11e:	e7f5      	b.n	802a10c <setvbuf+0x12c>
 802a120:	60a0      	str	r0, [r4, #8]
 802a122:	e7be      	b.n	802a0a2 <setvbuf+0xc2>
 802a124:	f04f 30ff 	mov.w	r0, #4294967295
 802a128:	e7bb      	b.n	802a0a2 <setvbuf+0xc2>
 802a12a:	bf00      	nop
 802a12c:	200006ac 	.word	0x200006ac
 802a130:	0802ef10 	.word	0x0802ef10
 802a134:	0802ef30 	.word	0x0802ef30
 802a138:	0802eef0 	.word	0x0802eef0

0802a13c <nanf>:
 802a13c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802a144 <nanf+0x8>
 802a140:	4770      	bx	lr
 802a142:	bf00      	nop
 802a144:	7fc00000 	.word	0x7fc00000

0802a148 <siprintf>:
 802a148:	b40e      	push	{r1, r2, r3}
 802a14a:	b500      	push	{lr}
 802a14c:	b09c      	sub	sp, #112	; 0x70
 802a14e:	ab1d      	add	r3, sp, #116	; 0x74
 802a150:	9002      	str	r0, [sp, #8]
 802a152:	9006      	str	r0, [sp, #24]
 802a154:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802a158:	4809      	ldr	r0, [pc, #36]	; (802a180 <siprintf+0x38>)
 802a15a:	9107      	str	r1, [sp, #28]
 802a15c:	9104      	str	r1, [sp, #16]
 802a15e:	4909      	ldr	r1, [pc, #36]	; (802a184 <siprintf+0x3c>)
 802a160:	f853 2b04 	ldr.w	r2, [r3], #4
 802a164:	9105      	str	r1, [sp, #20]
 802a166:	6800      	ldr	r0, [r0, #0]
 802a168:	9301      	str	r3, [sp, #4]
 802a16a:	a902      	add	r1, sp, #8
 802a16c:	f003 f850 	bl	802d210 <_svfiprintf_r>
 802a170:	9b02      	ldr	r3, [sp, #8]
 802a172:	2200      	movs	r2, #0
 802a174:	701a      	strb	r2, [r3, #0]
 802a176:	b01c      	add	sp, #112	; 0x70
 802a178:	f85d eb04 	ldr.w	lr, [sp], #4
 802a17c:	b003      	add	sp, #12
 802a17e:	4770      	bx	lr
 802a180:	200006ac 	.word	0x200006ac
 802a184:	ffff0208 	.word	0xffff0208

0802a188 <strcpy>:
 802a188:	4603      	mov	r3, r0
 802a18a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802a18e:	f803 2b01 	strb.w	r2, [r3], #1
 802a192:	2a00      	cmp	r2, #0
 802a194:	d1f9      	bne.n	802a18a <strcpy+0x2>
 802a196:	4770      	bx	lr

0802a198 <sulp>:
 802a198:	b570      	push	{r4, r5, r6, lr}
 802a19a:	4604      	mov	r4, r0
 802a19c:	460d      	mov	r5, r1
 802a19e:	ec45 4b10 	vmov	d0, r4, r5
 802a1a2:	4616      	mov	r6, r2
 802a1a4:	f002 fdca 	bl	802cd3c <__ulp>
 802a1a8:	ec51 0b10 	vmov	r0, r1, d0
 802a1ac:	b17e      	cbz	r6, 802a1ce <sulp+0x36>
 802a1ae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802a1b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802a1b6:	2b00      	cmp	r3, #0
 802a1b8:	dd09      	ble.n	802a1ce <sulp+0x36>
 802a1ba:	051b      	lsls	r3, r3, #20
 802a1bc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 802a1c0:	2400      	movs	r4, #0
 802a1c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 802a1c6:	4622      	mov	r2, r4
 802a1c8:	462b      	mov	r3, r5
 802a1ca:	f7d6 fa1d 	bl	8000608 <__aeabi_dmul>
 802a1ce:	bd70      	pop	{r4, r5, r6, pc}

0802a1d0 <_strtod_l>:
 802a1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a1d4:	461f      	mov	r7, r3
 802a1d6:	b0a1      	sub	sp, #132	; 0x84
 802a1d8:	2300      	movs	r3, #0
 802a1da:	4681      	mov	r9, r0
 802a1dc:	4638      	mov	r0, r7
 802a1de:	460e      	mov	r6, r1
 802a1e0:	9217      	str	r2, [sp, #92]	; 0x5c
 802a1e2:	931c      	str	r3, [sp, #112]	; 0x70
 802a1e4:	f002 fa37 	bl	802c656 <__localeconv_l>
 802a1e8:	4680      	mov	r8, r0
 802a1ea:	6800      	ldr	r0, [r0, #0]
 802a1ec:	f7d5 fff8 	bl	80001e0 <strlen>
 802a1f0:	f04f 0a00 	mov.w	sl, #0
 802a1f4:	4604      	mov	r4, r0
 802a1f6:	f04f 0b00 	mov.w	fp, #0
 802a1fa:	961b      	str	r6, [sp, #108]	; 0x6c
 802a1fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802a1fe:	781a      	ldrb	r2, [r3, #0]
 802a200:	2a0d      	cmp	r2, #13
 802a202:	d832      	bhi.n	802a26a <_strtod_l+0x9a>
 802a204:	2a09      	cmp	r2, #9
 802a206:	d236      	bcs.n	802a276 <_strtod_l+0xa6>
 802a208:	2a00      	cmp	r2, #0
 802a20a:	d03e      	beq.n	802a28a <_strtod_l+0xba>
 802a20c:	2300      	movs	r3, #0
 802a20e:	930d      	str	r3, [sp, #52]	; 0x34
 802a210:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 802a212:	782b      	ldrb	r3, [r5, #0]
 802a214:	2b30      	cmp	r3, #48	; 0x30
 802a216:	f040 80ac 	bne.w	802a372 <_strtod_l+0x1a2>
 802a21a:	786b      	ldrb	r3, [r5, #1]
 802a21c:	2b58      	cmp	r3, #88	; 0x58
 802a21e:	d001      	beq.n	802a224 <_strtod_l+0x54>
 802a220:	2b78      	cmp	r3, #120	; 0x78
 802a222:	d167      	bne.n	802a2f4 <_strtod_l+0x124>
 802a224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a226:	9301      	str	r3, [sp, #4]
 802a228:	ab1c      	add	r3, sp, #112	; 0x70
 802a22a:	9300      	str	r3, [sp, #0]
 802a22c:	9702      	str	r7, [sp, #8]
 802a22e:	ab1d      	add	r3, sp, #116	; 0x74
 802a230:	4a88      	ldr	r2, [pc, #544]	; (802a454 <_strtod_l+0x284>)
 802a232:	a91b      	add	r1, sp, #108	; 0x6c
 802a234:	4648      	mov	r0, r9
 802a236:	f001 ff34 	bl	802c0a2 <__gethex>
 802a23a:	f010 0407 	ands.w	r4, r0, #7
 802a23e:	4606      	mov	r6, r0
 802a240:	d005      	beq.n	802a24e <_strtod_l+0x7e>
 802a242:	2c06      	cmp	r4, #6
 802a244:	d12b      	bne.n	802a29e <_strtod_l+0xce>
 802a246:	3501      	adds	r5, #1
 802a248:	2300      	movs	r3, #0
 802a24a:	951b      	str	r5, [sp, #108]	; 0x6c
 802a24c:	930d      	str	r3, [sp, #52]	; 0x34
 802a24e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802a250:	2b00      	cmp	r3, #0
 802a252:	f040 859a 	bne.w	802ad8a <_strtod_l+0xbba>
 802a256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a258:	b1e3      	cbz	r3, 802a294 <_strtod_l+0xc4>
 802a25a:	4652      	mov	r2, sl
 802a25c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 802a260:	ec43 2b10 	vmov	d0, r2, r3
 802a264:	b021      	add	sp, #132	; 0x84
 802a266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a26a:	2a2b      	cmp	r2, #43	; 0x2b
 802a26c:	d015      	beq.n	802a29a <_strtod_l+0xca>
 802a26e:	2a2d      	cmp	r2, #45	; 0x2d
 802a270:	d004      	beq.n	802a27c <_strtod_l+0xac>
 802a272:	2a20      	cmp	r2, #32
 802a274:	d1ca      	bne.n	802a20c <_strtod_l+0x3c>
 802a276:	3301      	adds	r3, #1
 802a278:	931b      	str	r3, [sp, #108]	; 0x6c
 802a27a:	e7bf      	b.n	802a1fc <_strtod_l+0x2c>
 802a27c:	2201      	movs	r2, #1
 802a27e:	920d      	str	r2, [sp, #52]	; 0x34
 802a280:	1c5a      	adds	r2, r3, #1
 802a282:	921b      	str	r2, [sp, #108]	; 0x6c
 802a284:	785b      	ldrb	r3, [r3, #1]
 802a286:	2b00      	cmp	r3, #0
 802a288:	d1c2      	bne.n	802a210 <_strtod_l+0x40>
 802a28a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802a28c:	961b      	str	r6, [sp, #108]	; 0x6c
 802a28e:	2b00      	cmp	r3, #0
 802a290:	f040 8579 	bne.w	802ad86 <_strtod_l+0xbb6>
 802a294:	4652      	mov	r2, sl
 802a296:	465b      	mov	r3, fp
 802a298:	e7e2      	b.n	802a260 <_strtod_l+0x90>
 802a29a:	2200      	movs	r2, #0
 802a29c:	e7ef      	b.n	802a27e <_strtod_l+0xae>
 802a29e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 802a2a0:	b13a      	cbz	r2, 802a2b2 <_strtod_l+0xe2>
 802a2a2:	2135      	movs	r1, #53	; 0x35
 802a2a4:	a81e      	add	r0, sp, #120	; 0x78
 802a2a6:	f002 fe41 	bl	802cf2c <__copybits>
 802a2aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 802a2ac:	4648      	mov	r0, r9
 802a2ae:	f002 faae 	bl	802c80e <_Bfree>
 802a2b2:	3c01      	subs	r4, #1
 802a2b4:	2c04      	cmp	r4, #4
 802a2b6:	d806      	bhi.n	802a2c6 <_strtod_l+0xf6>
 802a2b8:	e8df f004 	tbb	[pc, r4]
 802a2bc:	1714030a 	.word	0x1714030a
 802a2c0:	0a          	.byte	0x0a
 802a2c1:	00          	.byte	0x00
 802a2c2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 802a2c6:	0730      	lsls	r0, r6, #28
 802a2c8:	d5c1      	bpl.n	802a24e <_strtod_l+0x7e>
 802a2ca:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 802a2ce:	e7be      	b.n	802a24e <_strtod_l+0x7e>
 802a2d0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 802a2d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802a2d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 802a2da:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802a2de:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802a2e2:	e7f0      	b.n	802a2c6 <_strtod_l+0xf6>
 802a2e4:	f8df b170 	ldr.w	fp, [pc, #368]	; 802a458 <_strtod_l+0x288>
 802a2e8:	e7ed      	b.n	802a2c6 <_strtod_l+0xf6>
 802a2ea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 802a2ee:	f04f 3aff 	mov.w	sl, #4294967295
 802a2f2:	e7e8      	b.n	802a2c6 <_strtod_l+0xf6>
 802a2f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802a2f6:	1c5a      	adds	r2, r3, #1
 802a2f8:	921b      	str	r2, [sp, #108]	; 0x6c
 802a2fa:	785b      	ldrb	r3, [r3, #1]
 802a2fc:	2b30      	cmp	r3, #48	; 0x30
 802a2fe:	d0f9      	beq.n	802a2f4 <_strtod_l+0x124>
 802a300:	2b00      	cmp	r3, #0
 802a302:	d0a4      	beq.n	802a24e <_strtod_l+0x7e>
 802a304:	2301      	movs	r3, #1
 802a306:	2500      	movs	r5, #0
 802a308:	9306      	str	r3, [sp, #24]
 802a30a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802a30c:	9308      	str	r3, [sp, #32]
 802a30e:	9507      	str	r5, [sp, #28]
 802a310:	9505      	str	r5, [sp, #20]
 802a312:	220a      	movs	r2, #10
 802a314:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802a316:	7807      	ldrb	r7, [r0, #0]
 802a318:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 802a31c:	b2d9      	uxtb	r1, r3
 802a31e:	2909      	cmp	r1, #9
 802a320:	d929      	bls.n	802a376 <_strtod_l+0x1a6>
 802a322:	4622      	mov	r2, r4
 802a324:	f8d8 1000 	ldr.w	r1, [r8]
 802a328:	f003 f901 	bl	802d52e <strncmp>
 802a32c:	2800      	cmp	r0, #0
 802a32e:	d031      	beq.n	802a394 <_strtod_l+0x1c4>
 802a330:	2000      	movs	r0, #0
 802a332:	9c05      	ldr	r4, [sp, #20]
 802a334:	9004      	str	r0, [sp, #16]
 802a336:	463b      	mov	r3, r7
 802a338:	4602      	mov	r2, r0
 802a33a:	2b65      	cmp	r3, #101	; 0x65
 802a33c:	d001      	beq.n	802a342 <_strtod_l+0x172>
 802a33e:	2b45      	cmp	r3, #69	; 0x45
 802a340:	d114      	bne.n	802a36c <_strtod_l+0x19c>
 802a342:	b924      	cbnz	r4, 802a34e <_strtod_l+0x17e>
 802a344:	b910      	cbnz	r0, 802a34c <_strtod_l+0x17c>
 802a346:	9b06      	ldr	r3, [sp, #24]
 802a348:	2b00      	cmp	r3, #0
 802a34a:	d09e      	beq.n	802a28a <_strtod_l+0xba>
 802a34c:	2400      	movs	r4, #0
 802a34e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 802a350:	1c73      	adds	r3, r6, #1
 802a352:	931b      	str	r3, [sp, #108]	; 0x6c
 802a354:	7873      	ldrb	r3, [r6, #1]
 802a356:	2b2b      	cmp	r3, #43	; 0x2b
 802a358:	d078      	beq.n	802a44c <_strtod_l+0x27c>
 802a35a:	2b2d      	cmp	r3, #45	; 0x2d
 802a35c:	d070      	beq.n	802a440 <_strtod_l+0x270>
 802a35e:	f04f 0c00 	mov.w	ip, #0
 802a362:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 802a366:	2f09      	cmp	r7, #9
 802a368:	d97c      	bls.n	802a464 <_strtod_l+0x294>
 802a36a:	961b      	str	r6, [sp, #108]	; 0x6c
 802a36c:	f04f 0e00 	mov.w	lr, #0
 802a370:	e09a      	b.n	802a4a8 <_strtod_l+0x2d8>
 802a372:	2300      	movs	r3, #0
 802a374:	e7c7      	b.n	802a306 <_strtod_l+0x136>
 802a376:	9905      	ldr	r1, [sp, #20]
 802a378:	2908      	cmp	r1, #8
 802a37a:	bfdd      	ittte	le
 802a37c:	9907      	ldrle	r1, [sp, #28]
 802a37e:	fb02 3301 	mlale	r3, r2, r1, r3
 802a382:	9307      	strle	r3, [sp, #28]
 802a384:	fb02 3505 	mlagt	r5, r2, r5, r3
 802a388:	9b05      	ldr	r3, [sp, #20]
 802a38a:	3001      	adds	r0, #1
 802a38c:	3301      	adds	r3, #1
 802a38e:	9305      	str	r3, [sp, #20]
 802a390:	901b      	str	r0, [sp, #108]	; 0x6c
 802a392:	e7bf      	b.n	802a314 <_strtod_l+0x144>
 802a394:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802a396:	191a      	adds	r2, r3, r4
 802a398:	921b      	str	r2, [sp, #108]	; 0x6c
 802a39a:	9a05      	ldr	r2, [sp, #20]
 802a39c:	5d1b      	ldrb	r3, [r3, r4]
 802a39e:	2a00      	cmp	r2, #0
 802a3a0:	d037      	beq.n	802a412 <_strtod_l+0x242>
 802a3a2:	9c05      	ldr	r4, [sp, #20]
 802a3a4:	4602      	mov	r2, r0
 802a3a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 802a3aa:	2909      	cmp	r1, #9
 802a3ac:	d913      	bls.n	802a3d6 <_strtod_l+0x206>
 802a3ae:	2101      	movs	r1, #1
 802a3b0:	9104      	str	r1, [sp, #16]
 802a3b2:	e7c2      	b.n	802a33a <_strtod_l+0x16a>
 802a3b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802a3b6:	1c5a      	adds	r2, r3, #1
 802a3b8:	921b      	str	r2, [sp, #108]	; 0x6c
 802a3ba:	785b      	ldrb	r3, [r3, #1]
 802a3bc:	3001      	adds	r0, #1
 802a3be:	2b30      	cmp	r3, #48	; 0x30
 802a3c0:	d0f8      	beq.n	802a3b4 <_strtod_l+0x1e4>
 802a3c2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 802a3c6:	2a08      	cmp	r2, #8
 802a3c8:	f200 84e4 	bhi.w	802ad94 <_strtod_l+0xbc4>
 802a3cc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802a3ce:	9208      	str	r2, [sp, #32]
 802a3d0:	4602      	mov	r2, r0
 802a3d2:	2000      	movs	r0, #0
 802a3d4:	4604      	mov	r4, r0
 802a3d6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 802a3da:	f100 0101 	add.w	r1, r0, #1
 802a3de:	d012      	beq.n	802a406 <_strtod_l+0x236>
 802a3e0:	440a      	add	r2, r1
 802a3e2:	eb00 0c04 	add.w	ip, r0, r4
 802a3e6:	4621      	mov	r1, r4
 802a3e8:	270a      	movs	r7, #10
 802a3ea:	458c      	cmp	ip, r1
 802a3ec:	d113      	bne.n	802a416 <_strtod_l+0x246>
 802a3ee:	1821      	adds	r1, r4, r0
 802a3f0:	2908      	cmp	r1, #8
 802a3f2:	f104 0401 	add.w	r4, r4, #1
 802a3f6:	4404      	add	r4, r0
 802a3f8:	dc19      	bgt.n	802a42e <_strtod_l+0x25e>
 802a3fa:	9b07      	ldr	r3, [sp, #28]
 802a3fc:	210a      	movs	r1, #10
 802a3fe:	fb01 e303 	mla	r3, r1, r3, lr
 802a402:	9307      	str	r3, [sp, #28]
 802a404:	2100      	movs	r1, #0
 802a406:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802a408:	1c58      	adds	r0, r3, #1
 802a40a:	901b      	str	r0, [sp, #108]	; 0x6c
 802a40c:	785b      	ldrb	r3, [r3, #1]
 802a40e:	4608      	mov	r0, r1
 802a410:	e7c9      	b.n	802a3a6 <_strtod_l+0x1d6>
 802a412:	9805      	ldr	r0, [sp, #20]
 802a414:	e7d3      	b.n	802a3be <_strtod_l+0x1ee>
 802a416:	2908      	cmp	r1, #8
 802a418:	f101 0101 	add.w	r1, r1, #1
 802a41c:	dc03      	bgt.n	802a426 <_strtod_l+0x256>
 802a41e:	9b07      	ldr	r3, [sp, #28]
 802a420:	437b      	muls	r3, r7
 802a422:	9307      	str	r3, [sp, #28]
 802a424:	e7e1      	b.n	802a3ea <_strtod_l+0x21a>
 802a426:	2910      	cmp	r1, #16
 802a428:	bfd8      	it	le
 802a42a:	437d      	mulle	r5, r7
 802a42c:	e7dd      	b.n	802a3ea <_strtod_l+0x21a>
 802a42e:	2c10      	cmp	r4, #16
 802a430:	bfdc      	itt	le
 802a432:	210a      	movle	r1, #10
 802a434:	fb01 e505 	mlale	r5, r1, r5, lr
 802a438:	e7e4      	b.n	802a404 <_strtod_l+0x234>
 802a43a:	2301      	movs	r3, #1
 802a43c:	9304      	str	r3, [sp, #16]
 802a43e:	e781      	b.n	802a344 <_strtod_l+0x174>
 802a440:	f04f 0c01 	mov.w	ip, #1
 802a444:	1cb3      	adds	r3, r6, #2
 802a446:	931b      	str	r3, [sp, #108]	; 0x6c
 802a448:	78b3      	ldrb	r3, [r6, #2]
 802a44a:	e78a      	b.n	802a362 <_strtod_l+0x192>
 802a44c:	f04f 0c00 	mov.w	ip, #0
 802a450:	e7f8      	b.n	802a444 <_strtod_l+0x274>
 802a452:	bf00      	nop
 802a454:	0802ee8c 	.word	0x0802ee8c
 802a458:	7ff00000 	.word	0x7ff00000
 802a45c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802a45e:	1c5f      	adds	r7, r3, #1
 802a460:	971b      	str	r7, [sp, #108]	; 0x6c
 802a462:	785b      	ldrb	r3, [r3, #1]
 802a464:	2b30      	cmp	r3, #48	; 0x30
 802a466:	d0f9      	beq.n	802a45c <_strtod_l+0x28c>
 802a468:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 802a46c:	2f08      	cmp	r7, #8
 802a46e:	f63f af7d 	bhi.w	802a36c <_strtod_l+0x19c>
 802a472:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 802a476:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802a478:	930a      	str	r3, [sp, #40]	; 0x28
 802a47a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802a47c:	1c5f      	adds	r7, r3, #1
 802a47e:	971b      	str	r7, [sp, #108]	; 0x6c
 802a480:	785b      	ldrb	r3, [r3, #1]
 802a482:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 802a486:	f1b8 0f09 	cmp.w	r8, #9
 802a48a:	d937      	bls.n	802a4fc <_strtod_l+0x32c>
 802a48c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802a48e:	1a7f      	subs	r7, r7, r1
 802a490:	2f08      	cmp	r7, #8
 802a492:	f644 671f 	movw	r7, #19999	; 0x4e1f
 802a496:	dc37      	bgt.n	802a508 <_strtod_l+0x338>
 802a498:	45be      	cmp	lr, r7
 802a49a:	bfa8      	it	ge
 802a49c:	46be      	movge	lr, r7
 802a49e:	f1bc 0f00 	cmp.w	ip, #0
 802a4a2:	d001      	beq.n	802a4a8 <_strtod_l+0x2d8>
 802a4a4:	f1ce 0e00 	rsb	lr, lr, #0
 802a4a8:	2c00      	cmp	r4, #0
 802a4aa:	d151      	bne.n	802a550 <_strtod_l+0x380>
 802a4ac:	2800      	cmp	r0, #0
 802a4ae:	f47f aece 	bne.w	802a24e <_strtod_l+0x7e>
 802a4b2:	9a06      	ldr	r2, [sp, #24]
 802a4b4:	2a00      	cmp	r2, #0
 802a4b6:	f47f aeca 	bne.w	802a24e <_strtod_l+0x7e>
 802a4ba:	9a04      	ldr	r2, [sp, #16]
 802a4bc:	2a00      	cmp	r2, #0
 802a4be:	f47f aee4 	bne.w	802a28a <_strtod_l+0xba>
 802a4c2:	2b4e      	cmp	r3, #78	; 0x4e
 802a4c4:	d027      	beq.n	802a516 <_strtod_l+0x346>
 802a4c6:	dc21      	bgt.n	802a50c <_strtod_l+0x33c>
 802a4c8:	2b49      	cmp	r3, #73	; 0x49
 802a4ca:	f47f aede 	bne.w	802a28a <_strtod_l+0xba>
 802a4ce:	49a0      	ldr	r1, [pc, #640]	; (802a750 <_strtod_l+0x580>)
 802a4d0:	a81b      	add	r0, sp, #108	; 0x6c
 802a4d2:	f002 f819 	bl	802c508 <__match>
 802a4d6:	2800      	cmp	r0, #0
 802a4d8:	f43f aed7 	beq.w	802a28a <_strtod_l+0xba>
 802a4dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802a4de:	499d      	ldr	r1, [pc, #628]	; (802a754 <_strtod_l+0x584>)
 802a4e0:	3b01      	subs	r3, #1
 802a4e2:	a81b      	add	r0, sp, #108	; 0x6c
 802a4e4:	931b      	str	r3, [sp, #108]	; 0x6c
 802a4e6:	f002 f80f 	bl	802c508 <__match>
 802a4ea:	b910      	cbnz	r0, 802a4f2 <_strtod_l+0x322>
 802a4ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802a4ee:	3301      	adds	r3, #1
 802a4f0:	931b      	str	r3, [sp, #108]	; 0x6c
 802a4f2:	f8df b274 	ldr.w	fp, [pc, #628]	; 802a768 <_strtod_l+0x598>
 802a4f6:	f04f 0a00 	mov.w	sl, #0
 802a4fa:	e6a8      	b.n	802a24e <_strtod_l+0x7e>
 802a4fc:	210a      	movs	r1, #10
 802a4fe:	fb01 3e0e 	mla	lr, r1, lr, r3
 802a502:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 802a506:	e7b8      	b.n	802a47a <_strtod_l+0x2aa>
 802a508:	46be      	mov	lr, r7
 802a50a:	e7c8      	b.n	802a49e <_strtod_l+0x2ce>
 802a50c:	2b69      	cmp	r3, #105	; 0x69
 802a50e:	d0de      	beq.n	802a4ce <_strtod_l+0x2fe>
 802a510:	2b6e      	cmp	r3, #110	; 0x6e
 802a512:	f47f aeba 	bne.w	802a28a <_strtod_l+0xba>
 802a516:	4990      	ldr	r1, [pc, #576]	; (802a758 <_strtod_l+0x588>)
 802a518:	a81b      	add	r0, sp, #108	; 0x6c
 802a51a:	f001 fff5 	bl	802c508 <__match>
 802a51e:	2800      	cmp	r0, #0
 802a520:	f43f aeb3 	beq.w	802a28a <_strtod_l+0xba>
 802a524:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802a526:	781b      	ldrb	r3, [r3, #0]
 802a528:	2b28      	cmp	r3, #40	; 0x28
 802a52a:	d10e      	bne.n	802a54a <_strtod_l+0x37a>
 802a52c:	aa1e      	add	r2, sp, #120	; 0x78
 802a52e:	498b      	ldr	r1, [pc, #556]	; (802a75c <_strtod_l+0x58c>)
 802a530:	a81b      	add	r0, sp, #108	; 0x6c
 802a532:	f001 fffd 	bl	802c530 <__hexnan>
 802a536:	2805      	cmp	r0, #5
 802a538:	d107      	bne.n	802a54a <_strtod_l+0x37a>
 802a53a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802a53c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 802a540:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 802a544:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 802a548:	e681      	b.n	802a24e <_strtod_l+0x7e>
 802a54a:	f8df b224 	ldr.w	fp, [pc, #548]	; 802a770 <_strtod_l+0x5a0>
 802a54e:	e7d2      	b.n	802a4f6 <_strtod_l+0x326>
 802a550:	ebae 0302 	sub.w	r3, lr, r2
 802a554:	9306      	str	r3, [sp, #24]
 802a556:	9b05      	ldr	r3, [sp, #20]
 802a558:	9807      	ldr	r0, [sp, #28]
 802a55a:	2b00      	cmp	r3, #0
 802a55c:	bf08      	it	eq
 802a55e:	4623      	moveq	r3, r4
 802a560:	2c10      	cmp	r4, #16
 802a562:	9305      	str	r3, [sp, #20]
 802a564:	46a0      	mov	r8, r4
 802a566:	bfa8      	it	ge
 802a568:	f04f 0810 	movge.w	r8, #16
 802a56c:	f7d5 ffd2 	bl	8000514 <__aeabi_ui2d>
 802a570:	2c09      	cmp	r4, #9
 802a572:	4682      	mov	sl, r0
 802a574:	468b      	mov	fp, r1
 802a576:	dc13      	bgt.n	802a5a0 <_strtod_l+0x3d0>
 802a578:	9b06      	ldr	r3, [sp, #24]
 802a57a:	2b00      	cmp	r3, #0
 802a57c:	f43f ae67 	beq.w	802a24e <_strtod_l+0x7e>
 802a580:	9b06      	ldr	r3, [sp, #24]
 802a582:	dd7a      	ble.n	802a67a <_strtod_l+0x4aa>
 802a584:	2b16      	cmp	r3, #22
 802a586:	dc61      	bgt.n	802a64c <_strtod_l+0x47c>
 802a588:	4a75      	ldr	r2, [pc, #468]	; (802a760 <_strtod_l+0x590>)
 802a58a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 802a58e:	e9de 0100 	ldrd	r0, r1, [lr]
 802a592:	4652      	mov	r2, sl
 802a594:	465b      	mov	r3, fp
 802a596:	f7d6 f837 	bl	8000608 <__aeabi_dmul>
 802a59a:	4682      	mov	sl, r0
 802a59c:	468b      	mov	fp, r1
 802a59e:	e656      	b.n	802a24e <_strtod_l+0x7e>
 802a5a0:	4b6f      	ldr	r3, [pc, #444]	; (802a760 <_strtod_l+0x590>)
 802a5a2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 802a5a6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 802a5aa:	f7d6 f82d 	bl	8000608 <__aeabi_dmul>
 802a5ae:	4606      	mov	r6, r0
 802a5b0:	4628      	mov	r0, r5
 802a5b2:	460f      	mov	r7, r1
 802a5b4:	f7d5 ffae 	bl	8000514 <__aeabi_ui2d>
 802a5b8:	4602      	mov	r2, r0
 802a5ba:	460b      	mov	r3, r1
 802a5bc:	4630      	mov	r0, r6
 802a5be:	4639      	mov	r1, r7
 802a5c0:	f7d5 fe6c 	bl	800029c <__adddf3>
 802a5c4:	2c0f      	cmp	r4, #15
 802a5c6:	4682      	mov	sl, r0
 802a5c8:	468b      	mov	fp, r1
 802a5ca:	ddd5      	ble.n	802a578 <_strtod_l+0x3a8>
 802a5cc:	9b06      	ldr	r3, [sp, #24]
 802a5ce:	eba4 0808 	sub.w	r8, r4, r8
 802a5d2:	4498      	add	r8, r3
 802a5d4:	f1b8 0f00 	cmp.w	r8, #0
 802a5d8:	f340 8096 	ble.w	802a708 <_strtod_l+0x538>
 802a5dc:	f018 030f 	ands.w	r3, r8, #15
 802a5e0:	d00a      	beq.n	802a5f8 <_strtod_l+0x428>
 802a5e2:	495f      	ldr	r1, [pc, #380]	; (802a760 <_strtod_l+0x590>)
 802a5e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802a5e8:	4652      	mov	r2, sl
 802a5ea:	465b      	mov	r3, fp
 802a5ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 802a5f0:	f7d6 f80a 	bl	8000608 <__aeabi_dmul>
 802a5f4:	4682      	mov	sl, r0
 802a5f6:	468b      	mov	fp, r1
 802a5f8:	f038 080f 	bics.w	r8, r8, #15
 802a5fc:	d073      	beq.n	802a6e6 <_strtod_l+0x516>
 802a5fe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 802a602:	dd47      	ble.n	802a694 <_strtod_l+0x4c4>
 802a604:	2400      	movs	r4, #0
 802a606:	46a0      	mov	r8, r4
 802a608:	9407      	str	r4, [sp, #28]
 802a60a:	9405      	str	r4, [sp, #20]
 802a60c:	2322      	movs	r3, #34	; 0x22
 802a60e:	f8df b158 	ldr.w	fp, [pc, #344]	; 802a768 <_strtod_l+0x598>
 802a612:	f8c9 3000 	str.w	r3, [r9]
 802a616:	f04f 0a00 	mov.w	sl, #0
 802a61a:	9b07      	ldr	r3, [sp, #28]
 802a61c:	2b00      	cmp	r3, #0
 802a61e:	f43f ae16 	beq.w	802a24e <_strtod_l+0x7e>
 802a622:	991c      	ldr	r1, [sp, #112]	; 0x70
 802a624:	4648      	mov	r0, r9
 802a626:	f002 f8f2 	bl	802c80e <_Bfree>
 802a62a:	9905      	ldr	r1, [sp, #20]
 802a62c:	4648      	mov	r0, r9
 802a62e:	f002 f8ee 	bl	802c80e <_Bfree>
 802a632:	4641      	mov	r1, r8
 802a634:	4648      	mov	r0, r9
 802a636:	f002 f8ea 	bl	802c80e <_Bfree>
 802a63a:	9907      	ldr	r1, [sp, #28]
 802a63c:	4648      	mov	r0, r9
 802a63e:	f002 f8e6 	bl	802c80e <_Bfree>
 802a642:	4621      	mov	r1, r4
 802a644:	4648      	mov	r0, r9
 802a646:	f002 f8e2 	bl	802c80e <_Bfree>
 802a64a:	e600      	b.n	802a24e <_strtod_l+0x7e>
 802a64c:	9a06      	ldr	r2, [sp, #24]
 802a64e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 802a652:	4293      	cmp	r3, r2
 802a654:	dbba      	blt.n	802a5cc <_strtod_l+0x3fc>
 802a656:	4d42      	ldr	r5, [pc, #264]	; (802a760 <_strtod_l+0x590>)
 802a658:	f1c4 040f 	rsb	r4, r4, #15
 802a65c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 802a660:	4652      	mov	r2, sl
 802a662:	465b      	mov	r3, fp
 802a664:	e9d1 0100 	ldrd	r0, r1, [r1]
 802a668:	f7d5 ffce 	bl	8000608 <__aeabi_dmul>
 802a66c:	9b06      	ldr	r3, [sp, #24]
 802a66e:	1b1c      	subs	r4, r3, r4
 802a670:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 802a674:	e9d5 2300 	ldrd	r2, r3, [r5]
 802a678:	e78d      	b.n	802a596 <_strtod_l+0x3c6>
 802a67a:	f113 0f16 	cmn.w	r3, #22
 802a67e:	dba5      	blt.n	802a5cc <_strtod_l+0x3fc>
 802a680:	4a37      	ldr	r2, [pc, #220]	; (802a760 <_strtod_l+0x590>)
 802a682:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 802a686:	e9d2 2300 	ldrd	r2, r3, [r2]
 802a68a:	4650      	mov	r0, sl
 802a68c:	4659      	mov	r1, fp
 802a68e:	f7d6 f8e5 	bl	800085c <__aeabi_ddiv>
 802a692:	e782      	b.n	802a59a <_strtod_l+0x3ca>
 802a694:	2300      	movs	r3, #0
 802a696:	4e33      	ldr	r6, [pc, #204]	; (802a764 <_strtod_l+0x594>)
 802a698:	ea4f 1828 	mov.w	r8, r8, asr #4
 802a69c:	4650      	mov	r0, sl
 802a69e:	4659      	mov	r1, fp
 802a6a0:	461d      	mov	r5, r3
 802a6a2:	f1b8 0f01 	cmp.w	r8, #1
 802a6a6:	dc21      	bgt.n	802a6ec <_strtod_l+0x51c>
 802a6a8:	b10b      	cbz	r3, 802a6ae <_strtod_l+0x4de>
 802a6aa:	4682      	mov	sl, r0
 802a6ac:	468b      	mov	fp, r1
 802a6ae:	4b2d      	ldr	r3, [pc, #180]	; (802a764 <_strtod_l+0x594>)
 802a6b0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 802a6b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 802a6b8:	4652      	mov	r2, sl
 802a6ba:	465b      	mov	r3, fp
 802a6bc:	e9d5 0100 	ldrd	r0, r1, [r5]
 802a6c0:	f7d5 ffa2 	bl	8000608 <__aeabi_dmul>
 802a6c4:	4b28      	ldr	r3, [pc, #160]	; (802a768 <_strtod_l+0x598>)
 802a6c6:	460a      	mov	r2, r1
 802a6c8:	400b      	ands	r3, r1
 802a6ca:	4928      	ldr	r1, [pc, #160]	; (802a76c <_strtod_l+0x59c>)
 802a6cc:	428b      	cmp	r3, r1
 802a6ce:	4682      	mov	sl, r0
 802a6d0:	d898      	bhi.n	802a604 <_strtod_l+0x434>
 802a6d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 802a6d6:	428b      	cmp	r3, r1
 802a6d8:	bf86      	itte	hi
 802a6da:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 802a774 <_strtod_l+0x5a4>
 802a6de:	f04f 3aff 	movhi.w	sl, #4294967295
 802a6e2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 802a6e6:	2300      	movs	r3, #0
 802a6e8:	9304      	str	r3, [sp, #16]
 802a6ea:	e077      	b.n	802a7dc <_strtod_l+0x60c>
 802a6ec:	f018 0f01 	tst.w	r8, #1
 802a6f0:	d006      	beq.n	802a700 <_strtod_l+0x530>
 802a6f2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 802a6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a6fa:	f7d5 ff85 	bl	8000608 <__aeabi_dmul>
 802a6fe:	2301      	movs	r3, #1
 802a700:	3501      	adds	r5, #1
 802a702:	ea4f 0868 	mov.w	r8, r8, asr #1
 802a706:	e7cc      	b.n	802a6a2 <_strtod_l+0x4d2>
 802a708:	d0ed      	beq.n	802a6e6 <_strtod_l+0x516>
 802a70a:	f1c8 0800 	rsb	r8, r8, #0
 802a70e:	f018 020f 	ands.w	r2, r8, #15
 802a712:	d00a      	beq.n	802a72a <_strtod_l+0x55a>
 802a714:	4b12      	ldr	r3, [pc, #72]	; (802a760 <_strtod_l+0x590>)
 802a716:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802a71a:	4650      	mov	r0, sl
 802a71c:	4659      	mov	r1, fp
 802a71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a722:	f7d6 f89b 	bl	800085c <__aeabi_ddiv>
 802a726:	4682      	mov	sl, r0
 802a728:	468b      	mov	fp, r1
 802a72a:	ea5f 1828 	movs.w	r8, r8, asr #4
 802a72e:	d0da      	beq.n	802a6e6 <_strtod_l+0x516>
 802a730:	f1b8 0f1f 	cmp.w	r8, #31
 802a734:	dd20      	ble.n	802a778 <_strtod_l+0x5a8>
 802a736:	2400      	movs	r4, #0
 802a738:	46a0      	mov	r8, r4
 802a73a:	9407      	str	r4, [sp, #28]
 802a73c:	9405      	str	r4, [sp, #20]
 802a73e:	2322      	movs	r3, #34	; 0x22
 802a740:	f04f 0a00 	mov.w	sl, #0
 802a744:	f04f 0b00 	mov.w	fp, #0
 802a748:	f8c9 3000 	str.w	r3, [r9]
 802a74c:	e765      	b.n	802a61a <_strtod_l+0x44a>
 802a74e:	bf00      	nop
 802a750:	0802ee56 	.word	0x0802ee56
 802a754:	0802eee3 	.word	0x0802eee3
 802a758:	0802ee5e 	.word	0x0802ee5e
 802a75c:	0802eea0 	.word	0x0802eea0
 802a760:	0802ef88 	.word	0x0802ef88
 802a764:	0802ef60 	.word	0x0802ef60
 802a768:	7ff00000 	.word	0x7ff00000
 802a76c:	7ca00000 	.word	0x7ca00000
 802a770:	fff80000 	.word	0xfff80000
 802a774:	7fefffff 	.word	0x7fefffff
 802a778:	f018 0310 	ands.w	r3, r8, #16
 802a77c:	bf18      	it	ne
 802a77e:	236a      	movne	r3, #106	; 0x6a
 802a780:	4da0      	ldr	r5, [pc, #640]	; (802aa04 <_strtod_l+0x834>)
 802a782:	9304      	str	r3, [sp, #16]
 802a784:	4650      	mov	r0, sl
 802a786:	4659      	mov	r1, fp
 802a788:	2300      	movs	r3, #0
 802a78a:	f1b8 0f00 	cmp.w	r8, #0
 802a78e:	f300 810a 	bgt.w	802a9a6 <_strtod_l+0x7d6>
 802a792:	b10b      	cbz	r3, 802a798 <_strtod_l+0x5c8>
 802a794:	4682      	mov	sl, r0
 802a796:	468b      	mov	fp, r1
 802a798:	9b04      	ldr	r3, [sp, #16]
 802a79a:	b1bb      	cbz	r3, 802a7cc <_strtod_l+0x5fc>
 802a79c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 802a7a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802a7a4:	2b00      	cmp	r3, #0
 802a7a6:	4659      	mov	r1, fp
 802a7a8:	dd10      	ble.n	802a7cc <_strtod_l+0x5fc>
 802a7aa:	2b1f      	cmp	r3, #31
 802a7ac:	f340 8107 	ble.w	802a9be <_strtod_l+0x7ee>
 802a7b0:	2b34      	cmp	r3, #52	; 0x34
 802a7b2:	bfde      	ittt	le
 802a7b4:	3b20      	suble	r3, #32
 802a7b6:	f04f 32ff 	movle.w	r2, #4294967295
 802a7ba:	fa02 f303 	lslle.w	r3, r2, r3
 802a7be:	f04f 0a00 	mov.w	sl, #0
 802a7c2:	bfcc      	ite	gt
 802a7c4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 802a7c8:	ea03 0b01 	andle.w	fp, r3, r1
 802a7cc:	2200      	movs	r2, #0
 802a7ce:	2300      	movs	r3, #0
 802a7d0:	4650      	mov	r0, sl
 802a7d2:	4659      	mov	r1, fp
 802a7d4:	f7d6 f980 	bl	8000ad8 <__aeabi_dcmpeq>
 802a7d8:	2800      	cmp	r0, #0
 802a7da:	d1ac      	bne.n	802a736 <_strtod_l+0x566>
 802a7dc:	9b07      	ldr	r3, [sp, #28]
 802a7de:	9300      	str	r3, [sp, #0]
 802a7e0:	9a05      	ldr	r2, [sp, #20]
 802a7e2:	9908      	ldr	r1, [sp, #32]
 802a7e4:	4623      	mov	r3, r4
 802a7e6:	4648      	mov	r0, r9
 802a7e8:	f002 f863 	bl	802c8b2 <__s2b>
 802a7ec:	9007      	str	r0, [sp, #28]
 802a7ee:	2800      	cmp	r0, #0
 802a7f0:	f43f af08 	beq.w	802a604 <_strtod_l+0x434>
 802a7f4:	9a06      	ldr	r2, [sp, #24]
 802a7f6:	9b06      	ldr	r3, [sp, #24]
 802a7f8:	2a00      	cmp	r2, #0
 802a7fa:	f1c3 0300 	rsb	r3, r3, #0
 802a7fe:	bfa8      	it	ge
 802a800:	2300      	movge	r3, #0
 802a802:	930e      	str	r3, [sp, #56]	; 0x38
 802a804:	2400      	movs	r4, #0
 802a806:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 802a80a:	9316      	str	r3, [sp, #88]	; 0x58
 802a80c:	46a0      	mov	r8, r4
 802a80e:	9b07      	ldr	r3, [sp, #28]
 802a810:	4648      	mov	r0, r9
 802a812:	6859      	ldr	r1, [r3, #4]
 802a814:	f001 ffc7 	bl	802c7a6 <_Balloc>
 802a818:	9005      	str	r0, [sp, #20]
 802a81a:	2800      	cmp	r0, #0
 802a81c:	f43f aef6 	beq.w	802a60c <_strtod_l+0x43c>
 802a820:	9b07      	ldr	r3, [sp, #28]
 802a822:	691a      	ldr	r2, [r3, #16]
 802a824:	3202      	adds	r2, #2
 802a826:	f103 010c 	add.w	r1, r3, #12
 802a82a:	0092      	lsls	r2, r2, #2
 802a82c:	300c      	adds	r0, #12
 802a82e:	f7fe fbcb 	bl	8028fc8 <memcpy>
 802a832:	aa1e      	add	r2, sp, #120	; 0x78
 802a834:	a91d      	add	r1, sp, #116	; 0x74
 802a836:	ec4b ab10 	vmov	d0, sl, fp
 802a83a:	4648      	mov	r0, r9
 802a83c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 802a840:	f002 faf2 	bl	802ce28 <__d2b>
 802a844:	901c      	str	r0, [sp, #112]	; 0x70
 802a846:	2800      	cmp	r0, #0
 802a848:	f43f aee0 	beq.w	802a60c <_strtod_l+0x43c>
 802a84c:	2101      	movs	r1, #1
 802a84e:	4648      	mov	r0, r9
 802a850:	f002 f8bb 	bl	802c9ca <__i2b>
 802a854:	4680      	mov	r8, r0
 802a856:	2800      	cmp	r0, #0
 802a858:	f43f aed8 	beq.w	802a60c <_strtod_l+0x43c>
 802a85c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 802a85e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802a860:	2e00      	cmp	r6, #0
 802a862:	bfab      	itete	ge
 802a864:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 802a866:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 802a868:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 802a86a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 802a86c:	bfac      	ite	ge
 802a86e:	18f7      	addge	r7, r6, r3
 802a870:	1b9d      	sublt	r5, r3, r6
 802a872:	9b04      	ldr	r3, [sp, #16]
 802a874:	1af6      	subs	r6, r6, r3
 802a876:	4416      	add	r6, r2
 802a878:	4b63      	ldr	r3, [pc, #396]	; (802aa08 <_strtod_l+0x838>)
 802a87a:	3e01      	subs	r6, #1
 802a87c:	429e      	cmp	r6, r3
 802a87e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802a882:	f280 80af 	bge.w	802a9e4 <_strtod_l+0x814>
 802a886:	1b9b      	subs	r3, r3, r6
 802a888:	2b1f      	cmp	r3, #31
 802a88a:	eba2 0203 	sub.w	r2, r2, r3
 802a88e:	f04f 0101 	mov.w	r1, #1
 802a892:	f300 809b 	bgt.w	802a9cc <_strtod_l+0x7fc>
 802a896:	fa01 f303 	lsl.w	r3, r1, r3
 802a89a:	930f      	str	r3, [sp, #60]	; 0x3c
 802a89c:	2300      	movs	r3, #0
 802a89e:	930a      	str	r3, [sp, #40]	; 0x28
 802a8a0:	18be      	adds	r6, r7, r2
 802a8a2:	9b04      	ldr	r3, [sp, #16]
 802a8a4:	42b7      	cmp	r7, r6
 802a8a6:	4415      	add	r5, r2
 802a8a8:	441d      	add	r5, r3
 802a8aa:	463b      	mov	r3, r7
 802a8ac:	bfa8      	it	ge
 802a8ae:	4633      	movge	r3, r6
 802a8b0:	42ab      	cmp	r3, r5
 802a8b2:	bfa8      	it	ge
 802a8b4:	462b      	movge	r3, r5
 802a8b6:	2b00      	cmp	r3, #0
 802a8b8:	bfc2      	ittt	gt
 802a8ba:	1af6      	subgt	r6, r6, r3
 802a8bc:	1aed      	subgt	r5, r5, r3
 802a8be:	1aff      	subgt	r7, r7, r3
 802a8c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802a8c2:	b1bb      	cbz	r3, 802a8f4 <_strtod_l+0x724>
 802a8c4:	4641      	mov	r1, r8
 802a8c6:	461a      	mov	r2, r3
 802a8c8:	4648      	mov	r0, r9
 802a8ca:	f002 f91d 	bl	802cb08 <__pow5mult>
 802a8ce:	4680      	mov	r8, r0
 802a8d0:	2800      	cmp	r0, #0
 802a8d2:	f43f ae9b 	beq.w	802a60c <_strtod_l+0x43c>
 802a8d6:	4601      	mov	r1, r0
 802a8d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 802a8da:	4648      	mov	r0, r9
 802a8dc:	f002 f87e 	bl	802c9dc <__multiply>
 802a8e0:	900c      	str	r0, [sp, #48]	; 0x30
 802a8e2:	2800      	cmp	r0, #0
 802a8e4:	f43f ae92 	beq.w	802a60c <_strtod_l+0x43c>
 802a8e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 802a8ea:	4648      	mov	r0, r9
 802a8ec:	f001 ff8f 	bl	802c80e <_Bfree>
 802a8f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a8f2:	931c      	str	r3, [sp, #112]	; 0x70
 802a8f4:	2e00      	cmp	r6, #0
 802a8f6:	dc7a      	bgt.n	802a9ee <_strtod_l+0x81e>
 802a8f8:	9b06      	ldr	r3, [sp, #24]
 802a8fa:	2b00      	cmp	r3, #0
 802a8fc:	dd08      	ble.n	802a910 <_strtod_l+0x740>
 802a8fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802a900:	9905      	ldr	r1, [sp, #20]
 802a902:	4648      	mov	r0, r9
 802a904:	f002 f900 	bl	802cb08 <__pow5mult>
 802a908:	9005      	str	r0, [sp, #20]
 802a90a:	2800      	cmp	r0, #0
 802a90c:	f43f ae7e 	beq.w	802a60c <_strtod_l+0x43c>
 802a910:	2d00      	cmp	r5, #0
 802a912:	dd08      	ble.n	802a926 <_strtod_l+0x756>
 802a914:	462a      	mov	r2, r5
 802a916:	9905      	ldr	r1, [sp, #20]
 802a918:	4648      	mov	r0, r9
 802a91a:	f002 f943 	bl	802cba4 <__lshift>
 802a91e:	9005      	str	r0, [sp, #20]
 802a920:	2800      	cmp	r0, #0
 802a922:	f43f ae73 	beq.w	802a60c <_strtod_l+0x43c>
 802a926:	2f00      	cmp	r7, #0
 802a928:	dd08      	ble.n	802a93c <_strtod_l+0x76c>
 802a92a:	4641      	mov	r1, r8
 802a92c:	463a      	mov	r2, r7
 802a92e:	4648      	mov	r0, r9
 802a930:	f002 f938 	bl	802cba4 <__lshift>
 802a934:	4680      	mov	r8, r0
 802a936:	2800      	cmp	r0, #0
 802a938:	f43f ae68 	beq.w	802a60c <_strtod_l+0x43c>
 802a93c:	9a05      	ldr	r2, [sp, #20]
 802a93e:	991c      	ldr	r1, [sp, #112]	; 0x70
 802a940:	4648      	mov	r0, r9
 802a942:	f002 f99d 	bl	802cc80 <__mdiff>
 802a946:	4604      	mov	r4, r0
 802a948:	2800      	cmp	r0, #0
 802a94a:	f43f ae5f 	beq.w	802a60c <_strtod_l+0x43c>
 802a94e:	68c3      	ldr	r3, [r0, #12]
 802a950:	930c      	str	r3, [sp, #48]	; 0x30
 802a952:	2300      	movs	r3, #0
 802a954:	60c3      	str	r3, [r0, #12]
 802a956:	4641      	mov	r1, r8
 802a958:	f002 f978 	bl	802cc4c <__mcmp>
 802a95c:	2800      	cmp	r0, #0
 802a95e:	da55      	bge.n	802aa0c <_strtod_l+0x83c>
 802a960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a962:	b9e3      	cbnz	r3, 802a99e <_strtod_l+0x7ce>
 802a964:	f1ba 0f00 	cmp.w	sl, #0
 802a968:	d119      	bne.n	802a99e <_strtod_l+0x7ce>
 802a96a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802a96e:	b9b3      	cbnz	r3, 802a99e <_strtod_l+0x7ce>
 802a970:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802a974:	0d1b      	lsrs	r3, r3, #20
 802a976:	051b      	lsls	r3, r3, #20
 802a978:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 802a97c:	d90f      	bls.n	802a99e <_strtod_l+0x7ce>
 802a97e:	6963      	ldr	r3, [r4, #20]
 802a980:	b913      	cbnz	r3, 802a988 <_strtod_l+0x7b8>
 802a982:	6923      	ldr	r3, [r4, #16]
 802a984:	2b01      	cmp	r3, #1
 802a986:	dd0a      	ble.n	802a99e <_strtod_l+0x7ce>
 802a988:	4621      	mov	r1, r4
 802a98a:	2201      	movs	r2, #1
 802a98c:	4648      	mov	r0, r9
 802a98e:	f002 f909 	bl	802cba4 <__lshift>
 802a992:	4641      	mov	r1, r8
 802a994:	4604      	mov	r4, r0
 802a996:	f002 f959 	bl	802cc4c <__mcmp>
 802a99a:	2800      	cmp	r0, #0
 802a99c:	dc67      	bgt.n	802aa6e <_strtod_l+0x89e>
 802a99e:	9b04      	ldr	r3, [sp, #16]
 802a9a0:	2b00      	cmp	r3, #0
 802a9a2:	d171      	bne.n	802aa88 <_strtod_l+0x8b8>
 802a9a4:	e63d      	b.n	802a622 <_strtod_l+0x452>
 802a9a6:	f018 0f01 	tst.w	r8, #1
 802a9aa:	d004      	beq.n	802a9b6 <_strtod_l+0x7e6>
 802a9ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 802a9b0:	f7d5 fe2a 	bl	8000608 <__aeabi_dmul>
 802a9b4:	2301      	movs	r3, #1
 802a9b6:	ea4f 0868 	mov.w	r8, r8, asr #1
 802a9ba:	3508      	adds	r5, #8
 802a9bc:	e6e5      	b.n	802a78a <_strtod_l+0x5ba>
 802a9be:	f04f 32ff 	mov.w	r2, #4294967295
 802a9c2:	fa02 f303 	lsl.w	r3, r2, r3
 802a9c6:	ea03 0a0a 	and.w	sl, r3, sl
 802a9ca:	e6ff      	b.n	802a7cc <_strtod_l+0x5fc>
 802a9cc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 802a9d0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 802a9d4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 802a9d8:	36e2      	adds	r6, #226	; 0xe2
 802a9da:	fa01 f306 	lsl.w	r3, r1, r6
 802a9de:	930a      	str	r3, [sp, #40]	; 0x28
 802a9e0:	910f      	str	r1, [sp, #60]	; 0x3c
 802a9e2:	e75d      	b.n	802a8a0 <_strtod_l+0x6d0>
 802a9e4:	2300      	movs	r3, #0
 802a9e6:	930a      	str	r3, [sp, #40]	; 0x28
 802a9e8:	2301      	movs	r3, #1
 802a9ea:	930f      	str	r3, [sp, #60]	; 0x3c
 802a9ec:	e758      	b.n	802a8a0 <_strtod_l+0x6d0>
 802a9ee:	4632      	mov	r2, r6
 802a9f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 802a9f2:	4648      	mov	r0, r9
 802a9f4:	f002 f8d6 	bl	802cba4 <__lshift>
 802a9f8:	901c      	str	r0, [sp, #112]	; 0x70
 802a9fa:	2800      	cmp	r0, #0
 802a9fc:	f47f af7c 	bne.w	802a8f8 <_strtod_l+0x728>
 802aa00:	e604      	b.n	802a60c <_strtod_l+0x43c>
 802aa02:	bf00      	nop
 802aa04:	0802eeb8 	.word	0x0802eeb8
 802aa08:	fffffc02 	.word	0xfffffc02
 802aa0c:	465d      	mov	r5, fp
 802aa0e:	f040 8086 	bne.w	802ab1e <_strtod_l+0x94e>
 802aa12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802aa14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802aa18:	b32a      	cbz	r2, 802aa66 <_strtod_l+0x896>
 802aa1a:	4aaf      	ldr	r2, [pc, #700]	; (802acd8 <_strtod_l+0xb08>)
 802aa1c:	4293      	cmp	r3, r2
 802aa1e:	d153      	bne.n	802aac8 <_strtod_l+0x8f8>
 802aa20:	9b04      	ldr	r3, [sp, #16]
 802aa22:	4650      	mov	r0, sl
 802aa24:	b1d3      	cbz	r3, 802aa5c <_strtod_l+0x88c>
 802aa26:	4aad      	ldr	r2, [pc, #692]	; (802acdc <_strtod_l+0xb0c>)
 802aa28:	402a      	ands	r2, r5
 802aa2a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 802aa2e:	f04f 31ff 	mov.w	r1, #4294967295
 802aa32:	d816      	bhi.n	802aa62 <_strtod_l+0x892>
 802aa34:	0d12      	lsrs	r2, r2, #20
 802aa36:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 802aa3a:	fa01 f303 	lsl.w	r3, r1, r3
 802aa3e:	4298      	cmp	r0, r3
 802aa40:	d142      	bne.n	802aac8 <_strtod_l+0x8f8>
 802aa42:	4ba7      	ldr	r3, [pc, #668]	; (802ace0 <_strtod_l+0xb10>)
 802aa44:	429d      	cmp	r5, r3
 802aa46:	d102      	bne.n	802aa4e <_strtod_l+0x87e>
 802aa48:	3001      	adds	r0, #1
 802aa4a:	f43f addf 	beq.w	802a60c <_strtod_l+0x43c>
 802aa4e:	4ba3      	ldr	r3, [pc, #652]	; (802acdc <_strtod_l+0xb0c>)
 802aa50:	402b      	ands	r3, r5
 802aa52:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 802aa56:	f04f 0a00 	mov.w	sl, #0
 802aa5a:	e7a0      	b.n	802a99e <_strtod_l+0x7ce>
 802aa5c:	f04f 33ff 	mov.w	r3, #4294967295
 802aa60:	e7ed      	b.n	802aa3e <_strtod_l+0x86e>
 802aa62:	460b      	mov	r3, r1
 802aa64:	e7eb      	b.n	802aa3e <_strtod_l+0x86e>
 802aa66:	bb7b      	cbnz	r3, 802aac8 <_strtod_l+0x8f8>
 802aa68:	f1ba 0f00 	cmp.w	sl, #0
 802aa6c:	d12c      	bne.n	802aac8 <_strtod_l+0x8f8>
 802aa6e:	9904      	ldr	r1, [sp, #16]
 802aa70:	4a9a      	ldr	r2, [pc, #616]	; (802acdc <_strtod_l+0xb0c>)
 802aa72:	465b      	mov	r3, fp
 802aa74:	b1f1      	cbz	r1, 802aab4 <_strtod_l+0x8e4>
 802aa76:	ea02 010b 	and.w	r1, r2, fp
 802aa7a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 802aa7e:	dc19      	bgt.n	802aab4 <_strtod_l+0x8e4>
 802aa80:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802aa84:	f77f ae5b 	ble.w	802a73e <_strtod_l+0x56e>
 802aa88:	4a96      	ldr	r2, [pc, #600]	; (802ace4 <_strtod_l+0xb14>)
 802aa8a:	2300      	movs	r3, #0
 802aa8c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 802aa90:	4650      	mov	r0, sl
 802aa92:	4659      	mov	r1, fp
 802aa94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 802aa98:	f7d5 fdb6 	bl	8000608 <__aeabi_dmul>
 802aa9c:	4682      	mov	sl, r0
 802aa9e:	468b      	mov	fp, r1
 802aaa0:	2900      	cmp	r1, #0
 802aaa2:	f47f adbe 	bne.w	802a622 <_strtod_l+0x452>
 802aaa6:	2800      	cmp	r0, #0
 802aaa8:	f47f adbb 	bne.w	802a622 <_strtod_l+0x452>
 802aaac:	2322      	movs	r3, #34	; 0x22
 802aaae:	f8c9 3000 	str.w	r3, [r9]
 802aab2:	e5b6      	b.n	802a622 <_strtod_l+0x452>
 802aab4:	4013      	ands	r3, r2
 802aab6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802aaba:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 802aabe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802aac2:	f04f 3aff 	mov.w	sl, #4294967295
 802aac6:	e76a      	b.n	802a99e <_strtod_l+0x7ce>
 802aac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802aaca:	b193      	cbz	r3, 802aaf2 <_strtod_l+0x922>
 802aacc:	422b      	tst	r3, r5
 802aace:	f43f af66 	beq.w	802a99e <_strtod_l+0x7ce>
 802aad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802aad4:	9a04      	ldr	r2, [sp, #16]
 802aad6:	4650      	mov	r0, sl
 802aad8:	4659      	mov	r1, fp
 802aada:	b173      	cbz	r3, 802aafa <_strtod_l+0x92a>
 802aadc:	f7ff fb5c 	bl	802a198 <sulp>
 802aae0:	4602      	mov	r2, r0
 802aae2:	460b      	mov	r3, r1
 802aae4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802aae8:	f7d5 fbd8 	bl	800029c <__adddf3>
 802aaec:	4682      	mov	sl, r0
 802aaee:	468b      	mov	fp, r1
 802aaf0:	e755      	b.n	802a99e <_strtod_l+0x7ce>
 802aaf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802aaf4:	ea13 0f0a 	tst.w	r3, sl
 802aaf8:	e7e9      	b.n	802aace <_strtod_l+0x8fe>
 802aafa:	f7ff fb4d 	bl	802a198 <sulp>
 802aafe:	4602      	mov	r2, r0
 802ab00:	460b      	mov	r3, r1
 802ab02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802ab06:	f7d5 fbc7 	bl	8000298 <__aeabi_dsub>
 802ab0a:	2200      	movs	r2, #0
 802ab0c:	2300      	movs	r3, #0
 802ab0e:	4682      	mov	sl, r0
 802ab10:	468b      	mov	fp, r1
 802ab12:	f7d5 ffe1 	bl	8000ad8 <__aeabi_dcmpeq>
 802ab16:	2800      	cmp	r0, #0
 802ab18:	f47f ae11 	bne.w	802a73e <_strtod_l+0x56e>
 802ab1c:	e73f      	b.n	802a99e <_strtod_l+0x7ce>
 802ab1e:	4641      	mov	r1, r8
 802ab20:	4620      	mov	r0, r4
 802ab22:	f002 f9d0 	bl	802cec6 <__ratio>
 802ab26:	ec57 6b10 	vmov	r6, r7, d0
 802ab2a:	2200      	movs	r2, #0
 802ab2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802ab30:	ee10 0a10 	vmov	r0, s0
 802ab34:	4639      	mov	r1, r7
 802ab36:	f7d5 ffe3 	bl	8000b00 <__aeabi_dcmple>
 802ab3a:	2800      	cmp	r0, #0
 802ab3c:	d077      	beq.n	802ac2e <_strtod_l+0xa5e>
 802ab3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802ab40:	2b00      	cmp	r3, #0
 802ab42:	d04a      	beq.n	802abda <_strtod_l+0xa0a>
 802ab44:	4b68      	ldr	r3, [pc, #416]	; (802ace8 <_strtod_l+0xb18>)
 802ab46:	2200      	movs	r2, #0
 802ab48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 802ab4c:	4f66      	ldr	r7, [pc, #408]	; (802ace8 <_strtod_l+0xb18>)
 802ab4e:	2600      	movs	r6, #0
 802ab50:	4b62      	ldr	r3, [pc, #392]	; (802acdc <_strtod_l+0xb0c>)
 802ab52:	402b      	ands	r3, r5
 802ab54:	930f      	str	r3, [sp, #60]	; 0x3c
 802ab56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802ab58:	4b64      	ldr	r3, [pc, #400]	; (802acec <_strtod_l+0xb1c>)
 802ab5a:	429a      	cmp	r2, r3
 802ab5c:	f040 80ce 	bne.w	802acfc <_strtod_l+0xb2c>
 802ab60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802ab64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802ab68:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 802ab6c:	ec4b ab10 	vmov	d0, sl, fp
 802ab70:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 802ab74:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 802ab78:	f002 f8e0 	bl	802cd3c <__ulp>
 802ab7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802ab80:	ec53 2b10 	vmov	r2, r3, d0
 802ab84:	f7d5 fd40 	bl	8000608 <__aeabi_dmul>
 802ab88:	4652      	mov	r2, sl
 802ab8a:	465b      	mov	r3, fp
 802ab8c:	f7d5 fb86 	bl	800029c <__adddf3>
 802ab90:	460b      	mov	r3, r1
 802ab92:	4952      	ldr	r1, [pc, #328]	; (802acdc <_strtod_l+0xb0c>)
 802ab94:	4a56      	ldr	r2, [pc, #344]	; (802acf0 <_strtod_l+0xb20>)
 802ab96:	4019      	ands	r1, r3
 802ab98:	4291      	cmp	r1, r2
 802ab9a:	4682      	mov	sl, r0
 802ab9c:	d95b      	bls.n	802ac56 <_strtod_l+0xa86>
 802ab9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802aba0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 802aba4:	4293      	cmp	r3, r2
 802aba6:	d103      	bne.n	802abb0 <_strtod_l+0x9e0>
 802aba8:	9b08      	ldr	r3, [sp, #32]
 802abaa:	3301      	adds	r3, #1
 802abac:	f43f ad2e 	beq.w	802a60c <_strtod_l+0x43c>
 802abb0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 802ace0 <_strtod_l+0xb10>
 802abb4:	f04f 3aff 	mov.w	sl, #4294967295
 802abb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 802abba:	4648      	mov	r0, r9
 802abbc:	f001 fe27 	bl	802c80e <_Bfree>
 802abc0:	9905      	ldr	r1, [sp, #20]
 802abc2:	4648      	mov	r0, r9
 802abc4:	f001 fe23 	bl	802c80e <_Bfree>
 802abc8:	4641      	mov	r1, r8
 802abca:	4648      	mov	r0, r9
 802abcc:	f001 fe1f 	bl	802c80e <_Bfree>
 802abd0:	4621      	mov	r1, r4
 802abd2:	4648      	mov	r0, r9
 802abd4:	f001 fe1b 	bl	802c80e <_Bfree>
 802abd8:	e619      	b.n	802a80e <_strtod_l+0x63e>
 802abda:	f1ba 0f00 	cmp.w	sl, #0
 802abde:	d11a      	bne.n	802ac16 <_strtod_l+0xa46>
 802abe0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802abe4:	b9eb      	cbnz	r3, 802ac22 <_strtod_l+0xa52>
 802abe6:	2200      	movs	r2, #0
 802abe8:	4b3f      	ldr	r3, [pc, #252]	; (802ace8 <_strtod_l+0xb18>)
 802abea:	4630      	mov	r0, r6
 802abec:	4639      	mov	r1, r7
 802abee:	f7d5 ff7d 	bl	8000aec <__aeabi_dcmplt>
 802abf2:	b9c8      	cbnz	r0, 802ac28 <_strtod_l+0xa58>
 802abf4:	4630      	mov	r0, r6
 802abf6:	4639      	mov	r1, r7
 802abf8:	2200      	movs	r2, #0
 802abfa:	4b3e      	ldr	r3, [pc, #248]	; (802acf4 <_strtod_l+0xb24>)
 802abfc:	f7d5 fd04 	bl	8000608 <__aeabi_dmul>
 802ac00:	4606      	mov	r6, r0
 802ac02:	460f      	mov	r7, r1
 802ac04:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 802ac08:	9618      	str	r6, [sp, #96]	; 0x60
 802ac0a:	9319      	str	r3, [sp, #100]	; 0x64
 802ac0c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 802ac10:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 802ac14:	e79c      	b.n	802ab50 <_strtod_l+0x980>
 802ac16:	f1ba 0f01 	cmp.w	sl, #1
 802ac1a:	d102      	bne.n	802ac22 <_strtod_l+0xa52>
 802ac1c:	2d00      	cmp	r5, #0
 802ac1e:	f43f ad8e 	beq.w	802a73e <_strtod_l+0x56e>
 802ac22:	2200      	movs	r2, #0
 802ac24:	4b34      	ldr	r3, [pc, #208]	; (802acf8 <_strtod_l+0xb28>)
 802ac26:	e78f      	b.n	802ab48 <_strtod_l+0x978>
 802ac28:	2600      	movs	r6, #0
 802ac2a:	4f32      	ldr	r7, [pc, #200]	; (802acf4 <_strtod_l+0xb24>)
 802ac2c:	e7ea      	b.n	802ac04 <_strtod_l+0xa34>
 802ac2e:	4b31      	ldr	r3, [pc, #196]	; (802acf4 <_strtod_l+0xb24>)
 802ac30:	4630      	mov	r0, r6
 802ac32:	4639      	mov	r1, r7
 802ac34:	2200      	movs	r2, #0
 802ac36:	f7d5 fce7 	bl	8000608 <__aeabi_dmul>
 802ac3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802ac3c:	4606      	mov	r6, r0
 802ac3e:	460f      	mov	r7, r1
 802ac40:	b933      	cbnz	r3, 802ac50 <_strtod_l+0xa80>
 802ac42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802ac46:	9010      	str	r0, [sp, #64]	; 0x40
 802ac48:	9311      	str	r3, [sp, #68]	; 0x44
 802ac4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802ac4e:	e7df      	b.n	802ac10 <_strtod_l+0xa40>
 802ac50:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 802ac54:	e7f9      	b.n	802ac4a <_strtod_l+0xa7a>
 802ac56:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 802ac5a:	9b04      	ldr	r3, [sp, #16]
 802ac5c:	2b00      	cmp	r3, #0
 802ac5e:	d1ab      	bne.n	802abb8 <_strtod_l+0x9e8>
 802ac60:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802ac64:	0d1b      	lsrs	r3, r3, #20
 802ac66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802ac68:	051b      	lsls	r3, r3, #20
 802ac6a:	429a      	cmp	r2, r3
 802ac6c:	465d      	mov	r5, fp
 802ac6e:	d1a3      	bne.n	802abb8 <_strtod_l+0x9e8>
 802ac70:	4639      	mov	r1, r7
 802ac72:	4630      	mov	r0, r6
 802ac74:	f7d5 ff78 	bl	8000b68 <__aeabi_d2iz>
 802ac78:	f7d5 fc5c 	bl	8000534 <__aeabi_i2d>
 802ac7c:	460b      	mov	r3, r1
 802ac7e:	4602      	mov	r2, r0
 802ac80:	4639      	mov	r1, r7
 802ac82:	4630      	mov	r0, r6
 802ac84:	f7d5 fb08 	bl	8000298 <__aeabi_dsub>
 802ac88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802ac8a:	4606      	mov	r6, r0
 802ac8c:	460f      	mov	r7, r1
 802ac8e:	b933      	cbnz	r3, 802ac9e <_strtod_l+0xace>
 802ac90:	f1ba 0f00 	cmp.w	sl, #0
 802ac94:	d103      	bne.n	802ac9e <_strtod_l+0xace>
 802ac96:	f3cb 0513 	ubfx	r5, fp, #0, #20
 802ac9a:	2d00      	cmp	r5, #0
 802ac9c:	d06d      	beq.n	802ad7a <_strtod_l+0xbaa>
 802ac9e:	a30a      	add	r3, pc, #40	; (adr r3, 802acc8 <_strtod_l+0xaf8>)
 802aca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802aca4:	4630      	mov	r0, r6
 802aca6:	4639      	mov	r1, r7
 802aca8:	f7d5 ff20 	bl	8000aec <__aeabi_dcmplt>
 802acac:	2800      	cmp	r0, #0
 802acae:	f47f acb8 	bne.w	802a622 <_strtod_l+0x452>
 802acb2:	a307      	add	r3, pc, #28	; (adr r3, 802acd0 <_strtod_l+0xb00>)
 802acb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802acb8:	4630      	mov	r0, r6
 802acba:	4639      	mov	r1, r7
 802acbc:	f7d5 ff34 	bl	8000b28 <__aeabi_dcmpgt>
 802acc0:	2800      	cmp	r0, #0
 802acc2:	f43f af79 	beq.w	802abb8 <_strtod_l+0x9e8>
 802acc6:	e4ac      	b.n	802a622 <_strtod_l+0x452>
 802acc8:	94a03595 	.word	0x94a03595
 802accc:	3fdfffff 	.word	0x3fdfffff
 802acd0:	35afe535 	.word	0x35afe535
 802acd4:	3fe00000 	.word	0x3fe00000
 802acd8:	000fffff 	.word	0x000fffff
 802acdc:	7ff00000 	.word	0x7ff00000
 802ace0:	7fefffff 	.word	0x7fefffff
 802ace4:	39500000 	.word	0x39500000
 802ace8:	3ff00000 	.word	0x3ff00000
 802acec:	7fe00000 	.word	0x7fe00000
 802acf0:	7c9fffff 	.word	0x7c9fffff
 802acf4:	3fe00000 	.word	0x3fe00000
 802acf8:	bff00000 	.word	0xbff00000
 802acfc:	9b04      	ldr	r3, [sp, #16]
 802acfe:	b333      	cbz	r3, 802ad4e <_strtod_l+0xb7e>
 802ad00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802ad02:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802ad06:	d822      	bhi.n	802ad4e <_strtod_l+0xb7e>
 802ad08:	a327      	add	r3, pc, #156	; (adr r3, 802ada8 <_strtod_l+0xbd8>)
 802ad0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ad0e:	4630      	mov	r0, r6
 802ad10:	4639      	mov	r1, r7
 802ad12:	f7d5 fef5 	bl	8000b00 <__aeabi_dcmple>
 802ad16:	b1a0      	cbz	r0, 802ad42 <_strtod_l+0xb72>
 802ad18:	4639      	mov	r1, r7
 802ad1a:	4630      	mov	r0, r6
 802ad1c:	f7d5 ff4c 	bl	8000bb8 <__aeabi_d2uiz>
 802ad20:	2800      	cmp	r0, #0
 802ad22:	bf08      	it	eq
 802ad24:	2001      	moveq	r0, #1
 802ad26:	f7d5 fbf5 	bl	8000514 <__aeabi_ui2d>
 802ad2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802ad2c:	4606      	mov	r6, r0
 802ad2e:	460f      	mov	r7, r1
 802ad30:	bb03      	cbnz	r3, 802ad74 <_strtod_l+0xba4>
 802ad32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802ad36:	9012      	str	r0, [sp, #72]	; 0x48
 802ad38:	9313      	str	r3, [sp, #76]	; 0x4c
 802ad3a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 802ad3e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 802ad42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ad44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802ad46:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 802ad4a:	1a9b      	subs	r3, r3, r2
 802ad4c:	930b      	str	r3, [sp, #44]	; 0x2c
 802ad4e:	ed9d 0b08 	vldr	d0, [sp, #32]
 802ad52:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 802ad56:	f001 fff1 	bl	802cd3c <__ulp>
 802ad5a:	4650      	mov	r0, sl
 802ad5c:	ec53 2b10 	vmov	r2, r3, d0
 802ad60:	4659      	mov	r1, fp
 802ad62:	f7d5 fc51 	bl	8000608 <__aeabi_dmul>
 802ad66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802ad6a:	f7d5 fa97 	bl	800029c <__adddf3>
 802ad6e:	4682      	mov	sl, r0
 802ad70:	468b      	mov	fp, r1
 802ad72:	e772      	b.n	802ac5a <_strtod_l+0xa8a>
 802ad74:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 802ad78:	e7df      	b.n	802ad3a <_strtod_l+0xb6a>
 802ad7a:	a30d      	add	r3, pc, #52	; (adr r3, 802adb0 <_strtod_l+0xbe0>)
 802ad7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ad80:	f7d5 feb4 	bl	8000aec <__aeabi_dcmplt>
 802ad84:	e79c      	b.n	802acc0 <_strtod_l+0xaf0>
 802ad86:	2300      	movs	r3, #0
 802ad88:	930d      	str	r3, [sp, #52]	; 0x34
 802ad8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802ad8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802ad8e:	6013      	str	r3, [r2, #0]
 802ad90:	f7ff ba61 	b.w	802a256 <_strtod_l+0x86>
 802ad94:	2b65      	cmp	r3, #101	; 0x65
 802ad96:	f04f 0200 	mov.w	r2, #0
 802ad9a:	f43f ab4e 	beq.w	802a43a <_strtod_l+0x26a>
 802ad9e:	2101      	movs	r1, #1
 802ada0:	4614      	mov	r4, r2
 802ada2:	9104      	str	r1, [sp, #16]
 802ada4:	f7ff bacb 	b.w	802a33e <_strtod_l+0x16e>
 802ada8:	ffc00000 	.word	0xffc00000
 802adac:	41dfffff 	.word	0x41dfffff
 802adb0:	94a03595 	.word	0x94a03595
 802adb4:	3fcfffff 	.word	0x3fcfffff

0802adb8 <_strtod_r>:
 802adb8:	4b05      	ldr	r3, [pc, #20]	; (802add0 <_strtod_r+0x18>)
 802adba:	681b      	ldr	r3, [r3, #0]
 802adbc:	b410      	push	{r4}
 802adbe:	6a1b      	ldr	r3, [r3, #32]
 802adc0:	4c04      	ldr	r4, [pc, #16]	; (802add4 <_strtod_r+0x1c>)
 802adc2:	2b00      	cmp	r3, #0
 802adc4:	bf08      	it	eq
 802adc6:	4623      	moveq	r3, r4
 802adc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 802adcc:	f7ff ba00 	b.w	802a1d0 <_strtod_l>
 802add0:	200006ac 	.word	0x200006ac
 802add4:	20000710 	.word	0x20000710

0802add8 <_strtol_l.isra.0>:
 802add8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802addc:	4680      	mov	r8, r0
 802adde:	4689      	mov	r9, r1
 802ade0:	4692      	mov	sl, r2
 802ade2:	461e      	mov	r6, r3
 802ade4:	460f      	mov	r7, r1
 802ade6:	463d      	mov	r5, r7
 802ade8:	9808      	ldr	r0, [sp, #32]
 802adea:	f815 4b01 	ldrb.w	r4, [r5], #1
 802adee:	f001 fc2f 	bl	802c650 <__locale_ctype_ptr_l>
 802adf2:	4420      	add	r0, r4
 802adf4:	7843      	ldrb	r3, [r0, #1]
 802adf6:	f013 0308 	ands.w	r3, r3, #8
 802adfa:	d132      	bne.n	802ae62 <_strtol_l.isra.0+0x8a>
 802adfc:	2c2d      	cmp	r4, #45	; 0x2d
 802adfe:	d132      	bne.n	802ae66 <_strtol_l.isra.0+0x8e>
 802ae00:	787c      	ldrb	r4, [r7, #1]
 802ae02:	1cbd      	adds	r5, r7, #2
 802ae04:	2201      	movs	r2, #1
 802ae06:	2e00      	cmp	r6, #0
 802ae08:	d05d      	beq.n	802aec6 <_strtol_l.isra.0+0xee>
 802ae0a:	2e10      	cmp	r6, #16
 802ae0c:	d109      	bne.n	802ae22 <_strtol_l.isra.0+0x4a>
 802ae0e:	2c30      	cmp	r4, #48	; 0x30
 802ae10:	d107      	bne.n	802ae22 <_strtol_l.isra.0+0x4a>
 802ae12:	782b      	ldrb	r3, [r5, #0]
 802ae14:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802ae18:	2b58      	cmp	r3, #88	; 0x58
 802ae1a:	d14f      	bne.n	802aebc <_strtol_l.isra.0+0xe4>
 802ae1c:	786c      	ldrb	r4, [r5, #1]
 802ae1e:	2610      	movs	r6, #16
 802ae20:	3502      	adds	r5, #2
 802ae22:	2a00      	cmp	r2, #0
 802ae24:	bf14      	ite	ne
 802ae26:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 802ae2a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 802ae2e:	2700      	movs	r7, #0
 802ae30:	fbb1 fcf6 	udiv	ip, r1, r6
 802ae34:	4638      	mov	r0, r7
 802ae36:	fb06 1e1c 	mls	lr, r6, ip, r1
 802ae3a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 802ae3e:	2b09      	cmp	r3, #9
 802ae40:	d817      	bhi.n	802ae72 <_strtol_l.isra.0+0x9a>
 802ae42:	461c      	mov	r4, r3
 802ae44:	42a6      	cmp	r6, r4
 802ae46:	dd23      	ble.n	802ae90 <_strtol_l.isra.0+0xb8>
 802ae48:	1c7b      	adds	r3, r7, #1
 802ae4a:	d007      	beq.n	802ae5c <_strtol_l.isra.0+0x84>
 802ae4c:	4584      	cmp	ip, r0
 802ae4e:	d31c      	bcc.n	802ae8a <_strtol_l.isra.0+0xb2>
 802ae50:	d101      	bne.n	802ae56 <_strtol_l.isra.0+0x7e>
 802ae52:	45a6      	cmp	lr, r4
 802ae54:	db19      	blt.n	802ae8a <_strtol_l.isra.0+0xb2>
 802ae56:	fb00 4006 	mla	r0, r0, r6, r4
 802ae5a:	2701      	movs	r7, #1
 802ae5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 802ae60:	e7eb      	b.n	802ae3a <_strtol_l.isra.0+0x62>
 802ae62:	462f      	mov	r7, r5
 802ae64:	e7bf      	b.n	802ade6 <_strtol_l.isra.0+0xe>
 802ae66:	2c2b      	cmp	r4, #43	; 0x2b
 802ae68:	bf04      	itt	eq
 802ae6a:	1cbd      	addeq	r5, r7, #2
 802ae6c:	787c      	ldrbeq	r4, [r7, #1]
 802ae6e:	461a      	mov	r2, r3
 802ae70:	e7c9      	b.n	802ae06 <_strtol_l.isra.0+0x2e>
 802ae72:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 802ae76:	2b19      	cmp	r3, #25
 802ae78:	d801      	bhi.n	802ae7e <_strtol_l.isra.0+0xa6>
 802ae7a:	3c37      	subs	r4, #55	; 0x37
 802ae7c:	e7e2      	b.n	802ae44 <_strtol_l.isra.0+0x6c>
 802ae7e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 802ae82:	2b19      	cmp	r3, #25
 802ae84:	d804      	bhi.n	802ae90 <_strtol_l.isra.0+0xb8>
 802ae86:	3c57      	subs	r4, #87	; 0x57
 802ae88:	e7dc      	b.n	802ae44 <_strtol_l.isra.0+0x6c>
 802ae8a:	f04f 37ff 	mov.w	r7, #4294967295
 802ae8e:	e7e5      	b.n	802ae5c <_strtol_l.isra.0+0x84>
 802ae90:	1c7b      	adds	r3, r7, #1
 802ae92:	d108      	bne.n	802aea6 <_strtol_l.isra.0+0xce>
 802ae94:	2322      	movs	r3, #34	; 0x22
 802ae96:	f8c8 3000 	str.w	r3, [r8]
 802ae9a:	4608      	mov	r0, r1
 802ae9c:	f1ba 0f00 	cmp.w	sl, #0
 802aea0:	d107      	bne.n	802aeb2 <_strtol_l.isra.0+0xda>
 802aea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802aea6:	b102      	cbz	r2, 802aeaa <_strtol_l.isra.0+0xd2>
 802aea8:	4240      	negs	r0, r0
 802aeaa:	f1ba 0f00 	cmp.w	sl, #0
 802aeae:	d0f8      	beq.n	802aea2 <_strtol_l.isra.0+0xca>
 802aeb0:	b10f      	cbz	r7, 802aeb6 <_strtol_l.isra.0+0xde>
 802aeb2:	f105 39ff 	add.w	r9, r5, #4294967295
 802aeb6:	f8ca 9000 	str.w	r9, [sl]
 802aeba:	e7f2      	b.n	802aea2 <_strtol_l.isra.0+0xca>
 802aebc:	2430      	movs	r4, #48	; 0x30
 802aebe:	2e00      	cmp	r6, #0
 802aec0:	d1af      	bne.n	802ae22 <_strtol_l.isra.0+0x4a>
 802aec2:	2608      	movs	r6, #8
 802aec4:	e7ad      	b.n	802ae22 <_strtol_l.isra.0+0x4a>
 802aec6:	2c30      	cmp	r4, #48	; 0x30
 802aec8:	d0a3      	beq.n	802ae12 <_strtol_l.isra.0+0x3a>
 802aeca:	260a      	movs	r6, #10
 802aecc:	e7a9      	b.n	802ae22 <_strtol_l.isra.0+0x4a>
	...

0802aed0 <_strtol_r>:
 802aed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802aed2:	4c06      	ldr	r4, [pc, #24]	; (802aeec <_strtol_r+0x1c>)
 802aed4:	4d06      	ldr	r5, [pc, #24]	; (802aef0 <_strtol_r+0x20>)
 802aed6:	6824      	ldr	r4, [r4, #0]
 802aed8:	6a24      	ldr	r4, [r4, #32]
 802aeda:	2c00      	cmp	r4, #0
 802aedc:	bf08      	it	eq
 802aede:	462c      	moveq	r4, r5
 802aee0:	9400      	str	r4, [sp, #0]
 802aee2:	f7ff ff79 	bl	802add8 <_strtol_l.isra.0>
 802aee6:	b003      	add	sp, #12
 802aee8:	bd30      	pop	{r4, r5, pc}
 802aeea:	bf00      	nop
 802aeec:	200006ac 	.word	0x200006ac
 802aef0:	20000710 	.word	0x20000710

0802aef4 <__swbuf_r>:
 802aef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802aef6:	460e      	mov	r6, r1
 802aef8:	4614      	mov	r4, r2
 802aefa:	4605      	mov	r5, r0
 802aefc:	b118      	cbz	r0, 802af06 <__swbuf_r+0x12>
 802aefe:	6983      	ldr	r3, [r0, #24]
 802af00:	b90b      	cbnz	r3, 802af06 <__swbuf_r+0x12>
 802af02:	f000 fff5 	bl	802bef0 <__sinit>
 802af06:	4b21      	ldr	r3, [pc, #132]	; (802af8c <__swbuf_r+0x98>)
 802af08:	429c      	cmp	r4, r3
 802af0a:	d12a      	bne.n	802af62 <__swbuf_r+0x6e>
 802af0c:	686c      	ldr	r4, [r5, #4]
 802af0e:	69a3      	ldr	r3, [r4, #24]
 802af10:	60a3      	str	r3, [r4, #8]
 802af12:	89a3      	ldrh	r3, [r4, #12]
 802af14:	071a      	lsls	r2, r3, #28
 802af16:	d52e      	bpl.n	802af76 <__swbuf_r+0x82>
 802af18:	6923      	ldr	r3, [r4, #16]
 802af1a:	b363      	cbz	r3, 802af76 <__swbuf_r+0x82>
 802af1c:	6923      	ldr	r3, [r4, #16]
 802af1e:	6820      	ldr	r0, [r4, #0]
 802af20:	1ac0      	subs	r0, r0, r3
 802af22:	6963      	ldr	r3, [r4, #20]
 802af24:	b2f6      	uxtb	r6, r6
 802af26:	4283      	cmp	r3, r0
 802af28:	4637      	mov	r7, r6
 802af2a:	dc04      	bgt.n	802af36 <__swbuf_r+0x42>
 802af2c:	4621      	mov	r1, r4
 802af2e:	4628      	mov	r0, r5
 802af30:	f000 ff74 	bl	802be1c <_fflush_r>
 802af34:	bb28      	cbnz	r0, 802af82 <__swbuf_r+0x8e>
 802af36:	68a3      	ldr	r3, [r4, #8]
 802af38:	3b01      	subs	r3, #1
 802af3a:	60a3      	str	r3, [r4, #8]
 802af3c:	6823      	ldr	r3, [r4, #0]
 802af3e:	1c5a      	adds	r2, r3, #1
 802af40:	6022      	str	r2, [r4, #0]
 802af42:	701e      	strb	r6, [r3, #0]
 802af44:	6963      	ldr	r3, [r4, #20]
 802af46:	3001      	adds	r0, #1
 802af48:	4283      	cmp	r3, r0
 802af4a:	d004      	beq.n	802af56 <__swbuf_r+0x62>
 802af4c:	89a3      	ldrh	r3, [r4, #12]
 802af4e:	07db      	lsls	r3, r3, #31
 802af50:	d519      	bpl.n	802af86 <__swbuf_r+0x92>
 802af52:	2e0a      	cmp	r6, #10
 802af54:	d117      	bne.n	802af86 <__swbuf_r+0x92>
 802af56:	4621      	mov	r1, r4
 802af58:	4628      	mov	r0, r5
 802af5a:	f000 ff5f 	bl	802be1c <_fflush_r>
 802af5e:	b190      	cbz	r0, 802af86 <__swbuf_r+0x92>
 802af60:	e00f      	b.n	802af82 <__swbuf_r+0x8e>
 802af62:	4b0b      	ldr	r3, [pc, #44]	; (802af90 <__swbuf_r+0x9c>)
 802af64:	429c      	cmp	r4, r3
 802af66:	d101      	bne.n	802af6c <__swbuf_r+0x78>
 802af68:	68ac      	ldr	r4, [r5, #8]
 802af6a:	e7d0      	b.n	802af0e <__swbuf_r+0x1a>
 802af6c:	4b09      	ldr	r3, [pc, #36]	; (802af94 <__swbuf_r+0xa0>)
 802af6e:	429c      	cmp	r4, r3
 802af70:	bf08      	it	eq
 802af72:	68ec      	ldreq	r4, [r5, #12]
 802af74:	e7cb      	b.n	802af0e <__swbuf_r+0x1a>
 802af76:	4621      	mov	r1, r4
 802af78:	4628      	mov	r0, r5
 802af7a:	f000 f80d 	bl	802af98 <__swsetup_r>
 802af7e:	2800      	cmp	r0, #0
 802af80:	d0cc      	beq.n	802af1c <__swbuf_r+0x28>
 802af82:	f04f 37ff 	mov.w	r7, #4294967295
 802af86:	4638      	mov	r0, r7
 802af88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802af8a:	bf00      	nop
 802af8c:	0802ef10 	.word	0x0802ef10
 802af90:	0802ef30 	.word	0x0802ef30
 802af94:	0802eef0 	.word	0x0802eef0

0802af98 <__swsetup_r>:
 802af98:	4b32      	ldr	r3, [pc, #200]	; (802b064 <__swsetup_r+0xcc>)
 802af9a:	b570      	push	{r4, r5, r6, lr}
 802af9c:	681d      	ldr	r5, [r3, #0]
 802af9e:	4606      	mov	r6, r0
 802afa0:	460c      	mov	r4, r1
 802afa2:	b125      	cbz	r5, 802afae <__swsetup_r+0x16>
 802afa4:	69ab      	ldr	r3, [r5, #24]
 802afa6:	b913      	cbnz	r3, 802afae <__swsetup_r+0x16>
 802afa8:	4628      	mov	r0, r5
 802afaa:	f000 ffa1 	bl	802bef0 <__sinit>
 802afae:	4b2e      	ldr	r3, [pc, #184]	; (802b068 <__swsetup_r+0xd0>)
 802afb0:	429c      	cmp	r4, r3
 802afb2:	d10f      	bne.n	802afd4 <__swsetup_r+0x3c>
 802afb4:	686c      	ldr	r4, [r5, #4]
 802afb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802afba:	b29a      	uxth	r2, r3
 802afbc:	0715      	lsls	r5, r2, #28
 802afbe:	d42c      	bmi.n	802b01a <__swsetup_r+0x82>
 802afc0:	06d0      	lsls	r0, r2, #27
 802afc2:	d411      	bmi.n	802afe8 <__swsetup_r+0x50>
 802afc4:	2209      	movs	r2, #9
 802afc6:	6032      	str	r2, [r6, #0]
 802afc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802afcc:	81a3      	strh	r3, [r4, #12]
 802afce:	f04f 30ff 	mov.w	r0, #4294967295
 802afd2:	e03e      	b.n	802b052 <__swsetup_r+0xba>
 802afd4:	4b25      	ldr	r3, [pc, #148]	; (802b06c <__swsetup_r+0xd4>)
 802afd6:	429c      	cmp	r4, r3
 802afd8:	d101      	bne.n	802afde <__swsetup_r+0x46>
 802afda:	68ac      	ldr	r4, [r5, #8]
 802afdc:	e7eb      	b.n	802afb6 <__swsetup_r+0x1e>
 802afde:	4b24      	ldr	r3, [pc, #144]	; (802b070 <__swsetup_r+0xd8>)
 802afe0:	429c      	cmp	r4, r3
 802afe2:	bf08      	it	eq
 802afe4:	68ec      	ldreq	r4, [r5, #12]
 802afe6:	e7e6      	b.n	802afb6 <__swsetup_r+0x1e>
 802afe8:	0751      	lsls	r1, r2, #29
 802afea:	d512      	bpl.n	802b012 <__swsetup_r+0x7a>
 802afec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802afee:	b141      	cbz	r1, 802b002 <__swsetup_r+0x6a>
 802aff0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802aff4:	4299      	cmp	r1, r3
 802aff6:	d002      	beq.n	802affe <__swsetup_r+0x66>
 802aff8:	4630      	mov	r0, r6
 802affa:	f001 ffe1 	bl	802cfc0 <_free_r>
 802affe:	2300      	movs	r3, #0
 802b000:	6363      	str	r3, [r4, #52]	; 0x34
 802b002:	89a3      	ldrh	r3, [r4, #12]
 802b004:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802b008:	81a3      	strh	r3, [r4, #12]
 802b00a:	2300      	movs	r3, #0
 802b00c:	6063      	str	r3, [r4, #4]
 802b00e:	6923      	ldr	r3, [r4, #16]
 802b010:	6023      	str	r3, [r4, #0]
 802b012:	89a3      	ldrh	r3, [r4, #12]
 802b014:	f043 0308 	orr.w	r3, r3, #8
 802b018:	81a3      	strh	r3, [r4, #12]
 802b01a:	6923      	ldr	r3, [r4, #16]
 802b01c:	b94b      	cbnz	r3, 802b032 <__swsetup_r+0x9a>
 802b01e:	89a3      	ldrh	r3, [r4, #12]
 802b020:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802b024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b028:	d003      	beq.n	802b032 <__swsetup_r+0x9a>
 802b02a:	4621      	mov	r1, r4
 802b02c:	4630      	mov	r0, r6
 802b02e:	f001 fb47 	bl	802c6c0 <__smakebuf_r>
 802b032:	89a2      	ldrh	r2, [r4, #12]
 802b034:	f012 0301 	ands.w	r3, r2, #1
 802b038:	d00c      	beq.n	802b054 <__swsetup_r+0xbc>
 802b03a:	2300      	movs	r3, #0
 802b03c:	60a3      	str	r3, [r4, #8]
 802b03e:	6963      	ldr	r3, [r4, #20]
 802b040:	425b      	negs	r3, r3
 802b042:	61a3      	str	r3, [r4, #24]
 802b044:	6923      	ldr	r3, [r4, #16]
 802b046:	b953      	cbnz	r3, 802b05e <__swsetup_r+0xc6>
 802b048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b04c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802b050:	d1ba      	bne.n	802afc8 <__swsetup_r+0x30>
 802b052:	bd70      	pop	{r4, r5, r6, pc}
 802b054:	0792      	lsls	r2, r2, #30
 802b056:	bf58      	it	pl
 802b058:	6963      	ldrpl	r3, [r4, #20]
 802b05a:	60a3      	str	r3, [r4, #8]
 802b05c:	e7f2      	b.n	802b044 <__swsetup_r+0xac>
 802b05e:	2000      	movs	r0, #0
 802b060:	e7f7      	b.n	802b052 <__swsetup_r+0xba>
 802b062:	bf00      	nop
 802b064:	200006ac 	.word	0x200006ac
 802b068:	0802ef10 	.word	0x0802ef10
 802b06c:	0802ef30 	.word	0x0802ef30
 802b070:	0802eef0 	.word	0x0802eef0

0802b074 <abort>:
 802b074:	b508      	push	{r3, lr}
 802b076:	2006      	movs	r0, #6
 802b078:	f002 f9fa 	bl	802d470 <raise>
 802b07c:	2001      	movs	r0, #1
 802b07e:	f7e9 fc7b 	bl	8014978 <_exit>

0802b082 <quorem>:
 802b082:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b086:	6903      	ldr	r3, [r0, #16]
 802b088:	690c      	ldr	r4, [r1, #16]
 802b08a:	42a3      	cmp	r3, r4
 802b08c:	4680      	mov	r8, r0
 802b08e:	f2c0 8082 	blt.w	802b196 <quorem+0x114>
 802b092:	3c01      	subs	r4, #1
 802b094:	f101 0714 	add.w	r7, r1, #20
 802b098:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 802b09c:	f100 0614 	add.w	r6, r0, #20
 802b0a0:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 802b0a4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 802b0a8:	eb06 030c 	add.w	r3, r6, ip
 802b0ac:	3501      	adds	r5, #1
 802b0ae:	eb07 090c 	add.w	r9, r7, ip
 802b0b2:	9301      	str	r3, [sp, #4]
 802b0b4:	fbb0 f5f5 	udiv	r5, r0, r5
 802b0b8:	b395      	cbz	r5, 802b120 <quorem+0x9e>
 802b0ba:	f04f 0a00 	mov.w	sl, #0
 802b0be:	4638      	mov	r0, r7
 802b0c0:	46b6      	mov	lr, r6
 802b0c2:	46d3      	mov	fp, sl
 802b0c4:	f850 2b04 	ldr.w	r2, [r0], #4
 802b0c8:	b293      	uxth	r3, r2
 802b0ca:	fb05 a303 	mla	r3, r5, r3, sl
 802b0ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802b0d2:	b29b      	uxth	r3, r3
 802b0d4:	ebab 0303 	sub.w	r3, fp, r3
 802b0d8:	0c12      	lsrs	r2, r2, #16
 802b0da:	f8de b000 	ldr.w	fp, [lr]
 802b0de:	fb05 a202 	mla	r2, r5, r2, sl
 802b0e2:	fa13 f38b 	uxtah	r3, r3, fp
 802b0e6:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 802b0ea:	fa1f fb82 	uxth.w	fp, r2
 802b0ee:	f8de 2000 	ldr.w	r2, [lr]
 802b0f2:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 802b0f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802b0fa:	b29b      	uxth	r3, r3
 802b0fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802b100:	4581      	cmp	r9, r0
 802b102:	ea4f 4b22 	mov.w	fp, r2, asr #16
 802b106:	f84e 3b04 	str.w	r3, [lr], #4
 802b10a:	d2db      	bcs.n	802b0c4 <quorem+0x42>
 802b10c:	f856 300c 	ldr.w	r3, [r6, ip]
 802b110:	b933      	cbnz	r3, 802b120 <quorem+0x9e>
 802b112:	9b01      	ldr	r3, [sp, #4]
 802b114:	3b04      	subs	r3, #4
 802b116:	429e      	cmp	r6, r3
 802b118:	461a      	mov	r2, r3
 802b11a:	d330      	bcc.n	802b17e <quorem+0xfc>
 802b11c:	f8c8 4010 	str.w	r4, [r8, #16]
 802b120:	4640      	mov	r0, r8
 802b122:	f001 fd93 	bl	802cc4c <__mcmp>
 802b126:	2800      	cmp	r0, #0
 802b128:	db25      	blt.n	802b176 <quorem+0xf4>
 802b12a:	3501      	adds	r5, #1
 802b12c:	4630      	mov	r0, r6
 802b12e:	f04f 0c00 	mov.w	ip, #0
 802b132:	f857 2b04 	ldr.w	r2, [r7], #4
 802b136:	f8d0 e000 	ldr.w	lr, [r0]
 802b13a:	b293      	uxth	r3, r2
 802b13c:	ebac 0303 	sub.w	r3, ip, r3
 802b140:	0c12      	lsrs	r2, r2, #16
 802b142:	fa13 f38e 	uxtah	r3, r3, lr
 802b146:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 802b14a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802b14e:	b29b      	uxth	r3, r3
 802b150:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802b154:	45b9      	cmp	r9, r7
 802b156:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802b15a:	f840 3b04 	str.w	r3, [r0], #4
 802b15e:	d2e8      	bcs.n	802b132 <quorem+0xb0>
 802b160:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 802b164:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 802b168:	b92a      	cbnz	r2, 802b176 <quorem+0xf4>
 802b16a:	3b04      	subs	r3, #4
 802b16c:	429e      	cmp	r6, r3
 802b16e:	461a      	mov	r2, r3
 802b170:	d30b      	bcc.n	802b18a <quorem+0x108>
 802b172:	f8c8 4010 	str.w	r4, [r8, #16]
 802b176:	4628      	mov	r0, r5
 802b178:	b003      	add	sp, #12
 802b17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b17e:	6812      	ldr	r2, [r2, #0]
 802b180:	3b04      	subs	r3, #4
 802b182:	2a00      	cmp	r2, #0
 802b184:	d1ca      	bne.n	802b11c <quorem+0x9a>
 802b186:	3c01      	subs	r4, #1
 802b188:	e7c5      	b.n	802b116 <quorem+0x94>
 802b18a:	6812      	ldr	r2, [r2, #0]
 802b18c:	3b04      	subs	r3, #4
 802b18e:	2a00      	cmp	r2, #0
 802b190:	d1ef      	bne.n	802b172 <quorem+0xf0>
 802b192:	3c01      	subs	r4, #1
 802b194:	e7ea      	b.n	802b16c <quorem+0xea>
 802b196:	2000      	movs	r0, #0
 802b198:	e7ee      	b.n	802b178 <quorem+0xf6>
 802b19a:	0000      	movs	r0, r0
 802b19c:	0000      	movs	r0, r0
	...

0802b1a0 <_dtoa_r>:
 802b1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b1a4:	ec57 6b10 	vmov	r6, r7, d0
 802b1a8:	b097      	sub	sp, #92	; 0x5c
 802b1aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802b1ac:	9106      	str	r1, [sp, #24]
 802b1ae:	4604      	mov	r4, r0
 802b1b0:	920b      	str	r2, [sp, #44]	; 0x2c
 802b1b2:	9312      	str	r3, [sp, #72]	; 0x48
 802b1b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802b1b8:	e9cd 6700 	strd	r6, r7, [sp]
 802b1bc:	b93d      	cbnz	r5, 802b1ce <_dtoa_r+0x2e>
 802b1be:	2010      	movs	r0, #16
 802b1c0:	f001 fabe 	bl	802c740 <malloc>
 802b1c4:	6260      	str	r0, [r4, #36]	; 0x24
 802b1c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802b1ca:	6005      	str	r5, [r0, #0]
 802b1cc:	60c5      	str	r5, [r0, #12]
 802b1ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b1d0:	6819      	ldr	r1, [r3, #0]
 802b1d2:	b151      	cbz	r1, 802b1ea <_dtoa_r+0x4a>
 802b1d4:	685a      	ldr	r2, [r3, #4]
 802b1d6:	604a      	str	r2, [r1, #4]
 802b1d8:	2301      	movs	r3, #1
 802b1da:	4093      	lsls	r3, r2
 802b1dc:	608b      	str	r3, [r1, #8]
 802b1de:	4620      	mov	r0, r4
 802b1e0:	f001 fb15 	bl	802c80e <_Bfree>
 802b1e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b1e6:	2200      	movs	r2, #0
 802b1e8:	601a      	str	r2, [r3, #0]
 802b1ea:	1e3b      	subs	r3, r7, #0
 802b1ec:	bfbb      	ittet	lt
 802b1ee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802b1f2:	9301      	strlt	r3, [sp, #4]
 802b1f4:	2300      	movge	r3, #0
 802b1f6:	2201      	movlt	r2, #1
 802b1f8:	bfac      	ite	ge
 802b1fa:	f8c8 3000 	strge.w	r3, [r8]
 802b1fe:	f8c8 2000 	strlt.w	r2, [r8]
 802b202:	4baf      	ldr	r3, [pc, #700]	; (802b4c0 <_dtoa_r+0x320>)
 802b204:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802b208:	ea33 0308 	bics.w	r3, r3, r8
 802b20c:	d114      	bne.n	802b238 <_dtoa_r+0x98>
 802b20e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802b210:	f242 730f 	movw	r3, #9999	; 0x270f
 802b214:	6013      	str	r3, [r2, #0]
 802b216:	9b00      	ldr	r3, [sp, #0]
 802b218:	b923      	cbnz	r3, 802b224 <_dtoa_r+0x84>
 802b21a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 802b21e:	2800      	cmp	r0, #0
 802b220:	f000 8542 	beq.w	802bca8 <_dtoa_r+0xb08>
 802b224:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b226:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 802b4d4 <_dtoa_r+0x334>
 802b22a:	2b00      	cmp	r3, #0
 802b22c:	f000 8544 	beq.w	802bcb8 <_dtoa_r+0xb18>
 802b230:	f10b 0303 	add.w	r3, fp, #3
 802b234:	f000 bd3e 	b.w	802bcb4 <_dtoa_r+0xb14>
 802b238:	e9dd 6700 	ldrd	r6, r7, [sp]
 802b23c:	2200      	movs	r2, #0
 802b23e:	2300      	movs	r3, #0
 802b240:	4630      	mov	r0, r6
 802b242:	4639      	mov	r1, r7
 802b244:	f7d5 fc48 	bl	8000ad8 <__aeabi_dcmpeq>
 802b248:	4681      	mov	r9, r0
 802b24a:	b168      	cbz	r0, 802b268 <_dtoa_r+0xc8>
 802b24c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802b24e:	2301      	movs	r3, #1
 802b250:	6013      	str	r3, [r2, #0]
 802b252:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b254:	2b00      	cmp	r3, #0
 802b256:	f000 8524 	beq.w	802bca2 <_dtoa_r+0xb02>
 802b25a:	4b9a      	ldr	r3, [pc, #616]	; (802b4c4 <_dtoa_r+0x324>)
 802b25c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802b25e:	f103 3bff 	add.w	fp, r3, #4294967295
 802b262:	6013      	str	r3, [r2, #0]
 802b264:	f000 bd28 	b.w	802bcb8 <_dtoa_r+0xb18>
 802b268:	aa14      	add	r2, sp, #80	; 0x50
 802b26a:	a915      	add	r1, sp, #84	; 0x54
 802b26c:	ec47 6b10 	vmov	d0, r6, r7
 802b270:	4620      	mov	r0, r4
 802b272:	f001 fdd9 	bl	802ce28 <__d2b>
 802b276:	f3c8 550a 	ubfx	r5, r8, #20, #11
 802b27a:	9004      	str	r0, [sp, #16]
 802b27c:	2d00      	cmp	r5, #0
 802b27e:	d07c      	beq.n	802b37a <_dtoa_r+0x1da>
 802b280:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802b284:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 802b288:	46b2      	mov	sl, r6
 802b28a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 802b28e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802b292:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 802b296:	2200      	movs	r2, #0
 802b298:	4b8b      	ldr	r3, [pc, #556]	; (802b4c8 <_dtoa_r+0x328>)
 802b29a:	4650      	mov	r0, sl
 802b29c:	4659      	mov	r1, fp
 802b29e:	f7d4 fffb 	bl	8000298 <__aeabi_dsub>
 802b2a2:	a381      	add	r3, pc, #516	; (adr r3, 802b4a8 <_dtoa_r+0x308>)
 802b2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b2a8:	f7d5 f9ae 	bl	8000608 <__aeabi_dmul>
 802b2ac:	a380      	add	r3, pc, #512	; (adr r3, 802b4b0 <_dtoa_r+0x310>)
 802b2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b2b2:	f7d4 fff3 	bl	800029c <__adddf3>
 802b2b6:	4606      	mov	r6, r0
 802b2b8:	4628      	mov	r0, r5
 802b2ba:	460f      	mov	r7, r1
 802b2bc:	f7d5 f93a 	bl	8000534 <__aeabi_i2d>
 802b2c0:	a37d      	add	r3, pc, #500	; (adr r3, 802b4b8 <_dtoa_r+0x318>)
 802b2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b2c6:	f7d5 f99f 	bl	8000608 <__aeabi_dmul>
 802b2ca:	4602      	mov	r2, r0
 802b2cc:	460b      	mov	r3, r1
 802b2ce:	4630      	mov	r0, r6
 802b2d0:	4639      	mov	r1, r7
 802b2d2:	f7d4 ffe3 	bl	800029c <__adddf3>
 802b2d6:	4606      	mov	r6, r0
 802b2d8:	460f      	mov	r7, r1
 802b2da:	f7d5 fc45 	bl	8000b68 <__aeabi_d2iz>
 802b2de:	2200      	movs	r2, #0
 802b2e0:	4682      	mov	sl, r0
 802b2e2:	2300      	movs	r3, #0
 802b2e4:	4630      	mov	r0, r6
 802b2e6:	4639      	mov	r1, r7
 802b2e8:	f7d5 fc00 	bl	8000aec <__aeabi_dcmplt>
 802b2ec:	b148      	cbz	r0, 802b302 <_dtoa_r+0x162>
 802b2ee:	4650      	mov	r0, sl
 802b2f0:	f7d5 f920 	bl	8000534 <__aeabi_i2d>
 802b2f4:	4632      	mov	r2, r6
 802b2f6:	463b      	mov	r3, r7
 802b2f8:	f7d5 fbee 	bl	8000ad8 <__aeabi_dcmpeq>
 802b2fc:	b908      	cbnz	r0, 802b302 <_dtoa_r+0x162>
 802b2fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 802b302:	f1ba 0f16 	cmp.w	sl, #22
 802b306:	d859      	bhi.n	802b3bc <_dtoa_r+0x21c>
 802b308:	4970      	ldr	r1, [pc, #448]	; (802b4cc <_dtoa_r+0x32c>)
 802b30a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 802b30e:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b312:	e9d1 0100 	ldrd	r0, r1, [r1]
 802b316:	f7d5 fc07 	bl	8000b28 <__aeabi_dcmpgt>
 802b31a:	2800      	cmp	r0, #0
 802b31c:	d050      	beq.n	802b3c0 <_dtoa_r+0x220>
 802b31e:	f10a 3aff 	add.w	sl, sl, #4294967295
 802b322:	2300      	movs	r3, #0
 802b324:	930f      	str	r3, [sp, #60]	; 0x3c
 802b326:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802b328:	1b5d      	subs	r5, r3, r5
 802b32a:	f1b5 0801 	subs.w	r8, r5, #1
 802b32e:	bf49      	itett	mi
 802b330:	f1c5 0301 	rsbmi	r3, r5, #1
 802b334:	2300      	movpl	r3, #0
 802b336:	9305      	strmi	r3, [sp, #20]
 802b338:	f04f 0800 	movmi.w	r8, #0
 802b33c:	bf58      	it	pl
 802b33e:	9305      	strpl	r3, [sp, #20]
 802b340:	f1ba 0f00 	cmp.w	sl, #0
 802b344:	db3e      	blt.n	802b3c4 <_dtoa_r+0x224>
 802b346:	2300      	movs	r3, #0
 802b348:	44d0      	add	r8, sl
 802b34a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 802b34e:	9307      	str	r3, [sp, #28]
 802b350:	9b06      	ldr	r3, [sp, #24]
 802b352:	2b09      	cmp	r3, #9
 802b354:	f200 8090 	bhi.w	802b478 <_dtoa_r+0x2d8>
 802b358:	2b05      	cmp	r3, #5
 802b35a:	bfc4      	itt	gt
 802b35c:	3b04      	subgt	r3, #4
 802b35e:	9306      	strgt	r3, [sp, #24]
 802b360:	9b06      	ldr	r3, [sp, #24]
 802b362:	f1a3 0302 	sub.w	r3, r3, #2
 802b366:	bfcc      	ite	gt
 802b368:	2500      	movgt	r5, #0
 802b36a:	2501      	movle	r5, #1
 802b36c:	2b03      	cmp	r3, #3
 802b36e:	f200 808f 	bhi.w	802b490 <_dtoa_r+0x2f0>
 802b372:	e8df f003 	tbb	[pc, r3]
 802b376:	7f7d      	.short	0x7f7d
 802b378:	7131      	.short	0x7131
 802b37a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 802b37e:	441d      	add	r5, r3
 802b380:	f205 4032 	addw	r0, r5, #1074	; 0x432
 802b384:	2820      	cmp	r0, #32
 802b386:	dd13      	ble.n	802b3b0 <_dtoa_r+0x210>
 802b388:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 802b38c:	9b00      	ldr	r3, [sp, #0]
 802b38e:	fa08 f800 	lsl.w	r8, r8, r0
 802b392:	f205 4012 	addw	r0, r5, #1042	; 0x412
 802b396:	fa23 f000 	lsr.w	r0, r3, r0
 802b39a:	ea48 0000 	orr.w	r0, r8, r0
 802b39e:	f7d5 f8b9 	bl	8000514 <__aeabi_ui2d>
 802b3a2:	2301      	movs	r3, #1
 802b3a4:	4682      	mov	sl, r0
 802b3a6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 802b3aa:	3d01      	subs	r5, #1
 802b3ac:	9313      	str	r3, [sp, #76]	; 0x4c
 802b3ae:	e772      	b.n	802b296 <_dtoa_r+0xf6>
 802b3b0:	9b00      	ldr	r3, [sp, #0]
 802b3b2:	f1c0 0020 	rsb	r0, r0, #32
 802b3b6:	fa03 f000 	lsl.w	r0, r3, r0
 802b3ba:	e7f0      	b.n	802b39e <_dtoa_r+0x1fe>
 802b3bc:	2301      	movs	r3, #1
 802b3be:	e7b1      	b.n	802b324 <_dtoa_r+0x184>
 802b3c0:	900f      	str	r0, [sp, #60]	; 0x3c
 802b3c2:	e7b0      	b.n	802b326 <_dtoa_r+0x186>
 802b3c4:	9b05      	ldr	r3, [sp, #20]
 802b3c6:	eba3 030a 	sub.w	r3, r3, sl
 802b3ca:	9305      	str	r3, [sp, #20]
 802b3cc:	f1ca 0300 	rsb	r3, sl, #0
 802b3d0:	9307      	str	r3, [sp, #28]
 802b3d2:	2300      	movs	r3, #0
 802b3d4:	930e      	str	r3, [sp, #56]	; 0x38
 802b3d6:	e7bb      	b.n	802b350 <_dtoa_r+0x1b0>
 802b3d8:	2301      	movs	r3, #1
 802b3da:	930a      	str	r3, [sp, #40]	; 0x28
 802b3dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802b3de:	2b00      	cmp	r3, #0
 802b3e0:	dd59      	ble.n	802b496 <_dtoa_r+0x2f6>
 802b3e2:	9302      	str	r3, [sp, #8]
 802b3e4:	4699      	mov	r9, r3
 802b3e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802b3e8:	2200      	movs	r2, #0
 802b3ea:	6072      	str	r2, [r6, #4]
 802b3ec:	2204      	movs	r2, #4
 802b3ee:	f102 0014 	add.w	r0, r2, #20
 802b3f2:	4298      	cmp	r0, r3
 802b3f4:	6871      	ldr	r1, [r6, #4]
 802b3f6:	d953      	bls.n	802b4a0 <_dtoa_r+0x300>
 802b3f8:	4620      	mov	r0, r4
 802b3fa:	f001 f9d4 	bl	802c7a6 <_Balloc>
 802b3fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b400:	6030      	str	r0, [r6, #0]
 802b402:	f1b9 0f0e 	cmp.w	r9, #14
 802b406:	f8d3 b000 	ldr.w	fp, [r3]
 802b40a:	f200 80e6 	bhi.w	802b5da <_dtoa_r+0x43a>
 802b40e:	2d00      	cmp	r5, #0
 802b410:	f000 80e3 	beq.w	802b5da <_dtoa_r+0x43a>
 802b414:	ed9d 7b00 	vldr	d7, [sp]
 802b418:	f1ba 0f00 	cmp.w	sl, #0
 802b41c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 802b420:	dd74      	ble.n	802b50c <_dtoa_r+0x36c>
 802b422:	4a2a      	ldr	r2, [pc, #168]	; (802b4cc <_dtoa_r+0x32c>)
 802b424:	f00a 030f 	and.w	r3, sl, #15
 802b428:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802b42c:	ed93 7b00 	vldr	d7, [r3]
 802b430:	ea4f 162a 	mov.w	r6, sl, asr #4
 802b434:	06f0      	lsls	r0, r6, #27
 802b436:	ed8d 7b08 	vstr	d7, [sp, #32]
 802b43a:	d565      	bpl.n	802b508 <_dtoa_r+0x368>
 802b43c:	4b24      	ldr	r3, [pc, #144]	; (802b4d0 <_dtoa_r+0x330>)
 802b43e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802b442:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802b446:	f7d5 fa09 	bl	800085c <__aeabi_ddiv>
 802b44a:	e9cd 0100 	strd	r0, r1, [sp]
 802b44e:	f006 060f 	and.w	r6, r6, #15
 802b452:	2503      	movs	r5, #3
 802b454:	4f1e      	ldr	r7, [pc, #120]	; (802b4d0 <_dtoa_r+0x330>)
 802b456:	e04c      	b.n	802b4f2 <_dtoa_r+0x352>
 802b458:	2301      	movs	r3, #1
 802b45a:	930a      	str	r3, [sp, #40]	; 0x28
 802b45c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802b45e:	4453      	add	r3, sl
 802b460:	f103 0901 	add.w	r9, r3, #1
 802b464:	9302      	str	r3, [sp, #8]
 802b466:	464b      	mov	r3, r9
 802b468:	2b01      	cmp	r3, #1
 802b46a:	bfb8      	it	lt
 802b46c:	2301      	movlt	r3, #1
 802b46e:	e7ba      	b.n	802b3e6 <_dtoa_r+0x246>
 802b470:	2300      	movs	r3, #0
 802b472:	e7b2      	b.n	802b3da <_dtoa_r+0x23a>
 802b474:	2300      	movs	r3, #0
 802b476:	e7f0      	b.n	802b45a <_dtoa_r+0x2ba>
 802b478:	2501      	movs	r5, #1
 802b47a:	2300      	movs	r3, #0
 802b47c:	9306      	str	r3, [sp, #24]
 802b47e:	950a      	str	r5, [sp, #40]	; 0x28
 802b480:	f04f 33ff 	mov.w	r3, #4294967295
 802b484:	9302      	str	r3, [sp, #8]
 802b486:	4699      	mov	r9, r3
 802b488:	2200      	movs	r2, #0
 802b48a:	2312      	movs	r3, #18
 802b48c:	920b      	str	r2, [sp, #44]	; 0x2c
 802b48e:	e7aa      	b.n	802b3e6 <_dtoa_r+0x246>
 802b490:	2301      	movs	r3, #1
 802b492:	930a      	str	r3, [sp, #40]	; 0x28
 802b494:	e7f4      	b.n	802b480 <_dtoa_r+0x2e0>
 802b496:	2301      	movs	r3, #1
 802b498:	9302      	str	r3, [sp, #8]
 802b49a:	4699      	mov	r9, r3
 802b49c:	461a      	mov	r2, r3
 802b49e:	e7f5      	b.n	802b48c <_dtoa_r+0x2ec>
 802b4a0:	3101      	adds	r1, #1
 802b4a2:	6071      	str	r1, [r6, #4]
 802b4a4:	0052      	lsls	r2, r2, #1
 802b4a6:	e7a2      	b.n	802b3ee <_dtoa_r+0x24e>
 802b4a8:	636f4361 	.word	0x636f4361
 802b4ac:	3fd287a7 	.word	0x3fd287a7
 802b4b0:	8b60c8b3 	.word	0x8b60c8b3
 802b4b4:	3fc68a28 	.word	0x3fc68a28
 802b4b8:	509f79fb 	.word	0x509f79fb
 802b4bc:	3fd34413 	.word	0x3fd34413
 802b4c0:	7ff00000 	.word	0x7ff00000
 802b4c4:	0802ee62 	.word	0x0802ee62
 802b4c8:	3ff80000 	.word	0x3ff80000
 802b4cc:	0802ef88 	.word	0x0802ef88
 802b4d0:	0802ef60 	.word	0x0802ef60
 802b4d4:	0802eee9 	.word	0x0802eee9
 802b4d8:	07f1      	lsls	r1, r6, #31
 802b4da:	d508      	bpl.n	802b4ee <_dtoa_r+0x34e>
 802b4dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802b4e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 802b4e4:	f7d5 f890 	bl	8000608 <__aeabi_dmul>
 802b4e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802b4ec:	3501      	adds	r5, #1
 802b4ee:	1076      	asrs	r6, r6, #1
 802b4f0:	3708      	adds	r7, #8
 802b4f2:	2e00      	cmp	r6, #0
 802b4f4:	d1f0      	bne.n	802b4d8 <_dtoa_r+0x338>
 802b4f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802b4fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b4fe:	f7d5 f9ad 	bl	800085c <__aeabi_ddiv>
 802b502:	e9cd 0100 	strd	r0, r1, [sp]
 802b506:	e01a      	b.n	802b53e <_dtoa_r+0x39e>
 802b508:	2502      	movs	r5, #2
 802b50a:	e7a3      	b.n	802b454 <_dtoa_r+0x2b4>
 802b50c:	f000 80a0 	beq.w	802b650 <_dtoa_r+0x4b0>
 802b510:	f1ca 0600 	rsb	r6, sl, #0
 802b514:	4b9f      	ldr	r3, [pc, #636]	; (802b794 <_dtoa_r+0x5f4>)
 802b516:	4fa0      	ldr	r7, [pc, #640]	; (802b798 <_dtoa_r+0x5f8>)
 802b518:	f006 020f 	and.w	r2, r6, #15
 802b51c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802b520:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b524:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802b528:	f7d5 f86e 	bl	8000608 <__aeabi_dmul>
 802b52c:	e9cd 0100 	strd	r0, r1, [sp]
 802b530:	1136      	asrs	r6, r6, #4
 802b532:	2300      	movs	r3, #0
 802b534:	2502      	movs	r5, #2
 802b536:	2e00      	cmp	r6, #0
 802b538:	d17f      	bne.n	802b63a <_dtoa_r+0x49a>
 802b53a:	2b00      	cmp	r3, #0
 802b53c:	d1e1      	bne.n	802b502 <_dtoa_r+0x362>
 802b53e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802b540:	2b00      	cmp	r3, #0
 802b542:	f000 8087 	beq.w	802b654 <_dtoa_r+0x4b4>
 802b546:	e9dd 6700 	ldrd	r6, r7, [sp]
 802b54a:	2200      	movs	r2, #0
 802b54c:	4b93      	ldr	r3, [pc, #588]	; (802b79c <_dtoa_r+0x5fc>)
 802b54e:	4630      	mov	r0, r6
 802b550:	4639      	mov	r1, r7
 802b552:	f7d5 facb 	bl	8000aec <__aeabi_dcmplt>
 802b556:	2800      	cmp	r0, #0
 802b558:	d07c      	beq.n	802b654 <_dtoa_r+0x4b4>
 802b55a:	f1b9 0f00 	cmp.w	r9, #0
 802b55e:	d079      	beq.n	802b654 <_dtoa_r+0x4b4>
 802b560:	9b02      	ldr	r3, [sp, #8]
 802b562:	2b00      	cmp	r3, #0
 802b564:	dd35      	ble.n	802b5d2 <_dtoa_r+0x432>
 802b566:	f10a 33ff 	add.w	r3, sl, #4294967295
 802b56a:	9308      	str	r3, [sp, #32]
 802b56c:	4639      	mov	r1, r7
 802b56e:	2200      	movs	r2, #0
 802b570:	4b8b      	ldr	r3, [pc, #556]	; (802b7a0 <_dtoa_r+0x600>)
 802b572:	4630      	mov	r0, r6
 802b574:	f7d5 f848 	bl	8000608 <__aeabi_dmul>
 802b578:	e9cd 0100 	strd	r0, r1, [sp]
 802b57c:	9f02      	ldr	r7, [sp, #8]
 802b57e:	3501      	adds	r5, #1
 802b580:	4628      	mov	r0, r5
 802b582:	f7d4 ffd7 	bl	8000534 <__aeabi_i2d>
 802b586:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b58a:	f7d5 f83d 	bl	8000608 <__aeabi_dmul>
 802b58e:	2200      	movs	r2, #0
 802b590:	4b84      	ldr	r3, [pc, #528]	; (802b7a4 <_dtoa_r+0x604>)
 802b592:	f7d4 fe83 	bl	800029c <__adddf3>
 802b596:	4605      	mov	r5, r0
 802b598:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 802b59c:	2f00      	cmp	r7, #0
 802b59e:	d15d      	bne.n	802b65c <_dtoa_r+0x4bc>
 802b5a0:	2200      	movs	r2, #0
 802b5a2:	4b81      	ldr	r3, [pc, #516]	; (802b7a8 <_dtoa_r+0x608>)
 802b5a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b5a8:	f7d4 fe76 	bl	8000298 <__aeabi_dsub>
 802b5ac:	462a      	mov	r2, r5
 802b5ae:	4633      	mov	r3, r6
 802b5b0:	e9cd 0100 	strd	r0, r1, [sp]
 802b5b4:	f7d5 fab8 	bl	8000b28 <__aeabi_dcmpgt>
 802b5b8:	2800      	cmp	r0, #0
 802b5ba:	f040 8288 	bne.w	802bace <_dtoa_r+0x92e>
 802b5be:	462a      	mov	r2, r5
 802b5c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 802b5c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b5c8:	f7d5 fa90 	bl	8000aec <__aeabi_dcmplt>
 802b5cc:	2800      	cmp	r0, #0
 802b5ce:	f040 827c 	bne.w	802baca <_dtoa_r+0x92a>
 802b5d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802b5d6:	e9cd 2300 	strd	r2, r3, [sp]
 802b5da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802b5dc:	2b00      	cmp	r3, #0
 802b5de:	f2c0 8150 	blt.w	802b882 <_dtoa_r+0x6e2>
 802b5e2:	f1ba 0f0e 	cmp.w	sl, #14
 802b5e6:	f300 814c 	bgt.w	802b882 <_dtoa_r+0x6e2>
 802b5ea:	4b6a      	ldr	r3, [pc, #424]	; (802b794 <_dtoa_r+0x5f4>)
 802b5ec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802b5f0:	ed93 7b00 	vldr	d7, [r3]
 802b5f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802b5f6:	2b00      	cmp	r3, #0
 802b5f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 802b5fc:	f280 80d8 	bge.w	802b7b0 <_dtoa_r+0x610>
 802b600:	f1b9 0f00 	cmp.w	r9, #0
 802b604:	f300 80d4 	bgt.w	802b7b0 <_dtoa_r+0x610>
 802b608:	f040 825e 	bne.w	802bac8 <_dtoa_r+0x928>
 802b60c:	2200      	movs	r2, #0
 802b60e:	4b66      	ldr	r3, [pc, #408]	; (802b7a8 <_dtoa_r+0x608>)
 802b610:	ec51 0b17 	vmov	r0, r1, d7
 802b614:	f7d4 fff8 	bl	8000608 <__aeabi_dmul>
 802b618:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b61c:	f7d5 fa7a 	bl	8000b14 <__aeabi_dcmpge>
 802b620:	464f      	mov	r7, r9
 802b622:	464e      	mov	r6, r9
 802b624:	2800      	cmp	r0, #0
 802b626:	f040 8234 	bne.w	802ba92 <_dtoa_r+0x8f2>
 802b62a:	2331      	movs	r3, #49	; 0x31
 802b62c:	f10b 0501 	add.w	r5, fp, #1
 802b630:	f88b 3000 	strb.w	r3, [fp]
 802b634:	f10a 0a01 	add.w	sl, sl, #1
 802b638:	e22f      	b.n	802ba9a <_dtoa_r+0x8fa>
 802b63a:	07f2      	lsls	r2, r6, #31
 802b63c:	d505      	bpl.n	802b64a <_dtoa_r+0x4aa>
 802b63e:	e9d7 2300 	ldrd	r2, r3, [r7]
 802b642:	f7d4 ffe1 	bl	8000608 <__aeabi_dmul>
 802b646:	3501      	adds	r5, #1
 802b648:	2301      	movs	r3, #1
 802b64a:	1076      	asrs	r6, r6, #1
 802b64c:	3708      	adds	r7, #8
 802b64e:	e772      	b.n	802b536 <_dtoa_r+0x396>
 802b650:	2502      	movs	r5, #2
 802b652:	e774      	b.n	802b53e <_dtoa_r+0x39e>
 802b654:	f8cd a020 	str.w	sl, [sp, #32]
 802b658:	464f      	mov	r7, r9
 802b65a:	e791      	b.n	802b580 <_dtoa_r+0x3e0>
 802b65c:	4b4d      	ldr	r3, [pc, #308]	; (802b794 <_dtoa_r+0x5f4>)
 802b65e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802b662:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 802b666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b668:	2b00      	cmp	r3, #0
 802b66a:	d047      	beq.n	802b6fc <_dtoa_r+0x55c>
 802b66c:	4602      	mov	r2, r0
 802b66e:	460b      	mov	r3, r1
 802b670:	2000      	movs	r0, #0
 802b672:	494e      	ldr	r1, [pc, #312]	; (802b7ac <_dtoa_r+0x60c>)
 802b674:	f7d5 f8f2 	bl	800085c <__aeabi_ddiv>
 802b678:	462a      	mov	r2, r5
 802b67a:	4633      	mov	r3, r6
 802b67c:	f7d4 fe0c 	bl	8000298 <__aeabi_dsub>
 802b680:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802b684:	465d      	mov	r5, fp
 802b686:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b68a:	f7d5 fa6d 	bl	8000b68 <__aeabi_d2iz>
 802b68e:	4606      	mov	r6, r0
 802b690:	f7d4 ff50 	bl	8000534 <__aeabi_i2d>
 802b694:	4602      	mov	r2, r0
 802b696:	460b      	mov	r3, r1
 802b698:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b69c:	f7d4 fdfc 	bl	8000298 <__aeabi_dsub>
 802b6a0:	3630      	adds	r6, #48	; 0x30
 802b6a2:	f805 6b01 	strb.w	r6, [r5], #1
 802b6a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802b6aa:	e9cd 0100 	strd	r0, r1, [sp]
 802b6ae:	f7d5 fa1d 	bl	8000aec <__aeabi_dcmplt>
 802b6b2:	2800      	cmp	r0, #0
 802b6b4:	d163      	bne.n	802b77e <_dtoa_r+0x5de>
 802b6b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b6ba:	2000      	movs	r0, #0
 802b6bc:	4937      	ldr	r1, [pc, #220]	; (802b79c <_dtoa_r+0x5fc>)
 802b6be:	f7d4 fdeb 	bl	8000298 <__aeabi_dsub>
 802b6c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802b6c6:	f7d5 fa11 	bl	8000aec <__aeabi_dcmplt>
 802b6ca:	2800      	cmp	r0, #0
 802b6cc:	f040 80b7 	bne.w	802b83e <_dtoa_r+0x69e>
 802b6d0:	eba5 030b 	sub.w	r3, r5, fp
 802b6d4:	429f      	cmp	r7, r3
 802b6d6:	f77f af7c 	ble.w	802b5d2 <_dtoa_r+0x432>
 802b6da:	2200      	movs	r2, #0
 802b6dc:	4b30      	ldr	r3, [pc, #192]	; (802b7a0 <_dtoa_r+0x600>)
 802b6de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802b6e2:	f7d4 ff91 	bl	8000608 <__aeabi_dmul>
 802b6e6:	2200      	movs	r2, #0
 802b6e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802b6ec:	4b2c      	ldr	r3, [pc, #176]	; (802b7a0 <_dtoa_r+0x600>)
 802b6ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b6f2:	f7d4 ff89 	bl	8000608 <__aeabi_dmul>
 802b6f6:	e9cd 0100 	strd	r0, r1, [sp]
 802b6fa:	e7c4      	b.n	802b686 <_dtoa_r+0x4e6>
 802b6fc:	462a      	mov	r2, r5
 802b6fe:	4633      	mov	r3, r6
 802b700:	f7d4 ff82 	bl	8000608 <__aeabi_dmul>
 802b704:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802b708:	eb0b 0507 	add.w	r5, fp, r7
 802b70c:	465e      	mov	r6, fp
 802b70e:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b712:	f7d5 fa29 	bl	8000b68 <__aeabi_d2iz>
 802b716:	4607      	mov	r7, r0
 802b718:	f7d4 ff0c 	bl	8000534 <__aeabi_i2d>
 802b71c:	3730      	adds	r7, #48	; 0x30
 802b71e:	4602      	mov	r2, r0
 802b720:	460b      	mov	r3, r1
 802b722:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b726:	f7d4 fdb7 	bl	8000298 <__aeabi_dsub>
 802b72a:	f806 7b01 	strb.w	r7, [r6], #1
 802b72e:	42ae      	cmp	r6, r5
 802b730:	e9cd 0100 	strd	r0, r1, [sp]
 802b734:	f04f 0200 	mov.w	r2, #0
 802b738:	d126      	bne.n	802b788 <_dtoa_r+0x5e8>
 802b73a:	4b1c      	ldr	r3, [pc, #112]	; (802b7ac <_dtoa_r+0x60c>)
 802b73c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802b740:	f7d4 fdac 	bl	800029c <__adddf3>
 802b744:	4602      	mov	r2, r0
 802b746:	460b      	mov	r3, r1
 802b748:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b74c:	f7d5 f9ec 	bl	8000b28 <__aeabi_dcmpgt>
 802b750:	2800      	cmp	r0, #0
 802b752:	d174      	bne.n	802b83e <_dtoa_r+0x69e>
 802b754:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802b758:	2000      	movs	r0, #0
 802b75a:	4914      	ldr	r1, [pc, #80]	; (802b7ac <_dtoa_r+0x60c>)
 802b75c:	f7d4 fd9c 	bl	8000298 <__aeabi_dsub>
 802b760:	4602      	mov	r2, r0
 802b762:	460b      	mov	r3, r1
 802b764:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b768:	f7d5 f9c0 	bl	8000aec <__aeabi_dcmplt>
 802b76c:	2800      	cmp	r0, #0
 802b76e:	f43f af30 	beq.w	802b5d2 <_dtoa_r+0x432>
 802b772:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802b776:	2b30      	cmp	r3, #48	; 0x30
 802b778:	f105 32ff 	add.w	r2, r5, #4294967295
 802b77c:	d002      	beq.n	802b784 <_dtoa_r+0x5e4>
 802b77e:	f8dd a020 	ldr.w	sl, [sp, #32]
 802b782:	e04a      	b.n	802b81a <_dtoa_r+0x67a>
 802b784:	4615      	mov	r5, r2
 802b786:	e7f4      	b.n	802b772 <_dtoa_r+0x5d2>
 802b788:	4b05      	ldr	r3, [pc, #20]	; (802b7a0 <_dtoa_r+0x600>)
 802b78a:	f7d4 ff3d 	bl	8000608 <__aeabi_dmul>
 802b78e:	e9cd 0100 	strd	r0, r1, [sp]
 802b792:	e7bc      	b.n	802b70e <_dtoa_r+0x56e>
 802b794:	0802ef88 	.word	0x0802ef88
 802b798:	0802ef60 	.word	0x0802ef60
 802b79c:	3ff00000 	.word	0x3ff00000
 802b7a0:	40240000 	.word	0x40240000
 802b7a4:	401c0000 	.word	0x401c0000
 802b7a8:	40140000 	.word	0x40140000
 802b7ac:	3fe00000 	.word	0x3fe00000
 802b7b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 802b7b4:	465d      	mov	r5, fp
 802b7b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b7ba:	4630      	mov	r0, r6
 802b7bc:	4639      	mov	r1, r7
 802b7be:	f7d5 f84d 	bl	800085c <__aeabi_ddiv>
 802b7c2:	f7d5 f9d1 	bl	8000b68 <__aeabi_d2iz>
 802b7c6:	4680      	mov	r8, r0
 802b7c8:	f7d4 feb4 	bl	8000534 <__aeabi_i2d>
 802b7cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b7d0:	f7d4 ff1a 	bl	8000608 <__aeabi_dmul>
 802b7d4:	4602      	mov	r2, r0
 802b7d6:	460b      	mov	r3, r1
 802b7d8:	4630      	mov	r0, r6
 802b7da:	4639      	mov	r1, r7
 802b7dc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 802b7e0:	f7d4 fd5a 	bl	8000298 <__aeabi_dsub>
 802b7e4:	f805 6b01 	strb.w	r6, [r5], #1
 802b7e8:	eba5 060b 	sub.w	r6, r5, fp
 802b7ec:	45b1      	cmp	r9, r6
 802b7ee:	4602      	mov	r2, r0
 802b7f0:	460b      	mov	r3, r1
 802b7f2:	d139      	bne.n	802b868 <_dtoa_r+0x6c8>
 802b7f4:	f7d4 fd52 	bl	800029c <__adddf3>
 802b7f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b7fc:	4606      	mov	r6, r0
 802b7fe:	460f      	mov	r7, r1
 802b800:	f7d5 f992 	bl	8000b28 <__aeabi_dcmpgt>
 802b804:	b9c8      	cbnz	r0, 802b83a <_dtoa_r+0x69a>
 802b806:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b80a:	4630      	mov	r0, r6
 802b80c:	4639      	mov	r1, r7
 802b80e:	f7d5 f963 	bl	8000ad8 <__aeabi_dcmpeq>
 802b812:	b110      	cbz	r0, 802b81a <_dtoa_r+0x67a>
 802b814:	f018 0f01 	tst.w	r8, #1
 802b818:	d10f      	bne.n	802b83a <_dtoa_r+0x69a>
 802b81a:	9904      	ldr	r1, [sp, #16]
 802b81c:	4620      	mov	r0, r4
 802b81e:	f000 fff6 	bl	802c80e <_Bfree>
 802b822:	2300      	movs	r3, #0
 802b824:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802b826:	702b      	strb	r3, [r5, #0]
 802b828:	f10a 0301 	add.w	r3, sl, #1
 802b82c:	6013      	str	r3, [r2, #0]
 802b82e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b830:	2b00      	cmp	r3, #0
 802b832:	f000 8241 	beq.w	802bcb8 <_dtoa_r+0xb18>
 802b836:	601d      	str	r5, [r3, #0]
 802b838:	e23e      	b.n	802bcb8 <_dtoa_r+0xb18>
 802b83a:	f8cd a020 	str.w	sl, [sp, #32]
 802b83e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802b842:	2a39      	cmp	r2, #57	; 0x39
 802b844:	f105 33ff 	add.w	r3, r5, #4294967295
 802b848:	d108      	bne.n	802b85c <_dtoa_r+0x6bc>
 802b84a:	459b      	cmp	fp, r3
 802b84c:	d10a      	bne.n	802b864 <_dtoa_r+0x6c4>
 802b84e:	9b08      	ldr	r3, [sp, #32]
 802b850:	3301      	adds	r3, #1
 802b852:	9308      	str	r3, [sp, #32]
 802b854:	2330      	movs	r3, #48	; 0x30
 802b856:	f88b 3000 	strb.w	r3, [fp]
 802b85a:	465b      	mov	r3, fp
 802b85c:	781a      	ldrb	r2, [r3, #0]
 802b85e:	3201      	adds	r2, #1
 802b860:	701a      	strb	r2, [r3, #0]
 802b862:	e78c      	b.n	802b77e <_dtoa_r+0x5de>
 802b864:	461d      	mov	r5, r3
 802b866:	e7ea      	b.n	802b83e <_dtoa_r+0x69e>
 802b868:	2200      	movs	r2, #0
 802b86a:	4b9b      	ldr	r3, [pc, #620]	; (802bad8 <_dtoa_r+0x938>)
 802b86c:	f7d4 fecc 	bl	8000608 <__aeabi_dmul>
 802b870:	2200      	movs	r2, #0
 802b872:	2300      	movs	r3, #0
 802b874:	4606      	mov	r6, r0
 802b876:	460f      	mov	r7, r1
 802b878:	f7d5 f92e 	bl	8000ad8 <__aeabi_dcmpeq>
 802b87c:	2800      	cmp	r0, #0
 802b87e:	d09a      	beq.n	802b7b6 <_dtoa_r+0x616>
 802b880:	e7cb      	b.n	802b81a <_dtoa_r+0x67a>
 802b882:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802b884:	2a00      	cmp	r2, #0
 802b886:	f000 808b 	beq.w	802b9a0 <_dtoa_r+0x800>
 802b88a:	9a06      	ldr	r2, [sp, #24]
 802b88c:	2a01      	cmp	r2, #1
 802b88e:	dc6e      	bgt.n	802b96e <_dtoa_r+0x7ce>
 802b890:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802b892:	2a00      	cmp	r2, #0
 802b894:	d067      	beq.n	802b966 <_dtoa_r+0x7c6>
 802b896:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802b89a:	9f07      	ldr	r7, [sp, #28]
 802b89c:	9d05      	ldr	r5, [sp, #20]
 802b89e:	9a05      	ldr	r2, [sp, #20]
 802b8a0:	2101      	movs	r1, #1
 802b8a2:	441a      	add	r2, r3
 802b8a4:	4620      	mov	r0, r4
 802b8a6:	9205      	str	r2, [sp, #20]
 802b8a8:	4498      	add	r8, r3
 802b8aa:	f001 f88e 	bl	802c9ca <__i2b>
 802b8ae:	4606      	mov	r6, r0
 802b8b0:	2d00      	cmp	r5, #0
 802b8b2:	dd0c      	ble.n	802b8ce <_dtoa_r+0x72e>
 802b8b4:	f1b8 0f00 	cmp.w	r8, #0
 802b8b8:	dd09      	ble.n	802b8ce <_dtoa_r+0x72e>
 802b8ba:	4545      	cmp	r5, r8
 802b8bc:	9a05      	ldr	r2, [sp, #20]
 802b8be:	462b      	mov	r3, r5
 802b8c0:	bfa8      	it	ge
 802b8c2:	4643      	movge	r3, r8
 802b8c4:	1ad2      	subs	r2, r2, r3
 802b8c6:	9205      	str	r2, [sp, #20]
 802b8c8:	1aed      	subs	r5, r5, r3
 802b8ca:	eba8 0803 	sub.w	r8, r8, r3
 802b8ce:	9b07      	ldr	r3, [sp, #28]
 802b8d0:	b1eb      	cbz	r3, 802b90e <_dtoa_r+0x76e>
 802b8d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b8d4:	2b00      	cmp	r3, #0
 802b8d6:	d067      	beq.n	802b9a8 <_dtoa_r+0x808>
 802b8d8:	b18f      	cbz	r7, 802b8fe <_dtoa_r+0x75e>
 802b8da:	4631      	mov	r1, r6
 802b8dc:	463a      	mov	r2, r7
 802b8de:	4620      	mov	r0, r4
 802b8e0:	f001 f912 	bl	802cb08 <__pow5mult>
 802b8e4:	9a04      	ldr	r2, [sp, #16]
 802b8e6:	4601      	mov	r1, r0
 802b8e8:	4606      	mov	r6, r0
 802b8ea:	4620      	mov	r0, r4
 802b8ec:	f001 f876 	bl	802c9dc <__multiply>
 802b8f0:	9904      	ldr	r1, [sp, #16]
 802b8f2:	9008      	str	r0, [sp, #32]
 802b8f4:	4620      	mov	r0, r4
 802b8f6:	f000 ff8a 	bl	802c80e <_Bfree>
 802b8fa:	9b08      	ldr	r3, [sp, #32]
 802b8fc:	9304      	str	r3, [sp, #16]
 802b8fe:	9b07      	ldr	r3, [sp, #28]
 802b900:	1bda      	subs	r2, r3, r7
 802b902:	d004      	beq.n	802b90e <_dtoa_r+0x76e>
 802b904:	9904      	ldr	r1, [sp, #16]
 802b906:	4620      	mov	r0, r4
 802b908:	f001 f8fe 	bl	802cb08 <__pow5mult>
 802b90c:	9004      	str	r0, [sp, #16]
 802b90e:	2101      	movs	r1, #1
 802b910:	4620      	mov	r0, r4
 802b912:	f001 f85a 	bl	802c9ca <__i2b>
 802b916:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b918:	4607      	mov	r7, r0
 802b91a:	2b00      	cmp	r3, #0
 802b91c:	f000 81d0 	beq.w	802bcc0 <_dtoa_r+0xb20>
 802b920:	461a      	mov	r2, r3
 802b922:	4601      	mov	r1, r0
 802b924:	4620      	mov	r0, r4
 802b926:	f001 f8ef 	bl	802cb08 <__pow5mult>
 802b92a:	9b06      	ldr	r3, [sp, #24]
 802b92c:	2b01      	cmp	r3, #1
 802b92e:	4607      	mov	r7, r0
 802b930:	dc40      	bgt.n	802b9b4 <_dtoa_r+0x814>
 802b932:	9b00      	ldr	r3, [sp, #0]
 802b934:	2b00      	cmp	r3, #0
 802b936:	d139      	bne.n	802b9ac <_dtoa_r+0x80c>
 802b938:	9b01      	ldr	r3, [sp, #4]
 802b93a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802b93e:	2b00      	cmp	r3, #0
 802b940:	d136      	bne.n	802b9b0 <_dtoa_r+0x810>
 802b942:	9b01      	ldr	r3, [sp, #4]
 802b944:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b948:	0d1b      	lsrs	r3, r3, #20
 802b94a:	051b      	lsls	r3, r3, #20
 802b94c:	b12b      	cbz	r3, 802b95a <_dtoa_r+0x7ba>
 802b94e:	9b05      	ldr	r3, [sp, #20]
 802b950:	3301      	adds	r3, #1
 802b952:	9305      	str	r3, [sp, #20]
 802b954:	f108 0801 	add.w	r8, r8, #1
 802b958:	2301      	movs	r3, #1
 802b95a:	9307      	str	r3, [sp, #28]
 802b95c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b95e:	2b00      	cmp	r3, #0
 802b960:	d12a      	bne.n	802b9b8 <_dtoa_r+0x818>
 802b962:	2001      	movs	r0, #1
 802b964:	e030      	b.n	802b9c8 <_dtoa_r+0x828>
 802b966:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802b968:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802b96c:	e795      	b.n	802b89a <_dtoa_r+0x6fa>
 802b96e:	9b07      	ldr	r3, [sp, #28]
 802b970:	f109 37ff 	add.w	r7, r9, #4294967295
 802b974:	42bb      	cmp	r3, r7
 802b976:	bfbf      	itttt	lt
 802b978:	9b07      	ldrlt	r3, [sp, #28]
 802b97a:	9707      	strlt	r7, [sp, #28]
 802b97c:	1afa      	sublt	r2, r7, r3
 802b97e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 802b980:	bfbb      	ittet	lt
 802b982:	189b      	addlt	r3, r3, r2
 802b984:	930e      	strlt	r3, [sp, #56]	; 0x38
 802b986:	1bdf      	subge	r7, r3, r7
 802b988:	2700      	movlt	r7, #0
 802b98a:	f1b9 0f00 	cmp.w	r9, #0
 802b98e:	bfb5      	itete	lt
 802b990:	9b05      	ldrlt	r3, [sp, #20]
 802b992:	9d05      	ldrge	r5, [sp, #20]
 802b994:	eba3 0509 	sublt.w	r5, r3, r9
 802b998:	464b      	movge	r3, r9
 802b99a:	bfb8      	it	lt
 802b99c:	2300      	movlt	r3, #0
 802b99e:	e77e      	b.n	802b89e <_dtoa_r+0x6fe>
 802b9a0:	9f07      	ldr	r7, [sp, #28]
 802b9a2:	9d05      	ldr	r5, [sp, #20]
 802b9a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802b9a6:	e783      	b.n	802b8b0 <_dtoa_r+0x710>
 802b9a8:	9a07      	ldr	r2, [sp, #28]
 802b9aa:	e7ab      	b.n	802b904 <_dtoa_r+0x764>
 802b9ac:	2300      	movs	r3, #0
 802b9ae:	e7d4      	b.n	802b95a <_dtoa_r+0x7ba>
 802b9b0:	9b00      	ldr	r3, [sp, #0]
 802b9b2:	e7d2      	b.n	802b95a <_dtoa_r+0x7ba>
 802b9b4:	2300      	movs	r3, #0
 802b9b6:	9307      	str	r3, [sp, #28]
 802b9b8:	693b      	ldr	r3, [r7, #16]
 802b9ba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 802b9be:	6918      	ldr	r0, [r3, #16]
 802b9c0:	f000 ffb5 	bl	802c92e <__hi0bits>
 802b9c4:	f1c0 0020 	rsb	r0, r0, #32
 802b9c8:	4440      	add	r0, r8
 802b9ca:	f010 001f 	ands.w	r0, r0, #31
 802b9ce:	d047      	beq.n	802ba60 <_dtoa_r+0x8c0>
 802b9d0:	f1c0 0320 	rsb	r3, r0, #32
 802b9d4:	2b04      	cmp	r3, #4
 802b9d6:	dd3b      	ble.n	802ba50 <_dtoa_r+0x8b0>
 802b9d8:	9b05      	ldr	r3, [sp, #20]
 802b9da:	f1c0 001c 	rsb	r0, r0, #28
 802b9de:	4403      	add	r3, r0
 802b9e0:	9305      	str	r3, [sp, #20]
 802b9e2:	4405      	add	r5, r0
 802b9e4:	4480      	add	r8, r0
 802b9e6:	9b05      	ldr	r3, [sp, #20]
 802b9e8:	2b00      	cmp	r3, #0
 802b9ea:	dd05      	ble.n	802b9f8 <_dtoa_r+0x858>
 802b9ec:	461a      	mov	r2, r3
 802b9ee:	9904      	ldr	r1, [sp, #16]
 802b9f0:	4620      	mov	r0, r4
 802b9f2:	f001 f8d7 	bl	802cba4 <__lshift>
 802b9f6:	9004      	str	r0, [sp, #16]
 802b9f8:	f1b8 0f00 	cmp.w	r8, #0
 802b9fc:	dd05      	ble.n	802ba0a <_dtoa_r+0x86a>
 802b9fe:	4639      	mov	r1, r7
 802ba00:	4642      	mov	r2, r8
 802ba02:	4620      	mov	r0, r4
 802ba04:	f001 f8ce 	bl	802cba4 <__lshift>
 802ba08:	4607      	mov	r7, r0
 802ba0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802ba0c:	b353      	cbz	r3, 802ba64 <_dtoa_r+0x8c4>
 802ba0e:	4639      	mov	r1, r7
 802ba10:	9804      	ldr	r0, [sp, #16]
 802ba12:	f001 f91b 	bl	802cc4c <__mcmp>
 802ba16:	2800      	cmp	r0, #0
 802ba18:	da24      	bge.n	802ba64 <_dtoa_r+0x8c4>
 802ba1a:	2300      	movs	r3, #0
 802ba1c:	220a      	movs	r2, #10
 802ba1e:	9904      	ldr	r1, [sp, #16]
 802ba20:	4620      	mov	r0, r4
 802ba22:	f000 ff0b 	bl	802c83c <__multadd>
 802ba26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ba28:	9004      	str	r0, [sp, #16]
 802ba2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802ba2e:	2b00      	cmp	r3, #0
 802ba30:	f000 814d 	beq.w	802bcce <_dtoa_r+0xb2e>
 802ba34:	2300      	movs	r3, #0
 802ba36:	4631      	mov	r1, r6
 802ba38:	220a      	movs	r2, #10
 802ba3a:	4620      	mov	r0, r4
 802ba3c:	f000 fefe 	bl	802c83c <__multadd>
 802ba40:	9b02      	ldr	r3, [sp, #8]
 802ba42:	2b00      	cmp	r3, #0
 802ba44:	4606      	mov	r6, r0
 802ba46:	dc4f      	bgt.n	802bae8 <_dtoa_r+0x948>
 802ba48:	9b06      	ldr	r3, [sp, #24]
 802ba4a:	2b02      	cmp	r3, #2
 802ba4c:	dd4c      	ble.n	802bae8 <_dtoa_r+0x948>
 802ba4e:	e011      	b.n	802ba74 <_dtoa_r+0x8d4>
 802ba50:	d0c9      	beq.n	802b9e6 <_dtoa_r+0x846>
 802ba52:	9a05      	ldr	r2, [sp, #20]
 802ba54:	331c      	adds	r3, #28
 802ba56:	441a      	add	r2, r3
 802ba58:	9205      	str	r2, [sp, #20]
 802ba5a:	441d      	add	r5, r3
 802ba5c:	4498      	add	r8, r3
 802ba5e:	e7c2      	b.n	802b9e6 <_dtoa_r+0x846>
 802ba60:	4603      	mov	r3, r0
 802ba62:	e7f6      	b.n	802ba52 <_dtoa_r+0x8b2>
 802ba64:	f1b9 0f00 	cmp.w	r9, #0
 802ba68:	dc38      	bgt.n	802badc <_dtoa_r+0x93c>
 802ba6a:	9b06      	ldr	r3, [sp, #24]
 802ba6c:	2b02      	cmp	r3, #2
 802ba6e:	dd35      	ble.n	802badc <_dtoa_r+0x93c>
 802ba70:	f8cd 9008 	str.w	r9, [sp, #8]
 802ba74:	9b02      	ldr	r3, [sp, #8]
 802ba76:	b963      	cbnz	r3, 802ba92 <_dtoa_r+0x8f2>
 802ba78:	4639      	mov	r1, r7
 802ba7a:	2205      	movs	r2, #5
 802ba7c:	4620      	mov	r0, r4
 802ba7e:	f000 fedd 	bl	802c83c <__multadd>
 802ba82:	4601      	mov	r1, r0
 802ba84:	4607      	mov	r7, r0
 802ba86:	9804      	ldr	r0, [sp, #16]
 802ba88:	f001 f8e0 	bl	802cc4c <__mcmp>
 802ba8c:	2800      	cmp	r0, #0
 802ba8e:	f73f adcc 	bgt.w	802b62a <_dtoa_r+0x48a>
 802ba92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ba94:	465d      	mov	r5, fp
 802ba96:	ea6f 0a03 	mvn.w	sl, r3
 802ba9a:	f04f 0900 	mov.w	r9, #0
 802ba9e:	4639      	mov	r1, r7
 802baa0:	4620      	mov	r0, r4
 802baa2:	f000 feb4 	bl	802c80e <_Bfree>
 802baa6:	2e00      	cmp	r6, #0
 802baa8:	f43f aeb7 	beq.w	802b81a <_dtoa_r+0x67a>
 802baac:	f1b9 0f00 	cmp.w	r9, #0
 802bab0:	d005      	beq.n	802babe <_dtoa_r+0x91e>
 802bab2:	45b1      	cmp	r9, r6
 802bab4:	d003      	beq.n	802babe <_dtoa_r+0x91e>
 802bab6:	4649      	mov	r1, r9
 802bab8:	4620      	mov	r0, r4
 802baba:	f000 fea8 	bl	802c80e <_Bfree>
 802babe:	4631      	mov	r1, r6
 802bac0:	4620      	mov	r0, r4
 802bac2:	f000 fea4 	bl	802c80e <_Bfree>
 802bac6:	e6a8      	b.n	802b81a <_dtoa_r+0x67a>
 802bac8:	2700      	movs	r7, #0
 802baca:	463e      	mov	r6, r7
 802bacc:	e7e1      	b.n	802ba92 <_dtoa_r+0x8f2>
 802bace:	f8dd a020 	ldr.w	sl, [sp, #32]
 802bad2:	463e      	mov	r6, r7
 802bad4:	e5a9      	b.n	802b62a <_dtoa_r+0x48a>
 802bad6:	bf00      	nop
 802bad8:	40240000 	.word	0x40240000
 802badc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802bade:	f8cd 9008 	str.w	r9, [sp, #8]
 802bae2:	2b00      	cmp	r3, #0
 802bae4:	f000 80fa 	beq.w	802bcdc <_dtoa_r+0xb3c>
 802bae8:	2d00      	cmp	r5, #0
 802baea:	dd05      	ble.n	802baf8 <_dtoa_r+0x958>
 802baec:	4631      	mov	r1, r6
 802baee:	462a      	mov	r2, r5
 802baf0:	4620      	mov	r0, r4
 802baf2:	f001 f857 	bl	802cba4 <__lshift>
 802baf6:	4606      	mov	r6, r0
 802baf8:	9b07      	ldr	r3, [sp, #28]
 802bafa:	2b00      	cmp	r3, #0
 802bafc:	d04c      	beq.n	802bb98 <_dtoa_r+0x9f8>
 802bafe:	6871      	ldr	r1, [r6, #4]
 802bb00:	4620      	mov	r0, r4
 802bb02:	f000 fe50 	bl	802c7a6 <_Balloc>
 802bb06:	6932      	ldr	r2, [r6, #16]
 802bb08:	3202      	adds	r2, #2
 802bb0a:	4605      	mov	r5, r0
 802bb0c:	0092      	lsls	r2, r2, #2
 802bb0e:	f106 010c 	add.w	r1, r6, #12
 802bb12:	300c      	adds	r0, #12
 802bb14:	f7fd fa58 	bl	8028fc8 <memcpy>
 802bb18:	2201      	movs	r2, #1
 802bb1a:	4629      	mov	r1, r5
 802bb1c:	4620      	mov	r0, r4
 802bb1e:	f001 f841 	bl	802cba4 <__lshift>
 802bb22:	9b00      	ldr	r3, [sp, #0]
 802bb24:	f8cd b014 	str.w	fp, [sp, #20]
 802bb28:	f003 0301 	and.w	r3, r3, #1
 802bb2c:	46b1      	mov	r9, r6
 802bb2e:	9307      	str	r3, [sp, #28]
 802bb30:	4606      	mov	r6, r0
 802bb32:	4639      	mov	r1, r7
 802bb34:	9804      	ldr	r0, [sp, #16]
 802bb36:	f7ff faa4 	bl	802b082 <quorem>
 802bb3a:	4649      	mov	r1, r9
 802bb3c:	4605      	mov	r5, r0
 802bb3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 802bb42:	9804      	ldr	r0, [sp, #16]
 802bb44:	f001 f882 	bl	802cc4c <__mcmp>
 802bb48:	4632      	mov	r2, r6
 802bb4a:	9000      	str	r0, [sp, #0]
 802bb4c:	4639      	mov	r1, r7
 802bb4e:	4620      	mov	r0, r4
 802bb50:	f001 f896 	bl	802cc80 <__mdiff>
 802bb54:	68c3      	ldr	r3, [r0, #12]
 802bb56:	4602      	mov	r2, r0
 802bb58:	bb03      	cbnz	r3, 802bb9c <_dtoa_r+0x9fc>
 802bb5a:	4601      	mov	r1, r0
 802bb5c:	9008      	str	r0, [sp, #32]
 802bb5e:	9804      	ldr	r0, [sp, #16]
 802bb60:	f001 f874 	bl	802cc4c <__mcmp>
 802bb64:	9a08      	ldr	r2, [sp, #32]
 802bb66:	4603      	mov	r3, r0
 802bb68:	4611      	mov	r1, r2
 802bb6a:	4620      	mov	r0, r4
 802bb6c:	9308      	str	r3, [sp, #32]
 802bb6e:	f000 fe4e 	bl	802c80e <_Bfree>
 802bb72:	9b08      	ldr	r3, [sp, #32]
 802bb74:	b9a3      	cbnz	r3, 802bba0 <_dtoa_r+0xa00>
 802bb76:	9a06      	ldr	r2, [sp, #24]
 802bb78:	b992      	cbnz	r2, 802bba0 <_dtoa_r+0xa00>
 802bb7a:	9a07      	ldr	r2, [sp, #28]
 802bb7c:	b982      	cbnz	r2, 802bba0 <_dtoa_r+0xa00>
 802bb7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802bb82:	d029      	beq.n	802bbd8 <_dtoa_r+0xa38>
 802bb84:	9b00      	ldr	r3, [sp, #0]
 802bb86:	2b00      	cmp	r3, #0
 802bb88:	dd01      	ble.n	802bb8e <_dtoa_r+0x9ee>
 802bb8a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 802bb8e:	9b05      	ldr	r3, [sp, #20]
 802bb90:	1c5d      	adds	r5, r3, #1
 802bb92:	f883 8000 	strb.w	r8, [r3]
 802bb96:	e782      	b.n	802ba9e <_dtoa_r+0x8fe>
 802bb98:	4630      	mov	r0, r6
 802bb9a:	e7c2      	b.n	802bb22 <_dtoa_r+0x982>
 802bb9c:	2301      	movs	r3, #1
 802bb9e:	e7e3      	b.n	802bb68 <_dtoa_r+0x9c8>
 802bba0:	9a00      	ldr	r2, [sp, #0]
 802bba2:	2a00      	cmp	r2, #0
 802bba4:	db04      	blt.n	802bbb0 <_dtoa_r+0xa10>
 802bba6:	d125      	bne.n	802bbf4 <_dtoa_r+0xa54>
 802bba8:	9a06      	ldr	r2, [sp, #24]
 802bbaa:	bb1a      	cbnz	r2, 802bbf4 <_dtoa_r+0xa54>
 802bbac:	9a07      	ldr	r2, [sp, #28]
 802bbae:	bb0a      	cbnz	r2, 802bbf4 <_dtoa_r+0xa54>
 802bbb0:	2b00      	cmp	r3, #0
 802bbb2:	ddec      	ble.n	802bb8e <_dtoa_r+0x9ee>
 802bbb4:	2201      	movs	r2, #1
 802bbb6:	9904      	ldr	r1, [sp, #16]
 802bbb8:	4620      	mov	r0, r4
 802bbba:	f000 fff3 	bl	802cba4 <__lshift>
 802bbbe:	4639      	mov	r1, r7
 802bbc0:	9004      	str	r0, [sp, #16]
 802bbc2:	f001 f843 	bl	802cc4c <__mcmp>
 802bbc6:	2800      	cmp	r0, #0
 802bbc8:	dc03      	bgt.n	802bbd2 <_dtoa_r+0xa32>
 802bbca:	d1e0      	bne.n	802bb8e <_dtoa_r+0x9ee>
 802bbcc:	f018 0f01 	tst.w	r8, #1
 802bbd0:	d0dd      	beq.n	802bb8e <_dtoa_r+0x9ee>
 802bbd2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802bbd6:	d1d8      	bne.n	802bb8a <_dtoa_r+0x9ea>
 802bbd8:	9b05      	ldr	r3, [sp, #20]
 802bbda:	9a05      	ldr	r2, [sp, #20]
 802bbdc:	1c5d      	adds	r5, r3, #1
 802bbde:	2339      	movs	r3, #57	; 0x39
 802bbe0:	7013      	strb	r3, [r2, #0]
 802bbe2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802bbe6:	2b39      	cmp	r3, #57	; 0x39
 802bbe8:	f105 32ff 	add.w	r2, r5, #4294967295
 802bbec:	d04f      	beq.n	802bc8e <_dtoa_r+0xaee>
 802bbee:	3301      	adds	r3, #1
 802bbf0:	7013      	strb	r3, [r2, #0]
 802bbf2:	e754      	b.n	802ba9e <_dtoa_r+0x8fe>
 802bbf4:	9a05      	ldr	r2, [sp, #20]
 802bbf6:	2b00      	cmp	r3, #0
 802bbf8:	f102 0501 	add.w	r5, r2, #1
 802bbfc:	dd06      	ble.n	802bc0c <_dtoa_r+0xa6c>
 802bbfe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802bc02:	d0e9      	beq.n	802bbd8 <_dtoa_r+0xa38>
 802bc04:	f108 0801 	add.w	r8, r8, #1
 802bc08:	9b05      	ldr	r3, [sp, #20]
 802bc0a:	e7c2      	b.n	802bb92 <_dtoa_r+0x9f2>
 802bc0c:	9a02      	ldr	r2, [sp, #8]
 802bc0e:	f805 8c01 	strb.w	r8, [r5, #-1]
 802bc12:	eba5 030b 	sub.w	r3, r5, fp
 802bc16:	4293      	cmp	r3, r2
 802bc18:	d021      	beq.n	802bc5e <_dtoa_r+0xabe>
 802bc1a:	2300      	movs	r3, #0
 802bc1c:	220a      	movs	r2, #10
 802bc1e:	9904      	ldr	r1, [sp, #16]
 802bc20:	4620      	mov	r0, r4
 802bc22:	f000 fe0b 	bl	802c83c <__multadd>
 802bc26:	45b1      	cmp	r9, r6
 802bc28:	9004      	str	r0, [sp, #16]
 802bc2a:	f04f 0300 	mov.w	r3, #0
 802bc2e:	f04f 020a 	mov.w	r2, #10
 802bc32:	4649      	mov	r1, r9
 802bc34:	4620      	mov	r0, r4
 802bc36:	d105      	bne.n	802bc44 <_dtoa_r+0xaa4>
 802bc38:	f000 fe00 	bl	802c83c <__multadd>
 802bc3c:	4681      	mov	r9, r0
 802bc3e:	4606      	mov	r6, r0
 802bc40:	9505      	str	r5, [sp, #20]
 802bc42:	e776      	b.n	802bb32 <_dtoa_r+0x992>
 802bc44:	f000 fdfa 	bl	802c83c <__multadd>
 802bc48:	4631      	mov	r1, r6
 802bc4a:	4681      	mov	r9, r0
 802bc4c:	2300      	movs	r3, #0
 802bc4e:	220a      	movs	r2, #10
 802bc50:	4620      	mov	r0, r4
 802bc52:	f000 fdf3 	bl	802c83c <__multadd>
 802bc56:	4606      	mov	r6, r0
 802bc58:	e7f2      	b.n	802bc40 <_dtoa_r+0xaa0>
 802bc5a:	f04f 0900 	mov.w	r9, #0
 802bc5e:	2201      	movs	r2, #1
 802bc60:	9904      	ldr	r1, [sp, #16]
 802bc62:	4620      	mov	r0, r4
 802bc64:	f000 ff9e 	bl	802cba4 <__lshift>
 802bc68:	4639      	mov	r1, r7
 802bc6a:	9004      	str	r0, [sp, #16]
 802bc6c:	f000 ffee 	bl	802cc4c <__mcmp>
 802bc70:	2800      	cmp	r0, #0
 802bc72:	dcb6      	bgt.n	802bbe2 <_dtoa_r+0xa42>
 802bc74:	d102      	bne.n	802bc7c <_dtoa_r+0xadc>
 802bc76:	f018 0f01 	tst.w	r8, #1
 802bc7a:	d1b2      	bne.n	802bbe2 <_dtoa_r+0xa42>
 802bc7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802bc80:	2b30      	cmp	r3, #48	; 0x30
 802bc82:	f105 32ff 	add.w	r2, r5, #4294967295
 802bc86:	f47f af0a 	bne.w	802ba9e <_dtoa_r+0x8fe>
 802bc8a:	4615      	mov	r5, r2
 802bc8c:	e7f6      	b.n	802bc7c <_dtoa_r+0xadc>
 802bc8e:	4593      	cmp	fp, r2
 802bc90:	d105      	bne.n	802bc9e <_dtoa_r+0xafe>
 802bc92:	2331      	movs	r3, #49	; 0x31
 802bc94:	f10a 0a01 	add.w	sl, sl, #1
 802bc98:	f88b 3000 	strb.w	r3, [fp]
 802bc9c:	e6ff      	b.n	802ba9e <_dtoa_r+0x8fe>
 802bc9e:	4615      	mov	r5, r2
 802bca0:	e79f      	b.n	802bbe2 <_dtoa_r+0xa42>
 802bca2:	f8df b064 	ldr.w	fp, [pc, #100]	; 802bd08 <_dtoa_r+0xb68>
 802bca6:	e007      	b.n	802bcb8 <_dtoa_r+0xb18>
 802bca8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802bcaa:	f8df b060 	ldr.w	fp, [pc, #96]	; 802bd0c <_dtoa_r+0xb6c>
 802bcae:	b11b      	cbz	r3, 802bcb8 <_dtoa_r+0xb18>
 802bcb0:	f10b 0308 	add.w	r3, fp, #8
 802bcb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802bcb6:	6013      	str	r3, [r2, #0]
 802bcb8:	4658      	mov	r0, fp
 802bcba:	b017      	add	sp, #92	; 0x5c
 802bcbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bcc0:	9b06      	ldr	r3, [sp, #24]
 802bcc2:	2b01      	cmp	r3, #1
 802bcc4:	f77f ae35 	ble.w	802b932 <_dtoa_r+0x792>
 802bcc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802bcca:	9307      	str	r3, [sp, #28]
 802bccc:	e649      	b.n	802b962 <_dtoa_r+0x7c2>
 802bcce:	9b02      	ldr	r3, [sp, #8]
 802bcd0:	2b00      	cmp	r3, #0
 802bcd2:	dc03      	bgt.n	802bcdc <_dtoa_r+0xb3c>
 802bcd4:	9b06      	ldr	r3, [sp, #24]
 802bcd6:	2b02      	cmp	r3, #2
 802bcd8:	f73f aecc 	bgt.w	802ba74 <_dtoa_r+0x8d4>
 802bcdc:	465d      	mov	r5, fp
 802bcde:	4639      	mov	r1, r7
 802bce0:	9804      	ldr	r0, [sp, #16]
 802bce2:	f7ff f9ce 	bl	802b082 <quorem>
 802bce6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 802bcea:	f805 8b01 	strb.w	r8, [r5], #1
 802bcee:	9a02      	ldr	r2, [sp, #8]
 802bcf0:	eba5 030b 	sub.w	r3, r5, fp
 802bcf4:	429a      	cmp	r2, r3
 802bcf6:	ddb0      	ble.n	802bc5a <_dtoa_r+0xaba>
 802bcf8:	2300      	movs	r3, #0
 802bcfa:	220a      	movs	r2, #10
 802bcfc:	9904      	ldr	r1, [sp, #16]
 802bcfe:	4620      	mov	r0, r4
 802bd00:	f000 fd9c 	bl	802c83c <__multadd>
 802bd04:	9004      	str	r0, [sp, #16]
 802bd06:	e7ea      	b.n	802bcde <_dtoa_r+0xb3e>
 802bd08:	0802ee61 	.word	0x0802ee61
 802bd0c:	0802eee0 	.word	0x0802eee0

0802bd10 <__sflush_r>:
 802bd10:	898a      	ldrh	r2, [r1, #12]
 802bd12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bd16:	4605      	mov	r5, r0
 802bd18:	0710      	lsls	r0, r2, #28
 802bd1a:	460c      	mov	r4, r1
 802bd1c:	d458      	bmi.n	802bdd0 <__sflush_r+0xc0>
 802bd1e:	684b      	ldr	r3, [r1, #4]
 802bd20:	2b00      	cmp	r3, #0
 802bd22:	dc05      	bgt.n	802bd30 <__sflush_r+0x20>
 802bd24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802bd26:	2b00      	cmp	r3, #0
 802bd28:	dc02      	bgt.n	802bd30 <__sflush_r+0x20>
 802bd2a:	2000      	movs	r0, #0
 802bd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bd30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802bd32:	2e00      	cmp	r6, #0
 802bd34:	d0f9      	beq.n	802bd2a <__sflush_r+0x1a>
 802bd36:	2300      	movs	r3, #0
 802bd38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802bd3c:	682f      	ldr	r7, [r5, #0]
 802bd3e:	6a21      	ldr	r1, [r4, #32]
 802bd40:	602b      	str	r3, [r5, #0]
 802bd42:	d032      	beq.n	802bdaa <__sflush_r+0x9a>
 802bd44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802bd46:	89a3      	ldrh	r3, [r4, #12]
 802bd48:	075a      	lsls	r2, r3, #29
 802bd4a:	d505      	bpl.n	802bd58 <__sflush_r+0x48>
 802bd4c:	6863      	ldr	r3, [r4, #4]
 802bd4e:	1ac0      	subs	r0, r0, r3
 802bd50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802bd52:	b10b      	cbz	r3, 802bd58 <__sflush_r+0x48>
 802bd54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802bd56:	1ac0      	subs	r0, r0, r3
 802bd58:	2300      	movs	r3, #0
 802bd5a:	4602      	mov	r2, r0
 802bd5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802bd5e:	6a21      	ldr	r1, [r4, #32]
 802bd60:	4628      	mov	r0, r5
 802bd62:	47b0      	blx	r6
 802bd64:	1c43      	adds	r3, r0, #1
 802bd66:	89a3      	ldrh	r3, [r4, #12]
 802bd68:	d106      	bne.n	802bd78 <__sflush_r+0x68>
 802bd6a:	6829      	ldr	r1, [r5, #0]
 802bd6c:	291d      	cmp	r1, #29
 802bd6e:	d848      	bhi.n	802be02 <__sflush_r+0xf2>
 802bd70:	4a29      	ldr	r2, [pc, #164]	; (802be18 <__sflush_r+0x108>)
 802bd72:	40ca      	lsrs	r2, r1
 802bd74:	07d6      	lsls	r6, r2, #31
 802bd76:	d544      	bpl.n	802be02 <__sflush_r+0xf2>
 802bd78:	2200      	movs	r2, #0
 802bd7a:	6062      	str	r2, [r4, #4]
 802bd7c:	04d9      	lsls	r1, r3, #19
 802bd7e:	6922      	ldr	r2, [r4, #16]
 802bd80:	6022      	str	r2, [r4, #0]
 802bd82:	d504      	bpl.n	802bd8e <__sflush_r+0x7e>
 802bd84:	1c42      	adds	r2, r0, #1
 802bd86:	d101      	bne.n	802bd8c <__sflush_r+0x7c>
 802bd88:	682b      	ldr	r3, [r5, #0]
 802bd8a:	b903      	cbnz	r3, 802bd8e <__sflush_r+0x7e>
 802bd8c:	6560      	str	r0, [r4, #84]	; 0x54
 802bd8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802bd90:	602f      	str	r7, [r5, #0]
 802bd92:	2900      	cmp	r1, #0
 802bd94:	d0c9      	beq.n	802bd2a <__sflush_r+0x1a>
 802bd96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802bd9a:	4299      	cmp	r1, r3
 802bd9c:	d002      	beq.n	802bda4 <__sflush_r+0x94>
 802bd9e:	4628      	mov	r0, r5
 802bda0:	f001 f90e 	bl	802cfc0 <_free_r>
 802bda4:	2000      	movs	r0, #0
 802bda6:	6360      	str	r0, [r4, #52]	; 0x34
 802bda8:	e7c0      	b.n	802bd2c <__sflush_r+0x1c>
 802bdaa:	2301      	movs	r3, #1
 802bdac:	4628      	mov	r0, r5
 802bdae:	47b0      	blx	r6
 802bdb0:	1c41      	adds	r1, r0, #1
 802bdb2:	d1c8      	bne.n	802bd46 <__sflush_r+0x36>
 802bdb4:	682b      	ldr	r3, [r5, #0]
 802bdb6:	2b00      	cmp	r3, #0
 802bdb8:	d0c5      	beq.n	802bd46 <__sflush_r+0x36>
 802bdba:	2b1d      	cmp	r3, #29
 802bdbc:	d001      	beq.n	802bdc2 <__sflush_r+0xb2>
 802bdbe:	2b16      	cmp	r3, #22
 802bdc0:	d101      	bne.n	802bdc6 <__sflush_r+0xb6>
 802bdc2:	602f      	str	r7, [r5, #0]
 802bdc4:	e7b1      	b.n	802bd2a <__sflush_r+0x1a>
 802bdc6:	89a3      	ldrh	r3, [r4, #12]
 802bdc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802bdcc:	81a3      	strh	r3, [r4, #12]
 802bdce:	e7ad      	b.n	802bd2c <__sflush_r+0x1c>
 802bdd0:	690f      	ldr	r7, [r1, #16]
 802bdd2:	2f00      	cmp	r7, #0
 802bdd4:	d0a9      	beq.n	802bd2a <__sflush_r+0x1a>
 802bdd6:	0793      	lsls	r3, r2, #30
 802bdd8:	680e      	ldr	r6, [r1, #0]
 802bdda:	bf08      	it	eq
 802bddc:	694b      	ldreq	r3, [r1, #20]
 802bdde:	600f      	str	r7, [r1, #0]
 802bde0:	bf18      	it	ne
 802bde2:	2300      	movne	r3, #0
 802bde4:	eba6 0807 	sub.w	r8, r6, r7
 802bde8:	608b      	str	r3, [r1, #8]
 802bdea:	f1b8 0f00 	cmp.w	r8, #0
 802bdee:	dd9c      	ble.n	802bd2a <__sflush_r+0x1a>
 802bdf0:	4643      	mov	r3, r8
 802bdf2:	463a      	mov	r2, r7
 802bdf4:	6a21      	ldr	r1, [r4, #32]
 802bdf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802bdf8:	4628      	mov	r0, r5
 802bdfa:	47b0      	blx	r6
 802bdfc:	2800      	cmp	r0, #0
 802bdfe:	dc06      	bgt.n	802be0e <__sflush_r+0xfe>
 802be00:	89a3      	ldrh	r3, [r4, #12]
 802be02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802be06:	81a3      	strh	r3, [r4, #12]
 802be08:	f04f 30ff 	mov.w	r0, #4294967295
 802be0c:	e78e      	b.n	802bd2c <__sflush_r+0x1c>
 802be0e:	4407      	add	r7, r0
 802be10:	eba8 0800 	sub.w	r8, r8, r0
 802be14:	e7e9      	b.n	802bdea <__sflush_r+0xda>
 802be16:	bf00      	nop
 802be18:	20400001 	.word	0x20400001

0802be1c <_fflush_r>:
 802be1c:	b538      	push	{r3, r4, r5, lr}
 802be1e:	690b      	ldr	r3, [r1, #16]
 802be20:	4605      	mov	r5, r0
 802be22:	460c      	mov	r4, r1
 802be24:	b1db      	cbz	r3, 802be5e <_fflush_r+0x42>
 802be26:	b118      	cbz	r0, 802be30 <_fflush_r+0x14>
 802be28:	6983      	ldr	r3, [r0, #24]
 802be2a:	b90b      	cbnz	r3, 802be30 <_fflush_r+0x14>
 802be2c:	f000 f860 	bl	802bef0 <__sinit>
 802be30:	4b0c      	ldr	r3, [pc, #48]	; (802be64 <_fflush_r+0x48>)
 802be32:	429c      	cmp	r4, r3
 802be34:	d109      	bne.n	802be4a <_fflush_r+0x2e>
 802be36:	686c      	ldr	r4, [r5, #4]
 802be38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802be3c:	b17b      	cbz	r3, 802be5e <_fflush_r+0x42>
 802be3e:	4621      	mov	r1, r4
 802be40:	4628      	mov	r0, r5
 802be42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802be46:	f7ff bf63 	b.w	802bd10 <__sflush_r>
 802be4a:	4b07      	ldr	r3, [pc, #28]	; (802be68 <_fflush_r+0x4c>)
 802be4c:	429c      	cmp	r4, r3
 802be4e:	d101      	bne.n	802be54 <_fflush_r+0x38>
 802be50:	68ac      	ldr	r4, [r5, #8]
 802be52:	e7f1      	b.n	802be38 <_fflush_r+0x1c>
 802be54:	4b05      	ldr	r3, [pc, #20]	; (802be6c <_fflush_r+0x50>)
 802be56:	429c      	cmp	r4, r3
 802be58:	bf08      	it	eq
 802be5a:	68ec      	ldreq	r4, [r5, #12]
 802be5c:	e7ec      	b.n	802be38 <_fflush_r+0x1c>
 802be5e:	2000      	movs	r0, #0
 802be60:	bd38      	pop	{r3, r4, r5, pc}
 802be62:	bf00      	nop
 802be64:	0802ef10 	.word	0x0802ef10
 802be68:	0802ef30 	.word	0x0802ef30
 802be6c:	0802eef0 	.word	0x0802eef0

0802be70 <std>:
 802be70:	2300      	movs	r3, #0
 802be72:	b510      	push	{r4, lr}
 802be74:	4604      	mov	r4, r0
 802be76:	e9c0 3300 	strd	r3, r3, [r0]
 802be7a:	6083      	str	r3, [r0, #8]
 802be7c:	8181      	strh	r1, [r0, #12]
 802be7e:	6643      	str	r3, [r0, #100]	; 0x64
 802be80:	81c2      	strh	r2, [r0, #14]
 802be82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802be86:	6183      	str	r3, [r0, #24]
 802be88:	4619      	mov	r1, r3
 802be8a:	2208      	movs	r2, #8
 802be8c:	305c      	adds	r0, #92	; 0x5c
 802be8e:	f7fd f8a6 	bl	8028fde <memset>
 802be92:	4b05      	ldr	r3, [pc, #20]	; (802bea8 <std+0x38>)
 802be94:	6263      	str	r3, [r4, #36]	; 0x24
 802be96:	4b05      	ldr	r3, [pc, #20]	; (802beac <std+0x3c>)
 802be98:	62a3      	str	r3, [r4, #40]	; 0x28
 802be9a:	4b05      	ldr	r3, [pc, #20]	; (802beb0 <std+0x40>)
 802be9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802be9e:	4b05      	ldr	r3, [pc, #20]	; (802beb4 <std+0x44>)
 802bea0:	6224      	str	r4, [r4, #32]
 802bea2:	6323      	str	r3, [r4, #48]	; 0x30
 802bea4:	bd10      	pop	{r4, pc}
 802bea6:	bf00      	nop
 802bea8:	0802d4a9 	.word	0x0802d4a9
 802beac:	0802d4cb 	.word	0x0802d4cb
 802beb0:	0802d503 	.word	0x0802d503
 802beb4:	0802d527 	.word	0x0802d527

0802beb8 <_cleanup_r>:
 802beb8:	4901      	ldr	r1, [pc, #4]	; (802bec0 <_cleanup_r+0x8>)
 802beba:	f000 b885 	b.w	802bfc8 <_fwalk_reent>
 802bebe:	bf00      	nop
 802bec0:	0802be1d 	.word	0x0802be1d

0802bec4 <__sfmoreglue>:
 802bec4:	b570      	push	{r4, r5, r6, lr}
 802bec6:	1e4a      	subs	r2, r1, #1
 802bec8:	2568      	movs	r5, #104	; 0x68
 802beca:	4355      	muls	r5, r2
 802becc:	460e      	mov	r6, r1
 802bece:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802bed2:	f001 f8c3 	bl	802d05c <_malloc_r>
 802bed6:	4604      	mov	r4, r0
 802bed8:	b140      	cbz	r0, 802beec <__sfmoreglue+0x28>
 802beda:	2100      	movs	r1, #0
 802bedc:	e9c0 1600 	strd	r1, r6, [r0]
 802bee0:	300c      	adds	r0, #12
 802bee2:	60a0      	str	r0, [r4, #8]
 802bee4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802bee8:	f7fd f879 	bl	8028fde <memset>
 802beec:	4620      	mov	r0, r4
 802beee:	bd70      	pop	{r4, r5, r6, pc}

0802bef0 <__sinit>:
 802bef0:	6983      	ldr	r3, [r0, #24]
 802bef2:	b510      	push	{r4, lr}
 802bef4:	4604      	mov	r4, r0
 802bef6:	bb33      	cbnz	r3, 802bf46 <__sinit+0x56>
 802bef8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802befc:	6503      	str	r3, [r0, #80]	; 0x50
 802befe:	4b12      	ldr	r3, [pc, #72]	; (802bf48 <__sinit+0x58>)
 802bf00:	4a12      	ldr	r2, [pc, #72]	; (802bf4c <__sinit+0x5c>)
 802bf02:	681b      	ldr	r3, [r3, #0]
 802bf04:	6282      	str	r2, [r0, #40]	; 0x28
 802bf06:	4298      	cmp	r0, r3
 802bf08:	bf04      	itt	eq
 802bf0a:	2301      	moveq	r3, #1
 802bf0c:	6183      	streq	r3, [r0, #24]
 802bf0e:	f000 f81f 	bl	802bf50 <__sfp>
 802bf12:	6060      	str	r0, [r4, #4]
 802bf14:	4620      	mov	r0, r4
 802bf16:	f000 f81b 	bl	802bf50 <__sfp>
 802bf1a:	60a0      	str	r0, [r4, #8]
 802bf1c:	4620      	mov	r0, r4
 802bf1e:	f000 f817 	bl	802bf50 <__sfp>
 802bf22:	2200      	movs	r2, #0
 802bf24:	60e0      	str	r0, [r4, #12]
 802bf26:	2104      	movs	r1, #4
 802bf28:	6860      	ldr	r0, [r4, #4]
 802bf2a:	f7ff ffa1 	bl	802be70 <std>
 802bf2e:	2201      	movs	r2, #1
 802bf30:	2109      	movs	r1, #9
 802bf32:	68a0      	ldr	r0, [r4, #8]
 802bf34:	f7ff ff9c 	bl	802be70 <std>
 802bf38:	2202      	movs	r2, #2
 802bf3a:	2112      	movs	r1, #18
 802bf3c:	68e0      	ldr	r0, [r4, #12]
 802bf3e:	f7ff ff97 	bl	802be70 <std>
 802bf42:	2301      	movs	r3, #1
 802bf44:	61a3      	str	r3, [r4, #24]
 802bf46:	bd10      	pop	{r4, pc}
 802bf48:	0802ee3c 	.word	0x0802ee3c
 802bf4c:	0802beb9 	.word	0x0802beb9

0802bf50 <__sfp>:
 802bf50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bf52:	4b1b      	ldr	r3, [pc, #108]	; (802bfc0 <__sfp+0x70>)
 802bf54:	681e      	ldr	r6, [r3, #0]
 802bf56:	69b3      	ldr	r3, [r6, #24]
 802bf58:	4607      	mov	r7, r0
 802bf5a:	b913      	cbnz	r3, 802bf62 <__sfp+0x12>
 802bf5c:	4630      	mov	r0, r6
 802bf5e:	f7ff ffc7 	bl	802bef0 <__sinit>
 802bf62:	3648      	adds	r6, #72	; 0x48
 802bf64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802bf68:	3b01      	subs	r3, #1
 802bf6a:	d503      	bpl.n	802bf74 <__sfp+0x24>
 802bf6c:	6833      	ldr	r3, [r6, #0]
 802bf6e:	b133      	cbz	r3, 802bf7e <__sfp+0x2e>
 802bf70:	6836      	ldr	r6, [r6, #0]
 802bf72:	e7f7      	b.n	802bf64 <__sfp+0x14>
 802bf74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802bf78:	b16d      	cbz	r5, 802bf96 <__sfp+0x46>
 802bf7a:	3468      	adds	r4, #104	; 0x68
 802bf7c:	e7f4      	b.n	802bf68 <__sfp+0x18>
 802bf7e:	2104      	movs	r1, #4
 802bf80:	4638      	mov	r0, r7
 802bf82:	f7ff ff9f 	bl	802bec4 <__sfmoreglue>
 802bf86:	6030      	str	r0, [r6, #0]
 802bf88:	2800      	cmp	r0, #0
 802bf8a:	d1f1      	bne.n	802bf70 <__sfp+0x20>
 802bf8c:	230c      	movs	r3, #12
 802bf8e:	603b      	str	r3, [r7, #0]
 802bf90:	4604      	mov	r4, r0
 802bf92:	4620      	mov	r0, r4
 802bf94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802bf96:	4b0b      	ldr	r3, [pc, #44]	; (802bfc4 <__sfp+0x74>)
 802bf98:	6665      	str	r5, [r4, #100]	; 0x64
 802bf9a:	e9c4 5500 	strd	r5, r5, [r4]
 802bf9e:	60a5      	str	r5, [r4, #8]
 802bfa0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802bfa4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802bfa8:	2208      	movs	r2, #8
 802bfaa:	4629      	mov	r1, r5
 802bfac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802bfb0:	f7fd f815 	bl	8028fde <memset>
 802bfb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802bfb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802bfbc:	e7e9      	b.n	802bf92 <__sfp+0x42>
 802bfbe:	bf00      	nop
 802bfc0:	0802ee3c 	.word	0x0802ee3c
 802bfc4:	ffff0001 	.word	0xffff0001

0802bfc8 <_fwalk_reent>:
 802bfc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bfcc:	4680      	mov	r8, r0
 802bfce:	4689      	mov	r9, r1
 802bfd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802bfd4:	2600      	movs	r6, #0
 802bfd6:	b914      	cbnz	r4, 802bfde <_fwalk_reent+0x16>
 802bfd8:	4630      	mov	r0, r6
 802bfda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bfde:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802bfe2:	3f01      	subs	r7, #1
 802bfe4:	d501      	bpl.n	802bfea <_fwalk_reent+0x22>
 802bfe6:	6824      	ldr	r4, [r4, #0]
 802bfe8:	e7f5      	b.n	802bfd6 <_fwalk_reent+0xe>
 802bfea:	89ab      	ldrh	r3, [r5, #12]
 802bfec:	2b01      	cmp	r3, #1
 802bfee:	d907      	bls.n	802c000 <_fwalk_reent+0x38>
 802bff0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802bff4:	3301      	adds	r3, #1
 802bff6:	d003      	beq.n	802c000 <_fwalk_reent+0x38>
 802bff8:	4629      	mov	r1, r5
 802bffa:	4640      	mov	r0, r8
 802bffc:	47c8      	blx	r9
 802bffe:	4306      	orrs	r6, r0
 802c000:	3568      	adds	r5, #104	; 0x68
 802c002:	e7ee      	b.n	802bfe2 <_fwalk_reent+0x1a>

0802c004 <rshift>:
 802c004:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c006:	6906      	ldr	r6, [r0, #16]
 802c008:	114b      	asrs	r3, r1, #5
 802c00a:	429e      	cmp	r6, r3
 802c00c:	f100 0414 	add.w	r4, r0, #20
 802c010:	dd30      	ble.n	802c074 <rshift+0x70>
 802c012:	f011 011f 	ands.w	r1, r1, #31
 802c016:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 802c01a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 802c01e:	d108      	bne.n	802c032 <rshift+0x2e>
 802c020:	4621      	mov	r1, r4
 802c022:	42b2      	cmp	r2, r6
 802c024:	460b      	mov	r3, r1
 802c026:	d211      	bcs.n	802c04c <rshift+0x48>
 802c028:	f852 3b04 	ldr.w	r3, [r2], #4
 802c02c:	f841 3b04 	str.w	r3, [r1], #4
 802c030:	e7f7      	b.n	802c022 <rshift+0x1e>
 802c032:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 802c036:	f1c1 0c20 	rsb	ip, r1, #32
 802c03a:	40cd      	lsrs	r5, r1
 802c03c:	3204      	adds	r2, #4
 802c03e:	4623      	mov	r3, r4
 802c040:	42b2      	cmp	r2, r6
 802c042:	4617      	mov	r7, r2
 802c044:	d30c      	bcc.n	802c060 <rshift+0x5c>
 802c046:	601d      	str	r5, [r3, #0]
 802c048:	b105      	cbz	r5, 802c04c <rshift+0x48>
 802c04a:	3304      	adds	r3, #4
 802c04c:	1b1a      	subs	r2, r3, r4
 802c04e:	42a3      	cmp	r3, r4
 802c050:	ea4f 02a2 	mov.w	r2, r2, asr #2
 802c054:	bf08      	it	eq
 802c056:	2300      	moveq	r3, #0
 802c058:	6102      	str	r2, [r0, #16]
 802c05a:	bf08      	it	eq
 802c05c:	6143      	streq	r3, [r0, #20]
 802c05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c060:	683f      	ldr	r7, [r7, #0]
 802c062:	fa07 f70c 	lsl.w	r7, r7, ip
 802c066:	433d      	orrs	r5, r7
 802c068:	f843 5b04 	str.w	r5, [r3], #4
 802c06c:	f852 5b04 	ldr.w	r5, [r2], #4
 802c070:	40cd      	lsrs	r5, r1
 802c072:	e7e5      	b.n	802c040 <rshift+0x3c>
 802c074:	4623      	mov	r3, r4
 802c076:	e7e9      	b.n	802c04c <rshift+0x48>

0802c078 <__hexdig_fun>:
 802c078:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 802c07c:	2b09      	cmp	r3, #9
 802c07e:	d802      	bhi.n	802c086 <__hexdig_fun+0xe>
 802c080:	3820      	subs	r0, #32
 802c082:	b2c0      	uxtb	r0, r0
 802c084:	4770      	bx	lr
 802c086:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 802c08a:	2b05      	cmp	r3, #5
 802c08c:	d801      	bhi.n	802c092 <__hexdig_fun+0x1a>
 802c08e:	3847      	subs	r0, #71	; 0x47
 802c090:	e7f7      	b.n	802c082 <__hexdig_fun+0xa>
 802c092:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 802c096:	2b05      	cmp	r3, #5
 802c098:	d801      	bhi.n	802c09e <__hexdig_fun+0x26>
 802c09a:	3827      	subs	r0, #39	; 0x27
 802c09c:	e7f1      	b.n	802c082 <__hexdig_fun+0xa>
 802c09e:	2000      	movs	r0, #0
 802c0a0:	4770      	bx	lr

0802c0a2 <__gethex>:
 802c0a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c0a6:	b08b      	sub	sp, #44	; 0x2c
 802c0a8:	468a      	mov	sl, r1
 802c0aa:	9002      	str	r0, [sp, #8]
 802c0ac:	9816      	ldr	r0, [sp, #88]	; 0x58
 802c0ae:	9306      	str	r3, [sp, #24]
 802c0b0:	4690      	mov	r8, r2
 802c0b2:	f000 fad0 	bl	802c656 <__localeconv_l>
 802c0b6:	6803      	ldr	r3, [r0, #0]
 802c0b8:	9303      	str	r3, [sp, #12]
 802c0ba:	4618      	mov	r0, r3
 802c0bc:	f7d4 f890 	bl	80001e0 <strlen>
 802c0c0:	9b03      	ldr	r3, [sp, #12]
 802c0c2:	9001      	str	r0, [sp, #4]
 802c0c4:	4403      	add	r3, r0
 802c0c6:	f04f 0b00 	mov.w	fp, #0
 802c0ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802c0ce:	9307      	str	r3, [sp, #28]
 802c0d0:	f8da 3000 	ldr.w	r3, [sl]
 802c0d4:	3302      	adds	r3, #2
 802c0d6:	461f      	mov	r7, r3
 802c0d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 802c0dc:	2830      	cmp	r0, #48	; 0x30
 802c0de:	d06c      	beq.n	802c1ba <__gethex+0x118>
 802c0e0:	f7ff ffca 	bl	802c078 <__hexdig_fun>
 802c0e4:	4604      	mov	r4, r0
 802c0e6:	2800      	cmp	r0, #0
 802c0e8:	d16a      	bne.n	802c1c0 <__gethex+0x11e>
 802c0ea:	9a01      	ldr	r2, [sp, #4]
 802c0ec:	9903      	ldr	r1, [sp, #12]
 802c0ee:	4638      	mov	r0, r7
 802c0f0:	f001 fa1d 	bl	802d52e <strncmp>
 802c0f4:	2800      	cmp	r0, #0
 802c0f6:	d166      	bne.n	802c1c6 <__gethex+0x124>
 802c0f8:	9b01      	ldr	r3, [sp, #4]
 802c0fa:	5cf8      	ldrb	r0, [r7, r3]
 802c0fc:	18fe      	adds	r6, r7, r3
 802c0fe:	f7ff ffbb 	bl	802c078 <__hexdig_fun>
 802c102:	2800      	cmp	r0, #0
 802c104:	d062      	beq.n	802c1cc <__gethex+0x12a>
 802c106:	4633      	mov	r3, r6
 802c108:	7818      	ldrb	r0, [r3, #0]
 802c10a:	2830      	cmp	r0, #48	; 0x30
 802c10c:	461f      	mov	r7, r3
 802c10e:	f103 0301 	add.w	r3, r3, #1
 802c112:	d0f9      	beq.n	802c108 <__gethex+0x66>
 802c114:	f7ff ffb0 	bl	802c078 <__hexdig_fun>
 802c118:	fab0 f580 	clz	r5, r0
 802c11c:	096d      	lsrs	r5, r5, #5
 802c11e:	4634      	mov	r4, r6
 802c120:	f04f 0b01 	mov.w	fp, #1
 802c124:	463a      	mov	r2, r7
 802c126:	4616      	mov	r6, r2
 802c128:	3201      	adds	r2, #1
 802c12a:	7830      	ldrb	r0, [r6, #0]
 802c12c:	f7ff ffa4 	bl	802c078 <__hexdig_fun>
 802c130:	2800      	cmp	r0, #0
 802c132:	d1f8      	bne.n	802c126 <__gethex+0x84>
 802c134:	9a01      	ldr	r2, [sp, #4]
 802c136:	9903      	ldr	r1, [sp, #12]
 802c138:	4630      	mov	r0, r6
 802c13a:	f001 f9f8 	bl	802d52e <strncmp>
 802c13e:	b950      	cbnz	r0, 802c156 <__gethex+0xb4>
 802c140:	b954      	cbnz	r4, 802c158 <__gethex+0xb6>
 802c142:	9b01      	ldr	r3, [sp, #4]
 802c144:	18f4      	adds	r4, r6, r3
 802c146:	4622      	mov	r2, r4
 802c148:	4616      	mov	r6, r2
 802c14a:	3201      	adds	r2, #1
 802c14c:	7830      	ldrb	r0, [r6, #0]
 802c14e:	f7ff ff93 	bl	802c078 <__hexdig_fun>
 802c152:	2800      	cmp	r0, #0
 802c154:	d1f8      	bne.n	802c148 <__gethex+0xa6>
 802c156:	b10c      	cbz	r4, 802c15c <__gethex+0xba>
 802c158:	1ba4      	subs	r4, r4, r6
 802c15a:	00a4      	lsls	r4, r4, #2
 802c15c:	7833      	ldrb	r3, [r6, #0]
 802c15e:	2b50      	cmp	r3, #80	; 0x50
 802c160:	d001      	beq.n	802c166 <__gethex+0xc4>
 802c162:	2b70      	cmp	r3, #112	; 0x70
 802c164:	d140      	bne.n	802c1e8 <__gethex+0x146>
 802c166:	7873      	ldrb	r3, [r6, #1]
 802c168:	2b2b      	cmp	r3, #43	; 0x2b
 802c16a:	d031      	beq.n	802c1d0 <__gethex+0x12e>
 802c16c:	2b2d      	cmp	r3, #45	; 0x2d
 802c16e:	d033      	beq.n	802c1d8 <__gethex+0x136>
 802c170:	1c71      	adds	r1, r6, #1
 802c172:	f04f 0900 	mov.w	r9, #0
 802c176:	7808      	ldrb	r0, [r1, #0]
 802c178:	f7ff ff7e 	bl	802c078 <__hexdig_fun>
 802c17c:	1e43      	subs	r3, r0, #1
 802c17e:	b2db      	uxtb	r3, r3
 802c180:	2b18      	cmp	r3, #24
 802c182:	d831      	bhi.n	802c1e8 <__gethex+0x146>
 802c184:	f1a0 0210 	sub.w	r2, r0, #16
 802c188:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 802c18c:	f7ff ff74 	bl	802c078 <__hexdig_fun>
 802c190:	1e43      	subs	r3, r0, #1
 802c192:	b2db      	uxtb	r3, r3
 802c194:	2b18      	cmp	r3, #24
 802c196:	d922      	bls.n	802c1de <__gethex+0x13c>
 802c198:	f1b9 0f00 	cmp.w	r9, #0
 802c19c:	d000      	beq.n	802c1a0 <__gethex+0xfe>
 802c19e:	4252      	negs	r2, r2
 802c1a0:	4414      	add	r4, r2
 802c1a2:	f8ca 1000 	str.w	r1, [sl]
 802c1a6:	b30d      	cbz	r5, 802c1ec <__gethex+0x14a>
 802c1a8:	f1bb 0f00 	cmp.w	fp, #0
 802c1ac:	bf0c      	ite	eq
 802c1ae:	2706      	moveq	r7, #6
 802c1b0:	2700      	movne	r7, #0
 802c1b2:	4638      	mov	r0, r7
 802c1b4:	b00b      	add	sp, #44	; 0x2c
 802c1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c1ba:	f10b 0b01 	add.w	fp, fp, #1
 802c1be:	e78a      	b.n	802c0d6 <__gethex+0x34>
 802c1c0:	2500      	movs	r5, #0
 802c1c2:	462c      	mov	r4, r5
 802c1c4:	e7ae      	b.n	802c124 <__gethex+0x82>
 802c1c6:	463e      	mov	r6, r7
 802c1c8:	2501      	movs	r5, #1
 802c1ca:	e7c7      	b.n	802c15c <__gethex+0xba>
 802c1cc:	4604      	mov	r4, r0
 802c1ce:	e7fb      	b.n	802c1c8 <__gethex+0x126>
 802c1d0:	f04f 0900 	mov.w	r9, #0
 802c1d4:	1cb1      	adds	r1, r6, #2
 802c1d6:	e7ce      	b.n	802c176 <__gethex+0xd4>
 802c1d8:	f04f 0901 	mov.w	r9, #1
 802c1dc:	e7fa      	b.n	802c1d4 <__gethex+0x132>
 802c1de:	230a      	movs	r3, #10
 802c1e0:	fb03 0202 	mla	r2, r3, r2, r0
 802c1e4:	3a10      	subs	r2, #16
 802c1e6:	e7cf      	b.n	802c188 <__gethex+0xe6>
 802c1e8:	4631      	mov	r1, r6
 802c1ea:	e7da      	b.n	802c1a2 <__gethex+0x100>
 802c1ec:	1bf3      	subs	r3, r6, r7
 802c1ee:	3b01      	subs	r3, #1
 802c1f0:	4629      	mov	r1, r5
 802c1f2:	2b07      	cmp	r3, #7
 802c1f4:	dc49      	bgt.n	802c28a <__gethex+0x1e8>
 802c1f6:	9802      	ldr	r0, [sp, #8]
 802c1f8:	f000 fad5 	bl	802c7a6 <_Balloc>
 802c1fc:	9b01      	ldr	r3, [sp, #4]
 802c1fe:	f100 0914 	add.w	r9, r0, #20
 802c202:	f04f 0b00 	mov.w	fp, #0
 802c206:	f1c3 0301 	rsb	r3, r3, #1
 802c20a:	4605      	mov	r5, r0
 802c20c:	f8cd 9010 	str.w	r9, [sp, #16]
 802c210:	46da      	mov	sl, fp
 802c212:	9308      	str	r3, [sp, #32]
 802c214:	42b7      	cmp	r7, r6
 802c216:	d33b      	bcc.n	802c290 <__gethex+0x1ee>
 802c218:	9804      	ldr	r0, [sp, #16]
 802c21a:	f840 ab04 	str.w	sl, [r0], #4
 802c21e:	eba0 0009 	sub.w	r0, r0, r9
 802c222:	1080      	asrs	r0, r0, #2
 802c224:	6128      	str	r0, [r5, #16]
 802c226:	0147      	lsls	r7, r0, #5
 802c228:	4650      	mov	r0, sl
 802c22a:	f000 fb80 	bl	802c92e <__hi0bits>
 802c22e:	f8d8 6000 	ldr.w	r6, [r8]
 802c232:	1a3f      	subs	r7, r7, r0
 802c234:	42b7      	cmp	r7, r6
 802c236:	dd64      	ble.n	802c302 <__gethex+0x260>
 802c238:	1bbf      	subs	r7, r7, r6
 802c23a:	4639      	mov	r1, r7
 802c23c:	4628      	mov	r0, r5
 802c23e:	f000 fe8f 	bl	802cf60 <__any_on>
 802c242:	4682      	mov	sl, r0
 802c244:	b178      	cbz	r0, 802c266 <__gethex+0x1c4>
 802c246:	1e7b      	subs	r3, r7, #1
 802c248:	1159      	asrs	r1, r3, #5
 802c24a:	f003 021f 	and.w	r2, r3, #31
 802c24e:	f04f 0a01 	mov.w	sl, #1
 802c252:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 802c256:	fa0a f202 	lsl.w	r2, sl, r2
 802c25a:	420a      	tst	r2, r1
 802c25c:	d003      	beq.n	802c266 <__gethex+0x1c4>
 802c25e:	4553      	cmp	r3, sl
 802c260:	dc46      	bgt.n	802c2f0 <__gethex+0x24e>
 802c262:	f04f 0a02 	mov.w	sl, #2
 802c266:	4639      	mov	r1, r7
 802c268:	4628      	mov	r0, r5
 802c26a:	f7ff fecb 	bl	802c004 <rshift>
 802c26e:	443c      	add	r4, r7
 802c270:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802c274:	42a3      	cmp	r3, r4
 802c276:	da52      	bge.n	802c31e <__gethex+0x27c>
 802c278:	4629      	mov	r1, r5
 802c27a:	9802      	ldr	r0, [sp, #8]
 802c27c:	f000 fac7 	bl	802c80e <_Bfree>
 802c280:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802c282:	2300      	movs	r3, #0
 802c284:	6013      	str	r3, [r2, #0]
 802c286:	27a3      	movs	r7, #163	; 0xa3
 802c288:	e793      	b.n	802c1b2 <__gethex+0x110>
 802c28a:	3101      	adds	r1, #1
 802c28c:	105b      	asrs	r3, r3, #1
 802c28e:	e7b0      	b.n	802c1f2 <__gethex+0x150>
 802c290:	1e73      	subs	r3, r6, #1
 802c292:	9305      	str	r3, [sp, #20]
 802c294:	9a07      	ldr	r2, [sp, #28]
 802c296:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802c29a:	4293      	cmp	r3, r2
 802c29c:	d018      	beq.n	802c2d0 <__gethex+0x22e>
 802c29e:	f1bb 0f20 	cmp.w	fp, #32
 802c2a2:	d107      	bne.n	802c2b4 <__gethex+0x212>
 802c2a4:	9b04      	ldr	r3, [sp, #16]
 802c2a6:	f8c3 a000 	str.w	sl, [r3]
 802c2aa:	3304      	adds	r3, #4
 802c2ac:	f04f 0a00 	mov.w	sl, #0
 802c2b0:	9304      	str	r3, [sp, #16]
 802c2b2:	46d3      	mov	fp, sl
 802c2b4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 802c2b8:	f7ff fede 	bl	802c078 <__hexdig_fun>
 802c2bc:	f000 000f 	and.w	r0, r0, #15
 802c2c0:	fa00 f00b 	lsl.w	r0, r0, fp
 802c2c4:	ea4a 0a00 	orr.w	sl, sl, r0
 802c2c8:	f10b 0b04 	add.w	fp, fp, #4
 802c2cc:	9b05      	ldr	r3, [sp, #20]
 802c2ce:	e00d      	b.n	802c2ec <__gethex+0x24a>
 802c2d0:	9b05      	ldr	r3, [sp, #20]
 802c2d2:	9a08      	ldr	r2, [sp, #32]
 802c2d4:	4413      	add	r3, r2
 802c2d6:	42bb      	cmp	r3, r7
 802c2d8:	d3e1      	bcc.n	802c29e <__gethex+0x1fc>
 802c2da:	4618      	mov	r0, r3
 802c2dc:	9a01      	ldr	r2, [sp, #4]
 802c2de:	9903      	ldr	r1, [sp, #12]
 802c2e0:	9309      	str	r3, [sp, #36]	; 0x24
 802c2e2:	f001 f924 	bl	802d52e <strncmp>
 802c2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c2e8:	2800      	cmp	r0, #0
 802c2ea:	d1d8      	bne.n	802c29e <__gethex+0x1fc>
 802c2ec:	461e      	mov	r6, r3
 802c2ee:	e791      	b.n	802c214 <__gethex+0x172>
 802c2f0:	1eb9      	subs	r1, r7, #2
 802c2f2:	4628      	mov	r0, r5
 802c2f4:	f000 fe34 	bl	802cf60 <__any_on>
 802c2f8:	2800      	cmp	r0, #0
 802c2fa:	d0b2      	beq.n	802c262 <__gethex+0x1c0>
 802c2fc:	f04f 0a03 	mov.w	sl, #3
 802c300:	e7b1      	b.n	802c266 <__gethex+0x1c4>
 802c302:	da09      	bge.n	802c318 <__gethex+0x276>
 802c304:	1bf7      	subs	r7, r6, r7
 802c306:	4629      	mov	r1, r5
 802c308:	463a      	mov	r2, r7
 802c30a:	9802      	ldr	r0, [sp, #8]
 802c30c:	f000 fc4a 	bl	802cba4 <__lshift>
 802c310:	1be4      	subs	r4, r4, r7
 802c312:	4605      	mov	r5, r0
 802c314:	f100 0914 	add.w	r9, r0, #20
 802c318:	f04f 0a00 	mov.w	sl, #0
 802c31c:	e7a8      	b.n	802c270 <__gethex+0x1ce>
 802c31e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802c322:	42a0      	cmp	r0, r4
 802c324:	dd6a      	ble.n	802c3fc <__gethex+0x35a>
 802c326:	1b04      	subs	r4, r0, r4
 802c328:	42a6      	cmp	r6, r4
 802c32a:	dc2e      	bgt.n	802c38a <__gethex+0x2e8>
 802c32c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802c330:	2b02      	cmp	r3, #2
 802c332:	d022      	beq.n	802c37a <__gethex+0x2d8>
 802c334:	2b03      	cmp	r3, #3
 802c336:	d024      	beq.n	802c382 <__gethex+0x2e0>
 802c338:	2b01      	cmp	r3, #1
 802c33a:	d115      	bne.n	802c368 <__gethex+0x2c6>
 802c33c:	42a6      	cmp	r6, r4
 802c33e:	d113      	bne.n	802c368 <__gethex+0x2c6>
 802c340:	2e01      	cmp	r6, #1
 802c342:	dc0b      	bgt.n	802c35c <__gethex+0x2ba>
 802c344:	9a06      	ldr	r2, [sp, #24]
 802c346:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802c34a:	6013      	str	r3, [r2, #0]
 802c34c:	2301      	movs	r3, #1
 802c34e:	612b      	str	r3, [r5, #16]
 802c350:	f8c9 3000 	str.w	r3, [r9]
 802c354:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802c356:	2762      	movs	r7, #98	; 0x62
 802c358:	601d      	str	r5, [r3, #0]
 802c35a:	e72a      	b.n	802c1b2 <__gethex+0x110>
 802c35c:	1e71      	subs	r1, r6, #1
 802c35e:	4628      	mov	r0, r5
 802c360:	f000 fdfe 	bl	802cf60 <__any_on>
 802c364:	2800      	cmp	r0, #0
 802c366:	d1ed      	bne.n	802c344 <__gethex+0x2a2>
 802c368:	4629      	mov	r1, r5
 802c36a:	9802      	ldr	r0, [sp, #8]
 802c36c:	f000 fa4f 	bl	802c80e <_Bfree>
 802c370:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802c372:	2300      	movs	r3, #0
 802c374:	6013      	str	r3, [r2, #0]
 802c376:	2750      	movs	r7, #80	; 0x50
 802c378:	e71b      	b.n	802c1b2 <__gethex+0x110>
 802c37a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802c37c:	2b00      	cmp	r3, #0
 802c37e:	d0e1      	beq.n	802c344 <__gethex+0x2a2>
 802c380:	e7f2      	b.n	802c368 <__gethex+0x2c6>
 802c382:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802c384:	2b00      	cmp	r3, #0
 802c386:	d1dd      	bne.n	802c344 <__gethex+0x2a2>
 802c388:	e7ee      	b.n	802c368 <__gethex+0x2c6>
 802c38a:	1e67      	subs	r7, r4, #1
 802c38c:	f1ba 0f00 	cmp.w	sl, #0
 802c390:	d131      	bne.n	802c3f6 <__gethex+0x354>
 802c392:	b127      	cbz	r7, 802c39e <__gethex+0x2fc>
 802c394:	4639      	mov	r1, r7
 802c396:	4628      	mov	r0, r5
 802c398:	f000 fde2 	bl	802cf60 <__any_on>
 802c39c:	4682      	mov	sl, r0
 802c39e:	117a      	asrs	r2, r7, #5
 802c3a0:	2301      	movs	r3, #1
 802c3a2:	f007 071f 	and.w	r7, r7, #31
 802c3a6:	fa03 f707 	lsl.w	r7, r3, r7
 802c3aa:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 802c3ae:	4621      	mov	r1, r4
 802c3b0:	421f      	tst	r7, r3
 802c3b2:	4628      	mov	r0, r5
 802c3b4:	bf18      	it	ne
 802c3b6:	f04a 0a02 	orrne.w	sl, sl, #2
 802c3ba:	1b36      	subs	r6, r6, r4
 802c3bc:	f7ff fe22 	bl	802c004 <rshift>
 802c3c0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 802c3c4:	2702      	movs	r7, #2
 802c3c6:	f1ba 0f00 	cmp.w	sl, #0
 802c3ca:	d048      	beq.n	802c45e <__gethex+0x3bc>
 802c3cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802c3d0:	2b02      	cmp	r3, #2
 802c3d2:	d015      	beq.n	802c400 <__gethex+0x35e>
 802c3d4:	2b03      	cmp	r3, #3
 802c3d6:	d017      	beq.n	802c408 <__gethex+0x366>
 802c3d8:	2b01      	cmp	r3, #1
 802c3da:	d109      	bne.n	802c3f0 <__gethex+0x34e>
 802c3dc:	f01a 0f02 	tst.w	sl, #2
 802c3e0:	d006      	beq.n	802c3f0 <__gethex+0x34e>
 802c3e2:	f8d9 3000 	ldr.w	r3, [r9]
 802c3e6:	ea4a 0a03 	orr.w	sl, sl, r3
 802c3ea:	f01a 0f01 	tst.w	sl, #1
 802c3ee:	d10e      	bne.n	802c40e <__gethex+0x36c>
 802c3f0:	f047 0710 	orr.w	r7, r7, #16
 802c3f4:	e033      	b.n	802c45e <__gethex+0x3bc>
 802c3f6:	f04f 0a01 	mov.w	sl, #1
 802c3fa:	e7d0      	b.n	802c39e <__gethex+0x2fc>
 802c3fc:	2701      	movs	r7, #1
 802c3fe:	e7e2      	b.n	802c3c6 <__gethex+0x324>
 802c400:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802c402:	f1c3 0301 	rsb	r3, r3, #1
 802c406:	9315      	str	r3, [sp, #84]	; 0x54
 802c408:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802c40a:	2b00      	cmp	r3, #0
 802c40c:	d0f0      	beq.n	802c3f0 <__gethex+0x34e>
 802c40e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 802c412:	f105 0314 	add.w	r3, r5, #20
 802c416:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 802c41a:	eb03 010a 	add.w	r1, r3, sl
 802c41e:	f04f 0c00 	mov.w	ip, #0
 802c422:	4618      	mov	r0, r3
 802c424:	f853 2b04 	ldr.w	r2, [r3], #4
 802c428:	f1b2 3fff 	cmp.w	r2, #4294967295
 802c42c:	d01c      	beq.n	802c468 <__gethex+0x3c6>
 802c42e:	3201      	adds	r2, #1
 802c430:	6002      	str	r2, [r0, #0]
 802c432:	2f02      	cmp	r7, #2
 802c434:	f105 0314 	add.w	r3, r5, #20
 802c438:	d138      	bne.n	802c4ac <__gethex+0x40a>
 802c43a:	f8d8 2000 	ldr.w	r2, [r8]
 802c43e:	3a01      	subs	r2, #1
 802c440:	42b2      	cmp	r2, r6
 802c442:	d10a      	bne.n	802c45a <__gethex+0x3b8>
 802c444:	1171      	asrs	r1, r6, #5
 802c446:	2201      	movs	r2, #1
 802c448:	f006 061f 	and.w	r6, r6, #31
 802c44c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802c450:	fa02 f606 	lsl.w	r6, r2, r6
 802c454:	421e      	tst	r6, r3
 802c456:	bf18      	it	ne
 802c458:	4617      	movne	r7, r2
 802c45a:	f047 0720 	orr.w	r7, r7, #32
 802c45e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802c460:	601d      	str	r5, [r3, #0]
 802c462:	9b06      	ldr	r3, [sp, #24]
 802c464:	601c      	str	r4, [r3, #0]
 802c466:	e6a4      	b.n	802c1b2 <__gethex+0x110>
 802c468:	4299      	cmp	r1, r3
 802c46a:	f843 cc04 	str.w	ip, [r3, #-4]
 802c46e:	d8d8      	bhi.n	802c422 <__gethex+0x380>
 802c470:	68ab      	ldr	r3, [r5, #8]
 802c472:	4599      	cmp	r9, r3
 802c474:	db12      	blt.n	802c49c <__gethex+0x3fa>
 802c476:	6869      	ldr	r1, [r5, #4]
 802c478:	9802      	ldr	r0, [sp, #8]
 802c47a:	3101      	adds	r1, #1
 802c47c:	f000 f993 	bl	802c7a6 <_Balloc>
 802c480:	692a      	ldr	r2, [r5, #16]
 802c482:	3202      	adds	r2, #2
 802c484:	f105 010c 	add.w	r1, r5, #12
 802c488:	4683      	mov	fp, r0
 802c48a:	0092      	lsls	r2, r2, #2
 802c48c:	300c      	adds	r0, #12
 802c48e:	f7fc fd9b 	bl	8028fc8 <memcpy>
 802c492:	4629      	mov	r1, r5
 802c494:	9802      	ldr	r0, [sp, #8]
 802c496:	f000 f9ba 	bl	802c80e <_Bfree>
 802c49a:	465d      	mov	r5, fp
 802c49c:	692b      	ldr	r3, [r5, #16]
 802c49e:	1c5a      	adds	r2, r3, #1
 802c4a0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 802c4a4:	612a      	str	r2, [r5, #16]
 802c4a6:	2201      	movs	r2, #1
 802c4a8:	615a      	str	r2, [r3, #20]
 802c4aa:	e7c2      	b.n	802c432 <__gethex+0x390>
 802c4ac:	692a      	ldr	r2, [r5, #16]
 802c4ae:	454a      	cmp	r2, r9
 802c4b0:	dd0b      	ble.n	802c4ca <__gethex+0x428>
 802c4b2:	2101      	movs	r1, #1
 802c4b4:	4628      	mov	r0, r5
 802c4b6:	f7ff fda5 	bl	802c004 <rshift>
 802c4ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802c4be:	3401      	adds	r4, #1
 802c4c0:	42a3      	cmp	r3, r4
 802c4c2:	f6ff aed9 	blt.w	802c278 <__gethex+0x1d6>
 802c4c6:	2701      	movs	r7, #1
 802c4c8:	e7c7      	b.n	802c45a <__gethex+0x3b8>
 802c4ca:	f016 061f 	ands.w	r6, r6, #31
 802c4ce:	d0fa      	beq.n	802c4c6 <__gethex+0x424>
 802c4d0:	449a      	add	sl, r3
 802c4d2:	f1c6 0620 	rsb	r6, r6, #32
 802c4d6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 802c4da:	f000 fa28 	bl	802c92e <__hi0bits>
 802c4de:	42b0      	cmp	r0, r6
 802c4e0:	dbe7      	blt.n	802c4b2 <__gethex+0x410>
 802c4e2:	e7f0      	b.n	802c4c6 <__gethex+0x424>

0802c4e4 <L_shift>:
 802c4e4:	f1c2 0208 	rsb	r2, r2, #8
 802c4e8:	0092      	lsls	r2, r2, #2
 802c4ea:	b570      	push	{r4, r5, r6, lr}
 802c4ec:	f1c2 0620 	rsb	r6, r2, #32
 802c4f0:	6843      	ldr	r3, [r0, #4]
 802c4f2:	6804      	ldr	r4, [r0, #0]
 802c4f4:	fa03 f506 	lsl.w	r5, r3, r6
 802c4f8:	432c      	orrs	r4, r5
 802c4fa:	40d3      	lsrs	r3, r2
 802c4fc:	6004      	str	r4, [r0, #0]
 802c4fe:	f840 3f04 	str.w	r3, [r0, #4]!
 802c502:	4288      	cmp	r0, r1
 802c504:	d3f4      	bcc.n	802c4f0 <L_shift+0xc>
 802c506:	bd70      	pop	{r4, r5, r6, pc}

0802c508 <__match>:
 802c508:	b530      	push	{r4, r5, lr}
 802c50a:	6803      	ldr	r3, [r0, #0]
 802c50c:	3301      	adds	r3, #1
 802c50e:	f811 4b01 	ldrb.w	r4, [r1], #1
 802c512:	b914      	cbnz	r4, 802c51a <__match+0x12>
 802c514:	6003      	str	r3, [r0, #0]
 802c516:	2001      	movs	r0, #1
 802c518:	bd30      	pop	{r4, r5, pc}
 802c51a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c51e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 802c522:	2d19      	cmp	r5, #25
 802c524:	bf98      	it	ls
 802c526:	3220      	addls	r2, #32
 802c528:	42a2      	cmp	r2, r4
 802c52a:	d0f0      	beq.n	802c50e <__match+0x6>
 802c52c:	2000      	movs	r0, #0
 802c52e:	e7f3      	b.n	802c518 <__match+0x10>

0802c530 <__hexnan>:
 802c530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c534:	680b      	ldr	r3, [r1, #0]
 802c536:	6801      	ldr	r1, [r0, #0]
 802c538:	115f      	asrs	r7, r3, #5
 802c53a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 802c53e:	f013 031f 	ands.w	r3, r3, #31
 802c542:	b087      	sub	sp, #28
 802c544:	bf18      	it	ne
 802c546:	3704      	addne	r7, #4
 802c548:	2500      	movs	r5, #0
 802c54a:	1f3e      	subs	r6, r7, #4
 802c54c:	4682      	mov	sl, r0
 802c54e:	4690      	mov	r8, r2
 802c550:	9301      	str	r3, [sp, #4]
 802c552:	f847 5c04 	str.w	r5, [r7, #-4]
 802c556:	46b1      	mov	r9, r6
 802c558:	4634      	mov	r4, r6
 802c55a:	9502      	str	r5, [sp, #8]
 802c55c:	46ab      	mov	fp, r5
 802c55e:	784a      	ldrb	r2, [r1, #1]
 802c560:	1c4b      	adds	r3, r1, #1
 802c562:	9303      	str	r3, [sp, #12]
 802c564:	b342      	cbz	r2, 802c5b8 <__hexnan+0x88>
 802c566:	4610      	mov	r0, r2
 802c568:	9105      	str	r1, [sp, #20]
 802c56a:	9204      	str	r2, [sp, #16]
 802c56c:	f7ff fd84 	bl	802c078 <__hexdig_fun>
 802c570:	2800      	cmp	r0, #0
 802c572:	d143      	bne.n	802c5fc <__hexnan+0xcc>
 802c574:	9a04      	ldr	r2, [sp, #16]
 802c576:	9905      	ldr	r1, [sp, #20]
 802c578:	2a20      	cmp	r2, #32
 802c57a:	d818      	bhi.n	802c5ae <__hexnan+0x7e>
 802c57c:	9b02      	ldr	r3, [sp, #8]
 802c57e:	459b      	cmp	fp, r3
 802c580:	dd13      	ble.n	802c5aa <__hexnan+0x7a>
 802c582:	454c      	cmp	r4, r9
 802c584:	d206      	bcs.n	802c594 <__hexnan+0x64>
 802c586:	2d07      	cmp	r5, #7
 802c588:	dc04      	bgt.n	802c594 <__hexnan+0x64>
 802c58a:	462a      	mov	r2, r5
 802c58c:	4649      	mov	r1, r9
 802c58e:	4620      	mov	r0, r4
 802c590:	f7ff ffa8 	bl	802c4e4 <L_shift>
 802c594:	4544      	cmp	r4, r8
 802c596:	d944      	bls.n	802c622 <__hexnan+0xf2>
 802c598:	2300      	movs	r3, #0
 802c59a:	f1a4 0904 	sub.w	r9, r4, #4
 802c59e:	f844 3c04 	str.w	r3, [r4, #-4]
 802c5a2:	f8cd b008 	str.w	fp, [sp, #8]
 802c5a6:	464c      	mov	r4, r9
 802c5a8:	461d      	mov	r5, r3
 802c5aa:	9903      	ldr	r1, [sp, #12]
 802c5ac:	e7d7      	b.n	802c55e <__hexnan+0x2e>
 802c5ae:	2a29      	cmp	r2, #41	; 0x29
 802c5b0:	d14a      	bne.n	802c648 <__hexnan+0x118>
 802c5b2:	3102      	adds	r1, #2
 802c5b4:	f8ca 1000 	str.w	r1, [sl]
 802c5b8:	f1bb 0f00 	cmp.w	fp, #0
 802c5bc:	d044      	beq.n	802c648 <__hexnan+0x118>
 802c5be:	454c      	cmp	r4, r9
 802c5c0:	d206      	bcs.n	802c5d0 <__hexnan+0xa0>
 802c5c2:	2d07      	cmp	r5, #7
 802c5c4:	dc04      	bgt.n	802c5d0 <__hexnan+0xa0>
 802c5c6:	462a      	mov	r2, r5
 802c5c8:	4649      	mov	r1, r9
 802c5ca:	4620      	mov	r0, r4
 802c5cc:	f7ff ff8a 	bl	802c4e4 <L_shift>
 802c5d0:	4544      	cmp	r4, r8
 802c5d2:	d928      	bls.n	802c626 <__hexnan+0xf6>
 802c5d4:	4643      	mov	r3, r8
 802c5d6:	f854 2b04 	ldr.w	r2, [r4], #4
 802c5da:	f843 2b04 	str.w	r2, [r3], #4
 802c5de:	42a6      	cmp	r6, r4
 802c5e0:	d2f9      	bcs.n	802c5d6 <__hexnan+0xa6>
 802c5e2:	2200      	movs	r2, #0
 802c5e4:	f843 2b04 	str.w	r2, [r3], #4
 802c5e8:	429e      	cmp	r6, r3
 802c5ea:	d2fb      	bcs.n	802c5e4 <__hexnan+0xb4>
 802c5ec:	6833      	ldr	r3, [r6, #0]
 802c5ee:	b91b      	cbnz	r3, 802c5f8 <__hexnan+0xc8>
 802c5f0:	4546      	cmp	r6, r8
 802c5f2:	d127      	bne.n	802c644 <__hexnan+0x114>
 802c5f4:	2301      	movs	r3, #1
 802c5f6:	6033      	str	r3, [r6, #0]
 802c5f8:	2005      	movs	r0, #5
 802c5fa:	e026      	b.n	802c64a <__hexnan+0x11a>
 802c5fc:	3501      	adds	r5, #1
 802c5fe:	2d08      	cmp	r5, #8
 802c600:	f10b 0b01 	add.w	fp, fp, #1
 802c604:	dd06      	ble.n	802c614 <__hexnan+0xe4>
 802c606:	4544      	cmp	r4, r8
 802c608:	d9cf      	bls.n	802c5aa <__hexnan+0x7a>
 802c60a:	2300      	movs	r3, #0
 802c60c:	f844 3c04 	str.w	r3, [r4, #-4]
 802c610:	2501      	movs	r5, #1
 802c612:	3c04      	subs	r4, #4
 802c614:	6822      	ldr	r2, [r4, #0]
 802c616:	f000 000f 	and.w	r0, r0, #15
 802c61a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 802c61e:	6020      	str	r0, [r4, #0]
 802c620:	e7c3      	b.n	802c5aa <__hexnan+0x7a>
 802c622:	2508      	movs	r5, #8
 802c624:	e7c1      	b.n	802c5aa <__hexnan+0x7a>
 802c626:	9b01      	ldr	r3, [sp, #4]
 802c628:	2b00      	cmp	r3, #0
 802c62a:	d0df      	beq.n	802c5ec <__hexnan+0xbc>
 802c62c:	f04f 32ff 	mov.w	r2, #4294967295
 802c630:	f1c3 0320 	rsb	r3, r3, #32
 802c634:	fa22 f303 	lsr.w	r3, r2, r3
 802c638:	f857 2c04 	ldr.w	r2, [r7, #-4]
 802c63c:	401a      	ands	r2, r3
 802c63e:	f847 2c04 	str.w	r2, [r7, #-4]
 802c642:	e7d3      	b.n	802c5ec <__hexnan+0xbc>
 802c644:	3e04      	subs	r6, #4
 802c646:	e7d1      	b.n	802c5ec <__hexnan+0xbc>
 802c648:	2004      	movs	r0, #4
 802c64a:	b007      	add	sp, #28
 802c64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802c650 <__locale_ctype_ptr_l>:
 802c650:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 802c654:	4770      	bx	lr

0802c656 <__localeconv_l>:
 802c656:	30f0      	adds	r0, #240	; 0xf0
 802c658:	4770      	bx	lr
	...

0802c65c <_localeconv_r>:
 802c65c:	4b04      	ldr	r3, [pc, #16]	; (802c670 <_localeconv_r+0x14>)
 802c65e:	681b      	ldr	r3, [r3, #0]
 802c660:	6a18      	ldr	r0, [r3, #32]
 802c662:	4b04      	ldr	r3, [pc, #16]	; (802c674 <_localeconv_r+0x18>)
 802c664:	2800      	cmp	r0, #0
 802c666:	bf08      	it	eq
 802c668:	4618      	moveq	r0, r3
 802c66a:	30f0      	adds	r0, #240	; 0xf0
 802c66c:	4770      	bx	lr
 802c66e:	bf00      	nop
 802c670:	200006ac 	.word	0x200006ac
 802c674:	20000710 	.word	0x20000710

0802c678 <__swhatbuf_r>:
 802c678:	b570      	push	{r4, r5, r6, lr}
 802c67a:	460e      	mov	r6, r1
 802c67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c680:	2900      	cmp	r1, #0
 802c682:	b096      	sub	sp, #88	; 0x58
 802c684:	4614      	mov	r4, r2
 802c686:	461d      	mov	r5, r3
 802c688:	da07      	bge.n	802c69a <__swhatbuf_r+0x22>
 802c68a:	2300      	movs	r3, #0
 802c68c:	602b      	str	r3, [r5, #0]
 802c68e:	89b3      	ldrh	r3, [r6, #12]
 802c690:	061a      	lsls	r2, r3, #24
 802c692:	d410      	bmi.n	802c6b6 <__swhatbuf_r+0x3e>
 802c694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802c698:	e00e      	b.n	802c6b8 <__swhatbuf_r+0x40>
 802c69a:	466a      	mov	r2, sp
 802c69c:	f000 ff88 	bl	802d5b0 <_fstat_r>
 802c6a0:	2800      	cmp	r0, #0
 802c6a2:	dbf2      	blt.n	802c68a <__swhatbuf_r+0x12>
 802c6a4:	9a01      	ldr	r2, [sp, #4]
 802c6a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802c6aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802c6ae:	425a      	negs	r2, r3
 802c6b0:	415a      	adcs	r2, r3
 802c6b2:	602a      	str	r2, [r5, #0]
 802c6b4:	e7ee      	b.n	802c694 <__swhatbuf_r+0x1c>
 802c6b6:	2340      	movs	r3, #64	; 0x40
 802c6b8:	2000      	movs	r0, #0
 802c6ba:	6023      	str	r3, [r4, #0]
 802c6bc:	b016      	add	sp, #88	; 0x58
 802c6be:	bd70      	pop	{r4, r5, r6, pc}

0802c6c0 <__smakebuf_r>:
 802c6c0:	898b      	ldrh	r3, [r1, #12]
 802c6c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802c6c4:	079d      	lsls	r5, r3, #30
 802c6c6:	4606      	mov	r6, r0
 802c6c8:	460c      	mov	r4, r1
 802c6ca:	d507      	bpl.n	802c6dc <__smakebuf_r+0x1c>
 802c6cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802c6d0:	6023      	str	r3, [r4, #0]
 802c6d2:	6123      	str	r3, [r4, #16]
 802c6d4:	2301      	movs	r3, #1
 802c6d6:	6163      	str	r3, [r4, #20]
 802c6d8:	b002      	add	sp, #8
 802c6da:	bd70      	pop	{r4, r5, r6, pc}
 802c6dc:	ab01      	add	r3, sp, #4
 802c6de:	466a      	mov	r2, sp
 802c6e0:	f7ff ffca 	bl	802c678 <__swhatbuf_r>
 802c6e4:	9900      	ldr	r1, [sp, #0]
 802c6e6:	4605      	mov	r5, r0
 802c6e8:	4630      	mov	r0, r6
 802c6ea:	f000 fcb7 	bl	802d05c <_malloc_r>
 802c6ee:	b948      	cbnz	r0, 802c704 <__smakebuf_r+0x44>
 802c6f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c6f4:	059a      	lsls	r2, r3, #22
 802c6f6:	d4ef      	bmi.n	802c6d8 <__smakebuf_r+0x18>
 802c6f8:	f023 0303 	bic.w	r3, r3, #3
 802c6fc:	f043 0302 	orr.w	r3, r3, #2
 802c700:	81a3      	strh	r3, [r4, #12]
 802c702:	e7e3      	b.n	802c6cc <__smakebuf_r+0xc>
 802c704:	4b0d      	ldr	r3, [pc, #52]	; (802c73c <__smakebuf_r+0x7c>)
 802c706:	62b3      	str	r3, [r6, #40]	; 0x28
 802c708:	89a3      	ldrh	r3, [r4, #12]
 802c70a:	6020      	str	r0, [r4, #0]
 802c70c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802c710:	81a3      	strh	r3, [r4, #12]
 802c712:	9b00      	ldr	r3, [sp, #0]
 802c714:	6163      	str	r3, [r4, #20]
 802c716:	9b01      	ldr	r3, [sp, #4]
 802c718:	6120      	str	r0, [r4, #16]
 802c71a:	b15b      	cbz	r3, 802c734 <__smakebuf_r+0x74>
 802c71c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c720:	4630      	mov	r0, r6
 802c722:	f000 ff57 	bl	802d5d4 <_isatty_r>
 802c726:	b128      	cbz	r0, 802c734 <__smakebuf_r+0x74>
 802c728:	89a3      	ldrh	r3, [r4, #12]
 802c72a:	f023 0303 	bic.w	r3, r3, #3
 802c72e:	f043 0301 	orr.w	r3, r3, #1
 802c732:	81a3      	strh	r3, [r4, #12]
 802c734:	89a3      	ldrh	r3, [r4, #12]
 802c736:	431d      	orrs	r5, r3
 802c738:	81a5      	strh	r5, [r4, #12]
 802c73a:	e7cd      	b.n	802c6d8 <__smakebuf_r+0x18>
 802c73c:	0802beb9 	.word	0x0802beb9

0802c740 <malloc>:
 802c740:	4b02      	ldr	r3, [pc, #8]	; (802c74c <malloc+0xc>)
 802c742:	4601      	mov	r1, r0
 802c744:	6818      	ldr	r0, [r3, #0]
 802c746:	f000 bc89 	b.w	802d05c <_malloc_r>
 802c74a:	bf00      	nop
 802c74c:	200006ac 	.word	0x200006ac

0802c750 <__ascii_mbtowc>:
 802c750:	b082      	sub	sp, #8
 802c752:	b901      	cbnz	r1, 802c756 <__ascii_mbtowc+0x6>
 802c754:	a901      	add	r1, sp, #4
 802c756:	b142      	cbz	r2, 802c76a <__ascii_mbtowc+0x1a>
 802c758:	b14b      	cbz	r3, 802c76e <__ascii_mbtowc+0x1e>
 802c75a:	7813      	ldrb	r3, [r2, #0]
 802c75c:	600b      	str	r3, [r1, #0]
 802c75e:	7812      	ldrb	r2, [r2, #0]
 802c760:	1c10      	adds	r0, r2, #0
 802c762:	bf18      	it	ne
 802c764:	2001      	movne	r0, #1
 802c766:	b002      	add	sp, #8
 802c768:	4770      	bx	lr
 802c76a:	4610      	mov	r0, r2
 802c76c:	e7fb      	b.n	802c766 <__ascii_mbtowc+0x16>
 802c76e:	f06f 0001 	mvn.w	r0, #1
 802c772:	e7f8      	b.n	802c766 <__ascii_mbtowc+0x16>

0802c774 <memmove>:
 802c774:	4288      	cmp	r0, r1
 802c776:	b510      	push	{r4, lr}
 802c778:	eb01 0302 	add.w	r3, r1, r2
 802c77c:	d807      	bhi.n	802c78e <memmove+0x1a>
 802c77e:	1e42      	subs	r2, r0, #1
 802c780:	4299      	cmp	r1, r3
 802c782:	d00a      	beq.n	802c79a <memmove+0x26>
 802c784:	f811 4b01 	ldrb.w	r4, [r1], #1
 802c788:	f802 4f01 	strb.w	r4, [r2, #1]!
 802c78c:	e7f8      	b.n	802c780 <memmove+0xc>
 802c78e:	4283      	cmp	r3, r0
 802c790:	d9f5      	bls.n	802c77e <memmove+0xa>
 802c792:	1881      	adds	r1, r0, r2
 802c794:	1ad2      	subs	r2, r2, r3
 802c796:	42d3      	cmn	r3, r2
 802c798:	d100      	bne.n	802c79c <memmove+0x28>
 802c79a:	bd10      	pop	{r4, pc}
 802c79c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802c7a0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 802c7a4:	e7f7      	b.n	802c796 <memmove+0x22>

0802c7a6 <_Balloc>:
 802c7a6:	b570      	push	{r4, r5, r6, lr}
 802c7a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802c7aa:	4604      	mov	r4, r0
 802c7ac:	460e      	mov	r6, r1
 802c7ae:	b93d      	cbnz	r5, 802c7c0 <_Balloc+0x1a>
 802c7b0:	2010      	movs	r0, #16
 802c7b2:	f7ff ffc5 	bl	802c740 <malloc>
 802c7b6:	6260      	str	r0, [r4, #36]	; 0x24
 802c7b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802c7bc:	6005      	str	r5, [r0, #0]
 802c7be:	60c5      	str	r5, [r0, #12]
 802c7c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 802c7c2:	68eb      	ldr	r3, [r5, #12]
 802c7c4:	b183      	cbz	r3, 802c7e8 <_Balloc+0x42>
 802c7c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802c7c8:	68db      	ldr	r3, [r3, #12]
 802c7ca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 802c7ce:	b9b8      	cbnz	r0, 802c800 <_Balloc+0x5a>
 802c7d0:	2101      	movs	r1, #1
 802c7d2:	fa01 f506 	lsl.w	r5, r1, r6
 802c7d6:	1d6a      	adds	r2, r5, #5
 802c7d8:	0092      	lsls	r2, r2, #2
 802c7da:	4620      	mov	r0, r4
 802c7dc:	f000 fbe1 	bl	802cfa2 <_calloc_r>
 802c7e0:	b160      	cbz	r0, 802c7fc <_Balloc+0x56>
 802c7e2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 802c7e6:	e00e      	b.n	802c806 <_Balloc+0x60>
 802c7e8:	2221      	movs	r2, #33	; 0x21
 802c7ea:	2104      	movs	r1, #4
 802c7ec:	4620      	mov	r0, r4
 802c7ee:	f000 fbd8 	bl	802cfa2 <_calloc_r>
 802c7f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802c7f4:	60e8      	str	r0, [r5, #12]
 802c7f6:	68db      	ldr	r3, [r3, #12]
 802c7f8:	2b00      	cmp	r3, #0
 802c7fa:	d1e4      	bne.n	802c7c6 <_Balloc+0x20>
 802c7fc:	2000      	movs	r0, #0
 802c7fe:	bd70      	pop	{r4, r5, r6, pc}
 802c800:	6802      	ldr	r2, [r0, #0]
 802c802:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 802c806:	2300      	movs	r3, #0
 802c808:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802c80c:	e7f7      	b.n	802c7fe <_Balloc+0x58>

0802c80e <_Bfree>:
 802c80e:	b570      	push	{r4, r5, r6, lr}
 802c810:	6a44      	ldr	r4, [r0, #36]	; 0x24
 802c812:	4606      	mov	r6, r0
 802c814:	460d      	mov	r5, r1
 802c816:	b93c      	cbnz	r4, 802c828 <_Bfree+0x1a>
 802c818:	2010      	movs	r0, #16
 802c81a:	f7ff ff91 	bl	802c740 <malloc>
 802c81e:	6270      	str	r0, [r6, #36]	; 0x24
 802c820:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802c824:	6004      	str	r4, [r0, #0]
 802c826:	60c4      	str	r4, [r0, #12]
 802c828:	b13d      	cbz	r5, 802c83a <_Bfree+0x2c>
 802c82a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802c82c:	686a      	ldr	r2, [r5, #4]
 802c82e:	68db      	ldr	r3, [r3, #12]
 802c830:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802c834:	6029      	str	r1, [r5, #0]
 802c836:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 802c83a:	bd70      	pop	{r4, r5, r6, pc}

0802c83c <__multadd>:
 802c83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c840:	690d      	ldr	r5, [r1, #16]
 802c842:	461f      	mov	r7, r3
 802c844:	4606      	mov	r6, r0
 802c846:	460c      	mov	r4, r1
 802c848:	f101 0c14 	add.w	ip, r1, #20
 802c84c:	2300      	movs	r3, #0
 802c84e:	f8dc 0000 	ldr.w	r0, [ip]
 802c852:	b281      	uxth	r1, r0
 802c854:	fb02 7101 	mla	r1, r2, r1, r7
 802c858:	0c0f      	lsrs	r7, r1, #16
 802c85a:	0c00      	lsrs	r0, r0, #16
 802c85c:	fb02 7000 	mla	r0, r2, r0, r7
 802c860:	b289      	uxth	r1, r1
 802c862:	3301      	adds	r3, #1
 802c864:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 802c868:	429d      	cmp	r5, r3
 802c86a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 802c86e:	f84c 1b04 	str.w	r1, [ip], #4
 802c872:	dcec      	bgt.n	802c84e <__multadd+0x12>
 802c874:	b1d7      	cbz	r7, 802c8ac <__multadd+0x70>
 802c876:	68a3      	ldr	r3, [r4, #8]
 802c878:	42ab      	cmp	r3, r5
 802c87a:	dc12      	bgt.n	802c8a2 <__multadd+0x66>
 802c87c:	6861      	ldr	r1, [r4, #4]
 802c87e:	4630      	mov	r0, r6
 802c880:	3101      	adds	r1, #1
 802c882:	f7ff ff90 	bl	802c7a6 <_Balloc>
 802c886:	6922      	ldr	r2, [r4, #16]
 802c888:	3202      	adds	r2, #2
 802c88a:	f104 010c 	add.w	r1, r4, #12
 802c88e:	4680      	mov	r8, r0
 802c890:	0092      	lsls	r2, r2, #2
 802c892:	300c      	adds	r0, #12
 802c894:	f7fc fb98 	bl	8028fc8 <memcpy>
 802c898:	4621      	mov	r1, r4
 802c89a:	4630      	mov	r0, r6
 802c89c:	f7ff ffb7 	bl	802c80e <_Bfree>
 802c8a0:	4644      	mov	r4, r8
 802c8a2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802c8a6:	3501      	adds	r5, #1
 802c8a8:	615f      	str	r7, [r3, #20]
 802c8aa:	6125      	str	r5, [r4, #16]
 802c8ac:	4620      	mov	r0, r4
 802c8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802c8b2 <__s2b>:
 802c8b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c8b6:	460c      	mov	r4, r1
 802c8b8:	4615      	mov	r5, r2
 802c8ba:	461f      	mov	r7, r3
 802c8bc:	2209      	movs	r2, #9
 802c8be:	3308      	adds	r3, #8
 802c8c0:	4606      	mov	r6, r0
 802c8c2:	fb93 f3f2 	sdiv	r3, r3, r2
 802c8c6:	2100      	movs	r1, #0
 802c8c8:	2201      	movs	r2, #1
 802c8ca:	429a      	cmp	r2, r3
 802c8cc:	db20      	blt.n	802c910 <__s2b+0x5e>
 802c8ce:	4630      	mov	r0, r6
 802c8d0:	f7ff ff69 	bl	802c7a6 <_Balloc>
 802c8d4:	9b08      	ldr	r3, [sp, #32]
 802c8d6:	6143      	str	r3, [r0, #20]
 802c8d8:	2d09      	cmp	r5, #9
 802c8da:	f04f 0301 	mov.w	r3, #1
 802c8de:	6103      	str	r3, [r0, #16]
 802c8e0:	dd19      	ble.n	802c916 <__s2b+0x64>
 802c8e2:	f104 0809 	add.w	r8, r4, #9
 802c8e6:	46c1      	mov	r9, r8
 802c8e8:	442c      	add	r4, r5
 802c8ea:	f819 3b01 	ldrb.w	r3, [r9], #1
 802c8ee:	4601      	mov	r1, r0
 802c8f0:	3b30      	subs	r3, #48	; 0x30
 802c8f2:	220a      	movs	r2, #10
 802c8f4:	4630      	mov	r0, r6
 802c8f6:	f7ff ffa1 	bl	802c83c <__multadd>
 802c8fa:	45a1      	cmp	r9, r4
 802c8fc:	d1f5      	bne.n	802c8ea <__s2b+0x38>
 802c8fe:	eb08 0405 	add.w	r4, r8, r5
 802c902:	3c08      	subs	r4, #8
 802c904:	1b2d      	subs	r5, r5, r4
 802c906:	1963      	adds	r3, r4, r5
 802c908:	42bb      	cmp	r3, r7
 802c90a:	db07      	blt.n	802c91c <__s2b+0x6a>
 802c90c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c910:	0052      	lsls	r2, r2, #1
 802c912:	3101      	adds	r1, #1
 802c914:	e7d9      	b.n	802c8ca <__s2b+0x18>
 802c916:	340a      	adds	r4, #10
 802c918:	2509      	movs	r5, #9
 802c91a:	e7f3      	b.n	802c904 <__s2b+0x52>
 802c91c:	f814 3b01 	ldrb.w	r3, [r4], #1
 802c920:	4601      	mov	r1, r0
 802c922:	3b30      	subs	r3, #48	; 0x30
 802c924:	220a      	movs	r2, #10
 802c926:	4630      	mov	r0, r6
 802c928:	f7ff ff88 	bl	802c83c <__multadd>
 802c92c:	e7eb      	b.n	802c906 <__s2b+0x54>

0802c92e <__hi0bits>:
 802c92e:	0c02      	lsrs	r2, r0, #16
 802c930:	0412      	lsls	r2, r2, #16
 802c932:	4603      	mov	r3, r0
 802c934:	b9b2      	cbnz	r2, 802c964 <__hi0bits+0x36>
 802c936:	0403      	lsls	r3, r0, #16
 802c938:	2010      	movs	r0, #16
 802c93a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 802c93e:	bf04      	itt	eq
 802c940:	021b      	lsleq	r3, r3, #8
 802c942:	3008      	addeq	r0, #8
 802c944:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 802c948:	bf04      	itt	eq
 802c94a:	011b      	lsleq	r3, r3, #4
 802c94c:	3004      	addeq	r0, #4
 802c94e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 802c952:	bf04      	itt	eq
 802c954:	009b      	lsleq	r3, r3, #2
 802c956:	3002      	addeq	r0, #2
 802c958:	2b00      	cmp	r3, #0
 802c95a:	db06      	blt.n	802c96a <__hi0bits+0x3c>
 802c95c:	005b      	lsls	r3, r3, #1
 802c95e:	d503      	bpl.n	802c968 <__hi0bits+0x3a>
 802c960:	3001      	adds	r0, #1
 802c962:	4770      	bx	lr
 802c964:	2000      	movs	r0, #0
 802c966:	e7e8      	b.n	802c93a <__hi0bits+0xc>
 802c968:	2020      	movs	r0, #32
 802c96a:	4770      	bx	lr

0802c96c <__lo0bits>:
 802c96c:	6803      	ldr	r3, [r0, #0]
 802c96e:	f013 0207 	ands.w	r2, r3, #7
 802c972:	4601      	mov	r1, r0
 802c974:	d00b      	beq.n	802c98e <__lo0bits+0x22>
 802c976:	07da      	lsls	r2, r3, #31
 802c978:	d423      	bmi.n	802c9c2 <__lo0bits+0x56>
 802c97a:	0798      	lsls	r0, r3, #30
 802c97c:	bf49      	itett	mi
 802c97e:	085b      	lsrmi	r3, r3, #1
 802c980:	089b      	lsrpl	r3, r3, #2
 802c982:	2001      	movmi	r0, #1
 802c984:	600b      	strmi	r3, [r1, #0]
 802c986:	bf5c      	itt	pl
 802c988:	600b      	strpl	r3, [r1, #0]
 802c98a:	2002      	movpl	r0, #2
 802c98c:	4770      	bx	lr
 802c98e:	b298      	uxth	r0, r3
 802c990:	b9a8      	cbnz	r0, 802c9be <__lo0bits+0x52>
 802c992:	0c1b      	lsrs	r3, r3, #16
 802c994:	2010      	movs	r0, #16
 802c996:	f013 0fff 	tst.w	r3, #255	; 0xff
 802c99a:	bf04      	itt	eq
 802c99c:	0a1b      	lsreq	r3, r3, #8
 802c99e:	3008      	addeq	r0, #8
 802c9a0:	071a      	lsls	r2, r3, #28
 802c9a2:	bf04      	itt	eq
 802c9a4:	091b      	lsreq	r3, r3, #4
 802c9a6:	3004      	addeq	r0, #4
 802c9a8:	079a      	lsls	r2, r3, #30
 802c9aa:	bf04      	itt	eq
 802c9ac:	089b      	lsreq	r3, r3, #2
 802c9ae:	3002      	addeq	r0, #2
 802c9b0:	07da      	lsls	r2, r3, #31
 802c9b2:	d402      	bmi.n	802c9ba <__lo0bits+0x4e>
 802c9b4:	085b      	lsrs	r3, r3, #1
 802c9b6:	d006      	beq.n	802c9c6 <__lo0bits+0x5a>
 802c9b8:	3001      	adds	r0, #1
 802c9ba:	600b      	str	r3, [r1, #0]
 802c9bc:	4770      	bx	lr
 802c9be:	4610      	mov	r0, r2
 802c9c0:	e7e9      	b.n	802c996 <__lo0bits+0x2a>
 802c9c2:	2000      	movs	r0, #0
 802c9c4:	4770      	bx	lr
 802c9c6:	2020      	movs	r0, #32
 802c9c8:	4770      	bx	lr

0802c9ca <__i2b>:
 802c9ca:	b510      	push	{r4, lr}
 802c9cc:	460c      	mov	r4, r1
 802c9ce:	2101      	movs	r1, #1
 802c9d0:	f7ff fee9 	bl	802c7a6 <_Balloc>
 802c9d4:	2201      	movs	r2, #1
 802c9d6:	6144      	str	r4, [r0, #20]
 802c9d8:	6102      	str	r2, [r0, #16]
 802c9da:	bd10      	pop	{r4, pc}

0802c9dc <__multiply>:
 802c9dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c9e0:	4614      	mov	r4, r2
 802c9e2:	690a      	ldr	r2, [r1, #16]
 802c9e4:	6923      	ldr	r3, [r4, #16]
 802c9e6:	429a      	cmp	r2, r3
 802c9e8:	bfb8      	it	lt
 802c9ea:	460b      	movlt	r3, r1
 802c9ec:	4688      	mov	r8, r1
 802c9ee:	bfbc      	itt	lt
 802c9f0:	46a0      	movlt	r8, r4
 802c9f2:	461c      	movlt	r4, r3
 802c9f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802c9f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802c9fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802ca00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802ca04:	eb07 0609 	add.w	r6, r7, r9
 802ca08:	42b3      	cmp	r3, r6
 802ca0a:	bfb8      	it	lt
 802ca0c:	3101      	addlt	r1, #1
 802ca0e:	f7ff feca 	bl	802c7a6 <_Balloc>
 802ca12:	f100 0514 	add.w	r5, r0, #20
 802ca16:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 802ca1a:	462b      	mov	r3, r5
 802ca1c:	2200      	movs	r2, #0
 802ca1e:	4573      	cmp	r3, lr
 802ca20:	d316      	bcc.n	802ca50 <__multiply+0x74>
 802ca22:	f104 0214 	add.w	r2, r4, #20
 802ca26:	f108 0114 	add.w	r1, r8, #20
 802ca2a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 802ca2e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 802ca32:	9300      	str	r3, [sp, #0]
 802ca34:	9b00      	ldr	r3, [sp, #0]
 802ca36:	9201      	str	r2, [sp, #4]
 802ca38:	4293      	cmp	r3, r2
 802ca3a:	d80c      	bhi.n	802ca56 <__multiply+0x7a>
 802ca3c:	2e00      	cmp	r6, #0
 802ca3e:	dd03      	ble.n	802ca48 <__multiply+0x6c>
 802ca40:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 802ca44:	2b00      	cmp	r3, #0
 802ca46:	d05d      	beq.n	802cb04 <__multiply+0x128>
 802ca48:	6106      	str	r6, [r0, #16]
 802ca4a:	b003      	add	sp, #12
 802ca4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ca50:	f843 2b04 	str.w	r2, [r3], #4
 802ca54:	e7e3      	b.n	802ca1e <__multiply+0x42>
 802ca56:	f8b2 b000 	ldrh.w	fp, [r2]
 802ca5a:	f1bb 0f00 	cmp.w	fp, #0
 802ca5e:	d023      	beq.n	802caa8 <__multiply+0xcc>
 802ca60:	4689      	mov	r9, r1
 802ca62:	46ac      	mov	ip, r5
 802ca64:	f04f 0800 	mov.w	r8, #0
 802ca68:	f859 4b04 	ldr.w	r4, [r9], #4
 802ca6c:	f8dc a000 	ldr.w	sl, [ip]
 802ca70:	b2a3      	uxth	r3, r4
 802ca72:	fa1f fa8a 	uxth.w	sl, sl
 802ca76:	fb0b a303 	mla	r3, fp, r3, sl
 802ca7a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802ca7e:	f8dc 4000 	ldr.w	r4, [ip]
 802ca82:	4443      	add	r3, r8
 802ca84:	ea4f 4814 	mov.w	r8, r4, lsr #16
 802ca88:	fb0b 840a 	mla	r4, fp, sl, r8
 802ca8c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 802ca90:	46e2      	mov	sl, ip
 802ca92:	b29b      	uxth	r3, r3
 802ca94:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802ca98:	454f      	cmp	r7, r9
 802ca9a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 802ca9e:	f84a 3b04 	str.w	r3, [sl], #4
 802caa2:	d82b      	bhi.n	802cafc <__multiply+0x120>
 802caa4:	f8cc 8004 	str.w	r8, [ip, #4]
 802caa8:	9b01      	ldr	r3, [sp, #4]
 802caaa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 802caae:	3204      	adds	r2, #4
 802cab0:	f1ba 0f00 	cmp.w	sl, #0
 802cab4:	d020      	beq.n	802caf8 <__multiply+0x11c>
 802cab6:	682b      	ldr	r3, [r5, #0]
 802cab8:	4689      	mov	r9, r1
 802caba:	46a8      	mov	r8, r5
 802cabc:	f04f 0b00 	mov.w	fp, #0
 802cac0:	f8b9 c000 	ldrh.w	ip, [r9]
 802cac4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 802cac8:	fb0a 440c 	mla	r4, sl, ip, r4
 802cacc:	445c      	add	r4, fp
 802cace:	46c4      	mov	ip, r8
 802cad0:	b29b      	uxth	r3, r3
 802cad2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802cad6:	f84c 3b04 	str.w	r3, [ip], #4
 802cada:	f859 3b04 	ldr.w	r3, [r9], #4
 802cade:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 802cae2:	0c1b      	lsrs	r3, r3, #16
 802cae4:	fb0a b303 	mla	r3, sl, r3, fp
 802cae8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 802caec:	454f      	cmp	r7, r9
 802caee:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 802caf2:	d805      	bhi.n	802cb00 <__multiply+0x124>
 802caf4:	f8c8 3004 	str.w	r3, [r8, #4]
 802caf8:	3504      	adds	r5, #4
 802cafa:	e79b      	b.n	802ca34 <__multiply+0x58>
 802cafc:	46d4      	mov	ip, sl
 802cafe:	e7b3      	b.n	802ca68 <__multiply+0x8c>
 802cb00:	46e0      	mov	r8, ip
 802cb02:	e7dd      	b.n	802cac0 <__multiply+0xe4>
 802cb04:	3e01      	subs	r6, #1
 802cb06:	e799      	b.n	802ca3c <__multiply+0x60>

0802cb08 <__pow5mult>:
 802cb08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802cb0c:	4615      	mov	r5, r2
 802cb0e:	f012 0203 	ands.w	r2, r2, #3
 802cb12:	4606      	mov	r6, r0
 802cb14:	460f      	mov	r7, r1
 802cb16:	d007      	beq.n	802cb28 <__pow5mult+0x20>
 802cb18:	3a01      	subs	r2, #1
 802cb1a:	4c21      	ldr	r4, [pc, #132]	; (802cba0 <__pow5mult+0x98>)
 802cb1c:	2300      	movs	r3, #0
 802cb1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802cb22:	f7ff fe8b 	bl	802c83c <__multadd>
 802cb26:	4607      	mov	r7, r0
 802cb28:	10ad      	asrs	r5, r5, #2
 802cb2a:	d035      	beq.n	802cb98 <__pow5mult+0x90>
 802cb2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802cb2e:	b93c      	cbnz	r4, 802cb40 <__pow5mult+0x38>
 802cb30:	2010      	movs	r0, #16
 802cb32:	f7ff fe05 	bl	802c740 <malloc>
 802cb36:	6270      	str	r0, [r6, #36]	; 0x24
 802cb38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802cb3c:	6004      	str	r4, [r0, #0]
 802cb3e:	60c4      	str	r4, [r0, #12]
 802cb40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802cb44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802cb48:	b94c      	cbnz	r4, 802cb5e <__pow5mult+0x56>
 802cb4a:	f240 2171 	movw	r1, #625	; 0x271
 802cb4e:	4630      	mov	r0, r6
 802cb50:	f7ff ff3b 	bl	802c9ca <__i2b>
 802cb54:	2300      	movs	r3, #0
 802cb56:	f8c8 0008 	str.w	r0, [r8, #8]
 802cb5a:	4604      	mov	r4, r0
 802cb5c:	6003      	str	r3, [r0, #0]
 802cb5e:	f04f 0800 	mov.w	r8, #0
 802cb62:	07eb      	lsls	r3, r5, #31
 802cb64:	d50a      	bpl.n	802cb7c <__pow5mult+0x74>
 802cb66:	4639      	mov	r1, r7
 802cb68:	4622      	mov	r2, r4
 802cb6a:	4630      	mov	r0, r6
 802cb6c:	f7ff ff36 	bl	802c9dc <__multiply>
 802cb70:	4639      	mov	r1, r7
 802cb72:	4681      	mov	r9, r0
 802cb74:	4630      	mov	r0, r6
 802cb76:	f7ff fe4a 	bl	802c80e <_Bfree>
 802cb7a:	464f      	mov	r7, r9
 802cb7c:	106d      	asrs	r5, r5, #1
 802cb7e:	d00b      	beq.n	802cb98 <__pow5mult+0x90>
 802cb80:	6820      	ldr	r0, [r4, #0]
 802cb82:	b938      	cbnz	r0, 802cb94 <__pow5mult+0x8c>
 802cb84:	4622      	mov	r2, r4
 802cb86:	4621      	mov	r1, r4
 802cb88:	4630      	mov	r0, r6
 802cb8a:	f7ff ff27 	bl	802c9dc <__multiply>
 802cb8e:	6020      	str	r0, [r4, #0]
 802cb90:	f8c0 8000 	str.w	r8, [r0]
 802cb94:	4604      	mov	r4, r0
 802cb96:	e7e4      	b.n	802cb62 <__pow5mult+0x5a>
 802cb98:	4638      	mov	r0, r7
 802cb9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802cb9e:	bf00      	nop
 802cba0:	0802f050 	.word	0x0802f050

0802cba4 <__lshift>:
 802cba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802cba8:	460c      	mov	r4, r1
 802cbaa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802cbae:	6923      	ldr	r3, [r4, #16]
 802cbb0:	6849      	ldr	r1, [r1, #4]
 802cbb2:	eb0a 0903 	add.w	r9, sl, r3
 802cbb6:	68a3      	ldr	r3, [r4, #8]
 802cbb8:	4607      	mov	r7, r0
 802cbba:	4616      	mov	r6, r2
 802cbbc:	f109 0501 	add.w	r5, r9, #1
 802cbc0:	42ab      	cmp	r3, r5
 802cbc2:	db32      	blt.n	802cc2a <__lshift+0x86>
 802cbc4:	4638      	mov	r0, r7
 802cbc6:	f7ff fdee 	bl	802c7a6 <_Balloc>
 802cbca:	2300      	movs	r3, #0
 802cbcc:	4680      	mov	r8, r0
 802cbce:	f100 0114 	add.w	r1, r0, #20
 802cbd2:	461a      	mov	r2, r3
 802cbd4:	4553      	cmp	r3, sl
 802cbd6:	db2b      	blt.n	802cc30 <__lshift+0x8c>
 802cbd8:	6920      	ldr	r0, [r4, #16]
 802cbda:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802cbde:	f104 0314 	add.w	r3, r4, #20
 802cbe2:	f016 021f 	ands.w	r2, r6, #31
 802cbe6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802cbea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802cbee:	d025      	beq.n	802cc3c <__lshift+0x98>
 802cbf0:	f1c2 0e20 	rsb	lr, r2, #32
 802cbf4:	2000      	movs	r0, #0
 802cbf6:	681e      	ldr	r6, [r3, #0]
 802cbf8:	468a      	mov	sl, r1
 802cbfa:	4096      	lsls	r6, r2
 802cbfc:	4330      	orrs	r0, r6
 802cbfe:	f84a 0b04 	str.w	r0, [sl], #4
 802cc02:	f853 0b04 	ldr.w	r0, [r3], #4
 802cc06:	459c      	cmp	ip, r3
 802cc08:	fa20 f00e 	lsr.w	r0, r0, lr
 802cc0c:	d814      	bhi.n	802cc38 <__lshift+0x94>
 802cc0e:	6048      	str	r0, [r1, #4]
 802cc10:	b108      	cbz	r0, 802cc16 <__lshift+0x72>
 802cc12:	f109 0502 	add.w	r5, r9, #2
 802cc16:	3d01      	subs	r5, #1
 802cc18:	4638      	mov	r0, r7
 802cc1a:	f8c8 5010 	str.w	r5, [r8, #16]
 802cc1e:	4621      	mov	r1, r4
 802cc20:	f7ff fdf5 	bl	802c80e <_Bfree>
 802cc24:	4640      	mov	r0, r8
 802cc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cc2a:	3101      	adds	r1, #1
 802cc2c:	005b      	lsls	r3, r3, #1
 802cc2e:	e7c7      	b.n	802cbc0 <__lshift+0x1c>
 802cc30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 802cc34:	3301      	adds	r3, #1
 802cc36:	e7cd      	b.n	802cbd4 <__lshift+0x30>
 802cc38:	4651      	mov	r1, sl
 802cc3a:	e7dc      	b.n	802cbf6 <__lshift+0x52>
 802cc3c:	3904      	subs	r1, #4
 802cc3e:	f853 2b04 	ldr.w	r2, [r3], #4
 802cc42:	f841 2f04 	str.w	r2, [r1, #4]!
 802cc46:	459c      	cmp	ip, r3
 802cc48:	d8f9      	bhi.n	802cc3e <__lshift+0x9a>
 802cc4a:	e7e4      	b.n	802cc16 <__lshift+0x72>

0802cc4c <__mcmp>:
 802cc4c:	6903      	ldr	r3, [r0, #16]
 802cc4e:	690a      	ldr	r2, [r1, #16]
 802cc50:	1a9b      	subs	r3, r3, r2
 802cc52:	b530      	push	{r4, r5, lr}
 802cc54:	d10c      	bne.n	802cc70 <__mcmp+0x24>
 802cc56:	0092      	lsls	r2, r2, #2
 802cc58:	3014      	adds	r0, #20
 802cc5a:	3114      	adds	r1, #20
 802cc5c:	1884      	adds	r4, r0, r2
 802cc5e:	4411      	add	r1, r2
 802cc60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802cc64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802cc68:	4295      	cmp	r5, r2
 802cc6a:	d003      	beq.n	802cc74 <__mcmp+0x28>
 802cc6c:	d305      	bcc.n	802cc7a <__mcmp+0x2e>
 802cc6e:	2301      	movs	r3, #1
 802cc70:	4618      	mov	r0, r3
 802cc72:	bd30      	pop	{r4, r5, pc}
 802cc74:	42a0      	cmp	r0, r4
 802cc76:	d3f3      	bcc.n	802cc60 <__mcmp+0x14>
 802cc78:	e7fa      	b.n	802cc70 <__mcmp+0x24>
 802cc7a:	f04f 33ff 	mov.w	r3, #4294967295
 802cc7e:	e7f7      	b.n	802cc70 <__mcmp+0x24>

0802cc80 <__mdiff>:
 802cc80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802cc84:	460d      	mov	r5, r1
 802cc86:	4607      	mov	r7, r0
 802cc88:	4611      	mov	r1, r2
 802cc8a:	4628      	mov	r0, r5
 802cc8c:	4614      	mov	r4, r2
 802cc8e:	f7ff ffdd 	bl	802cc4c <__mcmp>
 802cc92:	1e06      	subs	r6, r0, #0
 802cc94:	d108      	bne.n	802cca8 <__mdiff+0x28>
 802cc96:	4631      	mov	r1, r6
 802cc98:	4638      	mov	r0, r7
 802cc9a:	f7ff fd84 	bl	802c7a6 <_Balloc>
 802cc9e:	2301      	movs	r3, #1
 802cca0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 802cca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cca8:	bfa4      	itt	ge
 802ccaa:	4623      	movge	r3, r4
 802ccac:	462c      	movge	r4, r5
 802ccae:	4638      	mov	r0, r7
 802ccb0:	6861      	ldr	r1, [r4, #4]
 802ccb2:	bfa6      	itte	ge
 802ccb4:	461d      	movge	r5, r3
 802ccb6:	2600      	movge	r6, #0
 802ccb8:	2601      	movlt	r6, #1
 802ccba:	f7ff fd74 	bl	802c7a6 <_Balloc>
 802ccbe:	692b      	ldr	r3, [r5, #16]
 802ccc0:	60c6      	str	r6, [r0, #12]
 802ccc2:	6926      	ldr	r6, [r4, #16]
 802ccc4:	f105 0914 	add.w	r9, r5, #20
 802ccc8:	f104 0214 	add.w	r2, r4, #20
 802cccc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 802ccd0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 802ccd4:	f100 0514 	add.w	r5, r0, #20
 802ccd8:	f04f 0e00 	mov.w	lr, #0
 802ccdc:	f852 ab04 	ldr.w	sl, [r2], #4
 802cce0:	f859 4b04 	ldr.w	r4, [r9], #4
 802cce4:	fa1e f18a 	uxtah	r1, lr, sl
 802cce8:	b2a3      	uxth	r3, r4
 802ccea:	1ac9      	subs	r1, r1, r3
 802ccec:	0c23      	lsrs	r3, r4, #16
 802ccee:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 802ccf2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 802ccf6:	b289      	uxth	r1, r1
 802ccf8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 802ccfc:	45c8      	cmp	r8, r9
 802ccfe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 802cd02:	4694      	mov	ip, r2
 802cd04:	f845 3b04 	str.w	r3, [r5], #4
 802cd08:	d8e8      	bhi.n	802ccdc <__mdiff+0x5c>
 802cd0a:	45bc      	cmp	ip, r7
 802cd0c:	d304      	bcc.n	802cd18 <__mdiff+0x98>
 802cd0e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 802cd12:	b183      	cbz	r3, 802cd36 <__mdiff+0xb6>
 802cd14:	6106      	str	r6, [r0, #16]
 802cd16:	e7c5      	b.n	802cca4 <__mdiff+0x24>
 802cd18:	f85c 1b04 	ldr.w	r1, [ip], #4
 802cd1c:	fa1e f381 	uxtah	r3, lr, r1
 802cd20:	141a      	asrs	r2, r3, #16
 802cd22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802cd26:	b29b      	uxth	r3, r3
 802cd28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802cd2c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 802cd30:	f845 3b04 	str.w	r3, [r5], #4
 802cd34:	e7e9      	b.n	802cd0a <__mdiff+0x8a>
 802cd36:	3e01      	subs	r6, #1
 802cd38:	e7e9      	b.n	802cd0e <__mdiff+0x8e>
	...

0802cd3c <__ulp>:
 802cd3c:	4b12      	ldr	r3, [pc, #72]	; (802cd88 <__ulp+0x4c>)
 802cd3e:	ee10 2a90 	vmov	r2, s1
 802cd42:	401a      	ands	r2, r3
 802cd44:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 802cd48:	2b00      	cmp	r3, #0
 802cd4a:	dd04      	ble.n	802cd56 <__ulp+0x1a>
 802cd4c:	2000      	movs	r0, #0
 802cd4e:	4619      	mov	r1, r3
 802cd50:	ec41 0b10 	vmov	d0, r0, r1
 802cd54:	4770      	bx	lr
 802cd56:	425b      	negs	r3, r3
 802cd58:	151b      	asrs	r3, r3, #20
 802cd5a:	2b13      	cmp	r3, #19
 802cd5c:	f04f 0000 	mov.w	r0, #0
 802cd60:	f04f 0100 	mov.w	r1, #0
 802cd64:	dc04      	bgt.n	802cd70 <__ulp+0x34>
 802cd66:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 802cd6a:	fa42 f103 	asr.w	r1, r2, r3
 802cd6e:	e7ef      	b.n	802cd50 <__ulp+0x14>
 802cd70:	3b14      	subs	r3, #20
 802cd72:	2b1e      	cmp	r3, #30
 802cd74:	f04f 0201 	mov.w	r2, #1
 802cd78:	bfda      	itte	le
 802cd7a:	f1c3 031f 	rsble	r3, r3, #31
 802cd7e:	fa02 f303 	lslle.w	r3, r2, r3
 802cd82:	4613      	movgt	r3, r2
 802cd84:	4618      	mov	r0, r3
 802cd86:	e7e3      	b.n	802cd50 <__ulp+0x14>
 802cd88:	7ff00000 	.word	0x7ff00000

0802cd8c <__b2d>:
 802cd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cd8e:	6905      	ldr	r5, [r0, #16]
 802cd90:	f100 0714 	add.w	r7, r0, #20
 802cd94:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 802cd98:	1f2e      	subs	r6, r5, #4
 802cd9a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802cd9e:	4620      	mov	r0, r4
 802cda0:	f7ff fdc5 	bl	802c92e <__hi0bits>
 802cda4:	f1c0 0320 	rsb	r3, r0, #32
 802cda8:	280a      	cmp	r0, #10
 802cdaa:	600b      	str	r3, [r1, #0]
 802cdac:	f8df c074 	ldr.w	ip, [pc, #116]	; 802ce24 <__b2d+0x98>
 802cdb0:	dc14      	bgt.n	802cddc <__b2d+0x50>
 802cdb2:	f1c0 0e0b 	rsb	lr, r0, #11
 802cdb6:	fa24 f10e 	lsr.w	r1, r4, lr
 802cdba:	42b7      	cmp	r7, r6
 802cdbc:	ea41 030c 	orr.w	r3, r1, ip
 802cdc0:	bf34      	ite	cc
 802cdc2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802cdc6:	2100      	movcs	r1, #0
 802cdc8:	3015      	adds	r0, #21
 802cdca:	fa04 f000 	lsl.w	r0, r4, r0
 802cdce:	fa21 f10e 	lsr.w	r1, r1, lr
 802cdd2:	ea40 0201 	orr.w	r2, r0, r1
 802cdd6:	ec43 2b10 	vmov	d0, r2, r3
 802cdda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802cddc:	42b7      	cmp	r7, r6
 802cdde:	bf3a      	itte	cc
 802cde0:	f1a5 0608 	subcc.w	r6, r5, #8
 802cde4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802cde8:	2100      	movcs	r1, #0
 802cdea:	380b      	subs	r0, #11
 802cdec:	d015      	beq.n	802ce1a <__b2d+0x8e>
 802cdee:	4084      	lsls	r4, r0
 802cdf0:	f1c0 0520 	rsb	r5, r0, #32
 802cdf4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 802cdf8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 802cdfc:	42be      	cmp	r6, r7
 802cdfe:	fa21 fc05 	lsr.w	ip, r1, r5
 802ce02:	ea44 030c 	orr.w	r3, r4, ip
 802ce06:	bf8c      	ite	hi
 802ce08:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 802ce0c:	2400      	movls	r4, #0
 802ce0e:	fa01 f000 	lsl.w	r0, r1, r0
 802ce12:	40ec      	lsrs	r4, r5
 802ce14:	ea40 0204 	orr.w	r2, r0, r4
 802ce18:	e7dd      	b.n	802cdd6 <__b2d+0x4a>
 802ce1a:	ea44 030c 	orr.w	r3, r4, ip
 802ce1e:	460a      	mov	r2, r1
 802ce20:	e7d9      	b.n	802cdd6 <__b2d+0x4a>
 802ce22:	bf00      	nop
 802ce24:	3ff00000 	.word	0x3ff00000

0802ce28 <__d2b>:
 802ce28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802ce2c:	460e      	mov	r6, r1
 802ce2e:	2101      	movs	r1, #1
 802ce30:	ec59 8b10 	vmov	r8, r9, d0
 802ce34:	4615      	mov	r5, r2
 802ce36:	f7ff fcb6 	bl	802c7a6 <_Balloc>
 802ce3a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 802ce3e:	4607      	mov	r7, r0
 802ce40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802ce44:	bb34      	cbnz	r4, 802ce94 <__d2b+0x6c>
 802ce46:	9301      	str	r3, [sp, #4]
 802ce48:	f1b8 0300 	subs.w	r3, r8, #0
 802ce4c:	d027      	beq.n	802ce9e <__d2b+0x76>
 802ce4e:	a802      	add	r0, sp, #8
 802ce50:	f840 3d08 	str.w	r3, [r0, #-8]!
 802ce54:	f7ff fd8a 	bl	802c96c <__lo0bits>
 802ce58:	9900      	ldr	r1, [sp, #0]
 802ce5a:	b1f0      	cbz	r0, 802ce9a <__d2b+0x72>
 802ce5c:	9a01      	ldr	r2, [sp, #4]
 802ce5e:	f1c0 0320 	rsb	r3, r0, #32
 802ce62:	fa02 f303 	lsl.w	r3, r2, r3
 802ce66:	430b      	orrs	r3, r1
 802ce68:	40c2      	lsrs	r2, r0
 802ce6a:	617b      	str	r3, [r7, #20]
 802ce6c:	9201      	str	r2, [sp, #4]
 802ce6e:	9b01      	ldr	r3, [sp, #4]
 802ce70:	61bb      	str	r3, [r7, #24]
 802ce72:	2b00      	cmp	r3, #0
 802ce74:	bf14      	ite	ne
 802ce76:	2102      	movne	r1, #2
 802ce78:	2101      	moveq	r1, #1
 802ce7a:	6139      	str	r1, [r7, #16]
 802ce7c:	b1c4      	cbz	r4, 802ceb0 <__d2b+0x88>
 802ce7e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 802ce82:	4404      	add	r4, r0
 802ce84:	6034      	str	r4, [r6, #0]
 802ce86:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802ce8a:	6028      	str	r0, [r5, #0]
 802ce8c:	4638      	mov	r0, r7
 802ce8e:	b003      	add	sp, #12
 802ce90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802ce94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802ce98:	e7d5      	b.n	802ce46 <__d2b+0x1e>
 802ce9a:	6179      	str	r1, [r7, #20]
 802ce9c:	e7e7      	b.n	802ce6e <__d2b+0x46>
 802ce9e:	a801      	add	r0, sp, #4
 802cea0:	f7ff fd64 	bl	802c96c <__lo0bits>
 802cea4:	9b01      	ldr	r3, [sp, #4]
 802cea6:	617b      	str	r3, [r7, #20]
 802cea8:	2101      	movs	r1, #1
 802ceaa:	6139      	str	r1, [r7, #16]
 802ceac:	3020      	adds	r0, #32
 802ceae:	e7e5      	b.n	802ce7c <__d2b+0x54>
 802ceb0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 802ceb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802ceb8:	6030      	str	r0, [r6, #0]
 802ceba:	6918      	ldr	r0, [r3, #16]
 802cebc:	f7ff fd37 	bl	802c92e <__hi0bits>
 802cec0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 802cec4:	e7e1      	b.n	802ce8a <__d2b+0x62>

0802cec6 <__ratio>:
 802cec6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ceca:	4688      	mov	r8, r1
 802cecc:	4669      	mov	r1, sp
 802cece:	4681      	mov	r9, r0
 802ced0:	f7ff ff5c 	bl	802cd8c <__b2d>
 802ced4:	a901      	add	r1, sp, #4
 802ced6:	4640      	mov	r0, r8
 802ced8:	ec57 6b10 	vmov	r6, r7, d0
 802cedc:	f7ff ff56 	bl	802cd8c <__b2d>
 802cee0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802cee4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802cee8:	eba3 0c02 	sub.w	ip, r3, r2
 802ceec:	e9dd 3200 	ldrd	r3, r2, [sp]
 802cef0:	1a9b      	subs	r3, r3, r2
 802cef2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802cef6:	ec5b ab10 	vmov	sl, fp, d0
 802cefa:	2b00      	cmp	r3, #0
 802cefc:	bfce      	itee	gt
 802cefe:	463a      	movgt	r2, r7
 802cf00:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802cf04:	465a      	movle	r2, fp
 802cf06:	4659      	mov	r1, fp
 802cf08:	463d      	mov	r5, r7
 802cf0a:	bfd4      	ite	le
 802cf0c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 802cf10:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 802cf14:	4630      	mov	r0, r6
 802cf16:	ee10 2a10 	vmov	r2, s0
 802cf1a:	460b      	mov	r3, r1
 802cf1c:	4629      	mov	r1, r5
 802cf1e:	f7d3 fc9d 	bl	800085c <__aeabi_ddiv>
 802cf22:	ec41 0b10 	vmov	d0, r0, r1
 802cf26:	b003      	add	sp, #12
 802cf28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802cf2c <__copybits>:
 802cf2c:	3901      	subs	r1, #1
 802cf2e:	b510      	push	{r4, lr}
 802cf30:	1149      	asrs	r1, r1, #5
 802cf32:	6914      	ldr	r4, [r2, #16]
 802cf34:	3101      	adds	r1, #1
 802cf36:	f102 0314 	add.w	r3, r2, #20
 802cf3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802cf3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802cf42:	42a3      	cmp	r3, r4
 802cf44:	4602      	mov	r2, r0
 802cf46:	d303      	bcc.n	802cf50 <__copybits+0x24>
 802cf48:	2300      	movs	r3, #0
 802cf4a:	428a      	cmp	r2, r1
 802cf4c:	d305      	bcc.n	802cf5a <__copybits+0x2e>
 802cf4e:	bd10      	pop	{r4, pc}
 802cf50:	f853 2b04 	ldr.w	r2, [r3], #4
 802cf54:	f840 2b04 	str.w	r2, [r0], #4
 802cf58:	e7f3      	b.n	802cf42 <__copybits+0x16>
 802cf5a:	f842 3b04 	str.w	r3, [r2], #4
 802cf5e:	e7f4      	b.n	802cf4a <__copybits+0x1e>

0802cf60 <__any_on>:
 802cf60:	f100 0214 	add.w	r2, r0, #20
 802cf64:	6900      	ldr	r0, [r0, #16]
 802cf66:	114b      	asrs	r3, r1, #5
 802cf68:	4298      	cmp	r0, r3
 802cf6a:	b510      	push	{r4, lr}
 802cf6c:	db11      	blt.n	802cf92 <__any_on+0x32>
 802cf6e:	dd0a      	ble.n	802cf86 <__any_on+0x26>
 802cf70:	f011 011f 	ands.w	r1, r1, #31
 802cf74:	d007      	beq.n	802cf86 <__any_on+0x26>
 802cf76:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802cf7a:	fa24 f001 	lsr.w	r0, r4, r1
 802cf7e:	fa00 f101 	lsl.w	r1, r0, r1
 802cf82:	428c      	cmp	r4, r1
 802cf84:	d10b      	bne.n	802cf9e <__any_on+0x3e>
 802cf86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802cf8a:	4293      	cmp	r3, r2
 802cf8c:	d803      	bhi.n	802cf96 <__any_on+0x36>
 802cf8e:	2000      	movs	r0, #0
 802cf90:	bd10      	pop	{r4, pc}
 802cf92:	4603      	mov	r3, r0
 802cf94:	e7f7      	b.n	802cf86 <__any_on+0x26>
 802cf96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802cf9a:	2900      	cmp	r1, #0
 802cf9c:	d0f5      	beq.n	802cf8a <__any_on+0x2a>
 802cf9e:	2001      	movs	r0, #1
 802cfa0:	e7f6      	b.n	802cf90 <__any_on+0x30>

0802cfa2 <_calloc_r>:
 802cfa2:	b538      	push	{r3, r4, r5, lr}
 802cfa4:	fb02 f401 	mul.w	r4, r2, r1
 802cfa8:	4621      	mov	r1, r4
 802cfaa:	f000 f857 	bl	802d05c <_malloc_r>
 802cfae:	4605      	mov	r5, r0
 802cfb0:	b118      	cbz	r0, 802cfba <_calloc_r+0x18>
 802cfb2:	4622      	mov	r2, r4
 802cfb4:	2100      	movs	r1, #0
 802cfb6:	f7fc f812 	bl	8028fde <memset>
 802cfba:	4628      	mov	r0, r5
 802cfbc:	bd38      	pop	{r3, r4, r5, pc}
	...

0802cfc0 <_free_r>:
 802cfc0:	b538      	push	{r3, r4, r5, lr}
 802cfc2:	4605      	mov	r5, r0
 802cfc4:	2900      	cmp	r1, #0
 802cfc6:	d045      	beq.n	802d054 <_free_r+0x94>
 802cfc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802cfcc:	1f0c      	subs	r4, r1, #4
 802cfce:	2b00      	cmp	r3, #0
 802cfd0:	bfb8      	it	lt
 802cfd2:	18e4      	addlt	r4, r4, r3
 802cfd4:	f000 fb20 	bl	802d618 <__malloc_lock>
 802cfd8:	4a1f      	ldr	r2, [pc, #124]	; (802d058 <_free_r+0x98>)
 802cfda:	6813      	ldr	r3, [r2, #0]
 802cfdc:	4610      	mov	r0, r2
 802cfde:	b933      	cbnz	r3, 802cfee <_free_r+0x2e>
 802cfe0:	6063      	str	r3, [r4, #4]
 802cfe2:	6014      	str	r4, [r2, #0]
 802cfe4:	4628      	mov	r0, r5
 802cfe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802cfea:	f000 bb16 	b.w	802d61a <__malloc_unlock>
 802cfee:	42a3      	cmp	r3, r4
 802cff0:	d90c      	bls.n	802d00c <_free_r+0x4c>
 802cff2:	6821      	ldr	r1, [r4, #0]
 802cff4:	1862      	adds	r2, r4, r1
 802cff6:	4293      	cmp	r3, r2
 802cff8:	bf04      	itt	eq
 802cffa:	681a      	ldreq	r2, [r3, #0]
 802cffc:	685b      	ldreq	r3, [r3, #4]
 802cffe:	6063      	str	r3, [r4, #4]
 802d000:	bf04      	itt	eq
 802d002:	1852      	addeq	r2, r2, r1
 802d004:	6022      	streq	r2, [r4, #0]
 802d006:	6004      	str	r4, [r0, #0]
 802d008:	e7ec      	b.n	802cfe4 <_free_r+0x24>
 802d00a:	4613      	mov	r3, r2
 802d00c:	685a      	ldr	r2, [r3, #4]
 802d00e:	b10a      	cbz	r2, 802d014 <_free_r+0x54>
 802d010:	42a2      	cmp	r2, r4
 802d012:	d9fa      	bls.n	802d00a <_free_r+0x4a>
 802d014:	6819      	ldr	r1, [r3, #0]
 802d016:	1858      	adds	r0, r3, r1
 802d018:	42a0      	cmp	r0, r4
 802d01a:	d10b      	bne.n	802d034 <_free_r+0x74>
 802d01c:	6820      	ldr	r0, [r4, #0]
 802d01e:	4401      	add	r1, r0
 802d020:	1858      	adds	r0, r3, r1
 802d022:	4282      	cmp	r2, r0
 802d024:	6019      	str	r1, [r3, #0]
 802d026:	d1dd      	bne.n	802cfe4 <_free_r+0x24>
 802d028:	6810      	ldr	r0, [r2, #0]
 802d02a:	6852      	ldr	r2, [r2, #4]
 802d02c:	605a      	str	r2, [r3, #4]
 802d02e:	4401      	add	r1, r0
 802d030:	6019      	str	r1, [r3, #0]
 802d032:	e7d7      	b.n	802cfe4 <_free_r+0x24>
 802d034:	d902      	bls.n	802d03c <_free_r+0x7c>
 802d036:	230c      	movs	r3, #12
 802d038:	602b      	str	r3, [r5, #0]
 802d03a:	e7d3      	b.n	802cfe4 <_free_r+0x24>
 802d03c:	6820      	ldr	r0, [r4, #0]
 802d03e:	1821      	adds	r1, r4, r0
 802d040:	428a      	cmp	r2, r1
 802d042:	bf04      	itt	eq
 802d044:	6811      	ldreq	r1, [r2, #0]
 802d046:	6852      	ldreq	r2, [r2, #4]
 802d048:	6062      	str	r2, [r4, #4]
 802d04a:	bf04      	itt	eq
 802d04c:	1809      	addeq	r1, r1, r0
 802d04e:	6021      	streq	r1, [r4, #0]
 802d050:	605c      	str	r4, [r3, #4]
 802d052:	e7c7      	b.n	802cfe4 <_free_r+0x24>
 802d054:	bd38      	pop	{r3, r4, r5, pc}
 802d056:	bf00      	nop
 802d058:	200097cc 	.word	0x200097cc

0802d05c <_malloc_r>:
 802d05c:	b570      	push	{r4, r5, r6, lr}
 802d05e:	1ccd      	adds	r5, r1, #3
 802d060:	f025 0503 	bic.w	r5, r5, #3
 802d064:	3508      	adds	r5, #8
 802d066:	2d0c      	cmp	r5, #12
 802d068:	bf38      	it	cc
 802d06a:	250c      	movcc	r5, #12
 802d06c:	2d00      	cmp	r5, #0
 802d06e:	4606      	mov	r6, r0
 802d070:	db01      	blt.n	802d076 <_malloc_r+0x1a>
 802d072:	42a9      	cmp	r1, r5
 802d074:	d903      	bls.n	802d07e <_malloc_r+0x22>
 802d076:	230c      	movs	r3, #12
 802d078:	6033      	str	r3, [r6, #0]
 802d07a:	2000      	movs	r0, #0
 802d07c:	bd70      	pop	{r4, r5, r6, pc}
 802d07e:	f000 facb 	bl	802d618 <__malloc_lock>
 802d082:	4a21      	ldr	r2, [pc, #132]	; (802d108 <_malloc_r+0xac>)
 802d084:	6814      	ldr	r4, [r2, #0]
 802d086:	4621      	mov	r1, r4
 802d088:	b991      	cbnz	r1, 802d0b0 <_malloc_r+0x54>
 802d08a:	4c20      	ldr	r4, [pc, #128]	; (802d10c <_malloc_r+0xb0>)
 802d08c:	6823      	ldr	r3, [r4, #0]
 802d08e:	b91b      	cbnz	r3, 802d098 <_malloc_r+0x3c>
 802d090:	4630      	mov	r0, r6
 802d092:	f000 f9b5 	bl	802d400 <_sbrk_r>
 802d096:	6020      	str	r0, [r4, #0]
 802d098:	4629      	mov	r1, r5
 802d09a:	4630      	mov	r0, r6
 802d09c:	f000 f9b0 	bl	802d400 <_sbrk_r>
 802d0a0:	1c43      	adds	r3, r0, #1
 802d0a2:	d124      	bne.n	802d0ee <_malloc_r+0x92>
 802d0a4:	230c      	movs	r3, #12
 802d0a6:	6033      	str	r3, [r6, #0]
 802d0a8:	4630      	mov	r0, r6
 802d0aa:	f000 fab6 	bl	802d61a <__malloc_unlock>
 802d0ae:	e7e4      	b.n	802d07a <_malloc_r+0x1e>
 802d0b0:	680b      	ldr	r3, [r1, #0]
 802d0b2:	1b5b      	subs	r3, r3, r5
 802d0b4:	d418      	bmi.n	802d0e8 <_malloc_r+0x8c>
 802d0b6:	2b0b      	cmp	r3, #11
 802d0b8:	d90f      	bls.n	802d0da <_malloc_r+0x7e>
 802d0ba:	600b      	str	r3, [r1, #0]
 802d0bc:	50cd      	str	r5, [r1, r3]
 802d0be:	18cc      	adds	r4, r1, r3
 802d0c0:	4630      	mov	r0, r6
 802d0c2:	f000 faaa 	bl	802d61a <__malloc_unlock>
 802d0c6:	f104 000b 	add.w	r0, r4, #11
 802d0ca:	1d23      	adds	r3, r4, #4
 802d0cc:	f020 0007 	bic.w	r0, r0, #7
 802d0d0:	1ac3      	subs	r3, r0, r3
 802d0d2:	d0d3      	beq.n	802d07c <_malloc_r+0x20>
 802d0d4:	425a      	negs	r2, r3
 802d0d6:	50e2      	str	r2, [r4, r3]
 802d0d8:	e7d0      	b.n	802d07c <_malloc_r+0x20>
 802d0da:	428c      	cmp	r4, r1
 802d0dc:	684b      	ldr	r3, [r1, #4]
 802d0de:	bf16      	itet	ne
 802d0e0:	6063      	strne	r3, [r4, #4]
 802d0e2:	6013      	streq	r3, [r2, #0]
 802d0e4:	460c      	movne	r4, r1
 802d0e6:	e7eb      	b.n	802d0c0 <_malloc_r+0x64>
 802d0e8:	460c      	mov	r4, r1
 802d0ea:	6849      	ldr	r1, [r1, #4]
 802d0ec:	e7cc      	b.n	802d088 <_malloc_r+0x2c>
 802d0ee:	1cc4      	adds	r4, r0, #3
 802d0f0:	f024 0403 	bic.w	r4, r4, #3
 802d0f4:	42a0      	cmp	r0, r4
 802d0f6:	d005      	beq.n	802d104 <_malloc_r+0xa8>
 802d0f8:	1a21      	subs	r1, r4, r0
 802d0fa:	4630      	mov	r0, r6
 802d0fc:	f000 f980 	bl	802d400 <_sbrk_r>
 802d100:	3001      	adds	r0, #1
 802d102:	d0cf      	beq.n	802d0a4 <_malloc_r+0x48>
 802d104:	6025      	str	r5, [r4, #0]
 802d106:	e7db      	b.n	802d0c0 <_malloc_r+0x64>
 802d108:	200097cc 	.word	0x200097cc
 802d10c:	200097d0 	.word	0x200097d0

0802d110 <_realloc_r>:
 802d110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d112:	4607      	mov	r7, r0
 802d114:	4614      	mov	r4, r2
 802d116:	460e      	mov	r6, r1
 802d118:	b921      	cbnz	r1, 802d124 <_realloc_r+0x14>
 802d11a:	4611      	mov	r1, r2
 802d11c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802d120:	f7ff bf9c 	b.w	802d05c <_malloc_r>
 802d124:	b922      	cbnz	r2, 802d130 <_realloc_r+0x20>
 802d126:	f7ff ff4b 	bl	802cfc0 <_free_r>
 802d12a:	4625      	mov	r5, r4
 802d12c:	4628      	mov	r0, r5
 802d12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d130:	f000 fa74 	bl	802d61c <_malloc_usable_size_r>
 802d134:	42a0      	cmp	r0, r4
 802d136:	d20f      	bcs.n	802d158 <_realloc_r+0x48>
 802d138:	4621      	mov	r1, r4
 802d13a:	4638      	mov	r0, r7
 802d13c:	f7ff ff8e 	bl	802d05c <_malloc_r>
 802d140:	4605      	mov	r5, r0
 802d142:	2800      	cmp	r0, #0
 802d144:	d0f2      	beq.n	802d12c <_realloc_r+0x1c>
 802d146:	4631      	mov	r1, r6
 802d148:	4622      	mov	r2, r4
 802d14a:	f7fb ff3d 	bl	8028fc8 <memcpy>
 802d14e:	4631      	mov	r1, r6
 802d150:	4638      	mov	r0, r7
 802d152:	f7ff ff35 	bl	802cfc0 <_free_r>
 802d156:	e7e9      	b.n	802d12c <_realloc_r+0x1c>
 802d158:	4635      	mov	r5, r6
 802d15a:	e7e7      	b.n	802d12c <_realloc_r+0x1c>

0802d15c <__ssputs_r>:
 802d15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d160:	688e      	ldr	r6, [r1, #8]
 802d162:	429e      	cmp	r6, r3
 802d164:	4682      	mov	sl, r0
 802d166:	460c      	mov	r4, r1
 802d168:	4690      	mov	r8, r2
 802d16a:	4699      	mov	r9, r3
 802d16c:	d837      	bhi.n	802d1de <__ssputs_r+0x82>
 802d16e:	898a      	ldrh	r2, [r1, #12]
 802d170:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802d174:	d031      	beq.n	802d1da <__ssputs_r+0x7e>
 802d176:	6825      	ldr	r5, [r4, #0]
 802d178:	6909      	ldr	r1, [r1, #16]
 802d17a:	1a6f      	subs	r7, r5, r1
 802d17c:	6965      	ldr	r5, [r4, #20]
 802d17e:	2302      	movs	r3, #2
 802d180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802d184:	fb95 f5f3 	sdiv	r5, r5, r3
 802d188:	f109 0301 	add.w	r3, r9, #1
 802d18c:	443b      	add	r3, r7
 802d18e:	429d      	cmp	r5, r3
 802d190:	bf38      	it	cc
 802d192:	461d      	movcc	r5, r3
 802d194:	0553      	lsls	r3, r2, #21
 802d196:	d530      	bpl.n	802d1fa <__ssputs_r+0x9e>
 802d198:	4629      	mov	r1, r5
 802d19a:	f7ff ff5f 	bl	802d05c <_malloc_r>
 802d19e:	4606      	mov	r6, r0
 802d1a0:	b950      	cbnz	r0, 802d1b8 <__ssputs_r+0x5c>
 802d1a2:	230c      	movs	r3, #12
 802d1a4:	f8ca 3000 	str.w	r3, [sl]
 802d1a8:	89a3      	ldrh	r3, [r4, #12]
 802d1aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d1ae:	81a3      	strh	r3, [r4, #12]
 802d1b0:	f04f 30ff 	mov.w	r0, #4294967295
 802d1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d1b8:	463a      	mov	r2, r7
 802d1ba:	6921      	ldr	r1, [r4, #16]
 802d1bc:	f7fb ff04 	bl	8028fc8 <memcpy>
 802d1c0:	89a3      	ldrh	r3, [r4, #12]
 802d1c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802d1c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802d1ca:	81a3      	strh	r3, [r4, #12]
 802d1cc:	6126      	str	r6, [r4, #16]
 802d1ce:	6165      	str	r5, [r4, #20]
 802d1d0:	443e      	add	r6, r7
 802d1d2:	1bed      	subs	r5, r5, r7
 802d1d4:	6026      	str	r6, [r4, #0]
 802d1d6:	60a5      	str	r5, [r4, #8]
 802d1d8:	464e      	mov	r6, r9
 802d1da:	454e      	cmp	r6, r9
 802d1dc:	d900      	bls.n	802d1e0 <__ssputs_r+0x84>
 802d1de:	464e      	mov	r6, r9
 802d1e0:	4632      	mov	r2, r6
 802d1e2:	4641      	mov	r1, r8
 802d1e4:	6820      	ldr	r0, [r4, #0]
 802d1e6:	f7ff fac5 	bl	802c774 <memmove>
 802d1ea:	68a3      	ldr	r3, [r4, #8]
 802d1ec:	1b9b      	subs	r3, r3, r6
 802d1ee:	60a3      	str	r3, [r4, #8]
 802d1f0:	6823      	ldr	r3, [r4, #0]
 802d1f2:	441e      	add	r6, r3
 802d1f4:	6026      	str	r6, [r4, #0]
 802d1f6:	2000      	movs	r0, #0
 802d1f8:	e7dc      	b.n	802d1b4 <__ssputs_r+0x58>
 802d1fa:	462a      	mov	r2, r5
 802d1fc:	f7ff ff88 	bl	802d110 <_realloc_r>
 802d200:	4606      	mov	r6, r0
 802d202:	2800      	cmp	r0, #0
 802d204:	d1e2      	bne.n	802d1cc <__ssputs_r+0x70>
 802d206:	6921      	ldr	r1, [r4, #16]
 802d208:	4650      	mov	r0, sl
 802d20a:	f7ff fed9 	bl	802cfc0 <_free_r>
 802d20e:	e7c8      	b.n	802d1a2 <__ssputs_r+0x46>

0802d210 <_svfiprintf_r>:
 802d210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d214:	461d      	mov	r5, r3
 802d216:	898b      	ldrh	r3, [r1, #12]
 802d218:	061f      	lsls	r7, r3, #24
 802d21a:	b09d      	sub	sp, #116	; 0x74
 802d21c:	4680      	mov	r8, r0
 802d21e:	460c      	mov	r4, r1
 802d220:	4616      	mov	r6, r2
 802d222:	d50f      	bpl.n	802d244 <_svfiprintf_r+0x34>
 802d224:	690b      	ldr	r3, [r1, #16]
 802d226:	b96b      	cbnz	r3, 802d244 <_svfiprintf_r+0x34>
 802d228:	2140      	movs	r1, #64	; 0x40
 802d22a:	f7ff ff17 	bl	802d05c <_malloc_r>
 802d22e:	6020      	str	r0, [r4, #0]
 802d230:	6120      	str	r0, [r4, #16]
 802d232:	b928      	cbnz	r0, 802d240 <_svfiprintf_r+0x30>
 802d234:	230c      	movs	r3, #12
 802d236:	f8c8 3000 	str.w	r3, [r8]
 802d23a:	f04f 30ff 	mov.w	r0, #4294967295
 802d23e:	e0c8      	b.n	802d3d2 <_svfiprintf_r+0x1c2>
 802d240:	2340      	movs	r3, #64	; 0x40
 802d242:	6163      	str	r3, [r4, #20]
 802d244:	2300      	movs	r3, #0
 802d246:	9309      	str	r3, [sp, #36]	; 0x24
 802d248:	2320      	movs	r3, #32
 802d24a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802d24e:	2330      	movs	r3, #48	; 0x30
 802d250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802d254:	9503      	str	r5, [sp, #12]
 802d256:	f04f 0b01 	mov.w	fp, #1
 802d25a:	4637      	mov	r7, r6
 802d25c:	463d      	mov	r5, r7
 802d25e:	f815 3b01 	ldrb.w	r3, [r5], #1
 802d262:	b10b      	cbz	r3, 802d268 <_svfiprintf_r+0x58>
 802d264:	2b25      	cmp	r3, #37	; 0x25
 802d266:	d13e      	bne.n	802d2e6 <_svfiprintf_r+0xd6>
 802d268:	ebb7 0a06 	subs.w	sl, r7, r6
 802d26c:	d00b      	beq.n	802d286 <_svfiprintf_r+0x76>
 802d26e:	4653      	mov	r3, sl
 802d270:	4632      	mov	r2, r6
 802d272:	4621      	mov	r1, r4
 802d274:	4640      	mov	r0, r8
 802d276:	f7ff ff71 	bl	802d15c <__ssputs_r>
 802d27a:	3001      	adds	r0, #1
 802d27c:	f000 80a4 	beq.w	802d3c8 <_svfiprintf_r+0x1b8>
 802d280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d282:	4453      	add	r3, sl
 802d284:	9309      	str	r3, [sp, #36]	; 0x24
 802d286:	783b      	ldrb	r3, [r7, #0]
 802d288:	2b00      	cmp	r3, #0
 802d28a:	f000 809d 	beq.w	802d3c8 <_svfiprintf_r+0x1b8>
 802d28e:	2300      	movs	r3, #0
 802d290:	f04f 32ff 	mov.w	r2, #4294967295
 802d294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802d298:	9304      	str	r3, [sp, #16]
 802d29a:	9307      	str	r3, [sp, #28]
 802d29c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802d2a0:	931a      	str	r3, [sp, #104]	; 0x68
 802d2a2:	462f      	mov	r7, r5
 802d2a4:	2205      	movs	r2, #5
 802d2a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 802d2aa:	4850      	ldr	r0, [pc, #320]	; (802d3ec <_svfiprintf_r+0x1dc>)
 802d2ac:	f7d2 ffa0 	bl	80001f0 <memchr>
 802d2b0:	9b04      	ldr	r3, [sp, #16]
 802d2b2:	b9d0      	cbnz	r0, 802d2ea <_svfiprintf_r+0xda>
 802d2b4:	06d9      	lsls	r1, r3, #27
 802d2b6:	bf44      	itt	mi
 802d2b8:	2220      	movmi	r2, #32
 802d2ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802d2be:	071a      	lsls	r2, r3, #28
 802d2c0:	bf44      	itt	mi
 802d2c2:	222b      	movmi	r2, #43	; 0x2b
 802d2c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802d2c8:	782a      	ldrb	r2, [r5, #0]
 802d2ca:	2a2a      	cmp	r2, #42	; 0x2a
 802d2cc:	d015      	beq.n	802d2fa <_svfiprintf_r+0xea>
 802d2ce:	9a07      	ldr	r2, [sp, #28]
 802d2d0:	462f      	mov	r7, r5
 802d2d2:	2000      	movs	r0, #0
 802d2d4:	250a      	movs	r5, #10
 802d2d6:	4639      	mov	r1, r7
 802d2d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 802d2dc:	3b30      	subs	r3, #48	; 0x30
 802d2de:	2b09      	cmp	r3, #9
 802d2e0:	d94d      	bls.n	802d37e <_svfiprintf_r+0x16e>
 802d2e2:	b1b8      	cbz	r0, 802d314 <_svfiprintf_r+0x104>
 802d2e4:	e00f      	b.n	802d306 <_svfiprintf_r+0xf6>
 802d2e6:	462f      	mov	r7, r5
 802d2e8:	e7b8      	b.n	802d25c <_svfiprintf_r+0x4c>
 802d2ea:	4a40      	ldr	r2, [pc, #256]	; (802d3ec <_svfiprintf_r+0x1dc>)
 802d2ec:	1a80      	subs	r0, r0, r2
 802d2ee:	fa0b f000 	lsl.w	r0, fp, r0
 802d2f2:	4318      	orrs	r0, r3
 802d2f4:	9004      	str	r0, [sp, #16]
 802d2f6:	463d      	mov	r5, r7
 802d2f8:	e7d3      	b.n	802d2a2 <_svfiprintf_r+0x92>
 802d2fa:	9a03      	ldr	r2, [sp, #12]
 802d2fc:	1d11      	adds	r1, r2, #4
 802d2fe:	6812      	ldr	r2, [r2, #0]
 802d300:	9103      	str	r1, [sp, #12]
 802d302:	2a00      	cmp	r2, #0
 802d304:	db01      	blt.n	802d30a <_svfiprintf_r+0xfa>
 802d306:	9207      	str	r2, [sp, #28]
 802d308:	e004      	b.n	802d314 <_svfiprintf_r+0x104>
 802d30a:	4252      	negs	r2, r2
 802d30c:	f043 0302 	orr.w	r3, r3, #2
 802d310:	9207      	str	r2, [sp, #28]
 802d312:	9304      	str	r3, [sp, #16]
 802d314:	783b      	ldrb	r3, [r7, #0]
 802d316:	2b2e      	cmp	r3, #46	; 0x2e
 802d318:	d10c      	bne.n	802d334 <_svfiprintf_r+0x124>
 802d31a:	787b      	ldrb	r3, [r7, #1]
 802d31c:	2b2a      	cmp	r3, #42	; 0x2a
 802d31e:	d133      	bne.n	802d388 <_svfiprintf_r+0x178>
 802d320:	9b03      	ldr	r3, [sp, #12]
 802d322:	1d1a      	adds	r2, r3, #4
 802d324:	681b      	ldr	r3, [r3, #0]
 802d326:	9203      	str	r2, [sp, #12]
 802d328:	2b00      	cmp	r3, #0
 802d32a:	bfb8      	it	lt
 802d32c:	f04f 33ff 	movlt.w	r3, #4294967295
 802d330:	3702      	adds	r7, #2
 802d332:	9305      	str	r3, [sp, #20]
 802d334:	4d2e      	ldr	r5, [pc, #184]	; (802d3f0 <_svfiprintf_r+0x1e0>)
 802d336:	7839      	ldrb	r1, [r7, #0]
 802d338:	2203      	movs	r2, #3
 802d33a:	4628      	mov	r0, r5
 802d33c:	f7d2 ff58 	bl	80001f0 <memchr>
 802d340:	b138      	cbz	r0, 802d352 <_svfiprintf_r+0x142>
 802d342:	2340      	movs	r3, #64	; 0x40
 802d344:	1b40      	subs	r0, r0, r5
 802d346:	fa03 f000 	lsl.w	r0, r3, r0
 802d34a:	9b04      	ldr	r3, [sp, #16]
 802d34c:	4303      	orrs	r3, r0
 802d34e:	3701      	adds	r7, #1
 802d350:	9304      	str	r3, [sp, #16]
 802d352:	7839      	ldrb	r1, [r7, #0]
 802d354:	4827      	ldr	r0, [pc, #156]	; (802d3f4 <_svfiprintf_r+0x1e4>)
 802d356:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802d35a:	2206      	movs	r2, #6
 802d35c:	1c7e      	adds	r6, r7, #1
 802d35e:	f7d2 ff47 	bl	80001f0 <memchr>
 802d362:	2800      	cmp	r0, #0
 802d364:	d038      	beq.n	802d3d8 <_svfiprintf_r+0x1c8>
 802d366:	4b24      	ldr	r3, [pc, #144]	; (802d3f8 <_svfiprintf_r+0x1e8>)
 802d368:	bb13      	cbnz	r3, 802d3b0 <_svfiprintf_r+0x1a0>
 802d36a:	9b03      	ldr	r3, [sp, #12]
 802d36c:	3307      	adds	r3, #7
 802d36e:	f023 0307 	bic.w	r3, r3, #7
 802d372:	3308      	adds	r3, #8
 802d374:	9303      	str	r3, [sp, #12]
 802d376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d378:	444b      	add	r3, r9
 802d37a:	9309      	str	r3, [sp, #36]	; 0x24
 802d37c:	e76d      	b.n	802d25a <_svfiprintf_r+0x4a>
 802d37e:	fb05 3202 	mla	r2, r5, r2, r3
 802d382:	2001      	movs	r0, #1
 802d384:	460f      	mov	r7, r1
 802d386:	e7a6      	b.n	802d2d6 <_svfiprintf_r+0xc6>
 802d388:	2300      	movs	r3, #0
 802d38a:	3701      	adds	r7, #1
 802d38c:	9305      	str	r3, [sp, #20]
 802d38e:	4619      	mov	r1, r3
 802d390:	250a      	movs	r5, #10
 802d392:	4638      	mov	r0, r7
 802d394:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d398:	3a30      	subs	r2, #48	; 0x30
 802d39a:	2a09      	cmp	r2, #9
 802d39c:	d903      	bls.n	802d3a6 <_svfiprintf_r+0x196>
 802d39e:	2b00      	cmp	r3, #0
 802d3a0:	d0c8      	beq.n	802d334 <_svfiprintf_r+0x124>
 802d3a2:	9105      	str	r1, [sp, #20]
 802d3a4:	e7c6      	b.n	802d334 <_svfiprintf_r+0x124>
 802d3a6:	fb05 2101 	mla	r1, r5, r1, r2
 802d3aa:	2301      	movs	r3, #1
 802d3ac:	4607      	mov	r7, r0
 802d3ae:	e7f0      	b.n	802d392 <_svfiprintf_r+0x182>
 802d3b0:	ab03      	add	r3, sp, #12
 802d3b2:	9300      	str	r3, [sp, #0]
 802d3b4:	4622      	mov	r2, r4
 802d3b6:	4b11      	ldr	r3, [pc, #68]	; (802d3fc <_svfiprintf_r+0x1ec>)
 802d3b8:	a904      	add	r1, sp, #16
 802d3ba:	4640      	mov	r0, r8
 802d3bc:	f7fb ffea 	bl	8029394 <_printf_float>
 802d3c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 802d3c4:	4681      	mov	r9, r0
 802d3c6:	d1d6      	bne.n	802d376 <_svfiprintf_r+0x166>
 802d3c8:	89a3      	ldrh	r3, [r4, #12]
 802d3ca:	065b      	lsls	r3, r3, #25
 802d3cc:	f53f af35 	bmi.w	802d23a <_svfiprintf_r+0x2a>
 802d3d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 802d3d2:	b01d      	add	sp, #116	; 0x74
 802d3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d3d8:	ab03      	add	r3, sp, #12
 802d3da:	9300      	str	r3, [sp, #0]
 802d3dc:	4622      	mov	r2, r4
 802d3de:	4b07      	ldr	r3, [pc, #28]	; (802d3fc <_svfiprintf_r+0x1ec>)
 802d3e0:	a904      	add	r1, sp, #16
 802d3e2:	4640      	mov	r0, r8
 802d3e4:	f7fc fa8c 	bl	8029900 <_printf_i>
 802d3e8:	e7ea      	b.n	802d3c0 <_svfiprintf_r+0x1b0>
 802d3ea:	bf00      	nop
 802d3ec:	0802ee40 	.word	0x0802ee40
 802d3f0:	0802ee46 	.word	0x0802ee46
 802d3f4:	0802ee4a 	.word	0x0802ee4a
 802d3f8:	08029395 	.word	0x08029395
 802d3fc:	0802d15d 	.word	0x0802d15d

0802d400 <_sbrk_r>:
 802d400:	b538      	push	{r3, r4, r5, lr}
 802d402:	4c06      	ldr	r4, [pc, #24]	; (802d41c <_sbrk_r+0x1c>)
 802d404:	2300      	movs	r3, #0
 802d406:	4605      	mov	r5, r0
 802d408:	4608      	mov	r0, r1
 802d40a:	6023      	str	r3, [r4, #0]
 802d40c:	f7e7 fb2c 	bl	8014a68 <_sbrk>
 802d410:	1c43      	adds	r3, r0, #1
 802d412:	d102      	bne.n	802d41a <_sbrk_r+0x1a>
 802d414:	6823      	ldr	r3, [r4, #0]
 802d416:	b103      	cbz	r3, 802d41a <_sbrk_r+0x1a>
 802d418:	602b      	str	r3, [r5, #0]
 802d41a:	bd38      	pop	{r3, r4, r5, pc}
 802d41c:	20013200 	.word	0x20013200

0802d420 <_raise_r>:
 802d420:	291f      	cmp	r1, #31
 802d422:	b538      	push	{r3, r4, r5, lr}
 802d424:	4604      	mov	r4, r0
 802d426:	460d      	mov	r5, r1
 802d428:	d904      	bls.n	802d434 <_raise_r+0x14>
 802d42a:	2316      	movs	r3, #22
 802d42c:	6003      	str	r3, [r0, #0]
 802d42e:	f04f 30ff 	mov.w	r0, #4294967295
 802d432:	bd38      	pop	{r3, r4, r5, pc}
 802d434:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802d436:	b112      	cbz	r2, 802d43e <_raise_r+0x1e>
 802d438:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802d43c:	b94b      	cbnz	r3, 802d452 <_raise_r+0x32>
 802d43e:	4620      	mov	r0, r4
 802d440:	f000 f830 	bl	802d4a4 <_getpid_r>
 802d444:	462a      	mov	r2, r5
 802d446:	4601      	mov	r1, r0
 802d448:	4620      	mov	r0, r4
 802d44a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802d44e:	f000 b817 	b.w	802d480 <_kill_r>
 802d452:	2b01      	cmp	r3, #1
 802d454:	d00a      	beq.n	802d46c <_raise_r+0x4c>
 802d456:	1c59      	adds	r1, r3, #1
 802d458:	d103      	bne.n	802d462 <_raise_r+0x42>
 802d45a:	2316      	movs	r3, #22
 802d45c:	6003      	str	r3, [r0, #0]
 802d45e:	2001      	movs	r0, #1
 802d460:	e7e7      	b.n	802d432 <_raise_r+0x12>
 802d462:	2400      	movs	r4, #0
 802d464:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802d468:	4628      	mov	r0, r5
 802d46a:	4798      	blx	r3
 802d46c:	2000      	movs	r0, #0
 802d46e:	e7e0      	b.n	802d432 <_raise_r+0x12>

0802d470 <raise>:
 802d470:	4b02      	ldr	r3, [pc, #8]	; (802d47c <raise+0xc>)
 802d472:	4601      	mov	r1, r0
 802d474:	6818      	ldr	r0, [r3, #0]
 802d476:	f7ff bfd3 	b.w	802d420 <_raise_r>
 802d47a:	bf00      	nop
 802d47c:	200006ac 	.word	0x200006ac

0802d480 <_kill_r>:
 802d480:	b538      	push	{r3, r4, r5, lr}
 802d482:	4c07      	ldr	r4, [pc, #28]	; (802d4a0 <_kill_r+0x20>)
 802d484:	2300      	movs	r3, #0
 802d486:	4605      	mov	r5, r0
 802d488:	4608      	mov	r0, r1
 802d48a:	4611      	mov	r1, r2
 802d48c:	6023      	str	r3, [r4, #0]
 802d48e:	f7e7 fa63 	bl	8014958 <_kill>
 802d492:	1c43      	adds	r3, r0, #1
 802d494:	d102      	bne.n	802d49c <_kill_r+0x1c>
 802d496:	6823      	ldr	r3, [r4, #0]
 802d498:	b103      	cbz	r3, 802d49c <_kill_r+0x1c>
 802d49a:	602b      	str	r3, [r5, #0]
 802d49c:	bd38      	pop	{r3, r4, r5, pc}
 802d49e:	bf00      	nop
 802d4a0:	20013200 	.word	0x20013200

0802d4a4 <_getpid_r>:
 802d4a4:	f7e7 ba50 	b.w	8014948 <_getpid>

0802d4a8 <__sread>:
 802d4a8:	b510      	push	{r4, lr}
 802d4aa:	460c      	mov	r4, r1
 802d4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d4b0:	f000 f8bc 	bl	802d62c <_read_r>
 802d4b4:	2800      	cmp	r0, #0
 802d4b6:	bfab      	itete	ge
 802d4b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802d4ba:	89a3      	ldrhlt	r3, [r4, #12]
 802d4bc:	181b      	addge	r3, r3, r0
 802d4be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802d4c2:	bfac      	ite	ge
 802d4c4:	6563      	strge	r3, [r4, #84]	; 0x54
 802d4c6:	81a3      	strhlt	r3, [r4, #12]
 802d4c8:	bd10      	pop	{r4, pc}

0802d4ca <__swrite>:
 802d4ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d4ce:	461f      	mov	r7, r3
 802d4d0:	898b      	ldrh	r3, [r1, #12]
 802d4d2:	05db      	lsls	r3, r3, #23
 802d4d4:	4605      	mov	r5, r0
 802d4d6:	460c      	mov	r4, r1
 802d4d8:	4616      	mov	r6, r2
 802d4da:	d505      	bpl.n	802d4e8 <__swrite+0x1e>
 802d4dc:	2302      	movs	r3, #2
 802d4de:	2200      	movs	r2, #0
 802d4e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d4e4:	f000 f886 	bl	802d5f4 <_lseek_r>
 802d4e8:	89a3      	ldrh	r3, [r4, #12]
 802d4ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d4ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802d4f2:	81a3      	strh	r3, [r4, #12]
 802d4f4:	4632      	mov	r2, r6
 802d4f6:	463b      	mov	r3, r7
 802d4f8:	4628      	mov	r0, r5
 802d4fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d4fe:	f000 b835 	b.w	802d56c <_write_r>

0802d502 <__sseek>:
 802d502:	b510      	push	{r4, lr}
 802d504:	460c      	mov	r4, r1
 802d506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d50a:	f000 f873 	bl	802d5f4 <_lseek_r>
 802d50e:	1c43      	adds	r3, r0, #1
 802d510:	89a3      	ldrh	r3, [r4, #12]
 802d512:	bf15      	itete	ne
 802d514:	6560      	strne	r0, [r4, #84]	; 0x54
 802d516:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802d51a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802d51e:	81a3      	strheq	r3, [r4, #12]
 802d520:	bf18      	it	ne
 802d522:	81a3      	strhne	r3, [r4, #12]
 802d524:	bd10      	pop	{r4, pc}

0802d526 <__sclose>:
 802d526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d52a:	f000 b831 	b.w	802d590 <_close_r>

0802d52e <strncmp>:
 802d52e:	b510      	push	{r4, lr}
 802d530:	b16a      	cbz	r2, 802d54e <strncmp+0x20>
 802d532:	3901      	subs	r1, #1
 802d534:	1884      	adds	r4, r0, r2
 802d536:	f810 3b01 	ldrb.w	r3, [r0], #1
 802d53a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802d53e:	4293      	cmp	r3, r2
 802d540:	d103      	bne.n	802d54a <strncmp+0x1c>
 802d542:	42a0      	cmp	r0, r4
 802d544:	d001      	beq.n	802d54a <strncmp+0x1c>
 802d546:	2b00      	cmp	r3, #0
 802d548:	d1f5      	bne.n	802d536 <strncmp+0x8>
 802d54a:	1a98      	subs	r0, r3, r2
 802d54c:	bd10      	pop	{r4, pc}
 802d54e:	4610      	mov	r0, r2
 802d550:	e7fc      	b.n	802d54c <strncmp+0x1e>

0802d552 <__ascii_wctomb>:
 802d552:	b149      	cbz	r1, 802d568 <__ascii_wctomb+0x16>
 802d554:	2aff      	cmp	r2, #255	; 0xff
 802d556:	bf85      	ittet	hi
 802d558:	238a      	movhi	r3, #138	; 0x8a
 802d55a:	6003      	strhi	r3, [r0, #0]
 802d55c:	700a      	strbls	r2, [r1, #0]
 802d55e:	f04f 30ff 	movhi.w	r0, #4294967295
 802d562:	bf98      	it	ls
 802d564:	2001      	movls	r0, #1
 802d566:	4770      	bx	lr
 802d568:	4608      	mov	r0, r1
 802d56a:	4770      	bx	lr

0802d56c <_write_r>:
 802d56c:	b538      	push	{r3, r4, r5, lr}
 802d56e:	4c07      	ldr	r4, [pc, #28]	; (802d58c <_write_r+0x20>)
 802d570:	4605      	mov	r5, r0
 802d572:	4608      	mov	r0, r1
 802d574:	4611      	mov	r1, r2
 802d576:	2200      	movs	r2, #0
 802d578:	6022      	str	r2, [r4, #0]
 802d57a:	461a      	mov	r2, r3
 802d57c:	f7e7 fa23 	bl	80149c6 <_write>
 802d580:	1c43      	adds	r3, r0, #1
 802d582:	d102      	bne.n	802d58a <_write_r+0x1e>
 802d584:	6823      	ldr	r3, [r4, #0]
 802d586:	b103      	cbz	r3, 802d58a <_write_r+0x1e>
 802d588:	602b      	str	r3, [r5, #0]
 802d58a:	bd38      	pop	{r3, r4, r5, pc}
 802d58c:	20013200 	.word	0x20013200

0802d590 <_close_r>:
 802d590:	b538      	push	{r3, r4, r5, lr}
 802d592:	4c06      	ldr	r4, [pc, #24]	; (802d5ac <_close_r+0x1c>)
 802d594:	2300      	movs	r3, #0
 802d596:	4605      	mov	r5, r0
 802d598:	4608      	mov	r0, r1
 802d59a:	6023      	str	r3, [r4, #0]
 802d59c:	f7e7 fa2f 	bl	80149fe <_close>
 802d5a0:	1c43      	adds	r3, r0, #1
 802d5a2:	d102      	bne.n	802d5aa <_close_r+0x1a>
 802d5a4:	6823      	ldr	r3, [r4, #0]
 802d5a6:	b103      	cbz	r3, 802d5aa <_close_r+0x1a>
 802d5a8:	602b      	str	r3, [r5, #0]
 802d5aa:	bd38      	pop	{r3, r4, r5, pc}
 802d5ac:	20013200 	.word	0x20013200

0802d5b0 <_fstat_r>:
 802d5b0:	b538      	push	{r3, r4, r5, lr}
 802d5b2:	4c07      	ldr	r4, [pc, #28]	; (802d5d0 <_fstat_r+0x20>)
 802d5b4:	2300      	movs	r3, #0
 802d5b6:	4605      	mov	r5, r0
 802d5b8:	4608      	mov	r0, r1
 802d5ba:	4611      	mov	r1, r2
 802d5bc:	6023      	str	r3, [r4, #0]
 802d5be:	f7e7 fa2a 	bl	8014a16 <_fstat>
 802d5c2:	1c43      	adds	r3, r0, #1
 802d5c4:	d102      	bne.n	802d5cc <_fstat_r+0x1c>
 802d5c6:	6823      	ldr	r3, [r4, #0]
 802d5c8:	b103      	cbz	r3, 802d5cc <_fstat_r+0x1c>
 802d5ca:	602b      	str	r3, [r5, #0]
 802d5cc:	bd38      	pop	{r3, r4, r5, pc}
 802d5ce:	bf00      	nop
 802d5d0:	20013200 	.word	0x20013200

0802d5d4 <_isatty_r>:
 802d5d4:	b538      	push	{r3, r4, r5, lr}
 802d5d6:	4c06      	ldr	r4, [pc, #24]	; (802d5f0 <_isatty_r+0x1c>)
 802d5d8:	2300      	movs	r3, #0
 802d5da:	4605      	mov	r5, r0
 802d5dc:	4608      	mov	r0, r1
 802d5de:	6023      	str	r3, [r4, #0]
 802d5e0:	f7e7 fa29 	bl	8014a36 <_isatty>
 802d5e4:	1c43      	adds	r3, r0, #1
 802d5e6:	d102      	bne.n	802d5ee <_isatty_r+0x1a>
 802d5e8:	6823      	ldr	r3, [r4, #0]
 802d5ea:	b103      	cbz	r3, 802d5ee <_isatty_r+0x1a>
 802d5ec:	602b      	str	r3, [r5, #0]
 802d5ee:	bd38      	pop	{r3, r4, r5, pc}
 802d5f0:	20013200 	.word	0x20013200

0802d5f4 <_lseek_r>:
 802d5f4:	b538      	push	{r3, r4, r5, lr}
 802d5f6:	4c07      	ldr	r4, [pc, #28]	; (802d614 <_lseek_r+0x20>)
 802d5f8:	4605      	mov	r5, r0
 802d5fa:	4608      	mov	r0, r1
 802d5fc:	4611      	mov	r1, r2
 802d5fe:	2200      	movs	r2, #0
 802d600:	6022      	str	r2, [r4, #0]
 802d602:	461a      	mov	r2, r3
 802d604:	f7e7 fa22 	bl	8014a4c <_lseek>
 802d608:	1c43      	adds	r3, r0, #1
 802d60a:	d102      	bne.n	802d612 <_lseek_r+0x1e>
 802d60c:	6823      	ldr	r3, [r4, #0]
 802d60e:	b103      	cbz	r3, 802d612 <_lseek_r+0x1e>
 802d610:	602b      	str	r3, [r5, #0]
 802d612:	bd38      	pop	{r3, r4, r5, pc}
 802d614:	20013200 	.word	0x20013200

0802d618 <__malloc_lock>:
 802d618:	4770      	bx	lr

0802d61a <__malloc_unlock>:
 802d61a:	4770      	bx	lr

0802d61c <_malloc_usable_size_r>:
 802d61c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802d620:	1f18      	subs	r0, r3, #4
 802d622:	2b00      	cmp	r3, #0
 802d624:	bfbc      	itt	lt
 802d626:	580b      	ldrlt	r3, [r1, r0]
 802d628:	18c0      	addlt	r0, r0, r3
 802d62a:	4770      	bx	lr

0802d62c <_read_r>:
 802d62c:	b538      	push	{r3, r4, r5, lr}
 802d62e:	4c07      	ldr	r4, [pc, #28]	; (802d64c <_read_r+0x20>)
 802d630:	4605      	mov	r5, r0
 802d632:	4608      	mov	r0, r1
 802d634:	4611      	mov	r1, r2
 802d636:	2200      	movs	r2, #0
 802d638:	6022      	str	r2, [r4, #0]
 802d63a:	461a      	mov	r2, r3
 802d63c:	f7e7 f9a6 	bl	801498c <_read>
 802d640:	1c43      	adds	r3, r0, #1
 802d642:	d102      	bne.n	802d64a <_read_r+0x1e>
 802d644:	6823      	ldr	r3, [r4, #0]
 802d646:	b103      	cbz	r3, 802d64a <_read_r+0x1e>
 802d648:	602b      	str	r3, [r5, #0]
 802d64a:	bd38      	pop	{r3, r4, r5, pc}
 802d64c:	20013200 	.word	0x20013200

0802d650 <_init>:
 802d650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d652:	bf00      	nop
 802d654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d656:	bc08      	pop	{r3}
 802d658:	469e      	mov	lr, r3
 802d65a:	4770      	bx	lr

0802d65c <_fini>:
 802d65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d65e:	bf00      	nop
 802d660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d662:	bc08      	pop	{r3}
 802d664:	469e      	mov	lr, r3
 802d666:	4770      	bx	lr
